
blackBoard-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000715c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080073f4  080073f4  000083f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800742c  0800742c  0000842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007434  08007434  00008434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007438  08007438  00008438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800743c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003ac  24000010  0800744c  00009010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003bc  0800744c  000093bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014340  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002777  00000000  00000000  0001d37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d28  00000000  00000000  0001faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a1b  00000000  00000000  00020820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003541d  00000000  00000000  0002123b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013482  00000000  00000000  00056658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b841  00000000  00000000  00069ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c531b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003634  00000000  00000000  001c5360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000074  00000000  00000000  001c8994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080073dc 	.word	0x080073dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080073dc 	.word	0x080073dc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <FMC_TEST>:
#define SDRAM_SIZE 0x1000000


/* USER CODE END PTD */

void FMC_TEST() {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

	uint32_t fmcTestStart;
	uint32_t fmcTestStop;

	// Erase SDRAM Mem
	fmcTestStart = HAL_GetTick();
 800060a:	f001 f8fb 	bl	8001804 <HAL_GetTick>
 800060e:	60b8      	str	r0, [r7, #8]

	for (counter = 0x00; counter < SDRAM_SIZE; counter++){
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	e007      	b.n	8000626 <FMC_TEST+0x22>
		*(__IO uint8_t*) (SDRAM_ADDRESS_START + counter) = 0x0;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
	for (counter = 0x00; counter < SDRAM_SIZE; counter++){
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3301      	adds	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800062c:	d3f3      	bcc.n	8000616 <FMC_TEST+0x12>
	}
	fmcTestStop = HAL_GetTick() - fmcTestStart;
 800062e:	f001 f8e9 	bl	8001804 <HAL_GetTick>
 8000632:	4602      	mov	r2, r0
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	607b      	str	r3, [r7, #4]

	HAL_Delay(50);
 800063a:	2032      	movs	r0, #50	@ 0x32
 800063c:	f001 f8ee 	bl	800181c <HAL_Delay>

	// Write Data
	uint8_t testByte = 0x00;
 8000640:	2300      	movs	r3, #0
 8000642:	70fb      	strb	r3, [r7, #3]

	fmcTestStart = HAL_GetTick();
 8000644:	f001 f8de 	bl	8001804 <HAL_GetTick>
 8000648:	60b8      	str	r0, [r7, #8]

	for (counter = 0x00; counter < SDRAM_SIZE; counter++) {
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	e00c      	b.n	800066a <FMC_TEST+0x66>
	    *(__IO uint8_t*)(SDRAM_ADDRESS_START + counter) = (uint8_t)(testByte + counter);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	b2da      	uxtb	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800065a:	4619      	mov	r1, r3
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	4413      	add	r3, r2
 8000660:	b2db      	uxtb	r3, r3
 8000662:	700b      	strb	r3, [r1, #0]
	for (counter = 0x00; counter < SDRAM_SIZE; counter++) {
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000670:	d3ee      	bcc.n	8000650 <FMC_TEST+0x4c>
	}

	fmcTestStop = HAL_GetTick() - fmcTestStart;
 8000672:	f001 f8c7 	bl	8001804 <HAL_GetTick>
 8000676:	4602      	mov	r2, r0
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	607b      	str	r3, [r7, #4]

	HAL_Delay(50);
 800067e:	2032      	movs	r0, #50	@ 0x32
 8000680:	f001 f8cc 	bl	800181c <HAL_Delay>
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <FMC_Init>:

	HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
	*/
}

void FMC_Init() {
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
	  HAL_Delay(100);
 8000692:	2064      	movs	r0, #100	@ 0x64
 8000694:	f001 f8c2 	bl	800181c <HAL_Delay>
	  FMC_SDRAM_CommandTypeDef Command;
	  HAL_StatusTypeDef status;
		/* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
		/* Step 3: Configure a clock configuration enable command */

		Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000698:	2301      	movs	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
		Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 800069c:	2310      	movs	r3, #16
 800069e:	60bb      	str	r3, [r7, #8]
		Command.AutoRefreshNumber      = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
		Command.ModeRegisterDefinition = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
		HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80006ae:	4619      	mov	r1, r3
 80006b0:	4818      	ldr	r0, [pc, #96]	@ (8000714 <FMC_Init+0x88>)
 80006b2:	f004 ffcd 	bl	8005650 <HAL_SDRAM_SendCommand>
		HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 80006b6:	2001      	movs	r0, #1
 80006b8:	f001 f8b0 	bl	800181c <HAL_Delay>
		/* Step 5: Configure a PALL (precharge all) command */
		Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 80006bc:	2302      	movs	r3, #2
 80006be:	607b      	str	r3, [r7, #4]
		HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80006c6:	4619      	mov	r1, r3
 80006c8:	4812      	ldr	r0, [pc, #72]	@ (8000714 <FMC_Init+0x88>)
 80006ca:	f004 ffc1 	bl	8005650 <HAL_SDRAM_SendCommand>
		/* Step 6: Configure an Auto Refresh command */
		Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 80006ce:	2303      	movs	r3, #3
 80006d0:	607b      	str	r3, [r7, #4]
		Command.AutoRefreshNumber      = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
		HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80006dc:	4619      	mov	r1, r3
 80006de:	480d      	ldr	r0, [pc, #52]	@ (8000714 <FMC_Init+0x88>)
 80006e0:	f004 ffb6 	bl	8005650 <HAL_SDRAM_SendCommand>
		/* Step 7: Program the external memory mode register */
		Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 80006e4:	2304      	movs	r3, #4
 80006e6:	607b      	str	r3, [r7, #4]
		Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 80006e8:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80006ec:	613b      	str	r3, [r7, #16]
		HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80006f4:	4619      	mov	r1, r3
 80006f6:	4807      	ldr	r0, [pc, #28]	@ (8000714 <FMC_Init+0x88>)
 80006f8:	f004 ffaa 	bl	8005650 <HAL_SDRAM_SendCommand>
		/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
		/* Set the device refresh rate
		* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
		  	  	  = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
		status = HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1542);
 80006fc:	f240 6106 	movw	r1, #1542	@ 0x606
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <FMC_Init+0x88>)
 8000702:	f004 ffda 	bl	80056ba <HAL_SDRAM_ProgramRefreshRate>
 8000706:	4603      	mov	r3, r0
 8000708:	75fb      	strb	r3, [r7, #23]
}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	240000c0 	.word	0x240000c0

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800071c:	f000 f9da 	bl	8000ad4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f000 ffea 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f81a 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f000 f930 	bl	800098c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800072c:	f000 f892 	bl	8000854 <MX_USART2_UART_Init>
  //MX_TIM8_Init();
  //MX_DAC1_Init();



  MX_FMC_Init();
 8000730:	f000 f8dc 	bl	80008ec <MX_FMC_Init>


  FMC_Init();
 8000734:	f7ff ffaa 	bl	800068c <FMC_Init>


  FMC_TEST();
 8000738:	f7ff ff64 	bl	8000604 <FMC_TEST>
  /* USER CODE BEGIN 2 */




	 HAL_Delay(100);
 800073c:	2064      	movs	r0, #100	@ 0x64
 800073e:	f001 f86d 	bl	800181c <HAL_Delay>
	  if (test >= 4800000)
	  {
		  test = 0;
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  }*/
	  __WFI();
 8000742:	bf30      	wfi
	  processNetwork(&link, &ioPipe, BUFFER_SIZE);
 8000744:	2208      	movs	r2, #8
 8000746:	4903      	ldr	r1, [pc, #12]	@ (8000754 <main+0x3c>)
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <main+0x40>)
 800074a:	f000 fcd3 	bl	80010f4 <processNetwork>
	  __WFI();
 800074e:	bf00      	nop
 8000750:	e7f7      	b.n	8000742 <main+0x2a>
 8000752:	bf00      	nop
 8000754:	24000334 	.word	0x24000334
 8000758:	240000f4 	.word	0x240000f4

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b09c      	sub	sp, #112	@ 0x70
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000766:	224c      	movs	r2, #76	@ 0x4c
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f006 fdfc 	bl	8007368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2220      	movs	r2, #32
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f006 fdf6 	bl	8007368 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800077c:	2002      	movs	r0, #2
 800077e:	f002 f8bb 	bl	80028f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b31      	ldr	r3, [pc, #196]	@ (800084c <SystemClock_Config+0xf0>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a30      	ldr	r2, [pc, #192]	@ (800084c <SystemClock_Config+0xf0>)
 800078c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000790:	6193      	str	r3, [r2, #24]
 8000792:	4b2e      	ldr	r3, [pc, #184]	@ (800084c <SystemClock_Config+0xf0>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <SystemClock_Config+0xf4>)
 800079e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000850 <SystemClock_Config+0xf4>)
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <SystemClock_Config+0xf4>)
 80007aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007b4:	bf00      	nop
 80007b6:	4b25      	ldr	r3, [pc, #148]	@ (800084c <SystemClock_Config+0xf0>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007c2:	d1f8      	bne.n	80007b6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2340      	movs	r3, #64	@ 0x40
 80007ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d8:	2304      	movs	r3, #4
 80007da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80007dc:	233c      	movs	r3, #60	@ 0x3c
 80007de:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ec:	230c      	movs	r3, #12
 80007ee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 f8b5 	bl	800296c <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000808:	f000 f970 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	233f      	movs	r3, #63	@ 0x3f
 800080e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2303      	movs	r3, #3
 8000812:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000818:	2308      	movs	r3, #8
 800081a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800081c:	2340      	movs	r3, #64	@ 0x40
 800081e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000820:	2340      	movs	r3, #64	@ 0x40
 8000822:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000828:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800082a:	2340      	movs	r3, #64	@ 0x40
 800082c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2104      	movs	r1, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fcf4 	bl	8003220 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800083e:	f000 f955 	bl	8000aec <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3770      	adds	r7, #112	@ 0x70
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	58024800 	.word	0x58024800
 8000850:	58000400 	.word	0x58000400

08000854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 800085a:	4a23      	ldr	r2, [pc, #140]	@ (80008e8 <MX_USART2_UART_Init+0x94>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085e:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b1f      	ldr	r3, [pc, #124]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000896:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089c:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 800089e:	f004 ff34 	bl	800570a <HAL_UART_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008a8:	f000 f920 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 80008b0:	f006 fb8e 	bl	8006fd0 <HAL_UARTEx_SetTxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ba:	f000 f917 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4808      	ldr	r0, [pc, #32]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 80008c2:	f006 fbc3 	bl	800704c <HAL_UARTEx_SetRxFifoThreshold>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f000 f90e 	bl	8000aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_USART2_UART_Init+0x90>)
 80008d2:	f006 fb44 	bl	8006f5e <HAL_UARTEx_DisableFifoMode>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f906 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2400002c 	.word	0x2400002c
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000904:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <MX_FMC_Init+0x98>)
 8000906:	4a20      	ldr	r2, [pc, #128]	@ (8000988 <MX_FMC_Init+0x9c>)
 8000908:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800090a:	4b1e      	ldr	r3, [pc, #120]	@ (8000984 <MX_FMC_Init+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000910:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <MX_FMC_Init+0x98>)
 8000912:	2201      	movs	r2, #1
 8000914:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000916:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <MX_FMC_Init+0x98>)
 8000918:	2208      	movs	r2, #8
 800091a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <MX_FMC_Init+0x98>)
 800091e:	2210      	movs	r2, #16
 8000920:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000922:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <MX_FMC_Init+0x98>)
 8000924:	2240      	movs	r2, #64	@ 0x40
 8000926:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000928:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <MX_FMC_Init+0x98>)
 800092a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800092e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000930:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <MX_FMC_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000936:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <MX_FMC_Init+0x98>)
 8000938:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800093c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_FMC_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_FMC_Init+0x98>)
 8000946:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800094a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000950:	2307      	movs	r3, #7
 8000952:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000954:	2304      	movs	r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000958:	2307      	movs	r3, #7
 800095a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800095c:	2303      	movs	r3, #3
 800095e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000960:	2302      	movs	r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	@ (8000984 <MX_FMC_Init+0x98>)
 800096e:	f004 fe0f 	bl	8005590 <HAL_SDRAM_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000978:	f000 f8b8 	bl	8000aec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800097c:	bf00      	nop
 800097e:	3720      	adds	r7, #32
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	240000c0 	.word	0x240000c0
 8000988:	52004140 	.word	0x52004140

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	@ 0x30
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b49      	ldr	r3, [pc, #292]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	4a47      	ldr	r2, [pc, #284]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b2:	4b45      	ldr	r3, [pc, #276]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
 80009be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c0:	4b41      	ldr	r3, [pc, #260]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c6:	4a40      	ldr	r2, [pc, #256]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 80009c8:	f043 0320 	orr.w	r3, r3, #32
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d6:	f003 0320 	and.w	r3, r3, #32
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	4b3a      	ldr	r3, [pc, #232]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e4:	4a38      	ldr	r2, [pc, #224]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 80009e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ee:	4b36      	ldr	r3, [pc, #216]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b32      	ldr	r3, [pc, #200]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a02:	4a31      	ldr	r2, [pc, #196]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a20:	4a29      	ldr	r2, [pc, #164]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2a:	4b27      	ldr	r3, [pc, #156]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a38:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3e:	4a22      	ldr	r2, [pc, #136]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4e:	f003 0310 	and.w	r3, r3, #16
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <MX_GPIO_Init+0x13c>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a7a:	4814      	ldr	r0, [pc, #80]	@ (8000acc <MX_GPIO_Init+0x140>)
 8000a7c:	f001 ff22 	bl	80028c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <MX_GPIO_Init+0x140>)
 8000a9a:	f001 fd63 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a9e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_GPIO_Init+0x144>)
 8000abc:	f001 fd52 	bl	8002564 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3730      	adds	r7, #48	@ 0x30
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	58024400 	.word	0x58024400
 8000acc:	58020800 	.word	0x58020800
 8000ad0:	58020000 	.word	0x58020000

08000ad4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
void MPU_Config(void)
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	607b      	str	r3, [r7, #4]
	    HAL_MPU_ConfigRegion(&MPU_InitStruct);

	    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
	}

}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <topoSort>:
 *  ------------------------------------------------------------------ */
#include <string.h>
#include "nodeSort.h"

size_t topoSort(const dataLink *link, uint8_t *result)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0a8      	sub	sp, #160	@ 0xa0
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    uint8_t indeg[MAX_NODES] = {0};
 8000b02:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	811a      	strh	r2, [r3, #8]
    uint8_t adj[MAX_NODES][MAX_NODES] = {0};
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	2264      	movs	r2, #100	@ 0x64
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f006 fc26 	bl	8007368 <memset>
    uint8_t adjCnt[MAX_NODES] = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	811a      	strh	r2, [r3, #8]

    /* in‑degree & adjacency */
    for (uint8_t i = 0; i < link->nodeCount; ++i) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8000b2e:	e05b      	b.n	8000be8 <topoSort+0xf0>
        const node *n = &link->nodes[i];
 8000b30:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000b34:	222c      	movs	r2, #44	@ 0x2c
 8000b36:	fb02 f303 	mul.w	r3, r2, r3
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        for (uint8_t j = 0; j < n->numInputs; ++j) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8000b48:	e042      	b.n	8000bd0 <topoSort+0xd8>
            uint8_t src = n->inputs[j];
 8000b4a:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000b4e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000b52:	4413      	add	r3, r2
 8000b54:	799b      	ldrb	r3, [r3, #6]
 8000b56:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            if (src != 254 && src != 255 && src < link->nodeCount) {
 8000b5a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000b5e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b60:	d031      	beq.n	8000bc6 <topoSort+0xce>
 8000b62:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000b66:	2bff      	cmp	r3, #255	@ 0xff
 8000b68:	d02d      	beq.n	8000bc6 <topoSort+0xce>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8000b70:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d226      	bcs.n	8000bc6 <topoSort+0xce>
                indeg[i]++;
 8000b78:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000b7c:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8000b80:	443a      	add	r2, r7
 8000b82:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8000b86:	3201      	adds	r2, #1
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	33a0      	adds	r3, #160	@ 0xa0
 8000b8c:	443b      	add	r3, r7
 8000b8e:	f803 2c1c 	strb.w	r2, [r3, #-28]
                adj[src][adjCnt[src]++] = i;
 8000b92:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000b96:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000b9a:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 8000b9e:	4439      	add	r1, r7
 8000ba0:	f811 1c8c 	ldrb.w	r1, [r1, #-140]
 8000ba4:	1c48      	adds	r0, r1, #1
 8000ba6:	b2c0      	uxtb	r0, r0
 8000ba8:	33a0      	adds	r3, #160	@ 0xa0
 8000baa:	443b      	add	r3, r7
 8000bac:	f803 0c8c 	strb.w	r0, [r3, #-140]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	33a0      	adds	r3, #160	@ 0xa0
 8000bba:	443b      	add	r3, r7
 8000bbc:	440b      	add	r3, r1
 8000bbe:	3b80      	subs	r3, #128	@ 0x80
 8000bc0:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8000bc4:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < n->numInputs; ++j) {
 8000bc6:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000bca:	3301      	adds	r3, #1
 8000bcc:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8000bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000bd4:	789b      	ldrb	r3, [r3, #2]
 8000bd6:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d3b5      	bcc.n	8000b4a <topoSort+0x52>
    for (uint8_t i = 0; i < link->nodeCount; ++i) {
 8000bde:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000be2:	3301      	adds	r3, #1
 8000be4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8000bee:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d39c      	bcc.n	8000b30 <topoSort+0x38>
            }
        }
    }

    uint8_t Q[MAX_NODES], h = 0, t = 0, out = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
 8000c0e:	e017      	b.n	8000c40 <topoSort+0x148>
        if (indeg[i] == 0) Q[t++] = i;
 8000c10:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8000c14:	33a0      	adds	r3, #160	@ 0xa0
 8000c16:	443b      	add	r3, r7
 8000c18:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10a      	bne.n	8000c36 <topoSort+0x13e>
 8000c20:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	f887 209c 	strb.w	r2, [r7, #156]	@ 0x9c
 8000c2a:	33a0      	adds	r3, #160	@ 0xa0
 8000c2c:	443b      	add	r3, r7
 8000c2e:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 8000c32:	f803 2c98 	strb.w	r2, [r3, #-152]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8000c36:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8000c46:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3e0      	bcc.n	8000c10 <topoSort+0x118>

    while (h < t) {
 8000c4e:	e056      	b.n	8000cfe <topoSort+0x206>
        uint8_t curr = Q[h++];
 8000c50:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	f887 209d 	strb.w	r2, [r7, #157]	@ 0x9d
 8000c5a:	33a0      	adds	r3, #160	@ 0xa0
 8000c5c:	443b      	add	r3, r7
 8000c5e:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8000c62:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
        result[out++] = curr;
 8000c66:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	f887 209b 	strb.w	r2, [r7, #155]	@ 0x9b
 8000c70:	461a      	mov	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	f897 2098 	ldrb.w	r2, [r7, #152]	@ 0x98
 8000c7a:	701a      	strb	r2, [r3, #0]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 8000c82:	e032      	b.n	8000cea <topoSort+0x1f2>
            uint8_t child = adj[curr][k];
 8000c84:	f897 2098 	ldrb.w	r2, [r7, #152]	@ 0x98
 8000c88:	f897 1099 	ldrb.w	r1, [r7, #153]	@ 0x99
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	33a0      	adds	r3, #160	@ 0xa0
 8000c96:	443b      	add	r3, r7
 8000c98:	440b      	add	r3, r1
 8000c9a:	3b80      	subs	r3, #128	@ 0x80
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
            if (--indeg[child] == 0)
 8000ca2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000ca6:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8000caa:	443a      	add	r2, r7
 8000cac:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	b2d1      	uxtb	r1, r2
 8000cb4:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8000cb8:	443a      	add	r2, r7
 8000cba:	f802 1c1c 	strb.w	r1, [r2, #-28]
 8000cbe:	33a0      	adds	r3, #160	@ 0xa0
 8000cc0:	443b      	add	r3, r7
 8000cc2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10a      	bne.n	8000ce0 <topoSort+0x1e8>
                Q[t++] = child;
 8000cca:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	f887 209c 	strb.w	r2, [r7, #156]	@ 0x9c
 8000cd4:	33a0      	adds	r3, #160	@ 0xa0
 8000cd6:	443b      	add	r3, r7
 8000cd8:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000cdc:	f803 2c98 	strb.w	r2, [r3, #-152]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8000ce0:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 8000cea:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8000cee:	33a0      	adds	r3, #160	@ 0xa0
 8000cf0:	443b      	add	r3, r7
 8000cf2:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000cf6:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3c2      	bcc.n	8000c84 <topoSort+0x18c>
    while (h < t) {
 8000cfe:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8000d02:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3a2      	bcc.n	8000c50 <topoSort+0x158>
        }
    }
    return out; /* should equal nodeCount for an acyclic graph */
 8000d0a:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	37a0      	adds	r7, #160	@ 0xa0
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <addEffect>:
#include "process.h"
#include "nodeSort.h"

/* Effect helpers --------------------------------------------------- */
static inline void addEffect      (const float *in, float *out, int p)
{ for (int i = 0; i < BUFFER_SIZE; ++i) out[i] = in[i] + p; }
 8000d16:	b480      	push	{r7}
 8000d18:	b087      	sub	sp, #28
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e015      	b.n	8000d54 <addEffect+0x3e>
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	ed93 7a00 	vldr	s14, [r3]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	ee07 3a90 	vmov	s15, r3
 8000d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	4413      	add	r3, r2
 8000d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d4a:	edc3 7a00 	vstr	s15, [r3]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	2b07      	cmp	r3, #7
 8000d58:	dde6      	ble.n	8000d28 <addEffect+0x12>
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	371c      	adds	r7, #28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <subtractEffect>:

static inline void subtractEffect (const float *in, float *out, int p)
{ for (int i = 0; i < BUFFER_SIZE; ++i) out[i] = in[i] - p; }
 8000d68:	b480      	push	{r7}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e015      	b.n	8000da6 <subtractEffect+0x3e>
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4413      	add	r3, r2
 8000d82:	ed93 7a00 	vldr	s14, [r3]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	4413      	add	r3, r2
 8000d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d9c:	edc3 7a00 	vstr	s15, [r3]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	2b07      	cmp	r3, #7
 8000daa:	dde6      	ble.n	8000d7a <subtractEffect+0x12>
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	371c      	adds	r7, #28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <multiplyEffect>:

static inline void multiplyEffect (const float *in, float *out, int p)
{ for (int i = 0; i < BUFFER_SIZE; ++i) out[i] = in[i] * p; }
 8000dba:	b480      	push	{r7}
 8000dbc:	b087      	sub	sp, #28
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	e015      	b.n	8000df8 <multiplyEffect+0x3e>
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	ed93 7a00 	vldr	s14, [r3]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	ee07 3a90 	vmov	s15, r3
 8000dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	4413      	add	r3, r2
 8000dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dee:	edc3 7a00 	vstr	s15, [r3]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2b07      	cmp	r3, #7
 8000dfc:	dde6      	ble.n	8000dcc <multiplyEffect+0x12>
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <divideEffect>:

static inline void divideEffect   (const float *in, float *out, int p)
{ float k = p ? 1.0f/p : 0.0f; for (int i = 0; i < BUFFER_SIZE; ++i) out[i] = in[i] * k; }
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d009      	beq.n	8000e32 <divideEffect+0x26>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e30:	e001      	b.n	8000e36 <divideEffect+0x2a>
 8000e32:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8000e7c <divideEffect+0x70>
 8000e36:	edc7 7a04 	vstr	s15, [r7, #16]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	e012      	b.n	8000e66 <divideEffect+0x5a>
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	ed93 7a00 	vldr	s14, [r3]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	68ba      	ldr	r2, [r7, #8]
 8000e52:	4413      	add	r3, r2
 8000e54:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e5c:	edc3 7a00 	vstr	s15, [r3]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b07      	cmp	r3, #7
 8000e6a:	dde9      	ble.n	8000e40 <divideEffect+0x34>
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	371c      	adds	r7, #28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	00000000 	.word	0x00000000

08000e80 <mixEffect>:

static void mixEffect(float *const inputs[], float *out,
                      const float *w, uint8_t cnt)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	@ 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < BUFFER_SIZE; ++i) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	e04c      	b.n	8000f2e <mixEffect+0xae>
        float sum = 0.0f, tot = 0.0f;
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < cnt; ++j) {
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	74fb      	strb	r3, [r7, #19]
 8000ea4:	e026      	b.n	8000ef4 <mixEffect+0x74>
            sum += inputs[j][i] * w[j];
 8000ea6:	7cfb      	ldrb	r3, [r7, #19]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	4413      	add	r3, r2
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	ed93 7a00 	vldr	s14, [r3]
 8000eba:	7cfb      	ldrb	r3, [r7, #19]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eca:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed2:	edc7 7a06 	vstr	s15, [r7, #24]
            tot += w[j];
 8000ed6:	7cfb      	ldrb	r3, [r7, #19]
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	edd3 7a00 	vldr	s15, [r3]
 8000ee2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eea:	edc7 7a05 	vstr	s15, [r7, #20]
        for (uint8_t j = 0; j < cnt; ++j) {
 8000eee:	7cfb      	ldrb	r3, [r7, #19]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	74fb      	strb	r3, [r7, #19]
 8000ef4:	7cfa      	ldrb	r2, [r7, #19]
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d3d4      	bcc.n	8000ea6 <mixEffect+0x26>
        }
        out[i] = tot ? sum / tot : 0.0f;
 8000efc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f08:	d006      	beq.n	8000f18 <mixEffect+0x98>
 8000f0a:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f16:	e001      	b.n	8000f1c <mixEffect+0x9c>
 8000f18:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8000f44 <mixEffect+0xc4>
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	4413      	add	r3, r2
 8000f24:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < BUFFER_SIZE; ++i) {
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	ddaf      	ble.n	8000e94 <mixEffect+0x14>
    }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3724      	adds	r7, #36	@ 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	00000000 	.word	0x00000000

08000f48 <runGraph>:

/* Internal --------------------------------------------------------- */
static void runGraph(dataLink *link, const uint8_t *order, size_t n, pipeDef *pipe)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	@ 0x38
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
    float *inPtr[MAX_INPUTS];

    for (size_t idx = 0; idx < n; ++idx) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f5a:	e0c0      	b.n	80010de <runGraph+0x196>
        node *nd = &link->nodes[order[idx]];
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	232c      	movs	r3, #44	@ 0x2c
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Map inputs */
        for (uint8_t i = 0; i < nd->numInputs; ++i) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000f78:	e031      	b.n	8000fde <runGraph+0x96>
            uint8_t src = nd->inputs[i];
 8000f7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f80:	4413      	add	r3, r2
 8000f82:	799b      	ldrb	r3, [r3, #6]
 8000f84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            inPtr[i] = (src == 254) ? pipe->in1
                     : (src == 255) ? pipe->in2
 8000f88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000f8c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f8e:	d101      	bne.n	8000f94 <runGraph+0x4c>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	e018      	b.n	8000fc6 <runGraph+0x7e>
                     : (src < link->nodeCount) ? link->nodes[src].processBuffer
 8000f94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000f98:	2bff      	cmp	r3, #255	@ 0xff
 8000f9a:	d102      	bne.n	8000fa2 <runGraph+0x5a>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	3320      	adds	r3, #32
 8000fa0:	e011      	b.n	8000fc6 <runGraph+0x7e>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
                     : NULL;
 8000fa8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d209      	bcs.n	8000fc4 <runGraph+0x7c>
                     : (src < link->nodeCount) ? link->nodes[src].processBuffer
 8000fb0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
                     : NULL;
 8000fb4:	222c      	movs	r2, #44	@ 0x2c
 8000fb6:	fb02 f303 	mul.w	r3, r2, r3
 8000fba:	3308      	adds	r3, #8
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	e000      	b.n	8000fc6 <runGraph+0x7e>
 8000fc4:	2300      	movs	r3, #0
            inPtr[i] = (src == 254) ? pipe->in1
 8000fc6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	3238      	adds	r2, #56	@ 0x38
 8000fce:	443a      	add	r2, r7
 8000fd0:	f842 3c1c 	str.w	r3, [r2, #-28]
        for (uint8_t i = 0; i < nd->numInputs; ++i) {
 8000fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fd8:	3301      	adds	r3, #1
 8000fda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe0:	789b      	ldrb	r3, [r3, #2]
 8000fe2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d3c7      	bcc.n	8000f7a <runGraph+0x32>
        }

        /* Process */
        switch (nd->effectId) {
 8000fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	dc14      	bgt.n	800101c <runGraph+0xd4>
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db69      	blt.n	80010ca <runGraph+0x182>
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d867      	bhi.n	80010ca <runGraph+0x182>
 8000ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8001000 <runGraph+0xb8>)
 8000ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001000:	08001023 	.word	0x08001023
 8001004:	08001037 	.word	0x08001037
 8001008:	0800104b 	.word	0x0800104b
 800100c:	0800105f 	.word	0x0800105f
 8001010:	080010cb 	.word	0x080010cb
 8001014:	080010cb 	.word	0x080010cb
 8001018:	08001073 	.word	0x08001073
 800101c:	2bff      	cmp	r3, #255	@ 0xff
 800101e:	d154      	bne.n	80010ca <runGraph+0x182>
        case 255: /* passthrough: already pre‑filled */ break;
 8001020:	e05a      	b.n	80010d8 <runGraph+0x190>
        case 0:  addEffect     (inPtr[0], nd->processBuffer, nd->params[0]); break;
 8001022:	69f8      	ldr	r0, [r7, #28]
 8001024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001026:	f103 010c 	add.w	r1, r3, #12
 800102a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102c:	78db      	ldrb	r3, [r3, #3]
 800102e:	461a      	mov	r2, r3
 8001030:	f7ff fe71 	bl	8000d16 <addEffect>
 8001034:	e050      	b.n	80010d8 <runGraph+0x190>
        case 1:  subtractEffect(inPtr[0], nd->processBuffer, nd->params[0]); break;
 8001036:	69f8      	ldr	r0, [r7, #28]
 8001038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103a:	f103 010c 	add.w	r1, r3, #12
 800103e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001040:	78db      	ldrb	r3, [r3, #3]
 8001042:	461a      	mov	r2, r3
 8001044:	f7ff fe90 	bl	8000d68 <subtractEffect>
 8001048:	e046      	b.n	80010d8 <runGraph+0x190>
        case 2:  multiplyEffect(inPtr[0], nd->processBuffer, nd->params[0]); break;
 800104a:	69f8      	ldr	r0, [r7, #28]
 800104c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104e:	f103 010c 	add.w	r1, r3, #12
 8001052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001054:	78db      	ldrb	r3, [r3, #3]
 8001056:	461a      	mov	r2, r3
 8001058:	f7ff feaf 	bl	8000dba <multiplyEffect>
 800105c:	e03c      	b.n	80010d8 <runGraph+0x190>
        case 3:  divideEffect  (inPtr[0], nd->processBuffer, nd->params[0]); break;
 800105e:	69f8      	ldr	r0, [r7, #28]
 8001060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001062:	f103 010c 	add.w	r1, r3, #12
 8001066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001068:	78db      	ldrb	r3, [r3, #3]
 800106a:	461a      	mov	r2, r3
 800106c:	f7ff fece 	bl	8000e0c <divideEffect>
 8001070:	e032      	b.n	80010d8 <runGraph+0x190>
        case 6: {
            float w[MAX_INPUTS];
            for (uint8_t i = 0; i < nd->numInputs; ++i) w[i] = nd->params[i];
 8001072:	2300      	movs	r3, #0
 8001074:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001078:	e015      	b.n	80010a6 <runGraph+0x15e>
 800107a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800107e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001080:	4413      	add	r3, r2
 8001082:	78da      	ldrb	r2, [r3, #3]
 8001084:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001088:	ee07 2a90 	vmov	s15, r2
 800108c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	3338      	adds	r3, #56	@ 0x38
 8001094:	443b      	add	r3, r7
 8001096:	3b28      	subs	r3, #40	@ 0x28
 8001098:	edc3 7a00 	vstr	s15, [r3]
 800109c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80010a0:	3301      	adds	r3, #1
 80010a2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80010a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a8:	789b      	ldrb	r3, [r3, #2]
 80010aa:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3e3      	bcc.n	800107a <runGraph+0x132>
            mixEffect(inPtr, nd->processBuffer, w, nd->numInputs);
 80010b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b4:	f103 010c 	add.w	r1, r3, #12
 80010b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ba:	789b      	ldrb	r3, [r3, #2]
 80010bc:	f107 0210 	add.w	r2, r7, #16
 80010c0:	f107 001c 	add.w	r0, r7, #28
 80010c4:	f7ff fedc 	bl	8000e80 <mixEffect>
            break;
 80010c8:	e006      	b.n	80010d8 <runGraph+0x190>
        }
        default:
            memset(nd->processBuffer, 0, BUFFER_SIZE*sizeof(float));
 80010ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010cc:	330c      	adds	r3, #12
 80010ce:	2220      	movs	r2, #32
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f006 f948 	bl	8007368 <memset>
    for (size_t idx = 0; idx < n; ++idx) {
 80010d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010da:	3301      	adds	r3, #1
 80010dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80010de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	f4ff af3a 	bcc.w	8000f5c <runGraph+0x14>
        }
    }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3738      	adds	r7, #56	@ 0x38
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop

080010f4 <processNetwork>:

/* Public ----------------------------------------------------------- */
void processNetwork(dataLink *link, pipeDef *pipe, size_t len)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
    if (len > BUFFER_SIZE) len = BUFFER_SIZE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b08      	cmp	r3, #8
 8001104:	d901      	bls.n	800110a <processNetwork+0x16>
 8001106:	2308      	movs	r3, #8
 8001108:	607b      	str	r3, [r7, #4]

    /* preload first two nodes for passthrough */
    if (link->nodeCount > 0)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <processNetwork+0x32>
        memcpy(link->nodes[0].processBuffer, pipe->in1, len*sizeof(float));
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f103 000c 	add.w	r0, r3, #12
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	461a      	mov	r2, r3
 8001122:	f006 f94d 	bl	80073c0 <memcpy>
    if (link->nodeCount > 1)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 800112c:	2b01      	cmp	r3, #1
 800112e:	d90a      	bls.n	8001146 <processNetwork+0x52>
        memcpy(link->nodes[1].processBuffer, pipe->in2, len*sizeof(float));
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	f103 0120 	add.w	r1, r3, #32
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	461a      	mov	r2, r3
 8001142:	f006 f93d 	bl	80073c0 <memcpy>

    uint8_t order[MAX_NODES];
    size_t count = topoSort(link, order);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff fcd3 	bl	8000af8 <topoSort>
 8001152:	61f8      	str	r0, [r7, #28]

    runGraph(link, order, count, pipe);
 8001154:	f107 0110 	add.w	r1, r7, #16
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f7ff fef3 	bl	8000f48 <runGraph>

    /* outputs */
    if (link->nodeCount > 0)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00a      	beq.n	8001182 <processNetwork+0x8e>
        memcpy(pipe->out1, link->nodes[0].processBuffer, len*sizeof(float));
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f103 010c 	add.w	r1, r3, #12
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	461a      	mov	r2, r3
 800117e:	f006 f91f 	bl	80073c0 <memcpy>
    if (link->nodeCount > 1)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8001188:	2b01      	cmp	r3, #1
 800118a:	d90a      	bls.n	80011a2 <processNetwork+0xae>
        memcpy(pipe->out2, link->nodes[1].processBuffer, len*sizeof(float));
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	461a      	mov	r2, r3
 800119e:	f006 f90f 	bl	80073c0 <memcpy>
}
 80011a2:	bf00      	nop
 80011a4:	3720      	adds	r7, #32
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <HAL_MspInit+0x30>)
 80011b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011b8:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <HAL_MspInit+0x30>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_MspInit+0x30>)
 80011c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	58024400 	.word	0x58024400

080011e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b0bc      	sub	sp, #240	@ 0xf0
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	22c0      	movs	r2, #192	@ 0xc0
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f006 f8b1 	bl	8007368 <memset>
  if(huart->Instance==USART2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a3c      	ldr	r2, [pc, #240]	@ (80012fc <HAL_UART_MspInit+0x11c>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d171      	bne.n	80012f4 <HAL_UART_MspInit+0x114>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001210:	f04f 0202 	mov.w	r2, #2
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fb86 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001232:	f7ff fc5b 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001236:	4b32      	ldr	r3, [pc, #200]	@ (8001300 <HAL_UART_MspInit+0x120>)
 8001238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800123c:	4a30      	ldr	r2, [pc, #192]	@ (8001300 <HAL_UART_MspInit+0x120>)
 800123e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001242:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001246:	4b2e      	ldr	r3, [pc, #184]	@ (8001300 <HAL_UART_MspInit+0x120>)
 8001248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800124c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <HAL_UART_MspInit+0x120>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125a:	4a29      	ldr	r2, [pc, #164]	@ (8001300 <HAL_UART_MspInit+0x120>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_UART_MspInit+0x120>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <HAL_UART_MspInit+0x120>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	4a21      	ldr	r2, [pc, #132]	@ (8001300 <HAL_UART_MspInit+0x120>)
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <HAL_UART_MspInit+0x120>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001290:	2304      	movs	r3, #4
 8001292:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a8:	2307      	movs	r3, #7
 80012aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012b2:	4619      	mov	r1, r3
 80012b4:	4813      	ldr	r0, [pc, #76]	@ (8001304 <HAL_UART_MspInit+0x124>)
 80012b6:	f001 f955 	bl	8002564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ba:	2340      	movs	r3, #64	@ 0x40
 80012bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d2:	2307      	movs	r3, #7
 80012d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012dc:	4619      	mov	r1, r3
 80012de:	480a      	ldr	r0, [pc, #40]	@ (8001308 <HAL_UART_MspInit+0x128>)
 80012e0:	f001 f940 	bl	8002564 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	2026      	movs	r0, #38	@ 0x26
 80012ea:	f000 fba2 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ee:	2026      	movs	r0, #38	@ 0x26
 80012f0:	f000 fbb9 	bl	8001a66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012f4:	bf00      	nop
 80012f6:	37f0      	adds	r7, #240	@ 0xf0
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40004400 	.word	0x40004400
 8001300:	58024400 	.word	0x58024400
 8001304:	58020000 	.word	0x58020000
 8001308:	58020c00 	.word	0x58020c00

0800130c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800130c:	b580      	push	{r7, lr}
 800130e:	b0b8      	sub	sp, #224	@ 0xe0
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001312:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001322:	4b55      	ldr	r3, [pc, #340]	@ (8001478 <HAL_FMC_MspInit+0x16c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 80a1 	bne.w	800146e <HAL_FMC_MspInit+0x162>
    return;
  }
  FMC_Initialized = 1;
 800132c:	4b52      	ldr	r3, [pc, #328]	@ (8001478 <HAL_FMC_MspInit+0x16c>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	22c0      	movs	r2, #192	@ 0xc0
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f006 f814 	bl	8007368 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001340:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800134c:	2300      	movs	r3, #0
 800134e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4618      	mov	r0, r3
 8001356:	f002 faef 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8001360:	f7ff fbc4 	bl	8000aec <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001364:	4b45      	ldr	r3, [pc, #276]	@ (800147c <HAL_FMC_MspInit+0x170>)
 8001366:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800136a:	4a44      	ldr	r2, [pc, #272]	@ (800147c <HAL_FMC_MspInit+0x170>)
 800136c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001370:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001374:	4b41      	ldr	r3, [pc, #260]	@ (800147c <HAL_FMC_MspInit+0x170>)
 8001376:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800137a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001382:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001386:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800139c:	230c      	movs	r3, #12
 800139e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013a6:	4619      	mov	r1, r3
 80013a8:	4835      	ldr	r0, [pc, #212]	@ (8001480 <HAL_FMC_MspInit+0x174>)
 80013aa:	f001 f8db 	bl	8002564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80013ae:	232c      	movs	r3, #44	@ 0x2c
 80013b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013c6:	230c      	movs	r3, #12
 80013c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013cc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013d0:	4619      	mov	r1, r3
 80013d2:	482c      	ldr	r0, [pc, #176]	@ (8001484 <HAL_FMC_MspInit+0x178>)
 80013d4:	f001 f8c6 	bl	8002564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80013d8:	f248 1337 	movw	r3, #33079	@ 0x8137
 80013dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f2:	230c      	movs	r3, #12
 80013f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013fc:	4619      	mov	r1, r3
 80013fe:	4822      	ldr	r0, [pc, #136]	@ (8001488 <HAL_FMC_MspInit+0x17c>)
 8001400:	f001 f8b0 	bl	8002564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001404:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001408:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800141e:	230c      	movs	r3, #12
 8001420:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001424:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001428:	4619      	mov	r1, r3
 800142a:	4818      	ldr	r0, [pc, #96]	@ (800148c <HAL_FMC_MspInit+0x180>)
 800142c:	f001 f89a 	bl	8002564 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001430:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001434:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800144a:	230c      	movs	r3, #12
 800144c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001450:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001454:	4619      	mov	r1, r3
 8001456:	480e      	ldr	r0, [pc, #56]	@ (8001490 <HAL_FMC_MspInit+0x184>)
 8001458:	f001 f884 	bl	8002564 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	2030      	movs	r0, #48	@ 0x30
 8001462:	f000 fae6 	bl	8001a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8001466:	2030      	movs	r0, #48	@ 0x30
 8001468:	f000 fafd 	bl	8001a66 <HAL_NVIC_EnableIRQ>
 800146c:	e000      	b.n	8001470 <HAL_FMC_MspInit+0x164>
    return;
 800146e:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001470:	37e0      	adds	r7, #224	@ 0xe0
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	240003b4 	.word	0x240003b4
 800147c:	58024400 	.word	0x58024400
 8001480:	58021400 	.word	0x58021400
 8001484:	58021c00 	.word	0x58021c00
 8001488:	58021800 	.word	0x58021800
 800148c:	58021000 	.word	0x58021000
 8001490:	58020c00 	.word	0x58020c00

08001494 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800149c:	f7ff ff36 	bl	800130c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fe:	f000 f96d 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <USART2_IRQHandler+0x10>)
 800150e:	f004 f94d 	bl	80057ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2400002c 	.word	0x2400002c

0800151c <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <FMC_IRQHandler+0x10>)
 8001522:	f004 f871 	bl	8005608 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	240000c0 	.word	0x240000c0

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001534:	4b43      	ldr	r3, [pc, #268]	@ (8001644 <SystemInit+0x114>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153a:	4a42      	ldr	r2, [pc, #264]	@ (8001644 <SystemInit+0x114>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001544:	4b40      	ldr	r3, [pc, #256]	@ (8001648 <SystemInit+0x118>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	2b06      	cmp	r3, #6
 800154e:	d807      	bhi.n	8001560 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001550:	4b3d      	ldr	r3, [pc, #244]	@ (8001648 <SystemInit+0x118>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 030f 	bic.w	r3, r3, #15
 8001558:	4a3b      	ldr	r2, [pc, #236]	@ (8001648 <SystemInit+0x118>)
 800155a:	f043 0307 	orr.w	r3, r3, #7
 800155e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001560:	4b3a      	ldr	r3, [pc, #232]	@ (800164c <SystemInit+0x11c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a39      	ldr	r2, [pc, #228]	@ (800164c <SystemInit+0x11c>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800156c:	4b37      	ldr	r3, [pc, #220]	@ (800164c <SystemInit+0x11c>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001572:	4b36      	ldr	r3, [pc, #216]	@ (800164c <SystemInit+0x11c>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4935      	ldr	r1, [pc, #212]	@ (800164c <SystemInit+0x11c>)
 8001578:	4b35      	ldr	r3, [pc, #212]	@ (8001650 <SystemInit+0x120>)
 800157a:	4013      	ands	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800157e:	4b32      	ldr	r3, [pc, #200]	@ (8001648 <SystemInit+0x118>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800158a:	4b2f      	ldr	r3, [pc, #188]	@ (8001648 <SystemInit+0x118>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 030f 	bic.w	r3, r3, #15
 8001592:	4a2d      	ldr	r2, [pc, #180]	@ (8001648 <SystemInit+0x118>)
 8001594:	f043 0307 	orr.w	r3, r3, #7
 8001598:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800159a:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <SystemInit+0x11c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015a0:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <SystemInit+0x11c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015a6:	4b29      	ldr	r3, [pc, #164]	@ (800164c <SystemInit+0x11c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015ac:	4b27      	ldr	r3, [pc, #156]	@ (800164c <SystemInit+0x11c>)
 80015ae:	4a29      	ldr	r2, [pc, #164]	@ (8001654 <SystemInit+0x124>)
 80015b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015b2:	4b26      	ldr	r3, [pc, #152]	@ (800164c <SystemInit+0x11c>)
 80015b4:	4a28      	ldr	r2, [pc, #160]	@ (8001658 <SystemInit+0x128>)
 80015b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015b8:	4b24      	ldr	r3, [pc, #144]	@ (800164c <SystemInit+0x11c>)
 80015ba:	4a28      	ldr	r2, [pc, #160]	@ (800165c <SystemInit+0x12c>)
 80015bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015be:	4b23      	ldr	r3, [pc, #140]	@ (800164c <SystemInit+0x11c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015c4:	4b21      	ldr	r3, [pc, #132]	@ (800164c <SystemInit+0x11c>)
 80015c6:	4a25      	ldr	r2, [pc, #148]	@ (800165c <SystemInit+0x12c>)
 80015c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ca:	4b20      	ldr	r3, [pc, #128]	@ (800164c <SystemInit+0x11c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015d0:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <SystemInit+0x11c>)
 80015d2:	4a22      	ldr	r2, [pc, #136]	@ (800165c <SystemInit+0x12c>)
 80015d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <SystemInit+0x11c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <SystemInit+0x11c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1a      	ldr	r2, [pc, #104]	@ (800164c <SystemInit+0x11c>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <SystemInit+0x11c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <SystemInit+0x130>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <SystemInit+0x134>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015fa:	d202      	bcs.n	8001602 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <SystemInit+0x138>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <SystemInit+0x11c>)
 8001604:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001608:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d113      	bne.n	8001638 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <SystemInit+0x11c>)
 8001612:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001616:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <SystemInit+0x11c>)
 8001618:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800161c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <SystemInit+0x13c>)
 8001622:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001626:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001628:	4b08      	ldr	r3, [pc, #32]	@ (800164c <SystemInit+0x11c>)
 800162a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800162e:	4a07      	ldr	r2, [pc, #28]	@ (800164c <SystemInit+0x11c>)
 8001630:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001634:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00
 8001648:	52002000 	.word	0x52002000
 800164c:	58024400 	.word	0x58024400
 8001650:	eaf6ed7f 	.word	0xeaf6ed7f
 8001654:	02020200 	.word	0x02020200
 8001658:	01ff0000 	.word	0x01ff0000
 800165c:	01010280 	.word	0x01010280
 8001660:	5c001000 	.word	0x5c001000
 8001664:	ffff0000 	.word	0xffff0000
 8001668:	51008108 	.word	0x51008108
 800166c:	52004000 	.word	0x52004000

08001670 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <ExitRun0Mode+0x2c>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4a08      	ldr	r2, [pc, #32]	@ (800169c <ExitRun0Mode+0x2c>)
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001680:	bf00      	nop
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <ExitRun0Mode+0x2c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f9      	beq.n	8001682 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	58024800 	.word	0x58024800

080016a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016a0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80016dc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80016a4:	f7ff ffe4 	bl	8001670 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016a8:	f7ff ff42 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ac:	480c      	ldr	r0, [pc, #48]	@ (80016e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ae:	490d      	ldr	r1, [pc, #52]	@ (80016e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c4:	4c0a      	ldr	r4, [pc, #40]	@ (80016f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d2:	f005 fe51 	bl	8007378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d6:	f7ff f81f 	bl	8000718 <main>
  bx  lr
 80016da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016e4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80016e8:	0800743c 	.word	0x0800743c
  ldr r2, =_sbss
 80016ec:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80016f0:	240003bc 	.word	0x240003bc

080016f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC3_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fe:	2003      	movs	r0, #3
 8001700:	f000 f98c 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001704:	f001 ff42 	bl	800358c <HAL_RCC_GetSysClockFreq>
 8001708:	4602      	mov	r2, r0
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_Init+0x68>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	4913      	ldr	r1, [pc, #76]	@ (8001764 <HAL_Init+0x6c>)
 8001716:	5ccb      	ldrb	r3, [r1, r3]
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	fa22 f303 	lsr.w	r3, r2, r3
 8001720:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <HAL_Init+0x68>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	4a0e      	ldr	r2, [pc, #56]	@ (8001764 <HAL_Init+0x6c>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	4a0b      	ldr	r2, [pc, #44]	@ (8001768 <HAL_Init+0x70>)
 800173a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800173c:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <HAL_Init+0x74>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001742:	200f      	movs	r0, #15
 8001744:	f000 f814 	bl	8001770 <HAL_InitTick>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e002      	b.n	8001758 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001752:	f7ff fd2b 	bl	80011ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	58024400 	.word	0x58024400
 8001764:	080073f4 	.word	0x080073f4
 8001768:	24000004 	.word	0x24000004
 800176c:	24000000 	.word	0x24000000

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001778:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <HAL_InitTick+0x60>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e021      	b.n	80017c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001784:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <HAL_InitTick+0x64>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <HAL_InitTick+0x60>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f971 	bl	8001a82 <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f93b 	bl	8001a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	@ (80017d8 <HAL_InitTick+0x68>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	2400000c 	.word	0x2400000c
 80017d4:	24000000 	.word	0x24000000
 80017d8:	24000008 	.word	0x24000008

080017dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	2400000c 	.word	0x2400000c
 8001800:	240003b8 	.word	0x240003b8

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	240003b8 	.word	0x240003b8

0800181c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff ffee 	bl	8001804 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d005      	beq.n	8001842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HAL_Delay+0x44>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001842:	bf00      	nop
 8001844:	f7ff ffde 	bl	8001804 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d8f7      	bhi.n	8001844 <HAL_Delay+0x28>
  {
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2400000c 	.word	0x2400000c

08001864 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <HAL_GetREVID+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0c1b      	lsrs	r3, r3, #16
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	5c001000 	.word	0x5c001000

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <__NVIC_SetPriorityGrouping+0x40>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <__NVIC_SetPriorityGrouping+0x40>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00
 80018c0:	05fa0000 	.word	0x05fa0000

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4907      	ldr	r1, [pc, #28]	@ (8001918 <__NVIC_EnableIRQ+0x38>)
 80018fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	@ (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	@ (800196c <__NVIC_SetPriority+0x50>)
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	@ 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	@ 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f7ff ff8e 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff29 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff40 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff90 	bl	8001970 <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5f 	bl	800191c <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff33 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa4 	bl	80019d8 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff feae 	bl	8001804 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e2dc      	b.n	800206e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d008      	beq.n	8001ad2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2280      	movs	r2, #128	@ 0x80
 8001ac4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e2cd      	b.n	800206e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a76      	ldr	r2, [pc, #472]	@ (8001cb0 <HAL_DMA_Abort+0x214>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d04a      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a74      	ldr	r2, [pc, #464]	@ (8001cb4 <HAL_DMA_Abort+0x218>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d045      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a73      	ldr	r2, [pc, #460]	@ (8001cb8 <HAL_DMA_Abort+0x21c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d040      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a71      	ldr	r2, [pc, #452]	@ (8001cbc <HAL_DMA_Abort+0x220>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d03b      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a70      	ldr	r2, [pc, #448]	@ (8001cc0 <HAL_DMA_Abort+0x224>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d036      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6e      	ldr	r2, [pc, #440]	@ (8001cc4 <HAL_DMA_Abort+0x228>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d031      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a6d      	ldr	r2, [pc, #436]	@ (8001cc8 <HAL_DMA_Abort+0x22c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d02c      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8001ccc <HAL_DMA_Abort+0x230>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d027      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a6a      	ldr	r2, [pc, #424]	@ (8001cd0 <HAL_DMA_Abort+0x234>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d022      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a68      	ldr	r2, [pc, #416]	@ (8001cd4 <HAL_DMA_Abort+0x238>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01d      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a67      	ldr	r2, [pc, #412]	@ (8001cd8 <HAL_DMA_Abort+0x23c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d018      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a65      	ldr	r2, [pc, #404]	@ (8001cdc <HAL_DMA_Abort+0x240>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a64      	ldr	r2, [pc, #400]	@ (8001ce0 <HAL_DMA_Abort+0x244>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00e      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a62      	ldr	r2, [pc, #392]	@ (8001ce4 <HAL_DMA_Abort+0x248>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d009      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a61      	ldr	r2, [pc, #388]	@ (8001ce8 <HAL_DMA_Abort+0x24c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <HAL_DMA_Abort+0xd6>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a5f      	ldr	r2, [pc, #380]	@ (8001cec <HAL_DMA_Abort+0x250>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_DMA_Abort+0xda>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_DMA_Abort+0xdc>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 021e 	bic.w	r2, r2, #30
 8001b8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e00a      	b.n	8001bba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 020e 	bic.w	r2, r2, #14
 8001bb2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8001cb0 <HAL_DMA_Abort+0x214>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d072      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8001cb4 <HAL_DMA_Abort+0x218>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d06d      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a39      	ldr	r2, [pc, #228]	@ (8001cb8 <HAL_DMA_Abort+0x21c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d068      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a37      	ldr	r2, [pc, #220]	@ (8001cbc <HAL_DMA_Abort+0x220>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d063      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a36      	ldr	r2, [pc, #216]	@ (8001cc0 <HAL_DMA_Abort+0x224>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d05e      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a34      	ldr	r2, [pc, #208]	@ (8001cc4 <HAL_DMA_Abort+0x228>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d059      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a33      	ldr	r2, [pc, #204]	@ (8001cc8 <HAL_DMA_Abort+0x22c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d054      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a31      	ldr	r2, [pc, #196]	@ (8001ccc <HAL_DMA_Abort+0x230>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d04f      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a30      	ldr	r2, [pc, #192]	@ (8001cd0 <HAL_DMA_Abort+0x234>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04a      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd4 <HAL_DMA_Abort+0x238>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d045      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2d      	ldr	r2, [pc, #180]	@ (8001cd8 <HAL_DMA_Abort+0x23c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d040      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cdc <HAL_DMA_Abort+0x240>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d03b      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce0 <HAL_DMA_Abort+0x244>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d036      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a28      	ldr	r2, [pc, #160]	@ (8001ce4 <HAL_DMA_Abort+0x248>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d031      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a27      	ldr	r2, [pc, #156]	@ (8001ce8 <HAL_DMA_Abort+0x24c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d02c      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a25      	ldr	r2, [pc, #148]	@ (8001cec <HAL_DMA_Abort+0x250>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d027      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a24      	ldr	r2, [pc, #144]	@ (8001cf0 <HAL_DMA_Abort+0x254>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a22      	ldr	r2, [pc, #136]	@ (8001cf4 <HAL_DMA_Abort+0x258>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a21      	ldr	r2, [pc, #132]	@ (8001cf8 <HAL_DMA_Abort+0x25c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d018      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cfc <HAL_DMA_Abort+0x260>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1e      	ldr	r2, [pc, #120]	@ (8001d00 <HAL_DMA_Abort+0x264>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1c      	ldr	r2, [pc, #112]	@ (8001d04 <HAL_DMA_Abort+0x268>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d08 <HAL_DMA_Abort+0x26c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_DMA_Abort+0x20e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_DMA_Abort+0x270>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d132      	bne.n	8001d10 <HAL_DMA_Abort+0x274>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e031      	b.n	8001d12 <HAL_DMA_Abort+0x276>
 8001cae:	bf00      	nop
 8001cb0:	40020010 	.word	0x40020010
 8001cb4:	40020028 	.word	0x40020028
 8001cb8:	40020040 	.word	0x40020040
 8001cbc:	40020058 	.word	0x40020058
 8001cc0:	40020070 	.word	0x40020070
 8001cc4:	40020088 	.word	0x40020088
 8001cc8:	400200a0 	.word	0x400200a0
 8001ccc:	400200b8 	.word	0x400200b8
 8001cd0:	40020410 	.word	0x40020410
 8001cd4:	40020428 	.word	0x40020428
 8001cd8:	40020440 	.word	0x40020440
 8001cdc:	40020458 	.word	0x40020458
 8001ce0:	40020470 	.word	0x40020470
 8001ce4:	40020488 	.word	0x40020488
 8001ce8:	400204a0 	.word	0x400204a0
 8001cec:	400204b8 	.word	0x400204b8
 8001cf0:	58025408 	.word	0x58025408
 8001cf4:	5802541c 	.word	0x5802541c
 8001cf8:	58025430 	.word	0x58025430
 8001cfc:	58025444 	.word	0x58025444
 8001d00:	58025458 	.word	0x58025458
 8001d04:	5802546c 	.word	0x5802546c
 8001d08:	58025480 	.word	0x58025480
 8001d0c:	58025494 	.word	0x58025494
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6d      	ldr	r2, [pc, #436]	@ (8001ee0 <HAL_DMA_Abort+0x444>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d04a      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a6b      	ldr	r2, [pc, #428]	@ (8001ee4 <HAL_DMA_Abort+0x448>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d045      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6a      	ldr	r2, [pc, #424]	@ (8001ee8 <HAL_DMA_Abort+0x44c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d040      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a68      	ldr	r2, [pc, #416]	@ (8001eec <HAL_DMA_Abort+0x450>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d03b      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a67      	ldr	r2, [pc, #412]	@ (8001ef0 <HAL_DMA_Abort+0x454>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d036      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a65      	ldr	r2, [pc, #404]	@ (8001ef4 <HAL_DMA_Abort+0x458>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d031      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a64      	ldr	r2, [pc, #400]	@ (8001ef8 <HAL_DMA_Abort+0x45c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d02c      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a62      	ldr	r2, [pc, #392]	@ (8001efc <HAL_DMA_Abort+0x460>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d027      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a61      	ldr	r2, [pc, #388]	@ (8001f00 <HAL_DMA_Abort+0x464>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d022      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a5f      	ldr	r2, [pc, #380]	@ (8001f04 <HAL_DMA_Abort+0x468>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01d      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a5e      	ldr	r2, [pc, #376]	@ (8001f08 <HAL_DMA_Abort+0x46c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d018      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a5c      	ldr	r2, [pc, #368]	@ (8001f0c <HAL_DMA_Abort+0x470>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f10 <HAL_DMA_Abort+0x474>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00e      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a59      	ldr	r2, [pc, #356]	@ (8001f14 <HAL_DMA_Abort+0x478>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a58      	ldr	r2, [pc, #352]	@ (8001f18 <HAL_DMA_Abort+0x47c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d004      	beq.n	8001dc6 <HAL_DMA_Abort+0x32a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a56      	ldr	r2, [pc, #344]	@ (8001f1c <HAL_DMA_Abort+0x480>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d108      	bne.n	8001dd8 <HAL_DMA_Abort+0x33c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e007      	b.n	8001de8 <HAL_DMA_Abort+0x34c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001de8:	e013      	b.n	8001e12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dea:	f7ff fd0b 	bl	8001804 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d90c      	bls.n	8001e12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e12d      	b.n	800206e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1e5      	bne.n	8001dea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee0 <HAL_DMA_Abort+0x444>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d04a      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee4 <HAL_DMA_Abort+0x448>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d045      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2c      	ldr	r2, [pc, #176]	@ (8001ee8 <HAL_DMA_Abort+0x44c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d040      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2a      	ldr	r2, [pc, #168]	@ (8001eec <HAL_DMA_Abort+0x450>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d03b      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a29      	ldr	r2, [pc, #164]	@ (8001ef0 <HAL_DMA_Abort+0x454>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d036      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a27      	ldr	r2, [pc, #156]	@ (8001ef4 <HAL_DMA_Abort+0x458>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d031      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a26      	ldr	r2, [pc, #152]	@ (8001ef8 <HAL_DMA_Abort+0x45c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d02c      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a24      	ldr	r2, [pc, #144]	@ (8001efc <HAL_DMA_Abort+0x460>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d027      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a23      	ldr	r2, [pc, #140]	@ (8001f00 <HAL_DMA_Abort+0x464>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d022      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <HAL_DMA_Abort+0x468>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01d      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a20      	ldr	r2, [pc, #128]	@ (8001f08 <HAL_DMA_Abort+0x46c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d018      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1e      	ldr	r2, [pc, #120]	@ (8001f0c <HAL_DMA_Abort+0x470>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f10 <HAL_DMA_Abort+0x474>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d00e      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f14 <HAL_DMA_Abort+0x478>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d009      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1a      	ldr	r2, [pc, #104]	@ (8001f18 <HAL_DMA_Abort+0x47c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d004      	beq.n	8001ebe <HAL_DMA_Abort+0x422>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a18      	ldr	r2, [pc, #96]	@ (8001f1c <HAL_DMA_Abort+0x480>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_DMA_Abort+0x426>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_DMA_Abort+0x428>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d02b      	beq.n	8001f20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ecc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	223f      	movs	r2, #63	@ 0x3f
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	e02a      	b.n	8001f36 <HAL_DMA_Abort+0x49a>
 8001ee0:	40020010 	.word	0x40020010
 8001ee4:	40020028 	.word	0x40020028
 8001ee8:	40020040 	.word	0x40020040
 8001eec:	40020058 	.word	0x40020058
 8001ef0:	40020070 	.word	0x40020070
 8001ef4:	40020088 	.word	0x40020088
 8001ef8:	400200a0 	.word	0x400200a0
 8001efc:	400200b8 	.word	0x400200b8
 8001f00:	40020410 	.word	0x40020410
 8001f04:	40020428 	.word	0x40020428
 8001f08:	40020440 	.word	0x40020440
 8001f0c:	40020458 	.word	0x40020458
 8001f10:	40020470 	.word	0x40020470
 8001f14:	40020488 	.word	0x40020488
 8001f18:	400204a0 	.word	0x400204a0
 8001f1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	2201      	movs	r2, #1
 8001f30:	409a      	lsls	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <HAL_DMA_Abort+0x5dc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d072      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a4d      	ldr	r2, [pc, #308]	@ (800207c <HAL_DMA_Abort+0x5e0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d06d      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002080 <HAL_DMA_Abort+0x5e4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d068      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a4a      	ldr	r2, [pc, #296]	@ (8002084 <HAL_DMA_Abort+0x5e8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d063      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a49      	ldr	r2, [pc, #292]	@ (8002088 <HAL_DMA_Abort+0x5ec>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d05e      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a47      	ldr	r2, [pc, #284]	@ (800208c <HAL_DMA_Abort+0x5f0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d059      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a46      	ldr	r2, [pc, #280]	@ (8002090 <HAL_DMA_Abort+0x5f4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d054      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a44      	ldr	r2, [pc, #272]	@ (8002094 <HAL_DMA_Abort+0x5f8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d04f      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a43      	ldr	r2, [pc, #268]	@ (8002098 <HAL_DMA_Abort+0x5fc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d04a      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a41      	ldr	r2, [pc, #260]	@ (800209c <HAL_DMA_Abort+0x600>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d045      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	@ (80020a0 <HAL_DMA_Abort+0x604>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d040      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a3e      	ldr	r2, [pc, #248]	@ (80020a4 <HAL_DMA_Abort+0x608>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d03b      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a3d      	ldr	r2, [pc, #244]	@ (80020a8 <HAL_DMA_Abort+0x60c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d036      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a3b      	ldr	r2, [pc, #236]	@ (80020ac <HAL_DMA_Abort+0x610>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d031      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80020b0 <HAL_DMA_Abort+0x614>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d02c      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a38      	ldr	r2, [pc, #224]	@ (80020b4 <HAL_DMA_Abort+0x618>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d027      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a37      	ldr	r2, [pc, #220]	@ (80020b8 <HAL_DMA_Abort+0x61c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a35      	ldr	r2, [pc, #212]	@ (80020bc <HAL_DMA_Abort+0x620>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a34      	ldr	r2, [pc, #208]	@ (80020c0 <HAL_DMA_Abort+0x624>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a32      	ldr	r2, [pc, #200]	@ (80020c4 <HAL_DMA_Abort+0x628>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a31      	ldr	r2, [pc, #196]	@ (80020c8 <HAL_DMA_Abort+0x62c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00e      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2f      	ldr	r2, [pc, #188]	@ (80020cc <HAL_DMA_Abort+0x630>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d009      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a2e      	ldr	r2, [pc, #184]	@ (80020d0 <HAL_DMA_Abort+0x634>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d004      	beq.n	8002026 <HAL_DMA_Abort+0x58a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2c      	ldr	r2, [pc, #176]	@ (80020d4 <HAL_DMA_Abort+0x638>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_DMA_Abort+0x58e>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_DMA_Abort+0x590>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d015      	beq.n	800205c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002038:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800204c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002050:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800205a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40020010 	.word	0x40020010
 800207c:	40020028 	.word	0x40020028
 8002080:	40020040 	.word	0x40020040
 8002084:	40020058 	.word	0x40020058
 8002088:	40020070 	.word	0x40020070
 800208c:	40020088 	.word	0x40020088
 8002090:	400200a0 	.word	0x400200a0
 8002094:	400200b8 	.word	0x400200b8
 8002098:	40020410 	.word	0x40020410
 800209c:	40020428 	.word	0x40020428
 80020a0:	40020440 	.word	0x40020440
 80020a4:	40020458 	.word	0x40020458
 80020a8:	40020470 	.word	0x40020470
 80020ac:	40020488 	.word	0x40020488
 80020b0:	400204a0 	.word	0x400204a0
 80020b4:	400204b8 	.word	0x400204b8
 80020b8:	58025408 	.word	0x58025408
 80020bc:	5802541c 	.word	0x5802541c
 80020c0:	58025430 	.word	0x58025430
 80020c4:	58025444 	.word	0x58025444
 80020c8:	58025458 	.word	0x58025458
 80020cc:	5802546c 	.word	0x5802546c
 80020d0:	58025480 	.word	0x58025480
 80020d4:	58025494 	.word	0x58025494

080020d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e237      	b.n	800255a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d004      	beq.n	8002100 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2280      	movs	r2, #128	@ 0x80
 80020fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e22c      	b.n	800255a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5c      	ldr	r2, [pc, #368]	@ (8002278 <HAL_DMA_Abort_IT+0x1a0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d04a      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a5b      	ldr	r2, [pc, #364]	@ (800227c <HAL_DMA_Abort_IT+0x1a4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d045      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a59      	ldr	r2, [pc, #356]	@ (8002280 <HAL_DMA_Abort_IT+0x1a8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d040      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a58      	ldr	r2, [pc, #352]	@ (8002284 <HAL_DMA_Abort_IT+0x1ac>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d03b      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a56      	ldr	r2, [pc, #344]	@ (8002288 <HAL_DMA_Abort_IT+0x1b0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d036      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a55      	ldr	r2, [pc, #340]	@ (800228c <HAL_DMA_Abort_IT+0x1b4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d031      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a53      	ldr	r2, [pc, #332]	@ (8002290 <HAL_DMA_Abort_IT+0x1b8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02c      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a52      	ldr	r2, [pc, #328]	@ (8002294 <HAL_DMA_Abort_IT+0x1bc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d027      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a50      	ldr	r2, [pc, #320]	@ (8002298 <HAL_DMA_Abort_IT+0x1c0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d022      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a4f      	ldr	r2, [pc, #316]	@ (800229c <HAL_DMA_Abort_IT+0x1c4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d01d      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a4d      	ldr	r2, [pc, #308]	@ (80022a0 <HAL_DMA_Abort_IT+0x1c8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d018      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a4c      	ldr	r2, [pc, #304]	@ (80022a4 <HAL_DMA_Abort_IT+0x1cc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a4a      	ldr	r2, [pc, #296]	@ (80022a8 <HAL_DMA_Abort_IT+0x1d0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00e      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a49      	ldr	r2, [pc, #292]	@ (80022ac <HAL_DMA_Abort_IT+0x1d4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d009      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a47      	ldr	r2, [pc, #284]	@ (80022b0 <HAL_DMA_Abort_IT+0x1d8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_DMA_Abort_IT+0xc8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a46      	ldr	r2, [pc, #280]	@ (80022b4 <HAL_DMA_Abort_IT+0x1dc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_DMA_Abort_IT+0xcc>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_DMA_Abort_IT+0xce>
 80021a4:	2300      	movs	r3, #0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8086 	beq.w	80022b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2204      	movs	r2, #4
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002278 <HAL_DMA_Abort_IT+0x1a0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d04a      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a2e      	ldr	r2, [pc, #184]	@ (800227c <HAL_DMA_Abort_IT+0x1a4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d045      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002280 <HAL_DMA_Abort_IT+0x1a8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d040      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002284 <HAL_DMA_Abort_IT+0x1ac>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d03b      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a29      	ldr	r2, [pc, #164]	@ (8002288 <HAL_DMA_Abort_IT+0x1b0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d036      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a28      	ldr	r2, [pc, #160]	@ (800228c <HAL_DMA_Abort_IT+0x1b4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d031      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a26      	ldr	r2, [pc, #152]	@ (8002290 <HAL_DMA_Abort_IT+0x1b8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02c      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a25      	ldr	r2, [pc, #148]	@ (8002294 <HAL_DMA_Abort_IT+0x1bc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d027      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a23      	ldr	r2, [pc, #140]	@ (8002298 <HAL_DMA_Abort_IT+0x1c0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d022      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a22      	ldr	r2, [pc, #136]	@ (800229c <HAL_DMA_Abort_IT+0x1c4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d01d      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a20      	ldr	r2, [pc, #128]	@ (80022a0 <HAL_DMA_Abort_IT+0x1c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d018      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1f      	ldr	r2, [pc, #124]	@ (80022a4 <HAL_DMA_Abort_IT+0x1cc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1d      	ldr	r2, [pc, #116]	@ (80022a8 <HAL_DMA_Abort_IT+0x1d0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00e      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1c      	ldr	r2, [pc, #112]	@ (80022ac <HAL_DMA_Abort_IT+0x1d4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1a      	ldr	r2, [pc, #104]	@ (80022b0 <HAL_DMA_Abort_IT+0x1d8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_DMA_Abort_IT+0x17c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a19      	ldr	r2, [pc, #100]	@ (80022b4 <HAL_DMA_Abort_IT+0x1dc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d108      	bne.n	8002266 <HAL_DMA_Abort_IT+0x18e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e178      	b.n	8002558 <HAL_DMA_Abort_IT+0x480>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0201 	bic.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e16f      	b.n	8002558 <HAL_DMA_Abort_IT+0x480>
 8002278:	40020010 	.word	0x40020010
 800227c:	40020028 	.word	0x40020028
 8002280:	40020040 	.word	0x40020040
 8002284:	40020058 	.word	0x40020058
 8002288:	40020070 	.word	0x40020070
 800228c:	40020088 	.word	0x40020088
 8002290:	400200a0 	.word	0x400200a0
 8002294:	400200b8 	.word	0x400200b8
 8002298:	40020410 	.word	0x40020410
 800229c:	40020428 	.word	0x40020428
 80022a0:	40020440 	.word	0x40020440
 80022a4:	40020458 	.word	0x40020458
 80022a8:	40020470 	.word	0x40020470
 80022ac:	40020488 	.word	0x40020488
 80022b0:	400204a0 	.word	0x400204a0
 80022b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 020e 	bic.w	r2, r2, #14
 80022c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6c      	ldr	r2, [pc, #432]	@ (8002480 <HAL_DMA_Abort_IT+0x3a8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d04a      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a6b      	ldr	r2, [pc, #428]	@ (8002484 <HAL_DMA_Abort_IT+0x3ac>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d045      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a69      	ldr	r2, [pc, #420]	@ (8002488 <HAL_DMA_Abort_IT+0x3b0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d040      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a68      	ldr	r2, [pc, #416]	@ (800248c <HAL_DMA_Abort_IT+0x3b4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d03b      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a66      	ldr	r2, [pc, #408]	@ (8002490 <HAL_DMA_Abort_IT+0x3b8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d036      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a65      	ldr	r2, [pc, #404]	@ (8002494 <HAL_DMA_Abort_IT+0x3bc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d031      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a63      	ldr	r2, [pc, #396]	@ (8002498 <HAL_DMA_Abort_IT+0x3c0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d02c      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a62      	ldr	r2, [pc, #392]	@ (800249c <HAL_DMA_Abort_IT+0x3c4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d027      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a60      	ldr	r2, [pc, #384]	@ (80024a0 <HAL_DMA_Abort_IT+0x3c8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d022      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a5f      	ldr	r2, [pc, #380]	@ (80024a4 <HAL_DMA_Abort_IT+0x3cc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d01d      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a5d      	ldr	r2, [pc, #372]	@ (80024a8 <HAL_DMA_Abort_IT+0x3d0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d018      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a5c      	ldr	r2, [pc, #368]	@ (80024ac <HAL_DMA_Abort_IT+0x3d4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a5a      	ldr	r2, [pc, #360]	@ (80024b0 <HAL_DMA_Abort_IT+0x3d8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00e      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a59      	ldr	r2, [pc, #356]	@ (80024b4 <HAL_DMA_Abort_IT+0x3dc>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d009      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a57      	ldr	r2, [pc, #348]	@ (80024b8 <HAL_DMA_Abort_IT+0x3e0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d004      	beq.n	8002368 <HAL_DMA_Abort_IT+0x290>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a56      	ldr	r2, [pc, #344]	@ (80024bc <HAL_DMA_Abort_IT+0x3e4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d108      	bne.n	800237a <HAL_DMA_Abort_IT+0x2a2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e007      	b.n	800238a <HAL_DMA_Abort_IT+0x2b2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a3c      	ldr	r2, [pc, #240]	@ (8002480 <HAL_DMA_Abort_IT+0x3a8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d072      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a3a      	ldr	r2, [pc, #232]	@ (8002484 <HAL_DMA_Abort_IT+0x3ac>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d06d      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a39      	ldr	r2, [pc, #228]	@ (8002488 <HAL_DMA_Abort_IT+0x3b0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d068      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a37      	ldr	r2, [pc, #220]	@ (800248c <HAL_DMA_Abort_IT+0x3b4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d063      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a36      	ldr	r2, [pc, #216]	@ (8002490 <HAL_DMA_Abort_IT+0x3b8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d05e      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a34      	ldr	r2, [pc, #208]	@ (8002494 <HAL_DMA_Abort_IT+0x3bc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d059      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a33      	ldr	r2, [pc, #204]	@ (8002498 <HAL_DMA_Abort_IT+0x3c0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d054      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a31      	ldr	r2, [pc, #196]	@ (800249c <HAL_DMA_Abort_IT+0x3c4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d04f      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a30      	ldr	r2, [pc, #192]	@ (80024a0 <HAL_DMA_Abort_IT+0x3c8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d04a      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2e      	ldr	r2, [pc, #184]	@ (80024a4 <HAL_DMA_Abort_IT+0x3cc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d045      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2d      	ldr	r2, [pc, #180]	@ (80024a8 <HAL_DMA_Abort_IT+0x3d0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d040      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2b      	ldr	r2, [pc, #172]	@ (80024ac <HAL_DMA_Abort_IT+0x3d4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d03b      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a2a      	ldr	r2, [pc, #168]	@ (80024b0 <HAL_DMA_Abort_IT+0x3d8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d036      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a28      	ldr	r2, [pc, #160]	@ (80024b4 <HAL_DMA_Abort_IT+0x3dc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d031      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a27      	ldr	r2, [pc, #156]	@ (80024b8 <HAL_DMA_Abort_IT+0x3e0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d02c      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a25      	ldr	r2, [pc, #148]	@ (80024bc <HAL_DMA_Abort_IT+0x3e4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d027      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a24      	ldr	r2, [pc, #144]	@ (80024c0 <HAL_DMA_Abort_IT+0x3e8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a22      	ldr	r2, [pc, #136]	@ (80024c4 <HAL_DMA_Abort_IT+0x3ec>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01d      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a21      	ldr	r2, [pc, #132]	@ (80024c8 <HAL_DMA_Abort_IT+0x3f0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d018      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1f      	ldr	r2, [pc, #124]	@ (80024cc <HAL_DMA_Abort_IT+0x3f4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1e      	ldr	r2, [pc, #120]	@ (80024d0 <HAL_DMA_Abort_IT+0x3f8>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00e      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1c      	ldr	r2, [pc, #112]	@ (80024d4 <HAL_DMA_Abort_IT+0x3fc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1b      	ldr	r2, [pc, #108]	@ (80024d8 <HAL_DMA_Abort_IT+0x400>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_DMA_Abort_IT+0x3a2>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a19      	ldr	r2, [pc, #100]	@ (80024dc <HAL_DMA_Abort_IT+0x404>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d132      	bne.n	80024e0 <HAL_DMA_Abort_IT+0x408>
 800247a:	2301      	movs	r3, #1
 800247c:	e031      	b.n	80024e2 <HAL_DMA_Abort_IT+0x40a>
 800247e:	bf00      	nop
 8002480:	40020010 	.word	0x40020010
 8002484:	40020028 	.word	0x40020028
 8002488:	40020040 	.word	0x40020040
 800248c:	40020058 	.word	0x40020058
 8002490:	40020070 	.word	0x40020070
 8002494:	40020088 	.word	0x40020088
 8002498:	400200a0 	.word	0x400200a0
 800249c:	400200b8 	.word	0x400200b8
 80024a0:	40020410 	.word	0x40020410
 80024a4:	40020428 	.word	0x40020428
 80024a8:	40020440 	.word	0x40020440
 80024ac:	40020458 	.word	0x40020458
 80024b0:	40020470 	.word	0x40020470
 80024b4:	40020488 	.word	0x40020488
 80024b8:	400204a0 	.word	0x400204a0
 80024bc:	400204b8 	.word	0x400204b8
 80024c0:	58025408 	.word	0x58025408
 80024c4:	5802541c 	.word	0x5802541c
 80024c8:	58025430 	.word	0x58025430
 80024cc:	58025444 	.word	0x58025444
 80024d0:	58025458 	.word	0x58025458
 80024d4:	5802546c 	.word	0x5802546c
 80024d8:	58025480 	.word	0x58025480
 80024dc:	58025494 	.word	0x58025494
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d028      	beq.n	8002538 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	2201      	movs	r2, #1
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002514:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800252c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002536:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	@ 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002572:	4b89      	ldr	r3, [pc, #548]	@ (8002798 <HAL_GPIO_Init+0x234>)
 8002574:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002576:	e194      	b.n	80028a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8186 	beq.w	800289c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d005      	beq.n	80025a8 <HAL_GPIO_Init+0x44>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d130      	bne.n	800260a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025de:	2201      	movs	r2, #1
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 0201 	and.w	r2, r3, #1
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b03      	cmp	r3, #3
 8002614:	d017      	beq.n	8002646 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d123      	bne.n	800269a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	69b9      	ldr	r1, [r7, #24]
 8002696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0203 	and.w	r2, r3, #3
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80e0 	beq.w	800289c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026dc:	4b2f      	ldr	r3, [pc, #188]	@ (800279c <HAL_GPIO_Init+0x238>)
 80026de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026e2:	4a2e      	ldr	r2, [pc, #184]	@ (800279c <HAL_GPIO_Init+0x238>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026ec:	4b2b      	ldr	r3, [pc, #172]	@ (800279c <HAL_GPIO_Init+0x238>)
 80026ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fa:	4a29      	ldr	r2, [pc, #164]	@ (80027a0 <HAL_GPIO_Init+0x23c>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a20      	ldr	r2, [pc, #128]	@ (80027a4 <HAL_GPIO_Init+0x240>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d052      	beq.n	80027cc <HAL_GPIO_Init+0x268>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1f      	ldr	r2, [pc, #124]	@ (80027a8 <HAL_GPIO_Init+0x244>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_GPIO_Init+0x22e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1e      	ldr	r2, [pc, #120]	@ (80027ac <HAL_GPIO_Init+0x248>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d02b      	beq.n	800278e <HAL_GPIO_Init+0x22a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1d      	ldr	r2, [pc, #116]	@ (80027b0 <HAL_GPIO_Init+0x24c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d025      	beq.n	800278a <HAL_GPIO_Init+0x226>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1c      	ldr	r2, [pc, #112]	@ (80027b4 <HAL_GPIO_Init+0x250>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01f      	beq.n	8002786 <HAL_GPIO_Init+0x222>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1b      	ldr	r2, [pc, #108]	@ (80027b8 <HAL_GPIO_Init+0x254>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d019      	beq.n	8002782 <HAL_GPIO_Init+0x21e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1a      	ldr	r2, [pc, #104]	@ (80027bc <HAL_GPIO_Init+0x258>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_GPIO_Init+0x21a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a19      	ldr	r2, [pc, #100]	@ (80027c0 <HAL_GPIO_Init+0x25c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00d      	beq.n	800277a <HAL_GPIO_Init+0x216>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a18      	ldr	r2, [pc, #96]	@ (80027c4 <HAL_GPIO_Init+0x260>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x212>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a17      	ldr	r2, [pc, #92]	@ (80027c8 <HAL_GPIO_Init+0x264>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_GPIO_Init+0x20e>
 800276e:	2309      	movs	r3, #9
 8002770:	e02d      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002772:	230a      	movs	r3, #10
 8002774:	e02b      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002776:	2308      	movs	r3, #8
 8002778:	e029      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 800277a:	2307      	movs	r3, #7
 800277c:	e027      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 800277e:	2306      	movs	r3, #6
 8002780:	e025      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002782:	2305      	movs	r3, #5
 8002784:	e023      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002786:	2304      	movs	r3, #4
 8002788:	e021      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 800278a:	2303      	movs	r3, #3
 800278c:	e01f      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 800278e:	2302      	movs	r3, #2
 8002790:	e01d      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002792:	2301      	movs	r3, #1
 8002794:	e01b      	b.n	80027ce <HAL_GPIO_Init+0x26a>
 8002796:	bf00      	nop
 8002798:	58000080 	.word	0x58000080
 800279c:	58024400 	.word	0x58024400
 80027a0:	58000400 	.word	0x58000400
 80027a4:	58020000 	.word	0x58020000
 80027a8:	58020400 	.word	0x58020400
 80027ac:	58020800 	.word	0x58020800
 80027b0:	58020c00 	.word	0x58020c00
 80027b4:	58021000 	.word	0x58021000
 80027b8:	58021400 	.word	0x58021400
 80027bc:	58021800 	.word	0x58021800
 80027c0:	58021c00 	.word	0x58021c00
 80027c4:	58022000 	.word	0x58022000
 80027c8:	58022400 	.word	0x58022400
 80027cc:	2300      	movs	r3, #0
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	f002 0203 	and.w	r2, r2, #3
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	4093      	lsls	r3, r2
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027de:	4938      	ldr	r1, [pc, #224]	@ (80028c0 <HAL_GPIO_Init+0x35c>)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002812:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3301      	adds	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f47f ae63 	bne.w	8002578 <HAL_GPIO_Init+0x14>
  }
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	3724      	adds	r7, #36	@ 0x24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	58000400 	.word	0x58000400

080028c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
 80028d0:	4613      	mov	r3, r2
 80028d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d4:	787b      	ldrb	r3, [r7, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028e0:	e003      	b.n	80028ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	041a      	lsls	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	619a      	str	r2, [r3, #24]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <HAL_PWREx_ConfigSupply+0x70>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b04      	cmp	r3, #4
 800290a:	d00a      	beq.n	8002922 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800290c:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <HAL_PWREx_ConfigSupply+0x70>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d001      	beq.n	800291e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e01f      	b.n	800295e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e01d      	b.n	800295e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002922:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <HAL_PWREx_ConfigSupply+0x70>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f023 0207 	bic.w	r2, r3, #7
 800292a:	490f      	ldr	r1, [pc, #60]	@ (8002968 <HAL_PWREx_ConfigSupply+0x70>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4313      	orrs	r3, r2
 8002930:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002932:	f7fe ff67 	bl	8001804 <HAL_GetTick>
 8002936:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002938:	e009      	b.n	800294e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800293a:	f7fe ff63 	bl	8001804 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002948:	d901      	bls.n	800294e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e007      	b.n	800295e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800294e:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_PWREx_ConfigSupply+0x70>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800295a:	d1ee      	bne.n	800293a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	58024800 	.word	0x58024800

0800296c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	@ 0x30
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d102      	bne.n	8002980 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	f000 bc48 	b.w	8003210 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8088 	beq.w	8002a9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800298e:	4b99      	ldr	r3, [pc, #612]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002998:	4b96      	ldr	r3, [pc, #600]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 800299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800299e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d007      	beq.n	80029b4 <HAL_RCC_OscConfig+0x48>
 80029a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a6:	2b18      	cmp	r3, #24
 80029a8:	d111      	bne.n	80029ce <HAL_RCC_OscConfig+0x62>
 80029aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d10c      	bne.n	80029ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	4b8f      	ldr	r3, [pc, #572]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d06d      	beq.n	8002a9c <HAL_RCC_OscConfig+0x130>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d169      	bne.n	8002a9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f000 bc21 	b.w	8003210 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x7a>
 80029d8:	4b86      	ldr	r3, [pc, #536]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a85      	ldr	r2, [pc, #532]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 80029de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	e02e      	b.n	8002a44 <HAL_RCC_OscConfig+0xd8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x9c>
 80029ee:	4b81      	ldr	r3, [pc, #516]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a80      	ldr	r2, [pc, #512]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 80029f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b7e      	ldr	r3, [pc, #504]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7d      	ldr	r2, [pc, #500]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002a00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e01d      	b.n	8002a44 <HAL_RCC_OscConfig+0xd8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0xc0>
 8002a12:	4b78      	ldr	r3, [pc, #480]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a77      	ldr	r2, [pc, #476]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b75      	ldr	r3, [pc, #468]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a74      	ldr	r2, [pc, #464]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0xd8>
 8002a2c:	4b71      	ldr	r3, [pc, #452]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a70      	ldr	r2, [pc, #448]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b6e      	ldr	r3, [pc, #440]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a6d      	ldr	r2, [pc, #436]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe feda 	bl	8001804 <HAL_GetTick>
 8002a50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fed6 	bl	8001804 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	@ 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e3d4      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a66:	4b63      	ldr	r3, [pc, #396]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0xe8>
 8002a72:	e014      	b.n	8002a9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fec6 	bl	8001804 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fec2 	bl	8001804 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	@ 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e3c0      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a8e:	4b59      	ldr	r3, [pc, #356]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x110>
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 80ca 	beq.w	8002c40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aac:	4b51      	ldr	r3, [pc, #324]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ab4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ab6:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x166>
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	2b18      	cmp	r3, #24
 8002ac6:	d156      	bne.n	8002b76 <HAL_RCC_OscConfig+0x20a>
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d151      	bne.n	8002b76 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad2:	4b48      	ldr	r3, [pc, #288]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <HAL_RCC_OscConfig+0x17e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e392      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002aea:	4b42      	ldr	r3, [pc, #264]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 0219 	bic.w	r2, r3, #25
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	493f      	ldr	r1, [pc, #252]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fe82 	bl	8001804 <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b04:	f7fe fe7e 	bl	8001804 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e37c      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b16:	4b37      	ldr	r3, [pc, #220]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	f7fe fe9f 	bl	8001864 <HAL_GetREVID>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d817      	bhi.n	8002b60 <HAL_RCC_OscConfig+0x1f4>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b40      	cmp	r3, #64	@ 0x40
 8002b36:	d108      	bne.n	8002b4a <HAL_RCC_OscConfig+0x1de>
 8002b38:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b40:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b46:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b48:	e07a      	b.n	8002c40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	031b      	lsls	r3, r3, #12
 8002b58:	4926      	ldr	r1, [pc, #152]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b5e:	e06f      	b.n	8002c40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b60:	4b24      	ldr	r3, [pc, #144]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	4921      	ldr	r1, [pc, #132]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b74:	e064      	b.n	8002c40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d047      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0219 	bic.w	r2, r3, #25
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	491a      	ldr	r1, [pc, #104]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fe38 	bl	8001804 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b98:	f7fe fe34 	bl	8001804 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e332      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	f7fe fe55 	bl	8001864 <HAL_GetREVID>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d819      	bhi.n	8002bf8 <HAL_RCC_OscConfig+0x28c>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b40      	cmp	r3, #64	@ 0x40
 8002bca:	d108      	bne.n	8002bde <HAL_RCC_OscConfig+0x272>
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002bd4:	4a07      	ldr	r2, [pc, #28]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bda:	6053      	str	r3, [r2, #4]
 8002bdc:	e030      	b.n	8002c40 <HAL_RCC_OscConfig+0x2d4>
 8002bde:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	031b      	lsls	r3, r3, #12
 8002bec:	4901      	ldr	r1, [pc, #4]	@ (8002bf4 <HAL_RCC_OscConfig+0x288>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
 8002bf2:	e025      	b.n	8002c40 <HAL_RCC_OscConfig+0x2d4>
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	4b9a      	ldr	r3, [pc, #616]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	4997      	ldr	r1, [pc, #604]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
 8002c0c:	e018      	b.n	8002c40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0e:	4b95      	ldr	r3, [pc, #596]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a94      	ldr	r2, [pc, #592]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fdf3 	bl	8001804 <HAL_GetTick>
 8002c1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c22:	f7fe fdef 	bl	8001804 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e2ed      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c34:	4b8b      	ldr	r3, [pc, #556]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80a9 	beq.w	8002da0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4e:	4b85      	ldr	r3, [pc, #532]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c58:	4b82      	ldr	r3, [pc, #520]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d007      	beq.n	8002c74 <HAL_RCC_OscConfig+0x308>
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b18      	cmp	r3, #24
 8002c68:	d13a      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x374>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d135      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c74:	4b7b      	ldr	r3, [pc, #492]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_OscConfig+0x320>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	2b80      	cmp	r3, #128	@ 0x80
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e2c1      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c8c:	f7fe fdea 	bl	8001864 <HAL_GetREVID>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d817      	bhi.n	8002cca <HAL_RCC_OscConfig+0x35e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d108      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x348>
 8002ca2:	4b70      	ldr	r3, [pc, #448]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002caa:	4a6e      	ldr	r2, [pc, #440]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002cac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cb0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cb2:	e075      	b.n	8002da0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cb4:	4b6b      	ldr	r3, [pc, #428]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	069b      	lsls	r3, r3, #26
 8002cc2:	4968      	ldr	r1, [pc, #416]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cc8:	e06a      	b.n	8002da0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cca:	4b66      	ldr	r3, [pc, #408]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	061b      	lsls	r3, r3, #24
 8002cd8:	4962      	ldr	r1, [pc, #392]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cde:	e05f      	b.n	8002da0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d042      	beq.n	8002d6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002ce8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a5d      	ldr	r2, [pc, #372]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fd86 	bl	8001804 <HAL_GetTick>
 8002cf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cfc:	f7fe fd82 	bl	8001804 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e280      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d0e:	4b55      	ldr	r3, [pc, #340]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d1a:	f7fe fda3 	bl	8001864 <HAL_GetREVID>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d817      	bhi.n	8002d58 <HAL_RCC_OscConfig+0x3ec>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d108      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3d6>
 8002d30:	4b4c      	ldr	r3, [pc, #304]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d38:	4a4a      	ldr	r2, [pc, #296]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002d3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d3e:	6053      	str	r3, [r2, #4]
 8002d40:	e02e      	b.n	8002da0 <HAL_RCC_OscConfig+0x434>
 8002d42:	4b48      	ldr	r3, [pc, #288]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	069b      	lsls	r3, r3, #26
 8002d50:	4944      	ldr	r1, [pc, #272]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
 8002d56:	e023      	b.n	8002da0 <HAL_RCC_OscConfig+0x434>
 8002d58:	4b42      	ldr	r3, [pc, #264]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	493f      	ldr	r1, [pc, #252]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60cb      	str	r3, [r1, #12]
 8002d6c:	e018      	b.n	8002da0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a3c      	ldr	r2, [pc, #240]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002d74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fd43 	bl	8001804 <HAL_GetTick>
 8002d7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d82:	f7fe fd3f 	bl	8001804 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e23d      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d94:	4b33      	ldr	r3, [pc, #204]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d036      	beq.n	8002e1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d019      	beq.n	8002de8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db8:	4a2a      	ldr	r2, [pc, #168]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fd20 	bl	8001804 <HAL_GetTick>
 8002dc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fd1c 	bl	8001804 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e21a      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dda:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x45c>
 8002de6:	e018      	b.n	8002e1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dec:	4a1d      	ldr	r2, [pc, #116]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7fe fd06 	bl	8001804 <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7fe fd02 	bl	8001804 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e200      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e0e:	4b15      	ldr	r3, [pc, #84]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d039      	beq.n	8002e9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a0c      	ldr	r2, [pc, #48]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002e34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fce3 	bl	8001804 <HAL_GetTick>
 8002e3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e42:	f7fe fcdf 	bl	8001804 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1dd      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e54:	4b03      	ldr	r3, [pc, #12]	@ (8002e64 <HAL_RCC_OscConfig+0x4f8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x4d6>
 8002e60:	e01b      	b.n	8002e9a <HAL_RCC_OscConfig+0x52e>
 8002e62:	bf00      	nop
 8002e64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e68:	4b9b      	ldr	r3, [pc, #620]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a9a      	ldr	r2, [pc, #616]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002e6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e74:	f7fe fcc6 	bl	8001804 <HAL_GetTick>
 8002e78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e7c:	f7fe fcc2 	bl	8001804 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e1c0      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e8e:	4b92      	ldr	r3, [pc, #584]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8081 	beq.w	8002faa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ea8:	4b8c      	ldr	r3, [pc, #560]	@ (80030dc <HAL_RCC_OscConfig+0x770>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a8b      	ldr	r2, [pc, #556]	@ (80030dc <HAL_RCC_OscConfig+0x770>)
 8002eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fca6 	bl	8001804 <HAL_GetTick>
 8002eb8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebc:	f7fe fca2 	bl	8001804 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	@ 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e1a0      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ece:	4b83      	ldr	r3, [pc, #524]	@ (80030dc <HAL_RCC_OscConfig+0x770>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x584>
 8002ee2:	4b7d      	ldr	r3, [pc, #500]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	4a7c      	ldr	r2, [pc, #496]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eee:	e02d      	b.n	8002f4c <HAL_RCC_OscConfig+0x5e0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10c      	bne.n	8002f12 <HAL_RCC_OscConfig+0x5a6>
 8002ef8:	4b77      	ldr	r3, [pc, #476]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efc:	4a76      	ldr	r2, [pc, #472]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f04:	4b74      	ldr	r3, [pc, #464]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f08:	4a73      	ldr	r2, [pc, #460]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002f0a:	f023 0304 	bic.w	r3, r3, #4
 8002f0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f10:	e01c      	b.n	8002f4c <HAL_RCC_OscConfig+0x5e0>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b05      	cmp	r3, #5
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x5c8>
 8002f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	4a6e      	ldr	r2, [pc, #440]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f26:	4b6c      	ldr	r3, [pc, #432]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2a:	4a6b      	ldr	r2, [pc, #428]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0x5e0>
 8002f34:	4b68      	ldr	r3, [pc, #416]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f38:	4a67      	ldr	r2, [pc, #412]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f40:	4b65      	ldr	r3, [pc, #404]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f44:	4a64      	ldr	r2, [pc, #400]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002f46:	f023 0304 	bic.w	r3, r3, #4
 8002f4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe fc56 	bl	8001804 <HAL_GetTick>
 8002f58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7fe fc52 	bl	8001804 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e14e      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f72:	4b59      	ldr	r3, [pc, #356]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0ee      	beq.n	8002f5c <HAL_RCC_OscConfig+0x5f0>
 8002f7e:	e014      	b.n	8002faa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fe fc40 	bl	8001804 <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fe fc3c 	bl	8001804 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e138      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ee      	bne.n	8002f88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 812d 	beq.w	800320e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002fb4:	4b48      	ldr	r3, [pc, #288]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fbc:	2b18      	cmp	r3, #24
 8002fbe:	f000 80bd 	beq.w	800313c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	f040 809e 	bne.w	8003108 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b42      	ldr	r3, [pc, #264]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a41      	ldr	r2, [pc, #260]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fc14 	bl	8001804 <HAL_GetTick>
 8002fdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe fc10 	bl	8001804 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e10e      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ff2:	4b39      	ldr	r3, [pc, #228]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffe:	4b36      	ldr	r3, [pc, #216]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8003000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003002:	4b37      	ldr	r3, [pc, #220]	@ (80030e0 <HAL_RCC_OscConfig+0x774>)
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	430a      	orrs	r2, r1
 8003012:	4931      	ldr	r1, [pc, #196]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8003014:	4313      	orrs	r3, r2
 8003016:	628b      	str	r3, [r1, #40]	@ 0x28
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301c:	3b01      	subs	r3, #1
 800301e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003026:	3b01      	subs	r3, #1
 8003028:	025b      	lsls	r3, r3, #9
 800302a:	b29b      	uxth	r3, r3
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003032:	3b01      	subs	r3, #1
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003040:	3b01      	subs	r3, #1
 8003042:	061b      	lsls	r3, r3, #24
 8003044:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003048:	4923      	ldr	r1, [pc, #140]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 800304a:	4313      	orrs	r3, r2
 800304c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800304e:	4b22      	ldr	r3, [pc, #136]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8003050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003052:	4a21      	ldr	r2, [pc, #132]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800305a:	4b1f      	ldr	r3, [pc, #124]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 800305c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305e:	4b21      	ldr	r3, [pc, #132]	@ (80030e4 <HAL_RCC_OscConfig+0x778>)
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003066:	00d2      	lsls	r2, r2, #3
 8003068:	491b      	ldr	r1, [pc, #108]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800306e:	4b1a      	ldr	r3, [pc, #104]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	f023 020c 	bic.w	r2, r3, #12
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	4917      	ldr	r1, [pc, #92]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003080:	4b15      	ldr	r3, [pc, #84]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	f023 0202 	bic.w	r2, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308c:	4912      	ldr	r1, [pc, #72]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 800308e:	4313      	orrs	r3, r2
 8003090:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003092:	4b11      	ldr	r3, [pc, #68]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8003094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003096:	4a10      	ldr	r2, [pc, #64]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800309e:	4b0e      	ldr	r3, [pc, #56]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 80030a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a2:	4a0d      	ldr	r2, [pc, #52]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 80030a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030aa:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	4a0a      	ldr	r2, [pc, #40]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 80030b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80030b6:	4b08      	ldr	r3, [pc, #32]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	4a07      	ldr	r2, [pc, #28]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c2:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <HAL_RCC_OscConfig+0x76c>)
 80030c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fe fb99 	bl	8001804 <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030d4:	e011      	b.n	80030fa <HAL_RCC_OscConfig+0x78e>
 80030d6:	bf00      	nop
 80030d8:	58024400 	.word	0x58024400
 80030dc:	58024800 	.word	0x58024800
 80030e0:	fffffc0c 	.word	0xfffffc0c
 80030e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe fb8c 	bl	8001804 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e08a      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030fa:	4b47      	ldr	r3, [pc, #284]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x77c>
 8003106:	e082      	b.n	800320e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b43      	ldr	r3, [pc, #268]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a42      	ldr	r2, [pc, #264]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 800310e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe fb76 	bl	8001804 <HAL_GetTick>
 8003118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe fb72 	bl	8001804 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e070      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800312e:	4b3a      	ldr	r3, [pc, #232]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x7b0>
 800313a:	e068      	b.n	800320e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800313c:	4b36      	ldr	r3, [pc, #216]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003142:	4b35      	ldr	r3, [pc, #212]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	2b01      	cmp	r3, #1
 800314e:	d031      	beq.n	80031b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f003 0203 	and.w	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d12a      	bne.n	80031b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d122      	bne.n	80031b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003178:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d11a      	bne.n	80031b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	0a5b      	lsrs	r3, r3, #9
 8003182:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d111      	bne.n	80031b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	0c1b      	lsrs	r3, r3, #16
 8003194:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d108      	bne.n	80031b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	0e1b      	lsrs	r3, r3, #24
 80031a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e02b      	b.n	8003210 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80031b8:	4b17      	ldr	r3, [pc, #92]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 80031ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031bc:	08db      	lsrs	r3, r3, #3
 80031be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d01f      	beq.n	800320e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80031ce:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	4a11      	ldr	r2, [pc, #68]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031da:	f7fe fb13 	bl	8001804 <HAL_GetTick>
 80031de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80031e0:	bf00      	nop
 80031e2:	f7fe fb0f 	bl	8001804 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d0f9      	beq.n	80031e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 80031f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f2:	4b0a      	ldr	r3, [pc, #40]	@ (800321c <HAL_RCC_OscConfig+0x8b0>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031fa:	00d2      	lsls	r2, r2, #3
 80031fc:	4906      	ldr	r1, [pc, #24]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003202:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 8003204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003206:	4a04      	ldr	r2, [pc, #16]	@ (8003218 <HAL_RCC_OscConfig+0x8ac>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3730      	adds	r7, #48	@ 0x30
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	58024400 	.word	0x58024400
 800321c:	ffff0007 	.word	0xffff0007

08003220 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e19c      	b.n	800356e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b8a      	ldr	r3, [pc, #552]	@ (8003460 <HAL_RCC_ClockConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d910      	bls.n	8003264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b87      	ldr	r3, [pc, #540]	@ (8003460 <HAL_RCC_ClockConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 020f 	bic.w	r2, r3, #15
 800324a:	4985      	ldr	r1, [pc, #532]	@ (8003460 <HAL_RCC_ClockConfig+0x240>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b83      	ldr	r3, [pc, #524]	@ (8003460 <HAL_RCC_ClockConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e184      	b.n	800356e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	4b7b      	ldr	r3, [pc, #492]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800327c:	429a      	cmp	r2, r3
 800327e:	d908      	bls.n	8003292 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003280:	4b78      	ldr	r3, [pc, #480]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	4975      	ldr	r1, [pc, #468]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 800328e:	4313      	orrs	r3, r2
 8003290:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d010      	beq.n	80032c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	4b70      	ldr	r3, [pc, #448]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d908      	bls.n	80032c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	496a      	ldr	r1, [pc, #424]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	4b64      	ldr	r3, [pc, #400]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032d8:	429a      	cmp	r2, r3
 80032da:	d908      	bls.n	80032ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032dc:	4b61      	ldr	r3, [pc, #388]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	495e      	ldr	r1, [pc, #376]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d010      	beq.n	800331c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	4b59      	ldr	r3, [pc, #356]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003306:	429a      	cmp	r2, r3
 8003308:	d908      	bls.n	800331c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800330a:	4b56      	ldr	r3, [pc, #344]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	4953      	ldr	r1, [pc, #332]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 8003318:	4313      	orrs	r3, r2
 800331a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d010      	beq.n	800334a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	4b4d      	ldr	r3, [pc, #308]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	429a      	cmp	r2, r3
 8003336:	d908      	bls.n	800334a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003338:	4b4a      	ldr	r3, [pc, #296]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f023 020f 	bic.w	r2, r3, #15
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4947      	ldr	r1, [pc, #284]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 8003346:	4313      	orrs	r3, r2
 8003348:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d055      	beq.n	8003402 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003356:	4b43      	ldr	r3, [pc, #268]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4940      	ldr	r1, [pc, #256]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 8003364:	4313      	orrs	r3, r2
 8003366:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d107      	bne.n	8003380 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003370:	4b3c      	ldr	r3, [pc, #240]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d121      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0f6      	b.n	800356e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d107      	bne.n	8003398 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003388:	4b36      	ldr	r3, [pc, #216]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d115      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0ea      	b.n	800356e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033a0:	4b30      	ldr	r3, [pc, #192]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0de      	b.n	800356e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0d6      	b.n	800356e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033c0:	4b28      	ldr	r3, [pc, #160]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f023 0207 	bic.w	r2, r3, #7
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4925      	ldr	r1, [pc, #148]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d2:	f7fe fa17 	bl	8001804 <HAL_GetTick>
 80033d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033da:	f7fe fa13 	bl	8001804 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e0be      	b.n	800356e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	429a      	cmp	r2, r3
 8003400:	d1eb      	bne.n	80033da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d010      	beq.n	8003430 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	4b14      	ldr	r3, [pc, #80]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	429a      	cmp	r2, r3
 800341c:	d208      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341e:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f023 020f 	bic.w	r2, r3, #15
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	490e      	ldr	r1, [pc, #56]	@ (8003464 <HAL_RCC_ClockConfig+0x244>)
 800342c:	4313      	orrs	r3, r2
 800342e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <HAL_RCC_ClockConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d214      	bcs.n	8003468 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <HAL_RCC_ClockConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 020f 	bic.w	r2, r3, #15
 8003446:	4906      	ldr	r1, [pc, #24]	@ (8003460 <HAL_RCC_ClockConfig+0x240>)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <HAL_RCC_ClockConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e086      	b.n	800356e <HAL_RCC_ClockConfig+0x34e>
 8003460:	52002000 	.word	0x52002000
 8003464:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d010      	beq.n	8003496 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	4b3f      	ldr	r3, [pc, #252]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003480:	429a      	cmp	r2, r3
 8003482:	d208      	bcs.n	8003496 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003484:	4b3c      	ldr	r3, [pc, #240]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	4939      	ldr	r1, [pc, #228]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 8003492:	4313      	orrs	r3, r2
 8003494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d010      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	4b34      	ldr	r3, [pc, #208]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d208      	bcs.n	80034c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034b2:	4b31      	ldr	r3, [pc, #196]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	492e      	ldr	r1, [pc, #184]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	4b28      	ldr	r3, [pc, #160]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034dc:	429a      	cmp	r2, r3
 80034de:	d208      	bcs.n	80034f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034e0:	4b25      	ldr	r3, [pc, #148]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4922      	ldr	r1, [pc, #136]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800350a:	429a      	cmp	r2, r3
 800350c:	d208      	bcs.n	8003520 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800350e:	4b1a      	ldr	r3, [pc, #104]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4917      	ldr	r1, [pc, #92]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 800351c:	4313      	orrs	r3, r2
 800351e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003520:	f000 f834 	bl	800358c <HAL_RCC_GetSysClockFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b14      	ldr	r3, [pc, #80]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	4912      	ldr	r1, [pc, #72]	@ (800357c <HAL_RCC_ClockConfig+0x35c>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
 800353c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800353e:	4b0e      	ldr	r3, [pc, #56]	@ (8003578 <HAL_RCC_ClockConfig+0x358>)
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	4a0d      	ldr	r2, [pc, #52]	@ (800357c <HAL_RCC_ClockConfig+0x35c>)
 8003548:	5cd3      	ldrb	r3, [r2, r3]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	4a0a      	ldr	r2, [pc, #40]	@ (8003580 <HAL_RCC_ClockConfig+0x360>)
 8003556:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003558:	4a0a      	ldr	r2, [pc, #40]	@ (8003584 <HAL_RCC_ClockConfig+0x364>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800355e:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <HAL_RCC_ClockConfig+0x368>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe f904 	bl	8001770 <HAL_InitTick>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800356c:	7bfb      	ldrb	r3, [r7, #15]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	58024400 	.word	0x58024400
 800357c:	080073f4 	.word	0x080073f4
 8003580:	24000004 	.word	0x24000004
 8003584:	24000000 	.word	0x24000000
 8003588:	24000008 	.word	0x24000008

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	@ 0x24
 8003590:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003592:	4bb3      	ldr	r3, [pc, #716]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800359a:	2b18      	cmp	r3, #24
 800359c:	f200 8155 	bhi.w	800384a <HAL_RCC_GetSysClockFreq+0x2be>
 80035a0:	a201      	add	r2, pc, #4	@ (adr r2, 80035a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a6:	bf00      	nop
 80035a8:	0800360d 	.word	0x0800360d
 80035ac:	0800384b 	.word	0x0800384b
 80035b0:	0800384b 	.word	0x0800384b
 80035b4:	0800384b 	.word	0x0800384b
 80035b8:	0800384b 	.word	0x0800384b
 80035bc:	0800384b 	.word	0x0800384b
 80035c0:	0800384b 	.word	0x0800384b
 80035c4:	0800384b 	.word	0x0800384b
 80035c8:	08003633 	.word	0x08003633
 80035cc:	0800384b 	.word	0x0800384b
 80035d0:	0800384b 	.word	0x0800384b
 80035d4:	0800384b 	.word	0x0800384b
 80035d8:	0800384b 	.word	0x0800384b
 80035dc:	0800384b 	.word	0x0800384b
 80035e0:	0800384b 	.word	0x0800384b
 80035e4:	0800384b 	.word	0x0800384b
 80035e8:	08003639 	.word	0x08003639
 80035ec:	0800384b 	.word	0x0800384b
 80035f0:	0800384b 	.word	0x0800384b
 80035f4:	0800384b 	.word	0x0800384b
 80035f8:	0800384b 	.word	0x0800384b
 80035fc:	0800384b 	.word	0x0800384b
 8003600:	0800384b 	.word	0x0800384b
 8003604:	0800384b 	.word	0x0800384b
 8003608:	0800363f 	.word	0x0800363f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800360c:	4b94      	ldr	r3, [pc, #592]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003618:	4b91      	ldr	r3, [pc, #580]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	08db      	lsrs	r3, r3, #3
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	4a90      	ldr	r2, [pc, #576]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800362a:	e111      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800362c:	4b8d      	ldr	r3, [pc, #564]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800362e:	61bb      	str	r3, [r7, #24]
      break;
 8003630:	e10e      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003632:	4b8d      	ldr	r3, [pc, #564]	@ (8003868 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003634:	61bb      	str	r3, [r7, #24]
      break;
 8003636:	e10b      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003638:	4b8c      	ldr	r3, [pc, #560]	@ (800386c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800363a:	61bb      	str	r3, [r7, #24]
      break;
 800363c:	e108      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800363e:	4b88      	ldr	r3, [pc, #544]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003648:	4b85      	ldr	r3, [pc, #532]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003652:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003654:	4b82      	ldr	r3, [pc, #520]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800365e:	4b80      	ldr	r3, [pc, #512]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003662:	08db      	lsrs	r3, r3, #3
 8003664:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003676:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80e1 	beq.w	8003844 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b02      	cmp	r3, #2
 8003686:	f000 8083 	beq.w	8003790 <HAL_RCC_GetSysClockFreq+0x204>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b02      	cmp	r3, #2
 800368e:	f200 80a1 	bhi.w	80037d4 <HAL_RCC_GetSysClockFreq+0x248>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x114>
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d056      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x1c0>
 800369e:	e099      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d02d      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	08db      	lsrs	r3, r3, #3
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	4a6b      	ldr	r2, [pc, #428]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
 80036bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	ee07 3a90 	vmov	s15, r3
 80036c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036d6:	4b62      	ldr	r3, [pc, #392]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003702:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003706:	e087      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003712:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003874 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800371a:	4b51      	ldr	r3, [pc, #324]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372a:	ed97 6a02 	vldr	s12, [r7, #8]
 800372e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003870 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800373a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800373e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800374a:	e065      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003756:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003878 <HAL_RCC_GetSysClockFreq+0x2ec>
 800375a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800375e:	4b40      	ldr	r3, [pc, #256]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800376e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003772:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003870 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800377a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800377e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800378e:	e043      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800387c <HAL_RCC_GetSysClockFreq+0x2f0>
 800379e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037d2:	e021      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003878 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003870 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800380a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003816:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003818:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381c:	0a5b      	lsrs	r3, r3, #9
 800381e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003822:	3301      	adds	r3, #1
 8003824:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003830:	edd7 6a07 	vldr	s13, [r7, #28]
 8003834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800383c:	ee17 3a90 	vmov	r3, s15
 8003840:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003842:	e005      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
      break;
 8003848:	e002      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800384c:	61bb      	str	r3, [r7, #24]
      break;
 800384e:	bf00      	nop
  }

  return sysclockfreq;
 8003850:	69bb      	ldr	r3, [r7, #24]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3724      	adds	r7, #36	@ 0x24
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	58024400 	.word	0x58024400
 8003864:	03d09000 	.word	0x03d09000
 8003868:	003d0900 	.word	0x003d0900
 800386c:	017d7840 	.word	0x017d7840
 8003870:	46000000 	.word	0x46000000
 8003874:	4c742400 	.word	0x4c742400
 8003878:	4a742400 	.word	0x4a742400
 800387c:	4bbebc20 	.word	0x4bbebc20

08003880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003886:	f7ff fe81 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800388a:	4602      	mov	r2, r0
 800388c:	4b10      	ldr	r3, [pc, #64]	@ (80038d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	490f      	ldr	r1, [pc, #60]	@ (80038d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003898:	5ccb      	ldrb	r3, [r1, r3]
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038a4:	4b0a      	ldr	r3, [pc, #40]	@ (80038d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	4a09      	ldr	r2, [pc, #36]	@ (80038d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80038ae:	5cd3      	ldrb	r3, [r2, r3]
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a07      	ldr	r2, [pc, #28]	@ (80038d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80038bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038be:	4a07      	ldr	r2, [pc, #28]	@ (80038dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038c4:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	58024400 	.word	0x58024400
 80038d4:	080073f4 	.word	0x080073f4
 80038d8:	24000004 	.word	0x24000004
 80038dc:	24000000 	.word	0x24000000

080038e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038e4:	f7ff ffcc 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4904      	ldr	r1, [pc, #16]	@ (8003908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	58024400 	.word	0x58024400
 8003908:	080073f4 	.word	0x080073f4

0800390c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003910:	f7ff ffb6 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 8003914:	4602      	mov	r2, r0
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	4904      	ldr	r1, [pc, #16]	@ (8003934 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003922:	5ccb      	ldrb	r3, [r1, r3]
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	58024400 	.word	0x58024400
 8003934:	080073f4 	.word	0x080073f4

08003938 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800393c:	b0ca      	sub	sp, #296	@ 0x128
 800393e:	af00      	add	r7, sp, #0
 8003940:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003944:	2300      	movs	r3, #0
 8003946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800394a:	2300      	movs	r3, #0
 800394c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800395c:	2500      	movs	r5, #0
 800395e:	ea54 0305 	orrs.w	r3, r4, r5
 8003962:	d049      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800396a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800396e:	d02f      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003970:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003974:	d828      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003976:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800397a:	d01a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800397c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003980:	d822      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800398a:	d007      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800398c:	e01c      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398e:	4bb8      	ldr	r3, [pc, #736]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003992:	4ab7      	ldr	r2, [pc, #732]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800399a:	e01a      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	3308      	adds	r3, #8
 80039a2:	2102      	movs	r1, #2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 fc8f 	bl	80052c8 <RCCEx_PLL2_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039b0:	e00f      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b6:	3328      	adds	r3, #40	@ 0x28
 80039b8:	2102      	movs	r1, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 fd36 	bl	800542c <RCCEx_PLL3_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039c6:	e004      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039ce:	e000      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80039d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039da:	4ba5      	ldr	r3, [pc, #660]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039e8:	4aa1      	ldr	r2, [pc, #644]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ea:	430b      	orrs	r3, r1
 80039ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ee:	e003      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a04:	f04f 0900 	mov.w	r9, #0
 8003a08:	ea58 0309 	orrs.w	r3, r8, r9
 8003a0c:	d047      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d82a      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a18:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a35 	.word	0x08003a35
 8003a24:	08003a43 	.word	0x08003a43
 8003a28:	08003a59 	.word	0x08003a59
 8003a2c:	08003a77 	.word	0x08003a77
 8003a30:	08003a77 	.word	0x08003a77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a34:	4b8e      	ldr	r3, [pc, #568]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	4a8d      	ldr	r2, [pc, #564]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a40:	e01a      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	3308      	adds	r3, #8
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 fc3c 	bl	80052c8 <RCCEx_PLL2_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a56:	e00f      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	3328      	adds	r3, #40	@ 0x28
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fce3 	bl	800542c <RCCEx_PLL3_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a6c:	e004      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a74:	e000      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a80:	4b7b      	ldr	r3, [pc, #492]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a84:	f023 0107 	bic.w	r1, r3, #7
 8003a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	4a78      	ldr	r2, [pc, #480]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a94:	e003      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003aaa:	f04f 0b00 	mov.w	fp, #0
 8003aae:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ab2:	d04c      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abe:	d030      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac4:	d829      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ac6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ac8:	d02d      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003aca:	2bc0      	cmp	r3, #192	@ 0xc0
 8003acc:	d825      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ace:	2b80      	cmp	r3, #128	@ 0x80
 8003ad0:	d018      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ad2:	2b80      	cmp	r3, #128	@ 0x80
 8003ad4:	d821      	bhi.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003ada:	2b40      	cmp	r3, #64	@ 0x40
 8003adc:	d007      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003ade:	e01c      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae0:	4b63      	ldr	r3, [pc, #396]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	4a62      	ldr	r2, [pc, #392]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003aec:	e01c      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af2:	3308      	adds	r3, #8
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fbe6 	bl	80052c8 <RCCEx_PLL2_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b02:	e011      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b08:	3328      	adds	r3, #40	@ 0x28
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 fc8d 	bl	800542c <RCCEx_PLL3_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b18:	e006      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b20:	e002      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b30:	4b4f      	ldr	r3, [pc, #316]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b34:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3e:	4a4c      	ldr	r2, [pc, #304]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b44:	e003      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b5a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003b64:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	d053      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b7a:	d035      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003b7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b80:	d82e      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b82:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b86:	d031      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003b88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b8c:	d828      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b92:	d01a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b98:	d822      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ba2:	d007      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003ba4:	e01c      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba6:	4b32      	ldr	r3, [pc, #200]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	4a31      	ldr	r2, [pc, #196]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bb2:	e01c      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb8:	3308      	adds	r3, #8
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 fb83 	bl	80052c8 <RCCEx_PLL2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003bc8:	e011      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bce:	3328      	adds	r3, #40	@ 0x28
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 fc2a 	bl	800542c <RCCEx_PLL3_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bde:	e006      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003be6:	e002      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003be8:	bf00      	nop
 8003bea:	e000      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c06:	4a1a      	ldr	r2, [pc, #104]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0c:	e003      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003c22:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c2c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003c30:	460b      	mov	r3, r1
 8003c32:	4313      	orrs	r3, r2
 8003c34:	d056      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c42:	d038      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c48:	d831      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c4e:	d034      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c54:	d82b      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c5a:	d01d      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c60:	d825      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c6c:	e01f      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c6e:	bf00      	nop
 8003c70:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c74:	4ba2      	ldr	r3, [pc, #648]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	4aa1      	ldr	r2, [pc, #644]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c80:	e01c      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	3308      	adds	r3, #8
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f001 fb1c 	bl	80052c8 <RCCEx_PLL2_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c96:	e011      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9c:	3328      	adds	r3, #40	@ 0x28
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 fbc3 	bl	800542c <RCCEx_PLL3_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cac:	e006      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cb4:	e002      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003cd4:	4a8a      	ldr	r2, [pc, #552]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cda:	e003      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003cfa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	d03a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0a:	2b30      	cmp	r3, #48	@ 0x30
 8003d0c:	d01f      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d0e:	2b30      	cmp	r3, #48	@ 0x30
 8003d10:	d819      	bhi.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d00c      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d815      	bhi.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d019      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d111      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d22:	4b77      	ldr	r3, [pc, #476]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	4a76      	ldr	r2, [pc, #472]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d2e:	e011      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	3308      	adds	r3, #8
 8003d36:	2102      	movs	r1, #2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 fac5 	bl	80052c8 <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d44:	e006      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d4c:	e002      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10a      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d5c:	4b68      	ldr	r3, [pc, #416]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6a:	4a65      	ldr	r2, [pc, #404]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d70:	e003      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003d86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003d90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4313      	orrs	r3, r2
 8003d98:	d051      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003da4:	d035      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003da6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003daa:	d82e      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003db0:	d031      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003db2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003db6:	d828      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dbc:	d01a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc2:	d822      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dcc:	d007      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003dce:	e01c      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ddc:	e01c      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de2:	3308      	adds	r3, #8
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 fa6e 	bl	80052c8 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003df2:	e011      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	3328      	adds	r3, #40	@ 0x28
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 fb15 	bl	800542c <RCCEx_PLL3_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e08:	e006      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e10:	e002      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e20:	4b37      	ldr	r3, [pc, #220]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2e:	4a34      	ldr	r2, [pc, #208]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e34:	e003      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	d056      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e68:	d033      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e6e:	d82c      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e74:	d02f      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003e76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e7a:	d826      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e80:	d02b      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003e82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e86:	d820      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e8c:	d012      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003e8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e92:	d81a      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d022      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e9c:	d115      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 fa0e 	bl	80052c8 <RCCEx_PLL2_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003eb2:	e015      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb8:	3328      	adds	r3, #40	@ 0x28
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 fab5 	bl	800542c <RCCEx_PLL3_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ed0:	e006      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e004      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10d      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ee8:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ef6:	4a02      	ldr	r2, [pc, #8]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6513      	str	r3, [r2, #80]	@ 0x50
 8003efc:	e006      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003efe:	bf00      	nop
 8003f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f22:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	d055      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f38:	d033      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f3e:	d82c      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f44:	d02f      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4a:	d826      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f50:	d02b      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f56:	d820      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f5c:	d012      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f62:	d81a      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d022      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003f68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f6c:	d115      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f72:	3308      	adds	r3, #8
 8003f74:	2101      	movs	r1, #1
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 f9a6 	bl	80052c8 <RCCEx_PLL2_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f82:	e015      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	3328      	adds	r3, #40	@ 0x28
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 fa4d 	bl	800542c <RCCEx_PLL3_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fa0:	e006      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e004      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e002      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003faa:	bf00      	nop
 8003fac:	e000      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fb8:	4ba3      	ldr	r3, [pc, #652]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fc8:	4a9f      	ldr	r2, [pc, #636]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fce:	e003      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003fee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d037      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004002:	d00e      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004008:	d816      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800400a:	2b00      	cmp	r3, #0
 800400c:	d018      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800400e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004012:	d111      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004014:	4b8c      	ldr	r3, [pc, #560]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	4a8b      	ldr	r2, [pc, #556]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800401a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800401e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004020:	e00f      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004026:	3308      	adds	r3, #8
 8004028:	2101      	movs	r1, #1
 800402a:	4618      	mov	r0, r3
 800402c:	f001 f94c 	bl	80052c8 <RCCEx_PLL2_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004036:	e004      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800404a:	4b7f      	ldr	r3, [pc, #508]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800404c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004058:	4a7b      	ldr	r2, [pc, #492]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405a:	430b      	orrs	r3, r1
 800405c:	6513      	str	r3, [r2, #80]	@ 0x50
 800405e:	e003      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004064:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800407e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004082:	460b      	mov	r3, r1
 8004084:	4313      	orrs	r3, r2
 8004086:	d039      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800408e:	2b03      	cmp	r3, #3
 8004090:	d81c      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004092:	a201      	add	r2, pc, #4	@ (adr r2, 8004098 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004098:	080040d5 	.word	0x080040d5
 800409c:	080040a9 	.word	0x080040a9
 80040a0:	080040b7 	.word	0x080040b7
 80040a4:	080040d5 	.word	0x080040d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040a8:	4b67      	ldr	r3, [pc, #412]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	4a66      	ldr	r2, [pc, #408]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040b4:	e00f      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ba:	3308      	adds	r3, #8
 80040bc:	2102      	movs	r1, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 f902 	bl	80052c8 <RCCEx_PLL2_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040ca:	e004      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d2:	e000      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80040d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040de:	4b5a      	ldr	r3, [pc, #360]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	f023 0103 	bic.w	r1, r3, #3
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ec:	4a56      	ldr	r2, [pc, #344]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040f2:	e003      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004108:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004112:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004116:	460b      	mov	r3, r1
 8004118:	4313      	orrs	r3, r2
 800411a:	f000 809f 	beq.w	800425c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800411e:	4b4b      	ldr	r3, [pc, #300]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a4a      	ldr	r2, [pc, #296]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004128:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800412a:	f7fd fb6b 	bl	8001804 <HAL_GetTick>
 800412e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004132:	e00b      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004134:	f7fd fb66 	bl	8001804 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b64      	cmp	r3, #100	@ 0x64
 8004142:	d903      	bls.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800414a:	e005      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800414c:	4b3f      	ldr	r3, [pc, #252]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ed      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800415c:	2b00      	cmp	r3, #0
 800415e:	d179      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004160:	4b39      	ldr	r3, [pc, #228]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004162:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004168:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800416c:	4053      	eors	r3, r2
 800416e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004172:	2b00      	cmp	r3, #0
 8004174:	d015      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004176:	4b34      	ldr	r3, [pc, #208]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800417e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004182:	4b31      	ldr	r3, [pc, #196]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004186:	4a30      	ldr	r2, [pc, #192]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800418e:	4b2e      	ldr	r3, [pc, #184]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	4a2d      	ldr	r2, [pc, #180]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004198:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800419a:	4a2b      	ldr	r2, [pc, #172]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800419c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041a0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ae:	d118      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fd fb28 	bl	8001804 <HAL_GetTick>
 80041b4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041b8:	e00d      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ba:	f7fd fb23 	bl	8001804 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041c4:	1ad2      	subs	r2, r2, r3
 80041c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d903      	bls.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80041d4:	e005      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0eb      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80041e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d129      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041fa:	d10e      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80041fc:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004208:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800420c:	091a      	lsrs	r2, r3, #4
 800420e:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004210:	4013      	ands	r3, r2
 8004212:	4a0d      	ldr	r2, [pc, #52]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004214:	430b      	orrs	r3, r1
 8004216:	6113      	str	r3, [r2, #16]
 8004218:	e005      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800421a:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	4a0a      	ldr	r2, [pc, #40]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004220:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004224:	6113      	str	r3, [r2, #16]
 8004226:	4b08      	ldr	r3, [pc, #32]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004228:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004236:	4a04      	ldr	r2, [pc, #16]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004238:	430b      	orrs	r3, r1
 800423a:	6713      	str	r3, [r2, #112]	@ 0x70
 800423c:	e00e      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800423e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004246:	e009      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004248:	58024400 	.word	0x58024400
 800424c:	58024800 	.word	0x58024800
 8004250:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004258:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800425c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f002 0301 	and.w	r3, r2, #1
 8004268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004272:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004276:	460b      	mov	r3, r1
 8004278:	4313      	orrs	r3, r2
 800427a:	f000 8089 	beq.w	8004390 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004284:	2b28      	cmp	r3, #40	@ 0x28
 8004286:	d86b      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004288:	a201      	add	r2, pc, #4	@ (adr r2, 8004290 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	08004369 	.word	0x08004369
 8004294:	08004361 	.word	0x08004361
 8004298:	08004361 	.word	0x08004361
 800429c:	08004361 	.word	0x08004361
 80042a0:	08004361 	.word	0x08004361
 80042a4:	08004361 	.word	0x08004361
 80042a8:	08004361 	.word	0x08004361
 80042ac:	08004361 	.word	0x08004361
 80042b0:	08004335 	.word	0x08004335
 80042b4:	08004361 	.word	0x08004361
 80042b8:	08004361 	.word	0x08004361
 80042bc:	08004361 	.word	0x08004361
 80042c0:	08004361 	.word	0x08004361
 80042c4:	08004361 	.word	0x08004361
 80042c8:	08004361 	.word	0x08004361
 80042cc:	08004361 	.word	0x08004361
 80042d0:	0800434b 	.word	0x0800434b
 80042d4:	08004361 	.word	0x08004361
 80042d8:	08004361 	.word	0x08004361
 80042dc:	08004361 	.word	0x08004361
 80042e0:	08004361 	.word	0x08004361
 80042e4:	08004361 	.word	0x08004361
 80042e8:	08004361 	.word	0x08004361
 80042ec:	08004361 	.word	0x08004361
 80042f0:	08004369 	.word	0x08004369
 80042f4:	08004361 	.word	0x08004361
 80042f8:	08004361 	.word	0x08004361
 80042fc:	08004361 	.word	0x08004361
 8004300:	08004361 	.word	0x08004361
 8004304:	08004361 	.word	0x08004361
 8004308:	08004361 	.word	0x08004361
 800430c:	08004361 	.word	0x08004361
 8004310:	08004369 	.word	0x08004369
 8004314:	08004361 	.word	0x08004361
 8004318:	08004361 	.word	0x08004361
 800431c:	08004361 	.word	0x08004361
 8004320:	08004361 	.word	0x08004361
 8004324:	08004361 	.word	0x08004361
 8004328:	08004361 	.word	0x08004361
 800432c:	08004361 	.word	0x08004361
 8004330:	08004369 	.word	0x08004369
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004338:	3308      	adds	r3, #8
 800433a:	2101      	movs	r1, #1
 800433c:	4618      	mov	r0, r3
 800433e:	f000 ffc3 	bl	80052c8 <RCCEx_PLL2_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004348:	e00f      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800434a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434e:	3328      	adds	r3, #40	@ 0x28
 8004350:	2101      	movs	r1, #1
 8004352:	4618      	mov	r0, r3
 8004354:	f001 f86a 	bl	800542c <RCCEx_PLL3_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800435e:	e004      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004372:	4bbf      	ldr	r3, [pc, #764]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004376:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004380:	4abb      	ldr	r2, [pc, #748]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004382:	430b      	orrs	r3, r1
 8004384:	6553      	str	r3, [r2, #84]	@ 0x54
 8004386:	e003      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800438c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f002 0302 	and.w	r3, r2, #2
 800439c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	d041      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d824      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80043ba:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	0800440d 	.word	0x0800440d
 80043c4:	080043d9 	.word	0x080043d9
 80043c8:	080043ef 	.word	0x080043ef
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	0800440d 	.word	0x0800440d
 80043d4:	0800440d 	.word	0x0800440d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043dc:	3308      	adds	r3, #8
 80043de:	2101      	movs	r1, #1
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 ff71 	bl	80052c8 <RCCEx_PLL2_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80043ec:	e00f      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	3328      	adds	r3, #40	@ 0x28
 80043f4:	2101      	movs	r1, #1
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 f818 	bl	800542c <RCCEx_PLL3_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004402:	e004      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800440a:	e000      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800440c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004416:	4b96      	ldr	r3, [pc, #600]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441a:	f023 0107 	bic.w	r1, r3, #7
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004422:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004424:	4a92      	ldr	r2, [pc, #584]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004426:	430b      	orrs	r3, r1
 8004428:	6553      	str	r3, [r2, #84]	@ 0x54
 800442a:	e003      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f002 0304 	and.w	r3, r2, #4
 8004440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004444:	2300      	movs	r3, #0
 8004446:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800444a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800444e:	460b      	mov	r3, r1
 8004450:	4313      	orrs	r3, r2
 8004452:	d044      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800445c:	2b05      	cmp	r3, #5
 800445e:	d825      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004460:	a201      	add	r2, pc, #4	@ (adr r2, 8004468 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	080044b5 	.word	0x080044b5
 800446c:	08004481 	.word	0x08004481
 8004470:	08004497 	.word	0x08004497
 8004474:	080044b5 	.word	0x080044b5
 8004478:	080044b5 	.word	0x080044b5
 800447c:	080044b5 	.word	0x080044b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	3308      	adds	r3, #8
 8004486:	2101      	movs	r1, #1
 8004488:	4618      	mov	r0, r3
 800448a:	f000 ff1d 	bl	80052c8 <RCCEx_PLL2_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004494:	e00f      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	3328      	adds	r3, #40	@ 0x28
 800449c:	2101      	movs	r1, #1
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 ffc4 	bl	800542c <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044aa:	e004      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044b2:	e000      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80044b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044be:	4b6c      	ldr	r3, [pc, #432]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c2:	f023 0107 	bic.w	r1, r3, #7
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ce:	4a68      	ldr	r2, [pc, #416]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f002 0320 	and.w	r3, r2, #32
 80044ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044ee:	2300      	movs	r3, #0
 80044f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044f8:	460b      	mov	r3, r1
 80044fa:	4313      	orrs	r3, r2
 80044fc:	d055      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800450a:	d033      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800450c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004510:	d82c      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004516:	d02f      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451c:	d826      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800451e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004522:	d02b      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004524:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004528:	d820      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800452a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800452e:	d012      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004534:	d81a      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d022      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800453a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800453e:	d115      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004544:	3308      	adds	r3, #8
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f000 febd 	bl	80052c8 <RCCEx_PLL2_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004554:	e015      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455a:	3328      	adds	r3, #40	@ 0x28
 800455c:	2102      	movs	r1, #2
 800455e:	4618      	mov	r0, r3
 8004560:	f000 ff64 	bl	800542c <RCCEx_PLL3_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800456a:	e00a      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004572:	e006      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004574:	bf00      	nop
 8004576:	e004      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004578:	bf00      	nop
 800457a:	e002      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10b      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800458a:	4b39      	ldr	r3, [pc, #228]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	4a35      	ldr	r2, [pc, #212]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800459c:	430b      	orrs	r3, r1
 800459e:	6553      	str	r3, [r2, #84]	@ 0x54
 80045a0:	e003      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80045b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045ba:	2300      	movs	r3, #0
 80045bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80045c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d058      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80045d6:	d033      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80045d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80045dc:	d82c      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e2:	d02f      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80045e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045e8:	d826      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045ee:	d02b      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80045f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045f4:	d820      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045fa:	d012      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80045fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004600:	d81a      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d022      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460a:	d115      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004610:	3308      	adds	r3, #8
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fe57 	bl	80052c8 <RCCEx_PLL2_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004620:	e015      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	3328      	adds	r3, #40	@ 0x28
 8004628:	2102      	movs	r1, #2
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fefe 	bl	800542c <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004636:	e00a      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800463e:	e006      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004640:	bf00      	nop
 8004642:	e004      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004644:	bf00      	nop
 8004646:	e002      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004648:	bf00      	nop
 800464a:	e000      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800464c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10e      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004656:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004666:	4a02      	ldr	r2, [pc, #8]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004668:	430b      	orrs	r3, r1
 800466a:	6593      	str	r3, [r2, #88]	@ 0x58
 800466c:	e006      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800466e:	bf00      	nop
 8004670:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004678:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800467c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800468c:	2300      	movs	r3, #0
 800468e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004692:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004696:	460b      	mov	r3, r1
 8004698:	4313      	orrs	r3, r2
 800469a:	d055      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046a8:	d033      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80046aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046ae:	d82c      	bhi.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046b4:	d02f      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80046b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ba:	d826      	bhi.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046c0:	d02b      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80046c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046c6:	d820      	bhi.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046cc:	d012      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80046ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046d2:	d81a      	bhi.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d022      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80046d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046dc:	d115      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e2:	3308      	adds	r3, #8
 80046e4:	2100      	movs	r1, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fdee 	bl	80052c8 <RCCEx_PLL2_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80046f2:	e015      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f8:	3328      	adds	r3, #40	@ 0x28
 80046fa:	2102      	movs	r1, #2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fe95 	bl	800542c <RCCEx_PLL3_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004708:	e00a      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004710:	e006      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004712:	bf00      	nop
 8004714:	e004      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004716:	bf00      	nop
 8004718:	e002      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800471a:	bf00      	nop
 800471c:	e000      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800471e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10b      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004728:	4ba1      	ldr	r3, [pc, #644]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004734:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004738:	4a9d      	ldr	r2, [pc, #628]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800473a:	430b      	orrs	r3, r1
 800473c:	6593      	str	r3, [r2, #88]	@ 0x58
 800473e:	e003      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f002 0308 	and.w	r3, r2, #8
 8004754:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004758:	2300      	movs	r3, #0
 800475a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800475e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004762:	460b      	mov	r3, r1
 8004764:	4313      	orrs	r3, r2
 8004766:	d01e      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004774:	d10c      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477a:	3328      	adds	r3, #40	@ 0x28
 800477c:	2102      	movs	r1, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fe54 	bl	800542c <RCCEx_PLL3_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004790:	4b87      	ldr	r3, [pc, #540]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004794:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a0:	4a83      	ldr	r2, [pc, #524]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047a2:	430b      	orrs	r3, r1
 80047a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f002 0310 	and.w	r3, r2, #16
 80047b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047b6:	2300      	movs	r3, #0
 80047b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80047bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80047c0:	460b      	mov	r3, r1
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d01e      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d2:	d10c      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d8:	3328      	adds	r3, #40	@ 0x28
 80047da:	2102      	movs	r1, #2
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fe25 	bl	800542c <RCCEx_PLL3_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047ee:	4b70      	ldr	r3, [pc, #448]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047fe:	4a6c      	ldr	r2, [pc, #432]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004800:	430b      	orrs	r3, r1
 8004802:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004810:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004814:	2300      	movs	r3, #0
 8004816:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800481a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800481e:	460b      	mov	r3, r1
 8004820:	4313      	orrs	r3, r2
 8004822:	d03e      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004828:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800482c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004830:	d022      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004836:	d81b      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004840:	d00b      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004842:	e015      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004848:	3308      	adds	r3, #8
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fd3b 	bl	80052c8 <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004858:	e00f      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	3328      	adds	r3, #40	@ 0x28
 8004860:	2102      	movs	r1, #2
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fde2 	bl	800542c <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800486e:	e004      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004876:	e000      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800487a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10b      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004882:	4b4b      	ldr	r3, [pc, #300]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004886:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004892:	4a47      	ldr	r2, [pc, #284]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004894:	430b      	orrs	r3, r1
 8004896:	6593      	str	r3, [r2, #88]	@ 0x58
 8004898:	e003      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800489e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80048ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048b0:	2300      	movs	r3, #0
 80048b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80048b8:	460b      	mov	r3, r1
 80048ba:	4313      	orrs	r3, r2
 80048bc:	d03b      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048ca:	d01f      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80048cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048d0:	d818      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80048d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048d6:	d003      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80048d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048dc:	d007      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80048de:	e011      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e0:	4b33      	ldr	r3, [pc, #204]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	4a32      	ldr	r2, [pc, #200]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80048ec:	e00f      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	3328      	adds	r3, #40	@ 0x28
 80048f4:	2101      	movs	r1, #1
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fd98 	bl	800542c <RCCEx_PLL3_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004902:	e004      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800490c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10b      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004916:	4b26      	ldr	r3, [pc, #152]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004926:	4a22      	ldr	r2, [pc, #136]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004928:	430b      	orrs	r3, r1
 800492a:	6553      	str	r3, [r2, #84]	@ 0x54
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004942:	673b      	str	r3, [r7, #112]	@ 0x70
 8004944:	2300      	movs	r3, #0
 8004946:	677b      	str	r3, [r7, #116]	@ 0x74
 8004948:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800494c:	460b      	mov	r3, r1
 800494e:	4313      	orrs	r3, r2
 8004950:	d034      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004960:	d007      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004962:	e011      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004964:	4b12      	ldr	r3, [pc, #72]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	4a11      	ldr	r2, [pc, #68]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800496a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800496e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004970:	e00e      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004976:	3308      	adds	r3, #8
 8004978:	2102      	movs	r1, #2
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fca4 	bl	80052c8 <RCCEx_PLL2_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004986:	e003      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800498e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10d      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004998:	4b05      	ldr	r3, [pc, #20]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800499a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a6:	4a02      	ldr	r2, [pc, #8]	@ (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049a8:	430b      	orrs	r3, r1
 80049aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049ac:	e006      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80049ae:	bf00      	nop
 80049b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80049c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ca:	2300      	movs	r3, #0
 80049cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80049d2:	460b      	mov	r3, r1
 80049d4:	4313      	orrs	r3, r2
 80049d6:	d00c      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049dc:	3328      	adds	r3, #40	@ 0x28
 80049de:	2102      	movs	r1, #2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fd23 	bl	800542c <RCCEx_PLL3_Config>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80049fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a00:	2300      	movs	r3, #0
 8004a02:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	d038      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a1a:	d018      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004a1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a20:	d811      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a26:	d014      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a2c:	d80b      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d011      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a36:	d106      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a38:	4bc3      	ldr	r3, [pc, #780]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3c:	4ac2      	ldr	r2, [pc, #776]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a44:	e008      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a4c:	e004      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a4e:	bf00      	nop
 8004a50:	e002      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10b      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a60:	4bb9      	ldr	r3, [pc, #740]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a70:	4ab5      	ldr	r2, [pc, #724]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a72:	430b      	orrs	r3, r1
 8004a74:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a76:	e003      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a88:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a8e:	2300      	movs	r3, #0
 8004a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004a96:	460b      	mov	r3, r1
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a9c:	4baa      	ldr	r3, [pc, #680]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aaa:	4aa7      	ldr	r2, [pc, #668]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004abc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004abe:	2300      	movs	r3, #0
 8004ac0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ac2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	d00a      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004acc:	4b9e      	ldr	r3, [pc, #632]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004adc:	4a9a      	ldr	r2, [pc, #616]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004af0:	2300      	movs	r3, #0
 8004af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d009      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004afe:	4b92      	ldr	r3, [pc, #584]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b02:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b0c:	4a8e      	ldr	r2, [pc, #568]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b20:	2300      	movs	r3, #0
 8004b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	d00e      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b2e:	4b86      	ldr	r3, [pc, #536]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	4a85      	ldr	r2, [pc, #532]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b38:	6113      	str	r3, [r2, #16]
 8004b3a:	4b83      	ldr	r3, [pc, #524]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b3c:	6919      	ldr	r1, [r3, #16]
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b46:	4a80      	ldr	r2, [pc, #512]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004b58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004b62:	460b      	mov	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b68:	4b77      	ldr	r3, [pc, #476]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b6c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b76:	4a74      	ldr	r2, [pc, #464]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004b92:	460b      	mov	r3, r1
 8004b94:	4313      	orrs	r3, r2
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b98:	4b6b      	ldr	r3, [pc, #428]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ba8:	4a67      	ldr	r2, [pc, #412]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004baa:	430b      	orrs	r3, r1
 8004bac:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bc0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d011      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	3308      	adds	r3, #8
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fb78 	bl	80052c8 <RCCEx_PLL2_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	6239      	str	r1, [r7, #32]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c00:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c04:	460b      	mov	r3, r1
 8004c06:	4313      	orrs	r3, r2
 8004c08:	d011      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0e:	3308      	adds	r3, #8
 8004c10:	2101      	movs	r1, #1
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fb58 	bl	80052c8 <RCCEx_PLL2_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	2100      	movs	r1, #0
 8004c38:	61b9      	str	r1, [r7, #24]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c44:	460b      	mov	r3, r1
 8004c46:	4313      	orrs	r3, r2
 8004c48:	d011      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4e:	3308      	adds	r3, #8
 8004c50:	2102      	movs	r1, #2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb38 	bl	80052c8 <RCCEx_PLL2_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	2100      	movs	r1, #0
 8004c78:	6139      	str	r1, [r7, #16]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c84:	460b      	mov	r3, r1
 8004c86:	4313      	orrs	r3, r2
 8004c88:	d011      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8e:	3328      	adds	r3, #40	@ 0x28
 8004c90:	2100      	movs	r1, #0
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fbca 	bl	800542c <RCCEx_PLL3_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	d011      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cce:	3328      	adds	r3, #40	@ 0x28
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fbaa 	bl	800542c <RCCEx_PLL3_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d04:	460b      	mov	r3, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	d011      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0e:	3328      	adds	r3, #40	@ 0x28
 8004d10:	2102      	movs	r1, #2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fb8a 	bl	800542c <RCCEx_PLL3_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004d2e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	e000      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004d42:	46bd      	mov	sp, r7
 8004d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d48:	58024400 	.word	0x58024400

08004d4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d50:	f7fe fd96 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	4904      	ldr	r1, [pc, #16]	@ (8004d74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	58024400 	.word	0x58024400
 8004d74:	080073f4 	.word	0x080073f4

08004d78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	@ 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d80:	4ba1      	ldr	r3, [pc, #644]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d8a:	4b9f      	ldr	r3, [pc, #636]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8e:	0b1b      	lsrs	r3, r3, #12
 8004d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d96:	4b9c      	ldr	r3, [pc, #624]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004da2:	4b99      	ldr	r3, [pc, #612]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da6:	08db      	lsrs	r3, r3, #3
 8004da8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8111 	beq.w	8004fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	f000 8083 	beq.w	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	f200 80a1 	bhi.w	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d056      	beq.n	8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004de2:	e099      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004de4:	4b88      	ldr	r3, [pc, #544]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02d      	beq.n	8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004df0:	4b85      	ldr	r3, [pc, #532]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	08db      	lsrs	r3, r3, #3
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	4a84      	ldr	r2, [pc, #528]	@ (800500c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e4a:	e087      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e8e:	e065      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea2:	4b59      	ldr	r3, [pc, #356]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ed2:	e043      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800501c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee6:	4b48      	ldr	r3, [pc, #288]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004efa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f16:	e021      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2a:	4b37      	ldr	r3, [pc, #220]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	0a5b      	lsrs	r3, r3, #9
 8004f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f82:	ee17 2a90 	vmov	r2, s15
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb0:	ee17 2a90 	vmov	r2, s15
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004fb8:	4b13      	ldr	r3, [pc, #76]	@ (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbc:	0e1b      	lsrs	r3, r3, #24
 8004fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fde:	ee17 2a90 	vmov	r2, s15
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fe6:	e008      	b.n	8004ffa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
}
 8004ffa:	bf00      	nop
 8004ffc:	3724      	adds	r7, #36	@ 0x24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	58024400 	.word	0x58024400
 800500c:	03d09000 	.word	0x03d09000
 8005010:	46000000 	.word	0x46000000
 8005014:	4c742400 	.word	0x4c742400
 8005018:	4a742400 	.word	0x4a742400
 800501c:	4bbebc20 	.word	0x4bbebc20

08005020 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	@ 0x24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005028:	4ba1      	ldr	r3, [pc, #644]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800502a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005032:	4b9f      	ldr	r3, [pc, #636]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	0d1b      	lsrs	r3, r3, #20
 8005038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800503c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800503e:	4b9c      	ldr	r3, [pc, #624]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800504a:	4b99      	ldr	r3, [pc, #612]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504e:	08db      	lsrs	r3, r3, #3
 8005050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005062:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8111 	beq.w	8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b02      	cmp	r3, #2
 8005072:	f000 8083 	beq.w	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b02      	cmp	r3, #2
 800507a:	f200 80a1 	bhi.w	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d056      	beq.n	8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800508a:	e099      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800508c:	4b88      	ldr	r3, [pc, #544]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02d      	beq.n	80050f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005098:	4b85      	ldr	r3, [pc, #532]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	08db      	lsrs	r3, r3, #3
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	4a84      	ldr	r2, [pc, #528]	@ (80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c2:	4b7b      	ldr	r3, [pc, #492]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050f2:	e087      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005106:	4b6a      	ldr	r3, [pc, #424]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005116:	ed97 6a03 	vldr	s12, [r7, #12]
 800511a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800511e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005136:	e065      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514a:	4b59      	ldr	r3, [pc, #356]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515a:	ed97 6a03 	vldr	s12, [r7, #12]
 800515e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800516e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800517a:	e043      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800518a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518e:	4b48      	ldr	r3, [pc, #288]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051be:	e021      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d2:	4b37      	ldr	r3, [pc, #220]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005202:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005204:	4b2a      	ldr	r3, [pc, #168]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005208:	0a5b      	lsrs	r3, r3, #9
 800520a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800521a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800521e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800522a:	ee17 2a90 	vmov	r2, s15
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005232:	4b1f      	ldr	r3, [pc, #124]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005244:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005258:	ee17 2a90 	vmov	r2, s15
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005260:	4b13      	ldr	r3, [pc, #76]	@ (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	0e1b      	lsrs	r3, r3, #24
 8005266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800527a:	edd7 6a07 	vldr	s13, [r7, #28]
 800527e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005286:	ee17 2a90 	vmov	r2, s15
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800528e:	e008      	b.n	80052a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]
}
 80052a2:	bf00      	nop
 80052a4:	3724      	adds	r7, #36	@ 0x24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	58024400 	.word	0x58024400
 80052b4:	03d09000 	.word	0x03d09000
 80052b8:	46000000 	.word	0x46000000
 80052bc:	4c742400 	.word	0x4c742400
 80052c0:	4a742400 	.word	0x4a742400
 80052c4:	4bbebc20 	.word	0x4bbebc20

080052c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052d6:	4b53      	ldr	r3, [pc, #332]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d101      	bne.n	80052e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e099      	b.n	800541a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052e6:	4b4f      	ldr	r3, [pc, #316]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a4e      	ldr	r2, [pc, #312]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f2:	f7fc fa87 	bl	8001804 <HAL_GetTick>
 80052f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052f8:	e008      	b.n	800530c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052fa:	f7fc fa83 	bl	8001804 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e086      	b.n	800541a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800530c:	4b45      	ldr	r3, [pc, #276]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005318:	4b42      	ldr	r3, [pc, #264]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	031b      	lsls	r3, r3, #12
 8005326:	493f      	ldr	r1, [pc, #252]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	628b      	str	r3, [r1, #40]	@ 0x28
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	3b01      	subs	r3, #1
 8005332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	3b01      	subs	r3, #1
 800533c:	025b      	lsls	r3, r3, #9
 800533e:	b29b      	uxth	r3, r3
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	3b01      	subs	r3, #1
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	3b01      	subs	r3, #1
 8005356:	061b      	lsls	r3, r3, #24
 8005358:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800535c:	4931      	ldr	r1, [pc, #196]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005362:	4b30      	ldr	r3, [pc, #192]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	492d      	ldr	r1, [pc, #180]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005370:	4313      	orrs	r3, r2
 8005372:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005374:	4b2b      	ldr	r3, [pc, #172]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	f023 0220 	bic.w	r2, r3, #32
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	4928      	ldr	r1, [pc, #160]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005382:	4313      	orrs	r3, r2
 8005384:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005386:	4b27      	ldr	r3, [pc, #156]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	4a26      	ldr	r2, [pc, #152]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 800538c:	f023 0310 	bic.w	r3, r3, #16
 8005390:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005392:	4b24      	ldr	r3, [pc, #144]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005396:	4b24      	ldr	r3, [pc, #144]	@ (8005428 <RCCEx_PLL2_Config+0x160>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	69d2      	ldr	r2, [r2, #28]
 800539e:	00d2      	lsls	r2, r2, #3
 80053a0:	4920      	ldr	r1, [pc, #128]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ac:	f043 0310 	orr.w	r3, r3, #16
 80053b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	4a19      	ldr	r2, [pc, #100]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053c4:	e00f      	b.n	80053e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d106      	bne.n	80053da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053cc:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d0:	4a14      	ldr	r2, [pc, #80]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053d8:	e005      	b.n	80053e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053da:	4b12      	ldr	r3, [pc, #72]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	4a11      	ldr	r2, [pc, #68]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f2:	f7fc fa07 	bl	8001804 <HAL_GetTick>
 80053f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053f8:	e008      	b.n	800540c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053fa:	f7fc fa03 	bl	8001804 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e006      	b.n	800541a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800540c:	4b05      	ldr	r3, [pc, #20]	@ (8005424 <RCCEx_PLL2_Config+0x15c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	58024400 	.word	0x58024400
 8005428:	ffff0007 	.word	0xffff0007

0800542c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800543a:	4b53      	ldr	r3, [pc, #332]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d101      	bne.n	800544a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e099      	b.n	800557e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800544a:	4b4f      	ldr	r3, [pc, #316]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a4e      	ldr	r2, [pc, #312]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005456:	f7fc f9d5 	bl	8001804 <HAL_GetTick>
 800545a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800545c:	e008      	b.n	8005470 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800545e:	f7fc f9d1 	bl	8001804 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e086      	b.n	800557e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005470:	4b45      	ldr	r3, [pc, #276]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800547c:	4b42      	ldr	r3, [pc, #264]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	051b      	lsls	r3, r3, #20
 800548a:	493f      	ldr	r1, [pc, #252]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800548c:	4313      	orrs	r3, r2
 800548e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	3b01      	subs	r3, #1
 8005496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	3b01      	subs	r3, #1
 80054a0:	025b      	lsls	r3, r3, #9
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	061b      	lsls	r3, r3, #24
 80054bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054c0:	4931      	ldr	r1, [pc, #196]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054c6:	4b30      	ldr	r3, [pc, #192]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	492d      	ldr	r1, [pc, #180]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	4928      	ldr	r1, [pc, #160]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054ea:	4b27      	ldr	r3, [pc, #156]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ee:	4a26      	ldr	r2, [pc, #152]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054f6:	4b24      	ldr	r3, [pc, #144]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054fa:	4b24      	ldr	r3, [pc, #144]	@ (800558c <RCCEx_PLL3_Config+0x160>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	69d2      	ldr	r2, [r2, #28]
 8005502:	00d2      	lsls	r2, r2, #3
 8005504:	4920      	ldr	r1, [pc, #128]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005506:	4313      	orrs	r3, r2
 8005508:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800550a:	4b1f      	ldr	r3, [pc, #124]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	4a1e      	ldr	r2, [pc, #120]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005514:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d106      	bne.n	800552a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800551c:	4b1a      	ldr	r3, [pc, #104]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800551e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005520:	4a19      	ldr	r2, [pc, #100]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005522:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005526:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005528:	e00f      	b.n	800554a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d106      	bne.n	800553e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005530:	4b15      	ldr	r3, [pc, #84]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	4a14      	ldr	r2, [pc, #80]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005536:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800553a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800553c:	e005      	b.n	800554a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800553e:	4b12      	ldr	r3, [pc, #72]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005542:	4a11      	ldr	r2, [pc, #68]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005544:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005548:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800554a:	4b0f      	ldr	r3, [pc, #60]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a0e      	ldr	r2, [pc, #56]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005556:	f7fc f955 	bl	8001804 <HAL_GetTick>
 800555a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800555c:	e008      	b.n	8005570 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800555e:	f7fc f951 	bl	8001804 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e006      	b.n	800557e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005570:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	58024400 	.word	0x58024400
 800558c:	ffff0007 	.word	0xffff0007

08005590 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e02b      	b.n	80055fc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fb ff6b 	bl	8001494 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3304      	adds	r3, #4
 80055ce:	4619      	mov	r1, r3
 80055d0:	4610      	mov	r0, r2
 80055d2:	f001 fdc7 	bl	8007164 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	461a      	mov	r2, r3
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	f001 fe1b 	bl	800721c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80055e6:	4b07      	ldr	r3, [pc, #28]	@ (8005604 <HAL_SDRAM_Init+0x74>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a06      	ldr	r2, [pc, #24]	@ (8005604 <HAL_SDRAM_Init+0x74>)
 80055ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055f0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	52004000 	.word	0x52004000

08005608 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b01      	cmp	r3, #1
 800561c:	d10a      	bne.n	8005634 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f80c 	bl	800563c <HAL_SDRAM_RefreshErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	615a      	str	r2, [r3, #20]
  }
}
 8005634:	bf00      	nop
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005662:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d101      	bne.n	800566e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800566a:	2302      	movs	r3, #2
 800566c:	e021      	b.n	80056b2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d002      	beq.n	800567a <HAL_SDRAM_SendCommand+0x2a>
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	2b05      	cmp	r3, #5
 8005678:	d118      	bne.n	80056ac <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	4618      	mov	r0, r3
 800568c:	f001 fe30 	bl	80072f0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d104      	bne.n	80056a2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2205      	movs	r2, #5
 800569c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80056a0:	e006      	b.n	80056b0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80056aa:	e001      	b.n	80056b0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d101      	bne.n	80056d4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
 80056d2:	e016      	b.n	8005702 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10f      	bne.n	8005700 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 fe22 	bl	8007338 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e000      	b.n	8005702 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e042      	b.n	80057a2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fb fd56 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2224      	movs	r2, #36	@ 0x24
 8005738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 f987 	bl	8006a68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fc1c 	bl	8005f98 <UART_SetConfig>
 8005760:	4603      	mov	r3, r0
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e01b      	b.n	80057a2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005778:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005788:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0201 	orr.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 fa06 	bl	8006bac <UART_CheckIdleState>
 80057a0:	4603      	mov	r3, r0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
	...

080057ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b0ba      	sub	sp, #232	@ 0xe8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80057d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80057da:	4013      	ands	r3, r2
 80057dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80057e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d11b      	bne.n	8005820 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d015      	beq.n	8005820 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d105      	bne.n	800580c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8393 	beq.w	8005f3c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	4798      	blx	r3
      }
      return;
 800581e:	e38d      	b.n	8005f3c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8123 	beq.w	8005a70 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800582a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800582e:	4b8d      	ldr	r3, [pc, #564]	@ (8005a64 <HAL_UART_IRQHandler+0x2b8>)
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005836:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800583a:	4b8b      	ldr	r3, [pc, #556]	@ (8005a68 <HAL_UART_IRQHandler+0x2bc>)
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8116 	beq.w	8005a70 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d011      	beq.n	8005874 <HAL_UART_IRQHandler+0xc8>
 8005850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00b      	beq.n	8005874 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2201      	movs	r2, #1
 8005862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586a:	f043 0201 	orr.w	r2, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d011      	beq.n	80058a4 <HAL_UART_IRQHandler+0xf8>
 8005880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00b      	beq.n	80058a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2202      	movs	r2, #2
 8005892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800589a:	f043 0204 	orr.w	r2, r3, #4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d011      	beq.n	80058d4 <HAL_UART_IRQHandler+0x128>
 80058b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2204      	movs	r2, #4
 80058c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ca:	f043 0202 	orr.w	r2, r3, #2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d017      	beq.n	8005910 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d105      	bne.n	80058f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80058f0:	4b5c      	ldr	r3, [pc, #368]	@ (8005a64 <HAL_UART_IRQHandler+0x2b8>)
 80058f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00b      	beq.n	8005910 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2208      	movs	r2, #8
 80058fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005906:	f043 0208 	orr.w	r2, r3, #8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005918:	2b00      	cmp	r3, #0
 800591a:	d012      	beq.n	8005942 <HAL_UART_IRQHandler+0x196>
 800591c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005920:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00c      	beq.n	8005942 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 82f9 	beq.w	8005f40 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d013      	beq.n	8005982 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800595a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d105      	bne.n	8005972 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800596a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005988:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005996:	2b40      	cmp	r3, #64	@ 0x40
 8005998:	d005      	beq.n	80059a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800599a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800599e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d054      	beq.n	8005a50 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fa18 	bl	8006ddc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b6:	2b40      	cmp	r3, #64	@ 0x40
 80059b8:	d146      	bne.n	8005a48 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3308      	adds	r3, #8
 80059c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1d9      	bne.n	80059ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d017      	beq.n	8005a40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a16:	4a15      	ldr	r2, [pc, #84]	@ (8005a6c <HAL_UART_IRQHandler+0x2c0>)
 8005a18:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fc fb59 	bl	80020d8 <HAL_DMA_Abort_IT>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d019      	beq.n	8005a60 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3e:	e00f      	b.n	8005a60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fa93 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a46:	e00b      	b.n	8005a60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fa8f 	bl	8005f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4e:	e007      	b.n	8005a60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa8b 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005a5e:	e26f      	b.n	8005f40 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	bf00      	nop
    return;
 8005a62:	e26d      	b.n	8005f40 <HAL_UART_IRQHandler+0x794>
 8005a64:	10000001 	.word	0x10000001
 8005a68:	04000120 	.word	0x04000120
 8005a6c:	08006ea9 	.word	0x08006ea9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	f040 8203 	bne.w	8005e80 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 81fc 	beq.w	8005e80 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 81f5 	beq.w	8005e80 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2210      	movs	r2, #16
 8005a9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa8:	2b40      	cmp	r3, #64	@ 0x40
 8005aaa:	f040 816d 	bne.w	8005d88 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4aa4      	ldr	r2, [pc, #656]	@ (8005d48 <HAL_UART_IRQHandler+0x59c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d068      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4aa1      	ldr	r2, [pc, #644]	@ (8005d4c <HAL_UART_IRQHandler+0x5a0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d061      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a9f      	ldr	r2, [pc, #636]	@ (8005d50 <HAL_UART_IRQHandler+0x5a4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d05a      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a9c      	ldr	r2, [pc, #624]	@ (8005d54 <HAL_UART_IRQHandler+0x5a8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d053      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a9a      	ldr	r2, [pc, #616]	@ (8005d58 <HAL_UART_IRQHandler+0x5ac>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d04c      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a97      	ldr	r2, [pc, #604]	@ (8005d5c <HAL_UART_IRQHandler+0x5b0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d045      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a95      	ldr	r2, [pc, #596]	@ (8005d60 <HAL_UART_IRQHandler+0x5b4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d03e      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a92      	ldr	r2, [pc, #584]	@ (8005d64 <HAL_UART_IRQHandler+0x5b8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d037      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a90      	ldr	r2, [pc, #576]	@ (8005d68 <HAL_UART_IRQHandler+0x5bc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d030      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a8d      	ldr	r2, [pc, #564]	@ (8005d6c <HAL_UART_IRQHandler+0x5c0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d029      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a8b      	ldr	r2, [pc, #556]	@ (8005d70 <HAL_UART_IRQHandler+0x5c4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d022      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a88      	ldr	r2, [pc, #544]	@ (8005d74 <HAL_UART_IRQHandler+0x5c8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01b      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a86      	ldr	r2, [pc, #536]	@ (8005d78 <HAL_UART_IRQHandler+0x5cc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d014      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a83      	ldr	r2, [pc, #524]	@ (8005d7c <HAL_UART_IRQHandler+0x5d0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d00d      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a81      	ldr	r2, [pc, #516]	@ (8005d80 <HAL_UART_IRQHandler+0x5d4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d006      	beq.n	8005b8e <HAL_UART_IRQHandler+0x3e2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a7e      	ldr	r2, [pc, #504]	@ (8005d84 <HAL_UART_IRQHandler+0x5d8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d106      	bne.n	8005b9c <HAL_UART_IRQHandler+0x3f0>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	e005      	b.n	8005ba8 <HAL_UART_IRQHandler+0x3fc>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80ad 	beq.w	8005d10 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	f080 80a5 	bcs.w	8005d10 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bdc:	f000 8087 	beq.w	8005cee <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1da      	bne.n	8005be0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3308      	adds	r3, #8
 8005c30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e1      	bne.n	8005c2a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3308      	adds	r3, #8
 8005c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e3      	bne.n	8005c66 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cbc:	f023 0310 	bic.w	r3, r3, #16
 8005cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cd0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e4      	bne.n	8005cac <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fb fed7 	bl	8001a9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f939 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d0e:	e119      	b.n	8005f44 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	f040 8112 	bne.w	8005f44 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d2c:	f040 810a 	bne.w	8005f44 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f91e 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
      return;
 8005d44:	e0fe      	b.n	8005f44 <HAL_UART_IRQHandler+0x798>
 8005d46:	bf00      	nop
 8005d48:	40020010 	.word	0x40020010
 8005d4c:	40020028 	.word	0x40020028
 8005d50:	40020040 	.word	0x40020040
 8005d54:	40020058 	.word	0x40020058
 8005d58:	40020070 	.word	0x40020070
 8005d5c:	40020088 	.word	0x40020088
 8005d60:	400200a0 	.word	0x400200a0
 8005d64:	400200b8 	.word	0x400200b8
 8005d68:	40020410 	.word	0x40020410
 8005d6c:	40020428 	.word	0x40020428
 8005d70:	40020440 	.word	0x40020440
 8005d74:	40020458 	.word	0x40020458
 8005d78:	40020470 	.word	0x40020470
 8005d7c:	40020488 	.word	0x40020488
 8005d80:	400204a0 	.word	0x400204a0
 8005d84:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80cf 	beq.w	8005f48 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005daa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 80ca 	beq.w	8005f48 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dd8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ddc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e4      	bne.n	8005db4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dfa:	6a3a      	ldr	r2, [r7, #32]
 8005dfc:	4b55      	ldr	r3, [pc, #340]	@ (8005f54 <HAL_UART_IRQHandler+0x7a8>)
 8005dfe:	4013      	ands	r3, r2
 8005e00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3308      	adds	r3, #8
 8005e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e3      	bne.n	8005dea <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0310 	bic.w	r3, r3, #16
 8005e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	617b      	str	r3, [r7, #20]
   return(result);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e4      	bne.n	8005e36 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f881 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e7e:	e063      	b.n	8005f48 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00e      	beq.n	8005eaa <HAL_UART_IRQHandler+0x6fe>
 8005e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d008      	beq.n	8005eaa <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ea0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f001 f83d 	bl	8006f22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ea8:	e051      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d014      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d105      	bne.n	8005ece <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d03a      	beq.n	8005f4c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	4798      	blx	r3
    }
    return;
 8005ede:	e035      	b.n	8005f4c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d009      	beq.n	8005f00 <HAL_UART_IRQHandler+0x754>
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 ffe7 	bl	8006ecc <UART_EndTransmit_IT>
    return;
 8005efe:	e026      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d009      	beq.n	8005f20 <HAL_UART_IRQHandler+0x774>
 8005f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 f816 	bl	8006f4a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f1e:	e016      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d010      	beq.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
 8005f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	da0c      	bge.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fffe 	bl	8006f36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f3a:	e008      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
      return;
 8005f3c:	bf00      	nop
 8005f3e:	e006      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
    return;
 8005f40:	bf00      	nop
 8005f42:	e004      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
      return;
 8005f44:	bf00      	nop
 8005f46:	e002      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
      return;
 8005f48:	bf00      	nop
 8005f4a:	e000      	b.n	8005f4e <HAL_UART_IRQHandler+0x7a2>
    return;
 8005f4c:	bf00      	nop
  }
}
 8005f4e:	37e8      	adds	r7, #232	@ 0xe8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	effffffe 	.word	0xeffffffe

08005f58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f9c:	b092      	sub	sp, #72	@ 0x48
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4bbe      	ldr	r3, [pc, #760]	@ (80062c0 <UART_SetConfig+0x328>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	6812      	ldr	r2, [r2, #0]
 8005fce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4ab3      	ldr	r2, [pc, #716]	@ (80062c4 <UART_SetConfig+0x32c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d004      	beq.n	8006004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006000:	4313      	orrs	r3, r2
 8006002:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	4baf      	ldr	r3, [pc, #700]	@ (80062c8 <UART_SetConfig+0x330>)
 800600c:	4013      	ands	r3, r2
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006014:	430b      	orrs	r3, r1
 8006016:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601e:	f023 010f 	bic.w	r1, r3, #15
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4aa6      	ldr	r2, [pc, #664]	@ (80062cc <UART_SetConfig+0x334>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d177      	bne.n	8006128 <UART_SetConfig+0x190>
 8006038:	4ba5      	ldr	r3, [pc, #660]	@ (80062d0 <UART_SetConfig+0x338>)
 800603a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006040:	2b28      	cmp	r3, #40	@ 0x28
 8006042:	d86d      	bhi.n	8006120 <UART_SetConfig+0x188>
 8006044:	a201      	add	r2, pc, #4	@ (adr r2, 800604c <UART_SetConfig+0xb4>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	080060f1 	.word	0x080060f1
 8006050:	08006121 	.word	0x08006121
 8006054:	08006121 	.word	0x08006121
 8006058:	08006121 	.word	0x08006121
 800605c:	08006121 	.word	0x08006121
 8006060:	08006121 	.word	0x08006121
 8006064:	08006121 	.word	0x08006121
 8006068:	08006121 	.word	0x08006121
 800606c:	080060f9 	.word	0x080060f9
 8006070:	08006121 	.word	0x08006121
 8006074:	08006121 	.word	0x08006121
 8006078:	08006121 	.word	0x08006121
 800607c:	08006121 	.word	0x08006121
 8006080:	08006121 	.word	0x08006121
 8006084:	08006121 	.word	0x08006121
 8006088:	08006121 	.word	0x08006121
 800608c:	08006101 	.word	0x08006101
 8006090:	08006121 	.word	0x08006121
 8006094:	08006121 	.word	0x08006121
 8006098:	08006121 	.word	0x08006121
 800609c:	08006121 	.word	0x08006121
 80060a0:	08006121 	.word	0x08006121
 80060a4:	08006121 	.word	0x08006121
 80060a8:	08006121 	.word	0x08006121
 80060ac:	08006109 	.word	0x08006109
 80060b0:	08006121 	.word	0x08006121
 80060b4:	08006121 	.word	0x08006121
 80060b8:	08006121 	.word	0x08006121
 80060bc:	08006121 	.word	0x08006121
 80060c0:	08006121 	.word	0x08006121
 80060c4:	08006121 	.word	0x08006121
 80060c8:	08006121 	.word	0x08006121
 80060cc:	08006111 	.word	0x08006111
 80060d0:	08006121 	.word	0x08006121
 80060d4:	08006121 	.word	0x08006121
 80060d8:	08006121 	.word	0x08006121
 80060dc:	08006121 	.word	0x08006121
 80060e0:	08006121 	.word	0x08006121
 80060e4:	08006121 	.word	0x08006121
 80060e8:	08006121 	.word	0x08006121
 80060ec:	08006119 	.word	0x08006119
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f6:	e222      	b.n	800653e <UART_SetConfig+0x5a6>
 80060f8:	2304      	movs	r3, #4
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fe:	e21e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006100:	2308      	movs	r3, #8
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006106:	e21a      	b.n	800653e <UART_SetConfig+0x5a6>
 8006108:	2310      	movs	r3, #16
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610e:	e216      	b.n	800653e <UART_SetConfig+0x5a6>
 8006110:	2320      	movs	r3, #32
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006116:	e212      	b.n	800653e <UART_SetConfig+0x5a6>
 8006118:	2340      	movs	r3, #64	@ 0x40
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611e:	e20e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006120:	2380      	movs	r3, #128	@ 0x80
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006126:	e20a      	b.n	800653e <UART_SetConfig+0x5a6>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a69      	ldr	r2, [pc, #420]	@ (80062d4 <UART_SetConfig+0x33c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d130      	bne.n	8006194 <UART_SetConfig+0x1fc>
 8006132:	4b67      	ldr	r3, [pc, #412]	@ (80062d0 <UART_SetConfig+0x338>)
 8006134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	2b05      	cmp	r3, #5
 800613c:	d826      	bhi.n	800618c <UART_SetConfig+0x1f4>
 800613e:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <UART_SetConfig+0x1ac>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	0800615d 	.word	0x0800615d
 8006148:	08006165 	.word	0x08006165
 800614c:	0800616d 	.word	0x0800616d
 8006150:	08006175 	.word	0x08006175
 8006154:	0800617d 	.word	0x0800617d
 8006158:	08006185 	.word	0x08006185
 800615c:	2300      	movs	r3, #0
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006162:	e1ec      	b.n	800653e <UART_SetConfig+0x5a6>
 8006164:	2304      	movs	r3, #4
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616a:	e1e8      	b.n	800653e <UART_SetConfig+0x5a6>
 800616c:	2308      	movs	r3, #8
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006172:	e1e4      	b.n	800653e <UART_SetConfig+0x5a6>
 8006174:	2310      	movs	r3, #16
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617a:	e1e0      	b.n	800653e <UART_SetConfig+0x5a6>
 800617c:	2320      	movs	r3, #32
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006182:	e1dc      	b.n	800653e <UART_SetConfig+0x5a6>
 8006184:	2340      	movs	r3, #64	@ 0x40
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618a:	e1d8      	b.n	800653e <UART_SetConfig+0x5a6>
 800618c:	2380      	movs	r3, #128	@ 0x80
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006192:	e1d4      	b.n	800653e <UART_SetConfig+0x5a6>
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a4f      	ldr	r2, [pc, #316]	@ (80062d8 <UART_SetConfig+0x340>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d130      	bne.n	8006200 <UART_SetConfig+0x268>
 800619e:	4b4c      	ldr	r3, [pc, #304]	@ (80062d0 <UART_SetConfig+0x338>)
 80061a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	2b05      	cmp	r3, #5
 80061a8:	d826      	bhi.n	80061f8 <UART_SetConfig+0x260>
 80061aa:	a201      	add	r2, pc, #4	@ (adr r2, 80061b0 <UART_SetConfig+0x218>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061c9 	.word	0x080061c9
 80061b4:	080061d1 	.word	0x080061d1
 80061b8:	080061d9 	.word	0x080061d9
 80061bc:	080061e1 	.word	0x080061e1
 80061c0:	080061e9 	.word	0x080061e9
 80061c4:	080061f1 	.word	0x080061f1
 80061c8:	2300      	movs	r3, #0
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ce:	e1b6      	b.n	800653e <UART_SetConfig+0x5a6>
 80061d0:	2304      	movs	r3, #4
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d6:	e1b2      	b.n	800653e <UART_SetConfig+0x5a6>
 80061d8:	2308      	movs	r3, #8
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061de:	e1ae      	b.n	800653e <UART_SetConfig+0x5a6>
 80061e0:	2310      	movs	r3, #16
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e6:	e1aa      	b.n	800653e <UART_SetConfig+0x5a6>
 80061e8:	2320      	movs	r3, #32
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ee:	e1a6      	b.n	800653e <UART_SetConfig+0x5a6>
 80061f0:	2340      	movs	r3, #64	@ 0x40
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e1a2      	b.n	800653e <UART_SetConfig+0x5a6>
 80061f8:	2380      	movs	r3, #128	@ 0x80
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e19e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a35      	ldr	r2, [pc, #212]	@ (80062dc <UART_SetConfig+0x344>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d130      	bne.n	800626c <UART_SetConfig+0x2d4>
 800620a:	4b31      	ldr	r3, [pc, #196]	@ (80062d0 <UART_SetConfig+0x338>)
 800620c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	2b05      	cmp	r3, #5
 8006214:	d826      	bhi.n	8006264 <UART_SetConfig+0x2cc>
 8006216:	a201      	add	r2, pc, #4	@ (adr r2, 800621c <UART_SetConfig+0x284>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	08006235 	.word	0x08006235
 8006220:	0800623d 	.word	0x0800623d
 8006224:	08006245 	.word	0x08006245
 8006228:	0800624d 	.word	0x0800624d
 800622c:	08006255 	.word	0x08006255
 8006230:	0800625d 	.word	0x0800625d
 8006234:	2300      	movs	r3, #0
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623a:	e180      	b.n	800653e <UART_SetConfig+0x5a6>
 800623c:	2304      	movs	r3, #4
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006242:	e17c      	b.n	800653e <UART_SetConfig+0x5a6>
 8006244:	2308      	movs	r3, #8
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624a:	e178      	b.n	800653e <UART_SetConfig+0x5a6>
 800624c:	2310      	movs	r3, #16
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e174      	b.n	800653e <UART_SetConfig+0x5a6>
 8006254:	2320      	movs	r3, #32
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e170      	b.n	800653e <UART_SetConfig+0x5a6>
 800625c:	2340      	movs	r3, #64	@ 0x40
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e16c      	b.n	800653e <UART_SetConfig+0x5a6>
 8006264:	2380      	movs	r3, #128	@ 0x80
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626a:	e168      	b.n	800653e <UART_SetConfig+0x5a6>
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1b      	ldr	r2, [pc, #108]	@ (80062e0 <UART_SetConfig+0x348>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d142      	bne.n	80062fc <UART_SetConfig+0x364>
 8006276:	4b16      	ldr	r3, [pc, #88]	@ (80062d0 <UART_SetConfig+0x338>)
 8006278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	2b05      	cmp	r3, #5
 8006280:	d838      	bhi.n	80062f4 <UART_SetConfig+0x35c>
 8006282:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <UART_SetConfig+0x2f0>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062a1 	.word	0x080062a1
 800628c:	080062a9 	.word	0x080062a9
 8006290:	080062b1 	.word	0x080062b1
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062e5 	.word	0x080062e5
 800629c:	080062ed 	.word	0x080062ed
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a6:	e14a      	b.n	800653e <UART_SetConfig+0x5a6>
 80062a8:	2304      	movs	r3, #4
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ae:	e146      	b.n	800653e <UART_SetConfig+0x5a6>
 80062b0:	2308      	movs	r3, #8
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b6:	e142      	b.n	800653e <UART_SetConfig+0x5a6>
 80062b8:	2310      	movs	r3, #16
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062be:	e13e      	b.n	800653e <UART_SetConfig+0x5a6>
 80062c0:	cfff69f3 	.word	0xcfff69f3
 80062c4:	58000c00 	.word	0x58000c00
 80062c8:	11fff4ff 	.word	0x11fff4ff
 80062cc:	40011000 	.word	0x40011000
 80062d0:	58024400 	.word	0x58024400
 80062d4:	40004400 	.word	0x40004400
 80062d8:	40004800 	.word	0x40004800
 80062dc:	40004c00 	.word	0x40004c00
 80062e0:	40005000 	.word	0x40005000
 80062e4:	2320      	movs	r3, #32
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ea:	e128      	b.n	800653e <UART_SetConfig+0x5a6>
 80062ec:	2340      	movs	r3, #64	@ 0x40
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f2:	e124      	b.n	800653e <UART_SetConfig+0x5a6>
 80062f4:	2380      	movs	r3, #128	@ 0x80
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fa:	e120      	b.n	800653e <UART_SetConfig+0x5a6>
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4acb      	ldr	r2, [pc, #812]	@ (8006630 <UART_SetConfig+0x698>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d176      	bne.n	80063f4 <UART_SetConfig+0x45c>
 8006306:	4bcb      	ldr	r3, [pc, #812]	@ (8006634 <UART_SetConfig+0x69c>)
 8006308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800630e:	2b28      	cmp	r3, #40	@ 0x28
 8006310:	d86c      	bhi.n	80063ec <UART_SetConfig+0x454>
 8006312:	a201      	add	r2, pc, #4	@ (adr r2, 8006318 <UART_SetConfig+0x380>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	080063bd 	.word	0x080063bd
 800631c:	080063ed 	.word	0x080063ed
 8006320:	080063ed 	.word	0x080063ed
 8006324:	080063ed 	.word	0x080063ed
 8006328:	080063ed 	.word	0x080063ed
 800632c:	080063ed 	.word	0x080063ed
 8006330:	080063ed 	.word	0x080063ed
 8006334:	080063ed 	.word	0x080063ed
 8006338:	080063c5 	.word	0x080063c5
 800633c:	080063ed 	.word	0x080063ed
 8006340:	080063ed 	.word	0x080063ed
 8006344:	080063ed 	.word	0x080063ed
 8006348:	080063ed 	.word	0x080063ed
 800634c:	080063ed 	.word	0x080063ed
 8006350:	080063ed 	.word	0x080063ed
 8006354:	080063ed 	.word	0x080063ed
 8006358:	080063cd 	.word	0x080063cd
 800635c:	080063ed 	.word	0x080063ed
 8006360:	080063ed 	.word	0x080063ed
 8006364:	080063ed 	.word	0x080063ed
 8006368:	080063ed 	.word	0x080063ed
 800636c:	080063ed 	.word	0x080063ed
 8006370:	080063ed 	.word	0x080063ed
 8006374:	080063ed 	.word	0x080063ed
 8006378:	080063d5 	.word	0x080063d5
 800637c:	080063ed 	.word	0x080063ed
 8006380:	080063ed 	.word	0x080063ed
 8006384:	080063ed 	.word	0x080063ed
 8006388:	080063ed 	.word	0x080063ed
 800638c:	080063ed 	.word	0x080063ed
 8006390:	080063ed 	.word	0x080063ed
 8006394:	080063ed 	.word	0x080063ed
 8006398:	080063dd 	.word	0x080063dd
 800639c:	080063ed 	.word	0x080063ed
 80063a0:	080063ed 	.word	0x080063ed
 80063a4:	080063ed 	.word	0x080063ed
 80063a8:	080063ed 	.word	0x080063ed
 80063ac:	080063ed 	.word	0x080063ed
 80063b0:	080063ed 	.word	0x080063ed
 80063b4:	080063ed 	.word	0x080063ed
 80063b8:	080063e5 	.word	0x080063e5
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063c2:	e0bc      	b.n	800653e <UART_SetConfig+0x5a6>
 80063c4:	2304      	movs	r3, #4
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ca:	e0b8      	b.n	800653e <UART_SetConfig+0x5a6>
 80063cc:	2308      	movs	r3, #8
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063d2:	e0b4      	b.n	800653e <UART_SetConfig+0x5a6>
 80063d4:	2310      	movs	r3, #16
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063da:	e0b0      	b.n	800653e <UART_SetConfig+0x5a6>
 80063dc:	2320      	movs	r3, #32
 80063de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063e2:	e0ac      	b.n	800653e <UART_SetConfig+0x5a6>
 80063e4:	2340      	movs	r3, #64	@ 0x40
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ea:	e0a8      	b.n	800653e <UART_SetConfig+0x5a6>
 80063ec:	2380      	movs	r3, #128	@ 0x80
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f2:	e0a4      	b.n	800653e <UART_SetConfig+0x5a6>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a8f      	ldr	r2, [pc, #572]	@ (8006638 <UART_SetConfig+0x6a0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d130      	bne.n	8006460 <UART_SetConfig+0x4c8>
 80063fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006634 <UART_SetConfig+0x69c>)
 8006400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	2b05      	cmp	r3, #5
 8006408:	d826      	bhi.n	8006458 <UART_SetConfig+0x4c0>
 800640a:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <UART_SetConfig+0x478>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006429 	.word	0x08006429
 8006414:	08006431 	.word	0x08006431
 8006418:	08006439 	.word	0x08006439
 800641c:	08006441 	.word	0x08006441
 8006420:	08006449 	.word	0x08006449
 8006424:	08006451 	.word	0x08006451
 8006428:	2300      	movs	r3, #0
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642e:	e086      	b.n	800653e <UART_SetConfig+0x5a6>
 8006430:	2304      	movs	r3, #4
 8006432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006436:	e082      	b.n	800653e <UART_SetConfig+0x5a6>
 8006438:	2308      	movs	r3, #8
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643e:	e07e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006440:	2310      	movs	r3, #16
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006446:	e07a      	b.n	800653e <UART_SetConfig+0x5a6>
 8006448:	2320      	movs	r3, #32
 800644a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800644e:	e076      	b.n	800653e <UART_SetConfig+0x5a6>
 8006450:	2340      	movs	r3, #64	@ 0x40
 8006452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006456:	e072      	b.n	800653e <UART_SetConfig+0x5a6>
 8006458:	2380      	movs	r3, #128	@ 0x80
 800645a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800645e:	e06e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a75      	ldr	r2, [pc, #468]	@ (800663c <UART_SetConfig+0x6a4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d130      	bne.n	80064cc <UART_SetConfig+0x534>
 800646a:	4b72      	ldr	r3, [pc, #456]	@ (8006634 <UART_SetConfig+0x69c>)
 800646c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	2b05      	cmp	r3, #5
 8006474:	d826      	bhi.n	80064c4 <UART_SetConfig+0x52c>
 8006476:	a201      	add	r2, pc, #4	@ (adr r2, 800647c <UART_SetConfig+0x4e4>)
 8006478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647c:	08006495 	.word	0x08006495
 8006480:	0800649d 	.word	0x0800649d
 8006484:	080064a5 	.word	0x080064a5
 8006488:	080064ad 	.word	0x080064ad
 800648c:	080064b5 	.word	0x080064b5
 8006490:	080064bd 	.word	0x080064bd
 8006494:	2300      	movs	r3, #0
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649a:	e050      	b.n	800653e <UART_SetConfig+0x5a6>
 800649c:	2304      	movs	r3, #4
 800649e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064a2:	e04c      	b.n	800653e <UART_SetConfig+0x5a6>
 80064a4:	2308      	movs	r3, #8
 80064a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064aa:	e048      	b.n	800653e <UART_SetConfig+0x5a6>
 80064ac:	2310      	movs	r3, #16
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b2:	e044      	b.n	800653e <UART_SetConfig+0x5a6>
 80064b4:	2320      	movs	r3, #32
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ba:	e040      	b.n	800653e <UART_SetConfig+0x5a6>
 80064bc:	2340      	movs	r3, #64	@ 0x40
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064c2:	e03c      	b.n	800653e <UART_SetConfig+0x5a6>
 80064c4:	2380      	movs	r3, #128	@ 0x80
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ca:	e038      	b.n	800653e <UART_SetConfig+0x5a6>
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a5b      	ldr	r2, [pc, #364]	@ (8006640 <UART_SetConfig+0x6a8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d130      	bne.n	8006538 <UART_SetConfig+0x5a0>
 80064d6:	4b57      	ldr	r3, [pc, #348]	@ (8006634 <UART_SetConfig+0x69c>)
 80064d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	2b05      	cmp	r3, #5
 80064e0:	d826      	bhi.n	8006530 <UART_SetConfig+0x598>
 80064e2:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <UART_SetConfig+0x550>)
 80064e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e8:	08006501 	.word	0x08006501
 80064ec:	08006509 	.word	0x08006509
 80064f0:	08006511 	.word	0x08006511
 80064f4:	08006519 	.word	0x08006519
 80064f8:	08006521 	.word	0x08006521
 80064fc:	08006529 	.word	0x08006529
 8006500:	2302      	movs	r3, #2
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006506:	e01a      	b.n	800653e <UART_SetConfig+0x5a6>
 8006508:	2304      	movs	r3, #4
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650e:	e016      	b.n	800653e <UART_SetConfig+0x5a6>
 8006510:	2308      	movs	r3, #8
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006516:	e012      	b.n	800653e <UART_SetConfig+0x5a6>
 8006518:	2310      	movs	r3, #16
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651e:	e00e      	b.n	800653e <UART_SetConfig+0x5a6>
 8006520:	2320      	movs	r3, #32
 8006522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006526:	e00a      	b.n	800653e <UART_SetConfig+0x5a6>
 8006528:	2340      	movs	r3, #64	@ 0x40
 800652a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652e:	e006      	b.n	800653e <UART_SetConfig+0x5a6>
 8006530:	2380      	movs	r3, #128	@ 0x80
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006536:	e002      	b.n	800653e <UART_SetConfig+0x5a6>
 8006538:	2380      	movs	r3, #128	@ 0x80
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a3f      	ldr	r2, [pc, #252]	@ (8006640 <UART_SetConfig+0x6a8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	f040 80f8 	bne.w	800673a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800654a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800654e:	2b20      	cmp	r3, #32
 8006550:	dc46      	bgt.n	80065e0 <UART_SetConfig+0x648>
 8006552:	2b02      	cmp	r3, #2
 8006554:	f2c0 8082 	blt.w	800665c <UART_SetConfig+0x6c4>
 8006558:	3b02      	subs	r3, #2
 800655a:	2b1e      	cmp	r3, #30
 800655c:	d87e      	bhi.n	800665c <UART_SetConfig+0x6c4>
 800655e:	a201      	add	r2, pc, #4	@ (adr r2, 8006564 <UART_SetConfig+0x5cc>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	080065e7 	.word	0x080065e7
 8006568:	0800665d 	.word	0x0800665d
 800656c:	080065ef 	.word	0x080065ef
 8006570:	0800665d 	.word	0x0800665d
 8006574:	0800665d 	.word	0x0800665d
 8006578:	0800665d 	.word	0x0800665d
 800657c:	080065ff 	.word	0x080065ff
 8006580:	0800665d 	.word	0x0800665d
 8006584:	0800665d 	.word	0x0800665d
 8006588:	0800665d 	.word	0x0800665d
 800658c:	0800665d 	.word	0x0800665d
 8006590:	0800665d 	.word	0x0800665d
 8006594:	0800665d 	.word	0x0800665d
 8006598:	0800665d 	.word	0x0800665d
 800659c:	0800660f 	.word	0x0800660f
 80065a0:	0800665d 	.word	0x0800665d
 80065a4:	0800665d 	.word	0x0800665d
 80065a8:	0800665d 	.word	0x0800665d
 80065ac:	0800665d 	.word	0x0800665d
 80065b0:	0800665d 	.word	0x0800665d
 80065b4:	0800665d 	.word	0x0800665d
 80065b8:	0800665d 	.word	0x0800665d
 80065bc:	0800665d 	.word	0x0800665d
 80065c0:	0800665d 	.word	0x0800665d
 80065c4:	0800665d 	.word	0x0800665d
 80065c8:	0800665d 	.word	0x0800665d
 80065cc:	0800665d 	.word	0x0800665d
 80065d0:	0800665d 	.word	0x0800665d
 80065d4:	0800665d 	.word	0x0800665d
 80065d8:	0800665d 	.word	0x0800665d
 80065dc:	0800664f 	.word	0x0800664f
 80065e0:	2b40      	cmp	r3, #64	@ 0x40
 80065e2:	d037      	beq.n	8006654 <UART_SetConfig+0x6bc>
 80065e4:	e03a      	b.n	800665c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80065e6:	f7fe fbb1 	bl	8004d4c <HAL_RCCEx_GetD3PCLK1Freq>
 80065ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065ec:	e03c      	b.n	8006668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe fbc0 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065fc:	e034      	b.n	8006668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065fe:	f107 0318 	add.w	r3, r7, #24
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fd0c 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800660c:	e02c      	b.n	8006668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800660e:	4b09      	ldr	r3, [pc, #36]	@ (8006634 <UART_SetConfig+0x69c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d016      	beq.n	8006648 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800661a:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <UART_SetConfig+0x69c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	08db      	lsrs	r3, r3, #3
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	4a07      	ldr	r2, [pc, #28]	@ (8006644 <UART_SetConfig+0x6ac>)
 8006626:	fa22 f303 	lsr.w	r3, r2, r3
 800662a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800662c:	e01c      	b.n	8006668 <UART_SetConfig+0x6d0>
 800662e:	bf00      	nop
 8006630:	40011400 	.word	0x40011400
 8006634:	58024400 	.word	0x58024400
 8006638:	40007800 	.word	0x40007800
 800663c:	40007c00 	.word	0x40007c00
 8006640:	58000c00 	.word	0x58000c00
 8006644:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006648:	4b9d      	ldr	r3, [pc, #628]	@ (80068c0 <UART_SetConfig+0x928>)
 800664a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800664c:	e00c      	b.n	8006668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800664e:	4b9d      	ldr	r3, [pc, #628]	@ (80068c4 <UART_SetConfig+0x92c>)
 8006650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006652:	e009      	b.n	8006668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006654:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800665a:	e005      	b.n	8006668 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006666:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 81de 	beq.w	8006a2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006674:	4a94      	ldr	r2, [pc, #592]	@ (80068c8 <UART_SetConfig+0x930>)
 8006676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800667a:	461a      	mov	r2, r3
 800667c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006682:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	4613      	mov	r3, r2
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	4413      	add	r3, r2
 800668e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006690:	429a      	cmp	r2, r3
 8006692:	d305      	bcc.n	80066a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800669a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800669c:	429a      	cmp	r2, r3
 800669e:	d903      	bls.n	80066a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80066a6:	e1c1      	b.n	8006a2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066aa:	2200      	movs	r2, #0
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	60fa      	str	r2, [r7, #12]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b4:	4a84      	ldr	r2, [pc, #528]	@ (80068c8 <UART_SetConfig+0x930>)
 80066b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2200      	movs	r2, #0
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066ca:	f7f9 fe05 	bl	80002d8 <__aeabi_uldivmod>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4610      	mov	r0, r2
 80066d4:	4619      	mov	r1, r3
 80066d6:	f04f 0200 	mov.w	r2, #0
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	020b      	lsls	r3, r1, #8
 80066e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066e4:	0202      	lsls	r2, r0, #8
 80066e6:	6979      	ldr	r1, [r7, #20]
 80066e8:	6849      	ldr	r1, [r1, #4]
 80066ea:	0849      	lsrs	r1, r1, #1
 80066ec:	2000      	movs	r0, #0
 80066ee:	460c      	mov	r4, r1
 80066f0:	4605      	mov	r5, r0
 80066f2:	eb12 0804 	adds.w	r8, r2, r4
 80066f6:	eb43 0905 	adc.w	r9, r3, r5
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	469a      	mov	sl, r3
 8006702:	4693      	mov	fp, r2
 8006704:	4652      	mov	r2, sl
 8006706:	465b      	mov	r3, fp
 8006708:	4640      	mov	r0, r8
 800670a:	4649      	mov	r1, r9
 800670c:	f7f9 fde4 	bl	80002d8 <__aeabi_uldivmod>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4613      	mov	r3, r2
 8006716:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800671e:	d308      	bcc.n	8006732 <UART_SetConfig+0x79a>
 8006720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006726:	d204      	bcs.n	8006732 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800672e:	60da      	str	r2, [r3, #12]
 8006730:	e17c      	b.n	8006a2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006738:	e178      	b.n	8006a2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006742:	f040 80c5 	bne.w	80068d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006746:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800674a:	2b20      	cmp	r3, #32
 800674c:	dc48      	bgt.n	80067e0 <UART_SetConfig+0x848>
 800674e:	2b00      	cmp	r3, #0
 8006750:	db7b      	blt.n	800684a <UART_SetConfig+0x8b2>
 8006752:	2b20      	cmp	r3, #32
 8006754:	d879      	bhi.n	800684a <UART_SetConfig+0x8b2>
 8006756:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <UART_SetConfig+0x7c4>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	080067e7 	.word	0x080067e7
 8006760:	080067ef 	.word	0x080067ef
 8006764:	0800684b 	.word	0x0800684b
 8006768:	0800684b 	.word	0x0800684b
 800676c:	080067f7 	.word	0x080067f7
 8006770:	0800684b 	.word	0x0800684b
 8006774:	0800684b 	.word	0x0800684b
 8006778:	0800684b 	.word	0x0800684b
 800677c:	08006807 	.word	0x08006807
 8006780:	0800684b 	.word	0x0800684b
 8006784:	0800684b 	.word	0x0800684b
 8006788:	0800684b 	.word	0x0800684b
 800678c:	0800684b 	.word	0x0800684b
 8006790:	0800684b 	.word	0x0800684b
 8006794:	0800684b 	.word	0x0800684b
 8006798:	0800684b 	.word	0x0800684b
 800679c:	08006817 	.word	0x08006817
 80067a0:	0800684b 	.word	0x0800684b
 80067a4:	0800684b 	.word	0x0800684b
 80067a8:	0800684b 	.word	0x0800684b
 80067ac:	0800684b 	.word	0x0800684b
 80067b0:	0800684b 	.word	0x0800684b
 80067b4:	0800684b 	.word	0x0800684b
 80067b8:	0800684b 	.word	0x0800684b
 80067bc:	0800684b 	.word	0x0800684b
 80067c0:	0800684b 	.word	0x0800684b
 80067c4:	0800684b 	.word	0x0800684b
 80067c8:	0800684b 	.word	0x0800684b
 80067cc:	0800684b 	.word	0x0800684b
 80067d0:	0800684b 	.word	0x0800684b
 80067d4:	0800684b 	.word	0x0800684b
 80067d8:	0800684b 	.word	0x0800684b
 80067dc:	0800683d 	.word	0x0800683d
 80067e0:	2b40      	cmp	r3, #64	@ 0x40
 80067e2:	d02e      	beq.n	8006842 <UART_SetConfig+0x8aa>
 80067e4:	e031      	b.n	800684a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e6:	f7fd f87b 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 80067ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80067ec:	e033      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067ee:	f7fd f88d 	bl	800390c <HAL_RCC_GetPCLK2Freq>
 80067f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80067f4:	e02f      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe fabc 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006804:	e027      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006806:	f107 0318 	add.w	r3, r7, #24
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fc08 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006814:	e01f      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006816:	4b2d      	ldr	r3, [pc, #180]	@ (80068cc <UART_SetConfig+0x934>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006822:	4b2a      	ldr	r3, [pc, #168]	@ (80068cc <UART_SetConfig+0x934>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	08db      	lsrs	r3, r3, #3
 8006828:	f003 0303 	and.w	r3, r3, #3
 800682c:	4a24      	ldr	r2, [pc, #144]	@ (80068c0 <UART_SetConfig+0x928>)
 800682e:	fa22 f303 	lsr.w	r3, r2, r3
 8006832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006834:	e00f      	b.n	8006856 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006836:	4b22      	ldr	r3, [pc, #136]	@ (80068c0 <UART_SetConfig+0x928>)
 8006838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800683a:	e00c      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800683c:	4b21      	ldr	r3, [pc, #132]	@ (80068c4 <UART_SetConfig+0x92c>)
 800683e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006840:	e009      	b.n	8006856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006848:	e005      	b.n	8006856 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006854:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 80e7 	beq.w	8006a2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	4a19      	ldr	r2, [pc, #100]	@ (80068c8 <UART_SetConfig+0x930>)
 8006864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006868:	461a      	mov	r2, r3
 800686a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800686c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006870:	005a      	lsls	r2, r3, #1
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	441a      	add	r2, r3
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006882:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006886:	2b0f      	cmp	r3, #15
 8006888:	d916      	bls.n	80068b8 <UART_SetConfig+0x920>
 800688a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006890:	d212      	bcs.n	80068b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006894:	b29b      	uxth	r3, r3
 8006896:	f023 030f 	bic.w	r3, r3, #15
 800689a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800689c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80068aa:	4313      	orrs	r3, r2
 80068ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80068b4:	60da      	str	r2, [r3, #12]
 80068b6:	e0b9      	b.n	8006a2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80068be:	e0b5      	b.n	8006a2c <UART_SetConfig+0xa94>
 80068c0:	03d09000 	.word	0x03d09000
 80068c4:	003d0900 	.word	0x003d0900
 80068c8:	08007404 	.word	0x08007404
 80068cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80068d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	dc49      	bgt.n	800696c <UART_SetConfig+0x9d4>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	db7c      	blt.n	80069d6 <UART_SetConfig+0xa3e>
 80068dc:	2b20      	cmp	r3, #32
 80068de:	d87a      	bhi.n	80069d6 <UART_SetConfig+0xa3e>
 80068e0:	a201      	add	r2, pc, #4	@ (adr r2, 80068e8 <UART_SetConfig+0x950>)
 80068e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e6:	bf00      	nop
 80068e8:	08006973 	.word	0x08006973
 80068ec:	0800697b 	.word	0x0800697b
 80068f0:	080069d7 	.word	0x080069d7
 80068f4:	080069d7 	.word	0x080069d7
 80068f8:	08006983 	.word	0x08006983
 80068fc:	080069d7 	.word	0x080069d7
 8006900:	080069d7 	.word	0x080069d7
 8006904:	080069d7 	.word	0x080069d7
 8006908:	08006993 	.word	0x08006993
 800690c:	080069d7 	.word	0x080069d7
 8006910:	080069d7 	.word	0x080069d7
 8006914:	080069d7 	.word	0x080069d7
 8006918:	080069d7 	.word	0x080069d7
 800691c:	080069d7 	.word	0x080069d7
 8006920:	080069d7 	.word	0x080069d7
 8006924:	080069d7 	.word	0x080069d7
 8006928:	080069a3 	.word	0x080069a3
 800692c:	080069d7 	.word	0x080069d7
 8006930:	080069d7 	.word	0x080069d7
 8006934:	080069d7 	.word	0x080069d7
 8006938:	080069d7 	.word	0x080069d7
 800693c:	080069d7 	.word	0x080069d7
 8006940:	080069d7 	.word	0x080069d7
 8006944:	080069d7 	.word	0x080069d7
 8006948:	080069d7 	.word	0x080069d7
 800694c:	080069d7 	.word	0x080069d7
 8006950:	080069d7 	.word	0x080069d7
 8006954:	080069d7 	.word	0x080069d7
 8006958:	080069d7 	.word	0x080069d7
 800695c:	080069d7 	.word	0x080069d7
 8006960:	080069d7 	.word	0x080069d7
 8006964:	080069d7 	.word	0x080069d7
 8006968:	080069c9 	.word	0x080069c9
 800696c:	2b40      	cmp	r3, #64	@ 0x40
 800696e:	d02e      	beq.n	80069ce <UART_SetConfig+0xa36>
 8006970:	e031      	b.n	80069d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006972:	f7fc ffb5 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8006976:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006978:	e033      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800697a:	f7fc ffc7 	bl	800390c <HAL_RCC_GetPCLK2Freq>
 800697e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006980:	e02f      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe f9f6 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800698c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006990:	e027      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006992:	f107 0318 	add.w	r3, r7, #24
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe fb42 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069a0:	e01f      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006a58 <UART_SetConfig+0xac0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006a58 <UART_SetConfig+0xac0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	08db      	lsrs	r3, r3, #3
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	4a28      	ldr	r2, [pc, #160]	@ (8006a5c <UART_SetConfig+0xac4>)
 80069ba:	fa22 f303 	lsr.w	r3, r2, r3
 80069be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069c0:	e00f      	b.n	80069e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80069c2:	4b26      	ldr	r3, [pc, #152]	@ (8006a5c <UART_SetConfig+0xac4>)
 80069c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069c6:	e00c      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069c8:	4b25      	ldr	r3, [pc, #148]	@ (8006a60 <UART_SetConfig+0xac8>)
 80069ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069cc:	e009      	b.n	80069e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069d4:	e005      	b.n	80069e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80069e0:	bf00      	nop
    }

    if (pclk != 0U)
 80069e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d021      	beq.n	8006a2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006a64 <UART_SetConfig+0xacc>)
 80069ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069f2:	461a      	mov	r2, r3
 80069f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	085b      	lsrs	r3, r3, #1
 8006a00:	441a      	add	r2, r3
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0e:	2b0f      	cmp	r3, #15
 8006a10:	d909      	bls.n	8006a26 <UART_SetConfig+0xa8e>
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a18:	d205      	bcs.n	8006a26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60da      	str	r2, [r3, #12]
 8006a24:	e002      	b.n	8006a2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2200      	movs	r2, #0
 8006a46:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006a48:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3748      	adds	r7, #72	@ 0x48
 8006a50:	46bd      	mov	sp, r7
 8006a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a56:	bf00      	nop
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	03d09000 	.word	0x03d09000
 8006a60:	003d0900 	.word	0x003d0900
 8006a64:	08007404 	.word	0x08007404

08006a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01a      	beq.n	8006b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b66:	d10a      	bne.n	8006b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	605a      	str	r2, [r3, #4]
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b098      	sub	sp, #96	@ 0x60
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bbc:	f7fa fe22 	bl	8001804 <HAL_GetTick>
 8006bc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d12f      	bne.n	8006c30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f88e 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d022      	beq.n	8006c30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e6      	bne.n	8006bea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e063      	b.n	8006cf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d149      	bne.n	8006cd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c46:	2200      	movs	r2, #0
 8006c48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f857 	bl	8006d00 <UART_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d03c      	beq.n	8006cd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	623b      	str	r3, [r7, #32]
   return(result);
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e6      	bne.n	8006c58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006caa:	61fa      	str	r2, [r7, #28]
 8006cac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	69b9      	ldr	r1, [r7, #24]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e5      	bne.n	8006c8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e012      	b.n	8006cf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3758      	adds	r7, #88	@ 0x58
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d10:	e04f      	b.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d04b      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1a:	f7fa fd73 	bl	8001804 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d302      	bcc.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e04e      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d037      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b80      	cmp	r3, #128	@ 0x80
 8006d46:	d034      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b40      	cmp	r3, #64	@ 0x40
 8006d4c:	d031      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d110      	bne.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2208      	movs	r2, #8
 8006d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f839 	bl	8006ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e029      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d8c:	d111      	bne.n	8006db2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f81f 	bl	8006ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e00f      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	bf0c      	ite	eq
 8006dc2:	2301      	moveq	r3, #1
 8006dc4:	2300      	movne	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d0a0      	beq.n	8006d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b095      	sub	sp, #84	@ 0x54
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e6      	bne.n	8006de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	4b1e      	ldr	r3, [pc, #120]	@ (8006ea4 <UART_EndRxTransfer+0xc8>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3308      	adds	r3, #8
 8006e34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e5      	bne.n	8006e16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d118      	bne.n	8006e84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f023 0310 	bic.w	r3, r3, #16
 8006e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6979      	ldr	r1, [r7, #20]
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e6      	bne.n	8006e52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e98:	bf00      	nop
 8006e9a:	3754      	adds	r7, #84	@ 0x54
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	effffffe 	.word	0xeffffffe

08006ea8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff f854 	bl	8005f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6979      	ldr	r1, [r7, #20]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	613b      	str	r3, [r7, #16]
   return(result);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e6      	bne.n	8006ed4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff f81f 	bl	8005f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f1a:	bf00      	nop
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f2a:	bf00      	nop
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b085      	sub	sp, #20
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e027      	b.n	8006fc4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2224      	movs	r2, #36	@ 0x24
 8006f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006fa2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e02d      	b.n	8007044 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2224      	movs	r2, #36	@ 0x24
 8006ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0201 	bic.w	r2, r2, #1
 800700e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f84f 	bl	80070c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007060:	2302      	movs	r3, #2
 8007062:	e02d      	b.n	80070c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2224      	movs	r2, #36	@ 0x24
 8007070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0201 	bic.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f811 	bl	80070c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d108      	bne.n	80070ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070e8:	e031      	b.n	800714e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070ea:	2310      	movs	r3, #16
 80070ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070ee:	2310      	movs	r3, #16
 80070f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	0e5b      	lsrs	r3, r3, #25
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	0f5b      	lsrs	r3, r3, #29
 800710a:	b2db      	uxtb	r3, r3
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	7b3a      	ldrb	r2, [r7, #12]
 8007116:	4911      	ldr	r1, [pc, #68]	@ (800715c <UARTEx_SetNbDataToProcess+0x94>)
 8007118:	5c8a      	ldrb	r2, [r1, r2]
 800711a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800711e:	7b3a      	ldrb	r2, [r7, #12]
 8007120:	490f      	ldr	r1, [pc, #60]	@ (8007160 <UARTEx_SetNbDataToProcess+0x98>)
 8007122:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007124:	fb93 f3f2 	sdiv	r3, r3, r2
 8007128:	b29a      	uxth	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	7b7a      	ldrb	r2, [r7, #13]
 8007134:	4909      	ldr	r1, [pc, #36]	@ (800715c <UARTEx_SetNbDataToProcess+0x94>)
 8007136:	5c8a      	ldrb	r2, [r1, r2]
 8007138:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800713c:	7b7a      	ldrb	r2, [r7, #13]
 800713e:	4908      	ldr	r1, [pc, #32]	@ (8007160 <UARTEx_SetNbDataToProcess+0x98>)
 8007140:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007142:	fb93 f3f2 	sdiv	r3, r3, r2
 8007146:	b29a      	uxth	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	0800741c 	.word	0x0800741c
 8007160:	08007424 	.word	0x08007424

08007164 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d121      	bne.n	80071ba <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b27      	ldr	r3, [pc, #156]	@ (8007218 <FMC_SDRAM_Init+0xb4>)
 800717c:	4013      	ands	r3, r2
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	6851      	ldr	r1, [r2, #4]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	6892      	ldr	r2, [r2, #8]
 8007186:	4311      	orrs	r1, r2
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	68d2      	ldr	r2, [r2, #12]
 800718c:	4311      	orrs	r1, r2
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	6912      	ldr	r2, [r2, #16]
 8007192:	4311      	orrs	r1, r2
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	6952      	ldr	r2, [r2, #20]
 8007198:	4311      	orrs	r1, r2
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	6992      	ldr	r2, [r2, #24]
 800719e:	4311      	orrs	r1, r2
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	69d2      	ldr	r2, [r2, #28]
 80071a4:	4311      	orrs	r1, r2
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	6a12      	ldr	r2, [r2, #32]
 80071aa:	4311      	orrs	r1, r2
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071b0:	430a      	orrs	r2, r1
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e026      	b.n	8007208 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	69d9      	ldr	r1, [r3, #28]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	4319      	orrs	r1, r3
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d0:	430b      	orrs	r3, r1
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007218 <FMC_SDRAM_Init+0xb4>)
 80071de:	4013      	ands	r3, r2
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	6851      	ldr	r1, [r2, #4]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	6892      	ldr	r2, [r2, #8]
 80071e8:	4311      	orrs	r1, r2
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	68d2      	ldr	r2, [r2, #12]
 80071ee:	4311      	orrs	r1, r2
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	6912      	ldr	r2, [r2, #16]
 80071f4:	4311      	orrs	r1, r2
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	6952      	ldr	r2, [r2, #20]
 80071fa:	4311      	orrs	r1, r2
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	6992      	ldr	r2, [r2, #24]
 8007200:	430a      	orrs	r2, r1
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	ffff8000 	.word	0xffff8000

0800721c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d128      	bne.n	8007280 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	1e59      	subs	r1, r3, #1
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	3b01      	subs	r3, #1
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	4319      	orrs	r1, r3
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	3b01      	subs	r3, #1
 800724c:	021b      	lsls	r3, r3, #8
 800724e:	4319      	orrs	r1, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	3b01      	subs	r3, #1
 8007256:	031b      	lsls	r3, r3, #12
 8007258:	4319      	orrs	r1, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	3b01      	subs	r3, #1
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	4319      	orrs	r1, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	3b01      	subs	r3, #1
 800726a:	051b      	lsls	r3, r3, #20
 800726c:	4319      	orrs	r1, r3
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	3b01      	subs	r3, #1
 8007274:	061b      	lsls	r3, r3, #24
 8007276:	430b      	orrs	r3, r1
 8007278:	431a      	orrs	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	609a      	str	r2, [r3, #8]
 800727e:	e02d      	b.n	80072dc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	4b19      	ldr	r3, [pc, #100]	@ (80072ec <FMC_SDRAM_Timing_Init+0xd0>)
 8007286:	4013      	ands	r3, r2
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	68d2      	ldr	r2, [r2, #12]
 800728c:	3a01      	subs	r2, #1
 800728e:	0311      	lsls	r1, r2, #12
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	6952      	ldr	r2, [r2, #20]
 8007294:	3a01      	subs	r2, #1
 8007296:	0512      	lsls	r2, r2, #20
 8007298:	430a      	orrs	r2, r1
 800729a:	431a      	orrs	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	1e59      	subs	r1, r3, #1
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	4319      	orrs	r1, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	3b01      	subs	r3, #1
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	4319      	orrs	r1, r3
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	041b      	lsls	r3, r3, #16
 80072ca:	4319      	orrs	r1, r3
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	061b      	lsls	r3, r3, #24
 80072d4:	430b      	orrs	r3, r1
 80072d6:	431a      	orrs	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	ff0f0fff 	.word	0xff0f0fff

080072f0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	691a      	ldr	r2, [r3, #16]
 8007300:	4b0c      	ldr	r3, [pc, #48]	@ (8007334 <FMC_SDRAM_SendCommand+0x44>)
 8007302:	4013      	ands	r3, r2
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	6811      	ldr	r1, [r2, #0]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	6852      	ldr	r2, [r2, #4]
 800730c:	4311      	orrs	r1, r2
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	6892      	ldr	r2, [r2, #8]
 8007312:	3a01      	subs	r2, #1
 8007314:	0152      	lsls	r2, r2, #5
 8007316:	4311      	orrs	r1, r2
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	68d2      	ldr	r2, [r2, #12]
 800731c:	0252      	lsls	r2, r2, #9
 800731e:	430a      	orrs	r2, r1
 8007320:	431a      	orrs	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	ffc00000 	.word	0xffc00000

08007338 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	695a      	ldr	r2, [r3, #20]
 8007346:	4b07      	ldr	r3, [pc, #28]	@ (8007364 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8007348:	4013      	ands	r3, r2
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	0052      	lsls	r2, r2, #1
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	ffffc001 	.word	0xffffc001

08007368 <memset>:
 8007368:	4402      	add	r2, r0
 800736a:	4603      	mov	r3, r0
 800736c:	4293      	cmp	r3, r2
 800736e:	d100      	bne.n	8007372 <memset+0xa>
 8007370:	4770      	bx	lr
 8007372:	f803 1b01 	strb.w	r1, [r3], #1
 8007376:	e7f9      	b.n	800736c <memset+0x4>

08007378 <__libc_init_array>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	4d0d      	ldr	r5, [pc, #52]	@ (80073b0 <__libc_init_array+0x38>)
 800737c:	4c0d      	ldr	r4, [pc, #52]	@ (80073b4 <__libc_init_array+0x3c>)
 800737e:	1b64      	subs	r4, r4, r5
 8007380:	10a4      	asrs	r4, r4, #2
 8007382:	2600      	movs	r6, #0
 8007384:	42a6      	cmp	r6, r4
 8007386:	d109      	bne.n	800739c <__libc_init_array+0x24>
 8007388:	4d0b      	ldr	r5, [pc, #44]	@ (80073b8 <__libc_init_array+0x40>)
 800738a:	4c0c      	ldr	r4, [pc, #48]	@ (80073bc <__libc_init_array+0x44>)
 800738c:	f000 f826 	bl	80073dc <_init>
 8007390:	1b64      	subs	r4, r4, r5
 8007392:	10a4      	asrs	r4, r4, #2
 8007394:	2600      	movs	r6, #0
 8007396:	42a6      	cmp	r6, r4
 8007398:	d105      	bne.n	80073a6 <__libc_init_array+0x2e>
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a0:	4798      	blx	r3
 80073a2:	3601      	adds	r6, #1
 80073a4:	e7ee      	b.n	8007384 <__libc_init_array+0xc>
 80073a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073aa:	4798      	blx	r3
 80073ac:	3601      	adds	r6, #1
 80073ae:	e7f2      	b.n	8007396 <__libc_init_array+0x1e>
 80073b0:	08007434 	.word	0x08007434
 80073b4:	08007434 	.word	0x08007434
 80073b8:	08007434 	.word	0x08007434
 80073bc:	08007438 	.word	0x08007438

080073c0 <memcpy>:
 80073c0:	440a      	add	r2, r1
 80073c2:	4291      	cmp	r1, r2
 80073c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073c8:	d100      	bne.n	80073cc <memcpy+0xc>
 80073ca:	4770      	bx	lr
 80073cc:	b510      	push	{r4, lr}
 80073ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073d6:	4291      	cmp	r1, r2
 80073d8:	d1f9      	bne.n	80073ce <memcpy+0xe>
 80073da:	bd10      	pop	{r4, pc}

080073dc <_init>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr

080073e8 <_fini>:
 80073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ea:	bf00      	nop
 80073ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ee:	bc08      	pop	{r3}
 80073f0:	469e      	mov	lr, r3
 80073f2:	4770      	bx	lr
