
blackBoard-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e50  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080080e8  080080e8  000090e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008228  08008228  00009228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008230  08008230  00009230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008234  08008234  00009234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a0  24000000  08008238  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000534  240000a0  080082d8  0000a0a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005d4  080082d8  0000a5d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000118d3  00000000  00000000  0000a0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002461  00000000  00000000  0001b9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b60  00000000  00000000  0001de08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008bc  00000000  00000000  0001e968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036237  00000000  00000000  0001f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011586  00000000  00000000  0005545b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001578db  00000000  00000000  000669e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001be2bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000030b0  00000000  00000000  001be300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  001c13b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000a0 	.word	0x240000a0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080080d0 	.word	0x080080d0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000a4 	.word	0x240000a4
 80002d4:	080080d0 	.word	0x080080d0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <readUART>:
#include <stdlib.h>
#include <ctype.h>

/* Example implementation: splits node definitions on ';' */
void readUART(dataLink* link, char c)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08c      	sub	sp, #48	@ 0x30
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
    if (c == '\n' || c == '\r') {
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	2b0a      	cmp	r3, #10
 8000614:	d003      	beq.n	800061e <readUART+0x1a>
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	2b0d      	cmp	r3, #13
 800061a:	f040 8124 	bne.w	8000866 <readUART+0x262>
        link->commandBuffer[link->commandIndex] = '\0';
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f893 3239 	ldrb.w	r3, [r3, #569]	@ 0x239
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	2200      	movs	r2, #0
 800062c:	f883 21b9 	strb.w	r2, [r3, #441]	@ 0x1b9
        link->commandIndex = 0;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2239 	strb.w	r2, [r3, #569]	@ 0x239

        char* token;
        char* rest = link->commandBuffer;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f203 13b9 	addw	r3, r3, #441	@ 0x1b9
 800063e:	617b      	str	r3, [r7, #20]

        uint8_t nodeId = 255;
 8000640:	23ff      	movs	r3, #255	@ 0xff
 8000642:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        uint8_t effectId = 255;
 8000646:	23ff      	movs	r3, #255	@ 0xff
 8000648:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        uint8_t params[NUM_PARAMETERS];
        uint8_t inputs[MAX_INPUTS];
        memset(params, 255, sizeof params);   /* all 255, not just first */
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	2203      	movs	r2, #3
 8000652:	21ff      	movs	r1, #255	@ 0xff
 8000654:	4618      	mov	r0, r3
 8000656:	f007 fccf 	bl	8007ff8 <memset>
        memset(inputs, 255, sizeof inputs);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2203      	movs	r2, #3
 8000660:	21ff      	movs	r1, #255	@ 0xff
 8000662:	4618      	mov	r0, r3
 8000664:	f007 fcc8 	bl	8007ff8 <memset>

        while ((token = strtok_r(rest, ";", &rest))) {
 8000668:	e088      	b.n	800077c <readUART+0x178>
            if (token[0] == 'N')
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b4e      	cmp	r3, #78	@ 0x4e
 8000670:	d108      	bne.n	8000684 <readUART+0x80>
            {
                nodeId = atoi(&token[1]);
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3301      	adds	r3, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f007 fbbe 	bl	8007df8 <atoi>
 800067c:	4603      	mov	r3, r0
 800067e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000682:	e07b      	b.n	800077c <readUART+0x178>
            }
            else if (token[0] == 'E')
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b45      	cmp	r3, #69	@ 0x45
 800068a:	d108      	bne.n	800069e <readUART+0x9a>
            {
                effectId = atoi(&token[1]);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	3301      	adds	r3, #1
 8000690:	4618      	mov	r0, r3
 8000692:	f007 fbb1 	bl	8007df8 <atoi>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800069c:	e06e      	b.n	800077c <readUART+0x178>
            }
            else if (token[0] == 'P')
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b50      	cmp	r3, #80	@ 0x50
 80006a4:	d130      	bne.n	8000708 <readUART+0x104>
            {
                char* p = &token[1];
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3301      	adds	r3, #1
 80006aa:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t i = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                while (*p && i < NUM_PARAMETERS)
 80006b2:	e020      	b.n	80006f6 <readUART+0xf2>
                {
                    params[i++] = atoi(p);
 80006b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80006b6:	f007 fb9f 	bl	8007df8 <atoi>
 80006ba:	4601      	mov	r1, r0
 80006bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006c0:	1c5a      	adds	r2, r3, #1
 80006c2:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80006c6:	b2ca      	uxtb	r2, r1
 80006c8:	3330      	adds	r3, #48	@ 0x30
 80006ca:	443b      	add	r3, r7
 80006cc:	f803 2c20 	strb.w	r2, [r3, #-32]
                    while (*p && *p != ',') p++;
 80006d0:	e002      	b.n	80006d8 <readUART+0xd4>
 80006d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006d4:	3301      	adds	r3, #1
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <readUART+0xe4>
 80006e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b2c      	cmp	r3, #44	@ 0x2c
 80006e6:	d1f4      	bne.n	80006d2 <readUART+0xce>
                    if (*p == ',')
 80006e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b2c      	cmp	r3, #44	@ 0x2c
 80006ee:	d102      	bne.n	80006f6 <readUART+0xf2>
                    {
                    	p++;
 80006f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006f2:	3301      	adds	r3, #1
 80006f4:	62bb      	str	r3, [r7, #40]	@ 0x28
                while (*p && i < NUM_PARAMETERS)
 80006f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d03e      	beq.n	800077c <readUART+0x178>
 80006fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000702:	2b02      	cmp	r3, #2
 8000704:	d9d6      	bls.n	80006b4 <readUART+0xb0>
 8000706:	e039      	b.n	800077c <readUART+0x178>
                    }
                }
            } else if (token[0] == 'I')
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b49      	cmp	r3, #73	@ 0x49
 800070e:	d135      	bne.n	800077c <readUART+0x178>
            {
                char* p = &token[1];
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	3301      	adds	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 8000716:	2300      	movs	r3, #0
 8000718:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800071c:	e026      	b.n	800076c <readUART+0x168>
                {
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a5b      	ldr	r2, [pc, #364]	@ (8000894 <readUART+0x290>)
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	2b00      	cmp	r3, #0
 8000730:	d103      	bne.n	800073a <readUART+0x136>
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	3301      	adds	r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	e018      	b.n	800076c <readUART+0x168>
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	f107 0108 	add.w	r1, r7, #8
 8000740:	220a      	movs	r2, #10
 8000742:	4618      	mov	r0, r3
 8000744:	f007 fc4e 	bl	8007fe4 <strtoul>
 8000748:	4601      	mov	r1, r0
 800074a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8000754:	b2ca      	uxtb	r2, r1
 8000756:	3330      	adds	r3, #48	@ 0x30
 8000758:	443b      	add	r3, r7
 800075a:	f803 2c24 	strb.w	r2, [r3, #-36]
					if (*p == ',') p++;
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b2c      	cmp	r3, #44	@ 0x2c
 8000764:	d102      	bne.n	800076c <readUART+0x168>
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	3301      	adds	r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 800076c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000770:	2b02      	cmp	r3, #2
 8000772:	d803      	bhi.n	800077c <readUART+0x178>
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1d0      	bne.n	800071e <readUART+0x11a>
        while ((token = strtok_r(rest, ";", &rest))) {
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	f107 0214 	add.w	r2, r7, #20
 8000782:	4945      	ldr	r1, [pc, #276]	@ (8000898 <readUART+0x294>)
 8000784:	4618      	mov	r0, r3
 8000786:	f007 fc67 	bl	8008058 <strtok_r>
 800078a:	61f8      	str	r0, [r7, #28]
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	2b00      	cmp	r3, #0
 8000790:	f47f af6b 	bne.w	800066a <readUART+0x66>
                }
            }
        }

        if (nodeId < MAX_NODES)
 8000794:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000798:	2b09      	cmp	r3, #9
 800079a:	d877      	bhi.n	800088c <readUART+0x288>
        {
            node* n = &link->nodes[nodeId];
 800079c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007a0:	222c      	movs	r2, #44	@ 0x2c
 80007a2:	fb02 f303 	mul.w	r3, r2, r3
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	61bb      	str	r3, [r7, #24]
            n->nodeId = nodeId;
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80007b2:	701a      	strb	r2, [r3, #0]
            n->effectId = effectId;
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80007ba:	705a      	strb	r2, [r3, #1]

            for (uint8_t i = 0; i < NUM_PARAMETERS; i++)
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80007c2:	e010      	b.n	80007e6 <readUART+0x1e2>
            {
            	n->params[i] = params[i];
 80007c4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80007c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80007cc:	3230      	adds	r2, #48	@ 0x30
 80007ce:	443a      	add	r2, r7
 80007d0:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	4413      	add	r3, r2
 80007d8:	460a      	mov	r2, r1
 80007da:	70da      	strb	r2, [r3, #3]
            for (uint8_t i = 0; i < NUM_PARAMETERS; i++)
 80007dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80007e0:	3301      	adds	r3, #1
 80007e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80007e6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d9ea      	bls.n	80007c4 <readUART+0x1c0>
            }

            uint8_t inputCount = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            for (uint8_t i = 0; i < MAX_INPUTS; i++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80007fa:	e01d      	b.n	8000838 <readUART+0x234>
            {
            	n->inputs[i] = inputs[i];
 80007fc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000800:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000804:	3230      	adds	r2, #48	@ 0x30
 8000806:	443a      	add	r2, r7
 8000808:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	4413      	add	r3, r2
 8000810:	460a      	mov	r2, r1
 8000812:	719a      	strb	r2, [r3, #6]
            	if (inputs[i] != 255) inputCount++;
 8000814:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000818:	3330      	adds	r3, #48	@ 0x30
 800081a:	443b      	add	r3, r7
 800081c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000820:	2bff      	cmp	r3, #255	@ 0xff
 8000822:	d004      	beq.n	800082e <readUART+0x22a>
 8000824:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000828:	3301      	adds	r3, #1
 800082a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            for (uint8_t i = 0; i < MAX_INPUTS; i++)
 800082e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000832:	3301      	adds	r3, #1
 8000834:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000838:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800083c:	2b02      	cmp	r3, #2
 800083e:	d9dd      	bls.n	80007fc <readUART+0x1f8>
            }
            n->numInputs = inputCount;
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000846:	709a      	strb	r2, [r3, #2]

            if (nodeId >= link->nodeCount)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 800084e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000852:	429a      	cmp	r2, r3
 8000854:	d31a      	bcc.n	800088c <readUART+0x288>
            {
            	link->nodeCount = nodeId + 1;
 8000856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800085a:	3301      	adds	r3, #1
 800085c:	b2da      	uxtb	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
 8000864:	e012      	b.n	800088c <readUART+0x288>
            }
        }
        return;
    }

    if (link->commandIndex < sizeof(link->commandBuffer) - 1)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f893 3239 	ldrb.w	r3, [r3, #569]	@ 0x239
 800086c:	2b7e      	cmp	r3, #126	@ 0x7e
 800086e:	d80d      	bhi.n	800088c <readUART+0x288>
    {
        link->commandBuffer[link->commandIndex++] = c;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f893 3239 	ldrb.w	r3, [r3, #569]	@ 0x239
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	b2d1      	uxtb	r1, r2
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	f882 1239 	strb.w	r1, [r2, #569]	@ 0x239
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	78fa      	ldrb	r2, [r7, #3]
 8000888:	f883 21b9 	strb.w	r2, [r3, #441]	@ 0x1b9
    }
}
 800088c:	3730      	adds	r7, #48	@ 0x30
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	08008124 	.word	0x08008124
 8000898:	080080e8 	.word	0x080080e8

0800089c <initDataLink>:


void initDataLink(dataLink* link)
{
 800089c:	b480      	push	{r7}
 800089e:	b087      	sub	sp, #28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    link->nodeCount = 0;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
    //link->isComplete = 0;
    link->commandIndex = 0;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2239 	strb.w	r2, [r3, #569]	@ 0x239

    link->readUART = readUART;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000960 <initDataLink+0xc4>)
 80008b8:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c

    for (int i = 0; i < MAX_NODES; i++)
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e044      	b.n	800094c <initDataLink+0xb0>
    {

        link->nodes[i].nodeId = 255;
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	212c      	movs	r1, #44	@ 0x2c
 80008c8:	fb01 f303 	mul.w	r3, r1, r3
 80008cc:	4413      	add	r3, r2
 80008ce:	22ff      	movs	r2, #255	@ 0xff
 80008d0:	701a      	strb	r2, [r3, #0]
        link->nodes[i].effectId = 255;
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	212c      	movs	r1, #44	@ 0x2c
 80008d8:	fb01 f303 	mul.w	r3, r1, r3
 80008dc:	4413      	add	r3, r2
 80008de:	3301      	adds	r3, #1
 80008e0:	22ff      	movs	r2, #255	@ 0xff
 80008e2:	701a      	strb	r2, [r3, #0]
        link->nodes[i].numInputs = 0;
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	212c      	movs	r1, #44	@ 0x2c
 80008ea:	fb01 f303 	mul.w	r3, r1, r3
 80008ee:	4413      	add	r3, r2
 80008f0:	3302      	adds	r3, #2
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]

        for (int j = 0; j < NUM_PARAMETERS; j++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	e00d      	b.n	8000918 <initDataLink+0x7c>
        {
            link->nodes[i].params[j] = 255;
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	212c      	movs	r1, #44	@ 0x2c
 8000902:	fb01 f303 	mul.w	r3, r1, r3
 8000906:	441a      	add	r2, r3
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	4413      	add	r3, r2
 800090c:	3303      	adds	r3, #3
 800090e:	22ff      	movs	r2, #255	@ 0xff
 8000910:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < NUM_PARAMETERS; j++)
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	3301      	adds	r3, #1
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	2b02      	cmp	r3, #2
 800091c:	ddee      	ble.n	80008fc <initDataLink+0x60>
        }

        for (int j = 0; j < MAX_INPUTS; j++)
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	e00d      	b.n	8000940 <initDataLink+0xa4>
        {
            link->nodes[i].inputs[j] = 255;
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	212c      	movs	r1, #44	@ 0x2c
 800092a:	fb01 f303 	mul.w	r3, r1, r3
 800092e:	441a      	add	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	3306      	adds	r3, #6
 8000936:	22ff      	movs	r2, #255	@ 0xff
 8000938:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < MAX_INPUTS; j++)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b02      	cmp	r3, #2
 8000944:	ddee      	ble.n	8000924 <initDataLink+0x88>
    for (int i = 0; i < MAX_NODES; i++)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	2b09      	cmp	r3, #9
 8000950:	ddb7      	ble.n	80008c2 <initDataLink+0x26>
        }

    }
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	371c      	adds	r7, #28
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	08000605 	.word	0x08000605

08000964 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t test = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

	if (huart == &huart2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <HAL_UART_RxCpltCallback+0x5c>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d120      	bne.n	80009b6 <HAL_UART_RxCpltCallback+0x52>
	{
		char received = rxRecieve[0];
 8000974:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <HAL_UART_RxCpltCallback+0x60>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	73fb      	strb	r3, [r7, #15]

		link.readUART(&link, received);
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <HAL_UART_RxCpltCallback+0x64>)
 800097c:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8000980:	7bfa      	ldrb	r2, [r7, #15]
 8000982:	4611      	mov	r1, r2
 8000984:	4810      	ldr	r0, [pc, #64]	@ (80009c8 <HAL_UART_RxCpltCallback+0x64>)
 8000986:	4798      	blx	r3

		rxBuffer[uartRxIndex++] = received;
 8000988:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <HAL_UART_RxCpltCallback+0x68>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	b2d1      	uxtb	r1, r2
 8000990:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <HAL_UART_RxCpltCallback+0x68>)
 8000992:	7011      	strb	r1, [r2, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <HAL_UART_RxCpltCallback+0x6c>)
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	5453      	strb	r3, [r2, r1]
		if (uartRxIndex >= UART_BUFFER_SIZE) uartRxIndex = 0;
 800099c:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <HAL_UART_RxCpltCallback+0x68>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	da02      	bge.n	80009ac <HAL_UART_RxCpltCallback+0x48>
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_UART_RxCpltCallback+0x68>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	4905      	ldr	r1, [pc, #20]	@ (80009c4 <HAL_UART_RxCpltCallback+0x60>)
 80009b0:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <HAL_UART_RxCpltCallback+0x5c>)
 80009b2:	f004 feb5 	bl	8005720 <HAL_UART_Receive_IT>
		uartRxIndex = 0;
	}

	HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
	*/
}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	240000bc 	.word	0x240000bc
 80009c4:	24000410 	.word	0x24000410
 80009c8:	24000150 	.word	0x24000150
 80009cc:	24000494 	.word	0x24000494
 80009d0:	24000414 	.word	0x24000414

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b5b0      	push	{r4, r5, r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009d8:	f000 f958 	bl	8000c8c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 feb0 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f836 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f000 f8fc 	bl	8000be0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e8:	f000 f8ae 	bl	8000b48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  initDataLink(&link);
 80009ec:	4812      	ldr	r0, [pc, #72]	@ (8000a38 <main+0x64>)
 80009ee:	f7ff ff55 	bl	800089c <initDataLink>

  memcpy(ioPipe.in1, in0, sizeof(ioPipe.in1));   /* copies BUFFER_SIZE floats */
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <main+0x68>)
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <main+0x6c>)
 80009f6:	4614      	mov	r4, r2
 80009f8:	461d      	mov	r5, r3
 80009fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(ioPipe.in2, in1, sizeof(ioPipe.in2));
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <main+0x68>)
 8000a08:	4a0e      	ldr	r2, [pc, #56]	@ (8000a44 <main+0x70>)
 8000a0a:	f103 0420 	add.w	r4, r3, #32
 8000a0e:	4615      	mov	r5, r2
 8000a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	490a      	ldr	r1, [pc, #40]	@ (8000a48 <main+0x74>)
 8000a20:	480a      	ldr	r0, [pc, #40]	@ (8000a4c <main+0x78>)
 8000a22:	f004 fe7d 	bl	8005720 <HAL_UART_Receive_IT>
	  if (test >= 4800000)
	  {
		  test = 0;
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	  }*/
	  __WFI();
 8000a26:	bf30      	wfi
	  processNetwork(&link, &ioPipe, BUFFER_SIZE);
 8000a28:	2208      	movs	r2, #8
 8000a2a:	4904      	ldr	r1, [pc, #16]	@ (8000a3c <main+0x68>)
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <main+0x64>)
 8000a2e:	f000 fc5d 	bl	80012ec <processNetwork>
	  __WFI();
 8000a32:	bf00      	nop
 8000a34:	e7f7      	b.n	8000a26 <main+0x52>
 8000a36:	bf00      	nop
 8000a38:	24000150 	.word	0x24000150
 8000a3c:	24000390 	.word	0x24000390
 8000a40:	24000000 	.word	0x24000000
 8000a44:	24000020 	.word	0x24000020
 8000a48:	24000410 	.word	0x24000410
 8000a4c:	240000bc 	.word	0x240000bc

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	@ 0x70
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	224c      	movs	r2, #76	@ 0x4c
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f007 faca 	bl	8007ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f007 fac4 	bl	8007ff8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f001 ffb9 	bl	80029e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b31      	ldr	r3, [pc, #196]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a30      	ldr	r2, [pc, #192]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000a80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <SystemClock_Config+0xf4>)
 8000a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a94:	4a2b      	ldr	r2, [pc, #172]	@ (8000b44 <SystemClock_Config+0xf4>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a9c:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <SystemClock_Config+0xf4>)
 8000a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa8:	bf00      	nop
 8000aaa:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <SystemClock_Config+0xf0>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ab6:	d1f8      	bne.n	8000aaa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac0:	2340      	movs	r3, #64	@ 0x40
 8000ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000acc:	2304      	movs	r3, #4
 8000ace:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ad0:	233c      	movs	r3, #60	@ 0x3c
 8000ad2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 ffb3 	bl	8002a5c <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000afc:	f000 f8f2 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b00:	233f      	movs	r3, #63	@ 0x3f
 8000b02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2303      	movs	r3, #3
 8000b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b10:	2340      	movs	r3, #64	@ 0x40
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b14:	2340      	movs	r3, #64	@ 0x40
 8000b16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b1e:	2340      	movs	r3, #64	@ 0x40
 8000b20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2104      	movs	r1, #4
 8000b26:	4618      	mov	r0, r3
 8000b28:	f002 fbf2 	bl	8003310 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000b32:	f000 f8d7 	bl	8000ce4 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3770      	adds	r7, #112	@ 0x70
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	58024800 	.word	0x58024800
 8000b44:	58000400 	.word	0x58000400

08000b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b4c:	4b22      	ldr	r3, [pc, #136]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b4e:	4a23      	ldr	r2, [pc, #140]	@ (8000bdc <MX_USART2_UART_Init+0x94>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b52:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b84:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b90:	4811      	ldr	r0, [pc, #68]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000b92:	f004 fd75 	bl	8005680 <HAL_UART_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b9c:	f000 f8a2 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	480d      	ldr	r0, [pc, #52]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000ba4:	f007 f85d 	bl	8007c62 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bae:	f000 f899 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4808      	ldr	r0, [pc, #32]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000bb6:	f007 f892 	bl	8007cde <HAL_UARTEx_SetRxFifoThreshold>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bc0:	f000 f890 	bl	8000ce4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <MX_USART2_UART_Init+0x90>)
 8000bc6:	f007 f813 	bl	8007bf0 <HAL_UARTEx_DisableFifoMode>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bd0:	f000 f888 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	240000bc 	.word	0x240000bc
 8000bdc:	40004400 	.word	0x40004400

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfc:	4a21      	ldr	r2, [pc, #132]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c06:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c38:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <MX_GPIO_Init+0xa4>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c56:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <MX_GPIO_Init+0xa8>)
 8000c58:	f001 feac 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <MX_GPIO_Init+0xa8>)
 8000c76:	f001 fced 	bl	8002654 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	58024400 	.word	0x58024400
 8000c88:	58020800 	.word	0x58020800

08000c8c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c92:	463b      	mov	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c9e:	f000 fefd 	bl	8001a9c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000cae:	231f      	movs	r3, #31
 8000cb0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000cb2:	2387      	movs	r3, #135	@ 0x87
 8000cb4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 ff1b 	bl	8001b0c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cd6:	2004      	movs	r0, #4
 8000cd8:	f000 fef8 	bl	8001acc <HAL_MPU_Enable>

}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <Error_Handler+0x8>

08000cf0 <topoSort>:
 *  ------------------------------------------------------------------ */
#include <string.h>
#include "nodeSort.h"

size_t topoSort(const dataLink *link, uint8_t *result)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0a8      	sub	sp, #160	@ 0xa0
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
    uint8_t indeg[MAX_NODES] = {0};
 8000cfa:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	811a      	strh	r2, [r3, #8]
    uint8_t adj[MAX_NODES][MAX_NODES] = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2264      	movs	r2, #100	@ 0x64
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f007 f972 	bl	8007ff8 <memset>
    uint8_t adjCnt[MAX_NODES] = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	811a      	strh	r2, [r3, #8]

    /* in‑degree & adjacency */
    for (uint8_t i = 0; i < link->nodeCount; ++i) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8000d26:	e05b      	b.n	8000de0 <topoSort+0xf0>
        const node *n = &link->nodes[i];
 8000d28:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000d2c:	222c      	movs	r2, #44	@ 0x2c
 8000d2e:	fb02 f303 	mul.w	r3, r2, r3
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        for (uint8_t j = 0; j < n->numInputs; ++j) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8000d40:	e042      	b.n	8000dc8 <topoSort+0xd8>
            uint8_t src = n->inputs[j];
 8000d42:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000d46:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d4a:	4413      	add	r3, r2
 8000d4c:	799b      	ldrb	r3, [r3, #6]
 8000d4e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            if (src != 254 && src != 255 && src < link->nodeCount) {
 8000d52:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000d56:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d58:	d031      	beq.n	8000dbe <topoSort+0xce>
 8000d5a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000d5e:	2bff      	cmp	r3, #255	@ 0xff
 8000d60:	d02d      	beq.n	8000dbe <topoSort+0xce>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8000d68:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d226      	bcs.n	8000dbe <topoSort+0xce>
                indeg[i]++;
 8000d70:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000d74:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8000d78:	443a      	add	r2, r7
 8000d7a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8000d7e:	3201      	adds	r2, #1
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	33a0      	adds	r3, #160	@ 0xa0
 8000d84:	443b      	add	r3, r7
 8000d86:	f803 2c1c 	strb.w	r2, [r3, #-28]
                adj[src][adjCnt[src]++] = i;
 8000d8a:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8000d8e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000d92:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 8000d96:	4439      	add	r1, r7
 8000d98:	f811 1c8c 	ldrb.w	r1, [r1, #-140]
 8000d9c:	1c48      	adds	r0, r1, #1
 8000d9e:	b2c0      	uxtb	r0, r0
 8000da0:	33a0      	adds	r3, #160	@ 0xa0
 8000da2:	443b      	add	r3, r7
 8000da4:	f803 0c8c 	strb.w	r0, [r3, #-140]
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	33a0      	adds	r3, #160	@ 0xa0
 8000db2:	443b      	add	r3, r7
 8000db4:	440b      	add	r3, r1
 8000db6:	3b80      	subs	r3, #128	@ 0x80
 8000db8:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8000dbc:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < n->numInputs; ++j) {
 8000dbe:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8000dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000dcc:	789b      	ldrb	r3, [r3, #2]
 8000dce:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d3b5      	bcc.n	8000d42 <topoSort+0x52>
    for (uint8_t i = 0; i < link->nodeCount; ++i) {
 8000dd6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000dda:	3301      	adds	r3, #1
 8000ddc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8000de6:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d39c      	bcc.n	8000d28 <topoSort+0x38>
            }
        }
    }

    uint8_t Q[MAX_NODES], h = 0, t = 0, out = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8000e00:	2300      	movs	r3, #0
 8000e02:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
 8000e06:	e017      	b.n	8000e38 <topoSort+0x148>
        if (indeg[i] == 0) Q[t++] = i;
 8000e08:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8000e0c:	33a0      	adds	r3, #160	@ 0xa0
 8000e0e:	443b      	add	r3, r7
 8000e10:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10a      	bne.n	8000e2e <topoSort+0x13e>
 8000e18:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	f887 209c 	strb.w	r2, [r7, #156]	@ 0x9c
 8000e22:	33a0      	adds	r3, #160	@ 0xa0
 8000e24:	443b      	add	r3, r7
 8000e26:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 8000e2a:	f803 2c98 	strb.w	r2, [r3, #-152]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8000e2e:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8000e32:	3301      	adds	r3, #1
 8000e34:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8000e3e:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d3e0      	bcc.n	8000e08 <topoSort+0x118>

    while (h < t) {
 8000e46:	e056      	b.n	8000ef6 <topoSort+0x206>
        uint8_t curr = Q[h++];
 8000e48:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	f887 209d 	strb.w	r2, [r7, #157]	@ 0x9d
 8000e52:	33a0      	adds	r3, #160	@ 0xa0
 8000e54:	443b      	add	r3, r7
 8000e56:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8000e5a:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
        result[out++] = curr;
 8000e5e:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	f887 209b 	strb.w	r2, [r7, #155]	@ 0x9b
 8000e68:	461a      	mov	r2, r3
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f897 2098 	ldrb.w	r2, [r7, #152]	@ 0x98
 8000e72:	701a      	strb	r2, [r3, #0]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 8000e7a:	e032      	b.n	8000ee2 <topoSort+0x1f2>
            uint8_t child = adj[curr][k];
 8000e7c:	f897 2098 	ldrb.w	r2, [r7, #152]	@ 0x98
 8000e80:	f897 1099 	ldrb.w	r1, [r7, #153]	@ 0x99
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	33a0      	adds	r3, #160	@ 0xa0
 8000e8e:	443b      	add	r3, r7
 8000e90:	440b      	add	r3, r1
 8000e92:	3b80      	subs	r3, #128	@ 0x80
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
            if (--indeg[child] == 0)
 8000e9a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000e9e:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8000ea2:	443a      	add	r2, r7
 8000ea4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8000ea8:	3a01      	subs	r2, #1
 8000eaa:	b2d1      	uxtb	r1, r2
 8000eac:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8000eb0:	443a      	add	r2, r7
 8000eb2:	f802 1c1c 	strb.w	r1, [r2, #-28]
 8000eb6:	33a0      	adds	r3, #160	@ 0xa0
 8000eb8:	443b      	add	r3, r7
 8000eba:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10a      	bne.n	8000ed8 <topoSort+0x1e8>
                Q[t++] = child;
 8000ec2:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	f887 209c 	strb.w	r2, [r7, #156]	@ 0x9c
 8000ecc:	33a0      	adds	r3, #160	@ 0xa0
 8000ece:	443b      	add	r3, r7
 8000ed0:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000ed4:	f803 2c98 	strb.w	r2, [r3, #-152]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8000ed8:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000edc:	3301      	adds	r3, #1
 8000ede:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 8000ee2:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8000ee6:	33a0      	adds	r3, #160	@ 0xa0
 8000ee8:	443b      	add	r3, r7
 8000eea:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 8000eee:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d3c2      	bcc.n	8000e7c <topoSort+0x18c>
    while (h < t) {
 8000ef6:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8000efa:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3a2      	bcc.n	8000e48 <topoSort+0x158>
        }
    }
    return out; /* should equal nodeCount for an acyclic graph */
 8000f02:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	37a0      	adds	r7, #160	@ 0xa0
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <addEffect>:
#include "process.h"
#include "nodeSort.h"

/* Effect helpers --------------------------------------------------- */
static inline void addEffect      (const float *in, float *out, int p)
{ for (int i = 0; i < BUFFER_SIZE; ++i) out[i] = in[i] + p; }
 8000f0e:	b480      	push	{r7}
 8000f10:	b087      	sub	sp, #28
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	e015      	b.n	8000f4c <addEffect+0x3e>
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	ed93 7a00 	vldr	s14, [r3]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f42:	edc3 7a00 	vstr	s15, [r3]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	dde6      	ble.n	8000f20 <addEffect+0x12>
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	371c      	adds	r7, #28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <subtractEffect>:

static inline void subtractEffect (const float *in, float *out, int p)
{ for (int i = 0; i < BUFFER_SIZE; ++i) out[i] = in[i] - p; }
 8000f60:	b480      	push	{r7}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e015      	b.n	8000f9e <subtractEffect+0x3e>
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	ed93 7a00 	vldr	s14, [r3]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	4413      	add	r3, r2
 8000f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f94:	edc3 7a00 	vstr	s15, [r3]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b07      	cmp	r3, #7
 8000fa2:	dde6      	ble.n	8000f72 <subtractEffect+0x12>
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <multiplyEffect>:

static inline void multiplyEffect (const float *in, float *out, int p)
{ for (int i = 0; i < BUFFER_SIZE; ++i) out[i] = in[i] * p; }
 8000fb2:	b480      	push	{r7}
 8000fb4:	b087      	sub	sp, #28
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e015      	b.n	8000ff0 <multiplyEffect+0x3e>
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	ed93 7a00 	vldr	s14, [r3]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe6:	edc3 7a00 	vstr	s15, [r3]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b07      	cmp	r3, #7
 8000ff4:	dde6      	ble.n	8000fc4 <multiplyEffect+0x12>
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <divideEffect>:

static inline void divideEffect   (const float *in, float *out, int p)
{ float k = p ? 1.0f/p : 0.0f; for (int i = 0; i < BUFFER_SIZE; ++i) out[i] = in[i] * k; }
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d009      	beq.n	800102a <divideEffect+0x26>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001020:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001028:	e001      	b.n	800102e <divideEffect+0x2a>
 800102a:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8001074 <divideEffect+0x70>
 800102e:	edc7 7a04 	vstr	s15, [r7, #16]
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e012      	b.n	800105e <divideEffect+0x5a>
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	4413      	add	r3, r2
 800104c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001054:	edc3 7a00 	vstr	s15, [r3]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b07      	cmp	r3, #7
 8001062:	dde9      	ble.n	8001038 <divideEffect+0x34>
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	00000000 	.word	0x00000000

08001078 <mixEffect>:

static void mixEffect(float *const inputs[], float *out,
                      const float *w, uint8_t cnt)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < BUFFER_SIZE; ++i) {
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	e04c      	b.n	8001126 <mixEffect+0xae>
        float sum = 0.0f, tot = 0.0f;
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < cnt; ++j) {
 8001098:	2300      	movs	r3, #0
 800109a:	74fb      	strb	r3, [r7, #19]
 800109c:	e026      	b.n	80010ec <mixEffect+0x74>
            sum += inputs[j][i] * w[j];
 800109e:	7cfb      	ldrb	r3, [r7, #19]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	ed93 7a00 	vldr	s14, [r3]
 80010b2:	7cfb      	ldrb	r3, [r7, #19]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80010c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ca:	edc7 7a06 	vstr	s15, [r7, #24]
            tot += w[j];
 80010ce:	7cfb      	ldrb	r3, [r7, #19]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	edd3 7a00 	vldr	s15, [r3]
 80010da:	ed97 7a05 	vldr	s14, [r7, #20]
 80010de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e2:	edc7 7a05 	vstr	s15, [r7, #20]
        for (uint8_t j = 0; j < cnt; ++j) {
 80010e6:	7cfb      	ldrb	r3, [r7, #19]
 80010e8:	3301      	adds	r3, #1
 80010ea:	74fb      	strb	r3, [r7, #19]
 80010ec:	7cfa      	ldrb	r2, [r7, #19]
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d3d4      	bcc.n	800109e <mixEffect+0x26>
        }
        out[i] = tot ? sum / tot : 0.0f;
 80010f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d006      	beq.n	8001110 <mixEffect+0x98>
 8001102:	edd7 6a06 	vldr	s13, [r7, #24]
 8001106:	ed97 7a05 	vldr	s14, [r7, #20]
 800110a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110e:	e001      	b.n	8001114 <mixEffect+0x9c>
 8001110:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800113c <mixEffect+0xc4>
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	4413      	add	r3, r2
 800111c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < BUFFER_SIZE; ++i) {
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	3301      	adds	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	2b07      	cmp	r3, #7
 800112a:	ddaf      	ble.n	800108c <mixEffect+0x14>
    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3724      	adds	r7, #36	@ 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	00000000 	.word	0x00000000

08001140 <runGraph>:

/* Internal --------------------------------------------------------- */
static void runGraph(dataLink *link, const uint8_t *order, size_t n, pipeDef *pipe)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08e      	sub	sp, #56	@ 0x38
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]
    float *inPtr[MAX_INPUTS];

    for (size_t idx = 0; idx < n; ++idx) {
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	@ 0x34
 8001152:	e0c0      	b.n	80012d6 <runGraph+0x196>
        node *nd = &link->nodes[order[idx]];
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	232c      	movs	r3, #44	@ 0x2c
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Map inputs */
        for (uint8_t i = 0; i < nd->numInputs; ++i) {
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001170:	e031      	b.n	80011d6 <runGraph+0x96>
            uint8_t src = nd->inputs[i];
 8001172:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001178:	4413      	add	r3, r2
 800117a:	799b      	ldrb	r3, [r3, #6]
 800117c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            inPtr[i] = (src == 254) ? pipe->in1
                     : (src == 255) ? pipe->in2
 8001180:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001184:	2bfe      	cmp	r3, #254	@ 0xfe
 8001186:	d101      	bne.n	800118c <runGraph+0x4c>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	e018      	b.n	80011be <runGraph+0x7e>
                     : (src < link->nodeCount) ? link->nodes[src].processBuffer
 800118c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001190:	2bff      	cmp	r3, #255	@ 0xff
 8001192:	d102      	bne.n	800119a <runGraph+0x5a>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3320      	adds	r3, #32
 8001198:	e011      	b.n	80011be <runGraph+0x7e>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
                     : NULL;
 80011a0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d209      	bcs.n	80011bc <runGraph+0x7c>
                     : (src < link->nodeCount) ? link->nodes[src].processBuffer
 80011a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
                     : NULL;
 80011ac:	222c      	movs	r2, #44	@ 0x2c
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	3308      	adds	r3, #8
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	3304      	adds	r3, #4
 80011ba:	e000      	b.n	80011be <runGraph+0x7e>
 80011bc:	2300      	movs	r3, #0
            inPtr[i] = (src == 254) ? pipe->in1
 80011be:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	3238      	adds	r2, #56	@ 0x38
 80011c6:	443a      	add	r2, r7
 80011c8:	f842 3c1c 	str.w	r3, [r2, #-28]
        for (uint8_t i = 0; i < nd->numInputs; ++i) {
 80011cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011d0:	3301      	adds	r3, #1
 80011d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80011d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3c7      	bcc.n	8001172 <runGraph+0x32>
        }

        /* Process */
        switch (nd->effectId) {
 80011e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	dc14      	bgt.n	8001214 <runGraph+0xd4>
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db69      	blt.n	80012c2 <runGraph+0x182>
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d867      	bhi.n	80012c2 <runGraph+0x182>
 80011f2:	a201      	add	r2, pc, #4	@ (adr r2, 80011f8 <runGraph+0xb8>)
 80011f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f8:	0800121b 	.word	0x0800121b
 80011fc:	0800122f 	.word	0x0800122f
 8001200:	08001243 	.word	0x08001243
 8001204:	08001257 	.word	0x08001257
 8001208:	080012c3 	.word	0x080012c3
 800120c:	080012c3 	.word	0x080012c3
 8001210:	0800126b 	.word	0x0800126b
 8001214:	2bff      	cmp	r3, #255	@ 0xff
 8001216:	d154      	bne.n	80012c2 <runGraph+0x182>
        case 255: /* passthrough: already pre‑filled */ break;
 8001218:	e05a      	b.n	80012d0 <runGraph+0x190>
        case 0:  addEffect     (inPtr[0], nd->processBuffer, nd->params[0]); break;
 800121a:	69f8      	ldr	r0, [r7, #28]
 800121c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121e:	f103 010c 	add.w	r1, r3, #12
 8001222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001224:	78db      	ldrb	r3, [r3, #3]
 8001226:	461a      	mov	r2, r3
 8001228:	f7ff fe71 	bl	8000f0e <addEffect>
 800122c:	e050      	b.n	80012d0 <runGraph+0x190>
        case 1:  subtractEffect(inPtr[0], nd->processBuffer, nd->params[0]); break;
 800122e:	69f8      	ldr	r0, [r7, #28]
 8001230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001232:	f103 010c 	add.w	r1, r3, #12
 8001236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001238:	78db      	ldrb	r3, [r3, #3]
 800123a:	461a      	mov	r2, r3
 800123c:	f7ff fe90 	bl	8000f60 <subtractEffect>
 8001240:	e046      	b.n	80012d0 <runGraph+0x190>
        case 2:  multiplyEffect(inPtr[0], nd->processBuffer, nd->params[0]); break;
 8001242:	69f8      	ldr	r0, [r7, #28]
 8001244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001246:	f103 010c 	add.w	r1, r3, #12
 800124a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800124c:	78db      	ldrb	r3, [r3, #3]
 800124e:	461a      	mov	r2, r3
 8001250:	f7ff feaf 	bl	8000fb2 <multiplyEffect>
 8001254:	e03c      	b.n	80012d0 <runGraph+0x190>
        case 3:  divideEffect  (inPtr[0], nd->processBuffer, nd->params[0]); break;
 8001256:	69f8      	ldr	r0, [r7, #28]
 8001258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800125a:	f103 010c 	add.w	r1, r3, #12
 800125e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001260:	78db      	ldrb	r3, [r3, #3]
 8001262:	461a      	mov	r2, r3
 8001264:	f7ff fece 	bl	8001004 <divideEffect>
 8001268:	e032      	b.n	80012d0 <runGraph+0x190>
        case 6: {
            float w[MAX_INPUTS];
            for (uint8_t i = 0; i < nd->numInputs; ++i) w[i] = nd->params[i];
 800126a:	2300      	movs	r3, #0
 800126c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001270:	e015      	b.n	800129e <runGraph+0x15e>
 8001272:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001278:	4413      	add	r3, r2
 800127a:	78da      	ldrb	r2, [r3, #3]
 800127c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001280:	ee07 2a90 	vmov	s15, r2
 8001284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	3338      	adds	r3, #56	@ 0x38
 800128c:	443b      	add	r3, r7
 800128e:	3b28      	subs	r3, #40	@ 0x28
 8001290:	edc3 7a00 	vstr	s15, [r3]
 8001294:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001298:	3301      	adds	r3, #1
 800129a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800129e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a0:	789b      	ldrb	r3, [r3, #2]
 80012a2:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d3e3      	bcc.n	8001272 <runGraph+0x132>
            mixEffect(inPtr, nd->processBuffer, w, nd->numInputs);
 80012aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ac:	f103 010c 	add.w	r1, r3, #12
 80012b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	f107 0210 	add.w	r2, r7, #16
 80012b8:	f107 001c 	add.w	r0, r7, #28
 80012bc:	f7ff fedc 	bl	8001078 <mixEffect>
            break;
 80012c0:	e006      	b.n	80012d0 <runGraph+0x190>
        }
        default:
            memset(nd->processBuffer, 0, BUFFER_SIZE*sizeof(float));
 80012c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c4:	330c      	adds	r3, #12
 80012c6:	2220      	movs	r2, #32
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f006 fe94 	bl	8007ff8 <memset>
    for (size_t idx = 0; idx < n; ++idx) {
 80012d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d2:	3301      	adds	r3, #1
 80012d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80012d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	429a      	cmp	r2, r3
 80012dc:	f4ff af3a 	bcc.w	8001154 <runGraph+0x14>
        }
    }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3738      	adds	r7, #56	@ 0x38
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop

080012ec <processNetwork>:

/* Public ----------------------------------------------------------- */
void processNetwork(dataLink *link, pipeDef *pipe, size_t len)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
    if (len > BUFFER_SIZE) len = BUFFER_SIZE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d901      	bls.n	8001302 <processNetwork+0x16>
 80012fe:	2308      	movs	r3, #8
 8001300:	607b      	str	r3, [r7, #4]

    /* preload first two nodes for passthrough */
    if (link->nodeCount > 0)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <processNetwork+0x32>
        memcpy(link->nodes[0].processBuffer, pipe->in1, len*sizeof(float));
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f103 000c 	add.w	r0, r3, #12
 8001312:	68b9      	ldr	r1, [r7, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	461a      	mov	r2, r3
 800131a:	f006 fecb 	bl	80080b4 <memcpy>
    if (link->nodeCount > 1)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8001324:	2b01      	cmp	r3, #1
 8001326:	d90a      	bls.n	800133e <processNetwork+0x52>
        memcpy(link->nodes[1].processBuffer, pipe->in2, len*sizeof(float));
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f103 0120 	add.w	r1, r3, #32
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	461a      	mov	r2, r3
 800133a:	f006 febb 	bl	80080b4 <memcpy>

    uint8_t order[MAX_NODES];
    size_t count = topoSort(link, order);
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f7ff fcd3 	bl	8000cf0 <topoSort>
 800134a:	61f8      	str	r0, [r7, #28]

    runGraph(link, order, count, pipe);
 800134c:	f107 0110 	add.w	r1, r7, #16
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff fef3 	bl	8001140 <runGraph>

    /* outputs */
    if (link->nodeCount > 0)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00a      	beq.n	800137a <processNetwork+0x8e>
        memcpy(pipe->out1, link->nodes[0].processBuffer, len*sizeof(float));
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f103 010c 	add.w	r1, r3, #12
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	461a      	mov	r2, r3
 8001376:	f006 fe9d 	bl	80080b4 <memcpy>
    if (link->nodeCount > 1)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8001380:	2b01      	cmp	r3, #1
 8001382:	d90a      	bls.n	800139a <processNetwork+0xae>
        memcpy(pipe->out2, link->nodes[1].processBuffer, len*sizeof(float));
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	461a      	mov	r2, r3
 8001396:	f006 fe8d 	bl	80080b4 <memcpy>
}
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_MspInit+0x30>)
 80013ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013b0:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <HAL_MspInit+0x30>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_MspInit+0x30>)
 80013bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	58024400 	.word	0x58024400

080013d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0bc      	sub	sp, #240	@ 0xf0
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	f107 0318 	add.w	r3, r7, #24
 80013f4:	22c0      	movs	r2, #192	@ 0xc0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f006 fdfd 	bl	8007ff8 <memset>
  if(huart->Instance==USART2)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a3c      	ldr	r2, [pc, #240]	@ (80014f4 <HAL_UART_MspInit+0x11c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d171      	bne.n	80014ec <HAL_UART_MspInit+0x114>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001408:	f04f 0202 	mov.w	r2, #2
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141a:	f107 0318 	add.w	r3, r7, #24
 800141e:	4618      	mov	r0, r3
 8001420:	f002 fb02 	bl	8003a28 <HAL_RCCEx_PeriphCLKConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800142a:	f7ff fc5b 	bl	8000ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800142e:	4b32      	ldr	r3, [pc, #200]	@ (80014f8 <HAL_UART_MspInit+0x120>)
 8001430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001434:	4a30      	ldr	r2, [pc, #192]	@ (80014f8 <HAL_UART_MspInit+0x120>)
 8001436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800143e:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <HAL_UART_MspInit+0x120>)
 8001440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <HAL_UART_MspInit+0x120>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001452:	4a29      	ldr	r2, [pc, #164]	@ (80014f8 <HAL_UART_MspInit+0x120>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <HAL_UART_MspInit+0x120>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <HAL_UART_MspInit+0x120>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001470:	4a21      	ldr	r2, [pc, #132]	@ (80014f8 <HAL_UART_MspInit+0x120>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800147a:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <HAL_UART_MspInit+0x120>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001488:	2304      	movs	r3, #4
 800148a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014a0:	2307      	movs	r3, #7
 80014a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014aa:	4619      	mov	r1, r3
 80014ac:	4813      	ldr	r0, [pc, #76]	@ (80014fc <HAL_UART_MspInit+0x124>)
 80014ae:	f001 f8d1 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014b2:	2340      	movs	r3, #64	@ 0x40
 80014b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ca:	2307      	movs	r3, #7
 80014cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014d4:	4619      	mov	r1, r3
 80014d6:	480a      	ldr	r0, [pc, #40]	@ (8001500 <HAL_UART_MspInit+0x128>)
 80014d8:	f001 f8bc 	bl	8002654 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	2026      	movs	r0, #38	@ 0x26
 80014e2:	f000 faa6 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014e6:	2026      	movs	r0, #38	@ 0x26
 80014e8:	f000 fabd 	bl	8001a66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80014ec:	bf00      	nop
 80014ee:	37f0      	adds	r7, #240	@ 0xf0
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40004400 	.word	0x40004400
 80014f8:	58024400 	.word	0x58024400
 80014fc:	58020000 	.word	0x58020000
 8001500:	58020c00 	.word	0x58020c00

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <NMI_Handler+0x4>

0800150c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <MemManage_Handler+0x4>

0800151c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <UsageFault_Handler+0x4>

0800152c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155a:	f000 f963 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <USART2_IRQHandler+0x10>)
 800156a:	f004 f925 	bl	80057b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	240000bc 	.word	0x240000bc

08001578 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800157c:	4b43      	ldr	r3, [pc, #268]	@ (800168c <SystemInit+0x114>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001582:	4a42      	ldr	r2, [pc, #264]	@ (800168c <SystemInit+0x114>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800158c:	4b40      	ldr	r3, [pc, #256]	@ (8001690 <SystemInit+0x118>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	2b06      	cmp	r3, #6
 8001596:	d807      	bhi.n	80015a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001598:	4b3d      	ldr	r3, [pc, #244]	@ (8001690 <SystemInit+0x118>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 030f 	bic.w	r3, r3, #15
 80015a0:	4a3b      	ldr	r2, [pc, #236]	@ (8001690 <SystemInit+0x118>)
 80015a2:	f043 0307 	orr.w	r3, r3, #7
 80015a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001694 <SystemInit+0x11c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a39      	ldr	r2, [pc, #228]	@ (8001694 <SystemInit+0x11c>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015b4:	4b37      	ldr	r3, [pc, #220]	@ (8001694 <SystemInit+0x11c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015ba:	4b36      	ldr	r3, [pc, #216]	@ (8001694 <SystemInit+0x11c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4935      	ldr	r1, [pc, #212]	@ (8001694 <SystemInit+0x11c>)
 80015c0:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <SystemInit+0x120>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015c6:	4b32      	ldr	r3, [pc, #200]	@ (8001690 <SystemInit+0x118>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <SystemInit+0x118>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 030f 	bic.w	r3, r3, #15
 80015da:	4a2d      	ldr	r2, [pc, #180]	@ (8001690 <SystemInit+0x118>)
 80015dc:	f043 0307 	orr.w	r3, r3, #7
 80015e0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001694 <SystemInit+0x11c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <SystemInit+0x11c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015ee:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <SystemInit+0x11c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015f4:	4b27      	ldr	r3, [pc, #156]	@ (8001694 <SystemInit+0x11c>)
 80015f6:	4a29      	ldr	r2, [pc, #164]	@ (800169c <SystemInit+0x124>)
 80015f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <SystemInit+0x11c>)
 80015fc:	4a28      	ldr	r2, [pc, #160]	@ (80016a0 <SystemInit+0x128>)
 80015fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001600:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <SystemInit+0x11c>)
 8001602:	4a28      	ldr	r2, [pc, #160]	@ (80016a4 <SystemInit+0x12c>)
 8001604:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001606:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <SystemInit+0x11c>)
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800160c:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <SystemInit+0x11c>)
 800160e:	4a25      	ldr	r2, [pc, #148]	@ (80016a4 <SystemInit+0x12c>)
 8001610:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001612:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <SystemInit+0x11c>)
 8001614:	2200      	movs	r2, #0
 8001616:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001618:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <SystemInit+0x11c>)
 800161a:	4a22      	ldr	r2, [pc, #136]	@ (80016a4 <SystemInit+0x12c>)
 800161c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800161e:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <SystemInit+0x11c>)
 8001620:	2200      	movs	r2, #0
 8001622:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <SystemInit+0x11c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1a      	ldr	r2, [pc, #104]	@ (8001694 <SystemInit+0x11c>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800162e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <SystemInit+0x11c>)
 8001632:	2200      	movs	r2, #0
 8001634:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001636:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <SystemInit+0x130>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <SystemInit+0x134>)
 800163c:	4013      	ands	r3, r2
 800163e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001642:	d202      	bcs.n	800164a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <SystemInit+0x138>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <SystemInit+0x11c>)
 800164c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d113      	bne.n	8001680 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <SystemInit+0x11c>)
 800165a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800165e:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <SystemInit+0x11c>)
 8001660:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001664:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <SystemInit+0x13c>)
 800166a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800166e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <SystemInit+0x11c>)
 8001672:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001676:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <SystemInit+0x11c>)
 8001678:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800167c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	52002000 	.word	0x52002000
 8001694:	58024400 	.word	0x58024400
 8001698:	eaf6ed7f 	.word	0xeaf6ed7f
 800169c:	02020200 	.word	0x02020200
 80016a0:	01ff0000 	.word	0x01ff0000
 80016a4:	01010280 	.word	0x01010280
 80016a8:	5c001000 	.word	0x5c001000
 80016ac:	ffff0000 	.word	0xffff0000
 80016b0:	51008108 	.word	0x51008108
 80016b4:	52004000 	.word	0x52004000

080016b8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <ExitRun0Mode+0x2c>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4a08      	ldr	r2, [pc, #32]	@ (80016e4 <ExitRun0Mode+0x2c>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80016c8:	bf00      	nop
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <ExitRun0Mode+0x2c>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f9      	beq.n	80016ca <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	58024800 	.word	0x58024800

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001724 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80016ec:	f7ff ffe4 	bl	80016b8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016f0:	f7ff ff42 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	@ (8001728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	@ (800172c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	@ (8001738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171a:	f006 fca7 	bl	800806c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7ff f959 	bl	80009d4 <main>
  bx  lr
 8001722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001728:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800172c:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8001730:	08008238 	.word	0x08008238
  ldr r2, =_sbss
 8001734:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8001738:	240005d4 	.word	0x240005d4

0800173c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC3_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001746:	2003      	movs	r0, #3
 8001748:	f000 f968 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800174c:	f001 ff96 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8001750:	4602      	mov	r2, r0
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_Init+0x68>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	0a1b      	lsrs	r3, r3, #8
 8001758:	f003 030f 	and.w	r3, r3, #15
 800175c:	4913      	ldr	r1, [pc, #76]	@ (80017ac <HAL_Init+0x6c>)
 800175e:	5ccb      	ldrb	r3, [r1, r3]
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
 8001768:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <HAL_Init+0x68>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	4a0e      	ldr	r2, [pc, #56]	@ (80017ac <HAL_Init+0x6c>)
 8001774:	5cd3      	ldrb	r3, [r2, r3]
 8001776:	f003 031f 	and.w	r3, r3, #31
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	fa22 f303 	lsr.w	r3, r2, r3
 8001780:	4a0b      	ldr	r2, [pc, #44]	@ (80017b0 <HAL_Init+0x70>)
 8001782:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001784:	4a0b      	ldr	r2, [pc, #44]	@ (80017b4 <HAL_Init+0x74>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800178a:	200f      	movs	r0, #15
 800178c:	f000 f814 	bl	80017b8 <HAL_InitTick>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e002      	b.n	80017a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800179a:	f7ff fe03 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	58024400 	.word	0x58024400
 80017ac:	080080ec 	.word	0x080080ec
 80017b0:	24000044 	.word	0x24000044
 80017b4:	24000040 	.word	0x24000040

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017c0:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_InitTick+0x60>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e021      	b.n	8001810 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <HAL_InitTick+0x64>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_InitTick+0x60>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f94d 	bl	8001a82 <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001800:	f000 f917 	bl	8001a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	@ (8001820 <HAL_InitTick+0x68>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2400004c 	.word	0x2400004c
 800181c:	24000040 	.word	0x24000040
 8001820:	24000048 	.word	0x24000048

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	2400004c 	.word	0x2400004c
 8001848:	24000498 	.word	0x24000498

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	24000498 	.word	0x24000498

08001864 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <HAL_GetREVID+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0c1b      	lsrs	r3, r3, #16
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	5c001000 	.word	0x5c001000

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <__NVIC_SetPriorityGrouping+0x40>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <__NVIC_SetPriorityGrouping+0x40>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00
 80018c0:	05fa0000 	.word	0x05fa0000

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4907      	ldr	r1, [pc, #28]	@ (8001918 <__NVIC_EnableIRQ+0x38>)
 80018fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	@ (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	@ (800196c <__NVIC_SetPriority+0x50>)
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	@ 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	@ 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019fc:	f7ff ff8e 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff29 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff40 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff90 	bl	8001970 <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5f 	bl	800191c <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff33 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa4 	bl	80019d8 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001aa0:	f3bf 8f5f 	dmb	sy
}
 8001aa4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <HAL_MPU_Disable+0x28>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	4a06      	ldr	r2, [pc, #24]	@ (8001ac4 <HAL_MPU_Disable+0x28>)
 8001aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ab2:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <HAL_MPU_Disable+0x2c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00
 8001ac8:	e000ed90 	.word	0xe000ed90

08001acc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b04 <HAL_MPU_Enable+0x38>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <HAL_MPU_Enable+0x3c>)
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	4a09      	ldr	r2, [pc, #36]	@ (8001b08 <HAL_MPU_Enable+0x3c>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001aea:	f3bf 8f4f 	dsb	sy
}
 8001aee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001af0:	f3bf 8f6f 	isb	sy
}
 8001af4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed90 	.word	0xe000ed90
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	785a      	ldrb	r2, [r3, #1]
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_MPU_ConfigRegion+0x7c>)
 8001b1a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <HAL_MPU_ConfigRegion+0x7c>)
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	4a19      	ldr	r2, [pc, #100]	@ (8001b88 <HAL_MPU_ConfigRegion+0x7c>)
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001b28:	4a17      	ldr	r2, [pc, #92]	@ (8001b88 <HAL_MPU_ConfigRegion+0x7c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7b1b      	ldrb	r3, [r3, #12]
 8001b34:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7adb      	ldrb	r3, [r3, #11]
 8001b3a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7a9b      	ldrb	r3, [r3, #10]
 8001b42:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7b5b      	ldrb	r3, [r3, #13]
 8001b4a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7b9b      	ldrb	r3, [r3, #14]
 8001b52:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7bdb      	ldrb	r3, [r3, #15]
 8001b5a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7a5b      	ldrb	r3, [r3, #9]
 8001b62:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7a1b      	ldrb	r3, [r3, #8]
 8001b6a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b6c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b74:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b76:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b78:	6113      	str	r3, [r2, #16]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed90 	.word	0xe000ed90

08001b8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff fe5a 	bl	800184c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e2dc      	b.n	800215e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d008      	beq.n	8001bc2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2280      	movs	r2, #128	@ 0x80
 8001bb4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e2cd      	b.n	800215e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a76      	ldr	r2, [pc, #472]	@ (8001da0 <HAL_DMA_Abort+0x214>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d04a      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a74      	ldr	r2, [pc, #464]	@ (8001da4 <HAL_DMA_Abort+0x218>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d045      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a73      	ldr	r2, [pc, #460]	@ (8001da8 <HAL_DMA_Abort+0x21c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d040      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a71      	ldr	r2, [pc, #452]	@ (8001dac <HAL_DMA_Abort+0x220>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d03b      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a70      	ldr	r2, [pc, #448]	@ (8001db0 <HAL_DMA_Abort+0x224>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d036      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a6e      	ldr	r2, [pc, #440]	@ (8001db4 <HAL_DMA_Abort+0x228>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d031      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6d      	ldr	r2, [pc, #436]	@ (8001db8 <HAL_DMA_Abort+0x22c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d02c      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6b      	ldr	r2, [pc, #428]	@ (8001dbc <HAL_DMA_Abort+0x230>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d027      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a6a      	ldr	r2, [pc, #424]	@ (8001dc0 <HAL_DMA_Abort+0x234>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a68      	ldr	r2, [pc, #416]	@ (8001dc4 <HAL_DMA_Abort+0x238>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01d      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a67      	ldr	r2, [pc, #412]	@ (8001dc8 <HAL_DMA_Abort+0x23c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d018      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a65      	ldr	r2, [pc, #404]	@ (8001dcc <HAL_DMA_Abort+0x240>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a64      	ldr	r2, [pc, #400]	@ (8001dd0 <HAL_DMA_Abort+0x244>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d00e      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a62      	ldr	r2, [pc, #392]	@ (8001dd4 <HAL_DMA_Abort+0x248>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d009      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a61      	ldr	r2, [pc, #388]	@ (8001dd8 <HAL_DMA_Abort+0x24c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d004      	beq.n	8001c62 <HAL_DMA_Abort+0xd6>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a5f      	ldr	r2, [pc, #380]	@ (8001ddc <HAL_DMA_Abort+0x250>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_DMA_Abort+0xda>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_DMA_Abort+0xdc>
 8001c66:	2300      	movs	r3, #0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 021e 	bic.w	r2, r2, #30
 8001c7a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c8a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e00a      	b.n	8001caa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 020e 	bic.w	r2, r2, #14
 8001ca2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a3c      	ldr	r2, [pc, #240]	@ (8001da0 <HAL_DMA_Abort+0x214>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d072      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a3a      	ldr	r2, [pc, #232]	@ (8001da4 <HAL_DMA_Abort+0x218>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d06d      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a39      	ldr	r2, [pc, #228]	@ (8001da8 <HAL_DMA_Abort+0x21c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d068      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a37      	ldr	r2, [pc, #220]	@ (8001dac <HAL_DMA_Abort+0x220>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d063      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a36      	ldr	r2, [pc, #216]	@ (8001db0 <HAL_DMA_Abort+0x224>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d05e      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a34      	ldr	r2, [pc, #208]	@ (8001db4 <HAL_DMA_Abort+0x228>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d059      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a33      	ldr	r2, [pc, #204]	@ (8001db8 <HAL_DMA_Abort+0x22c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d054      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a31      	ldr	r2, [pc, #196]	@ (8001dbc <HAL_DMA_Abort+0x230>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d04f      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a30      	ldr	r2, [pc, #192]	@ (8001dc0 <HAL_DMA_Abort+0x234>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d04a      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc4 <HAL_DMA_Abort+0x238>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d045      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc8 <HAL_DMA_Abort+0x23c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d040      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dcc <HAL_DMA_Abort+0x240>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d03b      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd0 <HAL_DMA_Abort+0x244>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d036      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a28      	ldr	r2, [pc, #160]	@ (8001dd4 <HAL_DMA_Abort+0x248>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d031      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a27      	ldr	r2, [pc, #156]	@ (8001dd8 <HAL_DMA_Abort+0x24c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d02c      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a25      	ldr	r2, [pc, #148]	@ (8001ddc <HAL_DMA_Abort+0x250>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d027      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a24      	ldr	r2, [pc, #144]	@ (8001de0 <HAL_DMA_Abort+0x254>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d022      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a22      	ldr	r2, [pc, #136]	@ (8001de4 <HAL_DMA_Abort+0x258>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01d      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a21      	ldr	r2, [pc, #132]	@ (8001de8 <HAL_DMA_Abort+0x25c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d018      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dec <HAL_DMA_Abort+0x260>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1e      	ldr	r2, [pc, #120]	@ (8001df0 <HAL_DMA_Abort+0x264>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00e      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1c      	ldr	r2, [pc, #112]	@ (8001df4 <HAL_DMA_Abort+0x268>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d009      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001df8 <HAL_DMA_Abort+0x26c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_DMA_Abort+0x20e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	@ (8001dfc <HAL_DMA_Abort+0x270>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d132      	bne.n	8001e00 <HAL_DMA_Abort+0x274>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e031      	b.n	8001e02 <HAL_DMA_Abort+0x276>
 8001d9e:	bf00      	nop
 8001da0:	40020010 	.word	0x40020010
 8001da4:	40020028 	.word	0x40020028
 8001da8:	40020040 	.word	0x40020040
 8001dac:	40020058 	.word	0x40020058
 8001db0:	40020070 	.word	0x40020070
 8001db4:	40020088 	.word	0x40020088
 8001db8:	400200a0 	.word	0x400200a0
 8001dbc:	400200b8 	.word	0x400200b8
 8001dc0:	40020410 	.word	0x40020410
 8001dc4:	40020428 	.word	0x40020428
 8001dc8:	40020440 	.word	0x40020440
 8001dcc:	40020458 	.word	0x40020458
 8001dd0:	40020470 	.word	0x40020470
 8001dd4:	40020488 	.word	0x40020488
 8001dd8:	400204a0 	.word	0x400204a0
 8001ddc:	400204b8 	.word	0x400204b8
 8001de0:	58025408 	.word	0x58025408
 8001de4:	5802541c 	.word	0x5802541c
 8001de8:	58025430 	.word	0x58025430
 8001dec:	58025444 	.word	0x58025444
 8001df0:	58025458 	.word	0x58025458
 8001df4:	5802546c 	.word	0x5802546c
 8001df8:	58025480 	.word	0x58025480
 8001dfc:	58025494 	.word	0x58025494
 8001e00:	2300      	movs	r3, #0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e14:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6d      	ldr	r2, [pc, #436]	@ (8001fd0 <HAL_DMA_Abort+0x444>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d04a      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a6b      	ldr	r2, [pc, #428]	@ (8001fd4 <HAL_DMA_Abort+0x448>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d045      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6a      	ldr	r2, [pc, #424]	@ (8001fd8 <HAL_DMA_Abort+0x44c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d040      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a68      	ldr	r2, [pc, #416]	@ (8001fdc <HAL_DMA_Abort+0x450>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d03b      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a67      	ldr	r2, [pc, #412]	@ (8001fe0 <HAL_DMA_Abort+0x454>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d036      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a65      	ldr	r2, [pc, #404]	@ (8001fe4 <HAL_DMA_Abort+0x458>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d031      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a64      	ldr	r2, [pc, #400]	@ (8001fe8 <HAL_DMA_Abort+0x45c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d02c      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a62      	ldr	r2, [pc, #392]	@ (8001fec <HAL_DMA_Abort+0x460>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d027      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a61      	ldr	r2, [pc, #388]	@ (8001ff0 <HAL_DMA_Abort+0x464>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d022      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a5f      	ldr	r2, [pc, #380]	@ (8001ff4 <HAL_DMA_Abort+0x468>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01d      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ff8 <HAL_DMA_Abort+0x46c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d018      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a5c      	ldr	r2, [pc, #368]	@ (8001ffc <HAL_DMA_Abort+0x470>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a5b      	ldr	r2, [pc, #364]	@ (8002000 <HAL_DMA_Abort+0x474>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d00e      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a59      	ldr	r2, [pc, #356]	@ (8002004 <HAL_DMA_Abort+0x478>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d009      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a58      	ldr	r2, [pc, #352]	@ (8002008 <HAL_DMA_Abort+0x47c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d004      	beq.n	8001eb6 <HAL_DMA_Abort+0x32a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a56      	ldr	r2, [pc, #344]	@ (800200c <HAL_DMA_Abort+0x480>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d108      	bne.n	8001ec8 <HAL_DMA_Abort+0x33c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0201 	bic.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e007      	b.n	8001ed8 <HAL_DMA_Abort+0x34c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ed8:	e013      	b.n	8001f02 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eda:	f7ff fcb7 	bl	800184c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d90c      	bls.n	8001f02 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e12d      	b.n	800215e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1e5      	bne.n	8001eda <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd0 <HAL_DMA_Abort+0x444>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d04a      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd4 <HAL_DMA_Abort+0x448>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d045      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd8 <HAL_DMA_Abort+0x44c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d040      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2a      	ldr	r2, [pc, #168]	@ (8001fdc <HAL_DMA_Abort+0x450>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d03b      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a29      	ldr	r2, [pc, #164]	@ (8001fe0 <HAL_DMA_Abort+0x454>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d036      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a27      	ldr	r2, [pc, #156]	@ (8001fe4 <HAL_DMA_Abort+0x458>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d031      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a26      	ldr	r2, [pc, #152]	@ (8001fe8 <HAL_DMA_Abort+0x45c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d02c      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a24      	ldr	r2, [pc, #144]	@ (8001fec <HAL_DMA_Abort+0x460>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d027      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a23      	ldr	r2, [pc, #140]	@ (8001ff0 <HAL_DMA_Abort+0x464>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d022      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a21      	ldr	r2, [pc, #132]	@ (8001ff4 <HAL_DMA_Abort+0x468>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01d      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a20      	ldr	r2, [pc, #128]	@ (8001ff8 <HAL_DMA_Abort+0x46c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d018      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1e      	ldr	r2, [pc, #120]	@ (8001ffc <HAL_DMA_Abort+0x470>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002000 <HAL_DMA_Abort+0x474>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00e      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1b      	ldr	r2, [pc, #108]	@ (8002004 <HAL_DMA_Abort+0x478>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002008 <HAL_DMA_Abort+0x47c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d004      	beq.n	8001fae <HAL_DMA_Abort+0x422>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a18      	ldr	r2, [pc, #96]	@ (800200c <HAL_DMA_Abort+0x480>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_DMA_Abort+0x426>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_DMA_Abort+0x428>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d02b      	beq.n	8002010 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	223f      	movs	r2, #63	@ 0x3f
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	e02a      	b.n	8002026 <HAL_DMA_Abort+0x49a>
 8001fd0:	40020010 	.word	0x40020010
 8001fd4:	40020028 	.word	0x40020028
 8001fd8:	40020040 	.word	0x40020040
 8001fdc:	40020058 	.word	0x40020058
 8001fe0:	40020070 	.word	0x40020070
 8001fe4:	40020088 	.word	0x40020088
 8001fe8:	400200a0 	.word	0x400200a0
 8001fec:	400200b8 	.word	0x400200b8
 8001ff0:	40020410 	.word	0x40020410
 8001ff4:	40020428 	.word	0x40020428
 8001ff8:	40020440 	.word	0x40020440
 8001ffc:	40020458 	.word	0x40020458
 8002000:	40020470 	.word	0x40020470
 8002004:	40020488 	.word	0x40020488
 8002008:	400204a0 	.word	0x400204a0
 800200c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002014:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	2201      	movs	r2, #1
 8002020:	409a      	lsls	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a4f      	ldr	r2, [pc, #316]	@ (8002168 <HAL_DMA_Abort+0x5dc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d072      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a4d      	ldr	r2, [pc, #308]	@ (800216c <HAL_DMA_Abort+0x5e0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d06d      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a4c      	ldr	r2, [pc, #304]	@ (8002170 <HAL_DMA_Abort+0x5e4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d068      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a4a      	ldr	r2, [pc, #296]	@ (8002174 <HAL_DMA_Abort+0x5e8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d063      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a49      	ldr	r2, [pc, #292]	@ (8002178 <HAL_DMA_Abort+0x5ec>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d05e      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a47      	ldr	r2, [pc, #284]	@ (800217c <HAL_DMA_Abort+0x5f0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d059      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a46      	ldr	r2, [pc, #280]	@ (8002180 <HAL_DMA_Abort+0x5f4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d054      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a44      	ldr	r2, [pc, #272]	@ (8002184 <HAL_DMA_Abort+0x5f8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d04f      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a43      	ldr	r2, [pc, #268]	@ (8002188 <HAL_DMA_Abort+0x5fc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d04a      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a41      	ldr	r2, [pc, #260]	@ (800218c <HAL_DMA_Abort+0x600>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d045      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a40      	ldr	r2, [pc, #256]	@ (8002190 <HAL_DMA_Abort+0x604>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d040      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a3e      	ldr	r2, [pc, #248]	@ (8002194 <HAL_DMA_Abort+0x608>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d03b      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a3d      	ldr	r2, [pc, #244]	@ (8002198 <HAL_DMA_Abort+0x60c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d036      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a3b      	ldr	r2, [pc, #236]	@ (800219c <HAL_DMA_Abort+0x610>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d031      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a3a      	ldr	r2, [pc, #232]	@ (80021a0 <HAL_DMA_Abort+0x614>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d02c      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a38      	ldr	r2, [pc, #224]	@ (80021a4 <HAL_DMA_Abort+0x618>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d027      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a37      	ldr	r2, [pc, #220]	@ (80021a8 <HAL_DMA_Abort+0x61c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d022      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a35      	ldr	r2, [pc, #212]	@ (80021ac <HAL_DMA_Abort+0x620>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01d      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a34      	ldr	r2, [pc, #208]	@ (80021b0 <HAL_DMA_Abort+0x624>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d018      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a32      	ldr	r2, [pc, #200]	@ (80021b4 <HAL_DMA_Abort+0x628>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a31      	ldr	r2, [pc, #196]	@ (80021b8 <HAL_DMA_Abort+0x62c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00e      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2f      	ldr	r2, [pc, #188]	@ (80021bc <HAL_DMA_Abort+0x630>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d009      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2e      	ldr	r2, [pc, #184]	@ (80021c0 <HAL_DMA_Abort+0x634>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_DMA_Abort+0x58a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2c      	ldr	r2, [pc, #176]	@ (80021c4 <HAL_DMA_Abort+0x638>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_DMA_Abort+0x58e>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_DMA_Abort+0x590>
 800211a:	2300      	movs	r3, #0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d015      	beq.n	800214c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002128:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00c      	beq.n	800214c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800213c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002140:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800214a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40020010 	.word	0x40020010
 800216c:	40020028 	.word	0x40020028
 8002170:	40020040 	.word	0x40020040
 8002174:	40020058 	.word	0x40020058
 8002178:	40020070 	.word	0x40020070
 800217c:	40020088 	.word	0x40020088
 8002180:	400200a0 	.word	0x400200a0
 8002184:	400200b8 	.word	0x400200b8
 8002188:	40020410 	.word	0x40020410
 800218c:	40020428 	.word	0x40020428
 8002190:	40020440 	.word	0x40020440
 8002194:	40020458 	.word	0x40020458
 8002198:	40020470 	.word	0x40020470
 800219c:	40020488 	.word	0x40020488
 80021a0:	400204a0 	.word	0x400204a0
 80021a4:	400204b8 	.word	0x400204b8
 80021a8:	58025408 	.word	0x58025408
 80021ac:	5802541c 	.word	0x5802541c
 80021b0:	58025430 	.word	0x58025430
 80021b4:	58025444 	.word	0x58025444
 80021b8:	58025458 	.word	0x58025458
 80021bc:	5802546c 	.word	0x5802546c
 80021c0:	58025480 	.word	0x58025480
 80021c4:	58025494 	.word	0x58025494

080021c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e237      	b.n	800264a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2280      	movs	r2, #128	@ 0x80
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e22c      	b.n	800264a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a5c      	ldr	r2, [pc, #368]	@ (8002368 <HAL_DMA_Abort_IT+0x1a0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d04a      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a5b      	ldr	r2, [pc, #364]	@ (800236c <HAL_DMA_Abort_IT+0x1a4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d045      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a59      	ldr	r2, [pc, #356]	@ (8002370 <HAL_DMA_Abort_IT+0x1a8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d040      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a58      	ldr	r2, [pc, #352]	@ (8002374 <HAL_DMA_Abort_IT+0x1ac>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d03b      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a56      	ldr	r2, [pc, #344]	@ (8002378 <HAL_DMA_Abort_IT+0x1b0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d036      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a55      	ldr	r2, [pc, #340]	@ (800237c <HAL_DMA_Abort_IT+0x1b4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d031      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a53      	ldr	r2, [pc, #332]	@ (8002380 <HAL_DMA_Abort_IT+0x1b8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d02c      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a52      	ldr	r2, [pc, #328]	@ (8002384 <HAL_DMA_Abort_IT+0x1bc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d027      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a50      	ldr	r2, [pc, #320]	@ (8002388 <HAL_DMA_Abort_IT+0x1c0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d022      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a4f      	ldr	r2, [pc, #316]	@ (800238c <HAL_DMA_Abort_IT+0x1c4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d01d      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a4d      	ldr	r2, [pc, #308]	@ (8002390 <HAL_DMA_Abort_IT+0x1c8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d018      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a4c      	ldr	r2, [pc, #304]	@ (8002394 <HAL_DMA_Abort_IT+0x1cc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d013      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a4a      	ldr	r2, [pc, #296]	@ (8002398 <HAL_DMA_Abort_IT+0x1d0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00e      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a49      	ldr	r2, [pc, #292]	@ (800239c <HAL_DMA_Abort_IT+0x1d4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d009      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a47      	ldr	r2, [pc, #284]	@ (80023a0 <HAL_DMA_Abort_IT+0x1d8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_DMA_Abort_IT+0xc8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a46      	ldr	r2, [pc, #280]	@ (80023a4 <HAL_DMA_Abort_IT+0x1dc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d101      	bne.n	8002294 <HAL_DMA_Abort_IT+0xcc>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_DMA_Abort_IT+0xce>
 8002294:	2300      	movs	r3, #0
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8086 	beq.w	80023a8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2204      	movs	r2, #4
 80022a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002368 <HAL_DMA_Abort_IT+0x1a0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d04a      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a2e      	ldr	r2, [pc, #184]	@ (800236c <HAL_DMA_Abort_IT+0x1a4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d045      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002370 <HAL_DMA_Abort_IT+0x1a8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d040      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002374 <HAL_DMA_Abort_IT+0x1ac>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d03b      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a29      	ldr	r2, [pc, #164]	@ (8002378 <HAL_DMA_Abort_IT+0x1b0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d036      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a28      	ldr	r2, [pc, #160]	@ (800237c <HAL_DMA_Abort_IT+0x1b4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d031      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a26      	ldr	r2, [pc, #152]	@ (8002380 <HAL_DMA_Abort_IT+0x1b8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d02c      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a25      	ldr	r2, [pc, #148]	@ (8002384 <HAL_DMA_Abort_IT+0x1bc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d027      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a23      	ldr	r2, [pc, #140]	@ (8002388 <HAL_DMA_Abort_IT+0x1c0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d022      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a22      	ldr	r2, [pc, #136]	@ (800238c <HAL_DMA_Abort_IT+0x1c4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d01d      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a20      	ldr	r2, [pc, #128]	@ (8002390 <HAL_DMA_Abort_IT+0x1c8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d018      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1f      	ldr	r2, [pc, #124]	@ (8002394 <HAL_DMA_Abort_IT+0x1cc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1d      	ldr	r2, [pc, #116]	@ (8002398 <HAL_DMA_Abort_IT+0x1d0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00e      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1c      	ldr	r2, [pc, #112]	@ (800239c <HAL_DMA_Abort_IT+0x1d4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1a      	ldr	r2, [pc, #104]	@ (80023a0 <HAL_DMA_Abort_IT+0x1d8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Abort_IT+0x17c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a19      	ldr	r2, [pc, #100]	@ (80023a4 <HAL_DMA_Abort_IT+0x1dc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d108      	bne.n	8002356 <HAL_DMA_Abort_IT+0x18e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e178      	b.n	8002648 <HAL_DMA_Abort_IT+0x480>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e16f      	b.n	8002648 <HAL_DMA_Abort_IT+0x480>
 8002368:	40020010 	.word	0x40020010
 800236c:	40020028 	.word	0x40020028
 8002370:	40020040 	.word	0x40020040
 8002374:	40020058 	.word	0x40020058
 8002378:	40020070 	.word	0x40020070
 800237c:	40020088 	.word	0x40020088
 8002380:	400200a0 	.word	0x400200a0
 8002384:	400200b8 	.word	0x400200b8
 8002388:	40020410 	.word	0x40020410
 800238c:	40020428 	.word	0x40020428
 8002390:	40020440 	.word	0x40020440
 8002394:	40020458 	.word	0x40020458
 8002398:	40020470 	.word	0x40020470
 800239c:	40020488 	.word	0x40020488
 80023a0:	400204a0 	.word	0x400204a0
 80023a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 020e 	bic.w	r2, r2, #14
 80023b6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a6c      	ldr	r2, [pc, #432]	@ (8002570 <HAL_DMA_Abort_IT+0x3a8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d04a      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6b      	ldr	r2, [pc, #428]	@ (8002574 <HAL_DMA_Abort_IT+0x3ac>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d045      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a69      	ldr	r2, [pc, #420]	@ (8002578 <HAL_DMA_Abort_IT+0x3b0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d040      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a68      	ldr	r2, [pc, #416]	@ (800257c <HAL_DMA_Abort_IT+0x3b4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d03b      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a66      	ldr	r2, [pc, #408]	@ (8002580 <HAL_DMA_Abort_IT+0x3b8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d036      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a65      	ldr	r2, [pc, #404]	@ (8002584 <HAL_DMA_Abort_IT+0x3bc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d031      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a63      	ldr	r2, [pc, #396]	@ (8002588 <HAL_DMA_Abort_IT+0x3c0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d02c      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a62      	ldr	r2, [pc, #392]	@ (800258c <HAL_DMA_Abort_IT+0x3c4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d027      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a60      	ldr	r2, [pc, #384]	@ (8002590 <HAL_DMA_Abort_IT+0x3c8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d022      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5f      	ldr	r2, [pc, #380]	@ (8002594 <HAL_DMA_Abort_IT+0x3cc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d01d      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a5d      	ldr	r2, [pc, #372]	@ (8002598 <HAL_DMA_Abort_IT+0x3d0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d018      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a5c      	ldr	r2, [pc, #368]	@ (800259c <HAL_DMA_Abort_IT+0x3d4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d013      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a5a      	ldr	r2, [pc, #360]	@ (80025a0 <HAL_DMA_Abort_IT+0x3d8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00e      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a59      	ldr	r2, [pc, #356]	@ (80025a4 <HAL_DMA_Abort_IT+0x3dc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d009      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a57      	ldr	r2, [pc, #348]	@ (80025a8 <HAL_DMA_Abort_IT+0x3e0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d004      	beq.n	8002458 <HAL_DMA_Abort_IT+0x290>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a56      	ldr	r2, [pc, #344]	@ (80025ac <HAL_DMA_Abort_IT+0x3e4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d108      	bne.n	800246a <HAL_DMA_Abort_IT+0x2a2>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e007      	b.n	800247a <HAL_DMA_Abort_IT+0x2b2>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a3c      	ldr	r2, [pc, #240]	@ (8002570 <HAL_DMA_Abort_IT+0x3a8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d072      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a3a      	ldr	r2, [pc, #232]	@ (8002574 <HAL_DMA_Abort_IT+0x3ac>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d06d      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a39      	ldr	r2, [pc, #228]	@ (8002578 <HAL_DMA_Abort_IT+0x3b0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d068      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a37      	ldr	r2, [pc, #220]	@ (800257c <HAL_DMA_Abort_IT+0x3b4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d063      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a36      	ldr	r2, [pc, #216]	@ (8002580 <HAL_DMA_Abort_IT+0x3b8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d05e      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a34      	ldr	r2, [pc, #208]	@ (8002584 <HAL_DMA_Abort_IT+0x3bc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d059      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a33      	ldr	r2, [pc, #204]	@ (8002588 <HAL_DMA_Abort_IT+0x3c0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d054      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a31      	ldr	r2, [pc, #196]	@ (800258c <HAL_DMA_Abort_IT+0x3c4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d04f      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a30      	ldr	r2, [pc, #192]	@ (8002590 <HAL_DMA_Abort_IT+0x3c8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d04a      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002594 <HAL_DMA_Abort_IT+0x3cc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d045      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002598 <HAL_DMA_Abort_IT+0x3d0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d040      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2b      	ldr	r2, [pc, #172]	@ (800259c <HAL_DMA_Abort_IT+0x3d4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d03b      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2a      	ldr	r2, [pc, #168]	@ (80025a0 <HAL_DMA_Abort_IT+0x3d8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d036      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a28      	ldr	r2, [pc, #160]	@ (80025a4 <HAL_DMA_Abort_IT+0x3dc>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d031      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a27      	ldr	r2, [pc, #156]	@ (80025a8 <HAL_DMA_Abort_IT+0x3e0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d02c      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a25      	ldr	r2, [pc, #148]	@ (80025ac <HAL_DMA_Abort_IT+0x3e4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d027      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a24      	ldr	r2, [pc, #144]	@ (80025b0 <HAL_DMA_Abort_IT+0x3e8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d022      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a22      	ldr	r2, [pc, #136]	@ (80025b4 <HAL_DMA_Abort_IT+0x3ec>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01d      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a21      	ldr	r2, [pc, #132]	@ (80025b8 <HAL_DMA_Abort_IT+0x3f0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d018      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1f      	ldr	r2, [pc, #124]	@ (80025bc <HAL_DMA_Abort_IT+0x3f4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1e      	ldr	r2, [pc, #120]	@ (80025c0 <HAL_DMA_Abort_IT+0x3f8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00e      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <HAL_DMA_Abort_IT+0x3fc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1b      	ldr	r2, [pc, #108]	@ (80025c8 <HAL_DMA_Abort_IT+0x400>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <HAL_DMA_Abort_IT+0x3a2>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_DMA_Abort_IT+0x404>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d132      	bne.n	80025d0 <HAL_DMA_Abort_IT+0x408>
 800256a:	2301      	movs	r3, #1
 800256c:	e031      	b.n	80025d2 <HAL_DMA_Abort_IT+0x40a>
 800256e:	bf00      	nop
 8002570:	40020010 	.word	0x40020010
 8002574:	40020028 	.word	0x40020028
 8002578:	40020040 	.word	0x40020040
 800257c:	40020058 	.word	0x40020058
 8002580:	40020070 	.word	0x40020070
 8002584:	40020088 	.word	0x40020088
 8002588:	400200a0 	.word	0x400200a0
 800258c:	400200b8 	.word	0x400200b8
 8002590:	40020410 	.word	0x40020410
 8002594:	40020428 	.word	0x40020428
 8002598:	40020440 	.word	0x40020440
 800259c:	40020458 	.word	0x40020458
 80025a0:	40020470 	.word	0x40020470
 80025a4:	40020488 	.word	0x40020488
 80025a8:	400204a0 	.word	0x400204a0
 80025ac:	400204b8 	.word	0x400204b8
 80025b0:	58025408 	.word	0x58025408
 80025b4:	5802541c 	.word	0x5802541c
 80025b8:	58025430 	.word	0x58025430
 80025bc:	58025444 	.word	0x58025444
 80025c0:	58025458 	.word	0x58025458
 80025c4:	5802546c 	.word	0x5802546c
 80025c8:	58025480 	.word	0x58025480
 80025cc:	58025494 	.word	0x58025494
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d028      	beq.n	8002628 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025e4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2201      	movs	r2, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002604:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00c      	beq.n	8002628 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002618:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800261c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002626:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002662:	4b89      	ldr	r3, [pc, #548]	@ (8002888 <HAL_GPIO_Init+0x234>)
 8002664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002666:	e194      	b.n	8002992 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8186 	beq.w	800298c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d005      	beq.n	8002698 <HAL_GPIO_Init+0x44>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d130      	bne.n	80026fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ce:	2201      	movs	r2, #1
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	f003 0201 	and.w	r2, r3, #1
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b03      	cmp	r3, #3
 8002704:	d017      	beq.n	8002736 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d123      	bne.n	800278a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	08da      	lsrs	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3208      	adds	r2, #8
 800274a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	220f      	movs	r2, #15
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	08da      	lsrs	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3208      	adds	r2, #8
 8002784:	69b9      	ldr	r1, [r7, #24]
 8002786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	2203      	movs	r2, #3
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0203 	and.w	r2, r3, #3
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 80e0 	beq.w	800298c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027cc:	4b2f      	ldr	r3, [pc, #188]	@ (800288c <HAL_GPIO_Init+0x238>)
 80027ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027d2:	4a2e      	ldr	r2, [pc, #184]	@ (800288c <HAL_GPIO_Init+0x238>)
 80027d4:	f043 0302 	orr.w	r3, r3, #2
 80027d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027dc:	4b2b      	ldr	r3, [pc, #172]	@ (800288c <HAL_GPIO_Init+0x238>)
 80027de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ea:	4a29      	ldr	r2, [pc, #164]	@ (8002890 <HAL_GPIO_Init+0x23c>)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	3302      	adds	r3, #2
 80027f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	220f      	movs	r2, #15
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a20      	ldr	r2, [pc, #128]	@ (8002894 <HAL_GPIO_Init+0x240>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d052      	beq.n	80028bc <HAL_GPIO_Init+0x268>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1f      	ldr	r2, [pc, #124]	@ (8002898 <HAL_GPIO_Init+0x244>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d031      	beq.n	8002882 <HAL_GPIO_Init+0x22e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1e      	ldr	r2, [pc, #120]	@ (800289c <HAL_GPIO_Init+0x248>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d02b      	beq.n	800287e <HAL_GPIO_Init+0x22a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <HAL_GPIO_Init+0x24c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d025      	beq.n	800287a <HAL_GPIO_Init+0x226>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a1c      	ldr	r2, [pc, #112]	@ (80028a4 <HAL_GPIO_Init+0x250>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01f      	beq.n	8002876 <HAL_GPIO_Init+0x222>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1b      	ldr	r2, [pc, #108]	@ (80028a8 <HAL_GPIO_Init+0x254>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d019      	beq.n	8002872 <HAL_GPIO_Init+0x21e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1a      	ldr	r2, [pc, #104]	@ (80028ac <HAL_GPIO_Init+0x258>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_GPIO_Init+0x21a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a19      	ldr	r2, [pc, #100]	@ (80028b0 <HAL_GPIO_Init+0x25c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00d      	beq.n	800286a <HAL_GPIO_Init+0x216>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a18      	ldr	r2, [pc, #96]	@ (80028b4 <HAL_GPIO_Init+0x260>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <HAL_GPIO_Init+0x212>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a17      	ldr	r2, [pc, #92]	@ (80028b8 <HAL_GPIO_Init+0x264>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_GPIO_Init+0x20e>
 800285e:	2309      	movs	r3, #9
 8002860:	e02d      	b.n	80028be <HAL_GPIO_Init+0x26a>
 8002862:	230a      	movs	r3, #10
 8002864:	e02b      	b.n	80028be <HAL_GPIO_Init+0x26a>
 8002866:	2308      	movs	r3, #8
 8002868:	e029      	b.n	80028be <HAL_GPIO_Init+0x26a>
 800286a:	2307      	movs	r3, #7
 800286c:	e027      	b.n	80028be <HAL_GPIO_Init+0x26a>
 800286e:	2306      	movs	r3, #6
 8002870:	e025      	b.n	80028be <HAL_GPIO_Init+0x26a>
 8002872:	2305      	movs	r3, #5
 8002874:	e023      	b.n	80028be <HAL_GPIO_Init+0x26a>
 8002876:	2304      	movs	r3, #4
 8002878:	e021      	b.n	80028be <HAL_GPIO_Init+0x26a>
 800287a:	2303      	movs	r3, #3
 800287c:	e01f      	b.n	80028be <HAL_GPIO_Init+0x26a>
 800287e:	2302      	movs	r3, #2
 8002880:	e01d      	b.n	80028be <HAL_GPIO_Init+0x26a>
 8002882:	2301      	movs	r3, #1
 8002884:	e01b      	b.n	80028be <HAL_GPIO_Init+0x26a>
 8002886:	bf00      	nop
 8002888:	58000080 	.word	0x58000080
 800288c:	58024400 	.word	0x58024400
 8002890:	58000400 	.word	0x58000400
 8002894:	58020000 	.word	0x58020000
 8002898:	58020400 	.word	0x58020400
 800289c:	58020800 	.word	0x58020800
 80028a0:	58020c00 	.word	0x58020c00
 80028a4:	58021000 	.word	0x58021000
 80028a8:	58021400 	.word	0x58021400
 80028ac:	58021800 	.word	0x58021800
 80028b0:	58021c00 	.word	0x58021c00
 80028b4:	58022000 	.word	0x58022000
 80028b8:	58022400 	.word	0x58022400
 80028bc:	2300      	movs	r3, #0
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	f002 0203 	and.w	r2, r2, #3
 80028c4:	0092      	lsls	r2, r2, #2
 80028c6:	4093      	lsls	r3, r2
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ce:	4938      	ldr	r1, [pc, #224]	@ (80029b0 <HAL_GPIO_Init+0x35c>)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002902:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002930:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3301      	adds	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f ae63 	bne.w	8002668 <HAL_GPIO_Init+0x14>
  }
}
 80029a2:	bf00      	nop
 80029a4:	bf00      	nop
 80029a6:	3724      	adds	r7, #36	@ 0x24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	58000400 	.word	0x58000400

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029d0:	e003      	b.n	80029da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	041a      	lsls	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	619a      	str	r2, [r3, #24]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80029f0:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_PWREx_ConfigSupply+0x70>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d00a      	beq.n	8002a12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029fc:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <HAL_PWREx_ConfigSupply+0x70>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d001      	beq.n	8002a0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e01f      	b.n	8002a4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e01d      	b.n	8002a4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a12:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <HAL_PWREx_ConfigSupply+0x70>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f023 0207 	bic.w	r2, r3, #7
 8002a1a:	490f      	ldr	r1, [pc, #60]	@ (8002a58 <HAL_PWREx_ConfigSupply+0x70>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a22:	f7fe ff13 	bl	800184c <HAL_GetTick>
 8002a26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a28:	e009      	b.n	8002a3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a2a:	f7fe ff0f 	bl	800184c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a38:	d901      	bls.n	8002a3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e007      	b.n	8002a4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a3e:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <HAL_PWREx_ConfigSupply+0x70>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a4a:	d1ee      	bne.n	8002a2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	58024800 	.word	0x58024800

08002a5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	@ 0x30
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d102      	bne.n	8002a70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f000 bc48 	b.w	8003300 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8088 	beq.w	8002b8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a7e:	4b99      	ldr	r3, [pc, #612]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a88:	4b96      	ldr	r3, [pc, #600]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d007      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x48>
 8002a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a96:	2b18      	cmp	r3, #24
 8002a98:	d111      	bne.n	8002abe <HAL_RCC_OscConfig+0x62>
 8002a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d10c      	bne.n	8002abe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	4b8f      	ldr	r3, [pc, #572]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d06d      	beq.n	8002b8c <HAL_RCC_OscConfig+0x130>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d169      	bne.n	8002b8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f000 bc21 	b.w	8003300 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x7a>
 8002ac8:	4b86      	ldr	r3, [pc, #536]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a85      	ldr	r2, [pc, #532]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	e02e      	b.n	8002b34 <HAL_RCC_OscConfig+0xd8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x9c>
 8002ade:	4b81      	ldr	r3, [pc, #516]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a80      	ldr	r2, [pc, #512]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b7e      	ldr	r3, [pc, #504]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a7d      	ldr	r2, [pc, #500]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e01d      	b.n	8002b34 <HAL_RCC_OscConfig+0xd8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0xc0>
 8002b02:	4b78      	ldr	r3, [pc, #480]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a77      	ldr	r2, [pc, #476]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b75      	ldr	r3, [pc, #468]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a74      	ldr	r2, [pc, #464]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e00b      	b.n	8002b34 <HAL_RCC_OscConfig+0xd8>
 8002b1c:	4b71      	ldr	r3, [pc, #452]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a70      	ldr	r2, [pc, #448]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b6e      	ldr	r3, [pc, #440]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a6d      	ldr	r2, [pc, #436]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fe86 	bl	800184c <HAL_GetTick>
 8002b40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b44:	f7fe fe82 	bl	800184c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b64      	cmp	r3, #100	@ 0x64
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e3d4      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b56:	4b63      	ldr	r3, [pc, #396]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0xe8>
 8002b62:	e014      	b.n	8002b8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fe72 	bl	800184c <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7fe fe6e 	bl	800184c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e3c0      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b7e:	4b59      	ldr	r3, [pc, #356]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x110>
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80ca 	beq.w	8002d30 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9c:	4b51      	ldr	r3, [pc, #324]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ba4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x166>
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	2b18      	cmp	r3, #24
 8002bb6:	d156      	bne.n	8002c66 <HAL_RCC_OscConfig+0x20a>
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d151      	bne.n	8002c66 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc2:	4b48      	ldr	r3, [pc, #288]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_RCC_OscConfig+0x17e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e392      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bda:	4b42      	ldr	r3, [pc, #264]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0219 	bic.w	r2, r3, #25
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	493f      	ldr	r1, [pc, #252]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe fe2e 	bl	800184c <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7fe fe2a 	bl	800184c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e37c      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c06:	4b37      	ldr	r3, [pc, #220]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	f7fe fe27 	bl	8001864 <HAL_GetREVID>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d817      	bhi.n	8002c50 <HAL_RCC_OscConfig+0x1f4>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b40      	cmp	r3, #64	@ 0x40
 8002c26:	d108      	bne.n	8002c3a <HAL_RCC_OscConfig+0x1de>
 8002c28:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c30:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c36:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c38:	e07a      	b.n	8002d30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	031b      	lsls	r3, r3, #12
 8002c48:	4926      	ldr	r1, [pc, #152]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c4e:	e06f      	b.n	8002d30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c50:	4b24      	ldr	r3, [pc, #144]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	4921      	ldr	r1, [pc, #132]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c64:	e064      	b.n	8002d30 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d047      	beq.n	8002cfe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 0219 	bic.w	r2, r3, #25
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	491a      	ldr	r1, [pc, #104]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fde4 	bl	800184c <HAL_GetTick>
 8002c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c88:	f7fe fde0 	bl	800184c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e332      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca6:	f7fe fddd 	bl	8001864 <HAL_GetREVID>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d819      	bhi.n	8002ce8 <HAL_RCC_OscConfig+0x28c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b40      	cmp	r3, #64	@ 0x40
 8002cba:	d108      	bne.n	8002cce <HAL_RCC_OscConfig+0x272>
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002cc4:	4a07      	ldr	r2, [pc, #28]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002cc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cca:	6053      	str	r3, [r2, #4]
 8002ccc:	e030      	b.n	8002d30 <HAL_RCC_OscConfig+0x2d4>
 8002cce:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	031b      	lsls	r3, r3, #12
 8002cdc:	4901      	ldr	r1, [pc, #4]	@ (8002ce4 <HAL_RCC_OscConfig+0x288>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
 8002ce2:	e025      	b.n	8002d30 <HAL_RCC_OscConfig+0x2d4>
 8002ce4:	58024400 	.word	0x58024400
 8002ce8:	4b9a      	ldr	r3, [pc, #616]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	4997      	ldr	r1, [pc, #604]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]
 8002cfc:	e018      	b.n	8002d30 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfe:	4b95      	ldr	r3, [pc, #596]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a94      	ldr	r2, [pc, #592]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fd9f 	bl	800184c <HAL_GetTick>
 8002d0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d12:	f7fe fd9b 	bl	800184c <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e2ed      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d24:	4b8b      	ldr	r3, [pc, #556]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a9 	beq.w	8002e90 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d3e:	4b85      	ldr	r3, [pc, #532]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d48:	4b82      	ldr	r3, [pc, #520]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d007      	beq.n	8002d64 <HAL_RCC_OscConfig+0x308>
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b18      	cmp	r3, #24
 8002d58:	d13a      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x374>
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d135      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d64:	4b7b      	ldr	r3, [pc, #492]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_OscConfig+0x320>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	2b80      	cmp	r3, #128	@ 0x80
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e2c1      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d7c:	f7fe fd72 	bl	8001864 <HAL_GetREVID>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d817      	bhi.n	8002dba <HAL_RCC_OscConfig+0x35e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_OscConfig+0x348>
 8002d92:	4b70      	ldr	r3, [pc, #448]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002d9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002da0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002da2:	e075      	b.n	8002e90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002da4:	4b6b      	ldr	r3, [pc, #428]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	069b      	lsls	r3, r3, #26
 8002db2:	4968      	ldr	r1, [pc, #416]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002db8:	e06a      	b.n	8002e90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dba:	4b66      	ldr	r3, [pc, #408]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	061b      	lsls	r3, r3, #24
 8002dc8:	4962      	ldr	r1, [pc, #392]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dce:	e05f      	b.n	8002e90 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d042      	beq.n	8002e5e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a5d      	ldr	r2, [pc, #372]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fd32 	bl	800184c <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dec:	f7fe fd2e 	bl	800184c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e280      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dfe:	4b55      	ldr	r3, [pc, #340]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e0a:	f7fe fd2b 	bl	8001864 <HAL_GetREVID>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d817      	bhi.n	8002e48 <HAL_RCC_OscConfig+0x3ec>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d108      	bne.n	8002e32 <HAL_RCC_OscConfig+0x3d6>
 8002e20:	4b4c      	ldr	r3, [pc, #304]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e28:	4a4a      	ldr	r2, [pc, #296]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e2e:	6053      	str	r3, [r2, #4]
 8002e30:	e02e      	b.n	8002e90 <HAL_RCC_OscConfig+0x434>
 8002e32:	4b48      	ldr	r3, [pc, #288]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	069b      	lsls	r3, r3, #26
 8002e40:	4944      	ldr	r1, [pc, #272]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
 8002e46:	e023      	b.n	8002e90 <HAL_RCC_OscConfig+0x434>
 8002e48:	4b42      	ldr	r3, [pc, #264]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	061b      	lsls	r3, r3, #24
 8002e56:	493f      	ldr	r1, [pc, #252]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60cb      	str	r3, [r1, #12]
 8002e5c:	e018      	b.n	8002e90 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a3c      	ldr	r2, [pc, #240]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002e64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fcef 	bl	800184c <HAL_GetTick>
 8002e6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e72:	f7fe fceb 	bl	800184c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e23d      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e84:	4b33      	ldr	r3, [pc, #204]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d036      	beq.n	8002f0a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d019      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002ea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe fccc 	bl	800184c <HAL_GetTick>
 8002eb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7fe fcc8 	bl	800184c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e21a      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eca:	4b22      	ldr	r3, [pc, #136]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x45c>
 8002ed6:	e018      	b.n	8002f0a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002edc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe fcb2 	bl	800184c <HAL_GetTick>
 8002ee8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eec:	f7fe fcae 	bl	800184c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e200      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002efe:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d039      	beq.n	8002f8a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a0c      	ldr	r2, [pc, #48]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002f24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fc8f 	bl	800184c <HAL_GetTick>
 8002f2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f32:	f7fe fc8b 	bl	800184c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e1dd      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <HAL_RCC_OscConfig+0x4f8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <HAL_RCC_OscConfig+0x4d6>
 8002f50:	e01b      	b.n	8002f8a <HAL_RCC_OscConfig+0x52e>
 8002f52:	bf00      	nop
 8002f54:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f58:	4b9b      	ldr	r3, [pc, #620]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a9a      	ldr	r2, [pc, #616]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8002f5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f64:	f7fe fc72 	bl	800184c <HAL_GetTick>
 8002f68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f6c:	f7fe fc6e 	bl	800184c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1c0      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f7e:	4b92      	ldr	r3, [pc, #584]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8081 	beq.w	800309a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f98:	4b8c      	ldr	r3, [pc, #560]	@ (80031cc <HAL_RCC_OscConfig+0x770>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a8b      	ldr	r2, [pc, #556]	@ (80031cc <HAL_RCC_OscConfig+0x770>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fc52 	bl	800184c <HAL_GetTick>
 8002fa8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fac:	f7fe fc4e 	bl	800184c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	@ 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e1a0      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fbe:	4b83      	ldr	r3, [pc, #524]	@ (80031cc <HAL_RCC_OscConfig+0x770>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d106      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x584>
 8002fd2:	4b7d      	ldr	r3, [pc, #500]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd6:	4a7c      	ldr	r2, [pc, #496]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fde:	e02d      	b.n	800303c <HAL_RCC_OscConfig+0x5e0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCC_OscConfig+0x5a6>
 8002fe8:	4b77      	ldr	r3, [pc, #476]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fec:	4a76      	ldr	r2, [pc, #472]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff4:	4b74      	ldr	r3, [pc, #464]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff8:	4a73      	ldr	r2, [pc, #460]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8002ffa:	f023 0304 	bic.w	r3, r3, #4
 8002ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003000:	e01c      	b.n	800303c <HAL_RCC_OscConfig+0x5e0>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b05      	cmp	r3, #5
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c8>
 800300a:	4b6f      	ldr	r3, [pc, #444]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300e:	4a6e      	ldr	r2, [pc, #440]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003010:	f043 0304 	orr.w	r3, r3, #4
 8003014:	6713      	str	r3, [r2, #112]	@ 0x70
 8003016:	4b6c      	ldr	r3, [pc, #432]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	4a6b      	ldr	r2, [pc, #428]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6713      	str	r3, [r2, #112]	@ 0x70
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0x5e0>
 8003024:	4b68      	ldr	r3, [pc, #416]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003028:	4a67      	ldr	r2, [pc, #412]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003030:	4b65      	ldr	r3, [pc, #404]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003034:	4a64      	ldr	r2, [pc, #400]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003036:	f023 0304 	bic.w	r3, r3, #4
 800303a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d015      	beq.n	8003070 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe fc02 	bl	800184c <HAL_GetTick>
 8003048:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800304a:	e00a      	b.n	8003062 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fe fbfe 	bl	800184c <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e14e      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003062:	4b59      	ldr	r3, [pc, #356]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ee      	beq.n	800304c <HAL_RCC_OscConfig+0x5f0>
 800306e:	e014      	b.n	800309a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fe fbec 	bl	800184c <HAL_GetTick>
 8003074:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003076:	e00a      	b.n	800308e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003078:	f7fe fbe8 	bl	800184c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e138      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800308e:	4b4e      	ldr	r3, [pc, #312]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ee      	bne.n	8003078 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 812d 	beq.w	80032fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030a4:	4b48      	ldr	r3, [pc, #288]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030ac:	2b18      	cmp	r3, #24
 80030ae:	f000 80bd 	beq.w	800322c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	f040 809e 	bne.w	80031f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030bc:	4b42      	ldr	r3, [pc, #264]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a41      	ldr	r2, [pc, #260]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 80030c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe fbc0 	bl	800184c <HAL_GetTick>
 80030cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe fbbc 	bl	800184c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e10e      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030e2:	4b39      	ldr	r3, [pc, #228]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ee:	4b36      	ldr	r3, [pc, #216]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 80030f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030f2:	4b37      	ldr	r3, [pc, #220]	@ (80031d0 <HAL_RCC_OscConfig+0x774>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030fe:	0112      	lsls	r2, r2, #4
 8003100:	430a      	orrs	r2, r1
 8003102:	4931      	ldr	r1, [pc, #196]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003104:	4313      	orrs	r3, r2
 8003106:	628b      	str	r3, [r1, #40]	@ 0x28
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	3b01      	subs	r3, #1
 800310e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003116:	3b01      	subs	r3, #1
 8003118:	025b      	lsls	r3, r3, #9
 800311a:	b29b      	uxth	r3, r3
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003122:	3b01      	subs	r3, #1
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003130:	3b01      	subs	r3, #1
 8003132:	061b      	lsls	r3, r3, #24
 8003134:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003138:	4923      	ldr	r1, [pc, #140]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 800313a:	4313      	orrs	r3, r2
 800313c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800313e:	4b22      	ldr	r3, [pc, #136]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	4a21      	ldr	r2, [pc, #132]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800314a:	4b1f      	ldr	r3, [pc, #124]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 800314c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800314e:	4b21      	ldr	r3, [pc, #132]	@ (80031d4 <HAL_RCC_OscConfig+0x778>)
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003156:	00d2      	lsls	r2, r2, #3
 8003158:	491b      	ldr	r1, [pc, #108]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 800315a:	4313      	orrs	r3, r2
 800315c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800315e:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003162:	f023 020c 	bic.w	r2, r3, #12
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	4917      	ldr	r1, [pc, #92]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 800316c:	4313      	orrs	r3, r2
 800316e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003170:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003174:	f023 0202 	bic.w	r2, r3, #2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317c:	4912      	ldr	r1, [pc, #72]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003182:	4b11      	ldr	r3, [pc, #68]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	4a10      	ldr	r2, [pc, #64]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800318e:	4b0e      	ldr	r3, [pc, #56]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	4a0d      	ldr	r2, [pc, #52]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 8003194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003198:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800319a:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	4a0a      	ldr	r2, [pc, #40]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80031a6:	4b08      	ldr	r3, [pc, #32]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	4a07      	ldr	r2, [pc, #28]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b2:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a04      	ldr	r2, [pc, #16]	@ (80031c8 <HAL_RCC_OscConfig+0x76c>)
 80031b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fe fb45 	bl	800184c <HAL_GetTick>
 80031c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031c4:	e011      	b.n	80031ea <HAL_RCC_OscConfig+0x78e>
 80031c6:	bf00      	nop
 80031c8:	58024400 	.word	0x58024400
 80031cc:	58024800 	.word	0x58024800
 80031d0:	fffffc0c 	.word	0xfffffc0c
 80031d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fe fb38 	bl	800184c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e08a      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031ea:	4b47      	ldr	r3, [pc, #284]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x77c>
 80031f6:	e082      	b.n	80032fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f8:	4b43      	ldr	r3, [pc, #268]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a42      	ldr	r2, [pc, #264]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 80031fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fb22 	bl	800184c <HAL_GetTick>
 8003208:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe fb1e 	bl	800184c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e070      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800321e:	4b3a      	ldr	r3, [pc, #232]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x7b0>
 800322a:	e068      	b.n	80032fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800322c:	4b36      	ldr	r3, [pc, #216]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 800322e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003230:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003232:	4b35      	ldr	r3, [pc, #212]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	2b01      	cmp	r3, #1
 800323e:	d031      	beq.n	80032a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 0203 	and.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d12a      	bne.n	80032a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d122      	bne.n	80032a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003268:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d11a      	bne.n	80032a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	0a5b      	lsrs	r3, r3, #9
 8003272:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d111      	bne.n	80032a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d108      	bne.n	80032a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	0e1b      	lsrs	r3, r3, #24
 8003296:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e02b      	b.n	8003300 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80032a8:	4b17      	ldr	r3, [pc, #92]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 80032aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ac:	08db      	lsrs	r3, r3, #3
 80032ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d01f      	beq.n	80032fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80032be:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 80032c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c2:	4a11      	ldr	r2, [pc, #68]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032ca:	f7fe fabf 	bl	800184c <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80032d0:	bf00      	nop
 80032d2:	f7fe fabb 	bl	800184c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032da:	4293      	cmp	r3, r2
 80032dc:	d0f9      	beq.n	80032d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032de:	4b0a      	ldr	r3, [pc, #40]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 80032e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e2:	4b0a      	ldr	r3, [pc, #40]	@ (800330c <HAL_RCC_OscConfig+0x8b0>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032ea:	00d2      	lsls	r2, r2, #3
 80032ec:	4906      	ldr	r1, [pc, #24]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032f2:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	4a04      	ldr	r2, [pc, #16]	@ (8003308 <HAL_RCC_OscConfig+0x8ac>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3730      	adds	r7, #48	@ 0x30
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	58024400 	.word	0x58024400
 800330c:	ffff0007 	.word	0xffff0007

08003310 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e19c      	b.n	800365e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003324:	4b8a      	ldr	r3, [pc, #552]	@ (8003550 <HAL_RCC_ClockConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d910      	bls.n	8003354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b87      	ldr	r3, [pc, #540]	@ (8003550 <HAL_RCC_ClockConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 020f 	bic.w	r2, r3, #15
 800333a:	4985      	ldr	r1, [pc, #532]	@ (8003550 <HAL_RCC_ClockConfig+0x240>)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b83      	ldr	r3, [pc, #524]	@ (8003550 <HAL_RCC_ClockConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e184      	b.n	800365e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d010      	beq.n	8003382 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	4b7b      	ldr	r3, [pc, #492]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800336c:	429a      	cmp	r2, r3
 800336e:	d908      	bls.n	8003382 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003370:	4b78      	ldr	r3, [pc, #480]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	4975      	ldr	r1, [pc, #468]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 800337e:	4313      	orrs	r3, r2
 8003380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d010      	beq.n	80033b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	4b70      	ldr	r3, [pc, #448]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800339a:	429a      	cmp	r2, r3
 800339c:	d908      	bls.n	80033b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800339e:	4b6d      	ldr	r3, [pc, #436]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	496a      	ldr	r1, [pc, #424]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699a      	ldr	r2, [r3, #24]
 80033c0:	4b64      	ldr	r3, [pc, #400]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d908      	bls.n	80033de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033cc:	4b61      	ldr	r3, [pc, #388]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	495e      	ldr	r1, [pc, #376]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d010      	beq.n	800340c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	4b59      	ldr	r3, [pc, #356]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d908      	bls.n	800340c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033fa:	4b56      	ldr	r3, [pc, #344]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	4953      	ldr	r1, [pc, #332]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 8003408:	4313      	orrs	r3, r2
 800340a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d010      	beq.n	800343a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	4b4d      	ldr	r3, [pc, #308]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	429a      	cmp	r2, r3
 8003426:	d908      	bls.n	800343a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b4a      	ldr	r3, [pc, #296]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f023 020f 	bic.w	r2, r3, #15
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4947      	ldr	r1, [pc, #284]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 8003436:	4313      	orrs	r3, r2
 8003438:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d055      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003446:	4b43      	ldr	r3, [pc, #268]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	4940      	ldr	r1, [pc, #256]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 8003454:	4313      	orrs	r3, r2
 8003456:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d107      	bne.n	8003470 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003460:	4b3c      	ldr	r3, [pc, #240]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d121      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0f6      	b.n	800365e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d107      	bne.n	8003488 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003478:	4b36      	ldr	r3, [pc, #216]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d115      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0ea      	b.n	800365e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d107      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003490:	4b30      	ldr	r3, [pc, #192]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0de      	b.n	800365e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0d6      	b.n	800365e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034b0:	4b28      	ldr	r3, [pc, #160]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f023 0207 	bic.w	r2, r3, #7
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4925      	ldr	r1, [pc, #148]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c2:	f7fe f9c3 	bl	800184c <HAL_GetTick>
 80034c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ca:	f7fe f9bf 	bl	800184c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e0be      	b.n	800365e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d1eb      	bne.n	80034ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	4b14      	ldr	r3, [pc, #80]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	429a      	cmp	r2, r3
 800350c:	d208      	bcs.n	8003520 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350e:	4b11      	ldr	r3, [pc, #68]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f023 020f 	bic.w	r2, r3, #15
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	490e      	ldr	r1, [pc, #56]	@ (8003554 <HAL_RCC_ClockConfig+0x244>)
 800351c:	4313      	orrs	r3, r2
 800351e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003520:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <HAL_RCC_ClockConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d214      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <HAL_RCC_ClockConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 020f 	bic.w	r2, r3, #15
 8003536:	4906      	ldr	r1, [pc, #24]	@ (8003550 <HAL_RCC_ClockConfig+0x240>)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b04      	ldr	r3, [pc, #16]	@ (8003550 <HAL_RCC_ClockConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e086      	b.n	800365e <HAL_RCC_ClockConfig+0x34e>
 8003550:	52002000 	.word	0x52002000
 8003554:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d010      	beq.n	8003586 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	4b3f      	ldr	r3, [pc, #252]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003570:	429a      	cmp	r2, r3
 8003572:	d208      	bcs.n	8003586 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003574:	4b3c      	ldr	r3, [pc, #240]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	4939      	ldr	r1, [pc, #228]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 8003582:	4313      	orrs	r3, r2
 8003584:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d010      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	4b34      	ldr	r3, [pc, #208]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800359e:	429a      	cmp	r2, r3
 80035a0:	d208      	bcs.n	80035b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035a2:	4b31      	ldr	r3, [pc, #196]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	492e      	ldr	r1, [pc, #184]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d010      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	4b28      	ldr	r3, [pc, #160]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d208      	bcs.n	80035e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035d0:	4b25      	ldr	r3, [pc, #148]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4922      	ldr	r1, [pc, #136]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d010      	beq.n	8003610 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d208      	bcs.n	8003610 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4917      	ldr	r1, [pc, #92]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 800360c:	4313      	orrs	r3, r2
 800360e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003610:	f000 f834 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b14      	ldr	r3, [pc, #80]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	4912      	ldr	r1, [pc, #72]	@ (800366c <HAL_RCC_ClockConfig+0x35c>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
 800362c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800362e:	4b0e      	ldr	r3, [pc, #56]	@ (8003668 <HAL_RCC_ClockConfig+0x358>)
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	4a0d      	ldr	r2, [pc, #52]	@ (800366c <HAL_RCC_ClockConfig+0x35c>)
 8003638:	5cd3      	ldrb	r3, [r2, r3]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	4a0a      	ldr	r2, [pc, #40]	@ (8003670 <HAL_RCC_ClockConfig+0x360>)
 8003646:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003648:	4a0a      	ldr	r2, [pc, #40]	@ (8003674 <HAL_RCC_ClockConfig+0x364>)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800364e:	4b0a      	ldr	r3, [pc, #40]	@ (8003678 <HAL_RCC_ClockConfig+0x368>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe f8b0 	bl	80017b8 <HAL_InitTick>
 8003658:	4603      	mov	r3, r0
 800365a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800365c:	7bfb      	ldrb	r3, [r7, #15]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	58024400 	.word	0x58024400
 800366c:	080080ec 	.word	0x080080ec
 8003670:	24000044 	.word	0x24000044
 8003674:	24000040 	.word	0x24000040
 8003678:	24000048 	.word	0x24000048

0800367c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	b089      	sub	sp, #36	@ 0x24
 8003680:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003682:	4bb3      	ldr	r3, [pc, #716]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800368a:	2b18      	cmp	r3, #24
 800368c:	f200 8155 	bhi.w	800393a <HAL_RCC_GetSysClockFreq+0x2be>
 8003690:	a201      	add	r2, pc, #4	@ (adr r2, 8003698 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003696:	bf00      	nop
 8003698:	080036fd 	.word	0x080036fd
 800369c:	0800393b 	.word	0x0800393b
 80036a0:	0800393b 	.word	0x0800393b
 80036a4:	0800393b 	.word	0x0800393b
 80036a8:	0800393b 	.word	0x0800393b
 80036ac:	0800393b 	.word	0x0800393b
 80036b0:	0800393b 	.word	0x0800393b
 80036b4:	0800393b 	.word	0x0800393b
 80036b8:	08003723 	.word	0x08003723
 80036bc:	0800393b 	.word	0x0800393b
 80036c0:	0800393b 	.word	0x0800393b
 80036c4:	0800393b 	.word	0x0800393b
 80036c8:	0800393b 	.word	0x0800393b
 80036cc:	0800393b 	.word	0x0800393b
 80036d0:	0800393b 	.word	0x0800393b
 80036d4:	0800393b 	.word	0x0800393b
 80036d8:	08003729 	.word	0x08003729
 80036dc:	0800393b 	.word	0x0800393b
 80036e0:	0800393b 	.word	0x0800393b
 80036e4:	0800393b 	.word	0x0800393b
 80036e8:	0800393b 	.word	0x0800393b
 80036ec:	0800393b 	.word	0x0800393b
 80036f0:	0800393b 	.word	0x0800393b
 80036f4:	0800393b 	.word	0x0800393b
 80036f8:	0800372f 	.word	0x0800372f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036fc:	4b94      	ldr	r3, [pc, #592]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003708:	4b91      	ldr	r3, [pc, #580]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	4a90      	ldr	r2, [pc, #576]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
 8003718:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800371a:	e111      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800371c:	4b8d      	ldr	r3, [pc, #564]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800371e:	61bb      	str	r3, [r7, #24]
      break;
 8003720:	e10e      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003722:	4b8d      	ldr	r3, [pc, #564]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003724:	61bb      	str	r3, [r7, #24]
      break;
 8003726:	e10b      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003728:	4b8c      	ldr	r3, [pc, #560]	@ (800395c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800372a:	61bb      	str	r3, [r7, #24]
      break;
 800372c:	e108      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800372e:	4b88      	ldr	r3, [pc, #544]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003738:	4b85      	ldr	r3, [pc, #532]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003742:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003744:	4b82      	ldr	r3, [pc, #520]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800374e:	4b80      	ldr	r3, [pc, #512]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003752:	08db      	lsrs	r3, r3, #3
 8003754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003766:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80e1 	beq.w	8003934 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b02      	cmp	r3, #2
 8003776:	f000 8083 	beq.w	8003880 <HAL_RCC_GetSysClockFreq+0x204>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b02      	cmp	r3, #2
 800377e:	f200 80a1 	bhi.w	80038c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0x114>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d056      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x1c0>
 800378e:	e099      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003790:	4b6f      	ldr	r3, [pc, #444]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d02d      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800379c:	4b6c      	ldr	r3, [pc, #432]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	08db      	lsrs	r3, r3, #3
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	4a6b      	ldr	r2, [pc, #428]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	ee07 3a90 	vmov	s15, r3
 80037b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037c6:	4b62      	ldr	r3, [pc, #392]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003960 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037f6:	e087      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003802:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003964 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380a:	4b51      	ldr	r3, [pc, #324]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381a:	ed97 6a02 	vldr	s12, [r7, #8]
 800381e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003960 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800382e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800383a:	e065      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003846:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003968 <HAL_RCC_GetSysClockFreq+0x2ec>
 800384a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800384e:	4b40      	ldr	r3, [pc, #256]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800385e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003862:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003960 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800386e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800387e:	e043      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800396c <HAL_RCC_GetSysClockFreq+0x2f0>
 800388e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003892:	4b2f      	ldr	r3, [pc, #188]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003960 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038c2:	e021      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003968 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003960 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003902:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003906:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003908:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	0a5b      	lsrs	r3, r3, #9
 800390e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003912:	3301      	adds	r3, #1
 8003914:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	ee07 3a90 	vmov	s15, r3
 800391c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003920:	edd7 6a07 	vldr	s13, [r7, #28]
 8003924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800392c:	ee17 3a90 	vmov	r3, s15
 8003930:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003932:	e005      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
      break;
 8003938:	e002      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800393a:	4b07      	ldr	r3, [pc, #28]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800393c:	61bb      	str	r3, [r7, #24]
      break;
 800393e:	bf00      	nop
  }

  return sysclockfreq;
 8003940:	69bb      	ldr	r3, [r7, #24]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3724      	adds	r7, #36	@ 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	58024400 	.word	0x58024400
 8003954:	03d09000 	.word	0x03d09000
 8003958:	003d0900 	.word	0x003d0900
 800395c:	017d7840 	.word	0x017d7840
 8003960:	46000000 	.word	0x46000000
 8003964:	4c742400 	.word	0x4c742400
 8003968:	4a742400 	.word	0x4a742400
 800396c:	4bbebc20 	.word	0x4bbebc20

08003970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003976:	f7ff fe81 	bl	800367c <HAL_RCC_GetSysClockFreq>
 800397a:	4602      	mov	r2, r0
 800397c:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	0a1b      	lsrs	r3, r3, #8
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	490f      	ldr	r1, [pc, #60]	@ (80039c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003988:	5ccb      	ldrb	r3, [r1, r3]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	fa22 f303 	lsr.w	r3, r2, r3
 8003992:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003994:	4b0a      	ldr	r3, [pc, #40]	@ (80039c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	4a09      	ldr	r2, [pc, #36]	@ (80039c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800399e:	5cd3      	ldrb	r3, [r2, r3]
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	4a07      	ldr	r2, [pc, #28]	@ (80039c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80039ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039ae:	4a07      	ldr	r2, [pc, #28]	@ (80039cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80039b4:	4b04      	ldr	r3, [pc, #16]	@ (80039c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80039b6:	681b      	ldr	r3, [r3, #0]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	58024400 	.word	0x58024400
 80039c4:	080080ec 	.word	0x080080ec
 80039c8:	24000044 	.word	0x24000044
 80039cc:	24000040 	.word	0x24000040

080039d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80039d4:	f7ff ffcc 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b06      	ldr	r3, [pc, #24]	@ (80039f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4904      	ldr	r1, [pc, #16]	@ (80039f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	58024400 	.word	0x58024400
 80039f8:	080080ec 	.word	0x080080ec

080039fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a00:	f7ff ffb6 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4904      	ldr	r1, [pc, #16]	@ (8003a24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	58024400 	.word	0x58024400
 8003a24:	080080ec 	.word	0x080080ec

08003a28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a2c:	b0ca      	sub	sp, #296	@ 0x128
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a34:	2300      	movs	r3, #0
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003a4c:	2500      	movs	r5, #0
 8003a4e:	ea54 0305 	orrs.w	r3, r4, r5
 8003a52:	d049      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a5e:	d02f      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a64:	d828      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a6a:	d01a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a70:	d822      	bhi.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a7a:	d007      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a7c:	e01c      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7e:	4bb8      	ldr	r3, [pc, #736]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a82:	4ab7      	ldr	r2, [pc, #732]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a8a:	e01a      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a90:	3308      	adds	r3, #8
 8003a92:	2102      	movs	r1, #2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fc8f 	bl	80053b8 <RCCEx_PLL2_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003aa0:	e00f      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa6:	3328      	adds	r3, #40	@ 0x28
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 fd36 	bl	800551c <RCCEx_PLL3_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ab6:	e004      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003abe:	e000      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003aca:	4ba5      	ldr	r3, [pc, #660]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ace:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad8:	4aa1      	ldr	r2, [pc, #644]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ade:	e003      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003af4:	f04f 0900 	mov.w	r9, #0
 8003af8:	ea58 0309 	orrs.w	r3, r8, r9
 8003afc:	d047      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d82a      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b08:	a201      	add	r2, pc, #4	@ (adr r2, 8003b10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0e:	bf00      	nop
 8003b10:	08003b25 	.word	0x08003b25
 8003b14:	08003b33 	.word	0x08003b33
 8003b18:	08003b49 	.word	0x08003b49
 8003b1c:	08003b67 	.word	0x08003b67
 8003b20:	08003b67 	.word	0x08003b67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b24:	4b8e      	ldr	r3, [pc, #568]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b28:	4a8d      	ldr	r2, [pc, #564]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b30:	e01a      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b36:	3308      	adds	r3, #8
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 fc3c 	bl	80053b8 <RCCEx_PLL2_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b46:	e00f      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4c:	3328      	adds	r3, #40	@ 0x28
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f001 fce3 	bl	800551c <RCCEx_PLL3_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b5c:	e004      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b64:	e000      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b70:	4b7b      	ldr	r3, [pc, #492]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b74:	f023 0107 	bic.w	r1, r3, #7
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7e:	4a78      	ldr	r2, [pc, #480]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b84:	e003      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b96:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003b9a:	f04f 0b00 	mov.w	fp, #0
 8003b9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ba2:	d04c      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bae:	d030      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb4:	d829      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bb8:	d02d      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003bba:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bbc:	d825      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bbe:	2b80      	cmp	r3, #128	@ 0x80
 8003bc0:	d018      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003bc2:	2b80      	cmp	r3, #128	@ 0x80
 8003bc4:	d821      	bhi.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003bca:	2b40      	cmp	r3, #64	@ 0x40
 8003bcc:	d007      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003bce:	e01c      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd0:	4b63      	ldr	r3, [pc, #396]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	4a62      	ldr	r2, [pc, #392]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bdc:	e01c      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	3308      	adds	r3, #8
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 fbe6 	bl	80053b8 <RCCEx_PLL2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bf2:	e011      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	3328      	adds	r3, #40	@ 0x28
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f001 fc8d 	bl	800551c <RCCEx_PLL3_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c08:	e006      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c10:	e002      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c20:	4b4f      	ldr	r3, [pc, #316]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c24:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2e:	4a4c      	ldr	r2, [pc, #304]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c34:	e003      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003c4a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003c54:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	d053      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c6a:	d035      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003c6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c70:	d82e      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c72:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c76:	d031      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c78:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c7c:	d828      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c82:	d01a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c88:	d822      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003c8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c92:	d007      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003c94:	e01c      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c96:	4b32      	ldr	r3, [pc, #200]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	4a31      	ldr	r2, [pc, #196]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ca2:	e01c      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	3308      	adds	r3, #8
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f001 fb83 	bl	80053b8 <RCCEx_PLL2_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003cb8:	e011      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	3328      	adds	r3, #40	@ 0x28
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 fc2a 	bl	800551c <RCCEx_PLL3_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cce:	e006      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cfc:	e003      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d12:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d16:	2300      	movs	r3, #0
 8003d18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003d20:	460b      	mov	r3, r1
 8003d22:	4313      	orrs	r3, r2
 8003d24:	d056      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d32:	d038      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003d34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d38:	d831      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d3e:	d034      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003d40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d44:	d82b      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d4a:	d01d      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d50:	d825      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003d56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d5c:	e01f      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d5e:	bf00      	nop
 8003d60:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d64:	4ba2      	ldr	r3, [pc, #648]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d68:	4aa1      	ldr	r2, [pc, #644]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d70:	e01c      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d76:	3308      	adds	r3, #8
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 fb1c 	bl	80053b8 <RCCEx_PLL2_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d86:	e011      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8c:	3328      	adds	r3, #40	@ 0x28
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 fbc3 	bl	800551c <RCCEx_PLL3_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e006      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003da4:	e002      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003da6:	bf00      	nop
 8003da8:	e000      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10b      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003db4:	4b8e      	ldr	r3, [pc, #568]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003dc4:	4a8a      	ldr	r2, [pc, #552]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dca:	e003      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003de0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003dea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003dee:	460b      	mov	r3, r1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	d03a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfa:	2b30      	cmp	r3, #48	@ 0x30
 8003dfc:	d01f      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003dfe:	2b30      	cmp	r3, #48	@ 0x30
 8003e00:	d819      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d00c      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e06:	2b20      	cmp	r3, #32
 8003e08:	d815      	bhi.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d019      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d111      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e12:	4b77      	ldr	r3, [pc, #476]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	4a76      	ldr	r2, [pc, #472]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e1e:	e011      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e24:	3308      	adds	r3, #8
 8003e26:	2102      	movs	r1, #2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 fac5 	bl	80053b8 <RCCEx_PLL2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e34:	e006      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e3c:	e002      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e4c:	4b68      	ldr	r3, [pc, #416]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e50:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5a:	4a65      	ldr	r2, [pc, #404]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e60:	e003      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003e76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e80:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	d051      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e94:	d035      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003e96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e9a:	d82e      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ea0:	d031      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ea2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ea6:	d828      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eac:	d01a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eb2:	d822      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ebc:	d007      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003ebe:	e01c      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ecc:	e01c      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f001 fa6e 	bl	80053b8 <RCCEx_PLL2_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ee2:	e011      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee8:	3328      	adds	r3, #40	@ 0x28
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 fb15 	bl	800551c <RCCEx_PLL3_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ef8:	e006      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f00:	e002      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f10:	4b37      	ldr	r3, [pc, #220]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f14:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f1e:	4a34      	ldr	r2, [pc, #208]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f24:	e003      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003f44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	d056      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f58:	d033      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003f5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f5e:	d82c      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f64:	d02f      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003f66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f6a:	d826      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f70:	d02b      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003f72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f76:	d820      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f7c:	d012      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f82:	d81a      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d022      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f8c:	d115      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f92:	3308      	adds	r3, #8
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 fa0e 	bl	80053b8 <RCCEx_PLL2_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fa2:	e015      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa8:	3328      	adds	r3, #40	@ 0x28
 8003faa:	2101      	movs	r1, #1
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fab5 	bl	800551c <RCCEx_PLL3_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fc0:	e006      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fc2:	bf00      	nop
 8003fc4:	e004      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fc6:	bf00      	nop
 8003fc8:	e002      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fca:	bf00      	nop
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003fd8:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fdc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fe6:	4a02      	ldr	r2, [pc, #8]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fec:	e006      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004012:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004016:	460b      	mov	r3, r1
 8004018:	4313      	orrs	r3, r2
 800401a:	d055      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004020:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004028:	d033      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800402a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800402e:	d82c      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004034:	d02f      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403a:	d826      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800403c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004040:	d02b      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004042:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004046:	d820      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800404c:	d012      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800404e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004052:	d81a      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d022      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800405c:	d115      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	3308      	adds	r3, #8
 8004064:	2101      	movs	r1, #1
 8004066:	4618      	mov	r0, r3
 8004068:	f001 f9a6 	bl	80053b8 <RCCEx_PLL2_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004072:	e015      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004078:	3328      	adds	r3, #40	@ 0x28
 800407a:	2101      	movs	r1, #1
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fa4d 	bl	800551c <RCCEx_PLL3_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004088:	e00a      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004092:	bf00      	nop
 8004094:	e004      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004096:	bf00      	nop
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800409e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040a8:	4ba3      	ldr	r3, [pc, #652]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040b8:	4a9f      	ldr	r2, [pc, #636]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ba:	430b      	orrs	r3, r1
 80040bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80040be:	e003      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80040d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80040de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040e2:	460b      	mov	r3, r1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	d037      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f2:	d00e      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80040f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f8:	d816      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d018      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80040fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004102:	d111      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004104:	4b8c      	ldr	r3, [pc, #560]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	4a8b      	ldr	r2, [pc, #556]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800410e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004110:	e00f      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	3308      	adds	r3, #8
 8004118:	2101      	movs	r1, #1
 800411a:	4618      	mov	r0, r3
 800411c:	f001 f94c 	bl	80053b8 <RCCEx_PLL2_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004126:	e004      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800413a:	4b7f      	ldr	r3, [pc, #508]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004148:	4a7b      	ldr	r2, [pc, #492]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800414a:	430b      	orrs	r3, r1
 800414c:	6513      	str	r3, [r2, #80]	@ 0x50
 800414e:	e003      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004168:	2300      	movs	r3, #0
 800416a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800416e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004172:	460b      	mov	r3, r1
 8004174:	4313      	orrs	r3, r2
 8004176:	d039      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417e:	2b03      	cmp	r3, #3
 8004180:	d81c      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004182:	a201      	add	r2, pc, #4	@ (adr r2, 8004188 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004188:	080041c5 	.word	0x080041c5
 800418c:	08004199 	.word	0x08004199
 8004190:	080041a7 	.word	0x080041a7
 8004194:	080041c5 	.word	0x080041c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004198:	4b67      	ldr	r3, [pc, #412]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	4a66      	ldr	r2, [pc, #408]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800419e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041a4:	e00f      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	3308      	adds	r3, #8
 80041ac:	2102      	movs	r1, #2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 f902 	bl	80053b8 <RCCEx_PLL2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041ba:	e004      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041c2:	e000      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80041c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d2:	f023 0103 	bic.w	r1, r3, #3
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041dc:	4a56      	ldr	r2, [pc, #344]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041de:	430b      	orrs	r3, r1
 80041e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041e2:	e003      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80041f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041fc:	2300      	movs	r3, #0
 80041fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004202:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	f000 809f 	beq.w	800434c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800420e:	4b4b      	ldr	r3, [pc, #300]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a4a      	ldr	r2, [pc, #296]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004218:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800421a:	f7fd fb17 	bl	800184c <HAL_GetTick>
 800421e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004222:	e00b      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004224:	f7fd fb12 	bl	800184c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b64      	cmp	r3, #100	@ 0x64
 8004232:	d903      	bls.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800423a:	e005      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800423c:	4b3f      	ldr	r3, [pc, #252]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ed      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424c:	2b00      	cmp	r3, #0
 800424e:	d179      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004250:	4b39      	ldr	r3, [pc, #228]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004252:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004258:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800425c:	4053      	eors	r3, r2
 800425e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004262:	2b00      	cmp	r3, #0
 8004264:	d015      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004266:	4b34      	ldr	r3, [pc, #208]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800426e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004272:	4b31      	ldr	r3, [pc, #196]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004276:	4a30      	ldr	r2, [pc, #192]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800427c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800427e:	4b2e      	ldr	r3, [pc, #184]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004282:	4a2d      	ldr	r2, [pc, #180]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004288:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800428a:	4a2b      	ldr	r2, [pc, #172]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800428c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004290:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004296:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800429a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800429e:	d118      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fd fad4 	bl	800184c <HAL_GetTick>
 80042a4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a8:	e00d      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fd facf 	bl	800184c <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80042b4:	1ad2      	subs	r2, r2, r3
 80042b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d903      	bls.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80042c4:	e005      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0eb      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d129      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ea:	d10e      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80042ec:	4b12      	ldr	r3, [pc, #72]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042fc:	091a      	lsrs	r2, r3, #4
 80042fe:	4b10      	ldr	r3, [pc, #64]	@ (8004340 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004300:	4013      	ands	r3, r2
 8004302:	4a0d      	ldr	r2, [pc, #52]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004304:	430b      	orrs	r3, r1
 8004306:	6113      	str	r3, [r2, #16]
 8004308:	e005      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800430a:	4b0b      	ldr	r3, [pc, #44]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	4a0a      	ldr	r2, [pc, #40]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004310:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004314:	6113      	str	r3, [r2, #16]
 8004316:	4b08      	ldr	r3, [pc, #32]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004318:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004326:	4a04      	ldr	r2, [pc, #16]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004328:	430b      	orrs	r3, r1
 800432a:	6713      	str	r3, [r2, #112]	@ 0x70
 800432c:	e00e      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800432e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004336:	e009      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004338:	58024400 	.word	0x58024400
 800433c:	58024800 	.word	0x58024800
 8004340:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f002 0301 	and.w	r3, r2, #1
 8004358:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800435c:	2300      	movs	r3, #0
 800435e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004362:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004366:	460b      	mov	r3, r1
 8004368:	4313      	orrs	r3, r2
 800436a:	f000 8089 	beq.w	8004480 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004374:	2b28      	cmp	r3, #40	@ 0x28
 8004376:	d86b      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004378:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	08004459 	.word	0x08004459
 8004384:	08004451 	.word	0x08004451
 8004388:	08004451 	.word	0x08004451
 800438c:	08004451 	.word	0x08004451
 8004390:	08004451 	.word	0x08004451
 8004394:	08004451 	.word	0x08004451
 8004398:	08004451 	.word	0x08004451
 800439c:	08004451 	.word	0x08004451
 80043a0:	08004425 	.word	0x08004425
 80043a4:	08004451 	.word	0x08004451
 80043a8:	08004451 	.word	0x08004451
 80043ac:	08004451 	.word	0x08004451
 80043b0:	08004451 	.word	0x08004451
 80043b4:	08004451 	.word	0x08004451
 80043b8:	08004451 	.word	0x08004451
 80043bc:	08004451 	.word	0x08004451
 80043c0:	0800443b 	.word	0x0800443b
 80043c4:	08004451 	.word	0x08004451
 80043c8:	08004451 	.word	0x08004451
 80043cc:	08004451 	.word	0x08004451
 80043d0:	08004451 	.word	0x08004451
 80043d4:	08004451 	.word	0x08004451
 80043d8:	08004451 	.word	0x08004451
 80043dc:	08004451 	.word	0x08004451
 80043e0:	08004459 	.word	0x08004459
 80043e4:	08004451 	.word	0x08004451
 80043e8:	08004451 	.word	0x08004451
 80043ec:	08004451 	.word	0x08004451
 80043f0:	08004451 	.word	0x08004451
 80043f4:	08004451 	.word	0x08004451
 80043f8:	08004451 	.word	0x08004451
 80043fc:	08004451 	.word	0x08004451
 8004400:	08004459 	.word	0x08004459
 8004404:	08004451 	.word	0x08004451
 8004408:	08004451 	.word	0x08004451
 800440c:	08004451 	.word	0x08004451
 8004410:	08004451 	.word	0x08004451
 8004414:	08004451 	.word	0x08004451
 8004418:	08004451 	.word	0x08004451
 800441c:	08004451 	.word	0x08004451
 8004420:	08004459 	.word	0x08004459
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	3308      	adds	r3, #8
 800442a:	2101      	movs	r1, #1
 800442c:	4618      	mov	r0, r3
 800442e:	f000 ffc3 	bl	80053b8 <RCCEx_PLL2_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004438:	e00f      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	3328      	adds	r3, #40	@ 0x28
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f001 f86a 	bl	800551c <RCCEx_PLL3_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800444e:	e004      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004462:	4bbf      	ldr	r3, [pc, #764]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004466:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004470:	4abb      	ldr	r2, [pc, #748]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004472:	430b      	orrs	r3, r1
 8004474:	6553      	str	r3, [r2, #84]	@ 0x54
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800447c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f002 0302 	and.w	r3, r2, #2
 800448c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004496:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d041      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044a6:	2b05      	cmp	r3, #5
 80044a8:	d824      	bhi.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80044aa:	a201      	add	r2, pc, #4	@ (adr r2, 80044b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044fd 	.word	0x080044fd
 80044b4:	080044c9 	.word	0x080044c9
 80044b8:	080044df 	.word	0x080044df
 80044bc:	080044fd 	.word	0x080044fd
 80044c0:	080044fd 	.word	0x080044fd
 80044c4:	080044fd 	.word	0x080044fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044cc:	3308      	adds	r3, #8
 80044ce:	2101      	movs	r1, #1
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 ff71 	bl	80053b8 <RCCEx_PLL2_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044dc:	e00f      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	3328      	adds	r3, #40	@ 0x28
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 f818 	bl	800551c <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044f2:	e004      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80044fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004506:	4b96      	ldr	r3, [pc, #600]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450a:	f023 0107 	bic.w	r1, r3, #7
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004512:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004514:	4a92      	ldr	r2, [pc, #584]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004516:	430b      	orrs	r3, r1
 8004518:	6553      	str	r3, [r2, #84]	@ 0x54
 800451a:	e003      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f002 0304 	and.w	r3, r2, #4
 8004530:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004534:	2300      	movs	r3, #0
 8004536:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800453a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800453e:	460b      	mov	r3, r1
 8004540:	4313      	orrs	r3, r2
 8004542:	d044      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800454c:	2b05      	cmp	r3, #5
 800454e:	d825      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004550:	a201      	add	r2, pc, #4	@ (adr r2, 8004558 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	080045a5 	.word	0x080045a5
 800455c:	08004571 	.word	0x08004571
 8004560:	08004587 	.word	0x08004587
 8004564:	080045a5 	.word	0x080045a5
 8004568:	080045a5 	.word	0x080045a5
 800456c:	080045a5 	.word	0x080045a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004574:	3308      	adds	r3, #8
 8004576:	2101      	movs	r1, #1
 8004578:	4618      	mov	r0, r3
 800457a:	f000 ff1d 	bl	80053b8 <RCCEx_PLL2_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004584:	e00f      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458a:	3328      	adds	r3, #40	@ 0x28
 800458c:	2101      	movs	r1, #1
 800458e:	4618      	mov	r0, r3
 8004590:	f000 ffc4 	bl	800551c <RCCEx_PLL3_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800459a:	e004      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80045a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b2:	f023 0107 	bic.w	r1, r3, #7
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045be:	4a68      	ldr	r2, [pc, #416]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f002 0320 	and.w	r3, r2, #32
 80045da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d055      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80045ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045fa:	d033      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80045fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004600:	d82c      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004606:	d02f      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800460c:	d826      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800460e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004612:	d02b      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004614:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004618:	d820      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800461a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800461e:	d012      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004624:	d81a      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004626:	2b00      	cmp	r3, #0
 8004628:	d022      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800462a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800462e:	d115      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	3308      	adds	r3, #8
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f000 febd 	bl	80053b8 <RCCEx_PLL2_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004644:	e015      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	3328      	adds	r3, #40	@ 0x28
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f000 ff64 	bl	800551c <RCCEx_PLL3_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800465a:	e00a      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004662:	e006      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004664:	bf00      	nop
 8004666:	e004      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004668:	bf00      	nop
 800466a:	e002      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800466c:	bf00      	nop
 800466e:	e000      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800467a:	4b39      	ldr	r3, [pc, #228]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800467c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468a:	4a35      	ldr	r2, [pc, #212]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800468c:	430b      	orrs	r3, r1
 800468e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004690:	e003      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004696:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80046a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046aa:	2300      	movs	r3, #0
 80046ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80046b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d058      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046c6:	d033      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80046c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046cc:	d82c      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d2:	d02f      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80046d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d8:	d826      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046de:	d02b      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80046e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046e4:	d820      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046ea:	d012      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80046ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f0:	d81a      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d022      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fa:	d115      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004700:	3308      	adds	r3, #8
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fe57 	bl	80053b8 <RCCEx_PLL2_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004710:	e015      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	3328      	adds	r3, #40	@ 0x28
 8004718:	2102      	movs	r1, #2
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fefe 	bl	800551c <RCCEx_PLL3_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004726:	e00a      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800472e:	e006      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004730:	bf00      	nop
 8004732:	e004      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004734:	bf00      	nop
 8004736:	e002      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004738:	bf00      	nop
 800473a:	e000      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800473c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10e      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004746:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004756:	4a02      	ldr	r2, [pc, #8]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004758:	430b      	orrs	r3, r1
 800475a:	6593      	str	r3, [r2, #88]	@ 0x58
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800475e:	bf00      	nop
 8004760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800476c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004782:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d055      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004794:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004798:	d033      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800479a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800479e:	d82c      	bhi.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047a4:	d02f      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80047a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047aa:	d826      	bhi.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047b0:	d02b      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80047b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80047b6:	d820      	bhi.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047bc:	d012      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80047be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047c2:	d81a      	bhi.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d022      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80047c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047cc:	d115      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d2:	3308      	adds	r3, #8
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fdee 	bl	80053b8 <RCCEx_PLL2_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047e2:	e015      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e8:	3328      	adds	r3, #40	@ 0x28
 80047ea:	2102      	movs	r1, #2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fe95 	bl	800551c <RCCEx_PLL3_Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047f8:	e00a      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004800:	e006      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004802:	bf00      	nop
 8004804:	e004      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004806:	bf00      	nop
 8004808:	e002      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800480a:	bf00      	nop
 800480c:	e000      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800480e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10b      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004818:	4ba1      	ldr	r3, [pc, #644]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004824:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004828:	4a9d      	ldr	r2, [pc, #628]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800482a:	430b      	orrs	r3, r1
 800482c:	6593      	str	r3, [r2, #88]	@ 0x58
 800482e:	e003      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	f002 0308 	and.w	r3, r2, #8
 8004844:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004848:	2300      	movs	r3, #0
 800484a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800484e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d01e      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004864:	d10c      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486a:	3328      	adds	r3, #40	@ 0x28
 800486c:	2102      	movs	r1, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fe54 	bl	800551c <RCCEx_PLL3_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004880:	4b87      	ldr	r3, [pc, #540]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004884:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004890:	4a83      	ldr	r2, [pc, #524]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004892:	430b      	orrs	r3, r1
 8004894:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f002 0310 	and.w	r3, r2, #16
 80048a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80048b0:	460b      	mov	r3, r1
 80048b2:	4313      	orrs	r3, r2
 80048b4:	d01e      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c2:	d10c      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c8:	3328      	adds	r3, #40	@ 0x28
 80048ca:	2102      	movs	r1, #2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fe25 	bl	800551c <RCCEx_PLL3_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048de:	4b70      	ldr	r3, [pc, #448]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ee:	4a6c      	ldr	r2, [pc, #432]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004900:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800490a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800490e:	460b      	mov	r3, r1
 8004910:	4313      	orrs	r3, r2
 8004912:	d03e      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800491c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004920:	d022      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004922:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004926:	d81b      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004930:	d00b      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004932:	e015      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004938:	3308      	adds	r3, #8
 800493a:	2100      	movs	r1, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fd3b 	bl	80053b8 <RCCEx_PLL2_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004948:	e00f      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	3328      	adds	r3, #40	@ 0x28
 8004950:	2102      	movs	r1, #2
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fde2 	bl	800551c <RCCEx_PLL3_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800495e:	e004      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004966:	e000      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800496a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10b      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004972:	4b4b      	ldr	r3, [pc, #300]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004976:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004982:	4a47      	ldr	r2, [pc, #284]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004984:	430b      	orrs	r3, r1
 8004986:	6593      	str	r3, [r2, #88]	@ 0x58
 8004988:	e003      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800498e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800499e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049a0:	2300      	movs	r3, #0
 80049a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80049a8:	460b      	mov	r3, r1
 80049aa:	4313      	orrs	r3, r2
 80049ac:	d03b      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049ba:	d01f      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80049bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049c0:	d818      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80049c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049c6:	d003      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80049c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049cc:	d007      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80049ce:	e011      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d0:	4b33      	ldr	r3, [pc, #204]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	4a32      	ldr	r2, [pc, #200]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80049dc:	e00f      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e2:	3328      	adds	r3, #40	@ 0x28
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fd98 	bl	800551c <RCCEx_PLL3_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80049f2:	e004      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049fa:	e000      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80049fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10b      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a06:	4b26      	ldr	r3, [pc, #152]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a16:	4a22      	ldr	r2, [pc, #136]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a1c:	e003      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a32:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a34:	2300      	movs	r3, #0
 8004a36:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	d034      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a50:	d007      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004a52:	e011      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a54:	4b12      	ldr	r3, [pc, #72]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	4a11      	ldr	r2, [pc, #68]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a60:	e00e      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a66:	3308      	adds	r3, #8
 8004a68:	2102      	movs	r1, #2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fca4 	bl	80053b8 <RCCEx_PLL2_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a76:	e003      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10d      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a88:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a96:	4a02      	ldr	r2, [pc, #8]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a9c:	e006      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004a9e:	bf00      	nop
 8004aa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aba:	2300      	movs	r3, #0
 8004abc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004abe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004acc:	3328      	adds	r3, #40	@ 0x28
 8004ace:	2102      	movs	r1, #2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fd23 	bl	800551c <RCCEx_PLL3_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004aee:	663b      	str	r3, [r7, #96]	@ 0x60
 8004af0:	2300      	movs	r3, #0
 8004af2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004af4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d038      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b0a:	d018      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b10:	d811      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b16:	d014      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b1c:	d80b      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d011      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b26:	d106      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b28:	4bc3      	ldr	r3, [pc, #780]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	4ac2      	ldr	r2, [pc, #776]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b34:	e008      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b3c:	e004      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b3e:	bf00      	nop
 8004b40:	e002      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b42:	bf00      	nop
 8004b44:	e000      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b50:	4bb9      	ldr	r3, [pc, #740]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b54:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b60:	4ab5      	ldr	r2, [pc, #724]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b62:	430b      	orrs	r3, r1
 8004b64:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b66:	e003      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004b7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b7e:	2300      	movs	r3, #0
 8004b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b86:	460b      	mov	r3, r1
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b8c:	4baa      	ldr	r3, [pc, #680]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b9a:	4aa7      	ldr	r2, [pc, #668]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004bac:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bae:	2300      	movs	r3, #0
 8004bb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bb2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004bbc:	4b9e      	ldr	r3, [pc, #632]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004bcc:	4a9a      	ldr	r2, [pc, #616]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004be0:	2300      	movs	r3, #0
 8004be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004be8:	460b      	mov	r3, r1
 8004bea:	4313      	orrs	r3, r2
 8004bec:	d009      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bee:	4b92      	ldr	r3, [pc, #584]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bfc:	4a8e      	ldr	r2, [pc, #568]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c10:	2300      	movs	r3, #0
 8004c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c14:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	d00e      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c1e:	4b86      	ldr	r3, [pc, #536]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	4a85      	ldr	r2, [pc, #532]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c28:	6113      	str	r3, [r2, #16]
 8004c2a:	4b83      	ldr	r3, [pc, #524]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c2c:	6919      	ldr	r1, [r3, #16]
 8004c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c36:	4a80      	ldr	r2, [pc, #512]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c52:	460b      	mov	r3, r1
 8004c54:	4313      	orrs	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c58:	4b77      	ldr	r3, [pc, #476]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c5c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c66:	4a74      	ldr	r2, [pc, #464]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004c82:	460b      	mov	r3, r1
 8004c84:	4313      	orrs	r3, r2
 8004c86:	d00a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c88:	4b6b      	ldr	r3, [pc, #428]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c98:	4a67      	ldr	r2, [pc, #412]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	d011      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fb78 	bl	80053b8 <RCCEx_PLL2_Config>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	6239      	str	r1, [r7, #32]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	d011      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfe:	3308      	adds	r3, #8
 8004d00:	2101      	movs	r1, #1
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fb58 	bl	80053b8 <RCCEx_PLL2_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	2100      	movs	r1, #0
 8004d28:	61b9      	str	r1, [r7, #24]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d34:	460b      	mov	r3, r1
 8004d36:	4313      	orrs	r3, r2
 8004d38:	d011      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3e:	3308      	adds	r3, #8
 8004d40:	2102      	movs	r1, #2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fb38 	bl	80053b8 <RCCEx_PLL2_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	2100      	movs	r1, #0
 8004d68:	6139      	str	r1, [r7, #16]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d011      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7e:	3328      	adds	r3, #40	@ 0x28
 8004d80:	2100      	movs	r1, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fbca 	bl	800551c <RCCEx_PLL3_Config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	2100      	movs	r1, #0
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004db4:	460b      	mov	r3, r1
 8004db6:	4313      	orrs	r3, r2
 8004db8:	d011      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbe:	3328      	adds	r3, #40	@ 0x28
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fbaa 	bl	800551c <RCCEx_PLL3_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	2100      	movs	r1, #0
 8004de8:	6039      	str	r1, [r7, #0]
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	607b      	str	r3, [r7, #4]
 8004df0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004df4:	460b      	mov	r3, r1
 8004df6:	4313      	orrs	r3, r2
 8004df8:	d011      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfe:	3328      	adds	r3, #40	@ 0x28
 8004e00:	2102      	movs	r1, #2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fb8a 	bl	800551c <RCCEx_PLL3_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004e1e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004e32:	46bd      	mov	sp, r7
 8004e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e38:	58024400 	.word	0x58024400

08004e3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e40:	f7fe fd96 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 8004e44:	4602      	mov	r2, r0
 8004e46:	4b06      	ldr	r3, [pc, #24]	@ (8004e60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	4904      	ldr	r1, [pc, #16]	@ (8004e64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e52:	5ccb      	ldrb	r3, [r1, r3]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	58024400 	.word	0x58024400
 8004e64:	080080ec 	.word	0x080080ec

08004e68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b089      	sub	sp, #36	@ 0x24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e70:	4ba1      	ldr	r3, [pc, #644]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004e7a:	4b9f      	ldr	r3, [pc, #636]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7e:	0b1b      	lsrs	r3, r3, #12
 8004e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e86:	4b9c      	ldr	r3, [pc, #624]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004e92:	4b99      	ldr	r3, [pc, #612]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8111 	beq.w	80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	f000 8083 	beq.w	8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	f200 80a1 	bhi.w	8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d056      	beq.n	8004f80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ed2:	e099      	b.n	8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ed4:	4b88      	ldr	r3, [pc, #544]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d02d      	beq.n	8004f3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ee0:	4b85      	ldr	r3, [pc, #532]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	08db      	lsrs	r3, r3, #3
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	4a84      	ldr	r2, [pc, #528]	@ (80050fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	ee07 3a90 	vmov	s15, r3
 8004ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0a:	4b7b      	ldr	r3, [pc, #492]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f3a:	e087      	b.n	800504c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005104 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4e:	4b6a      	ldr	r3, [pc, #424]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f7e:	e065      	b.n	800504c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f92:	4b59      	ldr	r3, [pc, #356]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fc2:	e043      	b.n	800504c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800510c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd6:	4b48      	ldr	r3, [pc, #288]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005006:	e021      	b.n	800504c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005012:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005108 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501a:	4b37      	ldr	r3, [pc, #220]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502a:	ed97 6a03 	vldr	s12, [r7, #12]
 800502e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005100 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800503e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800504a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800504c:	4b2a      	ldr	r3, [pc, #168]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	0a5b      	lsrs	r3, r3, #9
 8005052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005062:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005066:	edd7 6a07 	vldr	s13, [r7, #28]
 800506a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800506e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005072:	ee17 2a90 	vmov	r2, s15
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800507a:	4b1f      	ldr	r3, [pc, #124]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800507c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507e:	0c1b      	lsrs	r3, r3, #16
 8005080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005084:	ee07 3a90 	vmov	s15, r3
 8005088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005090:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005094:	edd7 6a07 	vldr	s13, [r7, #28]
 8005098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800509c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050a0:	ee17 2a90 	vmov	r2, s15
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80050a8:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ac:	0e1b      	lsrs	r3, r3, #24
 80050ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ce:	ee17 2a90 	vmov	r2, s15
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80050d6:	e008      	b.n	80050ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	609a      	str	r2, [r3, #8]
}
 80050ea:	bf00      	nop
 80050ec:	3724      	adds	r7, #36	@ 0x24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	58024400 	.word	0x58024400
 80050fc:	03d09000 	.word	0x03d09000
 8005100:	46000000 	.word	0x46000000
 8005104:	4c742400 	.word	0x4c742400
 8005108:	4a742400 	.word	0x4a742400
 800510c:	4bbebc20 	.word	0x4bbebc20

08005110 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005110:	b480      	push	{r7}
 8005112:	b089      	sub	sp, #36	@ 0x24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005118:	4ba1      	ldr	r3, [pc, #644]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005122:	4b9f      	ldr	r3, [pc, #636]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005126:	0d1b      	lsrs	r3, r3, #20
 8005128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800512c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800512e:	4b9c      	ldr	r3, [pc, #624]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800513a:	4b99      	ldr	r3, [pc, #612]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800513c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513e:	08db      	lsrs	r3, r3, #3
 8005140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005152:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 8111 	beq.w	8005380 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b02      	cmp	r3, #2
 8005162:	f000 8083 	beq.w	800526c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b02      	cmp	r3, #2
 800516a:	f200 80a1 	bhi.w	80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d056      	beq.n	8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800517a:	e099      	b.n	80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800517c:	4b88      	ldr	r3, [pc, #544]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d02d      	beq.n	80051e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005188:	4b85      	ldr	r3, [pc, #532]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	08db      	lsrs	r3, r3, #3
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	4a84      	ldr	r2, [pc, #528]	@ (80053a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
 8005198:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	ee07 3a90 	vmov	s15, r3
 80051a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b2:	4b7b      	ldr	r3, [pc, #492]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80051e2:	e087      	b.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80051f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f6:	4b6a      	ldr	r3, [pc, #424]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005206:	ed97 6a03 	vldr	s12, [r7, #12]
 800520a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800520e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800521a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005226:	e065      	b.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80053b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523a:	4b59      	ldr	r3, [pc, #356]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524a:	ed97 6a03 	vldr	s12, [r7, #12]
 800524e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800525e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800526a:	e043      	b.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005276:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80053b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800527a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527e:	4b48      	ldr	r3, [pc, #288]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005292:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ae:	e021      	b.n	80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80053b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c2:	4b37      	ldr	r3, [pc, #220]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80052f4:	4b2a      	ldr	r3, [pc, #168]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f8:	0a5b      	lsrs	r3, r3, #9
 80052fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800530a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800530e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800531a:	ee17 2a90 	vmov	r2, s15
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005322:	4b1f      	ldr	r3, [pc, #124]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	0c1b      	lsrs	r3, r3, #16
 8005328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800532c:	ee07 3a90 	vmov	s15, r3
 8005330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005334:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005338:	ee37 7a87 	vadd.f32	s14, s15, s14
 800533c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005348:	ee17 2a90 	vmov	r2, s15
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005350:	4b13      	ldr	r3, [pc, #76]	@ (80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	0e1b      	lsrs	r3, r3, #24
 8005356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800536a:	edd7 6a07 	vldr	s13, [r7, #28]
 800536e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005376:	ee17 2a90 	vmov	r2, s15
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800537e:	e008      	b.n	8005392 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	609a      	str	r2, [r3, #8]
}
 8005392:	bf00      	nop
 8005394:	3724      	adds	r7, #36	@ 0x24
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	58024400 	.word	0x58024400
 80053a4:	03d09000 	.word	0x03d09000
 80053a8:	46000000 	.word	0x46000000
 80053ac:	4c742400 	.word	0x4c742400
 80053b0:	4a742400 	.word	0x4a742400
 80053b4:	4bbebc20 	.word	0x4bbebc20

080053b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053c6:	4b53      	ldr	r3, [pc, #332]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80053c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d101      	bne.n	80053d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e099      	b.n	800550a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80053d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a4e      	ldr	r2, [pc, #312]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80053dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e2:	f7fc fa33 	bl	800184c <HAL_GetTick>
 80053e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053e8:	e008      	b.n	80053fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053ea:	f7fc fa2f 	bl	800184c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e086      	b.n	800550a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053fc:	4b45      	ldr	r3, [pc, #276]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1f0      	bne.n	80053ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005408:	4b42      	ldr	r3, [pc, #264]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 800540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	031b      	lsls	r3, r3, #12
 8005416:	493f      	ldr	r1, [pc, #252]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 8005418:	4313      	orrs	r3, r2
 800541a:	628b      	str	r3, [r1, #40]	@ 0x28
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	3b01      	subs	r3, #1
 8005422:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	3b01      	subs	r3, #1
 800542c:	025b      	lsls	r3, r3, #9
 800542e:	b29b      	uxth	r3, r3
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	3b01      	subs	r3, #1
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	3b01      	subs	r3, #1
 8005446:	061b      	lsls	r3, r3, #24
 8005448:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800544c:	4931      	ldr	r1, [pc, #196]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 800544e:	4313      	orrs	r3, r2
 8005450:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005452:	4b30      	ldr	r3, [pc, #192]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 8005454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005456:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	492d      	ldr	r1, [pc, #180]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 8005460:	4313      	orrs	r3, r2
 8005462:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005464:	4b2b      	ldr	r3, [pc, #172]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	f023 0220 	bic.w	r2, r3, #32
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	4928      	ldr	r1, [pc, #160]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 8005472:	4313      	orrs	r3, r2
 8005474:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005476:	4b27      	ldr	r3, [pc, #156]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 8005478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547a:	4a26      	ldr	r2, [pc, #152]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 800547c:	f023 0310 	bic.w	r3, r3, #16
 8005480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005482:	4b24      	ldr	r3, [pc, #144]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 8005484:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005486:	4b24      	ldr	r3, [pc, #144]	@ (8005518 <RCCEx_PLL2_Config+0x160>)
 8005488:	4013      	ands	r3, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	69d2      	ldr	r2, [r2, #28]
 800548e:	00d2      	lsls	r2, r2, #3
 8005490:	4920      	ldr	r1, [pc, #128]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005496:	4b1f      	ldr	r3, [pc, #124]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	4a1e      	ldr	r2, [pc, #120]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 800549c:	f043 0310 	orr.w	r3, r3, #16
 80054a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d106      	bne.n	80054b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80054a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ac:	4a19      	ldr	r2, [pc, #100]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80054ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054b4:	e00f      	b.n	80054d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d106      	bne.n	80054ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80054bc:	4b15      	ldr	r3, [pc, #84]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80054be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c0:	4a14      	ldr	r2, [pc, #80]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80054c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80054c8:	e005      	b.n	80054d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80054ca:	4b12      	ldr	r3, [pc, #72]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80054cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ce:	4a11      	ldr	r2, [pc, #68]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80054d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80054d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a0e      	ldr	r2, [pc, #56]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80054dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e2:	f7fc f9b3 	bl	800184c <HAL_GetTick>
 80054e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054e8:	e008      	b.n	80054fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054ea:	f7fc f9af 	bl	800184c <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d901      	bls.n	80054fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e006      	b.n	800550a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054fc:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <RCCEx_PLL2_Config+0x15c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0f0      	beq.n	80054ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	58024400 	.word	0x58024400
 8005518:	ffff0007 	.word	0xffff0007

0800551c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800552a:	4b53      	ldr	r3, [pc, #332]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 800552c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b03      	cmp	r3, #3
 8005534:	d101      	bne.n	800553a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e099      	b.n	800566e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800553a:	4b4f      	ldr	r3, [pc, #316]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a4e      	ldr	r2, [pc, #312]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 8005540:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005546:	f7fc f981 	bl	800184c <HAL_GetTick>
 800554a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800554c:	e008      	b.n	8005560 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800554e:	f7fc f97d 	bl	800184c <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e086      	b.n	800566e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005560:	4b45      	ldr	r3, [pc, #276]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f0      	bne.n	800554e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800556c:	4b42      	ldr	r3, [pc, #264]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	051b      	lsls	r3, r3, #20
 800557a:	493f      	ldr	r1, [pc, #252]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 800557c:	4313      	orrs	r3, r2
 800557e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	3b01      	subs	r3, #1
 8005586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	3b01      	subs	r3, #1
 8005590:	025b      	lsls	r3, r3, #9
 8005592:	b29b      	uxth	r3, r3
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	3b01      	subs	r3, #1
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	061b      	lsls	r3, r3, #24
 80055ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055b0:	4931      	ldr	r1, [pc, #196]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80055b6:	4b30      	ldr	r3, [pc, #192]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	492d      	ldr	r1, [pc, #180]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80055c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	4928      	ldr	r1, [pc, #160]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80055da:	4b27      	ldr	r3, [pc, #156]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	4a26      	ldr	r2, [pc, #152]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 80055e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80055e6:	4b24      	ldr	r3, [pc, #144]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 80055e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055ea:	4b24      	ldr	r3, [pc, #144]	@ (800567c <RCCEx_PLL3_Config+0x160>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	69d2      	ldr	r2, [r2, #28]
 80055f2:	00d2      	lsls	r2, r2, #3
 80055f4:	4920      	ldr	r1, [pc, #128]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80055fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 8005600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005604:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800560c:	4b1a      	ldr	r3, [pc, #104]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	4a19      	ldr	r2, [pc, #100]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 8005612:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005616:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005618:	e00f      	b.n	800563a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d106      	bne.n	800562e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005620:	4b15      	ldr	r3, [pc, #84]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 8005622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005624:	4a14      	ldr	r2, [pc, #80]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 8005626:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800562a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800562c:	e005      	b.n	800563a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800562e:	4b12      	ldr	r3, [pc, #72]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 8005630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005632:	4a11      	ldr	r2, [pc, #68]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 8005634:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005638:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800563a:	4b0f      	ldr	r3, [pc, #60]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a0e      	ldr	r2, [pc, #56]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 8005640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005646:	f7fc f901 	bl	800184c <HAL_GetTick>
 800564a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800564c:	e008      	b.n	8005660 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800564e:	f7fc f8fd 	bl	800184c <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e006      	b.n	800566e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005660:	4b05      	ldr	r3, [pc, #20]	@ (8005678 <RCCEx_PLL3_Config+0x15c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	58024400 	.word	0x58024400
 800567c:	ffff0007 	.word	0xffff0007

08005680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e042      	b.n	8005718 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	2b00      	cmp	r3, #0
 800569a:	d106      	bne.n	80056aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7fb fe97 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2224      	movs	r2, #36	@ 0x24
 80056ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0201 	bic.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 f9d2 	bl	8006a74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fc67 	bl	8005fa4 <UART_SetConfig>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e01b      	b.n	8005718 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f001 fa51 	bl	8006bb8 <UART_CheckIdleState>
 8005716:	4603      	mov	r3, r0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	@ 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	4613      	mov	r3, r2
 800572c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005734:	2b20      	cmp	r3, #32
 8005736:	d137      	bne.n	80057a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_UART_Receive_IT+0x24>
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e030      	b.n	80057aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a18      	ldr	r2, [pc, #96]	@ (80057b4 <HAL_UART_Receive_IT+0x94>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d01f      	beq.n	8005798 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d018      	beq.n	8005798 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	613b      	str	r3, [r7, #16]
   return(result);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005784:	623b      	str	r3, [r7, #32]
 8005786:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	69f9      	ldr	r1, [r7, #28]
 800578a:	6a3a      	ldr	r2, [r7, #32]
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	61bb      	str	r3, [r7, #24]
   return(result);
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e6      	bne.n	8005766 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	461a      	mov	r2, r3
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f001 fb22 	bl	8006de8 <UART_Start_Receive_IT>
 80057a4:	4603      	mov	r3, r0
 80057a6:	e000      	b.n	80057aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057a8:	2302      	movs	r3, #2
  }
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3728      	adds	r7, #40	@ 0x28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	58000c00 	.word	0x58000c00

080057b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b0ba      	sub	sp, #232	@ 0xe8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80057e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80057e6:	4013      	ands	r3, r2
 80057e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80057ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11b      	bne.n	800582c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d015      	beq.n	800582c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800580c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d009      	beq.n	800582c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8393 	beq.w	8005f48 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
      }
      return;
 800582a:	e38d      	b.n	8005f48 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800582c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8123 	beq.w	8005a7c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005836:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800583a:	4b8d      	ldr	r3, [pc, #564]	@ (8005a70 <HAL_UART_IRQHandler+0x2b8>)
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005842:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005846:	4b8b      	ldr	r3, [pc, #556]	@ (8005a74 <HAL_UART_IRQHandler+0x2bc>)
 8005848:	4013      	ands	r3, r2
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 8116 	beq.w	8005a7c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d011      	beq.n	8005880 <HAL_UART_IRQHandler+0xc8>
 800585c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2201      	movs	r2, #1
 800586e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005876:	f043 0201 	orr.w	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d011      	beq.n	80058b0 <HAL_UART_IRQHandler+0xf8>
 800588c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00b      	beq.n	80058b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2202      	movs	r2, #2
 800589e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a6:	f043 0204 	orr.w	r2, r3, #4
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d011      	beq.n	80058e0 <HAL_UART_IRQHandler+0x128>
 80058bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2204      	movs	r2, #4
 80058ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d6:	f043 0202 	orr.w	r2, r3, #2
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d017      	beq.n	800591c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d105      	bne.n	8005904 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80058fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005a70 <HAL_UART_IRQHandler+0x2b8>)
 80058fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2208      	movs	r2, #8
 800590a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005912:	f043 0208 	orr.w	r2, r3, #8
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800591c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005924:	2b00      	cmp	r3, #0
 8005926:	d012      	beq.n	800594e <HAL_UART_IRQHandler+0x196>
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00c      	beq.n	800594e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800593c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005944:	f043 0220 	orr.w	r2, r3, #32
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 82f9 	beq.w	8005f4c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d013      	beq.n	800598e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d105      	bne.n	800597e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005994:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a2:	2b40      	cmp	r3, #64	@ 0x40
 80059a4:	d005      	beq.n	80059b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d054      	beq.n	8005a5c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 fb3a 	bl	800702c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c2:	2b40      	cmp	r3, #64	@ 0x40
 80059c4:	d146      	bne.n	8005a54 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3308      	adds	r3, #8
 80059ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1d9      	bne.n	80059c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d017      	beq.n	8005a4c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a22:	4a15      	ldr	r2, [pc, #84]	@ (8005a78 <HAL_UART_IRQHandler+0x2c0>)
 8005a24:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fc fbcb 	bl	80021c8 <HAL_DMA_Abort_IT>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d019      	beq.n	8005a6c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005a46:	4610      	mov	r0, r2
 8005a48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4a:	e00f      	b.n	8005a6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fa93 	bl	8005f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a52:	e00b      	b.n	8005a6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fa8f 	bl	8005f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5a:	e007      	b.n	8005a6c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fa8b 	bl	8005f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005a6a:	e26f      	b.n	8005f4c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6c:	bf00      	nop
    return;
 8005a6e:	e26d      	b.n	8005f4c <HAL_UART_IRQHandler+0x794>
 8005a70:	10000001 	.word	0x10000001
 8005a74:	04000120 	.word	0x04000120
 8005a78:	080070f9 	.word	0x080070f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	f040 8203 	bne.w	8005e8c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 81fc 	beq.w	8005e8c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a98:	f003 0310 	and.w	r3, r3, #16
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 81f5 	beq.w	8005e8c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2210      	movs	r2, #16
 8005aa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b40      	cmp	r3, #64	@ 0x40
 8005ab6:	f040 816d 	bne.w	8005d94 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4aa4      	ldr	r2, [pc, #656]	@ (8005d54 <HAL_UART_IRQHandler+0x59c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d068      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4aa1      	ldr	r2, [pc, #644]	@ (8005d58 <HAL_UART_IRQHandler+0x5a0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d061      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a9f      	ldr	r2, [pc, #636]	@ (8005d5c <HAL_UART_IRQHandler+0x5a4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d05a      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a9c      	ldr	r2, [pc, #624]	@ (8005d60 <HAL_UART_IRQHandler+0x5a8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d053      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a9a      	ldr	r2, [pc, #616]	@ (8005d64 <HAL_UART_IRQHandler+0x5ac>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d04c      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a97      	ldr	r2, [pc, #604]	@ (8005d68 <HAL_UART_IRQHandler+0x5b0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d045      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a95      	ldr	r2, [pc, #596]	@ (8005d6c <HAL_UART_IRQHandler+0x5b4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d03e      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a92      	ldr	r2, [pc, #584]	@ (8005d70 <HAL_UART_IRQHandler+0x5b8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d037      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a90      	ldr	r2, [pc, #576]	@ (8005d74 <HAL_UART_IRQHandler+0x5bc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d030      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a8d      	ldr	r2, [pc, #564]	@ (8005d78 <HAL_UART_IRQHandler+0x5c0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d029      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a8b      	ldr	r2, [pc, #556]	@ (8005d7c <HAL_UART_IRQHandler+0x5c4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d022      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a88      	ldr	r2, [pc, #544]	@ (8005d80 <HAL_UART_IRQHandler+0x5c8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01b      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a86      	ldr	r2, [pc, #536]	@ (8005d84 <HAL_UART_IRQHandler+0x5cc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d014      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a83      	ldr	r2, [pc, #524]	@ (8005d88 <HAL_UART_IRQHandler+0x5d0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00d      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a81      	ldr	r2, [pc, #516]	@ (8005d8c <HAL_UART_IRQHandler+0x5d4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d006      	beq.n	8005b9a <HAL_UART_IRQHandler+0x3e2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a7e      	ldr	r2, [pc, #504]	@ (8005d90 <HAL_UART_IRQHandler+0x5d8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d106      	bne.n	8005ba8 <HAL_UART_IRQHandler+0x3f0>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	e005      	b.n	8005bb4 <HAL_UART_IRQHandler+0x3fc>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80ad 	beq.w	8005d1c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	f080 80a5 	bcs.w	8005d1c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005be8:	f000 8087 	beq.w	8005cfa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1da      	bne.n	8005bec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c48:	f023 0301 	bic.w	r3, r3, #1
 8005c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e1      	bne.n	8005c36 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3308      	adds	r3, #8
 8005c78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e3      	bne.n	8005c72 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc8:	f023 0310 	bic.w	r3, r3, #16
 8005ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ce0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e4      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fb ff49 	bl	8001b8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f939 	bl	8005f8c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d1a:	e119      	b.n	8005f50 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d26:	429a      	cmp	r2, r3
 8005d28:	f040 8112 	bne.w	8005f50 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d38:	f040 810a 	bne.w	8005f50 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f91e 	bl	8005f8c <HAL_UARTEx_RxEventCallback>
      return;
 8005d50:	e0fe      	b.n	8005f50 <HAL_UART_IRQHandler+0x798>
 8005d52:	bf00      	nop
 8005d54:	40020010 	.word	0x40020010
 8005d58:	40020028 	.word	0x40020028
 8005d5c:	40020040 	.word	0x40020040
 8005d60:	40020058 	.word	0x40020058
 8005d64:	40020070 	.word	0x40020070
 8005d68:	40020088 	.word	0x40020088
 8005d6c:	400200a0 	.word	0x400200a0
 8005d70:	400200b8 	.word	0x400200b8
 8005d74:	40020410 	.word	0x40020410
 8005d78:	40020428 	.word	0x40020428
 8005d7c:	40020440 	.word	0x40020440
 8005d80:	40020458 	.word	0x40020458
 8005d84:	40020470 	.word	0x40020470
 8005d88:	40020488 	.word	0x40020488
 8005d8c:	400204a0 	.word	0x400204a0
 8005d90:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80cf 	beq.w	8005f54 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005db6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 80ca 	beq.w	8005f54 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005de2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005de4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e4      	bne.n	8005dc0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	623b      	str	r3, [r7, #32]
   return(result);
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	4b55      	ldr	r3, [pc, #340]	@ (8005f60 <HAL_UART_IRQHandler+0x7a8>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3308      	adds	r3, #8
 8005e16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e3      	bne.n	8005df6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0310 	bic.w	r3, r3, #16
 8005e56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e64:	61fb      	str	r3, [r7, #28]
 8005e66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	69b9      	ldr	r1, [r7, #24]
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	617b      	str	r3, [r7, #20]
   return(result);
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e4      	bne.n	8005e42 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f881 	bl	8005f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e8a:	e063      	b.n	8005f54 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00e      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x6fe>
 8005e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005eac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 fe80 	bl	8007bb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eb4:	e051      	b.n	8005f5a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d014      	beq.n	8005eec <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d105      	bne.n	8005eda <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d008      	beq.n	8005eec <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d03a      	beq.n	8005f58 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
    }
    return;
 8005eea:	e035      	b.n	8005f58 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <HAL_UART_IRQHandler+0x754>
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 f909 	bl	800711c <UART_EndTransmit_IT>
    return;
 8005f0a:	e026      	b.n	8005f5a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <HAL_UART_IRQHandler+0x774>
 8005f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 fe59 	bl	8007bdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f2a:	e016      	b.n	8005f5a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d010      	beq.n	8005f5a <HAL_UART_IRQHandler+0x7a2>
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	da0c      	bge.n	8005f5a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f001 fe41 	bl	8007bc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f46:	e008      	b.n	8005f5a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005f48:	bf00      	nop
 8005f4a:	e006      	b.n	8005f5a <HAL_UART_IRQHandler+0x7a2>
    return;
 8005f4c:	bf00      	nop
 8005f4e:	e004      	b.n	8005f5a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005f50:	bf00      	nop
 8005f52:	e002      	b.n	8005f5a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005f54:	bf00      	nop
 8005f56:	e000      	b.n	8005f5a <HAL_UART_IRQHandler+0x7a2>
    return;
 8005f58:	bf00      	nop
  }
}
 8005f5a:	37e8      	adds	r7, #232	@ 0xe8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	effffffe 	.word	0xeffffffe

08005f64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fa8:	b092      	sub	sp, #72	@ 0x48
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4bbe      	ldr	r3, [pc, #760]	@ (80062cc <UART_SetConfig+0x328>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4ab3      	ldr	r2, [pc, #716]	@ (80062d0 <UART_SetConfig+0x32c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800600c:	4313      	orrs	r3, r2
 800600e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	4baf      	ldr	r3, [pc, #700]	@ (80062d4 <UART_SetConfig+0x330>)
 8006018:	4013      	ands	r3, r2
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006020:	430b      	orrs	r3, r1
 8006022:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602a:	f023 010f 	bic.w	r1, r3, #15
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4aa6      	ldr	r2, [pc, #664]	@ (80062d8 <UART_SetConfig+0x334>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d177      	bne.n	8006134 <UART_SetConfig+0x190>
 8006044:	4ba5      	ldr	r3, [pc, #660]	@ (80062dc <UART_SetConfig+0x338>)
 8006046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006048:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800604c:	2b28      	cmp	r3, #40	@ 0x28
 800604e:	d86d      	bhi.n	800612c <UART_SetConfig+0x188>
 8006050:	a201      	add	r2, pc, #4	@ (adr r2, 8006058 <UART_SetConfig+0xb4>)
 8006052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006056:	bf00      	nop
 8006058:	080060fd 	.word	0x080060fd
 800605c:	0800612d 	.word	0x0800612d
 8006060:	0800612d 	.word	0x0800612d
 8006064:	0800612d 	.word	0x0800612d
 8006068:	0800612d 	.word	0x0800612d
 800606c:	0800612d 	.word	0x0800612d
 8006070:	0800612d 	.word	0x0800612d
 8006074:	0800612d 	.word	0x0800612d
 8006078:	08006105 	.word	0x08006105
 800607c:	0800612d 	.word	0x0800612d
 8006080:	0800612d 	.word	0x0800612d
 8006084:	0800612d 	.word	0x0800612d
 8006088:	0800612d 	.word	0x0800612d
 800608c:	0800612d 	.word	0x0800612d
 8006090:	0800612d 	.word	0x0800612d
 8006094:	0800612d 	.word	0x0800612d
 8006098:	0800610d 	.word	0x0800610d
 800609c:	0800612d 	.word	0x0800612d
 80060a0:	0800612d 	.word	0x0800612d
 80060a4:	0800612d 	.word	0x0800612d
 80060a8:	0800612d 	.word	0x0800612d
 80060ac:	0800612d 	.word	0x0800612d
 80060b0:	0800612d 	.word	0x0800612d
 80060b4:	0800612d 	.word	0x0800612d
 80060b8:	08006115 	.word	0x08006115
 80060bc:	0800612d 	.word	0x0800612d
 80060c0:	0800612d 	.word	0x0800612d
 80060c4:	0800612d 	.word	0x0800612d
 80060c8:	0800612d 	.word	0x0800612d
 80060cc:	0800612d 	.word	0x0800612d
 80060d0:	0800612d 	.word	0x0800612d
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	0800611d 	.word	0x0800611d
 80060dc:	0800612d 	.word	0x0800612d
 80060e0:	0800612d 	.word	0x0800612d
 80060e4:	0800612d 	.word	0x0800612d
 80060e8:	0800612d 	.word	0x0800612d
 80060ec:	0800612d 	.word	0x0800612d
 80060f0:	0800612d 	.word	0x0800612d
 80060f4:	0800612d 	.word	0x0800612d
 80060f8:	08006125 	.word	0x08006125
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006102:	e222      	b.n	800654a <UART_SetConfig+0x5a6>
 8006104:	2304      	movs	r3, #4
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610a:	e21e      	b.n	800654a <UART_SetConfig+0x5a6>
 800610c:	2308      	movs	r3, #8
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006112:	e21a      	b.n	800654a <UART_SetConfig+0x5a6>
 8006114:	2310      	movs	r3, #16
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611a:	e216      	b.n	800654a <UART_SetConfig+0x5a6>
 800611c:	2320      	movs	r3, #32
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006122:	e212      	b.n	800654a <UART_SetConfig+0x5a6>
 8006124:	2340      	movs	r3, #64	@ 0x40
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612a:	e20e      	b.n	800654a <UART_SetConfig+0x5a6>
 800612c:	2380      	movs	r3, #128	@ 0x80
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006132:	e20a      	b.n	800654a <UART_SetConfig+0x5a6>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a69      	ldr	r2, [pc, #420]	@ (80062e0 <UART_SetConfig+0x33c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d130      	bne.n	80061a0 <UART_SetConfig+0x1fc>
 800613e:	4b67      	ldr	r3, [pc, #412]	@ (80062dc <UART_SetConfig+0x338>)
 8006140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	2b05      	cmp	r3, #5
 8006148:	d826      	bhi.n	8006198 <UART_SetConfig+0x1f4>
 800614a:	a201      	add	r2, pc, #4	@ (adr r2, 8006150 <UART_SetConfig+0x1ac>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006169 	.word	0x08006169
 8006154:	08006171 	.word	0x08006171
 8006158:	08006179 	.word	0x08006179
 800615c:	08006181 	.word	0x08006181
 8006160:	08006189 	.word	0x08006189
 8006164:	08006191 	.word	0x08006191
 8006168:	2300      	movs	r3, #0
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e1ec      	b.n	800654a <UART_SetConfig+0x5a6>
 8006170:	2304      	movs	r3, #4
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e1e8      	b.n	800654a <UART_SetConfig+0x5a6>
 8006178:	2308      	movs	r3, #8
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617e:	e1e4      	b.n	800654a <UART_SetConfig+0x5a6>
 8006180:	2310      	movs	r3, #16
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006186:	e1e0      	b.n	800654a <UART_SetConfig+0x5a6>
 8006188:	2320      	movs	r3, #32
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618e:	e1dc      	b.n	800654a <UART_SetConfig+0x5a6>
 8006190:	2340      	movs	r3, #64	@ 0x40
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006196:	e1d8      	b.n	800654a <UART_SetConfig+0x5a6>
 8006198:	2380      	movs	r3, #128	@ 0x80
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619e:	e1d4      	b.n	800654a <UART_SetConfig+0x5a6>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a4f      	ldr	r2, [pc, #316]	@ (80062e4 <UART_SetConfig+0x340>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d130      	bne.n	800620c <UART_SetConfig+0x268>
 80061aa:	4b4c      	ldr	r3, [pc, #304]	@ (80062dc <UART_SetConfig+0x338>)
 80061ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	d826      	bhi.n	8006204 <UART_SetConfig+0x260>
 80061b6:	a201      	add	r2, pc, #4	@ (adr r2, 80061bc <UART_SetConfig+0x218>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061d5 	.word	0x080061d5
 80061c0:	080061dd 	.word	0x080061dd
 80061c4:	080061e5 	.word	0x080061e5
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	2300      	movs	r3, #0
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e1b6      	b.n	800654a <UART_SetConfig+0x5a6>
 80061dc:	2304      	movs	r3, #4
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e1b2      	b.n	800654a <UART_SetConfig+0x5a6>
 80061e4:	2308      	movs	r3, #8
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e1ae      	b.n	800654a <UART_SetConfig+0x5a6>
 80061ec:	2310      	movs	r3, #16
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f2:	e1aa      	b.n	800654a <UART_SetConfig+0x5a6>
 80061f4:	2320      	movs	r3, #32
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fa:	e1a6      	b.n	800654a <UART_SetConfig+0x5a6>
 80061fc:	2340      	movs	r3, #64	@ 0x40
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006202:	e1a2      	b.n	800654a <UART_SetConfig+0x5a6>
 8006204:	2380      	movs	r3, #128	@ 0x80
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620a:	e19e      	b.n	800654a <UART_SetConfig+0x5a6>
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a35      	ldr	r2, [pc, #212]	@ (80062e8 <UART_SetConfig+0x344>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d130      	bne.n	8006278 <UART_SetConfig+0x2d4>
 8006216:	4b31      	ldr	r3, [pc, #196]	@ (80062dc <UART_SetConfig+0x338>)
 8006218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	2b05      	cmp	r3, #5
 8006220:	d826      	bhi.n	8006270 <UART_SetConfig+0x2cc>
 8006222:	a201      	add	r2, pc, #4	@ (adr r2, 8006228 <UART_SetConfig+0x284>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	08006241 	.word	0x08006241
 800622c:	08006249 	.word	0x08006249
 8006230:	08006251 	.word	0x08006251
 8006234:	08006259 	.word	0x08006259
 8006238:	08006261 	.word	0x08006261
 800623c:	08006269 	.word	0x08006269
 8006240:	2300      	movs	r3, #0
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e180      	b.n	800654a <UART_SetConfig+0x5a6>
 8006248:	2304      	movs	r3, #4
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e17c      	b.n	800654a <UART_SetConfig+0x5a6>
 8006250:	2308      	movs	r3, #8
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e178      	b.n	800654a <UART_SetConfig+0x5a6>
 8006258:	2310      	movs	r3, #16
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625e:	e174      	b.n	800654a <UART_SetConfig+0x5a6>
 8006260:	2320      	movs	r3, #32
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006266:	e170      	b.n	800654a <UART_SetConfig+0x5a6>
 8006268:	2340      	movs	r3, #64	@ 0x40
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800626e:	e16c      	b.n	800654a <UART_SetConfig+0x5a6>
 8006270:	2380      	movs	r3, #128	@ 0x80
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006276:	e168      	b.n	800654a <UART_SetConfig+0x5a6>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1b      	ldr	r2, [pc, #108]	@ (80062ec <UART_SetConfig+0x348>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d142      	bne.n	8006308 <UART_SetConfig+0x364>
 8006282:	4b16      	ldr	r3, [pc, #88]	@ (80062dc <UART_SetConfig+0x338>)
 8006284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	2b05      	cmp	r3, #5
 800628c:	d838      	bhi.n	8006300 <UART_SetConfig+0x35c>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <UART_SetConfig+0x2f0>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062ad 	.word	0x080062ad
 8006298:	080062b5 	.word	0x080062b5
 800629c:	080062bd 	.word	0x080062bd
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	080062f1 	.word	0x080062f1
 80062a8:	080062f9 	.word	0x080062f9
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b2:	e14a      	b.n	800654a <UART_SetConfig+0x5a6>
 80062b4:	2304      	movs	r3, #4
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ba:	e146      	b.n	800654a <UART_SetConfig+0x5a6>
 80062bc:	2308      	movs	r3, #8
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c2:	e142      	b.n	800654a <UART_SetConfig+0x5a6>
 80062c4:	2310      	movs	r3, #16
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ca:	e13e      	b.n	800654a <UART_SetConfig+0x5a6>
 80062cc:	cfff69f3 	.word	0xcfff69f3
 80062d0:	58000c00 	.word	0x58000c00
 80062d4:	11fff4ff 	.word	0x11fff4ff
 80062d8:	40011000 	.word	0x40011000
 80062dc:	58024400 	.word	0x58024400
 80062e0:	40004400 	.word	0x40004400
 80062e4:	40004800 	.word	0x40004800
 80062e8:	40004c00 	.word	0x40004c00
 80062ec:	40005000 	.word	0x40005000
 80062f0:	2320      	movs	r3, #32
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f6:	e128      	b.n	800654a <UART_SetConfig+0x5a6>
 80062f8:	2340      	movs	r3, #64	@ 0x40
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fe:	e124      	b.n	800654a <UART_SetConfig+0x5a6>
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006306:	e120      	b.n	800654a <UART_SetConfig+0x5a6>
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4acb      	ldr	r2, [pc, #812]	@ (800663c <UART_SetConfig+0x698>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d176      	bne.n	8006400 <UART_SetConfig+0x45c>
 8006312:	4bcb      	ldr	r3, [pc, #812]	@ (8006640 <UART_SetConfig+0x69c>)
 8006314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800631a:	2b28      	cmp	r3, #40	@ 0x28
 800631c:	d86c      	bhi.n	80063f8 <UART_SetConfig+0x454>
 800631e:	a201      	add	r2, pc, #4	@ (adr r2, 8006324 <UART_SetConfig+0x380>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	080063c9 	.word	0x080063c9
 8006328:	080063f9 	.word	0x080063f9
 800632c:	080063f9 	.word	0x080063f9
 8006330:	080063f9 	.word	0x080063f9
 8006334:	080063f9 	.word	0x080063f9
 8006338:	080063f9 	.word	0x080063f9
 800633c:	080063f9 	.word	0x080063f9
 8006340:	080063f9 	.word	0x080063f9
 8006344:	080063d1 	.word	0x080063d1
 8006348:	080063f9 	.word	0x080063f9
 800634c:	080063f9 	.word	0x080063f9
 8006350:	080063f9 	.word	0x080063f9
 8006354:	080063f9 	.word	0x080063f9
 8006358:	080063f9 	.word	0x080063f9
 800635c:	080063f9 	.word	0x080063f9
 8006360:	080063f9 	.word	0x080063f9
 8006364:	080063d9 	.word	0x080063d9
 8006368:	080063f9 	.word	0x080063f9
 800636c:	080063f9 	.word	0x080063f9
 8006370:	080063f9 	.word	0x080063f9
 8006374:	080063f9 	.word	0x080063f9
 8006378:	080063f9 	.word	0x080063f9
 800637c:	080063f9 	.word	0x080063f9
 8006380:	080063f9 	.word	0x080063f9
 8006384:	080063e1 	.word	0x080063e1
 8006388:	080063f9 	.word	0x080063f9
 800638c:	080063f9 	.word	0x080063f9
 8006390:	080063f9 	.word	0x080063f9
 8006394:	080063f9 	.word	0x080063f9
 8006398:	080063f9 	.word	0x080063f9
 800639c:	080063f9 	.word	0x080063f9
 80063a0:	080063f9 	.word	0x080063f9
 80063a4:	080063e9 	.word	0x080063e9
 80063a8:	080063f9 	.word	0x080063f9
 80063ac:	080063f9 	.word	0x080063f9
 80063b0:	080063f9 	.word	0x080063f9
 80063b4:	080063f9 	.word	0x080063f9
 80063b8:	080063f9 	.word	0x080063f9
 80063bc:	080063f9 	.word	0x080063f9
 80063c0:	080063f9 	.word	0x080063f9
 80063c4:	080063f1 	.word	0x080063f1
 80063c8:	2301      	movs	r3, #1
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ce:	e0bc      	b.n	800654a <UART_SetConfig+0x5a6>
 80063d0:	2304      	movs	r3, #4
 80063d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063d6:	e0b8      	b.n	800654a <UART_SetConfig+0x5a6>
 80063d8:	2308      	movs	r3, #8
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063de:	e0b4      	b.n	800654a <UART_SetConfig+0x5a6>
 80063e0:	2310      	movs	r3, #16
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063e6:	e0b0      	b.n	800654a <UART_SetConfig+0x5a6>
 80063e8:	2320      	movs	r3, #32
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ee:	e0ac      	b.n	800654a <UART_SetConfig+0x5a6>
 80063f0:	2340      	movs	r3, #64	@ 0x40
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f6:	e0a8      	b.n	800654a <UART_SetConfig+0x5a6>
 80063f8:	2380      	movs	r3, #128	@ 0x80
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fe:	e0a4      	b.n	800654a <UART_SetConfig+0x5a6>
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a8f      	ldr	r2, [pc, #572]	@ (8006644 <UART_SetConfig+0x6a0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d130      	bne.n	800646c <UART_SetConfig+0x4c8>
 800640a:	4b8d      	ldr	r3, [pc, #564]	@ (8006640 <UART_SetConfig+0x69c>)
 800640c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	2b05      	cmp	r3, #5
 8006414:	d826      	bhi.n	8006464 <UART_SetConfig+0x4c0>
 8006416:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <UART_SetConfig+0x478>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006435 	.word	0x08006435
 8006420:	0800643d 	.word	0x0800643d
 8006424:	08006445 	.word	0x08006445
 8006428:	0800644d 	.word	0x0800644d
 800642c:	08006455 	.word	0x08006455
 8006430:	0800645d 	.word	0x0800645d
 8006434:	2300      	movs	r3, #0
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643a:	e086      	b.n	800654a <UART_SetConfig+0x5a6>
 800643c:	2304      	movs	r3, #4
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006442:	e082      	b.n	800654a <UART_SetConfig+0x5a6>
 8006444:	2308      	movs	r3, #8
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800644a:	e07e      	b.n	800654a <UART_SetConfig+0x5a6>
 800644c:	2310      	movs	r3, #16
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006452:	e07a      	b.n	800654a <UART_SetConfig+0x5a6>
 8006454:	2320      	movs	r3, #32
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800645a:	e076      	b.n	800654a <UART_SetConfig+0x5a6>
 800645c:	2340      	movs	r3, #64	@ 0x40
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006462:	e072      	b.n	800654a <UART_SetConfig+0x5a6>
 8006464:	2380      	movs	r3, #128	@ 0x80
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646a:	e06e      	b.n	800654a <UART_SetConfig+0x5a6>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a75      	ldr	r2, [pc, #468]	@ (8006648 <UART_SetConfig+0x6a4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d130      	bne.n	80064d8 <UART_SetConfig+0x534>
 8006476:	4b72      	ldr	r3, [pc, #456]	@ (8006640 <UART_SetConfig+0x69c>)
 8006478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	2b05      	cmp	r3, #5
 8006480:	d826      	bhi.n	80064d0 <UART_SetConfig+0x52c>
 8006482:	a201      	add	r2, pc, #4	@ (adr r2, 8006488 <UART_SetConfig+0x4e4>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	080064a1 	.word	0x080064a1
 800648c:	080064a9 	.word	0x080064a9
 8006490:	080064b1 	.word	0x080064b1
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064c1 	.word	0x080064c1
 800649c:	080064c9 	.word	0x080064c9
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064a6:	e050      	b.n	800654a <UART_SetConfig+0x5a6>
 80064a8:	2304      	movs	r3, #4
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ae:	e04c      	b.n	800654a <UART_SetConfig+0x5a6>
 80064b0:	2308      	movs	r3, #8
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b6:	e048      	b.n	800654a <UART_SetConfig+0x5a6>
 80064b8:	2310      	movs	r3, #16
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064be:	e044      	b.n	800654a <UART_SetConfig+0x5a6>
 80064c0:	2320      	movs	r3, #32
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064c6:	e040      	b.n	800654a <UART_SetConfig+0x5a6>
 80064c8:	2340      	movs	r3, #64	@ 0x40
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ce:	e03c      	b.n	800654a <UART_SetConfig+0x5a6>
 80064d0:	2380      	movs	r3, #128	@ 0x80
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d6:	e038      	b.n	800654a <UART_SetConfig+0x5a6>
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a5b      	ldr	r2, [pc, #364]	@ (800664c <UART_SetConfig+0x6a8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d130      	bne.n	8006544 <UART_SetConfig+0x5a0>
 80064e2:	4b57      	ldr	r3, [pc, #348]	@ (8006640 <UART_SetConfig+0x69c>)
 80064e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	2b05      	cmp	r3, #5
 80064ec:	d826      	bhi.n	800653c <UART_SetConfig+0x598>
 80064ee:	a201      	add	r2, pc, #4	@ (adr r2, 80064f4 <UART_SetConfig+0x550>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	0800650d 	.word	0x0800650d
 80064f8:	08006515 	.word	0x08006515
 80064fc:	0800651d 	.word	0x0800651d
 8006500:	08006525 	.word	0x08006525
 8006504:	0800652d 	.word	0x0800652d
 8006508:	08006535 	.word	0x08006535
 800650c:	2302      	movs	r3, #2
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006512:	e01a      	b.n	800654a <UART_SetConfig+0x5a6>
 8006514:	2304      	movs	r3, #4
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651a:	e016      	b.n	800654a <UART_SetConfig+0x5a6>
 800651c:	2308      	movs	r3, #8
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006522:	e012      	b.n	800654a <UART_SetConfig+0x5a6>
 8006524:	2310      	movs	r3, #16
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652a:	e00e      	b.n	800654a <UART_SetConfig+0x5a6>
 800652c:	2320      	movs	r3, #32
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006532:	e00a      	b.n	800654a <UART_SetConfig+0x5a6>
 8006534:	2340      	movs	r3, #64	@ 0x40
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653a:	e006      	b.n	800654a <UART_SetConfig+0x5a6>
 800653c:	2380      	movs	r3, #128	@ 0x80
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006542:	e002      	b.n	800654a <UART_SetConfig+0x5a6>
 8006544:	2380      	movs	r3, #128	@ 0x80
 8006546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a3f      	ldr	r2, [pc, #252]	@ (800664c <UART_SetConfig+0x6a8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	f040 80f8 	bne.w	8006746 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006556:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800655a:	2b20      	cmp	r3, #32
 800655c:	dc46      	bgt.n	80065ec <UART_SetConfig+0x648>
 800655e:	2b02      	cmp	r3, #2
 8006560:	f2c0 8082 	blt.w	8006668 <UART_SetConfig+0x6c4>
 8006564:	3b02      	subs	r3, #2
 8006566:	2b1e      	cmp	r3, #30
 8006568:	d87e      	bhi.n	8006668 <UART_SetConfig+0x6c4>
 800656a:	a201      	add	r2, pc, #4	@ (adr r2, 8006570 <UART_SetConfig+0x5cc>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	080065f3 	.word	0x080065f3
 8006574:	08006669 	.word	0x08006669
 8006578:	080065fb 	.word	0x080065fb
 800657c:	08006669 	.word	0x08006669
 8006580:	08006669 	.word	0x08006669
 8006584:	08006669 	.word	0x08006669
 8006588:	0800660b 	.word	0x0800660b
 800658c:	08006669 	.word	0x08006669
 8006590:	08006669 	.word	0x08006669
 8006594:	08006669 	.word	0x08006669
 8006598:	08006669 	.word	0x08006669
 800659c:	08006669 	.word	0x08006669
 80065a0:	08006669 	.word	0x08006669
 80065a4:	08006669 	.word	0x08006669
 80065a8:	0800661b 	.word	0x0800661b
 80065ac:	08006669 	.word	0x08006669
 80065b0:	08006669 	.word	0x08006669
 80065b4:	08006669 	.word	0x08006669
 80065b8:	08006669 	.word	0x08006669
 80065bc:	08006669 	.word	0x08006669
 80065c0:	08006669 	.word	0x08006669
 80065c4:	08006669 	.word	0x08006669
 80065c8:	08006669 	.word	0x08006669
 80065cc:	08006669 	.word	0x08006669
 80065d0:	08006669 	.word	0x08006669
 80065d4:	08006669 	.word	0x08006669
 80065d8:	08006669 	.word	0x08006669
 80065dc:	08006669 	.word	0x08006669
 80065e0:	08006669 	.word	0x08006669
 80065e4:	08006669 	.word	0x08006669
 80065e8:	0800665b 	.word	0x0800665b
 80065ec:	2b40      	cmp	r3, #64	@ 0x40
 80065ee:	d037      	beq.n	8006660 <UART_SetConfig+0x6bc>
 80065f0:	e03a      	b.n	8006668 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80065f2:	f7fe fc23 	bl	8004e3c <HAL_RCCEx_GetD3PCLK1Freq>
 80065f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065f8:	e03c      	b.n	8006674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe fc32 	bl	8004e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006608:	e034      	b.n	8006674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800660a:	f107 0318 	add.w	r3, r7, #24
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe fd7e 	bl	8005110 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006618:	e02c      	b.n	8006674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800661a:	4b09      	ldr	r3, [pc, #36]	@ (8006640 <UART_SetConfig+0x69c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006626:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <UART_SetConfig+0x69c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	08db      	lsrs	r3, r3, #3
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	4a07      	ldr	r2, [pc, #28]	@ (8006650 <UART_SetConfig+0x6ac>)
 8006632:	fa22 f303 	lsr.w	r3, r2, r3
 8006636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006638:	e01c      	b.n	8006674 <UART_SetConfig+0x6d0>
 800663a:	bf00      	nop
 800663c:	40011400 	.word	0x40011400
 8006640:	58024400 	.word	0x58024400
 8006644:	40007800 	.word	0x40007800
 8006648:	40007c00 	.word	0x40007c00
 800664c:	58000c00 	.word	0x58000c00
 8006650:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006654:	4b9d      	ldr	r3, [pc, #628]	@ (80068cc <UART_SetConfig+0x928>)
 8006656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006658:	e00c      	b.n	8006674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800665a:	4b9d      	ldr	r3, [pc, #628]	@ (80068d0 <UART_SetConfig+0x92c>)
 800665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800665e:	e009      	b.n	8006674 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006660:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006666:	e005      	b.n	8006674 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006672:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 81de 	beq.w	8006a38 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006680:	4a94      	ldr	r2, [pc, #592]	@ (80068d4 <UART_SetConfig+0x930>)
 8006682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006686:	461a      	mov	r2, r3
 8006688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668a:	fbb3 f3f2 	udiv	r3, r3, r2
 800668e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	4613      	mov	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	4413      	add	r3, r2
 800669a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800669c:	429a      	cmp	r2, r3
 800669e:	d305      	bcc.n	80066ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d903      	bls.n	80066b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80066b2:	e1c1      	b.n	8006a38 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066b6:	2200      	movs	r2, #0
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	60fa      	str	r2, [r7, #12]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c0:	4a84      	ldr	r2, [pc, #528]	@ (80068d4 <UART_SetConfig+0x930>)
 80066c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	2200      	movs	r2, #0
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066d6:	f7f9 fdff 	bl	80002d8 <__aeabi_uldivmod>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4610      	mov	r0, r2
 80066e0:	4619      	mov	r1, r3
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	020b      	lsls	r3, r1, #8
 80066ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066f0:	0202      	lsls	r2, r0, #8
 80066f2:	6979      	ldr	r1, [r7, #20]
 80066f4:	6849      	ldr	r1, [r1, #4]
 80066f6:	0849      	lsrs	r1, r1, #1
 80066f8:	2000      	movs	r0, #0
 80066fa:	460c      	mov	r4, r1
 80066fc:	4605      	mov	r5, r0
 80066fe:	eb12 0804 	adds.w	r8, r2, r4
 8006702:	eb43 0905 	adc.w	r9, r3, r5
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	469a      	mov	sl, r3
 800670e:	4693      	mov	fp, r2
 8006710:	4652      	mov	r2, sl
 8006712:	465b      	mov	r3, fp
 8006714:	4640      	mov	r0, r8
 8006716:	4649      	mov	r1, r9
 8006718:	f7f9 fdde 	bl	80002d8 <__aeabi_uldivmod>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4613      	mov	r3, r2
 8006722:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006726:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800672a:	d308      	bcc.n	800673e <UART_SetConfig+0x79a>
 800672c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006732:	d204      	bcs.n	800673e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800673a:	60da      	str	r2, [r3, #12]
 800673c:	e17c      	b.n	8006a38 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006744:	e178      	b.n	8006a38 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800674e:	f040 80c5 	bne.w	80068dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006752:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006756:	2b20      	cmp	r3, #32
 8006758:	dc48      	bgt.n	80067ec <UART_SetConfig+0x848>
 800675a:	2b00      	cmp	r3, #0
 800675c:	db7b      	blt.n	8006856 <UART_SetConfig+0x8b2>
 800675e:	2b20      	cmp	r3, #32
 8006760:	d879      	bhi.n	8006856 <UART_SetConfig+0x8b2>
 8006762:	a201      	add	r2, pc, #4	@ (adr r2, 8006768 <UART_SetConfig+0x7c4>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	080067f3 	.word	0x080067f3
 800676c:	080067fb 	.word	0x080067fb
 8006770:	08006857 	.word	0x08006857
 8006774:	08006857 	.word	0x08006857
 8006778:	08006803 	.word	0x08006803
 800677c:	08006857 	.word	0x08006857
 8006780:	08006857 	.word	0x08006857
 8006784:	08006857 	.word	0x08006857
 8006788:	08006813 	.word	0x08006813
 800678c:	08006857 	.word	0x08006857
 8006790:	08006857 	.word	0x08006857
 8006794:	08006857 	.word	0x08006857
 8006798:	08006857 	.word	0x08006857
 800679c:	08006857 	.word	0x08006857
 80067a0:	08006857 	.word	0x08006857
 80067a4:	08006857 	.word	0x08006857
 80067a8:	08006823 	.word	0x08006823
 80067ac:	08006857 	.word	0x08006857
 80067b0:	08006857 	.word	0x08006857
 80067b4:	08006857 	.word	0x08006857
 80067b8:	08006857 	.word	0x08006857
 80067bc:	08006857 	.word	0x08006857
 80067c0:	08006857 	.word	0x08006857
 80067c4:	08006857 	.word	0x08006857
 80067c8:	08006857 	.word	0x08006857
 80067cc:	08006857 	.word	0x08006857
 80067d0:	08006857 	.word	0x08006857
 80067d4:	08006857 	.word	0x08006857
 80067d8:	08006857 	.word	0x08006857
 80067dc:	08006857 	.word	0x08006857
 80067e0:	08006857 	.word	0x08006857
 80067e4:	08006857 	.word	0x08006857
 80067e8:	08006849 	.word	0x08006849
 80067ec:	2b40      	cmp	r3, #64	@ 0x40
 80067ee:	d02e      	beq.n	800684e <UART_SetConfig+0x8aa>
 80067f0:	e031      	b.n	8006856 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f2:	f7fd f8ed 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 80067f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80067f8:	e033      	b.n	8006862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067fa:	f7fd f8ff 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 80067fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006800:	e02f      	b.n	8006862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fb2e 	bl	8004e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006810:	e027      	b.n	8006862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006812:	f107 0318 	add.w	r3, r7, #24
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fc7a 	bl	8005110 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006820:	e01f      	b.n	8006862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006822:	4b2d      	ldr	r3, [pc, #180]	@ (80068d8 <UART_SetConfig+0x934>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800682e:	4b2a      	ldr	r3, [pc, #168]	@ (80068d8 <UART_SetConfig+0x934>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	08db      	lsrs	r3, r3, #3
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	4a24      	ldr	r2, [pc, #144]	@ (80068cc <UART_SetConfig+0x928>)
 800683a:	fa22 f303 	lsr.w	r3, r2, r3
 800683e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006840:	e00f      	b.n	8006862 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006842:	4b22      	ldr	r3, [pc, #136]	@ (80068cc <UART_SetConfig+0x928>)
 8006844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006846:	e00c      	b.n	8006862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006848:	4b21      	ldr	r3, [pc, #132]	@ (80068d0 <UART_SetConfig+0x92c>)
 800684a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800684c:	e009      	b.n	8006862 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006854:	e005      	b.n	8006862 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006860:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80e7 	beq.w	8006a38 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686e:	4a19      	ldr	r2, [pc, #100]	@ (80068d4 <UART_SetConfig+0x930>)
 8006870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006874:	461a      	mov	r2, r3
 8006876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006878:	fbb3 f3f2 	udiv	r3, r3, r2
 800687c:	005a      	lsls	r2, r3, #1
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	441a      	add	r2, r3
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	fbb2 f3f3 	udiv	r3, r2, r3
 800688e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006892:	2b0f      	cmp	r3, #15
 8006894:	d916      	bls.n	80068c4 <UART_SetConfig+0x920>
 8006896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800689c:	d212      	bcs.n	80068c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f023 030f 	bic.w	r3, r3, #15
 80068a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068aa:	085b      	lsrs	r3, r3, #1
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80068b6:	4313      	orrs	r3, r2
 80068b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80068c0:	60da      	str	r2, [r3, #12]
 80068c2:	e0b9      	b.n	8006a38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80068ca:	e0b5      	b.n	8006a38 <UART_SetConfig+0xa94>
 80068cc:	03d09000 	.word	0x03d09000
 80068d0:	003d0900 	.word	0x003d0900
 80068d4:	080080fc 	.word	0x080080fc
 80068d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80068dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	dc49      	bgt.n	8006978 <UART_SetConfig+0x9d4>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	db7c      	blt.n	80069e2 <UART_SetConfig+0xa3e>
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d87a      	bhi.n	80069e2 <UART_SetConfig+0xa3e>
 80068ec:	a201      	add	r2, pc, #4	@ (adr r2, 80068f4 <UART_SetConfig+0x950>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	0800697f 	.word	0x0800697f
 80068f8:	08006987 	.word	0x08006987
 80068fc:	080069e3 	.word	0x080069e3
 8006900:	080069e3 	.word	0x080069e3
 8006904:	0800698f 	.word	0x0800698f
 8006908:	080069e3 	.word	0x080069e3
 800690c:	080069e3 	.word	0x080069e3
 8006910:	080069e3 	.word	0x080069e3
 8006914:	0800699f 	.word	0x0800699f
 8006918:	080069e3 	.word	0x080069e3
 800691c:	080069e3 	.word	0x080069e3
 8006920:	080069e3 	.word	0x080069e3
 8006924:	080069e3 	.word	0x080069e3
 8006928:	080069e3 	.word	0x080069e3
 800692c:	080069e3 	.word	0x080069e3
 8006930:	080069e3 	.word	0x080069e3
 8006934:	080069af 	.word	0x080069af
 8006938:	080069e3 	.word	0x080069e3
 800693c:	080069e3 	.word	0x080069e3
 8006940:	080069e3 	.word	0x080069e3
 8006944:	080069e3 	.word	0x080069e3
 8006948:	080069e3 	.word	0x080069e3
 800694c:	080069e3 	.word	0x080069e3
 8006950:	080069e3 	.word	0x080069e3
 8006954:	080069e3 	.word	0x080069e3
 8006958:	080069e3 	.word	0x080069e3
 800695c:	080069e3 	.word	0x080069e3
 8006960:	080069e3 	.word	0x080069e3
 8006964:	080069e3 	.word	0x080069e3
 8006968:	080069e3 	.word	0x080069e3
 800696c:	080069e3 	.word	0x080069e3
 8006970:	080069e3 	.word	0x080069e3
 8006974:	080069d5 	.word	0x080069d5
 8006978:	2b40      	cmp	r3, #64	@ 0x40
 800697a:	d02e      	beq.n	80069da <UART_SetConfig+0xa36>
 800697c:	e031      	b.n	80069e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800697e:	f7fd f827 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 8006982:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006984:	e033      	b.n	80069ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006986:	f7fd f839 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 800698a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800698c:	e02f      	b.n	80069ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800698e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fa68 	bl	8004e68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699c:	e027      	b.n	80069ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800699e:	f107 0318 	add.w	r3, r7, #24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe fbb4 	bl	8005110 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ac:	e01f      	b.n	80069ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006a64 <UART_SetConfig+0xac0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006a64 <UART_SetConfig+0xac0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	08db      	lsrs	r3, r3, #3
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	4a28      	ldr	r2, [pc, #160]	@ (8006a68 <UART_SetConfig+0xac4>)
 80069c6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069cc:	e00f      	b.n	80069ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80069ce:	4b26      	ldr	r3, [pc, #152]	@ (8006a68 <UART_SetConfig+0xac4>)
 80069d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069d2:	e00c      	b.n	80069ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069d4:	4b25      	ldr	r3, [pc, #148]	@ (8006a6c <UART_SetConfig+0xac8>)
 80069d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069d8:	e009      	b.n	80069ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069e0:	e005      	b.n	80069ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80069ec:	bf00      	nop
    }

    if (pclk != 0U)
 80069ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d021      	beq.n	8006a38 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a70 <UART_SetConfig+0xacc>)
 80069fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069fe:	461a      	mov	r2, r3
 8006a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a02:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	441a      	add	r2, r3
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1a:	2b0f      	cmp	r3, #15
 8006a1c:	d909      	bls.n	8006a32 <UART_SetConfig+0xa8e>
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a24:	d205      	bcs.n	8006a32 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60da      	str	r2, [r3, #12]
 8006a30:	e002      	b.n	8006a38 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2200      	movs	r2, #0
 8006a52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006a54:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3748      	adds	r7, #72	@ 0x48
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a62:	bf00      	nop
 8006a64:	58024400 	.word	0x58024400
 8006a68:	03d09000 	.word	0x03d09000
 8006a6c:	003d0900 	.word	0x003d0900
 8006a70:	080080fc 	.word	0x080080fc

08006a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a80:	f003 0308 	and.w	r3, r3, #8
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00a      	beq.n	8006a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00a      	beq.n	8006ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00a      	beq.n	8006b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01a      	beq.n	8006b8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b72:	d10a      	bne.n	8006b8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	605a      	str	r2, [r3, #4]
  }
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b098      	sub	sp, #96	@ 0x60
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bc8:	f7fa fe40 	bl	800184c <HAL_GetTick>
 8006bcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0308 	and.w	r3, r3, #8
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d12f      	bne.n	8006c3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006be4:	2200      	movs	r2, #0
 8006be6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f88e 	bl	8006d0c <UART_WaitOnFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d022      	beq.n	8006c3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfe:	e853 3f00 	ldrex	r3, [r3]
 8006c02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e6      	bne.n	8006bf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e063      	b.n	8006d04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d149      	bne.n	8006cde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c52:	2200      	movs	r2, #0
 8006c54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f857 	bl	8006d0c <UART_WaitOnFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d03c      	beq.n	8006cde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	e853 3f00 	ldrex	r3, [r3]
 8006c70:	623b      	str	r3, [r7, #32]
   return(result);
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c82:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e6      	bne.n	8006c64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f023 0301 	bic.w	r3, r3, #1
 8006cac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3308      	adds	r3, #8
 8006cb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cb6:	61fa      	str	r2, [r7, #28]
 8006cb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	69b9      	ldr	r1, [r7, #24]
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e5      	bne.n	8006c96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e012      	b.n	8006d04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3758      	adds	r7, #88	@ 0x58
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1c:	e04f      	b.n	8006dbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d24:	d04b      	beq.n	8006dbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d26:	f7fa fd91 	bl	800184c <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d302      	bcc.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e04e      	b.n	8006dde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d037      	beq.n	8006dbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b80      	cmp	r3, #128	@ 0x80
 8006d52:	d034      	beq.n	8006dbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b40      	cmp	r3, #64	@ 0x40
 8006d58:	d031      	beq.n	8006dbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d110      	bne.n	8006d8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f95b 	bl	800702c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e029      	b.n	8006dde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d98:	d111      	bne.n	8006dbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006da2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f941 	bl	800702c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e00f      	b.n	8006dde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	69da      	ldr	r2, [r3, #28]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	bf0c      	ite	eq
 8006dce:	2301      	moveq	r3, #1
 8006dd0:	2300      	movne	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d0a0      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b0a3      	sub	sp, #140	@ 0x8c
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	4613      	mov	r3, r2
 8006df4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	88fa      	ldrh	r2, [r7, #6]
 8006e00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	88fa      	ldrh	r2, [r7, #6]
 8006e08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e1a:	d10e      	bne.n	8006e3a <UART_Start_Receive_IT+0x52>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d105      	bne.n	8006e30 <UART_Start_Receive_IT+0x48>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006e2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e2e:	e02d      	b.n	8006e8c <UART_Start_Receive_IT+0xa4>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	22ff      	movs	r2, #255	@ 0xff
 8006e34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e38:	e028      	b.n	8006e8c <UART_Start_Receive_IT+0xa4>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10d      	bne.n	8006e5e <UART_Start_Receive_IT+0x76>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d104      	bne.n	8006e54 <UART_Start_Receive_IT+0x6c>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	22ff      	movs	r2, #255	@ 0xff
 8006e4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e52:	e01b      	b.n	8006e8c <UART_Start_Receive_IT+0xa4>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	227f      	movs	r2, #127	@ 0x7f
 8006e58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e5c:	e016      	b.n	8006e8c <UART_Start_Receive_IT+0xa4>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e66:	d10d      	bne.n	8006e84 <UART_Start_Receive_IT+0x9c>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d104      	bne.n	8006e7a <UART_Start_Receive_IT+0x92>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	227f      	movs	r2, #127	@ 0x7f
 8006e74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e78:	e008      	b.n	8006e8c <UART_Start_Receive_IT+0xa4>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	223f      	movs	r2, #63	@ 0x3f
 8006e7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e82:	e003      	b.n	8006e8c <UART_Start_Receive_IT+0xa4>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2222      	movs	r2, #34	@ 0x22
 8006e98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ea6:	e853 3f00 	ldrex	r3, [r3]
 8006eaa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006eac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3308      	adds	r3, #8
 8006ebc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006ec0:	673a      	str	r2, [r7, #112]	@ 0x70
 8006ec2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006ec6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006ece:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e3      	bne.n	8006e9c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006edc:	d14f      	bne.n	8006f7e <UART_Start_Receive_IT+0x196>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ee4:	88fa      	ldrh	r2, [r7, #6]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d349      	bcc.n	8006f7e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef2:	d107      	bne.n	8006f04 <UART_Start_Receive_IT+0x11c>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d103      	bne.n	8006f04 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4a47      	ldr	r2, [pc, #284]	@ (800701c <UART_Start_Receive_IT+0x234>)
 8006f00:	675a      	str	r2, [r3, #116]	@ 0x74
 8006f02:	e002      	b.n	8006f0a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a46      	ldr	r2, [pc, #280]	@ (8007020 <UART_Start_Receive_IT+0x238>)
 8006f08:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d01a      	beq.n	8006f48 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f36:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006f3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e4      	bne.n	8006f12 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3308      	adds	r3, #8
 8006f66:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006f68:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006f6a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e5      	bne.n	8006f48 <UART_Start_Receive_IT+0x160>
 8006f7c:	e046      	b.n	800700c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f86:	d107      	bne.n	8006f98 <UART_Start_Receive_IT+0x1b0>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4a24      	ldr	r2, [pc, #144]	@ (8007024 <UART_Start_Receive_IT+0x23c>)
 8006f94:	675a      	str	r2, [r3, #116]	@ 0x74
 8006f96:	e002      	b.n	8006f9e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4a23      	ldr	r2, [pc, #140]	@ (8007028 <UART_Start_Receive_IT+0x240>)
 8006f9c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d019      	beq.n	8006fda <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fae:	e853 3f00 	ldrex	r3, [r3]
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006fba:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fcc:	e841 2300 	strex	r3, r2, [r1]
 8006fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e6      	bne.n	8006fa6 <UART_Start_Receive_IT+0x1be>
 8006fd8:	e018      	b.n	800700c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f043 0320 	orr.w	r3, r3, #32
 8006fee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ff8:	623b      	str	r3, [r7, #32]
 8006ffa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	69f9      	ldr	r1, [r7, #28]
 8006ffe:	6a3a      	ldr	r2, [r7, #32]
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	61bb      	str	r3, [r7, #24]
   return(result);
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e6      	bne.n	8006fda <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	378c      	adds	r7, #140	@ 0x8c
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	08007849 	.word	0x08007849
 8007020:	080074e5 	.word	0x080074e5
 8007024:	0800732d 	.word	0x0800732d
 8007028:	08007175 	.word	0x08007175

0800702c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800702c:	b480      	push	{r7}
 800702e:	b095      	sub	sp, #84	@ 0x54
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007048:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007052:	643b      	str	r3, [r7, #64]	@ 0x40
 8007054:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007058:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e6      	bne.n	8007034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	61fb      	str	r3, [r7, #28]
   return(result);
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	4b1e      	ldr	r3, [pc, #120]	@ (80070f4 <UART_EndRxTransfer+0xc8>)
 800707a:	4013      	ands	r3, r2
 800707c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3308      	adds	r3, #8
 8007084:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007086:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007088:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800708c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e5      	bne.n	8007066 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d118      	bne.n	80070d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f023 0310 	bic.w	r3, r3, #16
 80070b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6979      	ldr	r1, [r7, #20]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	613b      	str	r3, [r7, #16]
   return(result);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80070e8:	bf00      	nop
 80070ea:	3754      	adds	r7, #84	@ 0x54
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	effffffe 	.word	0xeffffffe

080070f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f7fe ff32 	bl	8005f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	60bb      	str	r3, [r7, #8]
   return(result);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007138:	61fb      	str	r3, [r7, #28]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6979      	ldr	r1, [r7, #20]
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	613b      	str	r3, [r7, #16]
   return(result);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e6      	bne.n	8007124 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2220      	movs	r2, #32
 800715a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7fe fefd 	bl	8005f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800716a:	bf00      	nop
 800716c:	3720      	adds	r7, #32
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b09c      	sub	sp, #112	@ 0x70
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007182:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800718c:	2b22      	cmp	r3, #34	@ 0x22
 800718e:	f040 80be 	bne.w	800730e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007198:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800719c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071a0:	b2d9      	uxtb	r1, r3
 80071a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ac:	400a      	ands	r2, r1
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f040 80a1 	bne.w	800731e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007200:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e6      	bne.n	80071dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3308      	adds	r3, #8
 8007214:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800721e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007220:	f023 0301 	bic.w	r3, r3, #1
 8007224:	667b      	str	r3, [r7, #100]	@ 0x64
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800722e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800723c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e5      	bne.n	800720e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a33      	ldr	r2, [pc, #204]	@ (8007328 <UART_RxISR_8BIT+0x1b4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d01f      	beq.n	80072a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d018      	beq.n	80072a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	623b      	str	r3, [r7, #32]
   return(result);
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007282:	663b      	str	r3, [r7, #96]	@ 0x60
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800728c:	633b      	str	r3, [r7, #48]	@ 0x30
 800728e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800729a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e6      	bne.n	800726e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d12e      	bne.n	8007306 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0310 	bic.w	r3, r3, #16
 80072c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072cc:	61fb      	str	r3, [r7, #28]
 80072ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	69b9      	ldr	r1, [r7, #24]
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	617b      	str	r3, [r7, #20]
   return(result);
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e6      	bne.n	80072ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	2b10      	cmp	r3, #16
 80072ec:	d103      	bne.n	80072f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2210      	movs	r2, #16
 80072f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fe fe44 	bl	8005f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007304:	e00b      	b.n	800731e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7f9 fb2c 	bl	8000964 <HAL_UART_RxCpltCallback>
}
 800730c:	e007      	b.n	800731e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0208 	orr.w	r2, r2, #8
 800731c:	619a      	str	r2, [r3, #24]
}
 800731e:	bf00      	nop
 8007320:	3770      	adds	r7, #112	@ 0x70
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	58000c00 	.word	0x58000c00

0800732c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b09c      	sub	sp, #112	@ 0x70
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800733a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007344:	2b22      	cmp	r3, #34	@ 0x22
 8007346:	f040 80be 	bne.w	80074c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007350:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007358:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800735a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800735e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007362:	4013      	ands	r3, r2
 8007364:	b29a      	uxth	r2, r3
 8007366:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007368:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800736e:	1c9a      	adds	r2, r3, #2
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800738c:	b29b      	uxth	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	f040 80a1 	bne.w	80074d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80073a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80073b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e6      	bne.n	8007394 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d8:	f023 0301 	bic.w	r3, r3, #1
 80073dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3308      	adds	r3, #8
 80073e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80073e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80073e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e5      	bne.n	80073c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a33      	ldr	r2, [pc, #204]	@ (80074e0 <UART_RxISR_16BIT+0x1b4>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d01f      	beq.n	8007458 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d018      	beq.n	8007458 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	61fb      	str	r3, [r7, #28]
   return(result);
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800743a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	461a      	mov	r2, r3
 8007442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007446:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800744a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e6      	bne.n	8007426 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800745c:	2b01      	cmp	r3, #1
 800745e:	d12e      	bne.n	80074be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	60bb      	str	r3, [r7, #8]
   return(result);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f023 0310 	bic.w	r3, r3, #16
 800747a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007484:	61bb      	str	r3, [r7, #24]
 8007486:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6979      	ldr	r1, [r7, #20]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	613b      	str	r3, [r7, #16]
   return(result);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e6      	bne.n	8007466 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	2b10      	cmp	r3, #16
 80074a4:	d103      	bne.n	80074ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2210      	movs	r2, #16
 80074ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7fe fd68 	bl	8005f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074bc:	e00b      	b.n	80074d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7f9 fa50 	bl	8000964 <HAL_UART_RxCpltCallback>
}
 80074c4:	e007      	b.n	80074d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	699a      	ldr	r2, [r3, #24]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f042 0208 	orr.w	r2, r2, #8
 80074d4:	619a      	str	r2, [r3, #24]
}
 80074d6:	bf00      	nop
 80074d8:	3770      	adds	r7, #112	@ 0x70
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	58000c00 	.word	0x58000c00

080074e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b0ac      	sub	sp, #176	@ 0xb0
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80074f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800751a:	2b22      	cmp	r3, #34	@ 0x22
 800751c:	f040 8181 	bne.w	8007822 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007526:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800752a:	e124      	b.n	8007776 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007532:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007536:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800753a:	b2d9      	uxtb	r1, r3
 800753c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007540:	b2da      	uxtb	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007546:	400a      	ands	r2, r1
 8007548:	b2d2      	uxtb	r2, r2
 800754a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007576:	f003 0307 	and.w	r3, r3, #7
 800757a:	2b00      	cmp	r3, #0
 800757c:	d053      	beq.n	8007626 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800757e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d011      	beq.n	80075ae <UART_RxISR_8BIT_FIFOEN+0xca>
 800758a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800758e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2201      	movs	r2, #1
 800759c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a4:	f043 0201 	orr.w	r2, r3, #1
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d011      	beq.n	80075de <UART_RxISR_8BIT_FIFOEN+0xfa>
 80075ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00b      	beq.n	80075de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2202      	movs	r2, #2
 80075cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075d4:	f043 0204 	orr.w	r2, r3, #4
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075e2:	f003 0304 	and.w	r3, r3, #4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d011      	beq.n	800760e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80075ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2204      	movs	r2, #4
 80075fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007604:	f043 0202 	orr.w	r2, r3, #2
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007614:	2b00      	cmp	r3, #0
 8007616:	d006      	beq.n	8007626 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7fe fcad 	bl	8005f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	f040 80a1 	bne.w	8007776 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007656:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007658:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800765c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007664:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e4      	bne.n	8007634 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3308      	adds	r3, #8
 8007670:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800767a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800767c:	4b6f      	ldr	r3, [pc, #444]	@ (800783c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800767e:	4013      	ands	r3, r2
 8007680:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800768e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007690:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007694:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800769c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e3      	bne.n	800766a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a61      	ldr	r2, [pc, #388]	@ (8007840 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d021      	beq.n	8007704 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01a      	beq.n	8007704 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80076dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80076f2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80076f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80076fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e4      	bne.n	80076ce <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007708:	2b01      	cmp	r3, #1
 800770a:	d130      	bne.n	800776e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007722:	f023 0310 	bic.w	r3, r3, #16
 8007726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007734:	643b      	str	r3, [r7, #64]	@ 0x40
 8007736:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800773a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800773c:	e841 2300 	strex	r3, r2, [r1]
 8007740:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e4      	bne.n	8007712 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f003 0310 	and.w	r3, r3, #16
 8007752:	2b10      	cmp	r3, #16
 8007754:	d103      	bne.n	800775e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2210      	movs	r2, #16
 800775c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fe fc10 	bl	8005f8c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800776c:	e00e      	b.n	800778c <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7f9 f8f8 	bl	8000964 <HAL_UART_RxCpltCallback>
        break;
 8007774:	e00a      	b.n	800778c <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007776:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800777a:	2b00      	cmp	r3, #0
 800777c:	d006      	beq.n	800778c <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800777e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007782:	f003 0320 	and.w	r3, r3, #32
 8007786:	2b00      	cmp	r3, #0
 8007788:	f47f aed0 	bne.w	800752c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007792:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007796:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800779a:	2b00      	cmp	r3, #0
 800779c:	d049      	beq.n	8007832 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077a4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d242      	bcs.n	8007832 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80077d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e3      	bne.n	80077ac <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a17      	ldr	r2, [pc, #92]	@ (8007844 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80077e8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f043 0320 	orr.w	r3, r3, #32
 80077fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800780c:	61bb      	str	r3, [r7, #24]
 800780e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6979      	ldr	r1, [r7, #20]
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	613b      	str	r3, [r7, #16]
   return(result);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e4      	bne.n	80077ea <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007820:	e007      	b.n	8007832 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	699a      	ldr	r2, [r3, #24]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0208 	orr.w	r2, r2, #8
 8007830:	619a      	str	r2, [r3, #24]
}
 8007832:	bf00      	nop
 8007834:	37b0      	adds	r7, #176	@ 0xb0
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	effffffe 	.word	0xeffffffe
 8007840:	58000c00 	.word	0x58000c00
 8007844:	08007175 	.word	0x08007175

08007848 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b0ae      	sub	sp, #184	@ 0xb8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007856:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800787e:	2b22      	cmp	r3, #34	@ 0x22
 8007880:	f040 8185 	bne.w	8007b8e <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800788a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800788e:	e128      	b.n	8007ae2 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007896:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800789e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80078a2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80078a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80078aa:	4013      	ands	r3, r2
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078b8:	1c9a      	adds	r2, r3, #2
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d053      	beq.n	800798e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d011      	beq.n	8007916 <UART_RxISR_16BIT_FIFOEN+0xce>
 80078f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2201      	movs	r2, #1
 8007904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790c:	f043 0201 	orr.w	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007916:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d011      	beq.n	8007946 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00b      	beq.n	8007946 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2202      	movs	r2, #2
 8007934:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793c:	f043 0204 	orr.w	r2, r3, #4
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007946:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	2b00      	cmp	r3, #0
 8007950:	d011      	beq.n	8007976 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007952:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2204      	movs	r2, #4
 8007964:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800796c:	f043 0202 	orr.w	r2, r3, #2
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800797c:	2b00      	cmp	r3, #0
 800797e:	d006      	beq.n	800798e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7fe faf9 	bl	8005f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	f040 80a3 	bne.w	8007ae2 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e2      	bne.n	800799c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3308      	adds	r3, #8
 80079dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80079e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80079e8:	4b6f      	ldr	r3, [pc, #444]	@ (8007ba8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80079fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e3      	bne.n	80079d6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a61      	ldr	r2, [pc, #388]	@ (8007bac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d021      	beq.n	8007a70 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01a      	beq.n	8007a70 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a5e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e4      	bne.n	8007a3a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d130      	bne.n	8007ada <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a8e:	f023 0310 	bic.w	r3, r3, #16
 8007a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007aa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aa2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e4      	bne.n	8007a7e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f003 0310 	and.w	r3, r3, #16
 8007abe:	2b10      	cmp	r3, #16
 8007ac0:	d103      	bne.n	8007aca <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2210      	movs	r2, #16
 8007ac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7fe fa5a 	bl	8005f8c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007ad8:	e00e      	b.n	8007af8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7f8 ff42 	bl	8000964 <HAL_UART_RxCpltCallback>
        break;
 8007ae0:	e00a      	b.n	8007af8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ae2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d006      	beq.n	8007af8 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8007aea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f47f aecc 	bne.w	8007890 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007afe:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b02:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d049      	beq.n	8007b9e <UART_RxISR_16BIT_FIFOEN+0x356>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b10:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d242      	bcs.n	8007b9e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	623b      	str	r3, [r7, #32]
   return(result);
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3308      	adds	r3, #8
 8007b38:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007b3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e3      	bne.n	8007b18 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a17      	ldr	r2, [pc, #92]	@ (8007bb0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007b54:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f043 0320 	orr.w	r3, r3, #32
 8007b6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b78:	61fb      	str	r3, [r7, #28]
 8007b7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	69b9      	ldr	r1, [r7, #24]
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	617b      	str	r3, [r7, #20]
   return(result);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e4      	bne.n	8007b56 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b8c:	e007      	b.n	8007b9e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699a      	ldr	r2, [r3, #24]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0208 	orr.w	r2, r2, #8
 8007b9c:	619a      	str	r2, [r3, #24]
}
 8007b9e:	bf00      	nop
 8007ba0:	37b8      	adds	r7, #184	@ 0xb8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	effffffe 	.word	0xeffffffe
 8007bac:	58000c00 	.word	0x58000c00
 8007bb0:	0800732d 	.word	0x0800732d

08007bb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d101      	bne.n	8007c06 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c02:	2302      	movs	r3, #2
 8007c04:	e027      	b.n	8007c56 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2224      	movs	r2, #36	@ 0x24
 8007c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 0201 	bic.w	r2, r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c76:	2302      	movs	r3, #2
 8007c78:	e02d      	b.n	8007cd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2224      	movs	r2, #36	@ 0x24
 8007c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0201 	bic.w	r2, r2, #1
 8007ca0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f850 	bl	8007d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e02d      	b.n	8007d52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2224      	movs	r2, #36	@ 0x24
 8007d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0201 	bic.w	r2, r2, #1
 8007d1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f812 	bl	8007d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d108      	bne.n	8007d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d7c:	e031      	b.n	8007de2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d7e:	2310      	movs	r3, #16
 8007d80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d82:	2310      	movs	r3, #16
 8007d84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	0e5b      	lsrs	r3, r3, #25
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	0f5b      	lsrs	r3, r3, #29
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
 8007da8:	7b3a      	ldrb	r2, [r7, #12]
 8007daa:	4911      	ldr	r1, [pc, #68]	@ (8007df0 <UARTEx_SetNbDataToProcess+0x94>)
 8007dac:	5c8a      	ldrb	r2, [r1, r2]
 8007dae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007db2:	7b3a      	ldrb	r2, [r7, #12]
 8007db4:	490f      	ldr	r1, [pc, #60]	@ (8007df4 <UARTEx_SetNbDataToProcess+0x98>)
 8007db6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	7b7a      	ldrb	r2, [r7, #13]
 8007dc8:	4909      	ldr	r1, [pc, #36]	@ (8007df0 <UARTEx_SetNbDataToProcess+0x94>)
 8007dca:	5c8a      	ldrb	r2, [r1, r2]
 8007dcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dd0:	7b7a      	ldrb	r2, [r7, #13]
 8007dd2:	4908      	ldr	r1, [pc, #32]	@ (8007df4 <UARTEx_SetNbDataToProcess+0x98>)
 8007dd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007de2:	bf00      	nop
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	08008114 	.word	0x08008114
 8007df4:	0800811c 	.word	0x0800811c

08007df8 <atoi>:
 8007df8:	220a      	movs	r2, #10
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f000 b87a 	b.w	8007ef4 <strtol>

08007e00 <_strtol_l.isra.0>:
 8007e00:	2b24      	cmp	r3, #36	@ 0x24
 8007e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e06:	4686      	mov	lr, r0
 8007e08:	4690      	mov	r8, r2
 8007e0a:	d801      	bhi.n	8007e10 <_strtol_l.isra.0+0x10>
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d106      	bne.n	8007e1e <_strtol_l.isra.0+0x1e>
 8007e10:	f000 f926 	bl	8008060 <__errno>
 8007e14:	2316      	movs	r3, #22
 8007e16:	6003      	str	r3, [r0, #0]
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e1e:	4834      	ldr	r0, [pc, #208]	@ (8007ef0 <_strtol_l.isra.0+0xf0>)
 8007e20:	460d      	mov	r5, r1
 8007e22:	462a      	mov	r2, r5
 8007e24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e28:	5d06      	ldrb	r6, [r0, r4]
 8007e2a:	f016 0608 	ands.w	r6, r6, #8
 8007e2e:	d1f8      	bne.n	8007e22 <_strtol_l.isra.0+0x22>
 8007e30:	2c2d      	cmp	r4, #45	@ 0x2d
 8007e32:	d110      	bne.n	8007e56 <_strtol_l.isra.0+0x56>
 8007e34:	782c      	ldrb	r4, [r5, #0]
 8007e36:	2601      	movs	r6, #1
 8007e38:	1c95      	adds	r5, r2, #2
 8007e3a:	f033 0210 	bics.w	r2, r3, #16
 8007e3e:	d115      	bne.n	8007e6c <_strtol_l.isra.0+0x6c>
 8007e40:	2c30      	cmp	r4, #48	@ 0x30
 8007e42:	d10d      	bne.n	8007e60 <_strtol_l.isra.0+0x60>
 8007e44:	782a      	ldrb	r2, [r5, #0]
 8007e46:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e4a:	2a58      	cmp	r2, #88	@ 0x58
 8007e4c:	d108      	bne.n	8007e60 <_strtol_l.isra.0+0x60>
 8007e4e:	786c      	ldrb	r4, [r5, #1]
 8007e50:	3502      	adds	r5, #2
 8007e52:	2310      	movs	r3, #16
 8007e54:	e00a      	b.n	8007e6c <_strtol_l.isra.0+0x6c>
 8007e56:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e58:	bf04      	itt	eq
 8007e5a:	782c      	ldrbeq	r4, [r5, #0]
 8007e5c:	1c95      	addeq	r5, r2, #2
 8007e5e:	e7ec      	b.n	8007e3a <_strtol_l.isra.0+0x3a>
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1f6      	bne.n	8007e52 <_strtol_l.isra.0+0x52>
 8007e64:	2c30      	cmp	r4, #48	@ 0x30
 8007e66:	bf14      	ite	ne
 8007e68:	230a      	movne	r3, #10
 8007e6a:	2308      	moveq	r3, #8
 8007e6c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007e70:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007e74:	2200      	movs	r2, #0
 8007e76:	fbbc f9f3 	udiv	r9, ip, r3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e80:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007e84:	2f09      	cmp	r7, #9
 8007e86:	d80f      	bhi.n	8007ea8 <_strtol_l.isra.0+0xa8>
 8007e88:	463c      	mov	r4, r7
 8007e8a:	42a3      	cmp	r3, r4
 8007e8c:	dd1b      	ble.n	8007ec6 <_strtol_l.isra.0+0xc6>
 8007e8e:	1c57      	adds	r7, r2, #1
 8007e90:	d007      	beq.n	8007ea2 <_strtol_l.isra.0+0xa2>
 8007e92:	4581      	cmp	r9, r0
 8007e94:	d314      	bcc.n	8007ec0 <_strtol_l.isra.0+0xc0>
 8007e96:	d101      	bne.n	8007e9c <_strtol_l.isra.0+0x9c>
 8007e98:	45a2      	cmp	sl, r4
 8007e9a:	db11      	blt.n	8007ec0 <_strtol_l.isra.0+0xc0>
 8007e9c:	fb00 4003 	mla	r0, r0, r3, r4
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ea6:	e7eb      	b.n	8007e80 <_strtol_l.isra.0+0x80>
 8007ea8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007eac:	2f19      	cmp	r7, #25
 8007eae:	d801      	bhi.n	8007eb4 <_strtol_l.isra.0+0xb4>
 8007eb0:	3c37      	subs	r4, #55	@ 0x37
 8007eb2:	e7ea      	b.n	8007e8a <_strtol_l.isra.0+0x8a>
 8007eb4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007eb8:	2f19      	cmp	r7, #25
 8007eba:	d804      	bhi.n	8007ec6 <_strtol_l.isra.0+0xc6>
 8007ebc:	3c57      	subs	r4, #87	@ 0x57
 8007ebe:	e7e4      	b.n	8007e8a <_strtol_l.isra.0+0x8a>
 8007ec0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ec4:	e7ed      	b.n	8007ea2 <_strtol_l.isra.0+0xa2>
 8007ec6:	1c53      	adds	r3, r2, #1
 8007ec8:	d108      	bne.n	8007edc <_strtol_l.isra.0+0xdc>
 8007eca:	2322      	movs	r3, #34	@ 0x22
 8007ecc:	f8ce 3000 	str.w	r3, [lr]
 8007ed0:	4660      	mov	r0, ip
 8007ed2:	f1b8 0f00 	cmp.w	r8, #0
 8007ed6:	d0a0      	beq.n	8007e1a <_strtol_l.isra.0+0x1a>
 8007ed8:	1e69      	subs	r1, r5, #1
 8007eda:	e006      	b.n	8007eea <_strtol_l.isra.0+0xea>
 8007edc:	b106      	cbz	r6, 8007ee0 <_strtol_l.isra.0+0xe0>
 8007ede:	4240      	negs	r0, r0
 8007ee0:	f1b8 0f00 	cmp.w	r8, #0
 8007ee4:	d099      	beq.n	8007e1a <_strtol_l.isra.0+0x1a>
 8007ee6:	2a00      	cmp	r2, #0
 8007ee8:	d1f6      	bne.n	8007ed8 <_strtol_l.isra.0+0xd8>
 8007eea:	f8c8 1000 	str.w	r1, [r8]
 8007eee:	e794      	b.n	8007e1a <_strtol_l.isra.0+0x1a>
 8007ef0:	08008125 	.word	0x08008125

08007ef4 <strtol>:
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	460a      	mov	r2, r1
 8007ef8:	4601      	mov	r1, r0
 8007efa:	4802      	ldr	r0, [pc, #8]	@ (8007f04 <strtol+0x10>)
 8007efc:	6800      	ldr	r0, [r0, #0]
 8007efe:	f7ff bf7f 	b.w	8007e00 <_strtol_l.isra.0>
 8007f02:	bf00      	nop
 8007f04:	24000050 	.word	0x24000050

08007f08 <_strtoul_l.isra.0>:
 8007f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f0c:	4e34      	ldr	r6, [pc, #208]	@ (8007fe0 <_strtoul_l.isra.0+0xd8>)
 8007f0e:	4686      	mov	lr, r0
 8007f10:	460d      	mov	r5, r1
 8007f12:	4628      	mov	r0, r5
 8007f14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f18:	5d37      	ldrb	r7, [r6, r4]
 8007f1a:	f017 0708 	ands.w	r7, r7, #8
 8007f1e:	d1f8      	bne.n	8007f12 <_strtoul_l.isra.0+0xa>
 8007f20:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f22:	d110      	bne.n	8007f46 <_strtoul_l.isra.0+0x3e>
 8007f24:	782c      	ldrb	r4, [r5, #0]
 8007f26:	2701      	movs	r7, #1
 8007f28:	1c85      	adds	r5, r0, #2
 8007f2a:	f033 0010 	bics.w	r0, r3, #16
 8007f2e:	d115      	bne.n	8007f5c <_strtoul_l.isra.0+0x54>
 8007f30:	2c30      	cmp	r4, #48	@ 0x30
 8007f32:	d10d      	bne.n	8007f50 <_strtoul_l.isra.0+0x48>
 8007f34:	7828      	ldrb	r0, [r5, #0]
 8007f36:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007f3a:	2858      	cmp	r0, #88	@ 0x58
 8007f3c:	d108      	bne.n	8007f50 <_strtoul_l.isra.0+0x48>
 8007f3e:	786c      	ldrb	r4, [r5, #1]
 8007f40:	3502      	adds	r5, #2
 8007f42:	2310      	movs	r3, #16
 8007f44:	e00a      	b.n	8007f5c <_strtoul_l.isra.0+0x54>
 8007f46:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f48:	bf04      	itt	eq
 8007f4a:	782c      	ldrbeq	r4, [r5, #0]
 8007f4c:	1c85      	addeq	r5, r0, #2
 8007f4e:	e7ec      	b.n	8007f2a <_strtoul_l.isra.0+0x22>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1f6      	bne.n	8007f42 <_strtoul_l.isra.0+0x3a>
 8007f54:	2c30      	cmp	r4, #48	@ 0x30
 8007f56:	bf14      	ite	ne
 8007f58:	230a      	movne	r3, #10
 8007f5a:	2308      	moveq	r3, #8
 8007f5c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8007f60:	2600      	movs	r6, #0
 8007f62:	fbb8 f8f3 	udiv	r8, r8, r3
 8007f66:	fb03 f908 	mul.w	r9, r3, r8
 8007f6a:	ea6f 0909 	mvn.w	r9, r9
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007f74:	f1bc 0f09 	cmp.w	ip, #9
 8007f78:	d810      	bhi.n	8007f9c <_strtoul_l.isra.0+0x94>
 8007f7a:	4664      	mov	r4, ip
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	dd1e      	ble.n	8007fbe <_strtoul_l.isra.0+0xb6>
 8007f80:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8007f84:	d007      	beq.n	8007f96 <_strtoul_l.isra.0+0x8e>
 8007f86:	4580      	cmp	r8, r0
 8007f88:	d316      	bcc.n	8007fb8 <_strtoul_l.isra.0+0xb0>
 8007f8a:	d101      	bne.n	8007f90 <_strtoul_l.isra.0+0x88>
 8007f8c:	45a1      	cmp	r9, r4
 8007f8e:	db13      	blt.n	8007fb8 <_strtoul_l.isra.0+0xb0>
 8007f90:	fb00 4003 	mla	r0, r0, r3, r4
 8007f94:	2601      	movs	r6, #1
 8007f96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f9a:	e7e9      	b.n	8007f70 <_strtoul_l.isra.0+0x68>
 8007f9c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007fa0:	f1bc 0f19 	cmp.w	ip, #25
 8007fa4:	d801      	bhi.n	8007faa <_strtoul_l.isra.0+0xa2>
 8007fa6:	3c37      	subs	r4, #55	@ 0x37
 8007fa8:	e7e8      	b.n	8007f7c <_strtoul_l.isra.0+0x74>
 8007faa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007fae:	f1bc 0f19 	cmp.w	ip, #25
 8007fb2:	d804      	bhi.n	8007fbe <_strtoul_l.isra.0+0xb6>
 8007fb4:	3c57      	subs	r4, #87	@ 0x57
 8007fb6:	e7e1      	b.n	8007f7c <_strtoul_l.isra.0+0x74>
 8007fb8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8007fbc:	e7eb      	b.n	8007f96 <_strtoul_l.isra.0+0x8e>
 8007fbe:	1c73      	adds	r3, r6, #1
 8007fc0:	d106      	bne.n	8007fd0 <_strtoul_l.isra.0+0xc8>
 8007fc2:	2322      	movs	r3, #34	@ 0x22
 8007fc4:	f8ce 3000 	str.w	r3, [lr]
 8007fc8:	4630      	mov	r0, r6
 8007fca:	b932      	cbnz	r2, 8007fda <_strtoul_l.isra.0+0xd2>
 8007fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fd0:	b107      	cbz	r7, 8007fd4 <_strtoul_l.isra.0+0xcc>
 8007fd2:	4240      	negs	r0, r0
 8007fd4:	2a00      	cmp	r2, #0
 8007fd6:	d0f9      	beq.n	8007fcc <_strtoul_l.isra.0+0xc4>
 8007fd8:	b106      	cbz	r6, 8007fdc <_strtoul_l.isra.0+0xd4>
 8007fda:	1e69      	subs	r1, r5, #1
 8007fdc:	6011      	str	r1, [r2, #0]
 8007fde:	e7f5      	b.n	8007fcc <_strtoul_l.isra.0+0xc4>
 8007fe0:	08008125 	.word	0x08008125

08007fe4 <strtoul>:
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	460a      	mov	r2, r1
 8007fe8:	4601      	mov	r1, r0
 8007fea:	4802      	ldr	r0, [pc, #8]	@ (8007ff4 <strtoul+0x10>)
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f7ff bf8b 	b.w	8007f08 <_strtoul_l.isra.0>
 8007ff2:	bf00      	nop
 8007ff4:	24000050 	.word	0x24000050

08007ff8 <memset>:
 8007ff8:	4402      	add	r2, r0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d100      	bne.n	8008002 <memset+0xa>
 8008000:	4770      	bx	lr
 8008002:	f803 1b01 	strb.w	r1, [r3], #1
 8008006:	e7f9      	b.n	8007ffc <memset+0x4>

08008008 <__strtok_r>:
 8008008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800800a:	4604      	mov	r4, r0
 800800c:	b908      	cbnz	r0, 8008012 <__strtok_r+0xa>
 800800e:	6814      	ldr	r4, [r2, #0]
 8008010:	b144      	cbz	r4, 8008024 <__strtok_r+0x1c>
 8008012:	4620      	mov	r0, r4
 8008014:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008018:	460f      	mov	r7, r1
 800801a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800801e:	b91e      	cbnz	r6, 8008028 <__strtok_r+0x20>
 8008020:	b965      	cbnz	r5, 800803c <__strtok_r+0x34>
 8008022:	6015      	str	r5, [r2, #0]
 8008024:	2000      	movs	r0, #0
 8008026:	e005      	b.n	8008034 <__strtok_r+0x2c>
 8008028:	42b5      	cmp	r5, r6
 800802a:	d1f6      	bne.n	800801a <__strtok_r+0x12>
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1f0      	bne.n	8008012 <__strtok_r+0xa>
 8008030:	6014      	str	r4, [r2, #0]
 8008032:	7003      	strb	r3, [r0, #0]
 8008034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008036:	461c      	mov	r4, r3
 8008038:	e00c      	b.n	8008054 <__strtok_r+0x4c>
 800803a:	b91d      	cbnz	r5, 8008044 <__strtok_r+0x3c>
 800803c:	4627      	mov	r7, r4
 800803e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008042:	460e      	mov	r6, r1
 8008044:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008048:	42ab      	cmp	r3, r5
 800804a:	d1f6      	bne.n	800803a <__strtok_r+0x32>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0f2      	beq.n	8008036 <__strtok_r+0x2e>
 8008050:	2300      	movs	r3, #0
 8008052:	703b      	strb	r3, [r7, #0]
 8008054:	6014      	str	r4, [r2, #0]
 8008056:	e7ed      	b.n	8008034 <__strtok_r+0x2c>

08008058 <strtok_r>:
 8008058:	2301      	movs	r3, #1
 800805a:	f7ff bfd5 	b.w	8008008 <__strtok_r>
	...

08008060 <__errno>:
 8008060:	4b01      	ldr	r3, [pc, #4]	@ (8008068 <__errno+0x8>)
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	24000050 	.word	0x24000050

0800806c <__libc_init_array>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	4d0d      	ldr	r5, [pc, #52]	@ (80080a4 <__libc_init_array+0x38>)
 8008070:	4c0d      	ldr	r4, [pc, #52]	@ (80080a8 <__libc_init_array+0x3c>)
 8008072:	1b64      	subs	r4, r4, r5
 8008074:	10a4      	asrs	r4, r4, #2
 8008076:	2600      	movs	r6, #0
 8008078:	42a6      	cmp	r6, r4
 800807a:	d109      	bne.n	8008090 <__libc_init_array+0x24>
 800807c:	4d0b      	ldr	r5, [pc, #44]	@ (80080ac <__libc_init_array+0x40>)
 800807e:	4c0c      	ldr	r4, [pc, #48]	@ (80080b0 <__libc_init_array+0x44>)
 8008080:	f000 f826 	bl	80080d0 <_init>
 8008084:	1b64      	subs	r4, r4, r5
 8008086:	10a4      	asrs	r4, r4, #2
 8008088:	2600      	movs	r6, #0
 800808a:	42a6      	cmp	r6, r4
 800808c:	d105      	bne.n	800809a <__libc_init_array+0x2e>
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	f855 3b04 	ldr.w	r3, [r5], #4
 8008094:	4798      	blx	r3
 8008096:	3601      	adds	r6, #1
 8008098:	e7ee      	b.n	8008078 <__libc_init_array+0xc>
 800809a:	f855 3b04 	ldr.w	r3, [r5], #4
 800809e:	4798      	blx	r3
 80080a0:	3601      	adds	r6, #1
 80080a2:	e7f2      	b.n	800808a <__libc_init_array+0x1e>
 80080a4:	08008230 	.word	0x08008230
 80080a8:	08008230 	.word	0x08008230
 80080ac:	08008230 	.word	0x08008230
 80080b0:	08008234 	.word	0x08008234

080080b4 <memcpy>:
 80080b4:	440a      	add	r2, r1
 80080b6:	4291      	cmp	r1, r2
 80080b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80080bc:	d100      	bne.n	80080c0 <memcpy+0xc>
 80080be:	4770      	bx	lr
 80080c0:	b510      	push	{r4, lr}
 80080c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080ca:	4291      	cmp	r1, r2
 80080cc:	d1f9      	bne.n	80080c2 <memcpy+0xe>
 80080ce:	bd10      	pop	{r4, pc}

080080d0 <_init>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	bf00      	nop
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr

080080dc <_fini>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	bf00      	nop
 80080e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e2:	bc08      	pop	{r3}
 80080e4:	469e      	mov	lr, r3
 80080e6:	4770      	bx	lr
