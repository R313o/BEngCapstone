
yellowBoard-DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af34  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800b1cc  0800b1cc  0000c1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b1e4  0800b1e4  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800b1e8  0800b1e8  0000c1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  0800b1ec  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00008404  24000010  0800b1fc  0000d010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24008414  0800b1fc  0000d414  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017c68  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002ddc  00000000  00000000  00024ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001508  00000000  00000000  00027a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000103b  00000000  00000000  00028f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000036c7  00000000  00000000  00029fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001a20f  00000000  00000000  0002d692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00178455  00000000  00000000  000478a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      000000b3  00000000  00000000  001bfcf6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005a7c  00000000  00000000  001bfdac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000096  00000000  00000000  001c5828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    000001cb  00000000  00000000  001c58be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00000010  00000000  00000000  001c5a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b1b4 	.word	0x0800b1b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800b1b4 	.word	0x0800b1b4

080002d8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < BUFFER_SIZE; i++)
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	e01d      	b.n	8000322 <HAL_ADC_ConvCpltCallback+0x4a>
	{
		dacOutput[i] = adcInput[i+BUFFER_SIZE]*DAC_VOLTS2BITS*ADC_BITS2VOLTS;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80002ec:	4a12      	ldr	r2, [pc, #72]	@ (8000338 <HAL_ADC_ConvCpltCallback+0x60>)
 80002ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002f2:	ee07 3a90 	vmov	s15, r3
 80002f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002fa:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800033c <HAL_ADC_ConvCpltCallback+0x64>
 80002fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000302:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000340 <HAL_ADC_ConvCpltCallback+0x68>
 8000306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800030a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800030e:	ee17 3a90 	vmov	r3, s15
 8000312:	b299      	uxth	r1, r3
 8000314:	4a0b      	ldr	r2, [pc, #44]	@ (8000344 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < BUFFER_SIZE; i++)
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	3301      	adds	r3, #1
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000328:	dbdd      	blt.n	80002e6 <HAL_ADC_ConvCpltCallback+0xe>
	}

}
 800032a:	bf00      	nop
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	24000404 	.word	0x24000404
 800033c:	449b26ca 	.word	0x449b26ca
 8000340:	38533333 	.word	0x38533333
 8000344:	24000c04 	.word	0x24000c04

08000348 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < BUFFER_SIZE; i++)
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e01d      	b.n	8000392 <HAL_ADC_ConvHalfCpltCallback+0x4a>
	{
		dacOutput[i+BUFFER_SIZE] = adcInput[i]*DAC_VOLTS2BITS*ADC_BITS2VOLTS;
 8000356:	4a14      	ldr	r2, [pc, #80]	@ (80003a8 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800035e:	ee07 3a90 	vmov	s15, r3
 8000362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000366:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80003ac <HAL_ADC_ConvHalfCpltCallback+0x64>
 800036a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800036e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80003b0 <HAL_ADC_ConvHalfCpltCallback+0x68>
 8000372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800037c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000380:	ee17 2a90 	vmov	r2, s15
 8000384:	b291      	uxth	r1, r2
 8000386:	4a0b      	ldr	r2, [pc, #44]	@ (80003b4 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8000388:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < BUFFER_SIZE; i++)
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	3301      	adds	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000398:	dbdd      	blt.n	8000356 <HAL_ADC_ConvHalfCpltCallback+0xe>
	}

}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	24000404 	.word	0x24000404
 80003ac:	449b26ca 	.word	0x449b26ca
 80003b0:	38533333 	.word	0x38533333
 80003b4:	24000c04 	.word	0x24000c04

080003b8 <processAudio>:

void processAudio()
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
	for (int16_t i = 0; i < BUFFER_SIZE; i++)
 80003be:	2300      	movs	r3, #0
 80003c0:	80fb      	strh	r3, [r7, #6]
 80003c2:	e01f      	b.n	8000404 <processAudio+0x4c>
	{
		outR[i] = inR[i];
 80003c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80003c8:	4b14      	ldr	r3, [pc, #80]	@ (800041c <processAudio+0x64>)
 80003ca:	6819      	ldr	r1, [r3, #0]
 80003cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	440b      	add	r3, r1
 80003d4:	4912      	ldr	r1, [pc, #72]	@ (8000420 <processAudio+0x68>)
 80003d6:	0092      	lsls	r2, r2, #2
 80003d8:	440a      	add	r2, r1
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	601a      	str	r2, [r3, #0]
		outL[i]= inL[i];
 80003de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80003e2:	4b10      	ldr	r3, [pc, #64]	@ (8000424 <processAudio+0x6c>)
 80003e4:	6819      	ldr	r1, [r3, #0]
 80003e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	440b      	add	r3, r1
 80003ee:	490e      	ldr	r1, [pc, #56]	@ (8000428 <processAudio+0x70>)
 80003f0:	0092      	lsls	r2, r2, #2
 80003f2:	440a      	add	r2, r1
 80003f4:	6812      	ldr	r2, [r2, #0]
 80003f6:	601a      	str	r2, [r3, #0]
	for (int16_t i = 0; i < BUFFER_SIZE; i++)
 80003f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	3301      	adds	r3, #1
 8000400:	b29b      	uxth	r3, r3
 8000402:	80fb      	strh	r3, [r7, #6]
 8000404:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800040c:	dbda      	blt.n	80003c4 <processAudio+0xc>
	}
}
 800040e:	bf00      	nop
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	24006404 	.word	0x24006404
 8000420:	24005404 	.word	0x24005404
 8000424:	24006408 	.word	0x24006408
 8000428:	24005c04 	.word	0x24005c04

0800042c <bits2normal>:

void bits2normal( int32_t* input, float32_t* outR, float32_t* outL)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]

    for (uint16_t i = 0; i < BUFFER_SIZE; i++)
 8000438:	2300      	movs	r3, #0
 800043a:	82fb      	strh	r3, [r7, #22]
 800043c:	e03b      	b.n	80004b6 <bits2normal+0x8a>
    {
    	input[i * 2]	 = ((input[i * 2] 	  << 8) >> 8);
 800043e:	8afb      	ldrh	r3, [r7, #22]
 8000440:	00db      	lsls	r3, r3, #3
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	4413      	add	r3, r2
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	021a      	lsls	r2, r3, #8
 800044a:	8afb      	ldrh	r3, [r7, #22]
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	68f9      	ldr	r1, [r7, #12]
 8000450:	440b      	add	r3, r1
 8000452:	1212      	asrs	r2, r2, #8
 8000454:	601a      	str	r2, [r3, #0]
    	input[i * 2 + 1] = ((input[i * 2 + 1] << 8) >> 8);
 8000456:	8afb      	ldrh	r3, [r7, #22]
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	3304      	adds	r3, #4
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	4413      	add	r3, r2
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	021a      	lsls	r2, r3, #8
 8000464:	8afb      	ldrh	r3, [r7, #22]
 8000466:	00db      	lsls	r3, r3, #3
 8000468:	3304      	adds	r3, #4
 800046a:	68f9      	ldr	r1, [r7, #12]
 800046c:	440b      	add	r3, r1
 800046e:	1212      	asrs	r2, r2, #8
 8000470:	601a      	str	r2, [r3, #0]
        outL[i] = (float32_t)input[i * 2];
 8000472:	8afb      	ldrh	r3, [r7, #22]
 8000474:	00db      	lsls	r3, r3, #3
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	4413      	add	r3, r2
 800047a:	6819      	ldr	r1, [r3, #0]
 800047c:	8afb      	ldrh	r3, [r7, #22]
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	4413      	add	r3, r2
 8000484:	ee07 1a90 	vmov	s15, r1
 8000488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800048c:	edc3 7a00 	vstr	s15, [r3]
        outR[i] = (float32_t)input[i * 2 + 1];
 8000490:	8afb      	ldrh	r3, [r7, #22]
 8000492:	00db      	lsls	r3, r3, #3
 8000494:	3304      	adds	r3, #4
 8000496:	68fa      	ldr	r2, [r7, #12]
 8000498:	4413      	add	r3, r2
 800049a:	6819      	ldr	r1, [r3, #0]
 800049c:	8afb      	ldrh	r3, [r7, #22]
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	68ba      	ldr	r2, [r7, #8]
 80004a2:	4413      	add	r3, r2
 80004a4:	ee07 1a90 	vmov	s15, r1
 80004a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004ac:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i = 0; i < BUFFER_SIZE; i++)
 80004b0:	8afb      	ldrh	r3, [r7, #22]
 80004b2:	3301      	adds	r3, #1
 80004b4:	82fb      	strh	r3, [r7, #22]
 80004b6:	8afb      	ldrh	r3, [r7, #22]
 80004b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80004bc:	d3bf      	bcc.n	800043e <bits2normal+0x12>
    }

	arm_scale_f32(outL, NORMAL_INPUT, outL, BUFFER_SIZE);
 80004be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004c2:	6879      	ldr	r1, [r7, #4]
 80004c4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80004e8 <bits2normal+0xbc>
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f00a fe11 	bl	800b0f0 <arm_scale_f32>
	arm_scale_f32(outR, NORMAL_INPUT, outR, BUFFER_SIZE);
 80004ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004d2:	68b9      	ldr	r1, [r7, #8]
 80004d4:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 80004e8 <bits2normal+0xbc>
 80004d8:	68b8      	ldr	r0, [r7, #8]
 80004da:	f00a fe09 	bl	800b0f0 <arm_scale_f32>
	//arm_offset_f32(outL, -1.0f, outL, BUFFER_SIZE);
	//arm_offset_f32(outR, -1.0f, outR, BUFFER_SIZE);


}
 80004de:	bf00      	nop
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	3400d959 	.word	0x3400d959

080004ec <normal2bits>:

void normal2bits(float32_t* inR, float32_t* inL, int32_t* output)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b08b      	sub	sp, #44	@ 0x2c
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]

	for (uint16_t i = 0; i < BUFFER_SIZE; i++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80004fc:	e0a3      	b.n	8000646 <normal2bits+0x15a>
	{
		/* 1) clamp */
		float32_t l = inL[i] >  1.0f ?  1.0f :
 80004fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	4413      	add	r3, r2
 8000506:	edd3 7a00 	vldr	s15, [r3]
 800050a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800050e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000516:	dd02      	ble.n	800051e <normal2bits+0x32>
 8000518:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800051c:	e013      	b.n	8000546 <normal2bits+0x5a>
					  inL[i] < -1.0f ? -1.0f :
 800051e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	4413      	add	r3, r2
 8000526:	edd3 7a00 	vldr	s15, [r3]
 800052a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800052e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000536:	d501      	bpl.n	800053c <normal2bits+0x50>
 8000538:	4b49      	ldr	r3, [pc, #292]	@ (8000660 <normal2bits+0x174>)
 800053a:	e004      	b.n	8000546 <normal2bits+0x5a>
									  inL[i];
 800053c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	68ba      	ldr	r2, [r7, #8]
 8000542:	4413      	add	r3, r2
					  inL[i] < -1.0f ? -1.0f :
 8000544:	681b      	ldr	r3, [r3, #0]
		float32_t l = inL[i] >  1.0f ?  1.0f :
 8000546:	61bb      	str	r3, [r7, #24]
		float32_t r = inR[i] >  1.0f ?  1.0f :
 8000548:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	4413      	add	r3, r2
 8000550:	edd3 7a00 	vldr	s15, [r3]
 8000554:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800055c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000560:	dd02      	ble.n	8000568 <normal2bits+0x7c>
 8000562:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000566:	e013      	b.n	8000590 <normal2bits+0xa4>
					  inR[i] < -1.0f ? -1.0f :
 8000568:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	4413      	add	r3, r2
 8000570:	edd3 7a00 	vldr	s15, [r3]
 8000574:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800057c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000580:	d501      	bpl.n	8000586 <normal2bits+0x9a>
 8000582:	4b37      	ldr	r3, [pc, #220]	@ (8000660 <normal2bits+0x174>)
 8000584:	e004      	b.n	8000590 <normal2bits+0xa4>
									  inR[i];
 8000586:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	4413      	add	r3, r2
					  inR[i] < -1.0f ? -1.0f :
 800058e:	681b      	ldr	r3, [r3, #0]
		float32_t r = inR[i] >  1.0f ?  1.0f :
 8000590:	617b      	str	r3, [r7, #20]

		/* 2) scale */
		float32_t l_s = l * NORMAL_OUTPUT;
 8000592:	edd7 7a06 	vldr	s15, [r7, #24]
 8000596:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000664 <normal2bits+0x178>
 800059a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800059e:	edc7 7a08 	vstr	s15, [r7, #32]
		float32_t r_s = r * NORMAL_OUTPUT;
 80005a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80005a6:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8000664 <normal2bits+0x178>
 80005aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ae:	edc7 7a07 	vstr	s15, [r7, #28]

		/* 3) round to nearest */
		if (l_s >= 0.0f) l_s +=  0.5f;  else l_s -=  0.5f;
 80005b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80005b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	db08      	blt.n	80005d2 <normal2bits+0xe6>
 80005c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80005c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80005c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005cc:	edc7 7a08 	vstr	s15, [r7, #32]
 80005d0:	e007      	b.n	80005e2 <normal2bits+0xf6>
 80005d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80005d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80005da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005de:	edc7 7a08 	vstr	s15, [r7, #32]
		if (r_s >= 0.0f) r_s +=  0.5f;  else r_s -=  0.5f;
 80005e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80005e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ee:	db08      	blt.n	8000602 <normal2bits+0x116>
 80005f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80005f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80005f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005fc:	edc7 7a07 	vstr	s15, [r7, #28]
 8000600:	e007      	b.n	8000612 <normal2bits+0x126>
 8000602:	edd7 7a07 	vldr	s15, [r7, #28]
 8000606:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800060a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800060e:	edc7 7a07 	vstr	s15, [r7, #28]

		/* 4) cast & store (interleaved L, R) */
		output[2*i    ] = (int32_t)l_s;
 8000612:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	edd7 7a08 	vldr	s15, [r7, #32]
 800061e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000622:	ee17 2a90 	vmov	r2, s15
 8000626:	601a      	str	r2, [r3, #0]
		output[2*i + 1] = (int32_t)r_s;
 8000628:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	3304      	adds	r3, #4
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	edd7 7a07 	vldr	s15, [r7, #28]
 8000636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800063a:	ee17 2a90 	vmov	r2, s15
 800063e:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < BUFFER_SIZE; i++)
 8000640:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000642:	3301      	adds	r3, #1
 8000644:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000646:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800064c:	f4ff af57 	bcc.w	80004fe <normal2bits+0x12>
	{

	        output[i * 2] 	  = (int32_t)inL[i];
	        output[i * 2 + 1] = (int32_t)inR[i];
	}*/
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	372c      	adds	r7, #44	@ 0x2c
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	bf800000 	.word	0xbf800000
 8000664:	4b000000 	.word	0x4b000000

08000668 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	//__disable_irq();
	normal2bits(outR, outL, &saiOutput[2*BUFFER_SIZE]);
 8000670:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <HAL_SAI_TxCpltCallback+0x20>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a05      	ldr	r2, [pc, #20]	@ (800068c <HAL_SAI_TxCpltCallback+0x24>)
 8000676:	6811      	ldr	r1, [r2, #0]
 8000678:	4a05      	ldr	r2, [pc, #20]	@ (8000690 <HAL_SAI_TxCpltCallback+0x28>)
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff36 	bl	80004ec <normal2bits>



	//__enable_irq();
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	24006404 	.word	0x24006404
 800068c:	24006408 	.word	0x24006408
 8000690:	24004404 	.word	0x24004404

08000694 <HAL_SAI_TxHalfCpltCallback>:


void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	//__disable_irq();
	normal2bits(outR, outL, saiOutput);
 800069c:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <HAL_SAI_TxHalfCpltCallback+0x20>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a05      	ldr	r2, [pc, #20]	@ (80006b8 <HAL_SAI_TxHalfCpltCallback+0x24>)
 80006a2:	6811      	ldr	r1, [r2, #0]
 80006a4:	4a05      	ldr	r2, [pc, #20]	@ (80006bc <HAL_SAI_TxHalfCpltCallback+0x28>)
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff20 	bl	80004ec <normal2bits>



	//__enable_irq();

}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	24006404 	.word	0x24006404
 80006b8:	24006408 	.word	0x24006408
 80006bc:	24003404 	.word	0x24003404

080006c0 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	//__disable_irq();
	bits2normal(&saiInput[2*BUFFER_SIZE], inR, inL);
 80006c8:	4a08      	ldr	r2, [pc, #32]	@ (80006ec <HAL_SAI_RxCpltCallback+0x2c>)
 80006ca:	4909      	ldr	r1, [pc, #36]	@ (80006f0 <HAL_SAI_RxCpltCallback+0x30>)
 80006cc:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <HAL_SAI_RxCpltCallback+0x34>)
 80006ce:	f7ff fead 	bl	800042c <bits2normal>


	outR = outR2;
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <HAL_SAI_RxCpltCallback+0x38>)
 80006d4:	4a09      	ldr	r2, [pc, #36]	@ (80006fc <HAL_SAI_RxCpltCallback+0x3c>)
 80006d6:	601a      	str	r2, [r3, #0]
	outL = outL2;
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <HAL_SAI_RxCpltCallback+0x40>)
 80006da:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <HAL_SAI_RxCpltCallback+0x44>)
 80006dc:	601a      	str	r2, [r3, #0]
	//__enable_irq();
	processAudio();
 80006de:	f7ff fe6b 	bl	80003b8 <processAudio>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	24005c04 	.word	0x24005c04
 80006f0:	24005404 	.word	0x24005404
 80006f4:	24002404 	.word	0x24002404
 80006f8:	24006404 	.word	0x24006404
 80006fc:	2400740c 	.word	0x2400740c
 8000700:	24006408 	.word	0x24006408
 8000704:	24007c0c 	.word	0x24007c0c

08000708 <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	//__disable_irq();
	bits2normal(saiInput, inR, inL);
 8000710:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <HAL_SAI_RxHalfCpltCallback+0x2c>)
 8000712:	4909      	ldr	r1, [pc, #36]	@ (8000738 <HAL_SAI_RxHalfCpltCallback+0x30>)
 8000714:	4809      	ldr	r0, [pc, #36]	@ (800073c <HAL_SAI_RxHalfCpltCallback+0x34>)
 8000716:	f7ff fe89 	bl	800042c <bits2normal>


	outR = outR1;
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <HAL_SAI_RxHalfCpltCallback+0x38>)
 800071c:	4a09      	ldr	r2, [pc, #36]	@ (8000744 <HAL_SAI_RxHalfCpltCallback+0x3c>)
 800071e:	601a      	str	r2, [r3, #0]
	outL = outL1;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <HAL_SAI_RxHalfCpltCallback+0x40>)
 8000722:	4a0a      	ldr	r2, [pc, #40]	@ (800074c <HAL_SAI_RxHalfCpltCallback+0x44>)
 8000724:	601a      	str	r2, [r3, #0]
	//__enable_irq();
	processAudio();
 8000726:	f7ff fe47 	bl	80003b8 <processAudio>

}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	24005c04 	.word	0x24005c04
 8000738:	24005404 	.word	0x24005404
 800073c:	24001404 	.word	0x24001404
 8000740:	24006404 	.word	0x24006404
 8000744:	2400640c 	.word	0x2400640c
 8000748:	24006408 	.word	0x24006408
 800074c:	24006c0c 	.word	0x24006c0c

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000756:	f000 fb0f 	bl	8000d78 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 fea1 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f85d 	bl	800081c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000762:	f000 f8d5 	bl	8000910 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000766:	f000 fabf 	bl	8000ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 800076a:	f000 fa85 	bl	8000c78 <MX_DMA_Init>
  MX_ADC1_Init();
 800076e:	f000 f903 	bl	8000978 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000772:	f000 f97f 	bl	8000a74 <MX_DAC1_Init>
  MX_TIM8_Init();
 8000776:	f000 fa15 	bl	8000ba4 <MX_TIM8_Init>
  MX_SAI1_Init();
 800077a:	f000 f9ad 	bl	8000ad8 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  outL = outL2;
 800077e:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <main+0x94>)
 8000780:	4a19      	ldr	r2, [pc, #100]	@ (80007e8 <main+0x98>)
 8000782:	601a      	str	r2, [r3, #0]
  outR = outR2;
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <main+0x9c>)
 8000786:	4a1a      	ldr	r2, [pc, #104]	@ (80007f0 <main+0xa0>)
 8000788:	601a      	str	r2, [r3, #0]

  HAL_SAI_Receive_DMA (&hsai_BlockB1, (uint8_t*)saiInput,  4*BUFFER_SIZE);
 800078a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800078e:	4919      	ldr	r1, [pc, #100]	@ (80007f4 <main+0xa4>)
 8000790:	4819      	ldr	r0, [pc, #100]	@ (80007f8 <main+0xa8>)
 8000792:	f009 fd07 	bl	800a1a4 <HAL_SAI_Receive_DMA>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)saiOutput, 4*BUFFER_SIZE);
 8000796:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800079a:	4918      	ldr	r1, [pc, #96]	@ (80007fc <main+0xac>)
 800079c:	4818      	ldr	r0, [pc, #96]	@ (8000800 <main+0xb0>)
 800079e:	f009 fc4b 	bl	800a038 <HAL_SAI_Transmit_DMA>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80007a2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007a6:	2100      	movs	r1, #0
 80007a8:	4816      	ldr	r0, [pc, #88]	@ (8000804 <main+0xb4>)
 80007aa:	f002 fc01 	bl	8002fb0 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcInput, BUFFER_SIZE*2);
 80007ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007b2:	4915      	ldr	r1, [pc, #84]	@ (8000808 <main+0xb8>)
 80007b4:	4813      	ldr	r0, [pc, #76]	@ (8000804 <main+0xb4>)
 80007b6:	f001 fb15 	bl	8001de4 <HAL_ADC_Start_DMA>

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 80007ba:	2300      	movs	r3, #0
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c2:	4a12      	ldr	r2, [pc, #72]	@ (800080c <main+0xbc>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	4812      	ldr	r0, [pc, #72]	@ (8000810 <main+0xc0>)
 80007c8:	f002 ff10 	bl	80035ec <HAL_DAC_Start_DMA>

  HAL_TIM_Base_Start(&htim8);
 80007cc:	4811      	ldr	r0, [pc, #68]	@ (8000814 <main+0xc4>)
 80007ce:	f00a f82f 	bl	800a830 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  test++;
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <main+0xc8>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <main+0xc8>)
 80007dc:	801a      	strh	r2, [r3, #0]
	  __WFI();
 80007de:	bf30      	wfi
	  test++;
 80007e0:	bf00      	nop
 80007e2:	e7f6      	b.n	80007d2 <main+0x82>
 80007e4:	24006408 	.word	0x24006408
 80007e8:	24007c0c 	.word	0x24007c0c
 80007ec:	24006404 	.word	0x24006404
 80007f0:	2400740c 	.word	0x2400740c
 80007f4:	24001404 	.word	0x24001404
 80007f8:	2400022c 	.word	0x2400022c
 80007fc:	24003404 	.word	0x24003404
 8000800:	24000194 	.word	0x24000194
 8000804:	2400002c 	.word	0x2400002c
 8000808:	24000404 	.word	0x24000404
 800080c:	24000c04 	.word	0x24000c04
 8000810:	24000108 	.word	0x24000108
 8000814:	240003b4 	.word	0x240003b4
 8000818:	24000400 	.word	0x24000400

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b09c      	sub	sp, #112	@ 0x70
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000826:	224c      	movs	r2, #76	@ 0x4c
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f00a fc96 	bl	800b15c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2220      	movs	r2, #32
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f00a fc90 	bl	800b15c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800083c:	2002      	movs	r0, #2
 800083e:	f005 fc17 	bl	8006070 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b30      	ldr	r3, [pc, #192]	@ (8000908 <SystemClock_Config+0xec>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a2f      	ldr	r2, [pc, #188]	@ (8000908 <SystemClock_Config+0xec>)
 800084c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b2d      	ldr	r3, [pc, #180]	@ (8000908 <SystemClock_Config+0xec>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	4b2b      	ldr	r3, [pc, #172]	@ (800090c <SystemClock_Config+0xf0>)
 800085e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000860:	4a2a      	ldr	r2, [pc, #168]	@ (800090c <SystemClock_Config+0xf0>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000868:	4b28      	ldr	r3, [pc, #160]	@ (800090c <SystemClock_Config+0xf0>)
 800086a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000874:	bf00      	nop
 8000876:	4b24      	ldr	r3, [pc, #144]	@ (8000908 <SystemClock_Config+0xec>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800087e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000882:	d1f8      	bne.n	8000876 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2301      	movs	r3, #1
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000888:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	2302      	movs	r3, #2
 8000894:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000896:	2304      	movs	r3, #4
 8000898:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800089a:	23f0      	movs	r3, #240	@ 0xf0
 800089c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008a2:	2306      	movs	r3, #6
 80008a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 80008a6:	2308      	movs	r3, #8
 80008a8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008aa:	2308      	movs	r3, #8
 80008ac:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 fc12 	bl	80060e4 <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008c6:	f000 fa83 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	233f      	movs	r3, #63	@ 0x3f
 80008cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	2303      	movs	r3, #3
 80008d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008d6:	2308      	movs	r3, #8
 80008d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008da:	2340      	movs	r3, #64	@ 0x40
 80008dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008de:	2340      	movs	r3, #64	@ 0x40
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008e8:	2340      	movs	r3, #64	@ 0x40
 80008ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2104      	movs	r1, #4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f006 f851 	bl	8006998 <HAL_RCC_ClockConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008fc:	f000 fa68 	bl	8000dd0 <Error_Handler>
  }
}
 8000900:	bf00      	nop
 8000902:	3770      	adds	r7, #112	@ 0x70
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	58024800 	.word	0x58024800
 800090c:	58000400 	.word	0x58000400

08000910 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0b0      	sub	sp, #192	@ 0xc0
 8000914:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000916:	463b      	mov	r3, r7
 8000918:	22c0      	movs	r2, #192	@ 0xc0
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f00a fc1d 	bl	800b15c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 8000922:	4a14      	ldr	r2, [pc, #80]	@ (8000974 <PeriphCommonClock_Config+0x64>)
 8000924:	f04f 0300 	mov.w	r3, #0
 8000928:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000930:	2332      	movs	r3, #50	@ 0x32
 8000932:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 66;
 8000934:	2342      	movs	r3, #66	@ 0x42
 8000936:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000940:	23c0      	movs	r3, #192	@ 0xc0
 8000942:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 5637;
 8000948:	f241 6305 	movw	r3, #5637	@ 0x1605
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800094e:	2301      	movs	r3, #1
 8000950:	65bb      	str	r3, [r7, #88]	@ 0x58
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000952:	2300      	movs	r3, #0
 8000954:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000958:	463b      	mov	r3, r7
 800095a:	4618      	mov	r0, r3
 800095c:	f006 fb92 	bl	8007084 <HAL_RCCEx_PeriphCLKConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000966:	f000 fa33 	bl	8000dd0 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	37c0      	adds	r7, #192	@ 0xc0
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	00080100 	.word	0x00080100

08000978 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	615a      	str	r2, [r3, #20]
 800099a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800099c:	4b32      	ldr	r3, [pc, #200]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 800099e:	4a33      	ldr	r2, [pc, #204]	@ (8000a6c <MX_ADC1_Init+0xf4>)
 80009a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009a2:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009b8:	2208      	movs	r2, #8
 80009ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c2:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009c8:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 80009d4:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009d6:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 80009da:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009dc:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009e4:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009e6:	2203      	movs	r2, #3
 80009e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a04:	4818      	ldr	r0, [pc, #96]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 8000a06:	f001 f84b 	bl	8001aa0 <HAL_ADC_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000a10:	f000 f9de 	bl	8000dd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4812      	ldr	r0, [pc, #72]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 8000a20:	f002 fb5c 	bl	80030dc <HAL_ADCEx_MultiModeConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a2a:	f000 f9d1 	bl	8000dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <MX_ADC1_Init+0xf8>)
 8000a30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a32:	2306      	movs	r3, #6
 8000a34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000a36:	2305      	movs	r3, #5
 8000a38:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a3a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a3e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a40:	2304      	movs	r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_ADC1_Init+0xf0>)
 8000a52:	f001 fcd9 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000a5c:	f000 f9b8 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2400002c 	.word	0x2400002c
 8000a6c:	40022000 	.word	0x40022000
 8000a70:	3ef08000 	.word	0x3ef08000

08000a74 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2224      	movs	r2, #36	@ 0x24
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f00a fb6b 	bl	800b15c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a86:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <MX_DAC1_Init+0x5c>)
 8000a88:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <MX_DAC1_Init+0x60>)
 8000a8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a8c:	4810      	ldr	r0, [pc, #64]	@ (8000ad0 <MX_DAC1_Init+0x5c>)
 8000a8e:	f002 fd8b 	bl	80035a8 <HAL_DAC_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a98:	f000 f99a 	bl	8000dd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000aa0:	231e      	movs	r3, #30
 8000aa2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <MX_DAC1_Init+0x5c>)
 8000ab8:	f002 fe76 	bl	80037a8 <HAL_DAC_ConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ac2:	f000 f985 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	@ 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	24000108 	.word	0x24000108
 8000ad4:	40007400 	.word	0x40007400

08000ad8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000adc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000ade:	4a2e      	ldr	r2, [pc, #184]	@ (8000b98 <MX_SAI1_Init+0xc0>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000aee:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8000af4:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b00:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000b06:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000b08:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b0c:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8000b26:	2302      	movs	r3, #2
 8000b28:	2202      	movs	r2, #2
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4819      	ldr	r0, [pc, #100]	@ (8000b94 <MX_SAI1_Init+0xbc>)
 8000b2e:	f008 ffa7 	bl	8009a80 <HAL_SAI_InitProtocol>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 8000b38:	f000 f94a 	bl	8000dd0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_SAI1_Init+0xc4>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ba0 <MX_SAI1_Init+0xc8>)
 8000b40:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MX_SAI1_Init+0xc4>)
 8000b44:	2203      	movs	r2, #3
 8000b46:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_SAI1_Init+0xc4>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <MX_SAI1_Init+0xc4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_SAI1_Init+0xc4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_SAI1_Init+0xc4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_SAI1_Init+0xc4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <MX_SAI1_Init+0xc4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <MX_SAI1_Init+0xc4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <MX_SAI1_Init+0xc4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8000b78:	2302      	movs	r3, #2
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <MX_SAI1_Init+0xc4>)
 8000b80:	f008 ff7e 	bl	8009a80 <HAL_SAI_InitProtocol>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_SAI1_Init+0xb6>
  {
    Error_Handler();
 8000b8a:	f000 f921 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	24000194 	.word	0x24000194
 8000b98:	40015804 	.word	0x40015804
 8000b9c:	2400022c 	.word	0x2400022c
 8000ba0:	40015824 	.word	0x40015824

08000ba4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	@ 0x30
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000bd2:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <MX_TIM8_Init+0xcc>)
 8000bd4:	4a27      	ldr	r2, [pc, #156]	@ (8000c74 <MX_TIM8_Init+0xd0>)
 8000bd6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 50-1;
 8000bd8:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <MX_TIM8_Init+0xcc>)
 8000bda:	2231      	movs	r2, #49	@ 0x31
 8000bdc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <MX_TIM8_Init+0xcc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8000be4:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <MX_TIM8_Init+0xcc>)
 8000be6:	2263      	movs	r2, #99	@ 0x63
 8000be8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_TIM8_Init+0xcc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <MX_TIM8_Init+0xcc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <MX_TIM8_Init+0xcc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000bfc:	481c      	ldr	r0, [pc, #112]	@ (8000c70 <MX_TIM8_Init+0xcc>)
 8000bfe:	f009 fdc0 	bl	800a782 <HAL_TIM_Base_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8000c08:	f000 f8e2 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c10:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	4619      	mov	r1, r3
 8000c18:	4815      	ldr	r0, [pc, #84]	@ (8000c70 <MX_TIM8_Init+0xcc>)
 8000c1a:	f009 fe79 	bl	800a910 <HAL_TIM_ConfigClockSource>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000c24:	f000 f8d4 	bl	8000dd0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	4619      	mov	r1, r3
 8000c36:	480e      	ldr	r0, [pc, #56]	@ (8000c70 <MX_TIM8_Init+0xcc>)
 8000c38:	f009 ff62 	bl	800ab00 <HAL_TIM_SlaveConfigSynchro>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8000c42:	f000 f8c5 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c46:	2320      	movs	r3, #32
 8000c48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c52:	463b      	mov	r3, r7
 8000c54:	4619      	mov	r1, r3
 8000c56:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <MX_TIM8_Init+0xcc>)
 8000c58:	f00a f9bc 	bl	800afd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000c62:	f000 f8b5 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	3730      	adds	r7, #48	@ 0x30
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	240003b4 	.word	0x240003b4
 8000c74:	40010400 	.word	0x40010400

08000c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <MX_DMA_Init+0x6c>)
 8000c80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c84:	4a17      	ldr	r2, [pc, #92]	@ (8000ce4 <MX_DMA_Init+0x6c>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_DMA_Init+0x6c>)
 8000c90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	200b      	movs	r0, #11
 8000ca2:	f002 fbd4 	bl	800344e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ca6:	200b      	movs	r0, #11
 8000ca8:	f002 fbeb 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	200c      	movs	r0, #12
 8000cb2:	f002 fbcc 	bl	800344e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000cb6:	200c      	movs	r0, #12
 8000cb8:	f002 fbe3 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	200d      	movs	r0, #13
 8000cc2:	f002 fbc4 	bl	800344e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cc6:	200d      	movs	r0, #13
 8000cc8:	f002 fbdb 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	200e      	movs	r0, #14
 8000cd2:	f002 fbbc 	bl	800344e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000cd6:	200e      	movs	r0, #14
 8000cd8:	f002 fbd3 	bl	8003482 <HAL_NVIC_EnableIRQ>

}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58024400 	.word	0x58024400

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000cf6:	f043 0310 	orr.w	r3, r3, #16
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	f003 0310 	and.w	r3, r3, #16
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	4a18      	ldr	r2, [pc, #96]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1c:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d30:	4a10      	ldr	r2, [pc, #64]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d48:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	4a09      	ldr	r2, [pc, #36]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_GPIO_Init+0x8c>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	58024400 	.word	0x58024400

08000d78 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d8a:	f002 fb95 	bl	80034b8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d9a:	231f      	movs	r3, #31
 8000d9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d9e:	2387      	movs	r3, #135	@ 0x87
 8000da0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000da6:	2300      	movs	r3, #0
 8000da8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dae:	2301      	movs	r3, #1
 8000db0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fbb3 	bl	8003528 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dc2:	2004      	movs	r0, #4
 8000dc4:	f002 fb90 	bl	80034e8 <HAL_MPU_Enable>

}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <Error_Handler+0x8>

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <HAL_MspInit+0x30>)
 8000de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de8:	4a08      	ldr	r2, [pc, #32]	@ (8000e0c <HAL_MspInit+0x30>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_MspInit+0x30>)
 8000df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	58024400 	.word	0x58024400

08000e10 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a34      	ldr	r2, [pc, #208]	@ (8000f00 <HAL_ADC_MspInit+0xf0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d161      	bne.n	8000ef6 <HAL_ADC_MspInit+0xe6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e32:	4b34      	ldr	r3, [pc, #208]	@ (8000f04 <HAL_ADC_MspInit+0xf4>)
 8000e34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e38:	4a32      	ldr	r2, [pc, #200]	@ (8000f04 <HAL_ADC_MspInit+0xf4>)
 8000e3a:	f043 0320 	orr.w	r3, r3, #32
 8000e3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e42:	4b30      	ldr	r3, [pc, #192]	@ (8000f04 <HAL_ADC_MspInit+0xf4>)
 8000e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e48:	f003 0320 	and.w	r3, r3, #32
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b2c      	ldr	r3, [pc, #176]	@ (8000f04 <HAL_ADC_MspInit+0xf4>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	4a2b      	ldr	r2, [pc, #172]	@ (8000f04 <HAL_ADC_MspInit+0xf4>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <HAL_ADC_MspInit+0xf4>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e6e:	2308      	movs	r3, #8
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e72:	2303      	movs	r3, #3
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4821      	ldr	r0, [pc, #132]	@ (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000e82:	f004 ff45 	bl	8005d10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000e86:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000e88:	4a21      	ldr	r2, [pc, #132]	@ (8000f10 <HAL_ADC_MspInit+0x100>)
 8000e8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000e8e:	2209      	movs	r2, #9
 8000e90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e92:	4b1e      	ldr	r3, [pc, #120]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e98:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000ea0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ea4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000ea8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eae:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000eb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000eb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ebc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000eca:	4810      	ldr	r0, [pc, #64]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000ecc:	f002 fe3c 	bl	8003b48 <HAL_DMA_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8000ed6:	f7ff ff7b 	bl	8000dd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000ede:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2012      	movs	r0, #18
 8000eec:	f002 faaf 	bl	800344e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ef0:	2012      	movs	r0, #18
 8000ef2:	f002 fac6 	bl	8003482 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	@ 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000
 8000f04:	58024400 	.word	0x58024400
 8000f08:	58020000 	.word	0x58020000
 8000f0c:	24000090 	.word	0x24000090
 8000f10:	40020010 	.word	0x40020010

08000f14 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff0 <HAL_DAC_MspInit+0xdc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d157      	bne.n	8000fe6 <HAL_DAC_MspInit+0xd2>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000f36:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff4 <HAL_DAC_MspInit+0xe0>)
 8000f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff4 <HAL_DAC_MspInit+0xe0>)
 8000f3e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000f42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f46:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff4 <HAL_DAC_MspInit+0xe0>)
 8000f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b27      	ldr	r3, [pc, #156]	@ (8000ff4 <HAL_DAC_MspInit+0xe0>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	4a26      	ldr	r2, [pc, #152]	@ (8000ff4 <HAL_DAC_MspInit+0xe0>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f64:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <HAL_DAC_MspInit+0xe0>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f72:	2310      	movs	r3, #16
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f76:	2303      	movs	r3, #3
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	481c      	ldr	r0, [pc, #112]	@ (8000ff8 <HAL_DAC_MspInit+0xe4>)
 8000f86:	f004 fec3 	bl	8005d10 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001000 <HAL_DAC_MspInit+0xec>)
 8000f8e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000f92:	2243      	movs	r2, #67	@ 0x43
 8000f94:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000f98:	2240      	movs	r2, #64	@ 0x40
 8000f9a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000fa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fa8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000fb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fbc:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000fca:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000fcc:	f002 fdbc 	bl	8003b48 <HAL_DMA_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8000fd6:	f7ff fefb 	bl	8000dd0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	4a06      	ldr	r2, [pc, #24]	@ (8000ffc <HAL_DAC_MspInit+0xe8>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	@ 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40007400 	.word	0x40007400
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	58020000 	.word	0x58020000
 8000ffc:	2400011c 	.word	0x2400011c
 8001000:	40020028 	.word	0x40020028

08001004 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <HAL_TIM_Base_MspInit+0x3c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10e      	bne.n	8001034 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <HAL_TIM_Base_MspInit+0x40>)
 8001018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800101c:	4a09      	ldr	r2, [pc, #36]	@ (8001044 <HAL_TIM_Base_MspInit+0x40>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <HAL_TIM_Base_MspInit+0x40>)
 8001028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40010400 	.word	0x40010400
 8001044:	58024400 	.word	0x58024400

08001048 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a66      	ldr	r2, [pc, #408]	@ (80011f0 <HAL_SAI_MspInit+0x1a8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d160      	bne.n	800111c <HAL_SAI_MspInit+0xd4>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800105a:	4b66      	ldr	r3, [pc, #408]	@ (80011f4 <HAL_SAI_MspInit+0x1ac>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10e      	bne.n	8001080 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001062:	4b65      	ldr	r3, [pc, #404]	@ (80011f8 <HAL_SAI_MspInit+0x1b0>)
 8001064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001068:	4a63      	ldr	r2, [pc, #396]	@ (80011f8 <HAL_SAI_MspInit+0x1b0>)
 800106a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800106e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001072:	4b61      	ldr	r3, [pc, #388]	@ (80011f8 <HAL_SAI_MspInit+0x1b0>)
 8001074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001078:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001080:	4b5c      	ldr	r3, [pc, #368]	@ (80011f4 <HAL_SAI_MspInit+0x1ac>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a5b      	ldr	r2, [pc, #364]	@ (80011f4 <HAL_SAI_MspInit+0x1ac>)
 8001088:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800108a:	2374      	movs	r3, #116	@ 0x74
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800109a:	2306      	movs	r3, #6
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4855      	ldr	r0, [pc, #340]	@ (80011fc <HAL_SAI_MspInit+0x1b4>)
 80010a6:	f004 fe33 	bl	8005d10 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream2;
 80010aa:	4b55      	ldr	r3, [pc, #340]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 80010ac:	4a55      	ldr	r2, [pc, #340]	@ (8001204 <HAL_SAI_MspInit+0x1bc>)
 80010ae:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80010b0:	4b53      	ldr	r3, [pc, #332]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 80010b2:	2257      	movs	r2, #87	@ 0x57
 80010b4:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b6:	4b52      	ldr	r3, [pc, #328]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 80010b8:	2240      	movs	r2, #64	@ 0x40
 80010ba:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80010bc:	4b50      	ldr	r3, [pc, #320]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80010c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 80010c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c8:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 80010cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010d0:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 80010d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010d8:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80010da:	4b49      	ldr	r3, [pc, #292]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 80010dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010e0:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80010e2:	4b47      	ldr	r3, [pc, #284]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 80010e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010e8:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ea:	4b45      	ldr	r3, [pc, #276]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80010f0:	4843      	ldr	r0, [pc, #268]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 80010f2:	f002 fd29 	bl	8003b48 <HAL_DMA_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 80010fc:	f7ff fe68 	bl	8000dd0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a3f      	ldr	r2, [pc, #252]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 8001104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001108:	4a3d      	ldr	r2, [pc, #244]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a3b      	ldr	r2, [pc, #236]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 8001112:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001116:	4a3a      	ldr	r2, [pc, #232]	@ (8001200 <HAL_SAI_MspInit+0x1b8>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI1_Block_B)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a39      	ldr	r2, [pc, #228]	@ (8001208 <HAL_SAI_MspInit+0x1c0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d160      	bne.n	80011e8 <HAL_SAI_MspInit+0x1a0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001126:	4b33      	ldr	r3, [pc, #204]	@ (80011f4 <HAL_SAI_MspInit+0x1ac>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10e      	bne.n	800114c <HAL_SAI_MspInit+0x104>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800112e:	4b32      	ldr	r3, [pc, #200]	@ (80011f8 <HAL_SAI_MspInit+0x1b0>)
 8001130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001134:	4a30      	ldr	r2, [pc, #192]	@ (80011f8 <HAL_SAI_MspInit+0x1b0>)
 8001136:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800113a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800113e:	4b2e      	ldr	r3, [pc, #184]	@ (80011f8 <HAL_SAI_MspInit+0x1b0>)
 8001140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800114c:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <HAL_SAI_MspInit+0x1ac>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	4a28      	ldr	r2, [pc, #160]	@ (80011f4 <HAL_SAI_MspInit+0x1ac>)
 8001154:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001156:	2308      	movs	r3, #8
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001166:	2306      	movs	r3, #6
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4822      	ldr	r0, [pc, #136]	@ (80011fc <HAL_SAI_MspInit+0x1b4>)
 8001172:	f004 fdcd 	bl	8005d10 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA1_Stream3;
 8001176:	4b25      	ldr	r3, [pc, #148]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 8001178:	4a25      	ldr	r2, [pc, #148]	@ (8001210 <HAL_SAI_MspInit+0x1c8>)
 800117a:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800117c:	4b23      	ldr	r3, [pc, #140]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 800117e:	2258      	movs	r2, #88	@ 0x58
 8001180:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001182:	4b22      	ldr	r3, [pc, #136]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001188:	4b20      	ldr	r3, [pc, #128]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800118e:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 8001190:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001194:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001196:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 8001198:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800119c:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800119e:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 80011a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011a4:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 80011a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ac:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 80011b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011b4:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80011bc:	4813      	ldr	r0, [pc, #76]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 80011be:	f002 fcc3 	bl	8003b48 <HAL_DMA_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_SAI_MspInit+0x184>
    {
      Error_Handler();
 80011c8:	f7ff fe02 	bl	8000dd0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a0f      	ldr	r2, [pc, #60]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 80011d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80011d4:	4a0d      	ldr	r2, [pc, #52]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 80011de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <HAL_SAI_MspInit+0x1c4>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	@ 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40015804 	.word	0x40015804
 80011f4:	2400840c 	.word	0x2400840c
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58021000 	.word	0x58021000
 8001200:	240002c4 	.word	0x240002c4
 8001204:	40020040 	.word	0x40020040
 8001208:	40015824 	.word	0x40015824
 800120c:	2400033c 	.word	0x2400033c
 8001210:	40020058 	.word	0x40020058

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <NMI_Handler+0x4>

0800121c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <MemManage_Handler+0x4>

0800122c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <UsageFault_Handler+0x4>

0800123c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126a:	f000 f98b 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <DMA1_Stream0_IRQHandler+0x10>)
 800127a:	f003 fa2b 	bl	80046d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	24000090 	.word	0x24000090

08001288 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <DMA1_Stream1_IRQHandler+0x10>)
 800128e:	f003 fa21 	bl	80046d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2400011c 	.word	0x2400011c

0800129c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <DMA1_Stream2_IRQHandler+0x10>)
 80012a2:	f003 fa17 	bl	80046d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	240002c4 	.word	0x240002c4

080012b0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <DMA1_Stream3_IRQHandler+0x10>)
 80012b6:	f003 fa0d 	bl	80046d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2400033c 	.word	0x2400033c

080012c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <ADC_IRQHandler+0x10>)
 80012ca:	f000 fe4f 	bl	8001f6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400002c 	.word	0x2400002c

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012dc:	4b43      	ldr	r3, [pc, #268]	@ (80013ec <SystemInit+0x114>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e2:	4a42      	ldr	r2, [pc, #264]	@ (80013ec <SystemInit+0x114>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ec:	4b40      	ldr	r3, [pc, #256]	@ (80013f0 <SystemInit+0x118>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	2b06      	cmp	r3, #6
 80012f6:	d807      	bhi.n	8001308 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012f8:	4b3d      	ldr	r3, [pc, #244]	@ (80013f0 <SystemInit+0x118>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 030f 	bic.w	r3, r3, #15
 8001300:	4a3b      	ldr	r2, [pc, #236]	@ (80013f0 <SystemInit+0x118>)
 8001302:	f043 0307 	orr.w	r3, r3, #7
 8001306:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001308:	4b3a      	ldr	r3, [pc, #232]	@ (80013f4 <SystemInit+0x11c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a39      	ldr	r2, [pc, #228]	@ (80013f4 <SystemInit+0x11c>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001314:	4b37      	ldr	r3, [pc, #220]	@ (80013f4 <SystemInit+0x11c>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800131a:	4b36      	ldr	r3, [pc, #216]	@ (80013f4 <SystemInit+0x11c>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4935      	ldr	r1, [pc, #212]	@ (80013f4 <SystemInit+0x11c>)
 8001320:	4b35      	ldr	r3, [pc, #212]	@ (80013f8 <SystemInit+0x120>)
 8001322:	4013      	ands	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001326:	4b32      	ldr	r3, [pc, #200]	@ (80013f0 <SystemInit+0x118>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001332:	4b2f      	ldr	r3, [pc, #188]	@ (80013f0 <SystemInit+0x118>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 030f 	bic.w	r3, r3, #15
 800133a:	4a2d      	ldr	r2, [pc, #180]	@ (80013f0 <SystemInit+0x118>)
 800133c:	f043 0307 	orr.w	r3, r3, #7
 8001340:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001342:	4b2c      	ldr	r3, [pc, #176]	@ (80013f4 <SystemInit+0x11c>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001348:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <SystemInit+0x11c>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800134e:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <SystemInit+0x11c>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001354:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <SystemInit+0x11c>)
 8001356:	4a29      	ldr	r2, [pc, #164]	@ (80013fc <SystemInit+0x124>)
 8001358:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <SystemInit+0x11c>)
 800135c:	4a28      	ldr	r2, [pc, #160]	@ (8001400 <SystemInit+0x128>)
 800135e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001360:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <SystemInit+0x11c>)
 8001362:	4a28      	ldr	r2, [pc, #160]	@ (8001404 <SystemInit+0x12c>)
 8001364:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <SystemInit+0x11c>)
 8001368:	2200      	movs	r2, #0
 800136a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800136c:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <SystemInit+0x11c>)
 800136e:	4a25      	ldr	r2, [pc, #148]	@ (8001404 <SystemInit+0x12c>)
 8001370:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001372:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <SystemInit+0x11c>)
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <SystemInit+0x11c>)
 800137a:	4a22      	ldr	r2, [pc, #136]	@ (8001404 <SystemInit+0x12c>)
 800137c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <SystemInit+0x11c>)
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <SystemInit+0x11c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1a      	ldr	r2, [pc, #104]	@ (80013f4 <SystemInit+0x11c>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800138e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <SystemInit+0x11c>)
 8001392:	2200      	movs	r2, #0
 8001394:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <SystemInit+0x130>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <SystemInit+0x134>)
 800139c:	4013      	ands	r3, r2
 800139e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013a2:	d202      	bcs.n	80013aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <SystemInit+0x138>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <SystemInit+0x11c>)
 80013ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d113      	bne.n	80013e0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <SystemInit+0x11c>)
 80013ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013be:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <SystemInit+0x11c>)
 80013c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013c8:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <SystemInit+0x13c>)
 80013ca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013ce:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <SystemInit+0x11c>)
 80013d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013d6:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <SystemInit+0x11c>)
 80013d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00
 80013f0:	52002000 	.word	0x52002000
 80013f4:	58024400 	.word	0x58024400
 80013f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80013fc:	02020200 	.word	0x02020200
 8001400:	01ff0000 	.word	0x01ff0000
 8001404:	01010280 	.word	0x01010280
 8001408:	5c001000 	.word	0x5c001000
 800140c:	ffff0000 	.word	0xffff0000
 8001410:	51008108 	.word	0x51008108
 8001414:	52004000 	.word	0x52004000

08001418 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <ExitRun0Mode+0x2c>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	4a08      	ldr	r2, [pc, #32]	@ (8001444 <ExitRun0Mode+0x2c>)
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001428:	bf00      	nop
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <ExitRun0Mode+0x2c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f9      	beq.n	800142a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	58024800 	.word	0x58024800

08001448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001448:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001484 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800144c:	f7ff ffe4 	bl	8001418 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001450:	f7ff ff42 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001454:	480c      	ldr	r0, [pc, #48]	@ (8001488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001456:	490d      	ldr	r1, [pc, #52]	@ (800148c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001458:	4a0d      	ldr	r2, [pc, #52]	@ (8001490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800146c:	4c0a      	ldr	r4, [pc, #40]	@ (8001498 <LoopFillZerobss+0x22>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147a:	f009 fe77 	bl	800b16c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff f967 	bl	8000750 <main>
  bx  lr
 8001482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001484:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001488:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800148c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001490:	0800b1ec 	.word	0x0800b1ec
  ldr r2, =_sbss
 8001494:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001498:	24008414 	.word	0x24008414

0800149c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC3_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a6:	2003      	movs	r0, #3
 80014a8:	f001 ffc6 	bl	8003438 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014ac:	f005 fc2a 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <HAL_Init+0x68>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	4913      	ldr	r1, [pc, #76]	@ (800150c <HAL_Init+0x6c>)
 80014be:	5ccb      	ldrb	r3, [r1, r3]
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <HAL_Init+0x68>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	4a0e      	ldr	r2, [pc, #56]	@ (800150c <HAL_Init+0x6c>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	f003 031f 	and.w	r3, r3, #31
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001510 <HAL_Init+0x70>)
 80014e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001514 <HAL_Init+0x74>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ea:	200f      	movs	r0, #15
 80014ec:	f000 f814 	bl	8001518 <HAL_InitTick>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e002      	b.n	8001500 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014fa:	f7ff fc6f 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	58024400 	.word	0x58024400
 800150c:	0800b1cc 	.word	0x0800b1cc
 8001510:	24000004 	.word	0x24000004
 8001514:	24000000 	.word	0x24000000

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001520:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <HAL_InitTick+0x60>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e021      	b.n	8001570 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <HAL_InitTick+0x64>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_InitTick+0x60>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f001 ffab 	bl	800349e <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001560:	f001 ff75 	bl	800344e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	@ (8001580 <HAL_InitTick+0x68>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2400000c 	.word	0x2400000c
 800157c:	24000000 	.word	0x24000000
 8001580:	24000008 	.word	0x24000008

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	@ (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	2400000c 	.word	0x2400000c
 80015a8:	24008410 	.word	0x24008410

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	24008410 	.word	0x24008410

080015c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015c8:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <HAL_GetREVID+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0c1b      	lsrs	r3, r3, #16
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	5c001000 	.word	0x5c001000

080015dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	609a      	str	r2, [r3, #8]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001654:	2b00      	cmp	r3, #0
 8001656:	d107      	bne.n	8001668 <LL_ADC_SetChannelPreselection+0x24>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	0e9b      	lsrs	r3, r3, #26
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	2201      	movs	r2, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	e015      	b.n	8001694 <LL_ADC_SetChannelPreselection+0x50>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800167e:	2320      	movs	r3, #32
 8001680:	e003      	b.n	800168a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	2201      	movs	r2, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	69d2      	ldr	r2, [r2, #28]
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800169e:	bf00      	nop
 80016a0:	371c      	adds	r7, #28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b087      	sub	sp, #28
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3360      	adds	r3, #96	@ 0x60
 80016bc:	461a      	mov	r2, r3
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	430b      	orrs	r3, r1
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	431a      	orrs	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	611a      	str	r2, [r3, #16]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3360      	adds	r3, #96	@ 0x60
 800172c:	461a      	mov	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	431a      	orrs	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	601a      	str	r2, [r3, #0]
  }
}
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3330      	adds	r3, #48	@ 0x30
 8001788:	461a      	mov	r2, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	4413      	add	r3, r2
 8001796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	211f      	movs	r1, #31
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	401a      	ands	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	0e9b      	lsrs	r3, r3, #26
 80017b0:	f003 011f 	and.w	r1, r3, #31
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	431a      	orrs	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017c4:	bf00      	nop
 80017c6:	371c      	adds	r7, #28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f023 0203 	bic.w	r2, r3, #3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60da      	str	r2, [r3, #12]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	3314      	adds	r3, #20
 800182c:	461a      	mov	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	0e5b      	lsrs	r3, r3, #25
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	4413      	add	r3, r2
 800183a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	0d1b      	lsrs	r3, r3, #20
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	2107      	movs	r1, #7
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	401a      	ands	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	0d1b      	lsrs	r3, r3, #20
 8001856:	f003 031f 	and.w	r3, r3, #31
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	431a      	orrs	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001866:	bf00      	nop
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800188c:	43db      	mvns	r3, r3
 800188e:	401a      	ands	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0318 	and.w	r3, r3, #24
 8001896:	4908      	ldr	r1, [pc, #32]	@ (80018b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001898:	40d9      	lsrs	r1, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	400b      	ands	r3, r1
 800189e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018a2:	431a      	orrs	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	000fffff 	.word	0x000fffff

080018bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 031f 	and.w	r3, r3, #31
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001902:	4013      	ands	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6093      	str	r3, [r2, #8]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	5fffffc0 	.word	0x5fffffc0

08001918 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800192c:	d101      	bne.n	8001932 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <LL_ADC_EnableInternalRegulator+0x24>)
 800194e:	4013      	ands	r3, r2
 8001950:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	6fffffc0 	.word	0x6fffffc0

08001968 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001978:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800197c:	d101      	bne.n	8001982 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <LL_ADC_Enable+0x24>)
 800199e:	4013      	ands	r3, r2
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	7fffffc0 	.word	0x7fffffc0

080019b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <LL_ADC_Disable+0x24>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	f043 0202 	orr.w	r2, r3, #2
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	7fffffc0 	.word	0x7fffffc0

080019e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <LL_ADC_IsEnabled+0x18>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <LL_ADC_IsEnabled+0x1a>
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d101      	bne.n	8001a1e <LL_ADC_IsDisableOngoing+0x18>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <LL_ADC_IsDisableOngoing+0x1a>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <LL_ADC_REG_StartConversion+0x24>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	f043 0204 	orr.w	r2, r3, #4
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	7fffffc0 	.word	0x7fffffc0

08001a54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d101      	bne.n	8001a6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d101      	bne.n	8001a92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e18f      	b.n	8001dda <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff f9a1 	bl	8000e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff19 	bl	8001918 <LL_ADC_IsDeepPowerDownEnabled>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff feff 	bl	80018f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff34 	bl	8001968 <LL_ADC_IsInternalRegulatorEnabled>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d114      	bne.n	8001b30 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff18 	bl	8001940 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b10:	4b87      	ldr	r3, [pc, #540]	@ (8001d30 <HAL_ADC_Init+0x290>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	099b      	lsrs	r3, r3, #6
 8001b16:	4a87      	ldr	r2, [pc, #540]	@ (8001d34 <HAL_ADC_Init+0x294>)
 8001b18:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1c:	099b      	lsrs	r3, r3, #6
 8001b1e:	3301      	adds	r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b22:	e002      	b.n	8001b2a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f9      	bne.n	8001b24 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff17 	bl	8001968 <LL_ADC_IsInternalRegulatorEnabled>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10d      	bne.n	8001b5c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b44:	f043 0210 	orr.w	r2, r3, #16
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b50:	f043 0201 	orr.w	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff77 	bl	8001a54 <LL_ADC_REG_IsConversionOngoing>
 8001b66:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 8129 	bne.w	8001dc8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 8125 	bne.w	8001dc8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b82:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b86:	f043 0202 	orr.w	r2, r3, #2
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff24 	bl	80019e0 <LL_ADC_IsEnabled>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d136      	bne.n	8001c0c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a65      	ldr	r2, [pc, #404]	@ (8001d38 <HAL_ADC_Init+0x298>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d004      	beq.n	8001bb2 <HAL_ADC_Init+0x112>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a63      	ldr	r2, [pc, #396]	@ (8001d3c <HAL_ADC_Init+0x29c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_ADC_Init+0x130>
 8001bb2:	4861      	ldr	r0, [pc, #388]	@ (8001d38 <HAL_ADC_Init+0x298>)
 8001bb4:	f7ff ff14 	bl	80019e0 <LL_ADC_IsEnabled>
 8001bb8:	4604      	mov	r4, r0
 8001bba:	4860      	ldr	r0, [pc, #384]	@ (8001d3c <HAL_ADC_Init+0x29c>)
 8001bbc:	f7ff ff10 	bl	80019e0 <LL_ADC_IsEnabled>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4323      	orrs	r3, r4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e008      	b.n	8001be2 <HAL_ADC_Init+0x142>
 8001bd0:	485b      	ldr	r0, [pc, #364]	@ (8001d40 <HAL_ADC_Init+0x2a0>)
 8001bd2:	f7ff ff05 	bl	80019e0 <LL_ADC_IsEnabled>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d012      	beq.n	8001c0c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a53      	ldr	r2, [pc, #332]	@ (8001d38 <HAL_ADC_Init+0x298>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d004      	beq.n	8001bfa <HAL_ADC_Init+0x15a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a51      	ldr	r2, [pc, #324]	@ (8001d3c <HAL_ADC_Init+0x29c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_Init+0x15e>
 8001bfa:	4a52      	ldr	r2, [pc, #328]	@ (8001d44 <HAL_ADC_Init+0x2a4>)
 8001bfc:	e000      	b.n	8001c00 <HAL_ADC_Init+0x160>
 8001bfe:	4a52      	ldr	r2, [pc, #328]	@ (8001d48 <HAL_ADC_Init+0x2a8>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f7ff fce8 	bl	80015dc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c0c:	f7ff fcda 	bl	80015c4 <HAL_GetREVID>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d914      	bls.n	8001c44 <HAL_ADC_Init+0x1a4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d110      	bne.n	8001c44 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7d5b      	ldrb	r3, [r3, #21]
 8001c26:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c2c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c32:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7f1b      	ldrb	r3, [r3, #28]
 8001c38:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c3a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c3c:	f043 030c 	orr.w	r3, r3, #12
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	e00d      	b.n	8001c60 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7d5b      	ldrb	r3, [r3, #21]
 8001c48:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c4e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c54:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7f1b      	ldrb	r3, [r3, #28]
 8001c5a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7f1b      	ldrb	r3, [r3, #28]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	045b      	lsls	r3, r3, #17
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4b2c      	ldr	r3, [pc, #176]	@ (8001d4c <HAL_ADC_Init+0x2ac>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	69b9      	ldr	r1, [r7, #24]
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fed2 	bl	8001a54 <LL_ADC_REG_IsConversionOngoing>
 8001cb0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fedf 	bl	8001a7a <LL_ADC_INJ_IsConversionOngoing>
 8001cbc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d15f      	bne.n	8001d84 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d15c      	bne.n	8001d84 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7d1b      	ldrb	r3, [r3, #20]
 8001cce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <HAL_ADC_Init+0x2b0>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	69b9      	ldr	r1, [r7, #24]
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d130      	bne.n	8001d58 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <HAL_ADC_Init+0x2b4>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d0a:	3a01      	subs	r2, #1
 8001d0c:	0411      	lsls	r1, r2, #16
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d12:	4311      	orrs	r1, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	611a      	str	r2, [r3, #16]
 8001d2c:	e01c      	b.n	8001d68 <HAL_ADC_Init+0x2c8>
 8001d2e:	bf00      	nop
 8001d30:	24000000 	.word	0x24000000
 8001d34:	053e2d63 	.word	0x053e2d63
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40022100 	.word	0x40022100
 8001d40:	58026000 	.word	0x58026000
 8001d44:	40022300 	.word	0x40022300
 8001d48:	58026300 	.word	0x58026300
 8001d4c:	fff0c003 	.word	0xfff0c003
 8001d50:	ffffbffc 	.word	0xffffbffc
 8001d54:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 ffb0 	bl	8002ce4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d10c      	bne.n	8001da6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f023 010f 	bic.w	r1, r3, #15
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	1e5a      	subs	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001da4:	e007      	b.n	8001db6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 020f 	bic.w	r2, r2, #15
 8001db4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dba:	f023 0303 	bic.w	r3, r3, #3
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dc6:	e007      	b.n	8001dd8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dcc:	f043 0210 	orr.w	r2, r3, #16
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	@ 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd90      	pop	{r4, r7, pc}
 8001de2:	bf00      	nop

08001de4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a55      	ldr	r2, [pc, #340]	@ (8001f4c <HAL_ADC_Start_DMA+0x168>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d004      	beq.n	8001e04 <HAL_ADC_Start_DMA+0x20>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a54      	ldr	r2, [pc, #336]	@ (8001f50 <HAL_ADC_Start_DMA+0x16c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_Start_DMA+0x24>
 8001e04:	4b53      	ldr	r3, [pc, #332]	@ (8001f54 <HAL_ADC_Start_DMA+0x170>)
 8001e06:	e000      	b.n	8001e0a <HAL_ADC_Start_DMA+0x26>
 8001e08:	4b53      	ldr	r3, [pc, #332]	@ (8001f58 <HAL_ADC_Start_DMA+0x174>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fd56 	bl	80018bc <LL_ADC_GetMultimode>
 8001e10:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fe1c 	bl	8001a54 <LL_ADC_REG_IsConversionOngoing>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 808c 	bne.w	8001f3c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_Start_DMA+0x4e>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e087      	b.n	8001f42 <HAL_ADC_Start_DMA+0x15e>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d002      	beq.n	8001e4c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b09      	cmp	r3, #9
 8001e4a:	d170      	bne.n	8001f2e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 fdcb 	bl	80029e8 <ADC_Enable>
 8001e52:	4603      	mov	r3, r0
 8001e54:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d163      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e60:	4b3e      	ldr	r3, [pc, #248]	@ (8001f5c <HAL_ADC_Start_DMA+0x178>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a37      	ldr	r2, [pc, #220]	@ (8001f50 <HAL_ADC_Start_DMA+0x16c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d002      	beq.n	8001e7c <HAL_ADC_Start_DMA+0x98>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e000      	b.n	8001e7e <HAL_ADC_Start_DMA+0x9a>
 8001e7c:	4b33      	ldr	r3, [pc, #204]	@ (8001f4c <HAL_ADC_Start_DMA+0x168>)
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d002      	beq.n	8001e8c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d105      	bne.n	8001e98 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea8:	f023 0206 	bic.w	r2, r3, #6
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	659a      	str	r2, [r3, #88]	@ 0x58
 8001eb0:	e002      	b.n	8001eb8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebc:	4a28      	ldr	r2, [pc, #160]	@ (8001f60 <HAL_ADC_Start_DMA+0x17c>)
 8001ebe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec4:	4a27      	ldr	r2, [pc, #156]	@ (8001f64 <HAL_ADC_Start_DMA+0x180>)
 8001ec6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ecc:	4a26      	ldr	r2, [pc, #152]	@ (8001f68 <HAL_ADC_Start_DMA+0x184>)
 8001ece:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	221c      	movs	r2, #28
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0210 	orr.w	r2, r2, #16
 8001eee:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f7ff fc68 	bl	80017d0 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3340      	adds	r3, #64	@ 0x40
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f002 f976 	bl	8004200 <HAL_DMA_Start_IT>
 8001f14:	4603      	mov	r3, r0
 8001f16:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fd85 	bl	8001a2c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001f22:	e00d      	b.n	8001f40 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001f2c:	e008      	b.n	8001f40 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001f3a:	e001      	b.n	8001f40 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40022000 	.word	0x40022000
 8001f50:	40022100 	.word	0x40022100
 8001f54:	40022300 	.word	0x40022300
 8001f58:	58026300 	.word	0x58026300
 8001f5c:	fffff0fe 	.word	0xfffff0fe
 8001f60:	08002bbb 	.word	0x08002bbb
 8001f64:	08002c93 	.word	0x08002c93
 8001f68:	08002caf 	.word	0x08002caf

08001f6c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	@ 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a87      	ldr	r2, [pc, #540]	@ (80021ac <HAL_ADC_IRQHandler+0x240>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_ADC_IRQHandler+0x30>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a86      	ldr	r2, [pc, #536]	@ (80021b0 <HAL_ADC_IRQHandler+0x244>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_IRQHandler+0x34>
 8001f9c:	4b85      	ldr	r3, [pc, #532]	@ (80021b4 <HAL_ADC_IRQHandler+0x248>)
 8001f9e:	e000      	b.n	8001fa2 <HAL_ADC_IRQHandler+0x36>
 8001fa0:	4b85      	ldr	r3, [pc, #532]	@ (80021b8 <HAL_ADC_IRQHandler+0x24c>)
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fc8a 	bl	80018bc <LL_ADC_GetMultimode>
 8001fa8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d017      	beq.n	8001fe4 <HAL_ADC_IRQHandler+0x78>
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fce:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f001 f876 	bl	80030c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d004      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0x8c>
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10a      	bne.n	800200e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8083 	beq.w	800210a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d07d      	beq.n	800210a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fb91 	bl	8001752 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d062      	beq.n	80020fc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a5d      	ldr	r2, [pc, #372]	@ (80021b0 <HAL_ADC_IRQHandler+0x244>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d002      	beq.n	8002046 <HAL_ADC_IRQHandler+0xda>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	e000      	b.n	8002048 <HAL_ADC_IRQHandler+0xdc>
 8002046:	4b59      	ldr	r3, [pc, #356]	@ (80021ac <HAL_ADC_IRQHandler+0x240>)
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	4293      	cmp	r3, r2
 800204e:	d008      	beq.n	8002062 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b05      	cmp	r3, #5
 800205a:	d002      	beq.n	8002062 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b09      	cmp	r3, #9
 8002060:	d104      	bne.n	800206c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	e00c      	b.n	8002086 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a4f      	ldr	r2, [pc, #316]	@ (80021b0 <HAL_ADC_IRQHandler+0x244>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d002      	beq.n	800207c <HAL_ADC_IRQHandler+0x110>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	e000      	b.n	800207e <HAL_ADC_IRQHandler+0x112>
 800207c:	4b4b      	ldr	r3, [pc, #300]	@ (80021ac <HAL_ADC_IRQHandler+0x240>)
 800207e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d135      	bne.n	80020fc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b08      	cmp	r3, #8
 800209c:	d12e      	bne.n	80020fc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fcd6 	bl	8001a54 <LL_ADC_REG_IsConversionOngoing>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d11a      	bne.n	80020e4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 020c 	bic.w	r2, r2, #12
 80020bc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d112      	bne.n	80020fc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54
 80020e2:	e00b      	b.n	80020fc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e8:	f043 0210 	orr.w	r2, r3, #16
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7fe f8eb 	bl	80002d8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	220c      	movs	r2, #12
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_ADC_IRQHandler+0x1b2>
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10b      	bne.n	8002136 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a0 	beq.w	800226a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 809a 	beq.w	800226a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002146:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fb4f 	bl	80017f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002158:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff faf7 	bl	8001752 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002164:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a11      	ldr	r2, [pc, #68]	@ (80021b0 <HAL_ADC_IRQHandler+0x244>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d002      	beq.n	8002176 <HAL_ADC_IRQHandler+0x20a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	e000      	b.n	8002178 <HAL_ADC_IRQHandler+0x20c>
 8002176:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <HAL_ADC_IRQHandler+0x240>)
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	4293      	cmp	r3, r2
 800217e:	d008      	beq.n	8002192 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b06      	cmp	r3, #6
 800218a:	d002      	beq.n	8002192 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b07      	cmp	r3, #7
 8002190:	d104      	bne.n	800219c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	e014      	b.n	80021c6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a03      	ldr	r2, [pc, #12]	@ (80021b0 <HAL_ADC_IRQHandler+0x244>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00a      	beq.n	80021bc <HAL_ADC_IRQHandler+0x250>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	e008      	b.n	80021be <HAL_ADC_IRQHandler+0x252>
 80021ac:	40022000 	.word	0x40022000
 80021b0:	40022100 	.word	0x40022100
 80021b4:	40022300 	.word	0x40022300
 80021b8:	58026300 	.word	0x58026300
 80021bc:	4b84      	ldr	r3, [pc, #528]	@ (80023d0 <HAL_ADC_IRQHandler+0x464>)
 80021be:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d047      	beq.n	800225c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_ADC_IRQHandler+0x27a>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d03f      	beq.n	800225c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d13a      	bne.n	800225c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f0:	2b40      	cmp	r3, #64	@ 0x40
 80021f2:	d133      	bne.n	800225c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d12e      	bne.n	800225c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fc39 	bl	8001a7a <LL_ADC_INJ_IsConversionOngoing>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11a      	bne.n	8002244 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800221c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002222:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d112      	bne.n	800225c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	@ 0x54
 8002242:	e00b      	b.n	800225c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002248:	f043 0210 	orr.w	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 ff0b 	bl	8003078 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2260      	movs	r2, #96	@ 0x60
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002270:	2b00      	cmp	r3, #0
 8002272:	d011      	beq.n	8002298 <HAL_ADC_IRQHandler+0x32c>
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00c      	beq.n	8002298 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002282:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8a8 	bl	80023e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2280      	movs	r2, #128	@ 0x80
 8002296:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d012      	beq.n	80022c8 <HAL_ADC_IRQHandler+0x35c>
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00d      	beq.n	80022c8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fef1 	bl	80030a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d012      	beq.n	80022f8 <HAL_ADC_IRQHandler+0x38c>
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 fee3 	bl	80030b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d043      	beq.n	800238a <HAL_ADC_IRQHandler+0x41e>
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d03e      	beq.n	800238a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002314:	2301      	movs	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
 8002318:	e021      	b.n	800235e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d015      	beq.n	800234c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2a      	ldr	r2, [pc, #168]	@ (80023d0 <HAL_ADC_IRQHandler+0x464>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d004      	beq.n	8002334 <HAL_ADC_IRQHandler+0x3c8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a29      	ldr	r2, [pc, #164]	@ (80023d4 <HAL_ADC_IRQHandler+0x468>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d101      	bne.n	8002338 <HAL_ADC_IRQHandler+0x3cc>
 8002334:	4b28      	ldr	r3, [pc, #160]	@ (80023d8 <HAL_ADC_IRQHandler+0x46c>)
 8002336:	e000      	b.n	800233a <HAL_ADC_IRQHandler+0x3ce>
 8002338:	4b28      	ldr	r3, [pc, #160]	@ (80023dc <HAL_ADC_IRQHandler+0x470>)
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff facc 	bl	80018d8 <LL_ADC_GetMultiDMATransfer>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002346:	2301      	movs	r3, #1
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
 800234a:	e008      	b.n	800235e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800235a:	2301      	movs	r3, #1
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	2b01      	cmp	r3, #1
 8002362:	d10e      	bne.n	8002382 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002368:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002374:	f043 0202 	orr.w	r2, r3, #2
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f839 	bl	80023f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2210      	movs	r2, #16
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002390:	2b00      	cmp	r3, #0
 8002392:	d018      	beq.n	80023c6 <HAL_ADC_IRQHandler+0x45a>
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239a:	2b00      	cmp	r3, #0
 800239c:	d013      	beq.n	80023c6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	f043 0208 	orr.w	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023be:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fe63 	bl	800308c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80023c6:	bf00      	nop
 80023c8:	3728      	adds	r7, #40	@ 0x28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40022000 	.word	0x40022000
 80023d4:	40022100 	.word	0x40022100
 80023d8:	40022300 	.word	0x40022300
 80023dc:	58026300 	.word	0x58026300

080023e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b08d      	sub	sp, #52	@ 0x34
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a65      	ldr	r2, [pc, #404]	@ (80025b8 <HAL_ADC_ConfigChannel+0x1b0>)
 8002422:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x2a>
 800242e:	2302      	movs	r3, #2
 8002430:	e2c7      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x5ba>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fb08 	bl	8001a54 <LL_ADC_REG_IsConversionOngoing>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 82ac 	bne.w	80029a4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db2c      	blt.n	80024ae <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800245c:	2b00      	cmp	r3, #0
 800245e:	d108      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x6a>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	2201      	movs	r2, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	e016      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x98>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	613b      	str	r3, [r7, #16]
  return result;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800248a:	2320      	movs	r3, #32
 800248c:	e003      	b.n	8002496 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2201      	movs	r2, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	69d1      	ldr	r1, [r2, #28]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	430b      	orrs	r3, r1
 80024ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	f7ff f95c 	bl	8001778 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fac5 	bl	8001a54 <LL_ADC_REG_IsConversionOngoing>
 80024ca:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fad2 	bl	8001a7a <LL_ADC_INJ_IsConversionOngoing>
 80024d6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 80b8 	bne.w	8002650 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 80b4 	bne.w	8002650 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	461a      	mov	r2, r3
 80024f6:	f7ff f991 	bl	800181c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024fa:	4b30      	ldr	r3, [pc, #192]	@ (80025bc <HAL_ADC_ConfigChannel+0x1b4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002506:	d10b      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x118>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	e01d      	b.n	800255c <HAL_ADC_ConfigChannel+0x154>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10b      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x13e>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	e00a      	b.n	800255c <HAL_ADC_ConfigChannel+0x154>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b04      	cmp	r3, #4
 8002564:	d02c      	beq.n	80025c0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6919      	ldr	r1, [r3, #16]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f7ff f899 	bl	80016aa <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6919      	ldr	r1, [r3, #16]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	7e5b      	ldrb	r3, [r3, #25]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d102      	bne.n	800258e <HAL_ADC_ConfigChannel+0x186>
 8002588:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800258c:	e000      	b.n	8002590 <HAL_ADC_ConfigChannel+0x188>
 800258e:	2300      	movs	r3, #0
 8002590:	461a      	mov	r2, r3
 8002592:	f7ff f8c3 	bl	800171c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6919      	ldr	r1, [r3, #16]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	7e1b      	ldrb	r3, [r3, #24]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d102      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1a4>
 80025a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025aa:	e000      	b.n	80025ae <HAL_ADC_ConfigChannel+0x1a6>
 80025ac:	2300      	movs	r3, #0
 80025ae:	461a      	mov	r2, r3
 80025b0:	f7ff f89b 	bl	80016ea <LL_ADC_SetDataRightShift>
 80025b4:	e04c      	b.n	8002650 <HAL_ADC_ConfigChannel+0x248>
 80025b6:	bf00      	nop
 80025b8:	47ff0000 	.word	0x47ff0000
 80025bc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	069b      	lsls	r3, r3, #26
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d107      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025e2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	069b      	lsls	r3, r3, #26
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d107      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002606:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800260e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	069b      	lsls	r3, r3, #26
 8002618:	429a      	cmp	r2, r3
 800261a:	d107      	bne.n	800262c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800262a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002632:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	069b      	lsls	r3, r3, #26
 800263c:	429a      	cmp	r2, r3
 800263e:	d107      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800264e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff f9c3 	bl	80019e0 <LL_ADC_IsEnabled>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	f040 81aa 	bne.w	80029b6 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	461a      	mov	r2, r3
 8002670:	f7ff f900 	bl	8001874 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a87      	ldr	r2, [pc, #540]	@ (8002898 <HAL_ADC_ConfigChannel+0x490>)
 800267a:	4293      	cmp	r3, r2
 800267c:	f040 809a 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4984      	ldr	r1, [pc, #528]	@ (800289c <HAL_ADC_ConfigChannel+0x494>)
 800268a:	428b      	cmp	r3, r1
 800268c:	d147      	bne.n	800271e <HAL_ADC_ConfigChannel+0x316>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4983      	ldr	r1, [pc, #524]	@ (80028a0 <HAL_ADC_ConfigChannel+0x498>)
 8002694:	428b      	cmp	r3, r1
 8002696:	d040      	beq.n	800271a <HAL_ADC_ConfigChannel+0x312>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4981      	ldr	r1, [pc, #516]	@ (80028a4 <HAL_ADC_ConfigChannel+0x49c>)
 800269e:	428b      	cmp	r3, r1
 80026a0:	d039      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x30e>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4980      	ldr	r1, [pc, #512]	@ (80028a8 <HAL_ADC_ConfigChannel+0x4a0>)
 80026a8:	428b      	cmp	r3, r1
 80026aa:	d032      	beq.n	8002712 <HAL_ADC_ConfigChannel+0x30a>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	497e      	ldr	r1, [pc, #504]	@ (80028ac <HAL_ADC_ConfigChannel+0x4a4>)
 80026b2:	428b      	cmp	r3, r1
 80026b4:	d02b      	beq.n	800270e <HAL_ADC_ConfigChannel+0x306>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	497d      	ldr	r1, [pc, #500]	@ (80028b0 <HAL_ADC_ConfigChannel+0x4a8>)
 80026bc:	428b      	cmp	r3, r1
 80026be:	d024      	beq.n	800270a <HAL_ADC_ConfigChannel+0x302>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	497b      	ldr	r1, [pc, #492]	@ (80028b4 <HAL_ADC_ConfigChannel+0x4ac>)
 80026c6:	428b      	cmp	r3, r1
 80026c8:	d01d      	beq.n	8002706 <HAL_ADC_ConfigChannel+0x2fe>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	497a      	ldr	r1, [pc, #488]	@ (80028b8 <HAL_ADC_ConfigChannel+0x4b0>)
 80026d0:	428b      	cmp	r3, r1
 80026d2:	d016      	beq.n	8002702 <HAL_ADC_ConfigChannel+0x2fa>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4978      	ldr	r1, [pc, #480]	@ (80028bc <HAL_ADC_ConfigChannel+0x4b4>)
 80026da:	428b      	cmp	r3, r1
 80026dc:	d00f      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x2f6>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4977      	ldr	r1, [pc, #476]	@ (80028c0 <HAL_ADC_ConfigChannel+0x4b8>)
 80026e4:	428b      	cmp	r3, r1
 80026e6:	d008      	beq.n	80026fa <HAL_ADC_ConfigChannel+0x2f2>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4975      	ldr	r1, [pc, #468]	@ (80028c4 <HAL_ADC_ConfigChannel+0x4bc>)
 80026ee:	428b      	cmp	r3, r1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x2ee>
 80026f2:	4b75      	ldr	r3, [pc, #468]	@ (80028c8 <HAL_ADC_ConfigChannel+0x4c0>)
 80026f4:	e05a      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 80026f6:	2300      	movs	r3, #0
 80026f8:	e058      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 80026fa:	4b74      	ldr	r3, [pc, #464]	@ (80028cc <HAL_ADC_ConfigChannel+0x4c4>)
 80026fc:	e056      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 80026fe:	4b74      	ldr	r3, [pc, #464]	@ (80028d0 <HAL_ADC_ConfigChannel+0x4c8>)
 8002700:	e054      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 8002702:	4b6e      	ldr	r3, [pc, #440]	@ (80028bc <HAL_ADC_ConfigChannel+0x4b4>)
 8002704:	e052      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 8002706:	4b6c      	ldr	r3, [pc, #432]	@ (80028b8 <HAL_ADC_ConfigChannel+0x4b0>)
 8002708:	e050      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 800270a:	4b72      	ldr	r3, [pc, #456]	@ (80028d4 <HAL_ADC_ConfigChannel+0x4cc>)
 800270c:	e04e      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 800270e:	4b72      	ldr	r3, [pc, #456]	@ (80028d8 <HAL_ADC_ConfigChannel+0x4d0>)
 8002710:	e04c      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 8002712:	4b72      	ldr	r3, [pc, #456]	@ (80028dc <HAL_ADC_ConfigChannel+0x4d4>)
 8002714:	e04a      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 8002716:	4b72      	ldr	r3, [pc, #456]	@ (80028e0 <HAL_ADC_ConfigChannel+0x4d8>)
 8002718:	e048      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 800271a:	2301      	movs	r3, #1
 800271c:	e046      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4970      	ldr	r1, [pc, #448]	@ (80028e4 <HAL_ADC_ConfigChannel+0x4dc>)
 8002724:	428b      	cmp	r3, r1
 8002726:	d140      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x3a2>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	495c      	ldr	r1, [pc, #368]	@ (80028a0 <HAL_ADC_ConfigChannel+0x498>)
 800272e:	428b      	cmp	r3, r1
 8002730:	d039      	beq.n	80027a6 <HAL_ADC_ConfigChannel+0x39e>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	495b      	ldr	r1, [pc, #364]	@ (80028a4 <HAL_ADC_ConfigChannel+0x49c>)
 8002738:	428b      	cmp	r3, r1
 800273a:	d032      	beq.n	80027a2 <HAL_ADC_ConfigChannel+0x39a>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4959      	ldr	r1, [pc, #356]	@ (80028a8 <HAL_ADC_ConfigChannel+0x4a0>)
 8002742:	428b      	cmp	r3, r1
 8002744:	d02b      	beq.n	800279e <HAL_ADC_ConfigChannel+0x396>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4958      	ldr	r1, [pc, #352]	@ (80028ac <HAL_ADC_ConfigChannel+0x4a4>)
 800274c:	428b      	cmp	r3, r1
 800274e:	d024      	beq.n	800279a <HAL_ADC_ConfigChannel+0x392>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4956      	ldr	r1, [pc, #344]	@ (80028b0 <HAL_ADC_ConfigChannel+0x4a8>)
 8002756:	428b      	cmp	r3, r1
 8002758:	d01d      	beq.n	8002796 <HAL_ADC_ConfigChannel+0x38e>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4955      	ldr	r1, [pc, #340]	@ (80028b4 <HAL_ADC_ConfigChannel+0x4ac>)
 8002760:	428b      	cmp	r3, r1
 8002762:	d016      	beq.n	8002792 <HAL_ADC_ConfigChannel+0x38a>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4953      	ldr	r1, [pc, #332]	@ (80028b8 <HAL_ADC_ConfigChannel+0x4b0>)
 800276a:	428b      	cmp	r3, r1
 800276c:	d00f      	beq.n	800278e <HAL_ADC_ConfigChannel+0x386>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4952      	ldr	r1, [pc, #328]	@ (80028bc <HAL_ADC_ConfigChannel+0x4b4>)
 8002774:	428b      	cmp	r3, r1
 8002776:	d008      	beq.n	800278a <HAL_ADC_ConfigChannel+0x382>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4951      	ldr	r1, [pc, #324]	@ (80028c4 <HAL_ADC_ConfigChannel+0x4bc>)
 800277e:	428b      	cmp	r3, r1
 8002780:	d101      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x37e>
 8002782:	4b51      	ldr	r3, [pc, #324]	@ (80028c8 <HAL_ADC_ConfigChannel+0x4c0>)
 8002784:	e012      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 8002786:	2300      	movs	r3, #0
 8002788:	e010      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 800278a:	4b51      	ldr	r3, [pc, #324]	@ (80028d0 <HAL_ADC_ConfigChannel+0x4c8>)
 800278c:	e00e      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 800278e:	4b4b      	ldr	r3, [pc, #300]	@ (80028bc <HAL_ADC_ConfigChannel+0x4b4>)
 8002790:	e00c      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 8002792:	4b49      	ldr	r3, [pc, #292]	@ (80028b8 <HAL_ADC_ConfigChannel+0x4b0>)
 8002794:	e00a      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 8002796:	4b4f      	ldr	r3, [pc, #316]	@ (80028d4 <HAL_ADC_ConfigChannel+0x4cc>)
 8002798:	e008      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 800279a:	4b4f      	ldr	r3, [pc, #316]	@ (80028d8 <HAL_ADC_ConfigChannel+0x4d0>)
 800279c:	e006      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 800279e:	4b4f      	ldr	r3, [pc, #316]	@ (80028dc <HAL_ADC_ConfigChannel+0x4d4>)
 80027a0:	e004      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 80027a2:	4b4f      	ldr	r3, [pc, #316]	@ (80028e0 <HAL_ADC_ConfigChannel+0x4d8>)
 80027a4:	e002      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a4>
 80027aa:	2300      	movs	r3, #0
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f7fe ff48 	bl	8001644 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f280 80fc 	bge.w	80029b6 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a36      	ldr	r2, [pc, #216]	@ (800289c <HAL_ADC_ConfigChannel+0x494>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d004      	beq.n	80027d2 <HAL_ADC_ConfigChannel+0x3ca>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a45      	ldr	r2, [pc, #276]	@ (80028e4 <HAL_ADC_ConfigChannel+0x4dc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x3ce>
 80027d2:	4b45      	ldr	r3, [pc, #276]	@ (80028e8 <HAL_ADC_ConfigChannel+0x4e0>)
 80027d4:	e000      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x3d0>
 80027d6:	4b45      	ldr	r3, [pc, #276]	@ (80028ec <HAL_ADC_ConfigChannel+0x4e4>)
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe ff25 	bl	8001628 <LL_ADC_GetCommonPathInternalCh>
 80027de:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2d      	ldr	r2, [pc, #180]	@ (800289c <HAL_ADC_ConfigChannel+0x494>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <HAL_ADC_ConfigChannel+0x3ec>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a3d      	ldr	r2, [pc, #244]	@ (80028e4 <HAL_ADC_ConfigChannel+0x4dc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d10e      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x40a>
 80027f4:	4829      	ldr	r0, [pc, #164]	@ (800289c <HAL_ADC_ConfigChannel+0x494>)
 80027f6:	f7ff f8f3 	bl	80019e0 <LL_ADC_IsEnabled>
 80027fa:	4604      	mov	r4, r0
 80027fc:	4839      	ldr	r0, [pc, #228]	@ (80028e4 <HAL_ADC_ConfigChannel+0x4dc>)
 80027fe:	f7ff f8ef 	bl	80019e0 <LL_ADC_IsEnabled>
 8002802:	4603      	mov	r3, r0
 8002804:	4323      	orrs	r3, r4
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e008      	b.n	8002824 <HAL_ADC_ConfigChannel+0x41c>
 8002812:	4837      	ldr	r0, [pc, #220]	@ (80028f0 <HAL_ADC_ConfigChannel+0x4e8>)
 8002814:	f7ff f8e4 	bl	80019e0 <LL_ADC_IsEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80b3 	beq.w	8002990 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a31      	ldr	r2, [pc, #196]	@ (80028f4 <HAL_ADC_ConfigChannel+0x4ec>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d165      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x4f8>
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d160      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2b      	ldr	r2, [pc, #172]	@ (80028f0 <HAL_ADC_ConfigChannel+0x4e8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	f040 80b6 	bne.w	80029b6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a13      	ldr	r2, [pc, #76]	@ (800289c <HAL_ADC_ConfigChannel+0x494>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_ADC_ConfigChannel+0x456>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a22      	ldr	r2, [pc, #136]	@ (80028e4 <HAL_ADC_ConfigChannel+0x4dc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x45a>
 800285e:	4a22      	ldr	r2, [pc, #136]	@ (80028e8 <HAL_ADC_ConfigChannel+0x4e0>)
 8002860:	e000      	b.n	8002864 <HAL_ADC_ConfigChannel+0x45c>
 8002862:	4a22      	ldr	r2, [pc, #136]	@ (80028ec <HAL_ADC_ConfigChannel+0x4e4>)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800286a:	4619      	mov	r1, r3
 800286c:	4610      	mov	r0, r2
 800286e:	f7fe fec8 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002872:	4b21      	ldr	r3, [pc, #132]	@ (80028f8 <HAL_ADC_ConfigChannel+0x4f0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	4a20      	ldr	r2, [pc, #128]	@ (80028fc <HAL_ADC_ConfigChannel+0x4f4>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	3301      	adds	r3, #1
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002886:	e002      	b.n	800288e <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3b01      	subs	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f9      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002894:	e08f      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x5ae>
 8002896:	bf00      	nop
 8002898:	47ff0000 	.word	0x47ff0000
 800289c:	40022000 	.word	0x40022000
 80028a0:	04300002 	.word	0x04300002
 80028a4:	08600004 	.word	0x08600004
 80028a8:	0c900008 	.word	0x0c900008
 80028ac:	10c00010 	.word	0x10c00010
 80028b0:	14f00020 	.word	0x14f00020
 80028b4:	2a000400 	.word	0x2a000400
 80028b8:	2e300800 	.word	0x2e300800
 80028bc:	32601000 	.word	0x32601000
 80028c0:	43210000 	.word	0x43210000
 80028c4:	4b840000 	.word	0x4b840000
 80028c8:	4fb80000 	.word	0x4fb80000
 80028cc:	47520000 	.word	0x47520000
 80028d0:	36902000 	.word	0x36902000
 80028d4:	25b00200 	.word	0x25b00200
 80028d8:	21800100 	.word	0x21800100
 80028dc:	1d500080 	.word	0x1d500080
 80028e0:	19200040 	.word	0x19200040
 80028e4:	40022100 	.word	0x40022100
 80028e8:	40022300 	.word	0x40022300
 80028ec:	58026300 	.word	0x58026300
 80028f0:	58026000 	.word	0x58026000
 80028f4:	cb840000 	.word	0xcb840000
 80028f8:	24000000 	.word	0x24000000
 80028fc:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a31      	ldr	r2, [pc, #196]	@ (80029cc <HAL_ADC_ConfigChannel+0x5c4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d11e      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x540>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d119      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2d      	ldr	r2, [pc, #180]	@ (80029d0 <HAL_ADC_ConfigChannel+0x5c8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d14b      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a2c      	ldr	r2, [pc, #176]	@ (80029d4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_ADC_ConfigChannel+0x52a>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2a      	ldr	r2, [pc, #168]	@ (80029d8 <HAL_ADC_ConfigChannel+0x5d0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x52e>
 8002932:	4a2a      	ldr	r2, [pc, #168]	@ (80029dc <HAL_ADC_ConfigChannel+0x5d4>)
 8002934:	e000      	b.n	8002938 <HAL_ADC_ConfigChannel+0x530>
 8002936:	4a2a      	ldr	r2, [pc, #168]	@ (80029e0 <HAL_ADC_ConfigChannel+0x5d8>)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f7fe fe5e 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002946:	e036      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a25      	ldr	r2, [pc, #148]	@ (80029e4 <HAL_ADC_ConfigChannel+0x5dc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d131      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x5ae>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d12c      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1b      	ldr	r2, [pc, #108]	@ (80029d0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d127      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1a      	ldr	r2, [pc, #104]	@ (80029d4 <HAL_ADC_ConfigChannel+0x5cc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_ADC_ConfigChannel+0x572>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a18      	ldr	r2, [pc, #96]	@ (80029d8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_ADC_ConfigChannel+0x576>
 800297a:	4a18      	ldr	r2, [pc, #96]	@ (80029dc <HAL_ADC_ConfigChannel+0x5d4>)
 800297c:	e000      	b.n	8002980 <HAL_ADC_ConfigChannel+0x578>
 800297e:	4a18      	ldr	r2, [pc, #96]	@ (80029e0 <HAL_ADC_ConfigChannel+0x5d8>)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f7fe fe3a 	bl	8001602 <LL_ADC_SetCommonPathInternalCh>
 800298e:	e012      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80029a2:	e008      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3734      	adds	r7, #52	@ 0x34
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd90      	pop	{r4, r7, pc}
 80029ca:	bf00      	nop
 80029cc:	c7520000 	.word	0xc7520000
 80029d0:	58026000 	.word	0x58026000
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40022100 	.word	0x40022100
 80029dc:	40022300 	.word	0x40022300
 80029e0:	58026300 	.word	0x58026300
 80029e4:	cfb80000 	.word	0xcfb80000

080029e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fff3 	bl	80019e0 <LL_ADC_IsEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d16e      	bne.n	8002ade <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	4b38      	ldr	r3, [pc, #224]	@ (8002ae8 <ADC_Enable+0x100>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a12:	f043 0210 	orr.w	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e05a      	b.n	8002ae0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe ffae 	bl	8001990 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a34:	f7fe fdba 	bl	80015ac <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2b      	ldr	r2, [pc, #172]	@ (8002aec <ADC_Enable+0x104>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <ADC_Enable+0x66>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a29      	ldr	r2, [pc, #164]	@ (8002af0 <ADC_Enable+0x108>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <ADC_Enable+0x6a>
 8002a4e:	4b29      	ldr	r3, [pc, #164]	@ (8002af4 <ADC_Enable+0x10c>)
 8002a50:	e000      	b.n	8002a54 <ADC_Enable+0x6c>
 8002a52:	4b29      	ldr	r3, [pc, #164]	@ (8002af8 <ADC_Enable+0x110>)
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe ff31 	bl	80018bc <LL_ADC_GetMultimode>
 8002a5a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a23      	ldr	r2, [pc, #140]	@ (8002af0 <ADC_Enable+0x108>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d002      	beq.n	8002a6c <ADC_Enable+0x84>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	e000      	b.n	8002a6e <ADC_Enable+0x86>
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002aec <ADC_Enable+0x104>)
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d02c      	beq.n	8002ad0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d130      	bne.n	8002ade <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a7c:	e028      	b.n	8002ad0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe ffac 	bl	80019e0 <LL_ADC_IsEnabled>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe ff7c 	bl	8001990 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a98:	f7fe fd88 	bl	80015ac <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d914      	bls.n	8002ad0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d00d      	beq.n	8002ad0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab8:	f043 0210 	orr.w	r2, r3, #16
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e007      	b.n	8002ae0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d1cf      	bne.n	8002a7e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	8000003f 	.word	0x8000003f
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40022100 	.word	0x40022100
 8002af4:	40022300 	.word	0x40022300
 8002af8:	58026300 	.word	0x58026300

08002afc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe ff7c 	bl	8001a06 <LL_ADC_IsDisableOngoing>
 8002b0e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe ff63 	bl	80019e0 <LL_ADC_IsEnabled>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d047      	beq.n	8002bb0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d144      	bne.n	8002bb0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030d 	and.w	r3, r3, #13
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d10c      	bne.n	8002b4e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe ff3d 	bl	80019b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2203      	movs	r2, #3
 8002b44:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b46:	f7fe fd31 	bl	80015ac <HAL_GetTick>
 8002b4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b4c:	e029      	b.n	8002ba2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b52:	f043 0210 	orr.w	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e023      	b.n	8002bb2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b6a:	f7fe fd1f 	bl	80015ac <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d914      	bls.n	8002ba2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	f043 0210 	orr.w	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e007      	b.n	8002bb2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1dc      	bne.n	8002b6a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bcc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d14b      	bne.n	8002c6c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d021      	beq.n	8002c32 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fdad 	bl	8001752 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d032      	beq.n	8002c64 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d12b      	bne.n	8002c64 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11f      	bne.n	8002c64 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c30:	e018      	b.n	8002c64 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d111      	bne.n	8002c64 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7fd fb37 	bl	80002d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c6a:	e00e      	b.n	8002c8a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7ff fbbb 	bl	80023f4 <HAL_ADC_ErrorCallback>
}
 8002c7e:	e004      	b.n	8002c8a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
}
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7fd fb51 	bl	8000348 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ccc:	f043 0204 	orr.w	r2, r3, #4
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff fb8d 	bl	80023f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a7a      	ldr	r2, [pc, #488]	@ (8002edc <ADC_ConfigureBoostMode+0x1f8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <ADC_ConfigureBoostMode+0x1c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a79      	ldr	r2, [pc, #484]	@ (8002ee0 <ADC_ConfigureBoostMode+0x1fc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d109      	bne.n	8002d14 <ADC_ConfigureBoostMode+0x30>
 8002d00:	4b78      	ldr	r3, [pc, #480]	@ (8002ee4 <ADC_ConfigureBoostMode+0x200>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf14      	ite	ne
 8002d0c:	2301      	movne	r3, #1
 8002d0e:	2300      	moveq	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e008      	b.n	8002d26 <ADC_ConfigureBoostMode+0x42>
 8002d14:	4b74      	ldr	r3, [pc, #464]	@ (8002ee8 <ADC_ConfigureBoostMode+0x204>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d01c      	beq.n	8002d64 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d2a:	f004 f965 	bl	8006ff8 <HAL_RCC_GetHCLKFreq>
 8002d2e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d38:	d010      	beq.n	8002d5c <ADC_ConfigureBoostMode+0x78>
 8002d3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d3e:	d873      	bhi.n	8002e28 <ADC_ConfigureBoostMode+0x144>
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d44:	d002      	beq.n	8002d4c <ADC_ConfigureBoostMode+0x68>
 8002d46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d4a:	d16d      	bne.n	8002e28 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	60fb      	str	r3, [r7, #12]
        break;
 8002d5a:	e068      	b.n	8002e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	60fb      	str	r3, [r7, #12]
        break;
 8002d62:	e064      	b.n	8002e2e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d64:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	f005 fb94 	bl	8008498 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d70:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d7a:	d051      	beq.n	8002e20 <ADC_ConfigureBoostMode+0x13c>
 8002d7c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002d80:	d854      	bhi.n	8002e2c <ADC_ConfigureBoostMode+0x148>
 8002d82:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d86:	d047      	beq.n	8002e18 <ADC_ConfigureBoostMode+0x134>
 8002d88:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002d8c:	d84e      	bhi.n	8002e2c <ADC_ConfigureBoostMode+0x148>
 8002d8e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d92:	d03d      	beq.n	8002e10 <ADC_ConfigureBoostMode+0x12c>
 8002d94:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002d98:	d848      	bhi.n	8002e2c <ADC_ConfigureBoostMode+0x148>
 8002d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d9e:	d033      	beq.n	8002e08 <ADC_ConfigureBoostMode+0x124>
 8002da0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002da4:	d842      	bhi.n	8002e2c <ADC_ConfigureBoostMode+0x148>
 8002da6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002daa:	d029      	beq.n	8002e00 <ADC_ConfigureBoostMode+0x11c>
 8002dac:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002db0:	d83c      	bhi.n	8002e2c <ADC_ConfigureBoostMode+0x148>
 8002db2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002db6:	d01a      	beq.n	8002dee <ADC_ConfigureBoostMode+0x10a>
 8002db8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002dbc:	d836      	bhi.n	8002e2c <ADC_ConfigureBoostMode+0x148>
 8002dbe:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002dc2:	d014      	beq.n	8002dee <ADC_ConfigureBoostMode+0x10a>
 8002dc4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002dc8:	d830      	bhi.n	8002e2c <ADC_ConfigureBoostMode+0x148>
 8002dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dce:	d00e      	beq.n	8002dee <ADC_ConfigureBoostMode+0x10a>
 8002dd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dd4:	d82a      	bhi.n	8002e2c <ADC_ConfigureBoostMode+0x148>
 8002dd6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002dda:	d008      	beq.n	8002dee <ADC_ConfigureBoostMode+0x10a>
 8002ddc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002de0:	d824      	bhi.n	8002e2c <ADC_ConfigureBoostMode+0x148>
 8002de2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002de6:	d002      	beq.n	8002dee <ADC_ConfigureBoostMode+0x10a>
 8002de8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002dec:	d11e      	bne.n	8002e2c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	0c9b      	lsrs	r3, r3, #18
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	60fb      	str	r3, [r7, #12]
        break;
 8002dfe:	e016      	b.n	8002e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	60fb      	str	r3, [r7, #12]
        break;
 8002e06:	e012      	b.n	8002e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	60fb      	str	r3, [r7, #12]
        break;
 8002e0e:	e00e      	b.n	8002e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	099b      	lsrs	r3, r3, #6
 8002e14:	60fb      	str	r3, [r7, #12]
        break;
 8002e16:	e00a      	b.n	8002e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	09db      	lsrs	r3, r3, #7
 8002e1c:	60fb      	str	r3, [r7, #12]
        break;
 8002e1e:	e006      	b.n	8002e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	60fb      	str	r3, [r7, #12]
        break;
 8002e26:	e002      	b.n	8002e2e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002e28:	bf00      	nop
 8002e2a:	e000      	b.n	8002e2e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002e2c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002e2e:	f7fe fbc9 	bl	80015c4 <HAL_GetREVID>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d815      	bhi.n	8002e68 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a2b      	ldr	r2, [pc, #172]	@ (8002eec <ADC_ConfigureBoostMode+0x208>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d908      	bls.n	8002e56 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e52:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e54:	e03e      	b.n	8002ed4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e64:	609a      	str	r2, [r3, #8]
}
 8002e66:	e035      	b.n	8002ed4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef0 <ADC_ConfigureBoostMode+0x20c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d808      	bhi.n	8002e88 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002e84:	609a      	str	r2, [r3, #8]
}
 8002e86:	e025      	b.n	8002ed4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ef4 <ADC_ConfigureBoostMode+0x210>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d80a      	bhi.n	8002ea6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	e016      	b.n	8002ed4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4a13      	ldr	r2, [pc, #76]	@ (8002ef8 <ADC_ConfigureBoostMode+0x214>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d80a      	bhi.n	8002ec4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec0:	609a      	str	r2, [r3, #8]
}
 8002ec2:	e007      	b.n	8002ed4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002ed2:	609a      	str	r2, [r3, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40022100 	.word	0x40022100
 8002ee4:	40022300 	.word	0x40022300
 8002ee8:	58026300 	.word	0x58026300
 8002eec:	01312d00 	.word	0x01312d00
 8002ef0:	005f5e10 	.word	0x005f5e10
 8002ef4:	00bebc20 	.word	0x00bebc20
 8002ef8:	017d7840 	.word	0x017d7840

08002efc <LL_ADC_IsEnabled>:
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <LL_ADC_IsEnabled+0x18>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <LL_ADC_IsEnabled+0x1a>
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <LL_ADC_StartCalibration>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <LL_ADC_StartCalibration+0x38>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002f44:	430a      	orrs	r2, r1
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	609a      	str	r2, [r3, #8]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	3ffeffc0 	.word	0x3ffeffc0

08002f60 <LL_ADC_IsCalibrationOnGoing>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f74:	d101      	bne.n	8002f7a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_ADC_REG_IsConversionOngoing>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d101      	bne.n	8002fa0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_ADCEx_Calibration_Start+0x1e>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e04c      	b.n	8003068 <HAL_ADCEx_Calibration_Start+0xb8>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff fd90 	bl	8002afc <ADC_Disable>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d135      	bne.n	8003052 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fea:	4b21      	ldr	r3, [pc, #132]	@ (8003070 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	f043 0202 	orr.w	r2, r3, #2
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff90 	bl	8002f24 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003004:	e014      	b.n	8003030 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	3301      	adds	r3, #1
 800300a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4a19      	ldr	r2, [pc, #100]	@ (8003074 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d30d      	bcc.n	8003030 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003018:	f023 0312 	bic.w	r3, r3, #18
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e01b      	b.n	8003068 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff93 	bl	8002f60 <LL_ADC_IsCalibrationOnGoing>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e2      	bne.n	8003006 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003044:	f023 0303 	bic.w	r3, r3, #3
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003050:	e005      	b.n	800305e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003056:	f043 0210 	orr.w	r2, r3, #16
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003066:	7dfb      	ldrb	r3, [r7, #23]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	ffffeefd 	.word	0xffffeefd
 8003074:	25c3f800 	.word	0x25c3f800

08003078 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b09f      	sub	sp, #124	@ 0x7c
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0be      	b.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003106:	2300      	movs	r3, #0
 8003108:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5c      	ldr	r2, [pc, #368]	@ (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d102      	bne.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003114:	4b5b      	ldr	r3, [pc, #364]	@ (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	e001      	b.n	800311e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10b      	bne.n	800313c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e09d      	b.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ff22 	bl	8002f88 <LL_ADC_REG_IsConversionOngoing>
 8003144:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff1c 	bl	8002f88 <LL_ADC_REG_IsConversionOngoing>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d17f      	bne.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003156:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003158:	2b00      	cmp	r3, #0
 800315a:	d17c      	bne.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a47      	ldr	r2, [pc, #284]	@ (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a46      	ldr	r2, [pc, #280]	@ (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003170:	4b45      	ldr	r3, [pc, #276]	@ (8003288 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003172:	e000      	b.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003174:	4b45      	ldr	r3, [pc, #276]	@ (800328c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003176:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d039      	beq.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	431a      	orrs	r2, r3
 800318e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003190:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a3a      	ldr	r2, [pc, #232]	@ (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a38      	ldr	r2, [pc, #224]	@ (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d10e      	bne.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80031a6:	4836      	ldr	r0, [pc, #216]	@ (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80031a8:	f7ff fea8 	bl	8002efc <LL_ADC_IsEnabled>
 80031ac:	4604      	mov	r4, r0
 80031ae:	4835      	ldr	r0, [pc, #212]	@ (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80031b0:	f7ff fea4 	bl	8002efc <LL_ADC_IsEnabled>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4323      	orrs	r3, r4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e008      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80031c4:	4832      	ldr	r0, [pc, #200]	@ (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80031c6:	f7ff fe99 	bl	8002efc <LL_ADC_IsEnabled>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d047      	beq.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	4b2d      	ldr	r3, [pc, #180]	@ (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	6811      	ldr	r1, [r2, #0]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	6892      	ldr	r2, [r2, #8]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	431a      	orrs	r2, r3
 80031ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031f2:	e03a      	b.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80031f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1e      	ldr	r2, [pc, #120]	@ (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1d      	ldr	r2, [pc, #116]	@ (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d10e      	bne.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003214:	481a      	ldr	r0, [pc, #104]	@ (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003216:	f7ff fe71 	bl	8002efc <LL_ADC_IsEnabled>
 800321a:	4604      	mov	r4, r0
 800321c:	4819      	ldr	r0, [pc, #100]	@ (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800321e:	f7ff fe6d 	bl	8002efc <LL_ADC_IsEnabled>
 8003222:	4603      	mov	r3, r0
 8003224:	4323      	orrs	r3, r4
 8003226:	2b00      	cmp	r3, #0
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	e008      	b.n	8003244 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003232:	4817      	ldr	r0, [pc, #92]	@ (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003234:	f7ff fe62 	bl	8002efc <LL_ADC_IsEnabled>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	bf0c      	ite	eq
 800323e:	2301      	moveq	r3, #1
 8003240:	2300      	movne	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d010      	beq.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800324e:	4013      	ands	r3, r2
 8003250:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003252:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003254:	e009      	b.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003268:	e000      	b.n	800326c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800326a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003274:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003278:	4618      	mov	r0, r3
 800327a:	377c      	adds	r7, #124	@ 0x7c
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}
 8003280:	40022000 	.word	0x40022000
 8003284:	40022100 	.word	0x40022100
 8003288:	40022300 	.word	0x40022300
 800328c:	58026300 	.word	0x58026300
 8003290:	58026000 	.word	0x58026000
 8003294:	fffff0e0 	.word	0xfffff0e0

08003298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a8:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <__NVIC_SetPriorityGrouping+0x40>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032b4:	4013      	ands	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032c0:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <__NVIC_SetPriorityGrouping+0x44>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	@ (80032d8 <__NVIC_SetPriorityGrouping+0x40>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00
 80032dc:	05fa0000 	.word	0x05fa0000

080032e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e4:	4b04      	ldr	r3, [pc, #16]	@ (80032f8 <__NVIC_GetPriorityGrouping+0x18>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	f003 0307 	and.w	r3, r3, #7
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800330a:	2b00      	cmp	r3, #0
 800330c:	db0b      	blt.n	8003326 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	f003 021f 	and.w	r2, r3, #31
 8003314:	4907      	ldr	r1, [pc, #28]	@ (8003334 <__NVIC_EnableIRQ+0x38>)
 8003316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	2001      	movs	r0, #1
 800331e:	fa00 f202 	lsl.w	r2, r0, r2
 8003322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	e000e100 	.word	0xe000e100

08003338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db0a      	blt.n	8003362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	490c      	ldr	r1, [pc, #48]	@ (8003384 <__NVIC_SetPriority+0x4c>)
 8003352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	440b      	add	r3, r1
 800335c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003360:	e00a      	b.n	8003378 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4908      	ldr	r1, [pc, #32]	@ (8003388 <__NVIC_SetPriority+0x50>)
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	3b04      	subs	r3, #4
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	440b      	add	r3, r1
 8003376:	761a      	strb	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000e100 	.word	0xe000e100
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	@ 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f1c3 0307 	rsb	r3, r3, #7
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	bf28      	it	cs
 80033aa:	2304      	movcs	r3, #4
 80033ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d902      	bls.n	80033bc <NVIC_EncodePriority+0x30>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3b03      	subs	r3, #3
 80033ba:	e000      	b.n	80033be <NVIC_EncodePriority+0x32>
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	401a      	ands	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	43d9      	mvns	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	4313      	orrs	r3, r2
         );
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	@ 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003404:	d301      	bcc.n	800340a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003406:	2301      	movs	r3, #1
 8003408:	e00f      	b.n	800342a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340a:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <SysTick_Config+0x40>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003412:	210f      	movs	r1, #15
 8003414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003418:	f7ff ff8e 	bl	8003338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800341c:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <SysTick_Config+0x40>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003422:	4b04      	ldr	r3, [pc, #16]	@ (8003434 <SysTick_Config+0x40>)
 8003424:	2207      	movs	r2, #7
 8003426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	e000e010 	.word	0xe000e010

08003438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff29 	bl	8003298 <__NVIC_SetPriorityGrouping>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800345c:	f7ff ff40 	bl	80032e0 <__NVIC_GetPriorityGrouping>
 8003460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7ff ff90 	bl	800338c <NVIC_EncodePriority>
 800346c:	4602      	mov	r2, r0
 800346e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff5f 	bl	8003338 <__NVIC_SetPriority>
}
 800347a:	bf00      	nop
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800348c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff33 	bl	80032fc <__NVIC_EnableIRQ>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffa4 	bl	80033f4 <SysTick_Config>
 80034ac:	4603      	mov	r3, r0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80034bc:	f3bf 8f5f 	dmb	sy
}
 80034c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80034c2:	4b07      	ldr	r3, [pc, #28]	@ (80034e0 <HAL_MPU_Disable+0x28>)
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	4a06      	ldr	r2, [pc, #24]	@ (80034e0 <HAL_MPU_Disable+0x28>)
 80034c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034cc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80034ce:	4b05      	ldr	r3, [pc, #20]	@ (80034e4 <HAL_MPU_Disable+0x2c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	605a      	str	r2, [r3, #4]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000ed00 	.word	0xe000ed00
 80034e4:	e000ed90 	.word	0xe000ed90

080034e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80034f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003520 <HAL_MPU_Enable+0x38>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80034fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <HAL_MPU_Enable+0x3c>)
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	4a09      	ldr	r2, [pc, #36]	@ (8003524 <HAL_MPU_Enable+0x3c>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003504:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003506:	f3bf 8f4f 	dsb	sy
}
 800350a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800350c:	f3bf 8f6f 	isb	sy
}
 8003510:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000ed90 	.word	0xe000ed90
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	785a      	ldrb	r2, [r3, #1]
 8003534:	4b1b      	ldr	r3, [pc, #108]	@ (80035a4 <HAL_MPU_ConfigRegion+0x7c>)
 8003536:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003538:	4b1a      	ldr	r3, [pc, #104]	@ (80035a4 <HAL_MPU_ConfigRegion+0x7c>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_MPU_ConfigRegion+0x7c>)
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003544:	4a17      	ldr	r2, [pc, #92]	@ (80035a4 <HAL_MPU_ConfigRegion+0x7c>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	7b1b      	ldrb	r3, [r3, #12]
 8003550:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	7adb      	ldrb	r3, [r3, #11]
 8003556:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003558:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	7a9b      	ldrb	r3, [r3, #10]
 800355e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003560:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	7b5b      	ldrb	r3, [r3, #13]
 8003566:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003568:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7b9b      	ldrb	r3, [r3, #14]
 800356e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003570:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7bdb      	ldrb	r3, [r3, #15]
 8003576:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003578:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7a5b      	ldrb	r3, [r3, #9]
 800357e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003580:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7a1b      	ldrb	r3, [r3, #8]
 8003586:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003588:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003590:	4a04      	ldr	r2, [pc, #16]	@ (80035a4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003592:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003594:	6113      	str	r3, [r2, #16]
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000ed90 	.word	0xe000ed90

080035a8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e014      	b.n	80035e4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	791b      	ldrb	r3, [r3, #4]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fca2 	bl	8000f14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0a2      	b.n	800374a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	795b      	ldrb	r3, [r3, #5]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_DAC_Start_DMA+0x24>
 800360c:	2302      	movs	r3, #2
 800360e:	e09c      	b.n	800374a <HAL_DAC_Start_DMA+0x15e>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2202      	movs	r2, #2
 800361a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d129      	bne.n	8003676 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4a4b      	ldr	r2, [pc, #300]	@ (8003754 <HAL_DAC_Start_DMA+0x168>)
 8003628:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4a4a      	ldr	r2, [pc, #296]	@ (8003758 <HAL_DAC_Start_DMA+0x16c>)
 8003630:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	4a49      	ldr	r2, [pc, #292]	@ (800375c <HAL_DAC_Start_DMA+0x170>)
 8003638:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003648:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_DAC_Start_DMA+0x6c>
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	2b04      	cmp	r3, #4
 8003654:	d005      	beq.n	8003662 <HAL_DAC_Start_DMA+0x76>
 8003656:	e009      	b.n	800366c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3308      	adds	r3, #8
 800365e:	613b      	str	r3, [r7, #16]
        break;
 8003660:	e033      	b.n	80036ca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	330c      	adds	r3, #12
 8003668:	613b      	str	r3, [r7, #16]
        break;
 800366a:	e02e      	b.n	80036ca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3310      	adds	r3, #16
 8003672:	613b      	str	r3, [r7, #16]
        break;
 8003674:	e029      	b.n	80036ca <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4a39      	ldr	r2, [pc, #228]	@ (8003760 <HAL_DAC_Start_DMA+0x174>)
 800367c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	4a38      	ldr	r2, [pc, #224]	@ (8003764 <HAL_DAC_Start_DMA+0x178>)
 8003684:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4a37      	ldr	r2, [pc, #220]	@ (8003768 <HAL_DAC_Start_DMA+0x17c>)
 800368c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800369c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_DAC_Start_DMA+0xc0>
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d005      	beq.n	80036b6 <HAL_DAC_Start_DMA+0xca>
 80036aa:	e009      	b.n	80036c0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3314      	adds	r3, #20
 80036b2:	613b      	str	r3, [r7, #16]
        break;
 80036b4:	e009      	b.n	80036ca <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3318      	adds	r3, #24
 80036bc:	613b      	str	r3, [r7, #16]
        break;
 80036be:	e004      	b.n	80036ca <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	331c      	adds	r3, #28
 80036c6:	613b      	str	r3, [r7, #16]
        break;
 80036c8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d111      	bne.n	80036f4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6898      	ldr	r0, [r3, #8]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	f000 fd89 	bl	8004200 <HAL_DMA_Start_IT>
 80036ee:	4603      	mov	r3, r0
 80036f0:	75fb      	strb	r3, [r7, #23]
 80036f2:	e010      	b.n	8003716 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003702:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68d8      	ldr	r0, [r3, #12]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	f000 fd77 	bl	8004200 <HAL_DMA_Start_IT>
 8003712:	4603      	mov	r3, r0
 8003714:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10c      	bne.n	800373c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6819      	ldr	r1, [r3, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2201      	movs	r2, #1
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e005      	b.n	8003748 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f043 0204 	orr.w	r2, r3, #4
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003748:	7dfb      	ldrb	r3, [r7, #23]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	08003a35 	.word	0x08003a35
 8003758:	08003a57 	.word	0x08003a57
 800375c:	08003a73 	.word	0x08003a73
 8003760:	08003add 	.word	0x08003add
 8003764:	08003aff 	.word	0x08003aff
 8003768:	08003b1b 	.word	0x08003b1b

0800376c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	@ 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_DAC_ConfigChannel+0x1e>
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e12d      	b.n	8003a26 <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	795b      	ldrb	r3, [r3, #5]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_DAC_ConfigChannel+0x34>
 80037d8:	2302      	movs	r3, #2
 80037da:	e124      	b.n	8003a26 <HAL_DAC_ConfigChannel+0x27e>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2202      	movs	r2, #2
 80037e6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d17a      	bne.n	80038e6 <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80037f0:	f7fd fedc 	bl	80015ac <HAL_GetTick>
 80037f4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d13d      	bne.n	8003878 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80037fc:	e018      	b.n	8003830 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80037fe:	f7fd fed5 	bl	80015ac <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d911      	bls.n	8003830 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003812:	4b87      	ldr	r3, [pc, #540]	@ (8003a30 <HAL_DAC_ConfigChannel+0x288>)
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f043 0208 	orr.w	r2, r3, #8
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2203      	movs	r2, #3
 800382a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e0fa      	b.n	8003a26 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003836:	4b7e      	ldr	r3, [pc, #504]	@ (8003a30 <HAL_DAC_ConfigChannel+0x288>)
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1df      	bne.n	80037fe <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	6992      	ldr	r2, [r2, #24]
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40
 8003848:	e020      	b.n	800388c <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800384a:	f7fd feaf 	bl	80015ac <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d90f      	bls.n	8003878 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800385e:	2b00      	cmp	r3, #0
 8003860:	da0a      	bge.n	8003878 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f043 0208 	orr.w	r2, r3, #8
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2203      	movs	r2, #3
 8003872:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0d6      	b.n	8003a26 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387e:	2b00      	cmp	r3, #0
 8003880:	dbe3      	blt.n	800384a <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	6992      	ldr	r2, [r2, #24]
 800388a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	ea02 0103 	and.w	r1, r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	69da      	ldr	r2, [r3, #28]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	409a      	lsls	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	21ff      	movs	r1, #255	@ 0xff
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	ea02 0103 	and.w	r1, r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	6a1a      	ldr	r2, [r3, #32]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	409a      	lsls	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d11d      	bne.n	800392a <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	221f      	movs	r2, #31
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003930:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2207      	movs	r2, #7
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d102      	bne.n	8003954 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 800394e:	2300      	movs	r3, #0
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
 8003952:	e00f      	b.n	8003974 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d102      	bne.n	8003962 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800395c:	2301      	movs	r3, #1
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003960:	e008      	b.n	8003974 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800396a:	2301      	movs	r3, #1
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
 800396e:	e001      	b.n	8003974 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4313      	orrs	r3, r2
 800397e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6819      	ldr	r1, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43da      	mvns	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	400a      	ands	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4013      	ands	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6819      	ldr	r1, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	22c0      	movs	r2, #192	@ 0xc0
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43da      	mvns	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	400a      	ands	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003a22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3728      	adds	r7, #40	@ 0x28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20008000 	.word	0x20008000

08003a34 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a40:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f7ff fe92 	bl	800376c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	711a      	strb	r2, [r3, #4]
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff fe8b 	bl	8003780 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f043 0204 	orr.w	r2, r3, #4
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff fe81 	bl	8003794 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	711a      	strb	r2, [r3, #4]
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff ffd8 	bl	8003aa0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	711a      	strb	r2, [r3, #4]
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff ffd1 	bl	8003ab4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f043 0204 	orr.w	r2, r3, #4
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff ffc7 	bl	8003ac8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	711a      	strb	r2, [r3, #4]
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003b50:	f7fd fd2c 	bl	80015ac <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e316      	b.n	800418e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a66      	ldr	r2, [pc, #408]	@ (8003d00 <HAL_DMA_Init+0x1b8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d04a      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a65      	ldr	r2, [pc, #404]	@ (8003d04 <HAL_DMA_Init+0x1bc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d045      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a63      	ldr	r2, [pc, #396]	@ (8003d08 <HAL_DMA_Init+0x1c0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d040      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a62      	ldr	r2, [pc, #392]	@ (8003d0c <HAL_DMA_Init+0x1c4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d03b      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a60      	ldr	r2, [pc, #384]	@ (8003d10 <HAL_DMA_Init+0x1c8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d036      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a5f      	ldr	r2, [pc, #380]	@ (8003d14 <HAL_DMA_Init+0x1cc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d031      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8003d18 <HAL_DMA_Init+0x1d0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d02c      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5c      	ldr	r2, [pc, #368]	@ (8003d1c <HAL_DMA_Init+0x1d4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d027      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a5a      	ldr	r2, [pc, #360]	@ (8003d20 <HAL_DMA_Init+0x1d8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d022      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a59      	ldr	r2, [pc, #356]	@ (8003d24 <HAL_DMA_Init+0x1dc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d01d      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a57      	ldr	r2, [pc, #348]	@ (8003d28 <HAL_DMA_Init+0x1e0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d018      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a56      	ldr	r2, [pc, #344]	@ (8003d2c <HAL_DMA_Init+0x1e4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a54      	ldr	r2, [pc, #336]	@ (8003d30 <HAL_DMA_Init+0x1e8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a53      	ldr	r2, [pc, #332]	@ (8003d34 <HAL_DMA_Init+0x1ec>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a51      	ldr	r2, [pc, #324]	@ (8003d38 <HAL_DMA_Init+0x1f0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <HAL_DMA_Init+0xb8>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a50      	ldr	r2, [pc, #320]	@ (8003d3c <HAL_DMA_Init+0x1f4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <HAL_DMA_Init+0xbc>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_DMA_Init+0xbe>
 8003c04:	2300      	movs	r3, #0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 813b 	beq.w	8003e82 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a37      	ldr	r2, [pc, #220]	@ (8003d00 <HAL_DMA_Init+0x1b8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d04a      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a36      	ldr	r2, [pc, #216]	@ (8003d04 <HAL_DMA_Init+0x1bc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d045      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a34      	ldr	r2, [pc, #208]	@ (8003d08 <HAL_DMA_Init+0x1c0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d040      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a33      	ldr	r2, [pc, #204]	@ (8003d0c <HAL_DMA_Init+0x1c4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d03b      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a31      	ldr	r2, [pc, #196]	@ (8003d10 <HAL_DMA_Init+0x1c8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d036      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a30      	ldr	r2, [pc, #192]	@ (8003d14 <HAL_DMA_Init+0x1cc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d031      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003d18 <HAL_DMA_Init+0x1d0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02c      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2d      	ldr	r2, [pc, #180]	@ (8003d1c <HAL_DMA_Init+0x1d4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d027      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2b      	ldr	r2, [pc, #172]	@ (8003d20 <HAL_DMA_Init+0x1d8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d022      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d24 <HAL_DMA_Init+0x1dc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d01d      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a28      	ldr	r2, [pc, #160]	@ (8003d28 <HAL_DMA_Init+0x1e0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d018      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a27      	ldr	r2, [pc, #156]	@ (8003d2c <HAL_DMA_Init+0x1e4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a25      	ldr	r2, [pc, #148]	@ (8003d30 <HAL_DMA_Init+0x1e8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a24      	ldr	r2, [pc, #144]	@ (8003d34 <HAL_DMA_Init+0x1ec>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <HAL_DMA_Init+0x1f0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_DMA_Init+0x174>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a21      	ldr	r2, [pc, #132]	@ (8003d3c <HAL_DMA_Init+0x1f4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d108      	bne.n	8003cce <HAL_DMA_Init+0x186>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e007      	b.n	8003cde <HAL_DMA_Init+0x196>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cde:	e02f      	b.n	8003d40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ce0:	f7fd fc64 	bl	80015ac <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d928      	bls.n	8003d40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e246      	b.n	800418e <HAL_DMA_Init+0x646>
 8003d00:	40020010 	.word	0x40020010
 8003d04:	40020028 	.word	0x40020028
 8003d08:	40020040 	.word	0x40020040
 8003d0c:	40020058 	.word	0x40020058
 8003d10:	40020070 	.word	0x40020070
 8003d14:	40020088 	.word	0x40020088
 8003d18:	400200a0 	.word	0x400200a0
 8003d1c:	400200b8 	.word	0x400200b8
 8003d20:	40020410 	.word	0x40020410
 8003d24:	40020428 	.word	0x40020428
 8003d28:	40020440 	.word	0x40020440
 8003d2c:	40020458 	.word	0x40020458
 8003d30:	40020470 	.word	0x40020470
 8003d34:	40020488 	.word	0x40020488
 8003d38:	400204a0 	.word	0x400204a0
 8003d3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1c8      	bne.n	8003ce0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4b83      	ldr	r3, [pc, #524]	@ (8003f68 <HAL_DMA_Init+0x420>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003d66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d107      	bne.n	8003da4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003da4:	4b71      	ldr	r3, [pc, #452]	@ (8003f6c <HAL_DMA_Init+0x424>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b71      	ldr	r3, [pc, #452]	@ (8003f70 <HAL_DMA_Init+0x428>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003db0:	d328      	bcc.n	8003e04 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b28      	cmp	r3, #40	@ 0x28
 8003db8:	d903      	bls.n	8003dc2 <HAL_DMA_Init+0x27a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dc0:	d917      	bls.n	8003df2 <HAL_DMA_Init+0x2aa>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dc8:	d903      	bls.n	8003dd2 <HAL_DMA_Init+0x28a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b42      	cmp	r3, #66	@ 0x42
 8003dd0:	d90f      	bls.n	8003df2 <HAL_DMA_Init+0x2aa>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b46      	cmp	r3, #70	@ 0x46
 8003dd8:	d903      	bls.n	8003de2 <HAL_DMA_Init+0x29a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b48      	cmp	r3, #72	@ 0x48
 8003de0:	d907      	bls.n	8003df2 <HAL_DMA_Init+0x2aa>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b4e      	cmp	r3, #78	@ 0x4e
 8003de8:	d905      	bls.n	8003df6 <HAL_DMA_Init+0x2ae>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b52      	cmp	r3, #82	@ 0x52
 8003df0:	d801      	bhi.n	8003df6 <HAL_DMA_Init+0x2ae>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_DMA_Init+0x2b0>
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e02:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f023 0307 	bic.w	r3, r3, #7
 8003e1a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d117      	bne.n	8003e5e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00e      	beq.n	8003e5e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f001 fddb 	bl	80059fc <DMA_CheckFifoParam>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2240      	movs	r2, #64	@ 0x40
 8003e50:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e197      	b.n	800418e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f001 fd16 	bl	8005898 <DMA_CalcBaseAndBitshift>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	223f      	movs	r2, #63	@ 0x3f
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	e0cd      	b.n	800401e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a3b      	ldr	r2, [pc, #236]	@ (8003f74 <HAL_DMA_Init+0x42c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <HAL_DMA_Init+0x38a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a39      	ldr	r2, [pc, #228]	@ (8003f78 <HAL_DMA_Init+0x430>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <HAL_DMA_Init+0x38a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a38      	ldr	r2, [pc, #224]	@ (8003f7c <HAL_DMA_Init+0x434>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <HAL_DMA_Init+0x38a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a36      	ldr	r2, [pc, #216]	@ (8003f80 <HAL_DMA_Init+0x438>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_DMA_Init+0x38a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a35      	ldr	r2, [pc, #212]	@ (8003f84 <HAL_DMA_Init+0x43c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_DMA_Init+0x38a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a33      	ldr	r2, [pc, #204]	@ (8003f88 <HAL_DMA_Init+0x440>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_DMA_Init+0x38a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a32      	ldr	r2, [pc, #200]	@ (8003f8c <HAL_DMA_Init+0x444>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_DMA_Init+0x38a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a30      	ldr	r2, [pc, #192]	@ (8003f90 <HAL_DMA_Init+0x448>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <HAL_DMA_Init+0x38e>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_DMA_Init+0x390>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8097 	beq.w	800400c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a24      	ldr	r2, [pc, #144]	@ (8003f74 <HAL_DMA_Init+0x42c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d021      	beq.n	8003f2c <HAL_DMA_Init+0x3e4>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a22      	ldr	r2, [pc, #136]	@ (8003f78 <HAL_DMA_Init+0x430>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01c      	beq.n	8003f2c <HAL_DMA_Init+0x3e4>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a21      	ldr	r2, [pc, #132]	@ (8003f7c <HAL_DMA_Init+0x434>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d017      	beq.n	8003f2c <HAL_DMA_Init+0x3e4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1f      	ldr	r2, [pc, #124]	@ (8003f80 <HAL_DMA_Init+0x438>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d012      	beq.n	8003f2c <HAL_DMA_Init+0x3e4>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f84 <HAL_DMA_Init+0x43c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00d      	beq.n	8003f2c <HAL_DMA_Init+0x3e4>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1c      	ldr	r2, [pc, #112]	@ (8003f88 <HAL_DMA_Init+0x440>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d008      	beq.n	8003f2c <HAL_DMA_Init+0x3e4>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003f8c <HAL_DMA_Init+0x444>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <HAL_DMA_Init+0x3e4>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a19      	ldr	r2, [pc, #100]	@ (8003f90 <HAL_DMA_Init+0x448>)
 8003f2a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4b13      	ldr	r3, [pc, #76]	@ (8003f94 <HAL_DMA_Init+0x44c>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b40      	cmp	r3, #64	@ 0x40
 8003f52:	d021      	beq.n	8003f98 <HAL_DMA_Init+0x450>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b80      	cmp	r3, #128	@ 0x80
 8003f5a:	d102      	bne.n	8003f62 <HAL_DMA_Init+0x41a>
 8003f5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f60:	e01b      	b.n	8003f9a <HAL_DMA_Init+0x452>
 8003f62:	2300      	movs	r3, #0
 8003f64:	e019      	b.n	8003f9a <HAL_DMA_Init+0x452>
 8003f66:	bf00      	nop
 8003f68:	fe10803f 	.word	0xfe10803f
 8003f6c:	5c001000 	.word	0x5c001000
 8003f70:	ffff0000 	.word	0xffff0000
 8003f74:	58025408 	.word	0x58025408
 8003f78:	5802541c 	.word	0x5802541c
 8003f7c:	58025430 	.word	0x58025430
 8003f80:	58025444 	.word	0x58025444
 8003f84:	58025458 	.word	0x58025458
 8003f88:	5802546c 	.word	0x5802546c
 8003f8c:	58025480 	.word	0x58025480
 8003f90:	58025494 	.word	0x58025494
 8003f94:	fffe000f 	.word	0xfffe000f
 8003f98:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68d2      	ldr	r2, [r2, #12]
 8003f9e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003fa8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003fb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003fb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003fc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003fc8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b6e      	ldr	r3, [pc, #440]	@ (8004198 <HAL_DMA_Init+0x650>)
 8003fe0:	4413      	add	r3, r2
 8003fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800419c <HAL_DMA_Init+0x654>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	009a      	lsls	r2, r3, #2
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f001 fc51 	bl	8005898 <DMA_CalcBaseAndBitshift>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2201      	movs	r2, #1
 8004004:	409a      	lsls	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	e008      	b.n	800401e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2240      	movs	r2, #64	@ 0x40
 8004010:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2203      	movs	r2, #3
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e0b7      	b.n	800418e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a5f      	ldr	r2, [pc, #380]	@ (80041a0 <HAL_DMA_Init+0x658>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d072      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a5d      	ldr	r2, [pc, #372]	@ (80041a4 <HAL_DMA_Init+0x65c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d06d      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a5c      	ldr	r2, [pc, #368]	@ (80041a8 <HAL_DMA_Init+0x660>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d068      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a5a      	ldr	r2, [pc, #360]	@ (80041ac <HAL_DMA_Init+0x664>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d063      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a59      	ldr	r2, [pc, #356]	@ (80041b0 <HAL_DMA_Init+0x668>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d05e      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a57      	ldr	r2, [pc, #348]	@ (80041b4 <HAL_DMA_Init+0x66c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d059      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a56      	ldr	r2, [pc, #344]	@ (80041b8 <HAL_DMA_Init+0x670>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d054      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a54      	ldr	r2, [pc, #336]	@ (80041bc <HAL_DMA_Init+0x674>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d04f      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a53      	ldr	r2, [pc, #332]	@ (80041c0 <HAL_DMA_Init+0x678>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d04a      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a51      	ldr	r2, [pc, #324]	@ (80041c4 <HAL_DMA_Init+0x67c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d045      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a50      	ldr	r2, [pc, #320]	@ (80041c8 <HAL_DMA_Init+0x680>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d040      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a4e      	ldr	r2, [pc, #312]	@ (80041cc <HAL_DMA_Init+0x684>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d03b      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a4d      	ldr	r2, [pc, #308]	@ (80041d0 <HAL_DMA_Init+0x688>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d036      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a4b      	ldr	r2, [pc, #300]	@ (80041d4 <HAL_DMA_Init+0x68c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d031      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a4a      	ldr	r2, [pc, #296]	@ (80041d8 <HAL_DMA_Init+0x690>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d02c      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a48      	ldr	r2, [pc, #288]	@ (80041dc <HAL_DMA_Init+0x694>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d027      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a47      	ldr	r2, [pc, #284]	@ (80041e0 <HAL_DMA_Init+0x698>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d022      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a45      	ldr	r2, [pc, #276]	@ (80041e4 <HAL_DMA_Init+0x69c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01d      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a44      	ldr	r2, [pc, #272]	@ (80041e8 <HAL_DMA_Init+0x6a0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d018      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a42      	ldr	r2, [pc, #264]	@ (80041ec <HAL_DMA_Init+0x6a4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a41      	ldr	r2, [pc, #260]	@ (80041f0 <HAL_DMA_Init+0x6a8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a3f      	ldr	r2, [pc, #252]	@ (80041f4 <HAL_DMA_Init+0x6ac>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a3e      	ldr	r2, [pc, #248]	@ (80041f8 <HAL_DMA_Init+0x6b0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_DMA_Init+0x5c6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a3c      	ldr	r2, [pc, #240]	@ (80041fc <HAL_DMA_Init+0x6b4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_DMA_Init+0x5ca>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_DMA_Init+0x5cc>
 8004112:	2300      	movs	r3, #0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d032      	beq.n	800417e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f001 fceb 	bl	8005af4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b80      	cmp	r3, #128	@ 0x80
 8004124:	d102      	bne.n	800412c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004140:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d010      	beq.n	800416c <HAL_DMA_Init+0x624>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d80c      	bhi.n	800416c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f001 fd68 	bl	8005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	e008      	b.n	800417e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	a7fdabf8 	.word	0xa7fdabf8
 800419c:	cccccccd 	.word	0xcccccccd
 80041a0:	40020010 	.word	0x40020010
 80041a4:	40020028 	.word	0x40020028
 80041a8:	40020040 	.word	0x40020040
 80041ac:	40020058 	.word	0x40020058
 80041b0:	40020070 	.word	0x40020070
 80041b4:	40020088 	.word	0x40020088
 80041b8:	400200a0 	.word	0x400200a0
 80041bc:	400200b8 	.word	0x400200b8
 80041c0:	40020410 	.word	0x40020410
 80041c4:	40020428 	.word	0x40020428
 80041c8:	40020440 	.word	0x40020440
 80041cc:	40020458 	.word	0x40020458
 80041d0:	40020470 	.word	0x40020470
 80041d4:	40020488 	.word	0x40020488
 80041d8:	400204a0 	.word	0x400204a0
 80041dc:	400204b8 	.word	0x400204b8
 80041e0:	58025408 	.word	0x58025408
 80041e4:	5802541c 	.word	0x5802541c
 80041e8:	58025430 	.word	0x58025430
 80041ec:	58025444 	.word	0x58025444
 80041f0:	58025458 	.word	0x58025458
 80041f4:	5802546c 	.word	0x5802546c
 80041f8:	58025480 	.word	0x58025480
 80041fc:	58025494 	.word	0x58025494

08004200 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e226      	b.n	800466a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_DMA_Start_IT+0x2a>
 8004226:	2302      	movs	r3, #2
 8004228:	e21f      	b.n	800466a <HAL_DMA_Start_IT+0x46a>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	f040 820a 	bne.w	8004654 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a68      	ldr	r2, [pc, #416]	@ (80043f4 <HAL_DMA_Start_IT+0x1f4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d04a      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a66      	ldr	r2, [pc, #408]	@ (80043f8 <HAL_DMA_Start_IT+0x1f8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d045      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a65      	ldr	r2, [pc, #404]	@ (80043fc <HAL_DMA_Start_IT+0x1fc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d040      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a63      	ldr	r2, [pc, #396]	@ (8004400 <HAL_DMA_Start_IT+0x200>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d03b      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a62      	ldr	r2, [pc, #392]	@ (8004404 <HAL_DMA_Start_IT+0x204>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d036      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a60      	ldr	r2, [pc, #384]	@ (8004408 <HAL_DMA_Start_IT+0x208>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d031      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a5f      	ldr	r2, [pc, #380]	@ (800440c <HAL_DMA_Start_IT+0x20c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d02c      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a5d      	ldr	r2, [pc, #372]	@ (8004410 <HAL_DMA_Start_IT+0x210>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d027      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004414 <HAL_DMA_Start_IT+0x214>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004418 <HAL_DMA_Start_IT+0x218>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01d      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a59      	ldr	r2, [pc, #356]	@ (800441c <HAL_DMA_Start_IT+0x21c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d018      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a57      	ldr	r2, [pc, #348]	@ (8004420 <HAL_DMA_Start_IT+0x220>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a56      	ldr	r2, [pc, #344]	@ (8004424 <HAL_DMA_Start_IT+0x224>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a54      	ldr	r2, [pc, #336]	@ (8004428 <HAL_DMA_Start_IT+0x228>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d009      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a53      	ldr	r2, [pc, #332]	@ (800442c <HAL_DMA_Start_IT+0x22c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_DMA_Start_IT+0xee>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a51      	ldr	r2, [pc, #324]	@ (8004430 <HAL_DMA_Start_IT+0x230>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d108      	bne.n	8004300 <HAL_DMA_Start_IT+0x100>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e007      	b.n	8004310 <HAL_DMA_Start_IT+0x110>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f001 f912 	bl	8005540 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a34      	ldr	r2, [pc, #208]	@ (80043f4 <HAL_DMA_Start_IT+0x1f4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d04a      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a33      	ldr	r2, [pc, #204]	@ (80043f8 <HAL_DMA_Start_IT+0x1f8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d045      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a31      	ldr	r2, [pc, #196]	@ (80043fc <HAL_DMA_Start_IT+0x1fc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d040      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a30      	ldr	r2, [pc, #192]	@ (8004400 <HAL_DMA_Start_IT+0x200>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d03b      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a2e      	ldr	r2, [pc, #184]	@ (8004404 <HAL_DMA_Start_IT+0x204>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d036      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2d      	ldr	r2, [pc, #180]	@ (8004408 <HAL_DMA_Start_IT+0x208>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d031      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2b      	ldr	r2, [pc, #172]	@ (800440c <HAL_DMA_Start_IT+0x20c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d02c      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a2a      	ldr	r2, [pc, #168]	@ (8004410 <HAL_DMA_Start_IT+0x210>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d027      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a28      	ldr	r2, [pc, #160]	@ (8004414 <HAL_DMA_Start_IT+0x214>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d022      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a27      	ldr	r2, [pc, #156]	@ (8004418 <HAL_DMA_Start_IT+0x218>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d01d      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a25      	ldr	r2, [pc, #148]	@ (800441c <HAL_DMA_Start_IT+0x21c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d018      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a24      	ldr	r2, [pc, #144]	@ (8004420 <HAL_DMA_Start_IT+0x220>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a22      	ldr	r2, [pc, #136]	@ (8004424 <HAL_DMA_Start_IT+0x224>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00e      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a21      	ldr	r2, [pc, #132]	@ (8004428 <HAL_DMA_Start_IT+0x228>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1f      	ldr	r2, [pc, #124]	@ (800442c <HAL_DMA_Start_IT+0x22c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <HAL_DMA_Start_IT+0x1bc>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004430 <HAL_DMA_Start_IT+0x230>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d101      	bne.n	80043c0 <HAL_DMA_Start_IT+0x1c0>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_DMA_Start_IT+0x1c2>
 80043c0:	2300      	movs	r3, #0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d036      	beq.n	8004434 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f023 021e 	bic.w	r2, r3, #30
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0216 	orr.w	r2, r2, #22
 80043d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d03e      	beq.n	8004460 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0208 	orr.w	r2, r2, #8
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e035      	b.n	8004460 <HAL_DMA_Start_IT+0x260>
 80043f4:	40020010 	.word	0x40020010
 80043f8:	40020028 	.word	0x40020028
 80043fc:	40020040 	.word	0x40020040
 8004400:	40020058 	.word	0x40020058
 8004404:	40020070 	.word	0x40020070
 8004408:	40020088 	.word	0x40020088
 800440c:	400200a0 	.word	0x400200a0
 8004410:	400200b8 	.word	0x400200b8
 8004414:	40020410 	.word	0x40020410
 8004418:	40020428 	.word	0x40020428
 800441c:	40020440 	.word	0x40020440
 8004420:	40020458 	.word	0x40020458
 8004424:	40020470 	.word	0x40020470
 8004428:	40020488 	.word	0x40020488
 800442c:	400204a0 	.word	0x400204a0
 8004430:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 020e 	bic.w	r2, r3, #14
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 020a 	orr.w	r2, r2, #10
 8004446:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0204 	orr.w	r2, r2, #4
 800445e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a83      	ldr	r2, [pc, #524]	@ (8004674 <HAL_DMA_Start_IT+0x474>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d072      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a82      	ldr	r2, [pc, #520]	@ (8004678 <HAL_DMA_Start_IT+0x478>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d06d      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a80      	ldr	r2, [pc, #512]	@ (800467c <HAL_DMA_Start_IT+0x47c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d068      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a7f      	ldr	r2, [pc, #508]	@ (8004680 <HAL_DMA_Start_IT+0x480>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d063      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a7d      	ldr	r2, [pc, #500]	@ (8004684 <HAL_DMA_Start_IT+0x484>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d05e      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7c      	ldr	r2, [pc, #496]	@ (8004688 <HAL_DMA_Start_IT+0x488>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d059      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a7a      	ldr	r2, [pc, #488]	@ (800468c <HAL_DMA_Start_IT+0x48c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d054      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a79      	ldr	r2, [pc, #484]	@ (8004690 <HAL_DMA_Start_IT+0x490>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d04f      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a77      	ldr	r2, [pc, #476]	@ (8004694 <HAL_DMA_Start_IT+0x494>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d04a      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a76      	ldr	r2, [pc, #472]	@ (8004698 <HAL_DMA_Start_IT+0x498>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d045      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a74      	ldr	r2, [pc, #464]	@ (800469c <HAL_DMA_Start_IT+0x49c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d040      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a73      	ldr	r2, [pc, #460]	@ (80046a0 <HAL_DMA_Start_IT+0x4a0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d03b      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a71      	ldr	r2, [pc, #452]	@ (80046a4 <HAL_DMA_Start_IT+0x4a4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d036      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a70      	ldr	r2, [pc, #448]	@ (80046a8 <HAL_DMA_Start_IT+0x4a8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d031      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a6e      	ldr	r2, [pc, #440]	@ (80046ac <HAL_DMA_Start_IT+0x4ac>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d02c      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a6d      	ldr	r2, [pc, #436]	@ (80046b0 <HAL_DMA_Start_IT+0x4b0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d027      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a6b      	ldr	r2, [pc, #428]	@ (80046b4 <HAL_DMA_Start_IT+0x4b4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d022      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6a      	ldr	r2, [pc, #424]	@ (80046b8 <HAL_DMA_Start_IT+0x4b8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d01d      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a68      	ldr	r2, [pc, #416]	@ (80046bc <HAL_DMA_Start_IT+0x4bc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d018      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a67      	ldr	r2, [pc, #412]	@ (80046c0 <HAL_DMA_Start_IT+0x4c0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d013      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a65      	ldr	r2, [pc, #404]	@ (80046c4 <HAL_DMA_Start_IT+0x4c4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00e      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a64      	ldr	r2, [pc, #400]	@ (80046c8 <HAL_DMA_Start_IT+0x4c8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d009      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a62      	ldr	r2, [pc, #392]	@ (80046cc <HAL_DMA_Start_IT+0x4cc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_DMA_Start_IT+0x350>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a61      	ldr	r2, [pc, #388]	@ (80046d0 <HAL_DMA_Start_IT+0x4d0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d101      	bne.n	8004554 <HAL_DMA_Start_IT+0x354>
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <HAL_DMA_Start_IT+0x356>
 8004554:	2300      	movs	r3, #0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01a      	beq.n	8004590 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d007      	beq.n	8004578 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004576:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800458a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800458e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a37      	ldr	r2, [pc, #220]	@ (8004674 <HAL_DMA_Start_IT+0x474>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d04a      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a36      	ldr	r2, [pc, #216]	@ (8004678 <HAL_DMA_Start_IT+0x478>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d045      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a34      	ldr	r2, [pc, #208]	@ (800467c <HAL_DMA_Start_IT+0x47c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d040      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a33      	ldr	r2, [pc, #204]	@ (8004680 <HAL_DMA_Start_IT+0x480>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d03b      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a31      	ldr	r2, [pc, #196]	@ (8004684 <HAL_DMA_Start_IT+0x484>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d036      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a30      	ldr	r2, [pc, #192]	@ (8004688 <HAL_DMA_Start_IT+0x488>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d031      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a2e      	ldr	r2, [pc, #184]	@ (800468c <HAL_DMA_Start_IT+0x48c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d02c      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a2d      	ldr	r2, [pc, #180]	@ (8004690 <HAL_DMA_Start_IT+0x490>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d027      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004694 <HAL_DMA_Start_IT+0x494>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d022      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004698 <HAL_DMA_Start_IT+0x498>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d01d      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a28      	ldr	r2, [pc, #160]	@ (800469c <HAL_DMA_Start_IT+0x49c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d018      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a27      	ldr	r2, [pc, #156]	@ (80046a0 <HAL_DMA_Start_IT+0x4a0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d013      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a25      	ldr	r2, [pc, #148]	@ (80046a4 <HAL_DMA_Start_IT+0x4a4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00e      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a24      	ldr	r2, [pc, #144]	@ (80046a8 <HAL_DMA_Start_IT+0x4a8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d009      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a22      	ldr	r2, [pc, #136]	@ (80046ac <HAL_DMA_Start_IT+0x4ac>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d004      	beq.n	8004630 <HAL_DMA_Start_IT+0x430>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a21      	ldr	r2, [pc, #132]	@ (80046b0 <HAL_DMA_Start_IT+0x4b0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d108      	bne.n	8004642 <HAL_DMA_Start_IT+0x442>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	e012      	b.n	8004668 <HAL_DMA_Start_IT+0x468>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e009      	b.n	8004668 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800465a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004668:	7dfb      	ldrb	r3, [r7, #23]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40020010 	.word	0x40020010
 8004678:	40020028 	.word	0x40020028
 800467c:	40020040 	.word	0x40020040
 8004680:	40020058 	.word	0x40020058
 8004684:	40020070 	.word	0x40020070
 8004688:	40020088 	.word	0x40020088
 800468c:	400200a0 	.word	0x400200a0
 8004690:	400200b8 	.word	0x400200b8
 8004694:	40020410 	.word	0x40020410
 8004698:	40020428 	.word	0x40020428
 800469c:	40020440 	.word	0x40020440
 80046a0:	40020458 	.word	0x40020458
 80046a4:	40020470 	.word	0x40020470
 80046a8:	40020488 	.word	0x40020488
 80046ac:	400204a0 	.word	0x400204a0
 80046b0:	400204b8 	.word	0x400204b8
 80046b4:	58025408 	.word	0x58025408
 80046b8:	5802541c 	.word	0x5802541c
 80046bc:	58025430 	.word	0x58025430
 80046c0:	58025444 	.word	0x58025444
 80046c4:	58025458 	.word	0x58025458
 80046c8:	5802546c 	.word	0x5802546c
 80046cc:	58025480 	.word	0x58025480
 80046d0:	58025494 	.word	0x58025494

080046d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	@ 0x28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046e0:	4b67      	ldr	r3, [pc, #412]	@ (8004880 <HAL_DMA_IRQHandler+0x1ac>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a67      	ldr	r2, [pc, #412]	@ (8004884 <HAL_DMA_IRQHandler+0x1b0>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	0a9b      	lsrs	r3, r3, #10
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a5f      	ldr	r2, [pc, #380]	@ (8004888 <HAL_DMA_IRQHandler+0x1b4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d04a      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a5d      	ldr	r2, [pc, #372]	@ (800488c <HAL_DMA_IRQHandler+0x1b8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d045      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a5c      	ldr	r2, [pc, #368]	@ (8004890 <HAL_DMA_IRQHandler+0x1bc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d040      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a5a      	ldr	r2, [pc, #360]	@ (8004894 <HAL_DMA_IRQHandler+0x1c0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d03b      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a59      	ldr	r2, [pc, #356]	@ (8004898 <HAL_DMA_IRQHandler+0x1c4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d036      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a57      	ldr	r2, [pc, #348]	@ (800489c <HAL_DMA_IRQHandler+0x1c8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d031      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a56      	ldr	r2, [pc, #344]	@ (80048a0 <HAL_DMA_IRQHandler+0x1cc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d02c      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a54      	ldr	r2, [pc, #336]	@ (80048a4 <HAL_DMA_IRQHandler+0x1d0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d027      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a53      	ldr	r2, [pc, #332]	@ (80048a8 <HAL_DMA_IRQHandler+0x1d4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d022      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a51      	ldr	r2, [pc, #324]	@ (80048ac <HAL_DMA_IRQHandler+0x1d8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01d      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a50      	ldr	r2, [pc, #320]	@ (80048b0 <HAL_DMA_IRQHandler+0x1dc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d018      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a4e      	ldr	r2, [pc, #312]	@ (80048b4 <HAL_DMA_IRQHandler+0x1e0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a4d      	ldr	r2, [pc, #308]	@ (80048b8 <HAL_DMA_IRQHandler+0x1e4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00e      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a4b      	ldr	r2, [pc, #300]	@ (80048bc <HAL_DMA_IRQHandler+0x1e8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d009      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a4a      	ldr	r2, [pc, #296]	@ (80048c0 <HAL_DMA_IRQHandler+0x1ec>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xd2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a48      	ldr	r2, [pc, #288]	@ (80048c4 <HAL_DMA_IRQHandler+0x1f0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <HAL_DMA_IRQHandler+0xd6>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <HAL_DMA_IRQHandler+0xd8>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 842b 	beq.w	8005008 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2208      	movs	r2, #8
 80047bc:	409a      	lsls	r2, r3
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80a2 	beq.w	800490c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004888 <HAL_DMA_IRQHandler+0x1b4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d04a      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2d      	ldr	r2, [pc, #180]	@ (800488c <HAL_DMA_IRQHandler+0x1b8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d045      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004890 <HAL_DMA_IRQHandler+0x1bc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d040      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004894 <HAL_DMA_IRQHandler+0x1c0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d03b      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a28      	ldr	r2, [pc, #160]	@ (8004898 <HAL_DMA_IRQHandler+0x1c4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d036      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a27      	ldr	r2, [pc, #156]	@ (800489c <HAL_DMA_IRQHandler+0x1c8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d031      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a25      	ldr	r2, [pc, #148]	@ (80048a0 <HAL_DMA_IRQHandler+0x1cc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d02c      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a24      	ldr	r2, [pc, #144]	@ (80048a4 <HAL_DMA_IRQHandler+0x1d0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d027      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a22      	ldr	r2, [pc, #136]	@ (80048a8 <HAL_DMA_IRQHandler+0x1d4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d022      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a21      	ldr	r2, [pc, #132]	@ (80048ac <HAL_DMA_IRQHandler+0x1d8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d01d      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1f      	ldr	r2, [pc, #124]	@ (80048b0 <HAL_DMA_IRQHandler+0x1dc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d018      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1e      	ldr	r2, [pc, #120]	@ (80048b4 <HAL_DMA_IRQHandler+0x1e0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1c      	ldr	r2, [pc, #112]	@ (80048b8 <HAL_DMA_IRQHandler+0x1e4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00e      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1b      	ldr	r2, [pc, #108]	@ (80048bc <HAL_DMA_IRQHandler+0x1e8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d009      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a19      	ldr	r2, [pc, #100]	@ (80048c0 <HAL_DMA_IRQHandler+0x1ec>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <HAL_DMA_IRQHandler+0x194>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a18      	ldr	r2, [pc, #96]	@ (80048c4 <HAL_DMA_IRQHandler+0x1f0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d12f      	bne.n	80048c8 <HAL_DMA_IRQHandler+0x1f4>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	bf14      	ite	ne
 8004876:	2301      	movne	r3, #1
 8004878:	2300      	moveq	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e02e      	b.n	80048dc <HAL_DMA_IRQHandler+0x208>
 800487e:	bf00      	nop
 8004880:	24000000 	.word	0x24000000
 8004884:	1b4e81b5 	.word	0x1b4e81b5
 8004888:	40020010 	.word	0x40020010
 800488c:	40020028 	.word	0x40020028
 8004890:	40020040 	.word	0x40020040
 8004894:	40020058 	.word	0x40020058
 8004898:	40020070 	.word	0x40020070
 800489c:	40020088 	.word	0x40020088
 80048a0:	400200a0 	.word	0x400200a0
 80048a4:	400200b8 	.word	0x400200b8
 80048a8:	40020410 	.word	0x40020410
 80048ac:	40020428 	.word	0x40020428
 80048b0:	40020440 	.word	0x40020440
 80048b4:	40020458 	.word	0x40020458
 80048b8:	40020470 	.word	0x40020470
 80048bc:	40020488 	.word	0x40020488
 80048c0:	400204a0 	.word	0x400204a0
 80048c4:	400204b8 	.word	0x400204b8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf14      	ite	ne
 80048d6:	2301      	movne	r3, #1
 80048d8:	2300      	moveq	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d015      	beq.n	800490c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0204 	bic.w	r2, r2, #4
 80048ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2208      	movs	r2, #8
 80048fa:	409a      	lsls	r2, r3
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004904:	f043 0201 	orr.w	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d06e      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a69      	ldr	r2, [pc, #420]	@ (8004acc <HAL_DMA_IRQHandler+0x3f8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d04a      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a67      	ldr	r2, [pc, #412]	@ (8004ad0 <HAL_DMA_IRQHandler+0x3fc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d045      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a66      	ldr	r2, [pc, #408]	@ (8004ad4 <HAL_DMA_IRQHandler+0x400>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d040      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a64      	ldr	r2, [pc, #400]	@ (8004ad8 <HAL_DMA_IRQHandler+0x404>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d03b      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a63      	ldr	r2, [pc, #396]	@ (8004adc <HAL_DMA_IRQHandler+0x408>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d036      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a61      	ldr	r2, [pc, #388]	@ (8004ae0 <HAL_DMA_IRQHandler+0x40c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d031      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a60      	ldr	r2, [pc, #384]	@ (8004ae4 <HAL_DMA_IRQHandler+0x410>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d02c      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ae8 <HAL_DMA_IRQHandler+0x414>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d027      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a5d      	ldr	r2, [pc, #372]	@ (8004aec <HAL_DMA_IRQHandler+0x418>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d022      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a5b      	ldr	r2, [pc, #364]	@ (8004af0 <HAL_DMA_IRQHandler+0x41c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01d      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a5a      	ldr	r2, [pc, #360]	@ (8004af4 <HAL_DMA_IRQHandler+0x420>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a58      	ldr	r2, [pc, #352]	@ (8004af8 <HAL_DMA_IRQHandler+0x424>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a57      	ldr	r2, [pc, #348]	@ (8004afc <HAL_DMA_IRQHandler+0x428>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a55      	ldr	r2, [pc, #340]	@ (8004b00 <HAL_DMA_IRQHandler+0x42c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a54      	ldr	r2, [pc, #336]	@ (8004b04 <HAL_DMA_IRQHandler+0x430>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x2ee>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a52      	ldr	r2, [pc, #328]	@ (8004b08 <HAL_DMA_IRQHandler+0x434>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d10a      	bne.n	80049d8 <HAL_DMA_IRQHandler+0x304>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e003      	b.n	80049e0 <HAL_DMA_IRQHandler+0x30c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00d      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	2201      	movs	r2, #1
 80049ee:	409a      	lsls	r2, r3
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f8:	f043 0202 	orr.w	r2, r3, #2
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	2204      	movs	r2, #4
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 808f 	beq.w	8004b34 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004acc <HAL_DMA_IRQHandler+0x3f8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d04a      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad0 <HAL_DMA_IRQHandler+0x3fc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d045      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a29      	ldr	r2, [pc, #164]	@ (8004ad4 <HAL_DMA_IRQHandler+0x400>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d040      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a27      	ldr	r2, [pc, #156]	@ (8004ad8 <HAL_DMA_IRQHandler+0x404>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d03b      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a26      	ldr	r2, [pc, #152]	@ (8004adc <HAL_DMA_IRQHandler+0x408>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d036      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a24      	ldr	r2, [pc, #144]	@ (8004ae0 <HAL_DMA_IRQHandler+0x40c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d031      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a23      	ldr	r2, [pc, #140]	@ (8004ae4 <HAL_DMA_IRQHandler+0x410>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d02c      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a21      	ldr	r2, [pc, #132]	@ (8004ae8 <HAL_DMA_IRQHandler+0x414>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d027      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a20      	ldr	r2, [pc, #128]	@ (8004aec <HAL_DMA_IRQHandler+0x418>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d022      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a1e      	ldr	r2, [pc, #120]	@ (8004af0 <HAL_DMA_IRQHandler+0x41c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d01d      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004af4 <HAL_DMA_IRQHandler+0x420>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d018      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1b      	ldr	r2, [pc, #108]	@ (8004af8 <HAL_DMA_IRQHandler+0x424>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1a      	ldr	r2, [pc, #104]	@ (8004afc <HAL_DMA_IRQHandler+0x428>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	@ (8004b00 <HAL_DMA_IRQHandler+0x42c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a17      	ldr	r2, [pc, #92]	@ (8004b04 <HAL_DMA_IRQHandler+0x430>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x3e2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	@ (8004b08 <HAL_DMA_IRQHandler+0x434>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d12a      	bne.n	8004b0c <HAL_DMA_IRQHandler+0x438>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e023      	b.n	8004b14 <HAL_DMA_IRQHandler+0x440>
 8004acc:	40020010 	.word	0x40020010
 8004ad0:	40020028 	.word	0x40020028
 8004ad4:	40020040 	.word	0x40020040
 8004ad8:	40020058 	.word	0x40020058
 8004adc:	40020070 	.word	0x40020070
 8004ae0:	40020088 	.word	0x40020088
 8004ae4:	400200a0 	.word	0x400200a0
 8004ae8:	400200b8 	.word	0x400200b8
 8004aec:	40020410 	.word	0x40020410
 8004af0:	40020428 	.word	0x40020428
 8004af4:	40020440 	.word	0x40020440
 8004af8:	40020458 	.word	0x40020458
 8004afc:	40020470 	.word	0x40020470
 8004b00:	40020488 	.word	0x40020488
 8004b04:	400204a0 	.word	0x400204a0
 8004b08:	400204b8 	.word	0x400204b8
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2300      	movs	r3, #0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00d      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	2204      	movs	r2, #4
 8004b22:	409a      	lsls	r2, r3
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2c:	f043 0204 	orr.w	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 80a6 	beq.w	8004c96 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a85      	ldr	r2, [pc, #532]	@ (8004d64 <HAL_DMA_IRQHandler+0x690>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d04a      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a83      	ldr	r2, [pc, #524]	@ (8004d68 <HAL_DMA_IRQHandler+0x694>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d045      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a82      	ldr	r2, [pc, #520]	@ (8004d6c <HAL_DMA_IRQHandler+0x698>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d040      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a80      	ldr	r2, [pc, #512]	@ (8004d70 <HAL_DMA_IRQHandler+0x69c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d03b      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a7f      	ldr	r2, [pc, #508]	@ (8004d74 <HAL_DMA_IRQHandler+0x6a0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d036      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a7d      	ldr	r2, [pc, #500]	@ (8004d78 <HAL_DMA_IRQHandler+0x6a4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d031      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8004d7c <HAL_DMA_IRQHandler+0x6a8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d02c      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a7a      	ldr	r2, [pc, #488]	@ (8004d80 <HAL_DMA_IRQHandler+0x6ac>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d027      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a79      	ldr	r2, [pc, #484]	@ (8004d84 <HAL_DMA_IRQHandler+0x6b0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a77      	ldr	r2, [pc, #476]	@ (8004d88 <HAL_DMA_IRQHandler+0x6b4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01d      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a76      	ldr	r2, [pc, #472]	@ (8004d8c <HAL_DMA_IRQHandler+0x6b8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d018      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a74      	ldr	r2, [pc, #464]	@ (8004d90 <HAL_DMA_IRQHandler+0x6bc>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a73      	ldr	r2, [pc, #460]	@ (8004d94 <HAL_DMA_IRQHandler+0x6c0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a71      	ldr	r2, [pc, #452]	@ (8004d98 <HAL_DMA_IRQHandler+0x6c4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a70      	ldr	r2, [pc, #448]	@ (8004d9c <HAL_DMA_IRQHandler+0x6c8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_DMA_IRQHandler+0x516>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6e      	ldr	r2, [pc, #440]	@ (8004da0 <HAL_DMA_IRQHandler+0x6cc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d10a      	bne.n	8004c00 <HAL_DMA_IRQHandler+0x52c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e009      	b.n	8004c14 <HAL_DMA_IRQHandler+0x540>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bf14      	ite	ne
 8004c0e:	2301      	movne	r3, #1
 8004c10:	2300      	moveq	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d03e      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2210      	movs	r2, #16
 8004c22:	409a      	lsls	r2, r3
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d018      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d108      	bne.n	8004c56 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d024      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
 8004c54:	e01f      	b.n	8004c96 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01b      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
 8004c66:	e016      	b.n	8004c96 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d107      	bne.n	8004c86 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0208 	bic.w	r2, r2, #8
 8004c84:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 8110 	beq.w	8004ecc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d64 <HAL_DMA_IRQHandler+0x690>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d04a      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a2b      	ldr	r2, [pc, #172]	@ (8004d68 <HAL_DMA_IRQHandler+0x694>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d045      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a29      	ldr	r2, [pc, #164]	@ (8004d6c <HAL_DMA_IRQHandler+0x698>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d040      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a28      	ldr	r2, [pc, #160]	@ (8004d70 <HAL_DMA_IRQHandler+0x69c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d03b      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a26      	ldr	r2, [pc, #152]	@ (8004d74 <HAL_DMA_IRQHandler+0x6a0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d036      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a25      	ldr	r2, [pc, #148]	@ (8004d78 <HAL_DMA_IRQHandler+0x6a4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d031      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a23      	ldr	r2, [pc, #140]	@ (8004d7c <HAL_DMA_IRQHandler+0x6a8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d02c      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a22      	ldr	r2, [pc, #136]	@ (8004d80 <HAL_DMA_IRQHandler+0x6ac>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d027      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a20      	ldr	r2, [pc, #128]	@ (8004d84 <HAL_DMA_IRQHandler+0x6b0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d022      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d88 <HAL_DMA_IRQHandler+0x6b4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d01d      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1d      	ldr	r2, [pc, #116]	@ (8004d8c <HAL_DMA_IRQHandler+0x6b8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d018      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d90 <HAL_DMA_IRQHandler+0x6bc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1a      	ldr	r2, [pc, #104]	@ (8004d94 <HAL_DMA_IRQHandler+0x6c0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00e      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a19      	ldr	r2, [pc, #100]	@ (8004d98 <HAL_DMA_IRQHandler+0x6c4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d009      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a17      	ldr	r2, [pc, #92]	@ (8004d9c <HAL_DMA_IRQHandler+0x6c8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x678>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a16      	ldr	r2, [pc, #88]	@ (8004da0 <HAL_DMA_IRQHandler+0x6cc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d12b      	bne.n	8004da4 <HAL_DMA_IRQHandler+0x6d0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bf14      	ite	ne
 8004d5a:	2301      	movne	r3, #1
 8004d5c:	2300      	moveq	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	e02a      	b.n	8004db8 <HAL_DMA_IRQHandler+0x6e4>
 8004d62:	bf00      	nop
 8004d64:	40020010 	.word	0x40020010
 8004d68:	40020028 	.word	0x40020028
 8004d6c:	40020040 	.word	0x40020040
 8004d70:	40020058 	.word	0x40020058
 8004d74:	40020070 	.word	0x40020070
 8004d78:	40020088 	.word	0x40020088
 8004d7c:	400200a0 	.word	0x400200a0
 8004d80:	400200b8 	.word	0x400200b8
 8004d84:	40020410 	.word	0x40020410
 8004d88:	40020428 	.word	0x40020428
 8004d8c:	40020440 	.word	0x40020440
 8004d90:	40020458 	.word	0x40020458
 8004d94:	40020470 	.word	0x40020470
 8004d98:	40020488 	.word	0x40020488
 8004d9c:	400204a0 	.word	0x400204a0
 8004da0:	400204b8 	.word	0x400204b8
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bf14      	ite	ne
 8004db2:	2301      	movne	r3, #1
 8004db4:	2300      	moveq	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8087 	beq.w	8004ecc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d139      	bne.n	8004e4e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0216 	bic.w	r2, r2, #22
 8004de8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004df8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <HAL_DMA_IRQHandler+0x736>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0208 	bic.w	r2, r2, #8
 8004e18:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	223f      	movs	r2, #63	@ 0x3f
 8004e24:	409a      	lsls	r2, r3
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 834a 	beq.w	80054d8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	4798      	blx	r3
          }
          return;
 8004e4c:	e344      	b.n	80054d8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d018      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d108      	bne.n	8004e7c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d02c      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
 8004e7a:	e027      	b.n	8004ecc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d023      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4798      	blx	r3
 8004e8c:	e01e      	b.n	8004ecc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10f      	bne.n	8004ebc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0210 	bic.w	r2, r2, #16
 8004eaa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8306 	beq.w	80054e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8088 	beq.w	8004ff4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a7a      	ldr	r2, [pc, #488]	@ (80050dc <HAL_DMA_IRQHandler+0xa08>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d04a      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a79      	ldr	r2, [pc, #484]	@ (80050e0 <HAL_DMA_IRQHandler+0xa0c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d045      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a77      	ldr	r2, [pc, #476]	@ (80050e4 <HAL_DMA_IRQHandler+0xa10>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d040      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a76      	ldr	r2, [pc, #472]	@ (80050e8 <HAL_DMA_IRQHandler+0xa14>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d03b      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a74      	ldr	r2, [pc, #464]	@ (80050ec <HAL_DMA_IRQHandler+0xa18>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d036      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a73      	ldr	r2, [pc, #460]	@ (80050f0 <HAL_DMA_IRQHandler+0xa1c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d031      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a71      	ldr	r2, [pc, #452]	@ (80050f4 <HAL_DMA_IRQHandler+0xa20>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d02c      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a70      	ldr	r2, [pc, #448]	@ (80050f8 <HAL_DMA_IRQHandler+0xa24>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d027      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a6e      	ldr	r2, [pc, #440]	@ (80050fc <HAL_DMA_IRQHandler+0xa28>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d022      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a6d      	ldr	r2, [pc, #436]	@ (8005100 <HAL_DMA_IRQHandler+0xa2c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d01d      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a6b      	ldr	r2, [pc, #428]	@ (8005104 <HAL_DMA_IRQHandler+0xa30>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d018      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a6a      	ldr	r2, [pc, #424]	@ (8005108 <HAL_DMA_IRQHandler+0xa34>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a68      	ldr	r2, [pc, #416]	@ (800510c <HAL_DMA_IRQHandler+0xa38>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00e      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a67      	ldr	r2, [pc, #412]	@ (8005110 <HAL_DMA_IRQHandler+0xa3c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d009      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a65      	ldr	r2, [pc, #404]	@ (8005114 <HAL_DMA_IRQHandler+0xa40>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x8b8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a64      	ldr	r2, [pc, #400]	@ (8005118 <HAL_DMA_IRQHandler+0xa44>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d108      	bne.n	8004f9e <HAL_DMA_IRQHandler+0x8ca>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0201 	bic.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	e007      	b.n	8004fae <HAL_DMA_IRQHandler+0x8da>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d307      	bcc.n	8004fca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f2      	bne.n	8004fae <HAL_DMA_IRQHandler+0x8da>
 8004fc8:	e000      	b.n	8004fcc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004fca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2203      	movs	r2, #3
 8004fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004fe2:	e003      	b.n	8004fec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8272 	beq.w	80054e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
 8005006:	e26c      	b.n	80054e2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a43      	ldr	r2, [pc, #268]	@ (800511c <HAL_DMA_IRQHandler+0xa48>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d022      	beq.n	8005058 <HAL_DMA_IRQHandler+0x984>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a42      	ldr	r2, [pc, #264]	@ (8005120 <HAL_DMA_IRQHandler+0xa4c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d01d      	beq.n	8005058 <HAL_DMA_IRQHandler+0x984>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a40      	ldr	r2, [pc, #256]	@ (8005124 <HAL_DMA_IRQHandler+0xa50>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d018      	beq.n	8005058 <HAL_DMA_IRQHandler+0x984>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a3f      	ldr	r2, [pc, #252]	@ (8005128 <HAL_DMA_IRQHandler+0xa54>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <HAL_DMA_IRQHandler+0x984>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a3d      	ldr	r2, [pc, #244]	@ (800512c <HAL_DMA_IRQHandler+0xa58>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00e      	beq.n	8005058 <HAL_DMA_IRQHandler+0x984>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a3c      	ldr	r2, [pc, #240]	@ (8005130 <HAL_DMA_IRQHandler+0xa5c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_DMA_IRQHandler+0x984>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a3a      	ldr	r2, [pc, #232]	@ (8005134 <HAL_DMA_IRQHandler+0xa60>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_DMA_IRQHandler+0x984>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a39      	ldr	r2, [pc, #228]	@ (8005138 <HAL_DMA_IRQHandler+0xa64>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d101      	bne.n	800505c <HAL_DMA_IRQHandler+0x988>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <HAL_DMA_IRQHandler+0x98a>
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 823f 	beq.w	80054e2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	2204      	movs	r2, #4
 8005076:	409a      	lsls	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	4013      	ands	r3, r2
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80cd 	beq.w	800521c <HAL_DMA_IRQHandler+0xb48>
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80c7 	beq.w	800521c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005092:	f003 031f 	and.w	r3, r3, #31
 8005096:	2204      	movs	r2, #4
 8005098:	409a      	lsls	r2, r3
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d049      	beq.n	800513c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 8210 	beq.w	80054dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050c4:	e20a      	b.n	80054dc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8206 	beq.w	80054dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050d8:	e200      	b.n	80054dc <HAL_DMA_IRQHandler+0xe08>
 80050da:	bf00      	nop
 80050dc:	40020010 	.word	0x40020010
 80050e0:	40020028 	.word	0x40020028
 80050e4:	40020040 	.word	0x40020040
 80050e8:	40020058 	.word	0x40020058
 80050ec:	40020070 	.word	0x40020070
 80050f0:	40020088 	.word	0x40020088
 80050f4:	400200a0 	.word	0x400200a0
 80050f8:	400200b8 	.word	0x400200b8
 80050fc:	40020410 	.word	0x40020410
 8005100:	40020428 	.word	0x40020428
 8005104:	40020440 	.word	0x40020440
 8005108:	40020458 	.word	0x40020458
 800510c:	40020470 	.word	0x40020470
 8005110:	40020488 	.word	0x40020488
 8005114:	400204a0 	.word	0x400204a0
 8005118:	400204b8 	.word	0x400204b8
 800511c:	58025408 	.word	0x58025408
 8005120:	5802541c 	.word	0x5802541c
 8005124:	58025430 	.word	0x58025430
 8005128:	58025444 	.word	0x58025444
 800512c:	58025458 	.word	0x58025458
 8005130:	5802546c 	.word	0x5802546c
 8005134:	58025480 	.word	0x58025480
 8005138:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d160      	bne.n	8005208 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a7f      	ldr	r2, [pc, #508]	@ (8005348 <HAL_DMA_IRQHandler+0xc74>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d04a      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a7d      	ldr	r2, [pc, #500]	@ (800534c <HAL_DMA_IRQHandler+0xc78>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d045      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a7c      	ldr	r2, [pc, #496]	@ (8005350 <HAL_DMA_IRQHandler+0xc7c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d040      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a7a      	ldr	r2, [pc, #488]	@ (8005354 <HAL_DMA_IRQHandler+0xc80>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d03b      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a79      	ldr	r2, [pc, #484]	@ (8005358 <HAL_DMA_IRQHandler+0xc84>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d036      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a77      	ldr	r2, [pc, #476]	@ (800535c <HAL_DMA_IRQHandler+0xc88>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d031      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a76      	ldr	r2, [pc, #472]	@ (8005360 <HAL_DMA_IRQHandler+0xc8c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d02c      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a74      	ldr	r2, [pc, #464]	@ (8005364 <HAL_DMA_IRQHandler+0xc90>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d027      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a73      	ldr	r2, [pc, #460]	@ (8005368 <HAL_DMA_IRQHandler+0xc94>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d022      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a71      	ldr	r2, [pc, #452]	@ (800536c <HAL_DMA_IRQHandler+0xc98>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01d      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a70      	ldr	r2, [pc, #448]	@ (8005370 <HAL_DMA_IRQHandler+0xc9c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d018      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005374 <HAL_DMA_IRQHandler+0xca0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6d      	ldr	r2, [pc, #436]	@ (8005378 <HAL_DMA_IRQHandler+0xca4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00e      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a6b      	ldr	r2, [pc, #428]	@ (800537c <HAL_DMA_IRQHandler+0xca8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005380 <HAL_DMA_IRQHandler+0xcac>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xb12>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a68      	ldr	r2, [pc, #416]	@ (8005384 <HAL_DMA_IRQHandler+0xcb0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d108      	bne.n	80051f8 <HAL_DMA_IRQHandler+0xb24>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0208 	bic.w	r2, r2, #8
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e007      	b.n	8005208 <HAL_DMA_IRQHandler+0xb34>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0204 	bic.w	r2, r2, #4
 8005206:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8165 	beq.w	80054dc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800521a:	e15f      	b.n	80054dc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	2202      	movs	r2, #2
 8005226:	409a      	lsls	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80c5 	beq.w	80053bc <HAL_DMA_IRQHandler+0xce8>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 80bf 	beq.w	80053bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2202      	movs	r2, #2
 8005248:	409a      	lsls	r2, r3
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d018      	beq.n	800528a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d109      	bne.n	8005276 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 813a 	beq.w	80054e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005274:	e134      	b.n	80054e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8130 	beq.w	80054e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005288:	e12a      	b.n	80054e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	f040 8089 	bne.w	80053a8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a2b      	ldr	r2, [pc, #172]	@ (8005348 <HAL_DMA_IRQHandler+0xc74>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d04a      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a29      	ldr	r2, [pc, #164]	@ (800534c <HAL_DMA_IRQHandler+0xc78>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d045      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a28      	ldr	r2, [pc, #160]	@ (8005350 <HAL_DMA_IRQHandler+0xc7c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d040      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a26      	ldr	r2, [pc, #152]	@ (8005354 <HAL_DMA_IRQHandler+0xc80>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d03b      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a25      	ldr	r2, [pc, #148]	@ (8005358 <HAL_DMA_IRQHandler+0xc84>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d036      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a23      	ldr	r2, [pc, #140]	@ (800535c <HAL_DMA_IRQHandler+0xc88>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d031      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a22      	ldr	r2, [pc, #136]	@ (8005360 <HAL_DMA_IRQHandler+0xc8c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d02c      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a20      	ldr	r2, [pc, #128]	@ (8005364 <HAL_DMA_IRQHandler+0xc90>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d027      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005368 <HAL_DMA_IRQHandler+0xc94>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d022      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1d      	ldr	r2, [pc, #116]	@ (800536c <HAL_DMA_IRQHandler+0xc98>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01d      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005370 <HAL_DMA_IRQHandler+0xc9c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d018      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1a      	ldr	r2, [pc, #104]	@ (8005374 <HAL_DMA_IRQHandler+0xca0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a19      	ldr	r2, [pc, #100]	@ (8005378 <HAL_DMA_IRQHandler+0xca4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00e      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a17      	ldr	r2, [pc, #92]	@ (800537c <HAL_DMA_IRQHandler+0xca8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d009      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a16      	ldr	r2, [pc, #88]	@ (8005380 <HAL_DMA_IRQHandler+0xcac>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d004      	beq.n	8005336 <HAL_DMA_IRQHandler+0xc62>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a14      	ldr	r2, [pc, #80]	@ (8005384 <HAL_DMA_IRQHandler+0xcb0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d128      	bne.n	8005388 <HAL_DMA_IRQHandler+0xcb4>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0214 	bic.w	r2, r2, #20
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e027      	b.n	8005398 <HAL_DMA_IRQHandler+0xcc4>
 8005348:	40020010 	.word	0x40020010
 800534c:	40020028 	.word	0x40020028
 8005350:	40020040 	.word	0x40020040
 8005354:	40020058 	.word	0x40020058
 8005358:	40020070 	.word	0x40020070
 800535c:	40020088 	.word	0x40020088
 8005360:	400200a0 	.word	0x400200a0
 8005364:	400200b8 	.word	0x400200b8
 8005368:	40020410 	.word	0x40020410
 800536c:	40020428 	.word	0x40020428
 8005370:	40020440 	.word	0x40020440
 8005374:	40020458 	.word	0x40020458
 8005378:	40020470 	.word	0x40020470
 800537c:	40020488 	.word	0x40020488
 8005380:	400204a0 	.word	0x400204a0
 8005384:	400204b8 	.word	0x400204b8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 020a 	bic.w	r2, r2, #10
 8005396:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8097 	beq.w	80054e0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053ba:	e091      	b.n	80054e0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	2208      	movs	r2, #8
 80053c6:	409a      	lsls	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8088 	beq.w	80054e2 <HAL_DMA_IRQHandler+0xe0e>
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8082 	beq.w	80054e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a41      	ldr	r2, [pc, #260]	@ (80054e8 <HAL_DMA_IRQHandler+0xe14>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d04a      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a3f      	ldr	r2, [pc, #252]	@ (80054ec <HAL_DMA_IRQHandler+0xe18>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d045      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a3e      	ldr	r2, [pc, #248]	@ (80054f0 <HAL_DMA_IRQHandler+0xe1c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d040      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a3c      	ldr	r2, [pc, #240]	@ (80054f4 <HAL_DMA_IRQHandler+0xe20>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d03b      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a3b      	ldr	r2, [pc, #236]	@ (80054f8 <HAL_DMA_IRQHandler+0xe24>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d036      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a39      	ldr	r2, [pc, #228]	@ (80054fc <HAL_DMA_IRQHandler+0xe28>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d031      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a38      	ldr	r2, [pc, #224]	@ (8005500 <HAL_DMA_IRQHandler+0xe2c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d02c      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a36      	ldr	r2, [pc, #216]	@ (8005504 <HAL_DMA_IRQHandler+0xe30>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d027      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a35      	ldr	r2, [pc, #212]	@ (8005508 <HAL_DMA_IRQHandler+0xe34>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d022      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a33      	ldr	r2, [pc, #204]	@ (800550c <HAL_DMA_IRQHandler+0xe38>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01d      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a32      	ldr	r2, [pc, #200]	@ (8005510 <HAL_DMA_IRQHandler+0xe3c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d018      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a30      	ldr	r2, [pc, #192]	@ (8005514 <HAL_DMA_IRQHandler+0xe40>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2f      	ldr	r2, [pc, #188]	@ (8005518 <HAL_DMA_IRQHandler+0xe44>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00e      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a2d      	ldr	r2, [pc, #180]	@ (800551c <HAL_DMA_IRQHandler+0xe48>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d009      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a2c      	ldr	r2, [pc, #176]	@ (8005520 <HAL_DMA_IRQHandler+0xe4c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <HAL_DMA_IRQHandler+0xdaa>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2a      	ldr	r2, [pc, #168]	@ (8005524 <HAL_DMA_IRQHandler+0xe50>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d108      	bne.n	8005490 <HAL_DMA_IRQHandler+0xdbc>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 021c 	bic.w	r2, r2, #28
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	e007      	b.n	80054a0 <HAL_DMA_IRQHandler+0xdcc>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 020e 	bic.w	r2, r2, #14
 800549e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	2201      	movs	r2, #1
 80054aa:	409a      	lsls	r2, r3
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	4798      	blx	r3
 80054d6:	e004      	b.n	80054e2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80054d8:	bf00      	nop
 80054da:	e002      	b.n	80054e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054dc:	bf00      	nop
 80054de:	e000      	b.n	80054e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054e2:	3728      	adds	r7, #40	@ 0x28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40020010 	.word	0x40020010
 80054ec:	40020028 	.word	0x40020028
 80054f0:	40020040 	.word	0x40020040
 80054f4:	40020058 	.word	0x40020058
 80054f8:	40020070 	.word	0x40020070
 80054fc:	40020088 	.word	0x40020088
 8005500:	400200a0 	.word	0x400200a0
 8005504:	400200b8 	.word	0x400200b8
 8005508:	40020410 	.word	0x40020410
 800550c:	40020428 	.word	0x40020428
 8005510:	40020440 	.word	0x40020440
 8005514:	40020458 	.word	0x40020458
 8005518:	40020470 	.word	0x40020470
 800551c:	40020488 	.word	0x40020488
 8005520:	400204a0 	.word	0x400204a0
 8005524:	400204b8 	.word	0x400204b8

08005528 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005552:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005558:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a7f      	ldr	r2, [pc, #508]	@ (800575c <DMA_SetConfig+0x21c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d072      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a7d      	ldr	r2, [pc, #500]	@ (8005760 <DMA_SetConfig+0x220>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d06d      	beq.n	800564a <DMA_SetConfig+0x10a>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a7c      	ldr	r2, [pc, #496]	@ (8005764 <DMA_SetConfig+0x224>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d068      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a7a      	ldr	r2, [pc, #488]	@ (8005768 <DMA_SetConfig+0x228>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d063      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a79      	ldr	r2, [pc, #484]	@ (800576c <DMA_SetConfig+0x22c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d05e      	beq.n	800564a <DMA_SetConfig+0x10a>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a77      	ldr	r2, [pc, #476]	@ (8005770 <DMA_SetConfig+0x230>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d059      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a76      	ldr	r2, [pc, #472]	@ (8005774 <DMA_SetConfig+0x234>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d054      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a74      	ldr	r2, [pc, #464]	@ (8005778 <DMA_SetConfig+0x238>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d04f      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a73      	ldr	r2, [pc, #460]	@ (800577c <DMA_SetConfig+0x23c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d04a      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a71      	ldr	r2, [pc, #452]	@ (8005780 <DMA_SetConfig+0x240>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d045      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a70      	ldr	r2, [pc, #448]	@ (8005784 <DMA_SetConfig+0x244>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d040      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005788 <DMA_SetConfig+0x248>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d03b      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a6d      	ldr	r2, [pc, #436]	@ (800578c <DMA_SetConfig+0x24c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d036      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005790 <DMA_SetConfig+0x250>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d031      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a6a      	ldr	r2, [pc, #424]	@ (8005794 <DMA_SetConfig+0x254>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d02c      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a68      	ldr	r2, [pc, #416]	@ (8005798 <DMA_SetConfig+0x258>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d027      	beq.n	800564a <DMA_SetConfig+0x10a>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a67      	ldr	r2, [pc, #412]	@ (800579c <DMA_SetConfig+0x25c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a65      	ldr	r2, [pc, #404]	@ (80057a0 <DMA_SetConfig+0x260>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <DMA_SetConfig+0x10a>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a64      	ldr	r2, [pc, #400]	@ (80057a4 <DMA_SetConfig+0x264>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a62      	ldr	r2, [pc, #392]	@ (80057a8 <DMA_SetConfig+0x268>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a61      	ldr	r2, [pc, #388]	@ (80057ac <DMA_SetConfig+0x26c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <DMA_SetConfig+0x10a>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a5f      	ldr	r2, [pc, #380]	@ (80057b0 <DMA_SetConfig+0x270>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a5e      	ldr	r2, [pc, #376]	@ (80057b4 <DMA_SetConfig+0x274>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <DMA_SetConfig+0x10a>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a5c      	ldr	r2, [pc, #368]	@ (80057b8 <DMA_SetConfig+0x278>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d101      	bne.n	800564e <DMA_SetConfig+0x10e>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <DMA_SetConfig+0x110>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800565c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800566e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a39      	ldr	r2, [pc, #228]	@ (800575c <DMA_SetConfig+0x21c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d04a      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a38      	ldr	r2, [pc, #224]	@ (8005760 <DMA_SetConfig+0x220>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d045      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a36      	ldr	r2, [pc, #216]	@ (8005764 <DMA_SetConfig+0x224>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d040      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a35      	ldr	r2, [pc, #212]	@ (8005768 <DMA_SetConfig+0x228>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d03b      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a33      	ldr	r2, [pc, #204]	@ (800576c <DMA_SetConfig+0x22c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d036      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a32      	ldr	r2, [pc, #200]	@ (8005770 <DMA_SetConfig+0x230>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d031      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a30      	ldr	r2, [pc, #192]	@ (8005774 <DMA_SetConfig+0x234>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d02c      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005778 <DMA_SetConfig+0x238>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d027      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2d      	ldr	r2, [pc, #180]	@ (800577c <DMA_SetConfig+0x23c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d022      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005780 <DMA_SetConfig+0x240>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d01d      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005784 <DMA_SetConfig+0x244>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d018      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a29      	ldr	r2, [pc, #164]	@ (8005788 <DMA_SetConfig+0x248>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d013      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a27      	ldr	r2, [pc, #156]	@ (800578c <DMA_SetConfig+0x24c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00e      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a26      	ldr	r2, [pc, #152]	@ (8005790 <DMA_SetConfig+0x250>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d009      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a24      	ldr	r2, [pc, #144]	@ (8005794 <DMA_SetConfig+0x254>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d004      	beq.n	8005710 <DMA_SetConfig+0x1d0>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a23      	ldr	r2, [pc, #140]	@ (8005798 <DMA_SetConfig+0x258>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d101      	bne.n	8005714 <DMA_SetConfig+0x1d4>
 8005710:	2301      	movs	r3, #1
 8005712:	e000      	b.n	8005716 <DMA_SetConfig+0x1d6>
 8005714:	2300      	movs	r3, #0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d059      	beq.n	80057ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	223f      	movs	r2, #63	@ 0x3f
 8005724:	409a      	lsls	r2, r3
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005738:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b40      	cmp	r3, #64	@ 0x40
 8005748:	d138      	bne.n	80057bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800575a:	e086      	b.n	800586a <DMA_SetConfig+0x32a>
 800575c:	40020010 	.word	0x40020010
 8005760:	40020028 	.word	0x40020028
 8005764:	40020040 	.word	0x40020040
 8005768:	40020058 	.word	0x40020058
 800576c:	40020070 	.word	0x40020070
 8005770:	40020088 	.word	0x40020088
 8005774:	400200a0 	.word	0x400200a0
 8005778:	400200b8 	.word	0x400200b8
 800577c:	40020410 	.word	0x40020410
 8005780:	40020428 	.word	0x40020428
 8005784:	40020440 	.word	0x40020440
 8005788:	40020458 	.word	0x40020458
 800578c:	40020470 	.word	0x40020470
 8005790:	40020488 	.word	0x40020488
 8005794:	400204a0 	.word	0x400204a0
 8005798:	400204b8 	.word	0x400204b8
 800579c:	58025408 	.word	0x58025408
 80057a0:	5802541c 	.word	0x5802541c
 80057a4:	58025430 	.word	0x58025430
 80057a8:	58025444 	.word	0x58025444
 80057ac:	58025458 	.word	0x58025458
 80057b0:	5802546c 	.word	0x5802546c
 80057b4:	58025480 	.word	0x58025480
 80057b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	60da      	str	r2, [r3, #12]
}
 80057cc:	e04d      	b.n	800586a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a29      	ldr	r2, [pc, #164]	@ (8005878 <DMA_SetConfig+0x338>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d022      	beq.n	800581e <DMA_SetConfig+0x2de>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a27      	ldr	r2, [pc, #156]	@ (800587c <DMA_SetConfig+0x33c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d01d      	beq.n	800581e <DMA_SetConfig+0x2de>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a26      	ldr	r2, [pc, #152]	@ (8005880 <DMA_SetConfig+0x340>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d018      	beq.n	800581e <DMA_SetConfig+0x2de>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a24      	ldr	r2, [pc, #144]	@ (8005884 <DMA_SetConfig+0x344>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <DMA_SetConfig+0x2de>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a23      	ldr	r2, [pc, #140]	@ (8005888 <DMA_SetConfig+0x348>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <DMA_SetConfig+0x2de>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a21      	ldr	r2, [pc, #132]	@ (800588c <DMA_SetConfig+0x34c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <DMA_SetConfig+0x2de>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a20      	ldr	r2, [pc, #128]	@ (8005890 <DMA_SetConfig+0x350>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <DMA_SetConfig+0x2de>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1e      	ldr	r2, [pc, #120]	@ (8005894 <DMA_SetConfig+0x354>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <DMA_SetConfig+0x2e2>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <DMA_SetConfig+0x2e4>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d020      	beq.n	800586a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	2201      	movs	r2, #1
 8005832:	409a      	lsls	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b40      	cmp	r3, #64	@ 0x40
 8005846:	d108      	bne.n	800585a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	60da      	str	r2, [r3, #12]
}
 8005858:	e007      	b.n	800586a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	58025408 	.word	0x58025408
 800587c:	5802541c 	.word	0x5802541c
 8005880:	58025430 	.word	0x58025430
 8005884:	58025444 	.word	0x58025444
 8005888:	58025458 	.word	0x58025458
 800588c:	5802546c 	.word	0x5802546c
 8005890:	58025480 	.word	0x58025480
 8005894:	58025494 	.word	0x58025494

08005898 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a42      	ldr	r2, [pc, #264]	@ (80059b0 <DMA_CalcBaseAndBitshift+0x118>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d04a      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a41      	ldr	r2, [pc, #260]	@ (80059b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d045      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a3f      	ldr	r2, [pc, #252]	@ (80059b8 <DMA_CalcBaseAndBitshift+0x120>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d040      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a3e      	ldr	r2, [pc, #248]	@ (80059bc <DMA_CalcBaseAndBitshift+0x124>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d03b      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a3c      	ldr	r2, [pc, #240]	@ (80059c0 <DMA_CalcBaseAndBitshift+0x128>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d036      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a3b      	ldr	r2, [pc, #236]	@ (80059c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d031      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a39      	ldr	r2, [pc, #228]	@ (80059c8 <DMA_CalcBaseAndBitshift+0x130>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d02c      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a38      	ldr	r2, [pc, #224]	@ (80059cc <DMA_CalcBaseAndBitshift+0x134>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d027      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a36      	ldr	r2, [pc, #216]	@ (80059d0 <DMA_CalcBaseAndBitshift+0x138>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d022      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a35      	ldr	r2, [pc, #212]	@ (80059d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d01d      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a33      	ldr	r2, [pc, #204]	@ (80059d8 <DMA_CalcBaseAndBitshift+0x140>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d018      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a32      	ldr	r2, [pc, #200]	@ (80059dc <DMA_CalcBaseAndBitshift+0x144>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d013      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a30      	ldr	r2, [pc, #192]	@ (80059e0 <DMA_CalcBaseAndBitshift+0x148>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00e      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2f      	ldr	r2, [pc, #188]	@ (80059e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d009      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a2d      	ldr	r2, [pc, #180]	@ (80059e8 <DMA_CalcBaseAndBitshift+0x150>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <DMA_CalcBaseAndBitshift+0xa8>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2c      	ldr	r2, [pc, #176]	@ (80059ec <DMA_CalcBaseAndBitshift+0x154>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d101      	bne.n	8005944 <DMA_CalcBaseAndBitshift+0xac>
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <DMA_CalcBaseAndBitshift+0xae>
 8005944:	2300      	movs	r3, #0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d024      	beq.n	8005994 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	3b10      	subs	r3, #16
 8005952:	4a27      	ldr	r2, [pc, #156]	@ (80059f0 <DMA_CalcBaseAndBitshift+0x158>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	091b      	lsrs	r3, r3, #4
 800595a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	4a24      	ldr	r2, [pc, #144]	@ (80059f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005964:	5cd3      	ldrb	r3, [r2, r3]
 8005966:	461a      	mov	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b03      	cmp	r3, #3
 8005970:	d908      	bls.n	8005984 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	4b1f      	ldr	r3, [pc, #124]	@ (80059f8 <DMA_CalcBaseAndBitshift+0x160>)
 800597a:	4013      	ands	r3, r2
 800597c:	1d1a      	adds	r2, r3, #4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	659a      	str	r2, [r3, #88]	@ 0x58
 8005982:	e00d      	b.n	80059a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	4b1b      	ldr	r3, [pc, #108]	@ (80059f8 <DMA_CalcBaseAndBitshift+0x160>)
 800598c:	4013      	ands	r3, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6593      	str	r3, [r2, #88]	@ 0x58
 8005992:	e005      	b.n	80059a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40020010 	.word	0x40020010
 80059b4:	40020028 	.word	0x40020028
 80059b8:	40020040 	.word	0x40020040
 80059bc:	40020058 	.word	0x40020058
 80059c0:	40020070 	.word	0x40020070
 80059c4:	40020088 	.word	0x40020088
 80059c8:	400200a0 	.word	0x400200a0
 80059cc:	400200b8 	.word	0x400200b8
 80059d0:	40020410 	.word	0x40020410
 80059d4:	40020428 	.word	0x40020428
 80059d8:	40020440 	.word	0x40020440
 80059dc:	40020458 	.word	0x40020458
 80059e0:	40020470 	.word	0x40020470
 80059e4:	40020488 	.word	0x40020488
 80059e8:	400204a0 	.word	0x400204a0
 80059ec:	400204b8 	.word	0x400204b8
 80059f0:	aaaaaaab 	.word	0xaaaaaaab
 80059f4:	0800b1dc 	.word	0x0800b1dc
 80059f8:	fffffc00 	.word	0xfffffc00

080059fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d120      	bne.n	8005a52 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d858      	bhi.n	8005aca <DMA_CheckFifoParam+0xce>
 8005a18:	a201      	add	r2, pc, #4	@ (adr r2, 8005a20 <DMA_CheckFifoParam+0x24>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a43 	.word	0x08005a43
 8005a28:	08005a31 	.word	0x08005a31
 8005a2c:	08005acb 	.word	0x08005acb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d048      	beq.n	8005ace <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a40:	e045      	b.n	8005ace <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a4a:	d142      	bne.n	8005ad2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a50:	e03f      	b.n	8005ad2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a5a:	d123      	bne.n	8005aa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d838      	bhi.n	8005ad6 <DMA_CheckFifoParam+0xda>
 8005a64:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <DMA_CheckFifoParam+0x70>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005a7d 	.word	0x08005a7d
 8005a70:	08005a83 	.word	0x08005a83
 8005a74:	08005a7d 	.word	0x08005a7d
 8005a78:	08005a95 	.word	0x08005a95
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
        break;
 8005a80:	e030      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d025      	beq.n	8005ada <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a92:	e022      	b.n	8005ada <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a9c:	d11f      	bne.n	8005ade <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005aa2:	e01c      	b.n	8005ade <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d902      	bls.n	8005ab2 <DMA_CheckFifoParam+0xb6>
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d003      	beq.n	8005ab8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ab0:	e018      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ab6:	e015      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00e      	beq.n	8005ae2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8005ac8:	e00b      	b.n	8005ae2 <DMA_CheckFifoParam+0xe6>
        break;
 8005aca:	bf00      	nop
 8005acc:	e00a      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e008      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ad2:	bf00      	nop
 8005ad4:	e006      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ad6:	bf00      	nop
 8005ad8:	e004      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ada:	bf00      	nop
 8005adc:	e002      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ade:	bf00      	nop
 8005ae0:	e000      	b.n	8005ae4 <DMA_CheckFifoParam+0xe8>
    break;
 8005ae2:	bf00      	nop
    }
  }

  return status;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop

08005af4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a38      	ldr	r2, [pc, #224]	@ (8005be8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d022      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a36      	ldr	r2, [pc, #216]	@ (8005bec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01d      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a35      	ldr	r2, [pc, #212]	@ (8005bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d018      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a33      	ldr	r2, [pc, #204]	@ (8005bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a32      	ldr	r2, [pc, #200]	@ (8005bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00e      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a30      	ldr	r2, [pc, #192]	@ (8005bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d009      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a2f      	ldr	r2, [pc, #188]	@ (8005c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d101      	bne.n	8005b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005b56:	2300      	movs	r3, #0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01a      	beq.n	8005b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	3b08      	subs	r3, #8
 8005b64:	4a28      	ldr	r2, [pc, #160]	@ (8005c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005b66:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4b26      	ldr	r3, [pc, #152]	@ (8005c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a24      	ldr	r2, [pc, #144]	@ (8005c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005b80:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f003 031f 	and.w	r3, r3, #31
 8005b88:	2201      	movs	r2, #1
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005b90:	e024      	b.n	8005bdc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	3b10      	subs	r3, #16
 8005b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	091b      	lsrs	r3, r3, #4
 8005ba2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d806      	bhi.n	8005bba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4a1b      	ldr	r2, [pc, #108]	@ (8005c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d902      	bls.n	8005bba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4b18      	ldr	r3, [pc, #96]	@ (8005c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a16      	ldr	r2, [pc, #88]	@ (8005c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005bcc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	409a      	lsls	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	58025408 	.word	0x58025408
 8005bec:	5802541c 	.word	0x5802541c
 8005bf0:	58025430 	.word	0x58025430
 8005bf4:	58025444 	.word	0x58025444
 8005bf8:	58025458 	.word	0x58025458
 8005bfc:	5802546c 	.word	0x5802546c
 8005c00:	58025480 	.word	0x58025480
 8005c04:	58025494 	.word	0x58025494
 8005c08:	cccccccd 	.word	0xcccccccd
 8005c0c:	16009600 	.word	0x16009600
 8005c10:	58025880 	.word	0x58025880
 8005c14:	aaaaaaab 	.word	0xaaaaaaab
 8005c18:	400204b8 	.word	0x400204b8
 8005c1c:	4002040f 	.word	0x4002040f
 8005c20:	10008200 	.word	0x10008200
 8005c24:	40020880 	.word	0x40020880

08005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d04a      	beq.n	8005cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d847      	bhi.n	8005cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a25      	ldr	r2, [pc, #148]	@ (8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d022      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a24      	ldr	r2, [pc, #144]	@ (8005ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d01d      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a22      	ldr	r2, [pc, #136]	@ (8005ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d018      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a21      	ldr	r2, [pc, #132]	@ (8005cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d013      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00e      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d009      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d004      	beq.n	8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d101      	bne.n	8005c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4b17      	ldr	r3, [pc, #92]	@ (8005d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a15      	ldr	r2, [pc, #84]	@ (8005d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005cb0:	671a      	str	r2, [r3, #112]	@ 0x70
 8005cb2:	e009      	b.n	8005cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4b14      	ldr	r3, [pc, #80]	@ (8005d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a11      	ldr	r2, [pc, #68]	@ (8005d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005cc6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	2201      	movs	r2, #1
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	58025408 	.word	0x58025408
 8005ce4:	5802541c 	.word	0x5802541c
 8005ce8:	58025430 	.word	0x58025430
 8005cec:	58025444 	.word	0x58025444
 8005cf0:	58025458 	.word	0x58025458
 8005cf4:	5802546c 	.word	0x5802546c
 8005cf8:	58025480 	.word	0x58025480
 8005cfc:	58025494 	.word	0x58025494
 8005d00:	1600963f 	.word	0x1600963f
 8005d04:	58025940 	.word	0x58025940
 8005d08:	1000823f 	.word	0x1000823f
 8005d0c:	40020940 	.word	0x40020940

08005d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b089      	sub	sp, #36	@ 0x24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d1e:	4b89      	ldr	r3, [pc, #548]	@ (8005f44 <HAL_GPIO_Init+0x234>)
 8005d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d22:	e194      	b.n	800604e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	2101      	movs	r1, #1
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d30:	4013      	ands	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8186 	beq.w	8006048 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d005      	beq.n	8005d54 <HAL_GPIO_Init+0x44>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d130      	bne.n	8005db6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	2203      	movs	r2, #3
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	43db      	mvns	r3, r3
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4013      	ands	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	091b      	lsrs	r3, r3, #4
 8005da0:	f003 0201 	and.w	r2, r3, #1
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d017      	beq.n	8005df2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	2203      	movs	r2, #3
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d123      	bne.n	8005e46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	08da      	lsrs	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3208      	adds	r2, #8
 8005e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	220f      	movs	r2, #15
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	08da      	lsrs	r2, r3, #3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3208      	adds	r2, #8
 8005e40:	69b9      	ldr	r1, [r7, #24]
 8005e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	2203      	movs	r2, #3
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	43db      	mvns	r3, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f003 0203 	and.w	r2, r3, #3
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 80e0 	beq.w	8006048 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e88:	4b2f      	ldr	r3, [pc, #188]	@ (8005f48 <HAL_GPIO_Init+0x238>)
 8005e8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8005f48 <HAL_GPIO_Init+0x238>)
 8005e90:	f043 0302 	orr.w	r3, r3, #2
 8005e94:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005e98:	4b2b      	ldr	r3, [pc, #172]	@ (8005f48 <HAL_GPIO_Init+0x238>)
 8005e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ea6:	4a29      	ldr	r2, [pc, #164]	@ (8005f4c <HAL_GPIO_Init+0x23c>)
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	089b      	lsrs	r3, r3, #2
 8005eac:	3302      	adds	r3, #2
 8005eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	220f      	movs	r2, #15
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a20      	ldr	r2, [pc, #128]	@ (8005f50 <HAL_GPIO_Init+0x240>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d052      	beq.n	8005f78 <HAL_GPIO_Init+0x268>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8005f54 <HAL_GPIO_Init+0x244>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d031      	beq.n	8005f3e <HAL_GPIO_Init+0x22e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a1e      	ldr	r2, [pc, #120]	@ (8005f58 <HAL_GPIO_Init+0x248>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d02b      	beq.n	8005f3a <HAL_GPIO_Init+0x22a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f5c <HAL_GPIO_Init+0x24c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d025      	beq.n	8005f36 <HAL_GPIO_Init+0x226>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1c      	ldr	r2, [pc, #112]	@ (8005f60 <HAL_GPIO_Init+0x250>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01f      	beq.n	8005f32 <HAL_GPIO_Init+0x222>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f64 <HAL_GPIO_Init+0x254>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d019      	beq.n	8005f2e <HAL_GPIO_Init+0x21e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f68 <HAL_GPIO_Init+0x258>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d013      	beq.n	8005f2a <HAL_GPIO_Init+0x21a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a19      	ldr	r2, [pc, #100]	@ (8005f6c <HAL_GPIO_Init+0x25c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d00d      	beq.n	8005f26 <HAL_GPIO_Init+0x216>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a18      	ldr	r2, [pc, #96]	@ (8005f70 <HAL_GPIO_Init+0x260>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d007      	beq.n	8005f22 <HAL_GPIO_Init+0x212>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a17      	ldr	r2, [pc, #92]	@ (8005f74 <HAL_GPIO_Init+0x264>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d101      	bne.n	8005f1e <HAL_GPIO_Init+0x20e>
 8005f1a:	2309      	movs	r3, #9
 8005f1c:	e02d      	b.n	8005f7a <HAL_GPIO_Init+0x26a>
 8005f1e:	230a      	movs	r3, #10
 8005f20:	e02b      	b.n	8005f7a <HAL_GPIO_Init+0x26a>
 8005f22:	2308      	movs	r3, #8
 8005f24:	e029      	b.n	8005f7a <HAL_GPIO_Init+0x26a>
 8005f26:	2307      	movs	r3, #7
 8005f28:	e027      	b.n	8005f7a <HAL_GPIO_Init+0x26a>
 8005f2a:	2306      	movs	r3, #6
 8005f2c:	e025      	b.n	8005f7a <HAL_GPIO_Init+0x26a>
 8005f2e:	2305      	movs	r3, #5
 8005f30:	e023      	b.n	8005f7a <HAL_GPIO_Init+0x26a>
 8005f32:	2304      	movs	r3, #4
 8005f34:	e021      	b.n	8005f7a <HAL_GPIO_Init+0x26a>
 8005f36:	2303      	movs	r3, #3
 8005f38:	e01f      	b.n	8005f7a <HAL_GPIO_Init+0x26a>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e01d      	b.n	8005f7a <HAL_GPIO_Init+0x26a>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e01b      	b.n	8005f7a <HAL_GPIO_Init+0x26a>
 8005f42:	bf00      	nop
 8005f44:	58000080 	.word	0x58000080
 8005f48:	58024400 	.word	0x58024400
 8005f4c:	58000400 	.word	0x58000400
 8005f50:	58020000 	.word	0x58020000
 8005f54:	58020400 	.word	0x58020400
 8005f58:	58020800 	.word	0x58020800
 8005f5c:	58020c00 	.word	0x58020c00
 8005f60:	58021000 	.word	0x58021000
 8005f64:	58021400 	.word	0x58021400
 8005f68:	58021800 	.word	0x58021800
 8005f6c:	58021c00 	.word	0x58021c00
 8005f70:	58022000 	.word	0x58022000
 8005f74:	58022400 	.word	0x58022400
 8005f78:	2300      	movs	r3, #0
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	f002 0203 	and.w	r2, r2, #3
 8005f80:	0092      	lsls	r2, r2, #2
 8005f82:	4093      	lsls	r3, r2
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f8a:	4938      	ldr	r1, [pc, #224]	@ (800606c <HAL_GPIO_Init+0x35c>)
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	089b      	lsrs	r3, r3, #2
 8005f90:	3302      	adds	r3, #2
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005fbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005fec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	4013      	ands	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	43db      	mvns	r3, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	4013      	ands	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	3301      	adds	r3, #1
 800604c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	fa22 f303 	lsr.w	r3, r2, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	f47f ae63 	bne.w	8005d24 <HAL_GPIO_Init+0x14>
  }
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	3724      	adds	r7, #36	@ 0x24
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	58000400 	.word	0x58000400

08006070 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006078:	4b19      	ldr	r3, [pc, #100]	@ (80060e0 <HAL_PWREx_ConfigSupply+0x70>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b04      	cmp	r3, #4
 8006082:	d00a      	beq.n	800609a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006084:	4b16      	ldr	r3, [pc, #88]	@ (80060e0 <HAL_PWREx_ConfigSupply+0x70>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	429a      	cmp	r2, r3
 8006090:	d001      	beq.n	8006096 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e01f      	b.n	80060d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e01d      	b.n	80060d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800609a:	4b11      	ldr	r3, [pc, #68]	@ (80060e0 <HAL_PWREx_ConfigSupply+0x70>)
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f023 0207 	bic.w	r2, r3, #7
 80060a2:	490f      	ldr	r1, [pc, #60]	@ (80060e0 <HAL_PWREx_ConfigSupply+0x70>)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80060aa:	f7fb fa7f 	bl	80015ac <HAL_GetTick>
 80060ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060b0:	e009      	b.n	80060c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80060b2:	f7fb fa7b 	bl	80015ac <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060c0:	d901      	bls.n	80060c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e007      	b.n	80060d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060c6:	4b06      	ldr	r3, [pc, #24]	@ (80060e0 <HAL_PWREx_ConfigSupply+0x70>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d2:	d1ee      	bne.n	80060b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	58024800 	.word	0x58024800

080060e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08c      	sub	sp, #48	@ 0x30
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d102      	bne.n	80060f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f000 bc48 	b.w	8006988 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8088 	beq.w	8006216 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006106:	4b99      	ldr	r3, [pc, #612]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800610e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006110:	4b96      	ldr	r3, [pc, #600]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006114:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006118:	2b10      	cmp	r3, #16
 800611a:	d007      	beq.n	800612c <HAL_RCC_OscConfig+0x48>
 800611c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611e:	2b18      	cmp	r3, #24
 8006120:	d111      	bne.n	8006146 <HAL_RCC_OscConfig+0x62>
 8006122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d10c      	bne.n	8006146 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800612c:	4b8f      	ldr	r3, [pc, #572]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d06d      	beq.n	8006214 <HAL_RCC_OscConfig+0x130>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d169      	bne.n	8006214 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	f000 bc21 	b.w	8006988 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800614e:	d106      	bne.n	800615e <HAL_RCC_OscConfig+0x7a>
 8006150:	4b86      	ldr	r3, [pc, #536]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a85      	ldr	r2, [pc, #532]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	e02e      	b.n	80061bc <HAL_RCC_OscConfig+0xd8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10c      	bne.n	8006180 <HAL_RCC_OscConfig+0x9c>
 8006166:	4b81      	ldr	r3, [pc, #516]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a80      	ldr	r2, [pc, #512]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 800616c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	4b7e      	ldr	r3, [pc, #504]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a7d      	ldr	r2, [pc, #500]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006178:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	e01d      	b.n	80061bc <HAL_RCC_OscConfig+0xd8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006188:	d10c      	bne.n	80061a4 <HAL_RCC_OscConfig+0xc0>
 800618a:	4b78      	ldr	r3, [pc, #480]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a77      	ldr	r2, [pc, #476]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006190:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	4b75      	ldr	r3, [pc, #468]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a74      	ldr	r2, [pc, #464]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 800619c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	e00b      	b.n	80061bc <HAL_RCC_OscConfig+0xd8>
 80061a4:	4b71      	ldr	r3, [pc, #452]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a70      	ldr	r2, [pc, #448]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80061aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	4b6e      	ldr	r3, [pc, #440]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a6d      	ldr	r2, [pc, #436]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80061b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d013      	beq.n	80061ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c4:	f7fb f9f2 	bl	80015ac <HAL_GetTick>
 80061c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061cc:	f7fb f9ee 	bl	80015ac <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b64      	cmp	r3, #100	@ 0x64
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e3d4      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061de:	4b63      	ldr	r3, [pc, #396]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0f0      	beq.n	80061cc <HAL_RCC_OscConfig+0xe8>
 80061ea:	e014      	b.n	8006216 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fb f9de 	bl	80015ac <HAL_GetTick>
 80061f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061f4:	f7fb f9da 	bl	80015ac <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b64      	cmp	r3, #100	@ 0x64
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e3c0      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006206:	4b59      	ldr	r3, [pc, #356]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f0      	bne.n	80061f4 <HAL_RCC_OscConfig+0x110>
 8006212:	e000      	b.n	8006216 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80ca 	beq.w	80063b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006224:	4b51      	ldr	r3, [pc, #324]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800622c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800622e:	4b4f      	ldr	r3, [pc, #316]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006232:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <HAL_RCC_OscConfig+0x166>
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	2b18      	cmp	r3, #24
 800623e:	d156      	bne.n	80062ee <HAL_RCC_OscConfig+0x20a>
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d151      	bne.n	80062ee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800624a:	4b48      	ldr	r3, [pc, #288]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <HAL_RCC_OscConfig+0x17e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e392      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006262:	4b42      	ldr	r3, [pc, #264]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f023 0219 	bic.w	r2, r3, #25
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	493f      	ldr	r1, [pc, #252]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006270:	4313      	orrs	r3, r2
 8006272:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006274:	f7fb f99a 	bl	80015ac <HAL_GetTick>
 8006278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800627c:	f7fb f996 	bl	80015ac <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e37c      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800628e:	4b37      	ldr	r3, [pc, #220]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0304 	and.w	r3, r3, #4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800629a:	f7fb f993 	bl	80015c4 <HAL_GetREVID>
 800629e:	4603      	mov	r3, r0
 80062a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d817      	bhi.n	80062d8 <HAL_RCC_OscConfig+0x1f4>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b40      	cmp	r3, #64	@ 0x40
 80062ae:	d108      	bne.n	80062c2 <HAL_RCC_OscConfig+0x1de>
 80062b0:	4b2e      	ldr	r3, [pc, #184]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80062b8:	4a2c      	ldr	r2, [pc, #176]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80062ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062be:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062c0:	e07a      	b.n	80063b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c2:	4b2a      	ldr	r3, [pc, #168]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	031b      	lsls	r3, r3, #12
 80062d0:	4926      	ldr	r1, [pc, #152]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062d6:	e06f      	b.n	80063b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d8:	4b24      	ldr	r3, [pc, #144]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	061b      	lsls	r3, r3, #24
 80062e6:	4921      	ldr	r1, [pc, #132]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ec:	e064      	b.n	80063b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d047      	beq.n	8006386 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062f6:	4b1d      	ldr	r3, [pc, #116]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f023 0219 	bic.w	r2, r3, #25
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	491a      	ldr	r1, [pc, #104]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006304:	4313      	orrs	r3, r2
 8006306:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006308:	f7fb f950 	bl	80015ac <HAL_GetTick>
 800630c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006310:	f7fb f94c 	bl	80015ac <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e332      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006322:	4b12      	ldr	r3, [pc, #72]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632e:	f7fb f949 	bl	80015c4 <HAL_GetREVID>
 8006332:	4603      	mov	r3, r0
 8006334:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006338:	4293      	cmp	r3, r2
 800633a:	d819      	bhi.n	8006370 <HAL_RCC_OscConfig+0x28c>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b40      	cmp	r3, #64	@ 0x40
 8006342:	d108      	bne.n	8006356 <HAL_RCC_OscConfig+0x272>
 8006344:	4b09      	ldr	r3, [pc, #36]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800634c:	4a07      	ldr	r2, [pc, #28]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 800634e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006352:	6053      	str	r3, [r2, #4]
 8006354:	e030      	b.n	80063b8 <HAL_RCC_OscConfig+0x2d4>
 8006356:	4b05      	ldr	r3, [pc, #20]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	031b      	lsls	r3, r3, #12
 8006364:	4901      	ldr	r1, [pc, #4]	@ (800636c <HAL_RCC_OscConfig+0x288>)
 8006366:	4313      	orrs	r3, r2
 8006368:	604b      	str	r3, [r1, #4]
 800636a:	e025      	b.n	80063b8 <HAL_RCC_OscConfig+0x2d4>
 800636c:	58024400 	.word	0x58024400
 8006370:	4b9a      	ldr	r3, [pc, #616]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	061b      	lsls	r3, r3, #24
 800637e:	4997      	ldr	r1, [pc, #604]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006380:	4313      	orrs	r3, r2
 8006382:	604b      	str	r3, [r1, #4]
 8006384:	e018      	b.n	80063b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006386:	4b95      	ldr	r3, [pc, #596]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a94      	ldr	r2, [pc, #592]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 800638c:	f023 0301 	bic.w	r3, r3, #1
 8006390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006392:	f7fb f90b 	bl	80015ac <HAL_GetTick>
 8006396:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800639a:	f7fb f907 	bl	80015ac <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e2ed      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063ac:	4b8b      	ldr	r3, [pc, #556]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f0      	bne.n	800639a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80a9 	beq.w	8006518 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063c6:	4b85      	ldr	r3, [pc, #532]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063d0:	4b82      	ldr	r3, [pc, #520]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80063d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d007      	beq.n	80063ec <HAL_RCC_OscConfig+0x308>
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	2b18      	cmp	r3, #24
 80063e0:	d13a      	bne.n	8006458 <HAL_RCC_OscConfig+0x374>
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f003 0303 	and.w	r3, r3, #3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d135      	bne.n	8006458 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063ec:	4b7b      	ldr	r3, [pc, #492]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <HAL_RCC_OscConfig+0x320>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	2b80      	cmp	r3, #128	@ 0x80
 80063fe:	d001      	beq.n	8006404 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e2c1      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006404:	f7fb f8de 	bl	80015c4 <HAL_GetREVID>
 8006408:	4603      	mov	r3, r0
 800640a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800640e:	4293      	cmp	r3, r2
 8006410:	d817      	bhi.n	8006442 <HAL_RCC_OscConfig+0x35e>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	2b20      	cmp	r3, #32
 8006418:	d108      	bne.n	800642c <HAL_RCC_OscConfig+0x348>
 800641a:	4b70      	ldr	r3, [pc, #448]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006422:	4a6e      	ldr	r2, [pc, #440]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006424:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006428:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800642a:	e075      	b.n	8006518 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800642c:	4b6b      	ldr	r3, [pc, #428]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	069b      	lsls	r3, r3, #26
 800643a:	4968      	ldr	r1, [pc, #416]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 800643c:	4313      	orrs	r3, r2
 800643e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006440:	e06a      	b.n	8006518 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006442:	4b66      	ldr	r3, [pc, #408]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	061b      	lsls	r3, r3, #24
 8006450:	4962      	ldr	r1, [pc, #392]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006452:	4313      	orrs	r3, r2
 8006454:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006456:	e05f      	b.n	8006518 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d042      	beq.n	80064e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006460:	4b5e      	ldr	r3, [pc, #376]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a5d      	ldr	r2, [pc, #372]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800646a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646c:	f7fb f89e 	bl	80015ac <HAL_GetTick>
 8006470:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006474:	f7fb f89a 	bl	80015ac <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e280      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006486:	4b55      	ldr	r3, [pc, #340]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006492:	f7fb f897 	bl	80015c4 <HAL_GetREVID>
 8006496:	4603      	mov	r3, r0
 8006498:	f241 0203 	movw	r2, #4099	@ 0x1003
 800649c:	4293      	cmp	r3, r2
 800649e:	d817      	bhi.n	80064d0 <HAL_RCC_OscConfig+0x3ec>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d108      	bne.n	80064ba <HAL_RCC_OscConfig+0x3d6>
 80064a8:	4b4c      	ldr	r3, [pc, #304]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80064b0:	4a4a      	ldr	r2, [pc, #296]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80064b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064b6:	6053      	str	r3, [r2, #4]
 80064b8:	e02e      	b.n	8006518 <HAL_RCC_OscConfig+0x434>
 80064ba:	4b48      	ldr	r3, [pc, #288]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	069b      	lsls	r3, r3, #26
 80064c8:	4944      	ldr	r1, [pc, #272]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	604b      	str	r3, [r1, #4]
 80064ce:	e023      	b.n	8006518 <HAL_RCC_OscConfig+0x434>
 80064d0:	4b42      	ldr	r3, [pc, #264]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	061b      	lsls	r3, r3, #24
 80064de:	493f      	ldr	r1, [pc, #252]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60cb      	str	r3, [r1, #12]
 80064e4:	e018      	b.n	8006518 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064e6:	4b3d      	ldr	r3, [pc, #244]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a3c      	ldr	r2, [pc, #240]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80064ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f2:	f7fb f85b 	bl	80015ac <HAL_GetTick>
 80064f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064fa:	f7fb f857 	bl	80015ac <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e23d      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800650c:	4b33      	ldr	r3, [pc, #204]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f0      	bne.n	80064fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b00      	cmp	r3, #0
 8006522:	d036      	beq.n	8006592 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d019      	beq.n	8006560 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800652c:	4b2b      	ldr	r3, [pc, #172]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 800652e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006530:	4a2a      	ldr	r2, [pc, #168]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006532:	f043 0301 	orr.w	r3, r3, #1
 8006536:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006538:	f7fb f838 	bl	80015ac <HAL_GetTick>
 800653c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006540:	f7fb f834 	bl	80015ac <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e21a      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006552:	4b22      	ldr	r3, [pc, #136]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f0      	beq.n	8006540 <HAL_RCC_OscConfig+0x45c>
 800655e:	e018      	b.n	8006592 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006560:	4b1e      	ldr	r3, [pc, #120]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006564:	4a1d      	ldr	r2, [pc, #116]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800656c:	f7fb f81e 	bl	80015ac <HAL_GetTick>
 8006570:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006574:	f7fb f81a 	bl	80015ac <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e200      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006586:	4b15      	ldr	r3, [pc, #84]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 8006588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b00      	cmp	r3, #0
 800659c:	d039      	beq.n	8006612 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d01c      	beq.n	80065e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065a6:	4b0d      	ldr	r3, [pc, #52]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a0c      	ldr	r2, [pc, #48]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80065ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80065b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065b2:	f7fa fffb 	bl	80015ac <HAL_GetTick>
 80065b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065ba:	f7fa fff7 	bl	80015ac <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e1dd      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065cc:	4b03      	ldr	r3, [pc, #12]	@ (80065dc <HAL_RCC_OscConfig+0x4f8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0f0      	beq.n	80065ba <HAL_RCC_OscConfig+0x4d6>
 80065d8:	e01b      	b.n	8006612 <HAL_RCC_OscConfig+0x52e>
 80065da:	bf00      	nop
 80065dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065e0:	4b9b      	ldr	r3, [pc, #620]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a9a      	ldr	r2, [pc, #616]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80065e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065ec:	f7fa ffde 	bl	80015ac <HAL_GetTick>
 80065f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065f4:	f7fa ffda 	bl	80015ac <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e1c0      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006606:	4b92      	ldr	r3, [pc, #584]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 8081 	beq.w	8006722 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006620:	4b8c      	ldr	r3, [pc, #560]	@ (8006854 <HAL_RCC_OscConfig+0x770>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a8b      	ldr	r2, [pc, #556]	@ (8006854 <HAL_RCC_OscConfig+0x770>)
 8006626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800662a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800662c:	f7fa ffbe 	bl	80015ac <HAL_GetTick>
 8006630:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006634:	f7fa ffba 	bl	80015ac <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b64      	cmp	r3, #100	@ 0x64
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e1a0      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006646:	4b83      	ldr	r3, [pc, #524]	@ (8006854 <HAL_RCC_OscConfig+0x770>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0f0      	beq.n	8006634 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d106      	bne.n	8006668 <HAL_RCC_OscConfig+0x584>
 800665a:	4b7d      	ldr	r3, [pc, #500]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665e:	4a7c      	ldr	r2, [pc, #496]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	6713      	str	r3, [r2, #112]	@ 0x70
 8006666:	e02d      	b.n	80066c4 <HAL_RCC_OscConfig+0x5e0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10c      	bne.n	800668a <HAL_RCC_OscConfig+0x5a6>
 8006670:	4b77      	ldr	r3, [pc, #476]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006674:	4a76      	ldr	r2, [pc, #472]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006676:	f023 0301 	bic.w	r3, r3, #1
 800667a:	6713      	str	r3, [r2, #112]	@ 0x70
 800667c:	4b74      	ldr	r3, [pc, #464]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 800667e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006680:	4a73      	ldr	r2, [pc, #460]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006682:	f023 0304 	bic.w	r3, r3, #4
 8006686:	6713      	str	r3, [r2, #112]	@ 0x70
 8006688:	e01c      	b.n	80066c4 <HAL_RCC_OscConfig+0x5e0>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b05      	cmp	r3, #5
 8006690:	d10c      	bne.n	80066ac <HAL_RCC_OscConfig+0x5c8>
 8006692:	4b6f      	ldr	r3, [pc, #444]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006696:	4a6e      	ldr	r2, [pc, #440]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006698:	f043 0304 	orr.w	r3, r3, #4
 800669c:	6713      	str	r3, [r2, #112]	@ 0x70
 800669e:	4b6c      	ldr	r3, [pc, #432]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80066a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a2:	4a6b      	ldr	r2, [pc, #428]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80066aa:	e00b      	b.n	80066c4 <HAL_RCC_OscConfig+0x5e0>
 80066ac:	4b68      	ldr	r3, [pc, #416]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b0:	4a67      	ldr	r2, [pc, #412]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80066b2:	f023 0301 	bic.w	r3, r3, #1
 80066b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80066b8:	4b65      	ldr	r3, [pc, #404]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066bc:	4a64      	ldr	r2, [pc, #400]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80066be:	f023 0304 	bic.w	r3, r3, #4
 80066c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d015      	beq.n	80066f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066cc:	f7fa ff6e 	bl	80015ac <HAL_GetTick>
 80066d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066d2:	e00a      	b.n	80066ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d4:	f7fa ff6a 	bl	80015ac <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e14e      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066ea:	4b59      	ldr	r3, [pc, #356]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0ee      	beq.n	80066d4 <HAL_RCC_OscConfig+0x5f0>
 80066f6:	e014      	b.n	8006722 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f8:	f7fa ff58 	bl	80015ac <HAL_GetTick>
 80066fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066fe:	e00a      	b.n	8006716 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006700:	f7fa ff54 	bl	80015ac <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800670e:	4293      	cmp	r3, r2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e138      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006716:	4b4e      	ldr	r3, [pc, #312]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1ee      	bne.n	8006700 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 812d 	beq.w	8006986 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800672c:	4b48      	ldr	r3, [pc, #288]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006734:	2b18      	cmp	r3, #24
 8006736:	f000 80bd 	beq.w	80068b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673e:	2b02      	cmp	r3, #2
 8006740:	f040 809e 	bne.w	8006880 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006744:	4b42      	ldr	r3, [pc, #264]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a41      	ldr	r2, [pc, #260]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 800674a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800674e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006750:	f7fa ff2c 	bl	80015ac <HAL_GetTick>
 8006754:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006758:	f7fa ff28 	bl	80015ac <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e10e      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800676a:	4b39      	ldr	r3, [pc, #228]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f0      	bne.n	8006758 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006776:	4b36      	ldr	r3, [pc, #216]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006778:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800677a:	4b37      	ldr	r3, [pc, #220]	@ (8006858 <HAL_RCC_OscConfig+0x774>)
 800677c:	4013      	ands	r3, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006786:	0112      	lsls	r2, r2, #4
 8006788:	430a      	orrs	r2, r1
 800678a:	4931      	ldr	r1, [pc, #196]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 800678c:	4313      	orrs	r3, r2
 800678e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006794:	3b01      	subs	r3, #1
 8006796:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679e:	3b01      	subs	r3, #1
 80067a0:	025b      	lsls	r3, r3, #9
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067aa:	3b01      	subs	r3, #1
 80067ac:	041b      	lsls	r3, r3, #16
 80067ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b8:	3b01      	subs	r3, #1
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80067c0:	4923      	ldr	r1, [pc, #140]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80067c6:	4b22      	ldr	r3, [pc, #136]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	4a21      	ldr	r2, [pc, #132]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80067d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067d6:	4b21      	ldr	r3, [pc, #132]	@ (800685c <HAL_RCC_OscConfig+0x778>)
 80067d8:	4013      	ands	r3, r2
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067de:	00d2      	lsls	r2, r2, #3
 80067e0:	491b      	ldr	r1, [pc, #108]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80067e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ea:	f023 020c 	bic.w	r2, r3, #12
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f2:	4917      	ldr	r1, [pc, #92]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067f8:	4b15      	ldr	r3, [pc, #84]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 80067fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fc:	f023 0202 	bic.w	r2, r3, #2
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006804:	4912      	ldr	r1, [pc, #72]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006806:	4313      	orrs	r3, r2
 8006808:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800680a:	4b11      	ldr	r3, [pc, #68]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 800680c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680e:	4a10      	ldr	r2, [pc, #64]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006814:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006816:	4b0e      	ldr	r3, [pc, #56]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	4a0d      	ldr	r2, [pc, #52]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 800681c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006822:	4b0b      	ldr	r3, [pc, #44]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006826:	4a0a      	ldr	r2, [pc, #40]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800682c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800682e:	4b08      	ldr	r3, [pc, #32]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006832:	4a07      	ldr	r2, [pc, #28]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006834:	f043 0301 	orr.w	r3, r3, #1
 8006838:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800683a:	4b05      	ldr	r3, [pc, #20]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a04      	ldr	r2, [pc, #16]	@ (8006850 <HAL_RCC_OscConfig+0x76c>)
 8006840:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006846:	f7fa feb1 	bl	80015ac <HAL_GetTick>
 800684a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800684c:	e011      	b.n	8006872 <HAL_RCC_OscConfig+0x78e>
 800684e:	bf00      	nop
 8006850:	58024400 	.word	0x58024400
 8006854:	58024800 	.word	0x58024800
 8006858:	fffffc0c 	.word	0xfffffc0c
 800685c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006860:	f7fa fea4 	bl	80015ac <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e08a      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006872:	4b47      	ldr	r3, [pc, #284]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0x77c>
 800687e:	e082      	b.n	8006986 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006880:	4b43      	ldr	r3, [pc, #268]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a42      	ldr	r2, [pc, #264]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 8006886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800688a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688c:	f7fa fe8e 	bl	80015ac <HAL_GetTick>
 8006890:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006894:	f7fa fe8a 	bl	80015ac <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e070      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068a6:	4b3a      	ldr	r3, [pc, #232]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0x7b0>
 80068b2:	e068      	b.n	8006986 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80068b4:	4b36      	ldr	r3, [pc, #216]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 80068b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068ba:	4b35      	ldr	r3, [pc, #212]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d031      	beq.n	800692c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f003 0203 	and.w	r2, r3, #3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d12a      	bne.n	800692c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	091b      	lsrs	r3, r3, #4
 80068da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d122      	bne.n	800692c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d11a      	bne.n	800692c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	0a5b      	lsrs	r3, r3, #9
 80068fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006902:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006904:	429a      	cmp	r2, r3
 8006906:	d111      	bne.n	800692c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	0c1b      	lsrs	r3, r3, #16
 800690c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006914:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006916:	429a      	cmp	r2, r3
 8006918:	d108      	bne.n	800692c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	0e1b      	lsrs	r3, r3, #24
 800691e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006926:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006928:	429a      	cmp	r2, r3
 800692a:	d001      	beq.n	8006930 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e02b      	b.n	8006988 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006930:	4b17      	ldr	r3, [pc, #92]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 8006932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006934:	08db      	lsrs	r3, r3, #3
 8006936:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800693a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	429a      	cmp	r2, r3
 8006944:	d01f      	beq.n	8006986 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006946:	4b12      	ldr	r3, [pc, #72]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 8006948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694a:	4a11      	ldr	r2, [pc, #68]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006952:	f7fa fe2b 	bl	80015ac <HAL_GetTick>
 8006956:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006958:	bf00      	nop
 800695a:	f7fa fe27 	bl	80015ac <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	4293      	cmp	r3, r2
 8006964:	d0f9      	beq.n	800695a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006966:	4b0a      	ldr	r3, [pc, #40]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 8006968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800696a:	4b0a      	ldr	r3, [pc, #40]	@ (8006994 <HAL_RCC_OscConfig+0x8b0>)
 800696c:	4013      	ands	r3, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006972:	00d2      	lsls	r2, r2, #3
 8006974:	4906      	ldr	r1, [pc, #24]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 8006976:	4313      	orrs	r3, r2
 8006978:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800697a:	4b05      	ldr	r3, [pc, #20]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 800697c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697e:	4a04      	ldr	r2, [pc, #16]	@ (8006990 <HAL_RCC_OscConfig+0x8ac>)
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3730      	adds	r7, #48	@ 0x30
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	58024400 	.word	0x58024400
 8006994:	ffff0007 	.word	0xffff0007

08006998 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e19c      	b.n	8006ce6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069ac:	4b8a      	ldr	r3, [pc, #552]	@ (8006bd8 <HAL_RCC_ClockConfig+0x240>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 030f 	and.w	r3, r3, #15
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d910      	bls.n	80069dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ba:	4b87      	ldr	r3, [pc, #540]	@ (8006bd8 <HAL_RCC_ClockConfig+0x240>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f023 020f 	bic.w	r2, r3, #15
 80069c2:	4985      	ldr	r1, [pc, #532]	@ (8006bd8 <HAL_RCC_ClockConfig+0x240>)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ca:	4b83      	ldr	r3, [pc, #524]	@ (8006bd8 <HAL_RCC_ClockConfig+0x240>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d001      	beq.n	80069dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e184      	b.n	8006ce6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d010      	beq.n	8006a0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	4b7b      	ldr	r3, [pc, #492]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d908      	bls.n	8006a0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069f8:	4b78      	ldr	r3, [pc, #480]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	4975      	ldr	r1, [pc, #468]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d010      	beq.n	8006a38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695a      	ldr	r2, [r3, #20]
 8006a1a:	4b70      	ldr	r3, [pc, #448]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d908      	bls.n	8006a38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a26:	4b6d      	ldr	r3, [pc, #436]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	496a      	ldr	r1, [pc, #424]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d010      	beq.n	8006a66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	699a      	ldr	r2, [r3, #24]
 8006a48:	4b64      	ldr	r3, [pc, #400]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d908      	bls.n	8006a66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a54:	4b61      	ldr	r3, [pc, #388]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	495e      	ldr	r1, [pc, #376]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d010      	beq.n	8006a94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69da      	ldr	r2, [r3, #28]
 8006a76:	4b59      	ldr	r3, [pc, #356]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d908      	bls.n	8006a94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a82:	4b56      	ldr	r3, [pc, #344]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	4953      	ldr	r1, [pc, #332]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d010      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d908      	bls.n	8006ac2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	f023 020f 	bic.w	r2, r3, #15
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	4947      	ldr	r1, [pc, #284]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d055      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ace:	4b43      	ldr	r3, [pc, #268]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	4940      	ldr	r1, [pc, #256]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d107      	bne.n	8006af8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d121      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e0f6      	b.n	8006ce6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d107      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b00:	4b36      	ldr	r3, [pc, #216]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d115      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0ea      	b.n	8006ce6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d107      	bne.n	8006b28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b18:	4b30      	ldr	r3, [pc, #192]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d109      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0de      	b.n	8006ce6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b28:	4b2c      	ldr	r3, [pc, #176]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e0d6      	b.n	8006ce6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b38:	4b28      	ldr	r3, [pc, #160]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f023 0207 	bic.w	r2, r3, #7
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	4925      	ldr	r1, [pc, #148]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b4a:	f7fa fd2f 	bl	80015ac <HAL_GetTick>
 8006b4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b50:	e00a      	b.n	8006b68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b52:	f7fa fd2b 	bl	80015ac <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d901      	bls.n	8006b68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e0be      	b.n	8006ce6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b68:	4b1c      	ldr	r3, [pc, #112]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d1eb      	bne.n	8006b52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d010      	beq.n	8006ba8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	4b14      	ldr	r3, [pc, #80]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d208      	bcs.n	8006ba8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b96:	4b11      	ldr	r3, [pc, #68]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f023 020f 	bic.w	r2, r3, #15
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	490e      	ldr	r1, [pc, #56]	@ (8006bdc <HAL_RCC_ClockConfig+0x244>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd8 <HAL_RCC_ClockConfig+0x240>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 030f 	and.w	r3, r3, #15
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d214      	bcs.n	8006be0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb6:	4b08      	ldr	r3, [pc, #32]	@ (8006bd8 <HAL_RCC_ClockConfig+0x240>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f023 020f 	bic.w	r2, r3, #15
 8006bbe:	4906      	ldr	r1, [pc, #24]	@ (8006bd8 <HAL_RCC_ClockConfig+0x240>)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc6:	4b04      	ldr	r3, [pc, #16]	@ (8006bd8 <HAL_RCC_ClockConfig+0x240>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d005      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e086      	b.n	8006ce6 <HAL_RCC_ClockConfig+0x34e>
 8006bd8:	52002000 	.word	0x52002000
 8006bdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d010      	beq.n	8006c0e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d208      	bcs.n	8006c0e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	4939      	ldr	r1, [pc, #228]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d010      	beq.n	8006c3c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695a      	ldr	r2, [r3, #20]
 8006c1e:	4b34      	ldr	r3, [pc, #208]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d208      	bcs.n	8006c3c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c2a:	4b31      	ldr	r3, [pc, #196]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	492e      	ldr	r1, [pc, #184]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d010      	beq.n	8006c6a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699a      	ldr	r2, [r3, #24]
 8006c4c:	4b28      	ldr	r3, [pc, #160]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d208      	bcs.n	8006c6a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c58:	4b25      	ldr	r3, [pc, #148]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	4922      	ldr	r1, [pc, #136]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d010      	beq.n	8006c98 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d208      	bcs.n	8006c98 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c86:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	4917      	ldr	r1, [pc, #92]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c98:	f000 f834 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b14      	ldr	r3, [pc, #80]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	0a1b      	lsrs	r3, r3, #8
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	4912      	ldr	r1, [pc, #72]	@ (8006cf4 <HAL_RCC_ClockConfig+0x35c>)
 8006caa:	5ccb      	ldrb	r3, [r1, r3]
 8006cac:	f003 031f 	and.w	r3, r3, #31
 8006cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf0 <HAL_RCC_ClockConfig+0x358>)
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8006cf4 <HAL_RCC_ClockConfig+0x35c>)
 8006cc0:	5cd3      	ldrb	r3, [r2, r3]
 8006cc2:	f003 031f 	and.w	r3, r3, #31
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8006cf8 <HAL_RCC_ClockConfig+0x360>)
 8006cce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8006cfc <HAL_RCC_ClockConfig+0x364>)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <HAL_RCC_ClockConfig+0x368>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fa fc1c 	bl	8001518 <HAL_InitTick>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	58024400 	.word	0x58024400
 8006cf4:	0800b1cc 	.word	0x0800b1cc
 8006cf8:	24000004 	.word	0x24000004
 8006cfc:	24000000 	.word	0x24000000
 8006d00:	24000008 	.word	0x24000008

08006d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b089      	sub	sp, #36	@ 0x24
 8006d08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d0a:	4bb3      	ldr	r3, [pc, #716]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d12:	2b18      	cmp	r3, #24
 8006d14:	f200 8155 	bhi.w	8006fc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006d18:	a201      	add	r2, pc, #4	@ (adr r2, 8006d20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006d85 	.word	0x08006d85
 8006d24:	08006fc3 	.word	0x08006fc3
 8006d28:	08006fc3 	.word	0x08006fc3
 8006d2c:	08006fc3 	.word	0x08006fc3
 8006d30:	08006fc3 	.word	0x08006fc3
 8006d34:	08006fc3 	.word	0x08006fc3
 8006d38:	08006fc3 	.word	0x08006fc3
 8006d3c:	08006fc3 	.word	0x08006fc3
 8006d40:	08006dab 	.word	0x08006dab
 8006d44:	08006fc3 	.word	0x08006fc3
 8006d48:	08006fc3 	.word	0x08006fc3
 8006d4c:	08006fc3 	.word	0x08006fc3
 8006d50:	08006fc3 	.word	0x08006fc3
 8006d54:	08006fc3 	.word	0x08006fc3
 8006d58:	08006fc3 	.word	0x08006fc3
 8006d5c:	08006fc3 	.word	0x08006fc3
 8006d60:	08006db1 	.word	0x08006db1
 8006d64:	08006fc3 	.word	0x08006fc3
 8006d68:	08006fc3 	.word	0x08006fc3
 8006d6c:	08006fc3 	.word	0x08006fc3
 8006d70:	08006fc3 	.word	0x08006fc3
 8006d74:	08006fc3 	.word	0x08006fc3
 8006d78:	08006fc3 	.word	0x08006fc3
 8006d7c:	08006fc3 	.word	0x08006fc3
 8006d80:	08006db7 	.word	0x08006db7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d84:	4b94      	ldr	r3, [pc, #592]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0320 	and.w	r3, r3, #32
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d90:	4b91      	ldr	r3, [pc, #580]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	08db      	lsrs	r3, r3, #3
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	4a90      	ldr	r2, [pc, #576]	@ (8006fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006da0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006da2:	e111      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006da4:	4b8d      	ldr	r3, [pc, #564]	@ (8006fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006da6:	61bb      	str	r3, [r7, #24]
      break;
 8006da8:	e10e      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006daa:	4b8d      	ldr	r3, [pc, #564]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006dac:	61bb      	str	r3, [r7, #24]
      break;
 8006dae:	e10b      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006db0:	4b8c      	ldr	r3, [pc, #560]	@ (8006fe4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006db2:	61bb      	str	r3, [r7, #24]
      break;
 8006db4:	e108      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006db6:	4b88      	ldr	r3, [pc, #544]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006dc0:	4b85      	ldr	r3, [pc, #532]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	091b      	lsrs	r3, r3, #4
 8006dc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006dcc:	4b82      	ldr	r3, [pc, #520]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006dd6:	4b80      	ldr	r3, [pc, #512]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dda:	08db      	lsrs	r3, r3, #3
 8006ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	fb02 f303 	mul.w	r3, r2, r3
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80e1 	beq.w	8006fbc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	f000 8083 	beq.w	8006f08 <HAL_RCC_GetSysClockFreq+0x204>
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	f200 80a1 	bhi.w	8006f4c <HAL_RCC_GetSysClockFreq+0x248>
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <HAL_RCC_GetSysClockFreq+0x114>
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d056      	beq.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e16:	e099      	b.n	8006f4c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e18:	4b6f      	ldr	r3, [pc, #444]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d02d      	beq.n	8006e80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e24:	4b6c      	ldr	r3, [pc, #432]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	08db      	lsrs	r3, r3, #3
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	4a6b      	ldr	r2, [pc, #428]	@ (8006fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e30:	fa22 f303 	lsr.w	r3, r2, r3
 8006e34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4e:	4b62      	ldr	r3, [pc, #392]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e62:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e7e:	e087      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006fec <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e92:	4b51      	ldr	r3, [pc, #324]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ea6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ec2:	e065      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ece:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006ff0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed6:	4b40      	ldr	r3, [pc, #256]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f06:	e043      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006ff4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f2e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f4a:	e021      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f56:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006ff0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f72:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f90:	4b11      	ldr	r3, [pc, #68]	@ (8006fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f94:	0a5b      	lsrs	r3, r3, #9
 8006f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	ee07 3a90 	vmov	s15, r3
 8006fa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fb4:	ee17 3a90 	vmov	r3, s15
 8006fb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006fba:	e005      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61bb      	str	r3, [r7, #24]
      break;
 8006fc0:	e002      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006fc2:	4b07      	ldr	r3, [pc, #28]	@ (8006fe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fc4:	61bb      	str	r3, [r7, #24]
      break;
 8006fc6:	bf00      	nop
  }

  return sysclockfreq;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3724      	adds	r7, #36	@ 0x24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	58024400 	.word	0x58024400
 8006fdc:	03d09000 	.word	0x03d09000
 8006fe0:	003d0900 	.word	0x003d0900
 8006fe4:	00f42400 	.word	0x00f42400
 8006fe8:	46000000 	.word	0x46000000
 8006fec:	4c742400 	.word	0x4c742400
 8006ff0:	4a742400 	.word	0x4a742400
 8006ff4:	4b742400 	.word	0x4b742400

08006ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ffe:	f7ff fe81 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8007002:	4602      	mov	r2, r0
 8007004:	4b10      	ldr	r3, [pc, #64]	@ (8007048 <HAL_RCC_GetHCLKFreq+0x50>)
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	0a1b      	lsrs	r3, r3, #8
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	490f      	ldr	r1, [pc, #60]	@ (800704c <HAL_RCC_GetHCLKFreq+0x54>)
 8007010:	5ccb      	ldrb	r3, [r1, r3]
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	fa22 f303 	lsr.w	r3, r2, r3
 800701a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800701c:	4b0a      	ldr	r3, [pc, #40]	@ (8007048 <HAL_RCC_GetHCLKFreq+0x50>)
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	4a09      	ldr	r2, [pc, #36]	@ (800704c <HAL_RCC_GetHCLKFreq+0x54>)
 8007026:	5cd3      	ldrb	r3, [r2, r3]
 8007028:	f003 031f 	and.w	r3, r3, #31
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	fa22 f303 	lsr.w	r3, r2, r3
 8007032:	4a07      	ldr	r2, [pc, #28]	@ (8007050 <HAL_RCC_GetHCLKFreq+0x58>)
 8007034:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007036:	4a07      	ldr	r2, [pc, #28]	@ (8007054 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800703c:	4b04      	ldr	r3, [pc, #16]	@ (8007050 <HAL_RCC_GetHCLKFreq+0x58>)
 800703e:	681b      	ldr	r3, [r3, #0]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	58024400 	.word	0x58024400
 800704c:	0800b1cc 	.word	0x0800b1cc
 8007050:	24000004 	.word	0x24000004
 8007054:	24000000 	.word	0x24000000

08007058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800705c:	f7ff ffcc 	bl	8006ff8 <HAL_RCC_GetHCLKFreq>
 8007060:	4602      	mov	r2, r0
 8007062:	4b06      	ldr	r3, [pc, #24]	@ (800707c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	091b      	lsrs	r3, r3, #4
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	4904      	ldr	r1, [pc, #16]	@ (8007080 <HAL_RCC_GetPCLK1Freq+0x28>)
 800706e:	5ccb      	ldrb	r3, [r1, r3]
 8007070:	f003 031f 	and.w	r3, r3, #31
 8007074:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007078:	4618      	mov	r0, r3
 800707a:	bd80      	pop	{r7, pc}
 800707c:	58024400 	.word	0x58024400
 8007080:	0800b1cc 	.word	0x0800b1cc

08007084 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007088:	b0ca      	sub	sp, #296	@ 0x128
 800708a:	af00      	add	r7, sp, #0
 800708c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007090:	2300      	movs	r3, #0
 8007092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007096:	2300      	movs	r3, #0
 8007098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80070a8:	2500      	movs	r5, #0
 80070aa:	ea54 0305 	orrs.w	r3, r4, r5
 80070ae:	d049      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80070b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070ba:	d02f      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80070bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070c0:	d828      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070c6:	d01a      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070cc:	d822      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070d6:	d007      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070d8:	e01c      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070da:	4bb8      	ldr	r3, [pc, #736]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070de:	4ab7      	ldr	r2, [pc, #732]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070e6:	e01a      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ec:	3308      	adds	r3, #8
 80070ee:	2102      	movs	r1, #2
 80070f0:	4618      	mov	r0, r3
 80070f2:	f002 fb61 	bl	80097b8 <RCCEx_PLL2_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070fc:	e00f      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007102:	3328      	adds	r3, #40	@ 0x28
 8007104:	2102      	movs	r1, #2
 8007106:	4618      	mov	r0, r3
 8007108:	f002 fc08 	bl	800991c <RCCEx_PLL3_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007112:	e004      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800711a:	e000      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800711c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007126:	4ba5      	ldr	r3, [pc, #660]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800712a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800712e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007134:	4aa1      	ldr	r2, [pc, #644]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007136:	430b      	orrs	r3, r1
 8007138:	6513      	str	r3, [r2, #80]	@ 0x50
 800713a:	e003      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007150:	f04f 0900 	mov.w	r9, #0
 8007154:	ea58 0309 	orrs.w	r3, r8, r9
 8007158:	d047      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800715a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007160:	2b04      	cmp	r3, #4
 8007162:	d82a      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007164:	a201      	add	r2, pc, #4	@ (adr r2, 800716c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716a:	bf00      	nop
 800716c:	08007181 	.word	0x08007181
 8007170:	0800718f 	.word	0x0800718f
 8007174:	080071a5 	.word	0x080071a5
 8007178:	080071c3 	.word	0x080071c3
 800717c:	080071c3 	.word	0x080071c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007180:	4b8e      	ldr	r3, [pc, #568]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007184:	4a8d      	ldr	r2, [pc, #564]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800718a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800718c:	e01a      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800718e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007192:	3308      	adds	r3, #8
 8007194:	2100      	movs	r1, #0
 8007196:	4618      	mov	r0, r3
 8007198:	f002 fb0e 	bl	80097b8 <RCCEx_PLL2_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071a2:	e00f      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071a8:	3328      	adds	r3, #40	@ 0x28
 80071aa:	2100      	movs	r1, #0
 80071ac:	4618      	mov	r0, r3
 80071ae:	f002 fbb5 	bl	800991c <RCCEx_PLL3_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071b8:	e004      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071c0:	e000      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80071c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071cc:	4b7b      	ldr	r3, [pc, #492]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d0:	f023 0107 	bic.w	r1, r3, #7
 80071d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071da:	4a78      	ldr	r2, [pc, #480]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071dc:	430b      	orrs	r3, r1
 80071de:	6513      	str	r3, [r2, #80]	@ 0x50
 80071e0:	e003      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80071ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80071f6:	f04f 0b00 	mov.w	fp, #0
 80071fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80071fe:	d04c      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800720a:	d030      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800720c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007210:	d829      	bhi.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007212:	2bc0      	cmp	r3, #192	@ 0xc0
 8007214:	d02d      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007216:	2bc0      	cmp	r3, #192	@ 0xc0
 8007218:	d825      	bhi.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800721a:	2b80      	cmp	r3, #128	@ 0x80
 800721c:	d018      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800721e:	2b80      	cmp	r3, #128	@ 0x80
 8007220:	d821      	bhi.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007226:	2b40      	cmp	r3, #64	@ 0x40
 8007228:	d007      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800722a:	e01c      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800722c:	4b63      	ldr	r3, [pc, #396]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800722e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007230:	4a62      	ldr	r2, [pc, #392]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007238:	e01c      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723e:	3308      	adds	r3, #8
 8007240:	2100      	movs	r1, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f002 fab8 	bl	80097b8 <RCCEx_PLL2_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800724e:	e011      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007254:	3328      	adds	r3, #40	@ 0x28
 8007256:	2100      	movs	r1, #0
 8007258:	4618      	mov	r0, r3
 800725a:	f002 fb5f 	bl	800991c <RCCEx_PLL3_Config>
 800725e:	4603      	mov	r3, r0
 8007260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007264:	e006      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800726c:	e002      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800726e:	bf00      	nop
 8007270:	e000      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800727c:	4b4f      	ldr	r3, [pc, #316]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800727e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007280:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800728a:	4a4c      	ldr	r2, [pc, #304]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800728c:	430b      	orrs	r3, r1
 800728e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007290:	e003      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800729a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80072a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80072aa:	2300      	movs	r3, #0
 80072ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80072b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80072b4:	460b      	mov	r3, r1
 80072b6:	4313      	orrs	r3, r2
 80072b8:	d053      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80072c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072c6:	d035      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80072c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072cc:	d82e      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80072d2:	d031      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80072d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80072d8:	d828      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072de:	d01a      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80072e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072e4:	d822      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80072ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072ee:	d007      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80072f0:	e01c      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072f2:	4b32      	ldr	r3, [pc, #200]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	4a31      	ldr	r2, [pc, #196]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072fe:	e01c      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007304:	3308      	adds	r3, #8
 8007306:	2100      	movs	r1, #0
 8007308:	4618      	mov	r0, r3
 800730a:	f002 fa55 	bl	80097b8 <RCCEx_PLL2_Config>
 800730e:	4603      	mov	r3, r0
 8007310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007314:	e011      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731a:	3328      	adds	r3, #40	@ 0x28
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f002 fafc 	bl	800991c <RCCEx_PLL3_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800732a:	e006      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007332:	e002      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007334:	bf00      	nop
 8007336:	e000      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10b      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007342:	4b1e      	ldr	r3, [pc, #120]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007346:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007352:	4a1a      	ldr	r2, [pc, #104]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007354:	430b      	orrs	r3, r1
 8007356:	6593      	str	r3, [r2, #88]	@ 0x58
 8007358:	e003      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800735e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800736e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007372:	2300      	movs	r3, #0
 8007374:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007378:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800737c:	460b      	mov	r3, r1
 800737e:	4313      	orrs	r3, r2
 8007380:	d056      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007386:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800738a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800738e:	d038      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007390:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007394:	d831      	bhi.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007396:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800739a:	d034      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800739c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80073a0:	d82b      	bhi.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073a6:	d01d      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80073a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073ac:	d825      	bhi.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d006      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80073b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073b6:	d00a      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80073b8:	e01f      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073ba:	bf00      	nop
 80073bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073c0:	4ba2      	ldr	r3, [pc, #648]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c4:	4aa1      	ldr	r2, [pc, #644]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073cc:	e01c      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d2:	3308      	adds	r3, #8
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f002 f9ee 	bl	80097b8 <RCCEx_PLL2_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80073e2:	e011      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e8:	3328      	adds	r3, #40	@ 0x28
 80073ea:	2100      	movs	r1, #0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f002 fa95 	bl	800991c <RCCEx_PLL3_Config>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073f8:	e006      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007400:	e002      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007402:	bf00      	nop
 8007404:	e000      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007410:	4b8e      	ldr	r3, [pc, #568]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007414:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007420:	4a8a      	ldr	r2, [pc, #552]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007422:	430b      	orrs	r3, r1
 8007424:	6593      	str	r3, [r2, #88]	@ 0x58
 8007426:	e003      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800742c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800743c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007440:	2300      	movs	r3, #0
 8007442:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007446:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800744a:	460b      	mov	r3, r1
 800744c:	4313      	orrs	r3, r2
 800744e:	d03a      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007456:	2b30      	cmp	r3, #48	@ 0x30
 8007458:	d01f      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800745a:	2b30      	cmp	r3, #48	@ 0x30
 800745c:	d819      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800745e:	2b20      	cmp	r3, #32
 8007460:	d00c      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007462:	2b20      	cmp	r3, #32
 8007464:	d815      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d019      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800746a:	2b10      	cmp	r3, #16
 800746c:	d111      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800746e:	4b77      	ldr	r3, [pc, #476]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	4a76      	ldr	r2, [pc, #472]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007478:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800747a:	e011      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800747c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007480:	3308      	adds	r3, #8
 8007482:	2102      	movs	r1, #2
 8007484:	4618      	mov	r0, r3
 8007486:	f002 f997 	bl	80097b8 <RCCEx_PLL2_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007490:	e006      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007498:	e002      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800749e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80074a8:	4b68      	ldr	r3, [pc, #416]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80074b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074b6:	4a65      	ldr	r2, [pc, #404]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074b8:	430b      	orrs	r3, r1
 80074ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074bc:	e003      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80074d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80074d6:	2300      	movs	r3, #0
 80074d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80074dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4313      	orrs	r3, r2
 80074e4:	d051      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074f0:	d035      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80074f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074f6:	d82e      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80074f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074fc:	d031      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80074fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007502:	d828      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007508:	d01a      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800750a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800750e:	d822      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007518:	d007      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800751a:	e01c      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800751c:	4b4b      	ldr	r3, [pc, #300]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	4a4a      	ldr	r2, [pc, #296]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007528:	e01c      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752e:	3308      	adds	r3, #8
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f002 f940 	bl	80097b8 <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800753e:	e011      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007544:	3328      	adds	r3, #40	@ 0x28
 8007546:	2100      	movs	r1, #0
 8007548:	4618      	mov	r0, r3
 800754a:	f002 f9e7 	bl	800991c <RCCEx_PLL3_Config>
 800754e:	4603      	mov	r3, r0
 8007550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007554:	e006      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800755c:	e002      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800755e:	bf00      	nop
 8007560:	e000      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007564:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800756c:	4b37      	ldr	r3, [pc, #220]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800756e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007570:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800757a:	4a34      	ldr	r2, [pc, #208]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800757c:	430b      	orrs	r3, r1
 800757e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007580:	e003      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007596:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800759a:	2300      	movs	r3, #0
 800759c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80075a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80075a4:	460b      	mov	r3, r1
 80075a6:	4313      	orrs	r3, r2
 80075a8:	d056      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075b4:	d033      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80075b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075ba:	d82c      	bhi.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075c0:	d02f      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80075c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075c6:	d826      	bhi.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075cc:	d02b      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80075ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075d2:	d820      	bhi.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075d8:	d012      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80075da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075de:	d81a      	bhi.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d022      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80075e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e8:	d115      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ee:	3308      	adds	r3, #8
 80075f0:	2101      	movs	r1, #1
 80075f2:	4618      	mov	r0, r3
 80075f4:	f002 f8e0 	bl	80097b8 <RCCEx_PLL2_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075fe:	e015      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007604:	3328      	adds	r3, #40	@ 0x28
 8007606:	2101      	movs	r1, #1
 8007608:	4618      	mov	r0, r3
 800760a:	f002 f987 	bl	800991c <RCCEx_PLL3_Config>
 800760e:	4603      	mov	r3, r0
 8007610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007614:	e00a      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800761c:	e006      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800761e:	bf00      	nop
 8007620:	e004      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007622:	bf00      	nop
 8007624:	e002      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007626:	bf00      	nop
 8007628:	e000      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800762a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800762c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10d      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007634:	4b05      	ldr	r3, [pc, #20]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007638:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800763c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007642:	4a02      	ldr	r2, [pc, #8]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007644:	430b      	orrs	r3, r1
 8007646:	6513      	str	r3, [r2, #80]	@ 0x50
 8007648:	e006      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800764a:	bf00      	nop
 800764c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007654:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007664:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007668:	2300      	movs	r3, #0
 800766a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800766e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007672:	460b      	mov	r3, r1
 8007674:	4313      	orrs	r3, r2
 8007676:	d055      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007684:	d033      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007686:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800768a:	d82c      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800768c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007690:	d02f      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007696:	d826      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007698:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800769c:	d02b      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800769e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076a2:	d820      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076a8:	d012      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80076aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076ae:	d81a      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d022      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80076b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076b8:	d115      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076be:	3308      	adds	r3, #8
 80076c0:	2101      	movs	r1, #1
 80076c2:	4618      	mov	r0, r3
 80076c4:	f002 f878 	bl	80097b8 <RCCEx_PLL2_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076ce:	e015      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d4:	3328      	adds	r3, #40	@ 0x28
 80076d6:	2101      	movs	r1, #1
 80076d8:	4618      	mov	r0, r3
 80076da:	f002 f91f 	bl	800991c <RCCEx_PLL3_Config>
 80076de:	4603      	mov	r3, r0
 80076e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076e4:	e00a      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076ec:	e006      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076ee:	bf00      	nop
 80076f0:	e004      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076f2:	bf00      	nop
 80076f4:	e002      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076f6:	bf00      	nop
 80076f8:	e000      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10b      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007704:	4ba3      	ldr	r3, [pc, #652]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007708:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007710:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007714:	4a9f      	ldr	r2, [pc, #636]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007716:	430b      	orrs	r3, r1
 8007718:	6593      	str	r3, [r2, #88]	@ 0x58
 800771a:	e003      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007734:	2300      	movs	r3, #0
 8007736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800773a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800773e:	460b      	mov	r3, r1
 8007740:	4313      	orrs	r3, r2
 8007742:	d037      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800774a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774e:	d00e      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007754:	d816      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800775a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800775e:	d111      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007760:	4b8c      	ldr	r3, [pc, #560]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007764:	4a8b      	ldr	r2, [pc, #556]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800776a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800776c:	e00f      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007772:	3308      	adds	r3, #8
 8007774:	2101      	movs	r1, #1
 8007776:	4618      	mov	r0, r3
 8007778:	f002 f81e 	bl	80097b8 <RCCEx_PLL2_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007782:	e004      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800778a:	e000      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800778c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800778e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10a      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007796:	4b7f      	ldr	r3, [pc, #508]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800779a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800779e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077a4:	4a7b      	ldr	r2, [pc, #492]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077a6:	430b      	orrs	r3, r1
 80077a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80077aa:	e003      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80077c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4313      	orrs	r3, r2
 80077d2:	d039      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80077d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d81c      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80077de:	a201      	add	r2, pc, #4	@ (adr r2, 80077e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	08007821 	.word	0x08007821
 80077e8:	080077f5 	.word	0x080077f5
 80077ec:	08007803 	.word	0x08007803
 80077f0:	08007821 	.word	0x08007821
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f4:	4b67      	ldr	r3, [pc, #412]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f8:	4a66      	ldr	r2, [pc, #408]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007800:	e00f      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007806:	3308      	adds	r3, #8
 8007808:	2102      	movs	r1, #2
 800780a:	4618      	mov	r0, r3
 800780c:	f001 ffd4 	bl	80097b8 <RCCEx_PLL2_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007816:	e004      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800781e:	e000      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10a      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800782a:	4b5a      	ldr	r3, [pc, #360]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800782c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800782e:	f023 0103 	bic.w	r1, r3, #3
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007838:	4a56      	ldr	r2, [pc, #344]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800783a:	430b      	orrs	r3, r1
 800783c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800783e:	e003      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007844:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007854:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800785e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007862:	460b      	mov	r3, r1
 8007864:	4313      	orrs	r3, r2
 8007866:	f000 809f 	beq.w	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800786a:	4b4b      	ldr	r3, [pc, #300]	@ (8007998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a4a      	ldr	r2, [pc, #296]	@ (8007998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007874:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007876:	f7f9 fe99 	bl	80015ac <HAL_GetTick>
 800787a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800787e:	e00b      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007880:	f7f9 fe94 	bl	80015ac <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b64      	cmp	r3, #100	@ 0x64
 800788e:	d903      	bls.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007896:	e005      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007898:	4b3f      	ldr	r3, [pc, #252]	@ (8007998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0ed      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80078a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d179      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80078ac:	4b39      	ldr	r3, [pc, #228]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078b8:	4053      	eors	r3, r2
 80078ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d015      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078c2:	4b34      	ldr	r3, [pc, #208]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078ce:	4b31      	ldr	r3, [pc, #196]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078d2:	4a30      	ldr	r2, [pc, #192]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078da:	4b2e      	ldr	r3, [pc, #184]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078de:	4a2d      	ldr	r2, [pc, #180]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80078e6:	4a2b      	ldr	r2, [pc, #172]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80078ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80078ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078fa:	d118      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fc:	f7f9 fe56 	bl	80015ac <HAL_GetTick>
 8007900:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007904:	e00d      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007906:	f7f9 fe51 	bl	80015ac <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007910:	1ad2      	subs	r2, r2, r3
 8007912:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007916:	429a      	cmp	r2, r3
 8007918:	d903      	bls.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007920:	e005      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007922:	4b1c      	ldr	r3, [pc, #112]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0eb      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800792e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007932:	2b00      	cmp	r3, #0
 8007934:	d129      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800793e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007946:	d10e      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007948:	4b12      	ldr	r3, [pc, #72]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007958:	091a      	lsrs	r2, r3, #4
 800795a:	4b10      	ldr	r3, [pc, #64]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800795c:	4013      	ands	r3, r2
 800795e:	4a0d      	ldr	r2, [pc, #52]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007960:	430b      	orrs	r3, r1
 8007962:	6113      	str	r3, [r2, #16]
 8007964:	e005      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007966:	4b0b      	ldr	r3, [pc, #44]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	4a0a      	ldr	r2, [pc, #40]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800796c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007970:	6113      	str	r3, [r2, #16]
 8007972:	4b08      	ldr	r3, [pc, #32]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007974:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800797e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007982:	4a04      	ldr	r2, [pc, #16]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007984:	430b      	orrs	r3, r1
 8007986:	6713      	str	r3, [r2, #112]	@ 0x70
 8007988:	e00e      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800798a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800798e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007992:	e009      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007994:	58024400 	.word	0x58024400
 8007998:	58024800 	.word	0x58024800
 800799c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80079a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f002 0301 	and.w	r3, r2, #1
 80079b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079b8:	2300      	movs	r3, #0
 80079ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4313      	orrs	r3, r2
 80079c6:	f000 8089 	beq.w	8007adc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079d0:	2b28      	cmp	r3, #40	@ 0x28
 80079d2:	d86b      	bhi.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80079d4:	a201      	add	r2, pc, #4	@ (adr r2, 80079dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	08007ab5 	.word	0x08007ab5
 80079e0:	08007aad 	.word	0x08007aad
 80079e4:	08007aad 	.word	0x08007aad
 80079e8:	08007aad 	.word	0x08007aad
 80079ec:	08007aad 	.word	0x08007aad
 80079f0:	08007aad 	.word	0x08007aad
 80079f4:	08007aad 	.word	0x08007aad
 80079f8:	08007aad 	.word	0x08007aad
 80079fc:	08007a81 	.word	0x08007a81
 8007a00:	08007aad 	.word	0x08007aad
 8007a04:	08007aad 	.word	0x08007aad
 8007a08:	08007aad 	.word	0x08007aad
 8007a0c:	08007aad 	.word	0x08007aad
 8007a10:	08007aad 	.word	0x08007aad
 8007a14:	08007aad 	.word	0x08007aad
 8007a18:	08007aad 	.word	0x08007aad
 8007a1c:	08007a97 	.word	0x08007a97
 8007a20:	08007aad 	.word	0x08007aad
 8007a24:	08007aad 	.word	0x08007aad
 8007a28:	08007aad 	.word	0x08007aad
 8007a2c:	08007aad 	.word	0x08007aad
 8007a30:	08007aad 	.word	0x08007aad
 8007a34:	08007aad 	.word	0x08007aad
 8007a38:	08007aad 	.word	0x08007aad
 8007a3c:	08007ab5 	.word	0x08007ab5
 8007a40:	08007aad 	.word	0x08007aad
 8007a44:	08007aad 	.word	0x08007aad
 8007a48:	08007aad 	.word	0x08007aad
 8007a4c:	08007aad 	.word	0x08007aad
 8007a50:	08007aad 	.word	0x08007aad
 8007a54:	08007aad 	.word	0x08007aad
 8007a58:	08007aad 	.word	0x08007aad
 8007a5c:	08007ab5 	.word	0x08007ab5
 8007a60:	08007aad 	.word	0x08007aad
 8007a64:	08007aad 	.word	0x08007aad
 8007a68:	08007aad 	.word	0x08007aad
 8007a6c:	08007aad 	.word	0x08007aad
 8007a70:	08007aad 	.word	0x08007aad
 8007a74:	08007aad 	.word	0x08007aad
 8007a78:	08007aad 	.word	0x08007aad
 8007a7c:	08007ab5 	.word	0x08007ab5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a84:	3308      	adds	r3, #8
 8007a86:	2101      	movs	r1, #1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fe95 	bl	80097b8 <RCCEx_PLL2_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a94:	e00f      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9a:	3328      	adds	r3, #40	@ 0x28
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f001 ff3c 	bl	800991c <RCCEx_PLL3_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007aaa:	e004      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ab2:	e000      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007abe:	4bbf      	ldr	r3, [pc, #764]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007acc:	4abb      	ldr	r2, [pc, #748]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ace:	430b      	orrs	r3, r1
 8007ad0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ad2:	e003      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f002 0302 	and.w	r3, r2, #2
 8007ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007aec:	2300      	movs	r3, #0
 8007aee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007af2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007af6:	460b      	mov	r3, r1
 8007af8:	4313      	orrs	r3, r2
 8007afa:	d041      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b02:	2b05      	cmp	r3, #5
 8007b04:	d824      	bhi.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007b06:	a201      	add	r2, pc, #4	@ (adr r2, 8007b0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0c:	08007b59 	.word	0x08007b59
 8007b10:	08007b25 	.word	0x08007b25
 8007b14:	08007b3b 	.word	0x08007b3b
 8007b18:	08007b59 	.word	0x08007b59
 8007b1c:	08007b59 	.word	0x08007b59
 8007b20:	08007b59 	.word	0x08007b59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b28:	3308      	adds	r3, #8
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 fe43 	bl	80097b8 <RCCEx_PLL2_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b38:	e00f      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	3328      	adds	r3, #40	@ 0x28
 8007b40:	2101      	movs	r1, #1
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 feea 	bl	800991c <RCCEx_PLL3_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b4e:	e004      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b56:	e000      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b62:	4b96      	ldr	r3, [pc, #600]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b66:	f023 0107 	bic.w	r1, r3, #7
 8007b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b70:	4a92      	ldr	r2, [pc, #584]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b72:	430b      	orrs	r3, r1
 8007b74:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b76:	e003      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f002 0304 	and.w	r3, r2, #4
 8007b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b90:	2300      	movs	r3, #0
 8007b92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	d044      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ba8:	2b05      	cmp	r3, #5
 8007baa:	d825      	bhi.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007bac:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007c01 	.word	0x08007c01
 8007bb8:	08007bcd 	.word	0x08007bcd
 8007bbc:	08007be3 	.word	0x08007be3
 8007bc0:	08007c01 	.word	0x08007c01
 8007bc4:	08007c01 	.word	0x08007c01
 8007bc8:	08007c01 	.word	0x08007c01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f001 fdef 	bl	80097b8 <RCCEx_PLL2_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007be0:	e00f      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be6:	3328      	adds	r3, #40	@ 0x28
 8007be8:	2101      	movs	r1, #1
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 fe96 	bl	800991c <RCCEx_PLL3_Config>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007bf6:	e004      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bfe:	e000      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c0a:	4b6c      	ldr	r3, [pc, #432]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c0e:	f023 0107 	bic.w	r1, r3, #7
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c1a:	4a68      	ldr	r2, [pc, #416]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c20:	e003      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f002 0320 	and.w	r3, r2, #32
 8007c36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c44:	460b      	mov	r3, r1
 8007c46:	4313      	orrs	r3, r2
 8007c48:	d055      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c56:	d033      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c5c:	d82c      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c62:	d02f      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c68:	d826      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c6e:	d02b      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007c70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c74:	d820      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c7a:	d012      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c80:	d81a      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d022      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007c86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c8a:	d115      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c90:	3308      	adds	r3, #8
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 fd8f 	bl	80097b8 <RCCEx_PLL2_Config>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ca0:	e015      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca6:	3328      	adds	r3, #40	@ 0x28
 8007ca8:	2102      	movs	r1, #2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 fe36 	bl	800991c <RCCEx_PLL3_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007cb6:	e00a      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cbe:	e006      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cc0:	bf00      	nop
 8007cc2:	e004      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cc4:	bf00      	nop
 8007cc6:	e002      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cc8:	bf00      	nop
 8007cca:	e000      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10b      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cd6:	4b39      	ldr	r3, [pc, #228]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ce6:	4a35      	ldr	r2, [pc, #212]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cec:	e003      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4313      	orrs	r3, r2
 8007d14:	d058      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d1e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d22:	d033      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007d24:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d28:	d82c      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d2e:	d02f      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d34:	d826      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d3a:	d02b      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007d3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d40:	d820      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d46:	d012      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d4c:	d81a      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d022      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d56:	d115      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 fd29 	bl	80097b8 <RCCEx_PLL2_Config>
 8007d66:	4603      	mov	r3, r0
 8007d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d6c:	e015      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d72:	3328      	adds	r3, #40	@ 0x28
 8007d74:	2102      	movs	r1, #2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f001 fdd0 	bl	800991c <RCCEx_PLL3_Config>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d82:	e00a      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d8a:	e006      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d8c:	bf00      	nop
 8007d8e:	e004      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d90:	bf00      	nop
 8007d92:	e002      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d94:	bf00      	nop
 8007d96:	e000      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10e      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007da2:	4b06      	ldr	r3, [pc, #24]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007db2:	4a02      	ldr	r2, [pc, #8]	@ (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007db4:	430b      	orrs	r3, r1
 8007db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007db8:	e006      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007dba:	bf00      	nop
 8007dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007dd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007de2:	460b      	mov	r3, r1
 8007de4:	4313      	orrs	r3, r2
 8007de6:	d055      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007df0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007df4:	d033      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007df6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007dfa:	d82c      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e00:	d02f      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e06:	d826      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e08:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e0c:	d02b      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007e0e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e12:	d820      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e18:	d012      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007e1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e1e:	d81a      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d022      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e28:	d115      	bne.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2e:	3308      	adds	r3, #8
 8007e30:	2100      	movs	r1, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 fcc0 	bl	80097b8 <RCCEx_PLL2_Config>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e3e:	e015      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e44:	3328      	adds	r3, #40	@ 0x28
 8007e46:	2102      	movs	r1, #2
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f001 fd67 	bl	800991c <RCCEx_PLL3_Config>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e54:	e00a      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e5c:	e006      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e5e:	bf00      	nop
 8007e60:	e004      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e62:	bf00      	nop
 8007e64:	e002      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e66:	bf00      	nop
 8007e68:	e000      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10b      	bne.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e74:	4ba1      	ldr	r3, [pc, #644]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e78:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e84:	4a9d      	ldr	r2, [pc, #628]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e86:	430b      	orrs	r3, r1
 8007e88:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e8a:	e003      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	f002 0308 	and.w	r3, r2, #8
 8007ea0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007eaa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	d01e      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ec0:	d10c      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec6:	3328      	adds	r3, #40	@ 0x28
 8007ec8:	2102      	movs	r1, #2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 fd26 	bl	800991c <RCCEx_PLL3_Config>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007edc:	4b87      	ldr	r3, [pc, #540]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007eec:	4a83      	ldr	r2, [pc, #524]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	f002 0310 	and.w	r3, r2, #16
 8007efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f02:	2300      	movs	r3, #0
 8007f04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	d01e      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f1e:	d10c      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f24:	3328      	adds	r3, #40	@ 0x28
 8007f26:	2102      	movs	r1, #2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f001 fcf7 	bl	800991c <RCCEx_PLL3_Config>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f3a:	4b70      	ldr	r3, [pc, #448]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f4a:	4a6c      	ldr	r2, [pc, #432]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007f5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f60:	2300      	movs	r3, #0
 8007f62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	d03e      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f7c:	d022      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f82:	d81b      	bhi.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f8c:	d00b      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007f8e:	e015      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f94:	3308      	adds	r3, #8
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f001 fc0d 	bl	80097b8 <RCCEx_PLL2_Config>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fa4:	e00f      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007faa:	3328      	adds	r3, #40	@ 0x28
 8007fac:	2102      	movs	r1, #2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 fcb4 	bl	800991c <RCCEx_PLL3_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fba:	e004      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fc2:	e000      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10b      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fce:	4b4b      	ldr	r3, [pc, #300]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fd2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fde:	4a47      	ldr	r2, [pc, #284]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fe4:	e003      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007ffa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008000:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008004:	460b      	mov	r3, r1
 8008006:	4313      	orrs	r3, r2
 8008008:	d03b      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800800a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008012:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008016:	d01f      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008018:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800801c:	d818      	bhi.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800801e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008022:	d003      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008028:	d007      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800802a:	e011      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800802c:	4b33      	ldr	r3, [pc, #204]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008030:	4a32      	ldr	r2, [pc, #200]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008038:	e00f      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	3328      	adds	r3, #40	@ 0x28
 8008040:	2101      	movs	r1, #1
 8008042:	4618      	mov	r0, r3
 8008044:	f001 fc6a 	bl	800991c <RCCEx_PLL3_Config>
 8008048:	4603      	mov	r3, r0
 800804a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800804e:	e004      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008056:	e000      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800805a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10b      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008062:	4b26      	ldr	r3, [pc, #152]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008066:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800806a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008072:	4a22      	ldr	r2, [pc, #136]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008074:	430b      	orrs	r3, r1
 8008076:	6553      	str	r3, [r2, #84]	@ 0x54
 8008078:	e003      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800807e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800808e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008090:	2300      	movs	r3, #0
 8008092:	677b      	str	r3, [r7, #116]	@ 0x74
 8008094:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008098:	460b      	mov	r3, r1
 800809a:	4313      	orrs	r3, r2
 800809c:	d034      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80080a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080ac:	d007      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80080ae:	e011      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b0:	4b12      	ldr	r3, [pc, #72]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b4:	4a11      	ldr	r2, [pc, #68]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080bc:	e00e      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c2:	3308      	adds	r3, #8
 80080c4:	2102      	movs	r1, #2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 fb76 	bl	80097b8 <RCCEx_PLL2_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080d2:	e003      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10d      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080e4:	4b05      	ldr	r3, [pc, #20]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f2:	4a02      	ldr	r2, [pc, #8]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080f4:	430b      	orrs	r3, r1
 80080f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080f8:	e006      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80080fa:	bf00      	nop
 80080fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008114:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008116:	2300      	movs	r3, #0
 8008118:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800811a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	d00c      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008128:	3328      	adds	r3, #40	@ 0x28
 800812a:	2102      	movs	r1, #2
 800812c:	4618      	mov	r0, r3
 800812e:	f001 fbf5 	bl	800991c <RCCEx_PLL3_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800814a:	663b      	str	r3, [r7, #96]	@ 0x60
 800814c:	2300      	movs	r3, #0
 800814e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008150:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008154:	460b      	mov	r3, r1
 8008156:	4313      	orrs	r3, r2
 8008158:	d038      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008166:	d018      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800816c:	d811      	bhi.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800816e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008172:	d014      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008178:	d80b      	bhi.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800817a:	2b00      	cmp	r3, #0
 800817c:	d011      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800817e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008182:	d106      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008184:	4bc3      	ldr	r3, [pc, #780]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008188:	4ac2      	ldr	r2, [pc, #776]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800818a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800818e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008190:	e008      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008198:	e004      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800819a:	bf00      	nop
 800819c:	e002      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800819e:	bf00      	nop
 80081a0:	e000      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80081a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081ac:	4bb9      	ldr	r3, [pc, #740]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081bc:	4ab5      	ldr	r2, [pc, #724]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081be:	430b      	orrs	r3, r1
 80081c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80081c2:	e003      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80081cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80081d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081da:	2300      	movs	r3, #0
 80081dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80081e2:	460b      	mov	r3, r1
 80081e4:	4313      	orrs	r3, r2
 80081e6:	d009      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80081e8:	4baa      	ldr	r3, [pc, #680]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80081f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f6:	4aa7      	ldr	r2, [pc, #668]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081f8:	430b      	orrs	r3, r1
 80081fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80081fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008208:	653b      	str	r3, [r7, #80]	@ 0x50
 800820a:	2300      	movs	r3, #0
 800820c:	657b      	str	r3, [r7, #84]	@ 0x54
 800820e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008212:	460b      	mov	r3, r1
 8008214:	4313      	orrs	r3, r2
 8008216:	d00a      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008218:	4b9e      	ldr	r3, [pc, #632]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008224:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008228:	4a9a      	ldr	r2, [pc, #616]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800822a:	430b      	orrs	r3, r1
 800822c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800822e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800823a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800823c:	2300      	movs	r3, #0
 800823e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008240:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008244:	460b      	mov	r3, r1
 8008246:	4313      	orrs	r3, r2
 8008248:	d009      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800824a:	4b92      	ldr	r3, [pc, #584]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800824c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800824e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008258:	4a8e      	ldr	r2, [pc, #568]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800825a:	430b      	orrs	r3, r1
 800825c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800826a:	643b      	str	r3, [r7, #64]	@ 0x40
 800826c:	2300      	movs	r3, #0
 800826e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008270:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008274:	460b      	mov	r3, r1
 8008276:	4313      	orrs	r3, r2
 8008278:	d00e      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800827a:	4b86      	ldr	r3, [pc, #536]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	4a85      	ldr	r2, [pc, #532]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008280:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008284:	6113      	str	r3, [r2, #16]
 8008286:	4b83      	ldr	r3, [pc, #524]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008288:	6919      	ldr	r1, [r3, #16]
 800828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008292:	4a80      	ldr	r2, [pc, #512]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008294:	430b      	orrs	r3, r1
 8008296:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80082a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082a6:	2300      	movs	r3, #0
 80082a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80082ae:	460b      	mov	r3, r1
 80082b0:	4313      	orrs	r3, r2
 80082b2:	d009      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082b4:	4b77      	ldr	r3, [pc, #476]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80082bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c2:	4a74      	ldr	r2, [pc, #464]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082c4:	430b      	orrs	r3, r1
 80082c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80082d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80082d6:	2300      	movs	r3, #0
 80082d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80082de:	460b      	mov	r3, r1
 80082e0:	4313      	orrs	r3, r2
 80082e2:	d00a      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082e4:	4b6b      	ldr	r3, [pc, #428]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80082ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082f4:	4a67      	ldr	r2, [pc, #412]	@ (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082f6:	430b      	orrs	r3, r1
 80082f8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	2100      	movs	r1, #0
 8008304:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800830c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008310:	460b      	mov	r3, r1
 8008312:	4313      	orrs	r3, r2
 8008314:	d011      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831a:	3308      	adds	r3, #8
 800831c:	2100      	movs	r1, #0
 800831e:	4618      	mov	r0, r3
 8008320:	f001 fa4a 	bl	80097b8 <RCCEx_PLL2_Config>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800832a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	2100      	movs	r1, #0
 8008344:	6239      	str	r1, [r7, #32]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	627b      	str	r3, [r7, #36]	@ 0x24
 800834c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008350:	460b      	mov	r3, r1
 8008352:	4313      	orrs	r3, r2
 8008354:	d011      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835a:	3308      	adds	r3, #8
 800835c:	2101      	movs	r1, #1
 800835e:	4618      	mov	r0, r3
 8008360:	f001 fa2a 	bl	80097b8 <RCCEx_PLL2_Config>
 8008364:	4603      	mov	r3, r0
 8008366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800836a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800837a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	2100      	movs	r1, #0
 8008384:	61b9      	str	r1, [r7, #24]
 8008386:	f003 0304 	and.w	r3, r3, #4
 800838a:	61fb      	str	r3, [r7, #28]
 800838c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008390:	460b      	mov	r3, r1
 8008392:	4313      	orrs	r3, r2
 8008394:	d011      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839a:	3308      	adds	r3, #8
 800839c:	2102      	movs	r1, #2
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 fa0a 	bl	80097b8 <RCCEx_PLL2_Config>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80083aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80083ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	2100      	movs	r1, #0
 80083c4:	6139      	str	r1, [r7, #16]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	617b      	str	r3, [r7, #20]
 80083cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80083d0:	460b      	mov	r3, r1
 80083d2:	4313      	orrs	r3, r2
 80083d4:	d011      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083da:	3328      	adds	r3, #40	@ 0x28
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 fa9c 	bl	800991c <RCCEx_PLL3_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80083ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	2100      	movs	r1, #0
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008410:	460b      	mov	r3, r1
 8008412:	4313      	orrs	r3, r2
 8008414:	d011      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841a:	3328      	adds	r3, #40	@ 0x28
 800841c:	2101      	movs	r1, #1
 800841e:	4618      	mov	r0, r3
 8008420:	f001 fa7c 	bl	800991c <RCCEx_PLL3_Config>
 8008424:	4603      	mov	r3, r0
 8008426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800842a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800843a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	2100      	movs	r1, #0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	607b      	str	r3, [r7, #4]
 800844c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008450:	460b      	mov	r3, r1
 8008452:	4313      	orrs	r3, r2
 8008454:	d011      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845a:	3328      	adds	r3, #40	@ 0x28
 800845c:	2102      	movs	r1, #2
 800845e:	4618      	mov	r0, r3
 8008460:	f001 fa5c 	bl	800991c <RCCEx_PLL3_Config>
 8008464:	4603      	mov	r3, r0
 8008466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800846a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800847a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	e000      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
}
 8008488:	4618      	mov	r0, r3
 800848a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800848e:	46bd      	mov	sp, r7
 8008490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008494:	58024400 	.word	0x58024400

08008498 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b090      	sub	sp, #64	@ 0x40
 800849c:	af00      	add	r7, sp, #0
 800849e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80084a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80084aa:	430b      	orrs	r3, r1
 80084ac:	f040 8094 	bne.w	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80084b0:	4b9e      	ldr	r3, [pc, #632]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084bc:	2b04      	cmp	r3, #4
 80084be:	f200 8087 	bhi.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80084c2:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084dd 	.word	0x080084dd
 80084cc:	08008505 	.word	0x08008505
 80084d0:	0800852d 	.word	0x0800852d
 80084d4:	080085c9 	.word	0x080085c9
 80084d8:	08008555 	.word	0x08008555
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084dc:	4b93      	ldr	r3, [pc, #588]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084e8:	d108      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 f810 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f8:	f000 bd45 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008500:	f000 bd41 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008504:	4b89      	ldr	r3, [pc, #548]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800850c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008510:	d108      	bne.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008512:	f107 0318 	add.w	r3, r7, #24
 8008516:	4618      	mov	r0, r3
 8008518:	f000 fd54 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008520:	f000 bd31 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008528:	f000 bd2d 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800852c:	4b7f      	ldr	r3, [pc, #508]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008538:	d108      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800853a:	f107 030c 	add.w	r3, r7, #12
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fe94 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008548:	f000 bd1d 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008550:	f000 bd19 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008554:	4b75      	ldr	r3, [pc, #468]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008558:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800855c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800855e:	4b73      	ldr	r3, [pc, #460]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b04      	cmp	r3, #4
 8008568:	d10c      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800856a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800856c:	2b00      	cmp	r3, #0
 800856e:	d109      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008570:	4b6e      	ldr	r3, [pc, #440]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	08db      	lsrs	r3, r3, #3
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	4a6d      	ldr	r2, [pc, #436]	@ (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008582:	e01f      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008584:	4b69      	ldr	r3, [pc, #420]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800858c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008590:	d106      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008598:	d102      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800859a:	4b66      	ldr	r3, [pc, #408]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800859c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800859e:	e011      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085a0:	4b62      	ldr	r3, [pc, #392]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085ac:	d106      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80085ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085b4:	d102      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085b6:	4b60      	ldr	r3, [pc, #384]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80085b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ba:	e003      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085c0:	f000 bce1 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085c4:	f000 bcdf 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085c8:	4b5c      	ldr	r3, [pc, #368]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80085ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085cc:	f000 bcdb 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d4:	f000 bcd7 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80085d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085dc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80085e0:	430b      	orrs	r3, r1
 80085e2:	f040 80ad 	bne.w	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80085e6:	4b51      	ldr	r3, [pc, #324]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80085ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085f6:	d056      	beq.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80085f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085fe:	f200 8090 	bhi.w	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	2bc0      	cmp	r3, #192	@ 0xc0
 8008606:	f000 8088 	beq.w	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	2bc0      	cmp	r3, #192	@ 0xc0
 800860e:	f200 8088 	bhi.w	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	2b80      	cmp	r3, #128	@ 0x80
 8008616:	d032      	beq.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861a:	2b80      	cmp	r3, #128	@ 0x80
 800861c:	f200 8081 	bhi.w	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008628:	2b40      	cmp	r3, #64	@ 0x40
 800862a:	d014      	beq.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800862c:	e079      	b.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800862e:	4b3f      	ldr	r3, [pc, #252]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800863a:	d108      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800863c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008640:	4618      	mov	r0, r3
 8008642:	f000 ff67 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864a:	f000 bc9c 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008652:	f000 bc98 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008656:	4b35      	ldr	r3, [pc, #212]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800865e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008662:	d108      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008664:	f107 0318 	add.w	r3, r7, #24
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fcab 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008672:	f000 bc88 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800867a:	f000 bc84 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800867e:	4b2b      	ldr	r3, [pc, #172]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800868a:	d108      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800868c:	f107 030c 	add.w	r3, r7, #12
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fdeb 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800869a:	f000 bc74 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086a2:	f000 bc70 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086a6:	4b21      	ldr	r3, [pc, #132]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086b0:	4b1e      	ldr	r3, [pc, #120]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d10c      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80086bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d109      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086c2:	4b1a      	ldr	r3, [pc, #104]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	08db      	lsrs	r3, r3, #3
 80086c8:	f003 0303 	and.w	r3, r3, #3
 80086cc:	4a18      	ldr	r2, [pc, #96]	@ (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80086ce:	fa22 f303 	lsr.w	r3, r2, r3
 80086d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086d4:	e01f      	b.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086d6:	4b15      	ldr	r3, [pc, #84]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086e2:	d106      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80086e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086ea:	d102      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086ec:	4b11      	ldr	r3, [pc, #68]	@ (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80086ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086f0:	e011      	b.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086f2:	4b0e      	ldr	r3, [pc, #56]	@ (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086fe:	d106      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008706:	d102      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008708:	4b0b      	ldr	r3, [pc, #44]	@ (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800870a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800870c:	e003      	b.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008712:	f000 bc38 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008716:	f000 bc36 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800871a:	4b08      	ldr	r3, [pc, #32]	@ (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800871c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800871e:	f000 bc32 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008726:	f000 bc2e 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800872a:	bf00      	nop
 800872c:	58024400 	.word	0x58024400
 8008730:	03d09000 	.word	0x03d09000
 8008734:	003d0900 	.word	0x003d0900
 8008738:	00f42400 	.word	0x00f42400
 800873c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008744:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008748:	430b      	orrs	r3, r1
 800874a:	f040 809c 	bne.w	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800874e:	4b9e      	ldr	r3, [pc, #632]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008752:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008756:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800875e:	d054      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008766:	f200 808b 	bhi.w	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008770:	f000 8083 	beq.w	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008776:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800877a:	f200 8081 	bhi.w	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008784:	d02f      	beq.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800878c:	d878      	bhi.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	2b00      	cmp	r3, #0
 8008792:	d004      	beq.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008796:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800879a:	d012      	beq.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800879c:	e070      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800879e:	4b8a      	ldr	r3, [pc, #552]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087aa:	d107      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 feaf 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ba:	e3e4      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c0:	e3e1      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087c2:	4b81      	ldr	r3, [pc, #516]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087ce:	d107      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087d0:	f107 0318 	add.w	r3, r7, #24
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fbf5 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087de:	e3d2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e4:	e3cf      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087e6:	4b78      	ldr	r3, [pc, #480]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f2:	d107      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087f4:	f107 030c 	add.w	r3, r7, #12
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fd37 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008802:	e3c0      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008808:	e3bd      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800880a:	4b6f      	ldr	r3, [pc, #444]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800880c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800880e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008812:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008814:	4b6c      	ldr	r3, [pc, #432]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b04      	cmp	r3, #4
 800881e:	d10c      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008822:	2b00      	cmp	r3, #0
 8008824:	d109      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008826:	4b68      	ldr	r3, [pc, #416]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	08db      	lsrs	r3, r3, #3
 800882c:	f003 0303 	and.w	r3, r3, #3
 8008830:	4a66      	ldr	r2, [pc, #408]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008832:	fa22 f303 	lsr.w	r3, r2, r3
 8008836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008838:	e01e      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800883a:	4b63      	ldr	r3, [pc, #396]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008846:	d106      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800884e:	d102      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008850:	4b5f      	ldr	r3, [pc, #380]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008854:	e010      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008856:	4b5c      	ldr	r3, [pc, #368]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800885e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008862:	d106      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800886a:	d102      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800886c:	4b59      	ldr	r3, [pc, #356]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800886e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008870:	e002      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008876:	e386      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008878:	e385      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800887a:	4b57      	ldr	r3, [pc, #348]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800887c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800887e:	e382      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008884:	e37f      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800888a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800888e:	430b      	orrs	r3, r1
 8008890:	f040 80a7 	bne.w	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008894:	4b4c      	ldr	r3, [pc, #304]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008898:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800889c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800889e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088a4:	d055      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088ac:	f200 8096 	bhi.w	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088b6:	f000 8084 	beq.w	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80088ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088c0:	f200 808c 	bhi.w	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088ca:	d030      	beq.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088d2:	f200 8083 	bhi.w	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d004      	beq.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088e2:	d012      	beq.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80088e4:	e07a      	b.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088e6:	4b38      	ldr	r3, [pc, #224]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088f2:	d107      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fe0b 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008902:	e340      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008908:	e33d      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800890a:	4b2f      	ldr	r3, [pc, #188]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008916:	d107      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008918:	f107 0318 	add.w	r3, r7, #24
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fb51 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008926:	e32e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800892c:	e32b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800892e:	4b26      	ldr	r3, [pc, #152]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800893a:	d107      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800893c:	f107 030c 	add.w	r3, r7, #12
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fc93 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800894a:	e31c      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008950:	e319      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008952:	4b1d      	ldr	r3, [pc, #116]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008956:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800895a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800895c:	4b1a      	ldr	r3, [pc, #104]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b04      	cmp	r3, #4
 8008966:	d10c      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800896a:	2b00      	cmp	r3, #0
 800896c:	d109      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800896e:	4b16      	ldr	r3, [pc, #88]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	08db      	lsrs	r3, r3, #3
 8008974:	f003 0303 	and.w	r3, r3, #3
 8008978:	4a14      	ldr	r2, [pc, #80]	@ (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800897a:	fa22 f303 	lsr.w	r3, r2, r3
 800897e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008980:	e01e      	b.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008982:	4b11      	ldr	r3, [pc, #68]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800898a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800898e:	d106      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008992:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008996:	d102      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008998:	4b0d      	ldr	r3, [pc, #52]	@ (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800899a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800899c:	e010      	b.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800899e:	4b0a      	ldr	r3, [pc, #40]	@ (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089aa:	d106      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80089ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089b2:	d102      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089b4:	4b07      	ldr	r3, [pc, #28]	@ (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80089b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089b8:	e002      	b.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089be:	e2e2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089c0:	e2e1      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089c2:	4b05      	ldr	r3, [pc, #20]	@ (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80089c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c6:	e2de      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089c8:	58024400 	.word	0x58024400
 80089cc:	03d09000 	.word	0x03d09000
 80089d0:	003d0900 	.word	0x003d0900
 80089d4:	00f42400 	.word	0x00f42400
 80089d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e0:	e2d1      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80089e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80089ea:	430b      	orrs	r3, r1
 80089ec:	f040 809c 	bne.w	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80089f0:	4b93      	ldr	r3, [pc, #588]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80089f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a00:	d054      	beq.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a08:	f200 808b 	bhi.w	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a12:	f000 8083 	beq.w	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a1c:	f200 8081 	bhi.w	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a26:	d02f      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a2e:	d878      	bhi.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d004      	beq.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a3c:	d012      	beq.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008a3e:	e070      	b.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a40:	4b7f      	ldr	r3, [pc, #508]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a4c:	d107      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fd5e 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a5c:	e293      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a62:	e290      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a64:	4b76      	ldr	r3, [pc, #472]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a70:	d107      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a72:	f107 0318 	add.w	r3, r7, #24
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 faa4 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a80:	e281      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a86:	e27e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a88:	4b6d      	ldr	r3, [pc, #436]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a94:	d107      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a96:	f107 030c 	add.w	r3, r7, #12
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fbe6 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa4:	e26f      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aaa:	e26c      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008aac:	4b64      	ldr	r3, [pc, #400]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ab0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ab4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ab6:	4b62      	ldr	r3, [pc, #392]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d10c      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d109      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	08db      	lsrs	r3, r3, #3
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	4a5c      	ldr	r2, [pc, #368]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ada:	e01e      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008adc:	4b58      	ldr	r3, [pc, #352]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ae8:	d106      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008af0:	d102      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008af2:	4b55      	ldr	r3, [pc, #340]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008af6:	e010      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008af8:	4b51      	ldr	r3, [pc, #324]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b04:	d106      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b0c:	d102      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b12:	e002      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b18:	e235      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b1a:	e234      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b20:	e231      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b26:	e22e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008b30:	430b      	orrs	r3, r1
 8008b32:	f040 808f 	bne.w	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b36:	4b42      	ldr	r3, [pc, #264]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b3a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b46:	d06b      	beq.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b4e:	d874      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b56:	d056      	beq.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b5e:	d86c      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b66:	d03b      	beq.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b6e:	d864      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b76:	d021      	beq.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b7e:	d85c      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d004      	beq.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b8c:	d004      	beq.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008b8e:	e054      	b.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008b90:	f7fe fa62 	bl	8007058 <HAL_RCC_GetPCLK1Freq>
 8008b94:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b96:	e1f6      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b98:	4b29      	ldr	r3, [pc, #164]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ba4:	d107      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba6:	f107 0318 	add.w	r3, r7, #24
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fa0a 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb4:	e1e7      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bba:	e1e4      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bbc:	4b20      	ldr	r3, [pc, #128]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc8:	d107      	bne.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bca:	f107 030c 	add.w	r3, r7, #12
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fb4c 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd8:	e1d5      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bde:	e1d2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008be0:	4b17      	ldr	r3, [pc, #92]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d109      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bec:	4b14      	ldr	r3, [pc, #80]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	08db      	lsrs	r3, r3, #3
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	4a13      	ldr	r2, [pc, #76]	@ (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bfe:	e1c2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c04:	e1bf      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c06:	4b0e      	ldr	r3, [pc, #56]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c12:	d102      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008c14:	4b0c      	ldr	r3, [pc, #48]	@ (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c18:	e1b5      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c1e:	e1b2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c20:	4b07      	ldr	r3, [pc, #28]	@ (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c2c:	d102      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008c2e:	4b07      	ldr	r3, [pc, #28]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c32:	e1a8      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c38:	e1a5      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c3e:	e1a2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c40:	58024400 	.word	0x58024400
 8008c44:	03d09000 	.word	0x03d09000
 8008c48:	003d0900 	.word	0x003d0900
 8008c4c:	00f42400 	.word	0x00f42400
 8008c50:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c58:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	d173      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008c60:	4b9c      	ldr	r3, [pc, #624]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c68:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c70:	d02f      	beq.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c78:	d863      	bhi.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d004      	beq.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c86:	d012      	beq.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008c88:	e05b      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c8a:	4b92      	ldr	r3, [pc, #584]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c96:	d107      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c98:	f107 0318 	add.w	r3, r7, #24
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 f991 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ca6:	e16e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cac:	e16b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cae:	4b89      	ldr	r3, [pc, #548]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cba:	d107      	bne.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cbc:	f107 030c 	add.w	r3, r7, #12
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fad3 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cca:	e15c      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd0:	e159      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cd2:	4b80      	ldr	r3, [pc, #512]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008cda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cdc:	4b7d      	ldr	r3, [pc, #500]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b04      	cmp	r3, #4
 8008ce6:	d10c      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cee:	4b79      	ldr	r3, [pc, #484]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	08db      	lsrs	r3, r3, #3
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	4a77      	ldr	r2, [pc, #476]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d00:	e01e      	b.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d02:	4b74      	ldr	r3, [pc, #464]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d0e:	d106      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d16:	d102      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d18:	4b70      	ldr	r3, [pc, #448]	@ (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d1c:	e010      	b.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d2a:	d106      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d32:	d102      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d34:	4b6a      	ldr	r3, [pc, #424]	@ (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d38:	e002      	b.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d3e:	e122      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d40:	e121      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d46:	e11e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d4c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008d50:	430b      	orrs	r3, r1
 8008d52:	d133      	bne.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d54:	4b5f      	ldr	r3, [pc, #380]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d004      	beq.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d6a:	d012      	beq.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008d6c:	e023      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d6e:	4b59      	ldr	r3, [pc, #356]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d7a:	d107      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fbc7 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d8a:	e0fc      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d90:	e0f9      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d92:	4b50      	ldr	r3, [pc, #320]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d9e:	d107      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008da0:	f107 0318 	add.w	r3, r7, #24
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 f90d 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dae:	e0ea      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db4:	e0e7      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dba:	e0e4      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	f040 808d 	bne.w	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008dca:	4b42      	ldr	r3, [pc, #264]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008dd2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dda:	d06b      	beq.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008de2:	d874      	bhi.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dea:	d056      	beq.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008df2:	d86c      	bhi.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008dfa:	d03b      	beq.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e02:	d864      	bhi.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e0a:	d021      	beq.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e12:	d85c      	bhi.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d004      	beq.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e20:	d004      	beq.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008e22:	e054      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e24:	f000 f8b8 	bl	8008f98 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e28:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e2a:	e0ac      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e2c:	4b29      	ldr	r3, [pc, #164]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e38:	d107      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e3a:	f107 0318 	add.w	r3, r7, #24
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f8c0 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e48:	e09d      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e4e:	e09a      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e50:	4b20      	ldr	r3, [pc, #128]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e5c:	d107      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e5e:	f107 030c 	add.w	r3, r7, #12
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 fa02 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e6c:	e08b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e72:	e088      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e74:	4b17      	ldr	r3, [pc, #92]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d109      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e80:	4b14      	ldr	r3, [pc, #80]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	08db      	lsrs	r3, r3, #3
 8008e86:	f003 0303 	and.w	r3, r3, #3
 8008e8a:	4a13      	ldr	r2, [pc, #76]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e92:	e078      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e98:	e075      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ea6:	d102      	bne.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eac:	e06b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb2:	e068      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008eb4:	4b07      	ldr	r3, [pc, #28]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ec0:	d102      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008ec2:	4b07      	ldr	r3, [pc, #28]	@ (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec6:	e05e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ecc:	e05b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed2:	e058      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ed4:	58024400 	.word	0x58024400
 8008ed8:	03d09000 	.word	0x03d09000
 8008edc:	003d0900 	.word	0x003d0900
 8008ee0:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ee8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008eec:	430b      	orrs	r3, r1
 8008eee:	d148      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ef0:	4b27      	ldr	r3, [pc, #156]	@ (8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ef8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f00:	d02a      	beq.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f08:	d838      	bhi.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d004      	beq.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f16:	d00d      	beq.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008f18:	e030      	b.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f26:	d102      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008f28:	4b1a      	ldr	r3, [pc, #104]	@ (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f2c:	e02b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f32:	e028      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f34:	4b16      	ldr	r3, [pc, #88]	@ (8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f40:	d107      	bne.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 fae4 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f50:	e019      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f56:	e016      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f58:	4b0d      	ldr	r3, [pc, #52]	@ (8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f64:	d107      	bne.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f66:	f107 0318 	add.w	r3, r7, #24
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 f82a 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f74:	e007      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f7a:	e004      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f80:	e001      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3740      	adds	r7, #64	@ 0x40
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	58024400 	.word	0x58024400
 8008f94:	00f42400 	.word	0x00f42400

08008f98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f9c:	f7fe f82c 	bl	8006ff8 <HAL_RCC_GetHCLKFreq>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	4b06      	ldr	r3, [pc, #24]	@ (8008fbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	091b      	lsrs	r3, r3, #4
 8008fa8:	f003 0307 	and.w	r3, r3, #7
 8008fac:	4904      	ldr	r1, [pc, #16]	@ (8008fc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008fae:	5ccb      	ldrb	r3, [r1, r3]
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	0800b1cc 	.word	0x0800b1cc

08008fc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b089      	sub	sp, #36	@ 0x24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fcc:	4ba1      	ldr	r3, [pc, #644]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd0:	f003 0303 	and.w	r3, r3, #3
 8008fd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008fd6:	4b9f      	ldr	r3, [pc, #636]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fda:	0b1b      	lsrs	r3, r3, #12
 8008fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fe0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008fe2:	4b9c      	ldr	r3, [pc, #624]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe6:	091b      	lsrs	r3, r3, #4
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008fee:	4b99      	ldr	r3, [pc, #612]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff2:	08db      	lsrs	r3, r3, #3
 8008ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	fb02 f303 	mul.w	r3, r2, r3
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009006:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8111 	beq.w	8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b02      	cmp	r3, #2
 8009016:	f000 8083 	beq.w	8009120 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	2b02      	cmp	r3, #2
 800901e:	f200 80a1 	bhi.w	8009164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d056      	beq.n	80090dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800902e:	e099      	b.n	8009164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009030:	4b88      	ldr	r3, [pc, #544]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b00      	cmp	r3, #0
 800903a:	d02d      	beq.n	8009098 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800903c:	4b85      	ldr	r3, [pc, #532]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	08db      	lsrs	r3, r3, #3
 8009042:	f003 0303 	and.w	r3, r3, #3
 8009046:	4a84      	ldr	r2, [pc, #528]	@ (8009258 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009048:	fa22 f303 	lsr.w	r3, r2, r3
 800904c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009066:	4b7b      	ldr	r3, [pc, #492]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800906a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009076:	ed97 6a03 	vldr	s12, [r7, #12]
 800907a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800907e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800908a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009092:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009096:	e087      	b.n	80091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009260 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80090a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090aa:	4b6a      	ldr	r3, [pc, #424]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80090be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090da:	e065      	b.n	80091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80090ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ee:	4b59      	ldr	r3, [pc, #356]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009102:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800911e:	e043      	b.n	80091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800912e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009132:	4b48      	ldr	r3, [pc, #288]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009142:	ed97 6a03 	vldr	s12, [r7, #12]
 8009146:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800914a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009162:	e021      	b.n	80091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009176:	4b37      	ldr	r3, [pc, #220]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009186:	ed97 6a03 	vldr	s12, [r7, #12]
 800918a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800918e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800919a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80091a8:	4b2a      	ldr	r3, [pc, #168]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ac:	0a5b      	lsrs	r3, r3, #9
 80091ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ce:	ee17 2a90 	vmov	r2, s15
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80091d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091da:	0c1b      	lsrs	r3, r3, #16
 80091dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091e0:	ee07 3a90 	vmov	s15, r3
 80091e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80091f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091fc:	ee17 2a90 	vmov	r2, s15
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009204:	4b13      	ldr	r3, [pc, #76]	@ (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009208:	0e1b      	lsrs	r3, r3, #24
 800920a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800921a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800921e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800922a:	ee17 2a90 	vmov	r2, s15
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009232:	e008      	b.n	8009246 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	609a      	str	r2, [r3, #8]
}
 8009246:	bf00      	nop
 8009248:	3724      	adds	r7, #36	@ 0x24
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	58024400 	.word	0x58024400
 8009258:	03d09000 	.word	0x03d09000
 800925c:	46000000 	.word	0x46000000
 8009260:	4c742400 	.word	0x4c742400
 8009264:	4a742400 	.word	0x4a742400
 8009268:	4b742400 	.word	0x4b742400

0800926c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800926c:	b480      	push	{r7}
 800926e:	b089      	sub	sp, #36	@ 0x24
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009274:	4ba1      	ldr	r3, [pc, #644]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009278:	f003 0303 	and.w	r3, r3, #3
 800927c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800927e:	4b9f      	ldr	r3, [pc, #636]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009282:	0d1b      	lsrs	r3, r3, #20
 8009284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009288:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800928a:	4b9c      	ldr	r3, [pc, #624]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800928c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928e:	0a1b      	lsrs	r3, r3, #8
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009296:	4b99      	ldr	r3, [pc, #612]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800929a:	08db      	lsrs	r3, r3, #3
 800929c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	fb02 f303 	mul.w	r3, r2, r3
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8111 	beq.w	80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	f000 8083 	beq.w	80093c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	f200 80a1 	bhi.w	800940c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d056      	beq.n	8009384 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80092d6:	e099      	b.n	800940c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092d8:	4b88      	ldr	r3, [pc, #544]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0320 	and.w	r3, r3, #32
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d02d      	beq.n	8009340 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092e4:	4b85      	ldr	r3, [pc, #532]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	08db      	lsrs	r3, r3, #3
 80092ea:	f003 0303 	and.w	r3, r3, #3
 80092ee:	4a84      	ldr	r2, [pc, #528]	@ (8009500 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80092f0:	fa22 f303 	lsr.w	r3, r2, r3
 80092f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	ee07 3a90 	vmov	s15, r3
 80092fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930e:	4b7b      	ldr	r3, [pc, #492]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009322:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800933e:	e087      	b.n	8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009508 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800934e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009352:	4b6a      	ldr	r3, [pc, #424]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009362:	ed97 6a03 	vldr	s12, [r7, #12]
 8009366:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800936a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009382:	e065      	b.n	8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800950c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009396:	4b59      	ldr	r3, [pc, #356]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800939a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093c6:	e043      	b.n	8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009510 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80093d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093da:	4b48      	ldr	r3, [pc, #288]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800940a:	e021      	b.n	8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800950c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800941a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941e:	4b37      	ldr	r3, [pc, #220]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800942e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009432:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800943e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800944e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009450:	4b2a      	ldr	r3, [pc, #168]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009454:	0a5b      	lsrs	r3, r3, #9
 8009456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800946a:	edd7 6a07 	vldr	s13, [r7, #28]
 800946e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009476:	ee17 2a90 	vmov	r2, s15
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800947e:	4b1f      	ldr	r3, [pc, #124]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009482:	0c1b      	lsrs	r3, r3, #16
 8009484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009490:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009494:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009498:	edd7 6a07 	vldr	s13, [r7, #28]
 800949c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a4:	ee17 2a90 	vmov	r2, s15
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80094ac:	4b13      	ldr	r3, [pc, #76]	@ (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b0:	0e1b      	lsrs	r3, r3, #24
 80094b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80094ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094d2:	ee17 2a90 	vmov	r2, s15
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80094da:	e008      	b.n	80094ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	609a      	str	r2, [r3, #8]
}
 80094ee:	bf00      	nop
 80094f0:	3724      	adds	r7, #36	@ 0x24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	58024400 	.word	0x58024400
 8009500:	03d09000 	.word	0x03d09000
 8009504:	46000000 	.word	0x46000000
 8009508:	4c742400 	.word	0x4c742400
 800950c:	4a742400 	.word	0x4a742400
 8009510:	4b742400 	.word	0x4b742400

08009514 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009514:	b480      	push	{r7}
 8009516:	b089      	sub	sp, #36	@ 0x24
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800951c:	4ba0      	ldr	r3, [pc, #640]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800951e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009520:	f003 0303 	and.w	r3, r3, #3
 8009524:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009526:	4b9e      	ldr	r3, [pc, #632]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800952a:	091b      	lsrs	r3, r3, #4
 800952c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009530:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009532:	4b9b      	ldr	r3, [pc, #620]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800953c:	4b98      	ldr	r3, [pc, #608]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800953e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009540:	08db      	lsrs	r3, r3, #3
 8009542:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	fb02 f303 	mul.w	r3, r2, r3
 800954c:	ee07 3a90 	vmov	s15, r3
 8009550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009554:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 8111 	beq.w	8009782 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	2b02      	cmp	r3, #2
 8009564:	f000 8083 	beq.w	800966e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	2b02      	cmp	r3, #2
 800956c:	f200 80a1 	bhi.w	80096b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d056      	beq.n	800962a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800957c:	e099      	b.n	80096b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800957e:	4b88      	ldr	r3, [pc, #544]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	d02d      	beq.n	80095e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800958a:	4b85      	ldr	r3, [pc, #532]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	08db      	lsrs	r3, r3, #3
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	4a83      	ldr	r2, [pc, #524]	@ (80097a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009596:	fa22 f303 	lsr.w	r3, r2, r3
 800959a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	ee07 3a90 	vmov	s15, r3
 80095a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	ee07 3a90 	vmov	s15, r3
 80095ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b4:	4b7a      	ldr	r3, [pc, #488]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095bc:	ee07 3a90 	vmov	s15, r3
 80095c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80095c8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80097a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095e4:	e087      	b.n	80096f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	ee07 3a90 	vmov	s15, r3
 80095ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80097ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80095f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095f8:	4b69      	ldr	r3, [pc, #420]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009600:	ee07 3a90 	vmov	s15, r3
 8009604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009608:	ed97 6a03 	vldr	s12, [r7, #12]
 800960c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80097a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009618:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800961c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009624:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009628:	e065      	b.n	80096f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	ee07 3a90 	vmov	s15, r3
 8009630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009634:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80097b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963c:	4b58      	ldr	r3, [pc, #352]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800963e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009644:	ee07 3a90 	vmov	s15, r3
 8009648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009650:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80097a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009668:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800966c:	e043      	b.n	80096f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	ee07 3a90 	vmov	s15, r3
 8009674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009678:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80097b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800967c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009680:	4b47      	ldr	r3, [pc, #284]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009688:	ee07 3a90 	vmov	s15, r3
 800968c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009690:	ed97 6a03 	vldr	s12, [r7, #12]
 8009694:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80097a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096b0:	e021      	b.n	80096f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	ee07 3a90 	vmov	s15, r3
 80096b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096bc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80097ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c4:	4b36      	ldr	r3, [pc, #216]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80096d8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80097a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80096f6:	4b2a      	ldr	r3, [pc, #168]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096fa:	0a5b      	lsrs	r3, r3, #9
 80096fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009708:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800970c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009710:	edd7 6a07 	vldr	s13, [r7, #28]
 8009714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800971c:	ee17 2a90 	vmov	r2, s15
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009724:	4b1e      	ldr	r3, [pc, #120]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009728:	0c1b      	lsrs	r3, r3, #16
 800972a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800972e:	ee07 3a90 	vmov	s15, r3
 8009732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009736:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800973a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800973e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800974a:	ee17 2a90 	vmov	r2, s15
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009752:	4b13      	ldr	r3, [pc, #76]	@ (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009756:	0e1b      	lsrs	r3, r3, #24
 8009758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800975c:	ee07 3a90 	vmov	s15, r3
 8009760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009764:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800976c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009778:	ee17 2a90 	vmov	r2, s15
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009780:	e008      	b.n	8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	609a      	str	r2, [r3, #8]
}
 8009794:	bf00      	nop
 8009796:	3724      	adds	r7, #36	@ 0x24
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	58024400 	.word	0x58024400
 80097a4:	03d09000 	.word	0x03d09000
 80097a8:	46000000 	.word	0x46000000
 80097ac:	4c742400 	.word	0x4c742400
 80097b0:	4a742400 	.word	0x4a742400
 80097b4:	4b742400 	.word	0x4b742400

080097b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097c6:	4b53      	ldr	r3, [pc, #332]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80097c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d101      	bne.n	80097d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e099      	b.n	800990a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097d6:	4b4f      	ldr	r3, [pc, #316]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a4e      	ldr	r2, [pc, #312]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80097dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097e2:	f7f7 fee3 	bl	80015ac <HAL_GetTick>
 80097e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097e8:	e008      	b.n	80097fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097ea:	f7f7 fedf 	bl	80015ac <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d901      	bls.n	80097fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e086      	b.n	800990a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097fc:	4b45      	ldr	r3, [pc, #276]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1f0      	bne.n	80097ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009808:	4b42      	ldr	r3, [pc, #264]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 800980a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	031b      	lsls	r3, r3, #12
 8009816:	493f      	ldr	r1, [pc, #252]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009818:	4313      	orrs	r3, r2
 800981a:	628b      	str	r3, [r1, #40]	@ 0x28
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	3b01      	subs	r3, #1
 8009822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	3b01      	subs	r3, #1
 800982c:	025b      	lsls	r3, r3, #9
 800982e:	b29b      	uxth	r3, r3
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	3b01      	subs	r3, #1
 8009838:	041b      	lsls	r3, r3, #16
 800983a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800983e:	431a      	orrs	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	3b01      	subs	r3, #1
 8009846:	061b      	lsls	r3, r3, #24
 8009848:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800984c:	4931      	ldr	r1, [pc, #196]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 800984e:	4313      	orrs	r3, r2
 8009850:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009852:	4b30      	ldr	r3, [pc, #192]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009856:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	492d      	ldr	r1, [pc, #180]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009860:	4313      	orrs	r3, r2
 8009862:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009864:	4b2b      	ldr	r3, [pc, #172]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009868:	f023 0220 	bic.w	r2, r3, #32
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	4928      	ldr	r1, [pc, #160]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009872:	4313      	orrs	r3, r2
 8009874:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009876:	4b27      	ldr	r3, [pc, #156]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987a:	4a26      	ldr	r2, [pc, #152]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 800987c:	f023 0310 	bic.w	r3, r3, #16
 8009880:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009882:	4b24      	ldr	r3, [pc, #144]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009886:	4b24      	ldr	r3, [pc, #144]	@ (8009918 <RCCEx_PLL2_Config+0x160>)
 8009888:	4013      	ands	r3, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	69d2      	ldr	r2, [r2, #28]
 800988e:	00d2      	lsls	r2, r2, #3
 8009890:	4920      	ldr	r1, [pc, #128]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009892:	4313      	orrs	r3, r2
 8009894:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009896:	4b1f      	ldr	r3, [pc, #124]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989a:	4a1e      	ldr	r2, [pc, #120]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 800989c:	f043 0310 	orr.w	r3, r3, #16
 80098a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d106      	bne.n	80098b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ac:	4a19      	ldr	r2, [pc, #100]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098b4:	e00f      	b.n	80098d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d106      	bne.n	80098ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098bc:	4b15      	ldr	r3, [pc, #84]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c0:	4a14      	ldr	r2, [pc, #80]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098c8:	e005      	b.n	80098d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098ca:	4b12      	ldr	r3, [pc, #72]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ce:	4a11      	ldr	r2, [pc, #68]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80098d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a0e      	ldr	r2, [pc, #56]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098e2:	f7f7 fe63 	bl	80015ac <HAL_GetTick>
 80098e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098e8:	e008      	b.n	80098fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098ea:	f7f7 fe5f 	bl	80015ac <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d901      	bls.n	80098fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e006      	b.n	800990a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098fc:	4b05      	ldr	r3, [pc, #20]	@ (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d0f0      	beq.n	80098ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	58024400 	.word	0x58024400
 8009918:	ffff0007 	.word	0xffff0007

0800991c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800992a:	4b53      	ldr	r3, [pc, #332]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 800992c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	2b03      	cmp	r3, #3
 8009934:	d101      	bne.n	800993a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e099      	b.n	8009a6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800993a:	4b4f      	ldr	r3, [pc, #316]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a4e      	ldr	r2, [pc, #312]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009946:	f7f7 fe31 	bl	80015ac <HAL_GetTick>
 800994a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800994c:	e008      	b.n	8009960 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800994e:	f7f7 fe2d 	bl	80015ac <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b02      	cmp	r3, #2
 800995a:	d901      	bls.n	8009960 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e086      	b.n	8009a6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009960:	4b45      	ldr	r3, [pc, #276]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1f0      	bne.n	800994e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800996c:	4b42      	ldr	r3, [pc, #264]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 800996e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009970:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	051b      	lsls	r3, r3, #20
 800997a:	493f      	ldr	r1, [pc, #252]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 800997c:	4313      	orrs	r3, r2
 800997e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	3b01      	subs	r3, #1
 8009986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	3b01      	subs	r3, #1
 8009990:	025b      	lsls	r3, r3, #9
 8009992:	b29b      	uxth	r3, r3
 8009994:	431a      	orrs	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	3b01      	subs	r3, #1
 800999c:	041b      	lsls	r3, r3, #16
 800999e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099a2:	431a      	orrs	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	3b01      	subs	r3, #1
 80099aa:	061b      	lsls	r3, r3, #24
 80099ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099b0:	4931      	ldr	r1, [pc, #196]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099b6:	4b30      	ldr	r3, [pc, #192]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	492d      	ldr	r1, [pc, #180]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099c8:	4b2b      	ldr	r3, [pc, #172]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	4928      	ldr	r1, [pc, #160]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099da:	4b27      	ldr	r3, [pc, #156]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099de:	4a26      	ldr	r2, [pc, #152]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099e6:	4b24      	ldr	r3, [pc, #144]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099ea:	4b24      	ldr	r3, [pc, #144]	@ (8009a7c <RCCEx_PLL3_Config+0x160>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	69d2      	ldr	r2, [r2, #28]
 80099f2:	00d2      	lsls	r2, r2, #3
 80099f4:	4920      	ldr	r1, [pc, #128]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099fa:	4b1f      	ldr	r3, [pc, #124]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a10:	4a19      	ldr	r2, [pc, #100]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a18:	e00f      	b.n	8009a3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d106      	bne.n	8009a2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a20:	4b15      	ldr	r3, [pc, #84]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a24:	4a14      	ldr	r2, [pc, #80]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a2c:	e005      	b.n	8009a3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a2e:	4b12      	ldr	r3, [pc, #72]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a32:	4a11      	ldr	r2, [pc, #68]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a46:	f7f7 fdb1 	bl	80015ac <HAL_GetTick>
 8009a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a4c:	e008      	b.n	8009a60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a4e:	f7f7 fdad 	bl	80015ac <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d901      	bls.n	8009a60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e006      	b.n	8009a6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a60:	4b05      	ldr	r3, [pc, #20]	@ (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0f0      	beq.n	8009a4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	58024400 	.word	0x58024400
 8009a7c:	ffff0007 	.word	0xffff0007

08009a80 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d904      	bls.n	8009a9e <HAL_SAI_InitProtocol+0x1e>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	3b03      	subs	r3, #3
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d812      	bhi.n	8009ac2 <HAL_SAI_InitProtocol+0x42>
 8009a9c:	e008      	b.n	8009ab0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	68b9      	ldr	r1, [r7, #8]
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 fc1b 	bl	800a2e0 <SAI_InitI2S>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	75fb      	strb	r3, [r7, #23]
      break;
 8009aae:	e00b      	b.n	8009ac8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	68b9      	ldr	r1, [r7, #8]
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f000 fcc4 	bl	800a444 <SAI_InitPCM>
 8009abc:	4603      	mov	r3, r0
 8009abe:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac0:	e002      	b.n	8009ac8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac6:	bf00      	nop
  }

  if (status == HAL_OK)
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d104      	bne.n	8009ad8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 f808 	bl	8009ae4 <HAL_SAI_Init>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08a      	sub	sp, #40	@ 0x28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e28e      	b.n	800a014 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009af6:	f7f7 fd65 	bl	80015c4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d113      	bne.n	8009b2c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a96      	ldr	r2, [pc, #600]	@ (8009d64 <HAL_SAI_Init+0x280>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d004      	beq.n	8009b18 <HAL_SAI_Init+0x34>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a95      	ldr	r2, [pc, #596]	@ (8009d68 <HAL_SAI_Init+0x284>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d107      	bne.n	8009b28 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d103      	bne.n	8009b28 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e273      	b.n	800a014 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a8c      	ldr	r2, [pc, #560]	@ (8009d64 <HAL_SAI_Init+0x280>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d004      	beq.n	8009b40 <HAL_SAI_Init+0x5c>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a8c      	ldr	r2, [pc, #560]	@ (8009d6c <HAL_SAI_Init+0x288>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d102      	bne.n	8009b46 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8009b40:	4b8b      	ldr	r3, [pc, #556]	@ (8009d70 <HAL_SAI_Init+0x28c>)
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	e028      	b.n	8009b98 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a8a      	ldr	r2, [pc, #552]	@ (8009d74 <HAL_SAI_Init+0x290>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d004      	beq.n	8009b5a <HAL_SAI_Init+0x76>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a88      	ldr	r2, [pc, #544]	@ (8009d78 <HAL_SAI_Init+0x294>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d102      	bne.n	8009b60 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8009b5a:	4b88      	ldr	r3, [pc, #544]	@ (8009d7c <HAL_SAI_Init+0x298>)
 8009b5c:	61bb      	str	r3, [r7, #24]
 8009b5e:	e01b      	b.n	8009b98 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a86      	ldr	r2, [pc, #536]	@ (8009d80 <HAL_SAI_Init+0x29c>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d004      	beq.n	8009b74 <HAL_SAI_Init+0x90>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a85      	ldr	r2, [pc, #532]	@ (8009d84 <HAL_SAI_Init+0x2a0>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d102      	bne.n	8009b7a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8009b74:	4b84      	ldr	r3, [pc, #528]	@ (8009d88 <HAL_SAI_Init+0x2a4>)
 8009b76:	61bb      	str	r3, [r7, #24]
 8009b78:	e00e      	b.n	8009b98 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a7a      	ldr	r2, [pc, #488]	@ (8009d68 <HAL_SAI_Init+0x284>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d004      	beq.n	8009b8e <HAL_SAI_Init+0xaa>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a80      	ldr	r2, [pc, #512]	@ (8009d8c <HAL_SAI_Init+0x2a8>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d102      	bne.n	8009b94 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8009b8e:	4b80      	ldr	r3, [pc, #512]	@ (8009d90 <HAL_SAI_Init+0x2ac>)
 8009b90:	61bb      	str	r3, [r7, #24]
 8009b92:	e001      	b.n	8009b98 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e23d      	b.n	800a014 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d106      	bne.n	8009bb2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7f7 fa4b 	bl	8001048 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fd00 	bl	800a5b8 <SAI_Disable>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e228      	b.n	800a014 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d00c      	beq.n	8009bec <HAL_SAI_Init+0x108>
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d80d      	bhi.n	8009bf2 <HAL_SAI_Init+0x10e>
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d002      	beq.n	8009be0 <HAL_SAI_Init+0xfc>
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d003      	beq.n	8009be6 <HAL_SAI_Init+0x102>
 8009bde:	e008      	b.n	8009bf2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009be4:	e008      	b.n	8009bf8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009be6:	2310      	movs	r3, #16
 8009be8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009bea:	e005      	b.n	8009bf8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009bec:	2320      	movs	r3, #32
 8009bee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009bf0:	e002      	b.n	8009bf8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009bf6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	2b05      	cmp	r3, #5
 8009bfe:	d832      	bhi.n	8009c66 <HAL_SAI_Init+0x182>
 8009c00:	a201      	add	r2, pc, #4	@ (adr r2, 8009c08 <HAL_SAI_Init+0x124>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c21 	.word	0x08009c21
 8009c0c:	08009c27 	.word	0x08009c27
 8009c10:	08009c2f 	.word	0x08009c2f
 8009c14:	08009c37 	.word	0x08009c37
 8009c18:	08009c47 	.word	0x08009c47
 8009c1c:	08009c57 	.word	0x08009c57
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8009c20:	2300      	movs	r3, #0
 8009c22:	61fb      	str	r3, [r7, #28]
      break;
 8009c24:	e022      	b.n	8009c6c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009c26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c2a:	61fb      	str	r3, [r7, #28]
      break;
 8009c2c:	e01e      	b.n	8009c6c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009c2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c32:	61fb      	str	r3, [r7, #28]
      break;
 8009c34:	e01a      	b.n	8009c6c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009c36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c3a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	f043 0301 	orr.w	r3, r3, #1
 8009c42:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009c44:	e012      	b.n	8009c6c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009c46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c4a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4e:	f043 0302 	orr.w	r3, r3, #2
 8009c52:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009c54:	e00a      	b.n	8009c6c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009c56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c5a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5e:	f043 0303 	orr.w	r3, r3, #3
 8009c62:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8009c64:	e002      	b.n	8009c6c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8009c66:	2300      	movs	r3, #0
 8009c68:	61fb      	str	r3, [r7, #28]
      break;
 8009c6a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c70:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 80c5 	beq.w	8009e06 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a37      	ldr	r2, [pc, #220]	@ (8009d64 <HAL_SAI_Init+0x280>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d004      	beq.n	8009c94 <HAL_SAI_Init+0x1b0>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a37      	ldr	r2, [pc, #220]	@ (8009d6c <HAL_SAI_Init+0x288>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d106      	bne.n	8009ca2 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009c94:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009c98:	f04f 0100 	mov.w	r1, #0
 8009c9c:	f7fe fbfc 	bl	8008498 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ca0:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a33      	ldr	r2, [pc, #204]	@ (8009d74 <HAL_SAI_Init+0x290>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d004      	beq.n	8009cb6 <HAL_SAI_Init+0x1d2>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a31      	ldr	r2, [pc, #196]	@ (8009d78 <HAL_SAI_Init+0x294>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d106      	bne.n	8009cc4 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009cb6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009cba:	f04f 0100 	mov.w	r1, #0
 8009cbe:	f7fe fbeb 	bl	8008498 <HAL_RCCEx_GetPeriphCLKFreq>
 8009cc2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8009d80 <HAL_SAI_Init+0x29c>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d004      	beq.n	8009cd8 <HAL_SAI_Init+0x1f4>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8009d84 <HAL_SAI_Init+0x2a0>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d106      	bne.n	8009ce6 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009cd8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009cdc:	f04f 0100 	mov.w	r1, #0
 8009ce0:	f7fe fbda 	bl	8008498 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ce4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a1f      	ldr	r2, [pc, #124]	@ (8009d68 <HAL_SAI_Init+0x284>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d106      	bne.n	8009cfe <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009cf0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009cf4:	f04f 0100 	mov.w	r1, #0
 8009cf8:	f7fe fbce 	bl	8008498 <HAL_RCCEx_GetPeriphCLKFreq>
 8009cfc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a22      	ldr	r2, [pc, #136]	@ (8009d8c <HAL_SAI_Init+0x2a8>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d106      	bne.n	8009d16 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009d08:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009d0c:	f04f 0100 	mov.w	r1, #0
 8009d10:	f7fe fbc2 	bl	8008498 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d14:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009d1e:	d139      	bne.n	8009d94 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d24:	2b04      	cmp	r3, #4
 8009d26:	d102      	bne.n	8009d2e <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009d28:	2340      	movs	r3, #64	@ 0x40
 8009d2a:	60fb      	str	r3, [r7, #12]
 8009d2c:	e00a      	b.n	8009d44 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d32:	2b08      	cmp	r3, #8
 8009d34:	d103      	bne.n	8009d3e <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009d36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	e002      	b.n	8009d44 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d42:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	005b      	lsls	r3, r3, #1
 8009d4e:	4619      	mov	r1, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	fb02 f303 	mul.w	r3, r2, r3
 8009d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d5e:	613b      	str	r3, [r7, #16]
 8009d60:	e030      	b.n	8009dc4 <HAL_SAI_Init+0x2e0>
 8009d62:	bf00      	nop
 8009d64:	40015804 	.word	0x40015804
 8009d68:	58005404 	.word	0x58005404
 8009d6c:	40015824 	.word	0x40015824
 8009d70:	40015800 	.word	0x40015800
 8009d74:	40015c04 	.word	0x40015c04
 8009d78:	40015c24 	.word	0x40015c24
 8009d7c:	40015c00 	.word	0x40015c00
 8009d80:	40016004 	.word	0x40016004
 8009d84:	40016024 	.word	0x40016024
 8009d88:	40016000 	.word	0x40016000
 8009d8c:	58005424 	.word	0x58005424
 8009d90:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d9c:	d101      	bne.n	8009da2 <HAL_SAI_Init+0x2be>
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e000      	b.n	8009da4 <HAL_SAI_Init+0x2c0>
 8009da2:	2301      	movs	r3, #1
 8009da4:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	005b      	lsls	r3, r3, #1
 8009db0:	4619      	mov	r1, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	fb02 f303 	mul.w	r3, r2, r3
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8009dc2:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	4a95      	ldr	r2, [pc, #596]	@ (800a01c <HAL_SAI_Init+0x538>)
 8009dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dcc:	08da      	lsrs	r2, r3, #3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8009dd2:	6939      	ldr	r1, [r7, #16]
 8009dd4:	4b91      	ldr	r3, [pc, #580]	@ (800a01c <HAL_SAI_Init+0x538>)
 8009dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8009dda:	08da      	lsrs	r2, r3, #3
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	005b      	lsls	r3, r3, #1
 8009de4:	1aca      	subs	r2, r1, r3
 8009de6:	2a08      	cmp	r2, #8
 8009de8:	d904      	bls.n	8009df4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df8:	2b04      	cmp	r3, #4
 8009dfa:	d104      	bne.n	8009e06 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e00:	085a      	lsrs	r2, r3, #1
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d003      	beq.n	8009e16 <HAL_SAI_Init+0x332>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d109      	bne.n	8009e2a <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d101      	bne.n	8009e22 <HAL_SAI_Init+0x33e>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	e001      	b.n	8009e26 <HAL_SAI_Init+0x342>
 8009e22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e26:	623b      	str	r3, [r7, #32]
 8009e28:	e008      	b.n	8009e3c <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d102      	bne.n	8009e38 <HAL_SAI_Init+0x354>
 8009e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e36:	e000      	b.n	8009e3a <HAL_SAI_Init+0x356>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009e3c:	f7f7 fbc2 	bl	80015c4 <HAL_GetREVID>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e46:	d331      	bcc.n	8009eac <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6819      	ldr	r1, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	4b73      	ldr	r3, [pc, #460]	@ (800a020 <HAL_SAI_Init+0x53c>)
 8009e54:	400b      	ands	r3, r1
 8009e56:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6819      	ldr	r1, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e66:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e6c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e72:	431a      	orrs	r2, r3
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009e80:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e8c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e92:	051b      	lsls	r3, r3, #20
 8009e94:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009e9a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	e02d      	b.n	8009f08 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6819      	ldr	r1, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	4b5b      	ldr	r3, [pc, #364]	@ (800a024 <HAL_SAI_Init+0x540>)
 8009eb8:	400b      	ands	r3, r1
 8009eba:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6819      	ldr	r1, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eca:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009ed0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009ee4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ef0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef6:	051b      	lsls	r3, r3, #20
 8009ef8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009efe:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	430a      	orrs	r2, r1
 8009f06:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6859      	ldr	r1, [r3, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	4b45      	ldr	r3, [pc, #276]	@ (800a028 <HAL_SAI_Init+0x544>)
 8009f14:	400b      	ands	r3, r1
 8009f16:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6859      	ldr	r1, [r3, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	69da      	ldr	r2, [r3, #28]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f26:	431a      	orrs	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f2c:	431a      	orrs	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6899      	ldr	r1, [r3, #8]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	4b3a      	ldr	r3, [pc, #232]	@ (800a02c <HAL_SAI_Init+0x548>)
 8009f42:	400b      	ands	r3, r1
 8009f44:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	6899      	ldr	r1, [r3, #8]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f50:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009f56:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8009f5c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8009f62:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009f6c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68d9      	ldr	r1, [r3, #12]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009f84:	400b      	ands	r3, r1
 8009f86:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68d9      	ldr	r1, [r3, #12]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f96:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f9c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009f9e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	021b      	lsls	r3, r3, #8
 8009fa8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a1e      	ldr	r2, [pc, #120]	@ (800a030 <HAL_SAI_Init+0x54c>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d004      	beq.n	8009fc6 <HAL_SAI_Init+0x4e2>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a1c      	ldr	r2, [pc, #112]	@ (800a034 <HAL_SAI_Init+0x550>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d119      	bne.n	8009ffa <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fca:	f023 0201 	bic.w	r2, r3, #1
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d10e      	bne.n	8009ffa <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009fe8:	431a      	orrs	r2, r3
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ff2:	f043 0201 	orr.w	r2, r3, #1
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3728      	adds	r7, #40	@ 0x28
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	cccccccd 	.word	0xcccccccd
 800a020:	f005c010 	.word	0xf005c010
 800a024:	f805c010 	.word	0xf805c010
 800a028:	ffff1ff0 	.word	0xffff1ff0
 800a02c:	fff88000 	.word	0xfff88000
 800a030:	40015804 	.word	0x40015804
 800a034:	58005404 	.word	0x58005404

0800a038 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	4613      	mov	r3, r2
 800a044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800a046:	f7f7 fab1 	bl	80015ac <HAL_GetTick>
 800a04a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <HAL_SAI_Transmit_DMA+0x20>
 800a052:	88fb      	ldrh	r3, [r7, #6]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e098      	b.n	800a18e <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b01      	cmp	r3, #1
 800a066:	f040 8091 	bne.w	800a18c <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a070:	2b01      	cmp	r3, #1
 800a072:	d101      	bne.n	800a078 <HAL_SAI_Transmit_DMA+0x40>
 800a074:	2302      	movs	r3, #2
 800a076:	e08a      	b.n	800a18e <HAL_SAI_Transmit_DMA+0x156>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	88fa      	ldrh	r2, [r7, #6]
 800a08a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	88fa      	ldrh	r2, [r7, #6]
 800a092:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2212      	movs	r2, #18
 800a0a2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0ac:	4a3a      	ldr	r2, [pc, #232]	@ (800a198 <HAL_SAI_Transmit_DMA+0x160>)
 800a0ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0b6:	4a39      	ldr	r2, [pc, #228]	@ (800a19c <HAL_SAI_Transmit_DMA+0x164>)
 800a0b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0c0:	4a37      	ldr	r2, [pc, #220]	@ (800a1a0 <HAL_SAI_Transmit_DMA+0x168>)
 800a0c2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0d8:	4619      	mov	r1, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	331c      	adds	r3, #28
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800a0e8:	f7fa f88a 	bl	8004200 <HAL_DMA_Start_IT>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e047      	b.n	800a18e <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a0fe:	2100      	movs	r1, #0
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 fa21 	bl	800a548 <SAI_InterruptFlag>
 800a106:	4601      	mov	r1, r0
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	691a      	ldr	r2, [r3, #16]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a124:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a126:	e015      	b.n	800a154 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800a128:	f7f7 fa40 	bl	80015ac <HAL_GetTick>
 800a12c:	4602      	mov	r2, r0
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a136:	d90d      	bls.n	800a154 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a13e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e01c      	b.n	800a18e <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0e2      	beq.n	800a128 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d107      	bne.n	800a180 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a17e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	e000      	b.n	800a18e <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800a18c:	2302      	movs	r3, #2
  }
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	0800a68d 	.word	0x0800a68d
 800a19c:	0800a62d 	.word	0x0800a62d
 800a1a0:	0800a725 	.word	0x0800a725

0800a1a4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <HAL_SAI_Receive_DMA+0x1a>
 800a1b8:	88fb      	ldrh	r3, [r7, #6]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d101      	bne.n	800a1c2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e079      	b.n	800a2b6 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d172      	bne.n	800a2b4 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d101      	bne.n	800a1dc <HAL_SAI_Receive_DMA+0x38>
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e06c      	b.n	800a2b6 <HAL_SAI_Receive_DMA+0x112>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	88fa      	ldrh	r2, [r7, #6]
 800a1ee:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	88fa      	ldrh	r2, [r7, #6]
 800a1f6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2222      	movs	r2, #34	@ 0x22
 800a206:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a210:	4a2b      	ldr	r2, [pc, #172]	@ (800a2c0 <HAL_SAI_Receive_DMA+0x11c>)
 800a212:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a21a:	4a2a      	ldr	r2, [pc, #168]	@ (800a2c4 <HAL_SAI_Receive_DMA+0x120>)
 800a21c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a224:	4a28      	ldr	r2, [pc, #160]	@ (800a2c8 <HAL_SAI_Receive_DMA+0x124>)
 800a226:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a22e:	2200      	movs	r2, #0
 800a230:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	331c      	adds	r3, #28
 800a23e:	4619      	mov	r1, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a244:	461a      	mov	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800a24c:	f7f9 ffd8 	bl	8004200 <HAL_DMA_Start_IT>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d005      	beq.n	800a262 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e029      	b.n	800a2b6 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a262:	2100      	movs	r1, #0
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 f96f 	bl	800a548 <SAI_InterruptFlag>
 800a26a:	4601      	mov	r1, r0
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	691a      	ldr	r2, [r3, #16]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a288:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d107      	bne.n	800a2a8 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a2a6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e000      	b.n	800a2b6 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800a2b4:	2302      	movs	r3, #2
  }
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800a709 	.word	0x0800a709
 800a2c4:	0800a6a9 	.word	0x0800a6a9
 800a2c8:	0800a725 	.word	0x0800a725

0800a2cc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <SAI_InitI2S+0x2e>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d103      	bne.n	800a316 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	651a      	str	r2, [r3, #80]	@ 0x50
 800a314:	e002      	b.n	800a31c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2201      	movs	r2, #1
 800a31a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a322:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a32a:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d001      	beq.n	800a346 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e077      	b.n	800a436 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d107      	bne.n	800a35c <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a358:	665a      	str	r2, [r3, #100]	@ 0x64
 800a35a:	e006      	b.n	800a36a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a362:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d84f      	bhi.n	800a410 <SAI_InitI2S+0x130>
 800a370:	a201      	add	r2, pc, #4	@ (adr r2, 800a378 <SAI_InitI2S+0x98>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a389 	.word	0x0800a389
 800a37c:	0800a3ab 	.word	0x0800a3ab
 800a380:	0800a3cd 	.word	0x0800a3cd
 800a384:	0800a3ef 	.word	0x0800a3ef
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2280      	movs	r2, #128	@ 0x80
 800a38c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	085b      	lsrs	r3, r3, #1
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	085b      	lsrs	r3, r3, #1
 800a39c:	011a      	lsls	r2, r3, #4
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2240      	movs	r2, #64	@ 0x40
 800a3a6:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a3a8:	e035      	b.n	800a416 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2280      	movs	r2, #128	@ 0x80
 800a3ae:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	085b      	lsrs	r3, r3, #1
 800a3b4:	019a      	lsls	r2, r3, #6
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	085b      	lsrs	r3, r3, #1
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2280      	movs	r2, #128	@ 0x80
 800a3c8:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a3ca:	e024      	b.n	800a416 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	22c0      	movs	r2, #192	@ 0xc0
 800a3d0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	085b      	lsrs	r3, r3, #1
 800a3d6:	019a      	lsls	r2, r3, #6
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	085b      	lsrs	r3, r3, #1
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2280      	movs	r2, #128	@ 0x80
 800a3ea:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a3ec:	e013      	b.n	800a416 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	22e0      	movs	r2, #224	@ 0xe0
 800a3f2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	085b      	lsrs	r3, r3, #1
 800a3f8:	019a      	lsls	r2, r3, #6
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	085b      	lsrs	r3, r3, #1
 800a402:	015a      	lsls	r2, r3, #5
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2280      	movs	r2, #128	@ 0x80
 800a40c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a40e:	e002      	b.n	800a416 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	75fb      	strb	r3, [r7, #23]
      break;
 800a414:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d10b      	bne.n	800a434 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d102      	bne.n	800a428 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2210      	movs	r2, #16
 800a426:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d102      	bne.n	800a434 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2208      	movs	r2, #8
 800a432:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 800a434:	7dfb      	ldrb	r3, [r7, #23]
}
 800a436:	4618      	mov	r0, r3
 800a438:	371c      	adds	r7, #28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop

0800a444 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
 800a450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <SAI_InitPCM+0x2e>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d103      	bne.n	800a47a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	651a      	str	r2, [r3, #80]	@ 0x50
 800a478:	e002      	b.n	800a480 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a48c:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a494:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4a8:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	d103      	bne.n	800a4b8 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	659a      	str	r2, [r3, #88]	@ 0x58
 800a4b6:	e002      	b.n	800a4be <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	220d      	movs	r2, #13
 800a4bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b03      	cmp	r3, #3
 800a4c2:	d837      	bhi.n	800a534 <SAI_InitPCM+0xf0>
 800a4c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a4cc <SAI_InitPCM+0x88>)
 800a4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ca:	bf00      	nop
 800a4cc:	0800a4dd 	.word	0x0800a4dd
 800a4d0:	0800a4f3 	.word	0x0800a4f3
 800a4d4:	0800a509 	.word	0x0800a509
 800a4d8:	0800a51f 	.word	0x0800a51f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2280      	movs	r2, #128	@ 0x80
 800a4e0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	011a      	lsls	r2, r3, #4
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2240      	movs	r2, #64	@ 0x40
 800a4ee:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a4f0:	e023      	b.n	800a53a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2280      	movs	r2, #128	@ 0x80
 800a4f6:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2280      	movs	r2, #128	@ 0x80
 800a504:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a506:	e018      	b.n	800a53a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	22c0      	movs	r2, #192	@ 0xc0
 800a50c:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2280      	movs	r2, #128	@ 0x80
 800a51a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a51c:	e00d      	b.n	800a53a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	22e0      	movs	r2, #224	@ 0xe0
 800a522:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2280      	movs	r2, #128	@ 0x80
 800a530:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 800a532:	e002      	b.n	800a53a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	75fb      	strb	r3, [r7, #23]
      break;
 800a538:	bf00      	nop
  }

  return status;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	371c      	adds	r7, #28
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	460b      	mov	r3, r1
 800a552:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a554:	2301      	movs	r3, #1
 800a556:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d103      	bne.n	800a566 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f043 0308 	orr.w	r3, r3, #8
 800a564:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a56a:	2b08      	cmp	r3, #8
 800a56c:	d10b      	bne.n	800a586 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a572:	2b03      	cmp	r3, #3
 800a574:	d003      	beq.n	800a57e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d103      	bne.n	800a586 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f043 0310 	orr.w	r3, r3, #16
 800a584:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d003      	beq.n	800a596 <SAI_InterruptFlag+0x4e>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	2b02      	cmp	r3, #2
 800a594:	d104      	bne.n	800a5a0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a59c:	60fb      	str	r3, [r7, #12]
 800a59e:	e003      	b.n	800a5a8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f043 0304 	orr.w	r3, r3, #4
 800a5a6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
	...

0800a5b8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a5c0:	4b18      	ldr	r3, [pc, #96]	@ (800a624 <SAI_Disable+0x6c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a18      	ldr	r2, [pc, #96]	@ (800a628 <SAI_Disable+0x70>)
 800a5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ca:	0b1b      	lsrs	r3, r3, #12
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a5e2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10a      	bne.n	800a600 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	72fb      	strb	r3, [r7, #11]
      break;
 800a5fe:	e009      	b.n	800a614 <SAI_Disable+0x5c>
    }
    count--;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3b01      	subs	r3, #1
 800a604:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e7      	bne.n	800a5e4 <SAI_Disable+0x2c>

  return status;
 800a614:	7afb      	ldrb	r3, [r7, #11]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	24000000 	.word	0x24000000
 800a628:	95cbec1b 	.word	0x95cbec1b

0800a62c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a638:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a642:	d01c      	beq.n	800a67e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a65a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a65c:	2100      	movs	r1, #0
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7ff ff72 	bl	800a548 <SAI_InterruptFlag>
 800a664:	4603      	mov	r3, r0
 800a666:	43d9      	mvns	r1, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691a      	ldr	r2, [r3, #16]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	400a      	ands	r2, r1
 800a674:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f7f5 fff2 	bl	8000668 <HAL_SAI_TxCpltCallback>
#endif
}
 800a684:	bf00      	nop
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a698:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7f5 fffa 	bl	8000694 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800a6a0:	bf00      	nop
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6be:	d01c      	beq.n	800a6fa <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a6ce:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a6d8:	2100      	movs	r1, #0
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7ff ff34 	bl	800a548 <SAI_InterruptFlag>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	43d9      	mvns	r1, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	691a      	ldr	r2, [r3, #16]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	400a      	ands	r2, r1
 800a6f0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f7f5 ffe0 	bl	80006c0 <HAL_SAI_RxCpltCallback>
#endif
}
 800a700:	bf00      	nop
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a714:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7f5 fff6 	bl	8000708 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800a71c:	bf00      	nop
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a730:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7fa fef8 	bl	8005528 <HAL_DMA_GetError>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d01d      	beq.n	800a77a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a744:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a75c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f7ff ff2a 	bl	800a5b8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f7ff fda9 	bl	800a2cc <HAL_SAI_ErrorCallback>
#endif
  }
}
 800a77a:	bf00      	nop
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e049      	b.n	800a828 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d106      	bne.n	800a7ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7f6 fc2b 	bl	8001004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2202      	movs	r2, #2
 800a7b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	3304      	adds	r3, #4
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	f000 f9df 	bl	800ab84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2201      	movs	r2, #1
 800a81a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b01      	cmp	r3, #1
 800a842:	d001      	beq.n	800a848 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e04c      	b.n	800a8e2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2202      	movs	r2, #2
 800a84c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a26      	ldr	r2, [pc, #152]	@ (800a8f0 <HAL_TIM_Base_Start+0xc0>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d022      	beq.n	800a8a0 <HAL_TIM_Base_Start+0x70>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a862:	d01d      	beq.n	800a8a0 <HAL_TIM_Base_Start+0x70>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a22      	ldr	r2, [pc, #136]	@ (800a8f4 <HAL_TIM_Base_Start+0xc4>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d018      	beq.n	800a8a0 <HAL_TIM_Base_Start+0x70>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a21      	ldr	r2, [pc, #132]	@ (800a8f8 <HAL_TIM_Base_Start+0xc8>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d013      	beq.n	800a8a0 <HAL_TIM_Base_Start+0x70>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a1f      	ldr	r2, [pc, #124]	@ (800a8fc <HAL_TIM_Base_Start+0xcc>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d00e      	beq.n	800a8a0 <HAL_TIM_Base_Start+0x70>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a1e      	ldr	r2, [pc, #120]	@ (800a900 <HAL_TIM_Base_Start+0xd0>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d009      	beq.n	800a8a0 <HAL_TIM_Base_Start+0x70>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a1c      	ldr	r2, [pc, #112]	@ (800a904 <HAL_TIM_Base_Start+0xd4>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d004      	beq.n	800a8a0 <HAL_TIM_Base_Start+0x70>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a1b      	ldr	r2, [pc, #108]	@ (800a908 <HAL_TIM_Base_Start+0xd8>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d115      	bne.n	800a8cc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	689a      	ldr	r2, [r3, #8]
 800a8a6:	4b19      	ldr	r3, [pc, #100]	@ (800a90c <HAL_TIM_Base_Start+0xdc>)
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b06      	cmp	r3, #6
 800a8b0:	d015      	beq.n	800a8de <HAL_TIM_Base_Start+0xae>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8b8:	d011      	beq.n	800a8de <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f042 0201 	orr.w	r2, r2, #1
 800a8c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8ca:	e008      	b.n	800a8de <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f042 0201 	orr.w	r2, r2, #1
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	e000      	b.n	800a8e0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3714      	adds	r7, #20
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	40010000 	.word	0x40010000
 800a8f4:	40000400 	.word	0x40000400
 800a8f8:	40000800 	.word	0x40000800
 800a8fc:	40000c00 	.word	0x40000c00
 800a900:	40010400 	.word	0x40010400
 800a904:	40001800 	.word	0x40001800
 800a908:	40014000 	.word	0x40014000
 800a90c:	00010007 	.word	0x00010007

0800a910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a924:	2b01      	cmp	r3, #1
 800a926:	d101      	bne.n	800a92c <HAL_TIM_ConfigClockSource+0x1c>
 800a928:	2302      	movs	r3, #2
 800a92a:	e0dc      	b.n	800aae6 <HAL_TIM_ConfigClockSource+0x1d6>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2202      	movs	r2, #2
 800a938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	4b6a      	ldr	r3, [pc, #424]	@ (800aaf0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a948:	4013      	ands	r3, r2
 800a94a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a64      	ldr	r2, [pc, #400]	@ (800aaf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a962:	4293      	cmp	r3, r2
 800a964:	f000 80a9 	beq.w	800aaba <HAL_TIM_ConfigClockSource+0x1aa>
 800a968:	4a62      	ldr	r2, [pc, #392]	@ (800aaf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	f200 80ae 	bhi.w	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a970:	4a61      	ldr	r2, [pc, #388]	@ (800aaf8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	f000 80a1 	beq.w	800aaba <HAL_TIM_ConfigClockSource+0x1aa>
 800a978:	4a5f      	ldr	r2, [pc, #380]	@ (800aaf8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	f200 80a6 	bhi.w	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a980:	4a5e      	ldr	r2, [pc, #376]	@ (800aafc <HAL_TIM_ConfigClockSource+0x1ec>)
 800a982:	4293      	cmp	r3, r2
 800a984:	f000 8099 	beq.w	800aaba <HAL_TIM_ConfigClockSource+0x1aa>
 800a988:	4a5c      	ldr	r2, [pc, #368]	@ (800aafc <HAL_TIM_ConfigClockSource+0x1ec>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	f200 809e 	bhi.w	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a990:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a994:	f000 8091 	beq.w	800aaba <HAL_TIM_ConfigClockSource+0x1aa>
 800a998:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a99c:	f200 8096 	bhi.w	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9a4:	f000 8089 	beq.w	800aaba <HAL_TIM_ConfigClockSource+0x1aa>
 800a9a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9ac:	f200 808e 	bhi.w	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9b4:	d03e      	beq.n	800aa34 <HAL_TIM_ConfigClockSource+0x124>
 800a9b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9ba:	f200 8087 	bhi.w	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9c2:	f000 8086 	beq.w	800aad2 <HAL_TIM_ConfigClockSource+0x1c2>
 800a9c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9ca:	d87f      	bhi.n	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9cc:	2b70      	cmp	r3, #112	@ 0x70
 800a9ce:	d01a      	beq.n	800aa06 <HAL_TIM_ConfigClockSource+0xf6>
 800a9d0:	2b70      	cmp	r3, #112	@ 0x70
 800a9d2:	d87b      	bhi.n	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9d4:	2b60      	cmp	r3, #96	@ 0x60
 800a9d6:	d050      	beq.n	800aa7a <HAL_TIM_ConfigClockSource+0x16a>
 800a9d8:	2b60      	cmp	r3, #96	@ 0x60
 800a9da:	d877      	bhi.n	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9dc:	2b50      	cmp	r3, #80	@ 0x50
 800a9de:	d03c      	beq.n	800aa5a <HAL_TIM_ConfigClockSource+0x14a>
 800a9e0:	2b50      	cmp	r3, #80	@ 0x50
 800a9e2:	d873      	bhi.n	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e4:	2b40      	cmp	r3, #64	@ 0x40
 800a9e6:	d058      	beq.n	800aa9a <HAL_TIM_ConfigClockSource+0x18a>
 800a9e8:	2b40      	cmp	r3, #64	@ 0x40
 800a9ea:	d86f      	bhi.n	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9ec:	2b30      	cmp	r3, #48	@ 0x30
 800a9ee:	d064      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x1aa>
 800a9f0:	2b30      	cmp	r3, #48	@ 0x30
 800a9f2:	d86b      	bhi.n	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9f4:	2b20      	cmp	r3, #32
 800a9f6:	d060      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x1aa>
 800a9f8:	2b20      	cmp	r3, #32
 800a9fa:	d867      	bhi.n	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d05c      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x1aa>
 800aa00:	2b10      	cmp	r3, #16
 800aa02:	d05a      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x1aa>
 800aa04:	e062      	b.n	800aacc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa16:	f000 fabd 	bl	800af94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	609a      	str	r2, [r3, #8]
      break;
 800aa32:	e04f      	b.n	800aad4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa44:	f000 faa6 	bl	800af94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	689a      	ldr	r2, [r3, #8]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa56:	609a      	str	r2, [r3, #8]
      break;
 800aa58:	e03c      	b.n	800aad4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa66:	461a      	mov	r2, r3
 800aa68:	f000 fa16 	bl	800ae98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2150      	movs	r1, #80	@ 0x50
 800aa72:	4618      	mov	r0, r3
 800aa74:	f000 fa70 	bl	800af58 <TIM_ITRx_SetConfig>
      break;
 800aa78:	e02c      	b.n	800aad4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa86:	461a      	mov	r2, r3
 800aa88:	f000 fa35 	bl	800aef6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2160      	movs	r1, #96	@ 0x60
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 fa60 	bl	800af58 <TIM_ITRx_SetConfig>
      break;
 800aa98:	e01c      	b.n	800aad4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	f000 f9f6 	bl	800ae98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2140      	movs	r1, #64	@ 0x40
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 fa50 	bl	800af58 <TIM_ITRx_SetConfig>
      break;
 800aab8:	e00c      	b.n	800aad4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4619      	mov	r1, r3
 800aac4:	4610      	mov	r0, r2
 800aac6:	f000 fa47 	bl	800af58 <TIM_ITRx_SetConfig>
      break;
 800aaca:	e003      	b.n	800aad4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	73fb      	strb	r3, [r7, #15]
      break;
 800aad0:	e000      	b.n	800aad4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	ffceff88 	.word	0xffceff88
 800aaf4:	00100040 	.word	0x00100040
 800aaf8:	00100030 	.word	0x00100030
 800aafc:	00100020 	.word	0x00100020

0800ab00 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d101      	bne.n	800ab18 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ab14:	2302      	movs	r3, #2
 800ab16:	e031      	b.n	800ab7c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2202      	movs	r2, #2
 800ab24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f8ca 	bl	800acc4 <TIM_SlaveTimer_SetConfig>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d009      	beq.n	800ab4a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e018      	b.n	800ab7c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68da      	ldr	r2, [r3, #12]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab58:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68da      	ldr	r2, [r3, #12]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ab68:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a43      	ldr	r2, [pc, #268]	@ (800aca4 <TIM_Base_SetConfig+0x120>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d013      	beq.n	800abc4 <TIM_Base_SetConfig+0x40>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aba2:	d00f      	beq.n	800abc4 <TIM_Base_SetConfig+0x40>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a40      	ldr	r2, [pc, #256]	@ (800aca8 <TIM_Base_SetConfig+0x124>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d00b      	beq.n	800abc4 <TIM_Base_SetConfig+0x40>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a3f      	ldr	r2, [pc, #252]	@ (800acac <TIM_Base_SetConfig+0x128>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d007      	beq.n	800abc4 <TIM_Base_SetConfig+0x40>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a3e      	ldr	r2, [pc, #248]	@ (800acb0 <TIM_Base_SetConfig+0x12c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d003      	beq.n	800abc4 <TIM_Base_SetConfig+0x40>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a3d      	ldr	r2, [pc, #244]	@ (800acb4 <TIM_Base_SetConfig+0x130>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d108      	bne.n	800abd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a32      	ldr	r2, [pc, #200]	@ (800aca4 <TIM_Base_SetConfig+0x120>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d01f      	beq.n	800ac1e <TIM_Base_SetConfig+0x9a>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abe4:	d01b      	beq.n	800ac1e <TIM_Base_SetConfig+0x9a>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a2f      	ldr	r2, [pc, #188]	@ (800aca8 <TIM_Base_SetConfig+0x124>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d017      	beq.n	800ac1e <TIM_Base_SetConfig+0x9a>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a2e      	ldr	r2, [pc, #184]	@ (800acac <TIM_Base_SetConfig+0x128>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d013      	beq.n	800ac1e <TIM_Base_SetConfig+0x9a>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a2d      	ldr	r2, [pc, #180]	@ (800acb0 <TIM_Base_SetConfig+0x12c>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d00f      	beq.n	800ac1e <TIM_Base_SetConfig+0x9a>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a2c      	ldr	r2, [pc, #176]	@ (800acb4 <TIM_Base_SetConfig+0x130>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d00b      	beq.n	800ac1e <TIM_Base_SetConfig+0x9a>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a2b      	ldr	r2, [pc, #172]	@ (800acb8 <TIM_Base_SetConfig+0x134>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d007      	beq.n	800ac1e <TIM_Base_SetConfig+0x9a>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a2a      	ldr	r2, [pc, #168]	@ (800acbc <TIM_Base_SetConfig+0x138>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d003      	beq.n	800ac1e <TIM_Base_SetConfig+0x9a>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a29      	ldr	r2, [pc, #164]	@ (800acc0 <TIM_Base_SetConfig+0x13c>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d108      	bne.n	800ac30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	689a      	ldr	r2, [r3, #8]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a14      	ldr	r2, [pc, #80]	@ (800aca4 <TIM_Base_SetConfig+0x120>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d00f      	beq.n	800ac76 <TIM_Base_SetConfig+0xf2>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a16      	ldr	r2, [pc, #88]	@ (800acb4 <TIM_Base_SetConfig+0x130>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d00b      	beq.n	800ac76 <TIM_Base_SetConfig+0xf2>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a15      	ldr	r2, [pc, #84]	@ (800acb8 <TIM_Base_SetConfig+0x134>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d007      	beq.n	800ac76 <TIM_Base_SetConfig+0xf2>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a14      	ldr	r2, [pc, #80]	@ (800acbc <TIM_Base_SetConfig+0x138>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d003      	beq.n	800ac76 <TIM_Base_SetConfig+0xf2>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a13      	ldr	r2, [pc, #76]	@ (800acc0 <TIM_Base_SetConfig+0x13c>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d103      	bne.n	800ac7e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	691a      	ldr	r2, [r3, #16]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f043 0204 	orr.w	r2, r3, #4
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	601a      	str	r2, [r3, #0]
}
 800ac96:	bf00      	nop
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	40010000 	.word	0x40010000
 800aca8:	40000400 	.word	0x40000400
 800acac:	40000800 	.word	0x40000800
 800acb0:	40000c00 	.word	0x40000c00
 800acb4:	40010400 	.word	0x40010400
 800acb8:	40014000 	.word	0x40014000
 800acbc:	40014400 	.word	0x40014400
 800acc0:	40014800 	.word	0x40014800

0800acc4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	4b65      	ldr	r3, [pc, #404]	@ (800ae74 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800acde:	4013      	ands	r3, r2
 800ace0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	4313      	orrs	r3, r2
 800acea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	4b62      	ldr	r3, [pc, #392]	@ (800ae78 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800acf0:	4013      	ands	r3, r2
 800acf2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	4a5c      	ldr	r2, [pc, #368]	@ (800ae7c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	f000 80ab 	beq.w	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ad12:	4a5a      	ldr	r2, [pc, #360]	@ (800ae7c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	f200 80a4 	bhi.w	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ad1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad1e:	f000 80a3 	beq.w	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ad22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad26:	f200 809c 	bhi.w	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ad2a:	4a55      	ldr	r2, [pc, #340]	@ (800ae80 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	f000 809b 	beq.w	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ad32:	4a53      	ldr	r2, [pc, #332]	@ (800ae80 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	f200 8094 	bhi.w	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ad3a:	4a52      	ldr	r2, [pc, #328]	@ (800ae84 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	f000 8093 	beq.w	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ad42:	4a50      	ldr	r2, [pc, #320]	@ (800ae84 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	f200 808c 	bhi.w	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ad4a:	4a4f      	ldr	r2, [pc, #316]	@ (800ae88 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	f000 808b 	beq.w	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ad52:	4a4d      	ldr	r2, [pc, #308]	@ (800ae88 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	f200 8084 	bhi.w	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ad5a:	4a4c      	ldr	r2, [pc, #304]	@ (800ae8c <TIM_SlaveTimer_SetConfig+0x1c8>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	f000 8083 	beq.w	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ad62:	4a4a      	ldr	r2, [pc, #296]	@ (800ae8c <TIM_SlaveTimer_SetConfig+0x1c8>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d87c      	bhi.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ad68:	4a49      	ldr	r2, [pc, #292]	@ (800ae90 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d07c      	beq.n	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ad6e:	4a48      	ldr	r2, [pc, #288]	@ (800ae90 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d876      	bhi.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ad74:	4a47      	ldr	r2, [pc, #284]	@ (800ae94 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d076      	beq.n	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ad7a:	4a46      	ldr	r2, [pc, #280]	@ (800ae94 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d870      	bhi.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ad80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ad84:	d070      	beq.n	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ad86:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ad8a:	d86a      	bhi.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ad8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad90:	d06a      	beq.n	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800ad92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad96:	d864      	bhi.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ad98:	2b70      	cmp	r3, #112	@ 0x70
 800ad9a:	d01a      	beq.n	800add2 <TIM_SlaveTimer_SetConfig+0x10e>
 800ad9c:	2b70      	cmp	r3, #112	@ 0x70
 800ad9e:	d860      	bhi.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ada0:	2b60      	cmp	r3, #96	@ 0x60
 800ada2:	d054      	beq.n	800ae4e <TIM_SlaveTimer_SetConfig+0x18a>
 800ada4:	2b60      	cmp	r3, #96	@ 0x60
 800ada6:	d85c      	bhi.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800ada8:	2b50      	cmp	r3, #80	@ 0x50
 800adaa:	d046      	beq.n	800ae3a <TIM_SlaveTimer_SetConfig+0x176>
 800adac:	2b50      	cmp	r3, #80	@ 0x50
 800adae:	d858      	bhi.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800adb0:	2b40      	cmp	r3, #64	@ 0x40
 800adb2:	d019      	beq.n	800ade8 <TIM_SlaveTimer_SetConfig+0x124>
 800adb4:	2b40      	cmp	r3, #64	@ 0x40
 800adb6:	d854      	bhi.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800adb8:	2b30      	cmp	r3, #48	@ 0x30
 800adba:	d055      	beq.n	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800adbc:	2b30      	cmp	r3, #48	@ 0x30
 800adbe:	d850      	bhi.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800adc0:	2b20      	cmp	r3, #32
 800adc2:	d051      	beq.n	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800adc4:	2b20      	cmp	r3, #32
 800adc6:	d84c      	bhi.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d04d      	beq.n	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800adcc:	2b10      	cmp	r3, #16
 800adce:	d04b      	beq.n	800ae68 <TIM_SlaveTimer_SetConfig+0x1a4>
 800add0:	e047      	b.n	800ae62 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800ade2:	f000 f8d7 	bl	800af94 <TIM_ETR_SetConfig>
      break;
 800ade6:	e040      	b.n	800ae6a <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b05      	cmp	r3, #5
 800adee:	d101      	bne.n	800adf4 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e03b      	b.n	800ae6c <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6a1b      	ldr	r3, [r3, #32]
 800adfa:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	6a1a      	ldr	r2, [r3, #32]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0201 	bic.w	r2, r2, #1
 800ae0a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	699b      	ldr	r3, [r3, #24]
 800ae12:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ae1a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	621a      	str	r2, [r3, #32]
      break;
 800ae38:	e017      	b.n	800ae6a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae46:	461a      	mov	r2, r3
 800ae48:	f000 f826 	bl	800ae98 <TIM_TI1_ConfigInputStage>
      break;
 800ae4c:	e00d      	b.n	800ae6a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	f000 f84b 	bl	800aef6 <TIM_TI2_ConfigInputStage>
      break;
 800ae60:	e003      	b.n	800ae6a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	75fb      	strb	r3, [r7, #23]
      break;
 800ae66:	e000      	b.n	800ae6a <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800ae68:	bf00      	nop
  }

  return status;
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	ffcfff8f 	.word	0xffcfff8f
 800ae78:	fffefff8 	.word	0xfffefff8
 800ae7c:	00200010 	.word	0x00200010
 800ae80:	00100070 	.word	0x00100070
 800ae84:	00100060 	.word	0x00100060
 800ae88:	00100050 	.word	0x00100050
 800ae8c:	00100040 	.word	0x00100040
 800ae90:	00100030 	.word	0x00100030
 800ae94:	00100020 	.word	0x00100020

0800ae98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b087      	sub	sp, #28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6a1b      	ldr	r3, [r3, #32]
 800aea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	f023 0201 	bic.w	r2, r3, #1
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	699b      	ldr	r3, [r3, #24]
 800aeba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	011b      	lsls	r3, r3, #4
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f023 030a 	bic.w	r3, r3, #10
 800aed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	621a      	str	r2, [r3, #32]
}
 800aeea:	bf00      	nop
 800aeec:	371c      	adds	r7, #28
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr

0800aef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aef6:	b480      	push	{r7}
 800aef8:	b087      	sub	sp, #28
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	60f8      	str	r0, [r7, #12]
 800aefe:	60b9      	str	r1, [r7, #8]
 800af00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	f023 0210 	bic.w	r2, r3, #16
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800af20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	031b      	lsls	r3, r3, #12
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	4313      	orrs	r3, r2
 800af2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800af32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	011b      	lsls	r3, r3, #4
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	621a      	str	r2, [r3, #32]
}
 800af4a:	bf00      	nop
 800af4c:	371c      	adds	r7, #28
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
	...

0800af58 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	4b09      	ldr	r3, [pc, #36]	@ (800af90 <TIM_ITRx_SetConfig+0x38>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	4313      	orrs	r3, r2
 800af76:	f043 0307 	orr.w	r3, r3, #7
 800af7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	609a      	str	r2, [r3, #8]
}
 800af82:	bf00      	nop
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	ffcfff8f 	.word	0xffcfff8f

0800af94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af94:	b480      	push	{r7}
 800af96:	b087      	sub	sp, #28
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
 800afa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800afae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	021a      	lsls	r2, r3, #8
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	431a      	orrs	r2, r3
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	4313      	orrs	r3, r2
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	609a      	str	r2, [r3, #8]
}
 800afc8:	bf00      	nop
 800afca:	371c      	adds	r7, #28
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d101      	bne.n	800afec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afe8:	2302      	movs	r3, #2
 800afea:	e06d      	b.n	800b0c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a30      	ldr	r2, [pc, #192]	@ (800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d004      	beq.n	800b020 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a2f      	ldr	r2, [pc, #188]	@ (800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d108      	bne.n	800b032 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b026:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4313      	orrs	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4313      	orrs	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a20      	ldr	r2, [pc, #128]	@ (800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d022      	beq.n	800b09c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b05e:	d01d      	beq.n	800b09c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a1d      	ldr	r2, [pc, #116]	@ (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d018      	beq.n	800b09c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a1c      	ldr	r2, [pc, #112]	@ (800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d013      	beq.n	800b09c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a1a      	ldr	r2, [pc, #104]	@ (800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d00e      	beq.n	800b09c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a15      	ldr	r2, [pc, #84]	@ (800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d009      	beq.n	800b09c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a16      	ldr	r2, [pc, #88]	@ (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d004      	beq.n	800b09c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a15      	ldr	r2, [pc, #84]	@ (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d10c      	bne.n	800b0b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	40010000 	.word	0x40010000
 800b0d8:	40010400 	.word	0x40010400
 800b0dc:	40000400 	.word	0x40000400
 800b0e0:	40000800 	.word	0x40000800
 800b0e4:	40000c00 	.word	0x40000c00
 800b0e8:	40001800 	.word	0x40001800
 800b0ec:	40014000 	.word	0x40014000

0800b0f0 <arm_scale_f32>:
 800b0f0:	b470      	push	{r4, r5, r6}
 800b0f2:	0896      	lsrs	r6, r2, #2
 800b0f4:	d025      	beq.n	800b142 <arm_scale_f32+0x52>
 800b0f6:	f100 0410 	add.w	r4, r0, #16
 800b0fa:	f101 0310 	add.w	r3, r1, #16
 800b0fe:	4635      	mov	r5, r6
 800b100:	ed14 6a04 	vldr	s12, [r4, #-16]
 800b104:	3d01      	subs	r5, #1
 800b106:	ed54 6a03 	vldr	s13, [r4, #-12]
 800b10a:	f103 0310 	add.w	r3, r3, #16
 800b10e:	ed14 7a02 	vldr	s14, [r4, #-8]
 800b112:	ee26 6a00 	vmul.f32	s12, s12, s0
 800b116:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b11a:	ee66 6a80 	vmul.f32	s13, s13, s0
 800b11e:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b122:	f104 0410 	add.w	r4, r4, #16
 800b126:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b12a:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 800b12e:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800b132:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 800b136:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800b13a:	d1e1      	bne.n	800b100 <arm_scale_f32+0x10>
 800b13c:	0136      	lsls	r6, r6, #4
 800b13e:	4430      	add	r0, r6
 800b140:	4431      	add	r1, r6
 800b142:	f012 0203 	ands.w	r2, r2, #3
 800b146:	d007      	beq.n	800b158 <arm_scale_f32+0x68>
 800b148:	ecf0 7a01 	vldmia	r0!, {s15}
 800b14c:	3a01      	subs	r2, #1
 800b14e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b152:	ece1 7a01 	vstmia	r1!, {s15}
 800b156:	d1f7      	bne.n	800b148 <arm_scale_f32+0x58>
 800b158:	bc70      	pop	{r4, r5, r6}
 800b15a:	4770      	bx	lr

0800b15c <memset>:
 800b15c:	4402      	add	r2, r0
 800b15e:	4603      	mov	r3, r0
 800b160:	4293      	cmp	r3, r2
 800b162:	d100      	bne.n	800b166 <memset+0xa>
 800b164:	4770      	bx	lr
 800b166:	f803 1b01 	strb.w	r1, [r3], #1
 800b16a:	e7f9      	b.n	800b160 <memset+0x4>

0800b16c <__libc_init_array>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	4d0d      	ldr	r5, [pc, #52]	@ (800b1a4 <__libc_init_array+0x38>)
 800b170:	4c0d      	ldr	r4, [pc, #52]	@ (800b1a8 <__libc_init_array+0x3c>)
 800b172:	1b64      	subs	r4, r4, r5
 800b174:	10a4      	asrs	r4, r4, #2
 800b176:	2600      	movs	r6, #0
 800b178:	42a6      	cmp	r6, r4
 800b17a:	d109      	bne.n	800b190 <__libc_init_array+0x24>
 800b17c:	4d0b      	ldr	r5, [pc, #44]	@ (800b1ac <__libc_init_array+0x40>)
 800b17e:	4c0c      	ldr	r4, [pc, #48]	@ (800b1b0 <__libc_init_array+0x44>)
 800b180:	f000 f818 	bl	800b1b4 <_init>
 800b184:	1b64      	subs	r4, r4, r5
 800b186:	10a4      	asrs	r4, r4, #2
 800b188:	2600      	movs	r6, #0
 800b18a:	42a6      	cmp	r6, r4
 800b18c:	d105      	bne.n	800b19a <__libc_init_array+0x2e>
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	f855 3b04 	ldr.w	r3, [r5], #4
 800b194:	4798      	blx	r3
 800b196:	3601      	adds	r6, #1
 800b198:	e7ee      	b.n	800b178 <__libc_init_array+0xc>
 800b19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b19e:	4798      	blx	r3
 800b1a0:	3601      	adds	r6, #1
 800b1a2:	e7f2      	b.n	800b18a <__libc_init_array+0x1e>
 800b1a4:	0800b1e4 	.word	0x0800b1e4
 800b1a8:	0800b1e4 	.word	0x0800b1e4
 800b1ac:	0800b1e4 	.word	0x0800b1e4
 800b1b0:	0800b1e8 	.word	0x0800b1e8

0800b1b4 <_init>:
 800b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b6:	bf00      	nop
 800b1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ba:	bc08      	pop	{r3}
 800b1bc:	469e      	mov	lr, r3
 800b1be:	4770      	bx	lr

0800b1c0 <_fini>:
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	bf00      	nop
 800b1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c6:	bc08      	pop	{r3}
 800b1c8:	469e      	mov	lr, r3
 800b1ca:	4770      	bx	lr
