
STM32H743-DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017d44  08007d80  08007d80  00008d80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801fac4  0801fac4  00020ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0801fac8  0801fac8  00020ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000058  24000000  0801facc  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .dtcm_bss     00009000  20000000  20000000  00022000  2**5
                  ALLOC
  7 .dtcm_data    00000000  20009000  20009000  00021058  2**0
                  CONTENTS
  8 .bss          0001e22c  24000060  24000060  00021060  2**5
                  ALLOC
  9 ._user_heap_stack 00000604  2401e28c  2401e28c  00021060  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00021058  2**0
                  CONTENTS, READONLY
 11 .debug_info   00023888  00000000  00000000  00021086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004655  00000000  00000000  0004490e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000012b0  00000000  00000000  00048f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003db3  00000000  00000000  0004a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025818  00000000  00000000  0004dfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00174b30  00000000  00000000  000737e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  001e8313  2**0
                  CONTENTS, READONLY
 18 .debug_loclists 0000feb0  00000000  00000000  001e83c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001cd6  00000000  00000000  001f8276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003470  00000000  00000000  001f9f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001fd3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000047a9  00000000  00000000  001fd42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000e0  00000000  00000000  00201bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000060 	.word	0x24000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007d64 	.word	0x08007d64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000064 	.word	0x24000064
 80002d4:	08007d64 	.word	0x08007d64

080002d8 <arm_bitreversal_32>:
 80002d8:	1c4b      	adds	r3, r1, #1
 80002da:	2b01      	cmp	r3, #1
 80002dc:	bf98      	it	ls
 80002de:	4770      	bxls	lr
 80002e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002e4:	1c91      	adds	r1, r2, #2
 80002e6:	089b      	lsrs	r3, r3, #2

080002e8 <arm_bitreversal_32_0>:
 80002e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f0:	880a      	ldrh	r2, [r1, #0]
 80002f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002f6:	4480      	add	r8, r0
 80002f8:	4481      	add	r9, r0
 80002fa:	4402      	add	r2, r0
 80002fc:	4484      	add	ip, r0
 80002fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000302:	f8d8 6000 	ldr.w	r6, [r8]
 8000306:	6815      	ldr	r5, [r2, #0]
 8000308:	f8dc 4000 	ldr.w	r4, [ip]
 800030c:	f8c9 6000 	str.w	r6, [r9]
 8000310:	f8c8 7000 	str.w	r7, [r8]
 8000314:	f8cc 5000 	str.w	r5, [ip]
 8000318:	6014      	str	r4, [r2, #0]
 800031a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800031e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000322:	6855      	ldr	r5, [r2, #4]
 8000324:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000328:	f8c9 6004 	str.w	r6, [r9, #4]
 800032c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000330:	f8cc 5004 	str.w	r5, [ip, #4]
 8000334:	6054      	str	r4, [r2, #4]
 8000336:	3108      	adds	r1, #8
 8000338:	3b01      	subs	r3, #1
 800033a:	d1d5      	bne.n	80002e8 <arm_bitreversal_32_0>
 800033c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000340:	4770      	bx	lr

08000342 <arm_bitreversal_16>:
 8000342:	1c4b      	adds	r3, r1, #1
 8000344:	2b01      	cmp	r3, #1
 8000346:	bf98      	it	ls
 8000348:	4770      	bxls	lr
 800034a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800034e:	1c91      	adds	r1, r2, #2
 8000350:	089b      	lsrs	r3, r3, #2

08000352 <arm_bitreversal_16_0>:
 8000352:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000356:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800035a:	880a      	ldrh	r2, [r1, #0]
 800035c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000360:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000364:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000368:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800036c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000370:	f8d9 7000 	ldr.w	r7, [r9]
 8000374:	f8d8 6000 	ldr.w	r6, [r8]
 8000378:	6815      	ldr	r5, [r2, #0]
 800037a:	f8dc 4000 	ldr.w	r4, [ip]
 800037e:	f8c9 6000 	str.w	r6, [r9]
 8000382:	f8c8 7000 	str.w	r7, [r8]
 8000386:	f8cc 5000 	str.w	r5, [ip]
 800038a:	6014      	str	r4, [r2, #0]
 800038c:	3108      	adds	r1, #8
 800038e:	3b01      	subs	r3, #1
 8000390:	d1df      	bne.n	8000352 <arm_bitreversal_16_0>
 8000392:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000396:	4770      	bx	lr

08000398 <HAL_ADC_ConvHalfCpltCallback>:
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800039a:	f003 021f 	and.w	r2, r3, #31
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800039e:	f3bf 8f4f 	dsb	sy
 80003a2:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003a6:	480a      	ldr	r0, [pc, #40]	@ (80003d0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80003a8:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003aa:	f8c0 325c 	str.w	r3, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80003ae:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 80003b0:	1aca      	subs	r2, r1, r3
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	dcf9      	bgt.n	80003aa <HAL_ADC_ConvHalfCpltCallback+0x12>
 80003b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003ba:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[0â€¦BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)adcInput,
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcHalfComplete(&apipe, adcInput);
 80003be:	4805      	ldr	r0, [pc, #20]	@ (80003d4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80003c0:	4902      	ldr	r1, [pc, #8]	@ (80003cc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80003c2:	6943      	ldr	r3, [r0, #20]
 80003c4:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 80003c8:	4718      	bx	r3
 80003ca:	bf00      	nop
 80003cc:	24005080 	.word	0x24005080
 80003d0:	e000ed00 	.word	0xe000ed00
 80003d4:	24015098 	.word	0x24015098

080003d8 <HAL_ADC_ConvCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80003d8:	490d      	ldr	r1, [pc, #52]	@ (8000410 <HAL_ADC_ConvCpltCallback+0x38>)
 80003da:	f001 021f 	and.w	r2, r1, #31
 80003de:	f502 6300 	add.w	r3, r2, #2048	@ 0x800
  __ASM volatile ("dsb 0xF":::"memory");
 80003e2:	f3bf 8f4f 	dsb	sy
 80003e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003ea:	480a      	ldr	r0, [pc, #40]	@ (8000414 <HAL_ADC_ConvCpltCallback+0x3c>)
 80003ec:	4411      	add	r1, r2
 80003ee:	1aca      	subs	r2, r1, r3
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80003f0:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 80003f2:	2b00      	cmp	r3, #0
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003f4:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
      } while ( op_size > 0 );
 80003f8:	dcf9      	bgt.n	80003ee <HAL_ADC_ConvCpltCallback+0x16>
 80003fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003fe:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[BUFFER_SIZEâ€¦2*BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)&adcInput[BUFFER_SIZE],
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcComplete(&apipe, adcInput);
 8000402:	4805      	ldr	r0, [pc, #20]	@ (8000418 <HAL_ADC_ConvCpltCallback+0x40>)
 8000404:	4905      	ldr	r1, [pc, #20]	@ (800041c <HAL_ADC_ConvCpltCallback+0x44>)
 8000406:	6983      	ldr	r3, [r0, #24]
 8000408:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 800040c:	4718      	bx	r3
 800040e:	bf00      	nop
 8000410:	24005880 	.word	0x24005880
 8000414:	e000ed00 	.word	0xe000ed00
 8000418:	24015098 	.word	0x24015098
 800041c:	24005080 	.word	0x24005080

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b530      	push	{r4, r5, lr}
 8000422:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000424:	224c      	movs	r2, #76	@ 0x4c
 8000426:	2100      	movs	r1, #0
 8000428:	a80a      	add	r0, sp, #40	@ 0x28
 800042a:	f007 fc6f 	bl	8007d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042e:	2220      	movs	r2, #32
 8000430:	2100      	movs	r1, #0
 8000432:	a802      	add	r0, sp, #8
 8000434:	f007 fc6a 	bl	8007d0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000438:	2002      	movs	r0, #2
 800043a:	f003 fd3d 	bl	8003eb8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800043e:	4a24      	ldr	r2, [pc, #144]	@ (80004d0 <SystemClock_Config+0xb0>)
 8000440:	2100      	movs	r1, #0
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <SystemClock_Config+0xb4>)
 8000444:	9101      	str	r1, [sp, #4]
 8000446:	6991      	ldr	r1, [r2, #24]
 8000448:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800044c:	6191      	str	r1, [r2, #24]
 800044e:	6991      	ldr	r1, [r2, #24]
 8000450:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 8000454:	9101      	str	r1, [sp, #4]
 8000456:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000458:	f041 0101 	orr.w	r1, r1, #1
 800045c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800045e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000460:	f003 0301 	and.w	r3, r3, #1
 8000464:	9301      	str	r3, [sp, #4]
 8000466:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000468:	6993      	ldr	r3, [r2, #24]
 800046a:	049b      	lsls	r3, r3, #18
 800046c:	d5fc      	bpl.n	8000468 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046e:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000470:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000472:	2101      	movs	r1, #1
 8000474:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000478:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
 800047e:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000480:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000482:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000484:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000486:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800048a:	230c      	movs	r3, #12
 800048c:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLN = 60;
 800048e:	233c      	movs	r3, #60	@ 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000490:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000494:	e9cd 5315 	strd	r5, r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f003 fda4 	bl	8003fe4 <HAL_RCC_OscConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	b108      	cbz	r0, 80004a4 <SystemClock_Config+0x84>
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a4:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004a8:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004aa:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ae:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004b0:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004b2:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b4:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004b6:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004be:	e9cd 4307 	strd	r4, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004c2:	f004 f90b 	bl	80046dc <HAL_RCC_ClockConfig>
 80004c6:	b108      	cbz	r0, 80004cc <SystemClock_Config+0xac>
 80004c8:	b672      	cpsid	i
  while (1)
 80004ca:	e7fe      	b.n	80004ca <SystemClock_Config+0xaa>
}
 80004cc:	b01f      	add	sp, #124	@ 0x7c
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	58024800 	.word	0x58024800
 80004d4:	58000400 	.word	0x58000400

080004d8 <PeriphCommonClock_Config>:
{
 80004d8:	b500      	push	{lr}
 80004da:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004dc:	22b8      	movs	r2, #184	@ 0xb8
 80004de:	2100      	movs	r1, #0
 80004e0:	a802      	add	r0, sp, #8
 80004e2:	f007 fc13 	bl	8007d0c <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80004e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80004ea:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004ec:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80004ee:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004f2:	f004 fb85 	bl	8004c00 <HAL_RCCEx_PeriphCLKConfig>
 80004f6:	b108      	cbz	r0, 80004fc <PeriphCommonClock_Config+0x24>
 80004f8:	b672      	cpsid	i
  while (1)
 80004fa:	e7fe      	b.n	80004fa <PeriphCommonClock_Config+0x22>
}
 80004fc:	b031      	add	sp, #196	@ 0xc4
 80004fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000502:	bf00      	nop

08000504 <main>:
{
 8000504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000508:	2400      	movs	r4, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800050a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4d7f      	ldr	r5, [pc, #508]	@ (800070c <main+0x208>)
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 800050e:	2708      	movs	r7, #8
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
 8000510:	f44f 5800 	mov.w	r8, #8192	@ 0x2000
{
 8000514:	ed2d 8b02 	vpush	{d8}
 8000518:	b093      	sub	sp, #76	@ 0x4c
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800051a:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 800051e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_MPU_Disable();
 8000522:	f002 f801 	bl	8002528 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000526:	f248 721f 	movw	r2, #34591	@ 0x871f
 800052a:	f240 1301 	movw	r3, #257	@ 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800052e:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000530:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000534:	930c      	str	r3, [sp, #48]	@ 0x30
 8000536:	e9cd 420a 	strd	r4, r2, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800053a:	f002 f813 	bl	8002564 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800053e:	2004      	movs	r0, #4
 8000540:	f002 f800 	bl	8002544 <HAL_MPU_Enable>
  HAL_Init();
 8000544:	f001 f806 	bl	8001554 <HAL_Init>
  SystemClock_Config();
 8000548:	f7ff ff6a 	bl	8000420 <SystemClock_Config>
  PeriphCommonClock_Config();
 800054c:	f7ff ffc4 	bl	80004d8 <PeriphCommonClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000554:	a909      	add	r1, sp, #36	@ 0x24
 8000556:	486e      	ldr	r0, [pc, #440]	@ (8000710 <main+0x20c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4333      	orrs	r3, r6
 800055a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800055e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000562:	4033      	ands	r3, r6
 8000564:	9304      	str	r3, [sp, #16]
 8000566:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000568:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000574:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 8000578:	9709      	str	r7, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	9305      	str	r3, [sp, #20]
 8000580:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000582:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058a:	f003 fa8b 	bl	8003aa4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);   // set high
 800058e:	4632      	mov	r2, r6
 8000590:	4639      	mov	r1, r7
 8000592:	485f      	ldr	r0, [pc, #380]	@ (8000710 <main+0x20c>)
 8000594:	f003 fc8c 	bl	8003eb0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000598:	a909      	add	r1, sp, #36	@ 0x24
 800059a:	485d      	ldr	r0, [pc, #372]	@ (8000710 <main+0x20c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
 800059e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80005a2:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a6:	f003 fa7d 	bl	8003aa4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // set high
 80005aa:	4632      	mov	r2, r6
 80005ac:	4641      	mov	r1, r8
 80005ae:	4858      	ldr	r0, [pc, #352]	@ (8000710 <main+0x20c>)
 80005b0:	f003 fc7e 	bl	8003eb0 <HAL_GPIO_WritePin>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b4:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005b8:	4622      	mov	r2, r4
 80005ba:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005bc:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005be:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c0:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 80005c4:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc1.Instance = ADC1;
 80005c8:	4d52      	ldr	r5, [pc, #328]	@ (8000714 <main+0x210>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ca:	4033      	ands	r3, r6
 80005cc:	9303      	str	r3, [sp, #12]
 80005ce:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005d0:	f001 ff4a 	bl	8002468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005d4:	200b      	movs	r0, #11
 80005d6:	f001 ff83 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005da:	4622      	mov	r2, r4
 80005dc:	4621      	mov	r1, r4
 80005de:	200c      	movs	r0, #12
 80005e0:	f001 ff42 	bl	8002468 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005e4:	200c      	movs	r0, #12
 80005e6:	f001 ff7b 	bl	80024e0 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005ea:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005ee:	612f      	str	r7, [r5, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005f0:	f44f 6c9c 	mov.w	ip, #1248	@ 0x4e0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005f4:	4f48      	ldr	r7, [pc, #288]	@ (8000718 <main+0x214>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f6:	4628      	mov	r0, r5
  ADC_MultiModeTypeDef multimode = {0};
 80005f8:	9406      	str	r4, [sp, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	940f      	str	r4, [sp, #60]	@ 0x3c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005fc:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 80005fe:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000600:	772c      	strb	r4, [r5, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 8000602:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000606:	63ee      	str	r6, [r5, #60]	@ 0x3c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000608:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800060c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000610:	e9c5 c309 	strd	ip, r3, [r5, #36]	@ 0x24
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000614:	2303      	movs	r3, #3
  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 800061a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800061e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  ADC_MultiModeTypeDef multimode = {0};
 8000622:	e9cd 4407 	strd	r4, r4, [sp, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000626:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800062a:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800062e:	62eb      	str	r3, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000630:	f001 fd3e 	bl	80020b0 <HAL_ADC_Init>
 8000634:	b108      	cbz	r0, 800063a <main+0x136>
 8000636:	b672      	cpsid	i
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x134>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800063a:	9006      	str	r0, [sp, #24]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800063c:	a906      	add	r1, sp, #24
 800063e:	4628      	mov	r0, r5
 8000640:	f001 fe9e 	bl	8002380 <HAL_ADCEx_MultiModeConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	b108      	cbz	r0, 800064c <main+0x148>
 8000648:	b672      	cpsid	i
  while (1)
 800064a:	e7fe      	b.n	800064a <main+0x146>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064c:	4c33      	ldr	r4, [pc, #204]	@ (800071c <main+0x218>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064e:	4628      	mov	r0, r5
  sConfig.Offset = 0;
 8000650:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000652:	2505      	movs	r5, #5
  sConfig.OffsetSignedSaturation = DISABLE;
 8000654:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000658:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065a:	a909      	add	r1, sp, #36	@ 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000660:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000664:	e9cd 530b 	strd	r5, r3, [sp, #44]	@ 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000668:	2304      	movs	r3, #4
 800066a:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	f001 f944 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000670:	b108      	cbz	r0, 8000676 <main+0x172>
 8000672:	b672      	cpsid	i
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x170>
  htim8.Instance = TIM8;
 8000676:	4c2a      	ldr	r4, [pc, #168]	@ (8000720 <main+0x21c>)
  htim8.Init.Prescaler = 50-1;
 8000678:	2331      	movs	r3, #49	@ 0x31
 800067a:	4a2a      	ldr	r2, [pc, #168]	@ (8000724 <main+0x220>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	9008      	str	r0, [sp, #32]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067e:	60a0      	str	r0, [r4, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000680:	61a0      	str	r0, [r4, #24]
  htim8.Init.Prescaler = 50-1;
 8000682:	e9c4 2300 	strd	r2, r3, [r4]
  htim8.Init.Period = 100-1;
 8000686:	2363      	movs	r3, #99	@ 0x63
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000688:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800068c:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	e9cd 0006 	strd	r0, r0, [sp, #24]
  htim8.Init.RepetitionCounter = 0;
 8000694:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000698:	4620      	mov	r0, r4
  htim8.Init.Period = 100-1;
 800069a:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800069c:	f005 fd62 	bl	8006164 <HAL_TIM_Base_Init>
 80006a0:	b108      	cbz	r0, 80006a6 <main+0x1a2>
 80006a2:	b672      	cpsid	i
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <main+0x1a0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80006aa:	a909      	add	r1, sp, #36	@ 0x24
 80006ac:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ae:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80006b0:	f005 fe4c 	bl	800634c <HAL_TIM_ConfigClockSource>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b108      	cbz	r0, 80006bc <main+0x1b8>
 80006b8:	b672      	cpsid	i
  while (1)
 80006ba:	e7fe      	b.n	80006ba <main+0x1b6>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006c0:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006c2:	a906      	add	r1, sp, #24
 80006c4:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006c6:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006c8:	f005 ff08 	bl	80064dc <HAL_TIMEx_MasterConfigSynchronization>
 80006cc:	4601      	mov	r1, r0
 80006ce:	b108      	cbz	r0, 80006d4 <main+0x1d0>
 80006d0:	b672      	cpsid	i
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <main+0x1ce>
  DAC_ChannelConfTypeDef sConfig = {0};
 80006d4:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 80006d6:	4c14      	ldr	r4, [pc, #80]	@ (8000728 <main+0x224>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80006d8:	eb0d 0002 	add.w	r0, sp, r2
 80006dc:	f007 fb16 	bl	8007d0c <memset>
  hdac1.Instance = DAC1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <main+0x228>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006e2:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 80006e4:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006e6:	f001 ff6d 	bl	80025c4 <HAL_DAC_Init>
 80006ea:	4602      	mov	r2, r0
 80006ec:	b108      	cbz	r0, 80006f2 <main+0x1ee>
 80006ee:	b672      	cpsid	i
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x1ec>
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80006f2:	231e      	movs	r3, #30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006f4:	a909      	add	r1, sp, #36	@ 0x24
 80006f6:	4620      	mov	r0, r4
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006f8:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80006fa:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006fe:	e9cd 260b 	strd	r2, r6, [sp, #44]	@ 0x2c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000702:	f002 f843 	bl	800278c <HAL_DAC_ConfigChannel>
 8000706:	b198      	cbz	r0, 8000730 <main+0x22c>
 8000708:	b672      	cpsid	i
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x206>
 800070c:	58024400 	.word	0x58024400
 8000710:	58020800 	.word	0x58020800
 8000714:	24015214 	.word	0x24015214
 8000718:	40022000 	.word	0x40022000
 800071c:	43210000 	.word	0x43210000
 8000720:	240150c4 	.word	0x240150c4
 8000724:	40010400 	.word	0x40010400
 8000728:	24015188 	.word	0x24015188
 800072c:	40007400 	.word	0x40007400
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000730:	4b65      	ldr	r3, [pc, #404]	@ (80008c8 <main+0x3c4>)
 8000732:	695a      	ldr	r2, [r3, #20]
 8000734:	f412 3280 	ands.w	r2, r2, #65536	@ 0x10000
 8000738:	d123      	bne.n	8000782 <main+0x27e>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800073a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800073e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8000742:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000746:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800074a:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800074e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8000752:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000754:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000758:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800075a:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
      } while (ways-- != 0U);
 800075e:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000760:	f8c3 6260 	str.w	r6, [r3, #608]	@ 0x260
      } while (ways-- != 0U);
 8000764:	d2f9      	bcs.n	800075a <main+0x256>
    } while(sets-- != 0U);
 8000766:	3a20      	subs	r2, #32
 8000768:	f112 0f20 	cmn.w	r2, #32
 800076c:	d1f2      	bne.n	8000754 <main+0x250>
 800076e:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800077e:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000782:	4b51      	ldr	r3, [pc, #324]	@ (80008c8 <main+0x3c4>)
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800078a:	d111      	bne.n	80007b0 <main+0x2ac>
  __ASM volatile ("dsb 0xF":::"memory");
 800078c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000790:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000794:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000798:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800079c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80007a6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007ac:	f3bf 8f6f 	isb	sy
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 80007b0:	4845      	ldr	r0, [pc, #276]	@ (80008c8 <main+0x3c4>)
  DWT->CYCCNT  = 0;                                // clear counter
 80007b2:	2400      	movs	r4, #0
 80007b4:	4b45      	ldr	r3, [pc, #276]	@ (80008cc <main+0x3c8>)
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80007b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 80007ba:	f8d0 20fc 	ldr.w	r2, [r0, #252]	@ 0xfc
 80007be:	4f44      	ldr	r7, [pc, #272]	@ (80008d0 <main+0x3cc>)
 80007c0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80007c4:	4e43      	ldr	r6, [pc, #268]	@ (80008d4 <main+0x3d0>)
 80007c6:	f8df a134 	ldr.w	sl, [pc, #308]	@ 80008fc <main+0x3f8>
 80007ca:	f5a7 4930 	sub.w	r9, r7, #45056	@ 0xb000
 80007ce:	f8c0 20fc 	str.w	r2, [r0, #252]	@ 0xfc
		 apipe.updateDelayBuffer(&apipe);
 80007d2:	f5a7 4870 	sub.w	r8, r7, #61440	@ 0xf000
  DWT->CYCCNT  = 0;                                // clear counter
 80007d6:	605c      	str	r4, [r3, #4]
		 arm_copy_f32(apipe.processBuffer, apipe.outBuffer, BUFFER_SIZE);
 80007d8:	f5a6 5b80 	sub.w	fp, r6, #4096	@ 0x1000
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 80007dc:	681a      	ldr	r2, [r3, #0]
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80007de:	483e      	ldr	r0, [pc, #248]	@ (80008d8 <main+0x3d4>)
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 80007e0:	f042 0201 	orr.w	r2, r2, #1
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80007e4:	4d3d      	ldr	r5, [pc, #244]	@ (80008dc <main+0x3d8>)
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 80007e6:	601a      	str	r2, [r3, #0]
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80007e8:	f005 ff20 	bl	800662c <arm_rfft_fast_init_f32>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80007ec:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007f0:	4621      	mov	r1, r4
 80007f2:	483b      	ldr	r0, [pc, #236]	@ (80008e0 <main+0x3dc>)
 80007f4:	f001 fd68 	bl	80022c8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcInput, BUFFER_SIZE*2);
 80007f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007fc:	4939      	ldr	r1, [pc, #228]	@ (80008e4 <main+0x3e0>)
 80007fe:	4838      	ldr	r0, [pc, #224]	@ (80008e0 <main+0x3dc>)
 8000800:	f001 fae2 	bl	8001dc8 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 8000804:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000808:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <main+0x3e4>)
 800080a:	4621      	mov	r1, r4
 800080c:	4837      	ldr	r0, [pc, #220]	@ (80008ec <main+0x3e8>)
 800080e:	9400      	str	r4, [sp, #0]
 8000810:	f001 feee 	bl	80025f0 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 8000814:	4836      	ldr	r0, [pc, #216]	@ (80008f0 <main+0x3ec>)
 8000816:	f005 fd4b 	bl	80062b0 <HAL_TIM_Base_Start>
  pipeInit(&apipe);
 800081a:	4836      	ldr	r0, [pc, #216]	@ (80008f4 <main+0x3f0>)
 800081c:	f000 fb6e 	bl	8000efc <pipeInit>
  supro_init_f32();
 8000820:	f000 fcd0 	bl	80011c4 <supro_init_f32>
	  if (apipe.bufferReady)
 8000824:	7c3b      	ldrb	r3, [r7, #16]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d04c      	beq.n	80008c4 <main+0x3c0>
		 apipe.updateDelayBuffer(&apipe);
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	4640      	mov	r0, r8
 800082e:	4798      	blx	r3
			 if(apipe.processBuffer[i] <= -1 || apipe.processBuffer[i] >= 1 ){
 8000830:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
		 apipe.loadProcess(&apipe);
 8000834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000836:	4640      	mov	r0, r8
 8000838:	4798      	blx	r3
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 800083a:	4c2f      	ldr	r4, [pc, #188]	@ (80008f8 <main+0x3f4>)
 800083c:	2201      	movs	r2, #1
 800083e:	2108      	movs	r1, #8
 8000840:	4628      	mov	r0, r5
 8000842:	f003 fb35 	bl	8003eb0 <HAL_GPIO_WritePin>
		 supro_sim.process(&apipe);
 8000846:	f8da 300c 	ldr.w	r3, [sl, #12]
 800084a:	4640      	mov	r0, r8
 800084c:	4798      	blx	r3
			 if(apipe.processBuffer[i] <= -1 || apipe.processBuffer[i] >= 1 ){
 800084e:	ecf4 7a01 	vldmia	r4!, {s15}
 8000852:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
			 if(apipe.processBuffer[i] <= -1 || apipe.processBuffer[i] >= 1 ){
 800085c:	eef4 7ac8 	vcmpe.f32	s15, s16
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000860:	4628      	mov	r0, r5
			 if(apipe.processBuffer[i] <= -1 || apipe.processBuffer[i] >= 1 ){
 8000862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000866:	d904      	bls.n	8000872 <main+0x36e>
 8000868:	eef4 7a47 	vcmp.f32	s15, s14
 800086c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000870:	db01      	blt.n	8000876 <main+0x372>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000872:	f003 fb1d 	bl	8003eb0 <HAL_GPIO_WritePin>
		 for(int i =0; i < BUFFER_SIZE; i++){
 8000876:	42a6      	cmp	r6, r4
 8000878:	d1e9      	bne.n	800084e <main+0x34a>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 800087a:	4628      	mov	r0, r5
		 apipe.updateDACOutput(&apipe, dacOutput);
 800087c:	4c1a      	ldr	r4, [pc, #104]	@ (80008e8 <main+0x3e4>)
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2108      	movs	r1, #8
 8000882:	f003 fb15 	bl	8003eb0 <HAL_GPIO_WritePin>
		 arm_copy_f32(apipe.processBuffer, apipe.outBuffer, BUFFER_SIZE);
 8000886:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800088a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800088e:	4658      	mov	r0, fp
 8000890:	f005 fe9c 	bl	80065cc <arm_copy_f32>
		 apipe.updateDACOutput(&apipe, dacOutput);
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	4640      	mov	r0, r8
 8000898:	4621      	mov	r1, r4
 800089a:	4798      	blx	r3
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800089c:	f004 021f 	and.w	r2, r4, #31
 80008a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
  __ASM volatile ("dsb 0xF":::"memory");
 80008a4:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80008a8:	4907      	ldr	r1, [pc, #28]	@ (80008c8 <main+0x3c4>)
 80008aa:	3a20      	subs	r2, #32
 80008ac:	f8c1 4268 	str.w	r4, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80008b0:	3420      	adds	r4, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	dcf9      	bgt.n	80008aa <main+0x3a6>
 80008b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008ba:	f3bf 8f6f 	isb	sy
		 apipe.bufferReady = false;
 80008be:	2300      	movs	r3, #0
 80008c0:	743b      	strb	r3, [r7, #16]
 80008c2:	e7af      	b.n	8000824 <main+0x320>
	      __WFI();
 80008c4:	bf30      	wfi
 80008c6:	e7ad      	b.n	8000824 <main+0x320>
 80008c8:	e000ed00 	.word	0xe000ed00
 80008cc:	e0001000 	.word	0xe0001000
 80008d0:	24015098 	.word	0x24015098
 80008d4:	2400b0a0 	.word	0x2400b0a0
 80008d8:	24006080 	.word	0x24006080
 80008dc:	58020800 	.word	0x58020800
 80008e0:	24015214 	.word	0x24015214
 80008e4:	24005080 	.word	0x24005080
 80008e8:	24004080 	.word	0x24004080
 80008ec:	24015188 	.word	0x24015188
 80008f0:	240150c4 	.word	0x240150c4
 80008f4:	24006098 	.word	0x24006098
 80008f8:	2400a0a0 	.word	0x2400a0a0
 80008fc:	24000038 	.word	0x24000038

08000900 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
  while (1)
 8000902:	e7fe      	b.n	8000902 <Error_Handler+0x2>

08000904 <partitioned_fir_convolution_fft>:
#include "partitioned_fir_convolution_fft.h"

void partitioned_fir_convolution_fft(pipe *pipe, fir_t *fir, float* state, float* fftOut, float* zeropad )
{
 8000904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	float *zeropaddedinput = zeropad;
	float *overlap         = state;

    // prepare input
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 8000908:	f244 0608 	movw	r6, #16392	@ 0x4008
{
 800090c:	b08d      	sub	sp, #52	@ 0x34
 800090e:	460d      	mov	r5, r1
 8000910:	461f      	mov	r7, r3
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 8000912:	4406      	add	r6, r0
 8000914:	9916      	ldr	r1, [sp, #88]	@ 0x58
{
 8000916:	9208      	str	r2, [sp, #32]
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 8000918:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800091c:	4630      	mov	r0, r6
 800091e:	f507 5800 	add.w	r8, r7, #8192	@ 0x2000
 8000922:	f005 fe53 	bl	80065cc <arm_copy_f32>
    arm_fill_f32(0.0f, &zeropaddedinput[BUFFER_SIZE], BUFFER_SIZE);
 8000926:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8000928:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 80009e8 <partitioned_fir_convolution_fft+0xe4>
 800092c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000930:	f503 5480 	add.w	r4, r3, #4096	@ 0x1000
 8000934:	4620      	mov	r0, r4
 8000936:	f005 fe2b 	bl	8006590 <arm_fill_f32>

    // forward FFT
    arm_rfft_fast_f32(&fft, zeropaddedinput, fftOut, 0);
 800093a:	2300      	movs	r3, #0
 800093c:	463a      	mov	r2, r7
 800093e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8000940:	482a      	ldr	r0, [pc, #168]	@ (80009ec <partitioned_fir_convolution_fft+0xe8>)
 8000942:	f005 ff25 	bl	8006790 <arm_rfft_fast_f32>

    // save index and spectrum
    fir->prev_fftidx = fir->curr_fftidx;
 8000946:	68ab      	ldr	r3, [r5, #8]
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 8000948:	686a      	ldr	r2, [r5, #4]
 800094a:	4638      	mov	r0, r7
    fir->prev_fftidx = fir->curr_fftidx;
 800094c:	60eb      	str	r3, [r5, #12]
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 800094e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000956:	f005 fe39 	bl	80065cc <arm_copy_f32>

    const uint32_t segs = fir->numSegments;
 800095a:	692a      	ldr	r2, [r5, #16]
 800095c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
    uint32_t i = 0;
    uint32_t idx = fir->prev_fftidx;
 8000960:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    const uint32_t segs = fir->numSegments;
 8000964:	9201      	str	r2, [sp, #4]
    uint32_t i = 0;
 8000966:	f04f 0c00 	mov.w	ip, #0

    // partitioned convolution with pointer arithmetic
    do {
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 800096a:	686a      	ldr	r2, [r5, #4]
                 // tail loop for any remaining bins
                 for (uint32_t rem = (FFT_SIZE % 20) / 2;  rem--;  ) {
                     float xr = *xPtr++;  float xi = *xPtr++;
                     float hr = *hPtr++;  float hi = *hPtr++;

                     float accR = __builtin_fmaf(xr, hr,
 800096c:	f603 7be8 	addw	fp, r3, #4072	@ 0xfe8
                                    __builtin_fmaf(-xi, hi, *yPtr));
                     float accI = __builtin_fmaf(xr, hi,
 8000970:	f603 7aec 	addw	sl, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 8000974:	f503 697f 	add.w	r9, r3, #4080	@ 0xff0
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8000978:	9203      	str	r2, [sp, #12]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 800097a:	682a      	ldr	r2, [r5, #0]
                     float accI = __builtin_fmaf(xr, hi,
 800097c:	9609      	str	r6, [sp, #36]	@ 0x24
 800097e:	4676      	mov	r6, lr
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8000980:	9204      	str	r2, [sp, #16]
		}
		if (idx-- == 0) {
			idx = segs - 1;
		}

    } while (idx != fir->curr_fftidx);
 8000982:	68aa      	ldr	r2, [r5, #8]
                     float accI = __builtin_fmaf(xr, hi,
 8000984:	950a      	str	r5, [sp, #40]	@ 0x28
    } while (idx != fir->curr_fftidx);
 8000986:	9202      	str	r2, [sp, #8]
 8000988:	f107 0258 	add.w	r2, r7, #88	@ 0x58
                     float accI = __builtin_fmaf(xr, hi,
 800098c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800098e:	9207      	str	r2, [sp, #28]
 8000990:	f603 72f4 	addw	r2, r3, #4084	@ 0xff4
 8000994:	9205      	str	r2, [sp, #20]
                     float accR = __builtin_fmaf(xr, hr,
 8000996:	f603 72f8 	addw	r2, r3, #4088	@ 0xff8
                     float accI = __builtin_fmaf(xr, hi,
 800099a:	f603 73fc 	addw	r3, r3, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 800099e:	9206      	str	r2, [sp, #24]
                     float accI = __builtin_fmaf(xr, hi,
 80009a0:	469e      	mov	lr, r3
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 80009a2:	9b03      	ldr	r3, [sp, #12]
 80009a4:	f242 0038 	movw	r0, #8248	@ 0x2038
                 yPtr[0] += xPtr[0] * hPtr[0];
 80009a8:	ed97 7a00 	vldr	s14, [r7]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 80009ac:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 80009b0:	9b04      	ldr	r3, [sp, #16]
                 yPtr[0] += xPtr[0] * hPtr[0];
 80009b2:	ed94 6a00 	vldr	s12, [r4]
 80009b6:	f104 0258 	add.w	r2, r4, #88	@ 0x58
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 80009ba:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
                 yPtr[0] += xPtr[0] * hPtr[0];
 80009be:	1820      	adds	r0, r4, r0
                 yPtr[1] += xPtr[1] * hPtr[1];
 80009c0:	edd7 7a01 	vldr	s15, [r7, #4]
                 yPtr[0] += xPtr[0] * hPtr[0];
 80009c4:	edd5 6a00 	vldr	s13, [r5]
 80009c8:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 80009cc:	9b07      	ldr	r3, [sp, #28]
 80009ce:	eea6 7a26 	vfma.f32	s14, s12, s13
 80009d2:	ed87 7a00 	vstr	s14, [r7]
                 yPtr[1] += xPtr[1] * hPtr[1];
 80009d6:	edd4 6a01 	vldr	s13, [r4, #4]
 80009da:	ed95 7a01 	vldr	s14, [r5, #4]
 80009de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80009e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80009e6:	e003      	b.n	80009f0 <partitioned_fir_convolution_fft+0xec>
 80009e8:	00000000 	.word	0x00000000
 80009ec:	24006080 	.word	0x24006080
                         float xr = *xPtr++; float xi = *xPtr++;
 80009f0:	ed52 7a13 	vldr	s15, [r2, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80009f4:	3250      	adds	r2, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 80009f6:	ed51 2a14 	vldr	s5, [r1, #-80]	@ 0xffffffb0
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80009fa:	3350      	adds	r3, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 80009fc:	ed51 3a13 	vldr	s7, [r1, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8000a00:	3150      	adds	r1, #80	@ 0x50
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a02:	ed13 4a28 	vldr	s8, [r3, #-160]	@ 0xffffff60
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a06:	ed53 4a27 	vldr	s9, [r3, #-156]	@ 0xffffff64
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a0a:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a0e:	ed12 3a28 	vldr	s6, [r2, #-160]	@ 0xffffff60
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a12:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a16:	ed13 5a26 	vldr	s10, [r3, #-152]	@ 0xffffff68
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a1a:	ed53 5a25 	vldr	s11, [r3, #-148]	@ 0xffffff6c
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a1e:	ed53 6a24 	vldr	s13, [r3, #-144]	@ 0xffffff70
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a22:	ed13 6a23 	vldr	s12, [r3, #-140]	@ 0xffffff74
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a26:	ed13 7a22 	vldr	s14, [r3, #-136]	@ 0xffffff78
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a2a:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a2e:	ed53 7a21 	vldr	s15, [r3, #-132]	@ 0xffffff7c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a32:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 8000a36:	ed03 4a28 	vstr	s8, [r3, #-160]	@ 0xffffff60
                         *(yPtr+1) = accI;
 8000a3a:	ed43 4a27 	vstr	s9, [r3, #-156]	@ 0xffffff64
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a3e:	ed12 3a25 	vldr	s6, [r2, #-148]	@ 0xffffff6c
                         float hr = *hPtr++; float hi = *hPtr++;
 8000a42:	ed51 3a26 	vldr	s7, [r1, #-152]	@ 0xffffff68
 8000a46:	ed51 4a25 	vldr	s9, [r1, #-148]	@ 0xffffff6c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a4a:	eee3 5a23 	vfma.f32	s11, s6, s7
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a4e:	ed12 4a26 	vldr	s8, [r2, #-152]	@ 0xffffff68
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a52:	eea3 5a64 	vfms.f32	s10, s6, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a56:	eee4 5a24 	vfma.f32	s11, s8, s9
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a5a:	eea4 5a23 	vfma.f32	s10, s8, s7
                         *(yPtr+1) = accI;
 8000a5e:	ed43 5a25 	vstr	s11, [r3, #-148]	@ 0xffffff6c
                         *yPtr     = accR;
 8000a62:	ed03 5a26 	vstr	s10, [r3, #-152]	@ 0xffffff68
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a66:	ed12 4a23 	vldr	s8, [r2, #-140]	@ 0xffffff74
                         float hr = *hPtr++; float hi = *hPtr++;
 8000a6a:	ed51 5a24 	vldr	s11, [r1, #-144]	@ 0xffffff70
 8000a6e:	ed51 4a23 	vldr	s9, [r1, #-140]	@ 0xffffff74
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a72:	eea4 6a25 	vfma.f32	s12, s8, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a76:	ed12 5a24 	vldr	s10, [r2, #-144]	@ 0xffffff70
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a7a:	eee4 6a64 	vfms.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a7e:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a82:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *(yPtr+1) = accI;
 8000a86:	ed03 6a23 	vstr	s12, [r3, #-140]	@ 0xffffff74
                         *yPtr     = accR;
 8000a8a:	ed43 6a24 	vstr	s13, [r3, #-144]	@ 0xffffff70
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a8e:	ed12 5a21 	vldr	s10, [r2, #-132]	@ 0xffffff7c
                         float hr = *hPtr++; float hi = *hPtr++;
 8000a92:	ed51 5a22 	vldr	s11, [r1, #-136]	@ 0xffffff78
 8000a96:	ed51 6a21 	vldr	s13, [r1, #-132]	@ 0xffffff7c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a9a:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a9e:	ed12 6a22 	vldr	s12, [r2, #-136]	@ 0xffffff78
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000aa2:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000aa6:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000aaa:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8000aae:	ed43 7a21 	vstr	s15, [r3, #-132]	@ 0xffffff7c
                         *yPtr     = accR;
 8000ab2:	ed03 7a22 	vstr	s14, [r3, #-136]	@ 0xffffff78
                         float xr = *xPtr++; float xi = *xPtr++;
 8000ab6:	ed12 3a20 	vldr	s6, [r2, #-128]	@ 0xffffff80
 8000aba:	ed52 7a1f 	vldr	s15, [r2, #-124]	@ 0xffffff84
                         float hr = *hPtr++; float hi = *hPtr++;
 8000abe:	ed51 3a1f 	vldr	s7, [r1, #-124]	@ 0xffffff84
 8000ac2:	ed51 2a20 	vldr	s5, [r1, #-128]	@ 0xffffff80
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ac6:	ed13 4a20 	vldr	s8, [r3, #-128]	@ 0xffffff80
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000aca:	ed53 4a1f 	vldr	s9, [r3, #-124]	@ 0xffffff84
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ace:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ad2:	ed53 5a1e 	vldr	s11, [r3, #-120]	@ 0xffffff88
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000ad6:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000ada:	ed13 5a1d 	vldr	s10, [r3, #-116]	@ 0xffffff8c
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ade:	ed13 6a1c 	vldr	s12, [r3, #-112]	@ 0xffffff90
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000ae2:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ae6:	ed53 7a1a 	vldr	s15, [r3, #-104]	@ 0xffffff98
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000aea:	ed13 7a19 	vldr	s14, [r3, #-100]	@ 0xffffff9c
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000aee:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000af2:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 8000af6:	ed03 4a20 	vstr	s8, [r3, #-128]	@ 0xffffff80
                         *(yPtr+1) = accI;
 8000afa:	ed43 4a1f 	vstr	s9, [r3, #-124]	@ 0xffffff84
                         float xr = *xPtr++; float xi = *xPtr++;
 8000afe:	ed12 3a1d 	vldr	s6, [r2, #-116]	@ 0xffffff8c
                         float hr = *hPtr++; float hi = *hPtr++;
 8000b02:	ed51 4a1e 	vldr	s9, [r1, #-120]	@ 0xffffff88
 8000b06:	ed51 3a1d 	vldr	s7, [r1, #-116]	@ 0xffffff8c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b0a:	eea3 5a24 	vfma.f32	s10, s6, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b0e:	ed12 4a1e 	vldr	s8, [r2, #-120]	@ 0xffffff88
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b12:	eee3 5a63 	vfms.f32	s11, s6, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b16:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b1a:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *(yPtr+1) = accI;
 8000b1e:	ed03 5a1d 	vstr	s10, [r3, #-116]	@ 0xffffff8c
                         *yPtr     = accR;
 8000b22:	ed43 5a1e 	vstr	s11, [r3, #-120]	@ 0xffffff88
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b26:	ed12 4a1b 	vldr	s8, [r2, #-108]	@ 0xffffff94
                         float hr = *hPtr++; float hi = *hPtr++;
 8000b2a:	ed51 4a1c 	vldr	s9, [r1, #-112]	@ 0xffffff90
 8000b2e:	ed51 5a1b 	vldr	s11, [r1, #-108]	@ 0xffffff94
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b32:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b36:	ed12 5a1c 	vldr	s10, [r2, #-112]	@ 0xffffff90
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b3a:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b3e:	eee5 6a25 	vfma.f32	s13, s10, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b42:	eea5 6a24 	vfma.f32	s12, s10, s9
                         *(yPtr+1) = accI;
 8000b46:	ed43 6a1b 	vstr	s13, [r3, #-108]	@ 0xffffff94
                         *yPtr     = accR;
 8000b4a:	ed03 6a1c 	vstr	s12, [r3, #-112]	@ 0xffffff90
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b4e:	ed12 5a19 	vldr	s10, [r2, #-100]	@ 0xffffff9c
                         float hr = *hPtr++; float hi = *hPtr++;
 8000b52:	ed51 6a1a 	vldr	s13, [r1, #-104]	@ 0xffffff98
 8000b56:	ed51 5a19 	vldr	s11, [r1, #-100]	@ 0xffffff9c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b5a:	eea5 7a26 	vfma.f32	s14, s10, s13
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b5e:	ed12 6a1a 	vldr	s12, [r2, #-104]	@ 0xffffff98
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b62:	eee5 7a65 	vfms.f32	s15, s10, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b66:	eea6 7a25 	vfma.f32	s14, s12, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b6a:	eee6 7a26 	vfma.f32	s15, s12, s13
                         *(yPtr+1) = accI;
 8000b6e:	ed03 7a19 	vstr	s14, [r3, #-100]	@ 0xffffff9c
                         *yPtr     = accR;
 8000b72:	ed43 7a1a 	vstr	s15, [r3, #-104]	@ 0xffffff98
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b76:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8000b7a:	ed12 4a17 	vldr	s8, [r2, #-92]	@ 0xffffffa4
                         float hr = *hPtr++; float hi = *hPtr++;
 8000b7e:	ed51 5a17 	vldr	s11, [r1, #-92]	@ 0xffffffa4
 8000b82:	ed51 4a18 	vldr	s9, [r1, #-96]	@ 0xffffffa0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b86:	ed13 6a18 	vldr	s12, [r3, #-96]	@ 0xffffffa0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b8a:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b8e:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b92:	ed13 7a16 	vldr	s14, [r3, #-88]	@ 0xffffffa8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b96:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b9a:	ed53 7a15 	vldr	s15, [r3, #-84]	@ 0xffffffac
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b9e:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000ba2:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *yPtr     = accR;
 8000ba6:	ed03 6a18 	vstr	s12, [r3, #-96]	@ 0xffffffa0
                         *(yPtr+1) = accI;
 8000baa:	ed43 6a17 	vstr	s13, [r3, #-92]	@ 0xffffffa4
                         float xr = *xPtr++; float xi = *xPtr++;
 8000bae:	ed12 5a15 	vldr	s10, [r2, #-84]	@ 0xffffffac
                         float hr = *hPtr++; float hi = *hPtr++;
 8000bb2:	ed51 5a16 	vldr	s11, [r1, #-88]	@ 0xffffffa8
 8000bb6:	ed51 6a15 	vldr	s13, [r1, #-84]	@ 0xffffffac
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000bba:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8000bbe:	ed12 6a16 	vldr	s12, [r2, #-88]	@ 0xffffffa8
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000bc2:	eea5 7a66 	vfms.f32	s14, s10, s13
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8000bc6:	4282      	cmp	r2, r0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000bc8:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000bcc:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8000bd0:	ed43 7a15 	vstr	s15, [r3, #-84]	@ 0xffffffac
                         *yPtr     = accR;
 8000bd4:	ed03 7a16 	vstr	s14, [r3, #-88]	@ 0xffffffa8
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8000bd8:	f47f af0a 	bne.w	80009f0 <partitioned_fir_convolution_fft+0xec>
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000bdc:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
			i = 0;
 8000be0:	9b01      	ldr	r3, [sp, #4]
		if (++i >= segs) {
 8000be2:	f10c 0c01 	add.w	ip, ip, #1
                     float accR = __builtin_fmaf(xr, hr,
 8000be6:	ed9b 7a00 	vldr	s14, [fp]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000bea:	f602 71ec 	addw	r1, r2, #4076	@ 0xfec
                     float accI = __builtin_fmaf(xr, hi,
 8000bee:	edda 7a00 	vldr	s15, [sl]
			i = 0;
 8000bf2:	4563      	cmp	r3, ip
 8000bf4:	bf98      	it	ls
 8000bf6:	f04f 0c00 	movls.w	ip, #0
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000bfa:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000bfe:	ed91 6a00 	vldr	s12, [r1]
 8000c02:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c06:	f603 71e8 	addw	r1, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8000c0a:	9805      	ldr	r0, [sp, #20]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c0c:	f505 5500 	add.w	r5, r5, #8192	@ 0x2000
 8000c10:	edd1 6a00 	vldr	s13, [r1]
 8000c14:	f603 71ec 	addw	r1, r3, #4076	@ 0xfec
 8000c18:	edd1 5a00 	vldr	s11, [r1]
                     float accI = __builtin_fmaf(xr, hi,
 8000c1c:	eee6 7a26 	vfma.f32	s15, s12, s13
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c20:	f602 71e8 	addw	r1, r2, #4072	@ 0xfe8
                     float accR = __builtin_fmaf(xr, hr,
 8000c24:	eea6 7a65 	vfms.f32	s14, s12, s11
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c28:	ed91 6a00 	vldr	s12, [r1]
 8000c2c:	f602 71f4 	addw	r1, r2, #4084	@ 0xff4
                     float accI = __builtin_fmaf(xr, hi,
 8000c30:	eee6 7a25 	vfma.f32	s15, s12, s11
                     float accR = __builtin_fmaf(xr, hr,
 8000c34:	eea6 7a26 	vfma.f32	s14, s12, s13
                     *yPtr     = accR;
 8000c38:	ed8b 7a00 	vstr	s14, [fp]
                     *(yPtr+1) = accI;
 8000c3c:	edca 7a00 	vstr	s15, [sl]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c40:	ed91 6a00 	vldr	s12, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c44:	f503 617f 	add.w	r1, r3, #4080	@ 0xff0
                     float accI = __builtin_fmaf(xr, hi,
 8000c48:	edd0 7a00 	vldr	s15, [r0]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c4c:	edd1 6a00 	vldr	s13, [r1]
 8000c50:	f603 71f4 	addw	r1, r3, #4084	@ 0xff4
                     float accR = __builtin_fmaf(xr, hr,
 8000c54:	ed99 7a00 	vldr	s14, [r9]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c58:	edd1 5a00 	vldr	s11, [r1]
                     float accI = __builtin_fmaf(xr, hi,
 8000c5c:	eee6 7a26 	vfma.f32	s15, s12, s13
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c60:	f502 617f 	add.w	r1, r2, #4080	@ 0xff0
                     float accR = __builtin_fmaf(xr, hr,
 8000c64:	eea6 7a65 	vfms.f32	s14, s12, s11
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c68:	ed91 6a00 	vldr	s12, [r1]
 8000c6c:	f602 71fc 	addw	r1, r2, #4092	@ 0xffc
 8000c70:	f602 72f8 	addw	r2, r2, #4088	@ 0xff8
                     float accI = __builtin_fmaf(xr, hi,
 8000c74:	eee6 7a25 	vfma.f32	s15, s12, s11
                     float accR = __builtin_fmaf(xr, hr,
 8000c78:	eea6 7a26 	vfma.f32	s14, s12, s13
                     *yPtr     = accR;
 8000c7c:	ed89 7a00 	vstr	s14, [r9]
                     *(yPtr+1) = accI;
 8000c80:	edc0 7a00 	vstr	s15, [r0]
                     float accR = __builtin_fmaf(xr, hr,
 8000c84:	9806      	ldr	r0, [sp, #24]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c86:	ed92 6a00 	vldr	s12, [r2]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c8a:	f603 72f8 	addw	r2, r3, #4088	@ 0xff8
 8000c8e:	f603 73fc 	addw	r3, r3, #4092	@ 0xffc
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c92:	ed91 5a00 	vldr	s10, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c96:	edd2 6a00 	vldr	s13, [r2]
 8000c9a:	edd3 5a00 	vldr	s11, [r3]
                     float accR = __builtin_fmaf(xr, hr,
 8000c9e:	ed90 7a00 	vldr	s14, [r0]
                     float accI = __builtin_fmaf(xr, hi,
 8000ca2:	edde 7a00 	vldr	s15, [lr]
                     float accR = __builtin_fmaf(xr, hr,
 8000ca6:	eea5 7a65 	vfms.f32	s14, s10, s11
                     float accI = __builtin_fmaf(xr, hi,
 8000caa:	eee5 7a26 	vfma.f32	s15, s10, s13
                     float accR = __builtin_fmaf(xr, hr,
 8000cae:	eea6 7a26 	vfma.f32	s14, s12, s13
                     float accI = __builtin_fmaf(xr, hi,
 8000cb2:	eee6 7a25 	vfma.f32	s15, s12, s11
                     *yPtr     = accR;
 8000cb6:	ed80 7a00 	vstr	s14, [r0]
                     *(yPtr+1) = accI;
 8000cba:	edce 7a00 	vstr	s15, [lr]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000cbe:	ed94 5a01 	vldr	s10, [r4, #4]
 8000cc2:	ed94 6a00 	vldr	s12, [r4]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000cc6:	edd5 5a00 	vldr	s11, [r5]
 8000cca:	edd5 6a01 	vldr	s13, [r5, #4]
                     float accR = __builtin_fmaf(xr, hr,
 8000cce:	ed98 7a00 	vldr	s14, [r8]
                     float accI = __builtin_fmaf(xr, hi,
 8000cd2:	edd8 7a01 	vldr	s15, [r8, #4]
                     float accR = __builtin_fmaf(xr, hr,
 8000cd6:	eea5 7a66 	vfms.f32	s14, s10, s13
                     float accI = __builtin_fmaf(xr, hi,
 8000cda:	eee5 7a25 	vfma.f32	s15, s10, s11
                     float accR = __builtin_fmaf(xr, hr,
 8000cde:	eea6 7a25 	vfma.f32	s14, s12, s11
                     float accI = __builtin_fmaf(xr, hi,
 8000ce2:	eee6 7a26 	vfma.f32	s15, s12, s13
                     *yPtr     = accR;
 8000ce6:	ed88 7a00 	vstr	s14, [r8]
                     *(yPtr+1) = accI;
 8000cea:	edc8 7a01 	vstr	s15, [r8, #4]
		if (idx-- == 0) {
 8000cee:	b38e      	cbz	r6, 8000d54 <partitioned_fir_convolution_fft+0x450>
 8000cf0:	3e01      	subs	r6, #1
    } while (idx != fir->curr_fftidx);
 8000cf2:	9b02      	ldr	r3, [sp, #8]
 8000cf4:	42b3      	cmp	r3, r6
 8000cf6:	f47f ae54 	bne.w	80009a2 <partitioned_fir_convolution_fft+0x9e>
    if (++fir->curr_fftidx >= segs) {
        fir->curr_fftidx = 0;
    }

    // inverse FFT
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8000cfa:	4639      	mov	r1, r7
    if (++fir->curr_fftidx >= segs) {
 8000cfc:	3301      	adds	r3, #1
        fir->curr_fftidx = 0;
 8000cfe:	9f01      	ldr	r7, [sp, #4]
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8000d00:	9a16      	ldr	r2, [sp, #88]	@ 0x58
        fir->curr_fftidx = 0;
 8000d02:	42bb      	cmp	r3, r7
 8000d04:	bf28      	it	cs
 8000d06:	2300      	movcs	r3, #0
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8000d08:	4814      	ldr	r0, [pc, #80]	@ (8000d5c <partitioned_fir_convolution_fft+0x458>)
    if (++fir->curr_fftidx >= segs) {
 8000d0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8000d0c:	e9dd 6509 	ldrd	r6, r5, [sp, #36]	@ 0x24
 8000d10:	60ab      	str	r3, [r5, #8]
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8000d12:	2301      	movs	r3, #1
 8000d14:	f005 fd3c 	bl	8006790 <arm_rfft_fast_f32>

    // overlap-add and scaling
    const float32_t invN = 1.0f / (float32_t)segs;
 8000d18:	ee07 7a90 	vmov	s15, r7
 8000d1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8000d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d26:	9a08      	ldr	r2, [sp, #32]
 8000d28:	4621      	mov	r1, r4
 8000d2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
        float32_t s = zeropaddedinput[k]            * invN;
 8000d2e:	ecf3 7a01 	vldmia	r3!, {s15}
        float32_t o = overlap[k]                    * invN;
 8000d32:	ed92 7a00 	vldr	s14, [r2]
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8000d36:	429c      	cmp	r4, r3
        pipe->processBuffer[k] = s + o;
 8000d38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d40:	ece6 7a01 	vstmia	r6!, {s15}
        overlap[k]             = zeropaddedinput[BUFFER_SIZE + k];
 8000d44:	f851 0b04 	ldr.w	r0, [r1], #4
 8000d48:	f842 0b04 	str.w	r0, [r2], #4
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8000d4c:	d1ef      	bne.n	8000d2e <partitioned_fir_convolution_fft+0x42a>
    }

}
 8000d4e:	b00d      	add	sp, #52	@ 0x34
 8000d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			idx = segs - 1;
 8000d54:	9b01      	ldr	r3, [sp, #4]
 8000d56:	1e5e      	subs	r6, r3, #1
 8000d58:	e7cb      	b.n	8000cf2 <partitioned_fir_convolution_fft+0x3ee>
 8000d5a:	bf00      	nop
 8000d5c:	24006080 	.word	0x24006080

08000d60 <pipe_getDelayBuffer>:

float32_t *pipe_getDelayBuffer(pipe *self, uint16_t n)
{
    uint32_t offset = n * BUFFER_SIZE;

    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8000d60:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
 8000d64:	4a09      	ldr	r2, [pc, #36]	@ (8000d8c <pipe_getDelayBuffer+0x2c>)

    return &self->delayBuffer[index];
 8000d66:	f241 4c02 	movw	ip, #5122	@ 0x1402
    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000d70:	eba3 2181 	sub.w	r1, r3, r1, lsl #10
 8000d74:	fba2 2301 	umull	r2, r3, r2, r1
 8000d78:	0b5b      	lsrs	r3, r3, #13
 8000d7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d7e:	eba1 21c3 	sub.w	r1, r1, r3, lsl #11
    return &self->delayBuffer[index];
 8000d82:	448c      	add	ip, r1
}
 8000d84:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	cccccccd 	.word	0xcccccccd

08000d90 <pipe_loadProcess>:
    }
}

static void pipe_loadProcess(pipe *self)
{
	arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8000d90:	f244 0108 	movw	r1, #16392	@ 0x4008
 8000d94:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 8000d98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d9c:	4401      	add	r1, r0
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	f005 bc14 	b.w	80065cc <arm_copy_f32>

08000da4 <pipe_updateDelayBuffer>:
{
 8000da4:	b510      	push	{r4, lr}
    arm_copy_f32(self->inBuffer, &self->delayBuffer[self->delayIndex], BUFFER_SIZE);
 8000da6:	f500 4470 	add.w	r4, r0, #61440	@ 0xf000
 8000daa:	f241 4102 	movw	r1, #5122	@ 0x1402
 8000dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db2:	68e3      	ldr	r3, [r4, #12]
 8000db4:	4419      	add	r1, r3
 8000db6:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 8000dba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	f005 fc04 	bl	80065cc <arm_copy_f32>
    self->delayIndex += BUFFER_SIZE;
 8000dc4:	68e3      	ldr	r3, [r4, #12]
 8000dc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
        self->delayIndex = 0;
 8000dca:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8000dce:	bf28      	it	cs
 8000dd0:	2300      	movcs	r3, #0
 8000dd2:	60e3      	str	r3, [r4, #12]
}
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	bf00      	nop

08000dd8 <pipe_updateDACOutput>:
{
 8000dd8:	b570      	push	{r4, r5, r6, lr}
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8000dda:	f500 4580 	add.w	r5, r0, #16384	@ 0x4000
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000dde:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
{
 8000de2:	460c      	mov	r4, r1
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8000de4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000de8:	6869      	ldr	r1, [r5, #4]
 8000dea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000dee:	7a1e      	ldrb	r6, [r3, #8]
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8000df0:	4608      	mov	r0, r1
 8000df2:	f006 fbe9 	bl	80075c8 <arm_offset_f32>
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8000df6:	6869      	ldr	r1, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000df8:	fab6 f686 	clz	r6, r6
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8000dfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e00:	4608      	mov	r0, r1
 8000e02:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000e30 <pipe_updateDACOutput+0x58>
 8000e06:	f006 fba9 	bl	800755c <arm_scale_f32>
 8000e0a:	686a      	ldr	r2, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000e0c:	0976      	lsrs	r6, r6, #5
    for (i = 0; i < BUFFER_SIZE; i++)
 8000e0e:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8000e12:	eb04 21c6 	add.w	r1, r4, r6, lsl #11
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8000e16:	ecf2 7a01 	vldmia	r2!, {s15}
 8000e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    for (i = 0; i < BUFFER_SIZE; i++)
 8000e1e:	4290      	cmp	r0, r2
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8000e20:	ee17 3a90 	vmov	r3, s15
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	f821 3b02 	strh.w	r3, [r1], #2
    for (i = 0; i < BUFFER_SIZE; i++)
 8000e2a:	d1f4      	bne.n	8000e16 <pipe_updateDACOutput+0x3e>
}
 8000e2c:	bd70      	pop	{r4, r5, r6, pc}
 8000e2e:	bf00      	nop
 8000e30:	45000000 	.word	0x45000000

08000e34 <pipe_ADC_Complete>:
{
 8000e34:	b538      	push	{r3, r4, r5, lr}
 8000e36:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
 8000e3a:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8000e3c:	f501 6c00 	add.w	ip, r1, #2048	@ 0x800
 8000e40:	f500 5e00 	add.w	lr, r0, #8192	@ 0x2000
 8000e44:	462a      	mov	r2, r5
        self->inBuffer2[i] = (float32_t)adcInput[BUFFER_SIZE + i];
 8000e46:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e54:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8000e58:	4572      	cmp	r2, lr
 8000e5a:	d1f4      	bne.n	8000e46 <pipe_ADC_Complete+0x12>
    arm_scale_f32(self->inBuffer2, ADC_BITS2VOLTS, self->inBuffer2, BUFFER_SIZE);
 8000e5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e60:	4629      	mov	r1, r5
 8000e62:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000e98 <pipe_ADC_Complete+0x64>
 8000e66:	4628      	mov	r0, r5
 8000e68:	f006 fb78 	bl	800755c <arm_scale_f32>
    arm_offset_f32(self->inBuffer2, -1.0f, self->inBuffer2, BUFFER_SIZE);
 8000e6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e70:	4629      	mov	r1, r5
 8000e72:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000e76:	4628      	mov	r0, r5
 8000e78:	f006 fba6 	bl	80075c8 <arm_offset_f32>
    self->inBuffer  = self->inBuffer2;
 8000e7c:	f504 4280 	add.w	r2, r4, #16384	@ 0x4000
    self->ppState   = 0;
 8000e80:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->outBuffer = self->outBuffer2;
 8000e84:	f504 5440 	add.w	r4, r4, #12288	@ 0x3000
    self->ppState   = 0;
 8000e88:	2100      	movs	r1, #0
    self->outBuffer = self->outBuffer2;
 8000e8a:	e9c2 5400 	strd	r5, r4, [r2]
    self->bufferReady = true;
 8000e8e:	2201      	movs	r2, #1
    self->ppState   = 0;
 8000e90:	7219      	strb	r1, [r3, #8]
    self->bufferReady = true;
 8000e92:	741a      	strb	r2, [r3, #16]
}
 8000e94:	bd38      	pop	{r3, r4, r5, pc}
 8000e96:	bf00      	nop
 8000e98:	38000000 	.word	0x38000000

08000e9c <pipe_ADC_HalfComplete>:
{
 8000e9c:	b510      	push	{r4, lr}
 8000e9e:	468c      	mov	ip, r1
 8000ea0:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	f500 5e80 	add.w	lr, r0, #4096	@ 0x1000
        self->inBuffer1[i] = (float32_t)adcInput[i];
 8000ea8:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb6:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8000eba:	4572      	cmp	r2, lr
 8000ebc:	d1f4      	bne.n	8000ea8 <pipe_ADC_HalfComplete+0xc>
    arm_scale_f32(self->inBuffer1, ADC_BITS2VOLTS, self->inBuffer1, BUFFER_SIZE);
 8000ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ec2:	4621      	mov	r1, r4
 8000ec4:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000ef8 <pipe_ADC_HalfComplete+0x5c>
 8000ec8:	4620      	mov	r0, r4
 8000eca:	f006 fb47 	bl	800755c <arm_scale_f32>
    arm_offset_f32(self->inBuffer1, -1.0f, self->inBuffer1, BUFFER_SIZE);
 8000ece:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000eda:	f006 fb75 	bl	80075c8 <arm_offset_f32>
    self->ppState   = 1;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->inBuffer  = self->inBuffer1;
 8000ee4:	f504 4180 	add.w	r1, r4, #16384	@ 0x4000
    self->outBuffer = self->outBuffer1;
 8000ee8:	f504 5000 	add.w	r0, r4, #8192	@ 0x2000
 8000eec:	e9c1 4000 	strd	r4, r0, [r1]
    self->ppState   = 1;
 8000ef0:	721a      	strb	r2, [r3, #8]
    self->bufferReady = true;
 8000ef2:	741a      	strb	r2, [r3, #16]
}
 8000ef4:	bd10      	pop	{r4, pc}
 8000ef6:	bf00      	nop
 8000ef8:	38000000 	.word	0x38000000

08000efc <pipeInit>:
}

void pipeInit(pipe *self)
{
 8000efc:	4684      	mov	ip, r0
    self->delayIndex = 0;
    self->bufferReady = false;

    self->adcHalfComplete = pipe_ADC_HalfComplete;
    self->adcComplete     = pipe_ADC_Complete;
    self->updateDelayBuffer = pipe_updateDelayBuffer;
 8000efe:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <pipeInit+0x48>)
    self->ppState   = 0;
 8000f00:	2100      	movs	r1, #0
    self->inBuffer  = self->inBuffer2;
 8000f02:	f50c 4280 	add.w	r2, ip, #16384	@ 0x4000
    self->ppState   = 0;
 8000f06:	f50c 4370 	add.w	r3, ip, #61440	@ 0xf000
{
 8000f0a:	b470      	push	{r4, r5, r6}
    self->inBuffer  = self->inBuffer2;
 8000f0c:	f50c 5680 	add.w	r6, ip, #4096	@ 0x1000
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8000f10:	4d0d      	ldr	r5, [pc, #52]	@ (8000f48 <pipeInit+0x4c>)
    self->adcComplete     = pipe_ADC_Complete;
 8000f12:	4c0e      	ldr	r4, [pc, #56]	@ (8000f4c <pipeInit+0x50>)
    self->inBuffer  = self->inBuffer2;
 8000f14:	6016      	str	r6, [r2, #0]
    self->outBuffer = self->outBuffer2;
 8000f16:	f50c 5640 	add.w	r6, ip, #12288	@ 0x3000
 8000f1a:	6056      	str	r6, [r2, #4]
    self->updateDACOutput = pipe_updateDACOutput;
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f50 <pipeInit+0x54>)
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8000f1e:	615d      	str	r5, [r3, #20]
    self->ppState   = 0;
 8000f20:	7219      	strb	r1, [r3, #8]
    self->adcComplete     = pipe_ADC_Complete;
 8000f22:	619c      	str	r4, [r3, #24]
    self->delayIndex = 0;
 8000f24:	60d9      	str	r1, [r3, #12]
    self->bufferReady = false;
 8000f26:	7419      	strb	r1, [r3, #16]
    self->updateDACOutput = pipe_updateDACOutput;
 8000f28:	e9c3 0207 	strd	r0, r2, [r3, #28]
    self->getDelayBuffer = pipe_getDelayBuffer;
 8000f2c:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <pipeInit+0x58>)
    self->loadProcess = pipe_loadProcess;
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <pipeInit+0x5c>)
 8000f30:	e9c3 0209 	strd	r0, r2, [r3, #36]	@ 0x24

    for(int i = 0; i < BUFFER_SIZE ; i++) {

    	self->processBuffer[i] = 0;
 8000f34:	f244 0008 	movw	r0, #16392	@ 0x4008
 8000f38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f3c:	4460      	add	r0, ip

    }

}
 8000f3e:	bc70      	pop	{r4, r5, r6}
    	self->processBuffer[i] = 0;
 8000f40:	f006 bee4 	b.w	8007d0c <memset>
 8000f44:	08000da5 	.word	0x08000da5
 8000f48:	08000e9d 	.word	0x08000e9d
 8000f4c:	08000e35 	.word	0x08000e35
 8000f50:	08000dd9 	.word	0x08000dd9
 8000f54:	08000d61 	.word	0x08000d61
 8000f58:	08000d91 	.word	0x08000d91

08000f5c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <HAL_MspInit+0x20>)
{
 8000f5e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f64:	f042 0202 	orr.w	r2, r2, #2
 8000f68:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f78:	b002      	add	sp, #8
 8000f7a:	4770      	bx	lr
 8000f7c:	58024400 	.word	0x58024400

08000f80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	2100      	movs	r1, #0
{
 8000f86:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	22c0      	movs	r2, #192	@ 0xc0
 8000f8a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	9106      	str	r1, [sp, #24]
 8000f8e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000f92:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f96:	f006 feb9 	bl	8007d0c <memset>
  if(hadc->Instance==ADC1)
 8000f9a:	4b31      	ldr	r3, [pc, #196]	@ (8001060 <HAL_ADC_MspInit+0xe0>)
 8000f9c:	6822      	ldr	r2, [r4, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d001      	beq.n	8000fa6 <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fa2:	b038      	add	sp, #224	@ 0xe0
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fac:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fae:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000fb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fb6:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb8:	f003 fe22 	bl	8004c00 <HAL_RCCEx_PeriphCLKConfig>
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	d148      	bne.n	8001052 <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fc0:	4b28      	ldr	r3, [pc, #160]	@ (8001064 <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA1_Stream0;
 8000fc6:	4d28      	ldr	r5, [pc, #160]	@ (8001068 <HAL_ADC_MspInit+0xe8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fc8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000fcc:	f042 0220 	orr.w	r2, r2, #32
 8000fd0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000fd4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000fd8:	f002 0220 	and.w	r2, r2, #32
 8000fdc:	9200      	str	r2, [sp, #0]
 8000fde:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fe4:	f042 0201 	orr.w	r2, r2, #1
 8000fe8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fec:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffa:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	481b      	ldr	r0, [pc, #108]	@ (800106c <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001000:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f002 fd4e 	bl	8003aa4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8001008:	4a19      	ldr	r2, [pc, #100]	@ (8001070 <HAL_ADC_MspInit+0xf0>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800100a:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800100c:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800100e:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001010:	e885 004c 	stmia.w	r5, {r2, r3, r6}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001018:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800101c:	e9c5 6203 	strd	r6, r2, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001020:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001022:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001026:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800102a:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800102e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001032:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001034:	f001 fd60 	bl	8002af8 <HAL_DMA_Init>
 8001038:	b970      	cbnz	r0, 8001058 <HAL_ADC_MspInit+0xd8>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800103e:	64e5      	str	r5, [r4, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001040:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001042:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001044:	f001 fa10 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001048:	2012      	movs	r0, #18
 800104a:	f001 fa49 	bl	80024e0 <HAL_NVIC_EnableIRQ>
}
 800104e:	b038      	add	sp, #224	@ 0xe0
 8001050:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001052:	f7ff fc55 	bl	8000900 <Error_Handler>
 8001056:	e7b3      	b.n	8000fc0 <HAL_ADC_MspInit+0x40>
      Error_Handler();
 8001058:	f7ff fc52 	bl	8000900 <Error_Handler>
 800105c:	e7ed      	b.n	800103a <HAL_ADC_MspInit+0xba>
 800105e:	bf00      	nop
 8001060:	40022000 	.word	0x40022000
 8001064:	58024400 	.word	0x58024400
 8001068:	2401519c 	.word	0x2401519c
 800106c:	58020000 	.word	0x58020000
 8001070:	40020010 	.word	0x40020010

08001074 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8001074:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <HAL_DAC_MspInit+0xb4>)
 8001076:	6802      	ldr	r2, [r0, #0]
{
 8001078:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 800107a:	429a      	cmp	r2, r3
{
 800107c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f04f 0400 	mov.w	r4, #0
 8001082:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001086:	9404      	str	r4, [sp, #16]
 8001088:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 800108c:	d001      	beq.n	8001092 <HAL_DAC_MspInit+0x1e>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800108e:	b008      	add	sp, #32
 8001090:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001092:	4b26      	ldr	r3, [pc, #152]	@ (800112c <HAL_DAC_MspInit+0xb8>)
 8001094:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8001098:	4e25      	ldr	r6, [pc, #148]	@ (8001130 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 800109a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800109e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80010a2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80010a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80010aa:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80010ae:	9200      	str	r2, [sp, #0]
 80010b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80010b6:	f042 0201 	orr.w	r2, r2, #1
 80010ba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010be:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010ca:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	4819      	ldr	r0, [pc, #100]	@ (8001134 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f002 fce6 	bl	8003aa4 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80010d8:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80010da:	2343      	movs	r3, #67	@ 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80010dc:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010de:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80010e0:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e2:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80010e4:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e8:	2240      	movs	r2, #64	@ 0x40
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ee:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010f4:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010fa:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80010fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001102:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001104:	f001 fcf8 	bl	8002af8 <HAL_DMA_Init>
 8001108:	b958      	cbnz	r0, 8001122 <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800110c:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800110e:	2036      	movs	r0, #54	@ 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001110:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001112:	4611      	mov	r1, r2
 8001114:	f001 f9a8 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001118:	2036      	movs	r0, #54	@ 0x36
 800111a:	f001 f9e1 	bl	80024e0 <HAL_NVIC_EnableIRQ>
}
 800111e:	b008      	add	sp, #32
 8001120:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001122:	f7ff fbed 	bl	8000900 <Error_Handler>
 8001126:	e7f0      	b.n	800110a <HAL_DAC_MspInit+0x96>
 8001128:	40007400 	.word	0x40007400
 800112c:	58024400 	.word	0x58024400
 8001130:	24015110 	.word	0x24015110
 8001134:	58020000 	.word	0x58020000
 8001138:	40020028 	.word	0x40020028

0800113c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 800113c:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_TIM_Base_MspInit+0x2c>)
 800113e:	6802      	ldr	r2, [r0, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d000      	beq.n	8001146 <HAL_TIM_Base_MspInit+0xa>
 8001144:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <HAL_TIM_Base_MspInit+0x30>)
{
 8001148:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 800114a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800114e:	f042 0202 	orr.w	r2, r2, #2
 8001152:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001162:	b002      	add	sp, #8
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40010400 	.word	0x40010400
 800116c:	58024400 	.word	0x58024400

08001170 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001170:	e7fe      	b.n	8001170 <NMI_Handler>
 8001172:	bf00      	nop

08001174 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <HardFault_Handler>
 8001176:	bf00      	nop

08001178 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler>
 800117a:	bf00      	nop

0800117c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <BusFault_Handler>
 800117e:	bf00      	nop

08001180 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler>
 8001182:	bf00      	nop

08001184 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 ba10 	b.w	80015b4 <HAL_IncTick>

08001194 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001194:	4801      	ldr	r0, [pc, #4]	@ (800119c <DMA1_Stream0_IRQHandler+0x8>)
 8001196:	f002 ba73 	b.w	8003680 <HAL_DMA_IRQHandler>
 800119a:	bf00      	nop
 800119c:	2401519c 	.word	0x2401519c

080011a0 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80011a0:	4801      	ldr	r0, [pc, #4]	@ (80011a8 <DMA1_Stream1_IRQHandler+0x8>)
 80011a2:	f002 ba6d 	b.w	8003680 <HAL_DMA_IRQHandler>
 80011a6:	bf00      	nop
 80011a8:	24015110 	.word	0x24015110

080011ac <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011ac:	4801      	ldr	r0, [pc, #4]	@ (80011b4 <ADC_IRQHandler+0x8>)
 80011ae:	f000 ba23 	b.w	80015f8 <HAL_ADC_IRQHandler>
 80011b2:	bf00      	nop
 80011b4:	24015214 	.word	0x24015214

080011b8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80011b8:	4801      	ldr	r0, [pc, #4]	@ (80011c0 <TIM6_DAC_IRQHandler+0x8>)
 80011ba:	f001 bab5 	b.w	8002728 <HAL_DAC_IRQHandler>
 80011be:	bf00      	nop
 80011c0:	24015188 	.word	0x24015188

080011c4 <supro_init_f32>:




void supro_init_f32()
{
 80011c4:	b530      	push	{r4, r5, lr}

	arm_fir_init_f32(&preamp_fir_5Hz_lowpass, NUM_TAPS, (float32_t *)&firCoeffs32[0], &preamp_firState_f32[0], (uint32_t)BLOCK_SIZE);
 80011c6:	4d0b      	ldr	r5, [pc, #44]	@ (80011f4 <supro_init_f32+0x30>)
{
 80011c8:	b083      	sub	sp, #12
	arm_fir_init_f32(&preamp_fir_5Hz_lowpass, NUM_TAPS, (float32_t *)&firCoeffs32[0], &preamp_firState_f32[0], (uint32_t)BLOCK_SIZE);
 80011ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <supro_init_f32+0x34>)
 80011d0:	462a      	mov	r2, r5
 80011d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011d6:	4809      	ldr	r0, [pc, #36]	@ (80011fc <supro_init_f32+0x38>)
 80011d8:	9400      	str	r4, [sp, #0]
 80011da:	f005 ff3f 	bl	800705c <arm_fir_init_f32>
	arm_fir_init_f32(&poweramp_fir_5Hz_lowpass, NUM_TAPS, (float32_t *)&firCoeffs32[0], &poweramp_firState_f32[0], (uint32_t)BLOCK_SIZE);
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <supro_init_f32+0x3c>)
 80011e0:	462a      	mov	r2, r5
 80011e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e6:	4807      	ldr	r0, [pc, #28]	@ (8001204 <supro_init_f32+0x40>)
 80011e8:	9400      	str	r4, [sp, #0]
 80011ea:	f005 ff37 	bl	800705c <arm_fir_init_f32>

}
 80011ee:	b003      	add	sp, #12
 80011f0:	bd30      	pop	{r4, r5, pc}
 80011f2:	bf00      	nop
 80011f4:	0800bd80 	.word	0x0800bd80
 80011f8:	24016a74 	.word	0x24016a74
 80011fc:	2401827c 	.word	0x2401827c
 8001200:	24015278 	.word	0x24015278
 8001204:	24018270 	.word	0x24018270

08001208 <supro_preamp_f32>:
	arm_scale_f32(p->processBuffer, 0.001, p->processBuffer, BUFFER_SIZE);

}

void supro_preamp_f32(pipe *p)
{
 8001208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        *gPost = &supro_parameters[SUPRO_P_G_POST_IDX],   // post-gain (p[N+11])
        *gWet  = &supro_parameters[SUPRO_P_BLEND_IDX],    // wet mix
        *bias  = &supro_parameters[SUPRO_P_BIAS_IDX];     // envelope bias (p[N+4])

    /* 1) envelope = sqrt( 2 * LP( x^2 ) ) */
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 800120c:	f244 0808 	movw	r8, #16392	@ 0x4008
{
 8001210:	f5ad 4dc0 	sub.w	sp, sp, #24576	@ 0x6000
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 8001214:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001218:	4480      	add	r8, r0
    arm_fir_f32(&preamp_fir_5Hz_lowpass, temp, envelope, BLOCK_SIZE);
 800121a:	f50d 5580 	add.w	r5, sp, #4096	@ 0x1000
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 800121e:	466a      	mov	r2, sp
 8001220:	466c      	mov	r4, sp
 8001222:	4641      	mov	r1, r8
 8001224:	4640      	mov	r0, r8
 8001226:	f006 fa05 	bl	8007634 <arm_mult_f32>
    arm_fir_f32(&preamp_fir_5Hz_lowpass, temp, envelope, BLOCK_SIZE);
 800122a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800122e:	462a      	mov	r2, r5
 8001230:	4669      	mov	r1, sp
 8001232:	483e      	ldr	r0, [pc, #248]	@ (800132c <supro_preamp_f32+0x124>)
 8001234:	f005 ff24 	bl	8007080 <arm_fir_f32>
    arm_scale_f32(envelope, 2.0f, temp, BLOCK_SIZE);
 8001238:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800123c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001240:	4669      	mov	r1, sp
 8001242:	4628      	mov	r0, r5
 8001244:	f006 f98a 	bl	800755c <arm_scale_f32>

    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
        float32_t v = temp[i];
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 8001248:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001330 <supro_preamp_f32+0x128>
 800124c:	462b      	mov	r3, r5
        float32_t v = temp[i];
 800124e:	ecf4 7a01 	vldmia	r4!, {s15}
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 8001252:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8001256:	eeb1 7ae7 	vsqrt.f32	s14, s15
    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
 800125a:	42ac      	cmp	r4, r5
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 800125c:	eca3 7a01 	vstmia	r3!, {s14}
    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
 8001260:	d1f5      	bne.n	800124e <supro_preamp_f32+0x46>
    }

    /* 2) pre-gain */
    arm_scale_f32(p->processBuffer, *gPre, xpre, BLOCK_SIZE);
 8001262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001266:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001334 <supro_preamp_f32+0x12c>
 800126a:	4640      	mov	r0, r8
 800126c:	f50d 5100 	add.w	r1, sp, #8192	@ 0x2000
 8001270:	4e31      	ldr	r6, [pc, #196]	@ (8001338 <supro_preamp_f32+0x130>)
 8001272:	f006 f973 	bl	800755c <arm_scale_f32>

    /* 3) add envelope bias */
    arm_scale_f32(envelope, *bias, temp, BLOCK_SIZE);
 8001276:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 800133c <supro_preamp_f32+0x134>
 800127a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800127e:	4620      	mov	r0, r4
 8001280:	4669      	mov	r1, sp
 8001282:	f006 f96b 	bl	800755c <arm_scale_f32>
    arm_add_f32(xpre, temp, xmapped, BLOCK_SIZE);
 8001286:	f50d 45a0 	add.w	r5, sp, #20480	@ 0x5000
 800128a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128e:	4669      	mov	r1, sp
 8001290:	f50d 5240 	add.w	r2, sp, #12288	@ 0x3000
 8001294:	f50d 5000 	add.w	r0, sp, #8192	@ 0x2000
 8001298:	f1a6 079c 	sub.w	r7, r6, #156	@ 0x9c
 800129c:	f006 fa10 	bl	80076c0 <arm_add_f32>

    /* 4) Horner polynomial on xmapped */
    arm_scale_f32(xmapped,  a[SUPRO_NUM_A_VALS-1], yMap, BLOCK_SIZE);
 80012a0:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8001340 <supro_preamp_f32+0x138>
 80012a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012a8:	f50d 4180 	add.w	r1, sp, #16384	@ 0x4000
 80012ac:	f50d 5040 	add.w	r0, sp, #12288	@ 0x3000
 80012b0:	f006 f954 	bl	800755c <arm_scale_f32>
    for (int k = SUPRO_NUM_A_VALS-2; k >= 0; --k) {
        arm_mult_f32(xmapped, yMap, yMap, BLOCK_SIZE);
 80012b4:	f50d 4280 	add.w	r2, sp, #16384	@ 0x4000
 80012b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012bc:	f50d 5040 	add.w	r0, sp, #12288	@ 0x3000
 80012c0:	f50d 4480 	add.w	r4, sp, #16384	@ 0x4000
 80012c4:	4611      	mov	r1, r2
 80012c6:	f006 f9b5 	bl	8007634 <arm_mult_f32>
        for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
            yMap[i] += a[k];
 80012ca:	ed36 7a01 	vldmdb	r6!, {s14}
 80012ce:	edd4 7a00 	vldr	s15, [r4]
 80012d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012d6:	ece4 7a01 	vstmia	r4!, {s15}
        for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
 80012da:	42ac      	cmp	r4, r5
 80012dc:	d1f7      	bne.n	80012ce <supro_preamp_f32+0xc6>
    for (int k = SUPRO_NUM_A_VALS-2; k >= 0; --k) {
 80012de:	42be      	cmp	r6, r7
 80012e0:	d1e8      	bne.n	80012b4 <supro_preamp_f32+0xac>
    }

    /* 5) wet/dry mix */
    arm_scale_f32(yMap, *gWet, temp, BLOCK_SIZE);
 80012e2:	f50d 4080 	add.w	r0, sp, #16384	@ 0x4000
 80012e6:	4669      	mov	r1, sp
 80012e8:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001344 <supro_preamp_f32+0x13c>
 80012ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012f0:	f006 f934 	bl	800755c <arm_scale_f32>
    arm_scale_f32(xpre, 1.0f - *gWet, yDry, BLOCK_SIZE);
 80012f4:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001348 <supro_preamp_f32+0x140>
 80012f8:	f50d 5000 	add.w	r0, sp, #8192	@ 0x2000
 80012fc:	4621      	mov	r1, r4
 80012fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001302:	f006 f92b 	bl	800755c <arm_scale_f32>
    arm_add_f32(temp, yDry, temp, BLOCK_SIZE);
 8001306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800130a:	466a      	mov	r2, sp
 800130c:	4621      	mov	r1, r4
 800130e:	4668      	mov	r0, sp
 8001310:	f006 f9d6 	bl	80076c0 <arm_add_f32>

    /* 6) post-gain */
    arm_scale_f32(temp, *gPost, p->processBuffer, BLOCK_SIZE);
 8001314:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001318:	4641      	mov	r1, r8
 800131a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800134c <supro_preamp_f32+0x144>
 800131e:	4668      	mov	r0, sp
 8001320:	f006 f91c 	bl	800755c <arm_scale_f32>
}
 8001324:	f50d 4dc0 	add.w	sp, sp, #24576	@ 0x6000
 8001328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800132c:	2401827c 	.word	0x2401827c
 8001330:	00000000 	.word	0x00000000
 8001334:	3f8e9370 	.word	0x3f8e9370
 8001338:	0800c61c 	.word	0x0800c61c
 800133c:	3f186130 	.word	0x3f186130
 8001340:	d267d638 	.word	0xd267d638
 8001344:	3f0d61b4 	.word	0x3f0d61b4
 8001348:	3ee53c98 	.word	0x3ee53c98
 800134c:	40d6c29a 	.word	0x40d6c29a

08001350 <supro_process>:
{
 8001350:	b570      	push	{r4, r5, r6, lr}
	arm_scale_f32(p->processBuffer, 0.2, p->processBuffer, BUFFER_SIZE);
 8001352:	f244 0508 	movw	r5, #16392	@ 0x4008
{
 8001356:	b082      	sub	sp, #8
	arm_scale_f32(p->processBuffer, 0.2, p->processBuffer, BUFFER_SIZE);
 8001358:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80013bc <supro_process+0x6c>
{
 800135c:	4604      	mov	r4, r0
	arm_scale_f32(p->processBuffer, 0.2, p->processBuffer, BUFFER_SIZE);
 800135e:	4405      	add	r5, r0
 8001360:	f44f 6280 	mov.w	r2, #1024	@ 0x400
	partitioned_fir_convolution_fft(p, supro_sim.fir1, state, fftOut, zeropad);
 8001364:	4e16      	ldr	r6, [pc, #88]	@ (80013c0 <supro_process+0x70>)
	arm_scale_f32(p->processBuffer, 0.2, p->processBuffer, BUFFER_SIZE);
 8001366:	4629      	mov	r1, r5
 8001368:	4628      	mov	r0, r5
 800136a:	f006 f8f7 	bl	800755c <arm_scale_f32>
	partitioned_fir_convolution_fft(p, supro_sim.fir1, state, fftOut, zeropad);
 800136e:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <supro_process+0x74>)
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <supro_process+0x78>)
 8001372:	4620      	mov	r0, r4
 8001374:	9200      	str	r2, [sp, #0]
 8001376:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <supro_process+0x7c>)
 8001378:	6831      	ldr	r1, [r6, #0]
 800137a:	f7ff fac3 	bl	8000904 <partitioned_fir_convolution_fft>
	supro_preamp_f32(p);
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff ff42 	bl	8001208 <supro_preamp_f32>
	partitioned_fir_convolution_fft(p, supro_sim.fir2, state2, fftOut2, zeropad2);
 8001384:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <supro_process+0x80>)
 8001386:	4620      	mov	r0, r4
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <supro_process+0x84>)
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <supro_process+0x88>)
 800138e:	6871      	ldr	r1, [r6, #4]
 8001390:	f7ff fab8 	bl	8000904 <partitioned_fir_convolution_fft>
	partitioned_fir_convolution_fft(p, supro_sim.fir3, state3, fftOut3, zeropad3);
 8001394:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <supro_process+0x8c>)
 8001396:	68b1      	ldr	r1, [r6, #8]
 8001398:	4620      	mov	r0, r4
 800139a:	9200      	str	r2, [sp, #0]
 800139c:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <supro_process+0x90>)
 800139e:	4a11      	ldr	r2, [pc, #68]	@ (80013e4 <supro_process+0x94>)
 80013a0:	f7ff fab0 	bl	8000904 <partitioned_fir_convolution_fft>
	arm_scale_f32(p->processBuffer, 0.001, p->processBuffer, BUFFER_SIZE);
 80013a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013a8:	4629      	mov	r1, r5
 80013aa:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80013e8 <supro_process+0x98>
 80013ae:	4628      	mov	r0, r5
}
 80013b0:	b002      	add	sp, #8
 80013b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	arm_scale_f32(p->processBuffer, 0.001, p->processBuffer, BUFFER_SIZE);
 80013b6:	f006 b8d1 	b.w	800755c <arm_scale_f32>
 80013ba:	bf00      	nop
 80013bc:	3e4ccccd 	.word	0x3e4ccccd
 80013c0:	24000038 	.word	0x24000038
 80013c4:	20007000 	.word	0x20007000
 80013c8:	2401c288 	.word	0x2401c288
 80013cc:	20006000 	.word	0x20006000
 80013d0:	20004000 	.word	0x20004000
 80013d4:	2401a288 	.word	0x2401a288
 80013d8:	20003000 	.word	0x20003000
 80013dc:	20001000 	.word	0x20001000
 80013e0:	24018288 	.word	0x24018288
 80013e4:	20000000 	.word	0x20000000
 80013e8:	3a83126f 	.word	0x3a83126f

080013ec <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013ec:	4927      	ldr	r1, [pc, #156]	@ (800148c <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ee:	4a28      	ldr	r2, [pc, #160]	@ (8001490 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80013f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 80013f8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013fe:	6813      	ldr	r3, [r2, #0]
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	2b06      	cmp	r3, #6
 8001406:	d805      	bhi.n	8001414 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001408:	6813      	ldr	r3, [r2, #0]
 800140a:	f023 030f 	bic.w	r3, r3, #15
 800140e:	f043 0307 	orr.w	r3, r3, #7
 8001412:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001414:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001416:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001418:	4a1f      	ldr	r2, [pc, #124]	@ (8001498 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800141a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800141c:	481c      	ldr	r0, [pc, #112]	@ (8001490 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800141e:	f041 0101 	orr.w	r1, r1, #1
 8001422:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001424:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001426:	6819      	ldr	r1, [r3, #0]
 8001428:	400a      	ands	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800142c:	6803      	ldr	r3, [r0, #0]
 800142e:	071b      	lsls	r3, r3, #28
 8001430:	d505      	bpl.n	800143e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001432:	6803      	ldr	r3, [r0, #0]
 8001434:	f023 030f 	bic.w	r3, r3, #15
 8001438:	f043 0307 	orr.w	r3, r3, #7
 800143c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <SystemInit+0xa8>)
 8001440:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001442:	4916      	ldr	r1, [pc, #88]	@ (800149c <SystemInit+0xb0>)
  RCC->PLLCFGR = 0x01FF0000;
 8001444:	4816      	ldr	r0, [pc, #88]	@ (80014a0 <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 8001446:	4c17      	ldr	r4, [pc, #92]	@ (80014a4 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8001448:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800144a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800144c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800144e:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8001450:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001452:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001456:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001458:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800145a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800145c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800145e:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001460:	4811      	ldr	r0, [pc, #68]	@ (80014a8 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8001462:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8001466:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001468:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800146a:	6803      	ldr	r3, [r0, #0]
 800146c:	f36f 030f 	bfc	r3, #0, #16
 8001470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001474:	d203      	bcs.n	800147e <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <SystemInit+0xc0>)
 8001478:	2201      	movs	r2, #1
 800147a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <SystemInit+0xc4>)
 8001480:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001484:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00
 8001490:	52002000 	.word	0x52002000
 8001494:	58024400 	.word	0x58024400
 8001498:	eaf6ed7f 	.word	0xeaf6ed7f
 800149c:	01010280 	.word	0x01010280
 80014a0:	01ff0000 	.word	0x01ff0000
 80014a4:	02020200 	.word	0x02020200
 80014a8:	5c001000 	.word	0x5c001000
 80014ac:	51008000 	.word	0x51008000
 80014b0:	52004000 	.word	0x52004000

080014b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b8:	f7ff ff98 	bl	80013ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014be:	490d      	ldr	r1, [pc, #52]	@ (80014f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c0:	4a0d      	ldr	r2, [pc, #52]	@ (80014f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	@ (80014fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f006 fc1b 	bl	8007d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e6:	f7ff f80d 	bl	8000504 <main>
  bx  lr
 80014ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014f4:	24000058 	.word	0x24000058
  ldr r2, =_sidata
 80014f8:	0801facc 	.word	0x0801facc
  ldr r2, =_sbss
 80014fc:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001500:	2401e28c 	.word	0x2401e28c

08001504 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC3_IRQHandler>
	...

08001508 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001508:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <HAL_InitTick+0x40>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b90b      	cbnz	r3, 8001512 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800150e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001510:	4770      	bx	lr
{
 8001512:	b510      	push	{r4, lr}
 8001514:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001516:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800151a:	4a0c      	ldr	r2, [pc, #48]	@ (800154c <HAL_InitTick+0x44>)
 800151c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001520:	6810      	ldr	r0, [r2, #0]
 8001522:	fbb0 f0f3 	udiv	r0, r0, r3
 8001526:	f000 ffe9 	bl	80024fc <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	2c0f      	cmp	r4, #15
 800152c:	d800      	bhi.n	8001530 <HAL_InitTick+0x28>
 800152e:	b108      	cbz	r0, 8001534 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001530:	2001      	movs	r0, #1
}
 8001532:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	4621      	mov	r1, r4
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 ff94 	bl	8002468 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4b03      	ldr	r3, [pc, #12]	@ (8001550 <HAL_InitTick+0x48>)
 8001542:	2000      	movs	r0, #0
 8001544:	601c      	str	r4, [r3, #0]
}
 8001546:	bd10      	pop	{r4, pc}
 8001548:	24000050 	.word	0x24000050
 800154c:	2400004c 	.word	0x2400004c
 8001550:	24000054 	.word	0x24000054

08001554 <HAL_Init>:
{
 8001554:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001556:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001558:	4c12      	ldr	r4, [pc, #72]	@ (80015a4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155a:	f000 ff73 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800155e:	f003 f82f 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_Init+0x54>)
 8001564:	4911      	ldr	r1, [pc, #68]	@ (80015ac <HAL_Init+0x58>)
 8001566:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001568:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800156a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800156e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001572:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001574:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001576:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800157a:	490d      	ldr	r1, [pc, #52]	@ (80015b0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800157c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001580:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001582:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001586:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001588:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800158a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158c:	f7ff ffbc 	bl	8001508 <HAL_InitTick>
 8001590:	b110      	cbz	r0, 8001598 <HAL_Init+0x44>
    return HAL_ERROR;
 8001592:	2401      	movs	r4, #1
}
 8001594:	4620      	mov	r0, r4
 8001596:	bd10      	pop	{r4, pc}
 8001598:	4604      	mov	r4, r0
  HAL_MspInit();
 800159a:	f7ff fcdf 	bl	8000f5c <HAL_MspInit>
}
 800159e:	4620      	mov	r0, r4
 80015a0:	bd10      	pop	{r4, pc}
 80015a2:	bf00      	nop
 80015a4:	24000048 	.word	0x24000048
 80015a8:	58024400 	.word	0x58024400
 80015ac:	0800c654 	.word	0x0800c654
 80015b0:	2400004c 	.word	0x2400004c

080015b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80015b4:	4a03      	ldr	r2, [pc, #12]	@ (80015c4 <HAL_IncTick+0x10>)
 80015b6:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <HAL_IncTick+0x14>)
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	440b      	add	r3, r1
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	2401e288 	.word	0x2401e288
 80015c8:	24000050 	.word	0x24000050

080015cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015cc:	4b01      	ldr	r3, [pc, #4]	@ (80015d4 <HAL_GetTick+0x8>)
 80015ce:	6818      	ldr	r0, [r3, #0]
}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	2401e288 	.word	0x2401e288

080015d8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80015d8:	4b01      	ldr	r3, [pc, #4]	@ (80015e0 <HAL_GetREVID+0x8>)
 80015da:	6818      	ldr	r0, [r3, #0]
}
 80015dc:	0c00      	lsrs	r0, r0, #16
 80015de:	4770      	bx	lr
 80015e0:	5c001000 	.word	0x5c001000

080015e4 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015e4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80015e6:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015e8:	f7fe fed6 	bl	8000398 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015ec:	bd08      	pop	{r3, pc}
 80015ee:	bf00      	nop

080015f0 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop

080015f8 <HAL_ADC_IRQHandler>:
{
 80015f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015fa:	4a8e      	ldr	r2, [pc, #568]	@ (8001834 <HAL_ADC_IRQHandler+0x23c>)
{
 80015fc:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015fe:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001600:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001602:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001604:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001606:	f000 8095 	beq.w	8001734 <HAL_ADC_IRQHandler+0x13c>
 800160a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800160e:	4293      	cmp	r3, r2
 8001610:	f000 8090 	beq.w	8001734 <HAL_ADC_IRQHandler+0x13c>
 8001614:	4a88      	ldr	r2, [pc, #544]	@ (8001838 <HAL_ADC_IRQHandler+0x240>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001616:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001618:	07a9      	lsls	r1, r5, #30
 800161a:	f007 071f 	and.w	r7, r7, #31
 800161e:	d502      	bpl.n	8001626 <HAL_ADC_IRQHandler+0x2e>
 8001620:	07b2      	lsls	r2, r6, #30
 8001622:	f100 80aa 	bmi.w	800177a <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001626:	0769      	lsls	r1, r5, #29
 8001628:	d579      	bpl.n	800171e <HAL_ADC_IRQHandler+0x126>
 800162a:	0772      	lsls	r2, r6, #29
 800162c:	d577      	bpl.n	800171e <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800162e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001630:	06d2      	lsls	r2, r2, #27
 8001632:	d403      	bmi.n	800163c <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001634:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800163a:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001642:	d11c      	bne.n	800167e <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001644:	4a7d      	ldr	r2, [pc, #500]	@ (800183c <HAL_ADC_IRQHandler+0x244>)
 8001646:	4293      	cmp	r3, r2
 8001648:	f000 80e7 	beq.w	800181a <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800164c:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800164e:	0491      	lsls	r1, r2, #18
 8001650:	d415      	bmi.n	800167e <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	0712      	lsls	r2, r2, #28
 8001656:	d512      	bpl.n	800167e <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	0750      	lsls	r0, r2, #29
 800165c:	f100 80f2 	bmi.w	8001844 <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	f022 020c 	bic.w	r2, r2, #12
 8001666:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001668:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800166a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800166e:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001670:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001672:	04d9      	lsls	r1, r3, #19
 8001674:	d403      	bmi.n	800167e <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001676:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800167e:	4620      	mov	r0, r4
 8001680:	f7fe feaa 	bl	80003d8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	220c      	movs	r2, #12
 8001688:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800168a:	06aa      	lsls	r2, r5, #26
 800168c:	d54d      	bpl.n	800172a <HAL_ADC_IRQHandler+0x132>
 800168e:	06b0      	lsls	r0, r6, #26
 8001690:	d54b      	bpl.n	800172a <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001692:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001694:	06d0      	lsls	r0, r2, #27
 8001696:	d403      	bmi.n	80016a0 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001698:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800169a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800169e:	6562      	str	r2, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016a0:	4966      	ldr	r1, [pc, #408]	@ (800183c <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016a4:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80016a6:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80016a8:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
 80016ac:	d073      	beq.n	8001796 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016ae:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80016b0:	b9d2      	cbnz	r2, 80016e8 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80016b2:	018a      	lsls	r2, r1, #6
 80016b4:	f100 80a9 	bmi.w	800180a <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	0650      	lsls	r0, r2, #25
 80016bc:	d514      	bpl.n	80016e8 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80016be:	0289      	lsls	r1, r1, #10
 80016c0:	d412      	bmi.n	80016e8 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	0712      	lsls	r2, r2, #28
 80016c6:	f100 80c8 	bmi.w	800185a <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80016d0:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80016d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016d8:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80016dc:	05d8      	lsls	r0, r3, #23
 80016de:	d403      	bmi.n	80016e8 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016e8:	4620      	mov	r0, r4
 80016ea:	f000 fe3f 	bl	800236c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	2260      	movs	r2, #96	@ 0x60
 80016f2:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016f4:	0629      	lsls	r1, r5, #24
 80016f6:	d501      	bpl.n	80016fc <HAL_ADC_IRQHandler+0x104>
 80016f8:	0632      	lsls	r2, r6, #24
 80016fa:	d45f      	bmi.n	80017bc <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80016fc:	05e8      	lsls	r0, r5, #23
 80016fe:	d501      	bpl.n	8001704 <HAL_ADC_IRQHandler+0x10c>
 8001700:	05f1      	lsls	r1, r6, #23
 8001702:	d466      	bmi.n	80017d2 <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001704:	05aa      	lsls	r2, r5, #22
 8001706:	d501      	bpl.n	800170c <HAL_ADC_IRQHandler+0x114>
 8001708:	05b0      	lsls	r0, r6, #22
 800170a:	d44b      	bmi.n	80017a4 <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800170c:	06e9      	lsls	r1, r5, #27
 800170e:	d501      	bpl.n	8001714 <HAL_ADC_IRQHandler+0x11c>
 8001710:	06f2      	lsls	r2, r6, #27
 8001712:	d411      	bmi.n	8001738 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001714:	0569      	lsls	r1, r5, #21
 8001716:	d501      	bpl.n	800171c <HAL_ADC_IRQHandler+0x124>
 8001718:	0572      	lsls	r2, r6, #21
 800171a:	d466      	bmi.n	80017ea <HAL_ADC_IRQHandler+0x1f2>
}
 800171c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800171e:	0728      	lsls	r0, r5, #28
 8001720:	d5b3      	bpl.n	800168a <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001722:	0731      	lsls	r1, r6, #28
 8001724:	d483      	bmi.n	800162e <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001726:	06aa      	lsls	r2, r5, #26
 8001728:	d4b1      	bmi.n	800168e <HAL_ADC_IRQHandler+0x96>
 800172a:	0669      	lsls	r1, r5, #25
 800172c:	d5e2      	bpl.n	80016f4 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800172e:	0672      	lsls	r2, r6, #25
 8001730:	d5e0      	bpl.n	80016f4 <HAL_ADC_IRQHandler+0xfc>
 8001732:	e7ae      	b.n	8001692 <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001734:	4a42      	ldr	r2, [pc, #264]	@ (8001840 <HAL_ADC_IRQHandler+0x248>)
 8001736:	e76e      	b.n	8001616 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001738:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800173a:	b17a      	cbz	r2, 800175c <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800173c:	2f00      	cmp	r7, #0
 800173e:	d075      	beq.n	800182c <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001740:	4a3c      	ldr	r2, [pc, #240]	@ (8001834 <HAL_ADC_IRQHandler+0x23c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	f000 8087 	beq.w	8001856 <HAL_ADC_IRQHandler+0x25e>
 8001748:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800174c:	4293      	cmp	r3, r2
 800174e:	f000 8082 	beq.w	8001856 <HAL_ADC_IRQHandler+0x25e>
 8001752:	4a39      	ldr	r2, [pc, #228]	@ (8001838 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001754:	6892      	ldr	r2, [r2, #8]
 8001756:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 800175a:	d00b      	beq.n	8001774 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800175c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_ADC_ErrorCallback(hadc);
 800175e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001760:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001764:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001766:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 800176e:	f7ff ff41 	bl	80015f4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	2210      	movs	r2, #16
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e7cc      	b.n	8001714 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800177a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800177c:	06d8      	lsls	r0, r3, #27
 800177e:	d403      	bmi.n	8001788 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001780:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001782:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001786:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001788:	4620      	mov	r0, r4
 800178a:	f000 fdf7 	bl	800237c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	2202      	movs	r2, #2
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e747      	b.n	8001626 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001796:	21c1      	movs	r1, #193	@ 0xc1
 8001798:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800179a:	07c9      	lsls	r1, r1, #31
 800179c:	d487      	bmi.n	80016ae <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800179e:	4925      	ldr	r1, [pc, #148]	@ (8001834 <HAL_ADC_IRQHandler+0x23c>)
 80017a0:	68c9      	ldr	r1, [r1, #12]
 80017a2:	e785      	b.n	80016b0 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017a6:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ac:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017ae:	f000 fde3 	bl	8002378 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	e7a7      	b.n	800170c <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017be:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c4:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017c6:	f7ff ff13 	bl	80015f0 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	2280      	movs	r2, #128	@ 0x80
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e794      	b.n	80016fc <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017d4:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80017d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017da:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80017dc:	f000 fdca 	bl	8002374 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e78c      	b.n	8001704 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017f0:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017f6:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80017f8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80017fa:	f042 0208 	orr.w	r2, r2, #8
 80017fe:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001800:	6019      	str	r1, [r3, #0]
}
 8001802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001806:	f000 bdb3 	b.w	8002370 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800180a:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800180e:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001812:	4302      	orrs	r2, r0
 8001814:	f47f af68 	bne.w	80016e8 <HAL_ADC_IRQHandler+0xf0>
 8001818:	e74e      	b.n	80016b8 <HAL_ADC_IRQHandler+0xc0>
 800181a:	f240 2221 	movw	r2, #545	@ 0x221
 800181e:	40fa      	lsrs	r2, r7
 8001820:	07d0      	lsls	r0, r2, #31
 8001822:	f53f af13 	bmi.w	800164c <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001826:	4a03      	ldr	r2, [pc, #12]	@ (8001834 <HAL_ADC_IRQHandler+0x23c>)
 8001828:	68d2      	ldr	r2, [r2, #12]
 800182a:	e710      	b.n	800164e <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	0790      	lsls	r0, r2, #30
 8001830:	d0a0      	beq.n	8001774 <HAL_ADC_IRQHandler+0x17c>
 8001832:	e793      	b.n	800175c <HAL_ADC_IRQHandler+0x164>
 8001834:	40022000 	.word	0x40022000
 8001838:	58026300 	.word	0x58026300
 800183c:	40022100 	.word	0x40022100
 8001840:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001844:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001846:	f043 0310 	orr.w	r3, r3, #16
 800184a:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001854:	e713      	b.n	800167e <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <HAL_ADC_IRQHandler+0x274>)
 8001858:	e77c      	b.n	8001754 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800185c:	f043 0310 	orr.w	r3, r3, #16
 8001860:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001862:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	65a3      	str	r3, [r4, #88]	@ 0x58
 800186a:	e73d      	b.n	80016e8 <HAL_ADC_IRQHandler+0xf0>
 800186c:	40022300 	.word	0x40022300

08001870 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001870:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001872:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001874:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001878:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
{
 800187a:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800187c:	d11d      	bne.n	80018ba <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800187e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001884:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001886:	680a      	ldr	r2, [r1, #0]
 8001888:	f012 0f08 	tst.w	r2, #8
 800188c:	68ca      	ldr	r2, [r1, #12]
 800188e:	d01b      	beq.n	80018c8 <ADC_DMAConvCplt+0x58>
 8001890:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001894:	d10d      	bne.n	80018b2 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001896:	68ca      	ldr	r2, [r1, #12]
 8001898:	0494      	lsls	r4, r2, #18
 800189a:	d40a      	bmi.n	80018b2 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800189c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800189e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018a2:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80018a6:	04d1      	lsls	r1, r2, #19
 80018a8:	d403      	bmi.n	80018b2 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fd90 	bl	80003d8 <HAL_ADC_ConvCpltCallback>
}
 80018b8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018ba:	06d2      	lsls	r2, r2, #27
 80018bc:	d40a      	bmi.n	80018d4 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80018c8:	0790      	lsls	r0, r2, #30
 80018ca:	d0e7      	beq.n	800189c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fd83 	bl	80003d8 <HAL_ADC_ConvCpltCallback>
 80018d2:	e7f1      	b.n	80018b8 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fe8d 	bl	80015f4 <HAL_ADC_ErrorCallback>
}
 80018da:	bd10      	pop	{r4, pc}

080018dc <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018dc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80018de:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018e0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80018e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018e6:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018e8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018f0:	f7ff fe80 	bl	80015f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018f4:	bd08      	pop	{r3, pc}
 80018f6:	bf00      	nop

080018f8 <HAL_ADC_ConfigChannel>:
{
 80018f8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80018fa:	2200      	movs	r2, #0
{
 80018fc:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80018fe:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001900:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8001904:	2a01      	cmp	r2, #1
 8001906:	f000 80ef 	beq.w	8001ae8 <HAL_ADC_ConfigChannel+0x1f0>
 800190a:	2401      	movs	r4, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800190c:	6802      	ldr	r2, [r0, #0]
 800190e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001910:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001914:	6890      	ldr	r0, [r2, #8]
 8001916:	0745      	lsls	r5, r0, #29
 8001918:	d509      	bpl.n	800192e <HAL_ADC_ConfigChannel+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800191a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800191c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800191e:	f042 0220 	orr.w	r2, r2, #32
 8001922:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 800192a:	b002      	add	sp, #8
 800192c:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800192e:	680d      	ldr	r5, [r1, #0]
 8001930:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001932:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001936:	db0d      	blt.n	8001954 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001938:	f3c5 0613 	ubfx	r6, r5, #0, #20
 800193c:	2e00      	cmp	r6, #0
 800193e:	f000 80c1 	beq.w	8001ac4 <HAL_ADC_ConfigChannel+0x1cc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001946:	b115      	cbz	r5, 800194e <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001948:	fab5 f585 	clz	r5, r5
 800194c:	40ac      	lsls	r4, r5
 800194e:	69d5      	ldr	r5, [r2, #28]
 8001950:	432c      	orrs	r4, r5
 8001952:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001954:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8001956:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800195a:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 800195e:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001962:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8001964:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001968:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 800196c:	fa0c fc04 	lsl.w	ip, ip, r4
 8001970:	40a0      	lsls	r0, r4
 8001972:	f85e 4005 	ldr.w	r4, [lr, r5]
 8001976:	ea24 0c0c 	bic.w	ip, r4, ip
 800197a:	ea4c 0000 	orr.w	r0, ip, r0
 800197e:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001982:	6890      	ldr	r0, [r2, #8]
 8001984:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001988:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800198c:	0700      	lsls	r0, r0, #28
 800198e:	d542      	bpl.n	8001a16 <HAL_ADC_ConfigChannel+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001990:	6890      	ldr	r0, [r2, #8]
 8001992:	07c6      	lsls	r6, r0, #31
 8001994:	d43d      	bmi.n	8001a12 <HAL_ADC_ConfigChannel+0x11a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001996:	68cd      	ldr	r5, [r1, #12]
 8001998:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800199a:	f005 0618 	and.w	r6, r5, #24
 800199e:	48a9      	ldr	r0, [pc, #676]	@ (8001c44 <HAL_ADC_ConfigChannel+0x34c>)
 80019a0:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 80019a4:	40f0      	lsrs	r0, r6
 80019a6:	f3c4 0613 	ubfx	r6, r4, #0, #20
 80019aa:	4020      	ands	r0, r4
 80019ac:	ea21 0106 	bic.w	r1, r1, r6
 80019b0:	4301      	orrs	r1, r0
 80019b2:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019b6:	49a4      	ldr	r1, [pc, #656]	@ (8001c48 <HAL_ADC_ConfigChannel+0x350>)
 80019b8:	428d      	cmp	r5, r1
 80019ba:	f000 808a 	beq.w	8001ad2 <HAL_ADC_ConfigChannel+0x1da>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019be:	2c00      	cmp	r4, #0
 80019c0:	da27      	bge.n	8001a12 <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019c2:	49a2      	ldr	r1, [pc, #648]	@ (8001c4c <HAL_ADC_ConfigChannel+0x354>)
 80019c4:	428a      	cmp	r2, r1
 80019c6:	f000 80bd 	beq.w	8001b44 <HAL_ADC_ConfigChannel+0x24c>
 80019ca:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 80019ce:	428a      	cmp	r2, r1
 80019d0:	f000 80b8 	beq.w	8001b44 <HAL_ADC_ConfigChannel+0x24c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019d4:	489e      	ldr	r0, [pc, #632]	@ (8001c50 <HAL_ADC_ConfigChannel+0x358>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019d6:	499f      	ldr	r1, [pc, #636]	@ (8001c54 <HAL_ADC_ConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019d8:	6886      	ldr	r6, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019da:	688d      	ldr	r5, [r1, #8]
 80019dc:	07ed      	lsls	r5, r5, #31
 80019de:	d49c      	bmi.n	800191a <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019e0:	4d9d      	ldr	r5, [pc, #628]	@ (8001c58 <HAL_ADC_ConfigChannel+0x360>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019e2:	f006 7ce0 	and.w	ip, r6, #29360128	@ 0x1c00000
 80019e6:	42ac      	cmp	r4, r5
 80019e8:	f000 8156 	beq.w	8001c98 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019ec:	4d9b      	ldr	r5, [pc, #620]	@ (8001c5c <HAL_ADC_ConfigChannel+0x364>)
 80019ee:	42ac      	cmp	r4, r5
 80019f0:	f000 8118 	beq.w	8001c24 <HAL_ADC_ConfigChannel+0x32c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019f4:	4d9a      	ldr	r5, [pc, #616]	@ (8001c60 <HAL_ADC_ConfigChannel+0x368>)
 80019f6:	42ac      	cmp	r4, r5
 80019f8:	d10b      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 80019fa:	0274      	lsls	r4, r6, #9
 80019fc:	d409      	bmi.n	8001a12 <HAL_ADC_ConfigChannel+0x11a>
 80019fe:	428a      	cmp	r2, r1
 8001a00:	d107      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a02:	6882      	ldr	r2, [r0, #8]
 8001a04:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001a08:	ea42 020c 	orr.w	r2, r2, ip
 8001a0c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001a10:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a12:	2000      	movs	r0, #0
 8001a14:	e786      	b.n	8001924 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a16:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a18:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 8001a1c:	f04f 0e07 	mov.w	lr, #7
 8001a20:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a22:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8001a24:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a28:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001a2c:	fa0e fe04 	lsl.w	lr, lr, r4
 8001a30:	fa06 f404 	lsl.w	r4, r6, r4
 8001a34:	f85c 0005 	ldr.w	r0, [ip, r5]
 8001a38:	ea20 000e 	bic.w	r0, r0, lr
 8001a3c:	4320      	orrs	r0, r4
 8001a3e:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a42:	4888      	ldr	r0, [pc, #544]	@ (8001c64 <HAL_ADC_ConfigChannel+0x36c>)
 8001a44:	694d      	ldr	r5, [r1, #20]
 8001a46:	6800      	ldr	r0, [r0, #0]
 8001a48:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8001a4c:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8001a50:	68d0      	ldr	r0, [r2, #12]
 8001a52:	d039      	beq.n	8001ac8 <HAL_ADC_ConfigChannel+0x1d0>
 8001a54:	f010 0f10 	tst.w	r0, #16
 8001a58:	68d0      	ldr	r0, [r2, #12]
 8001a5a:	d035      	beq.n	8001ac8 <HAL_ADC_ConfigChannel+0x1d0>
 8001a5c:	0840      	lsrs	r0, r0, #1
 8001a5e:	f000 0008 	and.w	r0, r0, #8
 8001a62:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a64:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a66:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a68:	2e04      	cmp	r6, #4
 8001a6a:	d040      	beq.n	8001aee <HAL_ADC_ConfigChannel+0x1f6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6c:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8001a70:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8001a74:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 8001a78:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001a7c:	4320      	orrs	r0, r4
 8001a7e:	4328      	orrs	r0, r5
 8001a80:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001a84:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a86:	690d      	ldr	r5, [r1, #16]
 8001a88:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a8c:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 8001a90:	fab4 f484 	clz	r4, r4
 8001a94:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001a98:	0964      	lsrs	r4, r4, #5
 8001a9a:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 8001a9e:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001aa2:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001aa4:	690d      	ldr	r5, [r1, #16]
 8001aa6:	f1a0 0001 	sub.w	r0, r0, #1
 8001aaa:	6914      	ldr	r4, [r2, #16]
 8001aac:	f005 051f 	and.w	r5, r5, #31
 8001ab0:	fab0 f080 	clz	r0, r0
 8001ab4:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 8001ab8:	0940      	lsrs	r0, r0, #5
 8001aba:	02c0      	lsls	r0, r0, #11
 8001abc:	40a8      	lsls	r0, r5
 8001abe:	4320      	orrs	r0, r4
 8001ac0:	6110      	str	r0, [r2, #16]
}
 8001ac2:	e765      	b.n	8001990 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ac4:	4084      	lsls	r4, r0
 8001ac6:	e742      	b.n	800194e <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ac8:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001acc:	0040      	lsls	r0, r0, #1
 8001ace:	4085      	lsls	r5, r0
 8001ad0:	e7c8      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x16c>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001ad2:	495e      	ldr	r1, [pc, #376]	@ (8001c4c <HAL_ADC_ConfigChannel+0x354>)
 8001ad4:	428a      	cmp	r2, r1
 8001ad6:	d07a      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x2d6>
 8001ad8:	4963      	ldr	r1, [pc, #396]	@ (8001c68 <HAL_ADC_ConfigChannel+0x370>)
 8001ada:	428a      	cmp	r2, r1
 8001adc:	d040      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001ade:	69d1      	ldr	r1, [r2, #28]
 8001ae0:	f041 0101 	orr.w	r1, r1, #1
 8001ae4:	61d1      	str	r1, [r2, #28]
}
 8001ae6:	e76a      	b.n	80019be <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8001ae8:	2002      	movs	r0, #2
}
 8001aea:	b002      	add	sp, #8
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001aee:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8001af0:	0684      	lsls	r4, r0, #26
 8001af2:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8001af6:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8001afa:	d014      	beq.n	8001b26 <HAL_ADC_ConfigChannel+0x22e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001afc:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001afe:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001b02:	4284      	cmp	r4, r0
 8001b04:	d019      	beq.n	8001b3a <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b06:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001b08:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001b0c:	4284      	cmp	r4, r0
 8001b0e:	d00f      	beq.n	8001b30 <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b10:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001b12:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001b16:	4284      	cmp	r4, r0
 8001b18:	f47f af3a 	bne.w	8001990 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001b1c:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001b1e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001b22:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8001b24:	e734      	b.n	8001990 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001b26:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8001b28:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001b2c:	6610      	str	r0, [r2, #96]	@ 0x60
 8001b2e:	e7e5      	b.n	8001afc <HAL_ADC_ConfigChannel+0x204>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001b30:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001b32:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001b36:	6690      	str	r0, [r2, #104]	@ 0x68
 8001b38:	e7ea      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x218>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001b3a:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001b3c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001b40:	6650      	str	r0, [r2, #100]	@ 0x64
 8001b42:	e7e0      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x20e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b44:	4949      	ldr	r1, [pc, #292]	@ (8001c6c <HAL_ADC_ConfigChannel+0x374>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b46:	4a41      	ldr	r2, [pc, #260]	@ (8001c4c <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b48:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b4a:	6892      	ldr	r2, [r2, #8]
 8001b4c:	f012 0f01 	tst.w	r2, #1
 8001b50:	4a45      	ldr	r2, [pc, #276]	@ (8001c68 <HAL_ADC_ConfigChannel+0x370>)
 8001b52:	6892      	ldr	r2, [r2, #8]
 8001b54:	f47f aee1 	bne.w	800191a <HAL_ADC_ConfigChannel+0x22>
 8001b58:	07d2      	lsls	r2, r2, #31
 8001b5a:	f53f aede 	bmi.w	800191a <HAL_ADC_ConfigChannel+0x22>
 8001b5e:	e758      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001b60:	4943      	ldr	r1, [pc, #268]	@ (8001c70 <HAL_ADC_ConfigChannel+0x378>)
 8001b62:	428c      	cmp	r4, r1
 8001b64:	d058      	beq.n	8001c18 <HAL_ADC_ConfigChannel+0x320>
 8001b66:	4943      	ldr	r1, [pc, #268]	@ (8001c74 <HAL_ADC_ConfigChannel+0x37c>)
 8001b68:	428c      	cmp	r4, r1
 8001b6a:	d057      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x324>
 8001b6c:	4942      	ldr	r1, [pc, #264]	@ (8001c78 <HAL_ADC_ConfigChannel+0x380>)
 8001b6e:	428c      	cmp	r4, r1
 8001b70:	f000 80b5 	beq.w	8001cde <HAL_ADC_ConfigChannel+0x3e6>
 8001b74:	4941      	ldr	r1, [pc, #260]	@ (8001c7c <HAL_ADC_ConfigChannel+0x384>)
 8001b76:	428c      	cmp	r4, r1
 8001b78:	f000 80b3 	beq.w	8001ce2 <HAL_ADC_ConfigChannel+0x3ea>
 8001b7c:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001b80:	3110      	adds	r1, #16
 8001b82:	428c      	cmp	r4, r1
 8001b84:	f000 80af 	beq.w	8001ce6 <HAL_ADC_ConfigChannel+0x3ee>
 8001b88:	493d      	ldr	r1, [pc, #244]	@ (8001c80 <HAL_ADC_ConfigChannel+0x388>)
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	f000 80ad 	beq.w	8001cea <HAL_ADC_ConfigChannel+0x3f2>
 8001b90:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8001b94:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8001b98:	428c      	cmp	r4, r1
 8001b9a:	f000 80a8 	beq.w	8001cee <HAL_ADC_ConfigChannel+0x3f6>
 8001b9e:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001ba2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001ba6:	428c      	cmp	r4, r1
 8001ba8:	f000 80a3 	beq.w	8001cf2 <HAL_ADC_ConfigChannel+0x3fa>
 8001bac:	4935      	ldr	r1, [pc, #212]	@ (8001c84 <HAL_ADC_ConfigChannel+0x38c>)
 8001bae:	428c      	cmp	r4, r1
 8001bb0:	d195      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x1e6>
 8001bb2:	4935      	ldr	r1, [pc, #212]	@ (8001c88 <HAL_ADC_ConfigChannel+0x390>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001bb8:	2900      	cmp	r1, #0
 8001bba:	d031      	beq.n	8001c20 <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 8001bbc:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f101 	lsl.w	r1, r0, r1
 8001bc6:	69d0      	ldr	r0, [r2, #28]
 8001bc8:	4301      	orrs	r1, r0
 8001bca:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bcc:	e721      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001bce:	4928      	ldr	r1, [pc, #160]	@ (8001c70 <HAL_ADC_ConfigChannel+0x378>)
 8001bd0:	428c      	cmp	r4, r1
 8001bd2:	d021      	beq.n	8001c18 <HAL_ADC_ConfigChannel+0x320>
 8001bd4:	4927      	ldr	r1, [pc, #156]	@ (8001c74 <HAL_ADC_ConfigChannel+0x37c>)
 8001bd6:	428c      	cmp	r4, r1
 8001bd8:	d020      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x324>
 8001bda:	4927      	ldr	r1, [pc, #156]	@ (8001c78 <HAL_ADC_ConfigChannel+0x380>)
 8001bdc:	428c      	cmp	r4, r1
 8001bde:	d07e      	beq.n	8001cde <HAL_ADC_ConfigChannel+0x3e6>
 8001be0:	4926      	ldr	r1, [pc, #152]	@ (8001c7c <HAL_ADC_ConfigChannel+0x384>)
 8001be2:	428c      	cmp	r4, r1
 8001be4:	d07d      	beq.n	8001ce2 <HAL_ADC_ConfigChannel+0x3ea>
 8001be6:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001bea:	3110      	adds	r1, #16
 8001bec:	428c      	cmp	r4, r1
 8001bee:	d07a      	beq.n	8001ce6 <HAL_ADC_ConfigChannel+0x3ee>
 8001bf0:	4923      	ldr	r1, [pc, #140]	@ (8001c80 <HAL_ADC_ConfigChannel+0x388>)
 8001bf2:	428c      	cmp	r4, r1
 8001bf4:	d079      	beq.n	8001cea <HAL_ADC_ConfigChannel+0x3f2>
 8001bf6:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8001bfa:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8001bfe:	428c      	cmp	r4, r1
 8001c00:	d075      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x3f6>
 8001c02:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001c06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001c0a:	428c      	cmp	r4, r1
 8001c0c:	d071      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x3fa>
 8001c0e:	491f      	ldr	r1, [pc, #124]	@ (8001c8c <HAL_ADC_ConfigChannel+0x394>)
 8001c10:	428c      	cmp	r4, r1
 8001c12:	d1cb      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x2b4>
 8001c14:	491e      	ldr	r1, [pc, #120]	@ (8001c90 <HAL_ADC_ConfigChannel+0x398>)
 8001c16:	e7cd      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x2bc>
 8001c18:	2101      	movs	r1, #1
 8001c1a:	e7cb      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x2bc>
 8001c1c:	491d      	ldr	r1, [pc, #116]	@ (8001c94 <HAL_ADC_ConfigChannel+0x39c>)
 8001c1e:	e7c9      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x2bc>
 8001c20:	2101      	movs	r1, #1
 8001c22:	e7d0      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x2ce>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c24:	01f5      	lsls	r5, r6, #7
 8001c26:	f53f aef4 	bmi.w	8001a12 <HAL_ADC_ConfigChannel+0x11a>
 8001c2a:	428a      	cmp	r2, r1
 8001c2c:	f47f aef1 	bne.w	8001a12 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c30:	6882      	ldr	r2, [r0, #8]
 8001c32:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001c36:	ea42 020c 	orr.w	r2, r2, ip
 8001c3a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001c3e:	6082      	str	r2, [r0, #8]
}
 8001c40:	e6e7      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x11a>
 8001c42:	bf00      	nop
 8001c44:	000fffff 	.word	0x000fffff
 8001c48:	47ff0000 	.word	0x47ff0000
 8001c4c:	40022000 	.word	0x40022000
 8001c50:	58026300 	.word	0x58026300
 8001c54:	58026000 	.word	0x58026000
 8001c58:	cb840000 	.word	0xcb840000
 8001c5c:	c7520000 	.word	0xc7520000
 8001c60:	cfb80000 	.word	0xcfb80000
 8001c64:	5c001000 	.word	0x5c001000
 8001c68:	40022100 	.word	0x40022100
 8001c6c:	40022300 	.word	0x40022300
 8001c70:	04300002 	.word	0x04300002
 8001c74:	08600004 	.word	0x08600004
 8001c78:	0c900008 	.word	0x0c900008
 8001c7c:	10c00010 	.word	0x10c00010
 8001c80:	2a000400 	.word	0x2a000400
 8001c84:	4b840000 	.word	0x4b840000
 8001c88:	4fb80000 	.word	0x4fb80000
 8001c8c:	43210000 	.word	0x43210000
 8001c90:	47520000 	.word	0x47520000
 8001c94:	19200040 	.word	0x19200040
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c98:	0236      	lsls	r6, r6, #8
 8001c9a:	f53f aeba 	bmi.w	8001a12 <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c9e:	428a      	cmp	r2, r1
 8001ca0:	f47f aeb7 	bne.w	8001a12 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ca4:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ca6:	4914      	ldr	r1, [pc, #80]	@ (8001cf8 <HAL_ADC_ConfigChannel+0x400>)
 8001ca8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001cac:	ea42 020c 	orr.w	r2, r2, ip
 8001cb0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001cb4:	6082      	str	r2, [r0, #8]
 8001cb6:	680a      	ldr	r2, [r1, #0]
 8001cb8:	4910      	ldr	r1, [pc, #64]	@ (8001cfc <HAL_ADC_ConfigChannel+0x404>)
 8001cba:	0992      	lsrs	r2, r2, #6
 8001cbc:	fba1 1202 	umull	r1, r2, r1, r2
 8001cc0:	0992      	lsrs	r2, r2, #6
 8001cc2:	3201      	adds	r2, #1
 8001cc4:	0052      	lsls	r2, r2, #1
 8001cc6:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001cc8:	9a01      	ldr	r2, [sp, #4]
 8001cca:	2a00      	cmp	r2, #0
 8001ccc:	f43f aea1 	beq.w	8001a12 <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 8001cd0:	9a01      	ldr	r2, [sp, #4]
 8001cd2:	3a01      	subs	r2, #1
 8001cd4:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001cd6:	9a01      	ldr	r2, [sp, #4]
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d1f9      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x3d8>
 8001cdc:	e699      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001cde:	4908      	ldr	r1, [pc, #32]	@ (8001d00 <HAL_ADC_ConfigChannel+0x408>)
 8001ce0:	e768      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x2bc>
 8001ce2:	4908      	ldr	r1, [pc, #32]	@ (8001d04 <HAL_ADC_ConfigChannel+0x40c>)
 8001ce4:	e766      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x2bc>
 8001ce6:	4908      	ldr	r1, [pc, #32]	@ (8001d08 <HAL_ADC_ConfigChannel+0x410>)
 8001ce8:	e764      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x2bc>
 8001cea:	4908      	ldr	r1, [pc, #32]	@ (8001d0c <HAL_ADC_ConfigChannel+0x414>)
 8001cec:	e762      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x2bc>
 8001cee:	4908      	ldr	r1, [pc, #32]	@ (8001d10 <HAL_ADC_ConfigChannel+0x418>)
 8001cf0:	e760      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x2bc>
 8001cf2:	4908      	ldr	r1, [pc, #32]	@ (8001d14 <HAL_ADC_ConfigChannel+0x41c>)
 8001cf4:	e75e      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x2bc>
 8001cf6:	bf00      	nop
 8001cf8:	2400004c 	.word	0x2400004c
 8001cfc:	053e2d63 	.word	0x053e2d63
 8001d00:	1d500080 	.word	0x1d500080
 8001d04:	21800100 	.word	0x21800100
 8001d08:	25b00200 	.word	0x25b00200
 8001d0c:	2e300800 	.word	0x2e300800
 8001d10:	32601000 	.word	0x32601000
 8001d14:	36902000 	.word	0x36902000

08001d18 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d18:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	07d1      	lsls	r1, r2, #31
 8001d1e:	d501      	bpl.n	8001d24 <ADC_Enable+0xc>
  return HAL_OK;
 8001d20:	2000      	movs	r0, #0
}
 8001d22:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <ADC_Enable+0x9c>)
 8001d28:	4211      	tst	r1, r2
{
 8001d2a:	b570      	push	{r4, r5, r6, lr}
 8001d2c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001d2e:	d12f      	bne.n	8001d90 <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 8001d30:	6899      	ldr	r1, [r3, #8]
 8001d32:	4a21      	ldr	r2, [pc, #132]	@ (8001db8 <ADC_Enable+0xa0>)
 8001d34:	400a      	ands	r2, r1
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001d3c:	f7ff fc46 	bl	80015cc <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	4a1e      	ldr	r2, [pc, #120]	@ (8001dbc <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 8001d44:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d02c      	beq.n	8001da4 <ADC_Enable+0x8c>
 8001d4a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d028      	beq.n	8001da4 <ADC_Enable+0x8c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d52:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 8001d56:	f502 4284 	add.w	r2, r2, #16896	@ 0x4200
 8001d5a:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	07d2      	lsls	r2, r2, #31
 8001d60:	d414      	bmi.n	8001d8c <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 8001d62:	4e15      	ldr	r6, [pc, #84]	@ (8001db8 <ADC_Enable+0xa0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	07d0      	lsls	r0, r2, #31
 8001d68:	d404      	bmi.n	8001d74 <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	4032      	ands	r2, r6
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d74:	f7ff fc2a 	bl	80015cc <HAL_GetTick>
 8001d78:	1b43      	subs	r3, r0, r5
 8001d7a:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d7c:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d7e:	d902      	bls.n	8001d86 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	07d1      	lsls	r1, r2, #31
 8001d84:	d504      	bpl.n	8001d90 <ADC_Enable+0x78>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	07d2      	lsls	r2, r2, #31
 8001d8a:	d5eb      	bpl.n	8001d64 <ADC_Enable+0x4c>
  return HAL_OK;
 8001d8c:	2000      	movs	r0, #0
}
 8001d8e:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d90:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001d92:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d94:	f043 0310 	orr.w	r3, r3, #16
 8001d98:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8001da2:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001da4:	4a06      	ldr	r2, [pc, #24]	@ (8001dc0 <ADC_Enable+0xa8>)
 8001da6:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001da8:	06d6      	lsls	r6, r2, #27
 8001daa:	d0d7      	beq.n	8001d5c <ADC_Enable+0x44>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dac:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <ADC_Enable+0xac>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d1d4      	bne.n	8001d5c <ADC_Enable+0x44>
 8001db2:	e7eb      	b.n	8001d8c <ADC_Enable+0x74>
 8001db4:	8000003f 	.word	0x8000003f
 8001db8:	7fffffc0 	.word	0x7fffffc0
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40022300 	.word	0x40022300
 8001dc4:	40022100 	.word	0x40022100

08001dc8 <HAL_ADC_Start_DMA>:
{
 8001dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8001ebc <HAL_ADC_Start_DMA+0xf4>)
{
 8001dce:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dd0:	6800      	ldr	r0, [r0, #0]
{
 8001dd2:	460e      	mov	r6, r1
 8001dd4:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dd6:	4298      	cmp	r0, r3
 8001dd8:	d01c      	beq.n	8001e14 <HAL_ADC_Start_DMA+0x4c>
 8001dda:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001dde:	4298      	cmp	r0, r3
 8001de0:	d018      	beq.n	8001e14 <HAL_ADC_Start_DMA+0x4c>
 8001de2:	4b37      	ldr	r3, [pc, #220]	@ (8001ec0 <HAL_ADC_Start_DMA+0xf8>)
 8001de4:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001de6:	6885      	ldr	r5, [r0, #8]
 8001de8:	f015 0504 	ands.w	r5, r5, #4
 8001dec:	d118      	bne.n	8001e20 <HAL_ADC_Start_DMA+0x58>
    __HAL_LOCK(hadc);
 8001dee:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8001df2:	2a01      	cmp	r2, #1
 8001df4:	d014      	beq.n	8001e20 <HAL_ADC_Start_DMA+0x58>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001df6:	f003 081f 	and.w	r8, r3, #31
 8001dfa:	f240 2321 	movw	r3, #545	@ 0x221
 8001dfe:	2001      	movs	r0, #1
 8001e00:	fa23 f308 	lsr.w	r3, r3, r8
 8001e04:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e08:	4003      	ands	r3, r0
 8001e0a:	d10c      	bne.n	8001e26 <HAL_ADC_Start_DMA+0x5e>
      __HAL_UNLOCK(hadc);
 8001e0c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8001e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <HAL_ADC_Start_DMA+0xfc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e18:	6885      	ldr	r5, [r0, #8]
 8001e1a:	f015 0504 	ands.w	r5, r5, #4
 8001e1e:	d0e6      	beq.n	8001dee <HAL_ADC_Start_DMA+0x26>
    __HAL_LOCK(hadc);
 8001e20:	2002      	movs	r0, #2
}
 8001e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff ff76 	bl	8001d18 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d140      	bne.n	8001eb2 <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 8001e30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e32:	4b25      	ldr	r3, [pc, #148]	@ (8001ec8 <HAL_ADC_Start_DMA+0x100>)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e34:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8001e36:	4013      	ands	r3, r2
 8001e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3c:	6563      	str	r3, [r4, #84]	@ 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e3e:	f1b8 0f00 	cmp.w	r8, #0
 8001e42:	d002      	beq.n	8001e4a <HAL_ADC_Start_DMA+0x82>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e44:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <HAL_ADC_Start_DMA+0x104>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e46:	4299      	cmp	r1, r3
 8001e48:	d003      	beq.n	8001e52 <HAL_ADC_Start_DMA+0x8a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e4a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001e4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001e50:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e52:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001e54:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8001e58:	d02e      	beq.n	8001eb8 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e5c:	f023 0306 	bic.w	r3, r3, #6
 8001e60:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e62:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e64:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e66:	4d1a      	ldr	r5, [pc, #104]	@ (8001ed0 <HAL_ADC_Start_DMA+0x108>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e68:	463b      	mov	r3, r7
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001e6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e6c:	3140      	adds	r1, #64	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e6e:	63c5      	str	r5, [r0, #60]	@ 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e70:	4d18      	ldr	r5, [pc, #96]	@ (8001ed4 <HAL_ADC_Start_DMA+0x10c>)
 8001e72:	6405      	str	r5, [r0, #64]	@ 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e74:	4d18      	ldr	r5, [pc, #96]	@ (8001ed8 <HAL_ADC_Start_DMA+0x110>)
 8001e76:	64c5      	str	r5, [r0, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e78:	251c      	movs	r5, #28
 8001e7a:	f841 5c40 	str.w	r5, [r1, #-64]
        __HAL_UNLOCK(hadc);
 8001e7e:	2500      	movs	r5, #0
 8001e80:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e84:	f851 5c3c 	ldr.w	r5, [r1, #-60]
 8001e88:	f045 0510 	orr.w	r5, r5, #16
 8001e8c:	f841 5c3c 	str.w	r5, [r1, #-60]
 8001e90:	f851 5c34 	ldr.w	r5, [r1, #-52]
 8001e94:	f025 0503 	bic.w	r5, r5, #3
 8001e98:	4335      	orrs	r5, r6
 8001e9a:	f841 5c34 	str.w	r5, [r1, #-52]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e9e:	f001 f8bb 	bl	8003018 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ea2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <HAL_ADC_Start_DMA+0x114>)
 8001ea6:	6891      	ldr	r1, [r2, #8]
 8001ea8:	400b      	ands	r3, r1
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6093      	str	r3, [r2, #8]
}
 8001eb0:	e7b7      	b.n	8001e22 <HAL_ADC_Start_DMA+0x5a>
        __HAL_UNLOCK(hadc);
 8001eb2:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8001eb6:	e7b4      	b.n	8001e22 <HAL_ADC_Start_DMA+0x5a>
          ADC_CLEAR_ERRORCODE(hadc);
 8001eb8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001eba:	e7d2      	b.n	8001e62 <HAL_ADC_Start_DMA+0x9a>
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	58026300 	.word	0x58026300
 8001ec4:	40022300 	.word	0x40022300
 8001ec8:	fffff0fe 	.word	0xfffff0fe
 8001ecc:	40022100 	.word	0x40022100
 8001ed0:	08001871 	.word	0x08001871
 8001ed4:	080015e5 	.word	0x080015e5
 8001ed8:	080018dd 	.word	0x080018dd
 8001edc:	7fffffc0 	.word	0x7fffffc0

08001ee0 <ADC_Disable>:
{
 8001ee0:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001ee2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	0795      	lsls	r5, r2, #30
 8001ee8:	d502      	bpl.n	8001ef0 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eea:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8001eec:	2000      	movs	r0, #0
}
 8001eee:	bd38      	pop	{r3, r4, r5, pc}
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	07d4      	lsls	r4, r2, #31
 8001ef4:	d5fa      	bpl.n	8001eec <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4604      	mov	r4, r0
 8001efa:	f002 020d 	and.w	r2, r2, #13
 8001efe:	2a01      	cmp	r2, #1
 8001f00:	d009      	beq.n	8001f16 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001f04:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f06:	f043 0310 	orr.w	r3, r3, #16
 8001f0a:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8001f14:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001f16:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f18:	2103      	movs	r1, #3
 8001f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <ADC_Disable+0x70>)
 8001f1c:	4002      	ands	r2, r0
 8001f1e:	f042 0202 	orr.w	r2, r2, #2
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8001f26:	f7ff fb51 	bl	80015cc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f2a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001f2c:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	07d9      	lsls	r1, r3, #31
 8001f32:	d403      	bmi.n	8001f3c <ADC_Disable+0x5c>
 8001f34:	e7da      	b.n	8001eec <ADC_Disable+0xc>
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	07db      	lsls	r3, r3, #31
 8001f3a:	d5d7      	bpl.n	8001eec <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f3c:	f7ff fb46 	bl	80015cc <HAL_GetTick>
 8001f40:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f42:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f44:	2802      	cmp	r0, #2
 8001f46:	d9f6      	bls.n	8001f36 <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	07d2      	lsls	r2, r2, #31
 8001f4c:	d5f3      	bpl.n	8001f36 <ADC_Disable+0x56>
 8001f4e:	e7d8      	b.n	8001f02 <ADC_Disable+0x22>
 8001f50:	7fffffc0 	.word	0x7fffffc0

08001f54 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001f54:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001f56:	4a4f      	ldr	r2, [pc, #316]	@ (8002094 <ADC_ConfigureBoostMode+0x140>)
{
 8001f58:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001f5a:	6803      	ldr	r3, [r0, #0]
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d024      	beq.n	8001faa <ADC_ConfigureBoostMode+0x56>
 8001f60:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d020      	beq.n	8001faa <ADC_ConfigureBoostMode+0x56>
 8001f68:	4b4b      	ldr	r3, [pc, #300]	@ (8002098 <ADC_ConfigureBoostMode+0x144>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8001f70:	d020      	beq.n	8001fb4 <ADC_ConfigureBoostMode+0x60>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001f72:	f002 fcdd 	bl	8004930 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001f76:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8001f78:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8001f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f7e:	d06d      	beq.n	800205c <ADC_ConfigureBoostMode+0x108>
 8001f80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001f84:	d072      	beq.n	800206c <ADC_ConfigureBoostMode+0x118>
 8001f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f8a:	d067      	beq.n	800205c <ADC_ConfigureBoostMode+0x108>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001f8c:	f7ff fb24 	bl	80015d8 <HAL_GetREVID>
 8001f90:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001f94:	4298      	cmp	r0, r3
 8001f96:	d82d      	bhi.n	8001ff4 <ADC_ConfigureBoostMode+0xa0>
  {
    if (freq > 20000000UL)
 8001f98:	4a40      	ldr	r2, [pc, #256]	@ (800209c <ADC_ConfigureBoostMode+0x148>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001f9a:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 8001f9c:	4295      	cmp	r5, r2
 8001f9e:	d947      	bls.n	8002030 <ADC_ConfigureBoostMode+0xdc>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fa6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001fa8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001faa:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <ADC_ConfigureBoostMode+0x14c>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8001fb2:	d1de      	bne.n	8001f72 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001fb4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001fb8:	2100      	movs	r1, #0
 8001fba:	f003 ff33 	bl	8005e24 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001fbe:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001fc0:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8001fc2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001fc6:	d04d      	beq.n	8002064 <ADC_ConfigureBoostMode+0x110>
 8001fc8:	d825      	bhi.n	8002016 <ADC_ConfigureBoostMode+0xc2>
 8001fca:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001fce:	d04b      	beq.n	8002068 <ADC_ConfigureBoostMode+0x114>
 8001fd0:	d84e      	bhi.n	8002070 <ADC_ConfigureBoostMode+0x11c>
 8001fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fd6:	d008      	beq.n	8001fea <ADC_ConfigureBoostMode+0x96>
 8001fd8:	d855      	bhi.n	8002086 <ADC_ConfigureBoostMode+0x132>
 8001fda:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001fde:	d004      	beq.n	8001fea <ADC_ConfigureBoostMode+0x96>
 8001fe0:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001fe4:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001fe8:	d1d0      	bne.n	8001f8c <ADC_ConfigureBoostMode+0x38>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001fea:	0c9b      	lsrs	r3, r3, #18
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8001ff2:	e7cb      	b.n	8001f8c <ADC_ConfigureBoostMode+0x38>
    if (freq <= 6250000UL)
 8001ff4:	4a2b      	ldr	r2, [pc, #172]	@ (80020a4 <ADC_ConfigureBoostMode+0x150>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001ff6:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 8001ff8:	4295      	cmp	r5, r2
 8001ffa:	d923      	bls.n	8002044 <ADC_ConfigureBoostMode+0xf0>
    else if (freq <= 12500000UL)
 8001ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80020a8 <ADC_ConfigureBoostMode+0x154>)
 8001ffe:	4295      	cmp	r5, r2
 8002000:	d925      	bls.n	800204e <ADC_ConfigureBoostMode+0xfa>
    else if (freq <= 25000000UL)
 8002002:	4a2a      	ldr	r2, [pc, #168]	@ (80020ac <ADC_ConfigureBoostMode+0x158>)
 8002004:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002006:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8002008:	d839      	bhi.n	800207e <ADC_ConfigureBoostMode+0x12a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800200a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800200e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002012:	609a      	str	r2, [r3, #8]
}
 8002014:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8002016:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800201a:	d02e      	beq.n	800207a <ADC_ConfigureBoostMode+0x126>
 800201c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002020:	d1b4      	bne.n	8001f8c <ADC_ConfigureBoostMode+0x38>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002022:	f7ff fad9 	bl	80015d8 <HAL_GetREVID>
 8002026:	f241 0303 	movw	r3, #4099	@ 0x1003
 800202a:	4298      	cmp	r0, r3
 800202c:	d805      	bhi.n	800203a <ADC_ConfigureBoostMode+0xe6>
 800202e:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002036:	609a      	str	r2, [r3, #8]
}
 8002038:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <ADC_ConfigureBoostMode+0x150>)
 800203c:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	d304      	bcc.n	800204e <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800204a:	609a      	str	r2, [r3, #8]
}
 800204c:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002054:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002058:	609a      	str	r2, [r3, #8]
}
 800205a:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800205c:	0c1b      	lsrs	r3, r3, #16
 800205e:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8002062:	e793      	b.n	8001f8c <ADC_ConfigureBoostMode+0x38>
        freq /= 64UL;
 8002064:	0985      	lsrs	r5, r0, #6
        break;
 8002066:	e791      	b.n	8001f8c <ADC_ConfigureBoostMode+0x38>
        freq /= 16UL;
 8002068:	0905      	lsrs	r5, r0, #4
        break;
 800206a:	e78f      	b.n	8001f8c <ADC_ConfigureBoostMode+0x38>
        freq /= 4UL;
 800206c:	0885      	lsrs	r5, r0, #2
        break;
 800206e:	e78d      	b.n	8001f8c <ADC_ConfigureBoostMode+0x38>
    switch (hadc->Init.ClockPrescaler)
 8002070:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002074:	d18a      	bne.n	8001f8c <ADC_ConfigureBoostMode+0x38>
        freq /= 32UL;
 8002076:	0945      	lsrs	r5, r0, #5
        break;
 8002078:	e788      	b.n	8001f8c <ADC_ConfigureBoostMode+0x38>
        freq /= 128UL;
 800207a:	09c5      	lsrs	r5, r0, #7
        break;
 800207c:	e786      	b.n	8001f8c <ADC_ConfigureBoostMode+0x38>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800207e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002082:	609a      	str	r2, [r3, #8]
}
 8002084:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8002086:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800208a:	d0ae      	beq.n	8001fea <ADC_ConfigureBoostMode+0x96>
 800208c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002090:	d0ab      	beq.n	8001fea <ADC_ConfigureBoostMode+0x96>
 8002092:	e77b      	b.n	8001f8c <ADC_ConfigureBoostMode+0x38>
 8002094:	40022000 	.word	0x40022000
 8002098:	58026300 	.word	0x58026300
 800209c:	01312d00 	.word	0x01312d00
 80020a0:	40022300 	.word	0x40022300
 80020a4:	00bebc21 	.word	0x00bebc21
 80020a8:	017d7841 	.word	0x017d7841
 80020ac:	02faf081 	.word	0x02faf081

080020b0 <HAL_ADC_Init>:
{
 80020b0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80020b2:	2300      	movs	r3, #0
{
 80020b4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80020b6:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80020b8:	2800      	cmp	r0, #0
 80020ba:	f000 80a9 	beq.w	8002210 <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020be:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80020c0:	4604      	mov	r4, r0
 80020c2:	2d00      	cmp	r5, #0
 80020c4:	f000 80aa 	beq.w	800221c <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020c8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020ca:	6893      	ldr	r3, [r2, #8]
 80020cc:	009d      	lsls	r5, r3, #2
 80020ce:	d503      	bpl.n	80020d8 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020d0:	6891      	ldr	r1, [r2, #8]
 80020d2:	4b71      	ldr	r3, [pc, #452]	@ (8002298 <HAL_ADC_Init+0x1e8>)
 80020d4:	400b      	ands	r3, r1
 80020d6:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020d8:	6893      	ldr	r3, [r2, #8]
 80020da:	00d8      	lsls	r0, r3, #3
 80020dc:	d416      	bmi.n	800210c <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020de:	4b6f      	ldr	r3, [pc, #444]	@ (800229c <HAL_ADC_Init+0x1ec>)
 80020e0:	496f      	ldr	r1, [pc, #444]	@ (80022a0 <HAL_ADC_Init+0x1f0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80020e4:	6890      	ldr	r0, [r2, #8]
 80020e6:	099b      	lsrs	r3, r3, #6
 80020e8:	fba1 1303 	umull	r1, r3, r1, r3
 80020ec:	496d      	ldr	r1, [pc, #436]	@ (80022a4 <HAL_ADC_Init+0x1f4>)
 80020ee:	099b      	lsrs	r3, r3, #6
 80020f0:	4001      	ands	r1, r0
 80020f2:	3301      	adds	r3, #1
 80020f4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80020f8:	6091      	str	r1, [r2, #8]
 80020fa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80020fc:	9b01      	ldr	r3, [sp, #4]
 80020fe:	b12b      	cbz	r3, 800210c <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8002100:	9b01      	ldr	r3, [sp, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002106:	9b01      	ldr	r3, [sp, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f9      	bne.n	8002100 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800210c:	6893      	ldr	r3, [r2, #8]
 800210e:	00d9      	lsls	r1, r3, #3
 8002110:	f100 8082 	bmi.w	8002218 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002114:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8002116:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002118:	f043 0310 	orr.w	r3, r3, #16
 800211c:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002120:	432b      	orrs	r3, r5
 8002122:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002124:	6893      	ldr	r3, [r2, #8]
 8002126:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800212a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800212c:	d16c      	bne.n	8002208 <HAL_ADC_Init+0x158>
 800212e:	06db      	lsls	r3, r3, #27
 8002130:	d46a      	bmi.n	8002208 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 8002132:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002134:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800213e:	6893      	ldr	r3, [r2, #8]
 8002140:	07de      	lsls	r6, r3, #31
 8002142:	d40c      	bmi.n	800215e <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002144:	4b58      	ldr	r3, [pc, #352]	@ (80022a8 <HAL_ADC_Init+0x1f8>)
 8002146:	429a      	cmp	r2, r3
 8002148:	f000 8081 	beq.w	800224e <HAL_ADC_Init+0x19e>
 800214c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002150:	429a      	cmp	r2, r3
 8002152:	d07c      	beq.n	800224e <HAL_ADC_Init+0x19e>
 8002154:	4b55      	ldr	r3, [pc, #340]	@ (80022ac <HAL_ADC_Init+0x1fc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	07d9      	lsls	r1, r3, #31
 800215a:	f140 808a 	bpl.w	8002272 <HAL_ADC_Init+0x1c2>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800215e:	f7ff fa3b 	bl	80015d8 <HAL_GetREVID>
 8002162:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002166:	68a1      	ldr	r1, [r4, #8]
 8002168:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800216a:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800216c:	d85c      	bhi.n	8002228 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800216e:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002172:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002174:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002176:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 800217a:	4302      	orrs	r2, r0
 800217c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800217e:	2b01      	cmp	r3, #1
 8002180:	d103      	bne.n	800218a <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002182:	6a23      	ldr	r3, [r4, #32]
 8002184:	3b01      	subs	r3, #1
 8002186:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800218c:	b123      	cbz	r3, 8002198 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800218e:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002192:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002194:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002196:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	4945      	ldr	r1, [pc, #276]	@ (80022b0 <HAL_ADC_Init+0x200>)
 800219c:	68d8      	ldr	r0, [r3, #12]
 800219e:	4001      	ands	r1, r0
 80021a0:	4311      	orrs	r1, r2
 80021a2:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021aa:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ac:	d11c      	bne.n	80021e8 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021ae:	0712      	lsls	r2, r2, #28
 80021b0:	d41a      	bmi.n	80021e8 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021b2:	68d8      	ldr	r0, [r3, #12]
 80021b4:	4a3f      	ldr	r2, [pc, #252]	@ (80022b4 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021b6:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021b8:	4002      	ands	r2, r0
 80021ba:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80021be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80021c0:	430a      	orrs	r2, r1
 80021c2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80021c4:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80021c8:	2a01      	cmp	r2, #1
 80021ca:	d054      	beq.n	8002276 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021d4:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80021d6:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021da:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80021de:	430a      	orrs	r2, r1
 80021e0:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80021e2:	f7ff feb7 	bl	8001f54 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021e6:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021e8:	68e2      	ldr	r2, [r4, #12]
 80021ea:	2a01      	cmp	r2, #1
 80021ec:	d027      	beq.n	800223e <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021f0:	f022 020f 	bic.w	r2, r2, #15
 80021f4:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021f6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 80021f8:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8002204:	b002      	add	sp, #8
 8002206:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002208:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800220a:	f043 0310 	orr.w	r3, r3, #16
 800220e:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8002210:	2501      	movs	r5, #1
}
 8002212:	4628      	mov	r0, r5
 8002214:	b002      	add	sp, #8
 8002216:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002218:	2500      	movs	r5, #0
 800221a:	e783      	b.n	8002124 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 800221c:	f7fe feb0 	bl	8000f80 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002220:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002222:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8002226:	e74f      	b.n	80020c8 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002228:	2910      	cmp	r1, #16
 800222a:	d1a0      	bne.n	800216e <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800222c:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800222e:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002230:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002234:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002236:	430a      	orrs	r2, r1
 8002238:	f042 021c 	orr.w	r2, r2, #28
 800223c:	e79f      	b.n	800217e <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800223e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002240:	69a2      	ldr	r2, [r4, #24]
 8002242:	f021 010f 	bic.w	r1, r1, #15
 8002246:	3a01      	subs	r2, #1
 8002248:	430a      	orrs	r2, r1
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
 800224c:	e7d3      	b.n	80021f6 <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800224e:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <HAL_ADC_Init+0x1f8>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f013 0f01 	tst.w	r3, #1
 8002256:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <HAL_ADC_Init+0x208>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	d180      	bne.n	800215e <HAL_ADC_Init+0xae>
 800225c:	07d8      	lsls	r0, r3, #31
 800225e:	f53f af7e 	bmi.w	800215e <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002262:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002264:	6893      	ldr	r3, [r2, #8]
 8002266:	6861      	ldr	r1, [r4, #4]
 8002268:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800226c:	430b      	orrs	r3, r1
 800226e:	6093      	str	r3, [r2, #8]
}
 8002270:	e775      	b.n	800215e <HAL_ADC_Init+0xae>
 8002272:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <HAL_ADC_Init+0x210>)
 8002274:	e7f6      	b.n	8002264 <HAL_ADC_Init+0x1b4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002276:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 800227a:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800227c:	3901      	subs	r1, #1
 800227e:	6918      	ldr	r0, [r3, #16]
 8002280:	4332      	orrs	r2, r6
 8002282:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002286:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002288:	430a      	orrs	r2, r1
 800228a:	490e      	ldr	r1, [pc, #56]	@ (80022c4 <HAL_ADC_Init+0x214>)
 800228c:	4001      	ands	r1, r0
 800228e:	430a      	orrs	r2, r1
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	611a      	str	r2, [r3, #16]
 8002296:	e79d      	b.n	80021d4 <HAL_ADC_Init+0x124>
 8002298:	5fffffc0 	.word	0x5fffffc0
 800229c:	2400004c 	.word	0x2400004c
 80022a0:	053e2d63 	.word	0x053e2d63
 80022a4:	6fffffc0 	.word	0x6fffffc0
 80022a8:	40022000 	.word	0x40022000
 80022ac:	58026000 	.word	0x58026000
 80022b0:	fff0c003 	.word	0xfff0c003
 80022b4:	ffffbffc 	.word	0xffffbffc
 80022b8:	40022100 	.word	0x40022100
 80022bc:	40022300 	.word	0x40022300
 80022c0:	58026300 	.word	0x58026300
 80022c4:	fc00f81e 	.word	0xfc00f81e

080022c8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80022c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80022ca:	2300      	movs	r3, #0
{
 80022cc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80022ce:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d0:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d040      	beq.n	800235a <HAL_ADCEx_Calibration_Start+0x92>
 80022d8:	2301      	movs	r3, #1
 80022da:	4604      	mov	r4, r0
 80022dc:	460e      	mov	r6, r1
 80022de:	4615      	mov	r5, r2
 80022e0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80022e4:	f7ff fdfc 	bl	8001ee0 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80022e8:	b9e8      	cbnz	r0, 8002326 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ea:	6d67      	ldr	r7, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 80022ec:	f005 4280 	and.w	r2, r5, #1073741824	@ 0x40000000
 80022f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_ADCEx_Calibration_Start+0x98>)
 80022f2:	f406 3180 	and.w	r1, r6, #65536	@ 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80022f6:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80022f8:	403b      	ands	r3, r7
 80022fa:	f043 0302 	orr.w	r3, r3, #2
 80022fe:	6563      	str	r3, [r4, #84]	@ 0x54
 8002300:	4b18      	ldr	r3, [pc, #96]	@ (8002364 <HAL_ADCEx_Calibration_Start+0x9c>)
 8002302:	68ae      	ldr	r6, [r5, #8]
 8002304:	4033      	ands	r3, r6
 8002306:	4313      	orrs	r3, r2
 8002308:	430b      	orrs	r3, r1
 800230a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800230e:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002310:	68ab      	ldr	r3, [r5, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002312:	4a15      	ldr	r2, [pc, #84]	@ (8002368 <HAL_ADCEx_Calibration_Start+0xa0>)
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0f      	blt.n	8002338 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002318:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6563      	str	r3, [r4, #84]	@ 0x54
 8002324:	e003      	b.n	800232e <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002326:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002328:	f043 0310 	orr.w	r3, r3, #16
 800232c:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232e:	2300      	movs	r3, #0
 8002330:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002334:	b003      	add	sp, #12
 8002336:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8002338:	9b01      	ldr	r3, [sp, #4]
 800233a:	3301      	adds	r3, #1
 800233c:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800233e:	9b01      	ldr	r3, [sp, #4]
 8002340:	4293      	cmp	r3, r2
 8002342:	d3e5      	bcc.n	8002310 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8002344:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8002346:	2200      	movs	r2, #0
        return HAL_ERROR;
 8002348:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800234a:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800234e:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8002352:	f043 0310 	orr.w	r3, r3, #16
 8002356:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8002358:	e7ec      	b.n	8002334 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 800235a:	2002      	movs	r0, #2
}
 800235c:	b003      	add	sp, #12
 800235e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002360:	ffffeefd 	.word	0xffffeefd
 8002364:	3ffeffc0 	.word	0x3ffeffc0
 8002368:	25c3f800 	.word	0x25c3f800

0800236c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop

08002370 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop

08002374 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop

08002378 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop

0800237c <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop

08002380 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002380:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8002384:	2a01      	cmp	r2, #1
 8002386:	d035      	beq.n	80023f4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8002388:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800238a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800238c:	2001      	movs	r0, #1
{
 800238e:	b4f0      	push	{r4, r5, r6, r7}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002390:	4d28      	ldr	r5, [pc, #160]	@ (8002434 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
{
 8002392:	b09a      	sub	sp, #104	@ 0x68
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002394:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002396:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002398:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 800239a:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800239e:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023a0:	d008      	beq.n	80023b4 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a2:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a8:	f041 0120 	orr.w	r1, r1, #32
 80023ac:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80023ae:	b01a      	add	sp, #104	@ 0x68
 80023b0:	bcf0      	pop	{r4, r5, r6, r7}
 80023b2:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023b4:	4a20      	ldr	r2, [pc, #128]	@ (8002438 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80023b6:	6890      	ldr	r0, [r2, #8]
 80023b8:	0740      	lsls	r0, r0, #29
 80023ba:	d50b      	bpl.n	80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 80023bc:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80023c0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c2:	f042 0220 	orr.w	r2, r2, #32
 80023c6:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 80023ce:	b01a      	add	sp, #104	@ 0x68
 80023d0:	bcf0      	pop	{r4, r5, r6, r7}
 80023d2:	4770      	bx	lr
 80023d4:	68a0      	ldr	r0, [r4, #8]
 80023d6:	0745      	lsls	r5, r0, #29
 80023d8:	d4f1      	bmi.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023da:	6808      	ldr	r0, [r1, #0]
 80023dc:	b9a0      	cbnz	r0, 8002408 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80023de:	4917      	ldr	r1, [pc, #92]	@ (800243c <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 80023e0:	6888      	ldr	r0, [r1, #8]
 80023e2:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80023e6:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023e8:	68a0      	ldr	r0, [r4, #8]
 80023ea:	07c0      	lsls	r0, r0, #31
 80023ec:	d504      	bpl.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80023ee:	6892      	ldr	r2, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f0:	2000      	movs	r0, #0
 80023f2:	e7e9      	b.n	80023c8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 80023f4:	2002      	movs	r0, #2
}
 80023f6:	4770      	bx	lr
 80023f8:	6892      	ldr	r2, [r2, #8]
 80023fa:	07d5      	lsls	r5, r2, #31
 80023fc:	d4f8      	bmi.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80023fe:	6888      	ldr	r0, [r1, #8]
 8002400:	4a0f      	ldr	r2, [pc, #60]	@ (8002440 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8002402:	4002      	ands	r2, r0
 8002404:	608a      	str	r2, [r1, #8]
 8002406:	e7f3      	b.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002408:	4e0c      	ldr	r6, [pc, #48]	@ (800243c <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 800240a:	684f      	ldr	r7, [r1, #4]
 800240c:	68b5      	ldr	r5, [r6, #8]
 800240e:	f425 4540 	bic.w	r5, r5, #49152	@ 0xc000
 8002412:	433d      	orrs	r5, r7
 8002414:	60b5      	str	r5, [r6, #8]
 8002416:	68a4      	ldr	r4, [r4, #8]
 8002418:	07e4      	lsls	r4, r4, #31
 800241a:	d4e8      	bmi.n	80023ee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800241c:	6892      	ldr	r2, [r2, #8]
 800241e:	07d7      	lsls	r7, r2, #31
 8002420:	d4e6      	bmi.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
        MODIFY_REG(tmpADC_Common->CCR,
 8002422:	688a      	ldr	r2, [r1, #8]
 8002424:	68b4      	ldr	r4, [r6, #8]
 8002426:	4310      	orrs	r0, r2
 8002428:	4a05      	ldr	r2, [pc, #20]	@ (8002440 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800242a:	4022      	ands	r2, r4
 800242c:	4310      	orrs	r0, r2
 800242e:	60b0      	str	r0, [r6, #8]
 8002430:	e7de      	b.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 8002432:	bf00      	nop
 8002434:	40022000 	.word	0x40022000
 8002438:	40022100 	.word	0x40022100
 800243c:	40022300 	.word	0x40022300
 8002440:	fffff0e0 	.word	0xfffff0e0

08002444 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002444:	4906      	ldr	r1, [pc, #24]	@ (8002460 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800244e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002450:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002454:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002458:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800245a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800245c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00
 8002464:	05fa0000 	.word	0x05fa0000

08002468 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <HAL_NVIC_SetPriority+0x6c>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002472:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247a:	f1be 0f04 	cmp.w	lr, #4
 800247e:	bf28      	it	cs
 8002480:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002484:	f1bc 0f06 	cmp.w	ip, #6
 8002488:	d91a      	bls.n	80024c0 <HAL_NVIC_SetPriority+0x58>
 800248a:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	fa03 f30c 	lsl.w	r3, r3, ip
 8002496:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800249e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	fa03 f30e 	lsl.w	r3, r3, lr
 80024a4:	ea21 0303 	bic.w	r3, r1, r3
 80024a8:	fa03 f30c 	lsl.w	r3, r3, ip
 80024ac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80024b4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80024b6:	db06      	blt.n	80024c6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	4a07      	ldr	r2, [pc, #28]	@ (80024d8 <HAL_NVIC_SetPriority+0x70>)
 80024ba:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80024bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	4694      	mov	ip, r2
 80024c4:	e7e9      	b.n	800249a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	f000 000f 	and.w	r0, r0, #15
 80024ca:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <HAL_NVIC_SetPriority+0x74>)
 80024cc:	5413      	strb	r3, [r2, r0]
 80024ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80024d2:	bf00      	nop
 80024d4:	e000ed00 	.word	0xe000ed00
 80024d8:	e000e400 	.word	0xe000e400
 80024dc:	e000ed14 	.word	0xe000ed14

080024e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024e0:	2800      	cmp	r0, #0
 80024e2:	db07      	blt.n	80024f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e4:	2301      	movs	r3, #1
 80024e6:	f000 011f 	and.w	r1, r0, #31
 80024ea:	4a03      	ldr	r2, [pc, #12]	@ (80024f8 <HAL_NVIC_EnableIRQ+0x18>)
 80024ec:	0940      	lsrs	r0, r0, #5
 80024ee:	408b      	lsls	r3, r1
 80024f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000e100 	.word	0xe000e100

080024fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	1e43      	subs	r3, r0, #1
 80024fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002502:	d301      	bcc.n	8002508 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002504:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002506:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002508:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250e:	4905      	ldr	r1, [pc, #20]	@ (8002524 <HAL_SYSTICK_Config+0x28>)
 8002510:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002514:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002528:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800252e:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002532:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002536:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8002538:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_MPU_Enable+0x1c>)
 8002546:	f040 0001 	orr.w	r0, r0, #1
 800254a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800254e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002550:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002556:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800255a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002564:	4a16      	ldr	r2, [pc, #88]	@ (80025c0 <HAL_MPU_ConfigRegion+0x5c>)
 8002566:	7843      	ldrb	r3, [r0, #1]
 8002568:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800256c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002578:	6843      	ldr	r3, [r0, #4]
 800257a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800257e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002580:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002584:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002586:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002588:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800258c:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002590:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002592:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002594:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002598:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800259c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025a0:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025a2:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025a6:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80025ae:	7a01      	ldrb	r1, [r0, #8]
 80025b0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80025b4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025b8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80025c4:	b188      	cbz	r0, 80025ea <HAL_DAC_Init+0x26>
{
 80025c6:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025c8:	7903      	ldrb	r3, [r0, #4]
 80025ca:	4604      	mov	r4, r0
 80025cc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80025d0:	b13b      	cbz	r3, 80025e2 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025d2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80025d4:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025d6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80025d8:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80025da:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025dc:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80025de:	7122      	strb	r2, [r4, #4]
}
 80025e0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80025e2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80025e4:	f7fe fd46 	bl	8001074 <HAL_DAC_MspInit>
 80025e8:	e7f3      	b.n	80025d2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop

080025f0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80025f4:	2800      	cmp	r0, #0
 80025f6:	d05e      	beq.n	80026b6 <HAL_DAC_Start_DMA+0xc6>
 80025f8:	460e      	mov	r6, r1
 80025fa:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025fc:	7942      	ldrb	r2, [r0, #5]
 80025fe:	4604      	mov	r4, r0
 8002600:	2a01      	cmp	r2, #1
 8002602:	d060      	beq.n	80026c6 <HAL_DAC_Start_DMA+0xd6>
 8002604:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002606:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdac);
 8002608:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800260a:	2202      	movs	r2, #2
 800260c:	7102      	strb	r2, [r0, #4]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800260e:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 8002610:	bb3e      	cbnz	r6, 8002662 <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002612:	6880      	ldr	r0, [r0, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002614:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002618:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 80026cc <HAL_DAC_Start_DMA+0xdc>
 800261c:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002620:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 80026d0 <HAL_DAC_Start_DMA+0xe0>
 8002624:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002628:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 80026d4 <HAL_DAC_Start_DMA+0xe4>
 800262c:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002630:	602a      	str	r2, [r5, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002632:	2f00      	cmp	r7, #0
 8002634:	d044      	beq.n	80026c0 <HAL_DAC_Start_DMA+0xd0>
 8002636:	2f04      	cmp	r7, #4
 8002638:	d137      	bne.n	80026aa <HAL_DAC_Start_DMA+0xba>
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
        break;
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800263a:	f105 020c 	add.w	r2, r5, #12
  }

  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800263e:	682f      	ldr	r7, [r5, #0]
 8002640:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
 8002644:	602f      	str	r7, [r5, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002646:	f000 fce7 	bl	8003018 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800264a:	2300      	movs	r3, #0
 800264c:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800264e:	bb38      	cbnz	r0, 80026a0 <HAL_DAC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002650:	6822      	ldr	r2, [r4, #0]
 8002652:	f006 0110 	and.w	r1, r6, #16
 8002656:	2301      	movs	r3, #1
 8002658:	6814      	ldr	r4, [r2, #0]
 800265a:	408b      	lsls	r3, r1
 800265c:	4323      	orrs	r3, r4
 800265e:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8002660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002662:	68c0      	ldr	r0, [r0, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002664:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002668:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 80026d8 <HAL_DAC_Start_DMA+0xe8>
 800266c:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002670:	f8df c068 	ldr.w	ip, [pc, #104]	@ 80026dc <HAL_DAC_Start_DMA+0xec>
 8002674:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002678:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80026e0 <HAL_DAC_Start_DMA+0xf0>
 800267c:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002680:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8002682:	b1d7      	cbz	r7, 80026ba <HAL_DAC_Start_DMA+0xca>
 8002684:	2f04      	cmp	r7, #4
 8002686:	d113      	bne.n	80026b0 <HAL_DAC_Start_DMA+0xc0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002688:	f105 0218 	add.w	r2, r5, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800268c:	682f      	ldr	r7, [r5, #0]
 800268e:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 8002692:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002694:	f000 fcc0 	bl	8003018 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8002698:	2300      	movs	r3, #0
 800269a:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 800269c:	2800      	cmp	r0, #0
 800269e:	d0d7      	beq.n	8002650 <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026a0:	6923      	ldr	r3, [r4, #16]
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6123      	str	r3, [r4, #16]
}
 80026a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80026aa:	f105 0210 	add.w	r2, r5, #16
  if (Channel == DAC_CHANNEL_1)
 80026ae:	e7c6      	b.n	800263e <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80026b0:	f105 021c 	add.w	r2, r5, #28
  if (Channel == DAC_CHANNEL_1)
 80026b4:	e7ea      	b.n	800268c <HAL_DAC_Start_DMA+0x9c>
    return HAL_ERROR;
 80026b6:	2001      	movs	r0, #1
}
 80026b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80026ba:	f105 0214 	add.w	r2, r5, #20
  if (Channel == DAC_CHANNEL_1)
 80026be:	e7e5      	b.n	800268c <HAL_DAC_Start_DMA+0x9c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80026c0:	f105 0208 	add.w	r2, r5, #8
  if (Channel == DAC_CHANNEL_1)
 80026c4:	e7bb      	b.n	800263e <HAL_DAC_Start_DMA+0x4e>
  __HAL_LOCK(hdac);
 80026c6:	2002      	movs	r0, #2
}
 80026c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026ca:	bf00      	nop
 80026cc:	080026e9 	.word	0x080026e9
 80026d0:	080026fd 	.word	0x080026fd
 80026d4:	0800270d 	.word	0x0800270d
 80026d8:	080028e5 	.word	0x080028e5
 80026dc:	080028f9 	.word	0x080028f9
 80026e0:	08002909 	.word	0x08002909

080026e4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @brief  Conversion complete callback in non-blocking mode for Channel1
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop

080026e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80026e8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ea:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7ff fff9 	bl	80026e4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026f2:	2301      	movs	r3, #1
 80026f4:	7123      	strb	r3, [r4, #4]
}
 80026f6:	bd10      	pop	{r4, pc}

080026f8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80026fc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80026fe:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002700:	f7ff fffa 	bl	80026f8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002704:	bd08      	pop	{r3, pc}
 8002706:	bf00      	nop

08002708 <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop

0800270c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800270c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800270e:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002710:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002712:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 800271a:	f7ff fff5 	bl	8002708 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800271e:	2301      	movs	r3, #1
 8002720:	7123      	strb	r3, [r4, #4]
}
 8002722:	bd10      	pop	{r4, pc}

08002724 <HAL_DAC_DMAUnderrunCallbackCh1>:
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop

08002728 <HAL_DAC_IRQHandler>:
  uint32_t itsource = hdac->Instance->CR;
 8002728:	6803      	ldr	r3, [r0, #0]
{
 800272a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = hdac->Instance->CR;
 800272c:	681d      	ldr	r5, [r3, #0]
{
 800272e:	4604      	mov	r4, r0
  uint32_t itflag   = hdac->Instance->SR;
 8002730:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8002732:	04aa      	lsls	r2, r5, #18
 8002734:	d501      	bpl.n	800273a <HAL_DAC_IRQHandler+0x12>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002736:	04b1      	lsls	r1, r6, #18
 8002738:	d417      	bmi.n	800276a <HAL_DAC_IRQHandler+0x42>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800273a:	00aa      	lsls	r2, r5, #2
 800273c:	d501      	bpl.n	8002742 <HAL_DAC_IRQHandler+0x1a>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800273e:	00b3      	lsls	r3, r6, #2
 8002740:	d400      	bmi.n	8002744 <HAL_DAC_IRQHandler+0x1c>
}
 8002742:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8002744:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800274c:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 800274e:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002750:	6922      	ldr	r2, [r4, #16]
 8002752:	f042 0202 	orr.w	r2, r2, #2
 8002756:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002758:	6359      	str	r1, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
}
 8002760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002764:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002766:	f000 b8db 	b.w	8002920 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 800276a:	2204      	movs	r2, #4
 800276c:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800276e:	6902      	ldr	r2, [r0, #16]
 8002770:	f042 0201 	orr.w	r2, r2, #1
 8002774:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002776:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800277a:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002782:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002784:	f7ff ffce 	bl	8002724 <HAL_DAC_DMAUnderrunCallbackCh1>
 8002788:	e7d7      	b.n	800273a <HAL_DAC_IRQHandler+0x12>
 800278a:	bf00      	nop

0800278c <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 800278c:	2800      	cmp	r0, #0
 800278e:	f000 8086 	beq.w	800289e <HAL_DAC_ConfigChannel+0x112>
{
 8002792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002796:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8002798:	2900      	cmp	r1, #0
 800279a:	d04d      	beq.n	8002838 <HAL_DAC_ConfigChannel+0xac>
  __HAL_LOCK(hdac);
 800279c:	7943      	ldrb	r3, [r0, #5]
 800279e:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80027a0:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d079      	beq.n	800289a <HAL_DAC_ConfigChannel+0x10e>
 80027a6:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80027a8:	2904      	cmp	r1, #4
 80027aa:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 80027ac:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80027ae:	f04f 0302 	mov.w	r3, #2
 80027b2:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80027b4:	d043      	beq.n	800283e <HAL_DAC_ConfigChannel+0xb2>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80027b6:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 80027ba:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80027bc:	6928      	ldr	r0, [r5, #16]
 80027be:	2801      	cmp	r0, #1
 80027c0:	d108      	bne.n	80027d4 <HAL_DAC_ConfigChannel+0x48>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80027c2:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 80027c4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80027c6:	4090      	lsls	r0, r2
 80027c8:	ea26 0600 	bic.w	r6, r6, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027cc:	6968      	ldr	r0, [r5, #20]
 80027ce:	4090      	lsls	r0, r2
 80027d0:	4330      	orrs	r0, r6
    hdac->Instance->CCR = tmpreg1;
 80027d2:	6398      	str	r0, [r3, #56]	@ 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80027d4:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 80027d6:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80027d8:	4090      	lsls	r0, r2
 80027da:	ea26 0600 	bic.w	r6, r6, r0
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80027de:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80027e2:	2801      	cmp	r0, #1
 80027e4:	d055      	beq.n	8002892 <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80027e6:	2802      	cmp	r0, #2
 80027e8:	d055      	beq.n	8002896 <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80027ea:	fab7 f087 	clz	r0, r7
 80027ee:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80027f0:	4339      	orrs	r1, r7
 80027f2:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027f4:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80027f6:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027fa:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027fc:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80027fe:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002800:	4331      	orrs	r1, r6
  hdac->State = HAL_DAC_STATE_READY;
 8002802:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 8002804:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002806:	6819      	ldr	r1, [r3, #0]
 8002808:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800280c:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002810:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002812:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8002814:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002816:	ea21 0105 	bic.w	r1, r1, r5
  __HAL_UNLOCK(hdac);
 800281a:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800281c:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800281e:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 8002820:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002822:	fa00 f102 	lsl.w	r1, r0, r2
 8002826:	681a      	ldr	r2, [r3, #0]
  return status;
 8002828:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800282a:	ea22 0201 	bic.w	r2, r2, r1
 800282e:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002830:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8002832:	7165      	strb	r5, [r4, #5]
}
 8002834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002838:	2001      	movs	r0, #1
}
 800283a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 800283e:	f7fe fec5 	bl	80015cc <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002842:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002844:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8002846:	b9be      	cbnz	r6, 8002878 <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002848:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 80028dc <HAL_DAC_ConfigChannel+0x150>
 800284c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800284e:	ea12 0f08 	tst.w	r2, r8
 8002852:	d026      	beq.n	80028a2 <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002854:	f7fe feba 	bl	80015cc <HAL_GetTick>
 8002858:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800285a:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800285c:	2801      	cmp	r0, #1
 800285e:	d9f5      	bls.n	800284c <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002862:	ea12 0f08 	tst.w	r2, r8
 8002866:	d0f1      	beq.n	800284c <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002868:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800286a:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 800286c:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002874:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 8002876:	e7dd      	b.n	8002834 <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800287a:	2a00      	cmp	r2, #0
 800287c:	da2a      	bge.n	80028d4 <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800287e:	f7fe fea5 	bl	80015cc <HAL_GetTick>
 8002882:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002884:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002886:	2801      	cmp	r0, #1
 8002888:	d9f6      	bls.n	8002878 <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800288a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800288c:	2a00      	cmp	r2, #0
 800288e:	daf3      	bge.n	8002878 <HAL_DAC_ConfigChannel+0xec>
 8002890:	e7ea      	b.n	8002868 <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 8002892:	2000      	movs	r0, #0
 8002894:	e7ac      	b.n	80027f0 <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 8002896:	2001      	movs	r0, #1
 8002898:	e7aa      	b.n	80027f0 <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 800289a:	2002      	movs	r0, #2
 800289c:	e7ca      	b.n	8002834 <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 800289e:	2001      	movs	r0, #1
}
 80028a0:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028a2:	69aa      	ldr	r2, [r5, #24]
 80028a4:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80028a6:	f006 0210 	and.w	r2, r6, #16
 80028aa:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 80028ae:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80028b0:	4090      	lsls	r0, r2
 80028b2:	ea21 0100 	bic.w	r1, r1, r0
 80028b6:	69e8      	ldr	r0, [r5, #28]
 80028b8:	4090      	lsls	r0, r2
 80028ba:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80028bc:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80028be:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80028c0:	4090      	lsls	r0, r2
 80028c2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80028c4:	ea21 0100 	bic.w	r1, r1, r0
 80028c8:	6a28      	ldr	r0, [r5, #32]
 80028ca:	4090      	lsls	r0, r2
 80028cc:	4301      	orrs	r1, r0
 80028ce:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80028d0:	6829      	ldr	r1, [r5, #0]
 80028d2:	e773      	b.n	80027bc <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028d4:	69aa      	ldr	r2, [r5, #24]
 80028d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80028d8:	e7e5      	b.n	80028a6 <HAL_DAC_ConfigChannel+0x11a>
 80028da:	bf00      	nop
 80028dc:	20008000 	.word	0x20008000

080028e0 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop

080028e4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80028e4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e6:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7ff fff9 	bl	80028e0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028ee:	2301      	movs	r3, #1
 80028f0:	7123      	strb	r3, [r4, #4]
}
 80028f2:	bd10      	pop	{r4, pc}

080028f4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop

080028f8 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80028f8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80028fa:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80028fc:	f7ff fffa 	bl	80028f4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002900:	bd08      	pop	{r3, pc}
 8002902:	bf00      	nop

08002904 <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002908:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800290a:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800290c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800290e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002916:	f7ff fff5 	bl	8002904 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800291a:	2301      	movs	r3, #1
 800291c:	7123      	strb	r3, [r4, #4]
}
 800291e:	bd10      	pop	{r4, pc}

08002920 <HAL_DACEx_DMAUnderrunCallbackCh2>:
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop

08002924 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002924:	4936      	ldr	r1, [pc, #216]	@ (8002a00 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8002926:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002928:	6803      	ldr	r3, [r0, #0]
 800292a:	428b      	cmp	r3, r1
 800292c:	d033      	beq.n	8002996 <DMA_CalcBaseAndBitshift+0x72>
 800292e:	3118      	adds	r1, #24
 8002930:	1a59      	subs	r1, r3, r1
 8002932:	fab1 f181 	clz	r1, r1
 8002936:	0949      	lsrs	r1, r1, #5
 8002938:	bb69      	cbnz	r1, 8002996 <DMA_CalcBaseAndBitshift+0x72>
 800293a:	4832      	ldr	r0, [pc, #200]	@ (8002a04 <DMA_CalcBaseAndBitshift+0xe0>)
 800293c:	4283      	cmp	r3, r0
 800293e:	d03e      	beq.n	80029be <DMA_CalcBaseAndBitshift+0x9a>
 8002940:	3018      	adds	r0, #24
 8002942:	4283      	cmp	r3, r0
 8002944:	d03e      	beq.n	80029c4 <DMA_CalcBaseAndBitshift+0xa0>
 8002946:	3018      	adds	r0, #24
 8002948:	4283      	cmp	r3, r0
 800294a:	d034      	beq.n	80029b6 <DMA_CalcBaseAndBitshift+0x92>
 800294c:	3018      	adds	r0, #24
 800294e:	4283      	cmp	r3, r0
 8002950:	d03b      	beq.n	80029ca <DMA_CalcBaseAndBitshift+0xa6>
 8002952:	3018      	adds	r0, #24
 8002954:	4283      	cmp	r3, r0
 8002956:	d03e      	beq.n	80029d6 <DMA_CalcBaseAndBitshift+0xb2>
 8002958:	3018      	adds	r0, #24
 800295a:	4283      	cmp	r3, r0
 800295c:	d02a      	beq.n	80029b4 <DMA_CalcBaseAndBitshift+0x90>
 800295e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002962:	4283      	cmp	r3, r0
 8002964:	d035      	beq.n	80029d2 <DMA_CalcBaseAndBitshift+0xae>
 8002966:	4928      	ldr	r1, [pc, #160]	@ (8002a08 <DMA_CalcBaseAndBitshift+0xe4>)
 8002968:	428b      	cmp	r3, r1
 800296a:	d031      	beq.n	80029d0 <DMA_CalcBaseAndBitshift+0xac>
 800296c:	3118      	adds	r1, #24
 800296e:	428b      	cmp	r3, r1
 8002970:	d034      	beq.n	80029dc <DMA_CalcBaseAndBitshift+0xb8>
 8002972:	3118      	adds	r1, #24
 8002974:	428b      	cmp	r3, r1
 8002976:	d034      	beq.n	80029e2 <DMA_CalcBaseAndBitshift+0xbe>
 8002978:	3118      	adds	r1, #24
 800297a:	428b      	cmp	r3, r1
 800297c:	d034      	beq.n	80029e8 <DMA_CalcBaseAndBitshift+0xc4>
 800297e:	3118      	adds	r1, #24
 8002980:	428b      	cmp	r3, r1
 8002982:	d034      	beq.n	80029ee <DMA_CalcBaseAndBitshift+0xca>
 8002984:	3118      	adds	r1, #24
 8002986:	428b      	cmp	r3, r1
 8002988:	d034      	beq.n	80029f4 <DMA_CalcBaseAndBitshift+0xd0>
 800298a:	3118      	adds	r1, #24
 800298c:	428b      	cmp	r3, r1
 800298e:	d034      	beq.n	80029fa <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002990:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8002994:	e011      	b.n	80029ba <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002996:	b2db      	uxtb	r3, r3
 8002998:	491c      	ldr	r1, [pc, #112]	@ (8002a0c <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800299a:	481d      	ldr	r0, [pc, #116]	@ (8002a10 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800299c:	3b10      	subs	r3, #16
 800299e:	fba1 1303 	umull	r1, r3, r1, r3
{
 80029a2:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80029a4:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80029a6:	4c1b      	ldr	r4, [pc, #108]	@ (8002a14 <DMA_CalcBaseAndBitshift+0xf0>)
 80029a8:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 80029aa:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80029ae:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 80029b2:	4770      	bx	lr
 80029b4:	2116      	movs	r1, #22
 80029b6:	4818      	ldr	r0, [pc, #96]	@ (8002a18 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80029b8:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80029ba:	6590      	str	r0, [r2, #88]	@ 0x58
}
 80029bc:	4770      	bx	lr
 80029be:	2110      	movs	r1, #16
 80029c0:	4813      	ldr	r0, [pc, #76]	@ (8002a10 <DMA_CalcBaseAndBitshift+0xec>)
 80029c2:	e7f9      	b.n	80029b8 <DMA_CalcBaseAndBitshift+0x94>
 80029c4:	2116      	movs	r1, #22
 80029c6:	4812      	ldr	r0, [pc, #72]	@ (8002a10 <DMA_CalcBaseAndBitshift+0xec>)
 80029c8:	e7f6      	b.n	80029b8 <DMA_CalcBaseAndBitshift+0x94>
 80029ca:	2106      	movs	r1, #6
 80029cc:	4812      	ldr	r0, [pc, #72]	@ (8002a18 <DMA_CalcBaseAndBitshift+0xf4>)
 80029ce:	e7f3      	b.n	80029b8 <DMA_CalcBaseAndBitshift+0x94>
 80029d0:	2106      	movs	r1, #6
 80029d2:	4812      	ldr	r0, [pc, #72]	@ (8002a1c <DMA_CalcBaseAndBitshift+0xf8>)
 80029d4:	e7f0      	b.n	80029b8 <DMA_CalcBaseAndBitshift+0x94>
 80029d6:	2110      	movs	r1, #16
 80029d8:	480f      	ldr	r0, [pc, #60]	@ (8002a18 <DMA_CalcBaseAndBitshift+0xf4>)
 80029da:	e7ed      	b.n	80029b8 <DMA_CalcBaseAndBitshift+0x94>
 80029dc:	2110      	movs	r1, #16
 80029de:	480f      	ldr	r0, [pc, #60]	@ (8002a1c <DMA_CalcBaseAndBitshift+0xf8>)
 80029e0:	e7ea      	b.n	80029b8 <DMA_CalcBaseAndBitshift+0x94>
 80029e2:	2116      	movs	r1, #22
 80029e4:	480d      	ldr	r0, [pc, #52]	@ (8002a1c <DMA_CalcBaseAndBitshift+0xf8>)
 80029e6:	e7e7      	b.n	80029b8 <DMA_CalcBaseAndBitshift+0x94>
 80029e8:	2100      	movs	r1, #0
 80029ea:	480d      	ldr	r0, [pc, #52]	@ (8002a20 <DMA_CalcBaseAndBitshift+0xfc>)
 80029ec:	e7e4      	b.n	80029b8 <DMA_CalcBaseAndBitshift+0x94>
 80029ee:	2106      	movs	r1, #6
 80029f0:	480b      	ldr	r0, [pc, #44]	@ (8002a20 <DMA_CalcBaseAndBitshift+0xfc>)
 80029f2:	e7e1      	b.n	80029b8 <DMA_CalcBaseAndBitshift+0x94>
 80029f4:	2110      	movs	r1, #16
 80029f6:	480a      	ldr	r0, [pc, #40]	@ (8002a20 <DMA_CalcBaseAndBitshift+0xfc>)
 80029f8:	e7de      	b.n	80029b8 <DMA_CalcBaseAndBitshift+0x94>
 80029fa:	2116      	movs	r1, #22
 80029fc:	4808      	ldr	r0, [pc, #32]	@ (8002a20 <DMA_CalcBaseAndBitshift+0xfc>)
 80029fe:	e7db      	b.n	80029b8 <DMA_CalcBaseAndBitshift+0x94>
 8002a00:	40020010 	.word	0x40020010
 8002a04:	40020040 	.word	0x40020040
 8002a08:	40020428 	.word	0x40020428
 8002a0c:	aaaaaaab 	.word	0xaaaaaaab
 8002a10:	40020000 	.word	0x40020000
 8002a14:	0800c664 	.word	0x0800c664
 8002a18:	40020004 	.word	0x40020004
 8002a1c:	40020400 	.word	0x40020400
 8002a20:	40020404 	.word	0x40020404

08002a24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002a24:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a26:	4b28      	ldr	r3, [pc, #160]	@ (8002ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8002a28:	4928      	ldr	r1, [pc, #160]	@ (8002acc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
{
 8002a2a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a2c:	4d28      	ldr	r5, [pc, #160]	@ (8002ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8002a2e:	4c29      	ldr	r4, [pc, #164]	@ (8002ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8002a30:	42aa      	cmp	r2, r5
 8002a32:	bf18      	it	ne
 8002a34:	429a      	cmpne	r2, r3
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	428a      	cmp	r2, r1
 8002a3e:	bf08      	it	eq
 8002a40:	f043 0301 	orreq.w	r3, r3, #1
 8002a44:	3128      	adds	r1, #40	@ 0x28
 8002a46:	42a2      	cmp	r2, r4
 8002a48:	bf08      	it	eq
 8002a4a:	f043 0301 	orreq.w	r3, r3, #1
 8002a4e:	3428      	adds	r4, #40	@ 0x28
 8002a50:	428a      	cmp	r2, r1
 8002a52:	bf08      	it	eq
 8002a54:	f043 0301 	orreq.w	r3, r3, #1
 8002a58:	3128      	adds	r1, #40	@ 0x28
 8002a5a:	42a2      	cmp	r2, r4
 8002a5c:	bf08      	it	eq
 8002a5e:	f043 0301 	orreq.w	r3, r3, #1
 8002a62:	428a      	cmp	r2, r1
 8002a64:	bf08      	it	eq
 8002a66:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a6a:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a6c:	b913      	cbnz	r3, 8002a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d111      	bne.n	8002a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002a74:	f1a1 0308 	sub.w	r3, r1, #8
 8002a78:	4c18      	ldr	r4, [pc, #96]	@ (8002adc <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002a7a:	4a19      	ldr	r2, [pc, #100]	@ (8002ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a7c:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002a7e:	fba4 4303 	umull	r4, r3, r4, r3
 8002a82:	4c18      	ldr	r4, [pc, #96]	@ (8002ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8002a84:	091d      	lsrs	r5, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002a86:	eb02 1313 	add.w	r3, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a8a:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002a8c:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a8e:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002a90:	e9c0 3418 	strd	r3, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002a94:	bc30      	pop	{r4, r5}
 8002a96:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a98:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002a9c:	4912      	ldr	r1, [pc, #72]	@ (8002ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a9e:	4c13      	ldr	r4, [pc, #76]	@ (8002aec <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002aa0:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002aa2:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002aa6:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002aa8:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002aac:	d908      	bls.n	8002ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002aae:	f003 041f 	and.w	r4, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8002af0 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002ab4:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002ab6:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002ab8:	40a1      	lsls	r1, r4
 8002aba:	4c0e      	ldr	r4, [pc, #56]	@ (8002af4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002abc:	0093      	lsls	r3, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002abe:	e7e6      	b.n	8002a8e <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
      stream_number += 8U;
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	461c      	mov	r4, r3
 8002ac4:	e7f5      	b.n	8002ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
 8002ac6:	bf00      	nop
 8002ac8:	58025408 	.word	0x58025408
 8002acc:	58025430 	.word	0x58025430
 8002ad0:	5802541c 	.word	0x5802541c
 8002ad4:	58025444 	.word	0x58025444
 8002ad8:	58025494 	.word	0x58025494
 8002adc:	cccccccd 	.word	0xcccccccd
 8002ae0:	16009600 	.word	0x16009600
 8002ae4:	58025880 	.word	0x58025880
 8002ae8:	bffdfbf0 	.word	0xbffdfbf0
 8002aec:	aaaaaaab 	.word	0xaaaaaaab
 8002af0:	10008200 	.word	0x10008200
 8002af4:	40020880 	.word	0x40020880

08002af8 <HAL_DMA_Init>:
{
 8002af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002afc:	4605      	mov	r5, r0
 8002afe:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7fe fd64 	bl	80015cc <HAL_GetTick>
  if(hdma == NULL)
 8002b04:	2d00      	cmp	r5, #0
 8002b06:	f000 81a1 	beq.w	8002e4c <HAL_DMA_Init+0x354>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b0a:	682c      	ldr	r4, [r5, #0]
 8002b0c:	4606      	mov	r6, r0
 8002b0e:	4bac      	ldr	r3, [pc, #688]	@ (8002dc0 <HAL_DMA_Init+0x2c8>)
 8002b10:	4aac      	ldr	r2, [pc, #688]	@ (8002dc4 <HAL_DMA_Init+0x2cc>)
 8002b12:	4294      	cmp	r4, r2
 8002b14:	bf18      	it	ne
 8002b16:	429c      	cmpne	r4, r3
 8002b18:	f102 0218 	add.w	r2, r2, #24
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	4294      	cmp	r4, r2
 8002b24:	bf08      	it	eq
 8002b26:	f043 0301 	orreq.w	r3, r3, #1
 8002b2a:	3218      	adds	r2, #24
 8002b2c:	4294      	cmp	r4, r2
 8002b2e:	bf08      	it	eq
 8002b30:	f043 0301 	orreq.w	r3, r3, #1
 8002b34:	3218      	adds	r2, #24
 8002b36:	4294      	cmp	r4, r2
 8002b38:	bf08      	it	eq
 8002b3a:	f043 0301 	orreq.w	r3, r3, #1
 8002b3e:	3218      	adds	r2, #24
 8002b40:	4294      	cmp	r4, r2
 8002b42:	bf08      	it	eq
 8002b44:	f043 0301 	orreq.w	r3, r3, #1
 8002b48:	3218      	adds	r2, #24
 8002b4a:	4294      	cmp	r4, r2
 8002b4c:	bf08      	it	eq
 8002b4e:	f043 0301 	orreq.w	r3, r3, #1
 8002b52:	3218      	adds	r2, #24
 8002b54:	4294      	cmp	r4, r2
 8002b56:	bf08      	it	eq
 8002b58:	f043 0301 	orreq.w	r3, r3, #1
 8002b5c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002b60:	4294      	cmp	r4, r2
 8002b62:	bf08      	it	eq
 8002b64:	f043 0301 	orreq.w	r3, r3, #1
 8002b68:	3218      	adds	r2, #24
 8002b6a:	4294      	cmp	r4, r2
 8002b6c:	bf08      	it	eq
 8002b6e:	f043 0301 	orreq.w	r3, r3, #1
 8002b72:	3218      	adds	r2, #24
 8002b74:	4294      	cmp	r4, r2
 8002b76:	bf08      	it	eq
 8002b78:	f043 0301 	orreq.w	r3, r3, #1
 8002b7c:	3218      	adds	r2, #24
 8002b7e:	4294      	cmp	r4, r2
 8002b80:	bf08      	it	eq
 8002b82:	f043 0301 	orreq.w	r3, r3, #1
 8002b86:	3218      	adds	r2, #24
 8002b88:	4294      	cmp	r4, r2
 8002b8a:	bf08      	it	eq
 8002b8c:	f043 0301 	orreq.w	r3, r3, #1
 8002b90:	3218      	adds	r2, #24
 8002b92:	4294      	cmp	r4, r2
 8002b94:	bf08      	it	eq
 8002b96:	f043 0301 	orreq.w	r3, r3, #1
 8002b9a:	3218      	adds	r2, #24
 8002b9c:	4294      	cmp	r4, r2
 8002b9e:	bf08      	it	eq
 8002ba0:	f043 0301 	orreq.w	r3, r3, #1
 8002ba4:	b91b      	cbnz	r3, 8002bae <HAL_DMA_Init+0xb6>
 8002ba6:	4b88      	ldr	r3, [pc, #544]	@ (8002dc8 <HAL_DMA_Init+0x2d0>)
 8002ba8:	429c      	cmp	r4, r3
 8002baa:	f040 8196 	bne.w	8002eda <HAL_DMA_Init+0x3e2>
    __HAL_UNLOCK(hdma);
 8002bae:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bb0:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8002bb2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bb6:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6023      	str	r3, [r4, #0]
 8002bc2:	e006      	b.n	8002bd2 <HAL_DMA_Init+0xda>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc4:	f7fe fd02 	bl	80015cc <HAL_GetTick>
 8002bc8:	1b80      	subs	r0, r0, r6
 8002bca:	2805      	cmp	r0, #5
 8002bcc:	f200 8142 	bhi.w	8002e54 <HAL_DMA_Init+0x35c>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bd0:	682c      	ldr	r4, [r5, #0]
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	07df      	lsls	r7, r3, #31
 8002bd6:	d4f5      	bmi.n	8002bc4 <HAL_DMA_Init+0xcc>
    registerValue |=  hdma->Init.Direction           |
 8002bd8:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bdc:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8002bde:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be0:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002be2:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6969      	ldr	r1, [r5, #20]
 8002be8:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bea:	69e9      	ldr	r1, [r5, #28]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bf0:	4976      	ldr	r1, [pc, #472]	@ (8002dcc <HAL_DMA_Init+0x2d4>)
 8002bf2:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8002bf4:	6a28      	ldr	r0, [r5, #32]
 8002bf6:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002bf8:	4875      	ldr	r0, [pc, #468]	@ (8002dd0 <HAL_DMA_Init+0x2d8>)
    registerValue |=  hdma->Init.Direction           |
 8002bfa:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bfc:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8002bfe:	2904      	cmp	r1, #4
 8002c00:	f000 813d 	beq.w	8002e7e <HAL_DMA_Init+0x386>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c04:	6800      	ldr	r0, [r0, #0]
 8002c06:	f36f 000f 	bfc	r0, #0, #16
 8002c0a:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8002c0e:	f080 80f1 	bcs.w	8002df4 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c12:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002c14:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c16:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002c1a:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c1c:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f7ff fe80 	bl	8002924 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c24:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002c26:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c28:	496a      	ldr	r1, [pc, #424]	@ (8002dd4 <HAL_DMA_Init+0x2dc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c2a:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c2e:	4f6a      	ldr	r7, [pc, #424]	@ (8002dd8 <HAL_DMA_Init+0x2e0>)
 8002c30:	1a61      	subs	r1, r4, r1
 8002c32:	4e6a      	ldr	r6, [pc, #424]	@ (8002ddc <HAL_DMA_Init+0x2e4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c34:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c36:	4a6a      	ldr	r2, [pc, #424]	@ (8002de0 <HAL_DMA_Init+0x2e8>)
 8002c38:	fab1 f181 	clz	r1, r1
 8002c3c:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c3e:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c40:	eba4 0a02 	sub.w	sl, r4, r2
 8002c44:	4b67      	ldr	r3, [pc, #412]	@ (8002de4 <HAL_DMA_Init+0x2ec>)
 8002c46:	0949      	lsrs	r1, r1, #5
 8002c48:	4a5e      	ldr	r2, [pc, #376]	@ (8002dc4 <HAL_DMA_Init+0x2cc>)
 8002c4a:	faba fa8a 	clz	sl, sl
 8002c4e:	eba4 0903 	sub.w	r9, r4, r3
 8002c52:	4b5b      	ldr	r3, [pc, #364]	@ (8002dc0 <HAL_DMA_Init+0x2c8>)
 8002c54:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8002c58:	fab7 f787 	clz	r7, r7
 8002c5c:	4294      	cmp	r4, r2
 8002c5e:	bf18      	it	ne
 8002c60:	429c      	cmpne	r4, r3
 8002c62:	f102 0218 	add.w	r2, r2, #24
 8002c66:	fab9 f989 	clz	r9, r9
 8002c6a:	eba4 0606 	sub.w	r6, r4, r6
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002c78:	fab6 f686 	clz	r6, r6
 8002c7c:	4294      	cmp	r4, r2
 8002c7e:	bf08      	it	eq
 8002c80:	f043 0301 	orreq.w	r3, r3, #1
 8002c84:	3218      	adds	r2, #24
 8002c86:	097f      	lsrs	r7, r7, #5
 8002c88:	4294      	cmp	r4, r2
 8002c8a:	bf08      	it	eq
 8002c8c:	f043 0301 	orreq.w	r3, r3, #1
 8002c90:	3218      	adds	r2, #24
 8002c92:	0976      	lsrs	r6, r6, #5
 8002c94:	4294      	cmp	r4, r2
 8002c96:	bf08      	it	eq
 8002c98:	f043 0301 	orreq.w	r3, r3, #1
 8002c9c:	3218      	adds	r2, #24
 8002c9e:	4294      	cmp	r4, r2
 8002ca0:	bf08      	it	eq
 8002ca2:	f043 0301 	orreq.w	r3, r3, #1
 8002ca6:	3218      	adds	r2, #24
 8002ca8:	4294      	cmp	r4, r2
 8002caa:	bf08      	it	eq
 8002cac:	f043 0301 	orreq.w	r3, r3, #1
 8002cb0:	3218      	adds	r2, #24
 8002cb2:	4294      	cmp	r4, r2
 8002cb4:	bf08      	it	eq
 8002cb6:	f043 0301 	orreq.w	r3, r3, #1
 8002cba:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002cbe:	4294      	cmp	r4, r2
 8002cc0:	bf08      	it	eq
 8002cc2:	f043 0301 	orreq.w	r3, r3, #1
 8002cc6:	3218      	adds	r2, #24
 8002cc8:	4294      	cmp	r4, r2
 8002cca:	bf08      	it	eq
 8002ccc:	f043 0301 	orreq.w	r3, r3, #1
 8002cd0:	3218      	adds	r2, #24
 8002cd2:	4294      	cmp	r4, r2
 8002cd4:	bf08      	it	eq
 8002cd6:	f043 0301 	orreq.w	r3, r3, #1
 8002cda:	3218      	adds	r2, #24
 8002cdc:	4294      	cmp	r4, r2
 8002cde:	bf08      	it	eq
 8002ce0:	f043 0301 	orreq.w	r3, r3, #1
 8002ce4:	3218      	adds	r2, #24
 8002ce6:	4294      	cmp	r4, r2
 8002ce8:	bf08      	it	eq
 8002cea:	f043 0301 	orreq.w	r3, r3, #1
 8002cee:	3218      	adds	r2, #24
 8002cf0:	4294      	cmp	r4, r2
 8002cf2:	bf08      	it	eq
 8002cf4:	f043 0301 	orreq.w	r3, r3, #1
 8002cf8:	3218      	adds	r2, #24
 8002cfa:	4294      	cmp	r4, r2
 8002cfc:	bf08      	it	eq
 8002cfe:	f043 0301 	orreq.w	r3, r3, #1
 8002d02:	3218      	adds	r2, #24
 8002d04:	4294      	cmp	r4, r2
 8002d06:	bf08      	it	eq
 8002d08:	f043 0301 	orreq.w	r3, r3, #1
 8002d0c:	4a36      	ldr	r2, [pc, #216]	@ (8002de8 <HAL_DMA_Init+0x2f0>)
 8002d0e:	ea4a 0303 	orr.w	r3, sl, r3
 8002d12:	eba4 0802 	sub.w	r8, r4, r2
 8002d16:	323c      	adds	r2, #60	@ 0x3c
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	fab8 f888 	clz	r8, r8
 8002d1e:	eba4 0b02 	sub.w	fp, r4, r2
 8002d22:	3214      	adds	r2, #20
 8002d24:	ea49 0303 	orr.w	r3, r9, r3
 8002d28:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002d2c:	fabb fb8b 	clz	fp, fp
 8002d30:	1aa2      	subs	r2, r4, r2
 8002d32:	ea48 0303 	orr.w	r3, r8, r3
 8002d36:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8002d3a:	fab2 f282 	clz	r2, r2
 8002d3e:	433b      	orrs	r3, r7
 8002d40:	0952      	lsrs	r2, r2, #5
 8002d42:	4333      	orrs	r3, r6
 8002d44:	9201      	str	r2, [sp, #4]
 8002d46:	ea5b 0303 	orrs.w	r3, fp, r3
 8002d4a:	d100      	bne.n	8002d4e <HAL_DMA_Init+0x256>
 8002d4c:	b382      	cbz	r2, 8002db0 <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d4e:	4628      	mov	r0, r5
 8002d50:	9100      	str	r1, [sp, #0]
 8002d52:	f7ff fe67 	bl	8002a24 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d56:	68ab      	ldr	r3, [r5, #8]
 8002d58:	9900      	ldr	r1, [sp, #0]
 8002d5a:	2b80      	cmp	r3, #128	@ 0x80
 8002d5c:	f000 8083 	beq.w	8002e66 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d60:	686a      	ldr	r2, [r5, #4]
 8002d62:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002d64:	b2d0      	uxtb	r0, r2
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d66:	3a01      	subs	r2, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d68:	e9d5 4c19 	ldrd	r4, ip, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d6c:	2a07      	cmp	r2, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d6e:	6018      	str	r0, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d70:	f8c4 c004 	str.w	ip, [r4, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d74:	d87e      	bhi.n	8002e74 <HAL_DMA_Init+0x37c>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d76:	ea4a 0a01 	orr.w	sl, sl, r1
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002d7a:	1e44      	subs	r4, r0, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d7c:	ea49 090a 	orr.w	r9, r9, sl
 8002d80:	ea48 0809 	orr.w	r8, r8, r9
 8002d84:	ea47 0708 	orr.w	r7, r7, r8
 8002d88:	433e      	orrs	r6, r7
 8002d8a:	ea5b 0606 	orrs.w	r6, fp, r6
 8002d8e:	d103      	bne.n	8002d98 <HAL_DMA_Init+0x2a0>
 8002d90:	9b01      	ldr	r3, [sp, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 811d 	beq.w	8002fd2 <HAL_DMA_Init+0x4da>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d98:	4a14      	ldr	r2, [pc, #80]	@ (8002dec <HAL_DMA_Init+0x2f4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002d9a:	4915      	ldr	r1, [pc, #84]	@ (8002df0 <HAL_DMA_Init+0x2f8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d9c:	4402      	add	r2, r0
 8002d9e:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002da0:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002da2:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002da4:	40a3      	lsls	r3, r4
 8002da6:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
 8002daa:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002dac:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dae:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002db2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db4:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002db6:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 8002dba:	b003      	add	sp, #12
 8002dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dc0:	40020010 	.word	0x40020010
 8002dc4:	40020028 	.word	0x40020028
 8002dc8:	400204b8 	.word	0x400204b8
 8002dcc:	fe10803f 	.word	0xfe10803f
 8002dd0:	5c001000 	.word	0x5c001000
 8002dd4:	5802541c 	.word	0x5802541c
 8002dd8:	58025458 	.word	0x58025458
 8002ddc:	5802546c 	.word	0x5802546c
 8002de0:	58025408 	.word	0x58025408
 8002de4:	58025430 	.word	0x58025430
 8002de8:	58025444 	.word	0x58025444
 8002dec:	1600963f 	.word	0x1600963f
 8002df0:	58025940 	.word	0x58025940
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002df4:	6868      	ldr	r0, [r5, #4]
 8002df6:	282e      	cmp	r0, #46	@ 0x2e
 8002df8:	d932      	bls.n	8002e60 <HAL_DMA_Init+0x368>
 8002dfa:	383f      	subs	r0, #63	@ 0x3f
 8002dfc:	2813      	cmp	r0, #19
 8002dfe:	d806      	bhi.n	8002e0e <HAL_DMA_Init+0x316>
 8002e00:	4e7a      	ldr	r6, [pc, #488]	@ (8002fec <HAL_DMA_Init+0x4f4>)
 8002e02:	fa26 f000 	lsr.w	r0, r6, r0
 8002e06:	07c0      	lsls	r0, r0, #31
 8002e08:	d501      	bpl.n	8002e0e <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 8002e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e0e:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e10:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e12:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e14:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002e18:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e1c:	f47f aefe 	bne.w	8002c1c <HAL_DMA_Init+0x124>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e20:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8002e22:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002e24:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e26:	2800      	cmp	r0, #0
 8002e28:	f43f aef8 	beq.w	8002c1c <HAL_DMA_Init+0x124>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	d138      	bne.n	8002ea2 <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 8002e30:	2901      	cmp	r1, #1
 8002e32:	d04d      	beq.n	8002ed0 <HAL_DMA_Init+0x3d8>
 8002e34:	f031 0202 	bics.w	r2, r1, #2
 8002e38:	f47f aef0 	bne.w	8002c1c <HAL_DMA_Init+0x124>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e3c:	01c2      	lsls	r2, r0, #7
 8002e3e:	f57f aeed 	bpl.w	8002c1c <HAL_DMA_Init+0x124>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e42:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8002e44:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e46:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002e48:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8002e4c:	2001      	movs	r0, #1
}
 8002e4e:	b003      	add	sp, #12
 8002e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e54:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e56:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e58:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e5a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        return HAL_ERROR;
 8002e5e:	e7f5      	b.n	8002e4c <HAL_DMA_Init+0x354>
 8002e60:	2828      	cmp	r0, #40	@ 0x28
 8002e62:	d9d4      	bls.n	8002e0e <HAL_DMA_Init+0x316>
 8002e64:	e7d1      	b.n	8002e0a <HAL_DMA_Init+0x312>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e66:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e68:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8002e6a:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e6e:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e70:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e72:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e7a:	676b      	str	r3, [r5, #116]	@ 0x74
 8002e7c:	e798      	b.n	8002db0 <HAL_DMA_Init+0x2b8>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e7e:	6806      	ldr	r6, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e80:	e9d5 070b 	ldrd	r0, r7, [r5, #44]	@ 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e84:	f36f 060f 	bfc	r6, #0, #16
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e88:	4307      	orrs	r7, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e8a:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e8e:	ea43 0307 	orr.w	r3, r3, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e92:	d2af      	bcs.n	8002df4 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e94:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e96:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e98:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ea0:	e7bf      	b.n	8002e22 <HAL_DMA_Init+0x32a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ea2:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002ea6:	d004      	beq.n	8002eb2 <HAL_DMA_Init+0x3ba>
    switch (hdma->Init.FIFOThreshold)
 8002ea8:	2902      	cmp	r1, #2
 8002eaa:	d9ca      	bls.n	8002e42 <HAL_DMA_Init+0x34a>
 8002eac:	2903      	cmp	r1, #3
 8002eae:	d0c5      	beq.n	8002e3c <HAL_DMA_Init+0x344>
 8002eb0:	e6b4      	b.n	8002c1c <HAL_DMA_Init+0x124>
    switch (hdma->Init.FIFOThreshold)
 8002eb2:	2903      	cmp	r1, #3
 8002eb4:	f63f aeb2 	bhi.w	8002c1c <HAL_DMA_Init+0x124>
 8002eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec0 <HAL_DMA_Init+0x3c8>)
 8002eba:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002e43 	.word	0x08002e43
 8002ec4:	08002e3d 	.word	0x08002e3d
 8002ec8:	08002e43 	.word	0x08002e43
 8002ecc:	08002ed1 	.word	0x08002ed1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ed0:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8002ed4:	f47f aea2 	bne.w	8002c1c <HAL_DMA_Init+0x124>
 8002ed8:	e7b3      	b.n	8002e42 <HAL_DMA_Init+0x34a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002eda:	4a45      	ldr	r2, [pc, #276]	@ (8002ff0 <HAL_DMA_Init+0x4f8>)
 8002edc:	4945      	ldr	r1, [pc, #276]	@ (8002ff4 <HAL_DMA_Init+0x4fc>)
 8002ede:	4b46      	ldr	r3, [pc, #280]	@ (8002ff8 <HAL_DMA_Init+0x500>)
 8002ee0:	eba4 0a02 	sub.w	sl, r4, r2
 8002ee4:	1a61      	subs	r1, r4, r1
 8002ee6:	4f45      	ldr	r7, [pc, #276]	@ (8002ffc <HAL_DMA_Init+0x504>)
 8002ee8:	eba4 0903 	sub.w	r9, r4, r3
 8002eec:	faba fa8a 	clz	sl, sl
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	fab1 f181 	clz	r1, r1
 8002ef6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8002efa:	fab9 f989 	clz	r9, r9
 8002efe:	eba4 0803 	sub.w	r8, r4, r3
 8002f02:	0949      	lsrs	r1, r1, #5
 8002f04:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002f08:	1be7      	subs	r7, r4, r7
 8002f0a:	fab8 f888 	clz	r8, r8
 8002f0e:	ea4a 0301 	orr.w	r3, sl, r1
 8002f12:	4e3b      	ldr	r6, [pc, #236]	@ (8003000 <HAL_DMA_Init+0x508>)
 8002f14:	3278      	adds	r2, #120	@ 0x78
 8002f16:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002f1a:	ea49 0303 	orr.w	r3, r9, r3
 8002f1e:	fab7 f787 	clz	r7, r7
 8002f22:	1ba6      	subs	r6, r4, r6
 8002f24:	eba4 0b02 	sub.w	fp, r4, r2
 8002f28:	ea48 0303 	orr.w	r3, r8, r3
 8002f2c:	097f      	lsrs	r7, r7, #5
 8002f2e:	fab6 f686 	clz	r6, r6
 8002f32:	3214      	adds	r2, #20
 8002f34:	fabb fb8b 	clz	fp, fp
 8002f38:	433b      	orrs	r3, r7
 8002f3a:	0976      	lsrs	r6, r6, #5
 8002f3c:	1aa2      	subs	r2, r4, r2
 8002f3e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8002f42:	4333      	orrs	r3, r6
 8002f44:	fab2 f282 	clz	r2, r2
 8002f48:	ea5b 0303 	orrs.w	r3, fp, r3
 8002f4c:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8002f50:	9201      	str	r2, [sp, #4]
 8002f52:	d101      	bne.n	8002f58 <HAL_DMA_Init+0x460>
 8002f54:	2a00      	cmp	r2, #0
 8002f56:	d043      	beq.n	8002fe0 <HAL_DMA_Init+0x4e8>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f58:	2302      	movs	r3, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002f5a:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8003014 <HAL_DMA_Init+0x51c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f5e:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002f62:	2300      	movs	r3, #0
 8002f64:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f68:	68ab      	ldr	r3, [r5, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002f6a:	6822      	ldr	r2, [r4, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f6c:	2b40      	cmp	r3, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002f6e:	ea02 0e0e 	and.w	lr, r2, lr
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f72:	d033      	beq.n	8002fdc <HAL_DMA_Init+0x4e4>
 8002f74:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	0398      	lsls	r0, r3, #14
 8002f80:	9100      	str	r1, [sp, #0]
 8002f82:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8002f86:	ea43 0c02 	orr.w	ip, r3, r2
 8002f8a:	696a      	ldr	r2, [r5, #20]
 8002f8c:	69ab      	ldr	r3, [r5, #24]
 8002f8e:	ea4c 0c02 	orr.w	ip, ip, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <HAL_DMA_Init+0x50c>)
 8002f94:	ea4c 0c03 	orr.w	ip, ip, r3
 8002f98:	69eb      	ldr	r3, [r5, #28]
 8002f9a:	4422      	add	r2, r4
 8002f9c:	ea4c 0c03 	orr.w	ip, ip, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002fa0:	6a2b      	ldr	r3, [r5, #32]
 8002fa2:	ea4e 1313 	orr.w	r3, lr, r3, lsr #4
 8002fa6:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002faa:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002fac:	4b16      	ldr	r3, [pc, #88]	@ (8003008 <HAL_DMA_Init+0x510>)
 8002fae:	fba3 2302 	umull	r2, r3, r3, r2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002fb2:	6020      	str	r0, [r4, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fb4:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	65eb      	str	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fbc:	f7ff fcb2 	bl	8002924 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fc0:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fc2:	4602      	mov	r2, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fc4:	9900      	ldr	r1, [sp, #0]
 8002fc6:	f003 001f 	and.w	r0, r3, #31
 8002fca:	2301      	movs	r3, #1
 8002fcc:	4083      	lsls	r3, r0
 8002fce:	6053      	str	r3, [r2, #4]
 8002fd0:	e6bd      	b.n	8002d4e <HAL_DMA_Init+0x256>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800300c <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002fd4:	490e      	ldr	r1, [pc, #56]	@ (8003010 <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002fd6:	4402      	add	r2, r0
 8002fd8:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002fda:	e6e1      	b.n	8002da0 <HAL_DMA_Init+0x2a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fdc:	2010      	movs	r0, #16
 8002fde:	e7cf      	b.n	8002f80 <HAL_DMA_Init+0x488>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe0:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002fe2:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fe4:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002fe6:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8002fea:	e72f      	b.n	8002e4c <HAL_DMA_Init+0x354>
 8002fec:	000f030f 	.word	0x000f030f
 8002ff0:	58025408 	.word	0x58025408
 8002ff4:	5802541c 	.word	0x5802541c
 8002ff8:	58025430 	.word	0x58025430
 8002ffc:	58025458 	.word	0x58025458
 8003000:	5802546c 	.word	0x5802546c
 8003004:	a7fdabf8 	.word	0xa7fdabf8
 8003008:	cccccccd 	.word	0xcccccccd
 800300c:	1000823f 	.word	0x1000823f
 8003010:	40020940 	.word	0x40020940
 8003014:	fffe000f 	.word	0xfffe000f

08003018 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8003018:	2800      	cmp	r0, #0
 800301a:	f000 8221 	beq.w	8003460 <HAL_DMA_Start_IT+0x448>
{
 800301e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hdma);
 8003022:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8003026:	2c01      	cmp	r4, #1
 8003028:	f000 8217 	beq.w	800345a <HAL_DMA_Start_IT+0x442>
 800302c:	2401      	movs	r4, #1
 800302e:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003032:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8003036:	2c01      	cmp	r4, #1
 8003038:	d008      	beq.n	800304c <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800303a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 800303e:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003040:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8003042:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8003046:	2001      	movs	r0, #1
}
 8003048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	2402      	movs	r4, #2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800304e:	4e69      	ldr	r6, [pc, #420]	@ (80031f4 <HAL_DMA_Start_IT+0x1dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003050:	f8df e1a8 	ldr.w	lr, [pc, #424]	@ 80031fc <HAL_DMA_Start_IT+0x1e4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003054:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003058:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 800305a:	4d67      	ldr	r5, [pc, #412]	@ (80031f8 <HAL_DMA_Start_IT+0x1e0>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800305c:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 800305e:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003060:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003210 <HAL_DMA_Start_IT+0x1f8>
 8003064:	4574      	cmp	r4, lr
 8003066:	bf18      	it	ne
 8003068:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 800306a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8003214 <HAL_DMA_Start_IT+0x1fc>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800306e:	f8d0 a058 	ldr.w	sl, [r0, #88]	@ 0x58
 8003072:	bf0c      	ite	eq
 8003074:	2601      	moveq	r6, #1
 8003076:	2600      	movne	r6, #0
 8003078:	4544      	cmp	r4, r8
 800307a:	bf14      	ite	ne
 800307c:	46b1      	movne	r9, r6
 800307e:	f046 0901 	orreq.w	r9, r6, #1
    __HAL_DMA_DISABLE(hdma);
 8003082:	42ac      	cmp	r4, r5
 8003084:	bf18      	it	ne
 8003086:	4564      	cmpne	r4, ip
 8003088:	bf0c      	ite	eq
 800308a:	2501      	moveq	r5, #1
 800308c:	2500      	movne	r5, #0
 800308e:	f040 80c3 	bne.w	8003218 <HAL_DMA_Start_IT+0x200>
 8003092:	f8d4 c000 	ldr.w	ip, [r4]
 8003096:	f02c 0c01 	bic.w	ip, ip, #1
 800309a:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 800309e:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030a2:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
 80030a6:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80030a8:	f1bc 0f00 	cmp.w	ip, #0
 80030ac:	d007      	beq.n	80030be <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030ae:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 80030b2:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030b4:	b91d      	cbnz	r5, 80030be <HAL_DMA_Start_IT+0xa6>
 80030b6:	f1b9 0f00 	cmp.w	r9, #0
 80030ba:	f000 8130 	beq.w	800331e <HAL_DMA_Start_IT+0x306>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030be:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 80030c0:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 80030c4:	f007 081f 	and.w	r8, r7, #31
 80030c8:	fa0e fe08 	lsl.w	lr, lr, r8
 80030cc:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030d0:	6827      	ldr	r7, [r4, #0]
 80030d2:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 80030d6:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80030d8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030da:	6883      	ldr	r3, [r0, #8]
 80030dc:	2b40      	cmp	r3, #64	@ 0x40
 80030de:	f000 81c1 	beq.w	8003464 <HAL_DMA_Start_IT+0x44c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80030e2:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80030e4:	60e2      	str	r2, [r4, #12]
      if(hdma->XferHalfCpltCallback != NULL)
 80030e6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030e8:	2d00      	cmp	r5, #0
 80030ea:	f040 81a1 	bne.w	8003430 <HAL_DMA_Start_IT+0x418>
 80030ee:	4b43      	ldr	r3, [pc, #268]	@ (80031fc <HAL_DMA_Start_IT+0x1e4>)
 80030f0:	429c      	cmp	r4, r3
 80030f2:	f000 81de 	beq.w	80034b2 <HAL_DMA_Start_IT+0x49a>
 80030f6:	3318      	adds	r3, #24
 80030f8:	429c      	cmp	r4, r3
 80030fa:	f000 81f6 	beq.w	80034ea <HAL_DMA_Start_IT+0x4d2>
 80030fe:	f1b9 0f00 	cmp.w	r9, #0
 8003102:	f040 81c7 	bne.w	8003494 <HAL_DMA_Start_IT+0x47c>
 8003106:	4b3e      	ldr	r3, [pc, #248]	@ (8003200 <HAL_DMA_Start_IT+0x1e8>)
 8003108:	429c      	cmp	r4, r3
 800310a:	f000 8201 	beq.w	8003510 <HAL_DMA_Start_IT+0x4f8>
 800310e:	4b3d      	ldr	r3, [pc, #244]	@ (8003204 <HAL_DMA_Start_IT+0x1ec>)
 8003110:	429c      	cmp	r4, r3
 8003112:	f000 8209 	beq.w	8003528 <HAL_DMA_Start_IT+0x510>
 8003116:	3318      	adds	r3, #24
 8003118:	429c      	cmp	r4, r3
 800311a:	f000 8223 	beq.w	8003564 <HAL_DMA_Start_IT+0x54c>
 800311e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8003122:	429c      	cmp	r4, r3
 8003124:	f000 8233 	beq.w	800358e <HAL_DMA_Start_IT+0x576>
 8003128:	3318      	adds	r3, #24
 800312a:	429c      	cmp	r4, r3
 800312c:	f000 8242 	beq.w	80035b4 <HAL_DMA_Start_IT+0x59c>
 8003130:	3318      	adds	r3, #24
 8003132:	429c      	cmp	r4, r3
 8003134:	f000 8249 	beq.w	80035ca <HAL_DMA_Start_IT+0x5b2>
 8003138:	3318      	adds	r3, #24
 800313a:	429c      	cmp	r4, r3
 800313c:	f000 8250 	beq.w	80035e0 <HAL_DMA_Start_IT+0x5c8>
 8003140:	3318      	adds	r3, #24
 8003142:	429c      	cmp	r4, r3
 8003144:	f000 8257 	beq.w	80035f6 <HAL_DMA_Start_IT+0x5de>
 8003148:	3318      	adds	r3, #24
 800314a:	429c      	cmp	r4, r3
 800314c:	f000 8267 	beq.w	800361e <HAL_DMA_Start_IT+0x606>
 8003150:	3318      	adds	r3, #24
 8003152:	429c      	cmp	r4, r3
 8003154:	f000 8265 	beq.w	8003622 <HAL_DMA_Start_IT+0x60a>
 8003158:	3318      	adds	r3, #24
 800315a:	429c      	cmp	r4, r3
 800315c:	f000 8275 	beq.w	800364a <HAL_DMA_Start_IT+0x632>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	f023 030e 	bic.w	r3, r3, #14
 8003166:	f043 030a 	orr.w	r3, r3, #10
 800316a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800316c:	b11a      	cbz	r2, 8003176 <HAL_DMA_Start_IT+0x15e>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	f043 0304 	orr.w	r3, r3, #4
 8003174:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003176:	4b24      	ldr	r3, [pc, #144]	@ (8003208 <HAL_DMA_Start_IT+0x1f0>)
 8003178:	4a24      	ldr	r2, [pc, #144]	@ (800320c <HAL_DMA_Start_IT+0x1f4>)
 800317a:	4294      	cmp	r4, r2
 800317c:	bf18      	it	ne
 800317e:	429c      	cmpne	r4, r3
 8003180:	f102 0214 	add.w	r2, r2, #20
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	4294      	cmp	r4, r2
 800318c:	bf08      	it	eq
 800318e:	f043 0301 	orreq.w	r3, r3, #1
 8003192:	3214      	adds	r2, #20
 8003194:	4294      	cmp	r4, r2
 8003196:	bf08      	it	eq
 8003198:	f043 0301 	orreq.w	r3, r3, #1
 800319c:	3214      	adds	r2, #20
 800319e:	4294      	cmp	r4, r2
 80031a0:	bf08      	it	eq
 80031a2:	f043 0301 	orreq.w	r3, r3, #1
 80031a6:	3214      	adds	r2, #20
 80031a8:	4294      	cmp	r4, r2
 80031aa:	bf08      	it	eq
 80031ac:	f043 0301 	orreq.w	r3, r3, #1
 80031b0:	3214      	adds	r2, #20
 80031b2:	4294      	cmp	r4, r2
 80031b4:	bf08      	it	eq
 80031b6:	f043 0301 	orreq.w	r3, r3, #1
 80031ba:	3214      	adds	r2, #20
 80031bc:	4294      	cmp	r4, r2
 80031be:	bf08      	it	eq
 80031c0:	f043 0301 	orreq.w	r3, r3, #1
 80031c4:	b17b      	cbz	r3, 80031e6 <HAL_DMA_Start_IT+0x1ce>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031c6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80031c8:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	03d2      	lsls	r2, r2, #15
 80031d0:	f100 813e 	bmi.w	8003450 <HAL_DMA_Start_IT+0x438>
      if(hdma->DMAmuxRequestGen != 0U)
 80031d4:	f1bc 0f00 	cmp.w	ip, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_DMA_Start_IT+0x1ce>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031da:	f8dc 3000 	ldr.w	r3, [ip]
 80031de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e2:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 80031e6:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6023      	str	r3, [r4, #0]
}
 80031f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f4:	40020070 	.word	0x40020070
 80031f8:	40020028 	.word	0x40020028
 80031fc:	40020040 	.word	0x40020040
 8003200:	40020088 	.word	0x40020088
 8003204:	400200a0 	.word	0x400200a0
 8003208:	58025408 	.word	0x58025408
 800320c:	5802541c 	.word	0x5802541c
 8003210:	40020058 	.word	0x40020058
 8003214:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8003218:	4574      	cmp	r4, lr
 800321a:	f000 8154 	beq.w	80034c6 <HAL_DMA_Start_IT+0x4ae>
 800321e:	4544      	cmp	r4, r8
 8003220:	f000 815a 	beq.w	80034d8 <HAL_DMA_Start_IT+0x4c0>
 8003224:	f1b9 0f00 	cmp.w	r9, #0
 8003228:	f040 811f 	bne.w	800346a <HAL_DMA_Start_IT+0x452>
 800322c:	f8df c434 	ldr.w	ip, [pc, #1076]	@ 8003664 <HAL_DMA_Start_IT+0x64c>
 8003230:	4564      	cmp	r4, ip
 8003232:	f000 8164 	beq.w	80034fe <HAL_DMA_Start_IT+0x4e6>
 8003236:	f10c 0c18 	add.w	ip, ip, #24
 800323a:	4564      	cmp	r4, ip
 800323c:	f000 8180 	beq.w	8003540 <HAL_DMA_Start_IT+0x528>
 8003240:	f10c 0c18 	add.w	ip, ip, #24
 8003244:	4564      	cmp	r4, ip
 8003246:	f000 8184 	beq.w	8003552 <HAL_DMA_Start_IT+0x53a>
 800324a:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 800324e:	4564      	cmp	r4, ip
 8003250:	f000 8194 	beq.w	800357c <HAL_DMA_Start_IT+0x564>
 8003254:	f10c 0c18 	add.w	ip, ip, #24
 8003258:	4564      	cmp	r4, ip
 800325a:	f000 81a2 	beq.w	80035a2 <HAL_DMA_Start_IT+0x58a>
 800325e:	f10c 0c18 	add.w	ip, ip, #24
 8003262:	4564      	cmp	r4, ip
 8003264:	f000 81b3 	beq.w	80035ce <HAL_DMA_Start_IT+0x5b6>
 8003268:	f10c 0c18 	add.w	ip, ip, #24
 800326c:	4564      	cmp	r4, ip
 800326e:	f000 81b9 	beq.w	80035e4 <HAL_DMA_Start_IT+0x5cc>
 8003272:	f10c 0c18 	add.w	ip, ip, #24
 8003276:	4564      	cmp	r4, ip
 8003278:	f000 81bf 	beq.w	80035fa <HAL_DMA_Start_IT+0x5e2>
 800327c:	f10c 0c18 	add.w	ip, ip, #24
 8003280:	4564      	cmp	r4, ip
 8003282:	f000 81c3 	beq.w	800360c <HAL_DMA_Start_IT+0x5f4>
 8003286:	f10c 0c18 	add.w	ip, ip, #24
 800328a:	4564      	cmp	r4, ip
 800328c:	f000 81cb 	beq.w	8003626 <HAL_DMA_Start_IT+0x60e>
 8003290:	f10c 0c18 	add.w	ip, ip, #24
 8003294:	4564      	cmp	r4, ip
 8003296:	f000 81cf 	beq.w	8003638 <HAL_DMA_Start_IT+0x620>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800329a:	f8df c3cc 	ldr.w	ip, [pc, #972]	@ 8003668 <HAL_DMA_Start_IT+0x650>
 800329e:	f8df e3cc 	ldr.w	lr, [pc, #972]	@ 800366c <HAL_DMA_Start_IT+0x654>
 80032a2:	4574      	cmp	r4, lr
 80032a4:	bf18      	it	ne
 80032a6:	4564      	cmpne	r4, ip
 80032a8:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
 80032ac:	bf0c      	ite	eq
 80032ae:	f04f 0c01 	moveq.w	ip, #1
 80032b2:	f04f 0c00 	movne.w	ip, #0
 80032b6:	4574      	cmp	r4, lr
 80032b8:	bf08      	it	eq
 80032ba:	f04c 0c01 	orreq.w	ip, ip, #1
 80032be:	f10e 0e14 	add.w	lr, lr, #20
 80032c2:	4574      	cmp	r4, lr
 80032c4:	bf08      	it	eq
 80032c6:	f04c 0c01 	orreq.w	ip, ip, #1
 80032ca:	f10e 0e14 	add.w	lr, lr, #20
 80032ce:	4574      	cmp	r4, lr
 80032d0:	bf08      	it	eq
 80032d2:	f04c 0c01 	orreq.w	ip, ip, #1
 80032d6:	f10e 0e14 	add.w	lr, lr, #20
 80032da:	4574      	cmp	r4, lr
 80032dc:	bf08      	it	eq
 80032de:	f04c 0c01 	orreq.w	ip, ip, #1
    __HAL_DMA_DISABLE(hdma);
 80032e2:	f8d4 e000 	ldr.w	lr, [r4]
 80032e6:	f02e 0e01 	bic.w	lr, lr, #1
 80032ea:	f8c4 e000 	str.w	lr, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032ee:	f8df e380 	ldr.w	lr, [pc, #896]	@ 8003670 <HAL_DMA_Start_IT+0x658>
 80032f2:	4574      	cmp	r4, lr
 80032f4:	bf08      	it	eq
 80032f6:	f04c 0c01 	orreq.w	ip, ip, #1
 80032fa:	f1bc 0f00 	cmp.w	ip, #0
 80032fe:	d103      	bne.n	8003308 <HAL_DMA_Start_IT+0x2f0>
 8003300:	f8df c370 	ldr.w	ip, [pc, #880]	@ 8003674 <HAL_DMA_Start_IT+0x65c>
 8003304:	4564      	cmp	r4, ip
 8003306:	d14f      	bne.n	80033a8 <HAL_DMA_Start_IT+0x390>
    if(hdma->DMAmuxRequestGen != 0U)
 8003308:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800330c:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8003310:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003312:	f1bc 0f00 	cmp.w	ip, #0
 8003316:	d002      	beq.n	800331e <HAL_DMA_Start_IT+0x306>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003318:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 800331c:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800331e:	f8df e344 	ldr.w	lr, [pc, #836]	@ 8003664 <HAL_DMA_Start_IT+0x64c>
 8003322:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 8003678 <HAL_DMA_Start_IT+0x660>
 8003326:	4544      	cmp	r4, r8
 8003328:	bf18      	it	ne
 800332a:	4574      	cmpne	r4, lr
 800332c:	f108 0818 	add.w	r8, r8, #24
 8003330:	bf0c      	ite	eq
 8003332:	f04f 0e01 	moveq.w	lr, #1
 8003336:	f04f 0e00 	movne.w	lr, #0
 800333a:	4544      	cmp	r4, r8
 800333c:	bf08      	it	eq
 800333e:	f04e 0e01 	orreq.w	lr, lr, #1
 8003342:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 8003346:	4544      	cmp	r4, r8
 8003348:	bf08      	it	eq
 800334a:	f04e 0e01 	orreq.w	lr, lr, #1
 800334e:	f108 0818 	add.w	r8, r8, #24
 8003352:	4544      	cmp	r4, r8
 8003354:	bf08      	it	eq
 8003356:	f04e 0e01 	orreq.w	lr, lr, #1
 800335a:	f108 0818 	add.w	r8, r8, #24
 800335e:	4544      	cmp	r4, r8
 8003360:	bf08      	it	eq
 8003362:	f04e 0e01 	orreq.w	lr, lr, #1
 8003366:	f108 0818 	add.w	r8, r8, #24
 800336a:	4544      	cmp	r4, r8
 800336c:	bf08      	it	eq
 800336e:	f04e 0e01 	orreq.w	lr, lr, #1
 8003372:	f108 0818 	add.w	r8, r8, #24
 8003376:	4544      	cmp	r4, r8
 8003378:	bf08      	it	eq
 800337a:	f04e 0e01 	orreq.w	lr, lr, #1
 800337e:	f108 0818 	add.w	r8, r8, #24
 8003382:	4544      	cmp	r4, r8
 8003384:	bf08      	it	eq
 8003386:	f04e 0e01 	orreq.w	lr, lr, #1
 800338a:	f108 0818 	add.w	r8, r8, #24
 800338e:	4544      	cmp	r4, r8
 8003390:	bf08      	it	eq
 8003392:	f04e 0e01 	orreq.w	lr, lr, #1
 8003396:	f1be 0f00 	cmp.w	lr, #0
 800339a:	f47f ae90 	bne.w	80030be <HAL_DMA_Start_IT+0xa6>
 800339e:	f8df e2dc 	ldr.w	lr, [pc, #732]	@ 800367c <HAL_DMA_Start_IT+0x664>
 80033a2:	4574      	cmp	r4, lr
 80033a4:	f43f ae8b 	beq.w	80030be <HAL_DMA_Start_IT+0xa6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80033a8:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 800366c <HAL_DMA_Start_IT+0x654>
 80033ac:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 8003668 <HAL_DMA_Start_IT+0x650>
 80033b0:	4574      	cmp	r4, lr
 80033b2:	bf18      	it	ne
 80033b4:	4564      	cmpne	r4, ip
 80033b6:	f10e 0e14 	add.w	lr, lr, #20
 80033ba:	bf0c      	ite	eq
 80033bc:	f04f 0c01 	moveq.w	ip, #1
 80033c0:	f04f 0c00 	movne.w	ip, #0
 80033c4:	4574      	cmp	r4, lr
 80033c6:	bf08      	it	eq
 80033c8:	f04c 0c01 	orreq.w	ip, ip, #1
 80033cc:	f10e 0e14 	add.w	lr, lr, #20
 80033d0:	4574      	cmp	r4, lr
 80033d2:	bf08      	it	eq
 80033d4:	f04c 0c01 	orreq.w	ip, ip, #1
 80033d8:	f10e 0e14 	add.w	lr, lr, #20
 80033dc:	4574      	cmp	r4, lr
 80033de:	bf08      	it	eq
 80033e0:	f04c 0c01 	orreq.w	ip, ip, #1
 80033e4:	f10e 0e14 	add.w	lr, lr, #20
 80033e8:	4574      	cmp	r4, lr
 80033ea:	bf08      	it	eq
 80033ec:	f04c 0c01 	orreq.w	ip, ip, #1
 80033f0:	f10e 0e14 	add.w	lr, lr, #20
 80033f4:	4574      	cmp	r4, lr
 80033f6:	bf08      	it	eq
 80033f8:	f04c 0c01 	orreq.w	ip, ip, #1
 80033fc:	f1bc 0f00 	cmp.w	ip, #0
 8003400:	d104      	bne.n	800340c <HAL_DMA_Start_IT+0x3f4>
 8003402:	f8df c270 	ldr.w	ip, [pc, #624]	@ 8003674 <HAL_DMA_Start_IT+0x65c>
 8003406:	4564      	cmp	r4, ip
 8003408:	f040 8125 	bne.w	8003656 <HAL_DMA_Start_IT+0x63e>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800340c:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 800340e:	f04f 0c01 	mov.w	ip, #1
 8003412:	f006 0e1f 	and.w	lr, r6, #31
 8003416:	fa0c fc0e 	lsl.w	ip, ip, lr
 800341a:	f8ca c004 	str.w	ip, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800341e:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003420:	6883      	ldr	r3, [r0, #8]
 8003422:	2b40      	cmp	r3, #64	@ 0x40
 8003424:	f000 8113 	beq.w	800364e <HAL_DMA_Start_IT+0x636>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003428:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800342a:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800342c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800342e:	e65e      	b.n	80030ee <HAL_DMA_Start_IT+0xd6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	f023 031e 	bic.w	r3, r3, #30
 8003436:	f043 0316 	orr.w	r3, r3, #22
 800343a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800343c:	b11a      	cbz	r2, 8003446 <HAL_DMA_Start_IT+0x42e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	f043 0308 	orr.w	r3, r3, #8
 8003444:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003446:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	03d2      	lsls	r2, r2, #15
 800344c:	f57f aec2 	bpl.w	80031d4 <HAL_DMA_Start_IT+0x1bc>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e6bc      	b.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
  __HAL_LOCK(hdma);
 800345a:	2002      	movs	r0, #2
}
 800345c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8003460:	2001      	movs	r0, #1
}
 8003462:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003464:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003466:	60e1      	str	r1, [r4, #12]
 8003468:	e63d      	b.n	80030e6 <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 800346a:	f8df e1f0 	ldr.w	lr, [pc, #496]	@ 800365c <HAL_DMA_Start_IT+0x644>
 800346e:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 8003472:	f02c 0c01 	bic.w	ip, ip, #1
 8003476:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 800347a:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800347e:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8003482:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003484:	f1bc 0f00 	cmp.w	ip, #0
 8003488:	f43f ae19 	beq.w	80030be <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800348c:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8003490:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003492:	e614      	b.n	80030be <HAL_DMA_Start_IT+0xa6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003494:	4971      	ldr	r1, [pc, #452]	@ (800365c <HAL_DMA_Start_IT+0x644>)
 8003496:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8003498:	f023 031e 	bic.w	r3, r3, #30
 800349c:	f043 0316 	orr.w	r3, r3, #22
 80034a0:	670b      	str	r3, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 80034a2:	2a00      	cmp	r2, #0
 80034a4:	f43f ae8f 	beq.w	80031c6 <HAL_DMA_Start_IT+0x1ae>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	f043 0308 	orr.w	r3, r3, #8
 80034ae:	6023      	str	r3, [r4, #0]
 80034b0:	e689      	b.n	80031c6 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80034b2:	496a      	ldr	r1, [pc, #424]	@ (800365c <HAL_DMA_Start_IT+0x644>)
 80034b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80034b6:	f023 031e 	bic.w	r3, r3, #30
 80034ba:	f043 0316 	orr.w	r3, r3, #22
 80034be:	640b      	str	r3, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 80034c0:	2a00      	cmp	r2, #0
 80034c2:	d1f1      	bne.n	80034a8 <HAL_DMA_Start_IT+0x490>
 80034c4:	e67f      	b.n	80031c6 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80034c6:	f8df e194 	ldr.w	lr, [pc, #404]	@ 800365c <HAL_DMA_Start_IT+0x644>
 80034ca:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 80034ce:	f02c 0c01 	bic.w	ip, ip, #1
 80034d2:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034d6:	e5e2      	b.n	800309e <HAL_DMA_Start_IT+0x86>
    __HAL_DMA_DISABLE(hdma);
 80034d8:	f8df e180 	ldr.w	lr, [pc, #384]	@ 800365c <HAL_DMA_Start_IT+0x644>
 80034dc:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 80034e0:	f02c 0c01 	bic.w	ip, ip, #1
 80034e4:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034e8:	e7c7      	b.n	800347a <HAL_DMA_Start_IT+0x462>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80034ea:	495c      	ldr	r1, [pc, #368]	@ (800365c <HAL_DMA_Start_IT+0x644>)
 80034ec:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 80034ee:	f023 031e 	bic.w	r3, r3, #30
 80034f2:	f043 0316 	orr.w	r3, r3, #22
 80034f6:	658b      	str	r3, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 80034f8:	2a00      	cmp	r2, #0
 80034fa:	d1d5      	bne.n	80034a8 <HAL_DMA_Start_IT+0x490>
 80034fc:	e663      	b.n	80031c6 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80034fe:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 800365c <HAL_DMA_Start_IT+0x644>
 8003502:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8003506:	f02c 0c01 	bic.w	ip, ip, #1
 800350a:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800350e:	e6fb      	b.n	8003308 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003510:	4952      	ldr	r1, [pc, #328]	@ (800365c <HAL_DMA_Start_IT+0x644>)
 8003512:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003516:	f023 031e 	bic.w	r3, r3, #30
 800351a:	f043 0316 	orr.w	r3, r3, #22
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8003522:	2a00      	cmp	r2, #0
 8003524:	d1c0      	bne.n	80034a8 <HAL_DMA_Start_IT+0x490>
 8003526:	e64e      	b.n	80031c6 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003528:	494c      	ldr	r1, [pc, #304]	@ (800365c <HAL_DMA_Start_IT+0x644>)
 800352a:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
 800352e:	f023 031e 	bic.w	r3, r3, #30
 8003532:	f043 0316 	orr.w	r3, r3, #22
 8003536:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 800353a:	2a00      	cmp	r2, #0
 800353c:	d1b4      	bne.n	80034a8 <HAL_DMA_Start_IT+0x490>
 800353e:	e642      	b.n	80031c6 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8003540:	f8df e118 	ldr.w	lr, [pc, #280]	@ 800365c <HAL_DMA_Start_IT+0x644>
 8003544:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 8003548:	f02c 0c01 	bic.w	ip, ip, #1
 800354c:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003550:	e6da      	b.n	8003308 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8003552:	f8df e108 	ldr.w	lr, [pc, #264]	@ 800365c <HAL_DMA_Start_IT+0x644>
 8003556:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 800355a:	f02c 0c01 	bic.w	ip, ip, #1
 800355e:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003562:	e6d1      	b.n	8003308 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003564:	493d      	ldr	r1, [pc, #244]	@ (800365c <HAL_DMA_Start_IT+0x644>)
 8003566:	f8d1 30b8 	ldr.w	r3, [r1, #184]	@ 0xb8
 800356a:	f023 031e 	bic.w	r3, r3, #30
 800356e:	f043 0316 	orr.w	r3, r3, #22
 8003572:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8003576:	2a00      	cmp	r2, #0
 8003578:	d196      	bne.n	80034a8 <HAL_DMA_Start_IT+0x490>
 800357a:	e624      	b.n	80031c6 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 800357c:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 8003660 <HAL_DMA_Start_IT+0x648>
 8003580:	f8de c010 	ldr.w	ip, [lr, #16]
 8003584:	f02c 0c01 	bic.w	ip, ip, #1
 8003588:	f8ce c010 	str.w	ip, [lr, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800358c:	e6bc      	b.n	8003308 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800358e:	4934      	ldr	r1, [pc, #208]	@ (8003660 <HAL_DMA_Start_IT+0x648>)
 8003590:	690b      	ldr	r3, [r1, #16]
 8003592:	f023 031e 	bic.w	r3, r3, #30
 8003596:	f043 0316 	orr.w	r3, r3, #22
 800359a:	610b      	str	r3, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 800359c:	2a00      	cmp	r2, #0
 800359e:	d183      	bne.n	80034a8 <HAL_DMA_Start_IT+0x490>
 80035a0:	e611      	b.n	80031c6 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80035a2:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 8003660 <HAL_DMA_Start_IT+0x648>
 80035a6:	f8de c028 	ldr.w	ip, [lr, #40]	@ 0x28
 80035aa:	f02c 0c01 	bic.w	ip, ip, #1
 80035ae:	f8ce c028 	str.w	ip, [lr, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035b2:	e6a9      	b.n	8003308 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035b4:	492a      	ldr	r1, [pc, #168]	@ (8003660 <HAL_DMA_Start_IT+0x648>)
 80035b6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80035b8:	f023 031e 	bic.w	r3, r3, #30
 80035bc:	f043 0316 	orr.w	r3, r3, #22
 80035c0:	628b      	str	r3, [r1, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 80035c2:	2a00      	cmp	r2, #0
 80035c4:	f47f af70 	bne.w	80034a8 <HAL_DMA_Start_IT+0x490>
 80035c8:	e5fd      	b.n	80031c6 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035ca:	4925      	ldr	r1, [pc, #148]	@ (8003660 <HAL_DMA_Start_IT+0x648>)
 80035cc:	e772      	b.n	80034b4 <HAL_DMA_Start_IT+0x49c>
    __HAL_DMA_DISABLE(hdma);
 80035ce:	f8df e090 	ldr.w	lr, [pc, #144]	@ 8003660 <HAL_DMA_Start_IT+0x648>
 80035d2:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 80035d6:	f02c 0c01 	bic.w	ip, ip, #1
 80035da:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035de:	e693      	b.n	8003308 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035e0:	491f      	ldr	r1, [pc, #124]	@ (8003660 <HAL_DMA_Start_IT+0x648>)
 80035e2:	e783      	b.n	80034ec <HAL_DMA_Start_IT+0x4d4>
    __HAL_DMA_DISABLE(hdma);
 80035e4:	f8df e078 	ldr.w	lr, [pc, #120]	@ 8003660 <HAL_DMA_Start_IT+0x648>
 80035e8:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 80035ec:	f02c 0c01 	bic.w	ip, ip, #1
 80035f0:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035f4:	e688      	b.n	8003308 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035f6:	491a      	ldr	r1, [pc, #104]	@ (8003660 <HAL_DMA_Start_IT+0x648>)
 80035f8:	e74d      	b.n	8003496 <HAL_DMA_Start_IT+0x47e>
    __HAL_DMA_DISABLE(hdma);
 80035fa:	f8df e064 	ldr.w	lr, [pc, #100]	@ 8003660 <HAL_DMA_Start_IT+0x648>
 80035fe:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 8003602:	f02c 0c01 	bic.w	ip, ip, #1
 8003606:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800360a:	e67d      	b.n	8003308 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 800360c:	f8df e050 	ldr.w	lr, [pc, #80]	@ 8003660 <HAL_DMA_Start_IT+0x648>
 8003610:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8003614:	f02c 0c01 	bic.w	ip, ip, #1
 8003618:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800361c:	e674      	b.n	8003308 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800361e:	4910      	ldr	r1, [pc, #64]	@ (8003660 <HAL_DMA_Start_IT+0x648>)
 8003620:	e777      	b.n	8003512 <HAL_DMA_Start_IT+0x4fa>
 8003622:	490f      	ldr	r1, [pc, #60]	@ (8003660 <HAL_DMA_Start_IT+0x648>)
 8003624:	e781      	b.n	800352a <HAL_DMA_Start_IT+0x512>
    __HAL_DMA_DISABLE(hdma);
 8003626:	f8df e038 	ldr.w	lr, [pc, #56]	@ 8003660 <HAL_DMA_Start_IT+0x648>
 800362a:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 800362e:	f02c 0c01 	bic.w	ip, ip, #1
 8003632:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003636:	e667      	b.n	8003308 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8003638:	f8df e024 	ldr.w	lr, [pc, #36]	@ 8003660 <HAL_DMA_Start_IT+0x648>
 800363c:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 8003640:	f02c 0c01 	bic.w	ip, ip, #1
 8003644:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003648:	e65e      	b.n	8003308 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800364a:	4905      	ldr	r1, [pc, #20]	@ (8003660 <HAL_DMA_Start_IT+0x648>)
 800364c:	e78b      	b.n	8003566 <HAL_DMA_Start_IT+0x54e>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800364e:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003650:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003652:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003654:	e54b      	b.n	80030ee <HAL_DMA_Start_IT+0xd6>
 8003656:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003658:	e555      	b.n	8003106 <HAL_DMA_Start_IT+0xee>
 800365a:	bf00      	nop
 800365c:	40020000 	.word	0x40020000
 8003660:	40020400 	.word	0x40020400
 8003664:	40020088 	.word	0x40020088
 8003668:	5802541c 	.word	0x5802541c
 800366c:	58025408 	.word	0x58025408
 8003670:	58025480 	.word	0x58025480
 8003674:	58025494 	.word	0x58025494
 8003678:	400200a0 	.word	0x400200a0
 800367c:	400204b8 	.word	0x400204b8

08003680 <HAL_DMA_IRQHandler>:
{
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003682:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003684:	4b94      	ldr	r3, [pc, #592]	@ (80038d8 <HAL_DMA_IRQHandler+0x258>)
{
 8003686:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003688:	6d85      	ldr	r5, [r0, #88]	@ 0x58
{
 800368a:	4607      	mov	r7, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800368c:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0U;
 800368e:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003690:	4b92      	ldr	r3, [pc, #584]	@ (80038dc <HAL_DMA_IRQHandler+0x25c>)
 8003692:	6802      	ldr	r2, [r0, #0]
 8003694:	4892      	ldr	r0, [pc, #584]	@ (80038e0 <HAL_DMA_IRQHandler+0x260>)
  tmpisr_dma  = regs_dma->ISR;
 8003696:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003698:	4282      	cmp	r2, r0
 800369a:	bf18      	it	ne
 800369c:	429a      	cmpne	r2, r3
 800369e:	f100 0018 	add.w	r0, r0, #24
  tmpisr_bdma = regs_bdma->ISR;
 80036a2:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	4282      	cmp	r2, r0
 80036ac:	bf08      	it	eq
 80036ae:	f043 0301 	orreq.w	r3, r3, #1
 80036b2:	3018      	adds	r0, #24
 80036b4:	4282      	cmp	r2, r0
 80036b6:	bf08      	it	eq
 80036b8:	f043 0301 	orreq.w	r3, r3, #1
 80036bc:	3018      	adds	r0, #24
 80036be:	4282      	cmp	r2, r0
 80036c0:	bf08      	it	eq
 80036c2:	f043 0301 	orreq.w	r3, r3, #1
 80036c6:	3018      	adds	r0, #24
 80036c8:	4282      	cmp	r2, r0
 80036ca:	bf08      	it	eq
 80036cc:	f043 0301 	orreq.w	r3, r3, #1
 80036d0:	3018      	adds	r0, #24
 80036d2:	4282      	cmp	r2, r0
 80036d4:	bf08      	it	eq
 80036d6:	f043 0301 	orreq.w	r3, r3, #1
 80036da:	3018      	adds	r0, #24
 80036dc:	4282      	cmp	r2, r0
 80036de:	bf08      	it	eq
 80036e0:	f043 0301 	orreq.w	r3, r3, #1
 80036e4:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80036e8:	4282      	cmp	r2, r0
 80036ea:	bf08      	it	eq
 80036ec:	f043 0301 	orreq.w	r3, r3, #1
 80036f0:	3018      	adds	r0, #24
 80036f2:	4282      	cmp	r2, r0
 80036f4:	bf08      	it	eq
 80036f6:	f043 0301 	orreq.w	r3, r3, #1
 80036fa:	3018      	adds	r0, #24
 80036fc:	4282      	cmp	r2, r0
 80036fe:	bf08      	it	eq
 8003700:	f043 0301 	orreq.w	r3, r3, #1
 8003704:	3018      	adds	r0, #24
 8003706:	4282      	cmp	r2, r0
 8003708:	bf08      	it	eq
 800370a:	f043 0301 	orreq.w	r3, r3, #1
 800370e:	3018      	adds	r0, #24
 8003710:	4282      	cmp	r2, r0
 8003712:	bf08      	it	eq
 8003714:	f043 0301 	orreq.w	r3, r3, #1
 8003718:	3018      	adds	r0, #24
 800371a:	4282      	cmp	r2, r0
 800371c:	bf08      	it	eq
 800371e:	f043 0301 	orreq.w	r3, r3, #1
 8003722:	3018      	adds	r0, #24
 8003724:	4282      	cmp	r2, r0
 8003726:	bf08      	it	eq
 8003728:	f043 0301 	orreq.w	r3, r3, #1
 800372c:	b91b      	cbnz	r3, 8003736 <HAL_DMA_IRQHandler+0xb6>
 800372e:	4b6d      	ldr	r3, [pc, #436]	@ (80038e4 <HAL_DMA_IRQHandler+0x264>)
 8003730:	429a      	cmp	r2, r3
 8003732:	f040 812f 	bne.w	8003994 <HAL_DMA_IRQHandler+0x314>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003738:	2108      	movs	r1, #8
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	4099      	lsls	r1, r3
 8003740:	4221      	tst	r1, r4
 8003742:	d00b      	beq.n	800375c <HAL_DMA_IRQHandler+0xdc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003744:	6810      	ldr	r0, [r2, #0]
 8003746:	0740      	lsls	r0, r0, #29
 8003748:	d508      	bpl.n	800375c <HAL_DMA_IRQHandler+0xdc>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800374a:	6810      	ldr	r0, [r2, #0]
 800374c:	f020 0004 	bic.w	r0, r0, #4
 8003750:	6010      	str	r0, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003752:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003754:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003756:	f041 0101 	orr.w	r1, r1, #1
 800375a:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800375c:	fa24 f103 	lsr.w	r1, r4, r3
 8003760:	07c8      	lsls	r0, r1, #31
 8003762:	d509      	bpl.n	8003778 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003764:	6951      	ldr	r1, [r2, #20]
 8003766:	0609      	lsls	r1, r1, #24
 8003768:	d506      	bpl.n	8003778 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800376a:	2101      	movs	r1, #1
 800376c:	4099      	lsls	r1, r3
 800376e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003770:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003772:	f041 0102 	orr.w	r1, r1, #2
 8003776:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003778:	2104      	movs	r1, #4
 800377a:	4099      	lsls	r1, r3
 800377c:	4221      	tst	r1, r4
 800377e:	d007      	beq.n	8003790 <HAL_DMA_IRQHandler+0x110>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003780:	6810      	ldr	r0, [r2, #0]
 8003782:	0780      	lsls	r0, r0, #30
 8003784:	d504      	bpl.n	8003790 <HAL_DMA_IRQHandler+0x110>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003786:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003788:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800378a:	f041 0104 	orr.w	r1, r1, #4
 800378e:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003790:	2110      	movs	r1, #16
 8003792:	4099      	lsls	r1, r3
 8003794:	4221      	tst	r1, r4
 8003796:	f000 80b0 	beq.w	80038fa <HAL_DMA_IRQHandler+0x27a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800379a:	6810      	ldr	r0, [r2, #0]
 800379c:	0700      	lsls	r0, r0, #28
 800379e:	f140 80ac 	bpl.w	80038fa <HAL_DMA_IRQHandler+0x27a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a2:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037a4:	6811      	ldr	r1, [r2, #0]
 80037a6:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037aa:	6811      	ldr	r1, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037ac:	f040 809e 	bne.w	80038ec <HAL_DMA_IRQHandler+0x26c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037b0:	05c9      	lsls	r1, r1, #23
 80037b2:	d403      	bmi.n	80037bc <HAL_DMA_IRQHandler+0x13c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037b4:	6811      	ldr	r1, [r2, #0]
 80037b6:	f021 0108 	bic.w	r1, r1, #8
 80037ba:	6011      	str	r1, [r2, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80037bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037be:	2900      	cmp	r1, #0
 80037c0:	f000 809b 	beq.w	80038fa <HAL_DMA_IRQHandler+0x27a>
            hdma->XferHalfCpltCallback(hdma);
 80037c4:	4638      	mov	r0, r7
 80037c6:	4788      	blx	r1
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037ca:	2120      	movs	r1, #32
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	4099      	lsls	r1, r3
 80037d2:	4221      	tst	r1, r4
 80037d4:	d053      	beq.n	800387e <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	4840      	ldr	r0, [pc, #256]	@ (80038dc <HAL_DMA_IRQHandler+0x25c>)
 80037da:	4c41      	ldr	r4, [pc, #260]	@ (80038e0 <HAL_DMA_IRQHandler+0x260>)
 80037dc:	42a2      	cmp	r2, r4
 80037de:	bf18      	it	ne
 80037e0:	4282      	cmpne	r2, r0
 80037e2:	f104 0418 	add.w	r4, r4, #24
 80037e6:	bf0c      	ite	eq
 80037e8:	2001      	moveq	r0, #1
 80037ea:	2000      	movne	r0, #0
 80037ec:	42a2      	cmp	r2, r4
 80037ee:	bf08      	it	eq
 80037f0:	f040 0001 	orreq.w	r0, r0, #1
 80037f4:	3418      	adds	r4, #24
 80037f6:	42a2      	cmp	r2, r4
 80037f8:	bf08      	it	eq
 80037fa:	f040 0001 	orreq.w	r0, r0, #1
 80037fe:	3418      	adds	r4, #24
 8003800:	42a2      	cmp	r2, r4
 8003802:	bf08      	it	eq
 8003804:	f040 0001 	orreq.w	r0, r0, #1
 8003808:	3418      	adds	r4, #24
 800380a:	42a2      	cmp	r2, r4
 800380c:	bf08      	it	eq
 800380e:	f040 0001 	orreq.w	r0, r0, #1
 8003812:	3418      	adds	r4, #24
 8003814:	42a2      	cmp	r2, r4
 8003816:	bf08      	it	eq
 8003818:	f040 0001 	orreq.w	r0, r0, #1
 800381c:	3418      	adds	r4, #24
 800381e:	42a2      	cmp	r2, r4
 8003820:	bf08      	it	eq
 8003822:	f040 0001 	orreq.w	r0, r0, #1
 8003826:	f504 7456 	add.w	r4, r4, #856	@ 0x358
 800382a:	42a2      	cmp	r2, r4
 800382c:	bf08      	it	eq
 800382e:	f040 0001 	orreq.w	r0, r0, #1
 8003832:	3418      	adds	r4, #24
 8003834:	42a2      	cmp	r2, r4
 8003836:	bf08      	it	eq
 8003838:	f040 0001 	orreq.w	r0, r0, #1
 800383c:	3418      	adds	r4, #24
 800383e:	42a2      	cmp	r2, r4
 8003840:	bf08      	it	eq
 8003842:	f040 0001 	orreq.w	r0, r0, #1
 8003846:	3418      	adds	r4, #24
 8003848:	42a2      	cmp	r2, r4
 800384a:	bf08      	it	eq
 800384c:	f040 0001 	orreq.w	r0, r0, #1
 8003850:	3418      	adds	r4, #24
 8003852:	42a2      	cmp	r2, r4
 8003854:	bf08      	it	eq
 8003856:	f040 0001 	orreq.w	r0, r0, #1
 800385a:	3418      	adds	r4, #24
 800385c:	42a2      	cmp	r2, r4
 800385e:	bf08      	it	eq
 8003860:	f040 0001 	orreq.w	r0, r0, #1
 8003864:	3418      	adds	r4, #24
 8003866:	42a2      	cmp	r2, r4
 8003868:	bf08      	it	eq
 800386a:	f040 0001 	orreq.w	r0, r0, #1
 800386e:	2800      	cmp	r0, #0
 8003870:	d147      	bne.n	8003902 <HAL_DMA_IRQHandler+0x282>
 8003872:	481c      	ldr	r0, [pc, #112]	@ (80038e4 <HAL_DMA_IRQHandler+0x264>)
 8003874:	4282      	cmp	r2, r0
 8003876:	d044      	beq.n	8003902 <HAL_DMA_IRQHandler+0x282>
 8003878:	6810      	ldr	r0, [r2, #0]
 800387a:	0780      	lsls	r0, r0, #30
 800387c:	d444      	bmi.n	8003908 <HAL_DMA_IRQHandler+0x288>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800387e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003880:	2b00      	cmp	r3, #0
 8003882:	d070      	beq.n	8003966 <HAL_DMA_IRQHandler+0x2e6>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003886:	07dc      	lsls	r4, r3, #31
 8003888:	d51e      	bpl.n	80038c8 <HAL_DMA_IRQHandler+0x248>
        __HAL_DMA_DISABLE(hdma);
 800388a:	683a      	ldr	r2, [r7, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800388c:	2104      	movs	r1, #4
 800388e:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8003892:	4915      	ldr	r1, [pc, #84]	@ (80038e8 <HAL_DMA_IRQHandler+0x268>)
        __HAL_DMA_DISABLE(hdma);
 8003894:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003896:	fba1 6106 	umull	r6, r1, r1, r6
        __HAL_DMA_DISABLE(hdma);
 800389a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800389e:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e002      	b.n	80038aa <HAL_DMA_IRQHandler+0x22a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038a4:	6813      	ldr	r3, [r2, #0]
 80038a6:	07d8      	lsls	r0, r3, #31
 80038a8:	d504      	bpl.n	80038b4 <HAL_DMA_IRQHandler+0x234>
          if (++count > timeout)
 80038aa:	9b01      	ldr	r3, [sp, #4]
 80038ac:	3301      	adds	r3, #1
 80038ae:	428b      	cmp	r3, r1
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	d9f7      	bls.n	80038a4 <HAL_DMA_IRQHandler+0x224>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038b4:	6813      	ldr	r3, [r2, #0]
 80038b6:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80038b8:	bf4c      	ite	mi
 80038ba:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80038bc:	2301      	movpl	r3, #1
 80038be:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80038c2:	2300      	movs	r3, #0
 80038c4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 80038c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04b      	beq.n	8003966 <HAL_DMA_IRQHandler+0x2e6>
          hdma->XferCpltCallback(hdma);
 80038ce:	4638      	mov	r0, r7
}
 80038d0:	b003      	add	sp, #12
 80038d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 80038d6:	4718      	bx	r3
 80038d8:	2400004c 	.word	0x2400004c
 80038dc:	40020010 	.word	0x40020010
 80038e0:	40020028 	.word	0x40020028
 80038e4:	400204b8 	.word	0x400204b8
 80038e8:	1b4e81b5 	.word	0x1b4e81b5
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038ec:	0308      	lsls	r0, r1, #12
 80038ee:	f57f af65 	bpl.w	80037bc <HAL_DMA_IRQHandler+0x13c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80038f4:	2900      	cmp	r1, #0
 80038f6:	f47f af65 	bne.w	80037c4 <HAL_DMA_IRQHandler+0x144>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038fa:	2120      	movs	r1, #32
 80038fc:	4099      	lsls	r1, r3
 80038fe:	420c      	tst	r4, r1
 8003900:	d0bd      	beq.n	800387e <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003902:	6810      	ldr	r0, [r2, #0]
 8003904:	06c4      	lsls	r4, r0, #27
 8003906:	d5ba      	bpl.n	800387e <HAL_DMA_IRQHandler+0x1fe>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003908:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800390a:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 800390e:	2904      	cmp	r1, #4
 8003910:	d00e      	beq.n	8003930 <HAL_DMA_IRQHandler+0x2b0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003912:	6813      	ldr	r3, [r2, #0]
 8003914:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003918:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800391a:	d026      	beq.n	800396a <HAL_DMA_IRQHandler+0x2ea>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800391c:	031d      	lsls	r5, r3, #12
 800391e:	d531      	bpl.n	8003984 <HAL_DMA_IRQHandler+0x304>
          if(hdma->XferCpltCallback != NULL)
 8003920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ab      	beq.n	800387e <HAL_DMA_IRQHandler+0x1fe>
            hdma->XferCpltCallback(hdma);
 8003926:	4638      	mov	r0, r7
 8003928:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800392a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392c:	b1db      	cbz	r3, 8003966 <HAL_DMA_IRQHandler+0x2e6>
 800392e:	e7a9      	b.n	8003884 <HAL_DMA_IRQHandler+0x204>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003930:	6811      	ldr	r1, [r2, #0]
 8003932:	f021 0116 	bic.w	r1, r1, #22
 8003936:	6011      	str	r1, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003938:	6951      	ldr	r1, [r2, #20]
 800393a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800393e:	6151      	str	r1, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003940:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003942:	b319      	cbz	r1, 800398c <HAL_DMA_IRQHandler+0x30c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003944:	6811      	ldr	r1, [r2, #0]
 8003946:	f021 0108 	bic.w	r1, r1, #8
 800394a:	6011      	str	r1, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800394c:	223f      	movs	r2, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 800394e:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
          __HAL_UNLOCK(hdma);
 8003954:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003956:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8003958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 800395a:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800395e:	f887 2034 	strb.w	r2, [r7, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1b3      	bne.n	80038ce <HAL_DMA_IRQHandler+0x24e>
}
 8003966:	b003      	add	sp, #12
 8003968:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800396a:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 800396e:	d1d7      	bne.n	8003920 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003970:	6811      	ldr	r1, [r2, #0]
 8003972:	f021 0110 	bic.w	r1, r1, #16
 8003976:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003978:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800397a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800397e:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8003982:	e7cd      	b.n	8003920 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1CpltCallback != NULL)
 8003984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1cd      	bne.n	8003926 <HAL_DMA_IRQHandler+0x2a6>
 800398a:	e778      	b.n	800387e <HAL_DMA_IRQHandler+0x1fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800398e:	2900      	cmp	r1, #0
 8003990:	d1d8      	bne.n	8003944 <HAL_DMA_IRQHandler+0x2c4>
 8003992:	e7db      	b.n	800394c <HAL_DMA_IRQHandler+0x2cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003994:	4b40      	ldr	r3, [pc, #256]	@ (8003a98 <HAL_DMA_IRQHandler+0x418>)
 8003996:	4841      	ldr	r0, [pc, #260]	@ (8003a9c <HAL_DMA_IRQHandler+0x41c>)
 8003998:	4282      	cmp	r2, r0
 800399a:	bf18      	it	ne
 800399c:	429a      	cmpne	r2, r3
 800399e:	f100 0014 	add.w	r0, r0, #20
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	4282      	cmp	r2, r0
 80039aa:	bf08      	it	eq
 80039ac:	f043 0301 	orreq.w	r3, r3, #1
 80039b0:	3014      	adds	r0, #20
 80039b2:	4282      	cmp	r2, r0
 80039b4:	bf08      	it	eq
 80039b6:	f043 0301 	orreq.w	r3, r3, #1
 80039ba:	3014      	adds	r0, #20
 80039bc:	4282      	cmp	r2, r0
 80039be:	bf08      	it	eq
 80039c0:	f043 0301 	orreq.w	r3, r3, #1
 80039c4:	3014      	adds	r0, #20
 80039c6:	4282      	cmp	r2, r0
 80039c8:	bf08      	it	eq
 80039ca:	f043 0301 	orreq.w	r3, r3, #1
 80039ce:	3014      	adds	r0, #20
 80039d0:	4282      	cmp	r2, r0
 80039d2:	bf08      	it	eq
 80039d4:	f043 0301 	orreq.w	r3, r3, #1
 80039d8:	b913      	cbnz	r3, 80039e0 <HAL_DMA_IRQHandler+0x360>
 80039da:	4b31      	ldr	r3, [pc, #196]	@ (8003aa0 <HAL_DMA_IRQHandler+0x420>)
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1c2      	bne.n	8003966 <HAL_DMA_IRQHandler+0x2e6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80039e0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80039e2:	2404      	movs	r4, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80039e4:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80039e6:	f000 001f 	and.w	r0, r0, #31
 80039ea:	4084      	lsls	r4, r0
 80039ec:	420c      	tst	r4, r1
 80039ee:	d00b      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x388>
 80039f0:	075e      	lsls	r6, r3, #29
 80039f2:	d509      	bpl.n	8003a08 <HAL_DMA_IRQHandler+0x388>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f4:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039f6:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039f8:	d532      	bpl.n	8003a60 <HAL_DMA_IRQHandler+0x3e0>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039fa:	03da      	lsls	r2, r3, #15
 80039fc:	d436      	bmi.n	8003a6c <HAL_DMA_IRQHandler+0x3ec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f47f af64 	bne.w	80038ce <HAL_DMA_IRQHandler+0x24e>
 8003a06:	e7ae      	b.n	8003966 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a08:	2402      	movs	r4, #2
 8003a0a:	4084      	lsls	r4, r0
 8003a0c:	420c      	tst	r4, r1
 8003a0e:	d00b      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x3a8>
 8003a10:	079e      	lsls	r6, r3, #30
 8003a12:	d509      	bpl.n	8003a28 <HAL_DMA_IRQHandler+0x3a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a14:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a16:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a18:	d52d      	bpl.n	8003a76 <HAL_DMA_IRQHandler+0x3f6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a1a:	03da      	lsls	r2, r3, #15
 8003a1c:	d437      	bmi.n	8003a8e <HAL_DMA_IRQHandler+0x40e>
          if(hdma->XferM1CpltCallback != NULL)
 8003a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f47f af54 	bne.w	80038ce <HAL_DMA_IRQHandler+0x24e>
 8003a26:	e79e      	b.n	8003966 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a28:	2408      	movs	r4, #8
 8003a2a:	4084      	lsls	r4, r0
 8003a2c:	420c      	tst	r4, r1
 8003a2e:	d09a      	beq.n	8003966 <HAL_DMA_IRQHandler+0x2e6>
 8003a30:	071b      	lsls	r3, r3, #28
 8003a32:	d598      	bpl.n	8003966 <HAL_DMA_IRQHandler+0x2e6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a34:	6813      	ldr	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 8003a36:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a38:	f023 030e 	bic.w	r3, r3, #14
 8003a3c:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a3e:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8003a40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a42:	fa03 f000 	lsl.w	r0, r3, r0
 8003a46:	6068      	str	r0, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a48:	657b      	str	r3, [r7, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 8003a4a:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003a4e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d087      	beq.n	8003966 <HAL_DMA_IRQHandler+0x2e6>
        hdma->XferErrorCallback(hdma);
 8003a56:	4638      	mov	r0, r7
}
 8003a58:	b003      	add	sp, #12
 8003a5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8003a5e:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a60:	069b      	lsls	r3, r3, #26
 8003a62:	d403      	bmi.n	8003a6c <HAL_DMA_IRQHandler+0x3ec>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a64:	6813      	ldr	r3, [r2, #0]
 8003a66:	f023 0304 	bic.w	r3, r3, #4
 8003a6a:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f47f af2d 	bne.w	80038ce <HAL_DMA_IRQHandler+0x24e>
 8003a74:	e777      	b.n	8003966 <HAL_DMA_IRQHandler+0x2e6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a76:	f013 0320 	ands.w	r3, r3, #32
 8003a7a:	d108      	bne.n	8003a8e <HAL_DMA_IRQHandler+0x40e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a7c:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a80:	f021 010a 	bic.w	r1, r1, #10
 8003a84:	6011      	str	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003a86:	f887 0035 	strb.w	r0, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003a8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8003a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f47f af1c 	bne.w	80038ce <HAL_DMA_IRQHandler+0x24e>
 8003a96:	e766      	b.n	8003966 <HAL_DMA_IRQHandler+0x2e6>
 8003a98:	58025408 	.word	0x58025408
 8003a9c:	5802541c 	.word	0x5802541c
 8003aa0:	58025494 	.word	0x58025494

08003aa4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003aa4:	680b      	ldr	r3, [r1, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 81dc 	beq.w	8003e64 <HAL_GPIO_Init+0x3c0>
 8003aac:	4ab4      	ldr	r2, [pc, #720]	@ (8003d80 <HAL_GPIO_Init+0x2dc>)
 8003aae:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 8003ab0:	f04f 0200 	mov.w	r2, #0
{
 8003ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ab8:	f04f 0b01 	mov.w	fp, #1
{
 8003abc:	b085      	sub	sp, #20
 8003abe:	f000 8105 	beq.w	8003ccc <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ac2:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ac6:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ac8:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 8003acc:	9b00      	ldr	r3, [sp, #0]
 8003ace:	ea1c 0a03 	ands.w	sl, ip, r3
 8003ad2:	f000 814b 	beq.w	8003d6c <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ad6:	684d      	ldr	r5, [r1, #4]
 8003ad8:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ada:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003adc:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ae0:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ae4:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ae8:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aea:	f1b8 0f01 	cmp.w	r8, #1
 8003aee:	f240 815d 	bls.w	8003dac <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af2:	2f03      	cmp	r7, #3
 8003af4:	f040 81cf 	bne.w	8003e96 <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003af8:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8003afc:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003afe:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b02:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b06:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 8003b0a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b0c:	f000 812e 	beq.w	8003d6c <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b10:	4e9c      	ldr	r6, [pc, #624]	@ (8003d84 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b12:	f002 0703 	and.w	r7, r2, #3
 8003b16:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b18:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b1c:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1e:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b22:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b26:	4b98      	ldr	r3, [pc, #608]	@ (8003d88 <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b28:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8003b2c:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 8003b30:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b34:	4298      	cmp	r0, r3
 8003b36:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3a:	f004 0402 	and.w	r4, r4, #2
 8003b3e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003b42:	9403      	str	r4, [sp, #12]
 8003b44:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003b46:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b48:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b4c:	f000 8178 	beq.w	8003e40 <HAL_GPIO_Init+0x39c>
 8003b50:	4b8e      	ldr	r3, [pc, #568]	@ (8003d8c <HAL_GPIO_Init+0x2e8>)
 8003b52:	4298      	cmp	r0, r3
 8003b54:	f000 80de 	beq.w	8003d14 <HAL_GPIO_Init+0x270>
 8003b58:	f8df c234 	ldr.w	ip, [pc, #564]	@ 8003d90 <HAL_GPIO_Init+0x2ec>
 8003b5c:	4560      	cmp	r0, ip
 8003b5e:	f000 817b 	beq.w	8003e58 <HAL_GPIO_Init+0x3b4>
 8003b62:	f8df c230 	ldr.w	ip, [pc, #560]	@ 8003d94 <HAL_GPIO_Init+0x2f0>
 8003b66:	4560      	cmp	r0, ip
 8003b68:	f000 817d 	beq.w	8003e66 <HAL_GPIO_Init+0x3c2>
 8003b6c:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8003d98 <HAL_GPIO_Init+0x2f4>
 8003b70:	4560      	cmp	r0, ip
 8003b72:	f000 816b 	beq.w	8003e4c <HAL_GPIO_Init+0x3a8>
 8003b76:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8003d9c <HAL_GPIO_Init+0x2f8>
 8003b7a:	4560      	cmp	r0, ip
 8003b7c:	f000 8179 	beq.w	8003e72 <HAL_GPIO_Init+0x3ce>
 8003b80:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 8003da0 <HAL_GPIO_Init+0x2fc>
 8003b84:	4560      	cmp	r0, ip
 8003b86:	f000 817a 	beq.w	8003e7e <HAL_GPIO_Init+0x3da>
 8003b8a:	f8df c218 	ldr.w	ip, [pc, #536]	@ 8003da4 <HAL_GPIO_Init+0x300>
 8003b8e:	4560      	cmp	r0, ip
 8003b90:	f000 817b 	beq.w	8003e8a <HAL_GPIO_Init+0x3e6>
 8003b94:	f8df c210 	ldr.w	ip, [pc, #528]	@ 8003da8 <HAL_GPIO_Init+0x304>
 8003b98:	4560      	cmp	r0, ip
 8003b9a:	bf0c      	ite	eq
 8003b9c:	f04f 0c09 	moveq.w	ip, #9
 8003ba0:	f04f 0c0a 	movne.w	ip, #10
 8003ba4:	fa0c f707 	lsl.w	r7, ip, r7
 8003ba8:	433c      	orrs	r4, r7
 8003baa:	e0b8      	b.n	8003d1e <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 8003bac:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb0:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb2:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bb4:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb8:	fa06 f807 	lsl.w	r8, r6, r7
 8003bbc:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003bc0:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bc4:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003bc8:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bcc:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bd0:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bd4:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 8003bd8:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 8003bdc:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003be0:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003be2:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003be6:	fa06 fe07 	lsl.w	lr, r6, r7
 8003bea:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 8003bee:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf2:	d117      	bne.n	8003c24 <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bf4:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bf8:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003bfa:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bfe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003c02:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c06:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8003c0a:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c0e:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c10:	260f      	movs	r6, #15
 8003c12:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c16:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c18:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c1c:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003c20:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c24:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8003c26:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c28:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c2c:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c30:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8003c34:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c36:	d045      	beq.n	8003cc4 <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c38:	4f52      	ldr	r7, [pc, #328]	@ (8003d84 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c3a:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3c:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8003c40:	f044 0402 	orr.w	r4, r4, #2
 8003c44:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8003c48:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8003c4c:	f022 0703 	bic.w	r7, r2, #3
 8003c50:	f004 0402 	and.w	r4, r4, #2
 8003c54:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 8003c58:	9403      	str	r4, [sp, #12]
 8003c5a:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8003c5e:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c60:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003c64:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c68:	00a4      	lsls	r4, r4, #2
 8003c6a:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c6e:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c70:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c74:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 8003c76:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 8003c7a:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 8003c7e:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c80:	f100 80d2 	bmi.w	8003e28 <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 8003c84:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003c86:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8003c8a:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 8003c8c:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c8e:	02ae      	lsls	r6, r5, #10
 8003c90:	f100 80d3 	bmi.w	8003e3a <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 8003c94:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003c96:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8003c9a:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003c9c:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ca0:	03ae      	lsls	r6, r5, #14
 8003ca2:	f100 80c7 	bmi.w	8003e34 <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 8003ca6:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ca8:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cac:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003cae:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003cb2:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cb6:	f100 80ba 	bmi.w	8003e2e <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 8003cba:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003cbc:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8003cc0:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 8003cc4:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003cc6:	fa33 f402 	lsrs.w	r4, r3, r2
 8003cca:	d055      	beq.n	8003d78 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ccc:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 8003cd0:	ea13 0c0e 	ands.w	ip, r3, lr
 8003cd4:	d0f6      	beq.n	8003cc4 <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cd6:	684d      	ldr	r5, [r1, #4]
 8003cd8:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cda:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cdc:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ce0:	fa06 f807 	lsl.w	r8, r6, r7
 8003ce4:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce8:	f104 38ff 	add.w	r8, r4, #4294967295
 8003cec:	f1b8 0f01 	cmp.w	r8, #1
 8003cf0:	f67f af5c 	bls.w	8003bac <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf4:	2c03      	cmp	r4, #3
 8003cf6:	d095      	beq.n	8003c24 <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 8003cf8:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8003d80 <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cfc:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 8003cfe:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d02:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d06:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d0a:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 8003d0e:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d12:	e787      	b.n	8003c24 <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d14:	f04f 0c02 	mov.w	ip, #2
 8003d18:	fa0c f707 	lsl.w	r7, ip, r7
 8003d1c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d1e:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d20:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8003d22:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8003d26:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 8003d2a:	bf4c      	ite	mi
 8003d2c:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 8003d30:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d32:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 8003d34:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 8003d38:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8003d3c:	bf54      	ite	pl
 8003d3e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003d40:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d44:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8003d46:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003d4a:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8003d4e:	bf54      	ite	pl
 8003d50:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003d52:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d56:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003d58:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003d5c:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8003d60:	bf54      	ite	pl
 8003d62:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003d64:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 8003d68:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 8003d6c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d6e:	9b00      	ldr	r3, [sp, #0]
 8003d70:	fa33 f402 	lsrs.w	r4, r3, r2
 8003d74:	f47f aea8 	bne.w	8003ac8 <HAL_GPIO_Init+0x24>
  }
}
 8003d78:	b005      	add	sp, #20
 8003d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d7e:	bf00      	nop
 8003d80:	58020000 	.word	0x58020000
 8003d84:	58024400 	.word	0x58024400
 8003d88:	58020400 	.word	0x58020400
 8003d8c:	58020800 	.word	0x58020800
 8003d90:	58020c00 	.word	0x58020c00
 8003d94:	58021000 	.word	0x58021000
 8003d98:	58021400 	.word	0x58021400
 8003d9c:	58021800 	.word	0x58021800
 8003da0:	58021c00 	.word	0x58021c00
 8003da4:	58022000 	.word	0x58022000
 8003da8:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 8003dac:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db0:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003db2:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003db4:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003db8:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dbc:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dbe:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003dc2:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dc6:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003dca:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dce:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dd2:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd6:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8003dda:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dde:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 8003de2:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003de6:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dea:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003dee:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df2:	f47f ae81 	bne.w	8003af8 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003df6:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dfa:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003dfc:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e00:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003e04:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e08:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8003e0c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e10:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e12:	230f      	movs	r3, #15
 8003e14:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e18:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e1a:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e1e:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003e22:	f8c8 c020 	str.w	ip, [r8, #32]
 8003e26:	e667      	b.n	8003af8 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8003e28:	ea44 040c 	orr.w	r4, r4, ip
 8003e2c:	e72b      	b.n	8003c86 <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 8003e2e:	ea44 040c 	orr.w	r4, r4, ip
 8003e32:	e743      	b.n	8003cbc <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 8003e34:	ea4c 0404 	orr.w	r4, ip, r4
 8003e38:	e736      	b.n	8003ca8 <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 8003e3a:	ea44 040c 	orr.w	r4, r4, ip
 8003e3e:	e72a      	b.n	8003c96 <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e40:	f04f 0c01 	mov.w	ip, #1
 8003e44:	fa0c f707 	lsl.w	r7, ip, r7
 8003e48:	433c      	orrs	r4, r7
 8003e4a:	e768      	b.n	8003d1e <HAL_GPIO_Init+0x27a>
 8003e4c:	f04f 0c05 	mov.w	ip, #5
 8003e50:	fa0c f707 	lsl.w	r7, ip, r7
 8003e54:	433c      	orrs	r4, r7
 8003e56:	e762      	b.n	8003d1e <HAL_GPIO_Init+0x27a>
 8003e58:	f04f 0c03 	mov.w	ip, #3
 8003e5c:	fa0c f707 	lsl.w	r7, ip, r7
 8003e60:	433c      	orrs	r4, r7
 8003e62:	e75c      	b.n	8003d1e <HAL_GPIO_Init+0x27a>
 8003e64:	4770      	bx	lr
 8003e66:	f04f 0c04 	mov.w	ip, #4
 8003e6a:	fa0c f707 	lsl.w	r7, ip, r7
 8003e6e:	433c      	orrs	r4, r7
 8003e70:	e755      	b.n	8003d1e <HAL_GPIO_Init+0x27a>
 8003e72:	f04f 0c06 	mov.w	ip, #6
 8003e76:	fa0c f707 	lsl.w	r7, ip, r7
 8003e7a:	433c      	orrs	r4, r7
 8003e7c:	e74f      	b.n	8003d1e <HAL_GPIO_Init+0x27a>
 8003e7e:	f04f 0c07 	mov.w	ip, #7
 8003e82:	fa0c f707 	lsl.w	r7, ip, r7
 8003e86:	433c      	orrs	r4, r7
 8003e88:	e749      	b.n	8003d1e <HAL_GPIO_Init+0x27a>
 8003e8a:	f04f 0c08 	mov.w	ip, #8
 8003e8e:	fa0c f707 	lsl.w	r7, ip, r7
 8003e92:	433c      	orrs	r4, r7
 8003e94:	e743      	b.n	8003d1e <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 8003e96:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e9a:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e9c:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ea0:	fa03 fc04 	lsl.w	ip, r3, r4
 8003ea4:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003ea8:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eac:	e624      	b.n	8003af8 <HAL_GPIO_Init+0x54>
 8003eae:	bf00      	nop

08003eb0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eb0:	b902      	cbnz	r2, 8003eb4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003eb2:	0409      	lsls	r1, r1, #16
 8003eb4:	6181      	str	r1, [r0, #24]
  }
}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003eb8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003eba:	4c10      	ldr	r4, [pc, #64]	@ (8003efc <HAL_PWREx_ConfigSupply+0x44>)
 8003ebc:	68e3      	ldr	r3, [r4, #12]
 8003ebe:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ec2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003ec4:	d105      	bne.n	8003ed2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	1a18      	subs	r0, r3, r0
 8003ecc:	bf18      	it	ne
 8003ece:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003ed0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	4303      	orrs	r3, r0
 8003ed8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8003eda:	f7fd fb77 	bl	80015cc <HAL_GetTick>
 8003ede:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ee0:	e005      	b.n	8003eee <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ee2:	f7fd fb73 	bl	80015cc <HAL_GetTick>
 8003ee6:	1b40      	subs	r0, r0, r5
 8003ee8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003eec:	d804      	bhi.n	8003ef8 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003eee:	6863      	ldr	r3, [r4, #4]
 8003ef0:	049b      	lsls	r3, r3, #18
 8003ef2:	d5f6      	bpl.n	8003ee2 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8003ef4:	2000      	movs	r0, #0
}
 8003ef6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003ef8:	2001      	movs	r0, #1
}
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	58024800 	.word	0x58024800

08003f00 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f00:	4b33      	ldr	r3, [pc, #204]	@ (8003fd0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8003f02:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f04:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f06:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f08:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8003f0a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f10:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8003f14:	d036      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f16:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f1a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f1e:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f22:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f26:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 8003f2a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f30:	ee06 2a90 	vmov	s13, r2
 8003f34:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8003f38:	d002      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8003f3a:	2902      	cmp	r1, #2
 8003f3c:	d042      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8003f3e:	b319      	cbz	r1, 8003f88 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f40:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8003fd4 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8003f44:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f5a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f62:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003f66:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003f6e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f70:	ee07 3a10 	vmov	s14, r3
 8003f74:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003f78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f7c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003f80:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003f84:	bc30      	pop	{r4, r5}
 8003f86:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	0692      	lsls	r2, r2, #26
 8003f8c:	d51d      	bpl.n	8003fca <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f8e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f94:	4a10      	ldr	r2, [pc, #64]	@ (8003fd8 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f98:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fa0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fa2:	ee06 3a10 	vmov	s12, r3
 8003fa6:	ee05 2a90 	vmov	s11, r2
 8003faa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003fae:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003fb2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003fb6:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8003fba:	ee36 7a26 	vadd.f32	s14, s12, s13
 8003fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fc2:	e7d0      	b.n	8003f66 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fc4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003fdc <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8003fc8:	e7bc      	b.n	8003f44 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fca:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003fe0 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8003fce:	e7b9      	b.n	8003f44 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003fd0:	58024400 	.word	0x58024400
 8003fd4:	4a742400 	.word	0x4a742400
 8003fd8:	03d09000 	.word	0x03d09000
 8003fdc:	4bbebc20 	.word	0x4bbebc20
 8003fe0:	4c742400 	.word	0x4c742400

08003fe4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	f000 82e7 	beq.w	80045b8 <HAL_RCC_OscConfig+0x5d4>
{
 8003fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fec:	6803      	ldr	r3, [r0, #0]
 8003fee:	4604      	mov	r4, r0
 8003ff0:	07d9      	lsls	r1, r3, #31
 8003ff2:	d52e      	bpl.n	8004052 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ff4:	4997      	ldr	r1, [pc, #604]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8003ff6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ff8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ffa:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ffe:	2a10      	cmp	r2, #16
 8004000:	f000 80ee 	beq.w	80041e0 <HAL_RCC_OscConfig+0x1fc>
 8004004:	2a18      	cmp	r2, #24
 8004006:	f000 80e6 	beq.w	80041d6 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400a:	6863      	ldr	r3, [r4, #4]
 800400c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004010:	f000 8111 	beq.w	8004236 <HAL_RCC_OscConfig+0x252>
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8167 	beq.w	80042e8 <HAL_RCC_OscConfig+0x304>
 800401a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800401e:	4b8d      	ldr	r3, [pc, #564]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f000 8288 	beq.w	8004536 <HAL_RCC_OscConfig+0x552>
 8004026:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004032:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004034:	f7fd faca 	bl	80015cc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004038:	4e86      	ldr	r6, [pc, #536]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800403a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800403c:	e005      	b.n	800404a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800403e:	f7fd fac5 	bl	80015cc <HAL_GetTick>
 8004042:	1b40      	subs	r0, r0, r5
 8004044:	2864      	cmp	r0, #100	@ 0x64
 8004046:	f200 814d 	bhi.w	80042e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800404a:	6833      	ldr	r3, [r6, #0]
 800404c:	039b      	lsls	r3, r3, #14
 800404e:	d5f6      	bpl.n	800403e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	079d      	lsls	r5, r3, #30
 8004054:	d470      	bmi.n	8004138 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004056:	06d9      	lsls	r1, r3, #27
 8004058:	d533      	bpl.n	80040c2 <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800405a:	4a7e      	ldr	r2, [pc, #504]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800405c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800405e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004060:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004064:	2b08      	cmp	r3, #8
 8004066:	f000 80cb 	beq.w	8004200 <HAL_RCC_OscConfig+0x21c>
 800406a:	2b18      	cmp	r3, #24
 800406c:	f000 80c3 	beq.w	80041f6 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004070:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8004072:	4d78      	ldr	r5, [pc, #480]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 816f 	beq.w	8004358 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 800407a:	682b      	ldr	r3, [r5, #0]
 800407c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004080:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004082:	f7fd faa3 	bl	80015cc <HAL_GetTick>
 8004086:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004088:	e005      	b.n	8004096 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800408a:	f7fd fa9f 	bl	80015cc <HAL_GetTick>
 800408e:	1b80      	subs	r0, r0, r6
 8004090:	2802      	cmp	r0, #2
 8004092:	f200 8127 	bhi.w	80042e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004096:	682b      	ldr	r3, [r5, #0]
 8004098:	05db      	lsls	r3, r3, #23
 800409a:	d5f6      	bpl.n	800408a <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800409c:	f7fd fa9c 	bl	80015d8 <HAL_GetREVID>
 80040a0:	f241 0303 	movw	r3, #4099	@ 0x1003
 80040a4:	4298      	cmp	r0, r3
 80040a6:	f200 8267 	bhi.w	8004578 <HAL_RCC_OscConfig+0x594>
 80040aa:	6a22      	ldr	r2, [r4, #32]
 80040ac:	686b      	ldr	r3, [r5, #4]
 80040ae:	2a20      	cmp	r2, #32
 80040b0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80040b4:	bf0c      	ite	eq
 80040b6:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 80040ba:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80040be:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	071d      	lsls	r5, r3, #28
 80040c4:	d516      	bpl.n	80040f4 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040c6:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80040c8:	4d62      	ldr	r5, [pc, #392]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8122 	beq.w	8004314 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 80040d0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80040d8:	f7fd fa78 	bl	80015cc <HAL_GetTick>
 80040dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040de:	e005      	b.n	80040ec <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e0:	f7fd fa74 	bl	80015cc <HAL_GetTick>
 80040e4:	1b80      	subs	r0, r0, r6
 80040e6:	2802      	cmp	r0, #2
 80040e8:	f200 80fc 	bhi.w	80042e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040ec:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80040ee:	0798      	lsls	r0, r3, #30
 80040f0:	d5f6      	bpl.n	80040e0 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	069a      	lsls	r2, r3, #26
 80040f6:	d516      	bpl.n	8004126 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80040f8:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80040fa:	4d56      	ldr	r5, [pc, #344]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 811a 	beq.w	8004336 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 8004102:	682b      	ldr	r3, [r5, #0]
 8004104:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004108:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800410a:	f7fd fa5f 	bl	80015cc <HAL_GetTick>
 800410e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004110:	e005      	b.n	800411e <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004112:	f7fd fa5b 	bl	80015cc <HAL_GetTick>
 8004116:	1b80      	subs	r0, r0, r6
 8004118:	2802      	cmp	r0, #2
 800411a:	f200 80e3 	bhi.w	80042e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800411e:	682b      	ldr	r3, [r5, #0]
 8004120:	049f      	lsls	r7, r3, #18
 8004122:	d5f6      	bpl.n	8004112 <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	0759      	lsls	r1, r3, #29
 8004128:	f100 808b 	bmi.w	8004242 <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800412c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800412e:	2b00      	cmp	r3, #0
 8004130:	f040 80bf 	bne.w	80042b2 <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8004134:	2000      	movs	r0, #0
}
 8004136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004138:	4a46      	ldr	r2, [pc, #280]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 800413a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800413c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800413e:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8004142:	d12d      	bne.n	80041a0 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004144:	4b43      	ldr	r3, [pc, #268]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004146:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	0759      	lsls	r1, r3, #29
 800414c:	d501      	bpl.n	8004152 <HAL_RCC_OscConfig+0x16e>
 800414e:	2a00      	cmp	r2, #0
 8004150:	d04f      	beq.n	80041f2 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004152:	4d40      	ldr	r5, [pc, #256]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	f023 0319 	bic.w	r3, r3, #25
 800415a:	4313      	orrs	r3, r2
 800415c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800415e:	f7fd fa35 	bl	80015cc <HAL_GetTick>
 8004162:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004164:	e005      	b.n	8004172 <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004166:	f7fd fa31 	bl	80015cc <HAL_GetTick>
 800416a:	1b80      	subs	r0, r0, r6
 800416c:	2802      	cmp	r0, #2
 800416e:	f200 80b9 	bhi.w	80042e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004172:	682b      	ldr	r3, [r5, #0]
 8004174:	075b      	lsls	r3, r3, #29
 8004176:	d5f6      	bpl.n	8004166 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004178:	f7fd fa2e 	bl	80015d8 <HAL_GetREVID>
 800417c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004180:	4298      	cmp	r0, r3
 8004182:	f200 8110 	bhi.w	80043a6 <HAL_RCC_OscConfig+0x3c2>
 8004186:	6922      	ldr	r2, [r4, #16]
 8004188:	686b      	ldr	r3, [r5, #4]
 800418a:	2a40      	cmp	r2, #64	@ 0x40
 800418c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004190:	bf0c      	ite	eq
 8004192:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8004196:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800419a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	e75a      	b.n	8004056 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041a0:	2b18      	cmp	r3, #24
 80041a2:	f000 80fc 	beq.w	800439e <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041a6:	4d2b      	ldr	r5, [pc, #172]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041a8:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041aa:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041ac:	2a00      	cmp	r2, #0
 80041ae:	f000 80e5 	beq.w	800437c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041b2:	f023 0319 	bic.w	r3, r3, #25
 80041b6:	4313      	orrs	r3, r2
 80041b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80041ba:	f7fd fa07 	bl	80015cc <HAL_GetTick>
 80041be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041c0:	e005      	b.n	80041ce <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fd fa03 	bl	80015cc <HAL_GetTick>
 80041c6:	1b80      	subs	r0, r0, r6
 80041c8:	2802      	cmp	r0, #2
 80041ca:	f200 808b 	bhi.w	80042e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041ce:	682b      	ldr	r3, [r5, #0]
 80041d0:	075f      	lsls	r7, r3, #29
 80041d2:	d5f6      	bpl.n	80041c2 <HAL_RCC_OscConfig+0x1de>
 80041d4:	e7d0      	b.n	8004178 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041d6:	f001 0103 	and.w	r1, r1, #3
 80041da:	2902      	cmp	r1, #2
 80041dc:	f47f af15 	bne.w	800400a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	0392      	lsls	r2, r2, #14
 80041e6:	f57f af34 	bpl.w	8004052 <HAL_RCC_OscConfig+0x6e>
 80041ea:	6862      	ldr	r2, [r4, #4]
 80041ec:	2a00      	cmp	r2, #0
 80041ee:	f47f af30 	bne.w	8004052 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 80041f2:	2001      	movs	r0, #1
}
 80041f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041f6:	f002 0203 	and.w	r2, r2, #3
 80041fa:	2a01      	cmp	r2, #1
 80041fc:	f47f af38 	bne.w	8004070 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004200:	4b14      	ldr	r3, [pc, #80]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	05da      	lsls	r2, r3, #23
 8004206:	d502      	bpl.n	800420e <HAL_RCC_OscConfig+0x22a>
 8004208:	69e3      	ldr	r3, [r4, #28]
 800420a:	2b80      	cmp	r3, #128	@ 0x80
 800420c:	d1f1      	bne.n	80041f2 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800420e:	f7fd f9e3 	bl	80015d8 <HAL_GetREVID>
 8004212:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004216:	4298      	cmp	r0, r3
 8004218:	f200 80ce 	bhi.w	80043b8 <HAL_RCC_OscConfig+0x3d4>
 800421c:	6a22      	ldr	r2, [r4, #32]
 800421e:	2a20      	cmp	r2, #32
 8004220:	f000 81b9 	beq.w	8004596 <HAL_RCC_OscConfig+0x5b2>
 8004224:	490b      	ldr	r1, [pc, #44]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004226:	684b      	ldr	r3, [r1, #4]
 8004228:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800422c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004230:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	e745      	b.n	80040c2 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004236:	4a07      	ldr	r2, [pc, #28]	@ (8004254 <HAL_RCC_OscConfig+0x270>)
 8004238:	6813      	ldr	r3, [r2, #0]
 800423a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004240:	e6f8      	b.n	8004034 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8004242:	4d05      	ldr	r5, [pc, #20]	@ (8004258 <HAL_RCC_OscConfig+0x274>)
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800424a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800424c:	f7fd f9be 	bl	80015cc <HAL_GetTick>
 8004250:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x282>
 8004254:	58024400 	.word	0x58024400
 8004258:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425c:	f7fd f9b6 	bl	80015cc <HAL_GetTick>
 8004260:	1b80      	subs	r0, r0, r6
 8004262:	2864      	cmp	r0, #100	@ 0x64
 8004264:	d83e      	bhi.n	80042e4 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	05da      	lsls	r2, r3, #23
 800426a:	d5f7      	bpl.n	800425c <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426c:	68a3      	ldr	r3, [r4, #8]
 800426e:	2b01      	cmp	r3, #1
 8004270:	f000 818b 	beq.w	800458a <HAL_RCC_OscConfig+0x5a6>
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8166 	beq.w	8004546 <HAL_RCC_OscConfig+0x562>
 800427a:	2b05      	cmp	r3, #5
 800427c:	4b85      	ldr	r3, [pc, #532]	@ (8004494 <HAL_RCC_OscConfig+0x4b0>)
 800427e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004280:	f000 8192 	beq.w	80045a8 <HAL_RCC_OscConfig+0x5c4>
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	671a      	str	r2, [r3, #112]	@ 0x70
 800428a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800428c:	f022 0204 	bic.w	r2, r2, #4
 8004290:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004292:	f7fd f99b 	bl	80015cc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004296:	4e7f      	ldr	r6, [pc, #508]	@ (8004494 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800429c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800429e:	e004      	b.n	80042aa <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a0:	f7fd f994 	bl	80015cc <HAL_GetTick>
 80042a4:	1b40      	subs	r0, r0, r5
 80042a6:	42b8      	cmp	r0, r7
 80042a8:	d81c      	bhi.n	80042e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042aa:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80042ac:	079b      	lsls	r3, r3, #30
 80042ae:	d5f7      	bpl.n	80042a0 <HAL_RCC_OscConfig+0x2bc>
 80042b0:	e73c      	b.n	800412c <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80042b2:	4d78      	ldr	r5, [pc, #480]	@ (8004494 <HAL_RCC_OscConfig+0x4b0>)
 80042b4:	692a      	ldr	r2, [r5, #16]
 80042b6:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80042ba:	2a18      	cmp	r2, #24
 80042bc:	f000 80ee 	beq.w	800449c <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c0:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80042c2:	682b      	ldr	r3, [r5, #0]
 80042c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042c8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ca:	d07f      	beq.n	80043cc <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 80042cc:	f7fd f97e 	bl	80015cc <HAL_GetTick>
 80042d0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042d2:	682b      	ldr	r3, [r5, #0]
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	f57f af2d 	bpl.w	8004134 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042da:	f7fd f977 	bl	80015cc <HAL_GetTick>
 80042de:	1b00      	subs	r0, r0, r4
 80042e0:	2802      	cmp	r0, #2
 80042e2:	d9f6      	bls.n	80042d2 <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 80042e4:	2003      	movs	r0, #3
}
 80042e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e8:	4d6a      	ldr	r5, [pc, #424]	@ (8004494 <HAL_RCC_OscConfig+0x4b0>)
 80042ea:	682b      	ldr	r3, [r5, #0]
 80042ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f0:	602b      	str	r3, [r5, #0]
 80042f2:	682b      	ldr	r3, [r5, #0]
 80042f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80042fa:	f7fd f967 	bl	80015cc <HAL_GetTick>
 80042fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004300:	e004      	b.n	800430c <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004302:	f7fd f963 	bl	80015cc <HAL_GetTick>
 8004306:	1b80      	subs	r0, r0, r6
 8004308:	2864      	cmp	r0, #100	@ 0x64
 800430a:	d8eb      	bhi.n	80042e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	039f      	lsls	r7, r3, #14
 8004310:	d4f7      	bmi.n	8004302 <HAL_RCC_OscConfig+0x31e>
 8004312:	e69d      	b.n	8004050 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004314:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800431c:	f7fd f956 	bl	80015cc <HAL_GetTick>
 8004320:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004322:	e004      	b.n	800432e <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004324:	f7fd f952 	bl	80015cc <HAL_GetTick>
 8004328:	1b80      	subs	r0, r0, r6
 800432a:	2802      	cmp	r0, #2
 800432c:	d8da      	bhi.n	80042e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800432e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004330:	0799      	lsls	r1, r3, #30
 8004332:	d4f7      	bmi.n	8004324 <HAL_RCC_OscConfig+0x340>
 8004334:	e6dd      	b.n	80040f2 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8004336:	682b      	ldr	r3, [r5, #0]
 8004338:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800433c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800433e:	f7fd f945 	bl	80015cc <HAL_GetTick>
 8004342:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004344:	e004      	b.n	8004350 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004346:	f7fd f941 	bl	80015cc <HAL_GetTick>
 800434a:	1b80      	subs	r0, r0, r6
 800434c:	2802      	cmp	r0, #2
 800434e:	d8c9      	bhi.n	80042e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	0498      	lsls	r0, r3, #18
 8004354:	d4f7      	bmi.n	8004346 <HAL_RCC_OscConfig+0x362>
 8004356:	e6e5      	b.n	8004124 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 8004358:	682b      	ldr	r3, [r5, #0]
 800435a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800435e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004360:	f7fd f934 	bl	80015cc <HAL_GetTick>
 8004364:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004366:	e004      	b.n	8004372 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004368:	f7fd f930 	bl	80015cc <HAL_GetTick>
 800436c:	1b80      	subs	r0, r0, r6
 800436e:	2802      	cmp	r0, #2
 8004370:	d8b8      	bhi.n	80042e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004372:	682b      	ldr	r3, [r5, #0]
 8004374:	05df      	lsls	r7, r3, #23
 8004376:	d4f7      	bmi.n	8004368 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	e6a2      	b.n	80040c2 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004382:	f7fd f923 	bl	80015cc <HAL_GetTick>
 8004386:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004388:	e004      	b.n	8004394 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438a:	f7fd f91f 	bl	80015cc <HAL_GetTick>
 800438e:	1b80      	subs	r0, r0, r6
 8004390:	2802      	cmp	r0, #2
 8004392:	d8a7      	bhi.n	80042e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	0758      	lsls	r0, r3, #29
 8004398:	d4f7      	bmi.n	800438a <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	e65b      	b.n	8004056 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800439e:	0790      	lsls	r0, r2, #30
 80043a0:	f47f af01 	bne.w	80041a6 <HAL_RCC_OscConfig+0x1c2>
 80043a4:	e6ce      	b.n	8004144 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a6:	686b      	ldr	r3, [r5, #4]
 80043a8:	6922      	ldr	r2, [r4, #16]
 80043aa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80043ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80043b2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	e64e      	b.n	8004056 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043b8:	4a36      	ldr	r2, [pc, #216]	@ (8004494 <HAL_RCC_OscConfig+0x4b0>)
 80043ba:	6a21      	ldr	r1, [r4, #32]
 80043bc:	68d3      	ldr	r3, [r2, #12]
 80043be:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80043c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80043c6:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	e67a      	b.n	80040c2 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 80043cc:	f7fd f8fe 	bl	80015cc <HAL_GetTick>
 80043d0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043d2:	e004      	b.n	80043de <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd f8fa 	bl	80015cc <HAL_GetTick>
 80043d8:	1b80      	subs	r0, r0, r6
 80043da:	2802      	cmp	r0, #2
 80043dc:	d882      	bhi.n	80042e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043de:	682b      	ldr	r3, [r5, #0]
 80043e0:	0199      	lsls	r1, r3, #6
 80043e2:	d4f7      	bmi.n	80043d4 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e4:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80043e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004498 <HAL_RCC_OscConfig+0x4b4>)
 80043e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80043ea:	400b      	ands	r3, r1
 80043ec:	4313      	orrs	r3, r2
 80043ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80043f0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80043f4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80043f6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80043f8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80043fc:	3901      	subs	r1, #1
 80043fe:	3b01      	subs	r3, #1
 8004400:	3a01      	subs	r2, #1
 8004402:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004406:	025b      	lsls	r3, r3, #9
 8004408:	0412      	lsls	r2, r2, #16
 800440a:	b29b      	uxth	r3, r3
 800440c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004410:	4313      	orrs	r3, r2
 8004412:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004414:	3a01      	subs	r2, #1
 8004416:	430b      	orrs	r3, r1
 8004418:	0612      	lsls	r2, r2, #24
 800441a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800441e:	4313      	orrs	r3, r2
 8004420:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8004422:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800442a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800442c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800442e:	f36f 03cf 	bfc	r3, #3, #13
 8004432:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004436:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004438:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800443a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800443c:	f023 030c 	bic.w	r3, r3, #12
 8004440:	4313      	orrs	r3, r2
 8004442:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004444:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004446:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004448:	f023 0302 	bic.w	r3, r3, #2
 800444c:	4313      	orrs	r3, r2
 800444e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004450:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004456:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004458:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800445a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800445e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004460:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004462:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004466:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004468:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004476:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004478:	f7fd f8a8 	bl	80015cc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800447c:	4d05      	ldr	r5, [pc, #20]	@ (8004494 <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 800447e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	019a      	lsls	r2, r3, #6
 8004484:	f53f ae56 	bmi.w	8004134 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fd f8a0 	bl	80015cc <HAL_GetTick>
 800448c:	1b00      	subs	r0, r0, r4
 800448e:	2802      	cmp	r0, #2
 8004490:	d9f6      	bls.n	8004480 <HAL_RCC_OscConfig+0x49c>
 8004492:	e727      	b.n	80042e4 <HAL_RCC_OscConfig+0x300>
 8004494:	58024400 	.word	0x58024400
 8004498:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449c:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800449e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044a0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a2:	f43f aea6 	beq.w	80041f2 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a6:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044aa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80044ac:	428b      	cmp	r3, r1
 80044ae:	f47f aea0 	bne.w	80041f2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044b2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80044b8:	429a      	cmp	r2, r3
 80044ba:	f47f ae9a 	bne.w	80041f2 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80044c0:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80044c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c6:	429a      	cmp	r2, r3
 80044c8:	f47f ae93 	bne.w	80041f2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044ce:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80044d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	f47f ae8c 	bne.w	80041f2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80044dc:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80044e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	f47f ae85 	bne.w	80041f2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80044ea:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80044ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044f0:	4298      	cmp	r0, r3
 80044f2:	f47f ae7e 	bne.w	80041f2 <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80044f6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80044f8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80044fa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80044fe:	429a      	cmp	r2, r3
 8004500:	f43f ae18 	beq.w	8004134 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8004504:	4a2d      	ldr	r2, [pc, #180]	@ (80045bc <HAL_RCC_OscConfig+0x5d8>)
 8004506:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800450e:	f7fd f85d 	bl	80015cc <HAL_GetTick>
 8004512:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004514:	f7fd f85a 	bl	80015cc <HAL_GetTick>
 8004518:	42a8      	cmp	r0, r5
 800451a:	d0fb      	beq.n	8004514 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800451c:	4a27      	ldr	r2, [pc, #156]	@ (80045bc <HAL_RCC_OscConfig+0x5d8>)
 800451e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004520:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8004522:	f36f 03cf 	bfc	r3, #3, #13
 8004526:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800452a:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800452c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004534:	e5fe      	b.n	8004134 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004536:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004542:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004544:	e576      	b.n	8004034 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004546:	4d1d      	ldr	r5, [pc, #116]	@ (80045bc <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	672b      	str	r3, [r5, #112]	@ 0x70
 8004554:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004556:	f023 0304 	bic.w	r3, r3, #4
 800455a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800455c:	f7fd f836 	bl	80015cc <HAL_GetTick>
 8004560:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004562:	e005      	b.n	8004570 <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004564:	f7fd f832 	bl	80015cc <HAL_GetTick>
 8004568:	1b80      	subs	r0, r0, r6
 800456a:	42b8      	cmp	r0, r7
 800456c:	f63f aeba 	bhi.w	80042e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004570:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004572:	0798      	lsls	r0, r3, #30
 8004574:	d4f6      	bmi.n	8004564 <HAL_RCC_OscConfig+0x580>
 8004576:	e5d9      	b.n	800412c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004578:	68eb      	ldr	r3, [r5, #12]
 800457a:	6a22      	ldr	r2, [r4, #32]
 800457c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004580:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004584:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	e59b      	b.n	80040c2 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458a:	4a0c      	ldr	r2, [pc, #48]	@ (80045bc <HAL_RCC_OscConfig+0x5d8>)
 800458c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004594:	e67d      	b.n	8004292 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004596:	4a09      	ldr	r2, [pc, #36]	@ (80045bc <HAL_RCC_OscConfig+0x5d8>)
 8004598:	6853      	ldr	r3, [r2, #4]
 800459a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800459e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045a2:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	e58c      	b.n	80040c2 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a8:	f042 0204 	orr.w	r2, r2, #4
 80045ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80045ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b6:	e66c      	b.n	8004292 <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 80045b8:	2001      	movs	r0, #1
}
 80045ba:	4770      	bx	lr
 80045bc:	58024400 	.word	0x58024400

080045c0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045c0:	4a3f      	ldr	r2, [pc, #252]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80045c2:	6913      	ldr	r3, [r2, #16]
 80045c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d04f      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0xac>
 80045cc:	2b18      	cmp	r3, #24
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCC_GetSysClockFreq+0x26>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d14d      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045d4:	6813      	ldr	r3, [r2, #0]
 80045d6:	0699      	lsls	r1, r3, #26
 80045d8:	d54c      	bpl.n	8004674 <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045da:	6813      	ldr	r3, [r2, #0]
 80045dc:	4839      	ldr	r0, [pc, #228]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80045de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80045e2:	40d8      	lsrs	r0, r3
 80045e4:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045e6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 80045e8:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80045ea:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045ec:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 80045ee:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045f2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80045f4:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80045f8:	d036      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045fa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045fe:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004602:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004606:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800460a:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 800460e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004614:	ee06 3a90 	vmov	s13, r3
 8004618:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800461c:	d002      	beq.n	8004624 <HAL_RCC_GetSysClockFreq+0x64>
 800461e:	2902      	cmp	r1, #2
 8004620:	d048      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0xf4>
 8004622:	b349      	cbz	r1, 8004678 <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004624:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80046c8 <HAL_RCC_GetSysClockFreq+0x108>
 8004628:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800462c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a10 	vmov	s14, r3
 8004636:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800463a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800463e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004642:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004646:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800464a:	4b1d      	ldr	r3, [pc, #116]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x100>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004652:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004654:	ee07 3a90 	vmov	s15, r3
 8004658:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800465c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004664:	ee17 0a90 	vmov	r0, s15
}
 8004668:	bc30      	pop	{r4, r5}
 800466a:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800466c:	4817      	ldr	r0, [pc, #92]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800466e:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 8004670:	4817      	ldr	r0, [pc, #92]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004672:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004674:	4813      	ldr	r0, [pc, #76]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8004676:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004678:	6813      	ldr	r3, [r2, #0]
 800467a:	069b      	lsls	r3, r3, #26
 800467c:	d51d      	bpl.n	80046ba <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800467e:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004680:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004684:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004686:	490f      	ldr	r1, [pc, #60]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004688:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800468c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004690:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004692:	ee06 3a10 	vmov	s12, r3
 8004696:	ee05 1a90 	vmov	s11, r1
 800469a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800469e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80046a2:	ee36 6a07 	vadd.f32	s12, s12, s14
 80046a6:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80046aa:	ee76 7a26 	vadd.f32	s15, s12, s13
 80046ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046b2:	e7ca      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046b4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80046d4 <HAL_RCC_GetSysClockFreq+0x114>
 80046b8:	e7b6      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046ba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80046d8 <HAL_RCC_GetSysClockFreq+0x118>
 80046be:	e7b3      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x68>
 80046c0:	58024400 	.word	0x58024400
 80046c4:	03d09000 	.word	0x03d09000
 80046c8:	4a742400 	.word	0x4a742400
 80046cc:	017d7840 	.word	0x017d7840
 80046d0:	003d0900 	.word	0x003d0900
 80046d4:	4bbebc20 	.word	0x4bbebc20
 80046d8:	4c742400 	.word	0x4c742400

080046dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80046dc:	2800      	cmp	r0, #0
 80046de:	f000 810e 	beq.w	80048fe <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e2:	4a8d      	ldr	r2, [pc, #564]	@ (8004918 <HAL_RCC_ClockConfig+0x23c>)
 80046e4:	6813      	ldr	r3, [r2, #0]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	428b      	cmp	r3, r1
{
 80046ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f0:	4604      	mov	r4, r0
 80046f2:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046f4:	d20c      	bcs.n	8004710 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	6813      	ldr	r3, [r2, #0]
 80046f8:	f023 030f 	bic.w	r3, r3, #15
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004700:	6813      	ldr	r3, [r2, #0]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	428b      	cmp	r3, r1
 8004708:	d002      	beq.n	8004710 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800470a:	2001      	movs	r0, #1
}
 800470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	0758      	lsls	r0, r3, #29
 8004714:	d50b      	bpl.n	800472e <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004716:	4981      	ldr	r1, [pc, #516]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 8004718:	6920      	ldr	r0, [r4, #16]
 800471a:	698a      	ldr	r2, [r1, #24]
 800471c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004720:	4290      	cmp	r0, r2
 8004722:	d904      	bls.n	800472e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004724:	698a      	ldr	r2, [r1, #24]
 8004726:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800472a:	4302      	orrs	r2, r0
 800472c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472e:	0719      	lsls	r1, r3, #28
 8004730:	d50b      	bpl.n	800474a <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004732:	497a      	ldr	r1, [pc, #488]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 8004734:	6960      	ldr	r0, [r4, #20]
 8004736:	69ca      	ldr	r2, [r1, #28]
 8004738:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800473c:	4290      	cmp	r0, r2
 800473e:	d904      	bls.n	800474a <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004740:	69ca      	ldr	r2, [r1, #28]
 8004742:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004746:	4302      	orrs	r2, r0
 8004748:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474a:	06da      	lsls	r2, r3, #27
 800474c:	d50b      	bpl.n	8004766 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800474e:	4973      	ldr	r1, [pc, #460]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 8004750:	69a0      	ldr	r0, [r4, #24]
 8004752:	69ca      	ldr	r2, [r1, #28]
 8004754:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004758:	4290      	cmp	r0, r2
 800475a:	d904      	bls.n	8004766 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800475c:	69ca      	ldr	r2, [r1, #28]
 800475e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004762:	4302      	orrs	r2, r0
 8004764:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004766:	069f      	lsls	r7, r3, #26
 8004768:	d50b      	bpl.n	8004782 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800476a:	496c      	ldr	r1, [pc, #432]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 800476c:	69e0      	ldr	r0, [r4, #28]
 800476e:	6a0a      	ldr	r2, [r1, #32]
 8004770:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004774:	4290      	cmp	r0, r2
 8004776:	d904      	bls.n	8004782 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004778:	6a0a      	ldr	r2, [r1, #32]
 800477a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800477e:	4302      	orrs	r2, r0
 8004780:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004782:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004784:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004788:	f140 80ab 	bpl.w	80048e2 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800478c:	4e63      	ldr	r6, [pc, #396]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 800478e:	68e0      	ldr	r0, [r4, #12]
 8004790:	69b1      	ldr	r1, [r6, #24]
 8004792:	f001 010f 	and.w	r1, r1, #15
 8004796:	4288      	cmp	r0, r1
 8004798:	d904      	bls.n	80047a4 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479a:	69b1      	ldr	r1, [r6, #24]
 800479c:	f021 010f 	bic.w	r1, r1, #15
 80047a0:	4301      	orrs	r1, r0
 80047a2:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a4:	2a00      	cmp	r2, #0
 80047a6:	d030      	beq.n	800480a <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80047a8:	4a5c      	ldr	r2, [pc, #368]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 80047aa:	68a1      	ldr	r1, [r4, #8]
 80047ac:	6993      	ldr	r3, [r2, #24]
 80047ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80047b2:	430b      	orrs	r3, r1
 80047b4:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047b8:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	2902      	cmp	r1, #2
 80047bc:	f000 80a1 	beq.w	8004902 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c0:	2903      	cmp	r1, #3
 80047c2:	f000 8098 	beq.w	80048f6 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047c6:	2901      	cmp	r1, #1
 80047c8:	f000 80a1 	beq.w	800490e <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047cc:	075f      	lsls	r7, r3, #29
 80047ce:	d59c      	bpl.n	800470a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047d0:	4e52      	ldr	r6, [pc, #328]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d2:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047d6:	6933      	ldr	r3, [r6, #16]
 80047d8:	f023 0307 	bic.w	r3, r3, #7
 80047dc:	430b      	orrs	r3, r1
 80047de:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80047e0:	f7fc fef4 	bl	80015cc <HAL_GetTick>
 80047e4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e6:	e005      	b.n	80047f4 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e8:	f7fc fef0 	bl	80015cc <HAL_GetTick>
 80047ec:	1bc0      	subs	r0, r0, r7
 80047ee:	4540      	cmp	r0, r8
 80047f0:	f200 808b 	bhi.w	800490a <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f4:	6933      	ldr	r3, [r6, #16]
 80047f6:	6862      	ldr	r2, [r4, #4]
 80047f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047fc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004800:	d1f2      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	079e      	lsls	r6, r3, #30
 8004806:	d506      	bpl.n	8004816 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004808:	68e0      	ldr	r0, [r4, #12]
 800480a:	4944      	ldr	r1, [pc, #272]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 800480c:	698a      	ldr	r2, [r1, #24]
 800480e:	f002 020f 	and.w	r2, r2, #15
 8004812:	4290      	cmp	r0, r2
 8004814:	d369      	bcc.n	80048ea <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004816:	4940      	ldr	r1, [pc, #256]	@ (8004918 <HAL_RCC_ClockConfig+0x23c>)
 8004818:	680a      	ldr	r2, [r1, #0]
 800481a:	f002 020f 	and.w	r2, r2, #15
 800481e:	42aa      	cmp	r2, r5
 8004820:	d90a      	bls.n	8004838 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	680a      	ldr	r2, [r1, #0]
 8004824:	f022 020f 	bic.w	r2, r2, #15
 8004828:	432a      	orrs	r2, r5
 800482a:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482c:	680a      	ldr	r2, [r1, #0]
 800482e:	f002 020f 	and.w	r2, r2, #15
 8004832:	42aa      	cmp	r2, r5
 8004834:	f47f af69 	bne.w	800470a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004838:	0758      	lsls	r0, r3, #29
 800483a:	d50b      	bpl.n	8004854 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800483c:	4937      	ldr	r1, [pc, #220]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 800483e:	6920      	ldr	r0, [r4, #16]
 8004840:	698a      	ldr	r2, [r1, #24]
 8004842:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004846:	4290      	cmp	r0, r2
 8004848:	d204      	bcs.n	8004854 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800484a:	698a      	ldr	r2, [r1, #24]
 800484c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004850:	4302      	orrs	r2, r0
 8004852:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	0719      	lsls	r1, r3, #28
 8004856:	d50b      	bpl.n	8004870 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004858:	4930      	ldr	r1, [pc, #192]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 800485a:	6960      	ldr	r0, [r4, #20]
 800485c:	69ca      	ldr	r2, [r1, #28]
 800485e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004862:	4290      	cmp	r0, r2
 8004864:	d204      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004866:	69ca      	ldr	r2, [r1, #28]
 8004868:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800486c:	4302      	orrs	r2, r0
 800486e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	06da      	lsls	r2, r3, #27
 8004872:	d50b      	bpl.n	800488c <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004874:	4929      	ldr	r1, [pc, #164]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 8004876:	69a0      	ldr	r0, [r4, #24]
 8004878:	69ca      	ldr	r2, [r1, #28]
 800487a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800487e:	4290      	cmp	r0, r2
 8004880:	d204      	bcs.n	800488c <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004882:	69ca      	ldr	r2, [r1, #28]
 8004884:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004888:	4302      	orrs	r2, r0
 800488a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800488c:	069b      	lsls	r3, r3, #26
 800488e:	d50b      	bpl.n	80048a8 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004890:	4a22      	ldr	r2, [pc, #136]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 8004892:	69e1      	ldr	r1, [r4, #28]
 8004894:	6a13      	ldr	r3, [r2, #32]
 8004896:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800489a:	4299      	cmp	r1, r3
 800489c:	d204      	bcs.n	80048a8 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800489e:	6a13      	ldr	r3, [r2, #32]
 80048a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048a8:	f7ff fe8a 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 80048ac:	4a1b      	ldr	r2, [pc, #108]	@ (800491c <HAL_RCC_ClockConfig+0x240>)
 80048ae:	4603      	mov	r3, r0
 80048b0:	481b      	ldr	r0, [pc, #108]	@ (8004920 <HAL_RCC_ClockConfig+0x244>)
 80048b2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048b4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048b6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80048ba:	4d1a      	ldr	r5, [pc, #104]	@ (8004924 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048bc:	f002 020f 	and.w	r2, r2, #15
 80048c0:	4c19      	ldr	r4, [pc, #100]	@ (8004928 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048c2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048c4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048c6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80048ca:	4818      	ldr	r0, [pc, #96]	@ (800492c <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048cc:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048d0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80048d2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80048d4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048d6:	40d3      	lsrs	r3, r2
 80048d8:	6023      	str	r3, [r4, #0]
}
 80048da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80048de:	f7fc be13 	b.w	8001508 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e2:	2a00      	cmp	r2, #0
 80048e4:	f47f af60 	bne.w	80047a8 <HAL_RCC_ClockConfig+0xcc>
 80048e8:	e795      	b.n	8004816 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ea:	698a      	ldr	r2, [r1, #24]
 80048ec:	f022 020f 	bic.w	r2, r2, #15
 80048f0:	4302      	orrs	r2, r0
 80048f2:	618a      	str	r2, [r1, #24]
 80048f4:	e78f      	b.n	8004816 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048f6:	019a      	lsls	r2, r3, #6
 80048f8:	f53f af6a 	bmi.w	80047d0 <HAL_RCC_ClockConfig+0xf4>
 80048fc:	e705      	b.n	800470a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80048fe:	2001      	movs	r0, #1
}
 8004900:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004902:	0398      	lsls	r0, r3, #14
 8004904:	f53f af64 	bmi.w	80047d0 <HAL_RCC_ClockConfig+0xf4>
 8004908:	e6ff      	b.n	800470a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800490a:	2003      	movs	r0, #3
 800490c:	e6fe      	b.n	800470c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800490e:	05db      	lsls	r3, r3, #23
 8004910:	f53f af5e 	bmi.w	80047d0 <HAL_RCC_ClockConfig+0xf4>
 8004914:	e6f9      	b.n	800470a <HAL_RCC_ClockConfig+0x2e>
 8004916:	bf00      	nop
 8004918:	52002000 	.word	0x52002000
 800491c:	58024400 	.word	0x58024400
 8004920:	0800c654 	.word	0x0800c654
 8004924:	2400004c 	.word	0x2400004c
 8004928:	24000048 	.word	0x24000048
 800492c:	24000054 	.word	0x24000054

08004930 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004930:	4a18      	ldr	r2, [pc, #96]	@ (8004994 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004932:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004934:	6913      	ldr	r3, [r2, #16]
 8004936:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800493a:	2b10      	cmp	r3, #16
 800493c:	d024      	beq.n	8004988 <HAL_RCC_GetHCLKFreq+0x58>
 800493e:	2b18      	cmp	r3, #24
 8004940:	d009      	beq.n	8004956 <HAL_RCC_GetHCLKFreq+0x26>
 8004942:	bb1b      	cbnz	r3, 800498c <HAL_RCC_GetHCLKFreq+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004944:	6813      	ldr	r3, [r2, #0]
 8004946:	069b      	lsls	r3, r3, #26
 8004948:	d522      	bpl.n	8004990 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	4b12      	ldr	r3, [pc, #72]	@ (8004998 <HAL_RCC_GetHCLKFreq+0x68>)
 800494e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004952:	40d3      	lsrs	r3, r2
 8004954:	e002      	b.n	800495c <HAL_RCC_GetHCLKFreq+0x2c>
 8004956:	f7ff fad3 	bl	8003f00 <HAL_RCC_GetSysClockFreq.part.0>
 800495a:	4603      	mov	r3, r0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800495c:	490d      	ldr	r1, [pc, #52]	@ (8004994 <HAL_RCC_GetHCLKFreq+0x64>)
 800495e:	480f      	ldr	r0, [pc, #60]	@ (800499c <HAL_RCC_GetHCLKFreq+0x6c>)
 8004960:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004962:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004964:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004968:	4c0d      	ldr	r4, [pc, #52]	@ (80049a0 <HAL_RCC_GetHCLKFreq+0x70>)
 800496a:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800496e:	4d0d      	ldr	r5, [pc, #52]	@ (80049a4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004970:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004972:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004974:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004978:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800497c:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800497e:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8004982:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004984:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004986:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004988:	4b07      	ldr	r3, [pc, #28]	@ (80049a8 <HAL_RCC_GetHCLKFreq+0x78>)
 800498a:	e7e7      	b.n	800495c <HAL_RCC_GetHCLKFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800498c:	4b07      	ldr	r3, [pc, #28]	@ (80049ac <HAL_RCC_GetHCLKFreq+0x7c>)
 800498e:	e7e5      	b.n	800495c <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004990:	4b01      	ldr	r3, [pc, #4]	@ (8004998 <HAL_RCC_GetHCLKFreq+0x68>)
 8004992:	e7e3      	b.n	800495c <HAL_RCC_GetHCLKFreq+0x2c>
 8004994:	58024400 	.word	0x58024400
 8004998:	03d09000 	.word	0x03d09000
 800499c:	0800c654 	.word	0x0800c654
 80049a0:	24000048 	.word	0x24000048
 80049a4:	2400004c 	.word	0x2400004c
 80049a8:	017d7840 	.word	0x017d7840
 80049ac:	003d0900 	.word	0x003d0900

080049b0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a24 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b4:	6913      	ldr	r3, [r2, #16]
 80049b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d02b      	beq.n	8004a16 <HAL_RCC_GetPCLK1Freq+0x66>
 80049be:	2b18      	cmp	r3, #24
 80049c0:	d009      	beq.n	80049d6 <HAL_RCC_GetPCLK1Freq+0x26>
 80049c2:	bb53      	cbnz	r3, 8004a1a <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049c4:	6813      	ldr	r3, [r2, #0]
 80049c6:	069b      	lsls	r3, r3, #26
 80049c8:	d529      	bpl.n	8004a1e <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	4b16      	ldr	r3, [pc, #88]	@ (8004a28 <HAL_RCC_GetPCLK1Freq+0x78>)
 80049ce:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80049d2:	40d3      	lsrs	r3, r2
 80049d4:	e002      	b.n	80049dc <HAL_RCC_GetPCLK1Freq+0x2c>
 80049d6:	f7ff fa93 	bl	8003f00 <HAL_RCC_GetSysClockFreq.part.0>
 80049da:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80049dc:	4a11      	ldr	r2, [pc, #68]	@ (8004a24 <HAL_RCC_GetPCLK1Freq+0x74>)
 80049de:	4913      	ldr	r1, [pc, #76]	@ (8004a2c <HAL_RCC_GetPCLK1Freq+0x7c>)
 80049e0:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 80049e2:	4d13      	ldr	r5, [pc, #76]	@ (8004a30 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80049e4:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049e8:	4c12      	ldr	r4, [pc, #72]	@ (8004a34 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80049ea:	5c08      	ldrb	r0, [r1, r0]
 80049ec:	f000 001f 	and.w	r0, r0, #31
 80049f0:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049f2:	6990      	ldr	r0, [r2, #24]
 80049f4:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80049f8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049fa:	5c08      	ldrb	r0, [r1, r0]
 80049fc:	f000 001f 	and.w	r0, r0, #31
 8004a00:	40c3      	lsrs	r3, r0
 8004a02:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004a04:	69d2      	ldr	r2, [r2, #28]
 8004a06:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004a0a:	5c88      	ldrb	r0, [r1, r2]
 8004a0c:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a10:	fa23 f000 	lsr.w	r0, r3, r0
 8004a14:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a16:	4b08      	ldr	r3, [pc, #32]	@ (8004a38 <HAL_RCC_GetPCLK1Freq+0x88>)
 8004a18:	e7e0      	b.n	80049dc <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 8004a1a:	4b08      	ldr	r3, [pc, #32]	@ (8004a3c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004a1c:	e7de      	b.n	80049dc <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a1e:	4b02      	ldr	r3, [pc, #8]	@ (8004a28 <HAL_RCC_GetPCLK1Freq+0x78>)
 8004a20:	e7dc      	b.n	80049dc <HAL_RCC_GetPCLK1Freq+0x2c>
 8004a22:	bf00      	nop
 8004a24:	58024400 	.word	0x58024400
 8004a28:	03d09000 	.word	0x03d09000
 8004a2c:	0800c654 	.word	0x0800c654
 8004a30:	2400004c 	.word	0x2400004c
 8004a34:	24000048 	.word	0x24000048
 8004a38:	017d7840 	.word	0x017d7840
 8004a3c:	003d0900 	.word	0x003d0900

08004a40 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a42:	4c36      	ldr	r4, [pc, #216]	@ (8004b1c <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8004a44:	4606      	mov	r6, r0
 8004a46:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a4e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a50:	f7fc fdbc 	bl	80015cc <HAL_GetTick>
 8004a54:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a56:	e004      	b.n	8004a62 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a58:	f7fc fdb8 	bl	80015cc <HAL_GetTick>
 8004a5c:	1b40      	subs	r0, r0, r5
 8004a5e:	2802      	cmp	r0, #2
 8004a60:	d856      	bhi.n	8004b10 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	011a      	lsls	r2, r3, #4
 8004a66:	d4f7      	bmi.n	8004a58 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a68:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004a6a:	6832      	ldr	r2, [r6, #0]
 8004a6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004a70:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004a74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a76:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	3a01      	subs	r2, #1
 8004a7e:	025b      	lsls	r3, r3, #9
 8004a80:	0412      	lsls	r2, r2, #16
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	6872      	ldr	r2, [r6, #4]
 8004a8c:	3a01      	subs	r2, #1
 8004a8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a92:	4313      	orrs	r3, r2
 8004a94:	6932      	ldr	r2, [r6, #16]
 8004a96:	3a01      	subs	r2, #1
 8004a98:	0612      	lsls	r2, r2, #24
 8004a9a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004aa2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004aa4:	6972      	ldr	r2, [r6, #20]
 8004aa6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004aae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004ab0:	69b2      	ldr	r2, [r6, #24]
 8004ab2:	f023 0320 	bic.w	r3, r3, #32
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004aba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004abc:	f023 0310 	bic.w	r3, r3, #16
 8004ac0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ac2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004ac4:	69f2      	ldr	r2, [r6, #28]
 8004ac6:	f36f 03cf 	bfc	r3, #3, #13
 8004aca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004ace:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ad0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004ad2:	f043 0310 	orr.w	r3, r3, #16
 8004ad6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ad8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004ada:	b1df      	cbz	r7, 8004b14 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004adc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ade:	bf0c      	ite	eq
 8004ae0:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ae4:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8004ae8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004aea:	4c0c      	ldr	r4, [pc, #48]	@ (8004b1c <RCCEx_PLL2_Config.part.0+0xdc>)
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004af2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af4:	f7fc fd6a 	bl	80015cc <HAL_GetTick>
 8004af8:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004afa:	e004      	b.n	8004b06 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004afc:	f7fc fd66 	bl	80015cc <HAL_GetTick>
 8004b00:	1b40      	subs	r0, r0, r5
 8004b02:	2802      	cmp	r0, #2
 8004b04:	d804      	bhi.n	8004b10 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	d5f7      	bpl.n	8004afc <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8004b0c:	2000      	movs	r0, #0
}
 8004b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004b10:	2003      	movs	r0, #3
}
 8004b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b1a:	e7e6      	b.n	8004aea <RCCEx_PLL2_Config.part.0+0xaa>
 8004b1c:	58024400 	.word	0x58024400

08004b20 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b22:	4c36      	ldr	r4, [pc, #216]	@ (8004bfc <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004b24:	4606      	mov	r6, r0
 8004b26:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b2e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b30:	f7fc fd4c 	bl	80015cc <HAL_GetTick>
 8004b34:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b36:	e004      	b.n	8004b42 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b38:	f7fc fd48 	bl	80015cc <HAL_GetTick>
 8004b3c:	1b40      	subs	r0, r0, r5
 8004b3e:	2802      	cmp	r0, #2
 8004b40:	d856      	bhi.n	8004bf0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	009a      	lsls	r2, r3, #2
 8004b46:	d4f7      	bmi.n	8004b38 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b48:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004b4a:	6832      	ldr	r2, [r6, #0]
 8004b4c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8004b50:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004b54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b56:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	3a01      	subs	r2, #1
 8004b5e:	025b      	lsls	r3, r3, #9
 8004b60:	0412      	lsls	r2, r2, #16
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	6872      	ldr	r2, [r6, #4]
 8004b6c:	3a01      	subs	r2, #1
 8004b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b72:	4313      	orrs	r3, r2
 8004b74:	6932      	ldr	r2, [r6, #16]
 8004b76:	3a01      	subs	r2, #1
 8004b78:	0612      	lsls	r2, r2, #24
 8004b7a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b82:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004b84:	6972      	ldr	r2, [r6, #20]
 8004b86:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b8e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004b90:	69b2      	ldr	r2, [r6, #24]
 8004b92:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b96:	4313      	orrs	r3, r2
 8004b98:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ba0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ba2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004ba4:	69f2      	ldr	r2, [r6, #28]
 8004ba6:	f36f 03cf 	bfc	r3, #3, #13
 8004baa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004bae:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bb0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bb8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004bba:	b1df      	cbz	r7, 8004bf4 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bbc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004bbe:	bf0c      	ite	eq
 8004bc0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004bc4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8004bc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004bca:	4c0c      	ldr	r4, [pc, #48]	@ (8004bfc <RCCEx_PLL3_Config.part.0+0xdc>)
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd4:	f7fc fcfa 	bl	80015cc <HAL_GetTick>
 8004bd8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bda:	e004      	b.n	8004be6 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bdc:	f7fc fcf6 	bl	80015cc <HAL_GetTick>
 8004be0:	1b40      	subs	r0, r0, r5
 8004be2:	2802      	cmp	r0, #2
 8004be4:	d804      	bhi.n	8004bf0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	d5f7      	bpl.n	8004bdc <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8004bec:	2000      	movs	r0, #0
}
 8004bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004bf0:	2003      	movs	r0, #3
}
 8004bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bf4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004bf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004bfa:	e7e6      	b.n	8004bca <RCCEx_PLL3_Config.part.0+0xaa>
 8004bfc:	58024400 	.word	0x58024400

08004c00 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c04:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8004c08:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c0a:	011d      	lsls	r5, r3, #4
 8004c0c:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8004c10:	d524      	bpl.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004c12:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004c14:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004c18:	f000 85df 	beq.w	80057da <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8004c1c:	f200 86a8 	bhi.w	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004c20:	2900      	cmp	r1, #0
 8004c22:	f000 85f6 	beq.w	8005812 <HAL_RCCEx_PeriphCLKConfig+0xc12>
 8004c26:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004c2a:	f040 86a5 	bne.w	8005978 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c2e:	49a9      	ldr	r1, [pc, #676]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c30:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004c32:	f001 0103 	and.w	r1, r1, #3
 8004c36:	2903      	cmp	r1, #3
 8004c38:	f000 869e 	beq.w	8005978 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	3008      	adds	r0, #8
 8004c40:	f7ff fefe 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8004c44:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c46:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004c4a:	b93e      	cbnz	r6, 8004c5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c4c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004c4e:	4da1      	ldr	r5, [pc, #644]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c50:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c52:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8004c54:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8004c58:	4301      	orrs	r1, r0
 8004c5a:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c5c:	05d8      	lsls	r0, r3, #23
 8004c5e:	d50a      	bpl.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c60:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004c62:	2904      	cmp	r1, #4
 8004c64:	d806      	bhi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c66:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004c6a:	03ff      	.short	0x03ff
 8004c6c:	0582056d 	.word	0x0582056d
 8004c70:	04040404 	.word	0x04040404
      status = ret;
 8004c74:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004c76:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004c78:	0599      	lsls	r1, r3, #22
 8004c7a:	d524      	bpl.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004c7c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004c7e:	2980      	cmp	r1, #128	@ 0x80
 8004c80:	f000 854b 	beq.w	800571a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004c84:	f200 8687 	bhi.w	8005996 <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	f000 85bb 	beq.w	8005804 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8004c8e:	2940      	cmp	r1, #64	@ 0x40
 8004c90:	f040 8688 	bne.w	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c94:	498f      	ldr	r1, [pc, #572]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c96:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004c98:	f001 0103 	and.w	r1, r1, #3
 8004c9c:	2903      	cmp	r1, #3
 8004c9e:	f000 8681 	beq.w	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	f104 0008 	add.w	r0, r4, #8
 8004ca8:	f7ff feca 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8004cac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004cae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	f040 8543 	bne.w	800573e <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004cb8:	4f86      	ldr	r7, [pc, #536]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cba:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004cbc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004cbe:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8004cc2:	4301      	orrs	r1, r0
 8004cc4:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004cc6:	055f      	lsls	r7, r3, #21
 8004cc8:	d528      	bpl.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004cca:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8004cce:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8004cd2:	f000 855c 	beq.w	800578e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004cd6:	f200 8652 	bhi.w	800597e <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	f000 858b 	beq.w	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004ce0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004ce4:	f040 8653 	bne.w	800598e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ce8:	497a      	ldr	r1, [pc, #488]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004cec:	f001 0103 	and.w	r1, r1, #3
 8004cf0:	2903      	cmp	r1, #3
 8004cf2:	f000 864c 	beq.w	800598e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	f104 0008 	add.w	r0, r4, #8
 8004cfc:	f7ff fea0 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8004d00:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d02:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004d06:	2d00      	cmp	r5, #0
 8004d08:	f040 8553 	bne.w	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d0c:	4f71      	ldr	r7, [pc, #452]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d0e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8004d12:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d14:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8004d18:	4301      	orrs	r1, r0
 8004d1a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d1c:	0518      	lsls	r0, r3, #20
 8004d1e:	d528      	bpl.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004d20:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8004d24:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8004d28:	f000 8546 	beq.w	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 8004d2c:	f200 8614 	bhi.w	8005958 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8004d30:	2900      	cmp	r1, #0
 8004d32:	f000 84d6 	beq.w	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8004d36:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004d3a:	f040 8615 	bne.w	8005968 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d3e:	4965      	ldr	r1, [pc, #404]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d40:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004d42:	f001 0103 	and.w	r1, r1, #3
 8004d46:	2903      	cmp	r1, #3
 8004d48:	f000 860e 	beq.w	8005968 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	f104 0008 	add.w	r0, r4, #8
 8004d52:	f7ff fe75 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8004d56:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d58:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004d5c:	2d00      	cmp	r5, #0
 8004d5e:	f040 84c8 	bne.w	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d62:	4f5c      	ldr	r7, [pc, #368]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d64:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8004d68:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d6a:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8004d6e:	4301      	orrs	r1, r0
 8004d70:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d72:	0199      	lsls	r1, r3, #6
 8004d74:	d518      	bpl.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 8004d76:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004d78:	2920      	cmp	r1, #32
 8004d7a:	f000 8434 	beq.w	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 8004d7e:	f200 8615 	bhi.w	80059ac <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8004d82:	b139      	cbz	r1, 8004d94 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8004d84:	2910      	cmp	r1, #16
 8004d86:	f040 8614 	bne.w	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d8a:	4852      	ldr	r0, [pc, #328]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d8c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004d8e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004d92:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004d94:	2d00      	cmp	r5, #0
 8004d96:	f040 83bf 	bne.w	8005518 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d9a:	4f4e      	ldr	r7, [pc, #312]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d9c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004d9e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004da0:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8004da4:	4301      	orrs	r1, r0
 8004da6:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004da8:	04df      	lsls	r7, r3, #19
 8004daa:	d526      	bpl.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004dac:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8004dae:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8004db2:	f000 84a1 	beq.w	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 8004db6:	f200 85c3 	bhi.w	8005940 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 8004dba:	2900      	cmp	r1, #0
 8004dbc:	f000 8486 	beq.w	80056cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004dc0:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004dc4:	f040 85c4 	bne.w	8005950 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dc8:	4942      	ldr	r1, [pc, #264]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004dca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004dcc:	f001 0103 	and.w	r1, r1, #3
 8004dd0:	2903      	cmp	r1, #3
 8004dd2:	f000 85bd 	beq.w	8005950 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	f104 0008 	add.w	r0, r4, #8
 8004ddc:	f7ff fe30 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8004de0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004de2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	f040 8478 	bne.w	80056dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004dec:	4f39      	ldr	r7, [pc, #228]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004dee:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004df0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004df2:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004df6:	4301      	orrs	r1, r0
 8004df8:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004dfa:	0498      	lsls	r0, r3, #18
 8004dfc:	d524      	bpl.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004dfe:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004e00:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004e04:	f000 8415 	beq.w	8005632 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004e08:	f200 8556 	bhi.w	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8004e0c:	b191      	cbz	r1, 8004e34 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004e0e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004e12:	f040 855b 	bne.w	80058cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e16:	492f      	ldr	r1, [pc, #188]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e18:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004e1a:	f001 0103 	and.w	r1, r1, #3
 8004e1e:	2903      	cmp	r1, #3
 8004e20:	f000 8554 	beq.w	80058cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004e24:	2101      	movs	r1, #1
 8004e26:	f104 0008 	add.w	r0, r4, #8
 8004e2a:	f7ff fe09 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8004e2e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e30:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004e34:	2d00      	cmp	r5, #0
 8004e36:	f040 838f 	bne.w	8005558 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e3a:	4f26      	ldr	r7, [pc, #152]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e3c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8004e3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004e40:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8004e44:	4301      	orrs	r1, r0
 8004e46:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e48:	0459      	lsls	r1, r3, #17
 8004e4a:	d526      	bpl.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e4c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8004e50:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004e54:	f000 8426 	beq.w	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004e58:	f200 854a 	bhi.w	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 8004e5c:	b191      	cbz	r1, 8004e84 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004e5e:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8004e62:	f040 854f 	bne.w	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e66:	491b      	ldr	r1, [pc, #108]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e68:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004e6a:	f001 0103 	and.w	r1, r1, #3
 8004e6e:	2903      	cmp	r1, #3
 8004e70:	f000 8548 	beq.w	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8004e74:	2101      	movs	r1, #1
 8004e76:	f104 0008 	add.w	r0, r4, #8
 8004e7a:	f7ff fde1 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8004e7e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e80:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	f040 835b 	bne.w	8005540 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e8a:	4f12      	ldr	r7, [pc, #72]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e8c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8004e90:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e92:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8004e96:	4301      	orrs	r1, r0
 8004e98:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e9a:	041f      	lsls	r7, r3, #16
 8004e9c:	d50d      	bpl.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 8004e9e:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8004ea0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8004ea4:	f000 8260 	beq.w	8005368 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8004ea8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004eac:	f000 8591 	beq.w	80059d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	f000 825e 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 8004eb6:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004eb8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004eba:	01d8      	lsls	r0, r3, #7
 8004ebc:	d515      	bpl.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 8004ebe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004ec0:	2903      	cmp	r1, #3
 8004ec2:	f200 85b4 	bhi.w	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8004ec6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004eca:	000c      	.short	0x000c
 8004ecc:	03a10007 	.word	0x03a10007
 8004ed0:	000c      	.short	0x000c
 8004ed2:	bf00      	nop
 8004ed4:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed8:	4836      	ldr	r0, [pc, #216]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004eda:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004edc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004ee0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004ee2:	2d00      	cmp	r5, #0
 8004ee4:	f000 831a 	beq.w	800551c <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 8004ee8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eea:	0259      	lsls	r1, r3, #9
 8004eec:	f100 827a 	bmi.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ef0:	07df      	lsls	r7, r3, #31
 8004ef2:	d52f      	bpl.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004ef4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004ef6:	2928      	cmp	r1, #40	@ 0x28
 8004ef8:	d82a      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004efa:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004efe:	0257      	.short	0x0257
 8004f00:	00290029 	.word	0x00290029
 8004f04:	00290029 	.word	0x00290029
 8004f08:	00290029 	.word	0x00290029
 8004f0c:	02480029 	.word	0x02480029
 8004f10:	00290029 	.word	0x00290029
 8004f14:	00290029 	.word	0x00290029
 8004f18:	00290029 	.word	0x00290029
 8004f1c:	04b90029 	.word	0x04b90029
 8004f20:	00290029 	.word	0x00290029
 8004f24:	00290029 	.word	0x00290029
 8004f28:	00290029 	.word	0x00290029
 8004f2c:	02570029 	.word	0x02570029
 8004f30:	00290029 	.word	0x00290029
 8004f34:	00290029 	.word	0x00290029
 8004f38:	00290029 	.word	0x00290029
 8004f3c:	02570029 	.word	0x02570029
 8004f40:	00290029 	.word	0x00290029
 8004f44:	00290029 	.word	0x00290029
 8004f48:	00290029 	.word	0x00290029
 8004f4c:	02570029 	.word	0x02570029
      status = ret;
 8004f50:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004f52:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f54:	0798      	lsls	r0, r3, #30
 8004f56:	d51e      	bpl.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004f58:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8004f5a:	2905      	cmp	r1, #5
 8004f5c:	f200 8550 	bhi.w	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8004f60:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004f64:	00060015 	.word	0x00060015
 8004f68:	00150471 	.word	0x00150471
 8004f6c:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f70:	4910      	ldr	r1, [pc, #64]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004f72:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004f74:	f001 0103 	and.w	r1, r1, #3
 8004f78:	2903      	cmp	r1, #3
 8004f7a:	f000 8541 	beq.w	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8004f7e:	2101      	movs	r1, #1
 8004f80:	f104 0008 	add.w	r0, r4, #8
 8004f84:	f7ff fd5c 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8004f88:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f8a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	f000 82cc 	beq.w	800552c <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 8004f94:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f96:	0759      	lsls	r1, r3, #29
 8004f98:	d521      	bpl.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004f9a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8004f9e:	2905      	cmp	r1, #5
 8004fa0:	f200 852a 	bhi.w	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004fa4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004fa8:	00080017 	.word	0x00080017
 8004fac:	0017043c 	.word	0x0017043c
 8004fb0:	00170017 	.word	0x00170017
 8004fb4:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fb8:	49ae      	ldr	r1, [pc, #696]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004fba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004fbc:	f001 0103 	and.w	r1, r1, #3
 8004fc0:	2903      	cmp	r1, #3
 8004fc2:	f000 8519 	beq.w	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	f104 0008 	add.w	r0, r4, #8
 8004fcc:	f7ff fd38 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8004fd0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fd2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	f000 82c2 	beq.w	8005560 <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 8004fdc:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fde:	069f      	lsls	r7, r3, #26
 8004fe0:	d526      	bpl.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004fe2:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8004fe6:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004fea:	f000 82c6 	beq.w	800557a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004fee:	f200 8455 	bhi.w	800589c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004ff2:	b191      	cbz	r1, 800501a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004ff4:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8004ff8:	f040 845a 	bne.w	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ffc:	499d      	ldr	r1, [pc, #628]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004ffe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005000:	f001 0103 	and.w	r1, r1, #3
 8005004:	2903      	cmp	r1, #3
 8005006:	f000 8453 	beq.w	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 800500a:	2100      	movs	r1, #0
 800500c:	f104 0008 	add.w	r0, r4, #8
 8005010:	f7ff fd16 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8005014:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005016:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800501a:	2d00      	cmp	r5, #0
 800501c:	f040 828e 	bne.w	800553c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005020:	4f94      	ldr	r7, [pc, #592]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005022:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8005026:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005028:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800502c:	4301      	orrs	r1, r0
 800502e:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005030:	0658      	lsls	r0, r3, #25
 8005032:	d526      	bpl.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005034:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8005038:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800503c:	f000 82af 	beq.w	800559e <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8005040:	f200 8464 	bhi.w	800590c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005044:	b191      	cbz	r1, 800506c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8005046:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800504a:	f040 8469 	bne.w	8005920 <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800504e:	4989      	ldr	r1, [pc, #548]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005050:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005052:	f001 0103 	and.w	r1, r1, #3
 8005056:	2903      	cmp	r1, #3
 8005058:	f000 8462 	beq.w	8005920 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800505c:	2100      	movs	r1, #0
 800505e:	f104 0008 	add.w	r0, r4, #8
 8005062:	f7ff fced 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8005066:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005068:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800506c:	2d00      	cmp	r5, #0
 800506e:	f040 8269 	bne.w	8005544 <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005072:	4f80      	ldr	r7, [pc, #512]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005074:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8005078:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800507a:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 800507e:	4301      	orrs	r1, r0
 8005080:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005082:	0619      	lsls	r1, r3, #24
 8005084:	d526      	bpl.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005086:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800508a:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800508e:	f000 8298 	beq.w	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005092:	f200 841f 	bhi.w	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8005096:	b191      	cbz	r1, 80050be <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005098:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800509c:	f040 8424 	bne.w	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050a0:	4974      	ldr	r1, [pc, #464]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80050a2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80050a4:	f001 0103 	and.w	r1, r1, #3
 80050a8:	2903      	cmp	r1, #3
 80050aa:	f000 841d 	beq.w	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80050ae:	2100      	movs	r1, #0
 80050b0:	f104 0008 	add.w	r0, r4, #8
 80050b4:	f7ff fcc4 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 80050b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80050ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80050be:	2d00      	cmp	r5, #0
 80050c0:	f040 8244 	bne.w	800554c <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80050c4:	4f6b      	ldr	r7, [pc, #428]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80050c6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 80050ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80050cc:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80050d0:	4301      	orrs	r1, r0
 80050d2:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80050d4:	071f      	lsls	r7, r3, #28
 80050d6:	d50b      	bpl.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80050d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80050dc:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80050e0:	f000 81d4 	beq.w	800548c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80050e4:	4f63      	ldr	r7, [pc, #396]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80050e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050e8:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80050ec:	4301      	orrs	r1, r0
 80050ee:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050f0:	06d8      	lsls	r0, r3, #27
 80050f2:	d50b      	bpl.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80050f4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80050f8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80050fc:	f000 81db 	beq.w	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005100:	4f5c      	ldr	r7, [pc, #368]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005102:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005104:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8005108:	4301      	orrs	r1, r0
 800510a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800510c:	0319      	lsls	r1, r3, #12
 800510e:	d524      	bpl.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 8005110:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8005114:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8005118:	f000 82b1 	beq.w	800567e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800511c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8005120:	d010      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8005122:	2900      	cmp	r1, #0
 8005124:	f040 8130 	bne.w	8005388 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005128:	4852      	ldr	r0, [pc, #328]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800512a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800512c:	f000 0003 	and.w	r0, r0, #3
 8005130:	2803      	cmp	r0, #3
 8005132:	f000 8129 	beq.w	8005388 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8005136:	f104 0008 	add.w	r0, r4, #8
 800513a:	f7ff fc81 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 800513e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005140:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005144:	2d00      	cmp	r5, #0
 8005146:	f040 81ff 	bne.w	8005548 <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800514a:	4f4a      	ldr	r7, [pc, #296]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800514c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8005150:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005152:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8005156:	4301      	orrs	r1, r0
 8005158:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800515a:	035f      	lsls	r7, r3, #13
 800515c:	d50f      	bpl.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 800515e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005162:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005166:	f000 8277 	beq.w	8005658 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800516a:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800516e:	f000 812d 	beq.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8005172:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005176:	f000 8124 	beq.w	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 800517a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800517c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800517e:	03d8      	lsls	r0, r3, #15
 8005180:	d520      	bpl.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8005182:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005184:	2900      	cmp	r1, #0
 8005186:	f000 81aa 	beq.w	80054de <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800518a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800518e:	f040 80e8 	bne.w	8005362 <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005192:	4938      	ldr	r1, [pc, #224]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005194:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005196:	f001 0103 	and.w	r1, r1, #3
 800519a:	2903      	cmp	r1, #3
 800519c:	f000 80e1 	beq.w	8005362 <HAL_RCCEx_PeriphCLKConfig+0x762>
 80051a0:	2102      	movs	r1, #2
 80051a2:	f104 0008 	add.w	r0, r4, #8
 80051a6:	f7ff fc4b 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 80051aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	f040 819c 	bne.w	80054ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051b6:	4f2f      	ldr	r7, [pc, #188]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051b8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80051ba:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80051bc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80051c0:	4301      	orrs	r1, r0
 80051c2:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051c4:	0099      	lsls	r1, r3, #2
 80051c6:	d50e      	bpl.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051c8:	492a      	ldr	r1, [pc, #168]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051ca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80051cc:	f001 0103 	and.w	r1, r1, #3
 80051d0:	2903      	cmp	r1, #3
 80051d2:	d007      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 80051d4:	2102      	movs	r1, #2
 80051d6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80051da:	f7ff fca1 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051de:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051e2:	b100      	cbz	r0, 80051e6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 80051e4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80051e6:	039f      	lsls	r7, r3, #14
 80051e8:	f100 80ab 	bmi.w	8005342 <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 80051ec:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051ee:	02d8      	lsls	r0, r3, #11
 80051f0:	d506      	bpl.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051f2:	4820      	ldr	r0, [pc, #128]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051f4:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 80051f6:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80051f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80051fc:	4331      	orrs	r1, r6
 80051fe:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005200:	00d9      	lsls	r1, r3, #3
 8005202:	d507      	bpl.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005204:	481b      	ldr	r0, [pc, #108]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005206:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 800520a:	6901      	ldr	r1, [r0, #16]
 800520c:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8005210:	4331      	orrs	r1, r6
 8005212:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005214:	029f      	lsls	r7, r3, #10
 8005216:	d506      	bpl.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005218:	4816      	ldr	r0, [pc, #88]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800521a:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 800521c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800521e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8005222:	4331      	orrs	r1, r6
 8005224:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005226:	005e      	lsls	r6, r3, #1
 8005228:	d509      	bpl.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800522a:	4912      	ldr	r1, [pc, #72]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800522c:	6908      	ldr	r0, [r1, #16]
 800522e:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8005232:	6108      	str	r0, [r1, #16]
 8005234:	6908      	ldr	r0, [r1, #16]
 8005236:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 800523a:	4330      	orrs	r0, r6
 800523c:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800523e:	2b00      	cmp	r3, #0
 8005240:	da06      	bge.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005242:	480c      	ldr	r0, [pc, #48]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005244:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8005246:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005248:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800524c:	4331      	orrs	r1, r6
 800524e:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005250:	0218      	lsls	r0, r3, #8
 8005252:	d507      	bpl.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005254:	4907      	ldr	r1, [pc, #28]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005256:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800525a:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800525c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005260:	4303      	orrs	r3, r0
 8005262:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005264:	07d1      	lsls	r1, r2, #31
 8005266:	d511      	bpl.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005268:	4b02      	ldr	r3, [pc, #8]	@ (8005274 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800526a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	2b03      	cmp	r3, #3
 8005272:	e001      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005274:	58024400 	.word	0x58024400
 8005278:	f000 835c 	beq.w	8005934 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 800527c:	2100      	movs	r1, #0
 800527e:	f104 0008 	add.w	r0, r4, #8
 8005282:	f7ff fbdd 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005286:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005288:	b100      	cbz	r0, 800528c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800528a:	4605      	mov	r5, r0
 800528c:	0793      	lsls	r3, r2, #30
 800528e:	d50e      	bpl.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005290:	4baf      	ldr	r3, [pc, #700]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	2b03      	cmp	r3, #3
 800529a:	f000 834d 	beq.w	8005938 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 800529e:	2101      	movs	r1, #1
 80052a0:	f104 0008 	add.w	r0, r4, #8
 80052a4:	f7ff fbcc 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80052a8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80052aa:	b100      	cbz	r0, 80052ae <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80052ac:	4605      	mov	r5, r0
 80052ae:	0757      	lsls	r7, r2, #29
 80052b0:	d50e      	bpl.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052b2:	4ba7      	ldr	r3, [pc, #668]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	f000 833e 	beq.w	800593c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80052c0:	2102      	movs	r1, #2
 80052c2:	f104 0008 	add.w	r0, r4, #8
 80052c6:	f7ff fbbb 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80052ca:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80052cc:	b100      	cbz	r0, 80052d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80052ce:	4605      	mov	r5, r0
 80052d0:	0716      	lsls	r6, r2, #28
 80052d2:	d50e      	bpl.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052d4:	4b9e      	ldr	r3, [pc, #632]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80052d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	2b03      	cmp	r3, #3
 80052de:	f000 8323 	beq.w	8005928 <HAL_RCCEx_PeriphCLKConfig+0xd28>
 80052e2:	2100      	movs	r1, #0
 80052e4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80052e8:	f7ff fc1a 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80052ec:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80052ee:	b100      	cbz	r0, 80052f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80052f0:	4605      	mov	r5, r0
 80052f2:	06d0      	lsls	r0, r2, #27
 80052f4:	d50f      	bpl.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052f6:	4b96      	ldr	r3, [pc, #600]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80052f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b03      	cmp	r3, #3
 8005300:	f000 8314 	beq.w	800592c <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 8005304:	2101      	movs	r1, #1
 8005306:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800530a:	f7ff fc09 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800530e:	2800      	cmp	r0, #0
 8005310:	f040 8359 	bne.w	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005314:	6862      	ldr	r2, [r4, #4]
 8005316:	0693      	lsls	r3, r2, #26
 8005318:	d50e      	bpl.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800531a:	4b8d      	ldr	r3, [pc, #564]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800531c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	2b03      	cmp	r3, #3
 8005324:	f000 82b7 	beq.w	8005896 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005328:	2102      	movs	r1, #2
 800532a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800532e:	f7ff fbf7 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8005332:	2800      	cmp	r0, #0
 8005334:	f040 82af 	bne.w	8005896 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 8005338:	1e28      	subs	r0, r5, #0
 800533a:	bf18      	it	ne
 800533c:	2001      	movne	r0, #1
}
 800533e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 8005342:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8005346:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800534a:	f000 80d2 	beq.w	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800534e:	f240 8110 	bls.w	8005572 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005352:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8005356:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800535a:	f000 80cf 	beq.w	80054fc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800535e:	2501      	movs	r5, #1
 8005360:	e745      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 8005362:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005364:	4635      	mov	r5, r6
 8005366:	e72d      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005368:	4879      	ldr	r0, [pc, #484]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800536a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800536c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005370:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005372:	2d00      	cmp	r5, #0
 8005374:	f040 80ce 	bne.w	8005514 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005378:	4f75      	ldr	r7, [pc, #468]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800537a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800537c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800537e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8005382:	4301      	orrs	r1, r0
 8005384:	6539      	str	r1, [r7, #80]	@ 0x50
 8005386:	e598      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8005388:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800538a:	4635      	mov	r5, r6
 800538c:	e6e5      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800538e:	4970      	ldr	r1, [pc, #448]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005390:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005392:	f001 0103 	and.w	r1, r1, #3
 8005396:	2903      	cmp	r1, #3
 8005398:	f43f adda 	beq.w	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800539c:	2101      	movs	r1, #1
 800539e:	f104 0008 	add.w	r0, r4, #8
 80053a2:	f7ff fb4d 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 80053a6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053a8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	f040 80d5 	bne.w	800555c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80053b2:	4f67      	ldr	r7, [pc, #412]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80053b4:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80053b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053b8:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 80053bc:	4301      	orrs	r1, r0
 80053be:	6579      	str	r1, [r7, #84]	@ 0x54
 80053c0:	e5c8      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053c2:	4863      	ldr	r0, [pc, #396]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80053c4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80053c6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80053ca:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80053cc:	2d00      	cmp	r5, #0
 80053ce:	f040 809f 	bne.w	8005510 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053d2:	4f5f      	ldr	r7, [pc, #380]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80053d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80053d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053da:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80053de:	4301      	orrs	r1, r0
 80053e0:	6579      	str	r1, [r7, #84]	@ 0x54
 80053e2:	e6cc      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053e4:	4f5b      	ldr	r7, [pc, #364]	@ (8005554 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ec:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80053ee:	f7fc f8ed 	bl	80015cc <HAL_GetTick>
 80053f2:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f4:	e006      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f6:	f7fc f8e9 	bl	80015cc <HAL_GetTick>
 80053fa:	eba0 0008 	sub.w	r0, r0, r8
 80053fe:	2864      	cmp	r0, #100	@ 0x64
 8005400:	f200 82db 	bhi.w	80059ba <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	05da      	lsls	r2, r3, #23
 8005408:	d5f5      	bpl.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 800540a:	2d00      	cmp	r5, #0
 800540c:	f040 82d6 	bne.w	80059bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005410:	4a4f      	ldr	r2, [pc, #316]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005412:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005416:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005418:	4059      	eors	r1, r3
 800541a:	f411 7f40 	tst.w	r1, #768	@ 0x300
 800541e:	d00b      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005420:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005422:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005424:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005428:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800542c:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800542e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8005430:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8005434:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8005436:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800543c:	f000 82fb 	beq.w	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005440:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005444:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005448:	f000 8309 	beq.w	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 800544c:	4940      	ldr	r1, [pc, #256]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800544e:	690a      	ldr	r2, [r1, #16]
 8005450:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8005454:	610a      	str	r2, [r1, #16]
 8005456:	483e      	ldr	r0, [pc, #248]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005458:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800545c:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 800545e:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005460:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005464:	6701      	str	r1, [r0, #112]	@ 0x70
 8005466:	e543      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005468:	4839      	ldr	r0, [pc, #228]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800546a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800546c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005470:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005472:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005474:	2d00      	cmp	r5, #0
 8005476:	f040 8177 	bne.w	8005768 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800547a:	4f35      	ldr	r7, [pc, #212]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800547c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800547e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005480:	f021 0107 	bic.w	r1, r1, #7
 8005484:	4301      	orrs	r1, r0
 8005486:	6539      	str	r1, [r7, #80]	@ 0x50
 8005488:	f7ff bbf6 	b.w	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800548c:	4930      	ldr	r1, [pc, #192]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800548e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005490:	f001 0103 	and.w	r1, r1, #3
 8005494:	2903      	cmp	r1, #3
 8005496:	f000 82ba 	beq.w	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 800549a:	2102      	movs	r1, #2
 800549c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80054a0:	f7ff fb3e 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f000 82b5 	beq.w	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054aa:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 80054ae:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054b4:	e616      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054b6:	4926      	ldr	r1, [pc, #152]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054b8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80054ba:	f001 0103 	and.w	r1, r1, #3
 80054be:	2903      	cmp	r1, #3
 80054c0:	f000 82a2 	beq.w	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80054c4:	2102      	movs	r1, #2
 80054c6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80054ca:	f7ff fb29 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f040 82a6 	bne.w	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054d4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054dc:	e610      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054de:	481c      	ldr	r0, [pc, #112]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054e0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80054e2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80054e6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80054e8:	2d00      	cmp	r5, #0
 80054ea:	f43f ae64 	beq.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 80054ee:	462e      	mov	r6, r5
 80054f0:	e668      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f2:	4f17      	ldr	r7, [pc, #92]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054f6:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80054fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	f47f ae76 	bne.w	80051ee <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005502:	4d13      	ldr	r5, [pc, #76]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005504:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8005506:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800550a:	4301      	orrs	r1, r0
 800550c:	6569      	str	r1, [r5, #84]	@ 0x54
 800550e:	e66d      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 8005510:	462e      	mov	r6, r5
 8005512:	e634      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 8005514:	462e      	mov	r6, r5
 8005516:	e4d0      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8005518:	462e      	mov	r6, r5
 800551a:	e445      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800551c:	4f0c      	ldr	r7, [pc, #48]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800551e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005520:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005522:	f021 0103 	bic.w	r1, r1, #3
 8005526:	4301      	orrs	r1, r0
 8005528:	64f9      	str	r1, [r7, #76]	@ 0x4c
 800552a:	e4de      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800552c:	4f08      	ldr	r7, [pc, #32]	@ (8005550 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800552e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005530:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005532:	f021 0107 	bic.w	r1, r1, #7
 8005536:	4301      	orrs	r1, r0
 8005538:	6579      	str	r1, [r7, #84]	@ 0x54
 800553a:	e52c      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 800553c:	462e      	mov	r6, r5
 800553e:	e577      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 8005540:	462e      	mov	r6, r5
 8005542:	e4aa      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 8005544:	462e      	mov	r6, r5
 8005546:	e59c      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 8005548:	462e      	mov	r6, r5
 800554a:	e606      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 800554c:	462e      	mov	r6, r5
 800554e:	e5c1      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005550:	58024400 	.word	0x58024400
 8005554:	58024800 	.word	0x58024800
      status = ret;
 8005558:	462e      	mov	r6, r5
 800555a:	e475      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 800555c:	462e      	mov	r6, r5
 800555e:	e4f9      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005560:	4fc2      	ldr	r7, [pc, #776]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005562:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8005566:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005568:	f021 0107 	bic.w	r1, r1, #7
 800556c:	4301      	orrs	r1, r0
 800556e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005570:	e535      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 8005572:	2900      	cmp	r1, #0
 8005574:	f47f aef3 	bne.w	800535e <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8005578:	e7c0      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800557a:	49bc      	ldr	r1, [pc, #752]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800557c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800557e:	f001 0103 	and.w	r1, r1, #3
 8005582:	2903      	cmp	r1, #3
 8005584:	f000 8194 	beq.w	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8005588:	2102      	movs	r1, #2
 800558a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800558e:	f7ff fac7 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 8005592:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005594:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005598:	2d00      	cmp	r5, #0
 800559a:	d1cf      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800559c:	e540      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800559e:	49b3      	ldr	r1, [pc, #716]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80055a0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80055a2:	f001 0103 	and.w	r1, r1, #3
 80055a6:	2903      	cmp	r1, #3
 80055a8:	f000 81ba 	beq.w	8005920 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80055ac:	2102      	movs	r1, #2
 80055ae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80055b2:	f7ff fab5 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 80055b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80055bc:	2d00      	cmp	r5, #0
 80055be:	d1c1      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80055c0:	e557      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055c2:	49aa      	ldr	r1, [pc, #680]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80055c4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80055c6:	f001 0103 	and.w	r1, r1, #3
 80055ca:	2903      	cmp	r1, #3
 80055cc:	f000 818c 	beq.w	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80055d0:	2102      	movs	r1, #2
 80055d2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80055d6:	f7ff faa3 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 80055da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80055dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	d1b3      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 80055e4:	e56e      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055e6:	49a1      	ldr	r1, [pc, #644]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80055e8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80055ea:	f001 0103 	and.w	r1, r1, #3
 80055ee:	2903      	cmp	r1, #3
 80055f0:	f000 81df 	beq.w	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 80055f4:	2102      	movs	r1, #2
 80055f6:	f104 0008 	add.w	r0, r4, #8
 80055fa:	f7ff fa21 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 80055fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005600:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005604:	2d00      	cmp	r5, #0
 8005606:	d187      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8005608:	f7ff bbc7 	b.w	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800560c:	4997      	ldr	r1, [pc, #604]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800560e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005610:	f001 0103 	and.w	r1, r1, #3
 8005614:	2903      	cmp	r1, #3
 8005616:	f000 820a 	beq.w	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800561a:	2102      	movs	r1, #2
 800561c:	f104 0008 	add.w	r0, r4, #8
 8005620:	f7ff fa0e 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 8005624:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005626:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800562a:	2d00      	cmp	r5, #0
 800562c:	f47f ac5c 	bne.w	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005630:	e774      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005632:	498e      	ldr	r1, [pc, #568]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005634:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005636:	f001 0103 	and.w	r1, r1, #3
 800563a:	2903      	cmp	r1, #3
 800563c:	f000 8146 	beq.w	80058cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005640:	2101      	movs	r1, #1
 8005642:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005646:	f7ff fa6b 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 800564a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800564c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005650:	2d00      	cmp	r5, #0
 8005652:	d181      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8005654:	f7ff bbf1 	b.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005658:	4984      	ldr	r1, [pc, #528]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800565a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800565c:	f001 0103 	and.w	r1, r1, #3
 8005660:	2903      	cmp	r1, #3
 8005662:	f43f ad8a 	beq.w	800517a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005666:	2101      	movs	r1, #1
 8005668:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800566c:	f7ff fa58 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 8005670:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005672:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005676:	2d00      	cmp	r5, #0
 8005678:	f47f af4a 	bne.w	8005510 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800567c:	e6a9      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800567e:	497b      	ldr	r1, [pc, #492]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005680:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005682:	f001 0103 	and.w	r1, r1, #3
 8005686:	2903      	cmp	r1, #3
 8005688:	f43f ae7e 	beq.w	8005388 <HAL_RCCEx_PeriphCLKConfig+0x788>
 800568c:	2102      	movs	r1, #2
 800568e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005692:	f7ff fa45 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 8005696:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005698:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800569c:	2d00      	cmp	r5, #0
 800569e:	f47f af53 	bne.w	8005548 <HAL_RCCEx_PeriphCLKConfig+0x948>
 80056a2:	e552      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056a4:	4971      	ldr	r1, [pc, #452]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80056a6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80056a8:	f001 0103 	and.w	r1, r1, #3
 80056ac:	2903      	cmp	r1, #3
 80056ae:	f000 8129 	beq.w	8005904 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 80056b2:	2101      	movs	r1, #1
 80056b4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80056b8:	f7ff fa32 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 80056bc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056be:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80056c2:	2d00      	cmp	r5, #0
 80056c4:	f47f af3c 	bne.w	8005540 <HAL_RCCEx_PeriphCLKConfig+0x940>
 80056c8:	f7ff bbdf 	b.w	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056cc:	4867      	ldr	r0, [pc, #412]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80056ce:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80056d0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80056d4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	f43f ab88 	beq.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 80056dc:	462e      	mov	r6, r5
 80056de:	f7ff bb8c 	b.w	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e2:	4862      	ldr	r0, [pc, #392]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80056e4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80056e6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80056ea:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	f43f ab38 	beq.w	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 80056f2:	462e      	mov	r6, r5
 80056f4:	f7ff bb3d 	b.w	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056f8:	495c      	ldr	r1, [pc, #368]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80056fa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80056fc:	f001 0103 	and.w	r1, r1, #3
 8005700:	2903      	cmp	r1, #3
 8005702:	f000 8125 	beq.w	8005950 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8005706:	2100      	movs	r1, #0
 8005708:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800570c:	f7ff fa08 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 8005710:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005712:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005716:	f7ff bb66 	b.w	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800571a:	4954      	ldr	r1, [pc, #336]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800571c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800571e:	f001 0103 	and.w	r1, r1, #3
 8005722:	2903      	cmp	r1, #3
 8005724:	f000 813e 	beq.w	80059a4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8005728:	2100      	movs	r1, #0
 800572a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800572e:	f7ff f9f7 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 8005732:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005734:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005738:	2d00      	cmp	r5, #0
 800573a:	f43f aabd 	beq.w	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 800573e:	462e      	mov	r6, r5
 8005740:	f7ff bac1 	b.w	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005744:	4949      	ldr	r1, [pc, #292]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005746:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005748:	f001 0103 	and.w	r1, r1, #3
 800574c:	2903      	cmp	r1, #3
 800574e:	f43f aa91 	beq.w	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005752:	2100      	movs	r1, #0
 8005754:	f104 0008 	add.w	r0, r4, #8
 8005758:	f7ff f972 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 800575c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800575e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005762:	2d00      	cmp	r5, #0
 8005764:	f43f ae89 	beq.w	800547a <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 8005768:	462e      	mov	r6, r5
 800576a:	f7ff ba85 	b.w	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800576e:	493f      	ldr	r1, [pc, #252]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005770:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005772:	f001 0103 	and.w	r1, r1, #3
 8005776:	2903      	cmp	r1, #3
 8005778:	f43f aa7c 	beq.w	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800577c:	2100      	movs	r1, #0
 800577e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005782:	f7ff f9cd 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 8005786:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005788:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800578c:	e672      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800578e:	4937      	ldr	r1, [pc, #220]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005790:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005792:	f001 0103 	and.w	r1, r1, #3
 8005796:	2903      	cmp	r1, #3
 8005798:	f000 80f9 	beq.w	800598e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800579c:	2100      	movs	r1, #0
 800579e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80057a2:	f7ff f9bd 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 80057a6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80057a8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80057ac:	2d00      	cmp	r5, #0
 80057ae:	f43f aaad 	beq.w	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 80057b2:	462e      	mov	r6, r5
 80057b4:	f7ff bab2 	b.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057b8:	492c      	ldr	r1, [pc, #176]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057ba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80057bc:	f001 0103 	and.w	r1, r1, #3
 80057c0:	2903      	cmp	r1, #3
 80057c2:	f000 80d1 	beq.w	8005968 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 80057c6:	2100      	movs	r1, #0
 80057c8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80057cc:	f7ff f9a8 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 80057d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057d2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80057d6:	f7ff bac1 	b.w	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057da:	4924      	ldr	r1, [pc, #144]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057dc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80057de:	f001 0103 	and.w	r1, r1, #3
 80057e2:	2903      	cmp	r1, #3
 80057e4:	f000 80c8 	beq.w	8005978 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80057e8:	2102      	movs	r1, #2
 80057ea:	3028      	adds	r0, #40	@ 0x28
 80057ec:	f7ff f998 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 80057f0:	4606      	mov	r6, r0
        break;
 80057f2:	f7ff ba28 	b.w	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f6:	481d      	ldr	r0, [pc, #116]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057f8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80057fa:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80057fe:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8005800:	f7ff ba81 	b.w	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005804:	4819      	ldr	r0, [pc, #100]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005806:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005808:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800580c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 800580e:	f7ff ba50 	b.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005812:	4d16      	ldr	r5, [pc, #88]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005814:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8005816:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800581a:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 800581c:	f7ff ba17 	b.w	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005820:	4912      	ldr	r1, [pc, #72]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005822:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005824:	f001 0103 	and.w	r1, r1, #3
 8005828:	2903      	cmp	r1, #3
 800582a:	f000 80e5 	beq.w	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 800582e:	2101      	movs	r1, #1
 8005830:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005834:	f7ff f974 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 8005838:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800583a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800583e:	2d00      	cmp	r5, #0
 8005840:	f47f abcc 	bne.w	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8005844:	e68c      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005846:	4909      	ldr	r1, [pc, #36]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005848:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800584a:	f001 0103 	and.w	r1, r1, #3
 800584e:	2903      	cmp	r1, #3
 8005850:	f000 80d6 	beq.w	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8005854:	2101      	movs	r1, #1
 8005856:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800585a:	f7ff f961 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 800585e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005860:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005864:	2d00      	cmp	r5, #0
 8005866:	f47f ab95 	bne.w	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800586a:	e65f      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x92c>
 800586c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005870:	4983      	ldr	r1, [pc, #524]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005872:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005874:	f001 0103 	and.w	r1, r1, #3
 8005878:	2903      	cmp	r1, #3
 800587a:	f43f ab69 	beq.w	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800587e:	2101      	movs	r1, #1
 8005880:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005884:	f7ff f94c 	bl	8004b20 <RCCEx_PLL3_Config.part.0>
 8005888:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800588a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800588e:	2d00      	cmp	r5, #0
 8005890:	f47f ae64 	bne.w	800555c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005894:	e58d      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 8005896:	2001      	movs	r0, #1
}
 8005898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800589c:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 80058a0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80058a4:	f43f abb9 	beq.w	800501a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80058a8:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 80058ac:	f43f abb5 	beq.w	800501a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 80058b0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80058b2:	4635      	mov	r5, r6
 80058b4:	f7ff bbbc 	b.w	8005030 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 80058b8:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 80058bc:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 80058c0:	f43f aab8 	beq.w	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80058c4:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 80058c8:	f43f aab4 	beq.w	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 80058cc:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80058ce:	4635      	mov	r5, r6
 80058d0:	f7ff baba 	b.w	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80058d4:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 80058d8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80058dc:	f43f abef 	beq.w	80050be <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80058e0:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 80058e4:	f43f abeb 	beq.w	80050be <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 80058e8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80058ea:	4635      	mov	r5, r6
 80058ec:	f7ff bbf2 	b.w	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 80058f0:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 80058f4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80058f8:	f43f aac4 	beq.w	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80058fc:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8005900:	f43f aac0 	beq.w	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 8005904:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005906:	4635      	mov	r5, r6
 8005908:	f7ff bac7 	b.w	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800590c:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8005910:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8005914:	f43f abaa 	beq.w	800506c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8005918:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 800591c:	f43f aba6 	beq.w	800506c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 8005920:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005922:	4635      	mov	r5, r6
 8005924:	f7ff bbad 	b.w	8005082 <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 8005928:	2501      	movs	r5, #1
 800592a:	e4e2      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800592c:	0691      	lsls	r1, r2, #26
 800592e:	d5b2      	bpl.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 8005930:	2501      	movs	r5, #1
 8005932:	e4f2      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 8005934:	2501      	movs	r5, #1
 8005936:	e4a9      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005938:	2501      	movs	r5, #1
 800593a:	e4b8      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 800593c:	2501      	movs	r5, #1
 800593e:	e4c7      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005940:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8005944:	f43f aa4f 	beq.w	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8005948:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800594c:	f43f aa4b 	beq.w	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 8005950:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005952:	4635      	mov	r5, r6
 8005954:	f7ff ba51 	b.w	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005958:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 800595c:	f43f a9fe 	beq.w	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005960:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8005964:	f43f a9fa 	beq.w	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 8005968:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800596a:	4635      	mov	r5, r6
 800596c:	f7ff ba01 	b.w	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005970:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8005974:	f43f a96b 	beq.w	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 8005978:	2601      	movs	r6, #1
 800597a:	f7ff b96f 	b.w	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 800597e:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8005982:	f43f a9c0 	beq.w	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005986:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800598a:	f43f a9bc 	beq.w	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 800598e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005990:	4635      	mov	r5, r6
 8005992:	f7ff b9c3 	b.w	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 8005996:	29c0      	cmp	r1, #192	@ 0xc0
 8005998:	f43f a98b 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 800599c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80059a0:	f43f a987 	beq.w	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 80059a4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80059a6:	4635      	mov	r5, r6
 80059a8:	f7ff b98d 	b.w	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 80059ac:	2930      	cmp	r1, #48	@ 0x30
 80059ae:	f43f a9f1 	beq.w	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 80059b2:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80059b4:	4635      	mov	r5, r6
 80059b6:	f7ff b9f7 	b.w	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 80059ba:	2503      	movs	r5, #3
      status = ret;
 80059bc:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059be:	e9d4 3200 	ldrd	r3, r2, [r4]
 80059c2:	f7ff ba95 	b.w	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80059c6:	6863      	ldr	r3, [r4, #4]
 80059c8:	069a      	lsls	r2, r3, #26
 80059ca:	f57f af64 	bpl.w	8005896 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80059ce:	4605      	mov	r5, r0
 80059d0:	e4a3      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059d2:	492b      	ldr	r1, [pc, #172]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 80059d4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80059d6:	f001 0103 	and.w	r1, r1, #3
 80059da:	2903      	cmp	r1, #3
 80059dc:	f43f aa6b 	beq.w	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80059e0:	2101      	movs	r1, #1
 80059e2:	f104 0008 	add.w	r0, r4, #8
 80059e6:	f7ff f82b 	bl	8004a40 <RCCEx_PLL2_Config.part.0>
 80059ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80059ec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80059f0:	2d00      	cmp	r5, #0
 80059f2:	f47f ad8f 	bne.w	8005514 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80059f6:	e4bf      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 80059f8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80059fa:	4635      	mov	r5, r6
 80059fc:	f7ff baef 	b.w	8004fde <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 8005a00:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005a02:	4635      	mov	r5, r6
 8005a04:	f7ff bac7 	b.w	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 8005a08:	2601      	movs	r6, #1
 8005a0a:	f7ff bb79 	b.w	8005100 <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 8005a0e:	2601      	movs	r6, #1
 8005a10:	f7ff bb68 	b.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a14:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a18:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005a1c:	f7ff bb62 	b.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a20:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 8005a24:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a26:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005a2a:	f7ff bb69 	b.w	8005100 <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 8005a2e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005a30:	4635      	mov	r5, r6
 8005a32:	f7ff ba5a 	b.w	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 8005a36:	f7fb fdc9 	bl	80015cc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a3a:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8005a80 <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 8005a3e:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a40:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a44:	e004      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a46:	f7fb fdc1 	bl	80015cc <HAL_GetTick>
 8005a4a:	1bc0      	subs	r0, r0, r7
 8005a4c:	4548      	cmp	r0, r9
 8005a4e:	d810      	bhi.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a50:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8005a54:	079b      	lsls	r3, r3, #30
 8005a56:	d5f6      	bpl.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a58:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005a5c:	e4f0      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005a5e:	4808      	ldr	r0, [pc, #32]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005a60:	4a08      	ldr	r2, [pc, #32]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 8005a62:	6901      	ldr	r1, [r0, #16]
 8005a64:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005a68:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	6102      	str	r2, [r0, #16]
 8005a70:	e4f1      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 8005a72:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a74:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005a78:	4635      	mov	r5, r6
 8005a7a:	f7ff ba39 	b.w	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8005a7e:	bf00      	nop
 8005a80:	58024400 	.word	0x58024400
 8005a84:	00ffffcf 	.word	0x00ffffcf

08005a88 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a88:	4a47      	ldr	r2, [pc, #284]	@ (8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8005a8a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a8c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a8e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a90:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8005a92:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a96:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a9a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8005a9c:	d05b      	beq.n	8005b56 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a9e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005aa2:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aa6:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aaa:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005aae:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005ab2:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ab8:	ee06 1a90 	vmov	s13, r1
 8005abc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005ac0:	d003      	beq.n	8005aca <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8005ac2:	2c02      	cmp	r4, #2
 8005ac4:	d06a      	beq.n	8005b9c <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8005ac6:	2c00      	cmp	r4, #0
 8005ac8:	d04a      	beq.n	8005b60 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aca:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005ace:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005ad2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad8:	ee07 3a90 	vmov	s15, r3
 8005adc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ae4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aec:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005af0:	4a2d      	ldr	r2, [pc, #180]	@ (8005ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8005af2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005af6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005af8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005afc:	ee07 3a10 	vmov	s14, r3
 8005b00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005b04:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b06:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005b0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b0e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005b12:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b16:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005b18:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005b1c:	ee07 3a10 	vmov	s14, r3
 8005b20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005b24:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005b28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b2c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005b30:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b34:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005b36:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005b3a:	ee06 3a90 	vmov	s13, r3
 8005b3e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005b42:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005b46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005b4a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005b4e:	ee17 3a90 	vmov	r3, s15
 8005b52:	6083      	str	r3, [r0, #8]
}
 8005b54:	4770      	bx	lr
 8005b56:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b58:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b5c:	6083      	str	r3, [r0, #8]
}
 8005b5e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b60:	6813      	ldr	r3, [r2, #0]
 8005b62:	069b      	lsls	r3, r3, #26
 8005b64:	d51d      	bpl.n	8005ba2 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b66:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b68:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005b6c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b6e:	4910      	ldr	r1, [pc, #64]	@ (8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8005b70:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b78:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b7a:	ee06 3a10 	vmov	s12, r3
 8005b7e:	ee05 1a90 	vmov	s11, r1
 8005b82:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005b86:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005b8a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b8e:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005b92:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b9a:	e7a9      	b.n	8005af0 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b9c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8005ba0:	e795      	b.n	8005ace <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ba2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8005ba6:	e792      	b.n	8005ace <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005ba8:	58024400 	.word	0x58024400
 8005bac:	4a742400 	.word	0x4a742400
 8005bb0:	03d09000 	.word	0x03d09000
 8005bb4:	4bbebc20 	.word	0x4bbebc20
 8005bb8:	4c742400 	.word	0x4c742400

08005bbc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bbc:	4a47      	ldr	r2, [pc, #284]	@ (8005cdc <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8005bbe:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bc0:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005bc2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005bc4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8005bc6:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005bca:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005bce:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8005bd0:	d05b      	beq.n	8005c8a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005bd2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005bd6:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bda:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bde:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005be2:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005be6:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bec:	ee06 1a90 	vmov	s13, r1
 8005bf0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005bf4:	d003      	beq.n	8005bfe <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8005bf6:	2c02      	cmp	r4, #2
 8005bf8:	d06a      	beq.n	8005cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 8005bfa:	2c00      	cmp	r4, #0
 8005bfc:	d04a      	beq.n	8005c94 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bfe:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005c02:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005c06:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0c:	ee07 3a90 	vmov	s15, r3
 8005c10:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c18:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c20:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c24:	4a2d      	ldr	r2, [pc, #180]	@ (8005cdc <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8005c26:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005c2a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005c2c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005c30:	ee07 3a10 	vmov	s14, r3
 8005c34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005c38:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005c3a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c42:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005c46:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005c4a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005c4c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005c50:	ee07 3a10 	vmov	s14, r3
 8005c54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005c58:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c60:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005c64:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c68:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005c6a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005c6e:	ee06 3a90 	vmov	s13, r3
 8005c72:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005c76:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005c7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005c7e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005c82:	ee17 3a90 	vmov	r3, s15
 8005c86:	6083      	str	r3, [r0, #8]
}
 8005c88:	4770      	bx	lr
 8005c8a:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c8c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c90:	6083      	str	r3, [r0, #8]
}
 8005c92:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c94:	6813      	ldr	r3, [r2, #0]
 8005c96:	069b      	lsls	r3, r3, #26
 8005c98:	d51d      	bpl.n	8005cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c9a:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c9c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005ca0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ca2:	4910      	ldr	r1, [pc, #64]	@ (8005ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8005ca4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cac:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cae:	ee06 3a10 	vmov	s12, r3
 8005cb2:	ee05 1a90 	vmov	s11, r1
 8005cb6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005cba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005cbe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005cc2:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005cc6:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cce:	e7a9      	b.n	8005c24 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cd0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8005cd4:	e795      	b.n	8005c02 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cd6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005cec <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8005cda:	e792      	b.n	8005c02 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8005cdc:	58024400 	.word	0x58024400
 8005ce0:	4a742400 	.word	0x4a742400
 8005ce4:	03d09000 	.word	0x03d09000
 8005ce8:	4bbebc20 	.word	0x4bbebc20
 8005cec:	4c742400 	.word	0x4c742400

08005cf0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cf0:	4a47      	ldr	r2, [pc, #284]	@ (8005e10 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8005cf2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cf4:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005cf6:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005cf8:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 8005cfa:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005cfe:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d02:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8005d04:	d05b      	beq.n	8005dbe <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d06:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005d0a:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d0e:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d12:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d16:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005d1a:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d20:	ee06 1a90 	vmov	s13, r1
 8005d24:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005d28:	d04e      	beq.n	8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8005d2a:	2c02      	cmp	r4, #2
 8005d2c:	d06d      	beq.n	8005e0a <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	d04d      	beq.n	8005dce <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d32:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005e14 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8005d36:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005d3a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d4c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d54:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005d58:	4a2d      	ldr	r2, [pc, #180]	@ (8005e10 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8005d5a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005d5e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005d60:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005d64:	ee07 3a10 	vmov	s14, r3
 8005d68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005d6c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005d6e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005d72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d76:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005d7a:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005d7e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005d80:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005d84:	ee07 3a10 	vmov	s14, r3
 8005d88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d8c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005d90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d94:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005d98:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005d9c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005d9e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005da2:	ee06 3a90 	vmov	s13, r3
 8005da6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005daa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005dae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005db2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005db6:	ee17 3a90 	vmov	r3, s15
 8005dba:	6083      	str	r3, [r0, #8]
}
 8005dbc:	4770      	bx	lr
 8005dbe:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005dc0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005dc4:	6083      	str	r3, [r0, #8]
}
 8005dc6:	4770      	bx	lr
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc8:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8005e18 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 8005dcc:	e7b3      	b.n	8005d36 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dce:	6813      	ldr	r3, [r2, #0]
 8005dd0:	069b      	lsls	r3, r3, #26
 8005dd2:	d5ae      	bpl.n	8005d32 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dd4:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dd6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005dda:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ddc:	490f      	ldr	r1, [pc, #60]	@ (8005e1c <HAL_RCCEx_GetPLL1ClockFreq+0x12c>)
 8005dde:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005de6:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005de8:	ee06 3a10 	vmov	s12, r3
 8005dec:	ee05 1a90 	vmov	s11, r1
 8005df0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005df4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005df8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005dfc:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005e00:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e08:	e7a6      	b.n	8005d58 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e0a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005e20 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8005e0e:	e792      	b.n	8005d36 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8005e10:	58024400 	.word	0x58024400
 8005e14:	4c742400 	.word	0x4c742400
 8005e18:	4a742400 	.word	0x4a742400
 8005e1c:	03d09000 	.word	0x03d09000
 8005e20:	4bbebc20 	.word	0x4bbebc20

08005e24 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e24:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8005e28:	430b      	orrs	r3, r1
{
 8005e2a:	b500      	push	{lr}
 8005e2c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e2e:	d04c      	beq.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005e30:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8005e34:	430b      	orrs	r3, r1
 8005e36:	d036      	beq.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005e38:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	d06c      	beq.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005e40:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8005e44:	430b      	orrs	r3, r1
 8005e46:	d04b      	beq.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005e48:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	f000 80b6 	beq.w	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005e52:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8005e56:	430b      	orrs	r3, r1
 8005e58:	f000 80ec 	beq.w	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e5c:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8005e60:	430b      	orrs	r3, r1
 8005e62:	d069      	beq.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e64:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	f000 80d6 	beq.w	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e6e:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8005e72:	430b      	orrs	r3, r1
 8005e74:	f000 8109 	beq.w	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005e78:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8005e7c:	4308      	orrs	r0, r1
 8005e7e:	d120      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005e80:	4a95      	ldr	r2, [pc, #596]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e82:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005e84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8005e88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e8c:	f000 80aa 	beq.w	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8005e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e94:	f000 8116 	beq.w	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005e98:	b99b      	cbnz	r3, 8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e9a:	6810      	ldr	r0, [r2, #0]
 8005e9c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005ea0:	d047      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8005ea2:	488e      	ldr	r0, [pc, #568]	@ (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
  return frequency;
 8005ea4:	e045      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005ea6:	4a8c      	ldr	r2, [pc, #560]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ea8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005eaa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 8005eae:	2b80      	cmp	r3, #128	@ 0x80
 8005eb0:	f000 8093 	beq.w	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8005eb4:	f240 808b 	bls.w	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005eb8:	2bc0      	cmp	r3, #192	@ 0xc0
 8005eba:	d039      	beq.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ec0:	d05c      	beq.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
          frequency = 0;
 8005ec2:	2000      	movs	r0, #0
}
 8005ec4:	b005      	add	sp, #20
 8005ec6:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005eca:	4b83      	ldr	r3, [pc, #524]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ece:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d8f5      	bhi.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8005ed6:	e8df f003 	tbb	[pc, r3]
 8005eda:	3c68      	.short	0x3c68
 8005edc:	2b46      	.short	0x2b46
 8005ede:	50          	.byte	0x50
 8005edf:	00          	.byte	0x00
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005ee0:	4a7d      	ldr	r2, [pc, #500]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ee2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005ee4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 8005ee8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005eec:	d075      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8005eee:	d96e      	bls.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005ef0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ef4:	d01c      	beq.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005ef6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005efa:	d1e2      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005efc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005efe:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f04:	0752      	lsls	r2, r2, #29
 8005f06:	d541      	bpl.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d13f      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f0c:	4b72      	ldr	r3, [pc, #456]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f0e:	4874      	ldr	r0, [pc, #464]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f16:	40d8      	lsrs	r0, r3
 8005f18:	e00b      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005f1a:	4a6f      	ldr	r2, [pc, #444]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f1c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005f1e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 8005f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f26:	d058      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8005f28:	d951      	bls.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005f2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f2e:	d15e      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f30:	486c      	ldr	r0, [pc, #432]	@ (80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8005f32:	b005      	add	sp, #20
 8005f34:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005f38:	4a67      	ldr	r2, [pc, #412]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f3a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005f3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8005f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f44:	f000 80df 	beq.w	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 8005f48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f4c:	d0d6      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1b7      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f52:	4b61      	ldr	r3, [pc, #388]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005f5a:	d0ea      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f5c:	a801      	add	r0, sp, #4
 8005f5e:	f7ff fd93 	bl	8005a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f62:	9801      	ldr	r0, [sp, #4]
 8005f64:	e7e5      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f66:	4b5c      	ldr	r3, [pc, #368]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005f6e:	d0e0      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f70:	a801      	add	r0, sp, #4
 8005f72:	f7ff fe23 	bl	8005bbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f76:	9801      	ldr	r0, [sp, #4]
 8005f78:	e7db      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f7a:	4a57      	ldr	r2, [pc, #348]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f7c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f7e:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f84:	0749      	lsls	r1, r1, #29
 8005f86:	d501      	bpl.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d038      	beq.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f8c:	4a52      	ldr	r2, [pc, #328]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	05d0      	lsls	r0, r2, #23
 8005f92:	d502      	bpl.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8005f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f98:	d067      	beq.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f9a:	4a4f      	ldr	r2, [pc, #316]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f9c:	6812      	ldr	r2, [r2, #0]
 8005f9e:	0391      	lsls	r1, r2, #14
 8005fa0:	d58f      	bpl.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8005fa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fa6:	d18c      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8005fa8:	e77b      	b.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005faa:	4b4b      	ldr	r3, [pc, #300]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005fb2:	d0be      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fb4:	a801      	add	r0, sp, #4
 8005fb6:	f7ff fe9b 	bl	8005cf0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fba:	9802      	ldr	r0, [sp, #8]
 8005fbc:	e7b9      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005fbe:	4a46      	ldr	r2, [pc, #280]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fc0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005fc2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8005fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fca:	d006      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8005fcc:	d81d      	bhi.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005fce:	b14b      	cbz	r3, 8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fd0:	6810      	ldr	r0, [r2, #0]
 8005fd2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005fd6:	d0ac      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005fd8:	e7c0      	b.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fda:	6810      	ldr	r0, [r2, #0]
 8005fdc:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005fe0:	d0a7      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005fe2:	e7c5      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fe4:	6810      	ldr	r0, [r2, #0]
 8005fe6:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005fea:	d0a2      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005fec:	e7e2      	b.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
    switch (saiclocksource)
 8005fee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ff2:	d0c3      	beq.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8005ff4:	e765      	b.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ff6:	6810      	ldr	r0, [r2, #0]
 8005ff8:	f010 0004 	ands.w	r0, r0, #4
 8005ffc:	d099      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ffe:	6813      	ldr	r3, [r2, #0]
 8006000:	4837      	ldr	r0, [pc, #220]	@ (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006002:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006006:	40d8      	lsrs	r0, r3
 8006008:	e793      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800600a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800600e:	d08f      	beq.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006010:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006014:	f43f af72 	beq.w	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006018:	e753      	b.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800601a:	4b2f      	ldr	r3, [pc, #188]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800601c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 800601e:	03d2      	lsls	r2, r2, #15
 8006020:	d5c4      	bpl.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006028:	d083      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800602a:	a801      	add	r0, sp, #4
 800602c:	f7ff fd2c 	bl	8005a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006030:	9803      	ldr	r0, [sp, #12]
 8006032:	e77e      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006034:	4a28      	ldr	r2, [pc, #160]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006036:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006038:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 800603c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006040:	d0d9      	beq.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8006042:	d814      	bhi.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8006044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006048:	d03c      	beq.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800604a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800604e:	d04f      	beq.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8006050:	2b00      	cmp	r3, #0
 8006052:	f47f af36 	bne.w	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
}
 8006056:	b005      	add	sp, #20
 8006058:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800605c:	f7fe bca8 	b.w	80049b0 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006060:	6810      	ldr	r0, [r2, #0]
 8006062:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8006066:	f43f af64 	beq.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 800606a:	481f      	ldr	r0, [pc, #124]	@ (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800606c:	e761      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800606e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006072:	d0f5      	beq.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8006074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006078:	f47f af23 	bne.w	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800607c:	4b16      	ldr	r3, [pc, #88]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8006084:	f43f af55 	beq.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006088:	e70b      	b.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800608a:	4b13      	ldr	r3, [pc, #76]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8006092:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006096:	d04e      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8006098:	d83f      	bhi.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800609a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800609e:	d043      	beq.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80060a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a4:	d024      	beq.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f47f af0b 	bne.w	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80060ac:	f7fe fc40 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 80060b0:	4b09      	ldr	r3, [pc, #36]	@ (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060b2:	4a0e      	ldr	r2, [pc, #56]	@ (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80060ba:	5cd3      	ldrb	r3, [r2, r3]
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	40d8      	lsrs	r0, r3
        break;
 80060c2:	e736      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060c4:	6810      	ldr	r0, [r2, #0]
 80060c6:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80060ca:	f43f af32 	beq.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ce:	a801      	add	r0, sp, #4
 80060d0:	f7ff fcda 	bl	8005a88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060d4:	9802      	ldr	r0, [sp, #8]
 80060d6:	e72c      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80060d8:	58024400 	.word	0x58024400
 80060dc:	017d7840 	.word	0x017d7840
 80060e0:	03d09000 	.word	0x03d09000
 80060e4:	00bb8000 	.word	0x00bb8000
 80060e8:	003d0900 	.word	0x003d0900
 80060ec:	0800c654 	.word	0x0800c654
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060f0:	4b1a      	ldr	r3, [pc, #104]	@ (800615c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80060f8:	f43f af1b 	beq.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060fc:	a801      	add	r0, sp, #4
 80060fe:	f7ff fd5d 	bl	8005bbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006102:	9802      	ldr	r0, [sp, #8]
 8006104:	e715      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006106:	6810      	ldr	r0, [r2, #0]
 8006108:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800610c:	f43f af11 	beq.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006110:	a801      	add	r0, sp, #4
 8006112:	f7ff fd53 	bl	8005bbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006116:	9803      	ldr	r0, [sp, #12]
 8006118:	e70b      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611e:	d016      	beq.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006124:	d0aa      	beq.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006126:	e6cc      	b.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006128:	4b0c      	ldr	r3, [pc, #48]	@ (800615c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006130:	f43f aeff 	beq.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006134:	e7cb      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006136:	4b09      	ldr	r3, [pc, #36]	@ (800615c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	f010 0004 	ands.w	r0, r0, #4
 800613e:	f43f aef8 	beq.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4806      	ldr	r0, [pc, #24]	@ (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8006146:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800614a:	40d8      	lsrs	r0, r3
 800614c:	e6f1      	b.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800614e:	4b03      	ldr	r3, [pc, #12]	@ (800615c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8006156:	f43f aeec 	beq.w	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800615a:	e786      	b.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 800615c:	58024400 	.word	0x58024400
 8006160:	03d09000 	.word	0x03d09000

08006164 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006164:	2800      	cmp	r0, #0
 8006166:	f000 8095 	beq.w	8006294 <HAL_TIM_Base_Init+0x130>
{
 800616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800616c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006170:	4604      	mov	r4, r0
 8006172:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 8087 	beq.w	800628a <HAL_TIM_Base_Init+0x126>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800617c:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800617e:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006180:	4945      	ldr	r1, [pc, #276]	@ (8006298 <HAL_TIM_Base_Init+0x134>)
 8006182:	4d46      	ldr	r5, [pc, #280]	@ (800629c <HAL_TIM_Base_Init+0x138>)
 8006184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006188:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800618c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006190:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 8006194:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006196:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800619a:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800619c:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a0:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061a2:	ea4f 1151 	mov.w	r1, r1, lsr #5

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061a6:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061a8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80061ac:	d01f      	beq.n	80061ee <HAL_TIM_Base_Init+0x8a>
 80061ae:	b9f1      	cbnz	r1, 80061ee <HAL_TIM_Base_Init+0x8a>
 80061b0:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 80062ac <HAL_TIM_Base_Init+0x148>
 80061b4:	4563      	cmp	r3, ip
 80061b6:	d050      	beq.n	800625a <HAL_TIM_Base_Init+0xf6>
 80061b8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80061bc:	4563      	cmp	r3, ip
 80061be:	d04c      	beq.n	800625a <HAL_TIM_Base_Init+0xf6>
 80061c0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80061c4:	4563      	cmp	r3, ip
 80061c6:	d012      	beq.n	80061ee <HAL_TIM_Base_Init+0x8a>
 80061c8:	f1be 0f00 	cmp.w	lr, #0
 80061cc:	d10f      	bne.n	80061ee <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ce:	4d34      	ldr	r5, [pc, #208]	@ (80062a0 <HAL_TIM_Base_Init+0x13c>)
 80061d0:	4934      	ldr	r1, [pc, #208]	@ (80062a4 <HAL_TIM_Base_Init+0x140>)
 80061d2:	428b      	cmp	r3, r1
 80061d4:	bf18      	it	ne
 80061d6:	42ab      	cmpne	r3, r5
 80061d8:	d043      	beq.n	8006262 <HAL_TIM_Base_Init+0xfe>
 80061da:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061de:	428b      	cmp	r3, r1
 80061e0:	d03f      	beq.n	8006262 <HAL_TIM_Base_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e6:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061e8:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ea:	4310      	orrs	r0, r2

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061ec:	e014      	b.n	8006218 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 80061ee:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061f4:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 80061f8:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061fa:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061fc:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006202:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006206:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800620a:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800620c:	b911      	cbnz	r1, 8006214 <HAL_TIM_Base_Init+0xb0>
 800620e:	f1be 0f00 	cmp.w	lr, #0
 8006212:	d02f      	beq.n	8006274 <HAL_TIM_Base_Init+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006214:	6962      	ldr	r2, [r4, #20]
 8006216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006218:	6819      	ldr	r1, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800621a:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800621c:	f041 0104 	orr.w	r1, r1, #4
 8006220:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8006222:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006224:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8006226:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006228:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8006230:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8006234:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 8006238:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 800623c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8006240:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006244:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8006248:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 800624c:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 8006250:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006254:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 8006258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800625a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800625e:	68a1      	ldr	r1, [r4, #8]
 8006260:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006262:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006264:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006268:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626a:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800626c:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800626e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006272:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006274:	490c      	ldr	r1, [pc, #48]	@ (80062a8 <HAL_TIM_Base_Init+0x144>)
 8006276:	4a0a      	ldr	r2, [pc, #40]	@ (80062a0 <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006278:	4293      	cmp	r3, r2
 800627a:	bf18      	it	ne
 800627c:	428b      	cmpne	r3, r1
 800627e:	d0c9      	beq.n	8006214 <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006280:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006284:	4293      	cmp	r3, r2
 8006286:	d0c5      	beq.n	8006214 <HAL_TIM_Base_Init+0xb0>
 8006288:	e7c6      	b.n	8006218 <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 800628a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800628e:	f7fa ff55 	bl	800113c <HAL_TIM_Base_MspInit>
 8006292:	e773      	b.n	800617c <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8006294:	2001      	movs	r0, #1
}
 8006296:	4770      	bx	lr
 8006298:	40010000 	.word	0x40010000
 800629c:	40010400 	.word	0x40010400
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40014400 	.word	0x40014400
 80062a8:	40014800 	.word	0x40014800
 80062ac:	40000400 	.word	0x40000400

080062b0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80062b0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d139      	bne.n	800632c <HAL_TIM_Base_Start+0x7c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b8:	6802      	ldr	r2, [r0, #0]
 80062ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006330 <HAL_TIM_Base_Start+0x80>)
 80062bc:	491d      	ldr	r1, [pc, #116]	@ (8006334 <HAL_TIM_Base_Start+0x84>)
 80062be:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80062c2:	bf18      	it	ne
 80062c4:	429a      	cmpne	r2, r3
{
 80062c6:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c8:	bf0c      	ite	eq
 80062ca:	2301      	moveq	r3, #1
 80062cc:	2300      	movne	r3, #0
 80062ce:	4d1a      	ldr	r5, [pc, #104]	@ (8006338 <HAL_TIM_Base_Start+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d2:	42aa      	cmp	r2, r5
 80062d4:	bf08      	it	eq
 80062d6:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80062da:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062de:	4c17      	ldr	r4, [pc, #92]	@ (800633c <HAL_TIM_Base_Start+0x8c>)
 80062e0:	428a      	cmp	r2, r1
 80062e2:	bf08      	it	eq
 80062e4:	f043 0301 	orreq.w	r3, r3, #1
 80062e8:	4815      	ldr	r0, [pc, #84]	@ (8006340 <HAL_TIM_Base_Start+0x90>)
 80062ea:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80062ee:	42a2      	cmp	r2, r4
 80062f0:	bf08      	it	eq
 80062f2:	f043 0301 	orreq.w	r3, r3, #1
 80062f6:	4282      	cmp	r2, r0
 80062f8:	bf08      	it	eq
 80062fa:	f043 0301 	orreq.w	r3, r3, #1
 80062fe:	428a      	cmp	r2, r1
 8006300:	bf08      	it	eq
 8006302:	f043 0301 	orreq.w	r3, r3, #1
 8006306:	b913      	cbnz	r3, 800630e <HAL_TIM_Base_Start+0x5e>
 8006308:	4b0e      	ldr	r3, [pc, #56]	@ (8006344 <HAL_TIM_Base_Start+0x94>)
 800630a:	429a      	cmp	r2, r3
 800630c:	d107      	bne.n	800631e <HAL_TIM_Base_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800630e:	6891      	ldr	r1, [r2, #8]
 8006310:	4b0d      	ldr	r3, [pc, #52]	@ (8006348 <HAL_TIM_Base_Start+0x98>)
 8006312:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006314:	2b06      	cmp	r3, #6
 8006316:	d006      	beq.n	8006326 <HAL_TIM_Base_Start+0x76>
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800631c:	d003      	beq.n	8006326 <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 800631e:	6813      	ldr	r3, [r2, #0]
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006326:	2000      	movs	r0, #0
}
 8006328:	bc30      	pop	{r4, r5}
 800632a:	4770      	bx	lr
    return HAL_ERROR;
 800632c:	2001      	movs	r0, #1
}
 800632e:	4770      	bx	lr
 8006330:	40010000 	.word	0x40010000
 8006334:	40000800 	.word	0x40000800
 8006338:	40000400 	.word	0x40000400
 800633c:	40000c00 	.word	0x40000c00
 8006340:	40010400 	.word	0x40010400
 8006344:	40014000 	.word	0x40014000
 8006348:	00010007 	.word	0x00010007

0800634c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800634c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006350:	2a01      	cmp	r2, #1
 8006352:	d06d      	beq.n	8006430 <HAL_TIM_ConfigClockSource+0xe4>
  tmpsmcr = htim->Instance->SMCR;
 8006354:	6802      	ldr	r2, [r0, #0]
 8006356:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006358:	2001      	movs	r0, #1
{
 800635a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 800635e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006362:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006366:	4c59      	ldr	r4, [pc, #356]	@ (80064cc <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 8006368:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800636a:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 800636c:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800636e:	680c      	ldr	r4, [r1, #0]
 8006370:	2c70      	cmp	r4, #112	@ 0x70
 8006372:	f000 8087 	beq.w	8006484 <HAL_TIM_ConfigClockSource+0x138>
 8006376:	d825      	bhi.n	80063c4 <HAL_TIM_ConfigClockSource+0x78>
 8006378:	2c50      	cmp	r4, #80	@ 0x50
 800637a:	d05b      	beq.n	8006434 <HAL_TIM_ConfigClockSource+0xe8>
 800637c:	d82b      	bhi.n	80063d6 <HAL_TIM_ConfigClockSource+0x8a>
 800637e:	2c40      	cmp	r4, #64	@ 0x40
 8006380:	f040 8090 	bne.w	80064a4 <HAL_TIM_ConfigClockSource+0x158>
                               sClockSourceConfig->ClockPolarity,
 8006384:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006386:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006388:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800638a:	6a10      	ldr	r0, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800638c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006390:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8006394:	430c      	orrs	r4, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006396:	494e      	ldr	r1, [pc, #312]	@ (80064d0 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006398:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639a:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800639c:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063a0:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80063a4:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80063a6:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80063a8:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063aa:	4001      	ands	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ac:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b0:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80063b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80063b4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80063b6:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80063c0:	bc30      	pop	{r4, r5}
 80063c2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80063c4:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80063c8:	d04c      	beq.n	8006464 <HAL_TIM_ConfigClockSource+0x118>
 80063ca:	d81f      	bhi.n	800640c <HAL_TIM_ConfigClockSource+0xc0>
 80063cc:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 80063d0:	bf18      	it	ne
 80063d2:	2001      	movne	r0, #1
 80063d4:	e7ee      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x68>
 80063d6:	2c60      	cmp	r4, #96	@ 0x60
 80063d8:	d1ec      	bne.n	80063b4 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 80063da:	6a10      	ldr	r0, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 80063dc:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063de:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
                               sClockSourceConfig->ClockFilter);
 80063e2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063e4:	493a      	ldr	r1, [pc, #232]	@ (80064d0 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccer |= (TIM_ICPolarity << 4U);
 80063e6:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ea:	6a14      	ldr	r4, [r2, #32]
 80063ec:	f024 0410 	bic.w	r4, r4, #16
 80063f0:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f2:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063f4:	f424 4470 	bic.w	r4, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063f8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80063fc:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 80063fe:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006400:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006402:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006404:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006408:	6091      	str	r1, [r2, #8]
}
 800640a:	e7d2      	b.n	80063b2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800640c:	4931      	ldr	r1, [pc, #196]	@ (80064d4 <HAL_TIM_ConfigClockSource+0x188>)
 800640e:	428c      	cmp	r4, r1
 8006410:	d006      	beq.n	8006420 <HAL_TIM_ConfigClockSource+0xd4>
 8006412:	d94f      	bls.n	80064b4 <HAL_TIM_ConfigClockSource+0x168>
 8006414:	4930      	ldr	r1, [pc, #192]	@ (80064d8 <HAL_TIM_ConfigClockSource+0x18c>)
 8006416:	428c      	cmp	r4, r1
 8006418:	d002      	beq.n	8006420 <HAL_TIM_ConfigClockSource+0xd4>
 800641a:	3110      	adds	r1, #16
 800641c:	428c      	cmp	r4, r1
 800641e:	d1c9      	bne.n	80063b4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8006420:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006422:	492b      	ldr	r1, [pc, #172]	@ (80064d0 <HAL_TIM_ConfigClockSource+0x184>)
 8006424:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006426:	4321      	orrs	r1, r4
 8006428:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 800642c:	6091      	str	r1, [r2, #8]
}
 800642e:	e7c0      	b.n	80063b2 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8006430:	2002      	movs	r0, #2
}
 8006432:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8006434:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006436:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006438:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643a:	6a10      	ldr	r0, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800643c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006440:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8006444:	430c      	orrs	r4, r1
  tmpsmcr &= ~TIM_SMCR_TS;
 8006446:	4922      	ldr	r1, [pc, #136]	@ (80064d0 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006448:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644a:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800644c:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006450:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006454:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006456:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006458:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800645a:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800645c:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8006460:	6091      	str	r1, [r2, #8]
}
 8006462:	e7a6      	b.n	80063b2 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006464:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006468:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800646a:	4328      	orrs	r0, r5
 800646c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800646e:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006472:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006476:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006478:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800647a:	6891      	ldr	r1, [r2, #8]
 800647c:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8006480:	6091      	str	r1, [r2, #8]
      break;
 8006482:	e796      	b.n	80063b2 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006484:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006488:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800648a:	4328      	orrs	r0, r5
 800648c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800648e:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006492:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006496:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8006498:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800649a:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800649c:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80064a0:	6091      	str	r1, [r2, #8]
      break;
 80064a2:	e786      	b.n	80063b2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80064a4:	d886      	bhi.n	80063b4 <HAL_TIM_ConfigClockSource+0x68>
 80064a6:	2c20      	cmp	r4, #32
 80064a8:	d0ba      	beq.n	8006420 <HAL_TIM_ConfigClockSource+0xd4>
 80064aa:	d80a      	bhi.n	80064c2 <HAL_TIM_ConfigClockSource+0x176>
 80064ac:	f034 0110 	bics.w	r1, r4, #16
 80064b0:	d180      	bne.n	80063b4 <HAL_TIM_ConfigClockSource+0x68>
 80064b2:	e7b5      	b.n	8006420 <HAL_TIM_ConfigClockSource+0xd4>
 80064b4:	f024 0110 	bic.w	r1, r4, #16
 80064b8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80064bc:	f47f af7a 	bne.w	80063b4 <HAL_TIM_ConfigClockSource+0x68>
 80064c0:	e7ae      	b.n	8006420 <HAL_TIM_ConfigClockSource+0xd4>
 80064c2:	2c30      	cmp	r4, #48	@ 0x30
 80064c4:	d0ac      	beq.n	8006420 <HAL_TIM_ConfigClockSource+0xd4>
      status = HAL_ERROR;
 80064c6:	2001      	movs	r0, #1
 80064c8:	e774      	b.n	80063b4 <HAL_TIM_ConfigClockSource+0x68>
 80064ca:	bf00      	nop
 80064cc:	ffce0088 	.word	0xffce0088
 80064d0:	ffcfff8f 	.word	0xffcfff8f
 80064d4:	00100020 	.word	0x00100020
 80064d8:	00100030 	.word	0x00100030

080064dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064dc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d04b      	beq.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e4:	6803      	ldr	r3, [r0, #0]
 80064e6:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	2002      	movs	r0, #2
{
 80064ea:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064ec:	4d24      	ldr	r5, [pc, #144]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80064ee:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064f2:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80064f4:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80064f6:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064f8:	d029      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80064fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80064fe:	42ab      	cmp	r3, r5
 8006500:	d025      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006502:	4d20      	ldr	r5, [pc, #128]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8006504:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006508:	42ab      	cmp	r3, r5
 800650a:	bf18      	it	ne
 800650c:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8006510:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006514:	bf0c      	ite	eq
 8006516:	f04f 0c01 	moveq.w	ip, #1
 800651a:	f04f 0c00 	movne.w	ip, #0
 800651e:	42ab      	cmp	r3, r5
 8006520:	bf08      	it	eq
 8006522:	f04c 0c01 	orreq.w	ip, ip, #1
 8006526:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800652a:	42ab      	cmp	r3, r5
 800652c:	bf08      	it	eq
 800652e:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006532:	680d      	ldr	r5, [r1, #0]
 8006534:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006536:	4d14      	ldr	r5, [pc, #80]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8006538:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800653a:	42ab      	cmp	r3, r5
 800653c:	bf14      	ite	ne
 800653e:	4660      	movne	r0, ip
 8006540:	f04c 0001 	orreq.w	r0, ip, #1
 8006544:	b960      	cbnz	r0, 8006560 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006546:	4811      	ldr	r0, [pc, #68]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006548:	4283      	cmp	r3, r0
 800654a:	d009      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800654c:	e00d      	b.n	800656a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800654e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006550:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006554:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006556:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006558:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800655c:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800655e:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006560:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006562:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006566:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006568:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800656a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800656c:	2101      	movs	r1, #1

  return HAL_OK;
 800656e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8006570:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006574:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8006578:	bc30      	pop	{r4, r5}
 800657a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800657c:	2002      	movs	r0, #2
}
 800657e:	4770      	bx	lr
 8006580:	40010000 	.word	0x40010000
 8006584:	40000400 	.word	0x40000400
 8006588:	40001800 	.word	0x40001800
 800658c:	40014000 	.word	0x40014000

08006590 <arm_fill_f32>:
 8006590:	b410      	push	{r4}
 8006592:	088c      	lsrs	r4, r1, #2
 8006594:	d010      	beq.n	80065b8 <arm_fill_f32+0x28>
 8006596:	f100 0310 	add.w	r3, r0, #16
 800659a:	4622      	mov	r2, r4
 800659c:	3a01      	subs	r2, #1
 800659e:	ed03 0a04 	vstr	s0, [r3, #-16]
 80065a2:	ed03 0a03 	vstr	s0, [r3, #-12]
 80065a6:	f103 0310 	add.w	r3, r3, #16
 80065aa:	ed03 0a06 	vstr	s0, [r3, #-24]	@ 0xffffffe8
 80065ae:	ed03 0a05 	vstr	s0, [r3, #-20]	@ 0xffffffec
 80065b2:	d1f3      	bne.n	800659c <arm_fill_f32+0xc>
 80065b4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80065b8:	f011 0103 	ands.w	r1, r1, #3
 80065bc:	d003      	beq.n	80065c6 <arm_fill_f32+0x36>
 80065be:	3901      	subs	r1, #1
 80065c0:	eca0 0a01 	vstmia	r0!, {s0}
 80065c4:	d1fb      	bne.n	80065be <arm_fill_f32+0x2e>
 80065c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <arm_copy_f32>:
 80065cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80065d4:	d01e      	beq.n	8006614 <arm_copy_f32+0x48>
 80065d6:	f100 0410 	add.w	r4, r0, #16
 80065da:	f101 0310 	add.w	r3, r1, #16
 80065de:	4645      	mov	r5, r8
 80065e0:	f854 cc10 	ldr.w	ip, [r4, #-16]
 80065e4:	3d01      	subs	r5, #1
 80065e6:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 80065ea:	f103 0310 	add.w	r3, r3, #16
 80065ee:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80065f2:	f104 0410 	add.w	r4, r4, #16
 80065f6:	f854 6c14 	ldr.w	r6, [r4, #-20]
 80065fa:	f843 cc20 	str.w	ip, [r3, #-32]
 80065fe:	f843 ec1c 	str.w	lr, [r3, #-28]
 8006602:	f843 7c18 	str.w	r7, [r3, #-24]
 8006606:	f843 6c14 	str.w	r6, [r3, #-20]
 800660a:	d1e9      	bne.n	80065e0 <arm_copy_f32+0x14>
 800660c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8006610:	4440      	add	r0, r8
 8006612:	4441      	add	r1, r8
 8006614:	f012 0203 	ands.w	r2, r2, #3
 8006618:	d005      	beq.n	8006626 <arm_copy_f32+0x5a>
 800661a:	f850 3b04 	ldr.w	r3, [r0], #4
 800661e:	3a01      	subs	r2, #1
 8006620:	f841 3b04 	str.w	r3, [r1], #4
 8006624:	d1f9      	bne.n	800661a <arm_copy_f32+0x4e>
 8006626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800662a:	bf00      	nop

0800662c <arm_rfft_fast_init_f32>:
 800662c:	084b      	lsrs	r3, r1, #1
 800662e:	2b80      	cmp	r3, #128	@ 0x80
 8006630:	b430      	push	{r4, r5}
 8006632:	8201      	strh	r1, [r0, #16]
 8006634:	8003      	strh	r3, [r0, #0]
 8006636:	d06f      	beq.n	8006718 <arm_rfft_fast_init_f32+0xec>
 8006638:	d916      	bls.n	8006668 <arm_rfft_fast_init_f32+0x3c>
 800663a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800663e:	d05e      	beq.n	80066fe <arm_rfft_fast_init_f32+0xd2>
 8006640:	d935      	bls.n	80066ae <arm_rfft_fast_init_f32+0x82>
 8006642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006646:	d025      	beq.n	8006694 <arm_rfft_fast_init_f32+0x68>
 8006648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800664c:	d112      	bne.n	8006674 <arm_rfft_fast_init_f32+0x48>
 800664e:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 8006652:	4c37      	ldr	r4, [pc, #220]	@ (8006730 <arm_rfft_fast_init_f32+0x104>)
 8006654:	4937      	ldr	r1, [pc, #220]	@ (8006734 <arm_rfft_fast_init_f32+0x108>)
 8006656:	2300      	movs	r3, #0
 8006658:	4a37      	ldr	r2, [pc, #220]	@ (8006738 <arm_rfft_fast_init_f32+0x10c>)
 800665a:	8185      	strh	r5, [r0, #12]
 800665c:	6084      	str	r4, [r0, #8]
 800665e:	6041      	str	r1, [r0, #4]
 8006660:	6142      	str	r2, [r0, #20]
 8006662:	b258      	sxtb	r0, r3
 8006664:	bc30      	pop	{r4, r5}
 8006666:	4770      	bx	lr
 8006668:	2b20      	cmp	r3, #32
 800666a:	d030      	beq.n	80066ce <arm_rfft_fast_init_f32+0xa2>
 800666c:	2b40      	cmp	r3, #64	@ 0x40
 800666e:	d005      	beq.n	800667c <arm_rfft_fast_init_f32+0x50>
 8006670:	2b10      	cmp	r3, #16
 8006672:	d038      	beq.n	80066e6 <arm_rfft_fast_init_f32+0xba>
 8006674:	23ff      	movs	r3, #255	@ 0xff
 8006676:	bc30      	pop	{r4, r5}
 8006678:	b258      	sxtb	r0, r3
 800667a:	4770      	bx	lr
 800667c:	2538      	movs	r5, #56	@ 0x38
 800667e:	4c2f      	ldr	r4, [pc, #188]	@ (800673c <arm_rfft_fast_init_f32+0x110>)
 8006680:	492f      	ldr	r1, [pc, #188]	@ (8006740 <arm_rfft_fast_init_f32+0x114>)
 8006682:	2300      	movs	r3, #0
 8006684:	4a2f      	ldr	r2, [pc, #188]	@ (8006744 <arm_rfft_fast_init_f32+0x118>)
 8006686:	8185      	strh	r5, [r0, #12]
 8006688:	6084      	str	r4, [r0, #8]
 800668a:	6041      	str	r1, [r0, #4]
 800668c:	6142      	str	r2, [r0, #20]
 800668e:	b258      	sxtb	r0, r3
 8006690:	bc30      	pop	{r4, r5}
 8006692:	4770      	bx	lr
 8006694:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 8006698:	4c2b      	ldr	r4, [pc, #172]	@ (8006748 <arm_rfft_fast_init_f32+0x11c>)
 800669a:	492c      	ldr	r1, [pc, #176]	@ (800674c <arm_rfft_fast_init_f32+0x120>)
 800669c:	2300      	movs	r3, #0
 800669e:	4a2c      	ldr	r2, [pc, #176]	@ (8006750 <arm_rfft_fast_init_f32+0x124>)
 80066a0:	8185      	strh	r5, [r0, #12]
 80066a2:	6084      	str	r4, [r0, #8]
 80066a4:	6041      	str	r1, [r0, #4]
 80066a6:	6142      	str	r2, [r0, #20]
 80066a8:	b258      	sxtb	r0, r3
 80066aa:	bc30      	pop	{r4, r5}
 80066ac:	4770      	bx	lr
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b2:	d1df      	bne.n	8006674 <arm_rfft_fast_init_f32+0x48>
 80066b4:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 80066b8:	4c26      	ldr	r4, [pc, #152]	@ (8006754 <arm_rfft_fast_init_f32+0x128>)
 80066ba:	4927      	ldr	r1, [pc, #156]	@ (8006758 <arm_rfft_fast_init_f32+0x12c>)
 80066bc:	2300      	movs	r3, #0
 80066be:	4a27      	ldr	r2, [pc, #156]	@ (800675c <arm_rfft_fast_init_f32+0x130>)
 80066c0:	8185      	strh	r5, [r0, #12]
 80066c2:	6084      	str	r4, [r0, #8]
 80066c4:	6041      	str	r1, [r0, #4]
 80066c6:	6142      	str	r2, [r0, #20]
 80066c8:	b258      	sxtb	r0, r3
 80066ca:	bc30      	pop	{r4, r5}
 80066cc:	4770      	bx	lr
 80066ce:	2530      	movs	r5, #48	@ 0x30
 80066d0:	4c23      	ldr	r4, [pc, #140]	@ (8006760 <arm_rfft_fast_init_f32+0x134>)
 80066d2:	4924      	ldr	r1, [pc, #144]	@ (8006764 <arm_rfft_fast_init_f32+0x138>)
 80066d4:	2300      	movs	r3, #0
 80066d6:	4a24      	ldr	r2, [pc, #144]	@ (8006768 <arm_rfft_fast_init_f32+0x13c>)
 80066d8:	8185      	strh	r5, [r0, #12]
 80066da:	6084      	str	r4, [r0, #8]
 80066dc:	6041      	str	r1, [r0, #4]
 80066de:	6142      	str	r2, [r0, #20]
 80066e0:	b258      	sxtb	r0, r3
 80066e2:	bc30      	pop	{r4, r5}
 80066e4:	4770      	bx	lr
 80066e6:	2514      	movs	r5, #20
 80066e8:	4c20      	ldr	r4, [pc, #128]	@ (800676c <arm_rfft_fast_init_f32+0x140>)
 80066ea:	4921      	ldr	r1, [pc, #132]	@ (8006770 <arm_rfft_fast_init_f32+0x144>)
 80066ec:	2300      	movs	r3, #0
 80066ee:	4a21      	ldr	r2, [pc, #132]	@ (8006774 <arm_rfft_fast_init_f32+0x148>)
 80066f0:	8185      	strh	r5, [r0, #12]
 80066f2:	6084      	str	r4, [r0, #8]
 80066f4:	6041      	str	r1, [r0, #4]
 80066f6:	6142      	str	r2, [r0, #20]
 80066f8:	b258      	sxtb	r0, r3
 80066fa:	bc30      	pop	{r4, r5}
 80066fc:	4770      	bx	lr
 80066fe:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 8006702:	4c1d      	ldr	r4, [pc, #116]	@ (8006778 <arm_rfft_fast_init_f32+0x14c>)
 8006704:	491d      	ldr	r1, [pc, #116]	@ (800677c <arm_rfft_fast_init_f32+0x150>)
 8006706:	2300      	movs	r3, #0
 8006708:	4a1d      	ldr	r2, [pc, #116]	@ (8006780 <arm_rfft_fast_init_f32+0x154>)
 800670a:	8185      	strh	r5, [r0, #12]
 800670c:	6084      	str	r4, [r0, #8]
 800670e:	6041      	str	r1, [r0, #4]
 8006710:	6142      	str	r2, [r0, #20]
 8006712:	b258      	sxtb	r0, r3
 8006714:	bc30      	pop	{r4, r5}
 8006716:	4770      	bx	lr
 8006718:	25d0      	movs	r5, #208	@ 0xd0
 800671a:	4c1a      	ldr	r4, [pc, #104]	@ (8006784 <arm_rfft_fast_init_f32+0x158>)
 800671c:	491a      	ldr	r1, [pc, #104]	@ (8006788 <arm_rfft_fast_init_f32+0x15c>)
 800671e:	2300      	movs	r3, #0
 8006720:	4a1a      	ldr	r2, [pc, #104]	@ (800678c <arm_rfft_fast_init_f32+0x160>)
 8006722:	8185      	strh	r5, [r0, #12]
 8006724:	6084      	str	r4, [r0, #8]
 8006726:	6041      	str	r1, [r0, #4]
 8006728:	6142      	str	r2, [r0, #20]
 800672a:	b258      	sxtb	r0, r3
 800672c:	bc30      	pop	{r4, r5}
 800672e:	4770      	bx	lr
 8006730:	0801b474 	.word	0x0801b474
 8006734:	0800c66c 	.word	0x0800c66c
 8006738:	080127dc 	.word	0x080127dc
 800673c:	0801076c 	.word	0x0801076c
 8006740:	0801d234 	.word	0x0801d234
 8006744:	0801f724 	.word	0x0801f724
 8006748:	0801915c 	.word	0x0801915c
 800674c:	0801705c 	.word	0x0801705c
 8006750:	080107dc 	.word	0x080107dc
 8006754:	0801f3b4 	.word	0x0801f3b4
 8006758:	080167dc 	.word	0x080167dc
 800675c:	0801d434 	.word	0x0801d434
 8006760:	0801a014 	.word	0x0801a014
 8006764:	0801905c 	.word	0x0801905c
 8006768:	0801066c 	.word	0x0801066c
 800676c:	08019f6c 	.word	0x08019f6c
 8006770:	08016fdc 	.word	0x08016fdc
 8006774:	08019f94 	.word	0x08019f94
 8006778:	0801dc34 	.word	0x0801dc34
 800677c:	0801a474 	.word	0x0801a474
 8006780:	0801dfb4 	.word	0x0801dfb4
 8006784:	0801f924 	.word	0x0801f924
 8006788:	0801a074 	.word	0x0801a074
 800678c:	0801efb4 	.word	0x0801efb4

08006790 <arm_rfft_fast_f32>:
 8006790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006794:	8a05      	ldrh	r5, [r0, #16]
 8006796:	4606      	mov	r6, r0
 8006798:	4690      	mov	r8, r2
 800679a:	460c      	mov	r4, r1
 800679c:	086d      	lsrs	r5, r5, #1
 800679e:	8005      	strh	r5, [r0, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d15e      	bne.n	8006862 <arm_rfft_fast_f32+0xd2>
 80067a4:	461a      	mov	r2, r3
 80067a6:	2301      	movs	r3, #1
 80067a8:	f000 fbe0 	bl	8006f6c <arm_cfft_f32>
 80067ac:	edd4 7a00 	vldr	s15, [r4]
 80067b0:	ed94 7a01 	vldr	s14, [r4, #4]
 80067b4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80067b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067bc:	8837      	ldrh	r7, [r6, #0]
 80067be:	ee37 7a07 	vadd.f32	s14, s14, s14
 80067c2:	6975      	ldr	r5, [r6, #20]
 80067c4:	3f01      	subs	r7, #1
 80067c6:	eef0 3a46 	vmov.f32	s7, s12
 80067ca:	3510      	adds	r5, #16
 80067cc:	f108 0610 	add.w	r6, r8, #16
 80067d0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80067d4:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 80067d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067dc:	f104 0310 	add.w	r3, r4, #16
 80067e0:	3808      	subs	r0, #8
 80067e2:	ee26 7a86 	vmul.f32	s14, s13, s12
 80067e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80067ea:	ed88 7a00 	vstr	s14, [r8]
 80067ee:	edc8 7a01 	vstr	s15, [r8, #4]
 80067f2:	edd0 6a02 	vldr	s13, [r0, #8]
 80067f6:	3f01      	subs	r7, #1
 80067f8:	ed13 5a02 	vldr	s10, [r3, #-8]
 80067fc:	f1a0 0008 	sub.w	r0, r0, #8
 8006800:	ed13 7a01 	vldr	s14, [r3, #-4]
 8006804:	f105 0508 	add.w	r5, r5, #8
 8006808:	ee76 7ac5 	vsub.f32	s15, s13, s10
 800680c:	ed15 6a04 	vldr	s12, [r5, #-16]
 8006810:	edd0 5a05 	vldr	s11, [r0, #20]
 8006814:	ee36 5a85 	vadd.f32	s10, s13, s10
 8006818:	ed55 6a03 	vldr	s13, [r5, #-12]
 800681c:	f103 0308 	add.w	r3, r3, #8
 8006820:	ee35 4a87 	vadd.f32	s8, s11, s14
 8006824:	f106 0608 	add.w	r6, r6, #8
 8006828:	ee66 4a27 	vmul.f32	s9, s12, s15
 800682c:	ee77 5a65 	vsub.f32	s11, s14, s11
 8006830:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8006834:	ee34 5a85 	vadd.f32	s10, s9, s10
 8006838:	ee26 6a04 	vmul.f32	s12, s12, s8
 800683c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8006840:	ee77 7a25 	vadd.f32	s15, s14, s11
 8006844:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006848:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800684c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006850:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006854:	ed46 6a04 	vstr	s13, [r6, #-16]
 8006858:	ed46 7a03 	vstr	s15, [r6, #-12]
 800685c:	d1c9      	bne.n	80067f2 <arm_rfft_fast_f32+0x62>
 800685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006862:	edd1 7a00 	vldr	s15, [r1]
 8006866:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800686a:	edd1 6a01 	vldr	s13, [r1, #4]
 800686e:	1e68      	subs	r0, r5, #1
 8006870:	6975      	ldr	r5, [r6, #20]
 8006872:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006876:	00c1      	lsls	r1, r0, #3
 8006878:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800687c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006880:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006884:	ed82 7a00 	vstr	s14, [r2]
 8006888:	edc2 7a01 	vstr	s15, [r2, #4]
 800688c:	b3e0      	cbz	r0, 8006908 <arm_rfft_fast_f32+0x178>
 800688e:	3908      	subs	r1, #8
 8006890:	f104 0210 	add.w	r2, r4, #16
 8006894:	3510      	adds	r5, #16
 8006896:	440c      	add	r4, r1
 8006898:	f108 0110 	add.w	r1, r8, #16
 800689c:	ed94 7a02 	vldr	s14, [r4, #8]
 80068a0:	3801      	subs	r0, #1
 80068a2:	ed52 6a02 	vldr	s13, [r2, #-8]
 80068a6:	f1a4 0408 	sub.w	r4, r4, #8
 80068aa:	ed15 6a02 	vldr	s12, [r5, #-8]
 80068ae:	f102 0208 	add.w	r2, r2, #8
 80068b2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80068b6:	ed94 4a05 	vldr	s8, [r4, #20]
 80068ba:	ed12 5a03 	vldr	s10, [r2, #-12]
 80068be:	ee77 6a26 	vadd.f32	s13, s14, s13
 80068c2:	ed55 5a01 	vldr	s11, [r5, #-4]
 80068c6:	f101 0108 	add.w	r1, r1, #8
 80068ca:	ee26 3a27 	vmul.f32	s6, s12, s15
 80068ce:	f105 0508 	add.w	r5, r5, #8
 80068d2:	ee74 4a05 	vadd.f32	s9, s8, s10
 80068d6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80068da:	ee35 5a44 	vsub.f32	s10, s10, s8
 80068de:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80068e2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80068e6:	ee77 7a05 	vadd.f32	s15, s14, s10
 80068ea:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80068ee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80068f2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80068f6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80068fa:	ee27 7a23 	vmul.f32	s14, s14, s7
 80068fe:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006902:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006906:	d1c9      	bne.n	800689c <arm_rfft_fast_f32+0x10c>
 8006908:	4630      	mov	r0, r6
 800690a:	4641      	mov	r1, r8
 800690c:	461a      	mov	r2, r3
 800690e:	2301      	movs	r3, #1
 8006910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006914:	f000 bb2a 	b.w	8006f6c <arm_cfft_f32>

08006918 <arm_cfft_radix8by2_f32>:
 8006918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800691c:	ed2d 8b06 	vpush	{d8-d10}
 8006920:	f8b0 e000 	ldrh.w	lr, [r0]
 8006924:	4607      	mov	r7, r0
 8006926:	6842      	ldr	r2, [r0, #4]
 8006928:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800692c:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8006930:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8006934:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8006938:	f000 80af 	beq.w	8006a9a <arm_cfft_radix8by2_f32+0x182>
 800693c:	3310      	adds	r3, #16
 800693e:	3210      	adds	r2, #16
 8006940:	f101 0610 	add.w	r6, r1, #16
 8006944:	f108 0510 	add.w	r5, r8, #16
 8006948:	18cc      	adds	r4, r1, r3
 800694a:	4443      	add	r3, r8
 800694c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8006950:	f1be 0e01 	subs.w	lr, lr, #1
 8006954:	ed56 4a04 	vldr	s9, [r6, #-16]
 8006958:	f104 0410 	add.w	r4, r4, #16
 800695c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8006960:	f106 0610 	add.w	r6, r6, #16
 8006964:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8006968:	ed53 0a04 	vldr	s1, [r3, #-16]
 800696c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8006970:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006974:	ed13 3a02 	vldr	s6, [r3, #-8]
 8006978:	f102 0210 	add.w	r2, r2, #16
 800697c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8006980:	f103 0310 	add.w	r3, r3, #16
 8006984:	ed55 2a01 	vldr	s5, [r5, #-4]
 8006988:	f105 0510 	add.w	r5, r5, #16
 800698c:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 8006990:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 8006994:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8006998:	ee33 8a83 	vadd.f32	s16, s7, s6
 800699c:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 80069a0:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 80069a4:	ee34 0a06 	vadd.f32	s0, s8, s12
 80069a8:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 80069ac:	ee76 aa87 	vadd.f32	s21, s13, s14
 80069b0:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 80069b4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80069b8:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 80069bc:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80069c0:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 80069c4:	ee71 8a05 	vadd.f32	s17, s2, s10
 80069c8:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80069cc:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 80069d0:	ee72 9a22 	vadd.f32	s19, s4, s5
 80069d4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80069d8:	ee35 5a41 	vsub.f32	s10, s10, s2
 80069dc:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 80069e0:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 80069e4:	ee36 6a44 	vsub.f32	s12, s12, s8
 80069e8:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 80069ec:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80069f0:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 80069f4:	ee72 7a62 	vsub.f32	s15, s4, s5
 80069f8:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 80069fc:	ee73 2a63 	vsub.f32	s5, s6, s7
 8006a00:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 8006a04:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8006a08:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8006a0c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8006a10:	ee27 2a26 	vmul.f32	s4, s14, s13
 8006a14:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8006a18:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8006a1c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006a20:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006a24:	ee65 6a26 	vmul.f32	s13, s10, s13
 8006a28:	ee25 5a04 	vmul.f32	s10, s10, s8
 8006a2c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006a30:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8006a34:	ee33 4a02 	vadd.f32	s8, s6, s4
 8006a38:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8006a3c:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 8006a40:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 8006a44:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8006a48:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8006a4c:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 8006a50:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8006a54:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8006a58:	ee27 4a87 	vmul.f32	s8, s15, s14
 8006a5c:	ee61 5a87 	vmul.f32	s11, s3, s14
 8006a60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a64:	ee22 5a87 	vmul.f32	s10, s5, s14
 8006a68:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006a6c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8006a70:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8006a74:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006a78:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006a7c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006a80:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006a84:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 8006a88:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 8006a8c:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 8006a90:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8006a94:	f47f af5a 	bne.w	800694c <arm_cfft_radix8by2_f32+0x34>
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	fa1f f48c 	uxth.w	r4, ip
 8006a9e:	4608      	mov	r0, r1
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	f000 fe52 	bl	800774c <arm_radix8_butterfly_f32>
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	4621      	mov	r1, r4
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	2302      	movs	r3, #2
 8006ab0:	ecbd 8b06 	vpop	{d8-d10}
 8006ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab8:	f000 be48 	b.w	800774c <arm_radix8_butterfly_f32>

08006abc <arm_cfft_radix8by4_f32>:
 8006abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac0:	ed2d 8b06 	vpush	{d8-d10}
 8006ac4:	8804      	ldrh	r4, [r0, #0]
 8006ac6:	b08f      	sub	sp, #60	@ 0x3c
 8006ac8:	ed91 6a00 	vldr	s12, [r1]
 8006acc:	460a      	mov	r2, r1
 8006ace:	0864      	lsrs	r4, r4, #1
 8006ad0:	ed91 7a01 	vldr	s14, [r1, #4]
 8006ad4:	9101      	str	r1, [sp, #4]
 8006ad6:	00a3      	lsls	r3, r4, #2
 8006ad8:	9104      	str	r1, [sp, #16]
 8006ada:	0864      	lsrs	r4, r4, #1
 8006adc:	6841      	ldr	r1, [r0, #4]
 8006ade:	900c      	str	r0, [sp, #48]	@ 0x30
 8006ae0:	4625      	mov	r5, r4
 8006ae2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ae4:	f101 0408 	add.w	r4, r1, #8
 8006ae8:	f101 0610 	add.w	r6, r1, #16
 8006aec:	9406      	str	r4, [sp, #24]
 8006aee:	18d4      	adds	r4, r2, r3
 8006af0:	1eaa      	subs	r2, r5, #2
 8006af2:	f101 0518 	add.w	r5, r1, #24
 8006af6:	18e0      	adds	r0, r4, r3
 8006af8:	ed94 4a00 	vldr	s8, [r4]
 8006afc:	edd4 3a01 	vldr	s7, [r4, #4]
 8006b00:	46a6      	mov	lr, r4
 8006b02:	edd0 6a00 	vldr	s13, [r0]
 8006b06:	18c7      	adds	r7, r0, r3
 8006b08:	edd0 7a01 	vldr	s15, [r0, #4]
 8006b0c:	46a0      	mov	r8, r4
 8006b0e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8006b12:	edd7 4a00 	vldr	s9, [r7]
 8006b16:	9402      	str	r4, [sp, #8]
 8006b18:	4604      	mov	r4, r0
 8006b1a:	9507      	str	r5, [sp, #28]
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	ee75 2a84 	vadd.f32	s5, s11, s8
 8006b22:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b24:	9801      	ldr	r0, [sp, #4]
 8006b26:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006b2a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006b2e:	ed97 5a01 	vldr	s10, [r7, #4]
 8006b32:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006b36:	46bc      	mov	ip, r7
 8006b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b3c:	9605      	str	r6, [sp, #20]
 8006b3e:	ee36 7a63 	vsub.f32	s14, s12, s7
 8006b42:	9703      	str	r7, [sp, #12]
 8006b44:	ee12 9a90 	vmov	r9, s5
 8006b48:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8006b4c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8006b50:	1f3e      	subs	r6, r7, #4
 8006b52:	f840 9b08 	str.w	r9, [r0], #8
 8006b56:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8006b5a:	edde 2a01 	vldr	s5, [lr, #4]
 8006b5e:	ee77 3ac4 	vsub.f32	s7, s15, s8
 8006b62:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006b66:	ed9c 4a01 	vldr	s8, [ip, #4]
 8006b6a:	ee36 6a22 	vadd.f32	s12, s12, s5
 8006b6e:	9001      	str	r0, [sp, #4]
 8006b70:	ee37 7a45 	vsub.f32	s14, s14, s10
 8006b74:	9804      	ldr	r0, [sp, #16]
 8006b76:	ee75 6a26 	vadd.f32	s13, s10, s13
 8006b7a:	f1ae 0704 	sub.w	r7, lr, #4
 8006b7e:	ee36 6a04 	vadd.f32	s12, s12, s8
 8006b82:	ee33 4a45 	vsub.f32	s8, s6, s10
 8006b86:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8006b8a:	ee33 5aa4 	vadd.f32	s10, s7, s9
 8006b8e:	ed80 6a01 	vstr	s12, [r0, #4]
 8006b92:	ee14 9a10 	vmov	r9, s8
 8006b96:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006b9a:	f848 9b08 	str.w	r9, [r8], #8
 8006b9e:	ed8e 5a01 	vstr	s10, [lr, #4]
 8006ba2:	ee15 ea90 	vmov	lr, s11
 8006ba6:	f844 eb08 	str.w	lr, [r4], #8
 8006baa:	ee16 ea90 	vmov	lr, s13
 8006bae:	9408      	str	r4, [sp, #32]
 8006bb0:	462c      	mov	r4, r5
 8006bb2:	ed85 7a01 	vstr	s14, [r5, #4]
 8006bb6:	9d03      	ldr	r5, [sp, #12]
 8006bb8:	f84c eb08 	str.w	lr, [ip], #8
 8006bbc:	edc5 7a01 	vstr	s15, [r5, #4]
 8006bc0:	0855      	lsrs	r5, r2, #1
 8006bc2:	9509      	str	r5, [sp, #36]	@ 0x24
 8006bc4:	f000 8130 	beq.w	8006e28 <arm_cfft_radix8by4_f32+0x36c>
 8006bc8:	9804      	ldr	r0, [sp, #16]
 8006bca:	3b08      	subs	r3, #8
 8006bcc:	46ab      	mov	fp, r5
 8006bce:	f1a4 020c 	sub.w	r2, r4, #12
 8006bd2:	f100 0510 	add.w	r5, r0, #16
 8006bd6:	f101 0920 	add.w	r9, r1, #32
 8006bda:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8006bde:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006be2:	4433      	add	r3, r6
 8006be4:	3410      	adds	r4, #16
 8006be6:	4660      	mov	r0, ip
 8006be8:	4641      	mov	r1, r8
 8006bea:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8006bee:	ed54 6a02 	vldr	s13, [r4, #-8]
 8006bf2:	f1bb 0b01 	subs.w	fp, fp, #1
 8006bf6:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006bfa:	f10a 0a08 	add.w	sl, sl, #8
 8006bfe:	edd1 7a00 	vldr	s15, [r1]
 8006c02:	f105 0508 	add.w	r5, r5, #8
 8006c06:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8006c0a:	edd0 2a00 	vldr	s5, [r0]
 8006c0e:	ed14 7a01 	vldr	s14, [r4, #-4]
 8006c12:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8006c16:	ed55 6a03 	vldr	s13, [r5, #-12]
 8006c1a:	f1a2 0208 	sub.w	r2, r2, #8
 8006c1e:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8006c22:	ed90 2a01 	vldr	s4, [r0, #4]
 8006c26:	ee36 5a87 	vadd.f32	s10, s13, s14
 8006c2a:	ed91 6a01 	vldr	s12, [r1, #4]
 8006c2e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006c32:	f109 0910 	add.w	r9, r9, #16
 8006c36:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8006c3a:	f104 0408 	add.w	r4, r4, #8
 8006c3e:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8006c42:	f10e 0e18 	add.w	lr, lr, #24
 8006c46:	ee37 3a67 	vsub.f32	s6, s14, s15
 8006c4a:	f1a3 0308 	sub.w	r3, r3, #8
 8006c4e:	ed45 6a04 	vstr	s13, [r5, #-16]
 8006c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c56:	edd1 6a01 	vldr	s13, [r1, #4]
 8006c5a:	ee76 1a25 	vadd.f32	s3, s12, s11
 8006c5e:	edd0 4a01 	vldr	s9, [r0, #4]
 8006c62:	ee33 3a22 	vadd.f32	s6, s6, s5
 8006c66:	ee75 6a26 	vadd.f32	s13, s10, s13
 8006c6a:	ee35 5a46 	vsub.f32	s10, s10, s12
 8006c6e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006c72:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006c76:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8006c7a:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006c7e:	ed45 6a03 	vstr	s13, [r5, #-12]
 8006c82:	ee32 2a06 	vadd.f32	s4, s4, s12
 8006c86:	edd6 7a00 	vldr	s15, [r6]
 8006c8a:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8006c8e:	ed97 1a00 	vldr	s2, [r7]
 8006c92:	ee77 2a62 	vsub.f32	s5, s14, s5
 8006c96:	ed92 8a04 	vldr	s16, [r2, #16]
 8006c9a:	ee71 8a27 	vadd.f32	s17, s2, s15
 8006c9e:	ed93 aa04 	vldr	s20, [r3, #16]
 8006ca2:	ed16 7a01 	vldr	s14, [r6, #-4]
 8006ca6:	ee71 7a67 	vsub.f32	s15, s2, s15
 8006caa:	ed57 0a01 	vldr	s1, [r7, #-4]
 8006cae:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8006cb2:	ee38 6a88 	vadd.f32	s12, s17, s16
 8006cb6:	edd3 9a03 	vldr	s19, [r3, #12]
 8006cba:	ee30 0a87 	vadd.f32	s0, s1, s14
 8006cbe:	ed92 9a03 	vldr	s18, [r2, #12]
 8006cc2:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8006cc6:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8006cca:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8006cce:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8006cd2:	ee16 ca10 	vmov	ip, s12
 8006cd6:	ee30 6a49 	vsub.f32	s12, s0, s18
 8006cda:	ee71 4a07 	vadd.f32	s9, s2, s14
 8006cde:	f847 c908 	str.w	ip, [r7], #-8
 8006ce2:	ee34 4a29 	vadd.f32	s8, s8, s19
 8006ce6:	edd2 8a03 	vldr	s17, [r2, #12]
 8006cea:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8006cee:	ed93 8a03 	vldr	s16, [r3, #12]
 8006cf2:	ee71 0a47 	vsub.f32	s1, s2, s14
 8006cf6:	ee30 0a28 	vadd.f32	s0, s0, s17
 8006cfa:	ee39 1a67 	vsub.f32	s2, s18, s15
 8006cfe:	ee36 6a69 	vsub.f32	s12, s12, s19
 8006d02:	ee30 0a08 	vadd.f32	s0, s0, s16
 8006d06:	ee75 5aca 	vsub.f32	s11, s11, s20
 8006d0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8006d0e:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8006d12:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8006d16:	ee21 8a80 	vmul.f32	s16, s3, s0
 8006d1a:	ee23 7a26 	vmul.f32	s14, s6, s13
 8006d1e:	ee64 7a26 	vmul.f32	s15, s8, s13
 8006d22:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8006d26:	ee24 4a00 	vmul.f32	s8, s8, s0
 8006d2a:	ee23 3a00 	vmul.f32	s6, s6, s0
 8006d2e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8006d32:	ee24 0a80 	vmul.f32	s0, s9, s0
 8006d36:	ee38 7a07 	vadd.f32	s14, s16, s14
 8006d3a:	ee76 6a84 	vadd.f32	s13, s13, s8
 8006d3e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006d42:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006d46:	ee17 ca10 	vmov	ip, s14
 8006d4a:	f841 cb08 	str.w	ip, [r1], #8
 8006d4e:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006d52:	ed82 0a04 	vstr	s0, [r2, #16]
 8006d56:	edc2 6a03 	vstr	s13, [r2, #12]
 8006d5a:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 8006d5e:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 8006d62:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8006d66:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8006d6a:	ee65 4a27 	vmul.f32	s9, s10, s15
 8006d6e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8006d72:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8006d76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006d7a:	ee25 5a26 	vmul.f32	s10, s10, s13
 8006d7e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8006d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d86:	ee34 6a24 	vadd.f32	s12, s8, s9
 8006d8a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8006d8e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006d92:	ee17 ca90 	vmov	ip, s15
 8006d96:	ed04 6a04 	vstr	s12, [r4, #-16]
 8006d9a:	ed04 5a03 	vstr	s10, [r4, #-12]
 8006d9e:	f846 c908 	str.w	ip, [r6], #-8
 8006da2:	edc6 6a01 	vstr	s13, [r6, #4]
 8006da6:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 8006daa:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 8006dae:	ee62 5a27 	vmul.f32	s11, s4, s15
 8006db2:	ee22 6a87 	vmul.f32	s12, s5, s14
 8006db6:	ee22 2a07 	vmul.f32	s4, s4, s14
 8006dba:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8006dbe:	ee61 6a07 	vmul.f32	s13, s2, s14
 8006dc2:	ee20 7a87 	vmul.f32	s14, s1, s14
 8006dc6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006dca:	ee61 7a27 	vmul.f32	s15, s2, s15
 8006dce:	ee35 6a86 	vadd.f32	s12, s11, s12
 8006dd2:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8006dd6:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8006dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dde:	ee16 ca10 	vmov	ip, s12
 8006de2:	f840 cb08 	str.w	ip, [r0], #8
 8006de6:	ed40 2a01 	vstr	s5, [r0, #-4]
 8006dea:	edc3 0a04 	vstr	s1, [r3, #16]
 8006dee:	edc3 7a03 	vstr	s15, [r3, #12]
 8006df2:	f47f aefc 	bne.w	8006bee <arm_cfft_radix8by4_f32+0x132>
 8006df6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006df8:	9805      	ldr	r0, [sp, #20]
 8006dfa:	00cb      	lsls	r3, r1, #3
 8006dfc:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8006e00:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006e04:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006e08:	4498      	add	r8, r3
 8006e0a:	449c      	add	ip, r3
 8006e0c:	9105      	str	r1, [sp, #20]
 8006e0e:	9901      	ldr	r1, [sp, #4]
 8006e10:	4419      	add	r1, r3
 8006e12:	9101      	str	r1, [sp, #4]
 8006e14:	9906      	ldr	r1, [sp, #24]
 8006e16:	4419      	add	r1, r3
 8006e18:	9106      	str	r1, [sp, #24]
 8006e1a:	9908      	ldr	r1, [sp, #32]
 8006e1c:	4419      	add	r1, r3
 8006e1e:	9b07      	ldr	r3, [sp, #28]
 8006e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e24:	9108      	str	r1, [sp, #32]
 8006e26:	9307      	str	r3, [sp, #28]
 8006e28:	9a01      	ldr	r2, [sp, #4]
 8006e2a:	2304      	movs	r3, #4
 8006e2c:	9e08      	ldr	r6, [sp, #32]
 8006e2e:	edd2 6a00 	vldr	s13, [r2]
 8006e32:	ed96 4a00 	vldr	s8, [r6]
 8006e36:	edd8 7a00 	vldr	s15, [r8]
 8006e3a:	ee36 6a84 	vadd.f32	s12, s13, s8
 8006e3e:	eddc 2a00 	vldr	s5, [ip]
 8006e42:	ed96 7a01 	vldr	s14, [r6, #4]
 8006e46:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8006e4a:	edd2 6a01 	vldr	s13, [r2, #4]
 8006e4e:	ee76 4a27 	vadd.f32	s9, s12, s15
 8006e52:	ed98 2a01 	vldr	s4, [r8, #4]
 8006e56:	ee76 5a87 	vadd.f32	s11, s13, s14
 8006e5a:	ed9c 5a01 	vldr	s10, [ip, #4]
 8006e5e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006e62:	9d05      	ldr	r5, [sp, #20]
 8006e64:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8006e68:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8006e6c:	ee72 3a04 	vadd.f32	s7, s4, s8
 8006e70:	9804      	ldr	r0, [sp, #16]
 8006e72:	ee77 4a67 	vsub.f32	s9, s14, s15
 8006e76:	4621      	mov	r1, r4
 8006e78:	edc2 6a00 	vstr	s13, [r2]
 8006e7c:	ee76 6a67 	vsub.f32	s13, s12, s15
 8006e80:	ed98 3a01 	vldr	s6, [r8, #4]
 8006e84:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8006e88:	eddc 1a01 	vldr	s3, [ip, #4]
 8006e8c:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8006e90:	ee35 3a83 	vadd.f32	s6, s11, s6
 8006e94:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006e98:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006e9c:	ee73 5a21 	vadd.f32	s11, s6, s3
 8006ea0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ea4:	ee36 6a45 	vsub.f32	s12, s12, s10
 8006ea8:	edc2 5a01 	vstr	s11, [r2, #4]
 8006eac:	ee35 5a04 	vadd.f32	s10, s10, s8
 8006eb0:	9a06      	ldr	r2, [sp, #24]
 8006eb2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8006eb6:	edd2 7a00 	vldr	s15, [r2]
 8006eba:	edd2 5a01 	vldr	s11, [r2, #4]
 8006ebe:	ee23 4aa7 	vmul.f32	s8, s7, s15
 8006ec2:	ee63 3aa5 	vmul.f32	s7, s7, s11
 8006ec6:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8006eca:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8006ece:	ee77 7a62 	vsub.f32	s15, s14, s5
 8006ed2:	ee74 5a25 	vadd.f32	s11, s8, s11
 8006ed6:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8006eda:	edc8 5a00 	vstr	s11, [r8]
 8006ede:	edc8 4a01 	vstr	s9, [r8, #4]
 8006ee2:	edd5 4a01 	vldr	s9, [r5, #4]
 8006ee6:	ed95 7a00 	vldr	s14, [r5]
 8006eea:	9d07      	ldr	r5, [sp, #28]
 8006eec:	ee66 5a87 	vmul.f32	s11, s13, s14
 8006ef0:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8006ef4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006ef8:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006efc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006f00:	ee35 6a86 	vadd.f32	s12, s11, s12
 8006f04:	edc6 6a01 	vstr	s13, [r6, #4]
 8006f08:	ed86 6a00 	vstr	s12, [r6]
 8006f0c:	ed95 6a01 	vldr	s12, [r5, #4]
 8006f10:	ed95 7a00 	vldr	s14, [r5]
 8006f14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f16:	ee65 6a07 	vmul.f32	s13, s10, s14
 8006f1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006f1e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8006f22:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006f26:	ee37 5a45 	vsub.f32	s10, s14, s10
 8006f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8006f32:	edcc 7a00 	vstr	s15, [ip]
 8006f36:	6872      	ldr	r2, [r6, #4]
 8006f38:	f000 fc08 	bl	800774c <arm_radix8_butterfly_f32>
 8006f3c:	9802      	ldr	r0, [sp, #8]
 8006f3e:	4621      	mov	r1, r4
 8006f40:	6872      	ldr	r2, [r6, #4]
 8006f42:	2304      	movs	r3, #4
 8006f44:	f000 fc02 	bl	800774c <arm_radix8_butterfly_f32>
 8006f48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	6872      	ldr	r2, [r6, #4]
 8006f4e:	2304      	movs	r3, #4
 8006f50:	f000 fbfc 	bl	800774c <arm_radix8_butterfly_f32>
 8006f54:	9803      	ldr	r0, [sp, #12]
 8006f56:	4621      	mov	r1, r4
 8006f58:	6872      	ldr	r2, [r6, #4]
 8006f5a:	2304      	movs	r3, #4
 8006f5c:	b00f      	add	sp, #60	@ 0x3c
 8006f5e:	ecbd 8b06 	vpop	{d8-d10}
 8006f62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f66:	f000 bbf1 	b.w	800774c <arm_radix8_butterfly_f32>
 8006f6a:	bf00      	nop

08006f6c <arm_cfft_f32>:
 8006f6c:	2a01      	cmp	r2, #1
 8006f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f72:	4606      	mov	r6, r0
 8006f74:	4617      	mov	r7, r2
 8006f76:	460c      	mov	r4, r1
 8006f78:	4698      	mov	r8, r3
 8006f7a:	8805      	ldrh	r5, [r0, #0]
 8006f7c:	d053      	beq.n	8007026 <arm_cfft_f32+0xba>
 8006f7e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006f82:	d04b      	beq.n	800701c <arm_cfft_f32+0xb0>
 8006f84:	d916      	bls.n	8006fb4 <arm_cfft_f32+0x48>
 8006f86:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8006f8a:	d01a      	beq.n	8006fc2 <arm_cfft_f32+0x56>
 8006f8c:	d95a      	bls.n	8007044 <arm_cfft_f32+0xd8>
 8006f8e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006f92:	d043      	beq.n	800701c <arm_cfft_f32+0xb0>
 8006f94:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006f98:	d105      	bne.n	8006fa6 <arm_cfft_f32+0x3a>
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	6872      	ldr	r2, [r6, #4]
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f000 fbd3 	bl	800774c <arm_radix8_butterfly_f32>
 8006fa6:	f1b8 0f00 	cmp.w	r8, #0
 8006faa:	d111      	bne.n	8006fd0 <arm_cfft_f32+0x64>
 8006fac:	2f01      	cmp	r7, #1
 8006fae:	d016      	beq.n	8006fde <arm_cfft_f32+0x72>
 8006fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb4:	2d20      	cmp	r5, #32
 8006fb6:	d031      	beq.n	800701c <arm_cfft_f32+0xb0>
 8006fb8:	d948      	bls.n	800704c <arm_cfft_f32+0xe0>
 8006fba:	2d40      	cmp	r5, #64	@ 0x40
 8006fbc:	d0ed      	beq.n	8006f9a <arm_cfft_f32+0x2e>
 8006fbe:	2d80      	cmp	r5, #128	@ 0x80
 8006fc0:	d1f1      	bne.n	8006fa6 <arm_cfft_f32+0x3a>
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	f7ff fca7 	bl	8006918 <arm_cfft_radix8by2_f32>
 8006fca:	f1b8 0f00 	cmp.w	r8, #0
 8006fce:	d0ed      	beq.n	8006fac <arm_cfft_f32+0x40>
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	89b1      	ldrh	r1, [r6, #12]
 8006fd4:	68b2      	ldr	r2, [r6, #8]
 8006fd6:	f7f9 f97f 	bl	80002d8 <arm_bitreversal_32>
 8006fda:	2f01      	cmp	r7, #1
 8006fdc:	d1e8      	bne.n	8006fb0 <arm_cfft_f32+0x44>
 8006fde:	ee07 5a90 	vmov	s15, r5
 8006fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006fea:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8006fee:	2d00      	cmp	r5, #0
 8006ff0:	d0de      	beq.n	8006fb0 <arm_cfft_f32+0x44>
 8006ff2:	f104 0108 	add.w	r1, r4, #8
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	ed11 7a02 	vldr	s14, [r1, #-8]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007002:	3108      	adds	r1, #8
 8007004:	429d      	cmp	r5, r3
 8007006:	ee27 7a26 	vmul.f32	s14, s14, s13
 800700a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800700e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007012:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007016:	d1ef      	bne.n	8006ff8 <arm_cfft_f32+0x8c>
 8007018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800701c:	4630      	mov	r0, r6
 800701e:	4621      	mov	r1, r4
 8007020:	f7ff fd4c 	bl	8006abc <arm_cfft_radix8by4_f32>
 8007024:	e7bf      	b.n	8006fa6 <arm_cfft_f32+0x3a>
 8007026:	b1a5      	cbz	r5, 8007052 <arm_cfft_f32+0xe6>
 8007028:	f101 030c 	add.w	r3, r1, #12
 800702c:	2200      	movs	r2, #0
 800702e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007032:	3201      	adds	r2, #1
 8007034:	3308      	adds	r3, #8
 8007036:	eef1 7a67 	vneg.f32	s15, s15
 800703a:	4295      	cmp	r5, r2
 800703c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8007040:	d1f5      	bne.n	800702e <arm_cfft_f32+0xc2>
 8007042:	e79c      	b.n	8006f7e <arm_cfft_f32+0x12>
 8007044:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8007048:	d0a7      	beq.n	8006f9a <arm_cfft_f32+0x2e>
 800704a:	e7ac      	b.n	8006fa6 <arm_cfft_f32+0x3a>
 800704c:	2d10      	cmp	r5, #16
 800704e:	d0b8      	beq.n	8006fc2 <arm_cfft_f32+0x56>
 8007050:	e7a9      	b.n	8006fa6 <arm_cfft_f32+0x3a>
 8007052:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8007056:	d896      	bhi.n	8006f86 <arm_cfft_f32+0x1a>
 8007058:	e7ac      	b.n	8006fb4 <arm_cfft_f32+0x48>
 800705a:	bf00      	nop

0800705c <arm_fir_init_f32>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	9e06      	ldr	r6, [sp, #24]
 8007060:	f06f 4440 	mvn.w	r4, #3221225472	@ 0xc0000000
 8007064:	460f      	mov	r7, r1
 8007066:	6082      	str	r2, [r0, #8]
 8007068:	4434      	add	r4, r6
 800706a:	4605      	mov	r5, r0
 800706c:	461e      	mov	r6, r3
 800706e:	8007      	strh	r7, [r0, #0]
 8007070:	19e2      	adds	r2, r4, r7
 8007072:	2100      	movs	r1, #0
 8007074:	4618      	mov	r0, r3
 8007076:	0092      	lsls	r2, r2, #2
 8007078:	f000 fe48 	bl	8007d0c <memset>
 800707c:	606e      	str	r6, [r5, #4]
 800707e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007080 <arm_fir_f32>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	4606      	mov	r6, r0
 8007086:	ed2d 8b10 	vpush	{d8-d15}
 800708a:	b089      	sub	sp, #36	@ 0x24
 800708c:	8834      	ldrh	r4, [r6, #0]
 800708e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8007092:	9004      	str	r0, [sp, #16]
 8007094:	f06f 4040 	mvn.w	r0, #3221225472	@ 0xc0000000
 8007098:	9305      	str	r3, [sp, #20]
 800709a:	08db      	lsrs	r3, r3, #3
 800709c:	4420      	add	r0, r4
 800709e:	9402      	str	r4, [sp, #8]
 80070a0:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80070a4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 80070a8:	9303      	str	r3, [sp, #12]
 80070aa:	9001      	str	r0, [sp, #4]
 80070ac:	f000 81eb 	beq.w	8007486 <arm_fir_f32+0x406>
 80070b0:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80070b4:	469e      	mov	lr, r3
 80070b6:	f004 0a07 	and.w	sl, r4, #7
 80070ba:	f100 0720 	add.w	r7, r0, #32
 80070be:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80070c2:	f101 0620 	add.w	r6, r1, #32
 80070c6:	9107      	str	r1, [sp, #28]
 80070c8:	4611      	mov	r1, r2
 80070ca:	eb08 0003 	add.w	r0, r8, r3
 80070ce:	3b04      	subs	r3, #4
 80070d0:	f10c 0420 	add.w	r4, ip, #32
 80070d4:	f102 0520 	add.w	r5, r2, #32
 80070d8:	f8cd c018 	str.w	ip, [sp, #24]
 80070dc:	4652      	mov	r2, sl
 80070de:	4684      	mov	ip, r0
 80070e0:	468a      	mov	sl, r1
 80070e2:	4648      	mov	r0, r9
 80070e4:	4699      	mov	r9, r3
 80070e6:	f856 3c20 	ldr.w	r3, [r6, #-32]
 80070ea:	1f21      	subs	r1, r4, #4
 80070ec:	ed9f 3aef 	vldr	s6, [pc, #956]	@ 80074ac <arm_fir_f32+0x42c>
 80070f0:	f847 3c20 	str.w	r3, [r7, #-32]
 80070f4:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80070f8:	f847 3c1c 	str.w	r3, [r7, #-28]
 80070fc:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8007100:	f847 3c18 	str.w	r3, [r7, #-24]
 8007104:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8007108:	f847 3c14 	str.w	r3, [r7, #-20]
 800710c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8007110:	f847 3c10 	str.w	r3, [r7, #-16]
 8007114:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8007118:	f847 3c0c 	str.w	r3, [r7, #-12]
 800711c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007120:	f847 3c08 	str.w	r3, [r7, #-8]
 8007124:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007128:	f847 3c04 	str.w	r3, [r7, #-4]
 800712c:	ed14 8a08 	vldr	s16, [r4, #-32]	@ 0xffffffe0
 8007130:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 8007134:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 8007138:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 800713c:	ed14 1a04 	vldr	s2, [r4, #-16]
 8007140:	ed54 0a03 	vldr	s1, [r4, #-12]
 8007144:	ed14 0a02 	vldr	s0, [r4, #-8]
 8007148:	2800      	cmp	r0, #0
 800714a:	f000 81f6 	beq.w	800753a <arm_fir_f32+0x4ba>
 800714e:	eeb0 9a43 	vmov.f32	s18, s6
 8007152:	f108 0120 	add.w	r1, r8, #32
 8007156:	eeb0 aa43 	vmov.f32	s20, s6
 800715a:	f104 031c 	add.w	r3, r4, #28
 800715e:	eef0 aa43 	vmov.f32	s21, s6
 8007162:	4683      	mov	fp, r0
 8007164:	eeb0 ba43 	vmov.f32	s22, s6
 8007168:	eef0 ba43 	vmov.f32	s23, s6
 800716c:	eeb0 ca43 	vmov.f32	s24, s6
 8007170:	eeb0 4a43 	vmov.f32	s8, s6
 8007174:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8007178:	f1bb 0b01 	subs.w	fp, fp, #1
 800717c:	ed53 8a08 	vldr	s17, [r3, #-32]	@ 0xffffffe0
 8007180:	f101 0120 	add.w	r1, r1, #32
 8007184:	ee28 fa23 	vmul.f32	s30, s16, s7
 8007188:	ed51 4a0f 	vldr	s9, [r1, #-60]	@ 0xffffffc4
 800718c:	ee62 eaa3 	vmul.f32	s29, s5, s7
 8007190:	ed13 8a07 	vldr	s16, [r3, #-28]	@ 0xffffffe4
 8007194:	ee22 ea23 	vmul.f32	s28, s4, s7
 8007198:	ed11 5a0e 	vldr	s10, [r1, #-56]	@ 0xffffffc8
 800719c:	ee61 daa3 	vmul.f32	s27, s3, s7
 80071a0:	ed51 5a0d 	vldr	s11, [r1, #-52]	@ 0xffffffcc
 80071a4:	ee21 da23 	vmul.f32	s26, s2, s7
 80071a8:	ed11 6a0c 	vldr	s12, [r1, #-48]	@ 0xffffffd0
 80071ac:	ee60 caa3 	vmul.f32	s25, s1, s7
 80071b0:	ed51 6a0b 	vldr	s13, [r1, #-44]	@ 0xffffffd4
 80071b4:	ee60 9a23 	vmul.f32	s19, s0, s7
 80071b8:	ed11 7a0a 	vldr	s14, [r1, #-40]	@ 0xffffffd8
 80071bc:	ee68 3aa3 	vmul.f32	s7, s17, s7
 80071c0:	ed51 7a09 	vldr	s15, [r1, #-36]	@ 0xffffffdc
 80071c4:	ee3f 4a04 	vadd.f32	s8, s30, s8
 80071c8:	f103 0320 	add.w	r3, r3, #32
 80071cc:	ee22 faa4 	vmul.f32	s30, s5, s9
 80071d0:	ed53 2a0e 	vldr	s5, [r3, #-56]	@ 0xffffffc8
 80071d4:	ee3e ca8c 	vadd.f32	s24, s29, s24
 80071d8:	ee7e ba2b 	vadd.f32	s23, s28, s23
 80071dc:	ee62 ea24 	vmul.f32	s29, s4, s9
 80071e0:	ee21 eaa4 	vmul.f32	s28, s3, s9
 80071e4:	ee3d ba8b 	vadd.f32	s22, s27, s22
 80071e8:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80071ec:	ee61 da24 	vmul.f32	s27, s2, s9
 80071f0:	ee20 daa4 	vmul.f32	s26, s1, s9
 80071f4:	ee3c aa8a 	vadd.f32	s20, s25, s20
 80071f8:	ee39 9a89 	vadd.f32	s18, s19, s18
 80071fc:	ee60 ca24 	vmul.f32	s25, s0, s9
 8007200:	ee68 9aa4 	vmul.f32	s19, s17, s9
 8007204:	ee33 3a83 	vadd.f32	s6, s7, s6
 8007208:	ee68 4a24 	vmul.f32	s9, s16, s9
 800720c:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8007210:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8007214:	ee22 fa05 	vmul.f32	s30, s4, s10
 8007218:	ed13 2a0d 	vldr	s4, [r3, #-52]	@ 0xffffffcc
 800721c:	ee61 ea85 	vmul.f32	s29, s3, s10
 8007220:	ee74 4a83 	vadd.f32	s9, s9, s6
 8007224:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8007228:	ee3d ba8b 	vadd.f32	s22, s27, s22
 800722c:	ee21 ea05 	vmul.f32	s28, s2, s10
 8007230:	ee60 da85 	vmul.f32	s27, s1, s10
 8007234:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007238:	ee3c aa8a 	vadd.f32	s20, s25, s20
 800723c:	ee20 da05 	vmul.f32	s26, s0, s10
 8007240:	ee68 ca85 	vmul.f32	s25, s17, s10
 8007244:	ee39 9a89 	vadd.f32	s18, s19, s18
 8007248:	ee68 9a05 	vmul.f32	s19, s16, s10
 800724c:	ee22 5a85 	vmul.f32	s10, s5, s10
 8007250:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8007254:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8007258:	ee21 faa5 	vmul.f32	s30, s3, s11
 800725c:	ed53 1a0c 	vldr	s3, [r3, #-48]	@ 0xffffffd0
 8007260:	ee61 ea25 	vmul.f32	s29, s2, s11
 8007264:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007268:	ee7e ba2b 	vadd.f32	s23, s28, s23
 800726c:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8007270:	ee20 eaa5 	vmul.f32	s28, s1, s11
 8007274:	ee60 da25 	vmul.f32	s27, s0, s11
 8007278:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800727c:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8007280:	ee28 daa5 	vmul.f32	s26, s17, s11
 8007284:	ee68 ca25 	vmul.f32	s25, s16, s11
 8007288:	ee39 9a89 	vadd.f32	s18, s19, s18
 800728c:	ee62 9aa5 	vmul.f32	s19, s5, s11
 8007290:	ee62 5a25 	vmul.f32	s11, s4, s11
 8007294:	ee3c aa8a 	vadd.f32	s20, s25, s20
 8007298:	ee3f 4a04 	vadd.f32	s8, s30, s8
 800729c:	ee75 5a85 	vadd.f32	s11, s11, s10
 80072a0:	ee21 fa06 	vmul.f32	s30, s2, s12
 80072a4:	ed13 1a0b 	vldr	s2, [r3, #-44]	@ 0xffffffd4
 80072a8:	ee22 5a06 	vmul.f32	s10, s4, s12
 80072ac:	ee3e ca8c 	vadd.f32	s24, s29, s24
 80072b0:	ee7e ba2b 	vadd.f32	s23, s28, s23
 80072b4:	ee60 ea86 	vmul.f32	s29, s1, s12
 80072b8:	ee20 ea06 	vmul.f32	s28, s0, s12
 80072bc:	ee3d ba8b 	vadd.f32	s22, s27, s22
 80072c0:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80072c4:	ee68 da86 	vmul.f32	s27, s17, s12
 80072c8:	ee28 da06 	vmul.f32	s26, s16, s12
 80072cc:	ee62 ca86 	vmul.f32	s25, s5, s12
 80072d0:	ee39 9a89 	vadd.f32	s18, s19, s18
 80072d4:	ee21 6a86 	vmul.f32	s12, s3, s12
 80072d8:	ee3f 4a04 	vadd.f32	s8, s30, s8
 80072dc:	ee3e ca8c 	vadd.f32	s24, s29, s24
 80072e0:	ee20 faa6 	vmul.f32	s30, s1, s13
 80072e4:	ed53 0a0a 	vldr	s1, [r3, #-40]	@ 0xffffffd8
 80072e8:	ee60 ea26 	vmul.f32	s29, s0, s13
 80072ec:	ee36 6a25 	vadd.f32	s12, s12, s11
 80072f0:	ee7e ba2b 	vadd.f32	s23, s28, s23
 80072f4:	ee61 5aa6 	vmul.f32	s11, s3, s13
 80072f8:	ee28 eaa6 	vmul.f32	s28, s17, s13
 80072fc:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8007300:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007304:	ee68 da26 	vmul.f32	s27, s16, s13
 8007308:	ee22 daa6 	vmul.f32	s26, s5, s13
 800730c:	ee7c ca8a 	vadd.f32	s25, s25, s20
 8007310:	ee35 9a09 	vadd.f32	s18, s10, s18
 8007314:	ee22 aa26 	vmul.f32	s20, s4, s13
 8007318:	ee61 6a26 	vmul.f32	s13, s2, s13
 800731c:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007320:	ee35 9a89 	vadd.f32	s18, s11, s18
 8007324:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8007328:	ee3e ca8c 	vadd.f32	s24, s29, s24
 800732c:	ee20 fa07 	vmul.f32	s30, s0, s14
 8007330:	ed13 0a09 	vldr	s0, [r3, #-36]	@ 0xffffffdc
 8007334:	ee68 ea87 	vmul.f32	s29, s17, s14
 8007338:	ee7e ba2b 	vadd.f32	s23, s28, s23
 800733c:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8007340:	ee28 ea07 	vmul.f32	s28, s16, s14
 8007344:	ee62 da87 	vmul.f32	s27, s5, s14
 8007348:	ee22 da07 	vmul.f32	s26, s4, s14
 800734c:	ee7a ca2c 	vadd.f32	s25, s20, s25
 8007350:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007354:	ee21 aa87 	vmul.f32	s20, s3, s14
 8007358:	ee20 3a87 	vmul.f32	s6, s1, s14
 800735c:	ee21 6a07 	vmul.f32	s12, s2, s14
 8007360:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8007364:	ee68 5a27 	vmul.f32	s11, s16, s15
 8007368:	ee22 5aa7 	vmul.f32	s10, s5, s15
 800736c:	ee62 4a27 	vmul.f32	s9, s4, s15
 8007370:	ee3d da2a 	vadd.f32	s26, s26, s21
 8007374:	ee7a ca2c 	vadd.f32	s25, s20, s25
 8007378:	ee61 aaa7 	vmul.f32	s21, s3, s15
 800737c:	ee21 aa27 	vmul.f32	s20, s2, s15
 8007380:	ee36 7a09 	vadd.f32	s14, s12, s18
 8007384:	ee3f 4a04 	vadd.f32	s8, s30, s8
 8007388:	ee20 9aa7 	vmul.f32	s18, s1, s15
 800738c:	ee3e ca8c 	vadd.f32	s24, s29, s24
 8007390:	ee7e ba2b 	vadd.f32	s23, s28, s23
 8007394:	ee3d ba8b 	vadd.f32	s22, s27, s22
 8007398:	ee33 3a26 	vadd.f32	s6, s6, s13
 800739c:	ee60 7a27 	vmul.f32	s15, s0, s15
 80073a0:	ee38 4a84 	vadd.f32	s8, s17, s8
 80073a4:	ee35 ca8c 	vadd.f32	s24, s11, s24
 80073a8:	ee75 ba2b 	vadd.f32	s23, s10, s23
 80073ac:	ee34 ba8b 	vadd.f32	s22, s9, s22
 80073b0:	ee7a aa8d 	vadd.f32	s21, s21, s26
 80073b4:	ee3a aa2c 	vadd.f32	s20, s20, s25
 80073b8:	ee39 9a07 	vadd.f32	s18, s18, s14
 80073bc:	ee37 3a83 	vadd.f32	s6, s15, s6
 80073c0:	f47f aed8 	bne.w	8007174 <arm_fir_f32+0xf4>
 80073c4:	eb09 0104 	add.w	r1, r9, r4
 80073c8:	46e3      	mov	fp, ip
 80073ca:	b3a2      	cbz	r2, 8007436 <arm_fir_f32+0x3b6>
 80073cc:	4613      	mov	r3, r2
 80073ce:	ecbb 6a01 	vldmia	fp!, {s12}
 80073d2:	3b01      	subs	r3, #1
 80073d4:	ecf1 5a01 	vldmia	r1!, {s11}
 80073d8:	ee68 8a06 	vmul.f32	s17, s16, s12
 80073dc:	ee62 3a86 	vmul.f32	s7, s5, s12
 80073e0:	ee62 4a06 	vmul.f32	s9, s4, s12
 80073e4:	ee21 5a86 	vmul.f32	s10, s3, s12
 80073e8:	ee61 6a06 	vmul.f32	s13, s2, s12
 80073ec:	ee20 7a86 	vmul.f32	s14, s1, s12
 80073f0:	ee60 7a06 	vmul.f32	s15, s0, s12
 80073f4:	ee25 6a86 	vmul.f32	s12, s11, s12
 80073f8:	eeb0 8a62 	vmov.f32	s16, s5
 80073fc:	ee34 4a28 	vadd.f32	s8, s8, s17
 8007400:	eef0 2a42 	vmov.f32	s5, s4
 8007404:	ee3c ca23 	vadd.f32	s24, s24, s7
 8007408:	eeb0 2a61 	vmov.f32	s4, s3
 800740c:	ee7b baa4 	vadd.f32	s23, s23, s9
 8007410:	eef0 1a41 	vmov.f32	s3, s2
 8007414:	ee3b ba05 	vadd.f32	s22, s22, s10
 8007418:	eeb0 1a60 	vmov.f32	s2, s1
 800741c:	ee7a aaa6 	vadd.f32	s21, s21, s13
 8007420:	eef0 0a40 	vmov.f32	s1, s0
 8007424:	ee3a aa07 	vadd.f32	s20, s20, s14
 8007428:	eeb0 0a65 	vmov.f32	s0, s11
 800742c:	ee39 9a27 	vadd.f32	s18, s18, s15
 8007430:	ee33 3a06 	vadd.f32	s6, s6, s12
 8007434:	d1cb      	bne.n	80073ce <arm_fir_f32+0x34e>
 8007436:	f1be 0e01 	subs.w	lr, lr, #1
 800743a:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800743e:	ed05 ca07 	vstr	s24, [r5, #-28]	@ 0xffffffe4
 8007442:	f107 0720 	add.w	r7, r7, #32
 8007446:	ed45 ba06 	vstr	s23, [r5, #-24]	@ 0xffffffe8
 800744a:	f106 0620 	add.w	r6, r6, #32
 800744e:	ed05 ba05 	vstr	s22, [r5, #-20]	@ 0xffffffec
 8007452:	f104 0420 	add.w	r4, r4, #32
 8007456:	ed45 aa04 	vstr	s21, [r5, #-16]
 800745a:	f105 0520 	add.w	r5, r5, #32
 800745e:	ed05 aa0b 	vstr	s20, [r5, #-44]	@ 0xffffffd4
 8007462:	ed05 9a0a 	vstr	s18, [r5, #-40]	@ 0xffffffd8
 8007466:	ed05 3a09 	vstr	s6, [r5, #-36]	@ 0xffffffdc
 800746a:	f47f ae3c 	bne.w	80070e6 <arm_fir_f32+0x66>
 800746e:	9b03      	ldr	r3, [sp, #12]
 8007470:	4652      	mov	r2, sl
 8007472:	9801      	ldr	r0, [sp, #4]
 8007474:	015b      	lsls	r3, r3, #5
 8007476:	f8dd c018 	ldr.w	ip, [sp, #24]
 800747a:	9907      	ldr	r1, [sp, #28]
 800747c:	4418      	add	r0, r3
 800747e:	449c      	add	ip, r3
 8007480:	4419      	add	r1, r3
 8007482:	441a      	add	r2, r3
 8007484:	9001      	str	r0, [sp, #4]
 8007486:	9b05      	ldr	r3, [sp, #20]
 8007488:	f013 0e07 	ands.w	lr, r3, #7
 800748c:	d022      	beq.n	80074d4 <arm_fir_f32+0x454>
 800748e:	9f01      	ldr	r7, [sp, #4]
 8007490:	4676      	mov	r6, lr
 8007492:	4665      	mov	r5, ip
 8007494:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007498:	f851 9b04 	ldr.w	r9, [r1], #4
 800749c:	4653      	mov	r3, sl
 800749e:	4644      	mov	r4, r8
 80074a0:	eddf 6a02 	vldr	s13, [pc, #8]	@ 80074ac <arm_fir_f32+0x42c>
 80074a4:	4628      	mov	r0, r5
 80074a6:	f847 9b04 	str.w	r9, [r7], #4
 80074aa:	e001      	b.n	80074b0 <arm_fir_f32+0x430>
 80074ac:	00000000 	.word	0x00000000
 80074b0:	ecb0 7a01 	vldmia	r0!, {s14}
 80074b4:	3b01      	subs	r3, #1
 80074b6:	ecf4 7a01 	vldmia	r4!, {s15}
 80074ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80074c2:	d1f5      	bne.n	80074b0 <arm_fir_f32+0x430>
 80074c4:	3e01      	subs	r6, #1
 80074c6:	ece2 6a01 	vstmia	r2!, {s13}
 80074ca:	f105 0504 	add.w	r5, r5, #4
 80074ce:	d1e3      	bne.n	8007498 <arm_fir_f32+0x418>
 80074d0:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 80074d4:	9b02      	ldr	r3, [sp, #8]
 80074d6:	1e59      	subs	r1, r3, #1
 80074d8:	9b04      	ldr	r3, [sp, #16]
 80074da:	088e      	lsrs	r6, r1, #2
 80074dc:	685c      	ldr	r4, [r3, #4]
 80074de:	d01d      	beq.n	800751c <arm_fir_f32+0x49c>
 80074e0:	f104 0210 	add.w	r2, r4, #16
 80074e4:	f10c 0310 	add.w	r3, ip, #16
 80074e8:	4630      	mov	r0, r6
 80074ea:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80074ee:	3801      	subs	r0, #1
 80074f0:	f103 0310 	add.w	r3, r3, #16
 80074f4:	f102 0210 	add.w	r2, r2, #16
 80074f8:	f842 5c20 	str.w	r5, [r2, #-32]
 80074fc:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 8007500:	f842 5c1c 	str.w	r5, [r2, #-28]
 8007504:	f853 5c18 	ldr.w	r5, [r3, #-24]
 8007508:	f842 5c18 	str.w	r5, [r2, #-24]
 800750c:	f853 5c14 	ldr.w	r5, [r3, #-20]
 8007510:	f842 5c14 	str.w	r5, [r2, #-20]
 8007514:	d1e9      	bne.n	80074ea <arm_fir_f32+0x46a>
 8007516:	0133      	lsls	r3, r6, #4
 8007518:	441c      	add	r4, r3
 800751a:	449c      	add	ip, r3
 800751c:	f011 0303 	ands.w	r3, r1, #3
 8007520:	d006      	beq.n	8007530 <arm_fir_f32+0x4b0>
 8007522:	4622      	mov	r2, r4
 8007524:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007528:	3b01      	subs	r3, #1
 800752a:	f842 1b04 	str.w	r1, [r2], #4
 800752e:	d1f9      	bne.n	8007524 <arm_fir_f32+0x4a4>
 8007530:	b009      	add	sp, #36	@ 0x24
 8007532:	ecbd 8b10 	vpop	{d8-d15}
 8007536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753a:	46c3      	mov	fp, r8
 800753c:	eeb0 9a43 	vmov.f32	s18, s6
 8007540:	eeb0 aa43 	vmov.f32	s20, s6
 8007544:	eef0 aa43 	vmov.f32	s21, s6
 8007548:	eeb0 ba43 	vmov.f32	s22, s6
 800754c:	eef0 ba43 	vmov.f32	s23, s6
 8007550:	eeb0 ca43 	vmov.f32	s24, s6
 8007554:	eeb0 4a43 	vmov.f32	s8, s6
 8007558:	e737      	b.n	80073ca <arm_fir_f32+0x34a>
 800755a:	bf00      	nop

0800755c <arm_scale_f32>:
 800755c:	b470      	push	{r4, r5, r6}
 800755e:	0896      	lsrs	r6, r2, #2
 8007560:	d025      	beq.n	80075ae <arm_scale_f32+0x52>
 8007562:	f100 0410 	add.w	r4, r0, #16
 8007566:	f101 0310 	add.w	r3, r1, #16
 800756a:	4635      	mov	r5, r6
 800756c:	ed14 6a04 	vldr	s12, [r4, #-16]
 8007570:	3d01      	subs	r5, #1
 8007572:	ed54 6a03 	vldr	s13, [r4, #-12]
 8007576:	f103 0310 	add.w	r3, r3, #16
 800757a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800757e:	ee26 6a00 	vmul.f32	s12, s12, s0
 8007582:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007586:	ee66 6a80 	vmul.f32	s13, s13, s0
 800758a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800758e:	f104 0410 	add.w	r4, r4, #16
 8007592:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007596:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 800759a:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800759e:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 80075a2:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 80075a6:	d1e1      	bne.n	800756c <arm_scale_f32+0x10>
 80075a8:	0136      	lsls	r6, r6, #4
 80075aa:	4430      	add	r0, r6
 80075ac:	4431      	add	r1, r6
 80075ae:	f012 0203 	ands.w	r2, r2, #3
 80075b2:	d007      	beq.n	80075c4 <arm_scale_f32+0x68>
 80075b4:	ecf0 7a01 	vldmia	r0!, {s15}
 80075b8:	3a01      	subs	r2, #1
 80075ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 80075be:	ece1 7a01 	vstmia	r1!, {s15}
 80075c2:	d1f7      	bne.n	80075b4 <arm_scale_f32+0x58>
 80075c4:	bc70      	pop	{r4, r5, r6}
 80075c6:	4770      	bx	lr

080075c8 <arm_offset_f32>:
 80075c8:	b470      	push	{r4, r5, r6}
 80075ca:	0896      	lsrs	r6, r2, #2
 80075cc:	d025      	beq.n	800761a <arm_offset_f32+0x52>
 80075ce:	f100 0410 	add.w	r4, r0, #16
 80075d2:	f101 0310 	add.w	r3, r1, #16
 80075d6:	4635      	mov	r5, r6
 80075d8:	ed14 6a04 	vldr	s12, [r4, #-16]
 80075dc:	3d01      	subs	r5, #1
 80075de:	ed54 6a03 	vldr	s13, [r4, #-12]
 80075e2:	f103 0310 	add.w	r3, r3, #16
 80075e6:	ed14 7a02 	vldr	s14, [r4, #-8]
 80075ea:	ee36 6a00 	vadd.f32	s12, s12, s0
 80075ee:	ed54 7a01 	vldr	s15, [r4, #-4]
 80075f2:	ee76 6a80 	vadd.f32	s13, s13, s0
 80075f6:	ee37 7a00 	vadd.f32	s14, s14, s0
 80075fa:	f104 0410 	add.w	r4, r4, #16
 80075fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007602:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 8007606:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800760a:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 800760e:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8007612:	d1e1      	bne.n	80075d8 <arm_offset_f32+0x10>
 8007614:	0136      	lsls	r6, r6, #4
 8007616:	4430      	add	r0, r6
 8007618:	4431      	add	r1, r6
 800761a:	f012 0203 	ands.w	r2, r2, #3
 800761e:	d007      	beq.n	8007630 <arm_offset_f32+0x68>
 8007620:	ecf0 7a01 	vldmia	r0!, {s15}
 8007624:	3a01      	subs	r2, #1
 8007626:	ee77 7a80 	vadd.f32	s15, s15, s0
 800762a:	ece1 7a01 	vstmia	r1!, {s15}
 800762e:	d1f7      	bne.n	8007620 <arm_offset_f32+0x58>
 8007630:	bc70      	pop	{r4, r5, r6}
 8007632:	4770      	bx	lr

08007634 <arm_mult_f32>:
 8007634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007636:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800763a:	d033      	beq.n	80076a4 <arm_mult_f32+0x70>
 800763c:	f100 0610 	add.w	r6, r0, #16
 8007640:	f101 0510 	add.w	r5, r1, #16
 8007644:	f102 0410 	add.w	r4, r2, #16
 8007648:	4677      	mov	r7, lr
 800764a:	ed16 7a04 	vldr	s14, [r6, #-16]
 800764e:	3f01      	subs	r7, #1
 8007650:	ed15 6a04 	vldr	s12, [r5, #-16]
 8007654:	f106 0610 	add.w	r6, r6, #16
 8007658:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 800765c:	f105 0510 	add.w	r5, r5, #16
 8007660:	ee27 6a06 	vmul.f32	s12, s14, s12
 8007664:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 8007668:	ed16 7a07 	vldr	s14, [r6, #-28]	@ 0xffffffe4
 800766c:	f104 0410 	add.w	r4, r4, #16
 8007670:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 8007674:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007678:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 800767c:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 8007680:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007684:	ed15 6a05 	vldr	s12, [r5, #-20]	@ 0xffffffec
 8007688:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 800768c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007690:	ed04 7a07 	vstr	s14, [r4, #-28]	@ 0xffffffe4
 8007694:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8007698:	d1d7      	bne.n	800764a <arm_mult_f32+0x16>
 800769a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800769e:	4420      	add	r0, r4
 80076a0:	4421      	add	r1, r4
 80076a2:	4422      	add	r2, r4
 80076a4:	f013 0303 	ands.w	r3, r3, #3
 80076a8:	d009      	beq.n	80076be <arm_mult_f32+0x8a>
 80076aa:	ecf0 7a01 	vldmia	r0!, {s15}
 80076ae:	3b01      	subs	r3, #1
 80076b0:	ecb1 7a01 	vldmia	r1!, {s14}
 80076b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076b8:	ece2 7a01 	vstmia	r2!, {s15}
 80076bc:	d1f5      	bne.n	80076aa <arm_mult_f32+0x76>
 80076be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076c0 <arm_add_f32>:
 80076c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80076c6:	d033      	beq.n	8007730 <arm_add_f32+0x70>
 80076c8:	f100 0610 	add.w	r6, r0, #16
 80076cc:	f101 0510 	add.w	r5, r1, #16
 80076d0:	f102 0410 	add.w	r4, r2, #16
 80076d4:	4677      	mov	r7, lr
 80076d6:	ed16 7a03 	vldr	s14, [r6, #-12]
 80076da:	3f01      	subs	r7, #1
 80076dc:	ed56 7a02 	vldr	s15, [r6, #-8]
 80076e0:	f105 0510 	add.w	r5, r5, #16
 80076e4:	ed15 6a07 	vldr	s12, [r5, #-28]	@ 0xffffffe4
 80076e8:	f106 0610 	add.w	r6, r6, #16
 80076ec:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 80076f0:	f104 0410 	add.w	r4, r4, #16
 80076f4:	ed15 5a05 	vldr	s10, [r5, #-20]	@ 0xffffffec
 80076f8:	ee37 6a06 	vadd.f32	s12, s14, s12
 80076fc:	ed55 5a08 	vldr	s11, [r5, #-32]	@ 0xffffffe0
 8007700:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007704:	ed16 7a05 	vldr	s14, [r6, #-20]	@ 0xffffffec
 8007708:	ed56 7a08 	vldr	s15, [r6, #-32]	@ 0xffffffe0
 800770c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007710:	ed04 6a07 	vstr	s12, [r4, #-28]	@ 0xffffffe4
 8007714:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007718:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 800771c:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 8007720:	ed44 7a08 	vstr	s15, [r4, #-32]	@ 0xffffffe0
 8007724:	d1d7      	bne.n	80076d6 <arm_add_f32+0x16>
 8007726:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800772a:	4420      	add	r0, r4
 800772c:	4421      	add	r1, r4
 800772e:	4422      	add	r2, r4
 8007730:	f013 0303 	ands.w	r3, r3, #3
 8007734:	d009      	beq.n	800774a <arm_add_f32+0x8a>
 8007736:	ecf0 7a01 	vldmia	r0!, {s15}
 800773a:	3b01      	subs	r3, #1
 800773c:	ecb1 7a01 	vldmia	r1!, {s14}
 8007740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007744:	ece2 7a01 	vstmia	r2!, {s15}
 8007748:	d1f5      	bne.n	8007736 <arm_add_f32+0x76>
 800774a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800774c <arm_radix8_butterfly_f32>:
 800774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007750:	469e      	mov	lr, r3
 8007752:	1d03      	adds	r3, r0, #4
 8007754:	4683      	mov	fp, r0
 8007756:	468a      	mov	sl, r1
 8007758:	4688      	mov	r8, r1
 800775a:	469c      	mov	ip, r3
 800775c:	ed2d 8b10 	vpush	{d8-d15}
 8007760:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 8007a74 <arm_radix8_butterfly_f32+0x328>
 8007764:	b09f      	sub	sp, #124	@ 0x7c
 8007766:	921c      	str	r2, [sp, #112]	@ 0x70
 8007768:	931d      	str	r3, [sp, #116]	@ 0x74
 800776a:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 800776e:	f04f 0900 	mov.w	r9, #0
 8007772:	461a      	mov	r2, r3
 8007774:	930e      	str	r3, [sp, #56]	@ 0x38
 8007776:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800777a:	0051      	lsls	r1, r2, #1
 800777c:	4608      	mov	r0, r1
 800777e:	9103      	str	r1, [sp, #12]
 8007780:	00d1      	lsls	r1, r2, #3
 8007782:	1885      	adds	r5, r0, r2
 8007784:	0110      	lsls	r0, r2, #4
 8007786:	eb0b 0601 	add.w	r6, fp, r1
 800778a:	9101      	str	r1, [sp, #4]
 800778c:	18ac      	adds	r4, r5, r2
 800778e:	9002      	str	r0, [sp, #8]
 8007790:	1877      	adds	r7, r6, r1
 8007792:	4611      	mov	r1, r2
 8007794:	4422      	add	r2, r4
 8007796:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800779a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800779e:	1850      	adds	r0, r2, r1
 80077a0:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80077a4:	4401      	add	r1, r0
 80077a6:	3204      	adds	r2, #4
 80077a8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 80077ac:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 80077b0:	3104      	adds	r1, #4
 80077b2:	ed1c 7a01 	vldr	s14, [ip, #-4]
 80077b6:	44c1      	add	r9, r8
 80077b8:	edd4 6a00 	vldr	s13, [r4]
 80077bc:	ed97 6a00 	vldr	s12, [r7]
 80077c0:	45ca      	cmp	sl, r9
 80077c2:	edd0 7a00 	vldr	s15, [r0]
 80077c6:	ee37 5a66 	vsub.f32	s10, s14, s13
 80077ca:	edd6 5a00 	vldr	s11, [r6]
 80077ce:	ee37 2a26 	vadd.f32	s4, s14, s13
 80077d2:	ee76 2a67 	vsub.f32	s5, s12, s15
 80077d6:	edd5 6a00 	vldr	s13, [r5]
 80077da:	ed12 7a01 	vldr	s14, [r2, #-4]
 80077de:	ee76 4a27 	vadd.f32	s9, s12, s15
 80077e2:	ed11 6a01 	vldr	s12, [r1, #-4]
 80077e6:	ee75 1a87 	vadd.f32	s3, s11, s14
 80077ea:	ee36 4a86 	vadd.f32	s8, s13, s12
 80077ee:	ee72 7a24 	vadd.f32	s15, s4, s9
 80077f2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80077f6:	ee76 5ac6 	vsub.f32	s11, s13, s12
 80077fa:	ee31 6a84 	vadd.f32	s12, s3, s8
 80077fe:	ee32 2a64 	vsub.f32	s4, s4, s9
 8007802:	ee77 6a65 	vsub.f32	s13, s14, s11
 8007806:	ee77 4a86 	vadd.f32	s9, s15, s12
 800780a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800780e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007812:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8007816:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800781a:	edc4 7a00 	vstr	s15, [r4]
 800781e:	ee66 6a89 	vmul.f32	s13, s13, s18
 8007822:	edd6 5a01 	vldr	s11, [r6, #4]
 8007826:	ee27 6a09 	vmul.f32	s12, s14, s18
 800782a:	edd5 3a01 	vldr	s7, [r5, #4]
 800782e:	ed92 4a00 	vldr	s8, [r2]
 8007832:	ee35 1a26 	vadd.f32	s2, s10, s13
 8007836:	edd1 4a00 	vldr	s9, [r1]
 800783a:	ee75 6a66 	vsub.f32	s13, s10, s13
 800783e:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8007842:	ed94 0a01 	vldr	s0, [r4, #4]
 8007846:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800784a:	ed9c 7a00 	vldr	s14, [ip]
 800784e:	edd0 0a01 	vldr	s1, [r0, #4]
 8007852:	ee35 4a84 	vadd.f32	s8, s11, s8
 8007856:	ed97 5a01 	vldr	s10, [r7, #4]
 800785a:	ee73 4aa4 	vadd.f32	s9, s7, s9
 800785e:	ee73 5a27 	vadd.f32	s11, s6, s15
 8007862:	ee77 3a00 	vadd.f32	s7, s14, s0
 8007866:	ee33 3a67 	vsub.f32	s6, s6, s15
 800786a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800786e:	ee35 0a20 	vadd.f32	s0, s10, s1
 8007872:	ee63 7a09 	vmul.f32	s15, s6, s18
 8007876:	ee35 5a60 	vsub.f32	s10, s10, s1
 800787a:	ee33 3a80 	vadd.f32	s6, s7, s0
 800787e:	ee74 0a24 	vadd.f32	s1, s8, s9
 8007882:	ee65 5a89 	vmul.f32	s11, s11, s18
 8007886:	ee74 4a64 	vsub.f32	s9, s8, s9
 800788a:	ee33 4ac0 	vsub.f32	s8, s7, s0
 800788e:	ee75 3a25 	vadd.f32	s7, s10, s11
 8007892:	ee75 5a65 	vsub.f32	s11, s10, s11
 8007896:	ee37 5a27 	vadd.f32	s10, s14, s15
 800789a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800789e:	ee32 7a86 	vadd.f32	s14, s5, s12
 80078a2:	ee32 6ac6 	vsub.f32	s12, s5, s12
 80078a6:	ee73 2a20 	vadd.f32	s5, s6, s1
 80078aa:	ee33 3a60 	vsub.f32	s6, s6, s1
 80078ae:	ee72 0a24 	vadd.f32	s1, s4, s9
 80078b2:	edcc 2a00 	vstr	s5, [ip]
 80078b6:	ee72 4a64 	vsub.f32	s9, s4, s9
 80078ba:	ed84 3a01 	vstr	s6, [r4, #4]
 80078be:	ee74 2a61 	vsub.f32	s5, s8, s3
 80078c2:	ee31 3a23 	vadd.f32	s6, s2, s7
 80078c6:	edc7 0a00 	vstr	s1, [r7]
 80078ca:	ee31 1a63 	vsub.f32	s2, s2, s7
 80078ce:	edc0 4a00 	vstr	s9, [r0]
 80078d2:	ee76 3aa5 	vadd.f32	s7, s13, s11
 80078d6:	edc7 2a01 	vstr	s5, [r7, #4]
 80078da:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80078de:	441c      	add	r4, r3
 80078e0:	ee75 5a47 	vsub.f32	s11, s10, s14
 80078e4:	449c      	add	ip, r3
 80078e6:	ee35 5a07 	vadd.f32	s10, s10, s14
 80078ea:	441f      	add	r7, r3
 80078ec:	ee37 7ac6 	vsub.f32	s14, s15, s12
 80078f0:	ee34 4a21 	vadd.f32	s8, s8, s3
 80078f4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80078f8:	ed80 4a01 	vstr	s8, [r0, #4]
 80078fc:	4418      	add	r0, r3
 80078fe:	ed86 3a00 	vstr	s6, [r6]
 8007902:	ed01 1a01 	vstr	s2, [r1, #-4]
 8007906:	ed42 3a01 	vstr	s7, [r2, #-4]
 800790a:	edc5 6a00 	vstr	s13, [r5]
 800790e:	edc6 5a01 	vstr	s11, [r6, #4]
 8007912:	441e      	add	r6, r3
 8007914:	ed81 5a00 	vstr	s10, [r1]
 8007918:	4419      	add	r1, r3
 800791a:	ed82 7a00 	vstr	s14, [r2]
 800791e:	441a      	add	r2, r3
 8007920:	edc5 7a01 	vstr	s15, [r5, #4]
 8007924:	441d      	add	r5, r3
 8007926:	f63f af44 	bhi.w	80077b2 <arm_radix8_butterfly_f32+0x66>
 800792a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800792c:	2f07      	cmp	r7, #7
 800792e:	f240 81e8 	bls.w	8007d02 <arm_radix8_butterfly_f32+0x5b6>
 8007932:	9903      	ldr	r1, [sp, #12]
 8007934:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8007938:	9e01      	ldr	r6, [sp, #4]
 800793a:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 800793e:	19ca      	adds	r2, r1, r7
 8007940:	1c4c      	adds	r4, r1, #1
 8007942:	eb05 010e 	add.w	r1, r5, lr
 8007946:	00ed      	lsls	r5, r5, #3
 8007948:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800794c:	3608      	adds	r6, #8
 800794e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007950:	eb01 050e 	add.w	r5, r1, lr
 8007954:	00c9      	lsls	r1, r1, #3
 8007956:	443c      	add	r4, r7
 8007958:	9618      	str	r6, [sp, #96]	@ 0x60
 800795a:	00ee      	lsls	r6, r5, #3
 800795c:	460f      	mov	r7, r1
 800795e:	9114      	str	r1, [sp, #80]	@ 0x50
 8007960:	9902      	ldr	r1, [sp, #8]
 8007962:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8007966:	9611      	str	r6, [sp, #68]	@ 0x44
 8007968:	00c0      	lsls	r0, r0, #3
 800796a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800796c:	3108      	adds	r1, #8
 800796e:	3404      	adds	r4, #4
 8007970:	f04f 0901 	mov.w	r9, #1
 8007974:	9119      	str	r1, [sp, #100]	@ 0x64
 8007976:	eb05 010e 	add.w	r1, r5, lr
 800797a:	4635      	mov	r5, r6
 800797c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	443d      	add	r5, r7
 8007982:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8007984:	9507      	str	r5, [sp, #28]
 8007986:	eb01 050e 	add.w	r5, r1, lr
 800798a:	00c9      	lsls	r1, r1, #3
 800798c:	19f7      	adds	r7, r6, r7
 800798e:	00ed      	lsls	r5, r5, #3
 8007990:	9110      	str	r1, [sp, #64]	@ 0x40
 8007992:	00d1      	lsls	r1, r2, #3
 8007994:	970a      	str	r7, [sp, #40]	@ 0x28
 8007996:	462f      	mov	r7, r5
 8007998:	9515      	str	r5, [sp, #84]	@ 0x54
 800799a:	0112      	lsls	r2, r2, #4
 800799c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800799e:	19f4      	adds	r4, r6, r7
 80079a0:	320c      	adds	r2, #12
 80079a2:	3108      	adds	r1, #8
 80079a4:	1975      	adds	r5, r6, r5
 80079a6:	9408      	str	r4, [sp, #32]
 80079a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80079aa:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80079ae:	9509      	str	r5, [sp, #36]	@ 0x24
 80079b0:	f100 020c 	add.w	r2, r0, #12
 80079b4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80079b6:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80079b8:	1975      	adds	r5, r6, r5
 80079ba:	9216      	str	r2, [sp, #88]	@ 0x58
 80079bc:	1932      	adds	r2, r6, r4
 80079be:	911b      	str	r1, [sp, #108]	@ 0x6c
 80079c0:	9505      	str	r5, [sp, #20]
 80079c2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80079c6:	0179      	lsls	r1, r7, #5
 80079c8:	9204      	str	r2, [sp, #16]
 80079ca:	1972      	adds	r2, r6, r5
 80079cc:	9412      	str	r4, [sp, #72]	@ 0x48
 80079ce:	9513      	str	r5, [sp, #76]	@ 0x4c
 80079d0:	9206      	str	r2, [sp, #24]
 80079d2:	f101 0208 	add.w	r2, r1, #8
 80079d6:	921a      	str	r2, [sp, #104]	@ 0x68
 80079d8:	2200      	movs	r2, #0
 80079da:	f102 0108 	add.w	r1, r2, #8
 80079de:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80079e0:	46cc      	mov	ip, r9
 80079e2:	460f      	mov	r7, r1
 80079e4:	910c      	str	r1, [sp, #48]	@ 0x30
 80079e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079e8:	eb0b 0e07 	add.w	lr, fp, r7
 80079ec:	9f04      	ldr	r7, [sp, #16]
 80079ee:	188e      	adds	r6, r1, r2
 80079f0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80079f2:	edd7 fa00 	vldr	s31, [r7]
 80079f6:	9f06      	ldr	r7, [sp, #24]
 80079f8:	188d      	adds	r5, r1, r2
 80079fa:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80079fc:	445e      	add	r6, fp
 80079fe:	ed97 fa00 	vldr	s30, [r7]
 8007a02:	445d      	add	r5, fp
 8007a04:	9f05      	ldr	r7, [sp, #20]
 8007a06:	188c      	adds	r4, r1, r2
 8007a08:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8007a0a:	edd7 ea00 	vldr	s29, [r7]
 8007a0e:	445c      	add	r4, fp
 8007a10:	9f07      	ldr	r7, [sp, #28]
 8007a12:	1888      	adds	r0, r1, r2
 8007a14:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8007a16:	ed97 ea00 	vldr	s28, [r7]
 8007a1a:	4458      	add	r0, fp
 8007a1c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007a1e:	4411      	add	r1, r2
 8007a20:	441a      	add	r2, r3
 8007a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a24:	edd7 da00 	vldr	s27, [r7]
 8007a28:	4459      	add	r1, fp
 8007a2a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007a2c:	445a      	add	r2, fp
 8007a2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007a30:	ed97 da00 	vldr	s26, [r7]
 8007a34:	9f08      	ldr	r7, [sp, #32]
 8007a36:	edd7 ca00 	vldr	s25, [r7]
 8007a3a:	9f04      	ldr	r7, [sp, #16]
 8007a3c:	ed97 ca01 	vldr	s24, [r7, #4]
 8007a40:	9f06      	ldr	r7, [sp, #24]
 8007a42:	edd7 ba01 	vldr	s23, [r7, #4]
 8007a46:	9f05      	ldr	r7, [sp, #20]
 8007a48:	ed97 ba01 	vldr	s22, [r7, #4]
 8007a4c:	9f07      	ldr	r7, [sp, #28]
 8007a4e:	edd7 aa01 	vldr	s21, [r7, #4]
 8007a52:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007a54:	ed97 aa01 	vldr	s20, [r7, #4]
 8007a58:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007a5a:	9b01      	ldr	r3, [sp, #4]
 8007a5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a60:	9f08      	ldr	r7, [sp, #32]
 8007a62:	edcd 7a02 	vstr	s15, [sp, #8]
 8007a66:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a6a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8007a6c:	edcd 7a03 	vstr	s15, [sp, #12]
 8007a70:	e002      	b.n	8007a78 <arm_radix8_butterfly_f32+0x32c>
 8007a72:	bf00      	nop
 8007a74:	3f3504f3 	.word	0x3f3504f3
 8007a78:	ed90 2a00 	vldr	s4, [r0]
 8007a7c:	44c4      	add	ip, r8
 8007a7e:	ed96 7a00 	vldr	s14, [r6]
 8007a82:	ed94 8a00 	vldr	s16, [r4]
 8007a86:	45e2      	cmp	sl, ip
 8007a88:	ed52 7a01 	vldr	s15, [r2, #-4]
 8007a8c:	ed95 5a00 	vldr	s10, [r5]
 8007a90:	ed51 5a01 	vldr	s11, [r1, #-4]
 8007a94:	ee38 6a27 	vadd.f32	s12, s16, s15
 8007a98:	ed9e 1a00 	vldr	s2, [lr]
 8007a9c:	ee78 2a67 	vsub.f32	s5, s16, s15
 8007aa0:	ed17 4a01 	vldr	s8, [r7, #-4]
 8007aa4:	ee75 3a25 	vadd.f32	s7, s10, s11
 8007aa8:	ee31 3a07 	vadd.f32	s6, s2, s14
 8007aac:	edde 4a01 	vldr	s9, [lr, #4]
 8007ab0:	ee72 6a04 	vadd.f32	s13, s4, s8
 8007ab4:	ee75 5a65 	vsub.f32	s11, s10, s11
 8007ab8:	ee73 1a06 	vadd.f32	s3, s6, s12
 8007abc:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8007ac0:	ee32 4a44 	vsub.f32	s8, s4, s8
 8007ac4:	ee31 1a47 	vsub.f32	s2, s2, s14
 8007ac8:	ee31 7a85 	vadd.f32	s14, s3, s10
 8007acc:	ee75 7a84 	vadd.f32	s15, s11, s8
 8007ad0:	ee33 3a46 	vsub.f32	s6, s6, s12
 8007ad4:	ed8e 7a00 	vstr	s14, [lr]
 8007ad8:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8007adc:	ee67 7a89 	vmul.f32	s15, s15, s18
 8007ae0:	ed90 2a01 	vldr	s4, [r0, #4]
 8007ae4:	ed95 7a01 	vldr	s14, [r5, #4]
 8007ae8:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8007aec:	ed91 6a00 	vldr	s12, [r1]
 8007af0:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8007af4:	edd7 8a00 	vldr	s17, [r7]
 8007af8:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8007afc:	ee72 5aa7 	vadd.f32	s11, s5, s15
 8007b00:	edd2 0a00 	vldr	s1, [r2]
 8007b04:	ee72 6a68 	vsub.f32	s13, s4, s17
 8007b08:	edd6 7a01 	vldr	s15, [r6, #4]
 8007b0c:	ee77 2a46 	vsub.f32	s5, s14, s12
 8007b10:	ee37 0a06 	vadd.f32	s0, s14, s12
 8007b14:	ed94 7a01 	vldr	s14, [r4, #4]
 8007b18:	ee32 6a28 	vadd.f32	s12, s4, s17
 8007b1c:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8007b20:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8007b24:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8007b28:	ee77 6a20 	vadd.f32	s13, s14, s1
 8007b2c:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8007b30:	ee37 7a60 	vsub.f32	s14, s14, s1
 8007b34:	ee24 4a09 	vmul.f32	s8, s8, s18
 8007b38:	ee70 0a06 	vadd.f32	s1, s0, s12
 8007b3c:	ee69 7a89 	vmul.f32	s15, s19, s18
 8007b40:	ee62 2a89 	vmul.f32	s5, s5, s18
 8007b44:	ee30 6a46 	vsub.f32	s12, s0, s12
 8007b48:	ee32 0a26 	vadd.f32	s0, s4, s13
 8007b4c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8007b50:	ee77 8a62 	vsub.f32	s17, s14, s5
 8007b54:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8007b58:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8007b5c:	ee77 4a22 	vadd.f32	s9, s14, s5
 8007b60:	ee71 2a04 	vadd.f32	s5, s2, s8
 8007b64:	ee31 7a44 	vsub.f32	s14, s2, s8
 8007b68:	ee30 1a60 	vsub.f32	s2, s0, s1
 8007b6c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8007b70:	ee33 6a46 	vsub.f32	s12, s6, s12
 8007b74:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8007b78:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8007b7c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8007b80:	ee77 7a88 	vadd.f32	s15, s15, s16
 8007b84:	ee72 3a65 	vsub.f32	s7, s4, s11
 8007b88:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8007b8c:	ee72 5a25 	vadd.f32	s11, s4, s11
 8007b90:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8007b94:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8007b98:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8007b9c:	ee77 2a28 	vadd.f32	s5, s14, s17
 8007ba0:	ee37 7a68 	vsub.f32	s14, s14, s17
 8007ba4:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8007ba8:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8007bac:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8007bb0:	ee70 0a20 	vadd.f32	s1, s0, s1
 8007bb4:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8007bb8:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8007bbc:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8007bc0:	edce 0a01 	vstr	s1, [lr, #4]
 8007bc4:	ee38 8a88 	vadd.f32	s16, s17, s16
 8007bc8:	449e      	add	lr, r3
 8007bca:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8007bce:	ee31 5a45 	vsub.f32	s10, s2, s10
 8007bd2:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8007bd6:	ed86 8a00 	vstr	s16, [r6]
 8007bda:	ee39 0a80 	vadd.f32	s0, s19, s0
 8007bde:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007be2:	ed86 5a01 	vstr	s10, [r6, #4]
 8007be6:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8007bea:	edcd 3a01 	vstr	s7, [sp, #4]
 8007bee:	ed9d 5a03 	vldr	s10, [sp, #12]
 8007bf2:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8007bf6:	eddd 3a02 	vldr	s7, [sp, #8]
 8007bfa:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8007bfe:	ed84 0a00 	vstr	s0, [r4]
 8007c02:	ee65 4a24 	vmul.f32	s9, s10, s9
 8007c06:	ed84 3a01 	vstr	s6, [r4, #4]
 8007c0a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8007c0e:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007c12:	eddd 3a01 	vldr	s7, [sp, #4]
 8007c16:	ee25 5a25 	vmul.f32	s10, s10, s11
 8007c1a:	441e      	add	r6, r3
 8007c1c:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8007c20:	441c      	add	r4, r3
 8007c22:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8007c26:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8007c2a:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8007c2e:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8007c32:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8007c36:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8007c3a:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8007c3e:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8007c42:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8007c46:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8007c4a:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8007c4e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8007c52:	ee38 8a01 	vadd.f32	s16, s16, s2
 8007c56:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8007c5a:	ee39 5a85 	vadd.f32	s10, s19, s10
 8007c5e:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8007c62:	ed02 8a01 	vstr	s16, [r2, #-4]
 8007c66:	ee30 0a21 	vadd.f32	s0, s0, s3
 8007c6a:	ed82 6a00 	vstr	s12, [r2]
 8007c6e:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007c72:	edc5 0a00 	vstr	s1, [r5]
 8007c76:	ee33 3a28 	vadd.f32	s6, s6, s17
 8007c7a:	edc5 3a01 	vstr	s7, [r5, #4]
 8007c7e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007c82:	ed07 5a01 	vstr	s10, [r7, #-4]
 8007c86:	edc7 4a00 	vstr	s9, [r7]
 8007c8a:	441d      	add	r5, r3
 8007c8c:	ed01 0a01 	vstr	s0, [r1, #-4]
 8007c90:	441a      	add	r2, r3
 8007c92:	edc1 2a00 	vstr	s5, [r1]
 8007c96:	441f      	add	r7, r3
 8007c98:	ed80 3a00 	vstr	s6, [r0]
 8007c9c:	4419      	add	r1, r3
 8007c9e:	ed80 7a01 	vstr	s14, [r0, #4]
 8007ca2:	4418      	add	r0, r3
 8007ca4:	f63f aee8 	bhi.w	8007a78 <arm_radix8_butterfly_f32+0x32c>
 8007ca8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007caa:	f109 0901 	add.w	r9, r9, #1
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	9b04      	ldr	r3, [sp, #16]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007cb6:	9304      	str	r3, [sp, #16]
 8007cb8:	9b06      	ldr	r3, [sp, #24]
 8007cba:	4413      	add	r3, r2
 8007cbc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007cbe:	9306      	str	r3, [sp, #24]
 8007cc0:	9b05      	ldr	r3, [sp, #20]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007cc6:	9305      	str	r3, [sp, #20]
 8007cc8:	9b07      	ldr	r3, [sp, #28]
 8007cca:	4413      	add	r3, r2
 8007ccc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007cce:	9307      	str	r3, [sp, #28]
 8007cd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cd2:	4413      	add	r3, r2
 8007cd4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cda:	4413      	add	r3, r2
 8007cdc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007cde:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ce0:	9b08      	ldr	r3, [sp, #32]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ce6:	9308      	str	r3, [sp, #32]
 8007ce8:	3208      	adds	r2, #8
 8007cea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cec:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007cee:	4599      	cmp	r9, r3
 8007cf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007cf2:	f47f ae72 	bne.w	80079da <arm_radix8_butterfly_f32+0x28e>
 8007cf6:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 8007cfa:	46c8      	mov	r8, r9
 8007cfc:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 8007d00:	e533      	b.n	800776a <arm_radix8_butterfly_f32+0x1e>
 8007d02:	b01f      	add	sp, #124	@ 0x7c
 8007d04:	ecbd 8b10 	vpop	{d8-d15}
 8007d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d0c <memset>:
 8007d0c:	4402      	add	r2, r0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d100      	bne.n	8007d16 <memset+0xa>
 8007d14:	4770      	bx	lr
 8007d16:	f803 1b01 	strb.w	r1, [r3], #1
 8007d1a:	e7f9      	b.n	8007d10 <memset+0x4>

08007d1c <__libc_init_array>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	4d0d      	ldr	r5, [pc, #52]	@ (8007d54 <__libc_init_array+0x38>)
 8007d20:	4c0d      	ldr	r4, [pc, #52]	@ (8007d58 <__libc_init_array+0x3c>)
 8007d22:	1b64      	subs	r4, r4, r5
 8007d24:	10a4      	asrs	r4, r4, #2
 8007d26:	2600      	movs	r6, #0
 8007d28:	42a6      	cmp	r6, r4
 8007d2a:	d109      	bne.n	8007d40 <__libc_init_array+0x24>
 8007d2c:	4d0b      	ldr	r5, [pc, #44]	@ (8007d5c <__libc_init_array+0x40>)
 8007d2e:	4c0c      	ldr	r4, [pc, #48]	@ (8007d60 <__libc_init_array+0x44>)
 8007d30:	f000 f818 	bl	8007d64 <_init>
 8007d34:	1b64      	subs	r4, r4, r5
 8007d36:	10a4      	asrs	r4, r4, #2
 8007d38:	2600      	movs	r6, #0
 8007d3a:	42a6      	cmp	r6, r4
 8007d3c:	d105      	bne.n	8007d4a <__libc_init_array+0x2e>
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}
 8007d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d44:	4798      	blx	r3
 8007d46:	3601      	adds	r6, #1
 8007d48:	e7ee      	b.n	8007d28 <__libc_init_array+0xc>
 8007d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4e:	4798      	blx	r3
 8007d50:	3601      	adds	r6, #1
 8007d52:	e7f2      	b.n	8007d3a <__libc_init_array+0x1e>
 8007d54:	0801fac4 	.word	0x0801fac4
 8007d58:	0801fac4 	.word	0x0801fac4
 8007d5c:	0801fac4 	.word	0x0801fac4
 8007d60:	0801fac8 	.word	0x0801fac8

08007d64 <_init>:
 8007d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d66:	bf00      	nop
 8007d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6a:	bc08      	pop	{r3}
 8007d6c:	469e      	mov	lr, r3
 8007d6e:	4770      	bx	lr

08007d70 <_fini>:
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	bf00      	nop
 8007d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d76:	bc08      	pop	{r3}
 8007d78:	469e      	mov	lr, r3
 8007d7a:	4770      	bx	lr
