
STM32H743-DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c724  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000778cc  0800c9e0  0800c9e0  0000d9e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080842ac  080842ac  000852ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080842b4  080842b4  000852b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080842b8  080842b8  000852b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  24000000  080842bc  00086000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcm_bss     00011020  20000000  20000000  00087000  2**5
                  ALLOC
  8 .dtcm_data    00000000  20011020  20011020  00086084  2**0
                  CONTENTS
  9 .bss          0006f6b8  24000084  24000084  00086084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2406f73c  2406f73c  00086084  2**0
                  ALLOC
 11 .ramd2        00028004  30000000  30000000  00087000  2**2
                  ALLOC
 12 .ramd3        0000e1b0  38000000  38000000  00087000  2**2
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00086084  2**0
                  CONTENTS, READONLY
 14 .debug_info   000353c6  00000000  00000000  000860b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006d3c  00000000  00000000  000bb478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00017f3a  00000000  00000000  000c21b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a80  00000000  00000000  000da0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002c0d  00000000  00000000  000dbb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ebd8  00000000  00000000  000de77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000395ac  00000000  00000000  0011d355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00183bd7  00000000  00000000  00156901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000b3  00000000  00000000  002da4d8  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005640  00000000  00000000  002da58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000094  00000000  00000000  002dfbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    000041c4  00000000  00000000  002dfc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 000000e0  00000000  00000000  002e3e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000084 	.word	0x24000084
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c9ac 	.word	0x0800c9ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000088 	.word	0x24000088
 80002dc:	0800c9ac 	.word	0x0800c9ac

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	@ 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__aeabi_uldivmod>:
 80007b8:	b953      	cbnz	r3, 80007d0 <__aeabi_uldivmod+0x18>
 80007ba:	b94a      	cbnz	r2, 80007d0 <__aeabi_uldivmod+0x18>
 80007bc:	2900      	cmp	r1, #0
 80007be:	bf08      	it	eq
 80007c0:	2800      	cmpeq	r0, #0
 80007c2:	bf1c      	itt	ne
 80007c4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80007c8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80007cc:	f000 b988 	b.w	8000ae0 <__aeabi_idiv0>
 80007d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d8:	f000 f806 	bl	80007e8 <__udivmoddi4>
 80007dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007e4:	b004      	add	sp, #16
 80007e6:	4770      	bx	lr

080007e8 <__udivmoddi4>:
 80007e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ec:	9d08      	ldr	r5, [sp, #32]
 80007ee:	468e      	mov	lr, r1
 80007f0:	4604      	mov	r4, r0
 80007f2:	4688      	mov	r8, r1
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d14a      	bne.n	800088e <__udivmoddi4+0xa6>
 80007f8:	428a      	cmp	r2, r1
 80007fa:	4617      	mov	r7, r2
 80007fc:	d962      	bls.n	80008c4 <__udivmoddi4+0xdc>
 80007fe:	fab2 f682 	clz	r6, r2
 8000802:	b14e      	cbz	r6, 8000818 <__udivmoddi4+0x30>
 8000804:	f1c6 0320 	rsb	r3, r6, #32
 8000808:	fa01 f806 	lsl.w	r8, r1, r6
 800080c:	fa20 f303 	lsr.w	r3, r0, r3
 8000810:	40b7      	lsls	r7, r6
 8000812:	ea43 0808 	orr.w	r8, r3, r8
 8000816:	40b4      	lsls	r4, r6
 8000818:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800081c:	fa1f fc87 	uxth.w	ip, r7
 8000820:	fbb8 f1fe 	udiv	r1, r8, lr
 8000824:	0c23      	lsrs	r3, r4, #16
 8000826:	fb0e 8811 	mls	r8, lr, r1, r8
 800082a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082e:	fb01 f20c 	mul.w	r2, r1, ip
 8000832:	429a      	cmp	r2, r3
 8000834:	d909      	bls.n	800084a <__udivmoddi4+0x62>
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800083c:	f080 80ea 	bcs.w	8000a14 <__udivmoddi4+0x22c>
 8000840:	429a      	cmp	r2, r3
 8000842:	f240 80e7 	bls.w	8000a14 <__udivmoddi4+0x22c>
 8000846:	3902      	subs	r1, #2
 8000848:	443b      	add	r3, r7
 800084a:	1a9a      	subs	r2, r3, r2
 800084c:	b2a3      	uxth	r3, r4
 800084e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000852:	fb0e 2210 	mls	r2, lr, r0, r2
 8000856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800085a:	fb00 fc0c 	mul.w	ip, r0, ip
 800085e:	459c      	cmp	ip, r3
 8000860:	d909      	bls.n	8000876 <__udivmoddi4+0x8e>
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000868:	f080 80d6 	bcs.w	8000a18 <__udivmoddi4+0x230>
 800086c:	459c      	cmp	ip, r3
 800086e:	f240 80d3 	bls.w	8000a18 <__udivmoddi4+0x230>
 8000872:	443b      	add	r3, r7
 8000874:	3802      	subs	r0, #2
 8000876:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800087a:	eba3 030c 	sub.w	r3, r3, ip
 800087e:	2100      	movs	r1, #0
 8000880:	b11d      	cbz	r5, 800088a <__udivmoddi4+0xa2>
 8000882:	40f3      	lsrs	r3, r6
 8000884:	2200      	movs	r2, #0
 8000886:	e9c5 3200 	strd	r3, r2, [r5]
 800088a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088e:	428b      	cmp	r3, r1
 8000890:	d905      	bls.n	800089e <__udivmoddi4+0xb6>
 8000892:	b10d      	cbz	r5, 8000898 <__udivmoddi4+0xb0>
 8000894:	e9c5 0100 	strd	r0, r1, [r5]
 8000898:	2100      	movs	r1, #0
 800089a:	4608      	mov	r0, r1
 800089c:	e7f5      	b.n	800088a <__udivmoddi4+0xa2>
 800089e:	fab3 f183 	clz	r1, r3
 80008a2:	2900      	cmp	r1, #0
 80008a4:	d146      	bne.n	8000934 <__udivmoddi4+0x14c>
 80008a6:	4573      	cmp	r3, lr
 80008a8:	d302      	bcc.n	80008b0 <__udivmoddi4+0xc8>
 80008aa:	4282      	cmp	r2, r0
 80008ac:	f200 8105 	bhi.w	8000aba <__udivmoddi4+0x2d2>
 80008b0:	1a84      	subs	r4, r0, r2
 80008b2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008b6:	2001      	movs	r0, #1
 80008b8:	4690      	mov	r8, r2
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d0e5      	beq.n	800088a <__udivmoddi4+0xa2>
 80008be:	e9c5 4800 	strd	r4, r8, [r5]
 80008c2:	e7e2      	b.n	800088a <__udivmoddi4+0xa2>
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	f000 8090 	beq.w	80009ea <__udivmoddi4+0x202>
 80008ca:	fab2 f682 	clz	r6, r2
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	f040 80a4 	bne.w	8000a1c <__udivmoddi4+0x234>
 80008d4:	1a8a      	subs	r2, r1, r2
 80008d6:	0c03      	lsrs	r3, r0, #16
 80008d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008dc:	b280      	uxth	r0, r0
 80008de:	b2bc      	uxth	r4, r7
 80008e0:	2101      	movs	r1, #1
 80008e2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008e6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ee:	fb04 f20c 	mul.w	r2, r4, ip
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x11e>
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80008fc:	d202      	bcs.n	8000904 <__udivmoddi4+0x11c>
 80008fe:	429a      	cmp	r2, r3
 8000900:	f200 80e0 	bhi.w	8000ac4 <__udivmoddi4+0x2dc>
 8000904:	46c4      	mov	ip, r8
 8000906:	1a9b      	subs	r3, r3, r2
 8000908:	fbb3 f2fe 	udiv	r2, r3, lr
 800090c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000910:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000914:	fb02 f404 	mul.w	r4, r2, r4
 8000918:	429c      	cmp	r4, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x144>
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x142>
 8000924:	429c      	cmp	r4, r3
 8000926:	f200 80ca 	bhi.w	8000abe <__udivmoddi4+0x2d6>
 800092a:	4602      	mov	r2, r0
 800092c:	1b1b      	subs	r3, r3, r4
 800092e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000932:	e7a5      	b.n	8000880 <__udivmoddi4+0x98>
 8000934:	f1c1 0620 	rsb	r6, r1, #32
 8000938:	408b      	lsls	r3, r1
 800093a:	fa22 f706 	lsr.w	r7, r2, r6
 800093e:	431f      	orrs	r7, r3
 8000940:	fa0e f401 	lsl.w	r4, lr, r1
 8000944:	fa20 f306 	lsr.w	r3, r0, r6
 8000948:	fa2e fe06 	lsr.w	lr, lr, r6
 800094c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000950:	4323      	orrs	r3, r4
 8000952:	fa00 f801 	lsl.w	r8, r0, r1
 8000956:	fa1f fc87 	uxth.w	ip, r7
 800095a:	fbbe f0f9 	udiv	r0, lr, r9
 800095e:	0c1c      	lsrs	r4, r3, #16
 8000960:	fb09 ee10 	mls	lr, r9, r0, lr
 8000964:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000968:	fb00 fe0c 	mul.w	lr, r0, ip
 800096c:	45a6      	cmp	lr, r4
 800096e:	fa02 f201 	lsl.w	r2, r2, r1
 8000972:	d909      	bls.n	8000988 <__udivmoddi4+0x1a0>
 8000974:	193c      	adds	r4, r7, r4
 8000976:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800097a:	f080 809c 	bcs.w	8000ab6 <__udivmoddi4+0x2ce>
 800097e:	45a6      	cmp	lr, r4
 8000980:	f240 8099 	bls.w	8000ab6 <__udivmoddi4+0x2ce>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	eba4 040e 	sub.w	r4, r4, lr
 800098c:	fa1f fe83 	uxth.w	lr, r3
 8000990:	fbb4 f3f9 	udiv	r3, r4, r9
 8000994:	fb09 4413 	mls	r4, r9, r3, r4
 8000998:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800099c:	fb03 fc0c 	mul.w	ip, r3, ip
 80009a0:	45a4      	cmp	ip, r4
 80009a2:	d908      	bls.n	80009b6 <__udivmoddi4+0x1ce>
 80009a4:	193c      	adds	r4, r7, r4
 80009a6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80009aa:	f080 8082 	bcs.w	8000ab2 <__udivmoddi4+0x2ca>
 80009ae:	45a4      	cmp	ip, r4
 80009b0:	d97f      	bls.n	8000ab2 <__udivmoddi4+0x2ca>
 80009b2:	3b02      	subs	r3, #2
 80009b4:	443c      	add	r4, r7
 80009b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009ba:	eba4 040c 	sub.w	r4, r4, ip
 80009be:	fba0 ec02 	umull	lr, ip, r0, r2
 80009c2:	4564      	cmp	r4, ip
 80009c4:	4673      	mov	r3, lr
 80009c6:	46e1      	mov	r9, ip
 80009c8:	d362      	bcc.n	8000a90 <__udivmoddi4+0x2a8>
 80009ca:	d05f      	beq.n	8000a8c <__udivmoddi4+0x2a4>
 80009cc:	b15d      	cbz	r5, 80009e6 <__udivmoddi4+0x1fe>
 80009ce:	ebb8 0203 	subs.w	r2, r8, r3
 80009d2:	eb64 0409 	sbc.w	r4, r4, r9
 80009d6:	fa04 f606 	lsl.w	r6, r4, r6
 80009da:	fa22 f301 	lsr.w	r3, r2, r1
 80009de:	431e      	orrs	r6, r3
 80009e0:	40cc      	lsrs	r4, r1
 80009e2:	e9c5 6400 	strd	r6, r4, [r5]
 80009e6:	2100      	movs	r1, #0
 80009e8:	e74f      	b.n	800088a <__udivmoddi4+0xa2>
 80009ea:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ee:	0c01      	lsrs	r1, r0, #16
 80009f0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009f4:	b280      	uxth	r0, r0
 80009f6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009fa:	463b      	mov	r3, r7
 80009fc:	4638      	mov	r0, r7
 80009fe:	463c      	mov	r4, r7
 8000a00:	46b8      	mov	r8, r7
 8000a02:	46be      	mov	lr, r7
 8000a04:	2620      	movs	r6, #32
 8000a06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a0a:	eba2 0208 	sub.w	r2, r2, r8
 8000a0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a12:	e766      	b.n	80008e2 <__udivmoddi4+0xfa>
 8000a14:	4601      	mov	r1, r0
 8000a16:	e718      	b.n	800084a <__udivmoddi4+0x62>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	e72c      	b.n	8000876 <__udivmoddi4+0x8e>
 8000a1c:	f1c6 0220 	rsb	r2, r6, #32
 8000a20:	fa2e f302 	lsr.w	r3, lr, r2
 8000a24:	40b7      	lsls	r7, r6
 8000a26:	40b1      	lsls	r1, r6
 8000a28:	fa20 f202 	lsr.w	r2, r0, r2
 8000a2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a30:	430a      	orrs	r2, r1
 8000a32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a36:	b2bc      	uxth	r4, r7
 8000a38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a3c:	0c11      	lsrs	r1, r2, #16
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb08 f904 	mul.w	r9, r8, r4
 8000a46:	40b0      	lsls	r0, r6
 8000a48:	4589      	cmp	r9, r1
 8000a4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a4e:	b280      	uxth	r0, r0
 8000a50:	d93e      	bls.n	8000ad0 <__udivmoddi4+0x2e8>
 8000a52:	1879      	adds	r1, r7, r1
 8000a54:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000a58:	d201      	bcs.n	8000a5e <__udivmoddi4+0x276>
 8000a5a:	4589      	cmp	r9, r1
 8000a5c:	d81f      	bhi.n	8000a9e <__udivmoddi4+0x2b6>
 8000a5e:	eba1 0109 	sub.w	r1, r1, r9
 8000a62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a66:	fb09 f804 	mul.w	r8, r9, r4
 8000a6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a74:	4542      	cmp	r2, r8
 8000a76:	d229      	bcs.n	8000acc <__udivmoddi4+0x2e4>
 8000a78:	18ba      	adds	r2, r7, r2
 8000a7a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000a7e:	d2c4      	bcs.n	8000a0a <__udivmoddi4+0x222>
 8000a80:	4542      	cmp	r2, r8
 8000a82:	d2c2      	bcs.n	8000a0a <__udivmoddi4+0x222>
 8000a84:	f1a9 0102 	sub.w	r1, r9, #2
 8000a88:	443a      	add	r2, r7
 8000a8a:	e7be      	b.n	8000a0a <__udivmoddi4+0x222>
 8000a8c:	45f0      	cmp	r8, lr
 8000a8e:	d29d      	bcs.n	80009cc <__udivmoddi4+0x1e4>
 8000a90:	ebbe 0302 	subs.w	r3, lr, r2
 8000a94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a98:	3801      	subs	r0, #1
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	e796      	b.n	80009cc <__udivmoddi4+0x1e4>
 8000a9e:	eba7 0909 	sub.w	r9, r7, r9
 8000aa2:	4449      	add	r1, r9
 8000aa4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000aa8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aac:	fb09 f804 	mul.w	r8, r9, r4
 8000ab0:	e7db      	b.n	8000a6a <__udivmoddi4+0x282>
 8000ab2:	4673      	mov	r3, lr
 8000ab4:	e77f      	b.n	80009b6 <__udivmoddi4+0x1ce>
 8000ab6:	4650      	mov	r0, sl
 8000ab8:	e766      	b.n	8000988 <__udivmoddi4+0x1a0>
 8000aba:	4608      	mov	r0, r1
 8000abc:	e6fd      	b.n	80008ba <__udivmoddi4+0xd2>
 8000abe:	443b      	add	r3, r7
 8000ac0:	3a02      	subs	r2, #2
 8000ac2:	e733      	b.n	800092c <__udivmoddi4+0x144>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	443b      	add	r3, r7
 8000aca:	e71c      	b.n	8000906 <__udivmoddi4+0x11e>
 8000acc:	4649      	mov	r1, r9
 8000ace:	e79c      	b.n	8000a0a <__udivmoddi4+0x222>
 8000ad0:	eba1 0109 	sub.w	r1, r1, r9
 8000ad4:	46c4      	mov	ip, r8
 8000ad6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ada:	fb09 f804 	mul.w	r8, r9, r4
 8000ade:	e7c4      	b.n	8000a6a <__udivmoddi4+0x282>

08000ae0 <__aeabi_idiv0>:
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <cabinet_simulation_f32_process>:
 *
 * @param self Generic FX handler containing allocated state and FIR pointers.
 * @param p    Audio pipeline context.
 */
static void cabinet_simulation_f32_process(FX_HANDLER_t *self, pipe *p)
{
 8000ae4:	4603      	mov	r3, r0
    // self->states[2]: pointer to FIR filter handler
    // self->states[1]: pointer to overlap/state buffer
    partitioned_fir_convolution_fft(
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8000aec:	f001 bde4 	b.w	80026b8 <partitioned_fir_convolution_fft>

08000af0 <fx_cabinet_clean>:
    fx->clean =   fx_cabinet_clean;
}


void fx_cabinet_clean(FX_HANDLER_t *fx)
{
 8000af0:	b538      	push	{r3, r4, r5, lr}
 8000af2:	4604      	mov	r4, r0

	fir_OD_M212_VINT_DYN_201_P05_00_f32_clean((fir_t *)fx->states[2]);
 8000af4:	6940      	ldr	r0, [r0, #20]
 8000af6:	f000 fc0b 	bl	8001310 <fir_OD_M212_VINT_DYN_201_P05_00_f32_clean>
    self->fir1  = NULL;
 8000afa:	2500      	movs	r5, #0
    cabinet_simulation_clean_f32((cabinet_simulation_f32*)fx->states[3]);
 8000afc:	69a3      	ldr	r3, [r4, #24]

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 8000afe:	2220      	movs	r2, #32
 8000b00:	4629      	mov	r1, r5
 8000b02:	f104 000c 	add.w	r0, r4, #12
    self->fir1  = NULL;
 8000b06:	e9c3 550c 	strd	r5, r5, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000b0a:	f00a fdb7 	bl	800b67c <memset>

    fx->process = NULL;
 8000b0e:	e9c4 5501 	strd	r5, r5, [r4, #4]
    fx->clean = NULL;

}
 8000b12:	bd38      	pop	{r3, r4, r5, pc}

08000b14 <fx_cabinet_init>:
{
 8000b14:	b510      	push	{r4, lr}
    fx->num_params = 0;
 8000b16:	2300      	movs	r3, #0
{
 8000b18:	4604      	mov	r4, r0
    fx->states[0] = _static_mem_alloc(
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	f242 0008 	movw	r0, #8200	@ 0x2008
    fx->num_params = 0;
 8000b20:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    fx->states[0] = _static_mem_alloc(
 8000b24:	f000 fcdc 	bl	80014e0 <_static_mem_alloc_ram_d2>
 8000b28:	4603      	mov	r3, r0
    fx->states[1] = _dctm_static_mem_alloc(
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    fx->states[0] = _static_mem_alloc(
 8000b30:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _dctm_static_mem_alloc(
 8000b32:	f000 fc9f 	bl	8001474 <_dctm_static_mem_alloc>
 8000b36:	4603      	mov	r3, r0
    fx->states[2] = _static_mem_alloc(
 8000b38:	2104      	movs	r1, #4
 8000b3a:	2014      	movs	r0, #20
    fx->states[1] = _dctm_static_mem_alloc(
 8000b3c:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8000b3e:	f000 fccf 	bl	80014e0 <_static_mem_alloc_ram_d2>
 8000b42:	4603      	mov	r3, r0
    fx->states[3] = _static_mem_alloc(
 8000b44:	2104      	movs	r1, #4
 8000b46:	2038      	movs	r0, #56	@ 0x38
    fx->states[2] = _static_mem_alloc(
 8000b48:	6163      	str	r3, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 8000b4a:	f000 fcc9 	bl	80014e0 <_static_mem_alloc_ram_d2>
 8000b4e:	4603      	mov	r3, r0
    fir_OD_M212_VINT_DYN_201_P05_00_f32_init(
 8000b50:	68e1      	ldr	r1, [r4, #12]
 8000b52:	6960      	ldr	r0, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 8000b54:	61a3      	str	r3, [r4, #24]
    fir_OD_M212_VINT_DYN_201_P05_00_f32_init(
 8000b56:	f000 fbc7 	bl	80012e8 <fir_OD_M212_VINT_DYN_201_P05_00_f32_init>
        (cabinet_simulation_f32 *)fx->states[3],
 8000b5a:	69a3      	ldr	r3, [r4, #24]
    fx->process = cabinet_simulation_f32_process;
 8000b5c:	4904      	ldr	r1, [pc, #16]	@ (8000b70 <fx_cabinet_init+0x5c>)
        (fir_t *)fx->states[2]
 8000b5e:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    self->fir1  = fir;
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34
    fx->clean =   fx_cabinet_clean;
 8000b64:	4a03      	ldr	r2, [pc, #12]	@ (8000b74 <fx_cabinet_init+0x60>)
    self->fir1  = fir;
 8000b66:	6318      	str	r0, [r3, #48]	@ 0x30
    fx->clean =   fx_cabinet_clean;
 8000b68:	e9c4 1201 	strd	r1, r2, [r4, #4]
}
 8000b6c:	bd10      	pop	{r4, pc}
 8000b6e:	bf00      	nop
 8000b70:	08000ae5 	.word	0x08000ae5
 8000b74:	08000af1 	.word	0x08000af1

08000b78 <fx_chorus_clean>:
    fx->process = chorus_f32_process;
    fx->clean  = fx_chorus_clean;

}

void fx_chorus_clean(FX_HANDLER_t *fx){
 8000b78:	b538      	push	{r3, r4, r5, lr}
    self->state = NULL;
 8000b7a:	2500      	movs	r5, #0

	chorus_f32_clean((chorus_f32 *)fx->states[2]);
 8000b7c:	6943      	ldr	r3, [r0, #20]
void fx_chorus_clean(FX_HANDLER_t *fx){
 8000b7e:	4604      	mov	r4, r0

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 8000b80:	2220      	movs	r2, #32
 8000b82:	4629      	mov	r1, r5
 8000b84:	300c      	adds	r0, #12
    self->state = NULL;
 8000b86:	e9c3 550c 	strd	r5, r5, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000b8a:	f00a fd77 	bl	800b67c <memset>

    fx->process = NULL;
 8000b8e:	e9c4 5501 	strd	r5, r5, [r4, #4]
    fx->clean = NULL;
}
 8000b92:	bd38      	pop	{r3, r4, r5, pc}
 8000b94:	0000      	movs	r0, r0
	...

08000b98 <chorus_f32_process>:
static void chorus_f32_process(FX_HANDLER_t *fx, pipe *p){
 8000b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float32_t *inDelayed = fx->states[1];
 8000b9c:	e9d0 a804 	ldrd	sl, r8, [r0, #16]
static void chorus_f32_process(FX_HANDLER_t *fx, pipe *p){
 8000ba0:	ed2d 8b0a 	vpush	{d8-d12}
	c->params->wetness = c->params->params[0];
 8000ba4:	f8d8 9034 	ldr.w	r9, [r8, #52]	@ 0x34
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000ba8:	eeb7 ca00 	vmov.f32	s24, #112	@ 0x3f800000  1.0
        float32_t input = p->processBuffer[n];
 8000bac:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
        float32_t mod = sinf(2.0f * M_PI * c->params->rate * c->t);
 8000bb0:	ed98 7a0e 	vldr	s14, [r8, #56]	@ 0x38
	c->params->depth = c->params->params[1];
 8000bb4:	edd9 ba05 	vldr	s23, [r9, #20]
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000bb8:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000bbc:	edd9 7a03 	vldr	s15, [r9, #12]
 8000bc0:	688e      	ldr	r6, [r1, #8]
 8000bc2:	eeb8 9a67 	vcvt.f32.u32	s18, s15
	c->params->wetness = c->params->params[0];
 8000bc6:	edd9 aa04 	vldr	s21, [r9, #16]
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000bca:	ee7b 7a8c 	vadd.f32	s15, s23, s24
	c->params->rate = c->params->params[2];
 8000bce:	ed99 0a06 	vldr	s0, [r9, #24]
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000bd2:	eddf 9a41 	vldr	s19, [pc, #260]	@ 8000cd8 <chorus_f32_process+0x140>
 8000bd6:	f506 5780 	add.w	r7, r6, #4096	@ 0x1000
 8000bda:	f8d8 4040 	ldr.w	r4, [r8, #64]	@ 0x40
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000bde:	ee67 7a89 	vmul.f32	s15, s15, s18
	c->params->wetness = c->params->params[0];
 8000be2:	edc9 aa00 	vstr	s21, [r9]
	c->params->depth = c->params->params[1];
 8000be6:	edc9 ba01 	vstr	s23, [r9, #4]
	c->params->rate = c->params->params[2];
 8000bea:	ed89 0a02 	vstr	s0, [r9, #8]
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000bee:	fefa 7a67 	vrintp.f32	s15, s15
 8000bf2:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float32_t mod = sinf(2.0f * M_PI * c->params->rate * c->t);
 8000bf6:	ed9f 8b36 	vldr	d8, [pc, #216]	@ 8000cd0 <chorus_f32_process+0x138>
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bfe:	ee17 5a90 	vmov	r5, s15
    uint32_t bufferSize = (size1 > size2) ? size1 : size2;
 8000c02:	f5b5 5fa0 	cmp.w	r5, #5120	@ 0x1400
 8000c06:	bf38      	it	cc
 8000c08:	f44f 55a0 	movcc.w	r5, #5120	@ 0x1400
	float32_t *outDelayed = &inDelayed[bufferSize];
 8000c0c:	eb0a 0b85 	add.w	fp, sl, r5, lsl #2
    for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000c10:	e005      	b.n	8000c1e <chorus_f32_process+0x86>
        float32_t mod = sinf(2.0f * M_PI * c->params->rate * c->t);
 8000c12:	ed99 0a02 	vldr	s0, [r9, #8]
        uint32_t currentDelay = (uint32_t)(roundf(c->params->baseDelay * (1.0f + c->params->depth * mod)));
 8000c16:	edd9 ba01 	vldr	s23, [r9, #4]
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000c1a:	edd9 aa00 	vldr	s21, [r9]
        float32_t mod = sinf(2.0f * M_PI * c->params->rate * c->t);
 8000c1e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        float32_t input = p->processBuffer[n];
 8000c22:	ecb6 ba01 	vldmia	r6!, {s22}
        float32_t mod = sinf(2.0f * M_PI * c->params->rate * c->t);
 8000c26:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000c2a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8000c2e:	ee20 0b08 	vmul.f64	d0, d0, d8
 8000c32:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8000c36:	f00b fc57 	bl	800c4e8 <sinf>
        uint32_t currentDelay = (uint32_t)(roundf(c->params->baseDelay * (1.0f + c->params->depth * mod)));
 8000c3a:	eef0 7a4c 	vmov.f32	s15, s24
            readPtr = (c->writePtr + bufferSize - currentDelay) % bufferSize;
 8000c3e:	1929      	adds	r1, r5, r4
            readPtr = c->writePtr;  // Clamp if delay is too high
 8000c40:	4622      	mov	r2, r4
        uint32_t currentDelay = (uint32_t)(roundf(c->params->baseDelay * (1.0f + c->params->depth * mod)));
 8000c42:	eee0 7a2b 	vfma.f32	s15, s0, s23
 8000c46:	ee69 7a27 	vmul.f32	s15, s18, s15
 8000c4a:	fef8 7a67 	vrinta.f32	s15, s15
 8000c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c52:	ee17 3a90 	vmov	r3, s15
        if (currentDelay >= bufferSize) {
 8000c56:	429d      	cmp	r5, r3
            readPtr = (c->writePtr + bufferSize - currentDelay) % bufferSize;
 8000c58:	eba1 0103 	sub.w	r1, r1, r3
        if (currentDelay >= bufferSize) {
 8000c5c:	d903      	bls.n	8000c66 <chorus_f32_process+0xce>
            readPtr = (c->writePtr + bufferSize - currentDelay) % bufferSize;
 8000c5e:	fbb1 f2f5 	udiv	r2, r1, r5
 8000c62:	fb05 1212 	mls	r2, r5, r2, r1
        float32_t delayedInput = inDelayed[readPtr];
 8000c66:	eb0a 0382 	add.w	r3, sl, r2, lsl #2
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000c6a:	ee3c 7a6a 	vsub.f32	s14, s24, s21
        float32_t delayedOutput = outDelayed[readPtr];
 8000c6e:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
    for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000c72:	42b7      	cmp	r7, r6
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000c74:	edd3 7a00 	vldr	s15, [r3]
        inDelayed[c->writePtr] = input;
 8000c78:	eb0a 0184 	add.w	r1, sl, r4, lsl #2
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000c7c:	edd2 6a00 	vldr	s13, [r2]
        outDelayed[c->writePtr] = output;
 8000c80:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000c84:	ee67 7aa9 	vmul.f32	s15, s15, s19
        c->writePtr = (c->writePtr + 1) % bufferSize;
 8000c88:	f104 0401 	add.w	r4, r4, #1
        inDelayed[c->writePtr] = input;
 8000c8c:	ed81 ba00 	vstr	s22, [r1]
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000c90:	eee6 7a8a 	vfma.f32	s15, s13, s20
        c->writePtr = (c->writePtr + 1) % bufferSize;
 8000c94:	fbb4 f2f5 	udiv	r2, r4, r5
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000c98:	ee67 7aaa 	vmul.f32	s15, s15, s21
        c->writePtr = (c->writePtr + 1) % bufferSize;
 8000c9c:	fb05 4412 	mls	r4, r5, r2, r4
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000ca0:	eee7 7a0b 	vfma.f32	s15, s14, s22
        outDelayed[c->writePtr] = output;
 8000ca4:	edc3 7a00 	vstr	s15, [r3]
        p->processBuffer[n] = output;
 8000ca8:	ed46 7a01 	vstr	s15, [r6, #-4]
        c->t += c->dt;
 8000cac:	ed98 7a0e 	vldr	s14, [r8, #56]	@ 0x38
 8000cb0:	edd8 7a0f 	vldr	s15, [r8, #60]	@ 0x3c
 8000cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cb8:	ed88 7a0e 	vstr	s14, [r8, #56]	@ 0x38
    for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000cbc:	d1a9      	bne.n	8000c12 <chorus_f32_process+0x7a>
}
 8000cbe:	ecbd 8b0a 	vpop	{d8-d12}
 8000cc2:	f8c8 4040 	str.w	r4, [r8, #64]	@ 0x40
 8000cc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cca:	bf00      	nop
 8000ccc:	f3af 8000 	nop.w
 8000cd0:	54442d18 	.word	0x54442d18
 8000cd4:	401921fb 	.word	0x401921fb
 8000cd8:	3e99999a 	.word	0x3e99999a

08000cdc <fx_chorus_init>:
void fx_chorus_init(FX_HANDLER_t *fx){
 8000cdc:	b538      	push	{r3, r4, r5, lr}
 8000cde:	4604      	mov	r4, r0
	fx->num_params = 3; // 3 params for a chorus effect
 8000ce0:	2303      	movs	r3, #3
    fx->states[0] = _dctm_static_mem_alloc(
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	201c      	movs	r0, #28
	fx->num_params = 3; // 3 params for a chorus effect
 8000ce6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    fx->states[0] = _dctm_static_mem_alloc(
 8000cea:	f000 fbc3 	bl	8001474 <_dctm_static_mem_alloc>
	c->depth 	   = 0.01  ;
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <fx_chorus_init+0x60>)
    fx->states[0] = _dctm_static_mem_alloc(
 8000cf0:	60e0      	str	r0, [r4, #12]
	c->rate        = 2.0  ;
 8000cf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
	c->depth 	   = 0.01  ;
 8000cf6:	6043      	str	r3, [r0, #4]
	c->baseDelay   = 1000 ;
 8000cf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
    c->wetness     = 0.8  ;
 8000cfc:	4910      	ldr	r1, [pc, #64]	@ (8000d40 <fx_chorus_init+0x64>)
    fx->states[0] = _dctm_static_mem_alloc(
 8000cfe:	4605      	mov	r5, r0
	c->rate        = 2.0  ;
 8000d00:	6082      	str	r2, [r0, #8]
    c->wetness     = 0.8  ;
 8000d02:	6001      	str	r1, [r0, #0]
	fx->states[1] = _static_mem_alloc(
 8000d04:	2104      	movs	r1, #4
	c->baseDelay   = 1000 ;
 8000d06:	60c3      	str	r3, [r0, #12]
	fx->states[1] = _static_mem_alloc(
 8000d08:	f44f 4020 	mov.w	r0, #40960	@ 0xa000
 8000d0c:	f000 fbe8 	bl	80014e0 <_static_mem_alloc_ram_d2>
 8000d10:	4603      	mov	r3, r0
    fx->states[2] = _dctm_static_mem_alloc(
 8000d12:	2104      	movs	r1, #4
 8000d14:	2044      	movs	r0, #68	@ 0x44
	fx->states[1] = _static_mem_alloc(
 8000d16:	6123      	str	r3, [r4, #16]
    fx->states[2] = _dctm_static_mem_alloc(
 8000d18:	f000 fbac 	bl	8001474 <_dctm_static_mem_alloc>
    self->state = state;
 8000d1c:	6923      	ldr	r3, [r4, #16]
    fx->states[2] = _dctm_static_mem_alloc(
 8000d1e:	6160      	str	r0, [r4, #20]
    self->t = 0.0f;
 8000d20:	2200      	movs	r2, #0
    self->writePtr = 0;
 8000d22:	2100      	movs	r1, #0
    self->t = 0.0f;
 8000d24:	6382      	str	r2, [r0, #56]	@ 0x38
    fx->process = chorus_f32_process;
 8000d26:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <fx_chorus_init+0x68>)
    self->writePtr = 0;
 8000d28:	6401      	str	r1, [r0, #64]	@ 0x40
    self->params = p;
 8000d2a:	e9c0 350c 	strd	r3, r5, [r0, #48]	@ 0x30
    self->dt = 1.0f / 48000.0f ; // sample rate !magic # for now.
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <fx_chorus_init+0x6c>)
 8000d30:	63c3      	str	r3, [r0, #60]	@ 0x3c
    fx->clean  = fx_chorus_clean;
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <fx_chorus_init+0x70>)
 8000d34:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
 8000d38:	bd38      	pop	{r3, r4, r5, pc}
 8000d3a:	bf00      	nop
 8000d3c:	3c23d70a 	.word	0x3c23d70a
 8000d40:	3f4ccccd 	.word	0x3f4ccccd
 8000d44:	08000b99 	.word	0x08000b99
 8000d48:	37aec33e 	.word	0x37aec33e
 8000d4c:	08000b79 	.word	0x08000b79

08000d50 <convolution_reverb_f32_process>:
 */
static void convolution_reverb_f32_process(
    FX_HANDLER_t *self,
    pipe         *p
)
{
 8000d50:	4603      	mov	r3, r0
    // self->states[2]: FIR handler pointer
    // self->states[1]: overlap/state buffer pointer
    partitioned_fir_convolution_fft(
 8000d52:	4608      	mov	r0, r1
 8000d54:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8000d58:	f001 bcae 	b.w	80026b8 <partitioned_fir_convolution_fft>

08000d5c <fx_reverb_init>:
 * convolution_reverb instance, then initializes and assigns the processing callback.
 *
 * @param fx Pointer to FX_HANDLER_t to configure for reverb effect.
 */
void fx_reverb_init(FX_HANDLER_t *fx)
{
 8000d5c:	b510      	push	{r4, lr}

	fx->num_params = 0;
 8000d5e:	2300      	movs	r3, #0
{
 8000d60:	4604      	mov	r4, r0

    // Allocate FFT-domain memory for reverb: numSegments * FFT_SIZE + space for Handlers
    fx->states[0] = _static_mem_alloc(
 8000d62:	2104      	movs	r1, #4
 8000d64:	4813      	ldr	r0, [pc, #76]	@ (8000db4 <fx_reverb_init+0x58>)
	fx->num_params = 0;
 8000d66:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    fx->states[0] = _static_mem_alloc(
 8000d6a:	f000 fb9d 	bl	80014a8 <_static_mem_alloc>
 8000d6e:	4603      	mov	r3, r0
        (NUMSEGMENTS_EMT * FFT_SIZE + 2 * NUMSEGMENTS_EMT) * sizeof(float),
        _Alignof(float)
    );

    // Allocate DTCM state buffer for overlap (BUFFER_SIZE floats)
    fx->states[1] = _dctm_static_mem_alloc(
 8000d70:	2104      	movs	r1, #4
 8000d72:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    fx->states[0] = _static_mem_alloc(
 8000d76:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _dctm_static_mem_alloc(
 8000d78:	f000 fb7c 	bl	8001474 <_dctm_static_mem_alloc>
 8000d7c:	4603      	mov	r3, r0
        BUFFER_SIZE * sizeof(float),
        _Alignof(float)
    );

    // Allocate FIR filter handler
    fx->states[2] = _static_mem_alloc(
 8000d7e:	2104      	movs	r1, #4
 8000d80:	2014      	movs	r0, #20
    fx->states[1] = _dctm_static_mem_alloc(
 8000d82:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8000d84:	f000 fb90 	bl	80014a8 <_static_mem_alloc>
 8000d88:	4603      	mov	r3, r0
        sizeof(fir_t),
        _Alignof(fir_t)
    );

    // Allocate convolution reverb simulation instance
    fx->states[3] = _static_mem_alloc(
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	2038      	movs	r0, #56	@ 0x38
    fx->states[2] = _static_mem_alloc(
 8000d8e:	6163      	str	r3, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 8000d90:	f000 fb8a 	bl	80014a8 <_static_mem_alloc>
 8000d94:	4603      	mov	r3, r0
        sizeof(convolution_reverb_f32),
        _Alignof(convolution_reverb_f32)
    );

    // Initialize FIR handler with FFT memory
    fir_emt_140_dark_3_f32_init(
 8000d96:	68e1      	ldr	r1, [r4, #12]
 8000d98:	6960      	ldr	r0, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 8000d9a:	61a3      	str	r3, [r4, #24]
    fir_emt_140_dark_3_f32_init(
 8000d9c:	f000 fabe 	bl	800131c <fir_emt_140_dark_3_f32_init>
        (float *)fx->states[0]
    );

    // Initialize reverb simulation with state buffer and FIR handler
    convolution_reverb_f32_init(
        (convolution_reverb_f32 *)fx->states[3],
 8000da0:	69a3      	ldr	r3, [r4, #24]
        (float32_t *)fx->states[1],
        (fir_t *)fx->states[2]
    );

    // Set processing callback for convolution reverb
    fx->process = convolution_reverb_f32_process;
 8000da2:	4905      	ldr	r1, [pc, #20]	@ (8000db8 <fx_reverb_init+0x5c>)
        (fir_t *)fx->states[2]
 8000da4:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    self->fir1  = fir;
 8000da8:	635a      	str	r2, [r3, #52]	@ 0x34
    fx->clean =   fx_cabinet_clean;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <fx_reverb_init+0x60>)
    self->fir1  = fir;
 8000dac:	6318      	str	r0, [r3, #48]	@ 0x30
    fx->clean =   fx_cabinet_clean;
 8000dae:	e9c4 1201 	strd	r1, r2, [r4, #4]
}
 8000db2:	bd10      	pop	{r4, pc}
 8000db4:	0005c170 	.word	0x0005c170
 8000db8:	08000d51 	.word	0x08000d51
 8000dbc:	08000af1 	.word	0x08000af1

08000dc0 <fx_reverb_clean>:


void fx_reverb_clean(FX_HANDLER_t *fx)
{
 8000dc0:	b538      	push	{r3, r4, r5, lr}
 8000dc2:	4604      	mov	r4, r0

    fir_emt_140_dark_3_f32_clean((fir_t *)fx->states[2]);
 8000dc4:	6940      	ldr	r0, [r0, #20]
 8000dc6:	f000 facd 	bl	8001364 <fir_emt_140_dark_3_f32_clean>
   self->fir1  = NULL;
 8000dca:	2500      	movs	r5, #0
    convolution_reverb_f32_clean((convolution_reverb_f32*)fx->states[3]);
 8000dcc:	69a3      	ldr	r3, [r4, #24]

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 8000dce:	2220      	movs	r2, #32
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	f104 000c 	add.w	r0, r4, #12
   self->fir1  = NULL;
 8000dd6:	e9c3 550c 	strd	r5, r5, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000dda:	f00a fc4f 	bl	800b67c <memset>

    fx->process = NULL;
 8000dde:	e9c4 5501 	strd	r5, r5, [r4, #4]
    fx->clean = NULL;

}
 8000de2:	bd38      	pop	{r3, r4, r5, pc}

08000de4 <fx_null_process>:

static void fx_null_process(FX_HANDLER_t *fx, pipe *p){

	// empty process

}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <fx_null_clean>:

static void fx_null_clean(FX_HANDLER_t *fx) {

	// empty clean
}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <fx_null_init>:
 * @brief empty initialize
 * @param fx Pointer to an FX_HANDLER_t to initialize
 */
void fx_null_init(FX_HANDLER_t *fx) {

	fx->process = fx_null_process;
 8000dec:	4a02      	ldr	r2, [pc, #8]	@ (8000df8 <fx_null_init+0xc>)
	fx->clean = fx_null_clean;
 8000dee:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <fx_null_init+0x10>)
 8000df0:	e9c0 2301 	strd	r2, r3, [r0, #4]

}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	08000de5 	.word	0x08000de5
 8000dfc:	08000de9 	.word	0x08000de9

08000e00 <fx_phaser_clean>:

	return p->params;

}

void fx_phaser_clean(FX_HANDLER_t *fx){
 8000e00:	b538      	push	{r3, r4, r5, lr}
	self->state = NULL;
 8000e02:	2500      	movs	r5, #0

	phaser_f32_clean((phaser_f32 *)fx->states[2]);
 8000e04:	6943      	ldr	r3, [r0, #20]
void fx_phaser_clean(FX_HANDLER_t *fx){
 8000e06:	4604      	mov	r4, r0

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 8000e08:	2220      	movs	r2, #32
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	300c      	adds	r0, #12
	self->state = NULL;
 8000e0e:	e9c3 550c 	strd	r5, r5, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000e12:	f00a fc33 	bl	800b67c <memset>

    fx->process = NULL;
 8000e16:	e9c4 5501 	strd	r5, r5, [r4, #4]
    fx->clean = NULL;
}
 8000e1a:	bd38      	pop	{r3, r4, r5, pc}
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <phaser_f32_process>:
static void phaser_f32_process(FX_HANDLER_t *fx, pipe *pipe){
 8000e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float32_t *inDelayed = fx->states[1];
 8000e24:	e9d0 9604 	ldrd	r9, r6, [r0, #16]
		float32_t input = pipe->processBuffer[n];
 8000e28:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
	float32_t *outDelayed = &inDelayed[p->params->stages];
 8000e2c:	f8d6 a034 	ldr.w	sl, [r6, #52]	@ 0x34
 8000e30:	688d      	ldr	r5, [r1, #8]
		float32_t lfo = sinf(2.0f * M_PI * p->params->rate * p->t);
 8000e32:	ed96 7a0e 	vldr	s14, [r6, #56]	@ 0x38
 8000e36:	f505 5880 	add.w	r8, r5, #4096	@ 0x1000
static void phaser_f32_process(FX_HANDLER_t *fx, pipe *pipe){
 8000e3a:	ed2d 8b04 	vpush	{d8-d9}
	float32_t *outDelayed = &inDelayed[p->params->stages];
 8000e3e:	f89a 700c 	ldrb.w	r7, [sl, #12]
		float32_t lfo = sinf(2.0f * M_PI * p->params->rate * p->t);
 8000e42:	ed9f 8b23 	vldr	d8, [pc, #140]	@ 8000ed0 <phaser_f32_process+0xb0>
 8000e46:	eb09 0487 	add.w	r4, r9, r7, lsl #2
 8000e4a:	ed9a 0a02 	vldr	s0, [sl, #8]
 8000e4e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
		float32_t input = pipe->processBuffer[n];
 8000e52:	ecb5 9a01 	vldmia	r5!, {s18}
		float32_t lfo = sinf(2.0f * M_PI * p->params->rate * p->t);
 8000e56:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000e5a:	ee20 0b08 	vmul.f64	d0, d0, d8
 8000e5e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8000e62:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8000e66:	f00b fb3f 	bl	800c4e8 <sinf>
		float32_t G = p->params->depth * lfo;
 8000e6a:	edda 7a01 	vldr	s15, [sl, #4]
 8000e6e:	ee20 0a27 	vmul.f32	s0, s0, s15
		for (uint8_t stage = 0; stage <  p->params->stages ; stage++) {
 8000e72:	b34f      	cbz	r7, 8000ec8 <phaser_f32_process+0xa8>
 8000e74:	eef1 5a40 	vneg.f32	s11, s0
 8000e78:	4622      	mov	r2, r4
		float32_t filtered = input;
 8000e7a:	eef0 7a49 	vmov.f32	s15, s18
		for (uint8_t stage = 0; stage <  p->params->stages ; stage++) {
 8000e7e:	464b      	mov	r3, r9
			float32_t y = inDelayed[stage] - G * x + G * outDelayed[stage];
 8000e80:	ed93 7a00 	vldr	s14, [r3]
 8000e84:	edd2 6a00 	vldr	s13, [r2]
 8000e88:	eea7 7aa5 	vfma.f32	s14, s15, s11
			inDelayed[stage] = x;
 8000e8c:	ece3 7a01 	vstmia	r3!, {s15}
		for (uint8_t stage = 0; stage <  p->params->stages ; stage++) {
 8000e90:	429c      	cmp	r4, r3
			float32_t y = inDelayed[stage] - G * x + G * outDelayed[stage];
 8000e92:	eef0 7a47 	vmov.f32	s15, s14
 8000e96:	eee6 7a80 	vfma.f32	s15, s13, s0
			outDelayed[stage] = y;
 8000e9a:	ece2 7a01 	vstmia	r2!, {s15}
		for (uint8_t stage = 0; stage <  p->params->stages ; stage++) {
 8000e9e:	d1ef      	bne.n	8000e80 <phaser_f32_process+0x60>
		pipe->processBuffer[n] = dry +  p->params->wetness * filtered;
 8000ea0:	ed9a 7a00 	vldr	s14, [sl]
	for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000ea4:	45a8      	cmp	r8, r5
		pipe->processBuffer[n] = dry +  p->params->wetness * filtered;
 8000ea6:	eea7 9a27 	vfma.f32	s18, s14, s15
 8000eaa:	ed05 9a01 	vstr	s18, [r5, #-4]
		p->t += p->dt;
 8000eae:	ed96 7a0e 	vldr	s14, [r6, #56]	@ 0x38
 8000eb2:	edd6 7a0f 	vldr	s15, [r6, #60]	@ 0x3c
 8000eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eba:	ed86 7a0e 	vstr	s14, [r6, #56]	@ 0x38
	for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000ebe:	d1c4      	bne.n	8000e4a <phaser_f32_process+0x2a>
}
 8000ec0:	ecbd 8b04 	vpop	{d8-d9}
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		float32_t filtered = input;
 8000ec8:	eef0 7a49 	vmov.f32	s15, s18
 8000ecc:	e7e8      	b.n	8000ea0 <phaser_f32_process+0x80>
 8000ece:	bf00      	nop
 8000ed0:	54442d18 	.word	0x54442d18
 8000ed4:	401921fb 	.word	0x401921fb

08000ed8 <fx_phaser_init>:
void fx_phaser_init(FX_HANDLER_t *fx){
 8000ed8:	b538      	push	{r3, r4, r5, lr}
 8000eda:	4604      	mov	r4, r0
	fx->num_params = 3; // 3 params for a chorus effect
 8000edc:	2303      	movs	r3, #3
    fx->states[0] = _dctm_static_mem_alloc(
 8000ede:	2104      	movs	r1, #4
 8000ee0:	201c      	movs	r0, #28
	fx->num_params = 3; // 3 params for a chorus effect
 8000ee2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    fx->states[0] = _dctm_static_mem_alloc(
 8000ee6:	f000 fac5 	bl	8001474 <_dctm_static_mem_alloc>
	p->depth 	= 0.5 ;
 8000eea:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
    fx->states[0] = _dctm_static_mem_alloc(
 8000eee:	60e0      	str	r0, [r4, #12]
	p->rate     = 1.5 ;
 8000ef0:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
	p->depth 	= 0.5 ;
 8000ef4:	6043      	str	r3, [r0, #4]
    p->wetness  = 1 ;
 8000ef6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
    p->stages   = 15   ;
 8000efa:	230f      	movs	r3, #15
	p->rate     = 1.5 ;
 8000efc:	6082      	str	r2, [r0, #8]
    p->wetness  = 1 ;
 8000efe:	6001      	str	r1, [r0, #0]
    fx->states[0] = _dctm_static_mem_alloc(
 8000f00:	4605      	mov	r5, r0
    p->stages   = 15   ;
 8000f02:	7303      	strb	r3, [r0, #12]
	fx->states[1] = _static_mem_alloc(
 8000f04:	2104      	movs	r1, #4
 8000f06:	2078      	movs	r0, #120	@ 0x78
 8000f08:	f000 faea 	bl	80014e0 <_static_mem_alloc_ram_d2>
 8000f0c:	4603      	mov	r3, r0
    fx->states[2] = _dctm_static_mem_alloc(
 8000f0e:	2104      	movs	r1, #4
 8000f10:	2040      	movs	r0, #64	@ 0x40
	fx->states[1] = _static_mem_alloc(
 8000f12:	6123      	str	r3, [r4, #16]
    fx->states[2] = _dctm_static_mem_alloc(
 8000f14:	f000 faae 	bl	8001474 <_dctm_static_mem_alloc>
    self->state = state;
 8000f18:	6923      	ldr	r3, [r4, #16]
    fx->states[2] = _dctm_static_mem_alloc(
 8000f1a:	6160      	str	r0, [r4, #20]
    self->t = 0.0f;
 8000f1c:	2100      	movs	r1, #0
    fx->process = phaser_f32_process;
 8000f1e:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <fx_phaser_init+0x5c>)
    self->t = 0.0f;
 8000f20:	6381      	str	r1, [r0, #56]	@ 0x38
    self->params = p;
 8000f22:	e9c0 350c 	strd	r3, r5, [r0, #48]	@ 0x30
    self->dt = 1.0f / 48000.0f ; // sample rate !magic # for now.
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <fx_phaser_init+0x60>)
 8000f28:	63c3      	str	r3, [r0, #60]	@ 0x3c
    fx->clean =   fx_phaser_clean;
 8000f2a:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <fx_phaser_init+0x64>)
 8000f2c:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
 8000f30:	bd38      	pop	{r3, r4, r5, pc}
 8000f32:	bf00      	nop
 8000f34:	08000e21 	.word	0x08000e21
 8000f38:	37aec33e 	.word	0x37aec33e
 8000f3c:	08000e01 	.word	0x08000e01

08000f40 <supro_simulation_f32_process>:

/**
 * @brief Main FX chain processing: reverb → preamp → reverb → poweramp → reverb.
 */
static void supro_simulation_f32_process(FX_HANDLER_t *fx, pipe *p)
{
 8000f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float32_t *overlap = (float32_t *)fx->states[0];
    fir_t     *firs    = (fir_t *)fx->states[2];

    // 1) Dry signal attenuation
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 8000f44:	f501 4b80 	add.w	fp, r1, #16384	@ 0x4000
    fir_t     *firs    = (fir_t *)fx->states[2];
 8000f48:	6943      	ldr	r3, [r0, #20]
{
 8000f4a:	460c      	mov	r4, r1
    float32_t *overlap = (float32_t *)fx->states[0];
 8000f4c:	68c5      	ldr	r5, [r0, #12]
    fir_t     *firs    = (fir_t *)fx->states[2];
 8000f4e:	461e      	mov	r6, r3
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 8000f50:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 80011b4 <supro_simulation_f32_process+0x274>
{
 8000f54:	4682      	mov	sl, r0
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 8000f56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
{
 8000f5a:	ed2d 8b0a 	vpush	{d8-d12}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	9103      	str	r1, [sp, #12]
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 8000f62:	f8db 1008 	ldr.w	r1, [fp, #8]
    fir_t     *firs    = (fir_t *)fx->states[2];
 8000f66:	9301      	str	r3, [sp, #4]
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 8000f68:	4608      	mov	r0, r1
    float32_t *overlap = (float32_t *)fx->states[0];
 8000f6a:	9500      	str	r5, [sp, #0]
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 8000f6c:	f009 fdbe 	bl	800aaec <arm_scale_f32>

    // 2) First convolution reverb
    partitioned_fir_convolution_fft(p, &firs[0], &overlap[0]);
 8000f70:	462a      	mov	r2, r5
 8000f72:	4631      	mov	r1, r6
 8000f74:	4620      	mov	r0, r4
 8000f76:	f001 fb9f 	bl	80026b8 <partitioned_fir_convolution_fft>

    // 3) Preamp shaping
    supro_preamp_f32(fx, p);
 8000f7a:	f8db 3008 	ldr.w	r3, [fp, #8]
    float32_t        gWet   = a[SUPRO_P_BLEND_IDX];
    float32_t        bias   = a[SUPRO_P_BIAS_IDX];

    // Envelope detection: squared → lowpass → sqrt(2·env)
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5], scratch, env, BUFFER_SIZE);
 8000f7e:	4e8e      	ldr	r6, [pc, #568]	@ (80011b8 <supro_simulation_f32_process+0x278>)
 8000f80:	4619      	mov	r1, r3
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
 8000f82:	4a8e      	ldr	r2, [pc, #568]	@ (80011bc <supro_simulation_f32_process+0x27c>)
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	f506 5580 	add.w	r5, r6, #4096	@ 0x1000
 8000f90:	f009 fe18 	bl	800abc4 <arm_mult_f32>
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5], scratch, env, BUFFER_SIZE);
 8000f94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f98:	4988      	ldr	r1, [pc, #544]	@ (80011bc <supro_simulation_f32_process+0x27c>)
 8000f9a:	4632      	mov	r2, r6
 8000f9c:	f8da 0020 	ldr.w	r0, [sl, #32]
 8000fa0:	f009 fcd8 	bl	800a954 <arm_biquad_cascade_df1_f32>
    arm_scale_f32(env, 2.0f, env, BUFFER_SIZE);
 8000fa4:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000fa8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fac:	4631      	mov	r1, r6
 8000fae:	4630      	mov	r0, r6
 8000fb0:	f009 fd9c 	bl	800aaec <arm_scale_f32>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] = sqrtf(fmaxf(env[i], 0.0f));
 8000fb4:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80011c0 <supro_simulation_f32_process+0x280>
    arm_scale_f32(env, 2.0f, env, BUFFER_SIZE);
 8000fb8:	4633      	mov	r3, r6
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] = sqrtf(fmaxf(env[i], 0.0f));
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8000fc2:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8000fc6:	eca3 7a01 	vstmia	r3!, {s14}
 8000fca:	429d      	cmp	r5, r3
 8000fcc:	d1f5      	bne.n	8000fba <supro_simulation_f32_process+0x7a>

    // Polynomial distortion via Horner's method
    arm_scale_f32(x, gPre, scratch, BUFFER_SIZE);
 8000fce:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 80011c4 <supro_simulation_f32_process+0x284>
 8000fd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fd6:	4979      	ldr	r1, [pc, #484]	@ (80011bc <supro_simulation_f32_process+0x27c>)
 8000fd8:	9802      	ldr	r0, [sp, #8]
 8000fda:	f009 fd87 	bl	800aaec <arm_scale_f32>
    arm_scale_f32(env, bias, env, BUFFER_SIZE);
 8000fde:	4976      	ldr	r1, [pc, #472]	@ (80011b8 <supro_simulation_f32_process+0x278>)
 8000fe0:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 80011c8 <supro_simulation_f32_process+0x288>
 8000fe4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe8:	4608      	mov	r0, r1
 8000fea:	4c78      	ldr	r4, [pc, #480]	@ (80011cc <supro_simulation_f32_process+0x28c>)
 8000fec:	f009 fd7e 	bl	800aaec <arm_scale_f32>
    arm_add_f32(scratch, env, scratch, BUFFER_SIZE);
 8000ff0:	4a72      	ldr	r2, [pc, #456]	@ (80011bc <supro_simulation_f32_process+0x27c>)
 8000ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff6:	4970      	ldr	r1, [pc, #448]	@ (80011b8 <supro_simulation_f32_process+0x278>)
 8000ff8:	4610      	mov	r0, r2
    uint32_t K = SUPRO_NUM_A_VALS;
    arm_scale_f32(scratch, a[K-1], env, BUFFER_SIZE);
    for (int k = K-2; k >= 0; --k) {
        arm_mult_f32(scratch, env, env, BUFFER_SIZE);
 8000ffa:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 80011b8 <supro_simulation_f32_process+0x278>
 8000ffe:	f8df 81bc 	ldr.w	r8, [pc, #444]	@ 80011bc <supro_simulation_f32_process+0x27c>
 8001002:	f1a4 079c 	sub.w	r7, r4, #156	@ 0x9c
    arm_add_f32(scratch, env, scratch, BUFFER_SIZE);
 8001006:	f009 fe23 	bl	800ac50 <arm_add_f32>
    arm_scale_f32(scratch, a[K-1], env, BUFFER_SIZE);
 800100a:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 80011d0 <supro_simulation_f32_process+0x290>
 800100e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001012:	4969      	ldr	r1, [pc, #420]	@ (80011b8 <supro_simulation_f32_process+0x278>)
 8001014:	4869      	ldr	r0, [pc, #420]	@ (80011bc <supro_simulation_f32_process+0x27c>)
 8001016:	f009 fd69 	bl	800aaec <arm_scale_f32>
        arm_mult_f32(scratch, env, env, BUFFER_SIZE);
 800101a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800101e:	464a      	mov	r2, r9
 8001020:	4965      	ldr	r1, [pc, #404]	@ (80011b8 <supro_simulation_f32_process+0x278>)
 8001022:	4640      	mov	r0, r8
 8001024:	f009 fdce 	bl	800abc4 <arm_mult_f32>
        for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] += a[k];
 8001028:	ed34 7a01 	vldmdb	r4!, {s14}
 800102c:	4633      	mov	r3, r6
 800102e:	edd3 7a00 	vldr	s15, [r3]
 8001032:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001036:	ece3 7a01 	vstmia	r3!, {s15}
 800103a:	429d      	cmp	r5, r3
 800103c:	d1f7      	bne.n	800102e <supro_simulation_f32_process+0xee>
    for (int k = K-2; k >= 0; --k) {
 800103e:	42bc      	cmp	r4, r7
 8001040:	d1eb      	bne.n	800101a <supro_simulation_f32_process+0xda>
    }

    // Wet/dry mix and postgain
    arm_scale_f32(env, gWet, env, BUFFER_SIZE);
 8001042:	495d      	ldr	r1, [pc, #372]	@ (80011b8 <supro_simulation_f32_process+0x278>)
 8001044:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001048:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80011d4 <supro_simulation_f32_process+0x294>
 800104c:	4608      	mov	r0, r1
 800104e:	4d62      	ldr	r5, [pc, #392]	@ (80011d8 <supro_simulation_f32_process+0x298>)
 8001050:	f009 fd4c 	bl	800aaec <arm_scale_f32>
    arm_scale_f32(scratch, 1 - gWet, scratch, BUFFER_SIZE);
 8001054:	4959      	ldr	r1, [pc, #356]	@ (80011bc <supro_simulation_f32_process+0x27c>)
 8001056:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 80011dc <supro_simulation_f32_process+0x29c>
 800105a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800105e:	4608      	mov	r0, r1
 8001060:	f505 5680 	add.w	r6, r5, #4096	@ 0x1000
 8001064:	f009 fd42 	bl	800aaec <arm_scale_f32>
    arm_add_f32(env, scratch, scratch, BUFFER_SIZE);
 8001068:	4a54      	ldr	r2, [pc, #336]	@ (80011bc <supro_simulation_f32_process+0x27c>)
 800106a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800106e:	4852      	ldr	r0, [pc, #328]	@ (80011b8 <supro_simulation_f32_process+0x278>)
 8001070:	4611      	mov	r1, r2
 8001072:	f009 fded 	bl	800ac50 <arm_add_f32>
    arm_scale_f32(scratch, gPost, x, BUFFER_SIZE);
 8001076:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 80011e0 <supro_simulation_f32_process+0x2a0>
 800107a:	9902      	ldr	r1, [sp, #8]
 800107c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001080:	484e      	ldr	r0, [pc, #312]	@ (80011bc <supro_simulation_f32_process+0x27c>)
 8001082:	f009 fd33 	bl	800aaec <arm_scale_f32>
    partitioned_fir_convolution_fft(p, &firs[1], &overlap[BUFFER_SIZE]);
 8001086:	9b00      	ldr	r3, [sp, #0]
 8001088:	9803      	ldr	r0, [sp, #12]
 800108a:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800108e:	9b01      	ldr	r3, [sp, #4]
 8001090:	f103 0114 	add.w	r1, r3, #20
 8001094:	f001 fb10 	bl	80026b8 <partitioned_fir_convolution_fft>
    supro_poweramp_f32(fx, p);
 8001098:	f8db 4008 	ldr.w	r4, [fp, #8]

    float32_t *x       = p->processBuffer;
    float32_t *scratch = pow_scratch;

    // Envelope detection
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
 800109c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a0:	4a4d      	ldr	r2, [pc, #308]	@ (80011d8 <supro_simulation_f32_process+0x298>)
 80010a2:	4621      	mov	r1, r4
 80010a4:	4620      	mov	r0, r4
 80010a6:	f009 fd8d 	bl	800abc4 <arm_mult_f32>
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[6], scratch, scratch, BUFFER_SIZE);
 80010aa:	4a4b      	ldr	r2, [pc, #300]	@ (80011d8 <supro_simulation_f32_process+0x298>)
 80010ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010b0:	f8da 0024 	ldr.w	r0, [sl, #36]	@ 0x24
 80010b4:	4611      	mov	r1, r2
 80010b6:	f009 fc4d 	bl	800a954 <arm_biquad_cascade_df1_f32>
    arm_scale_f32(scratch, 2.0f, scratch, BUFFER_SIZE);
 80010ba:	4947      	ldr	r1, [pc, #284]	@ (80011d8 <supro_simulation_f32_process+0x298>)
 80010bc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80010c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c4:	4608      	mov	r0, r1
 80010c6:	f009 fd11 	bl	800aaec <arm_scale_f32>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) scratch[i] = sqrtf(fmaxf(scratch[i], 0.0f));
 80010ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80011c0 <supro_simulation_f32_process+0x280>
    arm_scale_f32(scratch, 2.0f, scratch, BUFFER_SIZE);
 80010ce:	462b      	mov	r3, r5
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) scratch[i] = sqrtf(fmaxf(scratch[i], 0.0f));
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80010d8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80010dc:	eca3 7a01 	vstmia	r3!, {s14}
 80010e0:	42b3      	cmp	r3, r6
 80010e2:	d1f5      	bne.n	80010d0 <supro_simulation_f32_process+0x190>
    float32_t coeffP  = (tanh_kP*tanh_kP - 1.0f) / gP;

    // Nonlinearity per sample
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
        float32_t env   = scratch[i];
        float32_t xBias = x[i] - gBias * env;
 80010e4:	eddf 9a38 	vldr	s19, [pc, #224]	@ 80011c8 <supro_simulation_f32_process+0x288>
        float32_t xPre  = gPre * xBias;
 80010e8:	ed9f 9a3e 	vldr	s18, [pc, #248]	@ 80011e4 <supro_simulation_f32_process+0x2a4>
        float32_t m;
        if (xPre > kP) {
 80010ec:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 80011e8 <supro_simulation_f32_process+0x2a8>
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
        } else if (xPre >= -kN) {
 80010f0:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 80011ec <supro_simulation_f32_process+0x2ac>
            m = tanhf(xPre);
        } else {
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 80010f4:	eddf aa3e 	vldr	s21, [pc, #248]	@ 80011f0 <supro_simulation_f32_process+0x2b0>
 80010f8:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 80011f4 <supro_simulation_f32_process+0x2b4>
 80010fc:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 80011f8 <supro_simulation_f32_process+0x2b8>
 8001100:	eddf ba3e 	vldr	s23, [pc, #248]	@ 80011fc <supro_simulation_f32_process+0x2bc>
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 8001104:	ed9f 8a3e 	vldr	s16, [pc, #248]	@ 8001200 <supro_simulation_f32_process+0x2c0>
 8001108:	e00f      	b.n	800112a <supro_simulation_f32_process+0x1ea>
 800110a:	f00b fab5 	bl	800c678 <tanhf>
 800110e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001204 <supro_simulation_f32_process+0x2c4>
 8001112:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8001208 <supro_simulation_f32_process+0x2c8>
 8001116:	eee0 7a07 	vfma.f32	s15, s0, s14
        }
        x[i] = gPost * m;
 800111a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800120c <supro_simulation_f32_process+0x2cc>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 800111e:	42b5      	cmp	r5, r6
        x[i] = gPost * m;
 8001120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001124:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 8001128:	d027      	beq.n	800117a <supro_simulation_f32_process+0x23a>
        float32_t env   = scratch[i];
 800112a:	ecb5 7a01 	vldmia	r5!, {s14}
        float32_t xBias = x[i] - gBias * env;
 800112e:	ecf4 7a01 	vldmia	r4!, {s15}
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 8001132:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8001210 <supro_simulation_f32_process+0x2d0>
        float32_t xBias = x[i] - gBias * env;
 8001136:	eee7 7a69 	vfms.f32	s15, s14, s19
        if (xPre > kP) {
 800113a:	eef4 7ae8 	vcmpe.f32	s15, s17
        float32_t xPre  = gPre * xBias;
 800113e:	ee27 7a89 	vmul.f32	s14, s15, s18
        if (xPre > kP) {
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 8001146:	eea7 0a48 	vfms.f32	s0, s14, s16
        if (xPre > kP) {
 800114a:	dcde      	bgt.n	800110a <supro_simulation_f32_process+0x1ca>
        } else if (xPre >= -kN) {
 800114c:	eef4 7acb 	vcmpe.f32	s15, s22
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 8001150:	eeb0 0a4a 	vmov.f32	s0, s20
        } else if (xPre >= -kN) {
 8001154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 8001158:	eea7 0a2a 	vfma.f32	s0, s14, s21
        } else if (xPre >= -kN) {
 800115c:	db23      	blt.n	80011a6 <supro_simulation_f32_process+0x266>
            m = tanhf(xPre);
 800115e:	eeb0 0a47 	vmov.f32	s0, s14
 8001162:	f00b fa89 	bl	800c678 <tanhf>
 8001166:	eef0 7a40 	vmov.f32	s15, s0
        x[i] = gPost * m;
 800116a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800120c <supro_simulation_f32_process+0x2cc>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 800116e:	42b5      	cmp	r5, r6
        x[i] = gPost * m;
 8001170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001174:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 8001178:	d1d7      	bne.n	800112a <supro_simulation_f32_process+0x1ea>
    partitioned_fir_convolution_fft(p, &firs[2], &overlap[2 * BUFFER_SIZE]);
 800117a:	9b00      	ldr	r3, [sp, #0]
 800117c:	9901      	ldr	r1, [sp, #4]
 800117e:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 8001182:	9803      	ldr	r0, [sp, #12]
 8001184:	3128      	adds	r1, #40	@ 0x28
 8001186:	f001 fa97 	bl	80026b8 <partitioned_fir_convolution_fft>
    arm_scale_f32(p->processBuffer, 0.005f, p->processBuffer, BUFFER_SIZE);
 800118a:	f8db 1008 	ldr.w	r1, [fp, #8]
 800118e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001192:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001214 <supro_simulation_f32_process+0x2d4>
 8001196:	4608      	mov	r0, r1
}
 8001198:	b005      	add	sp, #20
 800119a:	ecbd 8b0a 	vpop	{d8-d12}
 800119e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_scale_f32(p->processBuffer, 0.005f, p->processBuffer, BUFFER_SIZE);
 80011a2:	f009 bca3 	b.w	800aaec <arm_scale_f32>
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 80011a6:	f00b fa67 	bl	800c678 <tanhf>
 80011aa:	eef0 7a6b 	vmov.f32	s15, s23
 80011ae:	eee0 7a4c 	vfms.f32	s15, s0, s24
 80011b2:	e7b2      	b.n	800111a <supro_simulation_f32_process+0x1da>
 80011b4:	3dcccccd 	.word	0x3dcccccd
 80011b8:	240010a0 	.word	0x240010a0
 80011bc:	240020a0 	.word	0x240020a0
 80011c0:	00000000 	.word	0x00000000
 80011c4:	3f710983 	.word	0x3f710983
 80011c8:	3f186130 	.word	0x3f186130
 80011cc:	0800ca90 	.word	0x0800ca90
 80011d0:	d267d638 	.word	0xd267d638
 80011d4:	3f0d61b4 	.word	0x3f0d61b4
 80011d8:	240000a0 	.word	0x240000a0
 80011dc:	3ee53c98 	.word	0x3ee53c98
 80011e0:	3f7db881 	.word	0x3f7db881
 80011e4:	3f8e9370 	.word	0x3f8e9370
 80011e8:	3f64018b 	.word	0x3f64018b
 80011ec:	bf655493 	.word	0xbf655493
 80011f0:	3f7fa057 	.word	0x3f7fa057
 80011f4:	3f7f71fb 	.word	0x3f7f71fb
 80011f8:	bed80d82 	.word	0xbed80d82
 80011fc:	bf42bc17 	.word	0xbf42bc17
 8001200:	3f806a2a 	.word	0x3f806a2a
 8001204:	bed8ee5b 	.word	0xbed8ee5b
 8001208:	3f421c45 	.word	0x3f421c45
 800120c:	40d6c29a 	.word	0x40d6c29a
 8001210:	3f7df857 	.word	0x3f7df857
 8001214:	3ba3d70a 	.word	0x3ba3d70a

08001218 <fx_supro_init>:
{
 8001218:	b570      	push	{r4, r5, r6, lr}
	fx->num_params = 0;
 800121a:	2300      	movs	r3, #0
{
 800121c:	4604      	mov	r4, r0
    fx->states[0] = _dctm_static_mem_alloc(
 800121e:	2104      	movs	r1, #4
 8001220:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
	fx->num_params = 0;
 8001224:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    fx->states[0] = _dctm_static_mem_alloc(
 8001228:	f000 f924 	bl	8001474 <_dctm_static_mem_alloc>
 800122c:	4603      	mov	r3, r0
    fx->states[1] = _static_mem_alloc(
 800122e:	2104      	movs	r1, #4
 8001230:	f246 0018 	movw	r0, #24600	@ 0x6018
    fx->states[0] = _dctm_static_mem_alloc(
 8001234:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _static_mem_alloc(
 8001236:	f000 f953 	bl	80014e0 <_static_mem_alloc_ram_d2>
 800123a:	4603      	mov	r3, r0
    fx->states[2] = _static_mem_alloc(
 800123c:	2104      	movs	r1, #4
 800123e:	203c      	movs	r0, #60	@ 0x3c
    fx->states[1] = _static_mem_alloc(
 8001240:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8001242:	f000 f94d 	bl	80014e0 <_static_mem_alloc_ram_d2>
        float32_t *fftBuf = (float32_t *)fx->states[1];
 8001246:	6926      	ldr	r6, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8001248:	6160      	str	r0, [r4, #20]
 800124a:	4605      	mov	r5, r0
        fir_h1_f32_init(&firs[0], &fftBuf[0 * BUFFER_OFFSET]);
 800124c:	4631      	mov	r1, r6
 800124e:	f000 f8a9 	bl	80013a4 <fir_h1_f32_init>
        fir_h2_f32_init(&firs[1], &fftBuf[1 * BUFFER_OFFSET]);
 8001252:	f242 0108 	movw	r1, #8200	@ 0x2008
 8001256:	f105 0014 	add.w	r0, r5, #20
 800125a:	4431      	add	r1, r6
 800125c:	f000 f8b6 	bl	80013cc <fir_h2_f32_init>
        fir_h3_f32_init(&firs[2], &fftBuf[2 * BUFFER_OFFSET]);
 8001260:	f244 0110 	movw	r1, #16400	@ 0x4010
 8001264:	f105 0028 	add.w	r0, r5, #40	@ 0x28
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5],
 8001268:	4d1c      	ldr	r5, [pc, #112]	@ (80012dc <fx_supro_init+0xc4>)
        fir_h3_f32_init(&firs[2], &fftBuf[2 * BUFFER_OFFSET]);
 800126a:	4431      	add	r1, r6
 800126c:	f000 f8c2 	bl	80013f4 <fir_h3_f32_init>
    fx->states[3] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 8001270:	2104      	movs	r1, #4
 8001272:	2010      	movs	r0, #16
 8001274:	f000 f8fe 	bl	8001474 <_dctm_static_mem_alloc>
 8001278:	4603      	mov	r3, r0
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 800127a:	2104      	movs	r1, #4
 800127c:	2010      	movs	r0, #16
    fx->states[3] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 800127e:	61a3      	str	r3, [r4, #24]
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 8001280:	f000 f8f8 	bl	8001474 <_dctm_static_mem_alloc>
 8001284:	4603      	mov	r3, r0
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8001286:	2104      	movs	r1, #4
 8001288:	200c      	movs	r0, #12
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 800128a:	61e3      	str	r3, [r4, #28]
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 800128c:	f000 f928 	bl	80014e0 <_static_mem_alloc_ram_d2>
 8001290:	4603      	mov	r3, r0
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8001292:	2104      	movs	r1, #4
 8001294:	200c      	movs	r0, #12
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8001296:	6223      	str	r3, [r4, #32]
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8001298:	f000 f922 	bl	80014e0 <_static_mem_alloc_ram_d2>
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5],
 800129c:	69a3      	ldr	r3, [r4, #24]
 800129e:	462a      	mov	r2, r5
 80012a0:	2101      	movs	r1, #1
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 80012a2:	6260      	str	r0, [r4, #36]	@ 0x24
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5],
 80012a4:	6a20      	ldr	r0, [r4, #32]
 80012a6:	f009 fb47 	bl	800a938 <arm_biquad_cascade_df1_init_f32>
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[6],
 80012aa:	69e3      	ldr	r3, [r4, #28]
 80012ac:	462a      	mov	r2, r5
 80012ae:	2101      	movs	r1, #1
 80012b0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80012b2:	f009 fb41 	bl	800a938 <arm_biquad_cascade_df1_init_f32>
    fx->states[7] = _static_mem_alloc(sizeof(supro_simulation_f32), _Alignof(supro_simulation_f32));
 80012b6:	2104      	movs	r1, #4
 80012b8:	2040      	movs	r0, #64	@ 0x40
 80012ba:	f000 f911 	bl	80014e0 <_static_mem_alloc_ram_d2>
        fir_t     *firs      = (fir_t *)fx->states[2];
 80012be:	6963      	ldr	r3, [r4, #20]
        float32_t *dtcmState = (float32_t *)fx->states[0];
 80012c0:	68e1      	ldr	r1, [r4, #12]
        supro_simulation_init_f32((supro_simulation_f32 *)fx->states[7],
 80012c2:	f103 0214 	add.w	r2, r3, #20
    fx->states[7] = _static_mem_alloc(sizeof(supro_simulation_f32), _Alignof(supro_simulation_f32));
 80012c6:	62a0      	str	r0, [r4, #40]	@ 0x28
    self->fir1  = fir1;
 80012c8:	6303      	str	r3, [r0, #48]	@ 0x30
        supro_simulation_init_f32((supro_simulation_f32 *)fx->states[7],
 80012ca:	3328      	adds	r3, #40	@ 0x28
    self->fir2  = fir2;
 80012cc:	6342      	str	r2, [r0, #52]	@ 0x34
    fx->process = supro_simulation_f32_process;
 80012ce:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <fx_supro_init+0xc8>)
    self->fir3  = fir3;
 80012d0:	e9c0 310e 	strd	r3, r1, [r0, #56]	@ 0x38
    fx->clean = fx_reverb_clean;
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <fx_supro_init+0xcc>)
 80012d6:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
 80012da:	bd70      	pop	{r4, r5, r6, pc}
 80012dc:	0800c9e0 	.word	0x0800c9e0
 80012e0:	08000f41 	.word	0x08000f41
 80012e4:	08000dc1 	.word	0x08000dc1

080012e8 <fir_OD_M212_VINT_DYN_201_P05_00_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + OD_M212_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + OD_M212_SCRATCH_FLOATS + OD_M212_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 80012e8:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 80012ec:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 80012f0:	440a      	add	r2, r1
void fir_OD_M212_VINT_DYN_201_P05_00_f32_init(fir_t *self, float *state){
 80012f2:	b430      	push	{r4, r5}
    self->numSegments  = OD_M212_SEGMENTS;
    self->curr_fftidx  = 0;
 80012f4:	2400      	movs	r4, #0
    self->numSegments  = OD_M212_SEGMENTS;
 80012f6:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 80012f8:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < OD_M212_SEGMENTS; ++i) {
        IR_TABLE [i] = &_CAB_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 80012fc:	4a03      	ldr	r2, [pc, #12]	@ (800130c <fir_OD_M212_VINT_DYN_201_P05_00_f32_init+0x24>)
    self->numSegments  = OD_M212_SEGMENTS;
 80012fe:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 8001300:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8001304:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_CAB_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8001306:	e9c3 2100 	strd	r2, r1, [r3]
}
 800130a:	4770      	bx	lr
 800130c:	0800cae0 	.word	0x0800cae0

08001310 <fir_OD_M212_VINT_DYN_201_P05_00_f32_clean>:

void fir_OD_M212_VINT_DYN_201_P05_00_f32_clean(fir_t *self){

    for (uint32_t i = 0; i < OD_M212_SEGMENTS; ++i) {
    	self->ir_ffts [i]   = NULL;
 8001310:	2300      	movs	r3, #0
    	self->prev_ffts [i] = NULL;
 8001312:	e9d0 1200 	ldrd	r1, r2, [r0]
    	self->ir_ffts [i]   = NULL;
 8001316:	600b      	str	r3, [r1, #0]
    	self->prev_ffts [i] = NULL;
 8001318:	6013      	str	r3, [r2, #0]
    }

}
 800131a:	4770      	bx	lr

0800131c <fir_emt_140_dark_3_f32_init>:
#include "impulse_responses.h"
#include "stdio.h"


void fir_emt_140_dark_3_f32_init(fir_t *self, float *state){
 800131c:	b470      	push	{r4, r5, r6}
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + EMT_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + EMT_SCRATCH_FLOATS + EMT_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 800131e:	4c0e      	ldr	r4, [pc, #56]	@ (8001358 <fir_emt_140_dark_3_f32_init+0x3c>)
    self->numSegments  = EMT_SEGMENTS;
    self->curr_fftidx  = 0;
 8001320:	2500      	movs	r5, #0
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <fir_emt_140_dark_3_f32_init+0x40>)
    self->ir_ffts      = IR_TABLE;
 8001324:	f501 26b8 	add.w	r6, r1, #376832	@ 0x5c000
    self->prev_ffts    = PREV_TABLE;
 8001328:	440c      	add	r4, r1
 800132a:	4a0d      	ldr	r2, [pc, #52]	@ (8001360 <fir_emt_140_dark_3_f32_init+0x44>)
 800132c:	f503 2cb8 	add.w	ip, r3, #376832	@ 0x5c000
    self->ir_ffts      = IR_TABLE;
 8001330:	6006      	str	r6, [r0, #0]
    self->prev_ffts    = PREV_TABLE;
 8001332:	6044      	str	r4, [r0, #4]
    self->numSegments  = EMT_SEGMENTS;
 8001334:	440a      	add	r2, r1
 8001336:	242e      	movs	r4, #46	@ 0x2e
    self->curr_fftidx  = 0;
 8001338:	e9c0 5502 	strd	r5, r5, [r0, #8]
    self->numSegments  = EMT_SEGMENTS;
 800133c:	6104      	str	r4, [r0, #16]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
        IR_TABLE [i] = &_EMT_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 800133e:	f842 3f04 	str.w	r3, [r2, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 8001342:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
 8001346:	f8c2 10b8 	str.w	r1, [r2, #184]	@ 0xb8
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 800134a:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800134e:	4563      	cmp	r3, ip
 8001350:	d1f5      	bne.n	800133e <fir_emt_140_dark_3_f32_init+0x22>
    }

}
 8001352:	bc70      	pop	{r4, r5, r6}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	0005c0b8 	.word	0x0005c0b8
 800135c:	0800eae0 	.word	0x0800eae0
 8001360:	0005bffc 	.word	0x0005bffc

08001364 <fir_emt_140_dark_3_f32_clean>:


void fir_emt_140_dark_3_f32_clean(fir_t *self)
{
 8001364:	4603      	mov	r3, r0
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
    	self->ir_ffts [i]   = NULL;
 8001366:	6800      	ldr	r0, [r0, #0]
{
 8001368:	b510      	push	{r4, lr}
    	self->prev_ffts [i] = NULL;
 800136a:	685c      	ldr	r4, [r3, #4]
 800136c:	f100 03b7 	add.w	r3, r0, #183	@ 0xb7
 8001370:	1b1b      	subs	r3, r3, r4
 8001372:	f5b3 7fb7 	cmp.w	r3, #366	@ 0x16e
 8001376:	d90a      	bls.n	800138e <fir_emt_140_dark_3_f32_clean+0x2a>
    	self->ir_ffts [i]   = NULL;
 8001378:	22b8      	movs	r2, #184	@ 0xb8
 800137a:	2100      	movs	r1, #0
 800137c:	f00a f97e 	bl	800b67c <memset>
    	self->prev_ffts [i] = NULL;
 8001380:	4620      	mov	r0, r4
 8001382:	22b8      	movs	r2, #184	@ 0xb8
 8001384:	2100      	movs	r1, #0
    }
}
 8001386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	self->prev_ffts [i] = NULL;
 800138a:	f00a b977 	b.w	800b67c <memset>
 800138e:	1f03      	subs	r3, r0, #4
 8001390:	1f22      	subs	r2, r4, #4
 8001392:	30b4      	adds	r0, #180	@ 0xb4
    	self->ir_ffts [i]   = NULL;
 8001394:	2100      	movs	r1, #0
 8001396:	f843 1f04 	str.w	r1, [r3, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 800139a:	4283      	cmp	r3, r0
    	self->prev_ffts [i] = NULL;
 800139c:	f842 1f04 	str.w	r1, [r2, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 80013a0:	d1f9      	bne.n	8001396 <fir_emt_140_dark_3_f32_clean+0x32>
}
 80013a2:	bd10      	pop	{r4, pc}

080013a4 <fir_h1_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H1_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H1_SCRATCH_FLOATS + H1_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 80013a4:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 80013a8:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 80013ac:	440a      	add	r2, r1
void fir_h1_f32_init(fir_t *self, float *state){
 80013ae:	b430      	push	{r4, r5}
    self->numSegments  = H1_SEGMENTS;
    self->curr_fftidx  = 0;
 80013b0:	2400      	movs	r4, #0
    self->numSegments  = H1_SEGMENTS;
 80013b2:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 80013b4:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H1_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H1_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 80013b8:	4a03      	ldr	r2, [pc, #12]	@ (80013c8 <fir_h1_f32_init+0x24>)
    self->numSegments  = H1_SEGMENTS;
 80013ba:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 80013bc:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 80013c0:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H1_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 80013c2:	e9c3 2100 	strd	r2, r1, [r3]
}
 80013c6:	4770      	bx	lr
 80013c8:	0806aae0 	.word	0x0806aae0

080013cc <fir_h2_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H2_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H2_SCRATCH_FLOATS + H2_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 80013cc:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 80013d0:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 80013d4:	440a      	add	r2, r1
void fir_h2_f32_init(fir_t *self, float *state){
 80013d6:	b430      	push	{r4, r5}
    self->numSegments  = H2_SEGMENTS;
    self->curr_fftidx  = 0;
 80013d8:	2400      	movs	r4, #0
    self->numSegments  = H2_SEGMENTS;
 80013da:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 80013dc:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H2_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H2_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 80013e0:	4a03      	ldr	r2, [pc, #12]	@ (80013f0 <fir_h2_f32_init+0x24>)
    self->numSegments  = H2_SEGMENTS;
 80013e2:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 80013e4:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 80013e8:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H2_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 80013ea:	e9c3 2100 	strd	r2, r1, [r3]
}
 80013ee:	4770      	bx	lr
 80013f0:	0806cae0 	.word	0x0806cae0

080013f4 <fir_h3_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H3_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H3_SCRATCH_FLOATS + H3_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 80013f4:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 80013f8:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 80013fc:	440a      	add	r2, r1
void fir_h3_f32_init(fir_t *self, float *state){
 80013fe:	b430      	push	{r4, r5}
    self->numSegments  = H3_SEGMENTS;
    self->curr_fftidx  = 0;
 8001400:	2400      	movs	r4, #0
    self->numSegments  = H3_SEGMENTS;
 8001402:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8001404:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H3_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H3_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8001408:	4a03      	ldr	r2, [pc, #12]	@ (8001418 <fir_h3_f32_init+0x24>)
    self->numSegments  = H3_SEGMENTS;
 800140a:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 800140c:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8001410:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H3_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8001412:	e9c3 2100 	strd	r2, r1, [r3]
}
 8001416:	4770      	bx	lr
 8001418:	0806eae0 	.word	0x0806eae0

0800141c <dctm_pool_init>:
 * Clears the dtcm_static_pool to zero and resets the head pointer.
 * Must be called once at system startup before any DTCM allocations.
 */
void dctm_pool_init()
{
    dtcm_pool_head = 0u;
 800141c:	2100      	movs	r1, #0
 800141e:	4b03      	ldr	r3, [pc, #12]	@ (800142c <dctm_pool_init+0x10>)
    memset(dtcm_static_pool, 0, DTCM_STATIC_POOL_SIZE);
 8001420:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <dctm_pool_init+0x14>)
    dtcm_pool_head = 0u;
 8001426:	6019      	str	r1, [r3, #0]
    memset(dtcm_static_pool, 0, DTCM_STATIC_POOL_SIZE);
 8001428:	f00a b928 	b.w	800b67c <memset>
 800142c:	20000000 	.word	0x20000000
 8001430:	20000020 	.word	0x20000020

08001434 <static_pool_init>:
 *
 * Clears the static_pool to zero and resets the head pointer.
 * Must be called once at system startup before any SRAM allocations.
 */
void static_pool_init()
{
 8001434:	b510      	push	{r4, lr}
    pool_head = 0u;
 8001436:	2400      	movs	r4, #0
 8001438:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <static_pool_init+0x24>)
    memset(static_pool, 0, STATIC_POOL_SIZE);
 800143a:	4a08      	ldr	r2, [pc, #32]	@ (800145c <static_pool_init+0x28>)
 800143c:	4621      	mov	r1, r4
 800143e:	4808      	ldr	r0, [pc, #32]	@ (8001460 <static_pool_init+0x2c>)
    pool_head = 0u;
 8001440:	601c      	str	r4, [r3, #0]
    memset(static_pool, 0, STATIC_POOL_SIZE);
 8001442:	f00a f91b 	bl	800b67c <memset>

    pool_head_ram_d2 = 0u;
 8001446:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <static_pool_init+0x30>)
    memset(static_pool_ram_d2, 0, STATIC_POOL_SIZE_RAM_D2);
 8001448:	4621      	mov	r1, r4
 800144a:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <static_pool_init+0x34>)
    pool_head_ram_d2 = 0u;
 800144c:	601c      	str	r4, [r3, #0]
    memset(static_pool_ram_d2, 0, STATIC_POOL_SIZE_RAM_D2);
 800144e:	4807      	ldr	r0, [pc, #28]	@ (800146c <static_pool_init+0x38>)
}
 8001450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset(static_pool_ram_d2, 0, STATIC_POOL_SIZE_RAM_D2);
 8001454:	f00a b912 	b.w	800b67c <memset>
 8001458:	240030a4 	.word	0x240030a4
 800145c:	00068004 	.word	0x00068004
 8001460:	240030a8 	.word	0x240030a8
 8001464:	240030a0 	.word	0x240030a0
 8001468:	00028004 	.word	0x00028004
 800146c:	30000000 	.word	0x30000000

08001470 <_memory_alloc_error_handler>:
 * Enters an infinite loop to halt execution; suitable
 * for catching in the debugger or watchdog reset.
 */
__weak void _memory_alloc_error_handler()
{
    while (1) {
 8001470:	e7fe      	b.n	8001470 <_memory_alloc_error_handler>
 8001472:	bf00      	nop

08001474 <_dctm_static_mem_alloc>:
{
 8001474:	b570      	push	{r4, r5, r6, lr}
    size_t off = align_up(dtcm_pool_head, align);
 8001476:	4e0a      	ldr	r6, [pc, #40]	@ (80014a0 <_dctm_static_mem_alloc+0x2c>)
    return (x + (align - 1u)) & ~(align - 1u);
 8001478:	424b      	negs	r3, r1
 800147a:	6834      	ldr	r4, [r6, #0]
 800147c:	3c01      	subs	r4, #1
 800147e:	440c      	add	r4, r1
 8001480:	401c      	ands	r4, r3
    if (off + size > DTCM_STATIC_POOL_SIZE) {
 8001482:	1905      	adds	r5, r0, r4
 8001484:	f5b5 4f70 	cmp.w	r5, #61440	@ 0xf000
 8001488:	d803      	bhi.n	8001492 <_dctm_static_mem_alloc+0x1e>
    return &dtcm_static_pool[off];
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <_dctm_static_mem_alloc+0x30>)
    dtcm_pool_head = off + size;
 800148c:	6035      	str	r5, [r6, #0]
}
 800148e:	4420      	add	r0, r4
 8001490:	bd70      	pop	{r4, r5, r6, pc}
        _memory_alloc_error_handler();
 8001492:	f7ff ffed 	bl	8001470 <_memory_alloc_error_handler>
    return &dtcm_static_pool[off];
 8001496:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <_dctm_static_mem_alloc+0x30>)
    dtcm_pool_head = off + size;
 8001498:	6035      	str	r5, [r6, #0]
}
 800149a:	4420      	add	r0, r4
 800149c:	bd70      	pop	{r4, r5, r6, pc}
 800149e:	bf00      	nop
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000020 	.word	0x20000020

080014a8 <_static_mem_alloc>:
{
 80014a8:	b570      	push	{r4, r5, r6, lr}
    size_t off = align_up(pool_head, align);
 80014aa:	4e0a      	ldr	r6, [pc, #40]	@ (80014d4 <_static_mem_alloc+0x2c>)
    return (x + (align - 1u)) & ~(align - 1u);
 80014ac:	424b      	negs	r3, r1
 80014ae:	6834      	ldr	r4, [r6, #0]
 80014b0:	3c01      	subs	r4, #1
 80014b2:	440c      	add	r4, r1
 80014b4:	401c      	ands	r4, r3
    if (off + size > STATIC_POOL_SIZE) {
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <_static_mem_alloc+0x30>)
 80014b8:	1905      	adds	r5, r0, r4
 80014ba:	429d      	cmp	r5, r3
 80014bc:	d803      	bhi.n	80014c6 <_static_mem_alloc+0x1e>
    return &static_pool[off];
 80014be:	4807      	ldr	r0, [pc, #28]	@ (80014dc <_static_mem_alloc+0x34>)
    pool_head = off + size;
 80014c0:	6035      	str	r5, [r6, #0]
}
 80014c2:	4420      	add	r0, r4
 80014c4:	bd70      	pop	{r4, r5, r6, pc}
        _memory_alloc_error_handler();
 80014c6:	f7ff ffd3 	bl	8001470 <_memory_alloc_error_handler>
    return &static_pool[off];
 80014ca:	4804      	ldr	r0, [pc, #16]	@ (80014dc <_static_mem_alloc+0x34>)
    pool_head = off + size;
 80014cc:	6035      	str	r5, [r6, #0]
}
 80014ce:	4420      	add	r0, r4
 80014d0:	bd70      	pop	{r4, r5, r6, pc}
 80014d2:	bf00      	nop
 80014d4:	240030a4 	.word	0x240030a4
 80014d8:	00068004 	.word	0x00068004
 80014dc:	240030a8 	.word	0x240030a8

080014e0 <_static_mem_alloc_ram_d2>:
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
    size_t off = align_up(pool_head_ram_d2, align);
 80014e2:	4e0a      	ldr	r6, [pc, #40]	@ (800150c <_static_mem_alloc_ram_d2+0x2c>)
    return (x + (align - 1u)) & ~(align - 1u);
 80014e4:	424b      	negs	r3, r1
 80014e6:	6834      	ldr	r4, [r6, #0]
 80014e8:	3c01      	subs	r4, #1
 80014ea:	440c      	add	r4, r1
 80014ec:	401c      	ands	r4, r3
    if (off + size > STATIC_POOL_SIZE_RAM_D2) {
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <_static_mem_alloc_ram_d2+0x30>)
 80014f0:	1905      	adds	r5, r0, r4
 80014f2:	429d      	cmp	r5, r3
 80014f4:	d803      	bhi.n	80014fe <_static_mem_alloc_ram_d2+0x1e>
    return &static_pool_ram_d2[off];
 80014f6:	4807      	ldr	r0, [pc, #28]	@ (8001514 <_static_mem_alloc_ram_d2+0x34>)
    pool_head_ram_d2 = off + size;
 80014f8:	6035      	str	r5, [r6, #0]
}
 80014fa:	4420      	add	r0, r4
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
        _memory_alloc_error_handler();
 80014fe:	f7ff ffb7 	bl	8001470 <_memory_alloc_error_handler>
    return &static_pool_ram_d2[off];
 8001502:	4804      	ldr	r0, [pc, #16]	@ (8001514 <_static_mem_alloc_ram_d2+0x34>)
    pool_head_ram_d2 = off + size;
 8001504:	6035      	str	r5, [r6, #0]
}
 8001506:	4420      	add	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	bf00      	nop
 800150c:	240030a0 	.word	0x240030a0
 8001510:	00028004 	.word	0x00028004
 8001514:	30000000 	.word	0x30000000

08001518 <readUART>:
#include <ctype.h>

/* Example implementation: splits node definitions on ';' */
void readUART(dataLink* link, char c)
{
    if (c == '\n' || c == '\r') {
 8001518:	290a      	cmp	r1, #10
{
 800151a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800151e:	4605      	mov	r5, r0
 8001520:	b085      	sub	sp, #20
        link->commandBuffer[link->commandIndex] = '\0';
 8001522:	f890 30db 	ldrb.w	r3, [r0, #219]	@ 0xdb
    if (c == '\n' || c == '\r') {
 8001526:	d00c      	beq.n	8001542 <readUART+0x2a>
 8001528:	290d      	cmp	r1, #13
 800152a:	d00a      	beq.n	8001542 <readUART+0x2a>
            }
        }
        return;
    }

    if (link->commandIndex < sizeof(link->commandBuffer) - 1)
 800152c:	2b7e      	cmp	r3, #126	@ 0x7e
 800152e:	d805      	bhi.n	800153c <readUART+0x24>
    {
        link->commandBuffer[link->commandIndex++] = c;
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	4403      	add	r3, r0
 8001534:	f880 20db 	strb.w	r2, [r0, #219]	@ 0xdb
 8001538:	f883 105b 	strb.w	r1, [r3, #91]	@ 0x5b
    }

    //link->needsRefresh = 1;
}
 800153c:	b005      	add	sp, #20
 800153e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset(params, 255, sizeof params);   /* all 255, not just first */
 8001542:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
        link->commandBuffer[link->commandIndex] = '\0';
 8001546:	2100      	movs	r1, #0
 8001548:	442b      	add	r3, r5
        while ((token = strtok_r(rest, ";", &rest))) {
 800154a:	f8df 823c 	ldr.w	r8, [pc, #572]	@ 8001788 <readUART+0x270>
        char* rest = link->commandBuffer;
 800154e:	f105 005b 	add.w	r0, r5, #91	@ 0x5b
        memset(params, 255, sizeof params);   /* all 255, not just first */
 8001552:	f8ad 2000 	strh.w	r2, [sp]
        link->commandBuffer[link->commandIndex] = '\0';
 8001556:	f883 105b 	strb.w	r1, [r3, #91]	@ 0x5b
        uint8_t effectId = 5;
 800155a:	f04f 0905 	mov.w	r9, #5
        memset(inputs, 255, sizeof inputs);
 800155e:	f8ad 2004 	strh.w	r2, [sp, #4]
        uint8_t nodeId = 255;
 8001562:	27ff      	movs	r7, #255	@ 0xff
        link->commandIndex = 0;
 8001564:	f885 10db 	strb.w	r1, [r5, #219]	@ 0xdb
        while ((token = strtok_r(rest, ";", &rest))) {
 8001568:	4641      	mov	r1, r8
        memset(inputs, 255, sizeof inputs);
 800156a:	f88d 2006 	strb.w	r2, [sp, #6]
        memset(params, 255, sizeof params);   /* all 255, not just first */
 800156e:	f88d 2002 	strb.w	r2, [sp, #2]
        while ((token = strtok_r(rest, ";", &rest))) {
 8001572:	aa02      	add	r2, sp, #8
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 8001574:	4e7c      	ldr	r6, [pc, #496]	@ (8001768 <readUART+0x250>)
        char* rest = link->commandBuffer;
 8001576:	9002      	str	r0, [sp, #8]
        while ((token = strtok_r(rest, ";", &rest))) {
 8001578:	f00a f8b0 	bl	800b6dc <strtok_r>
 800157c:	b1f8      	cbz	r0, 80015be <readUART+0xa6>
            if (token[0] == 'N')
 800157e:	7803      	ldrb	r3, [r0, #0]
 8001580:	3b45      	subs	r3, #69	@ 0x45
 8001582:	2b0f      	cmp	r3, #15
 8001584:	d814      	bhi.n	80015b0 <readUART+0x98>
 8001586:	e8df f003 	tbb	[pc, r3]
 800158a:	13ae      	.short	0x13ae
 800158c:	137f1313 	.word	0x137f1313
 8001590:	08131313 	.word	0x08131313
 8001594:	13135613 	.word	0x13135613
 8001598:	5113      	.short	0x5113
            	if(atoi(&token[1]) == 0)
 800159a:	1c44      	adds	r4, r0, #1
 800159c:	4620      	mov	r0, r4
 800159e:	f009 fe7d 	bl	800b29c <atoi>
 80015a2:	2800      	cmp	r0, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <readUART+0x1dc>
                nodeId = atoi(&token[1]);
 80015a8:	4620      	mov	r0, r4
 80015aa:	f009 fe77 	bl	800b29c <atoi>
 80015ae:	b2c7      	uxtb	r7, r0
        while ((token = strtok_r(rest, ";", &rest))) {
 80015b0:	9802      	ldr	r0, [sp, #8]
 80015b2:	aa02      	add	r2, sp, #8
 80015b4:	4641      	mov	r1, r8
 80015b6:	f00a f891 	bl	800b6dc <strtok_r>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d1df      	bne.n	800157e <readUART+0x66>
        if (nodeId < MAX_NODES)
 80015be:	2f09      	cmp	r7, #9
 80015c0:	d8bc      	bhi.n	800153c <readUART+0x24>
            	n->params[i] = params[i];
 80015c2:	4604      	mov	r4, r0
 80015c4:	f89d 1000 	ldrb.w	r1, [sp]
 80015c8:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
            	n->inputs[i] = inputs[i];
 80015cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
            	n->params[i] = params[i];
 80015d0:	f361 0407 	bfi	r4, r1, #0, #8
 80015d4:	f89d 1001 	ldrb.w	r1, [sp, #1]
            n->nodeId = nodeId;
 80015d8:	54af      	strb	r7, [r5, r2]
            n->effectId = effectId;
 80015da:	442a      	add	r2, r5
            	n->params[i] = params[i];
 80015dc:	f361 240f 	bfi	r4, r1, #8, #8
 80015e0:	f89d 1002 	ldrb.w	r1, [sp, #2]
            	n->inputs[i] = inputs[i];
 80015e4:	f89d 0005 	ldrb.w	r0, [sp, #5]
            	n->params[i] = params[i];
 80015e8:	f361 4417 	bfi	r4, r1, #16, #8
 80015ec:	00f9      	lsls	r1, r7, #3
            	n->inputs[i] = inputs[i];
 80015ee:	71d0      	strb	r0, [r2, #7]
            	n->params[i] = params[i];
 80015f0:	f363 641f 	bfi	r4, r3, #24, #8
            	if (inputs[i] != 255) inputCount++;
 80015f4:	3bff      	subs	r3, #255	@ 0xff
            	n->inputs[i] = inputs[i];
 80015f6:	4439      	add	r1, r7
            n->effectId = effectId;
 80015f8:	f882 9001 	strb.w	r9, [r2, #1]
            	if (inputs[i] != 255) inputCount++;
 80015fc:	bf18      	it	ne
 80015fe:	2301      	movne	r3, #1
 8001600:	28ff      	cmp	r0, #255	@ 0xff
            	n->inputs[i] = inputs[i];
 8001602:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8001606:	4429      	add	r1, r5
            	if (inputs[i] != 255) inputCount++;
 8001608:	bf18      	it	ne
 800160a:	3301      	addne	r3, #1
            	n->params[i] = params[i];
 800160c:	f8c2 4003 	str.w	r4, [r2, #3]
            	if (inputs[i] != 255) inputCount++;
 8001610:	28ff      	cmp	r0, #255	@ 0xff
            	n->inputs[i] = inputs[i];
 8001612:	7208      	strb	r0, [r1, #8]
            	if (inputs[i] != 255) inputCount++;
 8001614:	d001      	beq.n	800161a <readUART+0x102>
 8001616:	3301      	adds	r3, #1
 8001618:	b2db      	uxtb	r3, r3
            n->numInputs = inputCount;
 800161a:	7093      	strb	r3, [r2, #2]
            if (nodeId >= link->nodeCount)
 800161c:	f895 305a 	ldrb.w	r3, [r5, #90]	@ 0x5a
 8001620:	42bb      	cmp	r3, r7
 8001622:	d88b      	bhi.n	800153c <readUART+0x24>
            	link->nodeCount = nodeId + 1;
 8001624:	3701      	adds	r7, #1
 8001626:	f885 705a 	strb.w	r7, [r5, #90]	@ 0x5a
        return;
 800162a:	e787      	b.n	800153c <readUART+0x24>
        		link->needsRefresh = 1;
 800162c:	2301      	movs	r3, #1
        while ((token = strtok_r(rest, ";", &rest))) {
 800162e:	9802      	ldr	r0, [sp, #8]
        		link->needsRefresh = 1;
 8001630:	f885 30e6 	strb.w	r3, [r5, #230]	@ 0xe6
 8001634:	e7bd      	b.n	80015b2 <readUART+0x9a>
                while (*p && i < NUM_PARAMETERS)
 8001636:	7843      	ldrb	r3, [r0, #1]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0b9      	beq.n	80015b0 <readUART+0x98>
                char* p = &token[1];
 800163c:	1c44      	adds	r4, r0, #1
 800163e:	46eb      	mov	fp, sp
                uint8_t i = 0;
 8001640:	f04f 0a00 	mov.w	sl, #0
                    params[i++] = atoi(p);
 8001644:	4620      	mov	r0, r4
 8001646:	f10a 0a01 	add.w	sl, sl, #1
 800164a:	f009 fe27 	bl	800b29c <atoi>
 800164e:	f88b 0000 	strb.w	r0, [fp]
                    while (*p && *p != ',') p++;
 8001652:	7823      	ldrb	r3, [r4, #0]
                    params[i++] = atoi(p);
 8001654:	fa5f fa8a 	uxtb.w	sl, sl
                    while (*p && *p != ',') p++;
 8001658:	1e1a      	subs	r2, r3, #0
 800165a:	bf18      	it	ne
 800165c:	2201      	movne	r2, #1
 800165e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001660:	d008      	beq.n	8001674 <readUART+0x15c>
 8001662:	2a00      	cmp	r2, #0
 8001664:	d076      	beq.n	8001754 <readUART+0x23c>
 8001666:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800166a:	1e1a      	subs	r2, r3, #0
 800166c:	bf18      	it	ne
 800166e:	2201      	movne	r2, #1
 8001670:	2b2c      	cmp	r3, #44	@ 0x2c
 8001672:	d1f6      	bne.n	8001662 <readUART+0x14a>
                while (*p && i < NUM_PARAMETERS)
 8001674:	7863      	ldrb	r3, [r4, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d09a      	beq.n	80015b0 <readUART+0x98>
 800167a:	f1ba 0f03 	cmp.w	sl, #3
 800167e:	d097      	beq.n	80015b0 <readUART+0x98>
                    	p++;
 8001680:	3401      	adds	r4, #1
 8001682:	f10b 0b01 	add.w	fp, fp, #1
 8001686:	e7dd      	b.n	8001644 <readUART+0x12c>
                char* p = &token[1];
 8001688:	1c44      	adds	r4, r0, #1
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 800168a:	f04f 0a00 	mov.w	sl, #0
                char* p = &token[1];
 800168e:	9403      	str	r4, [sp, #12]
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 8001690:	7823      	ldrb	r3, [r4, #0]
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 8001692:	220a      	movs	r2, #10
 8001694:	a903      	add	r1, sp, #12
 8001696:	4620      	mov	r0, r4
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 8001698:	2b00      	cmp	r3, #0
 800169a:	d089      	beq.n	80015b0 <readUART+0x98>
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 800169c:	5cf3      	ldrb	r3, [r6, r3]
 800169e:	075b      	lsls	r3, r3, #29
 80016a0:	d40b      	bmi.n	80016ba <readUART+0x1a2>
 80016a2:	3401      	adds	r4, #1
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 80016a4:	220a      	movs	r2, #10
 80016a6:	a903      	add	r1, sp, #12
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 80016a8:	9403      	str	r4, [sp, #12]
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 80016aa:	4620      	mov	r0, r4
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 80016ac:	7823      	ldrb	r3, [r4, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f43f af7e 	beq.w	80015b0 <readUART+0x98>
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 80016b4:	5cf3      	ldrb	r3, [r6, r3]
 80016b6:	075b      	lsls	r3, r3, #29
 80016b8:	d5f3      	bpl.n	80016a2 <readUART+0x18a>
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 80016ba:	f009 ffb7 	bl	800b62c <strtoul>
 80016be:	f10a 0310 	add.w	r3, sl, #16
					if (*p == ',') p++;
 80016c2:	9c03      	ldr	r4, [sp, #12]
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 80016c4:	eb0d 0203 	add.w	r2, sp, r3
 80016c8:	f10a 0301 	add.w	r3, sl, #1
 80016cc:	f802 0c0c 	strb.w	r0, [r2, #-12]
 80016d0:	b2db      	uxtb	r3, r3
					if (*p == ',') p++;
 80016d2:	7822      	ldrb	r2, [r4, #0]
 80016d4:	469a      	mov	sl, r3
 80016d6:	2a2c      	cmp	r2, #44	@ 0x2c
 80016d8:	d101      	bne.n	80016de <readUART+0x1c6>
 80016da:	3401      	adds	r4, #1
 80016dc:	9403      	str	r4, [sp, #12]
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d1d6      	bne.n	8001690 <readUART+0x178>
        while ((token = strtok_r(rest, ";", &rest))) {
 80016e2:	9802      	ldr	r0, [sp, #8]
 80016e4:	e765      	b.n	80015b2 <readUART+0x9a>
                effectId = atoi(&token[1]);
 80016e6:	3001      	adds	r0, #1
 80016e8:	f009 fdd8 	bl	800b29c <atoi>
 80016ec:	fa5f f980 	uxtb.w	r9, r0
        while ((token = strtok_r(rest, ";", &rest))) {
 80016f0:	9802      	ldr	r0, [sp, #8]
 80016f2:	e75e      	b.n	80015b2 <readUART+0x9a>
    link->needsRefresh = 0;

    for (int i = 0; i < MAX_NODES; i++)
    {

        link->nodes[i].nodeId = 255;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    link->nodeCount = 0;
 80016f8:	f885 005a 	strb.w	r0, [r5, #90]	@ 0x5a
        link->nodes[i].nodeId = 255;
 80016fc:	606b      	str	r3, [r5, #4]
 80016fe:	60eb      	str	r3, [r5, #12]
 8001700:	61ab      	str	r3, [r5, #24]
 8001702:	622b      	str	r3, [r5, #32]
 8001704:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001706:	632b      	str	r3, [r5, #48]	@ 0x30
 8001708:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800170a:	646b      	str	r3, [r5, #68]	@ 0x44
 800170c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800170e:	656b      	str	r3, [r5, #84]	@ 0x54
            link->nodes[i].params[j] = 255;
        }

        for (int j = 0; j < MAX_INPUTS; j++)
        {
            link->nodes[i].inputs[j] = 255;
 8001710:	f8a5 3058 	strh.w	r3, [r5, #88]	@ 0x58
        link->nodes[i].nodeId = 255;
 8001714:	4b15      	ldr	r3, [pc, #84]	@ (800176c <readUART+0x254>)
 8001716:	602b      	str	r3, [r5, #0]
 8001718:	626b      	str	r3, [r5, #36]	@ 0x24
 800171a:	64ab      	str	r3, [r5, #72]	@ 0x48
 800171c:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <readUART+0x258>)
 800171e:	60ab      	str	r3, [r5, #8]
 8001720:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001722:	652b      	str	r3, [r5, #80]	@ 0x50
 8001724:	f06f 437a 	mvn.w	r3, #4194304000	@ 0xfa000000
 8001728:	612b      	str	r3, [r5, #16]
 800172a:	636b      	str	r3, [r5, #52]	@ 0x34
 800172c:	f06f 03ff 	mvn.w	r3, #255	@ 0xff
 8001730:	616b      	str	r3, [r5, #20]
 8001732:	63ab      	str	r3, [r5, #56]	@ 0x38
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <readUART+0x25c>)
 8001736:	61eb      	str	r3, [r5, #28]
 8001738:	642b      	str	r3, [r5, #64]	@ 0x40
    link->readUART = readUART;
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <readUART+0x260>)
 800173c:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    link->commandIndex = 0;
 8001740:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <readUART+0x264>)
 8001742:	f8c5 30db 	str.w	r3, [r5, #219]	@ 0xdb
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <readUART+0x268>)
 8001748:	f8c5 30df 	str.w	r3, [r5, #223]	@ 0xdf
 800174c:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <readUART+0x26c>)
 800174e:	f8c5 30e3 	str.w	r3, [r5, #227]	@ 0xe3
    for (int i = 0; i < MAX_NODES; i++)
 8001752:	e729      	b.n	80015a8 <readUART+0x90>
                    if (*p == ',')
 8001754:	2b2c      	cmp	r3, #44	@ 0x2c
 8001756:	d08d      	beq.n	8001674 <readUART+0x15c>
                while (*p && i < NUM_PARAMETERS)
 8001758:	f1ba 0f03 	cmp.w	sl, #3
 800175c:	f43f af28 	beq.w	80015b0 <readUART+0x98>
 8001760:	2a00      	cmp	r2, #0
 8001762:	d18e      	bne.n	8001682 <readUART+0x16a>
 8001764:	e724      	b.n	80015b0 <readUART+0x98>
 8001766:	bf00      	nop
 8001768:	0808405b 	.word	0x0808405b
 800176c:	ff0005ff 	.word	0xff0005ff
 8001770:	0005ffff 	.word	0x0005ffff
 8001774:	ffff0005 	.word	0xffff0005
 8001778:	08001519 	.word	0x08001519
 800177c:	02010000 	.word	0x02010000
 8001780:	06050403 	.word	0x06050403
 8001784:	00090807 	.word	0x00090807
 8001788:	08070ae0 	.word	0x08070ae0

0800178c <topoSort>:
{
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t indeg[MAX_NODES] = {0};
 800178e:	2600      	movs	r6, #0
{
 8001790:	b0a3      	sub	sp, #140	@ 0x8c
 8001792:	4604      	mov	r4, r0
    uint8_t adj[MAX_NODES][MAX_NODES] = {0};
 8001794:	2264      	movs	r2, #100	@ 0x64
 8001796:	a809      	add	r0, sp, #36	@ 0x24
 8001798:	4631      	mov	r1, r6
    uint8_t indeg[MAX_NODES] = {0};
 800179a:	f8ad 6008 	strh.w	r6, [sp, #8]
 800179e:	e9cd 6600 	strd	r6, r6, [sp]
    uint8_t adj[MAX_NODES][MAX_NODES] = {0};
 80017a2:	f009 ff6b 	bl	800b67c <memset>
    for (uint8_t i = 0; i < link->nodeCount; ++i) {
 80017a6:	f894 005a 	ldrb.w	r0, [r4, #90]	@ 0x5a
    uint8_t adjCnt[MAX_NODES] = {0};
 80017aa:	f8ad 6014 	strh.w	r6, [sp, #20]
 80017ae:	e9cd 6603 	strd	r6, r6, [sp, #12]
    for (uint8_t i = 0; i < link->nodeCount; ++i) {
 80017b2:	2800      	cmp	r0, #0
 80017b4:	f000 828f 	beq.w	8001cd6 <topoSort+0x54a>
 80017b8:	4622      	mov	r2, r4
 80017ba:	466d      	mov	r5, sp
 80017bc:	4633      	mov	r3, r6
        for (uint8_t j = 0; j < n->numInputs; ++j) {
 80017be:	7896      	ldrb	r6, [r2, #2]
 80017c0:	fa5f fc83 	uxtb.w	ip, r3
 80017c4:	2e00      	cmp	r6, #0
 80017c6:	d04e      	beq.n	8001866 <topoSort+0xda>
            uint8_t src = n->inputs[j];
 80017c8:	7991      	ldrb	r1, [r2, #6]
            if (src != 254 && src != 255 && src < link->nodeCount) {
 80017ca:	4288      	cmp	r0, r1
 80017cc:	d915      	bls.n	80017fa <topoSort+0x6e>
 80017ce:	29fd      	cmp	r1, #253	@ 0xfd
 80017d0:	d813      	bhi.n	80017fa <topoSort+0x6e>
                indeg[i]++;
 80017d2:	782f      	ldrb	r7, [r5, #0]
 80017d4:	3701      	adds	r7, #1
 80017d6:	702f      	strb	r7, [r5, #0]
                adj[src][adjCnt[src]++] = i;
 80017d8:	f101 0788 	add.w	r7, r1, #136	@ 0x88
 80017dc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80017e0:	eb0d 0e07 	add.w	lr, sp, r7
 80017e4:	af22      	add	r7, sp, #136	@ 0x88
 80017e6:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 80017ea:	f81e 7c7c 	ldrb.w	r7, [lr, #-124]
 80017ee:	4439      	add	r1, r7
 80017f0:	3701      	adds	r7, #1
 80017f2:	f801 cc64 	strb.w	ip, [r1, #-100]
 80017f6:	f80e 7c7c 	strb.w	r7, [lr, #-124]
        for (uint8_t j = 0; j < n->numInputs; ++j) {
 80017fa:	2e01      	cmp	r6, #1
 80017fc:	d033      	beq.n	8001866 <topoSort+0xda>
            uint8_t src = n->inputs[j];
 80017fe:	79d1      	ldrb	r1, [r2, #7]
            if (src != 254 && src != 255 && src < link->nodeCount) {
 8001800:	4288      	cmp	r0, r1
 8001802:	d915      	bls.n	8001830 <topoSort+0xa4>
 8001804:	29fd      	cmp	r1, #253	@ 0xfd
 8001806:	d813      	bhi.n	8001830 <topoSort+0xa4>
                indeg[i]++;
 8001808:	782f      	ldrb	r7, [r5, #0]
 800180a:	3701      	adds	r7, #1
 800180c:	702f      	strb	r7, [r5, #0]
                adj[src][adjCnt[src]++] = i;
 800180e:	f101 0788 	add.w	r7, r1, #136	@ 0x88
 8001812:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001816:	eb0d 0e07 	add.w	lr, sp, r7
 800181a:	af22      	add	r7, sp, #136	@ 0x88
 800181c:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8001820:	f81e 7c7c 	ldrb.w	r7, [lr, #-124]
 8001824:	4439      	add	r1, r7
 8001826:	3701      	adds	r7, #1
 8001828:	f801 cc64 	strb.w	ip, [r1, #-100]
 800182c:	f80e 7c7c 	strb.w	r7, [lr, #-124]
        for (uint8_t j = 0; j < n->numInputs; ++j) {
 8001830:	2e02      	cmp	r6, #2
 8001832:	d018      	beq.n	8001866 <topoSort+0xda>
            uint8_t src = n->inputs[j];
 8001834:	7a11      	ldrb	r1, [r2, #8]
            if (src != 254 && src != 255 && src < link->nodeCount) {
 8001836:	4281      	cmp	r1, r0
 8001838:	d215      	bcs.n	8001866 <topoSort+0xda>
 800183a:	29fd      	cmp	r1, #253	@ 0xfd
 800183c:	d813      	bhi.n	8001866 <topoSort+0xda>
                indeg[i]++;
 800183e:	782e      	ldrb	r6, [r5, #0]
 8001840:	3601      	adds	r6, #1
 8001842:	702e      	strb	r6, [r5, #0]
                adj[src][adjCnt[src]++] = i;
 8001844:	f101 0688 	add.w	r6, r1, #136	@ 0x88
 8001848:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800184c:	eb0d 0706 	add.w	r7, sp, r6
 8001850:	ae22      	add	r6, sp, #136	@ 0x88
 8001852:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8001856:	f817 6c7c 	ldrb.w	r6, [r7, #-124]
 800185a:	4431      	add	r1, r6
 800185c:	3601      	adds	r6, #1
 800185e:	f801 cc64 	strb.w	ip, [r1, #-100]
 8001862:	f807 6c7c 	strb.w	r6, [r7, #-124]
    for (uint8_t i = 0; i < link->nodeCount; ++i) {
 8001866:	3301      	adds	r3, #1
 8001868:	3209      	adds	r2, #9
 800186a:	3501      	adds	r5, #1
 800186c:	4283      	cmp	r3, r0
 800186e:	d1a6      	bne.n	80017be <topoSort+0x32>
        if (indeg[i] == 0) Q[t++] = i;
 8001870:	f89d 2000 	ldrb.w	r2, [sp]
 8001874:	2a00      	cmp	r2, #0
 8001876:	f040 817f 	bne.w	8001b78 <topoSort+0x3ec>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 800187a:	2b01      	cmp	r3, #1
        if (indeg[i] == 0) Q[t++] = i;
 800187c:	f88d 2018 	strb.w	r2, [sp, #24]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001880:	f000 8232 	beq.w	8001ce8 <topoSort+0x55c>
        if (indeg[i] == 0) Q[t++] = i;
 8001884:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001888:	2a00      	cmp	r2, #0
 800188a:	f040 8189 	bne.w	8001ba0 <topoSort+0x414>
 800188e:	2201      	movs	r2, #1
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001890:	2b02      	cmp	r3, #2
        if (indeg[i] == 0) Q[t++] = i;
 8001892:	f88d 2019 	strb.w	r2, [sp, #25]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001896:	d046      	beq.n	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001898:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800189c:	2a00      	cmp	r2, #0
 800189e:	f000 8221 	beq.w	8001ce4 <topoSort+0x558>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	f000 8222 	beq.w	8001cec <topoSort+0x560>
        if (indeg[i] == 0) Q[t++] = i;
 80018a8:	2202      	movs	r2, #2
 80018aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8197 	beq.w	8001be2 <topoSort+0x456>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 80018b4:	2804      	cmp	r0, #4
 80018b6:	f000 820a 	beq.w	8001cce <topoSort+0x542>
        if (indeg[i] == 0) Q[t++] = i;
 80018ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 81b9 	beq.w	8001c36 <topoSort+0x4aa>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 80018c4:	2805      	cmp	r0, #5
 80018c6:	f000 8202 	beq.w	8001cce <topoSort+0x542>
        if (indeg[i] == 0) Q[t++] = i;
 80018ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 819d 	beq.w	8001c0e <topoSort+0x482>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 80018d4:	2806      	cmp	r0, #6
 80018d6:	f000 81fa 	beq.w	8001cce <topoSort+0x542>
        if (indeg[i] == 0) Q[t++] = i;
 80018da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 81c0 	beq.w	8001c64 <topoSort+0x4d8>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 80018e4:	2807      	cmp	r0, #7
 80018e6:	f000 81f2 	beq.w	8001cce <topoSort+0x542>
        if (indeg[i] == 0) Q[t++] = i;
 80018ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 81cb 	beq.w	8001c8a <topoSort+0x4fe>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 80018f4:	2808      	cmp	r0, #8
 80018f6:	f000 81ea 	beq.w	8001cce <topoSort+0x542>
        if (indeg[i] == 0) Q[t++] = i;
 80018fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 81d5 	beq.w	8001cae <topoSort+0x522>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001904:	280a      	cmp	r0, #10
 8001906:	4613      	mov	r3, r2
 8001908:	f040 81e2 	bne.w	8001cd0 <topoSort+0x544>
        if (indeg[i] == 0) Q[t++] = i;
 800190c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001910:	2a00      	cmp	r2, #0
 8001912:	f040 81dd 	bne.w	8001cd0 <topoSort+0x544>
 8001916:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 800191a:	3301      	adds	r3, #1
 800191c:	2109      	movs	r1, #9
 800191e:	446a      	add	r2, sp
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f802 1c70 	strb.w	r1, [r2, #-112]
    while (h < t) {
 8001926:	ad06      	add	r5, sp, #24
 8001928:	34db      	adds	r4, #219	@ 0xdb
    uint8_t Q[MAX_NODES], h = 0, t = 0, out = 0;
 800192a:	f04f 0e00 	mov.w	lr, #0
        uint8_t curr = Q[h++];
 800192e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001932:	f10e 0e01 	add.w	lr, lr, #1
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001936:	f102 0188 	add.w	r1, r2, #136	@ 0x88
        uint8_t curr = Q[h++];
 800193a:	fa5f fe8e 	uxtb.w	lr, lr
        link->processOrder[out++] = curr;
 800193e:	f804 2f01 	strb.w	r2, [r4, #1]!
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001942:	4469      	add	r1, sp
 8001944:	f811 1c7c 	ldrb.w	r1, [r1, #-124]
 8001948:	2900      	cmp	r1, #0
 800194a:	f000 810f 	beq.w	8001b6c <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 800194e:	ae22      	add	r6, sp, #136	@ 0x88
 8001950:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8001954:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8001958:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 800195c:	f810 7c64 	ldrb.w	r7, [r0, #-100]
            if (--indeg[child] == 0)
 8001960:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001964:	eb0d 0600 	add.w	r6, sp, r0
 8001968:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 800196c:	3801      	subs	r0, #1
 800196e:	b2c0      	uxtb	r0, r0
 8001970:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001974:	b930      	cbnz	r0, 8001984 <topoSort+0x1f8>
                Q[t++] = child;
 8001976:	1c5e      	adds	r6, r3, #1
 8001978:	3388      	adds	r3, #136	@ 0x88
 800197a:	eb0d 0003 	add.w	r0, sp, r3
 800197e:	b2f3      	uxtb	r3, r6
 8001980:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001984:	2901      	cmp	r1, #1
 8001986:	f000 80f1 	beq.w	8001b6c <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 800198a:	ae22      	add	r6, sp, #136	@ 0x88
 800198c:	eb0c 0002 	add.w	r0, ip, r2
 8001990:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001994:	f810 7c63 	ldrb.w	r7, [r0, #-99]
            if (--indeg[child] == 0)
 8001998:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800199c:	eb0d 0600 	add.w	r6, sp, r0
 80019a0:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 80019a4:	3801      	subs	r0, #1
 80019a6:	b2c0      	uxtb	r0, r0
 80019a8:	f806 0c88 	strb.w	r0, [r6, #-136]
 80019ac:	b930      	cbnz	r0, 80019bc <topoSort+0x230>
                Q[t++] = child;
 80019ae:	1c5e      	adds	r6, r3, #1
 80019b0:	3388      	adds	r3, #136	@ 0x88
 80019b2:	eb0d 0003 	add.w	r0, sp, r3
 80019b6:	b2f3      	uxtb	r3, r6
 80019b8:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 80019bc:	2902      	cmp	r1, #2
 80019be:	f000 80d5 	beq.w	8001b6c <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 80019c2:	ae22      	add	r6, sp, #136	@ 0x88
 80019c4:	eb0c 0002 	add.w	r0, ip, r2
 80019c8:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 80019cc:	f810 7c62 	ldrb.w	r7, [r0, #-98]
            if (--indeg[child] == 0)
 80019d0:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80019d4:	eb0d 0600 	add.w	r6, sp, r0
 80019d8:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 80019dc:	3801      	subs	r0, #1
 80019de:	b2c0      	uxtb	r0, r0
 80019e0:	f806 0c88 	strb.w	r0, [r6, #-136]
 80019e4:	b930      	cbnz	r0, 80019f4 <topoSort+0x268>
                Q[t++] = child;
 80019e6:	1c5e      	adds	r6, r3, #1
 80019e8:	3388      	adds	r3, #136	@ 0x88
 80019ea:	eb0d 0003 	add.w	r0, sp, r3
 80019ee:	b2f3      	uxtb	r3, r6
 80019f0:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 80019f4:	2903      	cmp	r1, #3
 80019f6:	f000 80b9 	beq.w	8001b6c <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 80019fa:	ae22      	add	r6, sp, #136	@ 0x88
 80019fc:	eb0c 0002 	add.w	r0, ip, r2
 8001a00:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001a04:	f810 7c61 	ldrb.w	r7, [r0, #-97]
            if (--indeg[child] == 0)
 8001a08:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001a0c:	eb0d 0600 	add.w	r6, sp, r0
 8001a10:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001a14:	3801      	subs	r0, #1
 8001a16:	b2c0      	uxtb	r0, r0
 8001a18:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001a1c:	b930      	cbnz	r0, 8001a2c <topoSort+0x2a0>
                Q[t++] = child;
 8001a1e:	1c5e      	adds	r6, r3, #1
 8001a20:	3388      	adds	r3, #136	@ 0x88
 8001a22:	eb0d 0003 	add.w	r0, sp, r3
 8001a26:	b2f3      	uxtb	r3, r6
 8001a28:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001a2c:	2904      	cmp	r1, #4
 8001a2e:	f000 809d 	beq.w	8001b6c <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001a32:	ae22      	add	r6, sp, #136	@ 0x88
 8001a34:	eb0c 0002 	add.w	r0, ip, r2
 8001a38:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001a3c:	f810 7c60 	ldrb.w	r7, [r0, #-96]
            if (--indeg[child] == 0)
 8001a40:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001a44:	eb0d 0600 	add.w	r6, sp, r0
 8001a48:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001a4c:	3801      	subs	r0, #1
 8001a4e:	b2c0      	uxtb	r0, r0
 8001a50:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001a54:	b930      	cbnz	r0, 8001a64 <topoSort+0x2d8>
                Q[t++] = child;
 8001a56:	1c5e      	adds	r6, r3, #1
 8001a58:	3388      	adds	r3, #136	@ 0x88
 8001a5a:	eb0d 0003 	add.w	r0, sp, r3
 8001a5e:	b2f3      	uxtb	r3, r6
 8001a60:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001a64:	2905      	cmp	r1, #5
 8001a66:	f000 8081 	beq.w	8001b6c <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001a6a:	ae22      	add	r6, sp, #136	@ 0x88
 8001a6c:	eb0c 0002 	add.w	r0, ip, r2
 8001a70:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001a74:	f810 7c5f 	ldrb.w	r7, [r0, #-95]
            if (--indeg[child] == 0)
 8001a78:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001a7c:	eb0d 0600 	add.w	r6, sp, r0
 8001a80:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001a84:	3801      	subs	r0, #1
 8001a86:	b2c0      	uxtb	r0, r0
 8001a88:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001a8c:	b930      	cbnz	r0, 8001a9c <topoSort+0x310>
                Q[t++] = child;
 8001a8e:	1c5e      	adds	r6, r3, #1
 8001a90:	3388      	adds	r3, #136	@ 0x88
 8001a92:	eb0d 0003 	add.w	r0, sp, r3
 8001a96:	b2f3      	uxtb	r3, r6
 8001a98:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001a9c:	2906      	cmp	r1, #6
 8001a9e:	d065      	beq.n	8001b6c <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001aa0:	ae22      	add	r6, sp, #136	@ 0x88
 8001aa2:	eb0c 0002 	add.w	r0, ip, r2
 8001aa6:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001aaa:	f810 7c5e 	ldrb.w	r7, [r0, #-94]
            if (--indeg[child] == 0)
 8001aae:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001ab2:	eb0d 0600 	add.w	r6, sp, r0
 8001ab6:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001aba:	3801      	subs	r0, #1
 8001abc:	b2c0      	uxtb	r0, r0
 8001abe:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001ac2:	b928      	cbnz	r0, 8001ad0 <topoSort+0x344>
                Q[t++] = child;
 8001ac4:	1c58      	adds	r0, r3, #1
 8001ac6:	3388      	adds	r3, #136	@ 0x88
 8001ac8:	446b      	add	r3, sp
 8001aca:	f803 7c70 	strb.w	r7, [r3, #-112]
 8001ace:	b2c3      	uxtb	r3, r0
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001ad0:	2907      	cmp	r1, #7
 8001ad2:	d04b      	beq.n	8001b6c <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001ad4:	ae22      	add	r6, sp, #136	@ 0x88
 8001ad6:	eb0c 0002 	add.w	r0, ip, r2
 8001ada:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001ade:	f810 7c5d 	ldrb.w	r7, [r0, #-93]
            if (--indeg[child] == 0)
 8001ae2:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001ae6:	eb0d 0600 	add.w	r6, sp, r0
 8001aea:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001aee:	3801      	subs	r0, #1
 8001af0:	b2c0      	uxtb	r0, r0
 8001af2:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001af6:	b928      	cbnz	r0, 8001b04 <topoSort+0x378>
                Q[t++] = child;
 8001af8:	1c58      	adds	r0, r3, #1
 8001afa:	3388      	adds	r3, #136	@ 0x88
 8001afc:	446b      	add	r3, sp
 8001afe:	f803 7c70 	strb.w	r7, [r3, #-112]
 8001b02:	b2c3      	uxtb	r3, r0
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001b04:	2908      	cmp	r1, #8
 8001b06:	d031      	beq.n	8001b6c <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001b08:	ae22      	add	r6, sp, #136	@ 0x88
 8001b0a:	eb0c 0002 	add.w	r0, ip, r2
 8001b0e:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001b12:	f810 7c5c 	ldrb.w	r7, [r0, #-92]
            if (--indeg[child] == 0)
 8001b16:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001b1a:	eb0d 0600 	add.w	r6, sp, r0
 8001b1e:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001b22:	3801      	subs	r0, #1
 8001b24:	b2c0      	uxtb	r0, r0
 8001b26:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001b2a:	b928      	cbnz	r0, 8001b38 <topoSort+0x3ac>
                Q[t++] = child;
 8001b2c:	1c58      	adds	r0, r3, #1
 8001b2e:	3388      	adds	r3, #136	@ 0x88
 8001b30:	446b      	add	r3, sp
 8001b32:	f803 7c70 	strb.w	r7, [r3, #-112]
 8001b36:	b2c3      	uxtb	r3, r0
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001b38:	2909      	cmp	r1, #9
 8001b3a:	d017      	beq.n	8001b6c <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001b3c:	4494      	add	ip, r2
 8001b3e:	aa22      	add	r2, sp, #136	@ 0x88
 8001b40:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8001b44:	f81c 0c5b 	ldrb.w	r0, [ip, #-91]
            if (--indeg[child] == 0)
 8001b48:	f100 0288 	add.w	r2, r0, #136	@ 0x88
 8001b4c:	eb0d 0102 	add.w	r1, sp, r2
 8001b50:	f811 2c88 	ldrb.w	r2, [r1, #-136]
 8001b54:	3a01      	subs	r2, #1
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	f801 2c88 	strb.w	r2, [r1, #-136]
 8001b5c:	b932      	cbnz	r2, 8001b6c <topoSort+0x3e0>
                Q[t++] = child;
 8001b5e:	1c59      	adds	r1, r3, #1
 8001b60:	3388      	adds	r3, #136	@ 0x88
 8001b62:	eb0d 0203 	add.w	r2, sp, r3
 8001b66:	b2cb      	uxtb	r3, r1
 8001b68:	f802 0c70 	strb.w	r0, [r2, #-112]
    while (h < t) {
 8001b6c:	459e      	cmp	lr, r3
 8001b6e:	f4ff aede 	bcc.w	800192e <topoSort+0x1a2>
    return out;
 8001b72:	4670      	mov	r0, lr
}
 8001b74:	b023      	add	sp, #140	@ 0x8c
 8001b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001b78:	2801      	cmp	r0, #1
 8001b7a:	f000 80ac 	beq.w	8001cd6 <topoSort+0x54a>
        if (indeg[i] == 0) Q[t++] = i;
 8001b7e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001b82:	b153      	cbz	r3, 8001b9a <topoSort+0x40e>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001b84:	2802      	cmp	r0, #2
 8001b86:	f000 80a6 	beq.w	8001cd6 <topoSort+0x54a>
        if (indeg[i] == 0) Q[t++] = i;
 8001b8a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001b8e:	b173      	cbz	r3, 8001bae <topoSort+0x422>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001b90:	2803      	cmp	r0, #3
 8001b92:	f000 80a0 	beq.w	8001cd6 <topoSort+0x54a>
    uint8_t Q[MAX_NODES], h = 0, t = 0, out = 0;
 8001b96:	2200      	movs	r2, #0
 8001b98:	e687      	b.n	80018aa <topoSort+0x11e>
        if (indeg[i] == 0) Q[t++] = i;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f88d 3018 	strb.w	r3, [sp, #24]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001ba0:	2802      	cmp	r0, #2
 8001ba2:	f240 80a1 	bls.w	8001ce8 <topoSort+0x55c>
        if (indeg[i] == 0) Q[t++] = i;
 8001ba6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001baa:	b98b      	cbnz	r3, 8001bd0 <topoSort+0x444>
 8001bac:	2301      	movs	r3, #1
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	3388      	adds	r3, #136	@ 0x88
 8001bb2:	2102      	movs	r1, #2
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001bb4:	2803      	cmp	r0, #3
        if (indeg[i] == 0) Q[t++] = i;
 8001bb6:	446b      	add	r3, sp
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	f803 1c70 	strb.w	r1, [r3, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001bbe:	d905      	bls.n	8001bcc <topoSort+0x440>
        if (indeg[i] == 0) Q[t++] = i;
 8001bc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001bc4:	b16b      	cbz	r3, 8001be2 <topoSort+0x456>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001bc6:	2804      	cmp	r0, #4
 8001bc8:	f47f ae77 	bne.w	80018ba <topoSort+0x12e>
        if (indeg[i] == 0) Q[t++] = i;
 8001bcc:	4613      	mov	r3, r2
 8001bce:	e6aa      	b.n	8001926 <topoSort+0x19a>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001bd0:	2803      	cmp	r0, #3
 8001bd2:	f000 8089 	beq.w	8001ce8 <topoSort+0x55c>
        if (indeg[i] == 0) Q[t++] = i;
 8001bd6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001bda:	2201      	movs	r2, #1
        if (indeg[i] == 0) Q[t++] = i;
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f47f ae69 	bne.w	80018b4 <topoSort+0x128>
 8001be2:	1c53      	adds	r3, r2, #1
 8001be4:	3288      	adds	r2, #136	@ 0x88
 8001be6:	2103      	movs	r1, #3
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001be8:	2804      	cmp	r0, #4
        if (indeg[i] == 0) Q[t++] = i;
 8001bea:	446a      	add	r2, sp
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001bf2:	f67f ae98 	bls.w	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001bf6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001bfa:	b1da      	cbz	r2, 8001c34 <topoSort+0x4a8>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001bfc:	2805      	cmp	r0, #5
 8001bfe:	f43f ae92 	beq.w	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001c02:	461a      	mov	r2, r3
 8001c04:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f47f ae63 	bne.w	80018d4 <topoSort+0x148>
 8001c0e:	1c53      	adds	r3, r2, #1
 8001c10:	3288      	adds	r2, #136	@ 0x88
 8001c12:	2105      	movs	r1, #5
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001c14:	2806      	cmp	r0, #6
        if (indeg[i] == 0) Q[t++] = i;
 8001c16:	446a      	add	r2, sp
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001c1e:	f67f ae82 	bls.w	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001c22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001c26:	2a00      	cmp	r2, #0
 8001c28:	d05a      	beq.n	8001ce0 <topoSort+0x554>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001c2a:	2807      	cmp	r0, #7
 8001c2c:	f43f ae7b 	beq.w	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001c30:	461a      	mov	r2, r3
 8001c32:	e65a      	b.n	80018ea <topoSort+0x15e>
 8001c34:	461a      	mov	r2, r3
 8001c36:	1c53      	adds	r3, r2, #1
 8001c38:	3288      	adds	r2, #136	@ 0x88
 8001c3a:	2104      	movs	r1, #4
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001c3c:	2805      	cmp	r0, #5
        if (indeg[i] == 0) Q[t++] = i;
 8001c3e:	446a      	add	r2, sp
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001c46:	f67f ae6e 	bls.w	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001c4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d044      	beq.n	8001cdc <topoSort+0x550>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001c52:	2806      	cmp	r0, #6
 8001c54:	f43f ae67 	beq.w	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f47f ae40 	bne.w	80018e4 <topoSort+0x158>
 8001c64:	1c53      	adds	r3, r2, #1
 8001c66:	3288      	adds	r2, #136	@ 0x88
 8001c68:	2106      	movs	r1, #6
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001c6a:	2807      	cmp	r0, #7
        if (indeg[i] == 0) Q[t++] = i;
 8001c6c:	446a      	add	r2, sp
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001c74:	f67f ae57 	bls.w	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001c78:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001c7c:	b122      	cbz	r2, 8001c88 <topoSort+0x4fc>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001c7e:	2808      	cmp	r0, #8
 8001c80:	f43f ae51 	beq.w	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001c84:	461a      	mov	r2, r3
 8001c86:	e638      	b.n	80018fa <topoSort+0x16e>
 8001c88:	461a      	mov	r2, r3
 8001c8a:	1c53      	adds	r3, r2, #1
 8001c8c:	3288      	adds	r2, #136	@ 0x88
 8001c8e:	2107      	movs	r1, #7
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001c90:	2808      	cmp	r0, #8
        if (indeg[i] == 0) Q[t++] = i;
 8001c92:	446a      	add	r2, sp
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001c9a:	f67f ae44 	bls.w	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001c9e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001ca2:	b11a      	cbz	r2, 8001cac <topoSort+0x520>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001ca4:	280a      	cmp	r0, #10
 8001ca6:	f43f ae31 	beq.w	800190c <topoSort+0x180>
 8001caa:	e63c      	b.n	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001cac:	461a      	mov	r2, r3
 8001cae:	1c53      	adds	r3, r2, #1
 8001cb0:	3288      	adds	r2, #136	@ 0x88
 8001cb2:	2108      	movs	r1, #8
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001cb4:	280a      	cmp	r0, #10
        if (indeg[i] == 0) Q[t++] = i;
 8001cb6:	446a      	add	r2, sp
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001cbe:	f47f ae32 	bne.w	8001926 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001cc2:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	f43f ae25 	beq.w	8001916 <topoSort+0x18a>
 8001ccc:	e62b      	b.n	8001926 <topoSort+0x19a>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001cce:	4613      	mov	r3, r2
    while (h < t) {
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f47f ae28 	bne.w	8001926 <topoSort+0x19a>
                Q[t++] = child;
 8001cd6:	2000      	movs	r0, #0
}
 8001cd8:	b023      	add	sp, #140	@ 0x8c
 8001cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (indeg[i] == 0) Q[t++] = i;
 8001cdc:	461a      	mov	r2, r3
 8001cde:	e796      	b.n	8001c0e <topoSort+0x482>
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	e7bf      	b.n	8001c64 <topoSort+0x4d8>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e762      	b.n	8001bae <topoSort+0x422>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e61c      	b.n	8001926 <topoSort+0x19a>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e61a      	b.n	8001926 <topoSort+0x19a>

08001cf0 <initDataLink>:
        link->nodes[i].nodeId = 255;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cf4:	4919      	ldr	r1, [pc, #100]	@ (8001d5c <initDataLink+0x6c>)
 8001cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d60 <initDataLink+0x70>)
    link->nodeCount = 0;
 8001cf8:	f04f 0c00 	mov.w	ip, #0
{
 8001cfc:	b410      	push	{r4}
        link->nodes[i].nodeId = 255;
 8001cfe:	f06f 447a 	mvn.w	r4, #4194304000	@ 0xfa000000
 8001d02:	6183      	str	r3, [r0, #24]
 8001d04:	6303      	str	r3, [r0, #48]	@ 0x30
 8001d06:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8001d08:	6543      	str	r3, [r0, #84]	@ 0x54
            link->nodes[i].inputs[j] = 255;
 8001d0a:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58
        link->nodes[i].nodeId = 255;
 8001d0e:	6104      	str	r4, [r0, #16]
 8001d10:	6344      	str	r4, [r0, #52]	@ 0x34
    link->readUART = readUART;
 8001d12:	4c14      	ldr	r4, [pc, #80]	@ (8001d64 <initDataLink+0x74>)
    link->nodeCount = 0;
 8001d14:	f880 c05a 	strb.w	ip, [r0, #90]	@ 0x5a
    link->readUART = readUART;
 8001d18:	f8c0 40e8 	str.w	r4, [r0, #232]	@ 0xe8
        }

    }
}
 8001d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
        link->nodes[i].nodeId = 255;
 8001d20:	e9c0 1300 	strd	r1, r3, [r0]
 8001d24:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8001d28:	e9c0 3108 	strd	r3, r1, [r0, #32]
 8001d2c:	e9c0 320a 	strd	r3, r2, [r0, #40]	@ 0x28
 8001d30:	e9c0 3111 	strd	r3, r1, [r0, #68]	@ 0x44
 8001d34:	e9c0 3213 	strd	r3, r2, [r0, #76]	@ 0x4c
 8001d38:	f06f 02ff 	mvn.w	r2, #255	@ 0xff
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <initDataLink+0x78>)
    link->commandIndex = 0;
 8001d3e:	490b      	ldr	r1, [pc, #44]	@ (8001d6c <initDataLink+0x7c>)
        link->nodes[i].nodeId = 255;
 8001d40:	6142      	str	r2, [r0, #20]
 8001d42:	61c3      	str	r3, [r0, #28]
 8001d44:	6382      	str	r2, [r0, #56]	@ 0x38
 8001d46:	6403      	str	r3, [r0, #64]	@ 0x40
    link->commandIndex = 0;
 8001d48:	4a09      	ldr	r2, [pc, #36]	@ (8001d70 <initDataLink+0x80>)
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <initDataLink+0x84>)
 8001d4c:	f8c0 10db 	str.w	r1, [r0, #219]	@ 0xdb
 8001d50:	f8c0 20df 	str.w	r2, [r0, #223]	@ 0xdf
 8001d54:	f8c0 30e3 	str.w	r3, [r0, #227]	@ 0xe3
}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	ff0005ff 	.word	0xff0005ff
 8001d60:	0005ffff 	.word	0x0005ffff
 8001d64:	08001519 	.word	0x08001519
 8001d68:	ffff0005 	.word	0xffff0005
 8001d6c:	02010000 	.word	0x02010000
 8001d70:	06050403 	.word	0x06050403
 8001d74:	00090807 	.word	0x00090807

08001d78 <HAL_ADC_ConvHalfCpltCallback>:
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001d78:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001d7a:	f003 021f 	and.w	r2, r3, #31
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d7e:	f3bf 8f4f 	dsb	sy
 8001d82:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d86:	480a      	ldr	r0, [pc, #40]	@ (8001db0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8001d88:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001d8a:	f8c0 325c 	str.w	r3, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001d8e:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8001d90:	1aca      	subs	r2, r1, r3
 8001d92:	2a00      	cmp	r2, #0
 8001d94:	dcf9      	bgt.n	8001d8a <HAL_ADC_ConvHalfCpltCallback+0x12>
 8001d96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d9a:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[0…BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)adcInput,
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcHalfComplete(&apipe, adcInput);
 8001d9e:	4805      	ldr	r0, [pc, #20]	@ (8001db4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001da0:	4902      	ldr	r1, [pc, #8]	@ (8001dac <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001da2:	6983      	ldr	r3, [r0, #24]
 8001da4:	f5a0 4060 	sub.w	r0, r0, #57344	@ 0xe000
 8001da8:	4718      	bx	r3
 8001daa:	bf00      	nop
 8001dac:	2406c0ac 	.word	0x2406c0ac
 8001db0:	e000ed00 	.word	0xe000ed00
 8001db4:	3800e17c 	.word	0x3800e17c

08001db8 <HAL_ADC_ConvCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001db8:	490d      	ldr	r1, [pc, #52]	@ (8001df0 <HAL_ADC_ConvCpltCallback+0x38>)
 8001dba:	f001 021f 	and.w	r2, r1, #31
 8001dbe:	f502 6300 	add.w	r3, r2, #2048	@ 0x800
  __ASM volatile ("dsb 0xF":::"memory");
 8001dc2:	f3bf 8f4f 	dsb	sy
 8001dc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001dca:	480a      	ldr	r0, [pc, #40]	@ (8001df4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001dcc:	4411      	add	r1, r2
 8001dce:	1aca      	subs	r2, r1, r3
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001dd0:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8001dd2:	2b00      	cmp	r3, #0
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001dd4:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
      } while ( op_size > 0 );
 8001dd8:	dcf9      	bgt.n	8001dce <HAL_ADC_ConvCpltCallback+0x16>
 8001dda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[BUFFER_SIZE…2*BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)&adcInput[BUFFER_SIZE],
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcComplete(&apipe, adcInput);
 8001de2:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <HAL_ADC_ConvCpltCallback+0x40>)
 8001de4:	4905      	ldr	r1, [pc, #20]	@ (8001dfc <HAL_ADC_ConvCpltCallback+0x44>)
 8001de6:	69c3      	ldr	r3, [r0, #28]
 8001de8:	f5a0 4060 	sub.w	r0, r0, #57344	@ 0xe000
 8001dec:	4718      	bx	r3
 8001dee:	bf00      	nop
 8001df0:	2406c8ac 	.word	0x2406c8ac
 8001df4:	e000ed00 	.word	0xe000ed00
 8001df8:	3800e17c 	.word	0x3800e17c
 8001dfc:	2406c0ac 	.word	0x2406c0ac

08001e00 <HAL_UART_RxCpltCallback>:
volatile unsigned long now = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

	if (huart == &huart2)
 8001e00:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_UART_RxCpltCallback+0x48>)
 8001e02:	4283      	cmp	r3, r0
 8001e04:	d000      	beq.n	8001e08 <HAL_UART_RxCpltCallback+0x8>
 8001e06:	4770      	bx	lr
	{
		char received = rxRecieve[0];
 8001e08:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <HAL_UART_RxCpltCallback+0x4c>)

		link.readUART(&link, received);
 8001e0a:	4811      	ldr	r0, [pc, #68]	@ (8001e50 <HAL_UART_RxCpltCallback+0x50>)
{
 8001e0c:	b510      	push	{r4, lr}
		char received = rxRecieve[0];
 8001e0e:	781c      	ldrb	r4, [r3, #0]
		link.readUART(&link, received);
 8001e10:	f8d0 30e8 	ldr.w	r3, [r0, #232]	@ 0xe8
 8001e14:	4621      	mov	r1, r4
 8001e16:	4798      	blx	r3

		UARTrxBuffer[uartRxIndex++] = received;
 8001e18:	4a0e      	ldr	r2, [pc, #56]	@ (8001e54 <HAL_UART_RxCpltCallback+0x54>)
 8001e1a:	490f      	ldr	r1, [pc, #60]	@ (8001e58 <HAL_UART_RxCpltCallback+0x58>)
 8001e1c:	7810      	ldrb	r0, [r2, #0]
 8001e1e:	1c43      	adds	r3, r0, #1
 8001e20:	540c      	strb	r4, [r1, r0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	7013      	strb	r3, [r2, #0]

		if (uartRxIndex >= UART_BUFFER_SIZE)
 8001e26:	061b      	lsls	r3, r3, #24
 8001e28:	d40a      	bmi.n	8001e40 <HAL_UART_RxCpltCallback+0x40>
		{
			uartRxIndex = 0;
		}

		testCounter++;
 8001e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8001e5c <HAL_UART_RxCpltCallback+0x5c>)

		HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4907      	ldr	r1, [pc, #28]	@ (8001e4c <HAL_UART_RxCpltCallback+0x4c>)
		testCounter++;
 8001e30:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 8001e32:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <HAL_UART_RxCpltCallback+0x48>)
		testCounter++;
 8001e34:	4413      	add	r3, r2
 8001e36:	6023      	str	r3, [r4, #0]
	}
}
 8001e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 8001e3c:	f006 be22 	b.w	8008a84 <HAL_UART_Receive_IT>
			uartRxIndex = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	7013      	strb	r3, [r2, #0]
 8001e44:	e7f1      	b.n	8001e2a <HAL_UART_RxCpltCallback+0x2a>
 8001e46:	bf00      	nop
 8001e48:	2406d308 	.word	0x2406d308
 8001e4c:	38000080 	.word	0x38000080
 8001e50:	38000090 	.word	0x38000090
 8001e54:	2406d0c4 	.word	0x2406d0c4
 8001e58:	38000000 	.word	0x38000000
 8001e5c:	2406d0c8 	.word	0x2406d0c8

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b530      	push	{r4, r5, lr}
 8001e62:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e64:	224c      	movs	r2, #76	@ 0x4c
 8001e66:	2100      	movs	r1, #0
 8001e68:	a80a      	add	r0, sp, #40	@ 0x28
 8001e6a:	f009 fc07 	bl	800b67c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e6e:	2220      	movs	r2, #32
 8001e70:	2100      	movs	r1, #0
 8001e72:	a802      	add	r0, sp, #8
 8001e74:	f009 fc02 	bl	800b67c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f004 fa13 	bl	80062a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001e7e:	4a26      	ldr	r2, [pc, #152]	@ (8001f18 <SystemClock_Config+0xb8>)
 8001e80:	2100      	movs	r1, #0
 8001e82:	4b26      	ldr	r3, [pc, #152]	@ (8001f1c <SystemClock_Config+0xbc>)
 8001e84:	9101      	str	r1, [sp, #4]
 8001e86:	6991      	ldr	r1, [r2, #24]
 8001e88:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8001e8c:	6191      	str	r1, [r2, #24]
 8001e8e:	6991      	ldr	r1, [r2, #24]
 8001e90:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 8001e94:	9101      	str	r1, [sp, #4]
 8001e96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e98:	f041 0101 	orr.w	r1, r1, #1
 8001e9c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ea8:	6993      	ldr	r3, [r2, #24]
 8001eaa:	0499      	lsls	r1, r3, #18
 8001eac:	d5fc      	bpl.n	8001ea8 <SystemClock_Config+0x48>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eae:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001eb0:	2200      	movs	r2, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb8:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001eba:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ebc:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001ebe:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ec0:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ec2:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001ec4:	951a      	str	r5, [sp, #104]	@ 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001ec6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eca:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ece:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ed0:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed2:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ed4:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ed6:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001eda:	2205      	movs	r2, #5
 8001edc:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee0:	f004 fa76 	bl	80063d0 <HAL_RCC_OscConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	b108      	cbz	r0, 8001eec <SystemClock_Config+0x8c>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eea:	e7fe      	b.n	8001eea <SystemClock_Config+0x8a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eec:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001eee:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ef4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef6:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef8:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001efa:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001efc:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001efe:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001f00:	e9cd 5405 	strd	r5, r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001f04:	e9cd 4307 	strd	r4, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f08:	f004 fdde 	bl	8006ac8 <HAL_RCC_ClockConfig>
 8001f0c:	b108      	cbz	r0, 8001f12 <SystemClock_Config+0xb2>
 8001f0e:	b672      	cpsid	i
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <SystemClock_Config+0xb0>
}
 8001f12:	b01f      	add	sp, #124	@ 0x7c
 8001f14:	bd30      	pop	{r4, r5, pc}
 8001f16:	bf00      	nop
 8001f18:	58024800 	.word	0x58024800
 8001f1c:	58000400 	.word	0x58000400

08001f20 <PeriphCommonClock_Config>:
{
 8001f20:	b500      	push	{lr}
 8001f22:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f24:	22b8      	movs	r2, #184	@ 0xb8
 8001f26:	2100      	movs	r1, #0
 8001f28:	a802      	add	r0, sp, #8
 8001f2a:	f009 fba7 	bl	800b67c <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001f2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001f32:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f34:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001f36:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f3a:	f005 f89f 	bl	800707c <HAL_RCCEx_PeriphCLKConfig>
 8001f3e:	b108      	cbz	r0, 8001f44 <PeriphCommonClock_Config+0x24>
 8001f40:	b672      	cpsid	i
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <PeriphCommonClock_Config+0x22>
}
 8001f44:	b031      	add	sp, #196	@ 0xc4
 8001f46:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f4a:	bf00      	nop

08001f4c <main>:
{
 8001f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001f50:	2400      	movs	r4, #0
{
 8001f52:	ed2d 8b02 	vpush	{d8}
 8001f56:	b099      	sub	sp, #100	@ 0x64
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001f58:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8001f5c:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  HAL_MPU_Disable();
 8001f60:	f002 fa58 	bl	8004414 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001f64:	f248 721f 	movw	r2, #34591	@ 0x871f
 8001f68:	f240 1301 	movw	r3, #257	@ 0x101
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f6c:	2101      	movs	r1, #1
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f6e:	a80f      	add	r0, sp, #60	@ 0x3c
  MPU_InitStruct.BaseAddress = 0x0;
 8001f70:	9410      	str	r4, [sp, #64]	@ 0x40
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f72:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001f76:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f7a:	f002 fa69 	bl	8004450 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f7e:	2004      	movs	r0, #4
 8001f80:	f002 fa56 	bl	8004430 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001f84:	4ab1      	ldr	r2, [pc, #708]	@ (800224c <main+0x300>)
 8001f86:	6953      	ldr	r3, [r2, #20]
 8001f88:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8001f8c:	d111      	bne.n	8001fb2 <main+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f92:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001f96:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001f9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f9e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001fa2:	6953      	ldr	r3, [r2, #20]
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001faa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001fae:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001fb2:	48a6      	ldr	r0, [pc, #664]	@ (800224c <main+0x300>)
 8001fb4:	6943      	ldr	r3, [r0, #20]
 8001fb6:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8001fba:	d124      	bne.n	8002006 <main+0xba>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001fbc:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001fc0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8001fc4:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001fc8:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001fcc:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001fd0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8001fd4:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001fd6:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001fda:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001fdc:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8001fe0:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001fe2:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	d1f8      	bne.n	8001fdc <main+0x90>
    } while(sets-- != 0U);
 8001fea:	3c20      	subs	r4, #32
 8001fec:	f114 0f20 	cmn.w	r4, #32
 8001ff0:	d1f1      	bne.n	8001fd6 <main+0x8a>
 8001ff2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001ff6:	6943      	ldr	r3, [r0, #20]
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffc:	6143      	str	r3, [r0, #20]
 8001ffe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002002:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002006:	4d92      	ldr	r5, [pc, #584]	@ (8002250 <main+0x304>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	2400      	movs	r4, #0
  HAL_Init();
 800200a:	f001 fa19 	bl	8003440 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2601      	movs	r6, #1
  SystemClock_Config();
 8002010:	f7ff ff26 	bl	8001e60 <SystemClock_Config>
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002014:	f44f 679c 	mov.w	r7, #1248	@ 0x4e0
  PeriphCommonClock_Config();
 8002018:	f7ff ff82 	bl	8001f20 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	9413      	str	r4, [sp, #76]	@ 0x4c
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800201e:	4622      	mov	r2, r4
 8002020:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002024:	488b      	ldr	r0, [pc, #556]	@ (8002254 <main+0x308>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002026:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 800202a:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800202e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800203a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	9305      	str	r3, [sp, #20]
 8002044:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002046:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8002052:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	9306      	str	r3, [sp, #24]
 800205c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800205e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8002062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002066:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800206a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800206e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002072:	9307      	str	r3, [sp, #28]
 8002074:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8002082:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	9308      	str	r3, [sp, #32]
 800208c:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800208e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8002092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002096:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800209a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800209e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80020a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80020b2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80020bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020be:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80020c2:	f043 0308 	orr.w	r3, r3, #8
 80020c6:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80020ca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80020d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80020d6:	f004 f8e1 	bl	800629c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 80020da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80020de:	a90f      	add	r1, sp, #60	@ 0x3c
 80020e0:	485c      	ldr	r0, [pc, #368]	@ (8002254 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pin = LED_Pin;
 80020e4:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	9610      	str	r6, [sp, #64]	@ 0x40
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f003 fed1 	bl	8005e90 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ee:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80020f2:	4622      	mov	r2, r4
 80020f4:	4621      	mov	r1, r4
 80020f6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020f8:	4333      	orrs	r3, r6
 80020fa:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 80020fe:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc1.Instance = ADC1;
 8002102:	4d55      	ldr	r5, [pc, #340]	@ (8002258 <main+0x30c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002104:	4033      	ands	r3, r6
 8002106:	9304      	str	r3, [sp, #16]
 8002108:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800210a:	f002 f923 	bl	8004354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800210e:	200b      	movs	r0, #11
 8002110:	f002 f95c 	bl	80043cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002114:	4622      	mov	r2, r4
 8002116:	4621      	mov	r1, r4
 8002118:	200c      	movs	r0, #12
 800211a:	f002 f91b 	bl	8004354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800211e:	200c      	movs	r0, #12
 8002120:	f002 f954 	bl	80043cc <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8002124:	4b4d      	ldr	r3, [pc, #308]	@ (800225c <main+0x310>)
  ADC_MultiModeTypeDef multimode = {0};
 8002126:	940c      	str	r4, [sp, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002128:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 800212a:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800212c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  ADC_ChannelConfTypeDef sConfig = {0};
 8002130:	9415      	str	r4, [sp, #84]	@ 0x54
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002132:	606b      	str	r3, [r5, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002138:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800213a:	772c      	strb	r4, [r5, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 800213c:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.NbrOfConversion = 1;
 8002140:	61ae      	str	r6, [r5, #24]
  hadc1.Init.Oversampling.Ratio = 1;
 8002142:	63ee      	str	r6, [r5, #60]	@ 0x3c
  ADC_ChannelConfTypeDef sConfig = {0};
 8002144:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8002148:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
 800214c:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002150:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002154:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  ADC_MultiModeTypeDef multimode = {0};
 8002158:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800215c:	e9c5 7309 	strd	r7, r3, [r5, #36]	@ 0x24
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002160:	2408      	movs	r4, #8
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002162:	2703      	movs	r7, #3
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002164:	612c      	str	r4, [r5, #16]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002166:	62ef      	str	r7, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002168:	f001 ff18 	bl	8003f9c <HAL_ADC_Init>
 800216c:	b108      	cbz	r0, 8002172 <main+0x226>
  __ASM volatile ("cpsid i" : : : "memory");
 800216e:	b672      	cpsid	i
  while (1)
 8002170:	e7fe      	b.n	8002170 <main+0x224>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002172:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002174:	a90c      	add	r1, sp, #48	@ 0x30
 8002176:	4628      	mov	r0, r5
 8002178:	f002 f878 	bl	800426c <HAL_ADCEx_MultiModeConfigChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	b108      	cbz	r0, 8002184 <main+0x238>
 8002180:	b672      	cpsid	i
  while (1)
 8002182:	e7fe      	b.n	8002182 <main+0x236>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002184:	4936      	ldr	r1, [pc, #216]	@ (8002260 <main+0x314>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002186:	4628      	mov	r0, r5
  sConfig.Offset = 0;
 8002188:	9314      	str	r3, [sp, #80]	@ 0x50
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800218a:	2505      	movs	r5, #5
  sConfig.OffsetSignedSaturation = DISABLE;
 800218c:	f88d 3055 	strb.w	r3, [sp, #85]	@ 0x55
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002190:	2306      	movs	r3, #6
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002192:	f04f 0804 	mov.w	r8, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002196:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800219a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800219e:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021a0:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021a4:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a8:	f001 fb1c 	bl	80037e4 <HAL_ADC_ConfigChannel>
 80021ac:	b108      	cbz	r0, 80021b2 <main+0x266>
 80021ae:	b672      	cpsid	i
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <main+0x264>
  htim8.Instance = TIM8;
 80021b2:	4d2c      	ldr	r5, [pc, #176]	@ (8002264 <main+0x318>)
  htim8.Init.Prescaler = 50-1;
 80021b4:	2331      	movs	r3, #49	@ 0x31
 80021b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002268 <main+0x31c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b8:	900e      	str	r0, [sp, #56]	@ 0x38
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ba:	60a8      	str	r0, [r5, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021bc:	61a8      	str	r0, [r5, #24]
  htim8.Init.Prescaler = 50-1;
 80021be:	e9c5 2300 	strd	r2, r3, [r5]
  htim8.Init.Period = 100-1;
 80021c2:	2363      	movs	r3, #99	@ 0x63
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c4:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 80021c8:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021cc:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  htim8.Init.RepetitionCounter = 0;
 80021d0:	e9c5 0004 	strd	r0, r0, [r5, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021d4:	4628      	mov	r0, r5
  htim8.Init.Period = 100-1;
 80021d6:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021d8:	f006 fa3e 	bl	8008658 <HAL_TIM_Base_Init>
 80021dc:	b108      	cbz	r0, 80021e2 <main+0x296>
 80021de:	b672      	cpsid	i
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <main+0x294>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e2:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021e6:	a90f      	add	r1, sp, #60	@ 0x3c
 80021e8:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ea:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021ee:	f006 fb27 	bl	8008840 <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	b108      	cbz	r0, 80021fa <main+0x2ae>
 80021f6:	b672      	cpsid	i
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <main+0x2ac>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fa:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021fe:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002200:	a90c      	add	r1, sp, #48	@ 0x30
 8002202:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002204:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002206:	f006 fbe3 	bl	80089d0 <HAL_TIMEx_MasterConfigSynchronization>
 800220a:	4601      	mov	r1, r0
 800220c:	b108      	cbz	r0, 8002212 <main+0x2c6>
 800220e:	b672      	cpsid	i
  while (1)
 8002210:	e7fe      	b.n	8002210 <main+0x2c4>
  DAC_ChannelConfTypeDef sConfig = {0};
 8002212:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 8002214:	4d15      	ldr	r5, [pc, #84]	@ (800226c <main+0x320>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8002216:	a80f      	add	r0, sp, #60	@ 0x3c
 8002218:	f009 fa30 	bl	800b67c <memset>
  hdac1.Instance = DAC1;
 800221c:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <main+0x324>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800221e:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 8002220:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002222:	f002 f945 	bl	80044b0 <HAL_DAC_Init>
 8002226:	4602      	mov	r2, r0
 8002228:	b108      	cbz	r0, 800222e <main+0x2e2>
 800222a:	b672      	cpsid	i
  while (1)
 800222c:	e7fe      	b.n	800222c <main+0x2e0>
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800222e:	231e      	movs	r3, #30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002230:	4628      	mov	r0, r5
 8002232:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002234:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8002236:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002238:	9213      	str	r2, [sp, #76]	@ 0x4c
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800223a:	e9cd 2611 	strd	r2, r6, [sp, #68]	@ 0x44
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800223e:	f002 fa1b 	bl	8004678 <HAL_DAC_ConfigChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	b1b0      	cbz	r0, 8002274 <main+0x328>
 8002246:	b672      	cpsid	i
  while (1)
 8002248:	e7fe      	b.n	8002248 <main+0x2fc>
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00
 8002250:	58024400 	.word	0x58024400
 8002254:	58020800 	.word	0x58020800
 8002258:	2406d580 	.word	0x2406d580
 800225c:	40022000 	.word	0x40022000
 8002260:	43210000 	.word	0x43210000
 8002264:	2406d430 	.word	0x2406d430
 8002268:	40010400 	.word	0x40010400
 800226c:	2406d4f4 	.word	0x2406d4f4
 8002270:	40007400 	.word	0x40007400
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002274:	483c      	ldr	r0, [pc, #240]	@ (8002368 <main+0x41c>)
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002276:	2210      	movs	r2, #16
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002278:	a90f      	add	r1, sp, #60	@ 0x3c
  SdramTiming.SelfRefreshTime = 4;
 800227a:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800227e:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002280:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002282:	2240      	movs	r2, #64	@ 0x40
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8002284:	60c4      	str	r4, [r0, #12]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8002286:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800228a:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800228c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  SdramTiming.WriteRecoveryTime = 3;
 8002290:	9713      	str	r7, [sp, #76]	@ 0x4c
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8002292:	6284      	str	r4, [r0, #40]	@ 0x28
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002294:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002298:	6182      	str	r2, [r0, #24]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800229a:	e9c0 3601 	strd	r3, r6, [r0, #4]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800229e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022a2:	6203      	str	r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	930f      	str	r3, [sp, #60]	@ 0x3c
  SdramTiming.RCDDelay = 2;
 80022a8:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  SdramTiming.ExitSelfRefreshDelay = 7;
 80022ac:	2307      	movs	r3, #7
 80022ae:	9310      	str	r3, [sp, #64]	@ 0x40
  SdramTiming.RowCycleDelay = 7;
 80022b0:	9312      	str	r3, [sp, #72]	@ 0x48
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80022b2:	4b2e      	ldr	r3, [pc, #184]	@ (800236c <main+0x420>)
 80022b4:	6003      	str	r3, [r0, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80022b6:	f006 f9a5 	bl	8008604 <HAL_SDRAM_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	b108      	cbz	r0, 80022c2 <main+0x376>
 80022be:	b672      	cpsid	i
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <main+0x374>
  huart1.Instance = USART1;
 80022c2:	482b      	ldr	r0, [pc, #172]	@ (8002370 <main+0x424>)
  huart1.Init.BaudRate = 115200;
 80022c4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Instance = USART1;
 80022c8:	4c2a      	ldr	r4, [pc, #168]	@ (8002374 <main+0x428>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022ca:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 80022cc:	6004      	str	r4, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80022ce:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022da:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022de:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022e2:	f007 fc73 	bl	8009bcc <HAL_UART_Init>
 80022e6:	b108      	cbz	r0, 80022ec <main+0x3a0>
 80022e8:	b672      	cpsid	i
  while (1)
 80022ea:	e7fe      	b.n	80022ea <main+0x39e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ec:	2100      	movs	r1, #0
 80022ee:	4820      	ldr	r0, [pc, #128]	@ (8002370 <main+0x424>)
 80022f0:	f007 fcc4 	bl	8009c7c <HAL_UARTEx_SetTxFifoThreshold>
 80022f4:	4601      	mov	r1, r0
 80022f6:	b108      	cbz	r0, 80022fc <main+0x3b0>
 80022f8:	b672      	cpsid	i
  while (1)
 80022fa:	e7fe      	b.n	80022fa <main+0x3ae>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022fc:	481c      	ldr	r0, [pc, #112]	@ (8002370 <main+0x424>)
 80022fe:	f007 fcff 	bl	8009d00 <HAL_UARTEx_SetRxFifoThreshold>
 8002302:	b108      	cbz	r0, 8002308 <main+0x3bc>
 8002304:	b672      	cpsid	i
  while (1)
 8002306:	e7fe      	b.n	8002306 <main+0x3ba>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002308:	4819      	ldr	r0, [pc, #100]	@ (8002370 <main+0x424>)
 800230a:	f007 fc99 	bl	8009c40 <HAL_UARTEx_DisableFifoMode>
 800230e:	4603      	mov	r3, r0
 8002310:	b108      	cbz	r0, 8002316 <main+0x3ca>
 8002312:	b672      	cpsid	i
  while (1)
 8002314:	e7fe      	b.n	8002314 <main+0x3c8>
  huart2.Instance = USART2;
 8002316:	4c18      	ldr	r4, [pc, #96]	@ (8002378 <main+0x42c>)
  huart2.Init.BaudRate = 115200;
 8002318:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart2.Instance = USART2;
 800231c:	4817      	ldr	r0, [pc, #92]	@ (800237c <main+0x430>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 800231e:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8002320:	e884 000b 	stmia.w	r4, {r0, r1, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002324:	4620      	mov	r0, r4
  huart2.Init.Parity = UART_PARITY_NONE;
 8002326:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232a:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800232e:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002332:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002336:	f007 fc49 	bl	8009bcc <HAL_UART_Init>
 800233a:	4601      	mov	r1, r0
 800233c:	b108      	cbz	r0, 8002342 <main+0x3f6>
 800233e:	b672      	cpsid	i
  while (1)
 8002340:	e7fe      	b.n	8002340 <main+0x3f4>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002342:	4620      	mov	r0, r4
 8002344:	f007 fc9a 	bl	8009c7c <HAL_UARTEx_SetTxFifoThreshold>
 8002348:	4601      	mov	r1, r0
 800234a:	b108      	cbz	r0, 8002350 <main+0x404>
 800234c:	b672      	cpsid	i
  while (1)
 800234e:	e7fe      	b.n	800234e <main+0x402>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002350:	4620      	mov	r0, r4
 8002352:	f007 fcd5 	bl	8009d00 <HAL_UARTEx_SetRxFifoThreshold>
 8002356:	b108      	cbz	r0, 800235c <main+0x410>
 8002358:	b672      	cpsid	i
  while (1)
 800235a:	e7fe      	b.n	800235a <main+0x40e>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800235c:	4620      	mov	r0, r4
 800235e:	f007 fc6f 	bl	8009c40 <HAL_UARTEx_DisableFifoMode>
 8002362:	b168      	cbz	r0, 8002380 <main+0x434>
 8002364:	b672      	cpsid	i
  while (1)
 8002366:	e7fe      	b.n	8002366 <main+0x41a>
 8002368:	2406d2d4 	.word	0x2406d2d4
 800236c:	52004140 	.word	0x52004140
 8002370:	2406d39c 	.word	0x2406d39c
 8002374:	40011000 	.word	0x40011000
 8002378:	2406d308 	.word	0x2406d308
 800237c:	40004400 	.word	0x40004400
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002380:	4baf      	ldr	r3, [pc, #700]	@ (8002640 <main+0x6f4>)
 8002382:	695a      	ldr	r2, [r3, #20]
 8002384:	f412 3280 	ands.w	r2, r2, #65536	@ 0x10000
 8002388:	d123      	bne.n	80023d2 <main+0x486>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800238a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800238e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002392:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002396:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800239a:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800239e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80023a2:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023a4:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80023a8:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023aa:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
      } while (ways-- != 0U);
 80023ae:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023b0:	f8c3 6260 	str.w	r6, [r3, #608]	@ 0x260
      } while (ways-- != 0U);
 80023b4:	d2f9      	bcs.n	80023aa <main+0x45e>
    } while(sets-- != 0U);
 80023b6:	3a20      	subs	r2, #32
 80023b8:	f112 0f20 	cmn.w	r2, #32
 80023bc:	d1f2      	bne.n	80023a4 <main+0x458>
 80023be:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80023c8:	615a      	str	r2, [r3, #20]
 80023ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023ce:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80023d2:	4b9b      	ldr	r3, [pc, #620]	@ (8002640 <main+0x6f4>)
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 80023da:	d111      	bne.n	8002400 <main+0x4b4>
  __ASM volatile ("dsb 0xF":::"memory");
 80023dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023e0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80023e4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80023e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023ec:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80023f6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80023f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023fc:	f3bf 8f6f 	isb	sy
  dctm_pool_init();
 8002400:	f7ff f80c 	bl	800141c <dctm_pool_init>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 8002404:	2400      	movs	r4, #0
  static_pool_init();
 8002406:	f7ff f815 	bl	8001434 <static_pool_init>
  initDataLink(&link);
 800240a:	488e      	ldr	r0, [pc, #568]	@ (8002644 <main+0x6f8>)
 800240c:	f7ff fc70 	bl	8001cf0 <initDataLink>
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 8002410:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002414:	488c      	ldr	r0, [pc, #560]	@ (8002648 <main+0x6fc>)
 8002416:	f007 fd77 	bl	8009f08 <arm_rfft_fast_init_f32>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800241a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800241e:	2100      	movs	r1, #0
 8002420:	488a      	ldr	r0, [pc, #552]	@ (800264c <main+0x700>)
 8002422:	f001 fec7 	bl	80041b4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcInput, BUFFER_SIZE*2);
 8002426:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800242a:	4989      	ldr	r1, [pc, #548]	@ (8002650 <main+0x704>)
 800242c:	4887      	ldr	r0, [pc, #540]	@ (800264c <main+0x700>)
 800242e:	f001 fc41 	bl	8003cb4 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 8002432:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002436:	4a87      	ldr	r2, [pc, #540]	@ (8002654 <main+0x708>)
 8002438:	4621      	mov	r1, r4
 800243a:	4887      	ldr	r0, [pc, #540]	@ (8002658 <main+0x70c>)
 800243c:	9400      	str	r4, [sp, #0]
 800243e:	f002 f84d 	bl	80044dc <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 8002442:	4886      	ldr	r0, [pc, #536]	@ (800265c <main+0x710>)
 8002444:	f006 f9ae 	bl	80087a4 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 8002448:	2201      	movs	r2, #1
 800244a:	4985      	ldr	r1, [pc, #532]	@ (8002660 <main+0x714>)
 800244c:	4885      	ldr	r0, [pc, #532]	@ (8002664 <main+0x718>)
 800244e:	f006 fb19 	bl	8008a84 <HAL_UART_Receive_IT>
  nodes[0] = &fx_handle_0;
 8002452:	4d85      	ldr	r5, [pc, #532]	@ (8002668 <main+0x71c>)
 8002454:	4a85      	ldr	r2, [pc, #532]	@ (800266c <main+0x720>)
  nodes[1] = &fx_handle_1;
 8002456:	4b86      	ldr	r3, [pc, #536]	@ (8002670 <main+0x724>)
  pipeInit(&apipe);
 8002458:	46aa      	mov	sl, r5
  nodes[2] = &fx_handle_2;
 800245a:	4986      	ldr	r1, [pc, #536]	@ (8002674 <main+0x728>)
  nodes[1] = &fx_handle_1;
 800245c:	e9c5 2300 	strd	r2, r3, [r5]
  nodes[3] = &fx_handle_3;
 8002460:	4b85      	ldr	r3, [pc, #532]	@ (8002678 <main+0x72c>)
  nodes[4] = &fx_handle_4;
 8002462:	4a86      	ldr	r2, [pc, #536]	@ (800267c <main+0x730>)
  nodes[3] = &fx_handle_3;
 8002464:	e9c5 1302 	strd	r1, r3, [r5, #8]
  nodes[5] = &fx_handle_5;
 8002468:	4b85      	ldr	r3, [pc, #532]	@ (8002680 <main+0x734>)
  nodes[6] = &fx_handle_6;
 800246a:	4986      	ldr	r1, [pc, #536]	@ (8002684 <main+0x738>)
  nodes[5] = &fx_handle_5;
 800246c:	e9c5 2304 	strd	r2, r3, [r5, #16]
  nodes[7] = &fx_handle_7;
 8002470:	4b85      	ldr	r3, [pc, #532]	@ (8002688 <main+0x73c>)
  nodes[8] = &fx_handle_8;
 8002472:	4a86      	ldr	r2, [pc, #536]	@ (800268c <main+0x740>)
  nodes[7] = &fx_handle_7;
 8002474:	e9c5 1306 	strd	r1, r3, [r5, #24]
  nodes[9] = &fx_handle_9;
 8002478:	4b85      	ldr	r3, [pc, #532]	@ (8002690 <main+0x744>)
 800247a:	e9c5 2308 	strd	r2, r3, [r5, #32]
  srand(HAL_GetTick());  // seed the PRNG
 800247e:	f001 f81b 	bl	80034b8 <HAL_GetTick>
 8002482:	f008 ff0f 	bl	800b2a4 <srand>
  pipeInit(&apipe);
 8002486:	4883      	ldr	r0, [pc, #524]	@ (8002694 <main+0x748>)
 8002488:	f000 fc20 	bl	8002ccc <pipeInit>
	  nodes[i]->type = FX_NULL;
 800248c:	2205      	movs	r2, #5
  pipeInit(&apipe);
 800248e:	462b      	mov	r3, r5
  for (int i = 0 ; i< MAX_NODES ; ++i)
 8002490:	3401      	adds	r4, #1
	  nodes[i]->type = FX_NULL;
 8002492:	f853 1b04 	ldr.w	r1, [r3], #4
  for (int i = 0 ; i< MAX_NODES ; ++i)
 8002496:	2c0a      	cmp	r4, #10
	  nodes[i]->type = FX_NULL;
 8002498:	700a      	strb	r2, [r1, #0]
  for (int i = 0 ; i< MAX_NODES ; ++i)
 800249a:	d1f9      	bne.n	8002490 <main+0x544>
  nodes[0]->type = FX_SUPRO;
 800249c:	f8da 3000 	ldr.w	r3, [sl]
 80024a0:	2002      	movs	r0, #2
  nodes[1]->type = FX_CABINET;
 80024a2:	2201      	movs	r2, #1
  for (int i = 0 ; i< MAX_NODES ; ++i) { // i < MAX_NODES
 80024a4:	2400      	movs	r4, #0
  nodes[0]->type = FX_SUPRO;
 80024a6:	7018      	strb	r0, [r3, #0]
  nodes[1]->type = FX_CABINET;
 80024a8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80024ac:	f8df a1b8 	ldr.w	sl, [pc, #440]	@ 8002668 <main+0x71c>
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	4656      	mov	r6, sl
		 fx_init[nodes[i]->type](nodes[i]);
 80024b4:	f856 0b04 	ldr.w	r0, [r6], #4
  for (int i = 0 ; i< MAX_NODES ; ++i) { // i < MAX_NODES
 80024b8:	3401      	adds	r4, #1
		 fx_init[nodes[i]->type](nodes[i]);
 80024ba:	4a77      	ldr	r2, [pc, #476]	@ (8002698 <main+0x74c>)
 80024bc:	7803      	ldrb	r3, [r0, #0]
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	4798      	blx	r3
  for (int i = 0 ; i< MAX_NODES ; ++i) { // i < MAX_NODES
 80024c4:	2c0a      	cmp	r4, #10
 80024c6:	d1f5      	bne.n	80024b4 <main+0x568>
  link.nodeCount = 2;
 80024c8:	4c5e      	ldr	r4, [pc, #376]	@ (8002644 <main+0x6f8>)
 80024ca:	2302      	movs	r3, #2
 80024cc:	4e73      	ldr	r6, [pc, #460]	@ (800269c <main+0x750>)
 80024ce:	f884 305a 	strb.w	r3, [r4, #90]	@ 0x5a
  link.nodes[3].inputs[0] = 2;
 80024d2:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  link.nodes[4].nodeId = 4;
 80024d6:	f240 5304 	movw	r3, #1284	@ 0x504
	     arm_scale_f32(apipe.processBuffer, 0.01, apipe.processBuffer, BUFFER_SIZE);
 80024da:	ed9f 8a71 	vldr	s16, [pc, #452]	@ 80026a0 <main+0x754>
 80024de:	f5a6 4920 	sub.w	r9, r6, #40960	@ 0xa000
  link.nodes[4].nodeId = 4;
 80024e2:	84a3      	strh	r3, [r4, #36]	@ 0x24
		 apipe.loadProcess(&apipe);
 80024e4:	f5a6 4860 	sub.w	r8, r6, #57344	@ 0xe000
  link.processOrder[4] = 4;
 80024e8:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
  link.nodes[0].numInputs = 1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	70a3      	strb	r3, [r4, #2]
  link.nodes[1].numInputs = 1;
 80024f0:	72e3      	strb	r3, [r4, #11]
  link.nodes[2].numInputs = 1;
 80024f2:	7523      	strb	r3, [r4, #20]
  link.nodes[2].inputs[0] = 1;
 80024f4:	7623      	strb	r3, [r4, #24]
  link.nodes[3].numInputs = 1;
 80024f6:	7763      	strb	r3, [r4, #29]
  link.nodes[4].numInputs = 1;
 80024f8:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
  link.nodes[5].numInputs = 1;
 80024fc:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
  link.nodes[1].inputs[0] = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	73e3      	strb	r3, [r4, #15]
  link.needsRefresh = 0;
 8002504:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
  link.nodes[0].nodeId = 0;
 8002508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800250c:	8023      	strh	r3, [r4, #0]
  link.nodes[0].inputs[0] = 254;
 800250e:	23fe      	movs	r3, #254	@ 0xfe
 8002510:	71a3      	strb	r3, [r4, #6]
  link.nodes[1].nodeId = 1;
 8002512:	f240 1301 	movw	r3, #257	@ 0x101
 8002516:	f8a4 3009 	strh.w	r3, [r4, #9]
  link.nodes[2].nodeId = 2;
 800251a:	f240 5302 	movw	r3, #1282	@ 0x502
 800251e:	8263      	strh	r3, [r4, #18]
  link.nodes[3].nodeId = 3;
 8002520:	f240 5303 	movw	r3, #1283	@ 0x503
 8002524:	f8a4 301b 	strh.w	r3, [r4, #27]
  link.nodes[4].inputs[0] = 3;
 8002528:	2303      	movs	r3, #3
 800252a:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  link.nodes[5].nodeId = 5;
 800252e:	f240 5305 	movw	r3, #1285	@ 0x505
 8002532:	f8a4 302d 	strh.w	r3, [r4, #45]	@ 0x2d
  link.nodes[5].inputs[0] = 4;
 8002536:	2304      	movs	r3, #4
 8002538:	f884 3033 	strb.w	r3, [r4, #51]	@ 0x33
  link.processOrder[0] = 0;
 800253c:	4b59      	ldr	r3, [pc, #356]	@ (80026a4 <main+0x758>)
 800253e:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
	  if (apipe.bufferReady)
 8002542:	7d73      	ldrb	r3, [r6, #21]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d05f      	beq.n	8002608 <main+0x6bc>
		 apipe.loadProcess(&apipe);
 8002548:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800254a:	4640      	mov	r0, r8
 800254c:	4798      	blx	r3
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800254e:	2200      	movs	r2, #0
 8002550:	2108      	movs	r1, #8
 8002552:	4855      	ldr	r0, [pc, #340]	@ (80026a8 <main+0x75c>)
 8002554:	f003 fea2 	bl	800629c <HAL_GPIO_WritePin>
		if(!link.needsRefresh)
 8002558:	f894 70e6 	ldrb.w	r7, [r4, #230]	@ 0xe6
 800255c:	2f00      	cmp	r7, #0
 800255e:	d055      	beq.n	800260c <main+0x6c0>
	     arm_scale_f32(apipe.processBuffer, 0.01, apipe.processBuffer, BUFFER_SIZE);
 8002560:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8002564:	eeb0 0a48 	vmov.f32	s0, s16
		 apipe.updateDACOutput(&apipe, dacOutput);
 8002568:	4f3a      	ldr	r7, [pc, #232]	@ (8002654 <main+0x708>)
	     arm_scale_f32(apipe.processBuffer, 0.01, apipe.processBuffer, BUFFER_SIZE);
 800256a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800256e:	4608      	mov	r0, r1
 8002570:	f008 fabc 	bl	800aaec <arm_scale_f32>
		 arm_copy_f32(apipe.processBuffer, apipe.outBuffer, BUFFER_SIZE);
 8002574:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002578:	e9d9 1001 	ldrd	r1, r0, [r9, #4]
 800257c:	f007 fc94 	bl	8009ea8 <arm_copy_f32>
		 apipe.updateDACOutput(&apipe, dacOutput);
 8002580:	6a33      	ldr	r3, [r6, #32]
 8002582:	4640      	mov	r0, r8
 8002584:	4639      	mov	r1, r7
 8002586:	4798      	blx	r3
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002588:	f007 021f 	and.w	r2, r7, #31
 800258c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
  __ASM volatile ("dsb 0xF":::"memory");
 8002590:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002594:	492a      	ldr	r1, [pc, #168]	@ (8002640 <main+0x6f4>)
 8002596:	3a20      	subs	r2, #32
 8002598:	f8c1 7268 	str.w	r7, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800259c:	3720      	adds	r7, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800259e:	2a00      	cmp	r2, #0
 80025a0:	dcf9      	bgt.n	8002596 <main+0x64a>
 80025a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025a6:	f3bf 8f6f 	isb	sy
		 if (link.needsRefresh == 1)
 80025aa:	f894 30e6 	ldrb.w	r3, [r4, #230]	@ 0xe6
		 apipe.bufferReady = false;
 80025ae:	2700      	movs	r7, #0
		 if (link.needsRefresh == 1)
 80025b0:	2b01      	cmp	r3, #1
		 apipe.bufferReady = false;
 80025b2:	7577      	strb	r7, [r6, #21]
		 if (link.needsRefresh == 1)
 80025b4:	d1c5      	bne.n	8002542 <main+0x5f6>
			 topoSort(&link, order);
 80025b6:	46ab      	mov	fp, r5
 80025b8:	493c      	ldr	r1, [pc, #240]	@ (80026ac <main+0x760>)
 80025ba:	4822      	ldr	r0, [pc, #136]	@ (8002644 <main+0x6f8>)
			 link.needsRefresh = 0;
 80025bc:	f884 70e6 	strb.w	r7, [r4, #230]	@ 0xe6
			 topoSort(&link, order);
 80025c0:	f7ff f8e4 	bl	800178c <topoSort>
				 nodes[i]->clean(nodes[i]);
 80025c4:	f85b 0b04 	ldr.w	r0, [fp], #4
			 for (int i = 0 ; i< 6 ; i++)
 80025c8:	3701      	adds	r7, #1
				 nodes[i]->clean(nodes[i]);
 80025ca:	6883      	ldr	r3, [r0, #8]
 80025cc:	4798      	blx	r3
			 for (int i = 0 ; i< 6 ; i++)
 80025ce:	2f06      	cmp	r7, #6
 80025d0:	d1f8      	bne.n	80025c4 <main+0x678>
			 dctm_pool_init();
 80025d2:	f7fe ff23 	bl	800141c <dctm_pool_init>
			 static_pool_init();
 80025d6:	f8df b06c 	ldr.w	fp, [pc, #108]	@ 8002644 <main+0x6f8>
 80025da:	f7fe ff2b 	bl	8001434 <static_pool_init>
			 for (int i = 0 ; i < 6  ; i++)
 80025de:	2700      	movs	r7, #0
 80025e0:	f8cd a00c 	str.w	sl, [sp, #12]
 80025e4:	46aa      	mov	sl, r5
				 nodes[i]->type = link.nodes[i].effectId;
 80025e6:	f89b 2001 	ldrb.w	r2, [fp, #1]
			 for (int i = 0 ; i < 6  ; i++)
 80025ea:	3701      	adds	r7, #1
				 nodes[i]->type = link.nodes[i].effectId;
 80025ec:	f85a 0b04 	ldr.w	r0, [sl], #4
			 for (int i = 0 ; i < 6  ; i++)
 80025f0:	f10b 0b09 	add.w	fp, fp, #9
				 fx_init[nodes[i]->type](nodes[i]);
 80025f4:	4b28      	ldr	r3, [pc, #160]	@ (8002698 <main+0x74c>)
				 nodes[i]->type = link.nodes[i].effectId;
 80025f6:	7002      	strb	r2, [r0, #0]
				 fx_init[nodes[i]->type](nodes[i]);
 80025f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025fc:	4790      	blx	r2
			 for (int i = 0 ; i < 6  ; i++)
 80025fe:	2f06      	cmp	r7, #6
 8002600:	d1f1      	bne.n	80025e6 <main+0x69a>
 8002602:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8002606:	e79c      	b.n	8002542 <main+0x5f6>
	      __WFI();
 8002608:	bf30      	wfi
 800260a:	e79a      	b.n	8002542 <main+0x5f6>
 800260c:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 80026b0 <main+0x764>
 8002610:	e010      	b.n	8002634 <main+0x6e8>
				apipe.primeProcess(&apipe, link.nodes[link.processOrder[i]].inputs[0], link.processOrder[i]);
 8002612:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8002616:	4640      	mov	r0, r8
 8002618:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
			 for (int i = 0 ; i < link.nodeCount ; i++) // i < MAX_NODES
 800261a:	3701      	adds	r7, #1
				apipe.primeProcess(&apipe, link.nodes[link.processOrder[i]].inputs[0], link.processOrder[i]);
 800261c:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 8002620:	4421      	add	r1, r4
 8002622:	7989      	ldrb	r1, [r1, #6]
 8002624:	4798      	blx	r3
				nodes[link.processOrder[i]]->process(nodes[link.processOrder[i]], &apipe);
 8002626:	f89b 3000 	ldrb.w	r3, [fp]
 800262a:	4641      	mov	r1, r8
 800262c:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8002630:	6843      	ldr	r3, [r0, #4]
 8002632:	4798      	blx	r3
			 for (int i = 0 ; i < link.nodeCount ; i++) // i < MAX_NODES
 8002634:	f894 305a 	ldrb.w	r3, [r4, #90]	@ 0x5a
 8002638:	42bb      	cmp	r3, r7
 800263a:	dcea      	bgt.n	8002612 <main+0x6c6>
 800263c:	e790      	b.n	8002560 <main+0x614>
 800263e:	bf00      	nop
 8002640:	e000ed00 	.word	0xe000ed00
 8002644:	38000090 	.word	0x38000090
 8002648:	2406d0ac 	.word	0x2406d0ac
 800264c:	2406d580 	.word	0x2406d580
 8002650:	2406c0ac 	.word	0x2406c0ac
 8002654:	2406b0ac 	.word	0x2406b0ac
 8002658:	2406d4f4 	.word	0x2406d4f4
 800265c:	2406d430 	.word	0x2406d430
 8002660:	38000080 	.word	0x38000080
 8002664:	2406d308 	.word	0x2406d308
 8002668:	2406d0cc 	.word	0x2406d0cc
 800266c:	2406d2a4 	.word	0x2406d2a4
 8002670:	2406d274 	.word	0x2406d274
 8002674:	2406d244 	.word	0x2406d244
 8002678:	2406d214 	.word	0x2406d214
 800267c:	2406d1e4 	.word	0x2406d1e4
 8002680:	2406d1b4 	.word	0x2406d1b4
 8002684:	2406d184 	.word	0x2406d184
 8002688:	2406d154 	.word	0x2406d154
 800268c:	2406d124 	.word	0x2406d124
 8002690:	2406d0f4 	.word	0x2406d0f4
 8002694:	3800017c 	.word	0x3800017c
 8002698:	24000000 	.word	0x24000000
 800269c:	3800e17c 	.word	0x3800e17c
 80026a0:	3c23d70a 	.word	0x3c23d70a
 80026a4:	03020100 	.word	0x03020100
 80026a8:	58020800 	.word	0x58020800
 80026ac:	38000084 	.word	0x38000084
 80026b0:	3800016b 	.word	0x3800016b

080026b4 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80026b4:	b672      	cpsid	i
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <Error_Handler+0x2>

080026b8 <partitioned_fir_convolution_fft>:
__attribute__((section(".dtcm"), aligned(32))) float zeropad[FFT_SIZE];
float fftOut[FFT_SIZE];


void partitioned_fir_convolution_fft(pipe *pipe, fir_t *fir, float* overlap_state_buf )
{
 80026b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	float *zeropaddedinput = zeropad;
	float *overlap         = overlap_state_buf;

    // prepare input
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80026bc:	f500 4480 	add.w	r4, r0, #16384	@ 0x4000
{
 80026c0:	b08b      	sub	sp, #44	@ 0x2c
 80026c2:	4613      	mov	r3, r2
 80026c4:	460d      	mov	r5, r1
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80026c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026ca:	4934      	ldr	r1, [pc, #208]	@ (800279c <partitioned_fir_convolution_fft+0xe4>)
 80026cc:	68a0      	ldr	r0, [r4, #8]
{
 80026ce:	9307      	str	r3, [sp, #28]
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80026d0:	f007 fbea 	bl	8009ea8 <arm_copy_f32>
    arm_fill_f32(0.0f, &zeropaddedinput[BUFFER_SIZE], BUFFER_SIZE);
 80026d4:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80027a0 <partitioned_fir_convolution_fft+0xe8>
 80026d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026dc:	4831      	ldr	r0, [pc, #196]	@ (80027a4 <partitioned_fir_convolution_fft+0xec>)
 80026de:	f007 fbc5 	bl	8009e6c <arm_fill_f32>

    // forward FFT
    arm_rfft_fast_f32(&fft, zeropaddedinput, fftOut, 0);
 80026e2:	2300      	movs	r3, #0
 80026e4:	4a30      	ldr	r2, [pc, #192]	@ (80027a8 <partitioned_fir_convolution_fft+0xf0>)
 80026e6:	492d      	ldr	r1, [pc, #180]	@ (800279c <partitioned_fir_convolution_fft+0xe4>)
 80026e8:	4830      	ldr	r0, [pc, #192]	@ (80027ac <partitioned_fir_convolution_fft+0xf4>)
 80026ea:	f007 fcbf 	bl	800a06c <arm_rfft_fast_f32>

    // save index and spectrum
    fir->prev_fftidx = fir->curr_fftidx;
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 80026ee:	482e      	ldr	r0, [pc, #184]	@ (80027a8 <partitioned_fir_convolution_fft+0xf0>)
 80026f0:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80026f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    fir->prev_fftidx = fir->curr_fftidx;
 80026fc:	60eb      	str	r3, [r5, #12]
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 80026fe:	f007 fbd3 	bl	8009ea8 <arm_copy_f32>

    arm_fill_f32(0.0f, fftOut, FFT_SIZE);              /* clear accumulator */
 8002702:	4829      	ldr	r0, [pc, #164]	@ (80027a8 <partitioned_fir_convolution_fft+0xf0>)
 8002704:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002708:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80027a0 <partitioned_fir_convolution_fft+0xe8>
 800270c:	f007 fbae 	bl	8009e6c <arm_fill_f32>

    const uint32_t segs = fir->numSegments;
 8002710:	692b      	ldr	r3, [r5, #16]
 8002712:	f8df e094 	ldr.w	lr, [pc, #148]	@ 80027a8 <partitioned_fir_convolution_fft+0xf0>
    uint32_t i = 0;
 8002716:	f04f 0c00 	mov.w	ip, #0
    const uint32_t segs = fir->numSegments;
 800271a:	9303      	str	r3, [sp, #12]
    uint32_t idx = fir->prev_fftidx;

    // partitioned convolution with pointer arithmetic
    do {
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 800271c:	686b      	ldr	r3, [r5, #4]
 800271e:	f50e 50ff 	add.w	r0, lr, #8160	@ 0x1fe0
		}
		if (idx-- == 0) {
			idx = segs - 1;
		}

    } while (idx != fir->curr_fftidx);
 8002722:	68aa      	ldr	r2, [r5, #8]
 8002724:	f50e 5700 	add.w	r7, lr, #8192	@ 0x2000
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8002728:	9305      	str	r3, [sp, #20]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 800272a:	682b      	ldr	r3, [r5, #0]
    } while (idx != fir->curr_fftidx);
 800272c:	9204      	str	r2, [sp, #16]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 800272e:	9306      	str	r3, [sp, #24]
 8002730:	f50e 5380 	add.w	r3, lr, #4096	@ 0x1000
    uint32_t idx = fir->prev_fftidx;
 8002734:	68ee      	ldr	r6, [r5, #12]
                     float accR = __builtin_fmaf(xr, hr,
 8002736:	f603 72f8 	addw	r2, r3, #4088	@ 0xff8
 800273a:	f603 7be8 	addw	fp, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 800273e:	f603 7aec 	addw	sl, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 8002742:	f503 697f 	add.w	r9, r3, #4080	@ 0xff0
                     float accI = __builtin_fmaf(xr, hi,
 8002746:	f603 78f4 	addw	r8, r3, #4084	@ 0xff4
 800274a:	f603 73fc 	addw	r3, r3, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 800274e:	9201      	str	r2, [sp, #4]
                     float accI = __builtin_fmaf(xr, hi,
 8002750:	9302      	str	r3, [sp, #8]
 8002752:	e9cd 5408 	strd	r5, r4, [sp, #32]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8002756:	9b05      	ldr	r3, [sp, #20]
                 yPtr[0] += xPtr[0] * hPtr[0];
 8002758:	ed9e 7a00 	vldr	s14, [lr]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 800275c:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8002760:	9b06      	ldr	r3, [sp, #24]
                 yPtr[1] += xPtr[1] * hPtr[1];
 8002762:	edde 7a01 	vldr	s15, [lr, #4]
 8002766:	f105 0158 	add.w	r1, r5, #88	@ 0x58
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 800276a:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
                 yPtr[0] += xPtr[0] * hPtr[0];
 800276e:	ed95 5a00 	vldr	s10, [r5]
 8002772:	edd4 5a00 	vldr	s11, [r4]
 8002776:	f104 0258 	add.w	r2, r4, #88	@ 0x58
                 yPtr[1] += xPtr[1] * hPtr[1];
 800277a:	ed95 6a01 	vldr	s12, [r5, #4]
 800277e:	edd4 6a01 	vldr	s13, [r4, #4]
                 yPtr[0] += xPtr[0] * hPtr[0];
 8002782:	eea5 7a25 	vfma.f32	s14, s10, s11
                 yPtr[1] += xPtr[1] * hPtr[1];
 8002786:	eee6 7a26 	vfma.f32	s15, s12, s13
                 yPtr[0] += xPtr[0] * hPtr[0];
 800278a:	ed8e 7a00 	vstr	s14, [lr]
                 yPtr[1] += xPtr[1] * hPtr[1];
 800278e:	edce 7a01 	vstr	s15, [lr, #4]
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8002792:	f8df e014 	ldr.w	lr, [pc, #20]	@ 80027a8 <partitioned_fir_convolution_fft+0xf0>
 8002796:	4673      	mov	r3, lr
 8002798:	e00a      	b.n	80027b0 <partitioned_fir_convolution_fft+0xf8>
 800279a:	bf00      	nop
 800279c:	2000f020 	.word	0x2000f020
 80027a0:	00000000 	.word	0x00000000
 80027a4:	20010020 	.word	0x20010020
 80027a8:	2406d5e4 	.word	0x2406d5e4
 80027ac:	2406d0ac 	.word	0x2406d0ac
                         float xr = *xPtr++; float xi = *xPtr++;
 80027b0:	ed51 7a13 	vldr	s15, [r1, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80027b4:	3350      	adds	r3, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 80027b6:	ed52 2a14 	vldr	s5, [r2, #-80]	@ 0xffffffb0
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80027ba:	3150      	adds	r1, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 80027bc:	ed52 3a13 	vldr	s7, [r2, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80027c0:	3250      	adds	r2, #80	@ 0x50
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80027c2:	ed13 4a12 	vldr	s8, [r3, #-72]	@ 0xffffffb8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80027c6:	ed53 4a11 	vldr	s9, [r3, #-68]	@ 0xffffffbc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80027ca:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float xr = *xPtr++; float xi = *xPtr++;
 80027ce:	ed11 3a28 	vldr	s6, [r1, #-160]	@ 0xffffff60
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80027d2:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80027d6:	ed13 5a10 	vldr	s10, [r3, #-64]	@ 0xffffffc0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80027da:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80027de:	ed53 6a0e 	vldr	s13, [r3, #-56]	@ 0xffffffc8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80027e2:	ed13 6a0d 	vldr	s12, [r3, #-52]	@ 0xffffffcc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80027e6:	ed13 7a0c 	vldr	s14, [r3, #-48]	@ 0xffffffd0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80027ea:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80027ee:	ed53 7a0b 	vldr	s15, [r3, #-44]	@ 0xffffffd4
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80027f2:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 80027f6:	ed03 4a12 	vstr	s8, [r3, #-72]	@ 0xffffffb8
                         *(yPtr+1) = accI;
 80027fa:	ed43 4a11 	vstr	s9, [r3, #-68]	@ 0xffffffbc
                         float hr = *hPtr++; float hi = *hPtr++;
 80027fe:	ed52 3a26 	vldr	s7, [r2, #-152]	@ 0xffffff68
 8002802:	ed52 4a25 	vldr	s9, [r2, #-148]	@ 0xffffff6c
                         float xr = *xPtr++; float xi = *xPtr++;
 8002806:	ed11 3a25 	vldr	s6, [r1, #-148]	@ 0xffffff6c
 800280a:	ed11 4a26 	vldr	s8, [r1, #-152]	@ 0xffffff68
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800280e:	eea3 5a64 	vfms.f32	s10, s6, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002812:	eee3 5a23 	vfma.f32	s11, s6, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002816:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800281a:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *yPtr     = accR;
 800281e:	ed03 5a10 	vstr	s10, [r3, #-64]	@ 0xffffffc0
                         *(yPtr+1) = accI;
 8002822:	ed43 5a0f 	vstr	s11, [r3, #-60]	@ 0xffffffc4
                         float xr = *xPtr++; float xi = *xPtr++;
 8002826:	ed11 4a23 	vldr	s8, [r1, #-140]	@ 0xffffff74
                         float hr = *hPtr++; float hi = *hPtr++;
 800282a:	ed52 5a24 	vldr	s11, [r2, #-144]	@ 0xffffff70
 800282e:	ed52 4a23 	vldr	s9, [r2, #-140]	@ 0xffffff74
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002832:	eea4 6a25 	vfma.f32	s12, s8, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8002836:	ed11 5a24 	vldr	s10, [r1, #-144]	@ 0xffffff70
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800283a:	eee4 6a64 	vfms.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800283e:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002842:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *(yPtr+1) = accI;
 8002846:	ed03 6a0d 	vstr	s12, [r3, #-52]	@ 0xffffffcc
                         *yPtr     = accR;
 800284a:	ed43 6a0e 	vstr	s13, [r3, #-56]	@ 0xffffffc8
                         float xr = *xPtr++; float xi = *xPtr++;
 800284e:	ed11 5a21 	vldr	s10, [r1, #-132]	@ 0xffffff7c
                         float hr = *hPtr++; float hi = *hPtr++;
 8002852:	ed52 5a22 	vldr	s11, [r2, #-136]	@ 0xffffff78
 8002856:	ed52 6a21 	vldr	s13, [r2, #-132]	@ 0xffffff7c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800285a:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 800285e:	ed11 6a22 	vldr	s12, [r1, #-136]	@ 0xffffff78
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002862:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002866:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800286a:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 800286e:	ed43 7a0b 	vstr	s15, [r3, #-44]	@ 0xffffffd4
                         *yPtr     = accR;
 8002872:	ed03 7a0c 	vstr	s14, [r3, #-48]	@ 0xffffffd0
                         float xr = *xPtr++; float xi = *xPtr++;
 8002876:	ed11 3a20 	vldr	s6, [r1, #-128]	@ 0xffffff80
 800287a:	ed51 7a1f 	vldr	s15, [r1, #-124]	@ 0xffffff84
                         float hr = *hPtr++; float hi = *hPtr++;
 800287e:	ed52 3a1f 	vldr	s7, [r2, #-124]	@ 0xffffff84
 8002882:	ed52 2a20 	vldr	s5, [r2, #-128]	@ 0xffffff80
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002886:	ed13 4a0a 	vldr	s8, [r3, #-40]	@ 0xffffffd8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800288a:	ed53 4a09 	vldr	s9, [r3, #-36]	@ 0xffffffdc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800288e:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002892:	ed53 5a08 	vldr	s11, [r3, #-32]	@ 0xffffffe0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002896:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800289a:	ed13 5a07 	vldr	s10, [r3, #-28]	@ 0xffffffe4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800289e:	ed13 6a06 	vldr	s12, [r3, #-24]	@ 0xffffffe8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80028a2:	ed53 6a05 	vldr	s13, [r3, #-20]	@ 0xffffffec
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80028a6:	ed53 7a04 	vldr	s15, [r3, #-16]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80028aa:	ed13 7a03 	vldr	s14, [r3, #-12]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80028ae:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80028b2:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 80028b6:	ed03 4a0a 	vstr	s8, [r3, #-40]	@ 0xffffffd8
                         *(yPtr+1) = accI;
 80028ba:	ed43 4a09 	vstr	s9, [r3, #-36]	@ 0xffffffdc
                         float hr = *hPtr++; float hi = *hPtr++;
 80028be:	ed52 4a1e 	vldr	s9, [r2, #-120]	@ 0xffffff88
                         float xr = *xPtr++; float xi = *xPtr++;
 80028c2:	ed11 3a1d 	vldr	s6, [r1, #-116]	@ 0xffffff8c
                         float hr = *hPtr++; float hi = *hPtr++;
 80028c6:	ed52 3a1d 	vldr	s7, [r2, #-116]	@ 0xffffff8c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80028ca:	eea3 5a24 	vfma.f32	s10, s6, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 80028ce:	ed11 4a1e 	vldr	s8, [r1, #-120]	@ 0xffffff88
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80028d2:	eee3 5a63 	vfms.f32	s11, s6, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80028d6:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80028da:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *(yPtr+1) = accI;
 80028de:	ed03 5a07 	vstr	s10, [r3, #-28]	@ 0xffffffe4
                         *yPtr     = accR;
 80028e2:	ed43 5a08 	vstr	s11, [r3, #-32]	@ 0xffffffe0
                         float xr = *xPtr++; float xi = *xPtr++;
 80028e6:	ed11 4a1b 	vldr	s8, [r1, #-108]	@ 0xffffff94
                         float hr = *hPtr++; float hi = *hPtr++;
 80028ea:	ed52 4a1c 	vldr	s9, [r2, #-112]	@ 0xffffff90
 80028ee:	ed52 5a1b 	vldr	s11, [r2, #-108]	@ 0xffffff94
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80028f2:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 80028f6:	ed11 5a1c 	vldr	s10, [r1, #-112]	@ 0xffffff90
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80028fa:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80028fe:	eee5 6a25 	vfma.f32	s13, s10, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002902:	eea5 6a24 	vfma.f32	s12, s10, s9
                         *(yPtr+1) = accI;
 8002906:	ed43 6a05 	vstr	s13, [r3, #-20]	@ 0xffffffec
                         *yPtr     = accR;
 800290a:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
                         float hr = *hPtr++; float hi = *hPtr++;
 800290e:	ed52 6a1a 	vldr	s13, [r2, #-104]	@ 0xffffff98
 8002912:	ed52 5a19 	vldr	s11, [r2, #-100]	@ 0xffffff9c
                         float xr = *xPtr++; float xi = *xPtr++;
 8002916:	ed11 5a19 	vldr	s10, [r1, #-100]	@ 0xffffff9c
 800291a:	ed11 6a1a 	vldr	s12, [r1, #-104]	@ 0xffffff98
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800291e:	eea5 7a26 	vfma.f32	s14, s10, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002922:	eee5 7a65 	vfms.f32	s15, s10, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002926:	eea6 7a25 	vfma.f32	s14, s12, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800292a:	eee6 7a26 	vfma.f32	s15, s12, s13
                         *(yPtr+1) = accI;
 800292e:	ed03 7a03 	vstr	s14, [r3, #-12]
                         *yPtr     = accR;
 8002932:	ed43 7a04 	vstr	s15, [r3, #-16]
                         float xr = *xPtr++; float xi = *xPtr++;
 8002936:	ed11 5a18 	vldr	s10, [r1, #-96]	@ 0xffffffa0
                         float hr = *hPtr++; float hi = *hPtr++;
 800293a:	ed52 5a17 	vldr	s11, [r2, #-92]	@ 0xffffffa4
                         float xr = *xPtr++; float xi = *xPtr++;
 800293e:	ed11 4a17 	vldr	s8, [r1, #-92]	@ 0xffffffa4
                         float hr = *hPtr++; float hi = *hPtr++;
 8002942:	ed52 4a18 	vldr	s9, [r2, #-96]	@ 0xffffffa0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002946:	ed13 6a02 	vldr	s12, [r3, #-8]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800294a:	ed53 6a01 	vldr	s13, [r3, #-4]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800294e:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002952:	ed93 7a00 	vldr	s14, [r3]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002956:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800295a:	edd3 7a01 	vldr	s15, [r3, #4]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800295e:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002962:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *yPtr     = accR;
 8002966:	ed03 6a02 	vstr	s12, [r3, #-8]
                         *(yPtr+1) = accI;
 800296a:	ed43 6a01 	vstr	s13, [r3, #-4]
                         float xr = *xPtr++; float xi = *xPtr++;
 800296e:	ed11 5a15 	vldr	s10, [r1, #-84]	@ 0xffffffac
                         float hr = *hPtr++; float hi = *hPtr++;
 8002972:	ed52 5a16 	vldr	s11, [r2, #-88]	@ 0xffffffa8
 8002976:	ed52 6a15 	vldr	s13, [r2, #-84]	@ 0xffffffac
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800297a:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 800297e:	ed11 6a16 	vldr	s12, [r1, #-88]	@ 0xffffffa8
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002982:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002986:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800298a:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 800298e:	edc3 7a01 	vstr	s15, [r3, #4]
                         *yPtr     = accR;
 8002992:	ed83 7a00 	vstr	s14, [r3]
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8002996:	4283      	cmp	r3, r0
 8002998:	f47f af0a 	bne.w	80027b0 <partitioned_fir_convolution_fft+0xf8>
                     float accR = __builtin_fmaf(xr, hr,
 800299c:	9b01      	ldr	r3, [sp, #4]
		if (++i >= segs) {
 800299e:	f10c 0c01 	add.w	ip, ip, #1
                     float accI = __builtin_fmaf(xr, hi,
 80029a2:	9a02      	ldr	r2, [sp, #8]
                     float accR = __builtin_fmaf(xr, hr,
 80029a4:	ed93 7a00 	vldr	s14, [r3]
                     float xr = *xPtr++;  float xi = *xPtr++;
 80029a8:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
                     float accI = __builtin_fmaf(xr, hi,
 80029ac:	edd2 7a00 	vldr	s15, [r2]
                     float xr = *xPtr++;  float xi = *xPtr++;
 80029b0:	f505 5500 	add.w	r5, r5, #8192	@ 0x2000
                     float hr = *hPtr++;  float hi = *hPtr++;
 80029b4:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 80029b8:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
                     float accR = __builtin_fmaf(xr, hr,
 80029bc:	ed97 5a00 	vldr	s10, [r7]
                     float xr = *xPtr++;  float xi = *xPtr++;
 80029c0:	ed95 2a01 	vldr	s4, [r5, #4]
                     float hr = *hPtr++;  float hi = *hPtr++;
 80029c4:	edd4 2a01 	vldr	s5, [r4, #4]
			i = 0;
 80029c8:	9903      	ldr	r1, [sp, #12]
                     float accR = __builtin_fmaf(xr, hr,
 80029ca:	eea2 5a62 	vfms.f32	s10, s4, s5
                     float accI = __builtin_fmaf(xr, hi,
 80029ce:	edd7 5a01 	vldr	s11, [r7, #4]
                     float xr = *xPtr++;  float xi = *xPtr++;
 80029d2:	ed95 3a00 	vldr	s6, [r5]
			i = 0;
 80029d6:	4561      	cmp	r1, ip
 80029d8:	bf98      	it	ls
 80029da:	f04f 0c00 	movls.w	ip, #0
                     float hr = *hPtr++;  float hi = *hPtr++;
 80029de:	edd4 3a00 	vldr	s7, [r4]
                     float xr = *xPtr++;  float xi = *xPtr++;
 80029e2:	f603 71ec 	addw	r1, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 80029e6:	ed9b 4a00 	vldr	s8, [fp]
                     float accI = __builtin_fmaf(xr, hi,
 80029ea:	eee2 5a23 	vfma.f32	s11, s4, s7
 80029ee:	edda 4a00 	vldr	s9, [sl]
                     float accR = __builtin_fmaf(xr, hr,
 80029f2:	ed99 6a00 	vldr	s12, [r9]
 80029f6:	eea3 5a23 	vfma.f32	s10, s6, s7
                     float xr = *xPtr++;  float xi = *xPtr++;
 80029fa:	edd1 3a00 	vldr	s7, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 80029fe:	f602 71e8 	addw	r1, r2, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8002a02:	edd8 6a00 	vldr	s13, [r8]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002a06:	edd1 0a00 	vldr	s1, [r1]
 8002a0a:	f602 71ec 	addw	r1, r2, #4076	@ 0xfec
                     float accI = __builtin_fmaf(xr, hi,
 8002a0e:	eee3 5a22 	vfma.f32	s11, s6, s5
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002a12:	edd1 1a00 	vldr	s3, [r1]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002a16:	f603 71f4 	addw	r1, r3, #4084	@ 0xff4
                     float accI = __builtin_fmaf(xr, hi,
 8002a1a:	eee3 4aa0 	vfma.f32	s9, s7, s1
                     float accR = __builtin_fmaf(xr, hr,
 8002a1e:	eea3 4ae1 	vfms.f32	s8, s7, s3
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002a22:	edd1 3a00 	vldr	s7, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002a26:	f502 617f 	add.w	r1, r2, #4080	@ 0xff0
 8002a2a:	ed91 2a00 	vldr	s4, [r1]
 8002a2e:	f602 71f4 	addw	r1, r2, #4084	@ 0xff4
 8002a32:	edd1 2a00 	vldr	s5, [r1]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002a36:	f603 71fc 	addw	r1, r3, #4092	@ 0xffc
                     float accI = __builtin_fmaf(xr, hi,
 8002a3a:	eee3 6a82 	vfma.f32	s13, s7, s4
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002a3e:	ed91 1a00 	vldr	s2, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002a42:	f602 71f8 	addw	r1, r2, #4088	@ 0xff8
 8002a46:	f602 72fc 	addw	r2, r2, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 8002a4a:	eea3 6ae2 	vfms.f32	s12, s7, s5
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002a4e:	ed91 3a00 	vldr	s6, [r1]
 8002a52:	edd2 3a00 	vldr	s7, [r2]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002a56:	f603 72e8 	addw	r2, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8002a5a:	eee1 7a03 	vfma.f32	s15, s2, s6
                     float accR = __builtin_fmaf(xr, hr,
 8002a5e:	eea1 7a63 	vfms.f32	s14, s2, s7
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002a62:	ed92 1a00 	vldr	s2, [r2]
 8002a66:	f503 627f 	add.w	r2, r3, #4080	@ 0xff0
 8002a6a:	f603 73f8 	addw	r3, r3, #4088	@ 0xff8
                     float accR = __builtin_fmaf(xr, hr,
 8002a6e:	eea1 4a20 	vfma.f32	s8, s2, s1
                     float accI = __builtin_fmaf(xr, hi,
 8002a72:	eee1 4a21 	vfma.f32	s9, s2, s3
                     *yPtr     = accR;
 8002a76:	ed8b 4a00 	vstr	s8, [fp]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002a7a:	ed92 4a00 	vldr	s8, [r2]
                     *(yPtr+1) = accI;
 8002a7e:	edca 4a00 	vstr	s9, [sl]
                     float accR = __builtin_fmaf(xr, hr,
 8002a82:	eea4 6a02 	vfma.f32	s12, s8, s4
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002a86:	edd3 4a00 	vldr	s9, [r3]
                     float accI = __builtin_fmaf(xr, hi,
 8002a8a:	eee4 6a22 	vfma.f32	s13, s8, s5
                     *yPtr     = accR;
 8002a8e:	ed87 5a00 	vstr	s10, [r7]
                     float accR = __builtin_fmaf(xr, hr,
 8002a92:	eea4 7a83 	vfma.f32	s14, s9, s6
                     *(yPtr+1) = accI;
 8002a96:	edc7 5a01 	vstr	s11, [r7, #4]
                     float accI = __builtin_fmaf(xr, hi,
 8002a9a:	eee4 7aa3 	vfma.f32	s15, s9, s7
                     *yPtr     = accR;
 8002a9e:	ed89 6a00 	vstr	s12, [r9]
                     *(yPtr+1) = accI;
 8002aa2:	edc8 6a00 	vstr	s13, [r8]
                     *yPtr     = accR;
 8002aa6:	9b01      	ldr	r3, [sp, #4]
                     *(yPtr+1) = accI;
 8002aa8:	9a02      	ldr	r2, [sp, #8]
                     *yPtr     = accR;
 8002aaa:	ed83 7a00 	vstr	s14, [r3]
                     *(yPtr+1) = accI;
 8002aae:	edc2 7a00 	vstr	s15, [r2]
		if (idx-- == 0) {
 8002ab2:	b39e      	cbz	r6, 8002b1c <partitioned_fir_convolution_fft+0x464>
 8002ab4:	3e01      	subs	r6, #1
    } while (idx != fir->curr_fftidx);
 8002ab6:	9b04      	ldr	r3, [sp, #16]
 8002ab8:	42b3      	cmp	r3, r6
 8002aba:	f47f ae4c 	bne.w	8002756 <partitioned_fir_convolution_fft+0x9e>

    // advance write index
    if (++fir->curr_fftidx >= segs) {
        fir->curr_fftidx = 0;
 8002abe:	9e03      	ldr	r6, [sp, #12]
    if (++fir->curr_fftidx >= segs) {
 8002ac0:	3301      	adds	r3, #1
    }

    // inverse FFT
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8002ac2:	4a18      	ldr	r2, [pc, #96]	@ (8002b24 <partitioned_fir_convolution_fft+0x46c>)
        fir->curr_fftidx = 0;
 8002ac4:	42b3      	cmp	r3, r6
 8002ac6:	bf28      	it	cs
 8002ac8:	2300      	movcs	r3, #0
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8002aca:	4917      	ldr	r1, [pc, #92]	@ (8002b28 <partitioned_fir_convolution_fft+0x470>)
 8002acc:	4817      	ldr	r0, [pc, #92]	@ (8002b2c <partitioned_fir_convolution_fft+0x474>)
    if (++fir->curr_fftidx >= segs) {
 8002ace:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8002ad2:	60ab      	str	r3, [r5, #8]
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f007 fac9 	bl	800a06c <arm_rfft_fast_f32>

    // overlap-add and scaling
    const float32_t invN = 1.0f / (float32_t)segs;
 8002ada:	ee07 6a90 	vmov	s15, r6
 8002ade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ae2:	4a10      	ldr	r2, [pc, #64]	@ (8002b24 <partitioned_fir_convolution_fft+0x46c>)
 8002ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae8:	9b07      	ldr	r3, [sp, #28]
 8002aea:	f502 5180 	add.w	r1, r2, #4096	@ 0x1000
 8002aee:	68a0      	ldr	r0, [r4, #8]
 8002af0:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8002af4:	460d      	mov	r5, r1
        float32_t s = zeropaddedinput[k]            * invN;
 8002af6:	ecf2 7a01 	vldmia	r2!, {s15}
        float32_t o = overlap[k]                    * invN;
 8002afa:	ed93 7a00 	vldr	s14, [r3]
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8002afe:	4295      	cmp	r5, r2
        pipe->processBuffer[k] = s + o;
 8002b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b08:	ece0 7a01 	vstmia	r0!, {s15}
        overlap[k]             = zeropaddedinput[BUFFER_SIZE + k];
 8002b0c:	f851 4b04 	ldr.w	r4, [r1], #4
 8002b10:	f843 4b04 	str.w	r4, [r3], #4
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8002b14:	d1ef      	bne.n	8002af6 <partitioned_fir_convolution_fft+0x43e>
    }

}
 8002b16:	b00b      	add	sp, #44	@ 0x2c
 8002b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			idx = segs - 1;
 8002b1c:	9b03      	ldr	r3, [sp, #12]
 8002b1e:	1e5e      	subs	r6, r3, #1
 8002b20:	e7c9      	b.n	8002ab6 <partitioned_fir_convolution_fft+0x3fe>
 8002b22:	bf00      	nop
 8002b24:	2000f020 	.word	0x2000f020
 8002b28:	2406d5e4 	.word	0x2406d5e4
 8002b2c:	2406d0ac 	.word	0x2406d0ac

08002b30 <pipe_getNodeBuffer>:

    return &self->delayBuffer[index];
}*/

float32_t *pipe_getNodeBuffer(pipe *self, uint16_t n)
{
 8002b30:	4603      	mov	r3, r0
    return self->nodeBuffer[n];
}
 8002b32:	f244 000c 	movw	r0, #16396	@ 0x400c
    return self->nodeBuffer[n];
 8002b36:	eb03 3301 	add.w	r3, r3, r1, lsl #12
}
 8002b3a:	4418      	add	r0, r3
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop

08002b40 <pipe_setIO>:
	arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
}

static void pipe_setIO(pipe *self, uint16_t sourceBuffer, uint16_t destinationBuffer)
{
	self->fxSrcBuff = self->nodeBuffer[sourceBuffer];
 8002b40:	f244 030c 	movw	r3, #16396	@ 0x400c
 8002b44:	eb03 3101 	add.w	r1, r3, r1, lsl #12
	self->fxDstBuff = self->nodeBuffer[destinationBuffer];
 8002b48:	eb03 3302 	add.w	r3, r3, r2, lsl #12
	self->fxSrcBuff = self->nodeBuffer[sourceBuffer];
 8002b4c:	f500 4260 	add.w	r2, r0, #57344	@ 0xe000
 8002b50:	4401      	add	r1, r0
	self->fxDstBuff = self->nodeBuffer[destinationBuffer];
 8002b52:	4418      	add	r0, r3
 8002b54:	e9c2 1003 	strd	r1, r0, [r2, #12]
}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop

08002b5c <pipe_primeProcess>:

static void pipe_primeProcess(pipe *self, uint16_t sourceBuffer, uint16_t workingBuffer)
{
	self->processBuffer = self->nodeBuffer[workingBuffer];
 8002b5c:	f244 0c0c 	movw	ip, #16396	@ 0x400c
{
 8002b60:	460b      	mov	r3, r1
	self->processBuffer = self->nodeBuffer[workingBuffer];
 8002b62:	eb0c 3202 	add.w	r2, ip, r2, lsl #12
	if (sourceBuffer <= MAX_NODES)
 8002b66:	2b0a      	cmp	r3, #10
{
 8002b68:	b500      	push	{lr}
	self->processBuffer = self->nodeBuffer[workingBuffer];
 8002b6a:	eb00 0102 	add.w	r1, r0, r2
 8002b6e:	f500 4e80 	add.w	lr, r0, #16384	@ 0x4000
 8002b72:	f8ce 1008 	str.w	r1, [lr, #8]
	if (sourceBuffer <= MAX_NODES)
 8002b76:	d808      	bhi.n	8002b8a <pipe_primeProcess+0x2e>
	{
		arm_copy_f32(self->nodeBuffer[sourceBuffer], self->processBuffer, BUFFER_SIZE);
 8002b78:	eb0c 3c03 	add.w	ip, ip, r3, lsl #12
 8002b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
	}
	else
	{
		arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
	}
}
 8002b80:	f85d eb04 	ldr.w	lr, [sp], #4
		arm_copy_f32(self->nodeBuffer[sourceBuffer], self->processBuffer, BUFFER_SIZE);
 8002b84:	4460      	add	r0, ip
 8002b86:	f007 b98f 	b.w	8009ea8 <arm_copy_f32>
		arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8002b8a:	f8de 0000 	ldr.w	r0, [lr]
 8002b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
}
 8002b92:	f85d eb04 	ldr.w	lr, [sp], #4
		arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8002b96:	f007 b987 	b.w	8009ea8 <arm_copy_f32>
 8002b9a:	bf00      	nop

08002b9c <pipe_loadProcess>:
	arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8002b9c:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
 8002ba0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ba4:	6881      	ldr	r1, [r0, #8]
 8002ba6:	6800      	ldr	r0, [r0, #0]
 8002ba8:	f007 b97e 	b.w	8009ea8 <arm_copy_f32>

08002bac <pipe_updateDACOutput>:
{
 8002bac:	b570      	push	{r4, r5, r6, lr}
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8002bae:	f500 4580 	add.w	r5, r0, #16384	@ 0x4000
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8002bb2:	f500 4360 	add.w	r3, r0, #57344	@ 0xe000
{
 8002bb6:	460c      	mov	r4, r1
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8002bb8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002bbc:	6869      	ldr	r1, [r5, #4]
 8002bbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8002bc2:	7d1e      	ldrb	r6, [r3, #20]
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	f007 ffc7 	bl	800ab58 <arm_offset_f32>
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8002bca:	6869      	ldr	r1, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8002bcc:	fab6 f686 	clz	r6, r6
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8002bd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8002c04 <pipe_updateDACOutput+0x58>
 8002bda:	f007 ff87 	bl	800aaec <arm_scale_f32>
 8002bde:	686a      	ldr	r2, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8002be0:	0976      	lsrs	r6, r6, #5
    for (i = 0; i < BUFFER_SIZE; i++)
 8002be2:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8002be6:	eb04 21c6 	add.w	r1, r4, r6, lsl #11
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8002bea:	ecf2 7a01 	vldmia	r2!, {s15}
 8002bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    for (i = 0; i < BUFFER_SIZE; i++)
 8002bf2:	4290      	cmp	r0, r2
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8002bf4:	ee17 3a90 	vmov	r3, s15
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f821 3b02 	strh.w	r3, [r1], #2
    for (i = 0; i < BUFFER_SIZE; i++)
 8002bfe:	d1f4      	bne.n	8002bea <pipe_updateDACOutput+0x3e>
}
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
 8002c02:	bf00      	nop
 8002c04:	45000000 	.word	0x45000000

08002c08 <pipe_ADC_Complete>:
{
 8002c08:	b538      	push	{r3, r4, r5, lr}
 8002c0a:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
 8002c0e:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8002c10:	f501 6c00 	add.w	ip, r1, #2048	@ 0x800
 8002c14:	f500 5e00 	add.w	lr, r0, #8192	@ 0x2000
 8002c18:	462a      	mov	r2, r5
        self->inBuffer2[i] = (float32_t)adcInput[BUFFER_SIZE + i];
 8002c1a:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	ee07 3a90 	vmov	s15, r3
 8002c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c28:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8002c2c:	4572      	cmp	r2, lr
 8002c2e:	d1f4      	bne.n	8002c1a <pipe_ADC_Complete+0x12>
    arm_scale_f32(self->inBuffer2, ADC_BITS2VOLTS, self->inBuffer2, BUFFER_SIZE);
 8002c30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c34:	4629      	mov	r1, r5
 8002c36:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002c68 <pipe_ADC_Complete+0x60>
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f007 ff56 	bl	800aaec <arm_scale_f32>
    arm_offset_f32(self->inBuffer2, -1.0f, self->inBuffer2, BUFFER_SIZE);
 8002c40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c44:	4629      	mov	r1, r5
 8002c46:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	f007 ff84 	bl	800ab58 <arm_offset_f32>
    self->inBuffer  = self->inBuffer2;
 8002c50:	f504 4380 	add.w	r3, r4, #16384	@ 0x4000
    self->outBuffer = self->outBuffer2;
 8002c54:	f504 5140 	add.w	r1, r4, #12288	@ 0x3000
    self->ppState   = 0;
 8002c58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c5c:	f504 4460 	add.w	r4, r4, #57344	@ 0xe000
    self->outBuffer = self->outBuffer2;
 8002c60:	e9c3 5100 	strd	r5, r1, [r3]
    self->ppState   = 0;
 8002c64:	82a2      	strh	r2, [r4, #20]
}
 8002c66:	bd38      	pop	{r3, r4, r5, pc}
 8002c68:	38000000 	.word	0x38000000

08002c6c <pipe_ADC_HalfComplete>:
{
 8002c6c:	b510      	push	{r4, lr}
 8002c6e:	468c      	mov	ip, r1
 8002c70:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8002c72:	4602      	mov	r2, r0
 8002c74:	f500 5e80 	add.w	lr, r0, #4096	@ 0x1000
        self->inBuffer1[i] = (float32_t)adcInput[i];
 8002c78:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c86:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8002c8a:	4572      	cmp	r2, lr
 8002c8c:	d1f4      	bne.n	8002c78 <pipe_ADC_HalfComplete+0xc>
    arm_scale_f32(self->inBuffer1, ADC_BITS2VOLTS, self->inBuffer1, BUFFER_SIZE);
 8002c8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c92:	4621      	mov	r1, r4
 8002c94:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002cc8 <pipe_ADC_HalfComplete+0x5c>
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f007 ff27 	bl	800aaec <arm_scale_f32>
    arm_offset_f32(self->inBuffer1, -1.0f, self->inBuffer1, BUFFER_SIZE);
 8002c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002caa:	f007 ff55 	bl	800ab58 <arm_offset_f32>
    self->ppState   = 1;
 8002cae:	f240 1101 	movw	r1, #257	@ 0x101
    self->inBuffer  = self->inBuffer1;
 8002cb2:	f504 4380 	add.w	r3, r4, #16384	@ 0x4000
    self->outBuffer = self->outBuffer1;
 8002cb6:	f504 5000 	add.w	r0, r4, #8192	@ 0x2000
    self->ppState   = 1;
 8002cba:	f504 4260 	add.w	r2, r4, #57344	@ 0xe000
    self->outBuffer = self->outBuffer1;
 8002cbe:	e9c3 4000 	strd	r4, r0, [r3]
    self->ppState   = 1;
 8002cc2:	8291      	strh	r1, [r2, #20]
}
 8002cc4:	bd10      	pop	{r4, pc}
 8002cc6:	bf00      	nop
 8002cc8:	38000000 	.word	0x38000000

08002ccc <pipeInit>:

void pipeInit(pipe *self)
{
 8002ccc:	4603      	mov	r3, r0
    self->inBuffer  = self->inBuffer2;
    self->outBuffer = self->outBuffer2;
    self->processBuffer = self->nodeBuffer[0];
 8002cce:	f244 000c 	movw	r0, #16396	@ 0x400c
    self->ppState   = 0;
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	f503 4260 	add.w	r2, r3, #57344	@ 0xe000
    self->inBuffer  = self->inBuffer2;
 8002cd8:	f503 4c80 	add.w	ip, r3, #16384	@ 0x4000
    self->processBuffer = self->nodeBuffer[0];
 8002cdc:	4418      	add	r0, r3
{
 8002cde:	b470      	push	{r4, r5, r6}
    self->inBuffer  = self->inBuffer2;
 8002ce0:	f503 5680 	add.w	r6, r3, #4096	@ 0x1000
    self->outBuffer = self->outBuffer2;
 8002ce4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
    //self->delayIndex = 0;
    self->bufferReady = false;

    self->adcHalfComplete = pipe_ADC_HalfComplete;
    self->adcComplete     = pipe_ADC_Complete;
 8002ce8:	4c0c      	ldr	r4, [pc, #48]	@ (8002d1c <pipeInit+0x50>)
    self->outBuffer = self->outBuffer2;
 8002cea:	f8cc 3004 	str.w	r3, [ip, #4]
    //self->updateDelayBuffer = pipe_updateDelayBuffer;
    self->updateDACOutput = pipe_updateDACOutput;
 8002cee:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <pipeInit+0x54>)
    self->inBuffer  = self->inBuffer2;
 8002cf0:	f8cc 6000 	str.w	r6, [ip]
    self->processBuffer = self->nodeBuffer[0];
 8002cf4:	f8cc 0008 	str.w	r0, [ip, #8]
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8002cf8:	4d0a      	ldr	r5, [pc, #40]	@ (8002d24 <pipeInit+0x58>)
    self->ppState   = 0;
 8002cfa:	8291      	strh	r1, [r2, #20]
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8002cfc:	6195      	str	r5, [r2, #24]
    self->updateDACOutput = pipe_updateDACOutput;
 8002cfe:	e9c2 4307 	strd	r4, r3, [r2, #28]
    //self->getDelayBuffer = pipe_getDelayBuffer;
    self->loadProcess = pipe_loadProcess;
 8002d02:	4c09      	ldr	r4, [pc, #36]	@ (8002d28 <pipeInit+0x5c>)
    self->getNodeBuffer = pipe_getNodeBuffer;
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <pipeInit+0x60>)
 8002d06:	e9c2 4309 	strd	r4, r3, [r2, #36]	@ 0x24
    self->setIO = pipe_setIO;
 8002d0a:	4c09      	ldr	r4, [pc, #36]	@ (8002d30 <pipeInit+0x64>)
    self->primeProcess = pipe_primeProcess;
 8002d0c:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <pipeInit+0x68>)
 8002d0e:	e9c2 340b 	strd	r3, r4, [r2, #44]	@ 0x2c

    for(int i = 0; i < BUFFER_SIZE ; i++) {

    	self->processBuffer[i] = 0;
 8002d12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000

    }

}
 8002d16:	bc70      	pop	{r4, r5, r6}
    	self->processBuffer[i] = 0;
 8002d18:	f008 bcb0 	b.w	800b67c <memset>
 8002d1c:	08002c09 	.word	0x08002c09
 8002d20:	08002bad 	.word	0x08002bad
 8002d24:	08002c6d 	.word	0x08002c6d
 8002d28:	08002b9d 	.word	0x08002b9d
 8002d2c:	08002b31 	.word	0x08002b31
 8002d30:	08002b41 	.word	0x08002b41
 8002d34:	08002b5d 	.word	0x08002b5d

08002d38 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d38:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <HAL_MspInit+0x20>)
{
 8002d3a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002d40:	f042 0202 	orr.w	r2, r2, #2
 8002d44:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d54:	b002      	add	sp, #8
 8002d56:	4770      	bx	lr
 8002d58:	58024400 	.word	0x58024400

08002d5c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d60:	2100      	movs	r1, #0
{
 8002d62:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d64:	22c0      	movs	r2, #192	@ 0xc0
 8002d66:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	9106      	str	r1, [sp, #24]
 8002d6a:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002d6e:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d72:	f008 fc83 	bl	800b67c <memset>
  if(hadc->Instance==ADC1)
 8002d76:	4b31      	ldr	r3, [pc, #196]	@ (8002e3c <HAL_ADC_MspInit+0xe0>)
 8002d78:	6822      	ldr	r2, [r4, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d001      	beq.n	8002d82 <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d7e:	b038      	add	sp, #224	@ 0xe0
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d88:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d8a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8002d8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d92:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d94:	f004 f972 	bl	800707c <HAL_RCCEx_PeriphCLKConfig>
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d148      	bne.n	8002e2e <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002d9c:	4b28      	ldr	r3, [pc, #160]	@ (8002e40 <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA1_Stream0;
 8002da2:	4d28      	ldr	r5, [pc, #160]	@ (8002e44 <HAL_ADC_MspInit+0xe8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002da4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8002da8:	f042 0220 	orr.w	r2, r2, #32
 8002dac:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8002db0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8002db4:	f002 0220 	and.w	r2, r2, #32
 8002db8:	9200      	str	r2, [sp, #0]
 8002dba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dc8:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dd6:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd8:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dda:	481b      	ldr	r0, [pc, #108]	@ (8002e48 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ddc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	f003 f856 	bl	8005e90 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8002de4:	4a19      	ldr	r2, [pc, #100]	@ (8002e4c <HAL_ADC_MspInit+0xf0>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002de6:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002de8:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dea:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002dec:	e885 004c 	stmia.w	r5, {r2, r3, r6}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002df0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002df4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002df8:	e9c5 6203 	strd	r6, r2, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dfc:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dfe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e06:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002e0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e0e:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e10:	f001 fde8 	bl	80049e4 <HAL_DMA_Init>
 8002e14:	b970      	cbnz	r0, 8002e34 <HAL_ADC_MspInit+0xd8>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e1a:	64e5      	str	r5, [r4, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e1c:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e1e:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e20:	f001 fa98 	bl	8004354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e24:	2012      	movs	r0, #18
 8002e26:	f001 fad1 	bl	80043cc <HAL_NVIC_EnableIRQ>
}
 8002e2a:	b038      	add	sp, #224	@ 0xe0
 8002e2c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002e2e:	f7ff fc41 	bl	80026b4 <Error_Handler>
 8002e32:	e7b3      	b.n	8002d9c <HAL_ADC_MspInit+0x40>
      Error_Handler();
 8002e34:	f7ff fc3e 	bl	80026b4 <Error_Handler>
 8002e38:	e7ed      	b.n	8002e16 <HAL_ADC_MspInit+0xba>
 8002e3a:	bf00      	nop
 8002e3c:	40022000 	.word	0x40022000
 8002e40:	58024400 	.word	0x58024400
 8002e44:	2406d508 	.word	0x2406d508
 8002e48:	58020000 	.word	0x58020000
 8002e4c:	40020010 	.word	0x40020010

08002e50 <HAL_DAC_MspInit>:
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8002e50:	4b2c      	ldr	r3, [pc, #176]	@ (8002f04 <HAL_DAC_MspInit+0xb4>)
 8002e52:	6802      	ldr	r2, [r0, #0]
{
 8002e54:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 8002e56:	429a      	cmp	r2, r3
{
 8002e58:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5a:	f04f 0400 	mov.w	r4, #0
 8002e5e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002e62:	9404      	str	r4, [sp, #16]
 8002e64:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8002e68:	d001      	beq.n	8002e6e <HAL_DAC_MspInit+0x1e>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002e6a:	b008      	add	sp, #32
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002e6e:	4b26      	ldr	r3, [pc, #152]	@ (8002f08 <HAL_DAC_MspInit+0xb8>)
 8002e70:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e72:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8002e74:	4e25      	ldr	r6, [pc, #148]	@ (8002f0c <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002e76:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002e7a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002e7e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002e82:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002e86:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8002e8a:	9200      	str	r2, [sp, #0]
 8002e8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e9a:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ea6:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea8:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eaa:	4819      	ldr	r0, [pc, #100]	@ (8002f10 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002eac:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb0:	f002 ffee 	bl	8005e90 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8002eb4:	4a17      	ldr	r2, [pc, #92]	@ (8002f14 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002eb6:	2343      	movs	r3, #67	@ 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002eb8:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eba:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ebc:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ebe:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002ec0:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ec4:	2240      	movs	r2, #64	@ 0x40
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eca:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ecc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ed0:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ed2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ed6:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002eda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ede:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002ee0:	f001 fd80 	bl	80049e4 <HAL_DMA_Init>
 8002ee4:	b958      	cbnz	r0, 8002efe <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002ee8:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002eea:	2036      	movs	r0, #54	@ 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002eec:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002eee:	4611      	mov	r1, r2
 8002ef0:	f001 fa30 	bl	8004354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ef4:	2036      	movs	r0, #54	@ 0x36
 8002ef6:	f001 fa69 	bl	80043cc <HAL_NVIC_EnableIRQ>
}
 8002efa:	b008      	add	sp, #32
 8002efc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002efe:	f7ff fbd9 	bl	80026b4 <Error_Handler>
 8002f02:	e7f0      	b.n	8002ee6 <HAL_DAC_MspInit+0x96>
 8002f04:	40007400 	.word	0x40007400
 8002f08:	58024400 	.word	0x58024400
 8002f0c:	2406d47c 	.word	0x2406d47c
 8002f10:	58020000 	.word	0x58020000
 8002f14:	40020028 	.word	0x40020028

08002f18 <HAL_TIM_Base_MspInit>:
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 8002f18:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <HAL_TIM_Base_MspInit+0x2c>)
 8002f1a:	6802      	ldr	r2, [r0, #0]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d000      	beq.n	8002f22 <HAL_TIM_Base_MspInit+0xa>
 8002f20:	4770      	bx	lr
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f22:	4b09      	ldr	r3, [pc, #36]	@ (8002f48 <HAL_TIM_Base_MspInit+0x30>)
{
 8002f24:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f26:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002f2a:	f042 0202 	orr.w	r2, r2, #2
 8002f2e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8002f3e:	b002      	add	sp, #8
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40010400 	.word	0x40010400
 8002f48:	58024400 	.word	0x58024400

08002f4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f4c:	b5d0      	push	{r4, r6, r7, lr}
 8002f4e:	b0bc      	sub	sp, #240	@ 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	2100      	movs	r1, #0
{
 8002f52:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f54:	22c0      	movs	r2, #192	@ 0xc0
 8002f56:	a80c      	add	r0, sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	910a      	str	r1, [sp, #40]	@ 0x28
 8002f5a:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8002f5e:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f62:	f008 fb8b 	bl	800b67c <memset>
  if(huart->Instance==USART1)
 8002f66:	4a4e      	ldr	r2, [pc, #312]	@ (80030a0 <HAL_UART_MspInit+0x154>)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002f6e:	4a4d      	ldr	r2, [pc, #308]	@ (80030a4 <HAL_UART_MspInit+0x158>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d03d      	beq.n	8002ff0 <HAL_UART_MspInit+0xa4>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f74:	b03c      	add	sp, #240	@ 0xf0
 8002f76:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f7c:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f7e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f82:	f004 f87b 	bl	800707c <HAL_RCCEx_PeriphCLKConfig>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	f040 8083 	bne.w	8003092 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f8c:	4b46      	ldr	r3, [pc, #280]	@ (80030a8 <HAL_UART_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f8e:	f44f 66c0 	mov.w	r6, #1536	@ 0x600
 8002f92:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f94:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f96:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9a:	a906      	add	r1, sp, #24
 8002f9c:	4843      	ldr	r0, [pc, #268]	@ (80030ac <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f9e:	f042 0210 	orr.w	r2, r2, #16
 8002fa2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8002fa6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002faa:	f002 0210 	and.w	r2, r2, #16
 8002fae:	9201      	str	r2, [sp, #4]
 8002fb0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fc2:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc4:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fc8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002fcc:	2600      	movs	r6, #0
 8002fce:	2700      	movs	r7, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd0:	9302      	str	r3, [sp, #8]
 8002fd2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fd4:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd8:	f002 ff5a 	bl	8005e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2025      	movs	r0, #37	@ 0x25
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	f001 f9b7 	bl	8004354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fe6:	2025      	movs	r0, #37	@ 0x25
 8002fe8:	f001 f9f0 	bl	80043cc <HAL_NVIC_EnableIRQ>
}
 8002fec:	b03c      	add	sp, #240	@ 0xf0
 8002fee:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff4:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ff6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ffa:	f004 f83f 	bl	800707c <HAL_RCCEx_PeriphCLKConfig>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	d14a      	bne.n	8003098 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003002:	4b29      	ldr	r3, [pc, #164]	@ (80030a8 <HAL_UART_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003004:	2004      	movs	r0, #4
 8003006:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003008:	2407      	movs	r4, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 800300a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800300e:	2600      	movs	r6, #0
 8003010:	2702      	movs	r7, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 8003012:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003016:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800301a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800301e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003022:	9203      	str	r2, [sp, #12]
 8003024:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003026:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8003032:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003036:	f002 0201 	and.w	r2, r2, #1
 800303a:	9204      	str	r2, [sp, #16]
 800303c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800303e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003042:	f042 0208 	orr.w	r2, r2, #8
 8003046:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800304a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800304e:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003050:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003054:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003058:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305a:	a906      	add	r1, sp, #24
 800305c:	4813      	ldr	r0, [pc, #76]	@ (80030ac <HAL_UART_MspInit+0x160>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800305e:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003060:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003064:	f002 ff14 	bl	8005e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003068:	2302      	movs	r3, #2
 800306a:	2240      	movs	r2, #64	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306c:	a906      	add	r1, sp, #24
 800306e:	4810      	ldr	r0, [pc, #64]	@ (80030b0 <HAL_UART_MspInit+0x164>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003070:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003072:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003076:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800307a:	f002 ff09 	bl	8005e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2026      	movs	r0, #38	@ 0x26
 8003082:	4611      	mov	r1, r2
 8003084:	f001 f966 	bl	8004354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003088:	2026      	movs	r0, #38	@ 0x26
 800308a:	f001 f99f 	bl	80043cc <HAL_NVIC_EnableIRQ>
}
 800308e:	b03c      	add	sp, #240	@ 0xf0
 8003090:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8003092:	f7ff fb0f 	bl	80026b4 <Error_Handler>
 8003096:	e779      	b.n	8002f8c <HAL_UART_MspInit+0x40>
      Error_Handler();
 8003098:	f7ff fb0c 	bl	80026b4 <Error_Handler>
 800309c:	e7b1      	b.n	8003002 <HAL_UART_MspInit+0xb6>
 800309e:	bf00      	nop
 80030a0:	40011000 	.word	0x40011000
 80030a4:	40004400 	.word	0x40004400
 80030a8:	58024400 	.word	0x58024400
 80030ac:	58020000 	.word	0x58020000
 80030b0:	58020c00 	.word	0x58020c00

080030b4 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 80030b4:	4836      	ldr	r0, [pc, #216]	@ (8003190 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80030b6:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80030b8:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 80030ba:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80030bc:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80030be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80030c2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80030c6:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 80030c8:	b109      	cbz	r1, 80030ce <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80030ca:	b038      	add	sp, #224	@ 0xe0
 80030cc:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 80030ce:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d0:	22b8      	movs	r2, #184	@ 0xb8
  FMC_Initialized = 1;
 80030d2:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030d4:	a80a      	add	r0, sp, #40	@ 0x28
 80030d6:	f008 fad1 	bl	800b67c <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80030da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030de:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030e0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80030e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030e6:	f003 ffc9 	bl	800707c <HAL_RCCEx_PeriphCLKConfig>
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d14c      	bne.n	8003188 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 80030ee:	4b29      	ldr	r3, [pc, #164]	@ (8003194 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80030f0:	f64f 003f 	movw	r0, #63551	@ 0xf83f
 80030f4:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80030f6:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80030f8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80030fc:	2600      	movs	r6, #0
 80030fe:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8003100:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003104:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8003108:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800310c:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 800310e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003112:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003116:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003118:	a902      	add	r1, sp, #8
 800311a:	481f      	ldr	r0, [pc, #124]	@ (8003198 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800311c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800311e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003122:	f002 feb5 	bl	8005e90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8003126:	222c      	movs	r2, #44	@ 0x2c
 8003128:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800312a:	a902      	add	r1, sp, #8
 800312c:	481b      	ldr	r0, [pc, #108]	@ (800319c <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800312e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8003130:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003134:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003138:	f002 feaa 	bl	8005e90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800313c:	f248 1237 	movw	r2, #33079	@ 0x8137
 8003140:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003142:	a902      	add	r1, sp, #8
 8003144:	4816      	ldr	r0, [pc, #88]	@ (80031a0 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003146:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003148:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800314c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003150:	f002 fe9e 	bl	8005e90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003154:	f64f 7283 	movw	r2, #65411	@ 0xff83
 8003158:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800315a:	a902      	add	r1, sp, #8
 800315c:	4811      	ldr	r0, [pc, #68]	@ (80031a4 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800315e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003160:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003164:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003168:	f002 fe92 	bl	8005e90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800316c:	f24c 7203 	movw	r2, #50947	@ 0xc703
 8003170:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003172:	a902      	add	r1, sp, #8
 8003174:	480c      	ldr	r0, [pc, #48]	@ (80031a8 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003176:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003178:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800317c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003180:	f002 fe86 	bl	8005e90 <HAL_GPIO_Init>
}
 8003184:	b038      	add	sp, #224	@ 0xe0
 8003186:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8003188:	f7ff fa94 	bl	80026b4 <Error_Handler>
 800318c:	e7af      	b.n	80030ee <HAL_SDRAM_MspInit+0x3a>
 800318e:	bf00      	nop
 8003190:	2406f5e4 	.word	0x2406f5e4
 8003194:	58024400 	.word	0x58024400
 8003198:	58021400 	.word	0x58021400
 800319c:	58021c00 	.word	0x58021c00
 80031a0:	58021800 	.word	0x58021800
 80031a4:	58021000 	.word	0x58021000
 80031a8:	58020c00 	.word	0x58020c00

080031ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031ac:	e7fe      	b.n	80031ac <NMI_Handler>
 80031ae:	bf00      	nop

080031b0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b0:	e7fe      	b.n	80031b0 <HardFault_Handler>
 80031b2:	bf00      	nop

080031b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b4:	e7fe      	b.n	80031b4 <MemManage_Handler>
 80031b6:	bf00      	nop

080031b8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <BusFault_Handler>
 80031ba:	bf00      	nop

080031bc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031bc:	e7fe      	b.n	80031bc <UsageFault_Handler>
 80031be:	bf00      	nop

080031c0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop

080031c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop

080031c8 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop

080031cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031cc:	f000 b968 	b.w	80034a0 <HAL_IncTick>

080031d0 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031d0:	4801      	ldr	r0, [pc, #4]	@ (80031d8 <DMA1_Stream0_IRQHandler+0x8>)
 80031d2:	f002 bc4b 	b.w	8005a6c <HAL_DMA_IRQHandler>
 80031d6:	bf00      	nop
 80031d8:	2406d508 	.word	0x2406d508

080031dc <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80031dc:	4801      	ldr	r0, [pc, #4]	@ (80031e4 <DMA1_Stream1_IRQHandler+0x8>)
 80031de:	f002 bc45 	b.w	8005a6c <HAL_DMA_IRQHandler>
 80031e2:	bf00      	nop
 80031e4:	2406d47c 	.word	0x2406d47c

080031e8 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80031e8:	4801      	ldr	r0, [pc, #4]	@ (80031f0 <ADC_IRQHandler+0x8>)
 80031ea:	f000 b97b 	b.w	80034e4 <HAL_ADC_IRQHandler>
 80031ee:	bf00      	nop
 80031f0:	2406d580 	.word	0x2406d580

080031f4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031f4:	4801      	ldr	r0, [pc, #4]	@ (80031fc <USART1_IRQHandler+0x8>)
 80031f6:	f005 bd1b 	b.w	8008c30 <HAL_UART_IRQHandler>
 80031fa:	bf00      	nop
 80031fc:	2406d39c 	.word	0x2406d39c

08003200 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003200:	4801      	ldr	r0, [pc, #4]	@ (8003208 <USART2_IRQHandler+0x8>)
 8003202:	f005 bd15 	b.w	8008c30 <HAL_UART_IRQHandler>
 8003206:	bf00      	nop
 8003208:	2406d308 	.word	0x2406d308

0800320c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800320c:	4801      	ldr	r0, [pc, #4]	@ (8003214 <TIM6_DAC_IRQHandler+0x8>)
 800320e:	f001 ba01 	b.w	8004614 <HAL_DAC_IRQHandler>
 8003212:	bf00      	nop
 8003214:	2406d4f4 	.word	0x2406d4f4

08003218 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003218:	2001      	movs	r0, #1
 800321a:	4770      	bx	lr

0800321c <_kill>:

int _kill(int pid, int sig)
{
 800321c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800321e:	f008 fa61 	bl	800b6e4 <__errno>
 8003222:	2216      	movs	r2, #22
 8003224:	4603      	mov	r3, r0
  return -1;
}
 8003226:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  errno = EINVAL;
 800322a:	601a      	str	r2, [r3, #0]
}
 800322c:	bd08      	pop	{r3, pc}
 800322e:	bf00      	nop

08003230 <_exit>:

void _exit (int status)
{
 8003230:	b508      	push	{r3, lr}
  errno = EINVAL;
 8003232:	f008 fa57 	bl	800b6e4 <__errno>
 8003236:	2316      	movs	r3, #22
 8003238:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800323a:	e7fe      	b.n	800323a <_exit+0xa>

0800323c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800323c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323e:	1e16      	subs	r6, r2, #0
 8003240:	dd07      	ble.n	8003252 <_read+0x16>
 8003242:	460c      	mov	r4, r1
 8003244:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8003246:	f3af 8000 	nop.w
 800324a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800324e:	42a5      	cmp	r5, r4
 8003250:	d1f9      	bne.n	8003246 <_read+0xa>
  }

  return len;
}
 8003252:	4630      	mov	r0, r6
 8003254:	bd70      	pop	{r4, r5, r6, pc}
 8003256:	bf00      	nop

08003258 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003258:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325a:	1e16      	subs	r6, r2, #0
 800325c:	dd07      	ble.n	800326e <_write+0x16>
 800325e:	460c      	mov	r4, r1
 8003260:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8003262:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003266:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326a:	42a5      	cmp	r5, r4
 800326c:	d1f9      	bne.n	8003262 <_write+0xa>
  }
  return len;
}
 800326e:	4630      	mov	r0, r6
 8003270:	bd70      	pop	{r4, r5, r6, pc}
 8003272:	bf00      	nop

08003274 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop

0800327c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800327c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8003280:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8003282:	604b      	str	r3, [r1, #4]
}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop

08003288 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003288:	2001      	movs	r0, #1
 800328a:	4770      	bx	lr

0800328c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800328c:	2000      	movs	r0, #0
 800328e:	4770      	bx	lr

08003290 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003290:	490d      	ldr	r1, [pc, #52]	@ (80032c8 <_sbrk+0x38>)
{
 8003292:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003294:	4a0d      	ldr	r2, [pc, #52]	@ (80032cc <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8003296:	6808      	ldr	r0, [r1, #0]
{
 8003298:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800329a:	4c0d      	ldr	r4, [pc, #52]	@ (80032d0 <_sbrk+0x40>)
 800329c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800329e:	b120      	cbz	r0, 80032aa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032a0:	4403      	add	r3, r0
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d807      	bhi.n	80032b6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80032a6:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80032a8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80032aa:	4c0a      	ldr	r4, [pc, #40]	@ (80032d4 <_sbrk+0x44>)
 80032ac:	4620      	mov	r0, r4
 80032ae:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80032b0:	4403      	add	r3, r0
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d9f7      	bls.n	80032a6 <_sbrk+0x16>
    errno = ENOMEM;
 80032b6:	f008 fa15 	bl	800b6e4 <__errno>
 80032ba:	220c      	movs	r2, #12
 80032bc:	4603      	mov	r3, r0
    return (void *)-1;
 80032be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOMEM;
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	bd10      	pop	{r4, pc}
 80032c6:	bf00      	nop
 80032c8:	2406f5e8 	.word	0x2406f5e8
 80032cc:	24080000 	.word	0x24080000
 80032d0:	00000400 	.word	0x00000400
 80032d4:	2406f740 	.word	0x2406f740

080032d8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032d8:	4927      	ldr	r1, [pc, #156]	@ (8003378 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032da:	4a28      	ldr	r2, [pc, #160]	@ (800337c <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80032e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 80032e4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032ea:	6813      	ldr	r3, [r2, #0]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	2b06      	cmp	r3, #6
 80032f2:	d805      	bhi.n	8003300 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032f4:	6813      	ldr	r3, [r2, #0]
 80032f6:	f023 030f 	bic.w	r3, r3, #15
 80032fa:	f043 0307 	orr.w	r3, r3, #7
 80032fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003300:	4b1f      	ldr	r3, [pc, #124]	@ (8003380 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003302:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003304:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8003306:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003308:	481c      	ldr	r0, [pc, #112]	@ (800337c <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800330a:	f041 0101 	orr.w	r1, r1, #1
 800330e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003310:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003312:	6819      	ldr	r1, [r3, #0]
 8003314:	400a      	ands	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003318:	6803      	ldr	r3, [r0, #0]
 800331a:	071b      	lsls	r3, r3, #28
 800331c:	d505      	bpl.n	800332a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800331e:	6803      	ldr	r3, [r0, #0]
 8003320:	f023 030f 	bic.w	r3, r3, #15
 8003324:	f043 0307 	orr.w	r3, r3, #7
 8003328:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800332a:	4b15      	ldr	r3, [pc, #84]	@ (8003380 <SystemInit+0xa8>)
 800332c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800332e:	4916      	ldr	r1, [pc, #88]	@ (8003388 <SystemInit+0xb0>)
  RCC->PLLCFGR = 0x01FF0000;
 8003330:	4816      	ldr	r0, [pc, #88]	@ (800338c <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 8003332:	4c17      	ldr	r4, [pc, #92]	@ (8003390 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8003334:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003336:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003338:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800333a:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800333c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800333e:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003340:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003342:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003344:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003346:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003348:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800334a:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800334c:	4811      	ldr	r0, [pc, #68]	@ (8003394 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 800334e:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8003352:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8003354:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003356:	6803      	ldr	r3, [r0, #0]
 8003358:	f36f 030f 	bfc	r3, #0, #16
 800335c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003360:	d203      	bcs.n	800336a <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003362:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <SystemInit+0xc0>)
 8003364:	2201      	movs	r2, #1
 8003366:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800336a:	4b0c      	ldr	r3, [pc, #48]	@ (800339c <SystemInit+0xc4>)
 800336c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003370:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003374:	601a      	str	r2, [r3, #0]
}
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00
 800337c:	52002000 	.word	0x52002000
 8003380:	58024400 	.word	0x58024400
 8003384:	eaf6ed7f 	.word	0xeaf6ed7f
 8003388:	01010280 	.word	0x01010280
 800338c:	01ff0000 	.word	0x01ff0000
 8003390:	02020200 	.word	0x02020200
 8003394:	5c001000 	.word	0x5c001000
 8003398:	51008000 	.word	0x51008000
 800339c:	52004000 	.word	0x52004000

080033a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80033a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033a4:	f7ff ff98 	bl	80032d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033a8:	480c      	ldr	r0, [pc, #48]	@ (80033dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033aa:	490d      	ldr	r1, [pc, #52]	@ (80033e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033ac:	4a0d      	ldr	r2, [pc, #52]	@ (80033e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b0:	e002      	b.n	80033b8 <LoopCopyDataInit>

080033b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033b6:	3304      	adds	r3, #4

080033b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033bc:	d3f9      	bcc.n	80033b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033be:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033c0:	4c0a      	ldr	r4, [pc, #40]	@ (80033ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80033c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c4:	e001      	b.n	80033ca <LoopFillZerobss>

080033c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c8:	3204      	adds	r2, #4

080033ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033cc:	d3fb      	bcc.n	80033c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033ce:	f008 f98f 	bl	800b6f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033d2:	f7fe fdbb 	bl	8001f4c <main>
  bx  lr
 80033d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80033dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80033e0:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80033e4:	080842bc 	.word	0x080842bc
  ldr r2, =_sbss
 80033e8:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 80033ec:	2406f73c 	.word	0x2406f73c

080033f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f0:	e7fe      	b.n	80033f0 <ADC3_IRQHandler>
	...

080033f4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80033f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <HAL_InitTick+0x40>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b90b      	cbnz	r3, 80033fe <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80033fa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80033fc:	4770      	bx	lr
{
 80033fe:	b510      	push	{r4, lr}
 8003400:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003402:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003406:	4a0c      	ldr	r2, [pc, #48]	@ (8003438 <HAL_InitTick+0x44>)
 8003408:	fbb0 f3f3 	udiv	r3, r0, r3
 800340c:	6810      	ldr	r0, [r2, #0]
 800340e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003412:	f000 ffe9 	bl	80043e8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003416:	2c0f      	cmp	r4, #15
 8003418:	d800      	bhi.n	800341c <HAL_InitTick+0x28>
 800341a:	b108      	cbz	r0, 8003420 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800341c:	2001      	movs	r0, #1
}
 800341e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003420:	2200      	movs	r2, #0
 8003422:	4621      	mov	r1, r4
 8003424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003428:	f000 ff94 	bl	8004354 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <HAL_InitTick+0x48>)
 800342e:	2000      	movs	r0, #0
 8003430:	601c      	str	r4, [r3, #0]
}
 8003432:	bd10      	pop	{r4, pc}
 8003434:	24000020 	.word	0x24000020
 8003438:	2400001c 	.word	0x2400001c
 800343c:	24000024 	.word	0x24000024

08003440 <HAL_Init>:
{
 8003440:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003442:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003444:	4c12      	ldr	r4, [pc, #72]	@ (8003490 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003446:	f000 ff73 	bl	8004330 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800344a:	f003 faaf 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 800344e:	4b11      	ldr	r3, [pc, #68]	@ (8003494 <HAL_Init+0x54>)
 8003450:	4911      	ldr	r1, [pc, #68]	@ (8003498 <HAL_Init+0x58>)
 8003452:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003454:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003456:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800345a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800345e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003460:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003462:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8003466:	490d      	ldr	r1, [pc, #52]	@ (800349c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003468:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800346c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800346e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8003472:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003474:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003476:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003478:	f7ff ffbc 	bl	80033f4 <HAL_InitTick>
 800347c:	b110      	cbz	r0, 8003484 <HAL_Init+0x44>
    return HAL_ERROR;
 800347e:	2401      	movs	r4, #1
}
 8003480:	4620      	mov	r0, r4
 8003482:	bd10      	pop	{r4, pc}
 8003484:	4604      	mov	r4, r0
  HAL_MspInit();
 8003486:	f7ff fc57 	bl	8002d38 <HAL_MspInit>
}
 800348a:	4620      	mov	r0, r4
 800348c:	bd10      	pop	{r4, pc}
 800348e:	bf00      	nop
 8003490:	24000018 	.word	0x24000018
 8003494:	58024400 	.word	0x58024400
 8003498:	08070ae4 	.word	0x08070ae4
 800349c:	2400001c 	.word	0x2400001c

080034a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80034a0:	4a03      	ldr	r2, [pc, #12]	@ (80034b0 <HAL_IncTick+0x10>)
 80034a2:	4b04      	ldr	r3, [pc, #16]	@ (80034b4 <HAL_IncTick+0x14>)
 80034a4:	6811      	ldr	r1, [r2, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	440b      	add	r3, r1
 80034aa:	6013      	str	r3, [r2, #0]
}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	2406f5ec 	.word	0x2406f5ec
 80034b4:	24000020 	.word	0x24000020

080034b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80034b8:	4b01      	ldr	r3, [pc, #4]	@ (80034c0 <HAL_GetTick+0x8>)
 80034ba:	6818      	ldr	r0, [r3, #0]
}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	2406f5ec 	.word	0x2406f5ec

080034c4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80034c4:	4b01      	ldr	r3, [pc, #4]	@ (80034cc <HAL_GetREVID+0x8>)
 80034c6:	6818      	ldr	r0, [r3, #0]
}
 80034c8:	0c00      	lsrs	r0, r0, #16
 80034ca:	4770      	bx	lr
 80034cc:	5c001000 	.word	0x5c001000

080034d0 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034d0:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80034d2:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034d4:	f7fe fc50 	bl	8001d78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034d8:	bd08      	pop	{r3, pc}
 80034da:	bf00      	nop

080034dc <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop

080034e0 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop

080034e4 <HAL_ADC_IRQHandler>:
{
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e6:	4a8e      	ldr	r2, [pc, #568]	@ (8003720 <HAL_ADC_IRQHandler+0x23c>)
{
 80034e8:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034ea:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034ec:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034ee:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034f0:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034f2:	f000 8095 	beq.w	8003620 <HAL_ADC_IRQHandler+0x13c>
 80034f6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80034fa:	4293      	cmp	r3, r2
 80034fc:	f000 8090 	beq.w	8003620 <HAL_ADC_IRQHandler+0x13c>
 8003500:	4a88      	ldr	r2, [pc, #544]	@ (8003724 <HAL_ADC_IRQHandler+0x240>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003502:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003504:	07a9      	lsls	r1, r5, #30
 8003506:	f007 071f 	and.w	r7, r7, #31
 800350a:	d502      	bpl.n	8003512 <HAL_ADC_IRQHandler+0x2e>
 800350c:	07b2      	lsls	r2, r6, #30
 800350e:	f100 80aa 	bmi.w	8003666 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003512:	0769      	lsls	r1, r5, #29
 8003514:	d579      	bpl.n	800360a <HAL_ADC_IRQHandler+0x126>
 8003516:	0772      	lsls	r2, r6, #29
 8003518:	d577      	bpl.n	800360a <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800351a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800351c:	06d2      	lsls	r2, r2, #27
 800351e:	d403      	bmi.n	8003528 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003526:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800352e:	d11c      	bne.n	800356a <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003530:	4a7d      	ldr	r2, [pc, #500]	@ (8003728 <HAL_ADC_IRQHandler+0x244>)
 8003532:	4293      	cmp	r3, r2
 8003534:	f000 80e7 	beq.w	8003706 <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003538:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800353a:	0491      	lsls	r1, r2, #18
 800353c:	d415      	bmi.n	800356a <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	0712      	lsls	r2, r2, #28
 8003542:	d512      	bpl.n	800356a <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	0750      	lsls	r0, r2, #29
 8003548:	f100 80f2 	bmi.w	8003730 <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	f022 020c 	bic.w	r2, r2, #12
 8003552:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003554:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003556:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800355a:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800355c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800355e:	04d9      	lsls	r1, r3, #19
 8003560:	d403      	bmi.n	800356a <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003562:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800356a:	4620      	mov	r0, r4
 800356c:	f7fe fc24 	bl	8001db8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	220c      	movs	r2, #12
 8003574:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003576:	06aa      	lsls	r2, r5, #26
 8003578:	d54d      	bpl.n	8003616 <HAL_ADC_IRQHandler+0x132>
 800357a:	06b0      	lsls	r0, r6, #26
 800357c:	d54b      	bpl.n	8003616 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800357e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003580:	06d0      	lsls	r0, r2, #27
 8003582:	d403      	bmi.n	800358c <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003584:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003586:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800358a:	6562      	str	r2, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800358c:	4966      	ldr	r1, [pc, #408]	@ (8003728 <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800358e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003590:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003592:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003594:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
 8003598:	d073      	beq.n	8003682 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800359a:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800359c:	b9d2      	cbnz	r2, 80035d4 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800359e:	018a      	lsls	r2, r1, #6
 80035a0:	f100 80a9 	bmi.w	80036f6 <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	0650      	lsls	r0, r2, #25
 80035a8:	d514      	bpl.n	80035d4 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80035aa:	0289      	lsls	r1, r1, #10
 80035ac:	d412      	bmi.n	80035d4 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	0712      	lsls	r2, r2, #28
 80035b2:	f100 80c8 	bmi.w	8003746 <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035bc:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035c4:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80035c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035c8:	05d8      	lsls	r0, r3, #23
 80035ca:	d403      	bmi.n	80035d4 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035d4:	4620      	mov	r0, r4
 80035d6:	f000 fe3f 	bl	8004258 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	2260      	movs	r2, #96	@ 0x60
 80035de:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035e0:	0629      	lsls	r1, r5, #24
 80035e2:	d501      	bpl.n	80035e8 <HAL_ADC_IRQHandler+0x104>
 80035e4:	0632      	lsls	r2, r6, #24
 80035e6:	d45f      	bmi.n	80036a8 <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035e8:	05e8      	lsls	r0, r5, #23
 80035ea:	d501      	bpl.n	80035f0 <HAL_ADC_IRQHandler+0x10c>
 80035ec:	05f1      	lsls	r1, r6, #23
 80035ee:	d466      	bmi.n	80036be <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80035f0:	05aa      	lsls	r2, r5, #22
 80035f2:	d501      	bpl.n	80035f8 <HAL_ADC_IRQHandler+0x114>
 80035f4:	05b0      	lsls	r0, r6, #22
 80035f6:	d44b      	bmi.n	8003690 <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80035f8:	06e9      	lsls	r1, r5, #27
 80035fa:	d501      	bpl.n	8003600 <HAL_ADC_IRQHandler+0x11c>
 80035fc:	06f2      	lsls	r2, r6, #27
 80035fe:	d411      	bmi.n	8003624 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003600:	0569      	lsls	r1, r5, #21
 8003602:	d501      	bpl.n	8003608 <HAL_ADC_IRQHandler+0x124>
 8003604:	0572      	lsls	r2, r6, #21
 8003606:	d466      	bmi.n	80036d6 <HAL_ADC_IRQHandler+0x1f2>
}
 8003608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800360a:	0728      	lsls	r0, r5, #28
 800360c:	d5b3      	bpl.n	8003576 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800360e:	0731      	lsls	r1, r6, #28
 8003610:	d483      	bmi.n	800351a <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003612:	06aa      	lsls	r2, r5, #26
 8003614:	d4b1      	bmi.n	800357a <HAL_ADC_IRQHandler+0x96>
 8003616:	0669      	lsls	r1, r5, #25
 8003618:	d5e2      	bpl.n	80035e0 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800361a:	0672      	lsls	r2, r6, #25
 800361c:	d5e0      	bpl.n	80035e0 <HAL_ADC_IRQHandler+0xfc>
 800361e:	e7ae      	b.n	800357e <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003620:	4a42      	ldr	r2, [pc, #264]	@ (800372c <HAL_ADC_IRQHandler+0x248>)
 8003622:	e76e      	b.n	8003502 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003624:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003626:	b17a      	cbz	r2, 8003648 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003628:	2f00      	cmp	r7, #0
 800362a:	d075      	beq.n	8003718 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800362c:	4a3c      	ldr	r2, [pc, #240]	@ (8003720 <HAL_ADC_IRQHandler+0x23c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	f000 8087 	beq.w	8003742 <HAL_ADC_IRQHandler+0x25e>
 8003634:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003638:	4293      	cmp	r3, r2
 800363a:	f000 8082 	beq.w	8003742 <HAL_ADC_IRQHandler+0x25e>
 800363e:	4a39      	ldr	r2, [pc, #228]	@ (8003724 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003640:	6892      	ldr	r2, [r2, #8]
 8003642:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 8003646:	d00b      	beq.n	8003660 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003648:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_ADC_ErrorCallback(hadc);
 800364a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800364c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003650:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003652:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 800365a:	f7ff ff41 	bl	80034e0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	2210      	movs	r2, #16
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e7cc      	b.n	8003600 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003666:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003668:	06d8      	lsls	r0, r3, #27
 800366a:	d403      	bmi.n	8003674 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800366c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800366e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003672:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003674:	4620      	mov	r0, r4
 8003676:	f000 fdf7 	bl	8004268 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	2202      	movs	r2, #2
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e747      	b.n	8003512 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003682:	21c1      	movs	r1, #193	@ 0xc1
 8003684:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003686:	07c9      	lsls	r1, r1, #31
 8003688:	d487      	bmi.n	800359a <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800368a:	4925      	ldr	r1, [pc, #148]	@ (8003720 <HAL_ADC_IRQHandler+0x23c>)
 800368c:	68c9      	ldr	r1, [r1, #12]
 800368e:	e785      	b.n	800359c <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003690:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003692:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003698:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800369a:	f000 fde3 	bl	8004264 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e7a7      	b.n	80035f8 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036aa:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b0:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036b2:	f7ff ff13 	bl	80034dc <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	2280      	movs	r2, #128	@ 0x80
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e794      	b.n	80035e8 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80036be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80036c0:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80036c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c6:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80036c8:	f000 fdca 	bl	8004260 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e78c      	b.n	80035f0 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036dc:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036e2:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036e4:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80036e6:	f042 0208 	orr.w	r2, r2, #8
 80036ea:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036ec:	6019      	str	r1, [r3, #0]
}
 80036ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036f2:	f000 bdb3 	b.w	800425c <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80036f6:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80036fa:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80036fe:	4302      	orrs	r2, r0
 8003700:	f47f af68 	bne.w	80035d4 <HAL_ADC_IRQHandler+0xf0>
 8003704:	e74e      	b.n	80035a4 <HAL_ADC_IRQHandler+0xc0>
 8003706:	f240 2221 	movw	r2, #545	@ 0x221
 800370a:	40fa      	lsrs	r2, r7
 800370c:	07d0      	lsls	r0, r2, #31
 800370e:	f53f af13 	bmi.w	8003538 <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003712:	4a03      	ldr	r2, [pc, #12]	@ (8003720 <HAL_ADC_IRQHandler+0x23c>)
 8003714:	68d2      	ldr	r2, [r2, #12]
 8003716:	e710      	b.n	800353a <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	0790      	lsls	r0, r2, #30
 800371c:	d0a0      	beq.n	8003660 <HAL_ADC_IRQHandler+0x17c>
 800371e:	e793      	b.n	8003648 <HAL_ADC_IRQHandler+0x164>
 8003720:	40022000 	.word	0x40022000
 8003724:	58026300 	.word	0x58026300
 8003728:	40022100 	.word	0x40022100
 800372c:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003730:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003732:	f043 0310 	orr.w	r3, r3, #16
 8003736:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003738:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003740:	e713      	b.n	800356a <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003742:	4a05      	ldr	r2, [pc, #20]	@ (8003758 <HAL_ADC_IRQHandler+0x274>)
 8003744:	e77c      	b.n	8003640 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003746:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003748:	f043 0310 	orr.w	r3, r3, #16
 800374c:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003756:	e73d      	b.n	80035d4 <HAL_ADC_IRQHandler+0xf0>
 8003758:	40022300 	.word	0x40022300

0800375c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800375c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800375e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003760:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003764:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
{
 8003766:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003768:	d11d      	bne.n	80037a6 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800376a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800376c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003770:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003772:	680a      	ldr	r2, [r1, #0]
 8003774:	f012 0f08 	tst.w	r2, #8
 8003778:	68ca      	ldr	r2, [r1, #12]
 800377a:	d01b      	beq.n	80037b4 <ADC_DMAConvCplt+0x58>
 800377c:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8003780:	d10d      	bne.n	800379e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003782:	68ca      	ldr	r2, [r1, #12]
 8003784:	0494      	lsls	r4, r2, #18
 8003786:	d40a      	bmi.n	800379e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800378a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800378e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003792:	04d1      	lsls	r1, r2, #19
 8003794:	d403      	bmi.n	800379e <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003796:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe fb0a 	bl	8001db8 <HAL_ADC_ConvCpltCallback>
}
 80037a4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037a6:	06d2      	lsls	r2, r2, #27
 80037a8:	d40a      	bmi.n	80037c0 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80037ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b2:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80037b4:	0790      	lsls	r0, r2, #30
 80037b6:	d0e7      	beq.n	8003788 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fafd 	bl	8001db8 <HAL_ADC_ConvCpltCallback>
 80037be:	e7f1      	b.n	80037a4 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fe8d 	bl	80034e0 <HAL_ADC_ErrorCallback>
}
 80037c6:	bd10      	pop	{r4, pc}

080037c8 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80037ca:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037cc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80037ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037d2:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037d4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80037d6:	f043 0304 	orr.w	r3, r3, #4
 80037da:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037dc:	f7ff fe80 	bl	80034e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037e0:	bd08      	pop	{r3, pc}
 80037e2:	bf00      	nop

080037e4 <HAL_ADC_ConfigChannel>:
{
 80037e4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80037e6:	2200      	movs	r2, #0
{
 80037e8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80037ea:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80037ec:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 80037f0:	2a01      	cmp	r2, #1
 80037f2:	f000 80ef 	beq.w	80039d4 <HAL_ADC_ConfigChannel+0x1f0>
 80037f6:	2401      	movs	r4, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037f8:	6802      	ldr	r2, [r0, #0]
 80037fa:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80037fc:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003800:	6890      	ldr	r0, [r2, #8]
 8003802:	0745      	lsls	r5, r0, #29
 8003804:	d509      	bpl.n	800381a <HAL_ADC_ConfigChannel+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003806:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8003808:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800380a:	f042 0220 	orr.w	r2, r2, #32
 800380e:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8003816:	b002      	add	sp, #8
 8003818:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800381a:	680d      	ldr	r5, [r1, #0]
 800381c:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800381e:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003822:	db0d      	blt.n	8003840 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003824:	f3c5 0613 	ubfx	r6, r5, #0, #20
 8003828:	2e00      	cmp	r6, #0
 800382a:	f000 80c1 	beq.w	80039b0 <HAL_ADC_ConfigChannel+0x1cc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003832:	b115      	cbz	r5, 800383a <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003834:	fab5 f585 	clz	r5, r5
 8003838:	40ac      	lsls	r4, r5
 800383a:	69d5      	ldr	r5, [r2, #28]
 800383c:	432c      	orrs	r4, r5
 800383e:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003840:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8003842:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003846:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 800384a:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800384e:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8003850:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003854:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8003858:	fa0c fc04 	lsl.w	ip, ip, r4
 800385c:	40a0      	lsls	r0, r4
 800385e:	f85e 4005 	ldr.w	r4, [lr, r5]
 8003862:	ea24 0c0c 	bic.w	ip, r4, ip
 8003866:	ea4c 0000 	orr.w	r0, ip, r0
 800386a:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800386e:	6890      	ldr	r0, [r2, #8]
 8003870:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003874:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003876:	d101      	bne.n	800387c <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003878:	0700      	lsls	r0, r0, #28
 800387a:	d542      	bpl.n	8003902 <HAL_ADC_ConfigChannel+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800387c:	6890      	ldr	r0, [r2, #8]
 800387e:	07c6      	lsls	r6, r0, #31
 8003880:	d43d      	bmi.n	80038fe <HAL_ADC_ConfigChannel+0x11a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003882:	68cd      	ldr	r5, [r1, #12]
 8003884:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8003886:	f005 0618 	and.w	r6, r5, #24
 800388a:	48a9      	ldr	r0, [pc, #676]	@ (8003b30 <HAL_ADC_ConfigChannel+0x34c>)
 800388c:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8003890:	40f0      	lsrs	r0, r6
 8003892:	f3c4 0613 	ubfx	r6, r4, #0, #20
 8003896:	4020      	ands	r0, r4
 8003898:	ea21 0106 	bic.w	r1, r1, r6
 800389c:	4301      	orrs	r1, r0
 800389e:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038a2:	49a4      	ldr	r1, [pc, #656]	@ (8003b34 <HAL_ADC_ConfigChannel+0x350>)
 80038a4:	428d      	cmp	r5, r1
 80038a6:	f000 808a 	beq.w	80039be <HAL_ADC_ConfigChannel+0x1da>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038aa:	2c00      	cmp	r4, #0
 80038ac:	da27      	bge.n	80038fe <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ae:	49a2      	ldr	r1, [pc, #648]	@ (8003b38 <HAL_ADC_ConfigChannel+0x354>)
 80038b0:	428a      	cmp	r2, r1
 80038b2:	f000 80bd 	beq.w	8003a30 <HAL_ADC_ConfigChannel+0x24c>
 80038b6:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 80038ba:	428a      	cmp	r2, r1
 80038bc:	f000 80b8 	beq.w	8003a30 <HAL_ADC_ConfigChannel+0x24c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038c0:	489e      	ldr	r0, [pc, #632]	@ (8003b3c <HAL_ADC_ConfigChannel+0x358>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038c2:	499f      	ldr	r1, [pc, #636]	@ (8003b40 <HAL_ADC_ConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038c4:	6886      	ldr	r6, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038c6:	688d      	ldr	r5, [r1, #8]
 80038c8:	07ed      	lsls	r5, r5, #31
 80038ca:	d49c      	bmi.n	8003806 <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038cc:	4d9d      	ldr	r5, [pc, #628]	@ (8003b44 <HAL_ADC_ConfigChannel+0x360>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038ce:	f006 7ce0 	and.w	ip, r6, #29360128	@ 0x1c00000
 80038d2:	42ac      	cmp	r4, r5
 80038d4:	f000 8156 	beq.w	8003b84 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038d8:	4d9b      	ldr	r5, [pc, #620]	@ (8003b48 <HAL_ADC_ConfigChannel+0x364>)
 80038da:	42ac      	cmp	r4, r5
 80038dc:	f000 8118 	beq.w	8003b10 <HAL_ADC_ConfigChannel+0x32c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038e0:	4d9a      	ldr	r5, [pc, #616]	@ (8003b4c <HAL_ADC_ConfigChannel+0x368>)
 80038e2:	42ac      	cmp	r4, r5
 80038e4:	d10b      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 80038e6:	0274      	lsls	r4, r6, #9
 80038e8:	d409      	bmi.n	80038fe <HAL_ADC_ConfigChannel+0x11a>
 80038ea:	428a      	cmp	r2, r1
 80038ec:	d107      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038ee:	6882      	ldr	r2, [r0, #8]
 80038f0:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80038f4:	ea42 020c 	orr.w	r2, r2, ip
 80038f8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80038fc:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038fe:	2000      	movs	r0, #0
 8003900:	e786      	b.n	8003810 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003902:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003904:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 8003908:	f04f 0e07 	mov.w	lr, #7
 800390c:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800390e:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8003910:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003914:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003918:	fa0e fe04 	lsl.w	lr, lr, r4
 800391c:	fa06 f404 	lsl.w	r4, r6, r4
 8003920:	f85c 0005 	ldr.w	r0, [ip, r5]
 8003924:	ea20 000e 	bic.w	r0, r0, lr
 8003928:	4320      	orrs	r0, r4
 800392a:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800392e:	4888      	ldr	r0, [pc, #544]	@ (8003b50 <HAL_ADC_ConfigChannel+0x36c>)
 8003930:	694d      	ldr	r5, [r1, #20]
 8003932:	6800      	ldr	r0, [r0, #0]
 8003934:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8003938:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 800393c:	68d0      	ldr	r0, [r2, #12]
 800393e:	d039      	beq.n	80039b4 <HAL_ADC_ConfigChannel+0x1d0>
 8003940:	f010 0f10 	tst.w	r0, #16
 8003944:	68d0      	ldr	r0, [r2, #12]
 8003946:	d035      	beq.n	80039b4 <HAL_ADC_ConfigChannel+0x1d0>
 8003948:	0840      	lsrs	r0, r0, #1
 800394a:	f000 0008 	and.w	r0, r0, #8
 800394e:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003950:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003952:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003954:	2e04      	cmp	r6, #4
 8003956:	d040      	beq.n	80039da <HAL_ADC_ConfigChannel+0x1f6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003958:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 800395c:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8003960:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 8003964:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8003968:	4320      	orrs	r0, r4
 800396a:	4328      	orrs	r0, r5
 800396c:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003970:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003972:	690d      	ldr	r5, [r1, #16]
 8003974:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003978:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 800397c:	fab4 f484 	clz	r4, r4
 8003980:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003984:	0964      	lsrs	r4, r4, #5
 8003986:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 800398a:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800398e:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003990:	690d      	ldr	r5, [r1, #16]
 8003992:	f1a0 0001 	sub.w	r0, r0, #1
 8003996:	6914      	ldr	r4, [r2, #16]
 8003998:	f005 051f 	and.w	r5, r5, #31
 800399c:	fab0 f080 	clz	r0, r0
 80039a0:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 80039a4:	0940      	lsrs	r0, r0, #5
 80039a6:	02c0      	lsls	r0, r0, #11
 80039a8:	40a8      	lsls	r0, r5
 80039aa:	4320      	orrs	r0, r4
 80039ac:	6110      	str	r0, [r2, #16]
}
 80039ae:	e765      	b.n	800387c <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80039b0:	4084      	lsls	r4, r0
 80039b2:	e742      	b.n	800383a <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039b4:	f3c0 0082 	ubfx	r0, r0, #2, #3
 80039b8:	0040      	lsls	r0, r0, #1
 80039ba:	4085      	lsls	r5, r0
 80039bc:	e7c8      	b.n	8003950 <HAL_ADC_ConfigChannel+0x16c>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80039be:	495e      	ldr	r1, [pc, #376]	@ (8003b38 <HAL_ADC_ConfigChannel+0x354>)
 80039c0:	428a      	cmp	r2, r1
 80039c2:	d07a      	beq.n	8003aba <HAL_ADC_ConfigChannel+0x2d6>
 80039c4:	4963      	ldr	r1, [pc, #396]	@ (8003b54 <HAL_ADC_ConfigChannel+0x370>)
 80039c6:	428a      	cmp	r2, r1
 80039c8:	d040      	beq.n	8003a4c <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80039ca:	69d1      	ldr	r1, [r2, #28]
 80039cc:	f041 0101 	orr.w	r1, r1, #1
 80039d0:	61d1      	str	r1, [r2, #28]
}
 80039d2:	e76a      	b.n	80038aa <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 80039d4:	2002      	movs	r0, #2
}
 80039d6:	b002      	add	sp, #8
 80039d8:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039da:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 80039dc:	0684      	lsls	r4, r0, #26
 80039de:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 80039e2:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 80039e6:	d014      	beq.n	8003a12 <HAL_ADC_ConfigChannel+0x22e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039e8:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80039ea:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80039ee:	4284      	cmp	r4, r0
 80039f0:	d019      	beq.n	8003a26 <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039f2:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80039f4:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80039f8:	4284      	cmp	r4, r0
 80039fa:	d00f      	beq.n	8003a1c <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039fc:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80039fe:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003a02:	4284      	cmp	r4, r0
 8003a04:	f47f af3a 	bne.w	800387c <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003a08:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8003a0a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003a0e:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8003a10:	e734      	b.n	800387c <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a12:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8003a14:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003a18:	6610      	str	r0, [r2, #96]	@ 0x60
 8003a1a:	e7e5      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x204>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003a1c:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8003a1e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003a22:	6690      	str	r0, [r2, #104]	@ 0x68
 8003a24:	e7ea      	b.n	80039fc <HAL_ADC_ConfigChannel+0x218>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003a26:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8003a28:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003a2c:	6650      	str	r0, [r2, #100]	@ 0x64
 8003a2e:	e7e0      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x20e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a30:	4949      	ldr	r1, [pc, #292]	@ (8003b58 <HAL_ADC_ConfigChannel+0x374>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a32:	4a41      	ldr	r2, [pc, #260]	@ (8003b38 <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a34:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a36:	6892      	ldr	r2, [r2, #8]
 8003a38:	f012 0f01 	tst.w	r2, #1
 8003a3c:	4a45      	ldr	r2, [pc, #276]	@ (8003b54 <HAL_ADC_ConfigChannel+0x370>)
 8003a3e:	6892      	ldr	r2, [r2, #8]
 8003a40:	f47f aee1 	bne.w	8003806 <HAL_ADC_ConfigChannel+0x22>
 8003a44:	07d2      	lsls	r2, r2, #31
 8003a46:	f53f aede 	bmi.w	8003806 <HAL_ADC_ConfigChannel+0x22>
 8003a4a:	e758      	b.n	80038fe <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003a4c:	4943      	ldr	r1, [pc, #268]	@ (8003b5c <HAL_ADC_ConfigChannel+0x378>)
 8003a4e:	428c      	cmp	r4, r1
 8003a50:	d058      	beq.n	8003b04 <HAL_ADC_ConfigChannel+0x320>
 8003a52:	4943      	ldr	r1, [pc, #268]	@ (8003b60 <HAL_ADC_ConfigChannel+0x37c>)
 8003a54:	428c      	cmp	r4, r1
 8003a56:	d057      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x324>
 8003a58:	4942      	ldr	r1, [pc, #264]	@ (8003b64 <HAL_ADC_ConfigChannel+0x380>)
 8003a5a:	428c      	cmp	r4, r1
 8003a5c:	f000 80b5 	beq.w	8003bca <HAL_ADC_ConfigChannel+0x3e6>
 8003a60:	4941      	ldr	r1, [pc, #260]	@ (8003b68 <HAL_ADC_ConfigChannel+0x384>)
 8003a62:	428c      	cmp	r4, r1
 8003a64:	f000 80b3 	beq.w	8003bce <HAL_ADC_ConfigChannel+0x3ea>
 8003a68:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8003a6c:	3110      	adds	r1, #16
 8003a6e:	428c      	cmp	r4, r1
 8003a70:	f000 80af 	beq.w	8003bd2 <HAL_ADC_ConfigChannel+0x3ee>
 8003a74:	493d      	ldr	r1, [pc, #244]	@ (8003b6c <HAL_ADC_ConfigChannel+0x388>)
 8003a76:	428c      	cmp	r4, r1
 8003a78:	f000 80ad 	beq.w	8003bd6 <HAL_ADC_ConfigChannel+0x3f2>
 8003a7c:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8003a80:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8003a84:	428c      	cmp	r4, r1
 8003a86:	f000 80a8 	beq.w	8003bda <HAL_ADC_ConfigChannel+0x3f6>
 8003a8a:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8003a8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a92:	428c      	cmp	r4, r1
 8003a94:	f000 80a3 	beq.w	8003bde <HAL_ADC_ConfigChannel+0x3fa>
 8003a98:	4935      	ldr	r1, [pc, #212]	@ (8003b70 <HAL_ADC_ConfigChannel+0x38c>)
 8003a9a:	428c      	cmp	r4, r1
 8003a9c:	d195      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x1e6>
 8003a9e:	4935      	ldr	r1, [pc, #212]	@ (8003b74 <HAL_ADC_ConfigChannel+0x390>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	d031      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 8003aa8:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003aac:	2001      	movs	r0, #1
 8003aae:	fa00 f101 	lsl.w	r1, r0, r1
 8003ab2:	69d0      	ldr	r0, [r2, #28]
 8003ab4:	4301      	orrs	r1, r0
 8003ab6:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ab8:	e721      	b.n	80038fe <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003aba:	4928      	ldr	r1, [pc, #160]	@ (8003b5c <HAL_ADC_ConfigChannel+0x378>)
 8003abc:	428c      	cmp	r4, r1
 8003abe:	d021      	beq.n	8003b04 <HAL_ADC_ConfigChannel+0x320>
 8003ac0:	4927      	ldr	r1, [pc, #156]	@ (8003b60 <HAL_ADC_ConfigChannel+0x37c>)
 8003ac2:	428c      	cmp	r4, r1
 8003ac4:	d020      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x324>
 8003ac6:	4927      	ldr	r1, [pc, #156]	@ (8003b64 <HAL_ADC_ConfigChannel+0x380>)
 8003ac8:	428c      	cmp	r4, r1
 8003aca:	d07e      	beq.n	8003bca <HAL_ADC_ConfigChannel+0x3e6>
 8003acc:	4926      	ldr	r1, [pc, #152]	@ (8003b68 <HAL_ADC_ConfigChannel+0x384>)
 8003ace:	428c      	cmp	r4, r1
 8003ad0:	d07d      	beq.n	8003bce <HAL_ADC_ConfigChannel+0x3ea>
 8003ad2:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8003ad6:	3110      	adds	r1, #16
 8003ad8:	428c      	cmp	r4, r1
 8003ada:	d07a      	beq.n	8003bd2 <HAL_ADC_ConfigChannel+0x3ee>
 8003adc:	4923      	ldr	r1, [pc, #140]	@ (8003b6c <HAL_ADC_ConfigChannel+0x388>)
 8003ade:	428c      	cmp	r4, r1
 8003ae0:	d079      	beq.n	8003bd6 <HAL_ADC_ConfigChannel+0x3f2>
 8003ae2:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8003ae6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8003aea:	428c      	cmp	r4, r1
 8003aec:	d075      	beq.n	8003bda <HAL_ADC_ConfigChannel+0x3f6>
 8003aee:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8003af2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003af6:	428c      	cmp	r4, r1
 8003af8:	d071      	beq.n	8003bde <HAL_ADC_ConfigChannel+0x3fa>
 8003afa:	491f      	ldr	r1, [pc, #124]	@ (8003b78 <HAL_ADC_ConfigChannel+0x394>)
 8003afc:	428c      	cmp	r4, r1
 8003afe:	d1cb      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x2b4>
 8003b00:	491e      	ldr	r1, [pc, #120]	@ (8003b7c <HAL_ADC_ConfigChannel+0x398>)
 8003b02:	e7cd      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x2bc>
 8003b04:	2101      	movs	r1, #1
 8003b06:	e7cb      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x2bc>
 8003b08:	491d      	ldr	r1, [pc, #116]	@ (8003b80 <HAL_ADC_ConfigChannel+0x39c>)
 8003b0a:	e7c9      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x2bc>
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	e7d0      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x2ce>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b10:	01f5      	lsls	r5, r6, #7
 8003b12:	f53f aef4 	bmi.w	80038fe <HAL_ADC_ConfigChannel+0x11a>
 8003b16:	428a      	cmp	r2, r1
 8003b18:	f47f aef1 	bne.w	80038fe <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b1c:	6882      	ldr	r2, [r0, #8]
 8003b1e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003b22:	ea42 020c 	orr.w	r2, r2, ip
 8003b26:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003b2a:	6082      	str	r2, [r0, #8]
}
 8003b2c:	e6e7      	b.n	80038fe <HAL_ADC_ConfigChannel+0x11a>
 8003b2e:	bf00      	nop
 8003b30:	000fffff 	.word	0x000fffff
 8003b34:	47ff0000 	.word	0x47ff0000
 8003b38:	40022000 	.word	0x40022000
 8003b3c:	58026300 	.word	0x58026300
 8003b40:	58026000 	.word	0x58026000
 8003b44:	cb840000 	.word	0xcb840000
 8003b48:	c7520000 	.word	0xc7520000
 8003b4c:	cfb80000 	.word	0xcfb80000
 8003b50:	5c001000 	.word	0x5c001000
 8003b54:	40022100 	.word	0x40022100
 8003b58:	40022300 	.word	0x40022300
 8003b5c:	04300002 	.word	0x04300002
 8003b60:	08600004 	.word	0x08600004
 8003b64:	0c900008 	.word	0x0c900008
 8003b68:	10c00010 	.word	0x10c00010
 8003b6c:	2a000400 	.word	0x2a000400
 8003b70:	4b840000 	.word	0x4b840000
 8003b74:	4fb80000 	.word	0x4fb80000
 8003b78:	43210000 	.word	0x43210000
 8003b7c:	47520000 	.word	0x47520000
 8003b80:	19200040 	.word	0x19200040
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b84:	0236      	lsls	r6, r6, #8
 8003b86:	f53f aeba 	bmi.w	80038fe <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b8a:	428a      	cmp	r2, r1
 8003b8c:	f47f aeb7 	bne.w	80038fe <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b90:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b92:	4914      	ldr	r1, [pc, #80]	@ (8003be4 <HAL_ADC_ConfigChannel+0x400>)
 8003b94:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003b98:	ea42 020c 	orr.w	r2, r2, ip
 8003b9c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003ba0:	6082      	str	r2, [r0, #8]
 8003ba2:	680a      	ldr	r2, [r1, #0]
 8003ba4:	4910      	ldr	r1, [pc, #64]	@ (8003be8 <HAL_ADC_ConfigChannel+0x404>)
 8003ba6:	0992      	lsrs	r2, r2, #6
 8003ba8:	fba1 1202 	umull	r1, r2, r1, r2
 8003bac:	0992      	lsrs	r2, r2, #6
 8003bae:	3201      	adds	r2, #1
 8003bb0:	0052      	lsls	r2, r2, #1
 8003bb2:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003bb4:	9a01      	ldr	r2, [sp, #4]
 8003bb6:	2a00      	cmp	r2, #0
 8003bb8:	f43f aea1 	beq.w	80038fe <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 8003bbc:	9a01      	ldr	r2, [sp, #4]
 8003bbe:	3a01      	subs	r2, #1
 8003bc0:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003bc2:	9a01      	ldr	r2, [sp, #4]
 8003bc4:	2a00      	cmp	r2, #0
 8003bc6:	d1f9      	bne.n	8003bbc <HAL_ADC_ConfigChannel+0x3d8>
 8003bc8:	e699      	b.n	80038fe <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003bca:	4908      	ldr	r1, [pc, #32]	@ (8003bec <HAL_ADC_ConfigChannel+0x408>)
 8003bcc:	e768      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x2bc>
 8003bce:	4908      	ldr	r1, [pc, #32]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x40c>)
 8003bd0:	e766      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x2bc>
 8003bd2:	4908      	ldr	r1, [pc, #32]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x410>)
 8003bd4:	e764      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x2bc>
 8003bd6:	4908      	ldr	r1, [pc, #32]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x414>)
 8003bd8:	e762      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x2bc>
 8003bda:	4908      	ldr	r1, [pc, #32]	@ (8003bfc <HAL_ADC_ConfigChannel+0x418>)
 8003bdc:	e760      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x2bc>
 8003bde:	4908      	ldr	r1, [pc, #32]	@ (8003c00 <HAL_ADC_ConfigChannel+0x41c>)
 8003be0:	e75e      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x2bc>
 8003be2:	bf00      	nop
 8003be4:	2400001c 	.word	0x2400001c
 8003be8:	053e2d63 	.word	0x053e2d63
 8003bec:	1d500080 	.word	0x1d500080
 8003bf0:	21800100 	.word	0x21800100
 8003bf4:	25b00200 	.word	0x25b00200
 8003bf8:	2e300800 	.word	0x2e300800
 8003bfc:	32601000 	.word	0x32601000
 8003c00:	36902000 	.word	0x36902000

08003c04 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c04:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	07d1      	lsls	r1, r2, #31
 8003c0a:	d501      	bpl.n	8003c10 <ADC_Enable+0xc>
  return HAL_OK;
 8003c0c:	2000      	movs	r0, #0
}
 8003c0e:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c10:	6899      	ldr	r1, [r3, #8]
 8003c12:	4a23      	ldr	r2, [pc, #140]	@ (8003ca0 <ADC_Enable+0x9c>)
 8003c14:	4211      	tst	r1, r2
{
 8003c16:	b570      	push	{r4, r5, r6, lr}
 8003c18:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003c1a:	d12f      	bne.n	8003c7c <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 8003c1c:	6899      	ldr	r1, [r3, #8]
 8003c1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ca4 <ADC_Enable+0xa0>)
 8003c20:	400a      	ands	r2, r1
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003c28:	f7ff fc46 	bl	80034b8 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca8 <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 8003c30:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d02c      	beq.n	8003c90 <ADC_Enable+0x8c>
 8003c36:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d028      	beq.n	8003c90 <ADC_Enable+0x8c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c3e:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 8003c42:	f502 4284 	add.w	r2, r2, #16896	@ 0x4200
 8003c46:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	07d2      	lsls	r2, r2, #31
 8003c4c:	d414      	bmi.n	8003c78 <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 8003c4e:	4e15      	ldr	r6, [pc, #84]	@ (8003ca4 <ADC_Enable+0xa0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	07d0      	lsls	r0, r2, #31
 8003c54:	d404      	bmi.n	8003c60 <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	4032      	ands	r2, r6
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c60:	f7ff fc2a 	bl	80034b8 <HAL_GetTick>
 8003c64:	1b43      	subs	r3, r0, r5
 8003c66:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c68:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c6a:	d902      	bls.n	8003c72 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	07d1      	lsls	r1, r2, #31
 8003c70:	d504      	bpl.n	8003c7c <ADC_Enable+0x78>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	07d2      	lsls	r2, r2, #31
 8003c76:	d5eb      	bpl.n	8003c50 <ADC_Enable+0x4c>
  return HAL_OK;
 8003c78:	2000      	movs	r0, #0
}
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8003c7e:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c80:	f043 0310 	orr.w	r3, r3, #16
 8003c84:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c90:	4a06      	ldr	r2, [pc, #24]	@ (8003cac <ADC_Enable+0xa8>)
 8003c92:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c94:	06d6      	lsls	r6, r2, #27
 8003c96:	d0d7      	beq.n	8003c48 <ADC_Enable+0x44>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c98:	4a05      	ldr	r2, [pc, #20]	@ (8003cb0 <ADC_Enable+0xac>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d1d4      	bne.n	8003c48 <ADC_Enable+0x44>
 8003c9e:	e7eb      	b.n	8003c78 <ADC_Enable+0x74>
 8003ca0:	8000003f 	.word	0x8000003f
 8003ca4:	7fffffc0 	.word	0x7fffffc0
 8003ca8:	40022000 	.word	0x40022000
 8003cac:	40022300 	.word	0x40022300
 8003cb0:	40022100 	.word	0x40022100

08003cb4 <HAL_ADC_Start_DMA>:
{
 8003cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8003da8 <HAL_ADC_Start_DMA+0xf4>)
{
 8003cba:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cbc:	6800      	ldr	r0, [r0, #0]
{
 8003cbe:	460e      	mov	r6, r1
 8003cc0:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cc2:	4298      	cmp	r0, r3
 8003cc4:	d01c      	beq.n	8003d00 <HAL_ADC_Start_DMA+0x4c>
 8003cc6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003cca:	4298      	cmp	r0, r3
 8003ccc:	d018      	beq.n	8003d00 <HAL_ADC_Start_DMA+0x4c>
 8003cce:	4b37      	ldr	r3, [pc, #220]	@ (8003dac <HAL_ADC_Start_DMA+0xf8>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cd2:	6885      	ldr	r5, [r0, #8]
 8003cd4:	f015 0504 	ands.w	r5, r5, #4
 8003cd8:	d118      	bne.n	8003d0c <HAL_ADC_Start_DMA+0x58>
    __HAL_LOCK(hadc);
 8003cda:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8003cde:	2a01      	cmp	r2, #1
 8003ce0:	d014      	beq.n	8003d0c <HAL_ADC_Start_DMA+0x58>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ce2:	f003 081f 	and.w	r8, r3, #31
 8003ce6:	f240 2321 	movw	r3, #545	@ 0x221
 8003cea:	2001      	movs	r0, #1
 8003cec:	fa23 f308 	lsr.w	r3, r3, r8
 8003cf0:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cf4:	4003      	ands	r3, r0
 8003cf6:	d10c      	bne.n	8003d12 <HAL_ADC_Start_DMA+0x5e>
      __HAL_UNLOCK(hadc);
 8003cf8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8003cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d00:	4b2b      	ldr	r3, [pc, #172]	@ (8003db0 <HAL_ADC_Start_DMA+0xfc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d04:	6885      	ldr	r5, [r0, #8]
 8003d06:	f015 0504 	ands.w	r5, r5, #4
 8003d0a:	d0e6      	beq.n	8003cda <HAL_ADC_Start_DMA+0x26>
    __HAL_LOCK(hadc);
 8003d0c:	2002      	movs	r0, #2
}
 8003d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8003d12:	4620      	mov	r0, r4
 8003d14:	f7ff ff76 	bl	8003c04 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d140      	bne.n	8003d9e <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 8003d1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d1e:	4b25      	ldr	r3, [pc, #148]	@ (8003db4 <HAL_ADC_Start_DMA+0x100>)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d20:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8003d22:	4013      	ands	r3, r2
 8003d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d28:	6563      	str	r3, [r4, #84]	@ 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d2a:	f1b8 0f00 	cmp.w	r8, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_ADC_Start_DMA+0x82>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d30:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <HAL_ADC_Start_DMA+0x104>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d32:	4299      	cmp	r1, r3
 8003d34:	d003      	beq.n	8003d3e <HAL_ADC_Start_DMA+0x8a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d36:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d38:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d3c:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003d40:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8003d44:	d02e      	beq.n	8003da4 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d48:	f023 0306 	bic.w	r3, r3, #6
 8003d4c:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d4e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d50:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d52:	4d1a      	ldr	r5, [pc, #104]	@ (8003dbc <HAL_ADC_Start_DMA+0x108>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d54:	463b      	mov	r3, r7
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003d56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d58:	3140      	adds	r1, #64	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d5a:	63c5      	str	r5, [r0, #60]	@ 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d5c:	4d18      	ldr	r5, [pc, #96]	@ (8003dc0 <HAL_ADC_Start_DMA+0x10c>)
 8003d5e:	6405      	str	r5, [r0, #64]	@ 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d60:	4d18      	ldr	r5, [pc, #96]	@ (8003dc4 <HAL_ADC_Start_DMA+0x110>)
 8003d62:	64c5      	str	r5, [r0, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d64:	251c      	movs	r5, #28
 8003d66:	f841 5c40 	str.w	r5, [r1, #-64]
        __HAL_UNLOCK(hadc);
 8003d6a:	2500      	movs	r5, #0
 8003d6c:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d70:	f851 5c3c 	ldr.w	r5, [r1, #-60]
 8003d74:	f045 0510 	orr.w	r5, r5, #16
 8003d78:	f841 5c3c 	str.w	r5, [r1, #-60]
 8003d7c:	f851 5c34 	ldr.w	r5, [r1, #-52]
 8003d80:	f025 0503 	bic.w	r5, r5, #3
 8003d84:	4335      	orrs	r5, r6
 8003d86:	f841 5c34 	str.w	r5, [r1, #-52]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d8a:	f001 f8bb 	bl	8004f04 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d8e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003d90:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <HAL_ADC_Start_DMA+0x114>)
 8003d92:	6891      	ldr	r1, [r2, #8]
 8003d94:	400b      	ands	r3, r1
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	6093      	str	r3, [r2, #8]
}
 8003d9c:	e7b7      	b.n	8003d0e <HAL_ADC_Start_DMA+0x5a>
        __HAL_UNLOCK(hadc);
 8003d9e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8003da2:	e7b4      	b.n	8003d0e <HAL_ADC_Start_DMA+0x5a>
          ADC_CLEAR_ERRORCODE(hadc);
 8003da4:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003da6:	e7d2      	b.n	8003d4e <HAL_ADC_Start_DMA+0x9a>
 8003da8:	40022000 	.word	0x40022000
 8003dac:	58026300 	.word	0x58026300
 8003db0:	40022300 	.word	0x40022300
 8003db4:	fffff0fe 	.word	0xfffff0fe
 8003db8:	40022100 	.word	0x40022100
 8003dbc:	0800375d 	.word	0x0800375d
 8003dc0:	080034d1 	.word	0x080034d1
 8003dc4:	080037c9 	.word	0x080037c9
 8003dc8:	7fffffc0 	.word	0x7fffffc0

08003dcc <ADC_Disable>:
{
 8003dcc:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003dce:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	0795      	lsls	r5, r2, #30
 8003dd4:	d502      	bpl.n	8003ddc <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dd6:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003dd8:	2000      	movs	r0, #0
}
 8003dda:	bd38      	pop	{r3, r4, r5, pc}
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	07d4      	lsls	r4, r2, #31
 8003de0:	d5fa      	bpl.n	8003dd8 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	4604      	mov	r4, r0
 8003de6:	f002 020d 	and.w	r2, r2, #13
 8003dea:	2a01      	cmp	r2, #1
 8003dec:	d009      	beq.n	8003e02 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8003df0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df2:	f043 0310 	orr.w	r3, r3, #16
 8003df6:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003e02:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e04:	2103      	movs	r1, #3
 8003e06:	4a0d      	ldr	r2, [pc, #52]	@ (8003e3c <ADC_Disable+0x70>)
 8003e08:	4002      	ands	r2, r0
 8003e0a:	f042 0202 	orr.w	r2, r2, #2
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003e12:	f7ff fb51 	bl	80034b8 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e16:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003e18:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	07d9      	lsls	r1, r3, #31
 8003e1e:	d403      	bmi.n	8003e28 <ADC_Disable+0x5c>
 8003e20:	e7da      	b.n	8003dd8 <ADC_Disable+0xc>
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	07db      	lsls	r3, r3, #31
 8003e26:	d5d7      	bpl.n	8003dd8 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e28:	f7ff fb46 	bl	80034b8 <HAL_GetTick>
 8003e2c:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e2e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e30:	2802      	cmp	r0, #2
 8003e32:	d9f6      	bls.n	8003e22 <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	07d2      	lsls	r2, r2, #31
 8003e38:	d5f3      	bpl.n	8003e22 <ADC_Disable+0x56>
 8003e3a:	e7d8      	b.n	8003dee <ADC_Disable+0x22>
 8003e3c:	7fffffc0 	.word	0x7fffffc0

08003e40 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e40:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e42:	4a4f      	ldr	r2, [pc, #316]	@ (8003f80 <ADC_ConfigureBoostMode+0x140>)
{
 8003e44:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e46:	6803      	ldr	r3, [r0, #0]
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d024      	beq.n	8003e96 <ADC_ConfigureBoostMode+0x56>
 8003e4c:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d020      	beq.n	8003e96 <ADC_ConfigureBoostMode+0x56>
 8003e54:	4b4b      	ldr	r3, [pc, #300]	@ (8003f84 <ADC_ConfigureBoostMode+0x144>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003e5c:	d020      	beq.n	8003ea0 <ADC_ConfigureBoostMode+0x60>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e5e:	f002 ff5d 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003e62:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8003e64:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003e66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e6a:	d06d      	beq.n	8003f48 <ADC_ConfigureBoostMode+0x108>
 8003e6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e70:	d072      	beq.n	8003f58 <ADC_ConfigureBoostMode+0x118>
 8003e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e76:	d067      	beq.n	8003f48 <ADC_ConfigureBoostMode+0x108>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e78:	f7ff fb24 	bl	80034c4 <HAL_GetREVID>
 8003e7c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003e80:	4298      	cmp	r0, r3
 8003e82:	d82d      	bhi.n	8003ee0 <ADC_ConfigureBoostMode+0xa0>
  {
    if (freq > 20000000UL)
 8003e84:	4a40      	ldr	r2, [pc, #256]	@ (8003f88 <ADC_ConfigureBoostMode+0x148>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e86:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 8003e88:	4295      	cmp	r5, r2
 8003e8a:	d947      	bls.n	8003f1c <ADC_ConfigureBoostMode+0xdc>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e94:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e96:	4b3d      	ldr	r3, [pc, #244]	@ (8003f8c <ADC_ConfigureBoostMode+0x14c>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8003e9e:	d1de      	bne.n	8003e5e <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ea0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	f004 fa0d 	bl	80082c4 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8003eaa:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003eac:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8003eae:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003eb2:	d04d      	beq.n	8003f50 <ADC_ConfigureBoostMode+0x110>
 8003eb4:	d825      	bhi.n	8003f02 <ADC_ConfigureBoostMode+0xc2>
 8003eb6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003eba:	d04b      	beq.n	8003f54 <ADC_ConfigureBoostMode+0x114>
 8003ebc:	d84e      	bhi.n	8003f5c <ADC_ConfigureBoostMode+0x11c>
 8003ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ec2:	d008      	beq.n	8003ed6 <ADC_ConfigureBoostMode+0x96>
 8003ec4:	d855      	bhi.n	8003f72 <ADC_ConfigureBoostMode+0x132>
 8003ec6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003eca:	d004      	beq.n	8003ed6 <ADC_ConfigureBoostMode+0x96>
 8003ecc:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003ed0:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8003ed4:	d1d0      	bne.n	8003e78 <ADC_ConfigureBoostMode+0x38>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003ed6:	0c9b      	lsrs	r3, r3, #18
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003ede:	e7cb      	b.n	8003e78 <ADC_ConfigureBoostMode+0x38>
    if (freq <= 6250000UL)
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f90 <ADC_ConfigureBoostMode+0x150>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ee2:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 8003ee4:	4295      	cmp	r5, r2
 8003ee6:	d923      	bls.n	8003f30 <ADC_ConfigureBoostMode+0xf0>
    else if (freq <= 12500000UL)
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f94 <ADC_ConfigureBoostMode+0x154>)
 8003eea:	4295      	cmp	r5, r2
 8003eec:	d925      	bls.n	8003f3a <ADC_ConfigureBoostMode+0xfa>
    else if (freq <= 25000000UL)
 8003eee:	4a2a      	ldr	r2, [pc, #168]	@ (8003f98 <ADC_ConfigureBoostMode+0x158>)
 8003ef0:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003ef2:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8003ef4:	d839      	bhi.n	8003f6a <ADC_ConfigureBoostMode+0x12a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003ef6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003efe:	609a      	str	r2, [r3, #8]
}
 8003f00:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8003f02:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003f06:	d02e      	beq.n	8003f66 <ADC_ConfigureBoostMode+0x126>
 8003f08:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003f0c:	d1b4      	bne.n	8003e78 <ADC_ConfigureBoostMode+0x38>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f0e:	f7ff fad9 	bl	80034c4 <HAL_GetREVID>
 8003f12:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003f16:	4298      	cmp	r0, r3
 8003f18:	d805      	bhi.n	8003f26 <ADC_ConfigureBoostMode+0xe6>
 8003f1a:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f22:	609a      	str	r2, [r3, #8]
}
 8003f24:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8003f26:	4b1a      	ldr	r3, [pc, #104]	@ (8003f90 <ADC_ConfigureBoostMode+0x150>)
 8003f28:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	d304      	bcc.n	8003f3a <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f36:	609a      	str	r2, [r3, #8]
}
 8003f38:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f44:	609a      	str	r2, [r3, #8]
}
 8003f46:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003f48:	0c1b      	lsrs	r3, r3, #16
 8003f4a:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8003f4e:	e793      	b.n	8003e78 <ADC_ConfigureBoostMode+0x38>
        freq /= 64UL;
 8003f50:	0985      	lsrs	r5, r0, #6
        break;
 8003f52:	e791      	b.n	8003e78 <ADC_ConfigureBoostMode+0x38>
        freq /= 16UL;
 8003f54:	0905      	lsrs	r5, r0, #4
        break;
 8003f56:	e78f      	b.n	8003e78 <ADC_ConfigureBoostMode+0x38>
        freq /= 4UL;
 8003f58:	0885      	lsrs	r5, r0, #2
        break;
 8003f5a:	e78d      	b.n	8003e78 <ADC_ConfigureBoostMode+0x38>
    switch (hadc->Init.ClockPrescaler)
 8003f5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f60:	d18a      	bne.n	8003e78 <ADC_ConfigureBoostMode+0x38>
        freq /= 32UL;
 8003f62:	0945      	lsrs	r5, r0, #5
        break;
 8003f64:	e788      	b.n	8003e78 <ADC_ConfigureBoostMode+0x38>
        freq /= 128UL;
 8003f66:	09c5      	lsrs	r5, r0, #7
        break;
 8003f68:	e786      	b.n	8003e78 <ADC_ConfigureBoostMode+0x38>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f6a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003f6e:	609a      	str	r2, [r3, #8]
}
 8003f70:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8003f72:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003f76:	d0ae      	beq.n	8003ed6 <ADC_ConfigureBoostMode+0x96>
 8003f78:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003f7c:	d0ab      	beq.n	8003ed6 <ADC_ConfigureBoostMode+0x96>
 8003f7e:	e77b      	b.n	8003e78 <ADC_ConfigureBoostMode+0x38>
 8003f80:	40022000 	.word	0x40022000
 8003f84:	58026300 	.word	0x58026300
 8003f88:	01312d00 	.word	0x01312d00
 8003f8c:	40022300 	.word	0x40022300
 8003f90:	00bebc21 	.word	0x00bebc21
 8003f94:	017d7841 	.word	0x017d7841
 8003f98:	02faf081 	.word	0x02faf081

08003f9c <HAL_ADC_Init>:
{
 8003f9c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8003f9e:	2300      	movs	r3, #0
{
 8003fa0:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003fa2:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	f000 80a9 	beq.w	80040fc <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003faa:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8003fac:	4604      	mov	r4, r0
 8003fae:	2d00      	cmp	r5, #0
 8003fb0:	f000 80aa 	beq.w	8004108 <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fb4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fb6:	6893      	ldr	r3, [r2, #8]
 8003fb8:	009d      	lsls	r5, r3, #2
 8003fba:	d503      	bpl.n	8003fc4 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003fbc:	6891      	ldr	r1, [r2, #8]
 8003fbe:	4b71      	ldr	r3, [pc, #452]	@ (8004184 <HAL_ADC_Init+0x1e8>)
 8003fc0:	400b      	ands	r3, r1
 8003fc2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fc4:	6893      	ldr	r3, [r2, #8]
 8003fc6:	00d8      	lsls	r0, r3, #3
 8003fc8:	d416      	bmi.n	8003ff8 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fca:	4b6f      	ldr	r3, [pc, #444]	@ (8004188 <HAL_ADC_Init+0x1ec>)
 8003fcc:	496f      	ldr	r1, [pc, #444]	@ (800418c <HAL_ADC_Init+0x1f0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003fd0:	6890      	ldr	r0, [r2, #8]
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	fba1 1303 	umull	r1, r3, r1, r3
 8003fd8:	496d      	ldr	r1, [pc, #436]	@ (8004190 <HAL_ADC_Init+0x1f4>)
 8003fda:	099b      	lsrs	r3, r3, #6
 8003fdc:	4001      	ands	r1, r0
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8003fe4:	6091      	str	r1, [r2, #8]
 8003fe6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003fe8:	9b01      	ldr	r3, [sp, #4]
 8003fea:	b12b      	cbz	r3, 8003ff8 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8003fec:	9b01      	ldr	r3, [sp, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003ff2:	9b01      	ldr	r3, [sp, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f9      	bne.n	8003fec <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ff8:	6893      	ldr	r3, [r2, #8]
 8003ffa:	00d9      	lsls	r1, r3, #3
 8003ffc:	f100 8082 	bmi.w	8004104 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004000:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8004002:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004004:	f043 0310 	orr.w	r3, r3, #16
 8004008:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800400a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800400c:	432b      	orrs	r3, r5
 800400e:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004010:	6893      	ldr	r3, [r2, #8]
 8004012:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004016:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004018:	d16c      	bne.n	80040f4 <HAL_ADC_Init+0x158>
 800401a:	06db      	lsls	r3, r3, #27
 800401c:	d46a      	bmi.n	80040f4 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 800401e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004020:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800402a:	6893      	ldr	r3, [r2, #8]
 800402c:	07de      	lsls	r6, r3, #31
 800402e:	d40c      	bmi.n	800404a <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004030:	4b58      	ldr	r3, [pc, #352]	@ (8004194 <HAL_ADC_Init+0x1f8>)
 8004032:	429a      	cmp	r2, r3
 8004034:	f000 8081 	beq.w	800413a <HAL_ADC_Init+0x19e>
 8004038:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800403c:	429a      	cmp	r2, r3
 800403e:	d07c      	beq.n	800413a <HAL_ADC_Init+0x19e>
 8004040:	4b55      	ldr	r3, [pc, #340]	@ (8004198 <HAL_ADC_Init+0x1fc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	07d9      	lsls	r1, r3, #31
 8004046:	f140 808a 	bpl.w	800415e <HAL_ADC_Init+0x1c2>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800404a:	f7ff fa3b 	bl	80034c4 <HAL_GetREVID>
 800404e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004052:	68a1      	ldr	r1, [r4, #8]
 8004054:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004056:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004058:	d85c      	bhi.n	8004114 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800405a:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800405e:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004060:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004062:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8004066:	4302      	orrs	r2, r0
 8004068:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800406a:	2b01      	cmp	r3, #1
 800406c:	d103      	bne.n	8004076 <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800406e:	6a23      	ldr	r3, [r4, #32]
 8004070:	3b01      	subs	r3, #1
 8004072:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004076:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004078:	b123      	cbz	r3, 8004084 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800407a:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800407e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004080:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004082:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	4945      	ldr	r1, [pc, #276]	@ (800419c <HAL_ADC_Init+0x200>)
 8004088:	68d8      	ldr	r0, [r3, #12]
 800408a:	4001      	ands	r1, r0
 800408c:	4311      	orrs	r1, r2
 800408e:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004096:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004098:	d11c      	bne.n	80040d4 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800409a:	0712      	lsls	r2, r2, #28
 800409c:	d41a      	bmi.n	80040d4 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800409e:	68d8      	ldr	r0, [r3, #12]
 80040a0:	4a3f      	ldr	r2, [pc, #252]	@ (80041a0 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040a2:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040a4:	4002      	ands	r2, r0
 80040a6:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80040aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80040ac:	430a      	orrs	r2, r1
 80040ae:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80040b0:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80040b4:	2a01      	cmp	r2, #1
 80040b6:	d054      	beq.n	8004162 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80040c0:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80040c2:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80040c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040c6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80040ca:	430a      	orrs	r2, r1
 80040cc:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80040ce:	f7ff feb7 	bl	8003e40 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040d2:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040d4:	68e2      	ldr	r2, [r4, #12]
 80040d6:	2a01      	cmp	r2, #1
 80040d8:	d027      	beq.n	800412a <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040dc:	f022 020f 	bic.w	r2, r2, #15
 80040e0:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 80040e4:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80040f0:	b002      	add	sp, #8
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80040f6:	f043 0310 	orr.w	r3, r3, #16
 80040fa:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 80040fc:	2501      	movs	r5, #1
}
 80040fe:	4628      	mov	r0, r5
 8004100:	b002      	add	sp, #8
 8004102:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004104:	2500      	movs	r5, #0
 8004106:	e783      	b.n	8004010 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 8004108:	f7fe fe28 	bl	8002d5c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800410c:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800410e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8004112:	e74f      	b.n	8003fb4 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004114:	2910      	cmp	r1, #16
 8004116:	d1a0      	bne.n	800405a <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004118:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800411a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800411c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004120:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004122:	430a      	orrs	r2, r1
 8004124:	f042 021c 	orr.w	r2, r2, #28
 8004128:	e79f      	b.n	800406a <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800412a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800412c:	69a2      	ldr	r2, [r4, #24]
 800412e:	f021 010f 	bic.w	r1, r1, #15
 8004132:	3a01      	subs	r2, #1
 8004134:	430a      	orrs	r2, r1
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
 8004138:	e7d3      	b.n	80040e2 <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800413a:	4b16      	ldr	r3, [pc, #88]	@ (8004194 <HAL_ADC_Init+0x1f8>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f013 0f01 	tst.w	r3, #1
 8004142:	4b18      	ldr	r3, [pc, #96]	@ (80041a4 <HAL_ADC_Init+0x208>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	d180      	bne.n	800404a <HAL_ADC_Init+0xae>
 8004148:	07d8      	lsls	r0, r3, #31
 800414a:	f53f af7e 	bmi.w	800404a <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800414e:	4a16      	ldr	r2, [pc, #88]	@ (80041a8 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004150:	6893      	ldr	r3, [r2, #8]
 8004152:	6861      	ldr	r1, [r4, #4]
 8004154:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8004158:	430b      	orrs	r3, r1
 800415a:	6093      	str	r3, [r2, #8]
}
 800415c:	e775      	b.n	800404a <HAL_ADC_Init+0xae>
 800415e:	4a13      	ldr	r2, [pc, #76]	@ (80041ac <HAL_ADC_Init+0x210>)
 8004160:	e7f6      	b.n	8004150 <HAL_ADC_Init+0x1b4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004162:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8004166:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8004168:	3901      	subs	r1, #1
 800416a:	6918      	ldr	r0, [r3, #16]
 800416c:	4332      	orrs	r2, r6
 800416e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004172:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004174:	430a      	orrs	r2, r1
 8004176:	490e      	ldr	r1, [pc, #56]	@ (80041b0 <HAL_ADC_Init+0x214>)
 8004178:	4001      	ands	r1, r0
 800417a:	430a      	orrs	r2, r1
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	611a      	str	r2, [r3, #16]
 8004182:	e79d      	b.n	80040c0 <HAL_ADC_Init+0x124>
 8004184:	5fffffc0 	.word	0x5fffffc0
 8004188:	2400001c 	.word	0x2400001c
 800418c:	053e2d63 	.word	0x053e2d63
 8004190:	6fffffc0 	.word	0x6fffffc0
 8004194:	40022000 	.word	0x40022000
 8004198:	58026000 	.word	0x58026000
 800419c:	fff0c003 	.word	0xfff0c003
 80041a0:	ffffbffc 	.word	0xffffbffc
 80041a4:	40022100 	.word	0x40022100
 80041a8:	40022300 	.word	0x40022300
 80041ac:	58026300 	.word	0x58026300
 80041b0:	fc00f81e 	.word	0xfc00f81e

080041b4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80041b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80041b6:	2300      	movs	r3, #0
{
 80041b8:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80041ba:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041bc:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d040      	beq.n	8004246 <HAL_ADCEx_Calibration_Start+0x92>
 80041c4:	2301      	movs	r3, #1
 80041c6:	4604      	mov	r4, r0
 80041c8:	460e      	mov	r6, r1
 80041ca:	4615      	mov	r5, r2
 80041cc:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041d0:	f7ff fdfc 	bl	8003dcc <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80041d4:	b9e8      	cbnz	r0, 8004212 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041d6:	6d67      	ldr	r7, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 80041d8:	f005 4280 	and.w	r2, r5, #1073741824	@ 0x40000000
 80041dc:	4b1b      	ldr	r3, [pc, #108]	@ (800424c <HAL_ADCEx_Calibration_Start+0x98>)
 80041de:	f406 3180 	and.w	r1, r6, #65536	@ 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80041e2:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80041e4:	403b      	ands	r3, r7
 80041e6:	f043 0302 	orr.w	r3, r3, #2
 80041ea:	6563      	str	r3, [r4, #84]	@ 0x54
 80041ec:	4b18      	ldr	r3, [pc, #96]	@ (8004250 <HAL_ADCEx_Calibration_Start+0x9c>)
 80041ee:	68ae      	ldr	r6, [r5, #8]
 80041f0:	4033      	ands	r3, r6
 80041f2:	4313      	orrs	r3, r2
 80041f4:	430b      	orrs	r3, r1
 80041f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041fa:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80041fc:	68ab      	ldr	r3, [r5, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80041fe:	4a15      	ldr	r2, [pc, #84]	@ (8004254 <HAL_ADCEx_Calibration_Start+0xa0>)
 8004200:	2b00      	cmp	r3, #0
 8004202:	db0f      	blt.n	8004224 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004204:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6563      	str	r3, [r4, #84]	@ 0x54
 8004210:	e003      	b.n	800421a <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004212:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004214:	f043 0310 	orr.w	r3, r3, #16
 8004218:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800421a:	2300      	movs	r3, #0
 800421c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8004220:	b003      	add	sp, #12
 8004222:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8004224:	9b01      	ldr	r3, [sp, #4]
 8004226:	3301      	adds	r3, #1
 8004228:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800422a:	9b01      	ldr	r3, [sp, #4]
 800422c:	4293      	cmp	r3, r2
 800422e:	d3e5      	bcc.n	80041fc <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8004230:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8004232:	2200      	movs	r2, #0
        return HAL_ERROR;
 8004234:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8004236:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800423a:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        ADC_STATE_CLR_SET(hadc->State,
 800423e:	f043 0310 	orr.w	r3, r3, #16
 8004242:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8004244:	e7ec      	b.n	8004220 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 8004246:	2002      	movs	r0, #2
}
 8004248:	b003      	add	sp, #12
 800424a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800424c:	ffffeefd 	.word	0xffffeefd
 8004250:	3ffeffc0 	.word	0x3ffeffc0
 8004254:	25c3f800 	.word	0x25c3f800

08004258 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop

0800425c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop

08004260 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop

08004264 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop

08004268 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop

0800426c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800426c:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8004270:	2a01      	cmp	r2, #1
 8004272:	d035      	beq.n	80042e0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8004274:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004276:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004278:	2001      	movs	r0, #1
{
 800427a:	b4f0      	push	{r4, r5, r6, r7}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800427c:	4d28      	ldr	r5, [pc, #160]	@ (8004320 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
{
 800427e:	b09a      	sub	sp, #104	@ 0x68
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004280:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004282:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004284:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 8004286:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800428a:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800428c:	d008      	beq.n	80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800428e:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004294:	f041 0120 	orr.w	r1, r1, #32
 8004298:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800429a:	b01a      	add	sp, #104	@ 0x68
 800429c:	bcf0      	pop	{r4, r5, r6, r7}
 800429e:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042a0:	4a20      	ldr	r2, [pc, #128]	@ (8004324 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80042a2:	6890      	ldr	r0, [r2, #8]
 80042a4:	0740      	lsls	r0, r0, #29
 80042a6:	d50b      	bpl.n	80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 80042a8:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80042ac:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ae:	f042 0220 	orr.w	r2, r2, #32
 80042b2:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 80042ba:	b01a      	add	sp, #104	@ 0x68
 80042bc:	bcf0      	pop	{r4, r5, r6, r7}
 80042be:	4770      	bx	lr
 80042c0:	68a0      	ldr	r0, [r4, #8]
 80042c2:	0745      	lsls	r5, r0, #29
 80042c4:	d4f1      	bmi.n	80042aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042c6:	6808      	ldr	r0, [r1, #0]
 80042c8:	b9a0      	cbnz	r0, 80042f4 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80042ca:	4917      	ldr	r1, [pc, #92]	@ (8004328 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 80042cc:	6888      	ldr	r0, [r1, #8]
 80042ce:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80042d2:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042d4:	68a0      	ldr	r0, [r4, #8]
 80042d6:	07c0      	lsls	r0, r0, #31
 80042d8:	d504      	bpl.n	80042e4 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80042da:	6892      	ldr	r2, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042dc:	2000      	movs	r0, #0
 80042de:	e7e9      	b.n	80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 80042e0:	2002      	movs	r0, #2
}
 80042e2:	4770      	bx	lr
 80042e4:	6892      	ldr	r2, [r2, #8]
 80042e6:	07d5      	lsls	r5, r2, #31
 80042e8:	d4f8      	bmi.n	80042dc <HAL_ADCEx_MultiModeConfigChannel+0x70>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80042ea:	6888      	ldr	r0, [r1, #8]
 80042ec:	4a0f      	ldr	r2, [pc, #60]	@ (800432c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80042ee:	4002      	ands	r2, r0
 80042f0:	608a      	str	r2, [r1, #8]
 80042f2:	e7f3      	b.n	80042dc <HAL_ADCEx_MultiModeConfigChannel+0x70>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80042f4:	4e0c      	ldr	r6, [pc, #48]	@ (8004328 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 80042f6:	684f      	ldr	r7, [r1, #4]
 80042f8:	68b5      	ldr	r5, [r6, #8]
 80042fa:	f425 4540 	bic.w	r5, r5, #49152	@ 0xc000
 80042fe:	433d      	orrs	r5, r7
 8004300:	60b5      	str	r5, [r6, #8]
 8004302:	68a4      	ldr	r4, [r4, #8]
 8004304:	07e4      	lsls	r4, r4, #31
 8004306:	d4e8      	bmi.n	80042da <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004308:	6892      	ldr	r2, [r2, #8]
 800430a:	07d7      	lsls	r7, r2, #31
 800430c:	d4e6      	bmi.n	80042dc <HAL_ADCEx_MultiModeConfigChannel+0x70>
        MODIFY_REG(tmpADC_Common->CCR,
 800430e:	688a      	ldr	r2, [r1, #8]
 8004310:	68b4      	ldr	r4, [r6, #8]
 8004312:	4310      	orrs	r0, r2
 8004314:	4a05      	ldr	r2, [pc, #20]	@ (800432c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8004316:	4022      	ands	r2, r4
 8004318:	4310      	orrs	r0, r2
 800431a:	60b0      	str	r0, [r6, #8]
 800431c:	e7de      	b.n	80042dc <HAL_ADCEx_MultiModeConfigChannel+0x70>
 800431e:	bf00      	nop
 8004320:	40022000 	.word	0x40022000
 8004324:	40022100 	.word	0x40022100
 8004328:	40022300 	.word	0x40022300
 800432c:	fffff0e0 	.word	0xfffff0e0

08004330 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004330:	4906      	ldr	r1, [pc, #24]	@ (800434c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004332:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004336:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800433a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800433c:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004340:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004344:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8004346:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004348:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800434a:	4770      	bx	lr
 800434c:	e000ed00 	.word	0xe000ed00
 8004350:	05fa0000 	.word	0x05fa0000

08004354 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004354:	4b1a      	ldr	r3, [pc, #104]	@ (80043c0 <HAL_NVIC_SetPriority+0x6c>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800435e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004362:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004366:	f1be 0f04 	cmp.w	lr, #4
 800436a:	bf28      	it	cs
 800436c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004370:	f1bc 0f06 	cmp.w	ip, #6
 8004374:	d91a      	bls.n	80043ac <HAL_NVIC_SetPriority+0x58>
 8004376:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800437a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800437e:	fa03 f30c 	lsl.w	r3, r3, ip
 8004382:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800438a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	fa03 f30e 	lsl.w	r3, r3, lr
 8004390:	ea21 0303 	bic.w	r3, r1, r3
 8004394:	fa03 f30c 	lsl.w	r3, r3, ip
 8004398:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80043a0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80043a2:	db06      	blt.n	80043b2 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a4:	4a07      	ldr	r2, [pc, #28]	@ (80043c4 <HAL_NVIC_SetPriority+0x70>)
 80043a6:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80043a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80043ac:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ae:	4694      	mov	ip, r2
 80043b0:	e7e9      	b.n	8004386 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b2:	f000 000f 	and.w	r0, r0, #15
 80043b6:	4a04      	ldr	r2, [pc, #16]	@ (80043c8 <HAL_NVIC_SetPriority+0x74>)
 80043b8:	5413      	strb	r3, [r2, r0]
 80043ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80043be:	bf00      	nop
 80043c0:	e000ed00 	.word	0xe000ed00
 80043c4:	e000e400 	.word	0xe000e400
 80043c8:	e000ed14 	.word	0xe000ed14

080043cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80043cc:	2800      	cmp	r0, #0
 80043ce:	db07      	blt.n	80043e0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043d0:	2301      	movs	r3, #1
 80043d2:	f000 011f 	and.w	r1, r0, #31
 80043d6:	4a03      	ldr	r2, [pc, #12]	@ (80043e4 <HAL_NVIC_EnableIRQ+0x18>)
 80043d8:	0940      	lsrs	r0, r0, #5
 80043da:	408b      	lsls	r3, r1
 80043dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	e000e100 	.word	0xe000e100

080043e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e8:	1e43      	subs	r3, r0, #1
 80043ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043ee:	d301      	bcc.n	80043f4 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043f0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80043f2:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f4:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043f8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fa:	4905      	ldr	r1, [pc, #20]	@ (8004410 <HAL_SYSTICK_Config+0x28>)
 80043fc:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004400:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004402:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004404:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004408:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800440a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000ed00 	.word	0xe000ed00

08004414 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004414:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004418:	4b04      	ldr	r3, [pc, #16]	@ (800442c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800441a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800441c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800441e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004422:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8004424:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	e000ed00 	.word	0xe000ed00

08004430 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004430:	4b06      	ldr	r3, [pc, #24]	@ (800444c <HAL_MPU_Enable+0x1c>)
 8004432:	f040 0001 	orr.w	r0, r0, #1
 8004436:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800443a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800443c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004440:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004442:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004446:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800444a:	4770      	bx	lr
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004450:	4a16      	ldr	r2, [pc, #88]	@ (80044ac <HAL_MPU_ConfigRegion+0x5c>)
 8004452:	7843      	ldrb	r3, [r0, #1]
 8004454:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004458:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004464:	6843      	ldr	r3, [r0, #4]
 8004466:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800446a:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800446c:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004470:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004472:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004474:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004478:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800447c:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800447e:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004480:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004484:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004488:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800448c:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800448e:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004492:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800449a:	7a01      	ldrb	r1, [r0, #8]
 800449c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80044a0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80044a4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80044b0:	b188      	cbz	r0, 80044d6 <HAL_DAC_Init+0x26>
{
 80044b2:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80044b4:	7903      	ldrb	r3, [r0, #4]
 80044b6:	4604      	mov	r4, r0
 80044b8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80044bc:	b13b      	cbz	r3, 80044ce <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80044be:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80044c0:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80044c2:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80044c4:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80044c6:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80044c8:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80044ca:	7122      	strb	r2, [r4, #4]
}
 80044cc:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80044ce:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80044d0:	f7fe fcbe 	bl	8002e50 <HAL_DAC_MspInit>
 80044d4:	e7f3      	b.n	80044be <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80044d6:	2001      	movs	r0, #1
}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop

080044dc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d05e      	beq.n	80045a2 <HAL_DAC_Start_DMA+0xc6>
 80044e4:	460e      	mov	r6, r1
 80044e6:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044e8:	7942      	ldrb	r2, [r0, #5]
 80044ea:	4604      	mov	r4, r0
 80044ec:	2a01      	cmp	r2, #1
 80044ee:	d060      	beq.n	80045b2 <HAL_DAC_Start_DMA+0xd6>
 80044f0:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80044f2:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdac);
 80044f4:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80044f6:	2202      	movs	r2, #2
 80044f8:	7102      	strb	r2, [r0, #4]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80044fa:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 80044fc:	bb3e      	cbnz	r6, 800454e <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80044fe:	6880      	ldr	r0, [r0, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004500:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004504:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 80045b8 <HAL_DAC_Start_DMA+0xdc>
 8004508:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800450c:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 80045bc <HAL_DAC_Start_DMA+0xe0>
 8004510:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004514:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 80045c0 <HAL_DAC_Start_DMA+0xe4>
 8004518:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800451c:	602a      	str	r2, [r5, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800451e:	2f00      	cmp	r7, #0
 8004520:	d044      	beq.n	80045ac <HAL_DAC_Start_DMA+0xd0>
 8004522:	2f04      	cmp	r7, #4
 8004524:	d137      	bne.n	8004596 <HAL_DAC_Start_DMA+0xba>
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
        break;
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004526:	f105 020c 	add.w	r2, r5, #12
  }

  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800452a:	682f      	ldr	r7, [r5, #0]
 800452c:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
 8004530:	602f      	str	r7, [r5, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004532:	f000 fce7 	bl	8004f04 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004536:	2300      	movs	r3, #0
 8004538:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800453a:	bb38      	cbnz	r0, 800458c <HAL_DAC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800453c:	6822      	ldr	r2, [r4, #0]
 800453e:	f006 0110 	and.w	r1, r6, #16
 8004542:	2301      	movs	r3, #1
 8004544:	6814      	ldr	r4, [r2, #0]
 8004546:	408b      	lsls	r3, r1
 8004548:	4323      	orrs	r3, r4
 800454a:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 800454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800454e:	68c0      	ldr	r0, [r0, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004550:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004554:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 80045c4 <HAL_DAC_Start_DMA+0xe8>
 8004558:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800455c:	f8df c068 	ldr.w	ip, [pc, #104]	@ 80045c8 <HAL_DAC_Start_DMA+0xec>
 8004560:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004564:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80045cc <HAL_DAC_Start_DMA+0xf0>
 8004568:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800456c:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 800456e:	b1d7      	cbz	r7, 80045a6 <HAL_DAC_Start_DMA+0xca>
 8004570:	2f04      	cmp	r7, #4
 8004572:	d113      	bne.n	800459c <HAL_DAC_Start_DMA+0xc0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004574:	f105 0218 	add.w	r2, r5, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004578:	682f      	ldr	r7, [r5, #0]
 800457a:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 800457e:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004580:	f000 fcc0 	bl	8004f04 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8004584:	2300      	movs	r3, #0
 8004586:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8004588:	2800      	cmp	r0, #0
 800458a:	d0d7      	beq.n	800453c <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800458c:	6923      	ldr	r3, [r4, #16]
 800458e:	f043 0304 	orr.w	r3, r3, #4
 8004592:	6123      	str	r3, [r4, #16]
}
 8004594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004596:	f105 0210 	add.w	r2, r5, #16
  if (Channel == DAC_CHANNEL_1)
 800459a:	e7c6      	b.n	800452a <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800459c:	f105 021c 	add.w	r2, r5, #28
  if (Channel == DAC_CHANNEL_1)
 80045a0:	e7ea      	b.n	8004578 <HAL_DAC_Start_DMA+0x9c>
    return HAL_ERROR;
 80045a2:	2001      	movs	r0, #1
}
 80045a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80045a6:	f105 0214 	add.w	r2, r5, #20
  if (Channel == DAC_CHANNEL_1)
 80045aa:	e7e5      	b.n	8004578 <HAL_DAC_Start_DMA+0x9c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80045ac:	f105 0208 	add.w	r2, r5, #8
  if (Channel == DAC_CHANNEL_1)
 80045b0:	e7bb      	b.n	800452a <HAL_DAC_Start_DMA+0x4e>
  __HAL_LOCK(hdac);
 80045b2:	2002      	movs	r0, #2
}
 80045b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b6:	bf00      	nop
 80045b8:	080045d5 	.word	0x080045d5
 80045bc:	080045e9 	.word	0x080045e9
 80045c0:	080045f9 	.word	0x080045f9
 80045c4:	080047d1 	.word	0x080047d1
 80045c8:	080047e5 	.word	0x080047e5
 80045cc:	080047f5 	.word	0x080047f5

080045d0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @brief  Conversion complete callback in non-blocking mode for Channel1
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop

080045d4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80045d4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d6:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80045d8:	4620      	mov	r0, r4
 80045da:	f7ff fff9 	bl	80045d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80045de:	2301      	movs	r3, #1
 80045e0:	7123      	strb	r3, [r4, #4]
}
 80045e2:	bd10      	pop	{r4, pc}

080045e4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop

080045e8 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80045e8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80045ea:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80045ec:	f7ff fffa 	bl	80045e4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80045f0:	bd08      	pop	{r3, pc}
 80045f2:	bf00      	nop

080045f4 <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop

080045f8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80045f8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045fa:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80045fc:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80045fe:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004600:	f043 0304 	orr.w	r3, r3, #4
 8004604:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004606:	f7ff fff5 	bl	80045f4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800460a:	2301      	movs	r3, #1
 800460c:	7123      	strb	r3, [r4, #4]
}
 800460e:	bd10      	pop	{r4, pc}

08004610 <HAL_DAC_DMAUnderrunCallbackCh1>:
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop

08004614 <HAL_DAC_IRQHandler>:
  uint32_t itsource = hdac->Instance->CR;
 8004614:	6803      	ldr	r3, [r0, #0]
{
 8004616:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = hdac->Instance->CR;
 8004618:	681d      	ldr	r5, [r3, #0]
{
 800461a:	4604      	mov	r4, r0
  uint32_t itflag   = hdac->Instance->SR;
 800461c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800461e:	04aa      	lsls	r2, r5, #18
 8004620:	d501      	bpl.n	8004626 <HAL_DAC_IRQHandler+0x12>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004622:	04b1      	lsls	r1, r6, #18
 8004624:	d417      	bmi.n	8004656 <HAL_DAC_IRQHandler+0x42>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004626:	00aa      	lsls	r2, r5, #2
 8004628:	d501      	bpl.n	800462e <HAL_DAC_IRQHandler+0x1a>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800462a:	00b3      	lsls	r3, r6, #2
 800462c:	d400      	bmi.n	8004630 <HAL_DAC_IRQHandler+0x1c>
}
 800462e:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8004630:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004638:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 800463a:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800463c:	6922      	ldr	r2, [r4, #16]
 800463e:	f042 0202 	orr.w	r2, r2, #2
 8004642:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004644:	6359      	str	r1, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
}
 800464c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004650:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004652:	f000 b8db 	b.w	800480c <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8004656:	2204      	movs	r2, #4
 8004658:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800465a:	6902      	ldr	r2, [r0, #16]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004662:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004666:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800466e:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004670:	f7ff ffce 	bl	8004610 <HAL_DAC_DMAUnderrunCallbackCh1>
 8004674:	e7d7      	b.n	8004626 <HAL_DAC_IRQHandler+0x12>
 8004676:	bf00      	nop

08004678 <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 8004678:	2800      	cmp	r0, #0
 800467a:	f000 8086 	beq.w	800478a <HAL_DAC_ConfigChannel+0x112>
{
 800467e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004682:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8004684:	2900      	cmp	r1, #0
 8004686:	d04d      	beq.n	8004724 <HAL_DAC_ConfigChannel+0xac>
  __HAL_LOCK(hdac);
 8004688:	7943      	ldrb	r3, [r0, #5]
 800468a:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800468c:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 800468e:	2b01      	cmp	r3, #1
 8004690:	d079      	beq.n	8004786 <HAL_DAC_ConfigChannel+0x10e>
 8004692:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004694:	2904      	cmp	r1, #4
 8004696:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8004698:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800469a:	f04f 0302 	mov.w	r3, #2
 800469e:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80046a0:	d043      	beq.n	800472a <HAL_DAC_ConfigChannel+0xb2>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80046a2:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 80046a6:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80046a8:	6928      	ldr	r0, [r5, #16]
 80046aa:	2801      	cmp	r0, #1
 80046ac:	d108      	bne.n	80046c0 <HAL_DAC_ConfigChannel+0x48>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80046ae:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 80046b0:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80046b2:	4090      	lsls	r0, r2
 80046b4:	ea26 0600 	bic.w	r6, r6, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046b8:	6968      	ldr	r0, [r5, #20]
 80046ba:	4090      	lsls	r0, r2
 80046bc:	4330      	orrs	r0, r6
    hdac->Instance->CCR = tmpreg1;
 80046be:	6398      	str	r0, [r3, #56]	@ 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80046c0:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 80046c2:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80046c4:	4090      	lsls	r0, r2
 80046c6:	ea26 0600 	bic.w	r6, r6, r0
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80046ca:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80046ce:	2801      	cmp	r0, #1
 80046d0:	d055      	beq.n	800477e <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80046d2:	2802      	cmp	r0, #2
 80046d4:	d055      	beq.n	8004782 <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80046d6:	fab7 f087 	clz	r0, r7
 80046da:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80046dc:	4339      	orrs	r1, r7
 80046de:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046e0:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80046e2:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046e6:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046e8:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80046ea:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80046ec:	4331      	orrs	r1, r6
  hdac->State = HAL_DAC_STATE_READY;
 80046ee:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 80046f0:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046f8:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80046fc:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80046fe:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8004700:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004702:	ea21 0105 	bic.w	r1, r1, r5
  __HAL_UNLOCK(hdac);
 8004706:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004708:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800470a:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 800470c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800470e:	fa00 f102 	lsl.w	r1, r0, r2
 8004712:	681a      	ldr	r2, [r3, #0]
  return status;
 8004714:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004716:	ea22 0201 	bic.w	r2, r2, r1
 800471a:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800471c:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 800471e:	7165      	strb	r5, [r4, #5]
}
 8004720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004724:	2001      	movs	r0, #1
}
 8004726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 800472a:	f7fe fec5 	bl	80034b8 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800472e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004730:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8004732:	b9be      	cbnz	r6, 8004764 <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004734:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 80047c8 <HAL_DAC_ConfigChannel+0x150>
 8004738:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800473a:	ea12 0f08 	tst.w	r2, r8
 800473e:	d026      	beq.n	800478e <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004740:	f7fe feba 	bl	80034b8 <HAL_GetTick>
 8004744:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004746:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004748:	2801      	cmp	r0, #1
 800474a:	d9f5      	bls.n	8004738 <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800474c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800474e:	ea12 0f08 	tst.w	r2, r8
 8004752:	d0f1      	beq.n	8004738 <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004754:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004756:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 8004758:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800475a:	f043 0308 	orr.w	r3, r3, #8
 800475e:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004760:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 8004762:	e7dd      	b.n	8004720 <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004766:	2a00      	cmp	r2, #0
 8004768:	da2a      	bge.n	80047c0 <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800476a:	f7fe fea5 	bl	80034b8 <HAL_GetTick>
 800476e:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004770:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004772:	2801      	cmp	r0, #1
 8004774:	d9f6      	bls.n	8004764 <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004778:	2a00      	cmp	r2, #0
 800477a:	daf3      	bge.n	8004764 <HAL_DAC_ConfigChannel+0xec>
 800477c:	e7ea      	b.n	8004754 <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 800477e:	2000      	movs	r0, #0
 8004780:	e7ac      	b.n	80046dc <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 8004782:	2001      	movs	r0, #1
 8004784:	e7aa      	b.n	80046dc <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 8004786:	2002      	movs	r0, #2
 8004788:	e7ca      	b.n	8004720 <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 800478a:	2001      	movs	r0, #1
}
 800478c:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800478e:	69aa      	ldr	r2, [r5, #24]
 8004790:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004792:	f006 0210 	and.w	r2, r6, #16
 8004796:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 800479a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800479c:	4090      	lsls	r0, r2
 800479e:	ea21 0100 	bic.w	r1, r1, r0
 80047a2:	69e8      	ldr	r0, [r5, #28]
 80047a4:	4090      	lsls	r0, r2
 80047a6:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80047a8:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80047aa:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80047ac:	4090      	lsls	r0, r2
 80047ae:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80047b0:	ea21 0100 	bic.w	r1, r1, r0
 80047b4:	6a28      	ldr	r0, [r5, #32]
 80047b6:	4090      	lsls	r0, r2
 80047b8:	4301      	orrs	r1, r0
 80047ba:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80047bc:	6829      	ldr	r1, [r5, #0]
 80047be:	e773      	b.n	80046a8 <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80047c0:	69aa      	ldr	r2, [r5, #24]
 80047c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80047c4:	e7e5      	b.n	8004792 <HAL_DAC_ConfigChannel+0x11a>
 80047c6:	bf00      	nop
 80047c8:	20008000 	.word	0x20008000

080047cc <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop

080047d0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80047d0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d2:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80047d4:	4620      	mov	r0, r4
 80047d6:	f7ff fff9 	bl	80047cc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80047da:	2301      	movs	r3, #1
 80047dc:	7123      	strb	r3, [r4, #4]
}
 80047de:	bd10      	pop	{r4, pc}

080047e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop

080047e4 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80047e4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80047e6:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80047e8:	f7ff fffa 	bl	80047e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80047ec:	bd08      	pop	{r3, pc}
 80047ee:	bf00      	nop

080047f0 <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop

080047f4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80047f4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f6:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80047f8:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80047fa:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004802:	f7ff fff5 	bl	80047f0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004806:	2301      	movs	r3, #1
 8004808:	7123      	strb	r3, [r4, #4]
}
 800480a:	bd10      	pop	{r4, pc}

0800480c <HAL_DACEx_DMAUnderrunCallbackCh2>:
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop

08004810 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004810:	4936      	ldr	r1, [pc, #216]	@ (80048ec <DMA_CalcBaseAndBitshift+0xdc>)
{
 8004812:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004814:	6803      	ldr	r3, [r0, #0]
 8004816:	428b      	cmp	r3, r1
 8004818:	d033      	beq.n	8004882 <DMA_CalcBaseAndBitshift+0x72>
 800481a:	3118      	adds	r1, #24
 800481c:	1a59      	subs	r1, r3, r1
 800481e:	fab1 f181 	clz	r1, r1
 8004822:	0949      	lsrs	r1, r1, #5
 8004824:	bb69      	cbnz	r1, 8004882 <DMA_CalcBaseAndBitshift+0x72>
 8004826:	4832      	ldr	r0, [pc, #200]	@ (80048f0 <DMA_CalcBaseAndBitshift+0xe0>)
 8004828:	4283      	cmp	r3, r0
 800482a:	d03e      	beq.n	80048aa <DMA_CalcBaseAndBitshift+0x9a>
 800482c:	3018      	adds	r0, #24
 800482e:	4283      	cmp	r3, r0
 8004830:	d03e      	beq.n	80048b0 <DMA_CalcBaseAndBitshift+0xa0>
 8004832:	3018      	adds	r0, #24
 8004834:	4283      	cmp	r3, r0
 8004836:	d034      	beq.n	80048a2 <DMA_CalcBaseAndBitshift+0x92>
 8004838:	3018      	adds	r0, #24
 800483a:	4283      	cmp	r3, r0
 800483c:	d03b      	beq.n	80048b6 <DMA_CalcBaseAndBitshift+0xa6>
 800483e:	3018      	adds	r0, #24
 8004840:	4283      	cmp	r3, r0
 8004842:	d03e      	beq.n	80048c2 <DMA_CalcBaseAndBitshift+0xb2>
 8004844:	3018      	adds	r0, #24
 8004846:	4283      	cmp	r3, r0
 8004848:	d02a      	beq.n	80048a0 <DMA_CalcBaseAndBitshift+0x90>
 800484a:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 800484e:	4283      	cmp	r3, r0
 8004850:	d035      	beq.n	80048be <DMA_CalcBaseAndBitshift+0xae>
 8004852:	4928      	ldr	r1, [pc, #160]	@ (80048f4 <DMA_CalcBaseAndBitshift+0xe4>)
 8004854:	428b      	cmp	r3, r1
 8004856:	d031      	beq.n	80048bc <DMA_CalcBaseAndBitshift+0xac>
 8004858:	3118      	adds	r1, #24
 800485a:	428b      	cmp	r3, r1
 800485c:	d034      	beq.n	80048c8 <DMA_CalcBaseAndBitshift+0xb8>
 800485e:	3118      	adds	r1, #24
 8004860:	428b      	cmp	r3, r1
 8004862:	d034      	beq.n	80048ce <DMA_CalcBaseAndBitshift+0xbe>
 8004864:	3118      	adds	r1, #24
 8004866:	428b      	cmp	r3, r1
 8004868:	d034      	beq.n	80048d4 <DMA_CalcBaseAndBitshift+0xc4>
 800486a:	3118      	adds	r1, #24
 800486c:	428b      	cmp	r3, r1
 800486e:	d034      	beq.n	80048da <DMA_CalcBaseAndBitshift+0xca>
 8004870:	3118      	adds	r1, #24
 8004872:	428b      	cmp	r3, r1
 8004874:	d034      	beq.n	80048e0 <DMA_CalcBaseAndBitshift+0xd0>
 8004876:	3118      	adds	r1, #24
 8004878:	428b      	cmp	r3, r1
 800487a:	d034      	beq.n	80048e6 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800487c:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8004880:	e011      	b.n	80048a6 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004882:	b2db      	uxtb	r3, r3
 8004884:	491c      	ldr	r1, [pc, #112]	@ (80048f8 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004886:	481d      	ldr	r0, [pc, #116]	@ (80048fc <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004888:	3b10      	subs	r3, #16
 800488a:	fba1 1303 	umull	r1, r3, r1, r3
{
 800488e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004890:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004892:	4c1b      	ldr	r4, [pc, #108]	@ (8004900 <DMA_CalcBaseAndBitshift+0xf0>)
 8004894:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8004896:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800489a:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 800489e:	4770      	bx	lr
 80048a0:	2116      	movs	r1, #22
 80048a2:	4818      	ldr	r0, [pc, #96]	@ (8004904 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80048a4:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80048a6:	6590      	str	r0, [r2, #88]	@ 0x58
}
 80048a8:	4770      	bx	lr
 80048aa:	2110      	movs	r1, #16
 80048ac:	4813      	ldr	r0, [pc, #76]	@ (80048fc <DMA_CalcBaseAndBitshift+0xec>)
 80048ae:	e7f9      	b.n	80048a4 <DMA_CalcBaseAndBitshift+0x94>
 80048b0:	2116      	movs	r1, #22
 80048b2:	4812      	ldr	r0, [pc, #72]	@ (80048fc <DMA_CalcBaseAndBitshift+0xec>)
 80048b4:	e7f6      	b.n	80048a4 <DMA_CalcBaseAndBitshift+0x94>
 80048b6:	2106      	movs	r1, #6
 80048b8:	4812      	ldr	r0, [pc, #72]	@ (8004904 <DMA_CalcBaseAndBitshift+0xf4>)
 80048ba:	e7f3      	b.n	80048a4 <DMA_CalcBaseAndBitshift+0x94>
 80048bc:	2106      	movs	r1, #6
 80048be:	4812      	ldr	r0, [pc, #72]	@ (8004908 <DMA_CalcBaseAndBitshift+0xf8>)
 80048c0:	e7f0      	b.n	80048a4 <DMA_CalcBaseAndBitshift+0x94>
 80048c2:	2110      	movs	r1, #16
 80048c4:	480f      	ldr	r0, [pc, #60]	@ (8004904 <DMA_CalcBaseAndBitshift+0xf4>)
 80048c6:	e7ed      	b.n	80048a4 <DMA_CalcBaseAndBitshift+0x94>
 80048c8:	2110      	movs	r1, #16
 80048ca:	480f      	ldr	r0, [pc, #60]	@ (8004908 <DMA_CalcBaseAndBitshift+0xf8>)
 80048cc:	e7ea      	b.n	80048a4 <DMA_CalcBaseAndBitshift+0x94>
 80048ce:	2116      	movs	r1, #22
 80048d0:	480d      	ldr	r0, [pc, #52]	@ (8004908 <DMA_CalcBaseAndBitshift+0xf8>)
 80048d2:	e7e7      	b.n	80048a4 <DMA_CalcBaseAndBitshift+0x94>
 80048d4:	2100      	movs	r1, #0
 80048d6:	480d      	ldr	r0, [pc, #52]	@ (800490c <DMA_CalcBaseAndBitshift+0xfc>)
 80048d8:	e7e4      	b.n	80048a4 <DMA_CalcBaseAndBitshift+0x94>
 80048da:	2106      	movs	r1, #6
 80048dc:	480b      	ldr	r0, [pc, #44]	@ (800490c <DMA_CalcBaseAndBitshift+0xfc>)
 80048de:	e7e1      	b.n	80048a4 <DMA_CalcBaseAndBitshift+0x94>
 80048e0:	2110      	movs	r1, #16
 80048e2:	480a      	ldr	r0, [pc, #40]	@ (800490c <DMA_CalcBaseAndBitshift+0xfc>)
 80048e4:	e7de      	b.n	80048a4 <DMA_CalcBaseAndBitshift+0x94>
 80048e6:	2116      	movs	r1, #22
 80048e8:	4808      	ldr	r0, [pc, #32]	@ (800490c <DMA_CalcBaseAndBitshift+0xfc>)
 80048ea:	e7db      	b.n	80048a4 <DMA_CalcBaseAndBitshift+0x94>
 80048ec:	40020010 	.word	0x40020010
 80048f0:	40020040 	.word	0x40020040
 80048f4:	40020428 	.word	0x40020428
 80048f8:	aaaaaaab 	.word	0xaaaaaaab
 80048fc:	40020000 	.word	0x40020000
 8004900:	08070af4 	.word	0x08070af4
 8004904:	40020004 	.word	0x40020004
 8004908:	40020400 	.word	0x40020400
 800490c:	40020404 	.word	0x40020404

08004910 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004910:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004912:	4b28      	ldr	r3, [pc, #160]	@ (80049b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8004914:	4928      	ldr	r1, [pc, #160]	@ (80049b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
{
 8004916:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004918:	4d28      	ldr	r5, [pc, #160]	@ (80049bc <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 800491a:	4c29      	ldr	r4, [pc, #164]	@ (80049c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800491c:	42aa      	cmp	r2, r5
 800491e:	bf18      	it	ne
 8004920:	429a      	cmpne	r2, r3
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	428a      	cmp	r2, r1
 800492a:	bf08      	it	eq
 800492c:	f043 0301 	orreq.w	r3, r3, #1
 8004930:	3128      	adds	r1, #40	@ 0x28
 8004932:	42a2      	cmp	r2, r4
 8004934:	bf08      	it	eq
 8004936:	f043 0301 	orreq.w	r3, r3, #1
 800493a:	3428      	adds	r4, #40	@ 0x28
 800493c:	428a      	cmp	r2, r1
 800493e:	bf08      	it	eq
 8004940:	f043 0301 	orreq.w	r3, r3, #1
 8004944:	3128      	adds	r1, #40	@ 0x28
 8004946:	42a2      	cmp	r2, r4
 8004948:	bf08      	it	eq
 800494a:	f043 0301 	orreq.w	r3, r3, #1
 800494e:	428a      	cmp	r2, r1
 8004950:	bf08      	it	eq
 8004952:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004956:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004958:	b913      	cbnz	r3, 8004960 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 800495a:	4b1a      	ldr	r3, [pc, #104]	@ (80049c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 800495c:	429a      	cmp	r2, r3
 800495e:	d111      	bne.n	8004984 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004960:	f1a1 0308 	sub.w	r3, r1, #8
 8004964:	4c18      	ldr	r4, [pc, #96]	@ (80049c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004966:	4a19      	ldr	r2, [pc, #100]	@ (80049cc <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004968:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800496a:	fba4 4303 	umull	r4, r3, r4, r3
 800496e:	4c18      	ldr	r4, [pc, #96]	@ (80049d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8004970:	091d      	lsrs	r5, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004972:	eb02 1313 	add.w	r3, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004976:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004978:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800497a:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800497c:	e9c0 3418 	strd	r3, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004980:	bc30      	pop	{r4, r5}
 8004982:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004984:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004988:	4912      	ldr	r1, [pc, #72]	@ (80049d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800498a:	4c13      	ldr	r4, [pc, #76]	@ (80049d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800498c:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800498e:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004992:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004994:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004998:	d908      	bls.n	80049ac <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800499a:	f003 041f 	and.w	r4, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800499e:	4a0f      	ldr	r2, [pc, #60]	@ (80049dc <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049a0:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80049a2:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049a4:	40a1      	lsls	r1, r4
 80049a6:	4c0e      	ldr	r4, [pc, #56]	@ (80049e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80049a8:	0093      	lsls	r3, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80049aa:	e7e6      	b.n	800497a <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
      stream_number += 8U;
 80049ac:	3308      	adds	r3, #8
 80049ae:	461c      	mov	r4, r3
 80049b0:	e7f5      	b.n	800499e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
 80049b2:	bf00      	nop
 80049b4:	58025408 	.word	0x58025408
 80049b8:	58025430 	.word	0x58025430
 80049bc:	5802541c 	.word	0x5802541c
 80049c0:	58025444 	.word	0x58025444
 80049c4:	58025494 	.word	0x58025494
 80049c8:	cccccccd 	.word	0xcccccccd
 80049cc:	16009600 	.word	0x16009600
 80049d0:	58025880 	.word	0x58025880
 80049d4:	bffdfbf0 	.word	0xbffdfbf0
 80049d8:	aaaaaaab 	.word	0xaaaaaaab
 80049dc:	10008200 	.word	0x10008200
 80049e0:	40020880 	.word	0x40020880

080049e4 <HAL_DMA_Init>:
{
 80049e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e8:	4605      	mov	r5, r0
 80049ea:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 80049ec:	f7fe fd64 	bl	80034b8 <HAL_GetTick>
  if(hdma == NULL)
 80049f0:	2d00      	cmp	r5, #0
 80049f2:	f000 81a1 	beq.w	8004d38 <HAL_DMA_Init+0x354>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049f6:	682c      	ldr	r4, [r5, #0]
 80049f8:	4606      	mov	r6, r0
 80049fa:	4bac      	ldr	r3, [pc, #688]	@ (8004cac <HAL_DMA_Init+0x2c8>)
 80049fc:	4aac      	ldr	r2, [pc, #688]	@ (8004cb0 <HAL_DMA_Init+0x2cc>)
 80049fe:	4294      	cmp	r4, r2
 8004a00:	bf18      	it	ne
 8004a02:	429c      	cmpne	r4, r3
 8004a04:	f102 0218 	add.w	r2, r2, #24
 8004a08:	bf0c      	ite	eq
 8004a0a:	2301      	moveq	r3, #1
 8004a0c:	2300      	movne	r3, #0
 8004a0e:	4294      	cmp	r4, r2
 8004a10:	bf08      	it	eq
 8004a12:	f043 0301 	orreq.w	r3, r3, #1
 8004a16:	3218      	adds	r2, #24
 8004a18:	4294      	cmp	r4, r2
 8004a1a:	bf08      	it	eq
 8004a1c:	f043 0301 	orreq.w	r3, r3, #1
 8004a20:	3218      	adds	r2, #24
 8004a22:	4294      	cmp	r4, r2
 8004a24:	bf08      	it	eq
 8004a26:	f043 0301 	orreq.w	r3, r3, #1
 8004a2a:	3218      	adds	r2, #24
 8004a2c:	4294      	cmp	r4, r2
 8004a2e:	bf08      	it	eq
 8004a30:	f043 0301 	orreq.w	r3, r3, #1
 8004a34:	3218      	adds	r2, #24
 8004a36:	4294      	cmp	r4, r2
 8004a38:	bf08      	it	eq
 8004a3a:	f043 0301 	orreq.w	r3, r3, #1
 8004a3e:	3218      	adds	r2, #24
 8004a40:	4294      	cmp	r4, r2
 8004a42:	bf08      	it	eq
 8004a44:	f043 0301 	orreq.w	r3, r3, #1
 8004a48:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004a4c:	4294      	cmp	r4, r2
 8004a4e:	bf08      	it	eq
 8004a50:	f043 0301 	orreq.w	r3, r3, #1
 8004a54:	3218      	adds	r2, #24
 8004a56:	4294      	cmp	r4, r2
 8004a58:	bf08      	it	eq
 8004a5a:	f043 0301 	orreq.w	r3, r3, #1
 8004a5e:	3218      	adds	r2, #24
 8004a60:	4294      	cmp	r4, r2
 8004a62:	bf08      	it	eq
 8004a64:	f043 0301 	orreq.w	r3, r3, #1
 8004a68:	3218      	adds	r2, #24
 8004a6a:	4294      	cmp	r4, r2
 8004a6c:	bf08      	it	eq
 8004a6e:	f043 0301 	orreq.w	r3, r3, #1
 8004a72:	3218      	adds	r2, #24
 8004a74:	4294      	cmp	r4, r2
 8004a76:	bf08      	it	eq
 8004a78:	f043 0301 	orreq.w	r3, r3, #1
 8004a7c:	3218      	adds	r2, #24
 8004a7e:	4294      	cmp	r4, r2
 8004a80:	bf08      	it	eq
 8004a82:	f043 0301 	orreq.w	r3, r3, #1
 8004a86:	3218      	adds	r2, #24
 8004a88:	4294      	cmp	r4, r2
 8004a8a:	bf08      	it	eq
 8004a8c:	f043 0301 	orreq.w	r3, r3, #1
 8004a90:	b91b      	cbnz	r3, 8004a9a <HAL_DMA_Init+0xb6>
 8004a92:	4b88      	ldr	r3, [pc, #544]	@ (8004cb4 <HAL_DMA_Init+0x2d0>)
 8004a94:	429c      	cmp	r4, r3
 8004a96:	f040 8196 	bne.w	8004dc6 <HAL_DMA_Init+0x3e2>
    __HAL_UNLOCK(hdma);
 8004a9a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a9c:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8004a9e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aa2:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	e006      	b.n	8004abe <HAL_DMA_Init+0xda>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ab0:	f7fe fd02 	bl	80034b8 <HAL_GetTick>
 8004ab4:	1b80      	subs	r0, r0, r6
 8004ab6:	2805      	cmp	r0, #5
 8004ab8:	f200 8142 	bhi.w	8004d40 <HAL_DMA_Init+0x35c>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004abc:	682c      	ldr	r4, [r5, #0]
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	07df      	lsls	r7, r3, #31
 8004ac2:	d4f5      	bmi.n	8004ab0 <HAL_DMA_Init+0xcc>
    registerValue |=  hdma->Init.Direction           |
 8004ac4:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ac8:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8004aca:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004acc:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004ace:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	6969      	ldr	r1, [r5, #20]
 8004ad4:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ad6:	69e9      	ldr	r1, [r5, #28]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004adc:	4976      	ldr	r1, [pc, #472]	@ (8004cb8 <HAL_DMA_Init+0x2d4>)
 8004ade:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ae0:	6a28      	ldr	r0, [r5, #32]
 8004ae2:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004ae4:	4875      	ldr	r0, [pc, #468]	@ (8004cbc <HAL_DMA_Init+0x2d8>)
    registerValue |=  hdma->Init.Direction           |
 8004ae6:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ae8:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8004aea:	2904      	cmp	r1, #4
 8004aec:	f000 813d 	beq.w	8004d6a <HAL_DMA_Init+0x386>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004af0:	6800      	ldr	r0, [r0, #0]
 8004af2:	f36f 000f 	bfc	r0, #0, #16
 8004af6:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8004afa:	f080 80f1 	bcs.w	8004ce0 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004afe:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b00:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b02:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8004b06:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b08:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7ff fe80 	bl	8004810 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b10:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8004b12:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b14:	496a      	ldr	r1, [pc, #424]	@ (8004cc0 <HAL_DMA_Init+0x2dc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b16:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b1a:	4f6a      	ldr	r7, [pc, #424]	@ (8004cc4 <HAL_DMA_Init+0x2e0>)
 8004b1c:	1a61      	subs	r1, r4, r1
 8004b1e:	4e6a      	ldr	r6, [pc, #424]	@ (8004cc8 <HAL_DMA_Init+0x2e4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b20:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b22:	4a6a      	ldr	r2, [pc, #424]	@ (8004ccc <HAL_DMA_Init+0x2e8>)
 8004b24:	fab1 f181 	clz	r1, r1
 8004b28:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b2a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b2c:	eba4 0a02 	sub.w	sl, r4, r2
 8004b30:	4b67      	ldr	r3, [pc, #412]	@ (8004cd0 <HAL_DMA_Init+0x2ec>)
 8004b32:	0949      	lsrs	r1, r1, #5
 8004b34:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb0 <HAL_DMA_Init+0x2cc>)
 8004b36:	faba fa8a 	clz	sl, sl
 8004b3a:	eba4 0903 	sub.w	r9, r4, r3
 8004b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cac <HAL_DMA_Init+0x2c8>)
 8004b40:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8004b44:	fab7 f787 	clz	r7, r7
 8004b48:	4294      	cmp	r4, r2
 8004b4a:	bf18      	it	ne
 8004b4c:	429c      	cmpne	r4, r3
 8004b4e:	f102 0218 	add.w	r2, r2, #24
 8004b52:	fab9 f989 	clz	r9, r9
 8004b56:	eba4 0606 	sub.w	r6, r4, r6
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8004b64:	fab6 f686 	clz	r6, r6
 8004b68:	4294      	cmp	r4, r2
 8004b6a:	bf08      	it	eq
 8004b6c:	f043 0301 	orreq.w	r3, r3, #1
 8004b70:	3218      	adds	r2, #24
 8004b72:	097f      	lsrs	r7, r7, #5
 8004b74:	4294      	cmp	r4, r2
 8004b76:	bf08      	it	eq
 8004b78:	f043 0301 	orreq.w	r3, r3, #1
 8004b7c:	3218      	adds	r2, #24
 8004b7e:	0976      	lsrs	r6, r6, #5
 8004b80:	4294      	cmp	r4, r2
 8004b82:	bf08      	it	eq
 8004b84:	f043 0301 	orreq.w	r3, r3, #1
 8004b88:	3218      	adds	r2, #24
 8004b8a:	4294      	cmp	r4, r2
 8004b8c:	bf08      	it	eq
 8004b8e:	f043 0301 	orreq.w	r3, r3, #1
 8004b92:	3218      	adds	r2, #24
 8004b94:	4294      	cmp	r4, r2
 8004b96:	bf08      	it	eq
 8004b98:	f043 0301 	orreq.w	r3, r3, #1
 8004b9c:	3218      	adds	r2, #24
 8004b9e:	4294      	cmp	r4, r2
 8004ba0:	bf08      	it	eq
 8004ba2:	f043 0301 	orreq.w	r3, r3, #1
 8004ba6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004baa:	4294      	cmp	r4, r2
 8004bac:	bf08      	it	eq
 8004bae:	f043 0301 	orreq.w	r3, r3, #1
 8004bb2:	3218      	adds	r2, #24
 8004bb4:	4294      	cmp	r4, r2
 8004bb6:	bf08      	it	eq
 8004bb8:	f043 0301 	orreq.w	r3, r3, #1
 8004bbc:	3218      	adds	r2, #24
 8004bbe:	4294      	cmp	r4, r2
 8004bc0:	bf08      	it	eq
 8004bc2:	f043 0301 	orreq.w	r3, r3, #1
 8004bc6:	3218      	adds	r2, #24
 8004bc8:	4294      	cmp	r4, r2
 8004bca:	bf08      	it	eq
 8004bcc:	f043 0301 	orreq.w	r3, r3, #1
 8004bd0:	3218      	adds	r2, #24
 8004bd2:	4294      	cmp	r4, r2
 8004bd4:	bf08      	it	eq
 8004bd6:	f043 0301 	orreq.w	r3, r3, #1
 8004bda:	3218      	adds	r2, #24
 8004bdc:	4294      	cmp	r4, r2
 8004bde:	bf08      	it	eq
 8004be0:	f043 0301 	orreq.w	r3, r3, #1
 8004be4:	3218      	adds	r2, #24
 8004be6:	4294      	cmp	r4, r2
 8004be8:	bf08      	it	eq
 8004bea:	f043 0301 	orreq.w	r3, r3, #1
 8004bee:	3218      	adds	r2, #24
 8004bf0:	4294      	cmp	r4, r2
 8004bf2:	bf08      	it	eq
 8004bf4:	f043 0301 	orreq.w	r3, r3, #1
 8004bf8:	4a36      	ldr	r2, [pc, #216]	@ (8004cd4 <HAL_DMA_Init+0x2f0>)
 8004bfa:	ea4a 0303 	orr.w	r3, sl, r3
 8004bfe:	eba4 0802 	sub.w	r8, r4, r2
 8004c02:	323c      	adds	r2, #60	@ 0x3c
 8004c04:	430b      	orrs	r3, r1
 8004c06:	fab8 f888 	clz	r8, r8
 8004c0a:	eba4 0b02 	sub.w	fp, r4, r2
 8004c0e:	3214      	adds	r2, #20
 8004c10:	ea49 0303 	orr.w	r3, r9, r3
 8004c14:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004c18:	fabb fb8b 	clz	fp, fp
 8004c1c:	1aa2      	subs	r2, r4, r2
 8004c1e:	ea48 0303 	orr.w	r3, r8, r3
 8004c22:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8004c26:	fab2 f282 	clz	r2, r2
 8004c2a:	433b      	orrs	r3, r7
 8004c2c:	0952      	lsrs	r2, r2, #5
 8004c2e:	4333      	orrs	r3, r6
 8004c30:	9201      	str	r2, [sp, #4]
 8004c32:	ea5b 0303 	orrs.w	r3, fp, r3
 8004c36:	d100      	bne.n	8004c3a <HAL_DMA_Init+0x256>
 8004c38:	b382      	cbz	r2, 8004c9c <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	9100      	str	r1, [sp, #0]
 8004c3e:	f7ff fe67 	bl	8004910 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c42:	68ab      	ldr	r3, [r5, #8]
 8004c44:	9900      	ldr	r1, [sp, #0]
 8004c46:	2b80      	cmp	r3, #128	@ 0x80
 8004c48:	f000 8083 	beq.w	8004d52 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c4c:	686a      	ldr	r2, [r5, #4]
 8004c4e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8004c50:	b2d0      	uxtb	r0, r2
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c52:	3a01      	subs	r2, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c54:	e9d5 4c19 	ldrd	r4, ip, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c58:	2a07      	cmp	r2, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c5a:	6018      	str	r0, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c5c:	f8c4 c004 	str.w	ip, [r4, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c60:	d87e      	bhi.n	8004d60 <HAL_DMA_Init+0x37c>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c62:	ea4a 0a01 	orr.w	sl, sl, r1
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c66:	1e44      	subs	r4, r0, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c68:	ea49 090a 	orr.w	r9, r9, sl
 8004c6c:	ea48 0809 	orr.w	r8, r8, r9
 8004c70:	ea47 0708 	orr.w	r7, r7, r8
 8004c74:	433e      	orrs	r6, r7
 8004c76:	ea5b 0606 	orrs.w	r6, fp, r6
 8004c7a:	d103      	bne.n	8004c84 <HAL_DMA_Init+0x2a0>
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 811d 	beq.w	8004ebe <HAL_DMA_Init+0x4da>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c84:	4a14      	ldr	r2, [pc, #80]	@ (8004cd8 <HAL_DMA_Init+0x2f4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c86:	4915      	ldr	r1, [pc, #84]	@ (8004cdc <HAL_DMA_Init+0x2f8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c88:	4402      	add	r2, r0
 8004c8a:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c8c:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c8e:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c90:	40a3      	lsls	r3, r4
 8004c92:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
 8004c96:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c98:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c9a:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c9c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004c9e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca0:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004ca2:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 8004ca6:	b003      	add	sp, #12
 8004ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cac:	40020010 	.word	0x40020010
 8004cb0:	40020028 	.word	0x40020028
 8004cb4:	400204b8 	.word	0x400204b8
 8004cb8:	fe10803f 	.word	0xfe10803f
 8004cbc:	5c001000 	.word	0x5c001000
 8004cc0:	5802541c 	.word	0x5802541c
 8004cc4:	58025458 	.word	0x58025458
 8004cc8:	5802546c 	.word	0x5802546c
 8004ccc:	58025408 	.word	0x58025408
 8004cd0:	58025430 	.word	0x58025430
 8004cd4:	58025444 	.word	0x58025444
 8004cd8:	1600963f 	.word	0x1600963f
 8004cdc:	58025940 	.word	0x58025940
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ce0:	6868      	ldr	r0, [r5, #4]
 8004ce2:	282e      	cmp	r0, #46	@ 0x2e
 8004ce4:	d932      	bls.n	8004d4c <HAL_DMA_Init+0x368>
 8004ce6:	383f      	subs	r0, #63	@ 0x3f
 8004ce8:	2813      	cmp	r0, #19
 8004cea:	d806      	bhi.n	8004cfa <HAL_DMA_Init+0x316>
 8004cec:	4e7a      	ldr	r6, [pc, #488]	@ (8004ed8 <HAL_DMA_Init+0x4f4>)
 8004cee:	fa26 f000 	lsr.w	r0, r6, r0
 8004cf2:	07c0      	lsls	r0, r0, #31
 8004cf4:	d501      	bpl.n	8004cfa <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 8004cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004cfa:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cfc:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004cfe:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d00:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8004d04:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d08:	f47f aefe 	bne.w	8004b08 <HAL_DMA_Init+0x124>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d0c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8004d0e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8004d10:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f43f aef8 	beq.w	8004b08 <HAL_DMA_Init+0x124>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	d138      	bne.n	8004d8e <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 8004d1c:	2901      	cmp	r1, #1
 8004d1e:	d04d      	beq.n	8004dbc <HAL_DMA_Init+0x3d8>
 8004d20:	f031 0202 	bics.w	r2, r1, #2
 8004d24:	f47f aef0 	bne.w	8004b08 <HAL_DMA_Init+0x124>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d28:	01c2      	lsls	r2, r0, #7
 8004d2a:	f57f aeed 	bpl.w	8004b08 <HAL_DMA_Init+0x124>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d2e:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8004d30:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d32:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004d34:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8004d38:	2001      	movs	r0, #1
}
 8004d3a:	b003      	add	sp, #12
 8004d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d40:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d42:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d44:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d46:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        return HAL_ERROR;
 8004d4a:	e7f5      	b.n	8004d38 <HAL_DMA_Init+0x354>
 8004d4c:	2828      	cmp	r0, #40	@ 0x28
 8004d4e:	d9d4      	bls.n	8004cfa <HAL_DMA_Init+0x316>
 8004d50:	e7d1      	b.n	8004cf6 <HAL_DMA_Init+0x312>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d52:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d54:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8004d56:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d5a:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d5c:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d5e:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d66:	676b      	str	r3, [r5, #116]	@ 0x74
 8004d68:	e798      	b.n	8004c9c <HAL_DMA_Init+0x2b8>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d6a:	6806      	ldr	r6, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d6c:	e9d5 070b 	ldrd	r0, r7, [r5, #44]	@ 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d70:	f36f 060f 	bfc	r6, #0, #16
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d74:	4307      	orrs	r7, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d76:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d7a:	ea43 0307 	orr.w	r3, r3, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d7e:	d2af      	bcs.n	8004ce0 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d80:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004d82:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d84:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8004d88:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d8c:	e7bf      	b.n	8004d0e <HAL_DMA_Init+0x32a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d8e:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004d92:	d004      	beq.n	8004d9e <HAL_DMA_Init+0x3ba>
    switch (hdma->Init.FIFOThreshold)
 8004d94:	2902      	cmp	r1, #2
 8004d96:	d9ca      	bls.n	8004d2e <HAL_DMA_Init+0x34a>
 8004d98:	2903      	cmp	r1, #3
 8004d9a:	d0c5      	beq.n	8004d28 <HAL_DMA_Init+0x344>
 8004d9c:	e6b4      	b.n	8004b08 <HAL_DMA_Init+0x124>
    switch (hdma->Init.FIFOThreshold)
 8004d9e:	2903      	cmp	r1, #3
 8004da0:	f63f aeb2 	bhi.w	8004b08 <HAL_DMA_Init+0x124>
 8004da4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dac <HAL_DMA_Init+0x3c8>)
 8004da6:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004d2f 	.word	0x08004d2f
 8004db0:	08004d29 	.word	0x08004d29
 8004db4:	08004d2f 	.word	0x08004d2f
 8004db8:	08004dbd 	.word	0x08004dbd
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dbc:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8004dc0:	f47f aea2 	bne.w	8004b08 <HAL_DMA_Init+0x124>
 8004dc4:	e7b3      	b.n	8004d2e <HAL_DMA_Init+0x34a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004dc6:	4a45      	ldr	r2, [pc, #276]	@ (8004edc <HAL_DMA_Init+0x4f8>)
 8004dc8:	4945      	ldr	r1, [pc, #276]	@ (8004ee0 <HAL_DMA_Init+0x4fc>)
 8004dca:	4b46      	ldr	r3, [pc, #280]	@ (8004ee4 <HAL_DMA_Init+0x500>)
 8004dcc:	eba4 0a02 	sub.w	sl, r4, r2
 8004dd0:	1a61      	subs	r1, r4, r1
 8004dd2:	4f45      	ldr	r7, [pc, #276]	@ (8004ee8 <HAL_DMA_Init+0x504>)
 8004dd4:	eba4 0903 	sub.w	r9, r4, r3
 8004dd8:	faba fa8a 	clz	sl, sl
 8004ddc:	3314      	adds	r3, #20
 8004dde:	fab1 f181 	clz	r1, r1
 8004de2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8004de6:	fab9 f989 	clz	r9, r9
 8004dea:	eba4 0803 	sub.w	r8, r4, r3
 8004dee:	0949      	lsrs	r1, r1, #5
 8004df0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8004df4:	1be7      	subs	r7, r4, r7
 8004df6:	fab8 f888 	clz	r8, r8
 8004dfa:	ea4a 0301 	orr.w	r3, sl, r1
 8004dfe:	4e3b      	ldr	r6, [pc, #236]	@ (8004eec <HAL_DMA_Init+0x508>)
 8004e00:	3278      	adds	r2, #120	@ 0x78
 8004e02:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004e06:	ea49 0303 	orr.w	r3, r9, r3
 8004e0a:	fab7 f787 	clz	r7, r7
 8004e0e:	1ba6      	subs	r6, r4, r6
 8004e10:	eba4 0b02 	sub.w	fp, r4, r2
 8004e14:	ea48 0303 	orr.w	r3, r8, r3
 8004e18:	097f      	lsrs	r7, r7, #5
 8004e1a:	fab6 f686 	clz	r6, r6
 8004e1e:	3214      	adds	r2, #20
 8004e20:	fabb fb8b 	clz	fp, fp
 8004e24:	433b      	orrs	r3, r7
 8004e26:	0976      	lsrs	r6, r6, #5
 8004e28:	1aa2      	subs	r2, r4, r2
 8004e2a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8004e2e:	4333      	orrs	r3, r6
 8004e30:	fab2 f282 	clz	r2, r2
 8004e34:	ea5b 0303 	orrs.w	r3, fp, r3
 8004e38:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8004e3c:	9201      	str	r2, [sp, #4]
 8004e3e:	d101      	bne.n	8004e44 <HAL_DMA_Init+0x460>
 8004e40:	2a00      	cmp	r2, #0
 8004e42:	d043      	beq.n	8004ecc <HAL_DMA_Init+0x4e8>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e44:	2302      	movs	r3, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e46:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8004f00 <HAL_DMA_Init+0x51c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e4a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e54:	68ab      	ldr	r3, [r5, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e56:	6822      	ldr	r2, [r4, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e58:	2b40      	cmp	r3, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e5a:	ea02 0e0e 	and.w	lr, r2, lr
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e5e:	d033      	beq.n	8004ec8 <HAL_DMA_Init+0x4e4>
 8004e60:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 8004e64:	fab3 f383 	clz	r3, r3
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	0398      	lsls	r0, r3, #14
 8004e6c:	9100      	str	r1, [sp, #0]
 8004e6e:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8004e72:	ea43 0c02 	orr.w	ip, r3, r2
 8004e76:	696a      	ldr	r2, [r5, #20]
 8004e78:	69ab      	ldr	r3, [r5, #24]
 8004e7a:	ea4c 0c02 	orr.w	ip, ip, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef0 <HAL_DMA_Init+0x50c>)
 8004e80:	ea4c 0c03 	orr.w	ip, ip, r3
 8004e84:	69eb      	ldr	r3, [r5, #28]
 8004e86:	4422      	add	r2, r4
 8004e88:	ea4c 0c03 	orr.w	ip, ip, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004e8c:	6a2b      	ldr	r3, [r5, #32]
 8004e8e:	ea4e 1313 	orr.w	r3, lr, r3, lsr #4
 8004e92:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e96:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004e98:	4b16      	ldr	r3, [pc, #88]	@ (8004ef4 <HAL_DMA_Init+0x510>)
 8004e9a:	fba3 2302 	umull	r2, r3, r3, r2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004e9e:	6020      	str	r0, [r4, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ea0:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ea2:	091b      	lsrs	r3, r3, #4
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	65eb      	str	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ea8:	f7ff fcb2 	bl	8004810 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004eac:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004eae:	4602      	mov	r2, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004eb0:	9900      	ldr	r1, [sp, #0]
 8004eb2:	f003 001f 	and.w	r0, r3, #31
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	4083      	lsls	r3, r0
 8004eba:	6053      	str	r3, [r2, #4]
 8004ebc:	e6bd      	b.n	8004c3a <HAL_DMA_Init+0x256>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef8 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ec0:	490e      	ldr	r1, [pc, #56]	@ (8004efc <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ec2:	4402      	add	r2, r0
 8004ec4:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ec6:	e6e1      	b.n	8004c8c <HAL_DMA_Init+0x2a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ec8:	2010      	movs	r0, #16
 8004eca:	e7cf      	b.n	8004e6c <HAL_DMA_Init+0x488>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ecc:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ece:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ed0:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ed2:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8004ed6:	e72f      	b.n	8004d38 <HAL_DMA_Init+0x354>
 8004ed8:	000f030f 	.word	0x000f030f
 8004edc:	58025408 	.word	0x58025408
 8004ee0:	5802541c 	.word	0x5802541c
 8004ee4:	58025430 	.word	0x58025430
 8004ee8:	58025458 	.word	0x58025458
 8004eec:	5802546c 	.word	0x5802546c
 8004ef0:	a7fdabf8 	.word	0xa7fdabf8
 8004ef4:	cccccccd 	.word	0xcccccccd
 8004ef8:	1000823f 	.word	0x1000823f
 8004efc:	40020940 	.word	0x40020940
 8004f00:	fffe000f 	.word	0xfffe000f

08004f04 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004f04:	2800      	cmp	r0, #0
 8004f06:	f000 8221 	beq.w	800534c <HAL_DMA_Start_IT+0x448>
{
 8004f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hdma);
 8004f0e:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8004f12:	2c01      	cmp	r4, #1
 8004f14:	f000 8217 	beq.w	8005346 <HAL_DMA_Start_IT+0x442>
 8004f18:	2401      	movs	r4, #1
 8004f1a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f1e:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8004f22:	2c01      	cmp	r4, #1
 8004f24:	d008      	beq.n	8004f38 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 8004f2a:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f2c:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8004f2e:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8004f32:	2001      	movs	r0, #1
}
 8004f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f38:	2402      	movs	r4, #2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f3a:	4e69      	ldr	r6, [pc, #420]	@ (80050e0 <HAL_DMA_Start_IT+0x1dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f3c:	f8df e1a8 	ldr.w	lr, [pc, #424]	@ 80050e8 <HAL_DMA_Start_IT+0x1e4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f40:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f44:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8004f46:	4d67      	ldr	r5, [pc, #412]	@ (80050e4 <HAL_DMA_Start_IT+0x1e0>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f48:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8004f4a:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80050fc <HAL_DMA_Start_IT+0x1f8>
 8004f50:	4574      	cmp	r4, lr
 8004f52:	bf18      	it	ne
 8004f54:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 8004f56:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8005100 <HAL_DMA_Start_IT+0x1fc>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f5a:	f8d0 a058 	ldr.w	sl, [r0, #88]	@ 0x58
 8004f5e:	bf0c      	ite	eq
 8004f60:	2601      	moveq	r6, #1
 8004f62:	2600      	movne	r6, #0
 8004f64:	4544      	cmp	r4, r8
 8004f66:	bf14      	ite	ne
 8004f68:	46b1      	movne	r9, r6
 8004f6a:	f046 0901 	orreq.w	r9, r6, #1
    __HAL_DMA_DISABLE(hdma);
 8004f6e:	42ac      	cmp	r4, r5
 8004f70:	bf18      	it	ne
 8004f72:	4564      	cmpne	r4, ip
 8004f74:	bf0c      	ite	eq
 8004f76:	2501      	moveq	r5, #1
 8004f78:	2500      	movne	r5, #0
 8004f7a:	f040 80c3 	bne.w	8005104 <HAL_DMA_Start_IT+0x200>
 8004f7e:	f8d4 c000 	ldr.w	ip, [r4]
 8004f82:	f02c 0c01 	bic.w	ip, ip, #1
 8004f86:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004f8a:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f8e:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
 8004f92:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004f94:	f1bc 0f00 	cmp.w	ip, #0
 8004f98:	d007      	beq.n	8004faa <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f9a:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8004f9e:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fa0:	b91d      	cbnz	r5, 8004faa <HAL_DMA_Start_IT+0xa6>
 8004fa2:	f1b9 0f00 	cmp.w	r9, #0
 8004fa6:	f000 8130 	beq.w	800520a <HAL_DMA_Start_IT+0x306>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004faa:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 8004fac:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 8004fb0:	f007 081f 	and.w	r8, r7, #31
 8004fb4:	fa0e fe08 	lsl.w	lr, lr, r8
 8004fb8:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fbc:	6827      	ldr	r7, [r4, #0]
 8004fbe:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 8004fc2:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004fc4:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fc6:	6883      	ldr	r3, [r0, #8]
 8004fc8:	2b40      	cmp	r3, #64	@ 0x40
 8004fca:	f000 81c1 	beq.w	8005350 <HAL_DMA_Start_IT+0x44c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004fce:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004fd0:	60e2      	str	r2, [r4, #12]
      if(hdma->XferHalfCpltCallback != NULL)
 8004fd2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fd4:	2d00      	cmp	r5, #0
 8004fd6:	f040 81a1 	bne.w	800531c <HAL_DMA_Start_IT+0x418>
 8004fda:	4b43      	ldr	r3, [pc, #268]	@ (80050e8 <HAL_DMA_Start_IT+0x1e4>)
 8004fdc:	429c      	cmp	r4, r3
 8004fde:	f000 81de 	beq.w	800539e <HAL_DMA_Start_IT+0x49a>
 8004fe2:	3318      	adds	r3, #24
 8004fe4:	429c      	cmp	r4, r3
 8004fe6:	f000 81f6 	beq.w	80053d6 <HAL_DMA_Start_IT+0x4d2>
 8004fea:	f1b9 0f00 	cmp.w	r9, #0
 8004fee:	f040 81c7 	bne.w	8005380 <HAL_DMA_Start_IT+0x47c>
 8004ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80050ec <HAL_DMA_Start_IT+0x1e8>)
 8004ff4:	429c      	cmp	r4, r3
 8004ff6:	f000 8201 	beq.w	80053fc <HAL_DMA_Start_IT+0x4f8>
 8004ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80050f0 <HAL_DMA_Start_IT+0x1ec>)
 8004ffc:	429c      	cmp	r4, r3
 8004ffe:	f000 8209 	beq.w	8005414 <HAL_DMA_Start_IT+0x510>
 8005002:	3318      	adds	r3, #24
 8005004:	429c      	cmp	r4, r3
 8005006:	f000 8223 	beq.w	8005450 <HAL_DMA_Start_IT+0x54c>
 800500a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800500e:	429c      	cmp	r4, r3
 8005010:	f000 8233 	beq.w	800547a <HAL_DMA_Start_IT+0x576>
 8005014:	3318      	adds	r3, #24
 8005016:	429c      	cmp	r4, r3
 8005018:	f000 8242 	beq.w	80054a0 <HAL_DMA_Start_IT+0x59c>
 800501c:	3318      	adds	r3, #24
 800501e:	429c      	cmp	r4, r3
 8005020:	f000 8249 	beq.w	80054b6 <HAL_DMA_Start_IT+0x5b2>
 8005024:	3318      	adds	r3, #24
 8005026:	429c      	cmp	r4, r3
 8005028:	f000 8250 	beq.w	80054cc <HAL_DMA_Start_IT+0x5c8>
 800502c:	3318      	adds	r3, #24
 800502e:	429c      	cmp	r4, r3
 8005030:	f000 8257 	beq.w	80054e2 <HAL_DMA_Start_IT+0x5de>
 8005034:	3318      	adds	r3, #24
 8005036:	429c      	cmp	r4, r3
 8005038:	f000 8267 	beq.w	800550a <HAL_DMA_Start_IT+0x606>
 800503c:	3318      	adds	r3, #24
 800503e:	429c      	cmp	r4, r3
 8005040:	f000 8265 	beq.w	800550e <HAL_DMA_Start_IT+0x60a>
 8005044:	3318      	adds	r3, #24
 8005046:	429c      	cmp	r4, r3
 8005048:	f000 8275 	beq.w	8005536 <HAL_DMA_Start_IT+0x632>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	f023 030e 	bic.w	r3, r3, #14
 8005052:	f043 030a 	orr.w	r3, r3, #10
 8005056:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005058:	b11a      	cbz	r2, 8005062 <HAL_DMA_Start_IT+0x15e>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	f043 0304 	orr.w	r3, r3, #4
 8005060:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005062:	4b24      	ldr	r3, [pc, #144]	@ (80050f4 <HAL_DMA_Start_IT+0x1f0>)
 8005064:	4a24      	ldr	r2, [pc, #144]	@ (80050f8 <HAL_DMA_Start_IT+0x1f4>)
 8005066:	4294      	cmp	r4, r2
 8005068:	bf18      	it	ne
 800506a:	429c      	cmpne	r4, r3
 800506c:	f102 0214 	add.w	r2, r2, #20
 8005070:	bf0c      	ite	eq
 8005072:	2301      	moveq	r3, #1
 8005074:	2300      	movne	r3, #0
 8005076:	4294      	cmp	r4, r2
 8005078:	bf08      	it	eq
 800507a:	f043 0301 	orreq.w	r3, r3, #1
 800507e:	3214      	adds	r2, #20
 8005080:	4294      	cmp	r4, r2
 8005082:	bf08      	it	eq
 8005084:	f043 0301 	orreq.w	r3, r3, #1
 8005088:	3214      	adds	r2, #20
 800508a:	4294      	cmp	r4, r2
 800508c:	bf08      	it	eq
 800508e:	f043 0301 	orreq.w	r3, r3, #1
 8005092:	3214      	adds	r2, #20
 8005094:	4294      	cmp	r4, r2
 8005096:	bf08      	it	eq
 8005098:	f043 0301 	orreq.w	r3, r3, #1
 800509c:	3214      	adds	r2, #20
 800509e:	4294      	cmp	r4, r2
 80050a0:	bf08      	it	eq
 80050a2:	f043 0301 	orreq.w	r3, r3, #1
 80050a6:	3214      	adds	r2, #20
 80050a8:	4294      	cmp	r4, r2
 80050aa:	bf08      	it	eq
 80050ac:	f043 0301 	orreq.w	r3, r3, #1
 80050b0:	b17b      	cbz	r3, 80050d2 <HAL_DMA_Start_IT+0x1ce>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050b2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80050b4:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	03d2      	lsls	r2, r2, #15
 80050bc:	f100 813e 	bmi.w	800533c <HAL_DMA_Start_IT+0x438>
      if(hdma->DMAmuxRequestGen != 0U)
 80050c0:	f1bc 0f00 	cmp.w	ip, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_DMA_Start_IT+0x1ce>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050c6:	f8dc 3000 	ldr.w	r3, [ip]
 80050ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ce:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 80050d2:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050d4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	6023      	str	r3, [r4, #0]
}
 80050dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e0:	40020070 	.word	0x40020070
 80050e4:	40020028 	.word	0x40020028
 80050e8:	40020040 	.word	0x40020040
 80050ec:	40020088 	.word	0x40020088
 80050f0:	400200a0 	.word	0x400200a0
 80050f4:	58025408 	.word	0x58025408
 80050f8:	5802541c 	.word	0x5802541c
 80050fc:	40020058 	.word	0x40020058
 8005100:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8005104:	4574      	cmp	r4, lr
 8005106:	f000 8154 	beq.w	80053b2 <HAL_DMA_Start_IT+0x4ae>
 800510a:	4544      	cmp	r4, r8
 800510c:	f000 815a 	beq.w	80053c4 <HAL_DMA_Start_IT+0x4c0>
 8005110:	f1b9 0f00 	cmp.w	r9, #0
 8005114:	f040 811f 	bne.w	8005356 <HAL_DMA_Start_IT+0x452>
 8005118:	f8df c434 	ldr.w	ip, [pc, #1076]	@ 8005550 <HAL_DMA_Start_IT+0x64c>
 800511c:	4564      	cmp	r4, ip
 800511e:	f000 8164 	beq.w	80053ea <HAL_DMA_Start_IT+0x4e6>
 8005122:	f10c 0c18 	add.w	ip, ip, #24
 8005126:	4564      	cmp	r4, ip
 8005128:	f000 8180 	beq.w	800542c <HAL_DMA_Start_IT+0x528>
 800512c:	f10c 0c18 	add.w	ip, ip, #24
 8005130:	4564      	cmp	r4, ip
 8005132:	f000 8184 	beq.w	800543e <HAL_DMA_Start_IT+0x53a>
 8005136:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 800513a:	4564      	cmp	r4, ip
 800513c:	f000 8194 	beq.w	8005468 <HAL_DMA_Start_IT+0x564>
 8005140:	f10c 0c18 	add.w	ip, ip, #24
 8005144:	4564      	cmp	r4, ip
 8005146:	f000 81a2 	beq.w	800548e <HAL_DMA_Start_IT+0x58a>
 800514a:	f10c 0c18 	add.w	ip, ip, #24
 800514e:	4564      	cmp	r4, ip
 8005150:	f000 81b3 	beq.w	80054ba <HAL_DMA_Start_IT+0x5b6>
 8005154:	f10c 0c18 	add.w	ip, ip, #24
 8005158:	4564      	cmp	r4, ip
 800515a:	f000 81b9 	beq.w	80054d0 <HAL_DMA_Start_IT+0x5cc>
 800515e:	f10c 0c18 	add.w	ip, ip, #24
 8005162:	4564      	cmp	r4, ip
 8005164:	f000 81bf 	beq.w	80054e6 <HAL_DMA_Start_IT+0x5e2>
 8005168:	f10c 0c18 	add.w	ip, ip, #24
 800516c:	4564      	cmp	r4, ip
 800516e:	f000 81c3 	beq.w	80054f8 <HAL_DMA_Start_IT+0x5f4>
 8005172:	f10c 0c18 	add.w	ip, ip, #24
 8005176:	4564      	cmp	r4, ip
 8005178:	f000 81cb 	beq.w	8005512 <HAL_DMA_Start_IT+0x60e>
 800517c:	f10c 0c18 	add.w	ip, ip, #24
 8005180:	4564      	cmp	r4, ip
 8005182:	f000 81cf 	beq.w	8005524 <HAL_DMA_Start_IT+0x620>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005186:	f8df c3cc 	ldr.w	ip, [pc, #972]	@ 8005554 <HAL_DMA_Start_IT+0x650>
 800518a:	f8df e3cc 	ldr.w	lr, [pc, #972]	@ 8005558 <HAL_DMA_Start_IT+0x654>
 800518e:	4574      	cmp	r4, lr
 8005190:	bf18      	it	ne
 8005192:	4564      	cmpne	r4, ip
 8005194:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
 8005198:	bf0c      	ite	eq
 800519a:	f04f 0c01 	moveq.w	ip, #1
 800519e:	f04f 0c00 	movne.w	ip, #0
 80051a2:	4574      	cmp	r4, lr
 80051a4:	bf08      	it	eq
 80051a6:	f04c 0c01 	orreq.w	ip, ip, #1
 80051aa:	f10e 0e14 	add.w	lr, lr, #20
 80051ae:	4574      	cmp	r4, lr
 80051b0:	bf08      	it	eq
 80051b2:	f04c 0c01 	orreq.w	ip, ip, #1
 80051b6:	f10e 0e14 	add.w	lr, lr, #20
 80051ba:	4574      	cmp	r4, lr
 80051bc:	bf08      	it	eq
 80051be:	f04c 0c01 	orreq.w	ip, ip, #1
 80051c2:	f10e 0e14 	add.w	lr, lr, #20
 80051c6:	4574      	cmp	r4, lr
 80051c8:	bf08      	it	eq
 80051ca:	f04c 0c01 	orreq.w	ip, ip, #1
    __HAL_DMA_DISABLE(hdma);
 80051ce:	f8d4 e000 	ldr.w	lr, [r4]
 80051d2:	f02e 0e01 	bic.w	lr, lr, #1
 80051d6:	f8c4 e000 	str.w	lr, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051da:	f8df e380 	ldr.w	lr, [pc, #896]	@ 800555c <HAL_DMA_Start_IT+0x658>
 80051de:	4574      	cmp	r4, lr
 80051e0:	bf08      	it	eq
 80051e2:	f04c 0c01 	orreq.w	ip, ip, #1
 80051e6:	f1bc 0f00 	cmp.w	ip, #0
 80051ea:	d103      	bne.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
 80051ec:	f8df c370 	ldr.w	ip, [pc, #880]	@ 8005560 <HAL_DMA_Start_IT+0x65c>
 80051f0:	4564      	cmp	r4, ip
 80051f2:	d14f      	bne.n	8005294 <HAL_DMA_Start_IT+0x390>
    if(hdma->DMAmuxRequestGen != 0U)
 80051f4:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051f8:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 80051fc:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80051fe:	f1bc 0f00 	cmp.w	ip, #0
 8005202:	d002      	beq.n	800520a <HAL_DMA_Start_IT+0x306>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005204:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8005208:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800520a:	f8df e344 	ldr.w	lr, [pc, #836]	@ 8005550 <HAL_DMA_Start_IT+0x64c>
 800520e:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 8005564 <HAL_DMA_Start_IT+0x660>
 8005212:	4544      	cmp	r4, r8
 8005214:	bf18      	it	ne
 8005216:	4574      	cmpne	r4, lr
 8005218:	f108 0818 	add.w	r8, r8, #24
 800521c:	bf0c      	ite	eq
 800521e:	f04f 0e01 	moveq.w	lr, #1
 8005222:	f04f 0e00 	movne.w	lr, #0
 8005226:	4544      	cmp	r4, r8
 8005228:	bf08      	it	eq
 800522a:	f04e 0e01 	orreq.w	lr, lr, #1
 800522e:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 8005232:	4544      	cmp	r4, r8
 8005234:	bf08      	it	eq
 8005236:	f04e 0e01 	orreq.w	lr, lr, #1
 800523a:	f108 0818 	add.w	r8, r8, #24
 800523e:	4544      	cmp	r4, r8
 8005240:	bf08      	it	eq
 8005242:	f04e 0e01 	orreq.w	lr, lr, #1
 8005246:	f108 0818 	add.w	r8, r8, #24
 800524a:	4544      	cmp	r4, r8
 800524c:	bf08      	it	eq
 800524e:	f04e 0e01 	orreq.w	lr, lr, #1
 8005252:	f108 0818 	add.w	r8, r8, #24
 8005256:	4544      	cmp	r4, r8
 8005258:	bf08      	it	eq
 800525a:	f04e 0e01 	orreq.w	lr, lr, #1
 800525e:	f108 0818 	add.w	r8, r8, #24
 8005262:	4544      	cmp	r4, r8
 8005264:	bf08      	it	eq
 8005266:	f04e 0e01 	orreq.w	lr, lr, #1
 800526a:	f108 0818 	add.w	r8, r8, #24
 800526e:	4544      	cmp	r4, r8
 8005270:	bf08      	it	eq
 8005272:	f04e 0e01 	orreq.w	lr, lr, #1
 8005276:	f108 0818 	add.w	r8, r8, #24
 800527a:	4544      	cmp	r4, r8
 800527c:	bf08      	it	eq
 800527e:	f04e 0e01 	orreq.w	lr, lr, #1
 8005282:	f1be 0f00 	cmp.w	lr, #0
 8005286:	f47f ae90 	bne.w	8004faa <HAL_DMA_Start_IT+0xa6>
 800528a:	f8df e2dc 	ldr.w	lr, [pc, #732]	@ 8005568 <HAL_DMA_Start_IT+0x664>
 800528e:	4574      	cmp	r4, lr
 8005290:	f43f ae8b 	beq.w	8004faa <HAL_DMA_Start_IT+0xa6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005294:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 8005558 <HAL_DMA_Start_IT+0x654>
 8005298:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 8005554 <HAL_DMA_Start_IT+0x650>
 800529c:	4574      	cmp	r4, lr
 800529e:	bf18      	it	ne
 80052a0:	4564      	cmpne	r4, ip
 80052a2:	f10e 0e14 	add.w	lr, lr, #20
 80052a6:	bf0c      	ite	eq
 80052a8:	f04f 0c01 	moveq.w	ip, #1
 80052ac:	f04f 0c00 	movne.w	ip, #0
 80052b0:	4574      	cmp	r4, lr
 80052b2:	bf08      	it	eq
 80052b4:	f04c 0c01 	orreq.w	ip, ip, #1
 80052b8:	f10e 0e14 	add.w	lr, lr, #20
 80052bc:	4574      	cmp	r4, lr
 80052be:	bf08      	it	eq
 80052c0:	f04c 0c01 	orreq.w	ip, ip, #1
 80052c4:	f10e 0e14 	add.w	lr, lr, #20
 80052c8:	4574      	cmp	r4, lr
 80052ca:	bf08      	it	eq
 80052cc:	f04c 0c01 	orreq.w	ip, ip, #1
 80052d0:	f10e 0e14 	add.w	lr, lr, #20
 80052d4:	4574      	cmp	r4, lr
 80052d6:	bf08      	it	eq
 80052d8:	f04c 0c01 	orreq.w	ip, ip, #1
 80052dc:	f10e 0e14 	add.w	lr, lr, #20
 80052e0:	4574      	cmp	r4, lr
 80052e2:	bf08      	it	eq
 80052e4:	f04c 0c01 	orreq.w	ip, ip, #1
 80052e8:	f1bc 0f00 	cmp.w	ip, #0
 80052ec:	d104      	bne.n	80052f8 <HAL_DMA_Start_IT+0x3f4>
 80052ee:	f8df c270 	ldr.w	ip, [pc, #624]	@ 8005560 <HAL_DMA_Start_IT+0x65c>
 80052f2:	4564      	cmp	r4, ip
 80052f4:	f040 8125 	bne.w	8005542 <HAL_DMA_Start_IT+0x63e>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052f8:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 80052fa:	f04f 0c01 	mov.w	ip, #1
 80052fe:	f006 0e1f 	and.w	lr, r6, #31
 8005302:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005306:	f8ca c004 	str.w	ip, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800530a:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800530c:	6883      	ldr	r3, [r0, #8]
 800530e:	2b40      	cmp	r3, #64	@ 0x40
 8005310:	f000 8113 	beq.w	800553a <HAL_DMA_Start_IT+0x636>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005314:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005316:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005318:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800531a:	e65e      	b.n	8004fda <HAL_DMA_Start_IT+0xd6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	f023 031e 	bic.w	r3, r3, #30
 8005322:	f043 0316 	orr.w	r3, r3, #22
 8005326:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005328:	b11a      	cbz	r2, 8005332 <HAL_DMA_Start_IT+0x42e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	f043 0308 	orr.w	r3, r3, #8
 8005330:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005332:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	03d2      	lsls	r2, r2, #15
 8005338:	f57f aec2 	bpl.w	80050c0 <HAL_DMA_Start_IT+0x1bc>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e6bc      	b.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
  __HAL_LOCK(hdma);
 8005346:	2002      	movs	r0, #2
}
 8005348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 800534c:	2001      	movs	r0, #1
}
 800534e:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005350:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005352:	60e1      	str	r1, [r4, #12]
 8005354:	e63d      	b.n	8004fd2 <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 8005356:	f8df e1f0 	ldr.w	lr, [pc, #496]	@ 8005548 <HAL_DMA_Start_IT+0x644>
 800535a:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 800535e:	f02c 0c01 	bic.w	ip, ip, #1
 8005362:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 8005366:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800536a:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 800536e:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8005370:	f1bc 0f00 	cmp.w	ip, #0
 8005374:	f43f ae19 	beq.w	8004faa <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005378:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 800537c:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800537e:	e614      	b.n	8004faa <HAL_DMA_Start_IT+0xa6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005380:	4971      	ldr	r1, [pc, #452]	@ (8005548 <HAL_DMA_Start_IT+0x644>)
 8005382:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8005384:	f023 031e 	bic.w	r3, r3, #30
 8005388:	f043 0316 	orr.w	r3, r3, #22
 800538c:	670b      	str	r3, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 800538e:	2a00      	cmp	r2, #0
 8005390:	f43f ae8f 	beq.w	80050b2 <HAL_DMA_Start_IT+0x1ae>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	f043 0308 	orr.w	r3, r3, #8
 800539a:	6023      	str	r3, [r4, #0]
 800539c:	e689      	b.n	80050b2 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800539e:	496a      	ldr	r1, [pc, #424]	@ (8005548 <HAL_DMA_Start_IT+0x644>)
 80053a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053a2:	f023 031e 	bic.w	r3, r3, #30
 80053a6:	f043 0316 	orr.w	r3, r3, #22
 80053aa:	640b      	str	r3, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 80053ac:	2a00      	cmp	r2, #0
 80053ae:	d1f1      	bne.n	8005394 <HAL_DMA_Start_IT+0x490>
 80053b0:	e67f      	b.n	80050b2 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80053b2:	f8df e194 	ldr.w	lr, [pc, #404]	@ 8005548 <HAL_DMA_Start_IT+0x644>
 80053b6:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 80053ba:	f02c 0c01 	bic.w	ip, ip, #1
 80053be:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053c2:	e5e2      	b.n	8004f8a <HAL_DMA_Start_IT+0x86>
    __HAL_DMA_DISABLE(hdma);
 80053c4:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8005548 <HAL_DMA_Start_IT+0x644>
 80053c8:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 80053cc:	f02c 0c01 	bic.w	ip, ip, #1
 80053d0:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053d4:	e7c7      	b.n	8005366 <HAL_DMA_Start_IT+0x462>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80053d6:	495c      	ldr	r1, [pc, #368]	@ (8005548 <HAL_DMA_Start_IT+0x644>)
 80053d8:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 80053da:	f023 031e 	bic.w	r3, r3, #30
 80053de:	f043 0316 	orr.w	r3, r3, #22
 80053e2:	658b      	str	r3, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	d1d5      	bne.n	8005394 <HAL_DMA_Start_IT+0x490>
 80053e8:	e663      	b.n	80050b2 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80053ea:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 8005548 <HAL_DMA_Start_IT+0x644>
 80053ee:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 80053f2:	f02c 0c01 	bic.w	ip, ip, #1
 80053f6:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053fa:	e6fb      	b.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80053fc:	4952      	ldr	r1, [pc, #328]	@ (8005548 <HAL_DMA_Start_IT+0x644>)
 80053fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8005402:	f023 031e 	bic.w	r3, r3, #30
 8005406:	f043 0316 	orr.w	r3, r3, #22
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 800540e:	2a00      	cmp	r2, #0
 8005410:	d1c0      	bne.n	8005394 <HAL_DMA_Start_IT+0x490>
 8005412:	e64e      	b.n	80050b2 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005414:	494c      	ldr	r1, [pc, #304]	@ (8005548 <HAL_DMA_Start_IT+0x644>)
 8005416:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
 800541a:	f023 031e 	bic.w	r3, r3, #30
 800541e:	f043 0316 	orr.w	r3, r3, #22
 8005422:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8005426:	2a00      	cmp	r2, #0
 8005428:	d1b4      	bne.n	8005394 <HAL_DMA_Start_IT+0x490>
 800542a:	e642      	b.n	80050b2 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 800542c:	f8df e118 	ldr.w	lr, [pc, #280]	@ 8005548 <HAL_DMA_Start_IT+0x644>
 8005430:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 8005434:	f02c 0c01 	bic.w	ip, ip, #1
 8005438:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800543c:	e6da      	b.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 800543e:	f8df e108 	ldr.w	lr, [pc, #264]	@ 8005548 <HAL_DMA_Start_IT+0x644>
 8005442:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 8005446:	f02c 0c01 	bic.w	ip, ip, #1
 800544a:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800544e:	e6d1      	b.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005450:	493d      	ldr	r1, [pc, #244]	@ (8005548 <HAL_DMA_Start_IT+0x644>)
 8005452:	f8d1 30b8 	ldr.w	r3, [r1, #184]	@ 0xb8
 8005456:	f023 031e 	bic.w	r3, r3, #30
 800545a:	f043 0316 	orr.w	r3, r3, #22
 800545e:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8005462:	2a00      	cmp	r2, #0
 8005464:	d196      	bne.n	8005394 <HAL_DMA_Start_IT+0x490>
 8005466:	e624      	b.n	80050b2 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8005468:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 800554c <HAL_DMA_Start_IT+0x648>
 800546c:	f8de c010 	ldr.w	ip, [lr, #16]
 8005470:	f02c 0c01 	bic.w	ip, ip, #1
 8005474:	f8ce c010 	str.w	ip, [lr, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005478:	e6bc      	b.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800547a:	4934      	ldr	r1, [pc, #208]	@ (800554c <HAL_DMA_Start_IT+0x648>)
 800547c:	690b      	ldr	r3, [r1, #16]
 800547e:	f023 031e 	bic.w	r3, r3, #30
 8005482:	f043 0316 	orr.w	r3, r3, #22
 8005486:	610b      	str	r3, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 8005488:	2a00      	cmp	r2, #0
 800548a:	d183      	bne.n	8005394 <HAL_DMA_Start_IT+0x490>
 800548c:	e611      	b.n	80050b2 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 800548e:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 800554c <HAL_DMA_Start_IT+0x648>
 8005492:	f8de c028 	ldr.w	ip, [lr, #40]	@ 0x28
 8005496:	f02c 0c01 	bic.w	ip, ip, #1
 800549a:	f8ce c028 	str.w	ip, [lr, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800549e:	e6a9      	b.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054a0:	492a      	ldr	r1, [pc, #168]	@ (800554c <HAL_DMA_Start_IT+0x648>)
 80054a2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80054a4:	f023 031e 	bic.w	r3, r3, #30
 80054a8:	f043 0316 	orr.w	r3, r3, #22
 80054ac:	628b      	str	r3, [r1, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 80054ae:	2a00      	cmp	r2, #0
 80054b0:	f47f af70 	bne.w	8005394 <HAL_DMA_Start_IT+0x490>
 80054b4:	e5fd      	b.n	80050b2 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054b6:	4925      	ldr	r1, [pc, #148]	@ (800554c <HAL_DMA_Start_IT+0x648>)
 80054b8:	e772      	b.n	80053a0 <HAL_DMA_Start_IT+0x49c>
    __HAL_DMA_DISABLE(hdma);
 80054ba:	f8df e090 	ldr.w	lr, [pc, #144]	@ 800554c <HAL_DMA_Start_IT+0x648>
 80054be:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 80054c2:	f02c 0c01 	bic.w	ip, ip, #1
 80054c6:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ca:	e693      	b.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054cc:	491f      	ldr	r1, [pc, #124]	@ (800554c <HAL_DMA_Start_IT+0x648>)
 80054ce:	e783      	b.n	80053d8 <HAL_DMA_Start_IT+0x4d4>
    __HAL_DMA_DISABLE(hdma);
 80054d0:	f8df e078 	ldr.w	lr, [pc, #120]	@ 800554c <HAL_DMA_Start_IT+0x648>
 80054d4:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 80054d8:	f02c 0c01 	bic.w	ip, ip, #1
 80054dc:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054e0:	e688      	b.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054e2:	491a      	ldr	r1, [pc, #104]	@ (800554c <HAL_DMA_Start_IT+0x648>)
 80054e4:	e74d      	b.n	8005382 <HAL_DMA_Start_IT+0x47e>
    __HAL_DMA_DISABLE(hdma);
 80054e6:	f8df e064 	ldr.w	lr, [pc, #100]	@ 800554c <HAL_DMA_Start_IT+0x648>
 80054ea:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 80054ee:	f02c 0c01 	bic.w	ip, ip, #1
 80054f2:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054f6:	e67d      	b.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 80054f8:	f8df e050 	ldr.w	lr, [pc, #80]	@ 800554c <HAL_DMA_Start_IT+0x648>
 80054fc:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8005500:	f02c 0c01 	bic.w	ip, ip, #1
 8005504:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005508:	e674      	b.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800550a:	4910      	ldr	r1, [pc, #64]	@ (800554c <HAL_DMA_Start_IT+0x648>)
 800550c:	e777      	b.n	80053fe <HAL_DMA_Start_IT+0x4fa>
 800550e:	490f      	ldr	r1, [pc, #60]	@ (800554c <HAL_DMA_Start_IT+0x648>)
 8005510:	e781      	b.n	8005416 <HAL_DMA_Start_IT+0x512>
    __HAL_DMA_DISABLE(hdma);
 8005512:	f8df e038 	ldr.w	lr, [pc, #56]	@ 800554c <HAL_DMA_Start_IT+0x648>
 8005516:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 800551a:	f02c 0c01 	bic.w	ip, ip, #1
 800551e:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005522:	e667      	b.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8005524:	f8df e024 	ldr.w	lr, [pc, #36]	@ 800554c <HAL_DMA_Start_IT+0x648>
 8005528:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 800552c:	f02c 0c01 	bic.w	ip, ip, #1
 8005530:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005534:	e65e      	b.n	80051f4 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005536:	4905      	ldr	r1, [pc, #20]	@ (800554c <HAL_DMA_Start_IT+0x648>)
 8005538:	e78b      	b.n	8005452 <HAL_DMA_Start_IT+0x54e>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800553a:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800553c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800553e:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005540:	e54b      	b.n	8004fda <HAL_DMA_Start_IT+0xd6>
 8005542:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005544:	e555      	b.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8005546:	bf00      	nop
 8005548:	40020000 	.word	0x40020000
 800554c:	40020400 	.word	0x40020400
 8005550:	40020088 	.word	0x40020088
 8005554:	5802541c 	.word	0x5802541c
 8005558:	58025408 	.word	0x58025408
 800555c:	58025480 	.word	0x58025480
 8005560:	58025494 	.word	0x58025494
 8005564:	400200a0 	.word	0x400200a0
 8005568:	400204b8 	.word	0x400204b8

0800556c <HAL_DMA_Abort>:
{
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005570:	f7fd ffa2 	bl	80034b8 <HAL_GetTick>
  if(hdma == NULL)
 8005574:	2c00      	cmp	r4, #0
 8005576:	d06d      	beq.n	8005654 <HAL_DMA_Abort+0xe8>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005578:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800557c:	2b02      	cmp	r3, #2
 800557e:	d164      	bne.n	800564a <HAL_DMA_Abort+0xde>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005580:	6825      	ldr	r5, [r4, #0]
 8005582:	4606      	mov	r6, r0
 8005584:	4bad      	ldr	r3, [pc, #692]	@ (800583c <HAL_DMA_Abort+0x2d0>)
 8005586:	429d      	cmp	r5, r3
 8005588:	d066      	beq.n	8005658 <HAL_DMA_Abort+0xec>
 800558a:	3318      	adds	r3, #24
 800558c:	429d      	cmp	r5, r3
 800558e:	d063      	beq.n	8005658 <HAL_DMA_Abort+0xec>
 8005590:	3318      	adds	r3, #24
 8005592:	429d      	cmp	r5, r3
 8005594:	f000 80f3 	beq.w	800577e <HAL_DMA_Abort+0x212>
 8005598:	3318      	adds	r3, #24
 800559a:	429d      	cmp	r5, r3
 800559c:	f000 811a 	beq.w	80057d4 <HAL_DMA_Abort+0x268>
 80055a0:	3318      	adds	r3, #24
 80055a2:	429d      	cmp	r5, r3
 80055a4:	f000 8125 	beq.w	80057f2 <HAL_DMA_Abort+0x286>
 80055a8:	3318      	adds	r3, #24
 80055aa:	429d      	cmp	r5, r3
 80055ac:	f000 80ff 	beq.w	80057ae <HAL_DMA_Abort+0x242>
 80055b0:	3318      	adds	r3, #24
 80055b2:	429d      	cmp	r5, r3
 80055b4:	f000 812e 	beq.w	8005814 <HAL_DMA_Abort+0x2a8>
 80055b8:	3318      	adds	r3, #24
 80055ba:	429d      	cmp	r5, r3
 80055bc:	f000 814a 	beq.w	8005854 <HAL_DMA_Abort+0x2e8>
 80055c0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80055c4:	429d      	cmp	r5, r3
 80055c6:	f000 8158 	beq.w	800587a <HAL_DMA_Abort+0x30e>
 80055ca:	3318      	adds	r3, #24
 80055cc:	429d      	cmp	r5, r3
 80055ce:	f000 8163 	beq.w	8005898 <HAL_DMA_Abort+0x32c>
 80055d2:	3318      	adds	r3, #24
 80055d4:	429d      	cmp	r5, r3
 80055d6:	f000 816e 	beq.w	80058b6 <HAL_DMA_Abort+0x34a>
 80055da:	3318      	adds	r3, #24
 80055dc:	429d      	cmp	r5, r3
 80055de:	f000 816c 	beq.w	80058ba <HAL_DMA_Abort+0x34e>
 80055e2:	3318      	adds	r3, #24
 80055e4:	429d      	cmp	r5, r3
 80055e6:	f000 816a 	beq.w	80058be <HAL_DMA_Abort+0x352>
 80055ea:	3318      	adds	r3, #24
 80055ec:	429d      	cmp	r5, r3
 80055ee:	f000 8168 	beq.w	80058c2 <HAL_DMA_Abort+0x356>
 80055f2:	3318      	adds	r3, #24
 80055f4:	429d      	cmp	r5, r3
 80055f6:	f000 8168 	beq.w	80058ca <HAL_DMA_Abort+0x35e>
 80055fa:	3318      	adds	r3, #24
 80055fc:	429d      	cmp	r5, r3
 80055fe:	f000 8162 	beq.w	80058c6 <HAL_DMA_Abort+0x35a>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005602:	682b      	ldr	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005604:	4a8e      	ldr	r2, [pc, #568]	@ (8005840 <HAL_DMA_Abort+0x2d4>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005606:	f023 030e 	bic.w	r3, r3, #14
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800560a:	4295      	cmp	r5, r2
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800560c:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800560e:	f000 80bf 	beq.w	8005790 <HAL_DMA_Abort+0x224>
 8005612:	4b8c      	ldr	r3, [pc, #560]	@ (8005844 <HAL_DMA_Abort+0x2d8>)
 8005614:	429d      	cmp	r5, r3
 8005616:	f000 80bb 	beq.w	8005790 <HAL_DMA_Abort+0x224>
 800561a:	3314      	adds	r3, #20
 800561c:	429d      	cmp	r5, r3
 800561e:	f000 80b7 	beq.w	8005790 <HAL_DMA_Abort+0x224>
 8005622:	3314      	adds	r3, #20
 8005624:	429d      	cmp	r5, r3
 8005626:	f000 80b3 	beq.w	8005790 <HAL_DMA_Abort+0x224>
 800562a:	3314      	adds	r3, #20
 800562c:	429d      	cmp	r5, r3
 800562e:	f000 80af 	beq.w	8005790 <HAL_DMA_Abort+0x224>
 8005632:	3314      	adds	r3, #20
 8005634:	429d      	cmp	r5, r3
 8005636:	f000 80ab 	beq.w	8005790 <HAL_DMA_Abort+0x224>
 800563a:	3314      	adds	r3, #20
 800563c:	429d      	cmp	r5, r3
 800563e:	f000 80a7 	beq.w	8005790 <HAL_DMA_Abort+0x224>
 8005642:	3314      	adds	r3, #20
 8005644:	429d      	cmp	r5, r3
 8005646:	d114      	bne.n	8005672 <HAL_DMA_Abort+0x106>
 8005648:	e0a2      	b.n	8005790 <HAL_DMA_Abort+0x224>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800564a:	2280      	movs	r2, #128	@ 0x80
    __HAL_UNLOCK(hdma);
 800564c:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800564e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8005650:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8005654:	2001      	movs	r0, #1
}
 8005656:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005658:	682b      	ldr	r3, [r5, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800565a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800565c:	f023 031e 	bic.w	r3, r3, #30
 8005660:	602b      	str	r3, [r5, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005662:	696b      	ldr	r3, [r5, #20]
 8005664:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005668:	616b      	str	r3, [r5, #20]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800566a:	6813      	ldr	r3, [r2, #0]
 800566c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005670:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005672:	682b      	ldr	r3, [r5, #0]
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	e005      	b.n	8005688 <HAL_DMA_Abort+0x11c>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800567c:	f7fd ff1c 	bl	80034b8 <HAL_GetTick>
 8005680:	1b83      	subs	r3, r0, r6
 8005682:	2b05      	cmp	r3, #5
 8005684:	f200 808a 	bhi.w	800579c <HAL_DMA_Abort+0x230>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005688:	682b      	ldr	r3, [r5, #0]
 800568a:	07db      	lsls	r3, r3, #31
 800568c:	d4f6      	bmi.n	800567c <HAL_DMA_Abort+0x110>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	496a      	ldr	r1, [pc, #424]	@ (800583c <HAL_DMA_Abort+0x2d0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005692:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005694:	428b      	cmp	r3, r1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005696:	6da0      	ldr	r0, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005698:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800569c:	d05e      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 800569e:	3118      	adds	r1, #24
 80056a0:	428b      	cmp	r3, r1
 80056a2:	d05b      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056a4:	3118      	adds	r1, #24
 80056a6:	428b      	cmp	r3, r1
 80056a8:	d058      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056aa:	3118      	adds	r1, #24
 80056ac:	428b      	cmp	r3, r1
 80056ae:	d055      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056b0:	3118      	adds	r1, #24
 80056b2:	428b      	cmp	r3, r1
 80056b4:	d052      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056b6:	3118      	adds	r1, #24
 80056b8:	428b      	cmp	r3, r1
 80056ba:	d04f      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056bc:	3118      	adds	r1, #24
 80056be:	428b      	cmp	r3, r1
 80056c0:	d04c      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056c2:	3118      	adds	r1, #24
 80056c4:	428b      	cmp	r3, r1
 80056c6:	d049      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056c8:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 80056cc:	428b      	cmp	r3, r1
 80056ce:	d045      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056d0:	3118      	adds	r1, #24
 80056d2:	428b      	cmp	r3, r1
 80056d4:	d042      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056d6:	3118      	adds	r1, #24
 80056d8:	428b      	cmp	r3, r1
 80056da:	d03f      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056dc:	3118      	adds	r1, #24
 80056de:	428b      	cmp	r3, r1
 80056e0:	d03c      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056e2:	3118      	adds	r1, #24
 80056e4:	428b      	cmp	r3, r1
 80056e6:	d039      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056e8:	3118      	adds	r1, #24
 80056ea:	428b      	cmp	r3, r1
 80056ec:	d036      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056ee:	3118      	adds	r1, #24
 80056f0:	428b      	cmp	r3, r1
 80056f2:	d033      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
 80056f4:	3118      	adds	r1, #24
 80056f6:	428b      	cmp	r3, r1
 80056f8:	d030      	beq.n	800575c <HAL_DMA_Abort+0x1f0>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056fa:	2101      	movs	r1, #1
 80056fc:	4091      	lsls	r1, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056fe:	4a51      	ldr	r2, [pc, #324]	@ (8005844 <HAL_DMA_Abort+0x2d8>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005700:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005702:	484f      	ldr	r0, [pc, #316]	@ (8005840 <HAL_DMA_Abort+0x2d4>)
 8005704:	4950      	ldr	r1, [pc, #320]	@ (8005848 <HAL_DMA_Abort+0x2dc>)
 8005706:	4283      	cmp	r3, r0
 8005708:	bf18      	it	ne
 800570a:	4293      	cmpne	r3, r2
 800570c:	f100 003c 	add.w	r0, r0, #60	@ 0x3c
 8005710:	bf0c      	ite	eq
 8005712:	2201      	moveq	r2, #1
 8005714:	2200      	movne	r2, #0
 8005716:	428b      	cmp	r3, r1
 8005718:	bf08      	it	eq
 800571a:	f042 0201 	orreq.w	r2, r2, #1
 800571e:	3128      	adds	r1, #40	@ 0x28
 8005720:	4283      	cmp	r3, r0
 8005722:	bf08      	it	eq
 8005724:	f042 0201 	orreq.w	r2, r2, #1
 8005728:	3028      	adds	r0, #40	@ 0x28
 800572a:	428b      	cmp	r3, r1
 800572c:	bf08      	it	eq
 800572e:	f042 0201 	orreq.w	r2, r2, #1
 8005732:	3128      	adds	r1, #40	@ 0x28
 8005734:	4283      	cmp	r3, r0
 8005736:	bf08      	it	eq
 8005738:	f042 0201 	orreq.w	r2, r2, #1
 800573c:	428b      	cmp	r3, r1
 800573e:	bf08      	it	eq
 8005740:	f042 0201 	orreq.w	r2, r2, #1
 8005744:	b96a      	cbnz	r2, 8005762 <HAL_DMA_Abort+0x1f6>
 8005746:	4a41      	ldr	r2, [pc, #260]	@ (800584c <HAL_DMA_Abort+0x2e0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00a      	beq.n	8005762 <HAL_DMA_Abort+0x1f6>
    __HAL_UNLOCK(hdma);
 800574c:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800574e:	2201      	movs	r2, #1
  return HAL_OK;
 8005750:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8005752:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8005756:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800575a:	bd70      	pop	{r4, r5, r6, pc}
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800575c:	233f      	movs	r3, #63	@ 0x3f
 800575e:	4093      	lsls	r3, r2
 8005760:	6083      	str	r3, [r0, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 8005762:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005764:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 8005768:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0ee      	beq.n	800574c <HAL_DMA_Abort+0x1e0>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800576e:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005770:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	@ 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005774:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005778:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800577a:	6048      	str	r0, [r1, #4]
 800577c:	e7e6      	b.n	800574c <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800577e:	4b34      	ldr	r3, [pc, #208]	@ (8005850 <HAL_DMA_Abort+0x2e4>)
 8005780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005782:	f022 021e 	bic.w	r2, r2, #30
 8005786:	641a      	str	r2, [r3, #64]	@ 0x40
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800578a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800578e:	655a      	str	r2, [r3, #84]	@ 0x54
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005790:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005798:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800579a:	e76a      	b.n	8005672 <HAL_DMA_Abort+0x106>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800579c:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800579e:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 80057a0:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057a2:	6561      	str	r1, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hdma);
 80057a4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 80057a8:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        return HAL_ERROR;
 80057ac:	e752      	b.n	8005654 <HAL_DMA_Abort+0xe8>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80057ae:	4b28      	ldr	r3, [pc, #160]	@ (8005850 <HAL_DMA_Abort+0x2e4>)
 80057b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80057b4:	f022 021e 	bic.w	r2, r2, #30
 80057b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057bc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80057c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057c8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80057ca:	6813      	ldr	r3, [r2, #0]
 80057cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80057d2:	e74e      	b.n	8005672 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80057d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005850 <HAL_DMA_Abort+0x2e4>)
 80057d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057d8:	f022 021e 	bic.w	r2, r2, #30
 80057dc:	659a      	str	r2, [r3, #88]	@ 0x58
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80057e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057e6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80057e8:	6813      	ldr	r3, [r2, #0]
 80057ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057ee:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80057f0:	e73f      	b.n	8005672 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80057f2:	4b17      	ldr	r3, [pc, #92]	@ (8005850 <HAL_DMA_Abort+0x2e4>)
 80057f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057f6:	f022 021e 	bic.w	r2, r2, #30
 80057fa:	671a      	str	r2, [r3, #112]	@ 0x70
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057fc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005800:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005808:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800580a:	6813      	ldr	r3, [r2, #0]
 800580c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005810:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005812:	e72e      	b.n	8005672 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005814:	4b0e      	ldr	r3, [pc, #56]	@ (8005850 <HAL_DMA_Abort+0x2e4>)
 8005816:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800581a:	f022 021e 	bic.w	r2, r2, #30
 800581e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005822:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005826:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800582a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800582e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005830:	6813      	ldr	r3, [r2, #0]
 8005832:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005836:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005838:	e71b      	b.n	8005672 <HAL_DMA_Abort+0x106>
 800583a:	bf00      	nop
 800583c:	40020010 	.word	0x40020010
 8005840:	58025408 	.word	0x58025408
 8005844:	5802541c 	.word	0x5802541c
 8005848:	58025430 	.word	0x58025430
 800584c:	58025494 	.word	0x58025494
 8005850:	40020000 	.word	0x40020000
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005854:	4b1e      	ldr	r3, [pc, #120]	@ (80058d0 <HAL_DMA_Abort+0x364>)
 8005856:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800585a:	f022 021e 	bic.w	r2, r2, #30
 800585e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005862:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8005866:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800586a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800586e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005870:	6813      	ldr	r3, [r2, #0]
 8005872:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005876:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005878:	e6fb      	b.n	8005672 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800587a:	4b16      	ldr	r3, [pc, #88]	@ (80058d4 <HAL_DMA_Abort+0x368>)
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	f022 021e 	bic.w	r2, r2, #30
 8005882:	611a      	str	r2, [r3, #16]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005884:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005886:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800588a:	625a      	str	r2, [r3, #36]	@ 0x24
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800588c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800588e:	6813      	ldr	r3, [r2, #0]
 8005890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005894:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005896:	e6ec      	b.n	8005672 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005898:	4b0e      	ldr	r3, [pc, #56]	@ (80058d4 <HAL_DMA_Abort+0x368>)
 800589a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800589c:	f022 021e 	bic.w	r2, r2, #30
 80058a0:	629a      	str	r2, [r3, #40]	@ 0x28
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80058a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058aa:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80058ac:	6813      	ldr	r3, [r2, #0]
 80058ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058b2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80058b4:	e6dd      	b.n	8005672 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80058b6:	4b07      	ldr	r3, [pc, #28]	@ (80058d4 <HAL_DMA_Abort+0x368>)
 80058b8:	e762      	b.n	8005780 <HAL_DMA_Abort+0x214>
 80058ba:	4b06      	ldr	r3, [pc, #24]	@ (80058d4 <HAL_DMA_Abort+0x368>)
 80058bc:	e78b      	b.n	80057d6 <HAL_DMA_Abort+0x26a>
 80058be:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <HAL_DMA_Abort+0x368>)
 80058c0:	e798      	b.n	80057f4 <HAL_DMA_Abort+0x288>
 80058c2:	4b04      	ldr	r3, [pc, #16]	@ (80058d4 <HAL_DMA_Abort+0x368>)
 80058c4:	e774      	b.n	80057b0 <HAL_DMA_Abort+0x244>
 80058c6:	4b03      	ldr	r3, [pc, #12]	@ (80058d4 <HAL_DMA_Abort+0x368>)
 80058c8:	e7c5      	b.n	8005856 <HAL_DMA_Abort+0x2ea>
 80058ca:	4b02      	ldr	r3, [pc, #8]	@ (80058d4 <HAL_DMA_Abort+0x368>)
 80058cc:	e7a3      	b.n	8005816 <HAL_DMA_Abort+0x2aa>
 80058ce:	bf00      	nop
 80058d0:	40020000 	.word	0x40020000
 80058d4:	40020400 	.word	0x40020400

080058d8 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80058d8:	2800      	cmp	r0, #0
 80058da:	d062      	beq.n	80059a2 <HAL_DMA_Abort_IT+0xca>
{
 80058dc:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058de:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d159      	bne.n	800599a <HAL_DMA_Abort_IT+0xc2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058e6:	6802      	ldr	r2, [r0, #0]
 80058e8:	4b57      	ldr	r3, [pc, #348]	@ (8005a48 <HAL_DMA_Abort_IT+0x170>)
 80058ea:	4c58      	ldr	r4, [pc, #352]	@ (8005a4c <HAL_DMA_Abort_IT+0x174>)
 80058ec:	4958      	ldr	r1, [pc, #352]	@ (8005a50 <HAL_DMA_Abort_IT+0x178>)
 80058ee:	42a2      	cmp	r2, r4
 80058f0:	bf18      	it	ne
 80058f2:	429a      	cmpne	r2, r3
 80058f4:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 80058f8:	bf0c      	ite	eq
 80058fa:	2301      	moveq	r3, #1
 80058fc:	2300      	movne	r3, #0
 80058fe:	428a      	cmp	r2, r1
 8005900:	bf08      	it	eq
 8005902:	f043 0301 	orreq.w	r3, r3, #1
 8005906:	3130      	adds	r1, #48	@ 0x30
 8005908:	42a2      	cmp	r2, r4
 800590a:	bf08      	it	eq
 800590c:	f043 0301 	orreq.w	r3, r3, #1
 8005910:	3430      	adds	r4, #48	@ 0x30
 8005912:	428a      	cmp	r2, r1
 8005914:	bf08      	it	eq
 8005916:	f043 0301 	orreq.w	r3, r3, #1
 800591a:	3130      	adds	r1, #48	@ 0x30
 800591c:	42a2      	cmp	r2, r4
 800591e:	bf08      	it	eq
 8005920:	f043 0301 	orreq.w	r3, r3, #1
 8005924:	3430      	adds	r4, #48	@ 0x30
 8005926:	428a      	cmp	r2, r1
 8005928:	bf08      	it	eq
 800592a:	f043 0301 	orreq.w	r3, r3, #1
 800592e:	f501 715c 	add.w	r1, r1, #880	@ 0x370
 8005932:	42a2      	cmp	r2, r4
 8005934:	bf08      	it	eq
 8005936:	f043 0301 	orreq.w	r3, r3, #1
 800593a:	f504 745c 	add.w	r4, r4, #880	@ 0x370
 800593e:	428a      	cmp	r2, r1
 8005940:	bf08      	it	eq
 8005942:	f043 0301 	orreq.w	r3, r3, #1
 8005946:	3130      	adds	r1, #48	@ 0x30
 8005948:	42a2      	cmp	r2, r4
 800594a:	bf08      	it	eq
 800594c:	f043 0301 	orreq.w	r3, r3, #1
 8005950:	3430      	adds	r4, #48	@ 0x30
 8005952:	428a      	cmp	r2, r1
 8005954:	bf08      	it	eq
 8005956:	f043 0301 	orreq.w	r3, r3, #1
 800595a:	3130      	adds	r1, #48	@ 0x30
 800595c:	42a2      	cmp	r2, r4
 800595e:	bf08      	it	eq
 8005960:	f043 0301 	orreq.w	r3, r3, #1
 8005964:	3430      	adds	r4, #48	@ 0x30
 8005966:	428a      	cmp	r2, r1
 8005968:	bf08      	it	eq
 800596a:	f043 0301 	orreq.w	r3, r3, #1
 800596e:	3130      	adds	r1, #48	@ 0x30
 8005970:	42a2      	cmp	r2, r4
 8005972:	bf08      	it	eq
 8005974:	f043 0301 	orreq.w	r3, r3, #1
 8005978:	428a      	cmp	r2, r1
 800597a:	bf08      	it	eq
 800597c:	f043 0301 	orreq.w	r3, r3, #1
 8005980:	b913      	cbnz	r3, 8005988 <HAL_DMA_Abort_IT+0xb0>
 8005982:	4b34      	ldr	r3, [pc, #208]	@ (8005a54 <HAL_DMA_Abort_IT+0x17c>)
 8005984:	429a      	cmp	r2, r3
 8005986:	d10e      	bne.n	80059a6 <HAL_DMA_Abort_IT+0xce>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005988:	2304      	movs	r3, #4
 800598a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800598e:	6813      	ldr	r3, [r2, #0]
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005996:	2000      	movs	r0, #0
}
 8005998:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800599a:	2380      	movs	r3, #128	@ 0x80
 800599c:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800599e:	2001      	movs	r0, #1
}
 80059a0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80059a2:	2001      	movs	r0, #1
}
 80059a4:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005a58 <HAL_DMA_Abort_IT+0x180>)
 80059a8:	4d2c      	ldr	r5, [pc, #176]	@ (8005a5c <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059aa:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059ac:	42aa      	cmp	r2, r5
 80059ae:	bf18      	it	ne
 80059b0:	429a      	cmpne	r2, r3
 80059b2:	4c2b      	ldr	r4, [pc, #172]	@ (8005a60 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059b4:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059b8:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 80059bc:	bf0c      	ite	eq
 80059be:	2301      	moveq	r3, #1
 80059c0:	2300      	movne	r3, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059c2:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059c4:	42a2      	cmp	r2, r4
 80059c6:	bf08      	it	eq
 80059c8:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 80059cc:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059ce:	3428      	adds	r4, #40	@ 0x28
 80059d0:	42aa      	cmp	r2, r5
 80059d2:	bf08      	it	eq
 80059d4:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 80059d8:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059dc:	42a2      	cmp	r2, r4
 80059de:	bf08      	it	eq
 80059e0:	f043 0301 	orreq.w	r3, r3, #1
 80059e4:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 80059e6:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059e8:	42a2      	cmp	r2, r4
 80059ea:	bf08      	it	eq
 80059ec:	f043 0301 	orreq.w	r3, r3, #1
 80059f0:	491c      	ldr	r1, [pc, #112]	@ (8005a64 <HAL_DMA_Abort_IT+0x18c>)
 80059f2:	428a      	cmp	r2, r1
 80059f4:	bf08      	it	eq
 80059f6:	f043 0301 	orreq.w	r3, r3, #1
 80059fa:	b913      	cbnz	r3, 8005a02 <HAL_DMA_Abort_IT+0x12a>
 80059fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005a68 <HAL_DMA_Abort_IT+0x190>)
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d117      	bne.n	8005a32 <HAL_DMA_Abort_IT+0x15a>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a02:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a04:	6d85      	ldr	r5, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a06:	e9d0 1417 	ldrd	r1, r4, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a0a:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a0c:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a14:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a16:	6022      	str	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a18:	606b      	str	r3, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005a1a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a1c:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 8005a20:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005a22:	b133      	cbz	r3, 8005a32 <HAL_DMA_Abort_IT+0x15a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a24:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a26:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a2e:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a30:	604c      	str	r4, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8005a32:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8005a34:	2200      	movs	r2, #0
      if(hdma->XferAbortCallback != NULL)
 8005a36:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8005a38:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005a3c:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0a8      	beq.n	8005996 <HAL_DMA_Abort_IT+0xbe>
        hdma->XferAbortCallback(hdma);
 8005a44:	4798      	blx	r3
 8005a46:	e7a6      	b.n	8005996 <HAL_DMA_Abort_IT+0xbe>
 8005a48:	40020010 	.word	0x40020010
 8005a4c:	40020028 	.word	0x40020028
 8005a50:	40020040 	.word	0x40020040
 8005a54:	400204b8 	.word	0x400204b8
 8005a58:	5802541c 	.word	0x5802541c
 8005a5c:	58025408 	.word	0x58025408
 8005a60:	58025430 	.word	0x58025430
 8005a64:	58025480 	.word	0x58025480
 8005a68:	58025494 	.word	0x58025494

08005a6c <HAL_DMA_IRQHandler>:
{
 8005a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8005a6e:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a70:	4b94      	ldr	r3, [pc, #592]	@ (8005cc4 <HAL_DMA_IRQHandler+0x258>)
{
 8005a72:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a74:	6d85      	ldr	r5, [r0, #88]	@ 0x58
{
 8005a76:	4607      	mov	r7, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a78:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0U;
 8005a7a:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005a7c:	4b92      	ldr	r3, [pc, #584]	@ (8005cc8 <HAL_DMA_IRQHandler+0x25c>)
 8005a7e:	6802      	ldr	r2, [r0, #0]
 8005a80:	4892      	ldr	r0, [pc, #584]	@ (8005ccc <HAL_DMA_IRQHandler+0x260>)
  tmpisr_dma  = regs_dma->ISR;
 8005a82:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005a84:	4282      	cmp	r2, r0
 8005a86:	bf18      	it	ne
 8005a88:	429a      	cmpne	r2, r3
 8005a8a:	f100 0018 	add.w	r0, r0, #24
  tmpisr_bdma = regs_bdma->ISR;
 8005a8e:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005a90:	bf0c      	ite	eq
 8005a92:	2301      	moveq	r3, #1
 8005a94:	2300      	movne	r3, #0
 8005a96:	4282      	cmp	r2, r0
 8005a98:	bf08      	it	eq
 8005a9a:	f043 0301 	orreq.w	r3, r3, #1
 8005a9e:	3018      	adds	r0, #24
 8005aa0:	4282      	cmp	r2, r0
 8005aa2:	bf08      	it	eq
 8005aa4:	f043 0301 	orreq.w	r3, r3, #1
 8005aa8:	3018      	adds	r0, #24
 8005aaa:	4282      	cmp	r2, r0
 8005aac:	bf08      	it	eq
 8005aae:	f043 0301 	orreq.w	r3, r3, #1
 8005ab2:	3018      	adds	r0, #24
 8005ab4:	4282      	cmp	r2, r0
 8005ab6:	bf08      	it	eq
 8005ab8:	f043 0301 	orreq.w	r3, r3, #1
 8005abc:	3018      	adds	r0, #24
 8005abe:	4282      	cmp	r2, r0
 8005ac0:	bf08      	it	eq
 8005ac2:	f043 0301 	orreq.w	r3, r3, #1
 8005ac6:	3018      	adds	r0, #24
 8005ac8:	4282      	cmp	r2, r0
 8005aca:	bf08      	it	eq
 8005acc:	f043 0301 	orreq.w	r3, r3, #1
 8005ad0:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8005ad4:	4282      	cmp	r2, r0
 8005ad6:	bf08      	it	eq
 8005ad8:	f043 0301 	orreq.w	r3, r3, #1
 8005adc:	3018      	adds	r0, #24
 8005ade:	4282      	cmp	r2, r0
 8005ae0:	bf08      	it	eq
 8005ae2:	f043 0301 	orreq.w	r3, r3, #1
 8005ae6:	3018      	adds	r0, #24
 8005ae8:	4282      	cmp	r2, r0
 8005aea:	bf08      	it	eq
 8005aec:	f043 0301 	orreq.w	r3, r3, #1
 8005af0:	3018      	adds	r0, #24
 8005af2:	4282      	cmp	r2, r0
 8005af4:	bf08      	it	eq
 8005af6:	f043 0301 	orreq.w	r3, r3, #1
 8005afa:	3018      	adds	r0, #24
 8005afc:	4282      	cmp	r2, r0
 8005afe:	bf08      	it	eq
 8005b00:	f043 0301 	orreq.w	r3, r3, #1
 8005b04:	3018      	adds	r0, #24
 8005b06:	4282      	cmp	r2, r0
 8005b08:	bf08      	it	eq
 8005b0a:	f043 0301 	orreq.w	r3, r3, #1
 8005b0e:	3018      	adds	r0, #24
 8005b10:	4282      	cmp	r2, r0
 8005b12:	bf08      	it	eq
 8005b14:	f043 0301 	orreq.w	r3, r3, #1
 8005b18:	b91b      	cbnz	r3, 8005b22 <HAL_DMA_IRQHandler+0xb6>
 8005b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8005cd0 <HAL_DMA_IRQHandler+0x264>)
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	f040 812f 	bne.w	8005d80 <HAL_DMA_IRQHandler+0x314>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b24:	2108      	movs	r1, #8
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	4099      	lsls	r1, r3
 8005b2c:	4221      	tst	r1, r4
 8005b2e:	d00b      	beq.n	8005b48 <HAL_DMA_IRQHandler+0xdc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005b30:	6810      	ldr	r0, [r2, #0]
 8005b32:	0740      	lsls	r0, r0, #29
 8005b34:	d508      	bpl.n	8005b48 <HAL_DMA_IRQHandler+0xdc>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005b36:	6810      	ldr	r0, [r2, #0]
 8005b38:	f020 0004 	bic.w	r0, r0, #4
 8005b3c:	6010      	str	r0, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b3e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b42:	f041 0101 	orr.w	r1, r1, #1
 8005b46:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b48:	fa24 f103 	lsr.w	r1, r4, r3
 8005b4c:	07c8      	lsls	r0, r1, #31
 8005b4e:	d509      	bpl.n	8005b64 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005b50:	6951      	ldr	r1, [r2, #20]
 8005b52:	0609      	lsls	r1, r1, #24
 8005b54:	d506      	bpl.n	8005b64 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b56:	2101      	movs	r1, #1
 8005b58:	4099      	lsls	r1, r3
 8005b5a:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b5e:	f041 0102 	orr.w	r1, r1, #2
 8005b62:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b64:	2104      	movs	r1, #4
 8005b66:	4099      	lsls	r1, r3
 8005b68:	4221      	tst	r1, r4
 8005b6a:	d007      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x110>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005b6c:	6810      	ldr	r0, [r2, #0]
 8005b6e:	0780      	lsls	r0, r0, #30
 8005b70:	d504      	bpl.n	8005b7c <HAL_DMA_IRQHandler+0x110>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b72:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b76:	f041 0104 	orr.w	r1, r1, #4
 8005b7a:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b7c:	2110      	movs	r1, #16
 8005b7e:	4099      	lsls	r1, r3
 8005b80:	4221      	tst	r1, r4
 8005b82:	f000 80b0 	beq.w	8005ce6 <HAL_DMA_IRQHandler+0x27a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b86:	6810      	ldr	r0, [r2, #0]
 8005b88:	0700      	lsls	r0, r0, #28
 8005b8a:	f140 80ac 	bpl.w	8005ce6 <HAL_DMA_IRQHandler+0x27a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b8e:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b90:	6811      	ldr	r1, [r2, #0]
 8005b92:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b96:	6811      	ldr	r1, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b98:	f040 809e 	bne.w	8005cd8 <HAL_DMA_IRQHandler+0x26c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b9c:	05c9      	lsls	r1, r1, #23
 8005b9e:	d403      	bmi.n	8005ba8 <HAL_DMA_IRQHandler+0x13c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ba0:	6811      	ldr	r1, [r2, #0]
 8005ba2:	f021 0108 	bic.w	r1, r1, #8
 8005ba6:	6011      	str	r1, [r2, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8005ba8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005baa:	2900      	cmp	r1, #0
 8005bac:	f000 809b 	beq.w	8005ce6 <HAL_DMA_IRQHandler+0x27a>
            hdma->XferHalfCpltCallback(hdma);
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	4788      	blx	r1
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bb6:	2120      	movs	r1, #32
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	4099      	lsls	r1, r3
 8005bbe:	4221      	tst	r1, r4
 8005bc0:	d053      	beq.n	8005c6a <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	4840      	ldr	r0, [pc, #256]	@ (8005cc8 <HAL_DMA_IRQHandler+0x25c>)
 8005bc6:	4c41      	ldr	r4, [pc, #260]	@ (8005ccc <HAL_DMA_IRQHandler+0x260>)
 8005bc8:	42a2      	cmp	r2, r4
 8005bca:	bf18      	it	ne
 8005bcc:	4282      	cmpne	r2, r0
 8005bce:	f104 0418 	add.w	r4, r4, #24
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2001      	moveq	r0, #1
 8005bd6:	2000      	movne	r0, #0
 8005bd8:	42a2      	cmp	r2, r4
 8005bda:	bf08      	it	eq
 8005bdc:	f040 0001 	orreq.w	r0, r0, #1
 8005be0:	3418      	adds	r4, #24
 8005be2:	42a2      	cmp	r2, r4
 8005be4:	bf08      	it	eq
 8005be6:	f040 0001 	orreq.w	r0, r0, #1
 8005bea:	3418      	adds	r4, #24
 8005bec:	42a2      	cmp	r2, r4
 8005bee:	bf08      	it	eq
 8005bf0:	f040 0001 	orreq.w	r0, r0, #1
 8005bf4:	3418      	adds	r4, #24
 8005bf6:	42a2      	cmp	r2, r4
 8005bf8:	bf08      	it	eq
 8005bfa:	f040 0001 	orreq.w	r0, r0, #1
 8005bfe:	3418      	adds	r4, #24
 8005c00:	42a2      	cmp	r2, r4
 8005c02:	bf08      	it	eq
 8005c04:	f040 0001 	orreq.w	r0, r0, #1
 8005c08:	3418      	adds	r4, #24
 8005c0a:	42a2      	cmp	r2, r4
 8005c0c:	bf08      	it	eq
 8005c0e:	f040 0001 	orreq.w	r0, r0, #1
 8005c12:	f504 7456 	add.w	r4, r4, #856	@ 0x358
 8005c16:	42a2      	cmp	r2, r4
 8005c18:	bf08      	it	eq
 8005c1a:	f040 0001 	orreq.w	r0, r0, #1
 8005c1e:	3418      	adds	r4, #24
 8005c20:	42a2      	cmp	r2, r4
 8005c22:	bf08      	it	eq
 8005c24:	f040 0001 	orreq.w	r0, r0, #1
 8005c28:	3418      	adds	r4, #24
 8005c2a:	42a2      	cmp	r2, r4
 8005c2c:	bf08      	it	eq
 8005c2e:	f040 0001 	orreq.w	r0, r0, #1
 8005c32:	3418      	adds	r4, #24
 8005c34:	42a2      	cmp	r2, r4
 8005c36:	bf08      	it	eq
 8005c38:	f040 0001 	orreq.w	r0, r0, #1
 8005c3c:	3418      	adds	r4, #24
 8005c3e:	42a2      	cmp	r2, r4
 8005c40:	bf08      	it	eq
 8005c42:	f040 0001 	orreq.w	r0, r0, #1
 8005c46:	3418      	adds	r4, #24
 8005c48:	42a2      	cmp	r2, r4
 8005c4a:	bf08      	it	eq
 8005c4c:	f040 0001 	orreq.w	r0, r0, #1
 8005c50:	3418      	adds	r4, #24
 8005c52:	42a2      	cmp	r2, r4
 8005c54:	bf08      	it	eq
 8005c56:	f040 0001 	orreq.w	r0, r0, #1
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d147      	bne.n	8005cee <HAL_DMA_IRQHandler+0x282>
 8005c5e:	481c      	ldr	r0, [pc, #112]	@ (8005cd0 <HAL_DMA_IRQHandler+0x264>)
 8005c60:	4282      	cmp	r2, r0
 8005c62:	d044      	beq.n	8005cee <HAL_DMA_IRQHandler+0x282>
 8005c64:	6810      	ldr	r0, [r2, #0]
 8005c66:	0780      	lsls	r0, r0, #30
 8005c68:	d444      	bmi.n	8005cf4 <HAL_DMA_IRQHandler+0x288>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d070      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x2e6>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c72:	07dc      	lsls	r4, r3, #31
 8005c74:	d51e      	bpl.n	8005cb4 <HAL_DMA_IRQHandler+0x248>
        __HAL_DMA_DISABLE(hdma);
 8005c76:	683a      	ldr	r2, [r7, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c78:	2104      	movs	r1, #4
 8005c7a:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c7e:	4915      	ldr	r1, [pc, #84]	@ (8005cd4 <HAL_DMA_IRQHandler+0x268>)
        __HAL_DMA_DISABLE(hdma);
 8005c80:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c82:	fba1 6106 	umull	r6, r1, r1, r6
        __HAL_DMA_DISABLE(hdma);
 8005c86:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c8a:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	e002      	b.n	8005c96 <HAL_DMA_IRQHandler+0x22a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c90:	6813      	ldr	r3, [r2, #0]
 8005c92:	07d8      	lsls	r0, r3, #31
 8005c94:	d504      	bpl.n	8005ca0 <HAL_DMA_IRQHandler+0x234>
          if (++count > timeout)
 8005c96:	9b01      	ldr	r3, [sp, #4]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	428b      	cmp	r3, r1
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	d9f7      	bls.n	8005c90 <HAL_DMA_IRQHandler+0x224>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ca0:	6813      	ldr	r3, [r2, #0]
 8005ca2:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ca4:	bf4c      	ite	mi
 8005ca6:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8005ca8:	2301      	movpl	r3, #1
 8005caa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8005cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d04b      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x2e6>
          hdma->XferCpltCallback(hdma);
 8005cba:	4638      	mov	r0, r7
}
 8005cbc:	b003      	add	sp, #12
 8005cbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 8005cc2:	4718      	bx	r3
 8005cc4:	2400001c 	.word	0x2400001c
 8005cc8:	40020010 	.word	0x40020010
 8005ccc:	40020028 	.word	0x40020028
 8005cd0:	400204b8 	.word	0x400204b8
 8005cd4:	1b4e81b5 	.word	0x1b4e81b5
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005cd8:	0308      	lsls	r0, r1, #12
 8005cda:	f57f af65 	bpl.w	8005ba8 <HAL_DMA_IRQHandler+0x13c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005cde:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005ce0:	2900      	cmp	r1, #0
 8005ce2:	f47f af65 	bne.w	8005bb0 <HAL_DMA_IRQHandler+0x144>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ce6:	2120      	movs	r1, #32
 8005ce8:	4099      	lsls	r1, r3
 8005cea:	420c      	tst	r4, r1
 8005cec:	d0bd      	beq.n	8005c6a <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005cee:	6810      	ldr	r0, [r2, #0]
 8005cf0:	06c4      	lsls	r4, r0, #27
 8005cf2:	d5ba      	bpl.n	8005c6a <HAL_DMA_IRQHandler+0x1fe>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cf4:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cf6:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8005cfa:	2904      	cmp	r1, #4
 8005cfc:	d00e      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x2b0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cfe:	6813      	ldr	r3, [r2, #0]
 8005d00:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d04:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d06:	d026      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x2ea>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d08:	031d      	lsls	r5, r3, #12
 8005d0a:	d531      	bpl.n	8005d70 <HAL_DMA_IRQHandler+0x304>
          if(hdma->XferCpltCallback != NULL)
 8005d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0ab      	beq.n	8005c6a <HAL_DMA_IRQHandler+0x1fe>
            hdma->XferCpltCallback(hdma);
 8005d12:	4638      	mov	r0, r7
 8005d14:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d18:	b1db      	cbz	r3, 8005d52 <HAL_DMA_IRQHandler+0x2e6>
 8005d1a:	e7a9      	b.n	8005c70 <HAL_DMA_IRQHandler+0x204>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d1c:	6811      	ldr	r1, [r2, #0]
 8005d1e:	f021 0116 	bic.w	r1, r1, #22
 8005d22:	6011      	str	r1, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d24:	6951      	ldr	r1, [r2, #20]
 8005d26:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005d2a:	6151      	str	r1, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d2e:	b319      	cbz	r1, 8005d78 <HAL_DMA_IRQHandler+0x30c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d30:	6811      	ldr	r1, [r2, #0]
 8005d32:	f021 0108 	bic.w	r1, r1, #8
 8005d36:	6011      	str	r1, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d38:	223f      	movs	r2, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8005d3a:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
          __HAL_UNLOCK(hdma);
 8005d40:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d42:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8005d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8005d46:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005d4a:	f887 2034 	strb.w	r2, [r7, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1b3      	bne.n	8005cba <HAL_DMA_IRQHandler+0x24e>
}
 8005d52:	b003      	add	sp, #12
 8005d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d56:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8005d5a:	d1d7      	bne.n	8005d0c <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d5c:	6811      	ldr	r1, [r2, #0]
 8005d5e:	f021 0110 	bic.w	r1, r1, #16
 8005d62:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005d64:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8005d66:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005d6a:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8005d6e:	e7cd      	b.n	8005d0c <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1CpltCallback != NULL)
 8005d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1cd      	bne.n	8005d12 <HAL_DMA_IRQHandler+0x2a6>
 8005d76:	e778      	b.n	8005c6a <HAL_DMA_IRQHandler+0x1fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d78:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005d7a:	2900      	cmp	r1, #0
 8005d7c:	d1d8      	bne.n	8005d30 <HAL_DMA_IRQHandler+0x2c4>
 8005d7e:	e7db      	b.n	8005d38 <HAL_DMA_IRQHandler+0x2cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d80:	4b40      	ldr	r3, [pc, #256]	@ (8005e84 <HAL_DMA_IRQHandler+0x418>)
 8005d82:	4841      	ldr	r0, [pc, #260]	@ (8005e88 <HAL_DMA_IRQHandler+0x41c>)
 8005d84:	4282      	cmp	r2, r0
 8005d86:	bf18      	it	ne
 8005d88:	429a      	cmpne	r2, r3
 8005d8a:	f100 0014 	add.w	r0, r0, #20
 8005d8e:	bf0c      	ite	eq
 8005d90:	2301      	moveq	r3, #1
 8005d92:	2300      	movne	r3, #0
 8005d94:	4282      	cmp	r2, r0
 8005d96:	bf08      	it	eq
 8005d98:	f043 0301 	orreq.w	r3, r3, #1
 8005d9c:	3014      	adds	r0, #20
 8005d9e:	4282      	cmp	r2, r0
 8005da0:	bf08      	it	eq
 8005da2:	f043 0301 	orreq.w	r3, r3, #1
 8005da6:	3014      	adds	r0, #20
 8005da8:	4282      	cmp	r2, r0
 8005daa:	bf08      	it	eq
 8005dac:	f043 0301 	orreq.w	r3, r3, #1
 8005db0:	3014      	adds	r0, #20
 8005db2:	4282      	cmp	r2, r0
 8005db4:	bf08      	it	eq
 8005db6:	f043 0301 	orreq.w	r3, r3, #1
 8005dba:	3014      	adds	r0, #20
 8005dbc:	4282      	cmp	r2, r0
 8005dbe:	bf08      	it	eq
 8005dc0:	f043 0301 	orreq.w	r3, r3, #1
 8005dc4:	b913      	cbnz	r3, 8005dcc <HAL_DMA_IRQHandler+0x360>
 8005dc6:	4b31      	ldr	r3, [pc, #196]	@ (8005e8c <HAL_DMA_IRQHandler+0x420>)
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d1c2      	bne.n	8005d52 <HAL_DMA_IRQHandler+0x2e6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005dcc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8005dce:	2404      	movs	r4, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005dd0:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005dd2:	f000 001f 	and.w	r0, r0, #31
 8005dd6:	4084      	lsls	r4, r0
 8005dd8:	420c      	tst	r4, r1
 8005dda:	d00b      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x388>
 8005ddc:	075e      	lsls	r6, r3, #29
 8005dde:	d509      	bpl.n	8005df4 <HAL_DMA_IRQHandler+0x388>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005de0:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005de2:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005de4:	d532      	bpl.n	8005e4c <HAL_DMA_IRQHandler+0x3e0>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005de6:	03da      	lsls	r2, r3, #15
 8005de8:	d436      	bmi.n	8005e58 <HAL_DMA_IRQHandler+0x3ec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005dea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f47f af64 	bne.w	8005cba <HAL_DMA_IRQHandler+0x24e>
 8005df2:	e7ae      	b.n	8005d52 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005df4:	2402      	movs	r4, #2
 8005df6:	4084      	lsls	r4, r0
 8005df8:	420c      	tst	r4, r1
 8005dfa:	d00b      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x3a8>
 8005dfc:	079e      	lsls	r6, r3, #30
 8005dfe:	d509      	bpl.n	8005e14 <HAL_DMA_IRQHandler+0x3a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e00:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005e02:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e04:	d52d      	bpl.n	8005e62 <HAL_DMA_IRQHandler+0x3f6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005e06:	03da      	lsls	r2, r3, #15
 8005e08:	d437      	bmi.n	8005e7a <HAL_DMA_IRQHandler+0x40e>
          if(hdma->XferM1CpltCallback != NULL)
 8005e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f47f af54 	bne.w	8005cba <HAL_DMA_IRQHandler+0x24e>
 8005e12:	e79e      	b.n	8005d52 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005e14:	2408      	movs	r4, #8
 8005e16:	4084      	lsls	r4, r0
 8005e18:	420c      	tst	r4, r1
 8005e1a:	d09a      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x2e6>
 8005e1c:	071b      	lsls	r3, r3, #28
 8005e1e:	d598      	bpl.n	8005d52 <HAL_DMA_IRQHandler+0x2e6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e20:	6813      	ldr	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 8005e22:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e24:	f023 030e 	bic.w	r3, r3, #14
 8005e28:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e2a:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8005e2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e2e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e32:	6068      	str	r0, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e34:	657b      	str	r3, [r7, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 8005e36:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005e3a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	d087      	beq.n	8005d52 <HAL_DMA_IRQHandler+0x2e6>
        hdma->XferErrorCallback(hdma);
 8005e42:	4638      	mov	r0, r7
}
 8005e44:	b003      	add	sp, #12
 8005e46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8005e4a:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e4c:	069b      	lsls	r3, r3, #26
 8005e4e:	d403      	bmi.n	8005e58 <HAL_DMA_IRQHandler+0x3ec>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e50:	6813      	ldr	r3, [r2, #0]
 8005e52:	f023 0304 	bic.w	r3, r3, #4
 8005e56:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f47f af2d 	bne.w	8005cba <HAL_DMA_IRQHandler+0x24e>
 8005e60:	e777      	b.n	8005d52 <HAL_DMA_IRQHandler+0x2e6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e62:	f013 0320 	ands.w	r3, r3, #32
 8005e66:	d108      	bne.n	8005e7a <HAL_DMA_IRQHandler+0x40e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e68:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005e6a:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e6c:	f021 010a 	bic.w	r1, r1, #10
 8005e70:	6011      	str	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005e72:	f887 0035 	strb.w	r0, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005e76:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f47f af1c 	bne.w	8005cba <HAL_DMA_IRQHandler+0x24e>
 8005e82:	e766      	b.n	8005d52 <HAL_DMA_IRQHandler+0x2e6>
 8005e84:	58025408 	.word	0x58025408
 8005e88:	5802541c 	.word	0x5802541c
 8005e8c:	58025494 	.word	0x58025494

08005e90 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e90:	680b      	ldr	r3, [r1, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 81dc 	beq.w	8006250 <HAL_GPIO_Init+0x3c0>
 8005e98:	4ab4      	ldr	r2, [pc, #720]	@ (800616c <HAL_GPIO_Init+0x2dc>)
 8005e9a:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 8005e9c:	f04f 0200 	mov.w	r2, #0
{
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ea4:	f04f 0b01 	mov.w	fp, #1
{
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	f000 8105 	beq.w	80060b8 <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005eae:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005eb2:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005eb4:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 8005eb8:	9b00      	ldr	r3, [sp, #0]
 8005eba:	ea1c 0a03 	ands.w	sl, ip, r3
 8005ebe:	f000 814b 	beq.w	8006158 <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ec2:	684d      	ldr	r5, [r1, #4]
 8005ec4:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ec6:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ec8:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ecc:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ed0:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ed4:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ed6:	f1b8 0f01 	cmp.w	r8, #1
 8005eda:	f240 815d 	bls.w	8006198 <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ede:	2f03      	cmp	r7, #3
 8005ee0:	f040 81cf 	bne.w	8006282 <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ee4:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8005ee8:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005eea:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005eee:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ef2:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 8005ef6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ef8:	f000 812e 	beq.w	8006158 <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005efc:	4e9c      	ldr	r6, [pc, #624]	@ (8006170 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005efe:	f002 0703 	and.w	r7, r2, #3
 8005f02:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f04:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f08:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f0a:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f0e:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f12:	4b98      	ldr	r3, [pc, #608]	@ (8006174 <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f14:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8005f18:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 8005f1c:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f20:	4298      	cmp	r0, r3
 8005f22:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f26:	f004 0402 	and.w	r4, r4, #2
 8005f2a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005f2e:	9403      	str	r4, [sp, #12]
 8005f30:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005f32:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f34:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f38:	f000 8178 	beq.w	800622c <HAL_GPIO_Init+0x39c>
 8005f3c:	4b8e      	ldr	r3, [pc, #568]	@ (8006178 <HAL_GPIO_Init+0x2e8>)
 8005f3e:	4298      	cmp	r0, r3
 8005f40:	f000 80de 	beq.w	8006100 <HAL_GPIO_Init+0x270>
 8005f44:	f8df c234 	ldr.w	ip, [pc, #564]	@ 800617c <HAL_GPIO_Init+0x2ec>
 8005f48:	4560      	cmp	r0, ip
 8005f4a:	f000 817b 	beq.w	8006244 <HAL_GPIO_Init+0x3b4>
 8005f4e:	f8df c230 	ldr.w	ip, [pc, #560]	@ 8006180 <HAL_GPIO_Init+0x2f0>
 8005f52:	4560      	cmp	r0, ip
 8005f54:	f000 817d 	beq.w	8006252 <HAL_GPIO_Init+0x3c2>
 8005f58:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8006184 <HAL_GPIO_Init+0x2f4>
 8005f5c:	4560      	cmp	r0, ip
 8005f5e:	f000 816b 	beq.w	8006238 <HAL_GPIO_Init+0x3a8>
 8005f62:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8006188 <HAL_GPIO_Init+0x2f8>
 8005f66:	4560      	cmp	r0, ip
 8005f68:	f000 8179 	beq.w	800625e <HAL_GPIO_Init+0x3ce>
 8005f6c:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 800618c <HAL_GPIO_Init+0x2fc>
 8005f70:	4560      	cmp	r0, ip
 8005f72:	f000 817a 	beq.w	800626a <HAL_GPIO_Init+0x3da>
 8005f76:	f8df c218 	ldr.w	ip, [pc, #536]	@ 8006190 <HAL_GPIO_Init+0x300>
 8005f7a:	4560      	cmp	r0, ip
 8005f7c:	f000 817b 	beq.w	8006276 <HAL_GPIO_Init+0x3e6>
 8005f80:	f8df c210 	ldr.w	ip, [pc, #528]	@ 8006194 <HAL_GPIO_Init+0x304>
 8005f84:	4560      	cmp	r0, ip
 8005f86:	bf0c      	ite	eq
 8005f88:	f04f 0c09 	moveq.w	ip, #9
 8005f8c:	f04f 0c0a 	movne.w	ip, #10
 8005f90:	fa0c f707 	lsl.w	r7, ip, r7
 8005f94:	433c      	orrs	r4, r7
 8005f96:	e0b8      	b.n	800610a <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 8005f98:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f9c:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f9e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005fa0:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fa4:	fa06 f807 	lsl.w	r8, r6, r7
 8005fa8:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8005fac:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fb0:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8005fb4:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fb8:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fbc:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fc0:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 8005fc4:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 8005fc8:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fcc:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005fce:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fd2:	fa06 fe07 	lsl.w	lr, r6, r7
 8005fd6:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 8005fda:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fde:	d117      	bne.n	8006010 <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fe0:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fe4:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8005fe6:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005fee:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ff2:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8005ff6:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ffa:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ffc:	260f      	movs	r6, #15
 8005ffe:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006002:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006004:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006008:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 800600c:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006010:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8006012:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006014:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006018:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800601c:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8006020:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006022:	d045      	beq.n	80060b0 <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006024:	4f52      	ldr	r7, [pc, #328]	@ (8006170 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006026:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006028:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 800602c:	f044 0402 	orr.w	r4, r4, #2
 8006030:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8006034:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8006038:	f022 0703 	bic.w	r7, r2, #3
 800603c:	f004 0402 	and.w	r4, r4, #2
 8006040:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 8006044:	9403      	str	r4, [sp, #12]
 8006046:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800604a:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800604c:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8006050:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006054:	00a4      	lsls	r4, r4, #2
 8006056:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800605a:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800605c:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006060:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 8006062:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 8006066:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 800606a:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800606c:	f100 80d2 	bmi.w	8006214 <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 8006070:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8006072:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8006076:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 8006078:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800607a:	02ae      	lsls	r6, r5, #10
 800607c:	f100 80d3 	bmi.w	8006226 <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 8006080:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8006082:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8006086:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006088:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800608c:	03ae      	lsls	r6, r5, #14
 800608e:	f100 80c7 	bmi.w	8006220 <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 8006092:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006094:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006098:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800609a:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800609e:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060a2:	f100 80ba 	bmi.w	800621a <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 80060a6:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060a8:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80060ac:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 80060b0:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060b2:	fa33 f402 	lsrs.w	r4, r3, r2
 80060b6:	d055      	beq.n	8006164 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80060b8:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 80060bc:	ea13 0c0e 	ands.w	ip, r3, lr
 80060c0:	d0f6      	beq.n	80060b0 <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060c2:	684d      	ldr	r5, [r1, #4]
 80060c4:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060c6:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060c8:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060cc:	fa06 f807 	lsl.w	r8, r6, r7
 80060d0:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060d4:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80060d8:	f1b8 0f01 	cmp.w	r8, #1
 80060dc:	f67f af5c 	bls.w	8005f98 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060e0:	2c03      	cmp	r4, #3
 80060e2:	d095      	beq.n	8006010 <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 80060e4:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 800616c <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060e8:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 80060ea:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ee:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060f2:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060f6:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 80060fa:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060fe:	e787      	b.n	8006010 <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006100:	f04f 0c02 	mov.w	ip, #2
 8006104:	fa0c f707 	lsl.w	r7, ip, r7
 8006108:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800610a:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800610c:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 800610e:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8006112:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 8006116:	bf4c      	ite	mi
 8006118:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 800611c:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800611e:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 8006120:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 8006124:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8006128:	bf54      	ite	pl
 800612a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800612c:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006130:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8006132:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8006136:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 800613a:	bf54      	ite	pl
 800613c:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800613e:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006142:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8006144:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8006148:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 800614c:	bf54      	ite	pl
 800614e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8006150:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 8006154:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 8006158:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800615a:	9b00      	ldr	r3, [sp, #0]
 800615c:	fa33 f402 	lsrs.w	r4, r3, r2
 8006160:	f47f aea8 	bne.w	8005eb4 <HAL_GPIO_Init+0x24>
  }
}
 8006164:	b005      	add	sp, #20
 8006166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616a:	bf00      	nop
 800616c:	58020000 	.word	0x58020000
 8006170:	58024400 	.word	0x58024400
 8006174:	58020400 	.word	0x58020400
 8006178:	58020800 	.word	0x58020800
 800617c:	58020c00 	.word	0x58020c00
 8006180:	58021000 	.word	0x58021000
 8006184:	58021400 	.word	0x58021400
 8006188:	58021800 	.word	0x58021800
 800618c:	58021c00 	.word	0x58021c00
 8006190:	58022000 	.word	0x58022000
 8006194:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 8006198:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800619c:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800619e:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061a0:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061a4:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061a8:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061aa:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80061ae:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061b2:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 80061b6:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061ba:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061be:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061c2:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 80061c6:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061ca:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 80061ce:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061d2:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061d6:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80061da:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061de:	f47f ae81 	bne.w	8005ee4 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061e2:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061e6:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80061e8:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061ec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80061f0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061f4:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 80061f8:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061fc:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061fe:	230f      	movs	r3, #15
 8006200:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006204:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006206:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800620a:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 800620e:	f8c8 c020 	str.w	ip, [r8, #32]
 8006212:	e667      	b.n	8005ee4 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8006214:	ea44 040c 	orr.w	r4, r4, ip
 8006218:	e72b      	b.n	8006072 <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 800621a:	ea44 040c 	orr.w	r4, r4, ip
 800621e:	e743      	b.n	80060a8 <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 8006220:	ea4c 0404 	orr.w	r4, ip, r4
 8006224:	e736      	b.n	8006094 <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 8006226:	ea44 040c 	orr.w	r4, r4, ip
 800622a:	e72a      	b.n	8006082 <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800622c:	f04f 0c01 	mov.w	ip, #1
 8006230:	fa0c f707 	lsl.w	r7, ip, r7
 8006234:	433c      	orrs	r4, r7
 8006236:	e768      	b.n	800610a <HAL_GPIO_Init+0x27a>
 8006238:	f04f 0c05 	mov.w	ip, #5
 800623c:	fa0c f707 	lsl.w	r7, ip, r7
 8006240:	433c      	orrs	r4, r7
 8006242:	e762      	b.n	800610a <HAL_GPIO_Init+0x27a>
 8006244:	f04f 0c03 	mov.w	ip, #3
 8006248:	fa0c f707 	lsl.w	r7, ip, r7
 800624c:	433c      	orrs	r4, r7
 800624e:	e75c      	b.n	800610a <HAL_GPIO_Init+0x27a>
 8006250:	4770      	bx	lr
 8006252:	f04f 0c04 	mov.w	ip, #4
 8006256:	fa0c f707 	lsl.w	r7, ip, r7
 800625a:	433c      	orrs	r4, r7
 800625c:	e755      	b.n	800610a <HAL_GPIO_Init+0x27a>
 800625e:	f04f 0c06 	mov.w	ip, #6
 8006262:	fa0c f707 	lsl.w	r7, ip, r7
 8006266:	433c      	orrs	r4, r7
 8006268:	e74f      	b.n	800610a <HAL_GPIO_Init+0x27a>
 800626a:	f04f 0c07 	mov.w	ip, #7
 800626e:	fa0c f707 	lsl.w	r7, ip, r7
 8006272:	433c      	orrs	r4, r7
 8006274:	e749      	b.n	800610a <HAL_GPIO_Init+0x27a>
 8006276:	f04f 0c08 	mov.w	ip, #8
 800627a:	fa0c f707 	lsl.w	r7, ip, r7
 800627e:	433c      	orrs	r4, r7
 8006280:	e743      	b.n	800610a <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 8006282:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006286:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006288:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800628c:	fa03 fc04 	lsl.w	ip, r3, r4
 8006290:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8006294:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006298:	e624      	b.n	8005ee4 <HAL_GPIO_Init+0x54>
 800629a:	bf00      	nop

0800629c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800629c:	b902      	cbnz	r2, 80062a0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800629e:	0409      	lsls	r1, r1, #16
 80062a0:	6181      	str	r1, [r0, #24]
  }
}
 80062a2:	4770      	bx	lr

080062a4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80062a4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80062a6:	4c10      	ldr	r4, [pc, #64]	@ (80062e8 <HAL_PWREx_ConfigSupply+0x44>)
 80062a8:	68e3      	ldr	r3, [r4, #12]
 80062aa:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80062ae:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80062b0:	d105      	bne.n	80062be <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	1a18      	subs	r0, r3, r0
 80062b8:	bf18      	it	ne
 80062ba:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80062bc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062be:	f023 0307 	bic.w	r3, r3, #7
 80062c2:	4303      	orrs	r3, r0
 80062c4:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80062c6:	f7fd f8f7 	bl	80034b8 <HAL_GetTick>
 80062ca:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062cc:	e005      	b.n	80062da <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062ce:	f7fd f8f3 	bl	80034b8 <HAL_GetTick>
 80062d2:	1b40      	subs	r0, r0, r5
 80062d4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80062d8:	d804      	bhi.n	80062e4 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062da:	6863      	ldr	r3, [r4, #4]
 80062dc:	049b      	lsls	r3, r3, #18
 80062de:	d5f6      	bpl.n	80062ce <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 80062e0:	2000      	movs	r0, #0
}
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80062e4:	2001      	movs	r0, #1
}
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	58024800 	.word	0x58024800

080062ec <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062ec:	4b33      	ldr	r3, [pc, #204]	@ (80063bc <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80062ee:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062f0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80062f2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80062f4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 80062f6:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80062fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80062fc:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8006300:	d036      	beq.n	8006370 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006302:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006306:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800630a:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800630e:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006312:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 8006316:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800631c:	ee06 2a90 	vmov	s13, r2
 8006320:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8006324:	d002      	beq.n	800632c <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8006326:	2902      	cmp	r1, #2
 8006328:	d042      	beq.n	80063b0 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800632a:	b319      	cbz	r1, 8006374 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800632c:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80063c0 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8006330:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8006334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006346:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800634a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634e:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006352:	4b1a      	ldr	r3, [pc, #104]	@ (80063bc <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8006354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006356:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800635a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800635c:	ee07 3a10 	vmov	s14, r3
 8006360:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006364:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006368:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800636c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8006370:	bc30      	pop	{r4, r5}
 8006372:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	0692      	lsls	r2, r2, #26
 8006378:	d51d      	bpl.n	80063b6 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800637a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800637c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006380:	4a10      	ldr	r2, [pc, #64]	@ (80063c4 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006384:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006388:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800638c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800638e:	ee06 3a10 	vmov	s12, r3
 8006392:	ee05 2a90 	vmov	s11, r2
 8006396:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800639a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800639e:	ee36 6a27 	vadd.f32	s12, s12, s15
 80063a2:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80063a6:	ee36 7a26 	vadd.f32	s14, s12, s13
 80063aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063ae:	e7d0      	b.n	8006352 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063b0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80063c8 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 80063b4:	e7bc      	b.n	8006330 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063b6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80063cc <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 80063ba:	e7b9      	b.n	8006330 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80063bc:	58024400 	.word	0x58024400
 80063c0:	4a742400 	.word	0x4a742400
 80063c4:	03d09000 	.word	0x03d09000
 80063c8:	4bbebc20 	.word	0x4bbebc20
 80063cc:	4c742400 	.word	0x4c742400

080063d0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80063d0:	2800      	cmp	r0, #0
 80063d2:	f000 82e7 	beq.w	80069a4 <HAL_RCC_OscConfig+0x5d4>
{
 80063d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063d8:	6803      	ldr	r3, [r0, #0]
 80063da:	4604      	mov	r4, r0
 80063dc:	07d9      	lsls	r1, r3, #31
 80063de:	d52e      	bpl.n	800643e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063e0:	4997      	ldr	r1, [pc, #604]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
 80063e2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063e6:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80063ea:	2a10      	cmp	r2, #16
 80063ec:	f000 80ee 	beq.w	80065cc <HAL_RCC_OscConfig+0x1fc>
 80063f0:	2a18      	cmp	r2, #24
 80063f2:	f000 80e6 	beq.w	80065c2 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063f6:	6863      	ldr	r3, [r4, #4]
 80063f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063fc:	f000 8111 	beq.w	8006622 <HAL_RCC_OscConfig+0x252>
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8167 	beq.w	80066d4 <HAL_RCC_OscConfig+0x304>
 8006406:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800640a:	4b8d      	ldr	r3, [pc, #564]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	f000 8288 	beq.w	8006922 <HAL_RCC_OscConfig+0x552>
 8006412:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800641e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006420:	f7fd f84a 	bl	80034b8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006424:	4e86      	ldr	r6, [pc, #536]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8006426:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006428:	e005      	b.n	8006436 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800642a:	f7fd f845 	bl	80034b8 <HAL_GetTick>
 800642e:	1b40      	subs	r0, r0, r5
 8006430:	2864      	cmp	r0, #100	@ 0x64
 8006432:	f200 814d 	bhi.w	80066d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006436:	6833      	ldr	r3, [r6, #0]
 8006438:	039b      	lsls	r3, r3, #14
 800643a:	d5f6      	bpl.n	800642a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	079d      	lsls	r5, r3, #30
 8006440:	d470      	bmi.n	8006524 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006442:	06d9      	lsls	r1, r3, #27
 8006444:	d533      	bpl.n	80064ae <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006446:	4a7e      	ldr	r2, [pc, #504]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
 8006448:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800644a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800644c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006450:	2b08      	cmp	r3, #8
 8006452:	f000 80cb 	beq.w	80065ec <HAL_RCC_OscConfig+0x21c>
 8006456:	2b18      	cmp	r3, #24
 8006458:	f000 80c3 	beq.w	80065e2 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800645c:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800645e:	4d78      	ldr	r5, [pc, #480]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 816f 	beq.w	8006744 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 8006466:	682b      	ldr	r3, [r5, #0]
 8006468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800646c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800646e:	f7fd f823 	bl	80034b8 <HAL_GetTick>
 8006472:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006474:	e005      	b.n	8006482 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006476:	f7fd f81f 	bl	80034b8 <HAL_GetTick>
 800647a:	1b80      	subs	r0, r0, r6
 800647c:	2802      	cmp	r0, #2
 800647e:	f200 8127 	bhi.w	80066d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	05db      	lsls	r3, r3, #23
 8006486:	d5f6      	bpl.n	8006476 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006488:	f7fd f81c 	bl	80034c4 <HAL_GetREVID>
 800648c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006490:	4298      	cmp	r0, r3
 8006492:	f200 8267 	bhi.w	8006964 <HAL_RCC_OscConfig+0x594>
 8006496:	6a22      	ldr	r2, [r4, #32]
 8006498:	686b      	ldr	r3, [r5, #4]
 800649a:	2a20      	cmp	r2, #32
 800649c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80064a0:	bf0c      	ite	eq
 80064a2:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 80064a6:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80064aa:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	071d      	lsls	r5, r3, #28
 80064b0:	d516      	bpl.n	80064e0 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064b2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80064b4:	4d62      	ldr	r5, [pc, #392]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8122 	beq.w	8006700 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 80064bc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80064c4:	f7fc fff8 	bl	80034b8 <HAL_GetTick>
 80064c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064ca:	e005      	b.n	80064d8 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064cc:	f7fc fff4 	bl	80034b8 <HAL_GetTick>
 80064d0:	1b80      	subs	r0, r0, r6
 80064d2:	2802      	cmp	r0, #2
 80064d4:	f200 80fc 	bhi.w	80066d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064d8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80064da:	0798      	lsls	r0, r3, #30
 80064dc:	d5f6      	bpl.n	80064cc <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	069a      	lsls	r2, r3, #26
 80064e2:	d516      	bpl.n	8006512 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80064e4:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80064e6:	4d56      	ldr	r5, [pc, #344]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 811a 	beq.w	8006722 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 80064ee:	682b      	ldr	r3, [r5, #0]
 80064f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80064f4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80064f6:	f7fc ffdf 	bl	80034b8 <HAL_GetTick>
 80064fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064fc:	e005      	b.n	800650a <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064fe:	f7fc ffdb 	bl	80034b8 <HAL_GetTick>
 8006502:	1b80      	subs	r0, r0, r6
 8006504:	2802      	cmp	r0, #2
 8006506:	f200 80e3 	bhi.w	80066d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800650a:	682b      	ldr	r3, [r5, #0]
 800650c:	049f      	lsls	r7, r3, #18
 800650e:	d5f6      	bpl.n	80064fe <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	0759      	lsls	r1, r3, #29
 8006514:	f100 808b 	bmi.w	800662e <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006518:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800651a:	2b00      	cmp	r3, #0
 800651c:	f040 80bf 	bne.w	800669e <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8006520:	2000      	movs	r0, #0
}
 8006522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006524:	4a46      	ldr	r2, [pc, #280]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
 8006526:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006528:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800652a:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800652e:	d12d      	bne.n	800658c <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006530:	4b43      	ldr	r3, [pc, #268]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006532:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	0759      	lsls	r1, r3, #29
 8006538:	d501      	bpl.n	800653e <HAL_RCC_OscConfig+0x16e>
 800653a:	2a00      	cmp	r2, #0
 800653c:	d04f      	beq.n	80065de <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800653e:	4d40      	ldr	r5, [pc, #256]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	f023 0319 	bic.w	r3, r3, #25
 8006546:	4313      	orrs	r3, r2
 8006548:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800654a:	f7fc ffb5 	bl	80034b8 <HAL_GetTick>
 800654e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006550:	e005      	b.n	800655e <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006552:	f7fc ffb1 	bl	80034b8 <HAL_GetTick>
 8006556:	1b80      	subs	r0, r0, r6
 8006558:	2802      	cmp	r0, #2
 800655a:	f200 80b9 	bhi.w	80066d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800655e:	682b      	ldr	r3, [r5, #0]
 8006560:	075b      	lsls	r3, r3, #29
 8006562:	d5f6      	bpl.n	8006552 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006564:	f7fc ffae 	bl	80034c4 <HAL_GetREVID>
 8006568:	f241 0303 	movw	r3, #4099	@ 0x1003
 800656c:	4298      	cmp	r0, r3
 800656e:	f200 8110 	bhi.w	8006792 <HAL_RCC_OscConfig+0x3c2>
 8006572:	6922      	ldr	r2, [r4, #16]
 8006574:	686b      	ldr	r3, [r5, #4]
 8006576:	2a40      	cmp	r2, #64	@ 0x40
 8006578:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800657c:	bf0c      	ite	eq
 800657e:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8006582:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8006586:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	e75a      	b.n	8006442 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800658c:	2b18      	cmp	r3, #24
 800658e:	f000 80fc 	beq.w	800678a <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006592:	4d2b      	ldr	r5, [pc, #172]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006594:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006596:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006598:	2a00      	cmp	r2, #0
 800659a:	f000 80e5 	beq.w	8006768 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800659e:	f023 0319 	bic.w	r3, r3, #25
 80065a2:	4313      	orrs	r3, r2
 80065a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80065a6:	f7fc ff87 	bl	80034b8 <HAL_GetTick>
 80065aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ac:	e005      	b.n	80065ba <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ae:	f7fc ff83 	bl	80034b8 <HAL_GetTick>
 80065b2:	1b80      	subs	r0, r0, r6
 80065b4:	2802      	cmp	r0, #2
 80065b6:	f200 808b 	bhi.w	80066d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ba:	682b      	ldr	r3, [r5, #0]
 80065bc:	075f      	lsls	r7, r3, #29
 80065be:	d5f6      	bpl.n	80065ae <HAL_RCC_OscConfig+0x1de>
 80065c0:	e7d0      	b.n	8006564 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80065c2:	f001 0103 	and.w	r1, r1, #3
 80065c6:	2902      	cmp	r1, #2
 80065c8:	f47f af15 	bne.w	80063f6 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	0392      	lsls	r2, r2, #14
 80065d2:	f57f af34 	bpl.w	800643e <HAL_RCC_OscConfig+0x6e>
 80065d6:	6862      	ldr	r2, [r4, #4]
 80065d8:	2a00      	cmp	r2, #0
 80065da:	f47f af30 	bne.w	800643e <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 80065de:	2001      	movs	r0, #1
}
 80065e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80065e2:	f002 0203 	and.w	r2, r2, #3
 80065e6:	2a01      	cmp	r2, #1
 80065e8:	f47f af38 	bne.w	800645c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065ec:	4b14      	ldr	r3, [pc, #80]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	05da      	lsls	r2, r3, #23
 80065f2:	d502      	bpl.n	80065fa <HAL_RCC_OscConfig+0x22a>
 80065f4:	69e3      	ldr	r3, [r4, #28]
 80065f6:	2b80      	cmp	r3, #128	@ 0x80
 80065f8:	d1f1      	bne.n	80065de <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065fa:	f7fc ff63 	bl	80034c4 <HAL_GetREVID>
 80065fe:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006602:	4298      	cmp	r0, r3
 8006604:	f200 80ce 	bhi.w	80067a4 <HAL_RCC_OscConfig+0x3d4>
 8006608:	6a22      	ldr	r2, [r4, #32]
 800660a:	2a20      	cmp	r2, #32
 800660c:	f000 81b9 	beq.w	8006982 <HAL_RCC_OscConfig+0x5b2>
 8006610:	490b      	ldr	r1, [pc, #44]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
 8006612:	684b      	ldr	r3, [r1, #4]
 8006614:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006618:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800661c:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	e745      	b.n	80064ae <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006622:	4a07      	ldr	r2, [pc, #28]	@ (8006640 <HAL_RCC_OscConfig+0x270>)
 8006624:	6813      	ldr	r3, [r2, #0]
 8006626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800662a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800662c:	e6f8      	b.n	8006420 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800662e:	4d05      	ldr	r5, [pc, #20]	@ (8006644 <HAL_RCC_OscConfig+0x274>)
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006636:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006638:	f7fc ff3e 	bl	80034b8 <HAL_GetTick>
 800663c:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x282>
 8006640:	58024400 	.word	0x58024400
 8006644:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006648:	f7fc ff36 	bl	80034b8 <HAL_GetTick>
 800664c:	1b80      	subs	r0, r0, r6
 800664e:	2864      	cmp	r0, #100	@ 0x64
 8006650:	d83e      	bhi.n	80066d0 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	05da      	lsls	r2, r3, #23
 8006656:	d5f7      	bpl.n	8006648 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006658:	68a3      	ldr	r3, [r4, #8]
 800665a:	2b01      	cmp	r3, #1
 800665c:	f000 818b 	beq.w	8006976 <HAL_RCC_OscConfig+0x5a6>
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8166 	beq.w	8006932 <HAL_RCC_OscConfig+0x562>
 8006666:	2b05      	cmp	r3, #5
 8006668:	4b85      	ldr	r3, [pc, #532]	@ (8006880 <HAL_RCC_OscConfig+0x4b0>)
 800666a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800666c:	f000 8192 	beq.w	8006994 <HAL_RCC_OscConfig+0x5c4>
 8006670:	f022 0201 	bic.w	r2, r2, #1
 8006674:	671a      	str	r2, [r3, #112]	@ 0x70
 8006676:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006678:	f022 0204 	bic.w	r2, r2, #4
 800667c:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800667e:	f7fc ff1b 	bl	80034b8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006682:	4e7f      	ldr	r6, [pc, #508]	@ (8006880 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006684:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8006688:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800668a:	e004      	b.n	8006696 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800668c:	f7fc ff14 	bl	80034b8 <HAL_GetTick>
 8006690:	1b40      	subs	r0, r0, r5
 8006692:	42b8      	cmp	r0, r7
 8006694:	d81c      	bhi.n	80066d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006696:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8006698:	079b      	lsls	r3, r3, #30
 800669a:	d5f7      	bpl.n	800668c <HAL_RCC_OscConfig+0x2bc>
 800669c:	e73c      	b.n	8006518 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800669e:	4d78      	ldr	r5, [pc, #480]	@ (8006880 <HAL_RCC_OscConfig+0x4b0>)
 80066a0:	692a      	ldr	r2, [r5, #16]
 80066a2:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80066a6:	2a18      	cmp	r2, #24
 80066a8:	f000 80ee 	beq.w	8006888 <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ac:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80066ae:	682b      	ldr	r3, [r5, #0]
 80066b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066b4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066b6:	d07f      	beq.n	80067b8 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 80066b8:	f7fc fefe 	bl	80034b8 <HAL_GetTick>
 80066bc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066be:	682b      	ldr	r3, [r5, #0]
 80066c0:	019b      	lsls	r3, r3, #6
 80066c2:	f57f af2d 	bpl.w	8006520 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c6:	f7fc fef7 	bl	80034b8 <HAL_GetTick>
 80066ca:	1b00      	subs	r0, r0, r4
 80066cc:	2802      	cmp	r0, #2
 80066ce:	d9f6      	bls.n	80066be <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 80066d0:	2003      	movs	r0, #3
}
 80066d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066d4:	4d6a      	ldr	r5, [pc, #424]	@ (8006880 <HAL_RCC_OscConfig+0x4b0>)
 80066d6:	682b      	ldr	r3, [r5, #0]
 80066d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066dc:	602b      	str	r3, [r5, #0]
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80066e6:	f7fc fee7 	bl	80034b8 <HAL_GetTick>
 80066ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066ec:	e004      	b.n	80066f8 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ee:	f7fc fee3 	bl	80034b8 <HAL_GetTick>
 80066f2:	1b80      	subs	r0, r0, r6
 80066f4:	2864      	cmp	r0, #100	@ 0x64
 80066f6:	d8eb      	bhi.n	80066d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	039f      	lsls	r7, r3, #14
 80066fc:	d4f7      	bmi.n	80066ee <HAL_RCC_OscConfig+0x31e>
 80066fe:	e69d      	b.n	800643c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8006700:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8006708:	f7fc fed6 	bl	80034b8 <HAL_GetTick>
 800670c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800670e:	e004      	b.n	800671a <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006710:	f7fc fed2 	bl	80034b8 <HAL_GetTick>
 8006714:	1b80      	subs	r0, r0, r6
 8006716:	2802      	cmp	r0, #2
 8006718:	d8da      	bhi.n	80066d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800671a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800671c:	0799      	lsls	r1, r3, #30
 800671e:	d4f7      	bmi.n	8006710 <HAL_RCC_OscConfig+0x340>
 8006720:	e6dd      	b.n	80064de <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8006722:	682b      	ldr	r3, [r5, #0]
 8006724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006728:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800672a:	f7fc fec5 	bl	80034b8 <HAL_GetTick>
 800672e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006730:	e004      	b.n	800673c <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006732:	f7fc fec1 	bl	80034b8 <HAL_GetTick>
 8006736:	1b80      	subs	r0, r0, r6
 8006738:	2802      	cmp	r0, #2
 800673a:	d8c9      	bhi.n	80066d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	0498      	lsls	r0, r3, #18
 8006740:	d4f7      	bmi.n	8006732 <HAL_RCC_OscConfig+0x362>
 8006742:	e6e5      	b.n	8006510 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800674a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800674c:	f7fc feb4 	bl	80034b8 <HAL_GetTick>
 8006750:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006752:	e004      	b.n	800675e <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006754:	f7fc feb0 	bl	80034b8 <HAL_GetTick>
 8006758:	1b80      	subs	r0, r0, r6
 800675a:	2802      	cmp	r0, #2
 800675c:	d8b8      	bhi.n	80066d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800675e:	682b      	ldr	r3, [r5, #0]
 8006760:	05df      	lsls	r7, r3, #23
 8006762:	d4f7      	bmi.n	8006754 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	e6a2      	b.n	80064ae <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800676e:	f7fc fea3 	bl	80034b8 <HAL_GetTick>
 8006772:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006774:	e004      	b.n	8006780 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006776:	f7fc fe9f 	bl	80034b8 <HAL_GetTick>
 800677a:	1b80      	subs	r0, r0, r6
 800677c:	2802      	cmp	r0, #2
 800677e:	d8a7      	bhi.n	80066d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006780:	682b      	ldr	r3, [r5, #0]
 8006782:	0758      	lsls	r0, r3, #29
 8006784:	d4f7      	bmi.n	8006776 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	e65b      	b.n	8006442 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800678a:	0790      	lsls	r0, r2, #30
 800678c:	f47f af01 	bne.w	8006592 <HAL_RCC_OscConfig+0x1c2>
 8006790:	e6ce      	b.n	8006530 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006792:	686b      	ldr	r3, [r5, #4]
 8006794:	6922      	ldr	r2, [r4, #16]
 8006796:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800679a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800679e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	e64e      	b.n	8006442 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067a4:	4a36      	ldr	r2, [pc, #216]	@ (8006880 <HAL_RCC_OscConfig+0x4b0>)
 80067a6:	6a21      	ldr	r1, [r4, #32]
 80067a8:	68d3      	ldr	r3, [r2, #12]
 80067aa:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80067ae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80067b2:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	e67a      	b.n	80064ae <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 80067b8:	f7fc fe7e 	bl	80034b8 <HAL_GetTick>
 80067bc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067be:	e004      	b.n	80067ca <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c0:	f7fc fe7a 	bl	80034b8 <HAL_GetTick>
 80067c4:	1b80      	subs	r0, r0, r6
 80067c6:	2802      	cmp	r0, #2
 80067c8:	d882      	bhi.n	80066d0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067ca:	682b      	ldr	r3, [r5, #0]
 80067cc:	0199      	lsls	r1, r3, #6
 80067ce:	d4f7      	bmi.n	80067c0 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067d0:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80067d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006884 <HAL_RCC_OscConfig+0x4b4>)
 80067d4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80067d6:	400b      	ands	r3, r1
 80067d8:	4313      	orrs	r3, r2
 80067da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80067dc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80067e0:	62ab      	str	r3, [r5, #40]	@ 0x28
 80067e2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80067e4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80067e8:	3901      	subs	r1, #1
 80067ea:	3b01      	subs	r3, #1
 80067ec:	3a01      	subs	r2, #1
 80067ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80067f2:	025b      	lsls	r3, r3, #9
 80067f4:	0412      	lsls	r2, r2, #16
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80067fc:	4313      	orrs	r3, r2
 80067fe:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006800:	3a01      	subs	r2, #1
 8006802:	430b      	orrs	r3, r1
 8006804:	0612      	lsls	r2, r2, #24
 8006806:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800680a:	4313      	orrs	r3, r2
 800680c:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800680e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006810:	f023 0301 	bic.w	r3, r3, #1
 8006814:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006816:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006818:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800681a:	f36f 03cf 	bfc	r3, #3, #13
 800681e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006822:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006824:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006826:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006828:	f023 030c 	bic.w	r3, r3, #12
 800682c:	4313      	orrs	r3, r2
 800682e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006830:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006832:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006834:	f023 0302 	bic.w	r3, r3, #2
 8006838:	4313      	orrs	r3, r2
 800683a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800683c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800683e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006842:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006844:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800684a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800684c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800684e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006852:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8006854:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006862:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006864:	f7fc fe28 	bl	80034b8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006868:	4d05      	ldr	r5, [pc, #20]	@ (8006880 <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 800686a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	019a      	lsls	r2, r3, #6
 8006870:	f53f ae56 	bmi.w	8006520 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006874:	f7fc fe20 	bl	80034b8 <HAL_GetTick>
 8006878:	1b00      	subs	r0, r0, r4
 800687a:	2802      	cmp	r0, #2
 800687c:	d9f6      	bls.n	800686c <HAL_RCC_OscConfig+0x49c>
 800687e:	e727      	b.n	80066d0 <HAL_RCC_OscConfig+0x300>
 8006880:	58024400 	.word	0x58024400
 8006884:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006888:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800688a:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800688c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800688e:	f43f aea6 	beq.w	80065de <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006892:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006896:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006898:	428b      	cmp	r3, r1
 800689a:	f47f aea0 	bne.w	80065de <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800689e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80068a4:	429a      	cmp	r2, r3
 80068a6:	f47f ae9a 	bne.w	80065de <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80068ac:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80068b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068b2:	429a      	cmp	r2, r3
 80068b4:	f47f ae93 	bne.w	80065de <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068ba:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80068be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068c0:	429a      	cmp	r2, r3
 80068c2:	f47f ae8c 	bne.w	80065de <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80068c8:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80068cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068ce:	429a      	cmp	r2, r3
 80068d0:	f47f ae85 	bne.w	80065de <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80068d6:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80068da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068dc:	4298      	cmp	r0, r3
 80068de:	f47f ae7e 	bne.w	80065de <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80068e2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80068e4:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80068e6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80068ea:	429a      	cmp	r2, r3
 80068ec:	f43f ae18 	beq.w	8006520 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 80068f0:	4a2d      	ldr	r2, [pc, #180]	@ (80069a8 <HAL_RCC_OscConfig+0x5d8>)
 80068f2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80068f4:	f023 0301 	bic.w	r3, r3, #1
 80068f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80068fa:	f7fc fddd 	bl	80034b8 <HAL_GetTick>
 80068fe:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006900:	f7fc fdda 	bl	80034b8 <HAL_GetTick>
 8006904:	42a8      	cmp	r0, r5
 8006906:	d0fb      	beq.n	8006900 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006908:	4a27      	ldr	r2, [pc, #156]	@ (80069a8 <HAL_RCC_OscConfig+0x5d8>)
 800690a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800690c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800690e:	f36f 03cf 	bfc	r3, #3, #13
 8006912:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006916:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8006918:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800691a:	f043 0301 	orr.w	r3, r3, #1
 800691e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006920:	e5fe      	b.n	8006520 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006922:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800692e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006930:	e576      	b.n	8006420 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006932:	4d1d      	ldr	r5, [pc, #116]	@ (80069a8 <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006934:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006938:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800693a:	f023 0301 	bic.w	r3, r3, #1
 800693e:	672b      	str	r3, [r5, #112]	@ 0x70
 8006940:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006942:	f023 0304 	bic.w	r3, r3, #4
 8006946:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8006948:	f7fc fdb6 	bl	80034b8 <HAL_GetTick>
 800694c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800694e:	e005      	b.n	800695c <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006950:	f7fc fdb2 	bl	80034b8 <HAL_GetTick>
 8006954:	1b80      	subs	r0, r0, r6
 8006956:	42b8      	cmp	r0, r7
 8006958:	f63f aeba 	bhi.w	80066d0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800695c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800695e:	0798      	lsls	r0, r3, #30
 8006960:	d4f6      	bmi.n	8006950 <HAL_RCC_OscConfig+0x580>
 8006962:	e5d9      	b.n	8006518 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006964:	68eb      	ldr	r3, [r5, #12]
 8006966:	6a22      	ldr	r2, [r4, #32]
 8006968:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800696c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006970:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	e59b      	b.n	80064ae <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006976:	4a0c      	ldr	r2, [pc, #48]	@ (80069a8 <HAL_RCC_OscConfig+0x5d8>)
 8006978:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006980:	e67d      	b.n	800667e <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006982:	4a09      	ldr	r2, [pc, #36]	@ (80069a8 <HAL_RCC_OscConfig+0x5d8>)
 8006984:	6853      	ldr	r3, [r2, #4]
 8006986:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800698a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800698e:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	e58c      	b.n	80064ae <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006994:	f042 0204 	orr.w	r2, r2, #4
 8006998:	671a      	str	r2, [r3, #112]	@ 0x70
 800699a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800699c:	f042 0201 	orr.w	r2, r2, #1
 80069a0:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069a2:	e66c      	b.n	800667e <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 80069a4:	2001      	movs	r0, #1
}
 80069a6:	4770      	bx	lr
 80069a8:	58024400 	.word	0x58024400

080069ac <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069ac:	4a3f      	ldr	r2, [pc, #252]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x100>)
 80069ae:	6913      	ldr	r3, [r2, #16]
 80069b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069b4:	2b10      	cmp	r3, #16
 80069b6:	d04f      	beq.n	8006a58 <HAL_RCC_GetSysClockFreq+0xac>
 80069b8:	2b18      	cmp	r3, #24
 80069ba:	d00a      	beq.n	80069d2 <HAL_RCC_GetSysClockFreq+0x26>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d14d      	bne.n	8006a5c <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069c0:	6813      	ldr	r3, [r2, #0]
 80069c2:	0699      	lsls	r1, r3, #26
 80069c4:	d54c      	bpl.n	8006a60 <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069c6:	6813      	ldr	r3, [r2, #0]
 80069c8:	4839      	ldr	r0, [pc, #228]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x104>)
 80069ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80069ce:	40d8      	lsrs	r0, r3
 80069d0:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069d2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 80069d4:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80069d6:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069d8:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 80069da:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80069de:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80069e0:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80069e4:	d036      	beq.n	8006a54 <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80069e6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069ea:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069ee:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069f2:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80069f6:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 80069fa:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a00:	ee06 3a90 	vmov	s13, r3
 8006a04:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8006a08:	d002      	beq.n	8006a10 <HAL_RCC_GetSysClockFreq+0x64>
 8006a0a:	2902      	cmp	r1, #2
 8006a0c:	d048      	beq.n	8006aa0 <HAL_RCC_GetSysClockFreq+0xf4>
 8006a0e:	b349      	cbz	r1, 8006a64 <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a10:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006ab4 <HAL_RCC_GetSysClockFreq+0x108>
 8006a14:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006a18:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1e:	ee07 3a10 	vmov	s14, r3
 8006a22:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006a26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006a2a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006a2e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006a32:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006a36:	4b1d      	ldr	r3, [pc, #116]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x100>)
 8006a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006a3e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006a48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a50:	ee17 0a90 	vmov	r0, s15
}
 8006a54:	bc30      	pop	{r4, r5}
 8006a56:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a58:	4817      	ldr	r0, [pc, #92]	@ (8006ab8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a5a:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 8006a5c:	4817      	ldr	r0, [pc, #92]	@ (8006abc <HAL_RCC_GetSysClockFreq+0x110>)
 8006a5e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a60:	4813      	ldr	r0, [pc, #76]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8006a62:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a64:	6813      	ldr	r3, [r2, #0]
 8006a66:	069b      	lsls	r3, r3, #26
 8006a68:	d51d      	bpl.n	8006aa6 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a6a:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a70:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a72:	490f      	ldr	r1, [pc, #60]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a74:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a7c:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a7e:	ee06 3a10 	vmov	s12, r3
 8006a82:	ee05 1a90 	vmov	s11, r1
 8006a86:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006a8a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006a8e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8006a92:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8006a96:	ee76 7a26 	vadd.f32	s15, s12, s13
 8006a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a9e:	e7ca      	b.n	8006a36 <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006aa0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006ac0 <HAL_RCC_GetSysClockFreq+0x114>
 8006aa4:	e7b6      	b.n	8006a14 <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006aa6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006ac4 <HAL_RCC_GetSysClockFreq+0x118>
 8006aaa:	e7b3      	b.n	8006a14 <HAL_RCC_GetSysClockFreq+0x68>
 8006aac:	58024400 	.word	0x58024400
 8006ab0:	03d09000 	.word	0x03d09000
 8006ab4:	4a742400 	.word	0x4a742400
 8006ab8:	017d7840 	.word	0x017d7840
 8006abc:	003d0900 	.word	0x003d0900
 8006ac0:	4bbebc20 	.word	0x4bbebc20
 8006ac4:	4c742400 	.word	0x4c742400

08006ac8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	f000 810e 	beq.w	8006cea <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ace:	4a8d      	ldr	r2, [pc, #564]	@ (8006d04 <HAL_RCC_ClockConfig+0x23c>)
 8006ad0:	6813      	ldr	r3, [r2, #0]
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	428b      	cmp	r3, r1
{
 8006ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006adc:	4604      	mov	r4, r0
 8006ade:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae0:	d20c      	bcs.n	8006afc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ae2:	6813      	ldr	r3, [r2, #0]
 8006ae4:	f023 030f 	bic.w	r3, r3, #15
 8006ae8:	430b      	orrs	r3, r1
 8006aea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aec:	6813      	ldr	r3, [r2, #0]
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	428b      	cmp	r3, r1
 8006af4:	d002      	beq.n	8006afc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006af6:	2001      	movs	r0, #1
}
 8006af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	0758      	lsls	r0, r3, #29
 8006b00:	d50b      	bpl.n	8006b1a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b02:	4981      	ldr	r1, [pc, #516]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006b04:	6920      	ldr	r0, [r4, #16]
 8006b06:	698a      	ldr	r2, [r1, #24]
 8006b08:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006b0c:	4290      	cmp	r0, r2
 8006b0e:	d904      	bls.n	8006b1a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b10:	698a      	ldr	r2, [r1, #24]
 8006b12:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006b16:	4302      	orrs	r2, r0
 8006b18:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b1a:	0719      	lsls	r1, r3, #28
 8006b1c:	d50b      	bpl.n	8006b36 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b1e:	497a      	ldr	r1, [pc, #488]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006b20:	6960      	ldr	r0, [r4, #20]
 8006b22:	69ca      	ldr	r2, [r1, #28]
 8006b24:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006b28:	4290      	cmp	r0, r2
 8006b2a:	d904      	bls.n	8006b36 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b2c:	69ca      	ldr	r2, [r1, #28]
 8006b2e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006b32:	4302      	orrs	r2, r0
 8006b34:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b36:	06da      	lsls	r2, r3, #27
 8006b38:	d50b      	bpl.n	8006b52 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b3a:	4973      	ldr	r1, [pc, #460]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006b3c:	69a0      	ldr	r0, [r4, #24]
 8006b3e:	69ca      	ldr	r2, [r1, #28]
 8006b40:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006b44:	4290      	cmp	r0, r2
 8006b46:	d904      	bls.n	8006b52 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b48:	69ca      	ldr	r2, [r1, #28]
 8006b4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b4e:	4302      	orrs	r2, r0
 8006b50:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b52:	069f      	lsls	r7, r3, #26
 8006b54:	d50b      	bpl.n	8006b6e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b56:	496c      	ldr	r1, [pc, #432]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006b58:	69e0      	ldr	r0, [r4, #28]
 8006b5a:	6a0a      	ldr	r2, [r1, #32]
 8006b5c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006b60:	4290      	cmp	r0, r2
 8006b62:	d904      	bls.n	8006b6e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b64:	6a0a      	ldr	r2, [r1, #32]
 8006b66:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006b6a:	4302      	orrs	r2, r0
 8006b6c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b6e:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b70:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b74:	f140 80ab 	bpl.w	8006cce <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b78:	4e63      	ldr	r6, [pc, #396]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006b7a:	68e0      	ldr	r0, [r4, #12]
 8006b7c:	69b1      	ldr	r1, [r6, #24]
 8006b7e:	f001 010f 	and.w	r1, r1, #15
 8006b82:	4288      	cmp	r0, r1
 8006b84:	d904      	bls.n	8006b90 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b86:	69b1      	ldr	r1, [r6, #24]
 8006b88:	f021 010f 	bic.w	r1, r1, #15
 8006b8c:	4301      	orrs	r1, r0
 8006b8e:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	d030      	beq.n	8006bf6 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b94:	4a5c      	ldr	r2, [pc, #368]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006b96:	68a1      	ldr	r1, [r4, #8]
 8006b98:	6993      	ldr	r3, [r2, #24]
 8006b9a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ba2:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ba4:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ba6:	2902      	cmp	r1, #2
 8006ba8:	f000 80a1 	beq.w	8006cee <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bac:	2903      	cmp	r1, #3
 8006bae:	f000 8098 	beq.w	8006ce2 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006bb2:	2901      	cmp	r1, #1
 8006bb4:	f000 80a1 	beq.w	8006cfa <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bb8:	075f      	lsls	r7, r3, #29
 8006bba:	d59c      	bpl.n	8006af6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bbc:	4e52      	ldr	r6, [pc, #328]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bbe:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bc2:	6933      	ldr	r3, [r6, #16]
 8006bc4:	f023 0307 	bic.w	r3, r3, #7
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8006bcc:	f7fc fc74 	bl	80034b8 <HAL_GetTick>
 8006bd0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd2:	e005      	b.n	8006be0 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd4:	f7fc fc70 	bl	80034b8 <HAL_GetTick>
 8006bd8:	1bc0      	subs	r0, r0, r7
 8006bda:	4540      	cmp	r0, r8
 8006bdc:	f200 808b 	bhi.w	8006cf6 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be0:	6933      	ldr	r3, [r6, #16]
 8006be2:	6862      	ldr	r2, [r4, #4]
 8006be4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006be8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006bec:	d1f2      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	079e      	lsls	r6, r3, #30
 8006bf2:	d506      	bpl.n	8006c02 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bf4:	68e0      	ldr	r0, [r4, #12]
 8006bf6:	4944      	ldr	r1, [pc, #272]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006bf8:	698a      	ldr	r2, [r1, #24]
 8006bfa:	f002 020f 	and.w	r2, r2, #15
 8006bfe:	4290      	cmp	r0, r2
 8006c00:	d369      	bcc.n	8006cd6 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c02:	4940      	ldr	r1, [pc, #256]	@ (8006d04 <HAL_RCC_ClockConfig+0x23c>)
 8006c04:	680a      	ldr	r2, [r1, #0]
 8006c06:	f002 020f 	and.w	r2, r2, #15
 8006c0a:	42aa      	cmp	r2, r5
 8006c0c:	d90a      	bls.n	8006c24 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c0e:	680a      	ldr	r2, [r1, #0]
 8006c10:	f022 020f 	bic.w	r2, r2, #15
 8006c14:	432a      	orrs	r2, r5
 8006c16:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c18:	680a      	ldr	r2, [r1, #0]
 8006c1a:	f002 020f 	and.w	r2, r2, #15
 8006c1e:	42aa      	cmp	r2, r5
 8006c20:	f47f af69 	bne.w	8006af6 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c24:	0758      	lsls	r0, r3, #29
 8006c26:	d50b      	bpl.n	8006c40 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c28:	4937      	ldr	r1, [pc, #220]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006c2a:	6920      	ldr	r0, [r4, #16]
 8006c2c:	698a      	ldr	r2, [r1, #24]
 8006c2e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006c32:	4290      	cmp	r0, r2
 8006c34:	d204      	bcs.n	8006c40 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c36:	698a      	ldr	r2, [r1, #24]
 8006c38:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006c3c:	4302      	orrs	r2, r0
 8006c3e:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c40:	0719      	lsls	r1, r3, #28
 8006c42:	d50b      	bpl.n	8006c5c <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c44:	4930      	ldr	r1, [pc, #192]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006c46:	6960      	ldr	r0, [r4, #20]
 8006c48:	69ca      	ldr	r2, [r1, #28]
 8006c4a:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006c4e:	4290      	cmp	r0, r2
 8006c50:	d204      	bcs.n	8006c5c <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c52:	69ca      	ldr	r2, [r1, #28]
 8006c54:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006c58:	4302      	orrs	r2, r0
 8006c5a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c5c:	06da      	lsls	r2, r3, #27
 8006c5e:	d50b      	bpl.n	8006c78 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c60:	4929      	ldr	r1, [pc, #164]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006c62:	69a0      	ldr	r0, [r4, #24]
 8006c64:	69ca      	ldr	r2, [r1, #28]
 8006c66:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006c6a:	4290      	cmp	r0, r2
 8006c6c:	d204      	bcs.n	8006c78 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c6e:	69ca      	ldr	r2, [r1, #28]
 8006c70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c74:	4302      	orrs	r2, r0
 8006c76:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c78:	069b      	lsls	r3, r3, #26
 8006c7a:	d50b      	bpl.n	8006c94 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c7c:	4a22      	ldr	r2, [pc, #136]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006c7e:	69e1      	ldr	r1, [r4, #28]
 8006c80:	6a13      	ldr	r3, [r2, #32]
 8006c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c86:	4299      	cmp	r1, r3
 8006c88:	d204      	bcs.n	8006c94 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c8a:	6a13      	ldr	r3, [r2, #32]
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c90:	430b      	orrs	r3, r1
 8006c92:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c94:	f7ff fe8a 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 8006c98:	4a1b      	ldr	r2, [pc, #108]	@ (8006d08 <HAL_RCC_ClockConfig+0x240>)
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	481b      	ldr	r0, [pc, #108]	@ (8006d0c <HAL_RCC_ClockConfig+0x244>)
 8006c9e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ca0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ca2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8006ca6:	4d1a      	ldr	r5, [pc, #104]	@ (8006d10 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ca8:	f002 020f 	and.w	r2, r2, #15
 8006cac:	4c19      	ldr	r4, [pc, #100]	@ (8006d14 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006cae:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cb0:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006cb2:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8006cb6:	4818      	ldr	r0, [pc, #96]	@ (8006d18 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cb8:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006cbc:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8006cbe:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8006cc0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cc2:	40d3      	lsrs	r3, r2
 8006cc4:	6023      	str	r3, [r4, #0]
}
 8006cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8006cca:	f7fc bb93 	b.w	80033f4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cce:	2a00      	cmp	r2, #0
 8006cd0:	f47f af60 	bne.w	8006b94 <HAL_RCC_ClockConfig+0xcc>
 8006cd4:	e795      	b.n	8006c02 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cd6:	698a      	ldr	r2, [r1, #24]
 8006cd8:	f022 020f 	bic.w	r2, r2, #15
 8006cdc:	4302      	orrs	r2, r0
 8006cde:	618a      	str	r2, [r1, #24]
 8006ce0:	e78f      	b.n	8006c02 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ce2:	019a      	lsls	r2, r3, #6
 8006ce4:	f53f af6a 	bmi.w	8006bbc <HAL_RCC_ClockConfig+0xf4>
 8006ce8:	e705      	b.n	8006af6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8006cea:	2001      	movs	r0, #1
}
 8006cec:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cee:	0398      	lsls	r0, r3, #14
 8006cf0:	f53f af64 	bmi.w	8006bbc <HAL_RCC_ClockConfig+0xf4>
 8006cf4:	e6ff      	b.n	8006af6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8006cf6:	2003      	movs	r0, #3
 8006cf8:	e6fe      	b.n	8006af8 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cfa:	05db      	lsls	r3, r3, #23
 8006cfc:	f53f af5e 	bmi.w	8006bbc <HAL_RCC_ClockConfig+0xf4>
 8006d00:	e6f9      	b.n	8006af6 <HAL_RCC_ClockConfig+0x2e>
 8006d02:	bf00      	nop
 8006d04:	52002000 	.word	0x52002000
 8006d08:	58024400 	.word	0x58024400
 8006d0c:	08070ae4 	.word	0x08070ae4
 8006d10:	2400001c 	.word	0x2400001c
 8006d14:	24000018 	.word	0x24000018
 8006d18:	24000024 	.word	0x24000024

08006d1c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d1c:	4a18      	ldr	r2, [pc, #96]	@ (8006d80 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d1e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d20:	6913      	ldr	r3, [r2, #16]
 8006d22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d024      	beq.n	8006d74 <HAL_RCC_GetHCLKFreq+0x58>
 8006d2a:	2b18      	cmp	r3, #24
 8006d2c:	d009      	beq.n	8006d42 <HAL_RCC_GetHCLKFreq+0x26>
 8006d2e:	bb1b      	cbnz	r3, 8006d78 <HAL_RCC_GetHCLKFreq+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d30:	6813      	ldr	r3, [r2, #0]
 8006d32:	069b      	lsls	r3, r3, #26
 8006d34:	d522      	bpl.n	8006d7c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d36:	6812      	ldr	r2, [r2, #0]
 8006d38:	4b12      	ldr	r3, [pc, #72]	@ (8006d84 <HAL_RCC_GetHCLKFreq+0x68>)
 8006d3a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006d3e:	40d3      	lsrs	r3, r2
 8006d40:	e002      	b.n	8006d48 <HAL_RCC_GetHCLKFreq+0x2c>
 8006d42:	f7ff fad3 	bl	80062ec <HAL_RCC_GetSysClockFreq.part.0>
 8006d46:	4603      	mov	r3, r0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d48:	490d      	ldr	r1, [pc, #52]	@ (8006d80 <HAL_RCC_GetHCLKFreq+0x64>)
 8006d4a:	480f      	ldr	r0, [pc, #60]	@ (8006d88 <HAL_RCC_GetHCLKFreq+0x6c>)
 8006d4c:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d4e:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d50:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d54:	4c0d      	ldr	r4, [pc, #52]	@ (8006d8c <HAL_RCC_GetHCLKFreq+0x70>)
 8006d56:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8006d90 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d5c:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d5e:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d60:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d64:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006d68:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d6a:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8006d6e:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d70:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d74:	4b07      	ldr	r3, [pc, #28]	@ (8006d94 <HAL_RCC_GetHCLKFreq+0x78>)
 8006d76:	e7e7      	b.n	8006d48 <HAL_RCC_GetHCLKFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8006d78:	4b07      	ldr	r3, [pc, #28]	@ (8006d98 <HAL_RCC_GetHCLKFreq+0x7c>)
 8006d7a:	e7e5      	b.n	8006d48 <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d7c:	4b01      	ldr	r3, [pc, #4]	@ (8006d84 <HAL_RCC_GetHCLKFreq+0x68>)
 8006d7e:	e7e3      	b.n	8006d48 <HAL_RCC_GetHCLKFreq+0x2c>
 8006d80:	58024400 	.word	0x58024400
 8006d84:	03d09000 	.word	0x03d09000
 8006d88:	08070ae4 	.word	0x08070ae4
 8006d8c:	24000018 	.word	0x24000018
 8006d90:	2400001c 	.word	0x2400001c
 8006d94:	017d7840 	.word	0x017d7840
 8006d98:	003d0900 	.word	0x003d0900

08006d9c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006e10 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d9e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006da0:	6913      	ldr	r3, [r2, #16]
 8006da2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006da6:	2b10      	cmp	r3, #16
 8006da8:	d02b      	beq.n	8006e02 <HAL_RCC_GetPCLK1Freq+0x66>
 8006daa:	2b18      	cmp	r3, #24
 8006dac:	d009      	beq.n	8006dc2 <HAL_RCC_GetPCLK1Freq+0x26>
 8006dae:	bb53      	cbnz	r3, 8006e06 <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db0:	6813      	ldr	r3, [r2, #0]
 8006db2:	069b      	lsls	r3, r3, #26
 8006db4:	d529      	bpl.n	8006e0a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	4b16      	ldr	r3, [pc, #88]	@ (8006e14 <HAL_RCC_GetPCLK1Freq+0x78>)
 8006dba:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006dbe:	40d3      	lsrs	r3, r2
 8006dc0:	e002      	b.n	8006dc8 <HAL_RCC_GetPCLK1Freq+0x2c>
 8006dc2:	f7ff fa93 	bl	80062ec <HAL_RCC_GetSysClockFreq.part.0>
 8006dc6:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006dc8:	4a11      	ldr	r2, [pc, #68]	@ (8006e10 <HAL_RCC_GetPCLK1Freq+0x74>)
 8006dca:	4913      	ldr	r1, [pc, #76]	@ (8006e18 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8006dcc:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8006dce:	4d13      	ldr	r5, [pc, #76]	@ (8006e1c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006dd0:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dd4:	4c12      	ldr	r4, [pc, #72]	@ (8006e20 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006dd6:	5c08      	ldrb	r0, [r1, r0]
 8006dd8:	f000 001f 	and.w	r0, r0, #31
 8006ddc:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dde:	6990      	ldr	r0, [r2, #24]
 8006de0:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8006de4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006de6:	5c08      	ldrb	r0, [r1, r0]
 8006de8:	f000 001f 	and.w	r0, r0, #31
 8006dec:	40c3      	lsrs	r3, r0
 8006dee:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006df0:	69d2      	ldr	r2, [r2, #28]
 8006df2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006df6:	5c88      	ldrb	r0, [r1, r2]
 8006df8:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006dfc:	fa23 f000 	lsr.w	r0, r3, r0
 8006e00:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e02:	4b08      	ldr	r3, [pc, #32]	@ (8006e24 <HAL_RCC_GetPCLK1Freq+0x88>)
 8006e04:	e7e0      	b.n	8006dc8 <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 8006e06:	4b08      	ldr	r3, [pc, #32]	@ (8006e28 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8006e08:	e7de      	b.n	8006dc8 <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e0a:	4b02      	ldr	r3, [pc, #8]	@ (8006e14 <HAL_RCC_GetPCLK1Freq+0x78>)
 8006e0c:	e7dc      	b.n	8006dc8 <HAL_RCC_GetPCLK1Freq+0x2c>
 8006e0e:	bf00      	nop
 8006e10:	58024400 	.word	0x58024400
 8006e14:	03d09000 	.word	0x03d09000
 8006e18:	08070ae4 	.word	0x08070ae4
 8006e1c:	2400001c 	.word	0x2400001c
 8006e20:	24000018 	.word	0x24000018
 8006e24:	017d7840 	.word	0x017d7840
 8006e28:	003d0900 	.word	0x003d0900

08006e2c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea0 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e2e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e30:	6913      	ldr	r3, [r2, #16]
 8006e32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e36:	2b10      	cmp	r3, #16
 8006e38:	d02b      	beq.n	8006e92 <HAL_RCC_GetPCLK2Freq+0x66>
 8006e3a:	2b18      	cmp	r3, #24
 8006e3c:	d009      	beq.n	8006e52 <HAL_RCC_GetPCLK2Freq+0x26>
 8006e3e:	bb53      	cbnz	r3, 8006e96 <HAL_RCC_GetPCLK2Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e40:	6813      	ldr	r3, [r2, #0]
 8006e42:	069b      	lsls	r3, r3, #26
 8006e44:	d529      	bpl.n	8006e9a <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e46:	6812      	ldr	r2, [r2, #0]
 8006e48:	4b16      	ldr	r3, [pc, #88]	@ (8006ea4 <HAL_RCC_GetPCLK2Freq+0x78>)
 8006e4a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006e4e:	40d3      	lsrs	r3, r2
 8006e50:	e002      	b.n	8006e58 <HAL_RCC_GetPCLK2Freq+0x2c>
 8006e52:	f7ff fa4b 	bl	80062ec <HAL_RCC_GetSysClockFreq.part.0>
 8006e56:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e58:	4a11      	ldr	r2, [pc, #68]	@ (8006ea0 <HAL_RCC_GetPCLK2Freq+0x74>)
 8006e5a:	4913      	ldr	r1, [pc, #76]	@ (8006ea8 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8006e5c:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8006e5e:	4d13      	ldr	r5, [pc, #76]	@ (8006eac <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e60:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e64:	4c12      	ldr	r4, [pc, #72]	@ (8006eb0 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e66:	5c08      	ldrb	r0, [r1, r0]
 8006e68:	f000 001f 	and.w	r0, r0, #31
 8006e6c:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e6e:	6990      	ldr	r0, [r2, #24]
 8006e70:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8006e74:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e76:	5c08      	ldrb	r0, [r1, r0]
 8006e78:	f000 001f 	and.w	r0, r0, #31
 8006e7c:	40c3      	lsrs	r3, r0
 8006e7e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e80:	69d2      	ldr	r2, [r2, #28]
 8006e82:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8006e86:	5c88      	ldrb	r0, [r1, r2]
 8006e88:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e8c:	fa23 f000 	lsr.w	r0, r3, r0
 8006e90:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e92:	4b08      	ldr	r3, [pc, #32]	@ (8006eb4 <HAL_RCC_GetPCLK2Freq+0x88>)
 8006e94:	e7e0      	b.n	8006e58 <HAL_RCC_GetPCLK2Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 8006e96:	4b08      	ldr	r3, [pc, #32]	@ (8006eb8 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8006e98:	e7de      	b.n	8006e58 <HAL_RCC_GetPCLK2Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e9a:	4b02      	ldr	r3, [pc, #8]	@ (8006ea4 <HAL_RCC_GetPCLK2Freq+0x78>)
 8006e9c:	e7dc      	b.n	8006e58 <HAL_RCC_GetPCLK2Freq+0x2c>
 8006e9e:	bf00      	nop
 8006ea0:	58024400 	.word	0x58024400
 8006ea4:	03d09000 	.word	0x03d09000
 8006ea8:	08070ae4 	.word	0x08070ae4
 8006eac:	2400001c 	.word	0x2400001c
 8006eb0:	24000018 	.word	0x24000018
 8006eb4:	017d7840 	.word	0x017d7840
 8006eb8:	003d0900 	.word	0x003d0900

08006ebc <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ebe:	4c36      	ldr	r4, [pc, #216]	@ (8006f98 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8006ec0:	4606      	mov	r6, r0
 8006ec2:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006eca:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ecc:	f7fc faf4 	bl	80034b8 <HAL_GetTick>
 8006ed0:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ed2:	e004      	b.n	8006ede <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ed4:	f7fc faf0 	bl	80034b8 <HAL_GetTick>
 8006ed8:	1b40      	subs	r0, r0, r5
 8006eda:	2802      	cmp	r0, #2
 8006edc:	d856      	bhi.n	8006f8c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	011a      	lsls	r2, r3, #4
 8006ee2:	d4f7      	bmi.n	8006ed4 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ee4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006ee6:	6832      	ldr	r2, [r6, #0]
 8006ee8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006eec:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006ef0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ef2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	3a01      	subs	r2, #1
 8006efa:	025b      	lsls	r3, r3, #9
 8006efc:	0412      	lsls	r2, r2, #16
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006f04:	4313      	orrs	r3, r2
 8006f06:	6872      	ldr	r2, [r6, #4]
 8006f08:	3a01      	subs	r2, #1
 8006f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	6932      	ldr	r2, [r6, #16]
 8006f12:	3a01      	subs	r2, #1
 8006f14:	0612      	lsls	r2, r2, #24
 8006f16:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f1e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006f20:	6972      	ldr	r2, [r6, #20]
 8006f22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006f26:	4313      	orrs	r3, r2
 8006f28:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006f2c:	69b2      	ldr	r2, [r6, #24]
 8006f2e:	f023 0320 	bic.w	r3, r3, #32
 8006f32:	4313      	orrs	r3, r2
 8006f34:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f36:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006f38:	f023 0310 	bic.w	r3, r3, #16
 8006f3c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f3e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006f40:	69f2      	ldr	r2, [r6, #28]
 8006f42:	f36f 03cf 	bfc	r3, #3, #13
 8006f46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006f4a:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f4c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006f4e:	f043 0310 	orr.w	r3, r3, #16
 8006f52:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8006f56:	b1df      	cbz	r7, 8006f90 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f58:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f5a:	bf0c      	ite	eq
 8006f5c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f60:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8006f64:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f66:	4c0c      	ldr	r4, [pc, #48]	@ (8006f98 <RCCEx_PLL2_Config.part.0+0xdc>)
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f6e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f70:	f7fc faa2 	bl	80034b8 <HAL_GetTick>
 8006f74:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f76:	e004      	b.n	8006f82 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f78:	f7fc fa9e 	bl	80034b8 <HAL_GetTick>
 8006f7c:	1b40      	subs	r0, r0, r5
 8006f7e:	2802      	cmp	r0, #2
 8006f80:	d804      	bhi.n	8006f8c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	d5f7      	bpl.n	8006f78 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8006f88:	2000      	movs	r0, #0
}
 8006f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006f8c:	2003      	movs	r0, #3
}
 8006f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f96:	e7e6      	b.n	8006f66 <RCCEx_PLL2_Config.part.0+0xaa>
 8006f98:	58024400 	.word	0x58024400

08006f9c <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f9e:	4c36      	ldr	r4, [pc, #216]	@ (8007078 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006faa:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fac:	f7fc fa84 	bl	80034b8 <HAL_GetTick>
 8006fb0:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fb2:	e004      	b.n	8006fbe <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fb4:	f7fc fa80 	bl	80034b8 <HAL_GetTick>
 8006fb8:	1b40      	subs	r0, r0, r5
 8006fba:	2802      	cmp	r0, #2
 8006fbc:	d856      	bhi.n	800706c <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	009a      	lsls	r2, r3, #2
 8006fc2:	d4f7      	bmi.n	8006fb4 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006fc4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006fc6:	6832      	ldr	r2, [r6, #0]
 8006fc8:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006fcc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006fd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fd2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	3a01      	subs	r2, #1
 8006fda:	025b      	lsls	r3, r3, #9
 8006fdc:	0412      	lsls	r2, r2, #16
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	6872      	ldr	r2, [r6, #4]
 8006fe8:	3a01      	subs	r2, #1
 8006fea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	6932      	ldr	r2, [r6, #16]
 8006ff2:	3a01      	subs	r2, #1
 8006ff4:	0612      	lsls	r2, r2, #24
 8006ff6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ffe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007000:	6972      	ldr	r2, [r6, #20]
 8007002:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007006:	4313      	orrs	r3, r2
 8007008:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800700a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800700c:	69b2      	ldr	r2, [r6, #24]
 800700e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007012:	4313      	orrs	r3, r2
 8007014:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007016:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800701c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800701e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007020:	69f2      	ldr	r2, [r6, #28]
 8007022:	f36f 03cf 	bfc	r3, #3, #13
 8007026:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800702a:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800702c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800702e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007032:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007034:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007036:	b1df      	cbz	r7, 8007070 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007038:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800703a:	bf0c      	ite	eq
 800703c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007040:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8007044:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007046:	4c0c      	ldr	r4, [pc, #48]	@ (8007078 <RCCEx_PLL3_Config.part.0+0xdc>)
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800704e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007050:	f7fc fa32 	bl	80034b8 <HAL_GetTick>
 8007054:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007056:	e004      	b.n	8007062 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007058:	f7fc fa2e 	bl	80034b8 <HAL_GetTick>
 800705c:	1b40      	subs	r0, r0, r5
 800705e:	2802      	cmp	r0, #2
 8007060:	d804      	bhi.n	800706c <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	d5f7      	bpl.n	8007058 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8007068:	2000      	movs	r0, #0
}
 800706a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800706c:	2003      	movs	r0, #3
}
 800706e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007070:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007074:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007076:	e7e6      	b.n	8007046 <RCCEx_PLL3_Config.part.0+0xaa>
 8007078:	58024400 	.word	0x58024400

0800707c <HAL_RCCEx_PeriphCLKConfig>:
{
 800707c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007080:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8007084:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007086:	011d      	lsls	r5, r3, #4
 8007088:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 800708c:	d524      	bpl.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800708e:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8007090:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8007094:	f000 85df 	beq.w	8007c56 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8007098:	f200 86a8 	bhi.w	8007dec <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800709c:	2900      	cmp	r1, #0
 800709e:	f000 85f6 	beq.w	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xc12>
 80070a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80070a6:	f040 86a5 	bne.w	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070aa:	49a9      	ldr	r1, [pc, #676]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80070ac:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80070ae:	f001 0103 	and.w	r1, r1, #3
 80070b2:	2903      	cmp	r1, #3
 80070b4:	f000 869e 	beq.w	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80070b8:	2102      	movs	r1, #2
 80070ba:	3008      	adds	r0, #8
 80070bc:	f7ff fefe 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 80070c0:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070c2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80070c6:	b93e      	cbnz	r6, 80070d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80070c8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80070ca:	4da1      	ldr	r5, [pc, #644]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070cc:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80070ce:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80070d0:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 80070d4:	4301      	orrs	r1, r0
 80070d6:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070d8:	05d8      	lsls	r0, r3, #23
 80070da:	d50a      	bpl.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 80070dc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80070de:	2904      	cmp	r1, #4
 80070e0:	d806      	bhi.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80070e2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80070e6:	03ff      	.short	0x03ff
 80070e8:	0582056d 	.word	0x0582056d
 80070ec:	04040404 	.word	0x04040404
      status = ret;
 80070f0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80070f2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80070f4:	0599      	lsls	r1, r3, #22
 80070f6:	d524      	bpl.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 80070f8:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80070fa:	2980      	cmp	r1, #128	@ 0x80
 80070fc:	f000 854b 	beq.w	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007100:	f200 8687 	bhi.w	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8007104:	2900      	cmp	r1, #0
 8007106:	f000 85bb 	beq.w	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 800710a:	2940      	cmp	r1, #64	@ 0x40
 800710c:	f040 8688 	bne.w	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007110:	498f      	ldr	r1, [pc, #572]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007112:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007114:	f001 0103 	and.w	r1, r1, #3
 8007118:	2903      	cmp	r1, #3
 800711a:	f000 8681 	beq.w	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 800711e:	2100      	movs	r1, #0
 8007120:	f104 0008 	add.w	r0, r4, #8
 8007124:	f7ff feca 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 8007128:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800712a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800712e:	2d00      	cmp	r5, #0
 8007130:	f040 8543 	bne.w	8007bba <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007134:	4f86      	ldr	r7, [pc, #536]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007136:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8007138:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800713a:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 800713e:	4301      	orrs	r1, r0
 8007140:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007142:	055f      	lsls	r7, r3, #21
 8007144:	d528      	bpl.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007146:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800714a:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800714e:	f000 855c 	beq.w	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007152:	f200 8652 	bhi.w	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 8007156:	2900      	cmp	r1, #0
 8007158:	f000 858b 	beq.w	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800715c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8007160:	f040 8653 	bne.w	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007164:	497a      	ldr	r1, [pc, #488]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007166:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007168:	f001 0103 	and.w	r1, r1, #3
 800716c:	2903      	cmp	r1, #3
 800716e:	f000 864c 	beq.w	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007172:	2100      	movs	r1, #0
 8007174:	f104 0008 	add.w	r0, r4, #8
 8007178:	f7ff fea0 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 800717c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800717e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007182:	2d00      	cmp	r5, #0
 8007184:	f040 8553 	bne.w	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007188:	4f71      	ldr	r7, [pc, #452]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800718a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800718e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007190:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8007194:	4301      	orrs	r1, r0
 8007196:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007198:	0518      	lsls	r0, r3, #20
 800719a:	d528      	bpl.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 800719c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80071a0:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 80071a4:	f000 8546 	beq.w	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 80071a8:	f200 8614 	bhi.w	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 80071ac:	2900      	cmp	r1, #0
 80071ae:	f000 84d6 	beq.w	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xae2>
 80071b2:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80071b6:	f040 8615 	bne.w	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071ba:	4965      	ldr	r1, [pc, #404]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071bc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80071be:	f001 0103 	and.w	r1, r1, #3
 80071c2:	2903      	cmp	r1, #3
 80071c4:	f000 860e 	beq.w	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 80071c8:	2100      	movs	r1, #0
 80071ca:	f104 0008 	add.w	r0, r4, #8
 80071ce:	f7ff fe75 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 80071d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071d4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80071d8:	2d00      	cmp	r5, #0
 80071da:	f040 84c8 	bne.w	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071de:	4f5c      	ldr	r7, [pc, #368]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071e0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80071e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80071e6:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 80071ea:	4301      	orrs	r1, r0
 80071ec:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80071ee:	0199      	lsls	r1, r3, #6
 80071f0:	d518      	bpl.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 80071f2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80071f4:	2920      	cmp	r1, #32
 80071f6:	f000 8434 	beq.w	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 80071fa:	f200 8615 	bhi.w	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80071fe:	b139      	cbz	r1, 8007210 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8007200:	2910      	cmp	r1, #16
 8007202:	f040 8614 	bne.w	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007206:	4852      	ldr	r0, [pc, #328]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007208:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800720a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800720e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007210:	2d00      	cmp	r5, #0
 8007212:	f040 83bf 	bne.w	8007994 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007216:	4f4e      	ldr	r7, [pc, #312]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007218:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800721a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800721c:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8007220:	4301      	orrs	r1, r0
 8007222:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007224:	04df      	lsls	r7, r3, #19
 8007226:	d526      	bpl.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007228:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800722a:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800722e:	f000 84a1 	beq.w	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 8007232:	f200 85c3 	bhi.w	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd40>
 8007236:	2900      	cmp	r1, #0
 8007238:	f000 8486 	beq.w	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800723c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007240:	f040 85c4 	bne.w	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007244:	4942      	ldr	r1, [pc, #264]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007246:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007248:	f001 0103 	and.w	r1, r1, #3
 800724c:	2903      	cmp	r1, #3
 800724e:	f000 85bd 	beq.w	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8007252:	2100      	movs	r1, #0
 8007254:	f104 0008 	add.w	r0, r4, #8
 8007258:	f7ff fe30 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 800725c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800725e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007262:	2d00      	cmp	r5, #0
 8007264:	f040 8478 	bne.w	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007268:	4f39      	ldr	r7, [pc, #228]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800726a:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800726c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800726e:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8007272:	4301      	orrs	r1, r0
 8007274:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007276:	0498      	lsls	r0, r3, #18
 8007278:	d524      	bpl.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 800727a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800727c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8007280:	f000 8415 	beq.w	8007aae <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8007284:	f200 8556 	bhi.w	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8007288:	b191      	cbz	r1, 80072b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800728a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800728e:	f040 855b 	bne.w	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007292:	492f      	ldr	r1, [pc, #188]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007294:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007296:	f001 0103 	and.w	r1, r1, #3
 800729a:	2903      	cmp	r1, #3
 800729c:	f000 8554 	beq.w	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80072a0:	2101      	movs	r1, #1
 80072a2:	f104 0008 	add.w	r0, r4, #8
 80072a6:	f7ff fe09 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 80072aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80072b0:	2d00      	cmp	r5, #0
 80072b2:	f040 838f 	bne.w	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072b6:	4f26      	ldr	r7, [pc, #152]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072b8:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80072ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072bc:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80072c0:	4301      	orrs	r1, r0
 80072c2:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072c4:	0459      	lsls	r1, r3, #17
 80072c6:	d526      	bpl.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 80072c8:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80072cc:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80072d0:	f000 8426 	beq.w	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80072d4:	f200 854a 	bhi.w	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 80072d8:	b191      	cbz	r1, 8007300 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80072da:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80072de:	f040 854f 	bne.w	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072e2:	491b      	ldr	r1, [pc, #108]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80072e6:	f001 0103 	and.w	r1, r1, #3
 80072ea:	2903      	cmp	r1, #3
 80072ec:	f000 8548 	beq.w	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 80072f0:	2101      	movs	r1, #1
 80072f2:	f104 0008 	add.w	r0, r4, #8
 80072f6:	f7ff fde1 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 80072fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007300:	2d00      	cmp	r5, #0
 8007302:	f040 835b 	bne.w	80079bc <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007306:	4f12      	ldr	r7, [pc, #72]	@ (8007350 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007308:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800730c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800730e:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8007312:	4301      	orrs	r1, r0
 8007314:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007316:	041f      	lsls	r7, r3, #16
 8007318:	d50d      	bpl.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 800731a:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800731c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8007320:	f000 8260 	beq.w	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8007324:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8007328:	f000 8591 	beq.w	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800732c:	2900      	cmp	r1, #0
 800732e:	f000 825e 	beq.w	80077ee <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 8007332:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007334:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007336:	01d8      	lsls	r0, r3, #7
 8007338:	d515      	bpl.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 800733a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800733c:	2903      	cmp	r1, #3
 800733e:	f200 85b4 	bhi.w	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8007342:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007346:	000c      	.short	0x000c
 8007348:	03a10007 	.word	0x03a10007
 800734c:	000c      	.short	0x000c
 800734e:	bf00      	nop
 8007350:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007354:	4836      	ldr	r0, [pc, #216]	@ (8007430 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007356:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007358:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800735c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800735e:	2d00      	cmp	r5, #0
 8007360:	f000 831a 	beq.w	8007998 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 8007364:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007366:	0259      	lsls	r1, r3, #9
 8007368:	f100 827a 	bmi.w	8007860 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800736c:	07df      	lsls	r7, r3, #31
 800736e:	d52f      	bpl.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 8007370:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8007372:	2928      	cmp	r1, #40	@ 0x28
 8007374:	d82a      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007376:	e8df f011 	tbh	[pc, r1, lsl #1]
 800737a:	0257      	.short	0x0257
 800737c:	00290029 	.word	0x00290029
 8007380:	00290029 	.word	0x00290029
 8007384:	00290029 	.word	0x00290029
 8007388:	02480029 	.word	0x02480029
 800738c:	00290029 	.word	0x00290029
 8007390:	00290029 	.word	0x00290029
 8007394:	00290029 	.word	0x00290029
 8007398:	04b90029 	.word	0x04b90029
 800739c:	00290029 	.word	0x00290029
 80073a0:	00290029 	.word	0x00290029
 80073a4:	00290029 	.word	0x00290029
 80073a8:	02570029 	.word	0x02570029
 80073ac:	00290029 	.word	0x00290029
 80073b0:	00290029 	.word	0x00290029
 80073b4:	00290029 	.word	0x00290029
 80073b8:	02570029 	.word	0x02570029
 80073bc:	00290029 	.word	0x00290029
 80073c0:	00290029 	.word	0x00290029
 80073c4:	00290029 	.word	0x00290029
 80073c8:	02570029 	.word	0x02570029
      status = ret;
 80073cc:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80073ce:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073d0:	0798      	lsls	r0, r3, #30
 80073d2:	d51e      	bpl.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80073d4:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80073d6:	2905      	cmp	r1, #5
 80073d8:	f200 8550 	bhi.w	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80073dc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80073e0:	00060015 	.word	0x00060015
 80073e4:	00150471 	.word	0x00150471
 80073e8:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073ec:	4910      	ldr	r1, [pc, #64]	@ (8007430 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80073ee:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80073f0:	f001 0103 	and.w	r1, r1, #3
 80073f4:	2903      	cmp	r1, #3
 80073f6:	f000 8541 	beq.w	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80073fa:	2101      	movs	r1, #1
 80073fc:	f104 0008 	add.w	r0, r4, #8
 8007400:	f7ff fd5c 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 8007404:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007406:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800740a:	2d00      	cmp	r5, #0
 800740c:	f000 82cc 	beq.w	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 8007410:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007412:	0759      	lsls	r1, r3, #29
 8007414:	d521      	bpl.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007416:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800741a:	2905      	cmp	r1, #5
 800741c:	f200 852a 	bhi.w	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8007420:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007424:	00080017 	.word	0x00080017
 8007428:	0017043c 	.word	0x0017043c
 800742c:	00170017 	.word	0x00170017
 8007430:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007434:	49ae      	ldr	r1, [pc, #696]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007436:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007438:	f001 0103 	and.w	r1, r1, #3
 800743c:	2903      	cmp	r1, #3
 800743e:	f000 8519 	beq.w	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8007442:	2101      	movs	r1, #1
 8007444:	f104 0008 	add.w	r0, r4, #8
 8007448:	f7ff fd38 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 800744c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800744e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007452:	2d00      	cmp	r5, #0
 8007454:	f000 82c2 	beq.w	80079dc <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 8007458:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800745a:	069f      	lsls	r7, r3, #26
 800745c:	d526      	bpl.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800745e:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8007462:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8007466:	f000 82c6 	beq.w	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800746a:	f200 8455 	bhi.w	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800746e:	b191      	cbz	r1, 8007496 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007470:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8007474:	f040 845a 	bne.w	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007478:	499d      	ldr	r1, [pc, #628]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800747a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800747c:	f001 0103 	and.w	r1, r1, #3
 8007480:	2903      	cmp	r1, #3
 8007482:	f000 8453 	beq.w	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8007486:	2100      	movs	r1, #0
 8007488:	f104 0008 	add.w	r0, r4, #8
 800748c:	f7ff fd16 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 8007490:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007492:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007496:	2d00      	cmp	r5, #0
 8007498:	f040 828e 	bne.w	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800749c:	4f94      	ldr	r7, [pc, #592]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800749e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 80074a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074a4:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80074a8:	4301      	orrs	r1, r0
 80074aa:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074ac:	0658      	lsls	r0, r3, #25
 80074ae:	d526      	bpl.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80074b0:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80074b4:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80074b8:	f000 82af 	beq.w	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80074bc:	f200 8464 	bhi.w	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80074c0:	b191      	cbz	r1, 80074e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 80074c2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80074c6:	f040 8469 	bne.w	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074ca:	4989      	ldr	r1, [pc, #548]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80074cc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80074ce:	f001 0103 	and.w	r1, r1, #3
 80074d2:	2903      	cmp	r1, #3
 80074d4:	f000 8462 	beq.w	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80074d8:	2100      	movs	r1, #0
 80074da:	f104 0008 	add.w	r0, r4, #8
 80074de:	f7ff fced 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 80074e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074e4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80074e8:	2d00      	cmp	r5, #0
 80074ea:	f040 8269 	bne.w	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074ee:	4f80      	ldr	r7, [pc, #512]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80074f0:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80074f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80074f6:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 80074fa:	4301      	orrs	r1, r0
 80074fc:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074fe:	0619      	lsls	r1, r3, #24
 8007500:	d526      	bpl.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007502:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8007506:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800750a:	f000 8298 	beq.w	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800750e:	f200 841f 	bhi.w	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8007512:	b191      	cbz	r1, 800753a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8007514:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8007518:	f040 8424 	bne.w	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800751c:	4974      	ldr	r1, [pc, #464]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800751e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007520:	f001 0103 	and.w	r1, r1, #3
 8007524:	2903      	cmp	r1, #3
 8007526:	f000 841d 	beq.w	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800752a:	2100      	movs	r1, #0
 800752c:	f104 0008 	add.w	r0, r4, #8
 8007530:	f7ff fcc4 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 8007534:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007536:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800753a:	2d00      	cmp	r5, #0
 800753c:	f040 8244 	bne.w	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007540:	4f6b      	ldr	r7, [pc, #428]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007542:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8007546:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007548:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 800754c:	4301      	orrs	r1, r0
 800754e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007550:	071f      	lsls	r7, r3, #28
 8007552:	d50b      	bpl.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007554:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8007558:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800755c:	f000 81d4 	beq.w	8007908 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007560:	4f63      	ldr	r7, [pc, #396]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007562:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007564:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8007568:	4301      	orrs	r1, r0
 800756a:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800756c:	06d8      	lsls	r0, r3, #27
 800756e:	d50b      	bpl.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007570:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8007574:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8007578:	f000 81db 	beq.w	8007932 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800757c:	4f5c      	ldr	r7, [pc, #368]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800757e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007580:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8007584:	4301      	orrs	r1, r0
 8007586:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007588:	0319      	lsls	r1, r3, #12
 800758a:	d524      	bpl.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 800758c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8007590:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8007594:	f000 82b1 	beq.w	8007afa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007598:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800759c:	d010      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 800759e:	2900      	cmp	r1, #0
 80075a0:	f040 8130 	bne.w	8007804 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075a4:	4852      	ldr	r0, [pc, #328]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80075a6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80075a8:	f000 0003 	and.w	r0, r0, #3
 80075ac:	2803      	cmp	r0, #3
 80075ae:	f000 8129 	beq.w	8007804 <HAL_RCCEx_PeriphCLKConfig+0x788>
 80075b2:	f104 0008 	add.w	r0, r4, #8
 80075b6:	f7ff fc81 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 80075ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075bc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	f040 81ff 	bne.w	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075c6:	4f4a      	ldr	r7, [pc, #296]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80075c8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 80075cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80075ce:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80075d2:	4301      	orrs	r1, r0
 80075d4:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075d6:	035f      	lsls	r7, r3, #13
 80075d8:	d50f      	bpl.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 80075da:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80075de:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80075e2:	f000 8277 	beq.w	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 80075e6:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 80075ea:	f000 812d 	beq.w	8007848 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80075ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80075f2:	f000 8124 	beq.w	800783e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 80075f6:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80075f8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80075fa:	03d8      	lsls	r0, r3, #15
 80075fc:	d520      	bpl.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 80075fe:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007600:	2900      	cmp	r1, #0
 8007602:	f000 81aa 	beq.w	800795a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8007606:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800760a:	f040 80e8 	bne.w	80077de <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800760e:	4938      	ldr	r1, [pc, #224]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007610:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007612:	f001 0103 	and.w	r1, r1, #3
 8007616:	2903      	cmp	r1, #3
 8007618:	f000 80e1 	beq.w	80077de <HAL_RCCEx_PeriphCLKConfig+0x762>
 800761c:	2102      	movs	r1, #2
 800761e:	f104 0008 	add.w	r0, r4, #8
 8007622:	f7ff fc4b 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 8007626:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007628:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800762c:	2d00      	cmp	r5, #0
 800762e:	f040 819c 	bne.w	800796a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007632:	4f2f      	ldr	r7, [pc, #188]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007634:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8007636:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007638:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800763c:	4301      	orrs	r1, r0
 800763e:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007640:	0099      	lsls	r1, r3, #2
 8007642:	d50e      	bpl.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007644:	492a      	ldr	r1, [pc, #168]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007646:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007648:	f001 0103 	and.w	r1, r1, #3
 800764c:	2903      	cmp	r1, #3
 800764e:	d007      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8007650:	2102      	movs	r1, #2
 8007652:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007656:	f7ff fca1 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800765a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800765e:	b100      	cbz	r0, 8007662 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 8007660:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007662:	039f      	lsls	r7, r3, #14
 8007664:	f100 80ab 	bmi.w	80077be <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 8007668:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800766a:	02d8      	lsls	r0, r3, #11
 800766c:	d506      	bpl.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800766e:	4820      	ldr	r0, [pc, #128]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007670:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8007672:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8007674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8007678:	4331      	orrs	r1, r6
 800767a:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800767c:	00d9      	lsls	r1, r3, #3
 800767e:	d507      	bpl.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007680:	481b      	ldr	r0, [pc, #108]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007682:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8007686:	6901      	ldr	r1, [r0, #16]
 8007688:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800768c:	4331      	orrs	r1, r6
 800768e:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007690:	029f      	lsls	r7, r3, #10
 8007692:	d506      	bpl.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007694:	4816      	ldr	r0, [pc, #88]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007696:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8007698:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800769a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800769e:	4331      	orrs	r1, r6
 80076a0:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076a2:	005e      	lsls	r6, r3, #1
 80076a4:	d509      	bpl.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076a6:	4912      	ldr	r1, [pc, #72]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80076a8:	6908      	ldr	r0, [r1, #16]
 80076aa:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80076ae:	6108      	str	r0, [r1, #16]
 80076b0:	6908      	ldr	r0, [r1, #16]
 80076b2:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 80076b6:	4330      	orrs	r0, r6
 80076b8:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	da06      	bge.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80076be:	480c      	ldr	r0, [pc, #48]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80076c0:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80076c2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80076c4:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80076c8:	4331      	orrs	r1, r6
 80076ca:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076cc:	0218      	lsls	r0, r3, #8
 80076ce:	d507      	bpl.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076d0:	4907      	ldr	r1, [pc, #28]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80076d2:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 80076d6:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80076d8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80076dc:	4303      	orrs	r3, r0
 80076de:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80076e0:	07d1      	lsls	r1, r2, #31
 80076e2:	d511      	bpl.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076e4:	4b02      	ldr	r3, [pc, #8]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80076e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	e001      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80076f0:	58024400 	.word	0x58024400
 80076f4:	f000 835c 	beq.w	8007db0 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 80076f8:	2100      	movs	r1, #0
 80076fa:	f104 0008 	add.w	r0, r4, #8
 80076fe:	f7ff fbdd 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007702:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007704:	b100      	cbz	r0, 8007708 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007706:	4605      	mov	r5, r0
 8007708:	0793      	lsls	r3, r2, #30
 800770a:	d50e      	bpl.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800770c:	4baf      	ldr	r3, [pc, #700]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800770e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007710:	f003 0303 	and.w	r3, r3, #3
 8007714:	2b03      	cmp	r3, #3
 8007716:	f000 834d 	beq.w	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 800771a:	2101      	movs	r1, #1
 800771c:	f104 0008 	add.w	r0, r4, #8
 8007720:	f7ff fbcc 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007724:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007726:	b100      	cbz	r0, 800772a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007728:	4605      	mov	r5, r0
 800772a:	0757      	lsls	r7, r2, #29
 800772c:	d50e      	bpl.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800772e:	4ba7      	ldr	r3, [pc, #668]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	2b03      	cmp	r3, #3
 8007738:	f000 833e 	beq.w	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800773c:	2102      	movs	r1, #2
 800773e:	f104 0008 	add.w	r0, r4, #8
 8007742:	f7ff fbbb 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007746:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007748:	b100      	cbz	r0, 800774c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800774a:	4605      	mov	r5, r0
 800774c:	0716      	lsls	r6, r2, #28
 800774e:	d50e      	bpl.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007750:	4b9e      	ldr	r3, [pc, #632]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	2b03      	cmp	r3, #3
 800775a:	f000 8323 	beq.w	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd28>
 800775e:	2100      	movs	r1, #0
 8007760:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007764:	f7ff fc1a 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007768:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800776a:	b100      	cbz	r0, 800776e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800776c:	4605      	mov	r5, r0
 800776e:	06d0      	lsls	r0, r2, #27
 8007770:	d50f      	bpl.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007772:	4b96      	ldr	r3, [pc, #600]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	2b03      	cmp	r3, #3
 800777c:	f000 8314 	beq.w	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 8007780:	2101      	movs	r1, #1
 8007782:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007786:	f7ff fc09 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800778a:	2800      	cmp	r0, #0
 800778c:	f040 8359 	bne.w	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007790:	6862      	ldr	r2, [r4, #4]
 8007792:	0693      	lsls	r3, r2, #26
 8007794:	d50e      	bpl.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007796:	4b8d      	ldr	r3, [pc, #564]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	2b03      	cmp	r3, #3
 80077a0:	f000 82b7 	beq.w	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80077a4:	2102      	movs	r1, #2
 80077a6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80077aa:	f7ff fbf7 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80077ae:	2800      	cmp	r0, #0
 80077b0:	f040 82af 	bne.w	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 80077b4:	1e28      	subs	r0, r5, #0
 80077b6:	bf18      	it	ne
 80077b8:	2001      	movne	r0, #1
}
 80077ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 80077be:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80077c2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80077c6:	f000 80d2 	beq.w	800796e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80077ca:	f240 8110 	bls.w	80079ee <HAL_RCCEx_PeriphCLKConfig+0x972>
 80077ce:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 80077d2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80077d6:	f000 80cf 	beq.w	8007978 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80077da:	2501      	movs	r5, #1
 80077dc:	e745      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 80077de:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80077e0:	4635      	mov	r5, r6
 80077e2:	e72d      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077e4:	4879      	ldr	r0, [pc, #484]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80077e6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80077e8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80077ec:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	f040 80ce 	bne.w	8007990 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80077f4:	4f75      	ldr	r7, [pc, #468]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80077f6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80077f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077fa:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80077fe:	4301      	orrs	r1, r0
 8007800:	6539      	str	r1, [r7, #80]	@ 0x50
 8007802:	e598      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8007804:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007806:	4635      	mov	r5, r6
 8007808:	e6e5      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800780a:	4970      	ldr	r1, [pc, #448]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800780c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800780e:	f001 0103 	and.w	r1, r1, #3
 8007812:	2903      	cmp	r1, #3
 8007814:	f43f adda 	beq.w	80073cc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007818:	2101      	movs	r1, #1
 800781a:	f104 0008 	add.w	r0, r4, #8
 800781e:	f7ff fb4d 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 8007822:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007824:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007828:	2d00      	cmp	r5, #0
 800782a:	f040 80d5 	bne.w	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800782e:	4f67      	ldr	r7, [pc, #412]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007830:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8007832:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007834:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8007838:	4301      	orrs	r1, r0
 800783a:	6579      	str	r1, [r7, #84]	@ 0x54
 800783c:	e5c8      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800783e:	4863      	ldr	r0, [pc, #396]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007840:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007842:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007846:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007848:	2d00      	cmp	r5, #0
 800784a:	f040 809f 	bne.w	800798c <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800784e:	4f5f      	ldr	r7, [pc, #380]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007850:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8007854:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007856:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800785a:	4301      	orrs	r1, r0
 800785c:	6579      	str	r1, [r7, #84]	@ 0x54
 800785e:	e6cc      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007860:	4f5b      	ldr	r7, [pc, #364]	@ (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007868:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800786a:	f7fb fe25 	bl	80034b8 <HAL_GetTick>
 800786e:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007870:	e006      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007872:	f7fb fe21 	bl	80034b8 <HAL_GetTick>
 8007876:	eba0 0008 	sub.w	r0, r0, r8
 800787a:	2864      	cmp	r0, #100	@ 0x64
 800787c:	f200 82db 	bhi.w	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	05da      	lsls	r2, r3, #23
 8007884:	d5f5      	bpl.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 8007886:	2d00      	cmp	r5, #0
 8007888:	f040 82d6 	bne.w	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800788c:	4a4f      	ldr	r2, [pc, #316]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800788e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8007892:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8007894:	4059      	eors	r1, r3
 8007896:	f411 7f40 	tst.w	r1, #768	@ 0x300
 800789a:	d00b      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800789c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800789e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078a0:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80078a4:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80078a8:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078aa:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80078ac:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80078b0:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80078b2:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80078b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078b8:	f000 82fb 	beq.w	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078bc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80078c0:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80078c4:	f000 8309 	beq.w	8007eda <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 80078c8:	4940      	ldr	r1, [pc, #256]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80078ca:	690a      	ldr	r2, [r1, #16]
 80078cc:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80078d0:	610a      	str	r2, [r1, #16]
 80078d2:	483e      	ldr	r0, [pc, #248]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80078d4:	f3c3 010b 	ubfx	r1, r3, #0, #12
 80078d8:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 80078da:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80078dc:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078e0:	6701      	str	r1, [r0, #112]	@ 0x70
 80078e2:	e543      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078e4:	4839      	ldr	r0, [pc, #228]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80078e6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80078e8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80078ec:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 80078ee:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	f040 8177 	bne.w	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078f6:	4f35      	ldr	r7, [pc, #212]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80078f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80078fc:	f021 0107 	bic.w	r1, r1, #7
 8007900:	4301      	orrs	r1, r0
 8007902:	6539      	str	r1, [r7, #80]	@ 0x50
 8007904:	f7ff bbf6 	b.w	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007908:	4930      	ldr	r1, [pc, #192]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800790a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800790c:	f001 0103 	and.w	r1, r1, #3
 8007910:	2903      	cmp	r1, #3
 8007912:	f000 82ba 	beq.w	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 8007916:	2102      	movs	r1, #2
 8007918:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800791c:	f7ff fb3e 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007920:	2800      	cmp	r0, #0
 8007922:	f000 82b5 	beq.w	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007926:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 800792a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800792c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007930:	e616      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007932:	4926      	ldr	r1, [pc, #152]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007934:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007936:	f001 0103 	and.w	r1, r1, #3
 800793a:	2903      	cmp	r1, #3
 800793c:	f000 82a2 	beq.w	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8007940:	2102      	movs	r1, #2
 8007942:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007946:	f7ff fb29 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800794a:	2800      	cmp	r0, #0
 800794c:	f040 82a6 	bne.w	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007950:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007954:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007958:	e610      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800795a:	481c      	ldr	r0, [pc, #112]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800795c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800795e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007962:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007964:	2d00      	cmp	r5, #0
 8007966:	f43f ae64 	beq.w	8007632 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 800796a:	462e      	mov	r6, r5
 800796c:	e668      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800796e:	4f17      	ldr	r7, [pc, #92]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007970:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007972:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8007976:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007978:	2d00      	cmp	r5, #0
 800797a:	f47f ae76 	bne.w	800766a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800797e:	4d13      	ldr	r5, [pc, #76]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007980:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8007982:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8007986:	4301      	orrs	r1, r0
 8007988:	6569      	str	r1, [r5, #84]	@ 0x54
 800798a:	e66d      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 800798c:	462e      	mov	r6, r5
 800798e:	e634      	b.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 8007990:	462e      	mov	r6, r5
 8007992:	e4d0      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8007994:	462e      	mov	r6, r5
 8007996:	e445      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007998:	4f0c      	ldr	r7, [pc, #48]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800799a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800799c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800799e:	f021 0103 	bic.w	r1, r1, #3
 80079a2:	4301      	orrs	r1, r0
 80079a4:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80079a6:	e4de      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80079a8:	4f08      	ldr	r7, [pc, #32]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80079aa:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80079ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079ae:	f021 0107 	bic.w	r1, r1, #7
 80079b2:	4301      	orrs	r1, r0
 80079b4:	6579      	str	r1, [r7, #84]	@ 0x54
 80079b6:	e52c      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 80079b8:	462e      	mov	r6, r5
 80079ba:	e577      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 80079bc:	462e      	mov	r6, r5
 80079be:	e4aa      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 80079c0:	462e      	mov	r6, r5
 80079c2:	e59c      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 80079c4:	462e      	mov	r6, r5
 80079c6:	e606      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 80079c8:	462e      	mov	r6, r5
 80079ca:	e5c1      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80079cc:	58024400 	.word	0x58024400
 80079d0:	58024800 	.word	0x58024800
      status = ret;
 80079d4:	462e      	mov	r6, r5
 80079d6:	e475      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 80079d8:	462e      	mov	r6, r5
 80079da:	e4f9      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079dc:	4fc2      	ldr	r7, [pc, #776]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80079de:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80079e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80079e4:	f021 0107 	bic.w	r1, r1, #7
 80079e8:	4301      	orrs	r1, r0
 80079ea:	65b9      	str	r1, [r7, #88]	@ 0x58
 80079ec:	e535      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 80079ee:	2900      	cmp	r1, #0
 80079f0:	f47f aef3 	bne.w	80077da <HAL_RCCEx_PeriphCLKConfig+0x75e>
 80079f4:	e7c0      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079f6:	49bc      	ldr	r1, [pc, #752]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80079f8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80079fa:	f001 0103 	and.w	r1, r1, #3
 80079fe:	2903      	cmp	r1, #3
 8007a00:	f000 8194 	beq.w	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8007a04:	2102      	movs	r1, #2
 8007a06:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007a0a:	f7ff fac7 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007a0e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a10:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007a14:	2d00      	cmp	r5, #0
 8007a16:	d1cf      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8007a18:	e540      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a1a:	49b3      	ldr	r1, [pc, #716]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007a1c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007a1e:	f001 0103 	and.w	r1, r1, #3
 8007a22:	2903      	cmp	r1, #3
 8007a24:	f000 81ba 	beq.w	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007a28:	2102      	movs	r1, #2
 8007a2a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007a2e:	f7ff fab5 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007a32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a34:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	d1c1      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8007a3c:	e557      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a3e:	49aa      	ldr	r1, [pc, #680]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007a40:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007a42:	f001 0103 	and.w	r1, r1, #3
 8007a46:	2903      	cmp	r1, #3
 8007a48:	f000 818c 	beq.w	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007a4c:	2102      	movs	r1, #2
 8007a4e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007a52:	f7ff faa3 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007a56:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a58:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	d1b3      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8007a60:	e56e      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a62:	49a1      	ldr	r1, [pc, #644]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007a64:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007a66:	f001 0103 	and.w	r1, r1, #3
 8007a6a:	2903      	cmp	r1, #3
 8007a6c:	f000 81df 	beq.w	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 8007a70:	2102      	movs	r1, #2
 8007a72:	f104 0008 	add.w	r0, r4, #8
 8007a76:	f7ff fa21 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 8007a7a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a7c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007a80:	2d00      	cmp	r5, #0
 8007a82:	d187      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8007a84:	f7ff bbc7 	b.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a88:	4997      	ldr	r1, [pc, #604]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007a8a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007a8c:	f001 0103 	and.w	r1, r1, #3
 8007a90:	2903      	cmp	r1, #3
 8007a92:	f000 820a 	beq.w	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8007a96:	2102      	movs	r1, #2
 8007a98:	f104 0008 	add.w	r0, r4, #8
 8007a9c:	f7ff fa0e 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 8007aa0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007aa2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	f47f ac5c 	bne.w	8007364 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007aac:	e774      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aae:	498e      	ldr	r1, [pc, #568]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007ab0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007ab2:	f001 0103 	and.w	r1, r1, #3
 8007ab6:	2903      	cmp	r1, #3
 8007ab8:	f000 8146 	beq.w	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8007abc:	2101      	movs	r1, #1
 8007abe:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007ac2:	f7ff fa6b 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007ac6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ac8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007acc:	2d00      	cmp	r5, #0
 8007ace:	d181      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8007ad0:	f7ff bbf1 	b.w	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ad4:	4984      	ldr	r1, [pc, #528]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007ad6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007ad8:	f001 0103 	and.w	r1, r1, #3
 8007adc:	2903      	cmp	r1, #3
 8007ade:	f43f ad8a 	beq.w	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007ae8:	f7ff fa58 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007aec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007aee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007af2:	2d00      	cmp	r5, #0
 8007af4:	f47f af4a 	bne.w	800798c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007af8:	e6a9      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007afa:	497b      	ldr	r1, [pc, #492]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007afc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007afe:	f001 0103 	and.w	r1, r1, #3
 8007b02:	2903      	cmp	r1, #3
 8007b04:	f43f ae7e 	beq.w	8007804 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8007b08:	2102      	movs	r1, #2
 8007b0a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007b0e:	f7ff fa45 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007b12:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b14:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007b18:	2d00      	cmp	r5, #0
 8007b1a:	f47f af53 	bne.w	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8007b1e:	e552      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b20:	4971      	ldr	r1, [pc, #452]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007b22:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007b24:	f001 0103 	and.w	r1, r1, #3
 8007b28:	2903      	cmp	r1, #3
 8007b2a:	f000 8129 	beq.w	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8007b2e:	2101      	movs	r1, #1
 8007b30:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007b34:	f7ff fa32 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007b38:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b3a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	f47f af3c 	bne.w	80079bc <HAL_RCCEx_PeriphCLKConfig+0x940>
 8007b44:	f7ff bbdf 	b.w	8007306 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b48:	4867      	ldr	r0, [pc, #412]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007b4a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007b4c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007b50:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007b52:	2d00      	cmp	r5, #0
 8007b54:	f43f ab88 	beq.w	8007268 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 8007b58:	462e      	mov	r6, r5
 8007b5a:	f7ff bb8c 	b.w	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b5e:	4862      	ldr	r0, [pc, #392]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007b60:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007b62:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007b66:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	f43f ab38 	beq.w	80071de <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 8007b6e:	462e      	mov	r6, r5
 8007b70:	f7ff bb3d 	b.w	80071ee <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b74:	495c      	ldr	r1, [pc, #368]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007b76:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007b78:	f001 0103 	and.w	r1, r1, #3
 8007b7c:	2903      	cmp	r1, #3
 8007b7e:	f000 8125 	beq.w	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8007b82:	2100      	movs	r1, #0
 8007b84:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007b88:	f7ff fa08 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007b8c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b8e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8007b92:	f7ff bb66 	b.w	8007262 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b96:	4954      	ldr	r1, [pc, #336]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007b98:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007b9a:	f001 0103 	and.w	r1, r1, #3
 8007b9e:	2903      	cmp	r1, #3
 8007ba0:	f000 813e 	beq.w	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007baa:	f7ff f9f7 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007bae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007bb0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007bb4:	2d00      	cmp	r5, #0
 8007bb6:	f43f aabd 	beq.w	8007134 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 8007bba:	462e      	mov	r6, r5
 8007bbc:	f7ff bac1 	b.w	8007142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bc0:	4949      	ldr	r1, [pc, #292]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007bc2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007bc4:	f001 0103 	and.w	r1, r1, #3
 8007bc8:	2903      	cmp	r1, #3
 8007bca:	f43f aa91 	beq.w	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007bce:	2100      	movs	r1, #0
 8007bd0:	f104 0008 	add.w	r0, r4, #8
 8007bd4:	f7ff f972 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 8007bd8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007bda:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007bde:	2d00      	cmp	r5, #0
 8007be0:	f43f ae89 	beq.w	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 8007be4:	462e      	mov	r6, r5
 8007be6:	f7ff ba85 	b.w	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bea:	493f      	ldr	r1, [pc, #252]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007bec:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007bee:	f001 0103 	and.w	r1, r1, #3
 8007bf2:	2903      	cmp	r1, #3
 8007bf4:	f43f aa7c 	beq.w	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007bfe:	f7ff f9cd 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007c02:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c04:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8007c08:	e672      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c0a:	4937      	ldr	r1, [pc, #220]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007c0c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007c0e:	f001 0103 	and.w	r1, r1, #3
 8007c12:	2903      	cmp	r1, #3
 8007c14:	f000 80f9 	beq.w	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007c18:	2100      	movs	r1, #0
 8007c1a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007c1e:	f7ff f9bd 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007c22:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c24:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007c28:	2d00      	cmp	r5, #0
 8007c2a:	f43f aaad 	beq.w	8007188 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 8007c2e:	462e      	mov	r6, r5
 8007c30:	f7ff bab2 	b.w	8007198 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c34:	492c      	ldr	r1, [pc, #176]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007c36:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007c38:	f001 0103 	and.w	r1, r1, #3
 8007c3c:	2903      	cmp	r1, #3
 8007c3e:	f000 80d1 	beq.w	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8007c42:	2100      	movs	r1, #0
 8007c44:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007c48:	f7ff f9a8 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007c4c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c4e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8007c52:	f7ff bac1 	b.w	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c56:	4924      	ldr	r1, [pc, #144]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007c58:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007c5a:	f001 0103 	and.w	r1, r1, #3
 8007c5e:	2903      	cmp	r1, #3
 8007c60:	f000 80c8 	beq.w	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8007c64:	2102      	movs	r1, #2
 8007c66:	3028      	adds	r0, #40	@ 0x28
 8007c68:	f7ff f998 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007c6c:	4606      	mov	r6, r0
        break;
 8007c6e:	f7ff ba28 	b.w	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c72:	481d      	ldr	r0, [pc, #116]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007c74:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007c76:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007c7a:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8007c7c:	f7ff ba81 	b.w	8007182 <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c80:	4819      	ldr	r0, [pc, #100]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007c82:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007c84:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007c88:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8007c8a:	f7ff ba50 	b.w	800712e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c8e:	4d16      	ldr	r5, [pc, #88]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007c90:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8007c92:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8007c96:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007c98:	f7ff ba17 	b.w	80070ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c9c:	4912      	ldr	r1, [pc, #72]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007c9e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007ca0:	f001 0103 	and.w	r1, r1, #3
 8007ca4:	2903      	cmp	r1, #3
 8007ca6:	f000 80e5 	beq.w	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8007caa:	2101      	movs	r1, #1
 8007cac:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007cb0:	f7ff f974 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007cb4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cb6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007cba:	2d00      	cmp	r5, #0
 8007cbc:	f47f abcc 	bne.w	8007458 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8007cc0:	e68c      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cc2:	4909      	ldr	r1, [pc, #36]	@ (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007cc4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007cc6:	f001 0103 	and.w	r1, r1, #3
 8007cca:	2903      	cmp	r1, #3
 8007ccc:	f000 80d6 	beq.w	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007cd6:	f7ff f961 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007cda:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007cdc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	f47f ab95 	bne.w	8007410 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8007ce6:	e65f      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 8007ce8:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cec:	4983      	ldr	r1, [pc, #524]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8007cee:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007cf0:	f001 0103 	and.w	r1, r1, #3
 8007cf4:	2903      	cmp	r1, #3
 8007cf6:	f43f ab69 	beq.w	80073cc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007d00:	f7ff f94c 	bl	8006f9c <RCCEx_PLL3_Config.part.0>
 8007d04:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d06:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007d0a:	2d00      	cmp	r5, #0
 8007d0c:	f47f ae64 	bne.w	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007d10:	e58d      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 8007d12:	2001      	movs	r0, #1
}
 8007d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007d18:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8007d1c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007d20:	f43f abb9 	beq.w	8007496 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007d24:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8007d28:	f43f abb5 	beq.w	8007496 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 8007d2c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007d2e:	4635      	mov	r5, r6
 8007d30:	f7ff bbbc 	b.w	80074ac <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007d34:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8007d38:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8007d3c:	f43f aab8 	beq.w	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007d40:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8007d44:	f43f aab4 	beq.w	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 8007d48:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007d4a:	4635      	mov	r5, r6
 8007d4c:	f7ff baba 	b.w	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007d50:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8007d54:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007d58:	f43f abef 	beq.w	800753a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8007d5c:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8007d60:	f43f abeb 	beq.w	800753a <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 8007d64:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007d66:	4635      	mov	r5, r6
 8007d68:	f7ff bbf2 	b.w	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007d6c:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8007d70:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007d74:	f43f aac4 	beq.w	8007300 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8007d78:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8007d7c:	f43f aac0 	beq.w	8007300 <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 8007d80:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007d82:	4635      	mov	r5, r6
 8007d84:	f7ff bac7 	b.w	8007316 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007d88:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8007d8c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8007d90:	f43f abaa 	beq.w	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8007d94:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8007d98:	f43f aba6 	beq.w	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 8007d9c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007d9e:	4635      	mov	r5, r6
 8007da0:	f7ff bbad 	b.w	80074fe <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 8007da4:	2501      	movs	r5, #1
 8007da6:	e4e2      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007da8:	0691      	lsls	r1, r2, #26
 8007daa:	d5b2      	bpl.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 8007dac:	2501      	movs	r5, #1
 8007dae:	e4f2      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 8007db0:	2501      	movs	r5, #1
 8007db2:	e4a9      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8007db4:	2501      	movs	r5, #1
 8007db6:	e4b8      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8007db8:	2501      	movs	r5, #1
 8007dba:	e4c7      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007dbc:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8007dc0:	f43f aa4f 	beq.w	8007262 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8007dc4:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8007dc8:	f43f aa4b 	beq.w	8007262 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 8007dcc:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007dce:	4635      	mov	r5, r6
 8007dd0:	f7ff ba51 	b.w	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007dd4:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8007dd8:	f43f a9fe 	beq.w	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007ddc:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8007de0:	f43f a9fa 	beq.w	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 8007de4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007de6:	4635      	mov	r5, r6
 8007de8:	f7ff ba01 	b.w	80071ee <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007dec:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8007df0:	f43f a96b 	beq.w	80070ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 8007df4:	2601      	movs	r6, #1
 8007df6:	f7ff b96f 	b.w	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007dfa:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8007dfe:	f43f a9c0 	beq.w	8007182 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007e02:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8007e06:	f43f a9bc 	beq.w	8007182 <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 8007e0a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007e0c:	4635      	mov	r5, r6
 8007e0e:	f7ff b9c3 	b.w	8007198 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 8007e12:	29c0      	cmp	r1, #192	@ 0xc0
 8007e14:	f43f a98b 	beq.w	800712e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8007e18:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007e1c:	f43f a987 	beq.w	800712e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 8007e20:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007e22:	4635      	mov	r5, r6
 8007e24:	f7ff b98d 	b.w	8007142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 8007e28:	2930      	cmp	r1, #48	@ 0x30
 8007e2a:	f43f a9f1 	beq.w	8007210 <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 8007e2e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007e30:	4635      	mov	r5, r6
 8007e32:	f7ff b9f7 	b.w	8007224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 8007e36:	2503      	movs	r5, #3
      status = ret;
 8007e38:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e3a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007e3e:	f7ff ba95 	b.w	800736c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007e42:	6863      	ldr	r3, [r4, #4]
 8007e44:	069a      	lsls	r2, r3, #26
 8007e46:	f57f af64 	bpl.w	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007e4a:	4605      	mov	r5, r0
 8007e4c:	e4a3      	b.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e4e:	492b      	ldr	r1, [pc, #172]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8007e50:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007e52:	f001 0103 	and.w	r1, r1, #3
 8007e56:	2903      	cmp	r1, #3
 8007e58:	f43f aa6b 	beq.w	8007332 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	f104 0008 	add.w	r0, r4, #8
 8007e62:	f7ff f82b 	bl	8006ebc <RCCEx_PLL2_Config.part.0>
 8007e66:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e68:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	f47f ad8f 	bne.w	8007990 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8007e72:	e4bf      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 8007e74:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007e76:	4635      	mov	r5, r6
 8007e78:	f7ff baef 	b.w	800745a <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 8007e7c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007e7e:	4635      	mov	r5, r6
 8007e80:	f7ff bac7 	b.w	8007412 <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 8007e84:	2601      	movs	r6, #1
 8007e86:	f7ff bb79 	b.w	800757c <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 8007e8a:	2601      	movs	r6, #1
 8007e8c:	f7ff bb68 	b.w	8007560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e90:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e94:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007e98:	f7ff bb62 	b.w	8007560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e9c:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 8007ea0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ea2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ea6:	f7ff bb69 	b.w	800757c <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 8007eaa:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007eac:	4635      	mov	r5, r6
 8007eae:	f7ff ba5a 	b.w	8007366 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 8007eb2:	f7fb fb01 	bl	80034b8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eb6:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8007efc <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 8007eba:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ebc:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ec0:	e004      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ec2:	f7fb faf9 	bl	80034b8 <HAL_GetTick>
 8007ec6:	1bc0      	subs	r0, r0, r7
 8007ec8:	4548      	cmp	r0, r9
 8007eca:	d810      	bhi.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ecc:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8007ed0:	079b      	lsls	r3, r3, #30
 8007ed2:	d5f6      	bpl.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ed4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8007ed8:	e4f0      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007eda:	4808      	ldr	r0, [pc, #32]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8007edc:	4a08      	ldr	r2, [pc, #32]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 8007ede:	6901      	ldr	r1, [r0, #16]
 8007ee0:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8007ee4:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	6102      	str	r2, [r0, #16]
 8007eec:	e4f1      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 8007eee:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ef0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ef4:	4635      	mov	r5, r6
 8007ef6:	f7ff ba39 	b.w	800736c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8007efa:	bf00      	nop
 8007efc:	58024400 	.word	0x58024400
 8007f00:	00ffffcf 	.word	0x00ffffcf

08007f04 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8007f04:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f06:	f7fe ff09 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8007f0a:	4b05      	ldr	r3, [pc, #20]	@ (8007f20 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8007f0c:	4a05      	ldr	r2, [pc, #20]	@ (8007f24 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007f14:	5cd3      	ldrb	r3, [r2, r3]
 8007f16:	f003 031f 	and.w	r3, r3, #31
}
 8007f1a:	40d8      	lsrs	r0, r3
 8007f1c:	bd08      	pop	{r3, pc}
 8007f1e:	bf00      	nop
 8007f20:	58024400 	.word	0x58024400
 8007f24:	08070ae4 	.word	0x08070ae4

08007f28 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f28:	4a47      	ldr	r2, [pc, #284]	@ (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8007f2a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f2c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f2e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f30:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8007f32:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f36:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f3a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8007f3c:	d05b      	beq.n	8007ff6 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f3e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f42:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f46:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f4a:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f4e:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8007f52:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f58:	ee06 1a90 	vmov	s13, r1
 8007f5c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8007f60:	d003      	beq.n	8007f6a <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8007f62:	2c02      	cmp	r4, #2
 8007f64:	d06a      	beq.n	800803c <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8007f66:	2c00      	cmp	r4, #0
 8007f68:	d04a      	beq.n	8008000 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f6a:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800804c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8007f6e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007f72:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f78:	ee07 3a90 	vmov	s15, r3
 8007f7c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f84:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f8c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007f90:	4a2d      	ldr	r2, [pc, #180]	@ (8008048 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8007f92:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007f96:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007f98:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007f9c:	ee07 3a10 	vmov	s14, r3
 8007fa0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007fa4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007fa6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007faa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007fae:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007fb2:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007fb6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007fb8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007fbc:	ee07 3a10 	vmov	s14, r3
 8007fc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007fc4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007fc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007fcc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007fd0:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007fd4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007fd6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007fda:	ee06 3a90 	vmov	s13, r3
 8007fde:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007fe2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007fe6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007fea:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007fee:	ee17 3a90 	vmov	r3, s15
 8007ff2:	6083      	str	r3, [r0, #8]
}
 8007ff4:	4770      	bx	lr
 8007ff6:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ff8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007ffc:	6083      	str	r3, [r0, #8]
}
 8007ffe:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008000:	6813      	ldr	r3, [r2, #0]
 8008002:	069b      	lsls	r3, r3, #26
 8008004:	d51d      	bpl.n	8008042 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008006:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008008:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800800c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800800e:	4910      	ldr	r1, [pc, #64]	@ (8008050 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8008010:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008014:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008018:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800801a:	ee06 3a10 	vmov	s12, r3
 800801e:	ee05 1a90 	vmov	s11, r1
 8008022:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008026:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800802a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800802e:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8008032:	ee36 7a26 	vadd.f32	s14, s12, s13
 8008036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800803a:	e7a9      	b.n	8007f90 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800803c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8008054 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8008040:	e795      	b.n	8007f6e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008042:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8008058 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8008046:	e792      	b.n	8007f6e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8008048:	58024400 	.word	0x58024400
 800804c:	4a742400 	.word	0x4a742400
 8008050:	03d09000 	.word	0x03d09000
 8008054:	4bbebc20 	.word	0x4bbebc20
 8008058:	4c742400 	.word	0x4c742400

0800805c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800805c:	4a47      	ldr	r2, [pc, #284]	@ (800817c <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 800805e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008060:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008062:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008064:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8008066:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800806a:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800806e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8008070:	d05b      	beq.n	800812a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008072:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008076:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800807a:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800807e:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008082:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8008086:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800808c:	ee06 1a90 	vmov	s13, r1
 8008090:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8008094:	d003      	beq.n	800809e <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8008096:	2c02      	cmp	r4, #2
 8008098:	d06a      	beq.n	8008170 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 800809a:	2c00      	cmp	r4, #0
 800809c:	d04a      	beq.n	8008134 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800809e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8008180 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80080a2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80080a6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80080a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ac:	ee07 3a90 	vmov	s15, r3
 80080b0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80080b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080b8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80080bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80080c4:	4a2d      	ldr	r2, [pc, #180]	@ (800817c <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 80080c6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80080ca:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80080cc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80080d0:	ee07 3a10 	vmov	s14, r3
 80080d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80080d8:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80080da:	ee37 7a06 	vadd.f32	s14, s14, s12
 80080de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80080e2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80080e6:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80080ea:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80080ec:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80080f0:	ee07 3a10 	vmov	s14, r3
 80080f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80080f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80080fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008100:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008104:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008108:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800810a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800810e:	ee06 3a90 	vmov	s13, r3
 8008112:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008116:	ee76 6a86 	vadd.f32	s13, s13, s12
 800811a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800811e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8008122:	ee17 3a90 	vmov	r3, s15
 8008126:	6083      	str	r3, [r0, #8]
}
 8008128:	4770      	bx	lr
 800812a:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800812c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008130:	6083      	str	r3, [r0, #8]
}
 8008132:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008134:	6813      	ldr	r3, [r2, #0]
 8008136:	069b      	lsls	r3, r3, #26
 8008138:	d51d      	bpl.n	8008176 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800813a:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800813c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008140:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008142:	4910      	ldr	r1, [pc, #64]	@ (8008184 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8008144:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008148:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800814c:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800814e:	ee06 3a10 	vmov	s12, r3
 8008152:	ee05 1a90 	vmov	s11, r1
 8008156:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800815a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800815e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8008162:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8008166:	ee36 7a26 	vadd.f32	s14, s12, s13
 800816a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800816e:	e7a9      	b.n	80080c4 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008170:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8008174:	e795      	b.n	80080a2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008176:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800818c <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 800817a:	e792      	b.n	80080a2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800817c:	58024400 	.word	0x58024400
 8008180:	4a742400 	.word	0x4a742400
 8008184:	03d09000 	.word	0x03d09000
 8008188:	4bbebc20 	.word	0x4bbebc20
 800818c:	4c742400 	.word	0x4c742400

08008190 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008190:	4a47      	ldr	r2, [pc, #284]	@ (80082b0 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8008192:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008194:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008196:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008198:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 800819a:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800819e:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80081a2:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 80081a4:	d05b      	beq.n	800825e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80081a6:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80081aa:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081ae:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081b2:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80081b6:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80081ba:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081c0:	ee06 1a90 	vmov	s13, r1
 80081c4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80081c8:	d04e      	beq.n	8008268 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 80081ca:	2c02      	cmp	r4, #2
 80081cc:	d06d      	beq.n	80082aa <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 80081ce:	2c00      	cmp	r4, #0
 80081d0:	d04d      	beq.n	800826e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081d2:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80082b4 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80081d6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80081da:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80081dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e0:	ee07 3a90 	vmov	s15, r3
 80081e4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80081e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081ec:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80081f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f4:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80081f8:	4a2d      	ldr	r2, [pc, #180]	@ (80082b0 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 80081fa:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80081fe:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008200:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008204:	ee07 3a10 	vmov	s14, r3
 8008208:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800820c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800820e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008212:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008216:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800821a:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800821e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008220:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008224:	ee07 3a10 	vmov	s14, r3
 8008228:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800822c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008230:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008234:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008238:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800823c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800823e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008242:	ee06 3a90 	vmov	s13, r3
 8008246:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800824a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800824e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008252:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8008256:	ee17 3a90 	vmov	r3, s15
 800825a:	6083      	str	r3, [r0, #8]
}
 800825c:	4770      	bx	lr
 800825e:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008260:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008264:	6083      	str	r3, [r0, #8]
}
 8008266:	4770      	bx	lr
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008268:	eddf 7a13 	vldr	s15, [pc, #76]	@ 80082b8 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 800826c:	e7b3      	b.n	80081d6 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800826e:	6813      	ldr	r3, [r2, #0]
 8008270:	069b      	lsls	r3, r3, #26
 8008272:	d5ae      	bpl.n	80081d2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008274:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008276:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800827a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800827c:	490f      	ldr	r1, [pc, #60]	@ (80082bc <HAL_RCCEx_GetPLL1ClockFreq+0x12c>)
 800827e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008282:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008286:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008288:	ee06 3a10 	vmov	s12, r3
 800828c:	ee05 1a90 	vmov	s11, r1
 8008290:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008294:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008298:	ee36 6a27 	vadd.f32	s12, s12, s15
 800829c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80082a0:	ee36 7a26 	vadd.f32	s14, s12, s13
 80082a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082a8:	e7a6      	b.n	80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082aa:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80082c0 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 80082ae:	e792      	b.n	80081d6 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 80082b0:	58024400 	.word	0x58024400
 80082b4:	4c742400 	.word	0x4c742400
 80082b8:	4a742400 	.word	0x4a742400
 80082bc:	03d09000 	.word	0x03d09000
 80082c0:	4bbebc20 	.word	0x4bbebc20

080082c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80082c4:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80082c8:	430b      	orrs	r3, r1
{
 80082ca:	b500      	push	{lr}
 80082cc:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80082ce:	d04c      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80082d0:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 80082d4:	430b      	orrs	r3, r1
 80082d6:	d036      	beq.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80082d8:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80082dc:	430b      	orrs	r3, r1
 80082de:	d06c      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80082e0:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 80082e4:	430b      	orrs	r3, r1
 80082e6:	d04b      	beq.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80082e8:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 80082ec:	430b      	orrs	r3, r1
 80082ee:	f000 80b6 	beq.w	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80082f2:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 80082f6:	430b      	orrs	r3, r1
 80082f8:	f000 80ec 	beq.w	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80082fc:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8008300:	430b      	orrs	r3, r1
 8008302:	d069      	beq.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008304:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8008308:	430b      	orrs	r3, r1
 800830a:	f000 80d6 	beq.w	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800830e:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8008312:	430b      	orrs	r3, r1
 8008314:	f000 8109 	beq.w	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008318:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 800831c:	4308      	orrs	r0, r1
 800831e:	d120      	bne.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008320:	4a95      	ldr	r2, [pc, #596]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008322:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008324:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8008328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800832c:	f000 80aa 	beq.w	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8008330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008334:	f000 8116 	beq.w	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8008338:	b99b      	cbnz	r3, 8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800833a:	6810      	ldr	r0, [r2, #0]
 800833c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8008340:	d047      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8008342:	488e      	ldr	r0, [pc, #568]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
  return frequency;
 8008344:	e045      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008346:	4a8c      	ldr	r2, [pc, #560]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008348:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800834a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 800834e:	2b80      	cmp	r3, #128	@ 0x80
 8008350:	f000 8093 	beq.w	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8008354:	f240 808b 	bls.w	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008358:	2bc0      	cmp	r3, #192	@ 0xc0
 800835a:	d039      	beq.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800835c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008360:	d05c      	beq.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
          frequency = 0;
 8008362:	2000      	movs	r0, #0
}
 8008364:	b005      	add	sp, #20
 8008366:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800836a:	4b83      	ldr	r3, [pc, #524]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800836c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800836e:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8008372:	2b04      	cmp	r3, #4
 8008374:	d8f5      	bhi.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8008376:	e8df f003 	tbb	[pc, r3]
 800837a:	3c68      	.short	0x3c68
 800837c:	2b46      	.short	0x2b46
 800837e:	50          	.byte	0x50
 800837f:	00          	.byte	0x00
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008380:	4a7d      	ldr	r2, [pc, #500]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008382:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8008384:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 8008388:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800838c:	d075      	beq.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800838e:	d96e      	bls.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008390:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008394:	d01c      	beq.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008396:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800839a:	d1e2      	bne.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800839c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800839e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083a4:	0752      	lsls	r2, r2, #29
 80083a6:	d541      	bpl.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d13f      	bne.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083ac:	4b72      	ldr	r3, [pc, #456]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083ae:	4874      	ldr	r0, [pc, #464]	@ (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80083b6:	40d8      	lsrs	r0, r3
 80083b8:	e00b      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80083ba:	4a6f      	ldr	r2, [pc, #444]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083bc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80083be:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 80083c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083c6:	d058      	beq.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80083c8:	d951      	bls.n	800846e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80083ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80083ce:	d15e      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 80083d0:	486c      	ldr	r0, [pc, #432]	@ (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 80083d2:	b005      	add	sp, #20
 80083d4:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80083d8:	4a67      	ldr	r2, [pc, #412]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083da:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80083dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 80083e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e4:	f000 80df 	beq.w	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 80083e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ec:	d0d6      	beq.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1b7      	bne.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083f2:	4b61      	ldr	r3, [pc, #388]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80083fa:	d0ea      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083fc:	a801      	add	r0, sp, #4
 80083fe:	f7ff fd93 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008402:	9801      	ldr	r0, [sp, #4]
 8008404:	e7e5      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008406:	4b5c      	ldr	r3, [pc, #368]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800840e:	d0e0      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008410:	a801      	add	r0, sp, #4
 8008412:	f7ff fe23 	bl	800805c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008416:	9801      	ldr	r0, [sp, #4]
 8008418:	e7db      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800841a:	4a57      	ldr	r2, [pc, #348]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800841c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800841e:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008420:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008424:	0749      	lsls	r1, r1, #29
 8008426:	d501      	bpl.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d038      	beq.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800842c:	4a52      	ldr	r2, [pc, #328]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	05d0      	lsls	r0, r2, #23
 8008432:	d502      	bpl.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008438:	d067      	beq.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800843a:	4a4f      	ldr	r2, [pc, #316]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800843c:	6812      	ldr	r2, [r2, #0]
 800843e:	0391      	lsls	r1, r2, #14
 8008440:	d58f      	bpl.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8008442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008446:	d18c      	bne.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8008448:	e77b      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800844a:	4b4b      	ldr	r3, [pc, #300]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8008452:	d0be      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008454:	a801      	add	r0, sp, #4
 8008456:	f7ff fe9b 	bl	8008190 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800845a:	9802      	ldr	r0, [sp, #8]
 800845c:	e7b9      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800845e:	4a46      	ldr	r2, [pc, #280]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008460:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008462:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8008466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800846a:	d006      	beq.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800846c:	d81d      	bhi.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800846e:	b14b      	cbz	r3, 8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008470:	6810      	ldr	r0, [r2, #0]
 8008472:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008476:	d0ac      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008478:	e7c0      	b.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800847a:	6810      	ldr	r0, [r2, #0]
 800847c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008480:	d0a7      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008482:	e7c5      	b.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008484:	6810      	ldr	r0, [r2, #0]
 8008486:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800848a:	d0a2      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800848c:	e7e2      	b.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
    switch (saiclocksource)
 800848e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008492:	d0c3      	beq.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8008494:	e765      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008496:	6810      	ldr	r0, [r2, #0]
 8008498:	f010 0004 	ands.w	r0, r0, #4
 800849c:	d099      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	4837      	ldr	r0, [pc, #220]	@ (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80084a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80084a6:	40d8      	lsrs	r0, r3
 80084a8:	e793      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80084aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084ae:	d08f      	beq.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80084b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084b4:	f43f af72 	beq.w	800839c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80084b8:	e753      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80084ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 80084be:	03d2      	lsls	r2, r2, #15
 80084c0:	d5c4      	bpl.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80084c8:	d083      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ca:	a801      	add	r0, sp, #4
 80084cc:	f7ff fd2c 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80084d0:	9803      	ldr	r0, [sp, #12]
 80084d2:	e77e      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80084d4:	4a28      	ldr	r2, [pc, #160]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80084d6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80084d8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 80084dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084e0:	d0d9      	beq.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 80084e2:	d814      	bhi.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 80084e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084e8:	d03c      	beq.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80084ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084ee:	d04f      	beq.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f47f af36 	bne.w	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
}
 80084f6:	b005      	add	sp, #20
 80084f8:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80084fc:	f7fe bc4e 	b.w	8006d9c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008500:	6810      	ldr	r0, [r2, #0]
 8008502:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8008506:	f43f af64 	beq.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 800850a:	481f      	ldr	r0, [pc, #124]	@ (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800850c:	e761      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800850e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008512:	d0f5      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8008514:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008518:	f47f af23 	bne.w	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800851c:	4b16      	ldr	r3, [pc, #88]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8008524:	f43f af55 	beq.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008528:	e70b      	b.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800852a:	4b13      	ldr	r3, [pc, #76]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800852c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800852e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8008532:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008536:	d04e      	beq.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8008538:	d83f      	bhi.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800853a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800853e:	d043      	beq.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008544:	d024      	beq.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8008546:	2b00      	cmp	r3, #0
 8008548:	f47f af0b 	bne.w	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800854c:	f7fe fbe6 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8008550:	4b09      	ldr	r3, [pc, #36]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008552:	4a0e      	ldr	r2, [pc, #56]	@ (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800855a:	5cd3      	ldrb	r3, [r2, r3]
 800855c:	f003 031f 	and.w	r3, r3, #31
 8008560:	40d8      	lsrs	r0, r3
        break;
 8008562:	e736      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008564:	6810      	ldr	r0, [r2, #0]
 8008566:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800856a:	f43f af32 	beq.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800856e:	a801      	add	r0, sp, #4
 8008570:	f7ff fcda 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008574:	9802      	ldr	r0, [sp, #8]
 8008576:	e72c      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008578:	58024400 	.word	0x58024400
 800857c:	017d7840 	.word	0x017d7840
 8008580:	03d09000 	.word	0x03d09000
 8008584:	00bb8000 	.word	0x00bb8000
 8008588:	003d0900 	.word	0x003d0900
 800858c:	08070ae4 	.word	0x08070ae4
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008590:	4b1a      	ldr	r3, [pc, #104]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8008592:	6818      	ldr	r0, [r3, #0]
 8008594:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008598:	f43f af1b 	beq.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800859c:	a801      	add	r0, sp, #4
 800859e:	f7ff fd5d 	bl	800805c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085a2:	9802      	ldr	r0, [sp, #8]
 80085a4:	e715      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085a6:	6810      	ldr	r0, [r2, #0]
 80085a8:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80085ac:	f43f af11 	beq.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085b0:	a801      	add	r0, sp, #4
 80085b2:	f7ff fd53 	bl	800805c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80085b6:	9803      	ldr	r0, [sp, #12]
 80085b8:	e70b      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80085ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085be:	d016      	beq.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80085c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085c4:	d0aa      	beq.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80085c6:	e6cc      	b.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085c8:	4b0c      	ldr	r3, [pc, #48]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80085d0:	f43f aeff 	beq.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80085d4:	e7cb      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085d6:	4b09      	ldr	r3, [pc, #36]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	f010 0004 	ands.w	r0, r0, #4
 80085de:	f43f aef8 	beq.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4806      	ldr	r0, [pc, #24]	@ (8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80085e6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80085ea:	40d8      	lsrs	r0, r3
 80085ec:	e6f1      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80085ee:	4b03      	ldr	r3, [pc, #12]	@ (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 80085f6:	f43f aeec 	beq.w	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80085fa:	e786      	b.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 80085fc:	58024400 	.word	0x58024400
 8008600:	03d09000 	.word	0x03d09000

08008604 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008604:	b318      	cbz	r0, 800864e <HAL_SDRAM_Init+0x4a>
{
 8008606:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008608:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800860c:	4604      	mov	r4, r0
 800860e:	460d      	mov	r5, r1
 8008610:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008614:	b1b3      	cbz	r3, 8008644 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008616:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008618:	2302      	movs	r3, #2
 800861a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800861e:	f851 0b04 	ldr.w	r0, [r1], #4
 8008622:	f001 fbaf 	bl	8009d84 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008626:	6862      	ldr	r2, [r4, #4]
 8008628:	4629      	mov	r1, r5
 800862a:	6820      	ldr	r0, [r4, #0]
 800862c:	f001 fbe0 	bl	8009df0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008630:	4a08      	ldr	r2, [pc, #32]	@ (8008654 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008632:	2101      	movs	r1, #1

  return HAL_OK;
 8008634:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8008636:	6813      	ldr	r3, [r2, #0]
 8008638:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800863c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800863e:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
}
 8008642:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8008644:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8008648:	f7fa fd34 	bl	80030b4 <HAL_SDRAM_MspInit>
 800864c:	e7e3      	b.n	8008616 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800864e:	2001      	movs	r0, #1
}
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	52004000 	.word	0x52004000

08008658 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008658:	2800      	cmp	r0, #0
 800865a:	f000 8095 	beq.w	8008788 <HAL_TIM_Base_Init+0x130>
{
 800865e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008660:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008664:	4604      	mov	r4, r0
 8008666:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 8087 	beq.w	800877e <HAL_TIM_Base_Init+0x126>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008670:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008672:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008674:	4945      	ldr	r1, [pc, #276]	@ (800878c <HAL_TIM_Base_Init+0x134>)
 8008676:	4d46      	ldr	r5, [pc, #280]	@ (8008790 <HAL_TIM_Base_Init+0x138>)
 8008678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800867c:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8008680:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008684:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 8008688:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800868a:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800868e:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008690:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008694:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008696:	ea4f 1151 	mov.w	r1, r1, lsr #5

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800869a:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800869c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80086a0:	d01f      	beq.n	80086e2 <HAL_TIM_Base_Init+0x8a>
 80086a2:	b9f1      	cbnz	r1, 80086e2 <HAL_TIM_Base_Init+0x8a>
 80086a4:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 80087a0 <HAL_TIM_Base_Init+0x148>
 80086a8:	4563      	cmp	r3, ip
 80086aa:	d050      	beq.n	800874e <HAL_TIM_Base_Init+0xf6>
 80086ac:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80086b0:	4563      	cmp	r3, ip
 80086b2:	d04c      	beq.n	800874e <HAL_TIM_Base_Init+0xf6>
 80086b4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80086b8:	4563      	cmp	r3, ip
 80086ba:	d012      	beq.n	80086e2 <HAL_TIM_Base_Init+0x8a>
 80086bc:	f1be 0f00 	cmp.w	lr, #0
 80086c0:	d10f      	bne.n	80086e2 <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086c2:	4d34      	ldr	r5, [pc, #208]	@ (8008794 <HAL_TIM_Base_Init+0x13c>)
 80086c4:	4934      	ldr	r1, [pc, #208]	@ (8008798 <HAL_TIM_Base_Init+0x140>)
 80086c6:	428b      	cmp	r3, r1
 80086c8:	bf18      	it	ne
 80086ca:	42ab      	cmpne	r3, r5
 80086cc:	d043      	beq.n	8008756 <HAL_TIM_Base_Init+0xfe>
 80086ce:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80086d2:	428b      	cmp	r3, r1
 80086d4:	d03f      	beq.n	8008756 <HAL_TIM_Base_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086da:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80086dc:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086de:	4310      	orrs	r0, r2

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086e0:	e014      	b.n	800870c <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 80086e2:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086e4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086e8:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 80086ec:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086ee:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80086f0:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 80086f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086f6:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086fe:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008700:	b911      	cbnz	r1, 8008708 <HAL_TIM_Base_Init+0xb0>
 8008702:	f1be 0f00 	cmp.w	lr, #0
 8008706:	d02f      	beq.n	8008768 <HAL_TIM_Base_Init+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008708:	6962      	ldr	r2, [r4, #20]
 800870a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800870c:	6819      	ldr	r1, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800870e:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008710:	f041 0104 	orr.w	r1, r1, #4
 8008714:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8008716:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008718:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800871a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800871c:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008720:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8008724:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8008728:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 800872c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 8008730:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8008734:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008738:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 800873c:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8008740:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 8008744:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008748:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 800874c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800874e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008752:	68a1      	ldr	r1, [r4, #8]
 8008754:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008756:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008758:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 800875c:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800875e:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8008760:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008762:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008766:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008768:	490c      	ldr	r1, [pc, #48]	@ (800879c <HAL_TIM_Base_Init+0x144>)
 800876a:	4a0a      	ldr	r2, [pc, #40]	@ (8008794 <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800876c:	4293      	cmp	r3, r2
 800876e:	bf18      	it	ne
 8008770:	428b      	cmpne	r3, r1
 8008772:	d0c9      	beq.n	8008708 <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008774:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008778:	4293      	cmp	r3, r2
 800877a:	d0c5      	beq.n	8008708 <HAL_TIM_Base_Init+0xb0>
 800877c:	e7c6      	b.n	800870c <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 800877e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008782:	f7fa fbc9 	bl	8002f18 <HAL_TIM_Base_MspInit>
 8008786:	e773      	b.n	8008670 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8008788:	2001      	movs	r0, #1
}
 800878a:	4770      	bx	lr
 800878c:	40010000 	.word	0x40010000
 8008790:	40010400 	.word	0x40010400
 8008794:	40014000 	.word	0x40014000
 8008798:	40014400 	.word	0x40014400
 800879c:	40014800 	.word	0x40014800
 80087a0:	40000400 	.word	0x40000400

080087a4 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80087a4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d139      	bne.n	8008820 <HAL_TIM_Base_Start+0x7c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087ac:	6802      	ldr	r2, [r0, #0]
 80087ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008824 <HAL_TIM_Base_Start+0x80>)
 80087b0:	491d      	ldr	r1, [pc, #116]	@ (8008828 <HAL_TIM_Base_Start+0x84>)
 80087b2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80087b6:	bf18      	it	ne
 80087b8:	429a      	cmpne	r2, r3
{
 80087ba:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087bc:	bf0c      	ite	eq
 80087be:	2301      	moveq	r3, #1
 80087c0:	2300      	movne	r3, #0
 80087c2:	4d1a      	ldr	r5, [pc, #104]	@ (800882c <HAL_TIM_Base_Start+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 80087c4:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c6:	42aa      	cmp	r2, r5
 80087c8:	bf08      	it	eq
 80087ca:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80087ce:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d2:	4c17      	ldr	r4, [pc, #92]	@ (8008830 <HAL_TIM_Base_Start+0x8c>)
 80087d4:	428a      	cmp	r2, r1
 80087d6:	bf08      	it	eq
 80087d8:	f043 0301 	orreq.w	r3, r3, #1
 80087dc:	4815      	ldr	r0, [pc, #84]	@ (8008834 <HAL_TIM_Base_Start+0x90>)
 80087de:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80087e2:	42a2      	cmp	r2, r4
 80087e4:	bf08      	it	eq
 80087e6:	f043 0301 	orreq.w	r3, r3, #1
 80087ea:	4282      	cmp	r2, r0
 80087ec:	bf08      	it	eq
 80087ee:	f043 0301 	orreq.w	r3, r3, #1
 80087f2:	428a      	cmp	r2, r1
 80087f4:	bf08      	it	eq
 80087f6:	f043 0301 	orreq.w	r3, r3, #1
 80087fa:	b913      	cbnz	r3, 8008802 <HAL_TIM_Base_Start+0x5e>
 80087fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008838 <HAL_TIM_Base_Start+0x94>)
 80087fe:	429a      	cmp	r2, r3
 8008800:	d107      	bne.n	8008812 <HAL_TIM_Base_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008802:	6891      	ldr	r1, [r2, #8]
 8008804:	4b0d      	ldr	r3, [pc, #52]	@ (800883c <HAL_TIM_Base_Start+0x98>)
 8008806:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008808:	2b06      	cmp	r3, #6
 800880a:	d006      	beq.n	800881a <HAL_TIM_Base_Start+0x76>
 800880c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008810:	d003      	beq.n	800881a <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 8008812:	6813      	ldr	r3, [r2, #0]
 8008814:	f043 0301 	orr.w	r3, r3, #1
 8008818:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800881a:	2000      	movs	r0, #0
}
 800881c:	bc30      	pop	{r4, r5}
 800881e:	4770      	bx	lr
    return HAL_ERROR;
 8008820:	2001      	movs	r0, #1
}
 8008822:	4770      	bx	lr
 8008824:	40010000 	.word	0x40010000
 8008828:	40000800 	.word	0x40000800
 800882c:	40000400 	.word	0x40000400
 8008830:	40000c00 	.word	0x40000c00
 8008834:	40010400 	.word	0x40010400
 8008838:	40014000 	.word	0x40014000
 800883c:	00010007 	.word	0x00010007

08008840 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8008840:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8008844:	2a01      	cmp	r2, #1
 8008846:	d06d      	beq.n	8008924 <HAL_TIM_ConfigClockSource+0xe4>
  tmpsmcr = htim->Instance->SMCR;
 8008848:	6802      	ldr	r2, [r0, #0]
 800884a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800884c:	2001      	movs	r0, #1
{
 800884e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8008850:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8008852:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008856:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800885a:	4c59      	ldr	r4, [pc, #356]	@ (80089c0 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 800885c:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800885e:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8008860:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008862:	680c      	ldr	r4, [r1, #0]
 8008864:	2c70      	cmp	r4, #112	@ 0x70
 8008866:	f000 8087 	beq.w	8008978 <HAL_TIM_ConfigClockSource+0x138>
 800886a:	d825      	bhi.n	80088b8 <HAL_TIM_ConfigClockSource+0x78>
 800886c:	2c50      	cmp	r4, #80	@ 0x50
 800886e:	d05b      	beq.n	8008928 <HAL_TIM_ConfigClockSource+0xe8>
 8008870:	d82b      	bhi.n	80088ca <HAL_TIM_ConfigClockSource+0x8a>
 8008872:	2c40      	cmp	r4, #64	@ 0x40
 8008874:	f040 8090 	bne.w	8008998 <HAL_TIM_ConfigClockSource+0x158>
                               sClockSourceConfig->ClockPolarity,
 8008878:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800887a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800887c:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800887e:	6a10      	ldr	r0, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008880:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008884:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8008888:	430c      	orrs	r4, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800888a:	494e      	ldr	r1, [pc, #312]	@ (80089c4 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800888c:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800888e:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008890:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008894:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008898:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 800889a:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800889c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800889e:	4001      	ands	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088a0:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088a4:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80088a6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80088a8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80088aa:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80088ac:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80088b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80088b4:	bc30      	pop	{r4, r5}
 80088b6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80088b8:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80088bc:	d04c      	beq.n	8008958 <HAL_TIM_ConfigClockSource+0x118>
 80088be:	d81f      	bhi.n	8008900 <HAL_TIM_ConfigClockSource+0xc0>
 80088c0:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 80088c4:	bf18      	it	ne
 80088c6:	2001      	movne	r0, #1
 80088c8:	e7ee      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x68>
 80088ca:	2c60      	cmp	r4, #96	@ 0x60
 80088cc:	d1ec      	bne.n	80088a8 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 80088ce:	6a10      	ldr	r0, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 80088d0:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088d2:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
                               sClockSourceConfig->ClockFilter);
 80088d6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 80088d8:	493a      	ldr	r1, [pc, #232]	@ (80089c4 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccer |= (TIM_ICPolarity << 4U);
 80088da:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088de:	6a14      	ldr	r4, [r2, #32]
 80088e0:	f024 0410 	bic.w	r4, r4, #16
 80088e4:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088e6:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088e8:	f424 4470 	bic.w	r4, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088ec:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80088f0:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 80088f2:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80088f4:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80088f6:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088f8:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80088fc:	6091      	str	r1, [r2, #8]
}
 80088fe:	e7d2      	b.n	80088a6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8008900:	4931      	ldr	r1, [pc, #196]	@ (80089c8 <HAL_TIM_ConfigClockSource+0x188>)
 8008902:	428c      	cmp	r4, r1
 8008904:	d006      	beq.n	8008914 <HAL_TIM_ConfigClockSource+0xd4>
 8008906:	d94f      	bls.n	80089a8 <HAL_TIM_ConfigClockSource+0x168>
 8008908:	4930      	ldr	r1, [pc, #192]	@ (80089cc <HAL_TIM_ConfigClockSource+0x18c>)
 800890a:	428c      	cmp	r4, r1
 800890c:	d002      	beq.n	8008914 <HAL_TIM_ConfigClockSource+0xd4>
 800890e:	3110      	adds	r1, #16
 8008910:	428c      	cmp	r4, r1
 8008912:	d1c9      	bne.n	80088a8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8008914:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008916:	492b      	ldr	r1, [pc, #172]	@ (80089c4 <HAL_TIM_ConfigClockSource+0x184>)
 8008918:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800891a:	4321      	orrs	r1, r4
 800891c:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8008920:	6091      	str	r1, [r2, #8]
}
 8008922:	e7c0      	b.n	80088a6 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8008924:	2002      	movs	r0, #2
}
 8008926:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8008928:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800892a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800892c:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800892e:	6a10      	ldr	r0, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008930:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008934:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8008938:	430c      	orrs	r4, r1
  tmpsmcr &= ~TIM_SMCR_TS;
 800893a:	4922      	ldr	r1, [pc, #136]	@ (80089c4 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800893c:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800893e:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008940:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008944:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008948:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 800894a:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800894c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800894e:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008950:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8008954:	6091      	str	r1, [r2, #8]
}
 8008956:	e7a6      	b.n	80088a6 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008958:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800895c:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800895e:	4328      	orrs	r0, r5
 8008960:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008962:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008966:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800896a:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800896c:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800896e:	6891      	ldr	r1, [r2, #8]
 8008970:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8008974:	6091      	str	r1, [r2, #8]
      break;
 8008976:	e796      	b.n	80088a6 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008978:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800897c:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800897e:	4328      	orrs	r0, r5
 8008980:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008982:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008986:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800898a:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800898c:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800898e:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008990:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008994:	6091      	str	r1, [r2, #8]
      break;
 8008996:	e786      	b.n	80088a6 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8008998:	d886      	bhi.n	80088a8 <HAL_TIM_ConfigClockSource+0x68>
 800899a:	2c20      	cmp	r4, #32
 800899c:	d0ba      	beq.n	8008914 <HAL_TIM_ConfigClockSource+0xd4>
 800899e:	d80a      	bhi.n	80089b6 <HAL_TIM_ConfigClockSource+0x176>
 80089a0:	f034 0110 	bics.w	r1, r4, #16
 80089a4:	d180      	bne.n	80088a8 <HAL_TIM_ConfigClockSource+0x68>
 80089a6:	e7b5      	b.n	8008914 <HAL_TIM_ConfigClockSource+0xd4>
 80089a8:	f024 0110 	bic.w	r1, r4, #16
 80089ac:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80089b0:	f47f af7a 	bne.w	80088a8 <HAL_TIM_ConfigClockSource+0x68>
 80089b4:	e7ae      	b.n	8008914 <HAL_TIM_ConfigClockSource+0xd4>
 80089b6:	2c30      	cmp	r4, #48	@ 0x30
 80089b8:	d0ac      	beq.n	8008914 <HAL_TIM_ConfigClockSource+0xd4>
      status = HAL_ERROR;
 80089ba:	2001      	movs	r0, #1
 80089bc:	e774      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x68>
 80089be:	bf00      	nop
 80089c0:	ffce0088 	.word	0xffce0088
 80089c4:	ffcfff8f 	.word	0xffcfff8f
 80089c8:	00100020 	.word	0x00100020
 80089cc:	00100030 	.word	0x00100030

080089d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089d0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d04b      	beq.n	8008a70 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089d8:	6803      	ldr	r3, [r0, #0]
 80089da:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80089dc:	2002      	movs	r0, #2
{
 80089de:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089e0:	4d24      	ldr	r5, [pc, #144]	@ (8008a74 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80089e2:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089e6:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80089e8:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80089ea:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089ec:	d029      	beq.n	8008a42 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80089ee:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80089f2:	42ab      	cmp	r3, r5
 80089f4:	d025      	beq.n	8008a42 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089f6:	4d20      	ldr	r5, [pc, #128]	@ (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80089f8:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089fc:	42ab      	cmp	r3, r5
 80089fe:	bf18      	it	ne
 8008a00:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8008a04:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008a08:	bf0c      	ite	eq
 8008a0a:	f04f 0c01 	moveq.w	ip, #1
 8008a0e:	f04f 0c00 	movne.w	ip, #0
 8008a12:	42ab      	cmp	r3, r5
 8008a14:	bf08      	it	eq
 8008a16:	f04c 0c01 	orreq.w	ip, ip, #1
 8008a1a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008a1e:	42ab      	cmp	r3, r5
 8008a20:	bf08      	it	eq
 8008a22:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a26:	680d      	ldr	r5, [r1, #0]
 8008a28:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a2a:	4d14      	ldr	r5, [pc, #80]	@ (8008a7c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8008a2c:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a2e:	42ab      	cmp	r3, r5
 8008a30:	bf14      	ite	ne
 8008a32:	4660      	movne	r0, ip
 8008a34:	f04c 0001 	orreq.w	r0, ip, #1
 8008a38:	b960      	cbnz	r0, 8008a54 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008a3a:	4811      	ldr	r0, [pc, #68]	@ (8008a80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008a3c:	4283      	cmp	r3, r0
 8008a3e:	d009      	beq.n	8008a54 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008a40:	e00d      	b.n	8008a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a42:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a44:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a48:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a4a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a4c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a50:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8008a52:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a54:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a56:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a5a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a5c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008a5e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008a60:	2101      	movs	r1, #1

  return HAL_OK;
 8008a62:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008a68:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8008a6c:	bc30      	pop	{r4, r5}
 8008a6e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008a70:	2002      	movs	r0, #2
}
 8008a72:	4770      	bx	lr
 8008a74:	40010000 	.word	0x40010000
 8008a78:	40000400 	.word	0x40000400
 8008a7c:	40001800 	.word	0x40001800
 8008a80:	40014000 	.word	0x40014000

08008a84 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a84:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8008a88:	2b20      	cmp	r3, #32
 8008a8a:	d15d      	bne.n	8008b48 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a8c:	2900      	cmp	r1, #0
 8008a8e:	d060      	beq.n	8008b52 <HAL_UART_Receive_IT+0xce>
{
 8008a90:	b430      	push	{r4, r5}
    if ((pData == NULL) || (Size == 0U))
 8008a92:	fab2 f482 	clz	r4, r2
 8008a96:	0964      	lsrs	r4, r4, #5
 8008a98:	2a00      	cmp	r2, #0
 8008a9a:	d057      	beq.n	8008b4c <HAL_UART_Receive_IT+0xc8>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a9c:	6803      	ldr	r3, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9e:	66c4      	str	r4, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008aa0:	4c57      	ldr	r4, [pc, #348]	@ (8008c00 <HAL_UART_Receive_IT+0x17c>)
 8008aa2:	42a3      	cmp	r3, r4
 8008aa4:	d002      	beq.n	8008aac <HAL_UART_Receive_IT+0x28>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008aa6:	685c      	ldr	r4, [r3, #4]
 8008aa8:	0224      	lsls	r4, r4, #8
 8008aaa:	d43c      	bmi.n	8008b26 <HAL_UART_Receive_IT+0xa2>
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr  = pData;
 8008aac:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;
 8008aae:	2400      	movs	r4, #0

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ab0:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8008ab2:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  UART_MASK_COMPUTATION(huart);
 8008ab6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
  huart->RxXferCount = Size;
 8008aba:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008abe:	6744      	str	r4, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8008ac0:	d066      	beq.n	8008b90 <HAL_UART_Receive_IT+0x10c>
 8008ac2:	2900      	cmp	r1, #0
 8008ac4:	d147      	bne.n	8008b56 <HAL_UART_Receive_IT+0xd2>
 8008ac6:	6901      	ldr	r1, [r0, #16]
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	bf0c      	ite	eq
 8008acc:	24ff      	moveq	r4, #255	@ 0xff
 8008ace:	247f      	movne	r4, #127	@ 0x7f

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad0:	2100      	movs	r1, #0
  UART_MASK_COMPUTATION(huart);
 8008ad2:	f8a0 4060 	strh.w	r4, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad6:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ada:	2122      	movs	r1, #34	@ 0x22
 8008adc:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae0:	f103 0108 	add.w	r1, r3, #8
 8008ae4:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae8:	f041 0101 	orr.w	r1, r1, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aec:	f103 0508 	add.w	r5, r3, #8
 8008af0:	e845 1400 	strex	r4, r1, [r5]
 8008af4:	2c00      	cmp	r4, #0
 8008af6:	d1f3      	bne.n	8008ae0 <HAL_UART_Receive_IT+0x5c>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008af8:	6e41      	ldr	r1, [r0, #100]	@ 0x64
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008afa:	6885      	ldr	r5, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008afc:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b00:	6904      	ldr	r4, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b02:	d04c      	beq.n	8008b9e <HAL_UART_Receive_IT+0x11a>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b04:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8008b08:	d02e      	beq.n	8008b68 <HAL_UART_Receive_IT+0xe4>
 8008b0a:	4a3e      	ldr	r2, [pc, #248]	@ (8008c04 <HAL_UART_Receive_IT+0x180>)
 8008b0c:	6742      	str	r2, [r0, #116]	@ 0x74
    {
      huart->RxISR = UART_RxISR_8BIT;
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b0e:	b374      	cbz	r4, 8008b6e <HAL_UART_Receive_IT+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b10:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008b14:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	e843 2100 	strex	r1, r2, [r3]
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	d1f7      	bne.n	8008b10 <HAL_UART_Receive_IT+0x8c>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b20:	2000      	movs	r0, #0
}
 8008b22:	bc30      	pop	{r4, r5}
 8008b24:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	e853 4f00 	ldrex	r4, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b2a:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2e:	e843 4500 	strex	r5, r4, [r3]
 8008b32:	2d00      	cmp	r5, #0
 8008b34:	d0ba      	beq.n	8008aac <HAL_UART_Receive_IT+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	e853 4f00 	ldrex	r4, [r3]
 8008b3a:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	e843 4500 	strex	r5, r4, [r3]
 8008b42:	2d00      	cmp	r5, #0
 8008b44:	d1ef      	bne.n	8008b26 <HAL_UART_Receive_IT+0xa2>
 8008b46:	e7b1      	b.n	8008aac <HAL_UART_Receive_IT+0x28>
    return HAL_BUSY;
 8008b48:	2002      	movs	r0, #2
 8008b4a:	4770      	bx	lr
      return HAL_ERROR;
 8008b4c:	2001      	movs	r0, #1
}
 8008b4e:	bc30      	pop	{r4, r5}
 8008b50:	4770      	bx	lr
      return HAL_ERROR;
 8008b52:	2001      	movs	r0, #1
}
 8008b54:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8008b56:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8008b5a:	d1b9      	bne.n	8008ad0 <HAL_UART_Receive_IT+0x4c>
 8008b5c:	6901      	ldr	r1, [r0, #16]
 8008b5e:	2900      	cmp	r1, #0
 8008b60:	bf0c      	ite	eq
 8008b62:	247f      	moveq	r4, #127	@ 0x7f
 8008b64:	243f      	movne	r4, #63	@ 0x3f
 8008b66:	e7b3      	b.n	8008ad0 <HAL_UART_Receive_IT+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b68:	bb84      	cbnz	r4, 8008bcc <HAL_UART_Receive_IT+0x148>
 8008b6a:	4a27      	ldr	r2, [pc, #156]	@ (8008c08 <HAL_UART_Receive_IT+0x184>)
 8008b6c:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b72:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b76:	e843 2100 	strex	r1, r2, [r3]
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d0d0      	beq.n	8008b20 <HAL_UART_Receive_IT+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	e853 2f00 	ldrex	r2, [r3]
 8008b82:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	e843 2100 	strex	r1, r2, [r3]
 8008b8a:	2900      	cmp	r1, #0
 8008b8c:	d1ef      	bne.n	8008b6e <HAL_UART_Receive_IT+0xea>
 8008b8e:	e7c7      	b.n	8008b20 <HAL_UART_Receive_IT+0x9c>
  UART_MASK_COMPUTATION(huart);
 8008b90:	6901      	ldr	r1, [r0, #16]
 8008b92:	f240 14ff 	movw	r4, #511	@ 0x1ff
 8008b96:	2900      	cmp	r1, #0
 8008b98:	bf18      	it	ne
 8008b9a:	24ff      	movne	r4, #255	@ 0xff
 8008b9c:	e798      	b.n	8008ad0 <HAL_UART_Receive_IT+0x4c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b9e:	f8b0 1068 	ldrh.w	r1, [r0, #104]	@ 0x68
 8008ba2:	4291      	cmp	r1, r2
 8008ba4:	d8ae      	bhi.n	8008b04 <HAL_UART_Receive_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba6:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8008baa:	d012      	beq.n	8008bd2 <HAL_UART_Receive_IT+0x14e>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008bac:	4a17      	ldr	r2, [pc, #92]	@ (8008c0c <HAL_UART_Receive_IT+0x188>)
 8008bae:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bb0:	b994      	cbnz	r4, 8008bd8 <HAL_UART_Receive_IT+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb2:	f103 0208 	add.w	r2, r3, #8
 8008bb6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	f103 0008 	add.w	r0, r3, #8
 8008bc2:	e840 2100 	strex	r1, r2, [r0]
 8008bc6:	2900      	cmp	r1, #0
 8008bc8:	d1f3      	bne.n	8008bb2 <HAL_UART_Receive_IT+0x12e>
 8008bca:	e7a9      	b.n	8008b20 <HAL_UART_Receive_IT+0x9c>
 8008bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8008c04 <HAL_UART_Receive_IT+0x180>)
 8008bce:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bd0:	e79e      	b.n	8008b10 <HAL_UART_Receive_IT+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bd2:	b194      	cbz	r4, 8008bfa <HAL_UART_Receive_IT+0x176>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8008c0c <HAL_UART_Receive_IT+0x188>)
 8008bd6:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	e843 2100 	strex	r1, r2, [r3]
 8008be4:	2900      	cmp	r1, #0
 8008be6:	d0e4      	beq.n	8008bb2 <HAL_UART_Receive_IT+0x12e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	e853 2f00 	ldrex	r2, [r3]
 8008bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	e843 2100 	strex	r1, r2, [r3]
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d1ef      	bne.n	8008bd8 <HAL_UART_Receive_IT+0x154>
 8008bf8:	e7db      	b.n	8008bb2 <HAL_UART_Receive_IT+0x12e>
 8008bfa:	4a05      	ldr	r2, [pc, #20]	@ (8008c10 <HAL_UART_Receive_IT+0x18c>)
 8008bfc:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bfe:	e7d8      	b.n	8008bb2 <HAL_UART_Receive_IT+0x12e>
 8008c00:	58000c00 	.word	0x58000c00
 8008c04:	080090bd 	.word	0x080090bd
 8008c08:	08009075 	.word	0x08009075
 8008c0c:	08009101 	.word	0x08009101
 8008c10:	08009329 	.word	0x08009329

08008c14 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop

08008c18 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop

08008c1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c1c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c1e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 8008c20:	2300      	movs	r3, #0
 8008c22:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c26:	f7ff fff7 	bl	8008c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c2a:	bd08      	pop	{r3, pc}

08008c2c <HAL_UARTEx_RxEventCallback>:
}
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop

08008c30 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c30:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c32:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c36:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8008c38:	ea12 0f0c 	tst.w	r2, ip
{
 8008c3c:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c3e:	681d      	ldr	r5, [r3, #0]
{
 8008c40:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c42:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 8008c44:	d145      	bne.n	8008cd2 <HAL_UART_IRQHandler+0xa2>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c46:	0696      	lsls	r6, r2, #26
 8008c48:	d507      	bpl.n	8008c5a <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c4a:	f005 0c20 	and.w	ip, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c4e:	f001 5680 	and.w	r6, r1, #268435456	@ 0x10000000
 8008c52:	ea5c 0c06 	orrs.w	ip, ip, r6
 8008c56:	f040 812a 	bne.w	8008eae <HAL_UART_IRQHandler+0x27e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c5a:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8008c5c:	2801      	cmp	r0, #1
 8008c5e:	f000 80cd 	beq.w	8008dfc <HAL_UART_IRQHandler+0x1cc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c62:	02d0      	lsls	r0, r2, #11
 8008c64:	d41d      	bmi.n	8008ca2 <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c66:	0610      	lsls	r0, r2, #24
 8008c68:	d506      	bpl.n	8008c78 <HAL_UART_IRQHandler+0x48>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c6a:	f401 0100 	and.w	r1, r1, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c6e:	f005 0080 	and.w	r0, r5, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c72:	4308      	orrs	r0, r1
 8008c74:	f040 8122 	bne.w	8008ebc <HAL_UART_IRQHandler+0x28c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c78:	0651      	lsls	r1, r2, #25
 8008c7a:	d51c      	bpl.n	8008cb6 <HAL_UART_IRQHandler+0x86>
 8008c7c:	066e      	lsls	r6, r5, #25
 8008c7e:	d51a      	bpl.n	8008cb6 <HAL_UART_IRQHandler+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c88:	e843 2100 	strex	r1, r2, [r3]
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	d1f7      	bne.n	8008c80 <HAL_UART_IRQHandler+0x50>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c90:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c92:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c94:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8008c96:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->TxISR = NULL;
 8008c9a:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8008c9c:	f7ff ffba 	bl	8008c14 <HAL_UART_TxCpltCallback>
}
 8008ca0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ca2:	024e      	lsls	r6, r1, #9
 8008ca4:	d5df      	bpl.n	8008c66 <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ca6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008caa:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cac:	621a      	str	r2, [r3, #32]
}
 8008cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008cb2:	f000 bfbf 	b.w	8009c34 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008cb6:	0210      	lsls	r0, r2, #8
 8008cb8:	d502      	bpl.n	8008cc0 <HAL_UART_IRQHandler+0x90>
 8008cba:	0069      	lsls	r1, r5, #1
 8008cbc:	f100 813d 	bmi.w	8008f3a <HAL_UART_IRQHandler+0x30a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008cc0:	01d3      	lsls	r3, r2, #7
 8008cc2:	d5ed      	bpl.n	8008ca0 <HAL_UART_IRQHandler+0x70>
 8008cc4:	2d00      	cmp	r5, #0
 8008cc6:	daeb      	bge.n	8008ca0 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008cc8:	4620      	mov	r0, r4
}
 8008cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008cce:	f000 bfb3 	b.w	8009c38 <HAL_UARTEx_RxFifoFullCallback>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008cd2:	48b9      	ldr	r0, [pc, #740]	@ (8008fb8 <HAL_UART_IRQHandler+0x388>)
 8008cd4:	4008      	ands	r0, r1
 8008cd6:	f040 8125 	bne.w	8008f24 <HAL_UART_IRQHandler+0x2f4>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008cda:	4eb8      	ldr	r6, [pc, #736]	@ (8008fbc <HAL_UART_IRQHandler+0x38c>)
 8008cdc:	4235      	tst	r5, r6
 8008cde:	d0bc      	beq.n	8008c5a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ce0:	07d6      	lsls	r6, r2, #31
 8008ce2:	d51a      	bpl.n	8008d1a <HAL_UART_IRQHandler+0xea>
 8008ce4:	05ee      	lsls	r6, r5, #23
 8008ce6:	f140 8103 	bpl.w	8008ef0 <HAL_UART_IRQHandler+0x2c0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cea:	2601      	movs	r6, #1
 8008cec:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cee:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8008cf2:	f046 0601 	orr.w	r6, r6, #1
 8008cf6:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cfa:	0796      	lsls	r6, r2, #30
 8008cfc:	f140 80fb 	bpl.w	8008ef6 <HAL_UART_IRQHandler+0x2c6>
 8008d00:	07ce      	lsls	r6, r1, #31
 8008d02:	d50a      	bpl.n	8008d1a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d04:	2602      	movs	r6, #2
 8008d06:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d08:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8008d0c:	f046 0604 	orr.w	r6, r6, #4
 8008d10:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d14:	0756      	lsls	r6, r2, #29
 8008d16:	f100 80f4 	bmi.w	8008f02 <HAL_UART_IRQHandler+0x2d2>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d1a:	0716      	lsls	r6, r2, #28
 8008d1c:	d50b      	bpl.n	8008d36 <HAL_UART_IRQHandler+0x106>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d1e:	f005 0620 	and.w	r6, r5, #32
 8008d22:	4306      	orrs	r6, r0
 8008d24:	d007      	beq.n	8008d36 <HAL_UART_IRQHandler+0x106>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d26:	2008      	movs	r0, #8
 8008d28:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d2a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8008d2e:	f040 0008 	orr.w	r0, r0, #8
 8008d32:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d36:	0510      	lsls	r0, r2, #20
 8008d38:	d50a      	bpl.n	8008d50 <HAL_UART_IRQHandler+0x120>
 8008d3a:	016e      	lsls	r6, r5, #5
 8008d3c:	d508      	bpl.n	8008d50 <HAL_UART_IRQHandler+0x120>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d3e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008d42:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d44:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8008d48:	f040 0020 	orr.w	r0, r0, #32
 8008d4c:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d50:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d0a3      	beq.n	8008ca0 <HAL_UART_IRQHandler+0x70>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d58:	0690      	lsls	r0, r2, #26
 8008d5a:	d506      	bpl.n	8008d6a <HAL_UART_IRQHandler+0x13a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d5c:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d60:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8008d64:	430d      	orrs	r5, r1
 8008d66:	f040 80d5 	bne.w	8008f14 <HAL_UART_IRQHandler+0x2e4>
      errorcode = huart->ErrorCode;
 8008d6a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d6e:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d70:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d74:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8008d78:	ea52 0501 	orrs.w	r5, r2, r1
 8008d7c:	f000 80e2 	beq.w	8008f44 <HAL_UART_IRQHandler+0x314>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d84:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	e843 2100 	strex	r1, r2, [r3]
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	d1f7      	bne.n	8008d80 <HAL_UART_IRQHandler+0x150>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d90:	488b      	ldr	r0, [pc, #556]	@ (8008fc0 <HAL_UART_IRQHandler+0x390>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	f103 0208 	add.w	r2, r3, #8
 8008d96:	e852 2f00 	ldrex	r2, [r2]
 8008d9a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9c:	f103 0508 	add.w	r5, r3, #8
 8008da0:	e845 2100 	strex	r1, r2, [r5]
 8008da4:	2900      	cmp	r1, #0
 8008da6:	d1f4      	bne.n	8008d92 <HAL_UART_IRQHandler+0x162>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008daa:	2a01      	cmp	r2, #1
 8008dac:	f000 808e 	beq.w	8008ecc <HAL_UART_IRQHandler+0x29c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008db2:	2120      	movs	r1, #32
 8008db4:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db8:	66e2      	str	r2, [r4, #108]	@ 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dba:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8008dbc:	6762      	str	r2, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dbe:	064a      	lsls	r2, r1, #25
 8008dc0:	f140 80b7 	bpl.w	8008f32 <HAL_UART_IRQHandler+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc4:	f103 0208 	add.w	r2, r3, #8
 8008dc8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd0:	f103 0008 	add.w	r0, r3, #8
 8008dd4:	e840 2100 	strex	r1, r2, [r0]
 8008dd8:	2900      	cmp	r1, #0
 8008dda:	d1f3      	bne.n	8008dc4 <HAL_UART_IRQHandler+0x194>
          if (huart->hdmarx != NULL)
 8008ddc:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008de0:	2800      	cmp	r0, #0
 8008de2:	f000 80a6 	beq.w	8008f32 <HAL_UART_IRQHandler+0x302>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008de6:	4b77      	ldr	r3, [pc, #476]	@ (8008fc4 <HAL_UART_IRQHandler+0x394>)
 8008de8:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dea:	f7fc fd75 	bl	80058d8 <HAL_DMA_Abort_IT>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	f43f af56 	beq.w	8008ca0 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008df4:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008df8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008dfa:	e05c      	b.n	8008eb6 <HAL_UART_IRQHandler+0x286>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008dfc:	06d6      	lsls	r6, r2, #27
 8008dfe:	f57f af30 	bpl.w	8008c62 <HAL_UART_IRQHandler+0x32>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e02:	06e8      	lsls	r0, r5, #27
 8008e04:	f57f af2d 	bpl.w	8008c62 <HAL_UART_IRQHandler+0x32>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e08:	2210      	movs	r2, #16
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e0a:	f8b4 505c 	ldrh.w	r5, [r4, #92]	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e0e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	0656      	lsls	r6, r2, #25
 8008e14:	f140 809c 	bpl.w	8008f50 <HAL_UART_IRQHandler+0x320>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e18:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008e1c:	6801      	ldr	r1, [r0, #0]
 8008e1e:	6849      	ldr	r1, [r1, #4]
 8008e20:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8008e22:	2900      	cmp	r1, #0
 8008e24:	f000 80d0 	beq.w	8008fc8 <HAL_UART_IRQHandler+0x398>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e28:	42a9      	cmp	r1, r5
 8008e2a:	f080 80cd 	bcs.w	8008fc8 <HAL_UART_IRQHandler+0x398>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e2e:	69c2      	ldr	r2, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 8008e30:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e34:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8008e38:	d02f      	beq.n	8008e9a <HAL_UART_IRQHandler+0x26a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	e843 2100 	strex	r1, r2, [r3]
 8008e46:	2900      	cmp	r1, #0
 8008e48:	d1f7      	bne.n	8008e3a <HAL_UART_IRQHandler+0x20a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4a:	f103 0208 	add.w	r2, r3, #8
 8008e4e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e52:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e56:	f103 0508 	add.w	r5, r3, #8
 8008e5a:	e845 2100 	strex	r1, r2, [r5]
 8008e5e:	2900      	cmp	r1, #0
 8008e60:	d1f3      	bne.n	8008e4a <HAL_UART_IRQHandler+0x21a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	f103 0208 	add.w	r2, r3, #8
 8008e66:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	f103 0508 	add.w	r5, r3, #8
 8008e72:	e845 2100 	strex	r1, r2, [r5]
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d1f3      	bne.n	8008e62 <HAL_UART_IRQHandler+0x232>
          huart->RxState = HAL_UART_STATE_READY;
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e80:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e86:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8a:	e843 2100 	strex	r1, r2, [r3]
 8008e8e:	2900      	cmp	r1, #0
 8008e90:	d1f7      	bne.n	8008e82 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e92:	f7fc fb6b 	bl	800556c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e96:	f8b4 505c 	ldrh.w	r5, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e9a:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e9c:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e9e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ea0:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 8008ea4:	1a69      	subs	r1, r5, r1
 8008ea6:	b289      	uxth	r1, r1
 8008ea8:	f7ff fec0 	bl	8008c2c <HAL_UARTEx_RxEventCallback>
}
 8008eac:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8008eae:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f43f aef5 	beq.w	8008ca0 <HAL_UART_IRQHandler+0x70>
}
 8008eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008eba:	4718      	bx	r3
    if (huart->TxISR != NULL)
 8008ebc:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f43f aeee 	beq.w	8008ca0 <HAL_UART_IRQHandler+0x70>
      huart->TxISR(huart);
 8008ec4:	4620      	mov	r0, r4
}
 8008ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8008eca:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ed0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed4:	e843 2100 	strex	r1, r2, [r3]
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	f43f af69 	beq.w	8008db0 <HAL_UART_IRQHandler+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ede:	e853 2f00 	ldrex	r2, [r3]
 8008ee2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee6:	e843 2100 	strex	r1, r2, [r3]
 8008eea:	2900      	cmp	r1, #0
 8008eec:	d1ee      	bne.n	8008ecc <HAL_UART_IRQHandler+0x29c>
 8008eee:	e75f      	b.n	8008db0 <HAL_UART_IRQHandler+0x180>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ef0:	0796      	lsls	r6, r2, #30
 8008ef2:	f53f af12 	bmi.w	8008d1a <HAL_UART_IRQHandler+0xea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ef6:	0756      	lsls	r6, r2, #29
 8008ef8:	f57f af0f 	bpl.w	8008d1a <HAL_UART_IRQHandler+0xea>
 8008efc:	07ce      	lsls	r6, r1, #31
 8008efe:	f57f af0c 	bpl.w	8008d1a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f02:	2604      	movs	r6, #4
 8008f04:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f06:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8008f0a:	f046 0602 	orr.w	r6, r6, #2
 8008f0e:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 8008f12:	e702      	b.n	8008d1a <HAL_UART_IRQHandler+0xea>
        if (huart->RxISR != NULL)
 8008f14:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	f43f af27 	beq.w	8008d6a <HAL_UART_IRQHandler+0x13a>
          huart->RxISR(huart);
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	e722      	b.n	8008d6a <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f24:	07d6      	lsls	r6, r2, #31
 8008f26:	f57f aee8 	bpl.w	8008cfa <HAL_UART_IRQHandler+0xca>
 8008f2a:	05ee      	lsls	r6, r5, #23
 8008f2c:	f57f aee5 	bpl.w	8008cfa <HAL_UART_IRQHandler+0xca>
 8008f30:	e6db      	b.n	8008cea <HAL_UART_IRQHandler+0xba>
            HAL_UART_ErrorCallback(huart);
 8008f32:	4620      	mov	r0, r4
 8008f34:	f7ff fe70 	bl	8008c18 <HAL_UART_ErrorCallback>
}
 8008f38:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008f3a:	4620      	mov	r0, r4
}
 8008f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008f40:	f000 be7c 	b.w	8009c3c <HAL_UARTEx_TxFifoEmptyCallback>
        HAL_UART_ErrorCallback(huart);
 8008f44:	4620      	mov	r0, r4
 8008f46:	f7ff fe67 	bl	8008c18 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f4a:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f50:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 8008f54:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f58:	1a6d      	subs	r5, r5, r1
      if ((huart->RxXferCount > 0U)
 8008f5a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f5c:	b2a9      	uxth	r1, r5
          && (nb_rx_data > 0U))
 8008f5e:	2900      	cmp	r1, #0
 8008f60:	f43f ae9e 	beq.w	8008ca0 <HAL_UART_IRQHandler+0x70>
 8008f64:	2a00      	cmp	r2, #0
 8008f66:	f43f ae9b 	beq.w	8008ca0 <HAL_UART_IRQHandler+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f6e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	e843 2000 	strex	r0, r2, [r3]
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d1f7      	bne.n	8008f6a <HAL_UART_IRQHandler+0x33a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f7a:	4d11      	ldr	r5, [pc, #68]	@ (8008fc0 <HAL_UART_IRQHandler+0x390>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	f103 0208 	add.w	r2, r3, #8
 8008f80:	e852 2f00 	ldrex	r2, [r2]
 8008f84:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	f103 0608 	add.w	r6, r3, #8
 8008f8a:	e846 2000 	strex	r0, r2, [r6]
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d1f4      	bne.n	8008f7c <HAL_UART_IRQHandler+0x34c>
        huart->RxState = HAL_UART_STATE_READY;
 8008f92:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8008f94:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008f96:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9a:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	e843 2000 	strex	r0, r2, [r3]
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d1f7      	bne.n	8008f9c <HAL_UART_IRQHandler+0x36c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fac:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fae:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fb0:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fb2:	f7ff fe3b 	bl	8008c2c <HAL_UARTEx_RxEventCallback>
}
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
 8008fb8:	10000001 	.word	0x10000001
 8008fbc:	04000120 	.word	0x04000120
 8008fc0:	effffffe 	.word	0xeffffffe
 8008fc4:	08008c1d 	.word	0x08008c1d
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008fc8:	42a9      	cmp	r1, r5
 8008fca:	f47f ae69 	bne.w	8008ca0 <HAL_UART_IRQHandler+0x70>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008fce:	69c3      	ldr	r3, [r0, #28]
 8008fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fd4:	d0ea      	beq.n	8008fac <HAL_UART_IRQHandler+0x37c>
}
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}

08008fd8 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8008fd8:	6803      	ldr	r3, [r0, #0]
 8008fda:	b510      	push	{r4, lr}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fe0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	e843 2100 	strex	r1, r2, [r3]
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	d1f7      	bne.n	8008fdc <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	f103 0208 	add.w	r2, r3, #8
 8008ff0:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	f103 0408 	add.w	r4, r3, #8
 8008ffc:	e844 2100 	strex	r1, r2, [r4]
 8009000:	2900      	cmp	r1, #0
 8009002:	d1f3      	bne.n	8008fec <UART_RxISR_16BIT.part.0+0x14>
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009004:	4a1a      	ldr	r2, [pc, #104]	@ (8009070 <UART_RxISR_16BIT.part.0+0x98>)
      huart->RxState = HAL_UART_STATE_READY;
 8009006:	2420      	movs	r4, #32
      huart->RxISR = NULL;
 8009008:	6741      	str	r1, [r0, #116]	@ 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800900a:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
 800900c:	f8c0 408c 	str.w	r4, [r0, #140]	@ 0x8c
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009010:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009012:	d002      	beq.n	800901a <UART_RxISR_16BIT.part.0+0x42>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	0211      	lsls	r1, r2, #8
 8009018:	d416      	bmi.n	8009048 <UART_RxISR_16BIT.part.0+0x70>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800901a:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800901c:	2a01      	cmp	r2, #1
 800901e:	d124      	bne.n	800906a <UART_RxISR_16BIT.part.0+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009020:	2200      	movs	r2, #0
 8009022:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009028:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	e843 2100 	strex	r1, r2, [r3]
 8009030:	2900      	cmp	r1, #0
 8009032:	d1f7      	bne.n	8009024 <UART_RxISR_16BIT.part.0+0x4c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009034:	69da      	ldr	r2, [r3, #28]
 8009036:	06d2      	lsls	r2, r2, #27
 8009038:	d501      	bpl.n	800903e <UART_RxISR_16BIT.part.0+0x66>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800903a:	2210      	movs	r2, #16
 800903c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800903e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8009042:	f7ff fdf3 	bl	8008c2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009046:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009048:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800904c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	e843 2100 	strex	r1, r2, [r3]
 8009054:	2900      	cmp	r1, #0
 8009056:	d0e0      	beq.n	800901a <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009058:	e853 2f00 	ldrex	r2, [r3]
 800905c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	e843 2100 	strex	r1, r2, [r3]
 8009064:	2900      	cmp	r1, #0
 8009066:	d1ef      	bne.n	8009048 <UART_RxISR_16BIT.part.0+0x70>
 8009068:	e7d7      	b.n	800901a <UART_RxISR_16BIT.part.0+0x42>
        HAL_UART_RxCpltCallback(huart);
 800906a:	f7f8 fec9 	bl	8001e00 <HAL_UART_RxCpltCallback>
}
 800906e:	bd10      	pop	{r4, pc}
 8009070:	58000c00 	.word	0x58000c00

08009074 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009074:	b410      	push	{r4}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009076:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 800907a:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800907e:	2c22      	cmp	r4, #34	@ 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009080:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009082:	d006      	beq.n	8009092 <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009084:	6993      	ldr	r3, [r2, #24]
 8009086:	f043 0308 	orr.w	r3, r3, #8
 800908a:	6193      	str	r3, [r2, #24]
  }
}
 800908c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009090:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009092:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8009094:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8009096:	4011      	ands	r1, r2
 8009098:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 800909c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr += 2U;
 80090a0:	6584      	str	r4, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80090a2:	3a01      	subs	r2, #1
 80090a4:	b292      	uxth	r2, r2
 80090a6:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80090aa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1eb      	bne.n	800908c <UART_RxISR_16BIT+0x18>
}
 80090b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090b8:	f7ff bf8e 	b.w	8008fd8 <UART_RxISR_16BIT.part.0>

080090bc <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090bc:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 80090c0:	f8b0 c060 	ldrh.w	ip, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090c4:	2922      	cmp	r1, #34	@ 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090c6:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090c8:	d004      	beq.n	80090d4 <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090ca:	6993      	ldr	r3, [r2, #24]
 80090cc:	f043 0308 	orr.w	r3, r3, #8
 80090d0:	6193      	str	r3, [r2, #24]
}
 80090d2:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80090d6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80090d8:	ea02 020c 	and.w	r2, r2, ip
 80090dc:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 80090de:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr++;
 80090e2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80090e4:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 80090e6:	3101      	adds	r1, #1
    huart->RxXferCount--;
 80090e8:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 80090ea:	6581      	str	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80090ec:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80090f0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1eb      	bne.n	80090d2 <UART_RxISR_8BIT+0x16>
 80090fa:	f7ff bf6d 	b.w	8008fd8 <UART_RxISR_16BIT.part.0>
 80090fe:	bf00      	nop

08009100 <UART_RxISR_8BIT_FIFOEN>:
{
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009100:	6803      	ldr	r3, [r0, #0]
{
 8009102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009106:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009108:	6819      	ldr	r1, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800910a:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800910c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8009110:	f8b0 9060 	ldrh.w	r9, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009114:	2a22      	cmp	r2, #34	@ 0x22
 8009116:	d005      	beq.n	8009124 <UART_RxISR_8BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009118:	699a      	ldr	r2, [r3, #24]
 800911a:	f042 0208 	orr.w	r2, r2, #8
 800911e:	619a      	str	r2, [r3, #24]
  }
}
 8009120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009124:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8009128:	4604      	mov	r4, r0
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800912a:	f401 7a80 	and.w	sl, r1, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800912e:	f007 0701 	and.w	r7, r7, #1
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 80d8 	beq.w	80092e8 <UART_RxISR_8BIT_FIFOEN+0x1e8>
 8009138:	2f00      	cmp	r7, #0
 800913a:	f000 80a3 	beq.w	8009284 <UART_RxISR_8BIT_FIFOEN+0x184>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800913e:	2600      	movs	r6, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009140:	2704      	movs	r7, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009142:	f04f 0802 	mov.w	r8, #2
 8009146:	e004      	b.n	8009152 <UART_RxISR_8BIT_FIFOEN+0x52>
      if (huart->RxXferCount == 0U)
 8009148:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d03e      	beq.n	80091d0 <UART_RxISR_8BIT_FIFOEN+0xd0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009152:	06ab      	lsls	r3, r5, #26
 8009154:	d573      	bpl.n	800923e <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009156:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009158:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800915a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800915c:	ea03 0309 	and.w	r3, r3, r9
 8009160:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8009162:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009166:	6823      	ldr	r3, [r4, #0]
      huart->RxXferCount--;
 8009168:	3a01      	subs	r2, #1
      huart->pRxBuffPtr++;
 800916a:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800916c:	b292      	uxth	r2, r2
      huart->pRxBuffPtr++;
 800916e:	3101      	adds	r1, #1
      huart->RxXferCount--;
 8009170:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009174:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 8009176:	65a1      	str	r1, [r4, #88]	@ 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009178:	0768      	lsls	r0, r5, #29
 800917a:	d0e5      	beq.n	8009148 <UART_RxISR_8BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800917c:	07e9      	lsls	r1, r5, #31
 800917e:	d50a      	bpl.n	8009196 <UART_RxISR_8BIT_FIFOEN+0x96>
 8009180:	f1ba 0f00 	cmp.w	sl, #0
 8009184:	d007      	beq.n	8009196 <UART_RxISR_8BIT_FIFOEN+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009186:	2201      	movs	r2, #1
 8009188:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800918a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800918e:	f042 0201 	orr.w	r2, r2, #1
 8009192:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009196:	07aa      	lsls	r2, r5, #30
 8009198:	d507      	bpl.n	80091aa <UART_RxISR_8BIT_FIFOEN+0xaa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800919a:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800919e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80091a2:	f042 0204 	orr.w	r2, r2, #4
 80091a6:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091aa:	0768      	lsls	r0, r5, #29
 80091ac:	d506      	bpl.n	80091bc <UART_RxISR_8BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091ae:	621f      	str	r7, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091b0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80091b4:	f043 0302 	orr.w	r3, r3, #2
 80091b8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0c1      	beq.n	8009148 <UART_RxISR_8BIT_FIFOEN+0x48>
          HAL_UART_ErrorCallback(huart);
 80091c4:	4620      	mov	r0, r4
 80091c6:	f7ff fd27 	bl	8008c18 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ca:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 80091ce:	e7bb      	b.n	8009148 <UART_RxISR_8BIT_FIFOEN+0x48>
 80091d0:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	e843 2100 	strex	r1, r2, [r3]
 80091de:	2900      	cmp	r1, #0
 80091e0:	d1f7      	bne.n	80091d2 <UART_RxISR_8BIT_FIFOEN+0xd2>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091e2:	484e      	ldr	r0, [pc, #312]	@ (800931c <UART_RxISR_8BIT_FIFOEN+0x21c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	f103 0208 	add.w	r2, r3, #8
 80091e8:	e852 2f00 	ldrex	r2, [r2]
 80091ec:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	f103 0508 	add.w	r5, r3, #8
 80091f2:	e845 2100 	strex	r1, r2, [r5]
 80091f6:	2900      	cmp	r1, #0
 80091f8:	d1f4      	bne.n	80091e4 <UART_RxISR_8BIT_FIFOEN+0xe4>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091fa:	4a49      	ldr	r2, [pc, #292]	@ (8009320 <UART_RxISR_8BIT_FIFOEN+0x220>)
        huart->RxState = HAL_UART_STATE_READY;
 80091fc:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 80091fe:	6761      	str	r1, [r4, #116]	@ 0x74
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009200:	4293      	cmp	r3, r2
        huart->RxState = HAL_UART_STATE_READY;
 8009202:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009206:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009208:	d002      	beq.n	8009210 <UART_RxISR_8BIT_FIFOEN+0x110>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	0211      	lsls	r1, r2, #8
 800920e:	d46f      	bmi.n	80092f0 <UART_RxISR_8BIT_FIFOEN+0x1f0>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009210:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009212:	2a01      	cmp	r2, #1
 8009214:	d17d      	bne.n	8009312 <UART_RxISR_8BIT_FIFOEN+0x212>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009216:	2200      	movs	r2, #0
 8009218:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800921e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009222:	e843 2100 	strex	r1, r2, [r3]
 8009226:	2900      	cmp	r1, #0
 8009228:	d1f7      	bne.n	800921a <UART_RxISR_8BIT_FIFOEN+0x11a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800922a:	69da      	ldr	r2, [r3, #28]
 800922c:	06d2      	lsls	r2, r2, #27
 800922e:	d501      	bpl.n	8009234 <UART_RxISR_8BIT_FIFOEN+0x134>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009230:	2210      	movs	r2, #16
 8009232:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009234:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8009238:	4620      	mov	r0, r4
 800923a:	f7ff fcf7 	bl	8008c2c <HAL_UARTEx_RxEventCallback>
    rxdatacount = huart->RxXferCount;
 800923e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009242:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009244:	2b00      	cmp	r3, #0
 8009246:	f43f af6b 	beq.w	8009120 <UART_RxISR_8BIT_FIFOEN+0x20>
 800924a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800924e:	429a      	cmp	r2, r3
 8009250:	f67f af66 	bls.w	8009120 <UART_RxISR_8BIT_FIFOEN+0x20>
 8009254:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	f103 0208 	add.w	r2, r3, #8
 800925a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800925e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	f103 0008 	add.w	r0, r3, #8
 8009266:	e840 2100 	strex	r1, r2, [r0]
 800926a:	2900      	cmp	r1, #0
 800926c:	d1f3      	bne.n	8009256 <UART_RxISR_8BIT_FIFOEN+0x156>
      huart->RxISR = UART_RxISR_8BIT;
 800926e:	4a2d      	ldr	r2, [pc, #180]	@ (8009324 <UART_RxISR_8BIT_FIFOEN+0x224>)
 8009270:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009272:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009276:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927a:	e843 2100 	strex	r1, r2, [r3]
 800927e:	2900      	cmp	r1, #0
 8009280:	d1f7      	bne.n	8009272 <UART_RxISR_8BIT_FIFOEN+0x172>
 8009282:	e74d      	b.n	8009120 <UART_RxISR_8BIT_FIFOEN+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009284:	2601      	movs	r6, #1
 8009286:	e004      	b.n	8009292 <UART_RxISR_8BIT_FIFOEN+0x192>
      if (huart->RxXferCount == 0U)
 8009288:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800928c:	b29b      	uxth	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d09e      	beq.n	80091d0 <UART_RxISR_8BIT_FIFOEN+0xd0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009292:	06a8      	lsls	r0, r5, #26
 8009294:	d5d3      	bpl.n	800923e <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009296:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009298:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800929a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800929c:	ea03 0309 	and.w	r3, r3, r9
 80092a0:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 80092a2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr++;
 80092a6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80092a8:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 80092aa:	3201      	adds	r2, #1
      huart->RxXferCount--;
 80092ac:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 80092ae:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80092b0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092b8:	0769      	lsls	r1, r5, #29
 80092ba:	d0e5      	beq.n	8009288 <UART_RxISR_8BIT_FIFOEN+0x188>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092bc:	07ea      	lsls	r2, r5, #31
 80092be:	d509      	bpl.n	80092d4 <UART_RxISR_8BIT_FIFOEN+0x1d4>
 80092c0:	f1ba 0f00 	cmp.w	sl, #0
 80092c4:	d006      	beq.n	80092d4 <UART_RxISR_8BIT_FIFOEN+0x1d4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092c6:	621e      	str	r6, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80092cc:	f043 0301 	orr.w	r3, r3, #1
 80092d0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0d5      	beq.n	8009288 <UART_RxISR_8BIT_FIFOEN+0x188>
          HAL_UART_ErrorCallback(huart);
 80092dc:	4620      	mov	r0, r4
 80092de:	f7ff fc9b 	bl	8008c18 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e2:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
 80092e6:	e7cf      	b.n	8009288 <UART_RxISR_8BIT_FIFOEN+0x188>
    rxdatacount = huart->RxXferCount;
 80092e8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
}
 80092ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092f4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f8:	e843 2100 	strex	r1, r2, [r3]
 80092fc:	2900      	cmp	r1, #0
 80092fe:	d087      	beq.n	8009210 <UART_RxISR_8BIT_FIFOEN+0x110>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009300:	e853 2f00 	ldrex	r2, [r3]
 8009304:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009308:	e843 2100 	strex	r1, r2, [r3]
 800930c:	2900      	cmp	r1, #0
 800930e:	d1ef      	bne.n	80092f0 <UART_RxISR_8BIT_FIFOEN+0x1f0>
 8009310:	e77e      	b.n	8009210 <UART_RxISR_8BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 8009312:	4620      	mov	r0, r4
 8009314:	f7f8 fd74 	bl	8001e00 <HAL_UART_RxCpltCallback>
 8009318:	e791      	b.n	800923e <UART_RxISR_8BIT_FIFOEN+0x13e>
 800931a:	bf00      	nop
 800931c:	effffffe 	.word	0xeffffffe
 8009320:	58000c00 	.word	0x58000c00
 8009324:	080090bd 	.word	0x080090bd

08009328 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009328:	6803      	ldr	r3, [r0, #0]
{
 800932a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800932e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009330:	6819      	ldr	r1, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009332:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009334:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8009338:	f8b0 9060 	ldrh.w	r9, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800933c:	2a22      	cmp	r2, #34	@ 0x22
 800933e:	d005      	beq.n	800934c <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009340:	699a      	ldr	r2, [r3, #24]
 8009342:	f042 0208 	orr.w	r2, r2, #8
 8009346:	619a      	str	r2, [r3, #24]
  }
}
 8009348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800934c:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8009350:	4604      	mov	r4, r0
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009352:	f401 7a80 	and.w	sl, r1, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009356:	f007 0701 	and.w	r7, r7, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 80d4 	beq.w	8009508 <UART_RxISR_16BIT_FIFOEN+0x1e0>
 8009360:	2f00      	cmp	r7, #0
 8009362:	f000 80a1 	beq.w	80094a8 <UART_RxISR_16BIT_FIFOEN+0x180>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009366:	2600      	movs	r6, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009368:	2704      	movs	r7, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800936a:	f04f 0802 	mov.w	r8, #2
 800936e:	e004      	b.n	800937a <UART_RxISR_16BIT_FIFOEN+0x52>
      if (huart->RxXferCount == 0U)
 8009370:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009374:	b29b      	uxth	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d03c      	beq.n	80093f4 <UART_RxISR_16BIT_FIFOEN+0xcc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800937a:	06ab      	lsls	r3, r5, #26
 800937c:	d571      	bpl.n	8009462 <UART_RxISR_16BIT_FIFOEN+0x13a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800937e:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8009380:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009382:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8009384:	ea09 0202 	and.w	r2, r9, r2
 8009388:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 800938c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr += 2U;
 8009390:	65a1      	str	r1, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8009392:	3a01      	subs	r2, #1
 8009394:	b292      	uxth	r2, r2
 8009396:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800939a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800939c:	0768      	lsls	r0, r5, #29
 800939e:	d0e7      	beq.n	8009370 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093a0:	07e9      	lsls	r1, r5, #31
 80093a2:	d50a      	bpl.n	80093ba <UART_RxISR_16BIT_FIFOEN+0x92>
 80093a4:	f1ba 0f00 	cmp.w	sl, #0
 80093a8:	d007      	beq.n	80093ba <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093aa:	2201      	movs	r2, #1
 80093ac:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093ae:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80093b2:	f042 0201 	orr.w	r2, r2, #1
 80093b6:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ba:	07aa      	lsls	r2, r5, #30
 80093bc:	d507      	bpl.n	80093ce <UART_RxISR_16BIT_FIFOEN+0xa6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093be:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093c2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80093c6:	f042 0204 	orr.w	r2, r2, #4
 80093ca:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ce:	0768      	lsls	r0, r5, #29
 80093d0:	d506      	bpl.n	80093e0 <UART_RxISR_16BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093d2:	621f      	str	r7, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80093d8:	f043 0302 	orr.w	r3, r3, #2
 80093dc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d0c3      	beq.n	8009370 <UART_RxISR_16BIT_FIFOEN+0x48>
          HAL_UART_ErrorCallback(huart);
 80093e8:	4620      	mov	r0, r4
 80093ea:	f7ff fc15 	bl	8008c18 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ee:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 80093f2:	e7bd      	b.n	8009370 <UART_RxISR_16BIT_FIFOEN+0x48>
 80093f4:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	e843 2100 	strex	r1, r2, [r3]
 8009402:	2900      	cmp	r1, #0
 8009404:	d1f7      	bne.n	80093f6 <UART_RxISR_16BIT_FIFOEN+0xce>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009406:	484d      	ldr	r0, [pc, #308]	@ (800953c <UART_RxISR_16BIT_FIFOEN+0x214>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009408:	f103 0208 	add.w	r2, r3, #8
 800940c:	e852 2f00 	ldrex	r2, [r2]
 8009410:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009412:	f103 0508 	add.w	r5, r3, #8
 8009416:	e845 2100 	strex	r1, r2, [r5]
 800941a:	2900      	cmp	r1, #0
 800941c:	d1f4      	bne.n	8009408 <UART_RxISR_16BIT_FIFOEN+0xe0>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800941e:	4a48      	ldr	r2, [pc, #288]	@ (8009540 <UART_RxISR_16BIT_FIFOEN+0x218>)
        huart->RxState = HAL_UART_STATE_READY;
 8009420:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 8009422:	6761      	str	r1, [r4, #116]	@ 0x74
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009424:	4293      	cmp	r3, r2
        huart->RxState = HAL_UART_STATE_READY;
 8009426:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800942a:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800942c:	d002      	beq.n	8009434 <UART_RxISR_16BIT_FIFOEN+0x10c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	0211      	lsls	r1, r2, #8
 8009432:	d46d      	bmi.n	8009510 <UART_RxISR_16BIT_FIFOEN+0x1e8>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009434:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009436:	2a01      	cmp	r2, #1
 8009438:	d17b      	bne.n	8009532 <UART_RxISR_16BIT_FIFOEN+0x20a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943a:	2200      	movs	r2, #0
 800943c:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009442:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009446:	e843 2100 	strex	r1, r2, [r3]
 800944a:	2900      	cmp	r1, #0
 800944c:	d1f7      	bne.n	800943e <UART_RxISR_16BIT_FIFOEN+0x116>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	06d2      	lsls	r2, r2, #27
 8009452:	d501      	bpl.n	8009458 <UART_RxISR_16BIT_FIFOEN+0x130>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009454:	2210      	movs	r2, #16
 8009456:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009458:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800945c:	4620      	mov	r0, r4
 800945e:	f7ff fbe5 	bl	8008c2c <HAL_UARTEx_RxEventCallback>
    rxdatacount = huart->RxXferCount;
 8009462:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009466:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009468:	2b00      	cmp	r3, #0
 800946a:	f43f af6d 	beq.w	8009348 <UART_RxISR_16BIT_FIFOEN+0x20>
 800946e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8009472:	429a      	cmp	r2, r3
 8009474:	f67f af68 	bls.w	8009348 <UART_RxISR_16BIT_FIFOEN+0x20>
 8009478:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	f103 0208 	add.w	r2, r3, #8
 800947e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009482:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	f103 0008 	add.w	r0, r3, #8
 800948a:	e840 2100 	strex	r1, r2, [r0]
 800948e:	2900      	cmp	r1, #0
 8009490:	d1f3      	bne.n	800947a <UART_RxISR_16BIT_FIFOEN+0x152>
      huart->RxISR = UART_RxISR_16BIT;
 8009492:	4a2c      	ldr	r2, [pc, #176]	@ (8009544 <UART_RxISR_16BIT_FIFOEN+0x21c>)
 8009494:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009496:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800949a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	e843 2100 	strex	r1, r2, [r3]
 80094a2:	2900      	cmp	r1, #0
 80094a4:	d1f7      	bne.n	8009496 <UART_RxISR_16BIT_FIFOEN+0x16e>
 80094a6:	e74f      	b.n	8009348 <UART_RxISR_16BIT_FIFOEN+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094a8:	2601      	movs	r6, #1
 80094aa:	e004      	b.n	80094b6 <UART_RxISR_16BIT_FIFOEN+0x18e>
      if (huart->RxXferCount == 0U)
 80094ac:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d09e      	beq.n	80093f4 <UART_RxISR_16BIT_FIFOEN+0xcc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094b6:	06a8      	lsls	r0, r5, #26
 80094b8:	d5d3      	bpl.n	8009462 <UART_RxISR_16BIT_FIFOEN+0x13a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094ba:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 80094bc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094be:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80094c0:	ea09 0101 	and.w	r1, r9, r1
 80094c4:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 80094c8:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80094ca:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 80094ce:	3a01      	subs	r2, #1
 80094d0:	b292      	uxth	r2, r2
 80094d2:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094d6:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094d8:	0769      	lsls	r1, r5, #29
 80094da:	d0e7      	beq.n	80094ac <UART_RxISR_16BIT_FIFOEN+0x184>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094dc:	07ea      	lsls	r2, r5, #31
 80094de:	d509      	bpl.n	80094f4 <UART_RxISR_16BIT_FIFOEN+0x1cc>
 80094e0:	f1ba 0f00 	cmp.w	sl, #0
 80094e4:	d006      	beq.n	80094f4 <UART_RxISR_16BIT_FIFOEN+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094e6:	621e      	str	r6, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094e8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80094ec:	f043 0301 	orr.w	r3, r3, #1
 80094f0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094f4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d0d7      	beq.n	80094ac <UART_RxISR_16BIT_FIFOEN+0x184>
          HAL_UART_ErrorCallback(huart);
 80094fc:	4620      	mov	r0, r4
 80094fe:	f7ff fb8b 	bl	8008c18 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009502:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
 8009506:	e7d1      	b.n	80094ac <UART_RxISR_16BIT_FIFOEN+0x184>
    rxdatacount = huart->RxXferCount;
 8009508:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
}
 800950c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009510:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009514:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009518:	e843 2100 	strex	r1, r2, [r3]
 800951c:	2900      	cmp	r1, #0
 800951e:	d089      	beq.n	8009434 <UART_RxISR_16BIT_FIFOEN+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	e853 2f00 	ldrex	r2, [r3]
 8009524:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009528:	e843 2100 	strex	r1, r2, [r3]
 800952c:	2900      	cmp	r1, #0
 800952e:	d1ef      	bne.n	8009510 <UART_RxISR_16BIT_FIFOEN+0x1e8>
 8009530:	e780      	b.n	8009434 <UART_RxISR_16BIT_FIFOEN+0x10c>
          HAL_UART_RxCpltCallback(huart);
 8009532:	4620      	mov	r0, r4
 8009534:	f7f8 fc64 	bl	8001e00 <HAL_UART_RxCpltCallback>
 8009538:	e793      	b.n	8009462 <UART_RxISR_16BIT_FIFOEN+0x13a>
 800953a:	bf00      	nop
 800953c:	effffffe 	.word	0xeffffffe
 8009540:	58000c00 	.word	0x58000c00
 8009544:	08009075 	.word	0x08009075

08009548 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009548:	6901      	ldr	r1, [r0, #16]
 800954a:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800954c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800954e:	430a      	orrs	r2, r1
{
 8009550:	b570      	push	{r4, r5, r6, lr}
 8009552:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009554:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009556:	69c0      	ldr	r0, [r0, #28]
{
 8009558:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800955a:	6961      	ldr	r1, [r4, #20]
 800955c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800955e:	49a0      	ldr	r1, [pc, #640]	@ (80097e0 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009560:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009562:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009564:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009566:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009568:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800956a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8009572:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009574:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009576:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009578:	4a9a      	ldr	r2, [pc, #616]	@ (80097e4 <UART_SetConfig+0x29c>)
 800957a:	4293      	cmp	r3, r2
 800957c:	f000 8119 	beq.w	80097b2 <UART_SetConfig+0x26a>
    tmpreg |= huart->Init.OneBitSampling;
 8009580:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009582:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8009584:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009586:	4a98      	ldr	r2, [pc, #608]	@ (80097e8 <UART_SetConfig+0x2a0>)
 8009588:	4032      	ands	r2, r6
 800958a:	4311      	orrs	r1, r2
 800958c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800958e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009590:	f022 020f 	bic.w	r2, r2, #15
 8009594:	432a      	orrs	r2, r5
 8009596:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009598:	4a94      	ldr	r2, [pc, #592]	@ (80097ec <UART_SetConfig+0x2a4>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d028      	beq.n	80095f0 <UART_SetConfig+0xa8>
 800959e:	4a94      	ldr	r2, [pc, #592]	@ (80097f0 <UART_SetConfig+0x2a8>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d01a      	beq.n	80095da <UART_SetConfig+0x92>
 80095a4:	4a93      	ldr	r2, [pc, #588]	@ (80097f4 <UART_SetConfig+0x2ac>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d017      	beq.n	80095da <UART_SetConfig+0x92>
 80095aa:	4a93      	ldr	r2, [pc, #588]	@ (80097f8 <UART_SetConfig+0x2b0>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d014      	beq.n	80095da <UART_SetConfig+0x92>
 80095b0:	4a92      	ldr	r2, [pc, #584]	@ (80097fc <UART_SetConfig+0x2b4>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d011      	beq.n	80095da <UART_SetConfig+0x92>
 80095b6:	4a92      	ldr	r2, [pc, #584]	@ (8009800 <UART_SetConfig+0x2b8>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d019      	beq.n	80095f0 <UART_SetConfig+0xa8>
 80095bc:	4a91      	ldr	r2, [pc, #580]	@ (8009804 <UART_SetConfig+0x2bc>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d00b      	beq.n	80095da <UART_SetConfig+0x92>
 80095c2:	4a91      	ldr	r2, [pc, #580]	@ (8009808 <UART_SetConfig+0x2c0>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d008      	beq.n	80095da <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 80095c8:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80095ca:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80095cc:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 80095d0:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80095d2:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80095d4:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 80095d6:	b006      	add	sp, #24
 80095d8:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095da:	4b8c      	ldr	r3, [pc, #560]	@ (800980c <UART_SetConfig+0x2c4>)
 80095dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095de:	f003 0307 	and.w	r3, r3, #7
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	d8f0      	bhi.n	80095c8 <UART_SetConfig+0x80>
 80095e6:	e8df f003 	tbb	[pc, r3]
 80095ea:	7e9e      	.short	0x7e9e
 80095ec:	785f9189 	.word	0x785f9189
 80095f0:	4b86      	ldr	r3, [pc, #536]	@ (800980c <UART_SetConfig+0x2c4>)
 80095f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095f8:	2b28      	cmp	r3, #40	@ 0x28
 80095fa:	d8e5      	bhi.n	80095c8 <UART_SetConfig+0x80>
 80095fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009604 <UART_SetConfig+0xbc>)
 80095fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009602:	bf00      	nop
 8009604:	08009781 	.word	0x08009781
 8009608:	080095c9 	.word	0x080095c9
 800960c:	080095c9 	.word	0x080095c9
 8009610:	080095c9 	.word	0x080095c9
 8009614:	080095c9 	.word	0x080095c9
 8009618:	080095c9 	.word	0x080095c9
 800961c:	080095c9 	.word	0x080095c9
 8009620:	080095c9 	.word	0x080095c9
 8009624:	080096e7 	.word	0x080096e7
 8009628:	080095c9 	.word	0x080095c9
 800962c:	080095c9 	.word	0x080095c9
 8009630:	080095c9 	.word	0x080095c9
 8009634:	080095c9 	.word	0x080095c9
 8009638:	080095c9 	.word	0x080095c9
 800963c:	080095c9 	.word	0x080095c9
 8009640:	080095c9 	.word	0x080095c9
 8009644:	080096fd 	.word	0x080096fd
 8009648:	080095c9 	.word	0x080095c9
 800964c:	080095c9 	.word	0x080095c9
 8009650:	080095c9 	.word	0x080095c9
 8009654:	080095c9 	.word	0x080095c9
 8009658:	080095c9 	.word	0x080095c9
 800965c:	080095c9 	.word	0x080095c9
 8009660:	080095c9 	.word	0x080095c9
 8009664:	0800970d 	.word	0x0800970d
 8009668:	080095c9 	.word	0x080095c9
 800966c:	080095c9 	.word	0x080095c9
 8009670:	080095c9 	.word	0x080095c9
 8009674:	080095c9 	.word	0x080095c9
 8009678:	080095c9 	.word	0x080095c9
 800967c:	080095c9 	.word	0x080095c9
 8009680:	080095c9 	.word	0x080095c9
 8009684:	080096a9 	.word	0x080096a9
 8009688:	080095c9 	.word	0x080095c9
 800968c:	080095c9 	.word	0x080095c9
 8009690:	080095c9 	.word	0x080095c9
 8009694:	080095c9 	.word	0x080095c9
 8009698:	080095c9 	.word	0x080095c9
 800969c:	080095c9 	.word	0x080095c9
 80096a0:	080095c9 	.word	0x080095c9
 80096a4:	080096db 	.word	0x080096db
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096a8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 80096ac:	4858      	ldr	r0, [pc, #352]	@ (8009810 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096ae:	d047      	beq.n	8009740 <UART_SetConfig+0x1f8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096b0:	4a58      	ldr	r2, [pc, #352]	@ (8009814 <UART_SetConfig+0x2cc>)
 80096b2:	6863      	ldr	r3, [r4, #4]
 80096b4:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096b8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096bc:	fbb0 f0f1 	udiv	r0, r0, r1
 80096c0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80096c4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096c8:	f1a0 0310 	sub.w	r3, r0, #16
 80096cc:	4293      	cmp	r3, r2
 80096ce:	f63f af7b 	bhi.w	80095c8 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 80096d6:	2000      	movs	r0, #0
 80096d8:	e777      	b.n	80095ca <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096da:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80096de:	d02f      	beq.n	8009740 <UART_SetConfig+0x1f8>
        pclk = (uint32_t) LSE_VALUE;
 80096e0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80096e4:	e7e4      	b.n	80096b0 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096e6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80096ea:	d022      	beq.n	8009732 <UART_SetConfig+0x1ea>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ec:	4668      	mov	r0, sp
 80096ee:	f7fe fc1b 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096f2:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d0ee      	beq.n	80096d6 <UART_SetConfig+0x18e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096f8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80096fa:	e7d9      	b.n	80096b0 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096fc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009700:	d04f      	beq.n	80097a2 <UART_SetConfig+0x25a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009702:	a803      	add	r0, sp, #12
 8009704:	f7fe fcaa 	bl	800805c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009708:	9804      	ldr	r0, [sp, #16]
        break;
 800970a:	e7f3      	b.n	80096f4 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800970c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009710:	d03c      	beq.n	800978c <UART_SetConfig+0x244>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009712:	4b3e      	ldr	r3, [pc, #248]	@ (800980c <UART_SetConfig+0x2c4>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	0691      	lsls	r1, r2, #26
 8009718:	d52d      	bpl.n	8009776 <UART_SetConfig+0x22e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	483e      	ldr	r0, [pc, #248]	@ (8009818 <UART_SetConfig+0x2d0>)
 800971e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009722:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8009724:	e7c4      	b.n	80096b0 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009726:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800972a:	d026      	beq.n	800977a <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK1Freq();
 800972c:	f7fd fb36 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
        break;
 8009730:	e7e0      	b.n	80096f4 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009732:	4668      	mov	r0, sp
 8009734:	f7fe fbf8 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009738:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800973a:	2800      	cmp	r0, #0
 800973c:	d0cb      	beq.n	80096d6 <UART_SetConfig+0x18e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800973e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009740:	4b34      	ldr	r3, [pc, #208]	@ (8009814 <UART_SetConfig+0x2cc>)
 8009742:	6862      	ldr	r2, [r4, #4]
 8009744:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8009748:	0853      	lsrs	r3, r2, #1
 800974a:	fbb0 f0f1 	udiv	r0, r0, r1
 800974e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009752:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009756:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800975a:	f1a3 0210 	sub.w	r2, r3, #16
 800975e:	428a      	cmp	r2, r1
 8009760:	f63f af32 	bhi.w	80095c8 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009764:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009768:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800976c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800976e:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8009770:	4313      	orrs	r3, r2
 8009772:	60cb      	str	r3, [r1, #12]
 8009774:	e7af      	b.n	80096d6 <UART_SetConfig+0x18e>
          pclk = (uint32_t) HSI_VALUE;
 8009776:	4828      	ldr	r0, [pc, #160]	@ (8009818 <UART_SetConfig+0x2d0>)
 8009778:	e79a      	b.n	80096b0 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 800977a:	f7fd fb0f 	bl	8006d9c <HAL_RCC_GetPCLK1Freq>
        break;
 800977e:	e7dc      	b.n	800973a <UART_SetConfig+0x1f2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009780:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009784:	d012      	beq.n	80097ac <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009786:	f7fd fb51 	bl	8006e2c <HAL_RCC_GetPCLK2Freq>
        break;
 800978a:	e7b3      	b.n	80096f4 <UART_SetConfig+0x1ac>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800978c:	4b1f      	ldr	r3, [pc, #124]	@ (800980c <UART_SetConfig+0x2c4>)
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	0690      	lsls	r0, r2, #26
 8009792:	f140 808b 	bpl.w	80098ac <UART_SetConfig+0x364>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	481f      	ldr	r0, [pc, #124]	@ (8009818 <UART_SetConfig+0x2d0>)
 800979a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800979e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80097a0:	e7ce      	b.n	8009740 <UART_SetConfig+0x1f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097a2:	a803      	add	r0, sp, #12
 80097a4:	f7fe fc5a 	bl	800805c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097a8:	9804      	ldr	r0, [sp, #16]
        break;
 80097aa:	e7c6      	b.n	800973a <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 80097ac:	f7fd fb3e 	bl	8006e2c <HAL_RCC_GetPCLK2Freq>
        break;
 80097b0:	e7c3      	b.n	800973a <UART_SetConfig+0x1f2>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097b2:	6898      	ldr	r0, [r3, #8]
 80097b4:	4a0c      	ldr	r2, [pc, #48]	@ (80097e8 <UART_SetConfig+0x2a0>)
 80097b6:	4002      	ands	r2, r0
 80097b8:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097ba:	4914      	ldr	r1, [pc, #80]	@ (800980c <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097bc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c0:	f022 020f 	bic.w	r2, r2, #15
 80097c4:	432a      	orrs	r2, r5
 80097c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097c8:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 80097ca:	f003 0307 	and.w	r3, r3, #7
 80097ce:	2b05      	cmp	r3, #5
 80097d0:	f63f aefa 	bhi.w	80095c8 <UART_SetConfig+0x80>
 80097d4:	e8df f003 	tbb	[pc, r3]
 80097d8:	224e575c 	.word	0x224e575c
 80097dc:	5f62      	.short	0x5f62
 80097de:	bf00      	nop
 80097e0:	cfff69f3 	.word	0xcfff69f3
 80097e4:	58000c00 	.word	0x58000c00
 80097e8:	11fff4ff 	.word	0x11fff4ff
 80097ec:	40011000 	.word	0x40011000
 80097f0:	40004400 	.word	0x40004400
 80097f4:	40004800 	.word	0x40004800
 80097f8:	40004c00 	.word	0x40004c00
 80097fc:	40005000 	.word	0x40005000
 8009800:	40011400 	.word	0x40011400
 8009804:	40007800 	.word	0x40007800
 8009808:	40007c00 	.word	0x40007c00
 800980c:	58024400 	.word	0x58024400
 8009810:	003d0900 	.word	0x003d0900
 8009814:	08070afc 	.word	0x08070afc
 8009818:	03d09000 	.word	0x03d09000
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800981c:	4b24      	ldr	r3, [pc, #144]	@ (80098b0 <UART_SetConfig+0x368>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	0692      	lsls	r2, r2, #26
 8009822:	d43d      	bmi.n	80098a0 <UART_SetConfig+0x358>
          pclk = (uint32_t) HSI_VALUE;
 8009824:	4823      	ldr	r0, [pc, #140]	@ (80098b4 <UART_SetConfig+0x36c>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009826:	4b24      	ldr	r3, [pc, #144]	@ (80098b8 <UART_SetConfig+0x370>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009828:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800982a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800982e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009832:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009836:	4299      	cmp	r1, r3
 8009838:	f63f aec6 	bhi.w	80095c8 <UART_SetConfig+0x80>
 800983c:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8009840:	f63f aec2 	bhi.w	80095c8 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009844:	2300      	movs	r3, #0
 8009846:	4619      	mov	r1, r3
 8009848:	f7f6 ffb6 	bl	80007b8 <__aeabi_uldivmod>
 800984c:	4632      	mov	r2, r6
 800984e:	0209      	lsls	r1, r1, #8
 8009850:	0203      	lsls	r3, r0, #8
 8009852:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009856:	0870      	lsrs	r0, r6, #1
 8009858:	1818      	adds	r0, r3, r0
 800985a:	f04f 0300 	mov.w	r3, #0
 800985e:	f141 0100 	adc.w	r1, r1, #0
 8009862:	f7f6 ffa9 	bl	80007b8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009866:	4b15      	ldr	r3, [pc, #84]	@ (80098bc <UART_SetConfig+0x374>)
 8009868:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800986c:	429a      	cmp	r2, r3
 800986e:	f63f aeab 	bhi.w	80095c8 <UART_SetConfig+0x80>
 8009872:	e72e      	b.n	80096d2 <UART_SetConfig+0x18a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009874:	a803      	add	r0, sp, #12
 8009876:	f7fe fbf1 	bl	800805c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800987a:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 800987c:	2800      	cmp	r0, #0
 800987e:	f43f af2a 	beq.w	80096d6 <UART_SetConfig+0x18e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009882:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009884:	e7cf      	b.n	8009826 <UART_SetConfig+0x2de>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009886:	4668      	mov	r0, sp
 8009888:	f7fe fb4e 	bl	8007f28 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800988c:	9801      	ldr	r0, [sp, #4]
        break;
 800988e:	e7f5      	b.n	800987c <UART_SetConfig+0x334>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009890:	f7fe fb38 	bl	8007f04 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8009894:	e7f2      	b.n	800987c <UART_SetConfig+0x334>
        pclk = (uint32_t) LSE_VALUE;
 8009896:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800989a:	e7c4      	b.n	8009826 <UART_SetConfig+0x2de>
        pclk = (uint32_t) CSI_VALUE;
 800989c:	4808      	ldr	r0, [pc, #32]	@ (80098c0 <UART_SetConfig+0x378>)
 800989e:	e7c2      	b.n	8009826 <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4804      	ldr	r0, [pc, #16]	@ (80098b4 <UART_SetConfig+0x36c>)
 80098a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80098a8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80098aa:	e7bc      	b.n	8009826 <UART_SetConfig+0x2de>
          pclk = (uint32_t) HSI_VALUE;
 80098ac:	4801      	ldr	r0, [pc, #4]	@ (80098b4 <UART_SetConfig+0x36c>)
 80098ae:	e747      	b.n	8009740 <UART_SetConfig+0x1f8>
 80098b0:	58024400 	.word	0x58024400
 80098b4:	03d09000 	.word	0x03d09000
 80098b8:	08070afc 	.word	0x08070afc
 80098bc:	000ffcff 	.word	0x000ffcff
 80098c0:	003d0900 	.word	0x003d0900

080098c4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098c4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80098c6:	071a      	lsls	r2, r3, #28
{
 80098c8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098ca:	d506      	bpl.n	80098da <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098cc:	6801      	ldr	r1, [r0, #0]
 80098ce:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80098d0:	684a      	ldr	r2, [r1, #4]
 80098d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80098d6:	4322      	orrs	r2, r4
 80098d8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098da:	07dc      	lsls	r4, r3, #31
 80098dc:	d506      	bpl.n	80098ec <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098de:	6801      	ldr	r1, [r0, #0]
 80098e0:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80098e2:	684a      	ldr	r2, [r1, #4]
 80098e4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80098e8:	4322      	orrs	r2, r4
 80098ea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098ec:	0799      	lsls	r1, r3, #30
 80098ee:	d506      	bpl.n	80098fe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098f0:	6801      	ldr	r1, [r0, #0]
 80098f2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80098f4:	684a      	ldr	r2, [r1, #4]
 80098f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80098fa:	4322      	orrs	r2, r4
 80098fc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098fe:	075a      	lsls	r2, r3, #29
 8009900:	d506      	bpl.n	8009910 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009902:	6801      	ldr	r1, [r0, #0]
 8009904:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8009906:	684a      	ldr	r2, [r1, #4]
 8009908:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800990c:	4322      	orrs	r2, r4
 800990e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009910:	06dc      	lsls	r4, r3, #27
 8009912:	d506      	bpl.n	8009922 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009914:	6801      	ldr	r1, [r0, #0]
 8009916:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8009918:	688a      	ldr	r2, [r1, #8]
 800991a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800991e:	4322      	orrs	r2, r4
 8009920:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009922:	0699      	lsls	r1, r3, #26
 8009924:	d506      	bpl.n	8009934 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009926:	6801      	ldr	r1, [r0, #0]
 8009928:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800992a:	688a      	ldr	r2, [r1, #8]
 800992c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009930:	4322      	orrs	r2, r4
 8009932:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009934:	065a      	lsls	r2, r3, #25
 8009936:	d50a      	bpl.n	800994e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009938:	6801      	ldr	r1, [r0, #0]
 800993a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800993c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800993e:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009942:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8009946:	ea42 0204 	orr.w	r2, r2, r4
 800994a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800994c:	d00b      	beq.n	8009966 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800994e:	061b      	lsls	r3, r3, #24
 8009950:	d506      	bpl.n	8009960 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009952:	6802      	ldr	r2, [r0, #0]
 8009954:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8009956:	6853      	ldr	r3, [r2, #4]
 8009958:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800995c:	430b      	orrs	r3, r1
 800995e:	6053      	str	r3, [r2, #4]
}
 8009960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009964:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009966:	684a      	ldr	r2, [r1, #4]
 8009968:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800996a:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800996e:	4322      	orrs	r2, r4
 8009970:	604a      	str	r2, [r1, #4]
 8009972:	e7ec      	b.n	800994e <UART_AdvFeatureConfig+0x8a>

08009974 <UART_CheckIdleState>:
{
 8009974:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009976:	2300      	movs	r3, #0
{
 8009978:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800997e:	f7f9 fd9b 	bl	80034b8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009982:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8009984:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009986:	6813      	ldr	r3, [r2, #0]
 8009988:	071b      	lsls	r3, r3, #28
 800998a:	d40f      	bmi.n	80099ac <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800998c:	6813      	ldr	r3, [r2, #0]
 800998e:	0759      	lsls	r1, r3, #29
 8009990:	d431      	bmi.n	80099f6 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009992:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009994:	2220      	movs	r2, #32
  return HAL_OK;
 8009996:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8009998:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800999c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a0:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099a2:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 80099a4:	2300      	movs	r3, #0
 80099a6:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099ac:	69d3      	ldr	r3, [r2, #28]
 80099ae:	0298      	lsls	r0, r3, #10
 80099b0:	d4ec      	bmi.n	800998c <UART_CheckIdleState+0x18>
 80099b2:	e00c      	b.n	80099ce <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099b4:	6819      	ldr	r1, [r3, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	0749      	lsls	r1, r1, #29
 80099ba:	d505      	bpl.n	80099c8 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099bc:	69d9      	ldr	r1, [r3, #28]
 80099be:	0708      	lsls	r0, r1, #28
 80099c0:	d44a      	bmi.n	8009a58 <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099c2:	69d9      	ldr	r1, [r3, #28]
 80099c4:	0509      	lsls	r1, r1, #20
 80099c6:	d475      	bmi.n	8009ab4 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099c8:	69db      	ldr	r3, [r3, #28]
 80099ca:	0298      	lsls	r0, r3, #10
 80099cc:	d4de      	bmi.n	800998c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ce:	f7f9 fd73 	bl	80034b8 <HAL_GetTick>
 80099d2:	1b43      	subs	r3, r0, r5
 80099d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099d8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099da:	d3eb      	bcc.n	80099b4 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099dc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	e843 2100 	strex	r1, r2, [r3]
 80099e8:	2900      	cmp	r1, #0
 80099ea:	d1f7      	bne.n	80099dc <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 80099ec:	2320      	movs	r3, #32
 80099ee:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 80099f2:	2003      	movs	r0, #3
 80099f4:	e7d6      	b.n	80099a4 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099f6:	69d3      	ldr	r3, [r2, #28]
 80099f8:	025b      	lsls	r3, r3, #9
 80099fa:	d4ca      	bmi.n	8009992 <UART_CheckIdleState+0x1e>
 80099fc:	e00d      	b.n	8009a1a <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	0750      	lsls	r0, r2, #29
 8009a02:	d507      	bpl.n	8009a14 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a04:	69da      	ldr	r2, [r3, #28]
 8009a06:	0711      	lsls	r1, r2, #28
 8009a08:	f100 8082 	bmi.w	8009b10 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a0c:	69da      	ldr	r2, [r3, #28]
 8009a0e:	0512      	lsls	r2, r2, #20
 8009a10:	f100 80ac 	bmi.w	8009b6c <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	025b      	lsls	r3, r3, #9
 8009a18:	d4bb      	bmi.n	8009992 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a1a:	f7f9 fd4d 	bl	80034b8 <HAL_GetTick>
 8009a1e:	1b43      	subs	r3, r0, r5
 8009a20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	d3ea      	bcc.n	80099fe <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a2c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	e843 2100 	strex	r1, r2, [r3]
 8009a34:	2900      	cmp	r1, #0
 8009a36:	d1f7      	bne.n	8009a28 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a38:	f103 0208 	add.w	r2, r3, #8
 8009a3c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a40:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	f103 0008 	add.w	r0, r3, #8
 8009a48:	e840 2100 	strex	r1, r2, [r0]
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	d1f3      	bne.n	8009a38 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8009a50:	2320      	movs	r3, #32
 8009a52:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8009a56:	e7cc      	b.n	80099f2 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a58:	2208      	movs	r2, #8
 8009a5a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a60:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a64:	e843 2100 	strex	r1, r2, [r3]
 8009a68:	2900      	cmp	r1, #0
 8009a6a:	d1f7      	bne.n	8009a5c <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a6c:	4856      	ldr	r0, [pc, #344]	@ (8009bc8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	f103 0208 	add.w	r2, r3, #8
 8009a72:	e852 2f00 	ldrex	r2, [r2]
 8009a76:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a78:	f103 0508 	add.w	r5, r3, #8
 8009a7c:	e845 2100 	strex	r1, r2, [r5]
 8009a80:	2900      	cmp	r1, #0
 8009a82:	d1f4      	bne.n	8009a6e <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a84:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009a86:	2a01      	cmp	r2, #1
 8009a88:	d00b      	beq.n	8009aa2 <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a8a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009a8c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a8e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8009a90:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009a94:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a96:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009a98:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a9c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8009aa0:	e79c      	b.n	80099dc <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aaa:	e843 2100 	strex	r1, r2, [r3]
 8009aae:	2900      	cmp	r1, #0
 8009ab0:	d1f7      	bne.n	8009aa2 <UART_CheckIdleState+0x12e>
 8009ab2:	e7ea      	b.n	8009a8a <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ab4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ab8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aba:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009abe:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	e843 2100 	strex	r1, r2, [r3]
 8009ac6:	2900      	cmp	r1, #0
 8009ac8:	d1f7      	bne.n	8009aba <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aca:	483f      	ldr	r0, [pc, #252]	@ (8009bc8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	f103 0208 	add.w	r2, r3, #8
 8009ad0:	e852 2f00 	ldrex	r2, [r2]
 8009ad4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad6:	f103 0508 	add.w	r5, r3, #8
 8009ada:	e845 2100 	strex	r1, r2, [r5]
 8009ade:	2900      	cmp	r1, #0
 8009ae0:	d1f4      	bne.n	8009acc <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009ae4:	2a01      	cmp	r2, #1
 8009ae6:	d00a      	beq.n	8009afe <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009aea:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8009aec:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009aee:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8009af2:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009af8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009afc:	e76e      	b.n	80099dc <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b02:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b06:	e843 2100 	strex	r1, r2, [r3]
 8009b0a:	2900      	cmp	r1, #0
 8009b0c:	d1f7      	bne.n	8009afe <UART_CheckIdleState+0x18a>
 8009b0e:	e7eb      	b.n	8009ae8 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b10:	2208      	movs	r2, #8
 8009b12:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b14:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b18:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1c:	e843 2100 	strex	r1, r2, [r3]
 8009b20:	2900      	cmp	r1, #0
 8009b22:	d1f7      	bne.n	8009b14 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b24:	4828      	ldr	r0, [pc, #160]	@ (8009bc8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b26:	f103 0208 	add.w	r2, r3, #8
 8009b2a:	e852 2f00 	ldrex	r2, [r2]
 8009b2e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b30:	f103 0508 	add.w	r5, r3, #8
 8009b34:	e845 2100 	strex	r1, r2, [r5]
 8009b38:	2900      	cmp	r1, #0
 8009b3a:	d1f4      	bne.n	8009b26 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b3c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009b3e:	2a01      	cmp	r2, #1
 8009b40:	d00b      	beq.n	8009b5a <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b42:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009b44:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b46:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8009b48:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009b4c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b4e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009b50:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b54:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8009b58:	e766      	b.n	8009a28 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b5e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b62:	e843 2100 	strex	r1, r2, [r3]
 8009b66:	2900      	cmp	r1, #0
 8009b68:	d1f7      	bne.n	8009b5a <UART_CheckIdleState+0x1e6>
 8009b6a:	e7ea      	b.n	8009b42 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b70:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b76:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	e843 2100 	strex	r1, r2, [r3]
 8009b7e:	2900      	cmp	r1, #0
 8009b80:	d1f7      	bne.n	8009b72 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b82:	4811      	ldr	r0, [pc, #68]	@ (8009bc8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	f103 0208 	add.w	r2, r3, #8
 8009b88:	e852 2f00 	ldrex	r2, [r2]
 8009b8c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8e:	f103 0508 	add.w	r5, r3, #8
 8009b92:	e845 2100 	strex	r1, r2, [r5]
 8009b96:	2900      	cmp	r1, #0
 8009b98:	d1f4      	bne.n	8009b84 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b9a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009b9c:	2a01      	cmp	r2, #1
 8009b9e:	d00a      	beq.n	8009bb6 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009ba2:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8009ba4:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009ba6:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8009baa:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bae:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bb0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009bb4:	e738      	b.n	8009a28 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bba:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	e843 2100 	strex	r1, r2, [r3]
 8009bc2:	2900      	cmp	r1, #0
 8009bc4:	d1f7      	bne.n	8009bb6 <UART_CheckIdleState+0x242>
 8009bc6:	e7eb      	b.n	8009ba0 <UART_CheckIdleState+0x22c>
 8009bc8:	effffffe 	.word	0xeffffffe

08009bcc <HAL_UART_Init>:
  if (huart == NULL)
 8009bcc:	b380      	cbz	r0, 8009c30 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009bce:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8009bd2:	b510      	push	{r4, lr}
 8009bd4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009bd6:	b333      	cbz	r3, 8009c26 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8009bd8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009bda:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bdc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8009bde:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8009be2:	6813      	ldr	r3, [r2, #0]
 8009be4:	f023 0301 	bic.w	r3, r3, #1
 8009be8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bea:	b9c1      	cbnz	r1, 8009c1e <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bec:	4620      	mov	r0, r4
 8009bee:	f7ff fcab 	bl	8009548 <UART_SetConfig>
 8009bf2:	2801      	cmp	r0, #1
 8009bf4:	d011      	beq.n	8009c1a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bf6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8009bf8:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c08:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	f042 0201 	orr.w	r2, r2, #1
}
 8009c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8009c14:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8009c16:	f7ff bead 	b.w	8009974 <UART_CheckIdleState>
}
 8009c1a:	2001      	movs	r0, #1
 8009c1c:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f7ff fe50 	bl	80098c4 <UART_AdvFeatureConfig>
 8009c24:	e7e2      	b.n	8009bec <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8009c26:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8009c2a:	f7f9 f98f 	bl	8002f4c <HAL_UART_MspInit>
 8009c2e:	e7d3      	b.n	8009bd8 <HAL_UART_Init+0xc>
}
 8009c30:	2001      	movs	r0, #1
 8009c32:	4770      	bx	lr

08009c34 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop

08009c38 <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop

08009c3c <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop

08009c40 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c40:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8009c44:	2a01      	cmp	r2, #1
 8009c46:	d017      	beq.n	8009c78 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c48:	6802      	ldr	r2, [r0, #0]
 8009c4a:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8009c4c:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c4e:	2100      	movs	r1, #0
{
 8009c50:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8009c52:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8009c56:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c58:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009c5a:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c5c:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8009c60:	f024 0401 	bic.w	r4, r4, #1
 8009c64:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c66:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c68:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8009c6a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009c6c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009c70:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8009c74:	bc30      	pop	{r4, r5}
 8009c76:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009c78:	2002      	movs	r0, #2
}
 8009c7a:	4770      	bx	lr

08009c7c <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c7c:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8009c80:	2a01      	cmp	r2, #1
 8009c82:	d037      	beq.n	8009cf4 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c84:	6802      	ldr	r2, [r0, #0]
 8009c86:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8009c88:	2024      	movs	r0, #36	@ 0x24
{
 8009c8a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009c8c:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c90:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c92:	6810      	ldr	r0, [r2, #0]
 8009c94:	f020 0001 	bic.w	r0, r0, #1
 8009c98:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c9a:	6890      	ldr	r0, [r2, #8]
 8009c9c:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8009ca0:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ca2:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ca4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ca6:	b310      	cbz	r0, 8009cee <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ca8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009caa:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cac:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cb0:	4911      	ldr	r1, [pc, #68]	@ (8009cf8 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cb2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cb6:	4d11      	ldr	r5, [pc, #68]	@ (8009cfc <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cb8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cbc:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009cc0:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009cc4:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8009cc6:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cca:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ccc:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009cd0:	fbb1 f1f5 	udiv	r1, r1, r5
 8009cd4:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8009cd8:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8009cda:	2100      	movs	r1, #0
 8009cdc:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ce0:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8009ce2:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009ce4:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009ce8:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8009cec:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009cee:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	e7ef      	b.n	8009cd4 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009cf4:	2002      	movs	r0, #2
}
 8009cf6:	4770      	bx	lr
 8009cf8:	08070b1c 	.word	0x08070b1c
 8009cfc:	08070b14 	.word	0x08070b14

08009d00 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009d00:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8009d04:	2a01      	cmp	r2, #1
 8009d06:	d037      	beq.n	8009d78 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d08:	6802      	ldr	r2, [r0, #0]
 8009d0a:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8009d0c:	2024      	movs	r0, #36	@ 0x24
{
 8009d0e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009d10:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d14:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009d16:	6810      	ldr	r0, [r2, #0]
 8009d18:	f020 0001 	bic.w	r0, r0, #1
 8009d1c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d1e:	6890      	ldr	r0, [r2, #8]
 8009d20:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8009d24:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d26:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d28:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d2a:	b310      	cbz	r0, 8009d72 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d2c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d2e:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d30:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d34:	4911      	ldr	r1, [pc, #68]	@ (8009d7c <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d36:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d3a:	4d11      	ldr	r5, [pc, #68]	@ (8009d80 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d3c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d40:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d44:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d48:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d4a:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d4e:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d50:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d54:	fbb1 f1f5 	udiv	r1, r1, r5
 8009d58:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8009d5c:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8009d5e:	2100      	movs	r1, #0
 8009d60:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d64:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8009d66:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009d68:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009d6c:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8009d70:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009d72:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009d74:	4608      	mov	r0, r1
 8009d76:	e7ef      	b.n	8009d58 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009d78:	2002      	movs	r0, #2
}
 8009d7a:	4770      	bx	lr
 8009d7c:	08070b1c 	.word	0x08070b1c
 8009d80:	08070b14 	.word	0x08070b14

08009d84 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8009d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009d88:	e9d1 3e07 	ldrd	r3, lr, [r1, #28]
 8009d8c:	e9d1 8200 	ldrd	r8, r2, [r1]
 8009d90:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
 8009d92:	ea43 030e 	orr.w	r3, r3, lr
 8009d96:	e9d1 c602 	ldrd	ip, r6, [r1, #8]
 8009d9a:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 8009d9e:	6989      	ldr	r1, [r1, #24]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009da0:	f1b8 0f00 	cmp.w	r8, #0
 8009da4:	d10f      	bne.n	8009dc6 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009da6:	433b      	orrs	r3, r7
 8009da8:	4313      	orrs	r3, r2
 8009daa:	6802      	ldr	r2, [r0, #0]
 8009dac:	ea43 030c 	orr.w	r3, r3, ip
 8009db0:	f36f 020e 	bfc	r2, #0, #15
 8009db4:	4333      	orrs	r3, r6
 8009db6:	432b      	orrs	r3, r5
 8009db8:	4323      	orrs	r3, r4
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009dc6:	ea42 020c 	orr.w	r2, r2, ip
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009dca:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009dcc:	4332      	orrs	r2, r6
 8009dce:	432a      	orrs	r2, r5
 8009dd0:	4322      	orrs	r2, r4
 8009dd2:	430a      	orrs	r2, r1
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009dd4:	6801      	ldr	r1, [r0, #0]
 8009dd6:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8009dda:	430b      	orrs	r3, r1
 8009ddc:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009dde:	6843      	ldr	r3, [r0, #4]
 8009de0:	f36f 030e 	bfc	r3, #0, #15
 8009de4:	4313      	orrs	r3, r2
 8009de6:	6043      	str	r3, [r0, #4]
}
 8009de8:	2000      	movs	r0, #0
 8009dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dee:	bf00      	nop

08009df0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009df0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009df2:	68cc      	ldr	r4, [r1, #12]
 8009df4:	694b      	ldr	r3, [r1, #20]
 8009df6:	3c01      	subs	r4, #1
 8009df8:	688d      	ldr	r5, [r1, #8]
 8009dfa:	698f      	ldr	r7, [r1, #24]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	ea4f 3e04 	mov.w	lr, r4, lsl #12
 8009e02:	684c      	ldr	r4, [r1, #4]
 8009e04:	680e      	ldr	r6, [r1, #0]
 8009e06:	3d01      	subs	r5, #1
 8009e08:	3c01      	subs	r4, #1
 8009e0a:	051b      	lsls	r3, r3, #20
 8009e0c:	022d      	lsls	r5, r5, #8
 8009e0e:	3e01      	subs	r6, #1
 8009e10:	ea4f 1c04 	mov.w	ip, r4, lsl #4
 8009e14:	690c      	ldr	r4, [r1, #16]
 8009e16:	1e79      	subs	r1, r7, #1
 8009e18:	3c01      	subs	r4, #1
 8009e1a:	0609      	lsls	r1, r1, #24
 8009e1c:	0424      	lsls	r4, r4, #16
  if (Bank == FMC_SDRAM_BANK1)
 8009e1e:	b972      	cbnz	r2, 8009e3e <FMC_SDRAM_Timing_Init+0x4e>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009e20:	ea4e 0303 	orr.w	r3, lr, r3
 8009e24:	6882      	ldr	r2, [r0, #8]
 8009e26:	4333      	orrs	r3, r6
 8009e28:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8009e2c:	ea43 030c 	orr.w	r3, r3, ip
 8009e30:	432b      	orrs	r3, r5
 8009e32:	4323      	orrs	r3, r4
 8009e34:	430b      	orrs	r3, r1
 8009e36:	4313      	orrs	r3, r2
 8009e38:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009e3e:	ea4e 0e03 	orr.w	lr, lr, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009e42:	ea4c 0305 	orr.w	r3, ip, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009e46:	4a08      	ldr	r2, [pc, #32]	@ (8009e68 <FMC_SDRAM_Timing_Init+0x78>)
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009e48:	4333      	orrs	r3, r6
 8009e4a:	4323      	orrs	r3, r4
 8009e4c:	430b      	orrs	r3, r1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009e4e:	6881      	ldr	r1, [r0, #8]
 8009e50:	400a      	ands	r2, r1
 8009e52:	ea4e 0202 	orr.w	r2, lr, r2
 8009e56:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009e58:	68c2      	ldr	r2, [r0, #12]
 8009e5a:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60c3      	str	r3, [r0, #12]
}
 8009e62:	2000      	movs	r0, #0
 8009e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e66:	bf00      	nop
 8009e68:	ff0f0fff 	.word	0xff0f0fff

08009e6c <arm_fill_f32>:
 8009e6c:	b410      	push	{r4}
 8009e6e:	088c      	lsrs	r4, r1, #2
 8009e70:	d010      	beq.n	8009e94 <arm_fill_f32+0x28>
 8009e72:	f100 0310 	add.w	r3, r0, #16
 8009e76:	4622      	mov	r2, r4
 8009e78:	3a01      	subs	r2, #1
 8009e7a:	ed03 0a04 	vstr	s0, [r3, #-16]
 8009e7e:	ed03 0a03 	vstr	s0, [r3, #-12]
 8009e82:	f103 0310 	add.w	r3, r3, #16
 8009e86:	ed03 0a06 	vstr	s0, [r3, #-24]	@ 0xffffffe8
 8009e8a:	ed03 0a05 	vstr	s0, [r3, #-20]	@ 0xffffffec
 8009e8e:	d1f3      	bne.n	8009e78 <arm_fill_f32+0xc>
 8009e90:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8009e94:	f011 0103 	ands.w	r1, r1, #3
 8009e98:	d003      	beq.n	8009ea2 <arm_fill_f32+0x36>
 8009e9a:	3901      	subs	r1, #1
 8009e9c:	eca0 0a01 	vstmia	r0!, {s0}
 8009ea0:	d1fb      	bne.n	8009e9a <arm_fill_f32+0x2e>
 8009ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <arm_copy_f32>:
 8009ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eac:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8009eb0:	d01e      	beq.n	8009ef0 <arm_copy_f32+0x48>
 8009eb2:	f100 0410 	add.w	r4, r0, #16
 8009eb6:	f101 0310 	add.w	r3, r1, #16
 8009eba:	4645      	mov	r5, r8
 8009ebc:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8009ec0:	3d01      	subs	r5, #1
 8009ec2:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8009ec6:	f103 0310 	add.w	r3, r3, #16
 8009eca:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8009ece:	f104 0410 	add.w	r4, r4, #16
 8009ed2:	f854 6c14 	ldr.w	r6, [r4, #-20]
 8009ed6:	f843 cc20 	str.w	ip, [r3, #-32]
 8009eda:	f843 ec1c 	str.w	lr, [r3, #-28]
 8009ede:	f843 7c18 	str.w	r7, [r3, #-24]
 8009ee2:	f843 6c14 	str.w	r6, [r3, #-20]
 8009ee6:	d1e9      	bne.n	8009ebc <arm_copy_f32+0x14>
 8009ee8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8009eec:	4440      	add	r0, r8
 8009eee:	4441      	add	r1, r8
 8009ef0:	f012 0203 	ands.w	r2, r2, #3
 8009ef4:	d005      	beq.n	8009f02 <arm_copy_f32+0x5a>
 8009ef6:	f850 3b04 	ldr.w	r3, [r0], #4
 8009efa:	3a01      	subs	r2, #1
 8009efc:	f841 3b04 	str.w	r3, [r1], #4
 8009f00:	d1f9      	bne.n	8009ef6 <arm_copy_f32+0x4e>
 8009f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f06:	bf00      	nop

08009f08 <arm_rfft_fast_init_f32>:
 8009f08:	084b      	lsrs	r3, r1, #1
 8009f0a:	2b80      	cmp	r3, #128	@ 0x80
 8009f0c:	b430      	push	{r4, r5}
 8009f0e:	8201      	strh	r1, [r0, #16]
 8009f10:	8003      	strh	r3, [r0, #0]
 8009f12:	d06f      	beq.n	8009ff4 <arm_rfft_fast_init_f32+0xec>
 8009f14:	d916      	bls.n	8009f44 <arm_rfft_fast_init_f32+0x3c>
 8009f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f1a:	d05e      	beq.n	8009fda <arm_rfft_fast_init_f32+0xd2>
 8009f1c:	d935      	bls.n	8009f8a <arm_rfft_fast_init_f32+0x82>
 8009f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f22:	d025      	beq.n	8009f70 <arm_rfft_fast_init_f32+0x68>
 8009f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f28:	d112      	bne.n	8009f50 <arm_rfft_fast_init_f32+0x48>
 8009f2a:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 8009f2e:	4c37      	ldr	r4, [pc, #220]	@ (800a00c <arm_rfft_fast_init_f32+0x104>)
 8009f30:	4937      	ldr	r1, [pc, #220]	@ (800a010 <arm_rfft_fast_init_f32+0x108>)
 8009f32:	2300      	movs	r3, #0
 8009f34:	4a37      	ldr	r2, [pc, #220]	@ (800a014 <arm_rfft_fast_init_f32+0x10c>)
 8009f36:	8185      	strh	r5, [r0, #12]
 8009f38:	6084      	str	r4, [r0, #8]
 8009f3a:	6041      	str	r1, [r0, #4]
 8009f3c:	6142      	str	r2, [r0, #20]
 8009f3e:	b258      	sxtb	r0, r3
 8009f40:	bc30      	pop	{r4, r5}
 8009f42:	4770      	bx	lr
 8009f44:	2b20      	cmp	r3, #32
 8009f46:	d030      	beq.n	8009faa <arm_rfft_fast_init_f32+0xa2>
 8009f48:	2b40      	cmp	r3, #64	@ 0x40
 8009f4a:	d005      	beq.n	8009f58 <arm_rfft_fast_init_f32+0x50>
 8009f4c:	2b10      	cmp	r3, #16
 8009f4e:	d038      	beq.n	8009fc2 <arm_rfft_fast_init_f32+0xba>
 8009f50:	23ff      	movs	r3, #255	@ 0xff
 8009f52:	bc30      	pop	{r4, r5}
 8009f54:	b258      	sxtb	r0, r3
 8009f56:	4770      	bx	lr
 8009f58:	2538      	movs	r5, #56	@ 0x38
 8009f5a:	4c2f      	ldr	r4, [pc, #188]	@ (800a018 <arm_rfft_fast_init_f32+0x110>)
 8009f5c:	492f      	ldr	r1, [pc, #188]	@ (800a01c <arm_rfft_fast_init_f32+0x114>)
 8009f5e:	2300      	movs	r3, #0
 8009f60:	4a2f      	ldr	r2, [pc, #188]	@ (800a020 <arm_rfft_fast_init_f32+0x118>)
 8009f62:	8185      	strh	r5, [r0, #12]
 8009f64:	6084      	str	r4, [r0, #8]
 8009f66:	6041      	str	r1, [r0, #4]
 8009f68:	6142      	str	r2, [r0, #20]
 8009f6a:	b258      	sxtb	r0, r3
 8009f6c:	bc30      	pop	{r4, r5}
 8009f6e:	4770      	bx	lr
 8009f70:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 8009f74:	4c2b      	ldr	r4, [pc, #172]	@ (800a024 <arm_rfft_fast_init_f32+0x11c>)
 8009f76:	492c      	ldr	r1, [pc, #176]	@ (800a028 <arm_rfft_fast_init_f32+0x120>)
 8009f78:	2300      	movs	r3, #0
 8009f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800a02c <arm_rfft_fast_init_f32+0x124>)
 8009f7c:	8185      	strh	r5, [r0, #12]
 8009f7e:	6084      	str	r4, [r0, #8]
 8009f80:	6041      	str	r1, [r0, #4]
 8009f82:	6142      	str	r2, [r0, #20]
 8009f84:	b258      	sxtb	r0, r3
 8009f86:	bc30      	pop	{r4, r5}
 8009f88:	4770      	bx	lr
 8009f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f8e:	d1df      	bne.n	8009f50 <arm_rfft_fast_init_f32+0x48>
 8009f90:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 8009f94:	4c26      	ldr	r4, [pc, #152]	@ (800a030 <arm_rfft_fast_init_f32+0x128>)
 8009f96:	4927      	ldr	r1, [pc, #156]	@ (800a034 <arm_rfft_fast_init_f32+0x12c>)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4a27      	ldr	r2, [pc, #156]	@ (800a038 <arm_rfft_fast_init_f32+0x130>)
 8009f9c:	8185      	strh	r5, [r0, #12]
 8009f9e:	6084      	str	r4, [r0, #8]
 8009fa0:	6041      	str	r1, [r0, #4]
 8009fa2:	6142      	str	r2, [r0, #20]
 8009fa4:	b258      	sxtb	r0, r3
 8009fa6:	bc30      	pop	{r4, r5}
 8009fa8:	4770      	bx	lr
 8009faa:	2530      	movs	r5, #48	@ 0x30
 8009fac:	4c23      	ldr	r4, [pc, #140]	@ (800a03c <arm_rfft_fast_init_f32+0x134>)
 8009fae:	4924      	ldr	r1, [pc, #144]	@ (800a040 <arm_rfft_fast_init_f32+0x138>)
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	4a24      	ldr	r2, [pc, #144]	@ (800a044 <arm_rfft_fast_init_f32+0x13c>)
 8009fb4:	8185      	strh	r5, [r0, #12]
 8009fb6:	6084      	str	r4, [r0, #8]
 8009fb8:	6041      	str	r1, [r0, #4]
 8009fba:	6142      	str	r2, [r0, #20]
 8009fbc:	b258      	sxtb	r0, r3
 8009fbe:	bc30      	pop	{r4, r5}
 8009fc0:	4770      	bx	lr
 8009fc2:	2514      	movs	r5, #20
 8009fc4:	4c20      	ldr	r4, [pc, #128]	@ (800a048 <arm_rfft_fast_init_f32+0x140>)
 8009fc6:	4921      	ldr	r1, [pc, #132]	@ (800a04c <arm_rfft_fast_init_f32+0x144>)
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4a21      	ldr	r2, [pc, #132]	@ (800a050 <arm_rfft_fast_init_f32+0x148>)
 8009fcc:	8185      	strh	r5, [r0, #12]
 8009fce:	6084      	str	r4, [r0, #8]
 8009fd0:	6041      	str	r1, [r0, #4]
 8009fd2:	6142      	str	r2, [r0, #20]
 8009fd4:	b258      	sxtb	r0, r3
 8009fd6:	bc30      	pop	{r4, r5}
 8009fd8:	4770      	bx	lr
 8009fda:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 8009fde:	4c1d      	ldr	r4, [pc, #116]	@ (800a054 <arm_rfft_fast_init_f32+0x14c>)
 8009fe0:	491d      	ldr	r1, [pc, #116]	@ (800a058 <arm_rfft_fast_init_f32+0x150>)
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800a05c <arm_rfft_fast_init_f32+0x154>)
 8009fe6:	8185      	strh	r5, [r0, #12]
 8009fe8:	6084      	str	r4, [r0, #8]
 8009fea:	6041      	str	r1, [r0, #4]
 8009fec:	6142      	str	r2, [r0, #20]
 8009fee:	b258      	sxtb	r0, r3
 8009ff0:	bc30      	pop	{r4, r5}
 8009ff2:	4770      	bx	lr
 8009ff4:	25d0      	movs	r5, #208	@ 0xd0
 8009ff6:	4c1a      	ldr	r4, [pc, #104]	@ (800a060 <arm_rfft_fast_init_f32+0x158>)
 8009ff8:	491a      	ldr	r1, [pc, #104]	@ (800a064 <arm_rfft_fast_init_f32+0x15c>)
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	4a1a      	ldr	r2, [pc, #104]	@ (800a068 <arm_rfft_fast_init_f32+0x160>)
 8009ffe:	8185      	strh	r5, [r0, #12]
 800a000:	6084      	str	r4, [r0, #8]
 800a002:	6041      	str	r1, [r0, #4]
 800a004:	6142      	str	r2, [r0, #20]
 800a006:	b258      	sxtb	r0, r3
 800a008:	bc30      	pop	{r4, r5}
 800a00a:	4770      	bx	lr
 800a00c:	0807f92c 	.word	0x0807f92c
 800a010:	08070b24 	.word	0x08070b24
 800a014:	08076c94 	.word	0x08076c94
 800a018:	08074c24 	.word	0x08074c24
 800a01c:	080816ec 	.word	0x080816ec
 800a020:	08083bdc 	.word	0x08083bdc
 800a024:	0807d614 	.word	0x0807d614
 800a028:	0807b514 	.word	0x0807b514
 800a02c:	08074c94 	.word	0x08074c94
 800a030:	0808386c 	.word	0x0808386c
 800a034:	0807ac94 	.word	0x0807ac94
 800a038:	080818ec 	.word	0x080818ec
 800a03c:	0807e4cc 	.word	0x0807e4cc
 800a040:	0807d514 	.word	0x0807d514
 800a044:	08074b24 	.word	0x08074b24
 800a048:	0807e424 	.word	0x0807e424
 800a04c:	0807b494 	.word	0x0807b494
 800a050:	0807e44c 	.word	0x0807e44c
 800a054:	080820ec 	.word	0x080820ec
 800a058:	0807e92c 	.word	0x0807e92c
 800a05c:	0808246c 	.word	0x0808246c
 800a060:	08083ddc 	.word	0x08083ddc
 800a064:	0807e52c 	.word	0x0807e52c
 800a068:	0808346c 	.word	0x0808346c

0800a06c <arm_rfft_fast_f32>:
 800a06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a070:	8a05      	ldrh	r5, [r0, #16]
 800a072:	4606      	mov	r6, r0
 800a074:	4690      	mov	r8, r2
 800a076:	460c      	mov	r4, r1
 800a078:	086d      	lsrs	r5, r5, #1
 800a07a:	8005      	strh	r5, [r0, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d15e      	bne.n	800a13e <arm_rfft_fast_f32+0xd2>
 800a080:	461a      	mov	r2, r3
 800a082:	2301      	movs	r3, #1
 800a084:	f000 fbe0 	bl	800a848 <arm_cfft_f32>
 800a088:	edd4 7a00 	vldr	s15, [r4]
 800a08c:	ed94 7a01 	vldr	s14, [r4, #4]
 800a090:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800a094:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a098:	8837      	ldrh	r7, [r6, #0]
 800a09a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a09e:	6975      	ldr	r5, [r6, #20]
 800a0a0:	3f01      	subs	r7, #1
 800a0a2:	eef0 3a46 	vmov.f32	s7, s12
 800a0a6:	3510      	adds	r5, #16
 800a0a8:	f108 0610 	add.w	r6, r8, #16
 800a0ac:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a0b0:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 800a0b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0b8:	f104 0310 	add.w	r3, r4, #16
 800a0bc:	3808      	subs	r0, #8
 800a0be:	ee26 7a86 	vmul.f32	s14, s13, s12
 800a0c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a0c6:	ed88 7a00 	vstr	s14, [r8]
 800a0ca:	edc8 7a01 	vstr	s15, [r8, #4]
 800a0ce:	edd0 6a02 	vldr	s13, [r0, #8]
 800a0d2:	3f01      	subs	r7, #1
 800a0d4:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a0d8:	f1a0 0008 	sub.w	r0, r0, #8
 800a0dc:	ed13 7a01 	vldr	s14, [r3, #-4]
 800a0e0:	f105 0508 	add.w	r5, r5, #8
 800a0e4:	ee76 7ac5 	vsub.f32	s15, s13, s10
 800a0e8:	ed15 6a04 	vldr	s12, [r5, #-16]
 800a0ec:	edd0 5a05 	vldr	s11, [r0, #20]
 800a0f0:	ee36 5a85 	vadd.f32	s10, s13, s10
 800a0f4:	ed55 6a03 	vldr	s13, [r5, #-12]
 800a0f8:	f103 0308 	add.w	r3, r3, #8
 800a0fc:	ee35 4a87 	vadd.f32	s8, s11, s14
 800a100:	f106 0608 	add.w	r6, r6, #8
 800a104:	ee66 4a27 	vmul.f32	s9, s12, s15
 800a108:	ee77 5a65 	vsub.f32	s11, s14, s11
 800a10c:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800a110:	ee34 5a85 	vadd.f32	s10, s9, s10
 800a114:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a118:	ee66 6a84 	vmul.f32	s13, s13, s8
 800a11c:	ee77 7a25 	vadd.f32	s15, s14, s11
 800a120:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a124:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a128:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800a12c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a130:	ed46 6a04 	vstr	s13, [r6, #-16]
 800a134:	ed46 7a03 	vstr	s15, [r6, #-12]
 800a138:	d1c9      	bne.n	800a0ce <arm_rfft_fast_f32+0x62>
 800a13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a13e:	edd1 7a00 	vldr	s15, [r1]
 800a142:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800a146:	edd1 6a01 	vldr	s13, [r1, #4]
 800a14a:	1e68      	subs	r0, r5, #1
 800a14c:	6975      	ldr	r5, [r6, #20]
 800a14e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a152:	00c1      	lsls	r1, r0, #3
 800a154:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a158:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a15c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a160:	ed82 7a00 	vstr	s14, [r2]
 800a164:	edc2 7a01 	vstr	s15, [r2, #4]
 800a168:	b3e0      	cbz	r0, 800a1e4 <arm_rfft_fast_f32+0x178>
 800a16a:	3908      	subs	r1, #8
 800a16c:	f104 0210 	add.w	r2, r4, #16
 800a170:	3510      	adds	r5, #16
 800a172:	440c      	add	r4, r1
 800a174:	f108 0110 	add.w	r1, r8, #16
 800a178:	ed94 7a02 	vldr	s14, [r4, #8]
 800a17c:	3801      	subs	r0, #1
 800a17e:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a182:	f1a4 0408 	sub.w	r4, r4, #8
 800a186:	ed15 6a02 	vldr	s12, [r5, #-8]
 800a18a:	f102 0208 	add.w	r2, r2, #8
 800a18e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800a192:	ed94 4a05 	vldr	s8, [r4, #20]
 800a196:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a19a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800a19e:	ed55 5a01 	vldr	s11, [r5, #-4]
 800a1a2:	f101 0108 	add.w	r1, r1, #8
 800a1a6:	ee26 3a27 	vmul.f32	s6, s12, s15
 800a1aa:	f105 0508 	add.w	r5, r5, #8
 800a1ae:	ee74 4a05 	vadd.f32	s9, s8, s10
 800a1b2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800a1b6:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a1ba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a1be:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a1c2:	ee77 7a05 	vadd.f32	s15, s14, s10
 800a1c6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800a1ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a1ce:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800a1d2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a1d6:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a1da:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a1de:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a1e2:	d1c9      	bne.n	800a178 <arm_rfft_fast_f32+0x10c>
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	4641      	mov	r1, r8
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f0:	f000 bb2a 	b.w	800a848 <arm_cfft_f32>

0800a1f4 <arm_cfft_radix8by2_f32>:
 800a1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f8:	ed2d 8b06 	vpush	{d8-d10}
 800a1fc:	f8b0 e000 	ldrh.w	lr, [r0]
 800a200:	4607      	mov	r7, r0
 800a202:	6842      	ldr	r2, [r0, #4]
 800a204:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800a208:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800a20c:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800a210:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800a214:	f000 80af 	beq.w	800a376 <arm_cfft_radix8by2_f32+0x182>
 800a218:	3310      	adds	r3, #16
 800a21a:	3210      	adds	r2, #16
 800a21c:	f101 0610 	add.w	r6, r1, #16
 800a220:	f108 0510 	add.w	r5, r8, #16
 800a224:	18cc      	adds	r4, r1, r3
 800a226:	4443      	add	r3, r8
 800a228:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a22c:	f1be 0e01 	subs.w	lr, lr, #1
 800a230:	ed56 4a04 	vldr	s9, [r6, #-16]
 800a234:	f104 0410 	add.w	r4, r4, #16
 800a238:	ed55 7a02 	vldr	s15, [r5, #-8]
 800a23c:	f106 0610 	add.w	r6, r6, #16
 800a240:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800a244:	ed53 0a04 	vldr	s1, [r3, #-16]
 800a248:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a24c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a250:	ed13 3a02 	vldr	s6, [r3, #-8]
 800a254:	f102 0210 	add.w	r2, r2, #16
 800a258:	ed15 7a03 	vldr	s14, [r5, #-12]
 800a25c:	f103 0310 	add.w	r3, r3, #16
 800a260:	ed55 2a01 	vldr	s5, [r5, #-4]
 800a264:	f105 0510 	add.w	r5, r5, #16
 800a268:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800a26c:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800a270:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800a274:	ee33 8a83 	vadd.f32	s16, s7, s6
 800a278:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800a27c:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800a280:	ee34 0a06 	vadd.f32	s0, s8, s12
 800a284:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800a288:	ee76 aa87 	vadd.f32	s21, s13, s14
 800a28c:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800a290:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a294:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800a298:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800a29c:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800a2a0:	ee71 8a05 	vadd.f32	s17, s2, s10
 800a2a4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800a2a8:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800a2ac:	ee72 9a22 	vadd.f32	s19, s4, s5
 800a2b0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a2b4:	ee35 5a41 	vsub.f32	s10, s10, s2
 800a2b8:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800a2bc:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800a2c0:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a2c4:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 800a2c8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800a2cc:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800a2d0:	ee72 7a62 	vsub.f32	s15, s4, s5
 800a2d4:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 800a2d8:	ee73 2a63 	vsub.f32	s5, s6, s7
 800a2dc:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800a2e0:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800a2e4:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800a2e8:	ee24 3a84 	vmul.f32	s6, s9, s8
 800a2ec:	ee27 2a26 	vmul.f32	s4, s14, s13
 800a2f0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800a2f4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800a2f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a2fc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a300:	ee65 6a26 	vmul.f32	s13, s10, s13
 800a304:	ee25 5a04 	vmul.f32	s10, s10, s8
 800a308:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a30c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a310:	ee33 4a02 	vadd.f32	s8, s6, s4
 800a314:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800a318:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800a31c:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800a320:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800a324:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800a328:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800a32c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800a330:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800a334:	ee27 4a87 	vmul.f32	s8, s15, s14
 800a338:	ee61 5a87 	vmul.f32	s11, s3, s14
 800a33c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a340:	ee22 5a87 	vmul.f32	s10, s5, s14
 800a344:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a348:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a34c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800a350:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a354:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a358:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a35c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a360:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800a364:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800a368:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800a36c:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800a370:	f47f af5a 	bne.w	800a228 <arm_cfft_radix8by2_f32+0x34>
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	fa1f f48c 	uxth.w	r4, ip
 800a37a:	4608      	mov	r0, r1
 800a37c:	2302      	movs	r3, #2
 800a37e:	4621      	mov	r1, r4
 800a380:	f000 fcac 	bl	800acdc <arm_radix8_butterfly_f32>
 800a384:	4640      	mov	r0, r8
 800a386:	4621      	mov	r1, r4
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	2302      	movs	r3, #2
 800a38c:	ecbd 8b06 	vpop	{d8-d10}
 800a390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a394:	f000 bca2 	b.w	800acdc <arm_radix8_butterfly_f32>

0800a398 <arm_cfft_radix8by4_f32>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	ed2d 8b06 	vpush	{d8-d10}
 800a3a0:	8804      	ldrh	r4, [r0, #0]
 800a3a2:	b08f      	sub	sp, #60	@ 0x3c
 800a3a4:	ed91 6a00 	vldr	s12, [r1]
 800a3a8:	460a      	mov	r2, r1
 800a3aa:	0864      	lsrs	r4, r4, #1
 800a3ac:	ed91 7a01 	vldr	s14, [r1, #4]
 800a3b0:	9101      	str	r1, [sp, #4]
 800a3b2:	00a3      	lsls	r3, r4, #2
 800a3b4:	9104      	str	r1, [sp, #16]
 800a3b6:	0864      	lsrs	r4, r4, #1
 800a3b8:	6841      	ldr	r1, [r0, #4]
 800a3ba:	900c      	str	r0, [sp, #48]	@ 0x30
 800a3bc:	4625      	mov	r5, r4
 800a3be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a3c0:	f101 0408 	add.w	r4, r1, #8
 800a3c4:	f101 0610 	add.w	r6, r1, #16
 800a3c8:	9406      	str	r4, [sp, #24]
 800a3ca:	18d4      	adds	r4, r2, r3
 800a3cc:	1eaa      	subs	r2, r5, #2
 800a3ce:	f101 0518 	add.w	r5, r1, #24
 800a3d2:	18e0      	adds	r0, r4, r3
 800a3d4:	ed94 4a00 	vldr	s8, [r4]
 800a3d8:	edd4 3a01 	vldr	s7, [r4, #4]
 800a3dc:	46a6      	mov	lr, r4
 800a3de:	edd0 6a00 	vldr	s13, [r0]
 800a3e2:	18c7      	adds	r7, r0, r3
 800a3e4:	edd0 7a01 	vldr	s15, [r0, #4]
 800a3e8:	46a0      	mov	r8, r4
 800a3ea:	ee76 5a26 	vadd.f32	s11, s12, s13
 800a3ee:	edd7 4a00 	vldr	s9, [r7]
 800a3f2:	9402      	str	r4, [sp, #8]
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	9507      	str	r5, [sp, #28]
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	ee75 2a84 	vadd.f32	s5, s11, s8
 800a3fe:	900a      	str	r0, [sp, #40]	@ 0x28
 800a400:	9801      	ldr	r0, [sp, #4]
 800a402:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a406:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a40a:	ed97 5a01 	vldr	s10, [r7, #4]
 800a40e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a412:	46bc      	mov	ip, r7
 800a414:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a418:	9605      	str	r6, [sp, #20]
 800a41a:	ee36 7a63 	vsub.f32	s14, s12, s7
 800a41e:	9703      	str	r7, [sp, #12]
 800a420:	ee12 9a90 	vmov	r9, s5
 800a424:	ee33 3aa6 	vadd.f32	s6, s7, s13
 800a428:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800a42c:	1f3e      	subs	r6, r7, #4
 800a42e:	f840 9b08 	str.w	r9, [r0], #8
 800a432:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800a436:	edde 2a01 	vldr	s5, [lr, #4]
 800a43a:	ee77 3ac4 	vsub.f32	s7, s15, s8
 800a43e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a442:	ed9c 4a01 	vldr	s8, [ip, #4]
 800a446:	ee36 6a22 	vadd.f32	s12, s12, s5
 800a44a:	9001      	str	r0, [sp, #4]
 800a44c:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a450:	9804      	ldr	r0, [sp, #16]
 800a452:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a456:	f1ae 0704 	sub.w	r7, lr, #4
 800a45a:	ee36 6a04 	vadd.f32	s12, s12, s8
 800a45e:	ee33 4a45 	vsub.f32	s8, s6, s10
 800a462:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800a466:	ee33 5aa4 	vadd.f32	s10, s7, s9
 800a46a:	ed80 6a01 	vstr	s12, [r0, #4]
 800a46e:	ee14 9a10 	vmov	r9, s8
 800a472:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a476:	f848 9b08 	str.w	r9, [r8], #8
 800a47a:	ed8e 5a01 	vstr	s10, [lr, #4]
 800a47e:	ee15 ea90 	vmov	lr, s11
 800a482:	f844 eb08 	str.w	lr, [r4], #8
 800a486:	ee16 ea90 	vmov	lr, s13
 800a48a:	9408      	str	r4, [sp, #32]
 800a48c:	462c      	mov	r4, r5
 800a48e:	ed85 7a01 	vstr	s14, [r5, #4]
 800a492:	9d03      	ldr	r5, [sp, #12]
 800a494:	f84c eb08 	str.w	lr, [ip], #8
 800a498:	edc5 7a01 	vstr	s15, [r5, #4]
 800a49c:	0855      	lsrs	r5, r2, #1
 800a49e:	9509      	str	r5, [sp, #36]	@ 0x24
 800a4a0:	f000 8130 	beq.w	800a704 <arm_cfft_radix8by4_f32+0x36c>
 800a4a4:	9804      	ldr	r0, [sp, #16]
 800a4a6:	3b08      	subs	r3, #8
 800a4a8:	46ab      	mov	fp, r5
 800a4aa:	f1a4 020c 	sub.w	r2, r4, #12
 800a4ae:	f100 0510 	add.w	r5, r0, #16
 800a4b2:	f101 0920 	add.w	r9, r1, #32
 800a4b6:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800a4ba:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a4be:	4433      	add	r3, r6
 800a4c0:	3410      	adds	r4, #16
 800a4c2:	4660      	mov	r0, ip
 800a4c4:	4641      	mov	r1, r8
 800a4c6:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800a4ca:	ed54 6a02 	vldr	s13, [r4, #-8]
 800a4ce:	f1bb 0b01 	subs.w	fp, fp, #1
 800a4d2:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a4d6:	f10a 0a08 	add.w	sl, sl, #8
 800a4da:	edd1 7a00 	vldr	s15, [r1]
 800a4de:	f105 0508 	add.w	r5, r5, #8
 800a4e2:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800a4e6:	edd0 2a00 	vldr	s5, [r0]
 800a4ea:	ed14 7a01 	vldr	s14, [r4, #-4]
 800a4ee:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800a4f2:	ed55 6a03 	vldr	s13, [r5, #-12]
 800a4f6:	f1a2 0208 	sub.w	r2, r2, #8
 800a4fa:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800a4fe:	ed90 2a01 	vldr	s4, [r0, #4]
 800a502:	ee36 5a87 	vadd.f32	s10, s13, s14
 800a506:	ed91 6a01 	vldr	s12, [r1, #4]
 800a50a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a50e:	f109 0910 	add.w	r9, r9, #16
 800a512:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800a516:	f104 0408 	add.w	r4, r4, #8
 800a51a:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800a51e:	f10e 0e18 	add.w	lr, lr, #24
 800a522:	ee37 3a67 	vsub.f32	s6, s14, s15
 800a526:	f1a3 0308 	sub.w	r3, r3, #8
 800a52a:	ed45 6a04 	vstr	s13, [r5, #-16]
 800a52e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a532:	edd1 6a01 	vldr	s13, [r1, #4]
 800a536:	ee76 1a25 	vadd.f32	s3, s12, s11
 800a53a:	edd0 4a01 	vldr	s9, [r0, #4]
 800a53e:	ee33 3a22 	vadd.f32	s6, s6, s5
 800a542:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a546:	ee35 5a46 	vsub.f32	s10, s10, s12
 800a54a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a54e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a552:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800a556:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a55a:	ed45 6a03 	vstr	s13, [r5, #-12]
 800a55e:	ee32 2a06 	vadd.f32	s4, s4, s12
 800a562:	edd6 7a00 	vldr	s15, [r6]
 800a566:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800a56a:	ed97 1a00 	vldr	s2, [r7]
 800a56e:	ee77 2a62 	vsub.f32	s5, s14, s5
 800a572:	ed92 8a04 	vldr	s16, [r2, #16]
 800a576:	ee71 8a27 	vadd.f32	s17, s2, s15
 800a57a:	ed93 aa04 	vldr	s20, [r3, #16]
 800a57e:	ed16 7a01 	vldr	s14, [r6, #-4]
 800a582:	ee71 7a67 	vsub.f32	s15, s2, s15
 800a586:	ed57 0a01 	vldr	s1, [r7, #-4]
 800a58a:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800a58e:	ee38 6a88 	vadd.f32	s12, s17, s16
 800a592:	edd3 9a03 	vldr	s19, [r3, #12]
 800a596:	ee30 0a87 	vadd.f32	s0, s1, s14
 800a59a:	ed92 9a03 	vldr	s18, [r2, #12]
 800a59e:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800a5a2:	ee3a 6a06 	vadd.f32	s12, s20, s12
 800a5a6:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800a5aa:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800a5ae:	ee16 ca10 	vmov	ip, s12
 800a5b2:	ee30 6a49 	vsub.f32	s12, s0, s18
 800a5b6:	ee71 4a07 	vadd.f32	s9, s2, s14
 800a5ba:	f847 c908 	str.w	ip, [r7], #-8
 800a5be:	ee34 4a29 	vadd.f32	s8, s8, s19
 800a5c2:	edd2 8a03 	vldr	s17, [r2, #12]
 800a5c6:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800a5ca:	ed93 8a03 	vldr	s16, [r3, #12]
 800a5ce:	ee71 0a47 	vsub.f32	s1, s2, s14
 800a5d2:	ee30 0a28 	vadd.f32	s0, s0, s17
 800a5d6:	ee39 1a67 	vsub.f32	s2, s18, s15
 800a5da:	ee36 6a69 	vsub.f32	s12, s12, s19
 800a5de:	ee30 0a08 	vadd.f32	s0, s0, s16
 800a5e2:	ee75 5aca 	vsub.f32	s11, s11, s20
 800a5e6:	ed87 0a01 	vstr	s0, [r7, #4]
 800a5ea:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800a5ee:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800a5f2:	ee21 8a80 	vmul.f32	s16, s3, s0
 800a5f6:	ee23 7a26 	vmul.f32	s14, s6, s13
 800a5fa:	ee64 7a26 	vmul.f32	s15, s8, s13
 800a5fe:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800a602:	ee24 4a00 	vmul.f32	s8, s8, s0
 800a606:	ee23 3a00 	vmul.f32	s6, s6, s0
 800a60a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a60e:	ee24 0a80 	vmul.f32	s0, s9, s0
 800a612:	ee38 7a07 	vadd.f32	s14, s16, s14
 800a616:	ee76 6a84 	vadd.f32	s13, s13, s8
 800a61a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a61e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a622:	ee17 ca10 	vmov	ip, s14
 800a626:	f841 cb08 	str.w	ip, [r1], #8
 800a62a:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a62e:	ed82 0a04 	vstr	s0, [r2, #16]
 800a632:	edc2 6a03 	vstr	s13, [r2, #12]
 800a636:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 800a63a:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 800a63e:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800a642:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800a646:	ee65 4a27 	vmul.f32	s9, s10, s15
 800a64a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800a64e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800a652:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a656:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a65a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a65e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a662:	ee34 6a24 	vadd.f32	s12, s8, s9
 800a666:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800a66a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a66e:	ee17 ca90 	vmov	ip, s15
 800a672:	ed04 6a04 	vstr	s12, [r4, #-16]
 800a676:	ed04 5a03 	vstr	s10, [r4, #-12]
 800a67a:	f846 c908 	str.w	ip, [r6], #-8
 800a67e:	edc6 6a01 	vstr	s13, [r6, #4]
 800a682:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 800a686:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 800a68a:	ee62 5a27 	vmul.f32	s11, s4, s15
 800a68e:	ee22 6a87 	vmul.f32	s12, s5, s14
 800a692:	ee22 2a07 	vmul.f32	s4, s4, s14
 800a696:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800a69a:	ee61 6a07 	vmul.f32	s13, s2, s14
 800a69e:	ee20 7a87 	vmul.f32	s14, s1, s14
 800a6a2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a6a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 800a6aa:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a6ae:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800a6b2:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800a6b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6ba:	ee16 ca10 	vmov	ip, s12
 800a6be:	f840 cb08 	str.w	ip, [r0], #8
 800a6c2:	ed40 2a01 	vstr	s5, [r0, #-4]
 800a6c6:	edc3 0a04 	vstr	s1, [r3, #16]
 800a6ca:	edc3 7a03 	vstr	s15, [r3, #12]
 800a6ce:	f47f aefc 	bne.w	800a4ca <arm_cfft_radix8by4_f32+0x132>
 800a6d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6d4:	9805      	ldr	r0, [sp, #20]
 800a6d6:	00cb      	lsls	r3, r1, #3
 800a6d8:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800a6dc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a6e0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a6e4:	4498      	add	r8, r3
 800a6e6:	449c      	add	ip, r3
 800a6e8:	9105      	str	r1, [sp, #20]
 800a6ea:	9901      	ldr	r1, [sp, #4]
 800a6ec:	4419      	add	r1, r3
 800a6ee:	9101      	str	r1, [sp, #4]
 800a6f0:	9906      	ldr	r1, [sp, #24]
 800a6f2:	4419      	add	r1, r3
 800a6f4:	9106      	str	r1, [sp, #24]
 800a6f6:	9908      	ldr	r1, [sp, #32]
 800a6f8:	4419      	add	r1, r3
 800a6fa:	9b07      	ldr	r3, [sp, #28]
 800a6fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a700:	9108      	str	r1, [sp, #32]
 800a702:	9307      	str	r3, [sp, #28]
 800a704:	9a01      	ldr	r2, [sp, #4]
 800a706:	2304      	movs	r3, #4
 800a708:	9e08      	ldr	r6, [sp, #32]
 800a70a:	edd2 6a00 	vldr	s13, [r2]
 800a70e:	ed96 4a00 	vldr	s8, [r6]
 800a712:	edd8 7a00 	vldr	s15, [r8]
 800a716:	ee36 6a84 	vadd.f32	s12, s13, s8
 800a71a:	eddc 2a00 	vldr	s5, [ip]
 800a71e:	ed96 7a01 	vldr	s14, [r6, #4]
 800a722:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800a726:	edd2 6a01 	vldr	s13, [r2, #4]
 800a72a:	ee76 4a27 	vadd.f32	s9, s12, s15
 800a72e:	ed98 2a01 	vldr	s4, [r8, #4]
 800a732:	ee76 5a87 	vadd.f32	s11, s13, s14
 800a736:	ed9c 5a01 	vldr	s10, [ip, #4]
 800a73a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a73e:	9d05      	ldr	r5, [sp, #20]
 800a740:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800a744:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800a748:	ee72 3a04 	vadd.f32	s7, s4, s8
 800a74c:	9804      	ldr	r0, [sp, #16]
 800a74e:	ee77 4a67 	vsub.f32	s9, s14, s15
 800a752:	4621      	mov	r1, r4
 800a754:	edc2 6a00 	vstr	s13, [r2]
 800a758:	ee76 6a67 	vsub.f32	s13, s12, s15
 800a75c:	ed98 3a01 	vldr	s6, [r8, #4]
 800a760:	ee35 6ac2 	vsub.f32	s12, s11, s4
 800a764:	eddc 1a01 	vldr	s3, [ip, #4]
 800a768:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800a76c:	ee35 3a83 	vadd.f32	s6, s11, s6
 800a770:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a774:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a778:	ee73 5a21 	vadd.f32	s11, s6, s3
 800a77c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a780:	ee36 6a45 	vsub.f32	s12, s12, s10
 800a784:	edc2 5a01 	vstr	s11, [r2, #4]
 800a788:	ee35 5a04 	vadd.f32	s10, s10, s8
 800a78c:	9a06      	ldr	r2, [sp, #24]
 800a78e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800a792:	edd2 7a00 	vldr	s15, [r2]
 800a796:	edd2 5a01 	vldr	s11, [r2, #4]
 800a79a:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800a79e:	ee63 3aa5 	vmul.f32	s7, s7, s11
 800a7a2:	ee64 5aa5 	vmul.f32	s11, s9, s11
 800a7a6:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800a7aa:	ee77 7a62 	vsub.f32	s15, s14, s5
 800a7ae:	ee74 5a25 	vadd.f32	s11, s8, s11
 800a7b2:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800a7b6:	edc8 5a00 	vstr	s11, [r8]
 800a7ba:	edc8 4a01 	vstr	s9, [r8, #4]
 800a7be:	edd5 4a01 	vldr	s9, [r5, #4]
 800a7c2:	ed95 7a00 	vldr	s14, [r5]
 800a7c6:	9d07      	ldr	r5, [sp, #28]
 800a7c8:	ee66 5a87 	vmul.f32	s11, s13, s14
 800a7cc:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800a7d0:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a7d4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a7d8:	ee77 6a66 	vsub.f32	s13, s14, s13
 800a7dc:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a7e0:	edc6 6a01 	vstr	s13, [r6, #4]
 800a7e4:	ed86 6a00 	vstr	s12, [r6]
 800a7e8:	ed95 6a01 	vldr	s12, [r5, #4]
 800a7ec:	ed95 7a00 	vldr	s14, [r5]
 800a7f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7f2:	ee65 6a07 	vmul.f32	s13, s10, s14
 800a7f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a7fa:	ee25 5a06 	vmul.f32	s10, s10, s12
 800a7fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a802:	ee37 5a45 	vsub.f32	s10, s14, s10
 800a806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a80a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800a80e:	edcc 7a00 	vstr	s15, [ip]
 800a812:	6872      	ldr	r2, [r6, #4]
 800a814:	f000 fa62 	bl	800acdc <arm_radix8_butterfly_f32>
 800a818:	9802      	ldr	r0, [sp, #8]
 800a81a:	4621      	mov	r1, r4
 800a81c:	6872      	ldr	r2, [r6, #4]
 800a81e:	2304      	movs	r3, #4
 800a820:	f000 fa5c 	bl	800acdc <arm_radix8_butterfly_f32>
 800a824:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a826:	4621      	mov	r1, r4
 800a828:	6872      	ldr	r2, [r6, #4]
 800a82a:	2304      	movs	r3, #4
 800a82c:	f000 fa56 	bl	800acdc <arm_radix8_butterfly_f32>
 800a830:	9803      	ldr	r0, [sp, #12]
 800a832:	4621      	mov	r1, r4
 800a834:	6872      	ldr	r2, [r6, #4]
 800a836:	2304      	movs	r3, #4
 800a838:	b00f      	add	sp, #60	@ 0x3c
 800a83a:	ecbd 8b06 	vpop	{d8-d10}
 800a83e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a842:	f000 ba4b 	b.w	800acdc <arm_radix8_butterfly_f32>
 800a846:	bf00      	nop

0800a848 <arm_cfft_f32>:
 800a848:	2a01      	cmp	r2, #1
 800a84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84e:	4606      	mov	r6, r0
 800a850:	4617      	mov	r7, r2
 800a852:	460c      	mov	r4, r1
 800a854:	4698      	mov	r8, r3
 800a856:	8805      	ldrh	r5, [r0, #0]
 800a858:	d053      	beq.n	800a902 <arm_cfft_f32+0xba>
 800a85a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a85e:	d04b      	beq.n	800a8f8 <arm_cfft_f32+0xb0>
 800a860:	d916      	bls.n	800a890 <arm_cfft_f32+0x48>
 800a862:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800a866:	d01a      	beq.n	800a89e <arm_cfft_f32+0x56>
 800a868:	d95a      	bls.n	800a920 <arm_cfft_f32+0xd8>
 800a86a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800a86e:	d043      	beq.n	800a8f8 <arm_cfft_f32+0xb0>
 800a870:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800a874:	d105      	bne.n	800a882 <arm_cfft_f32+0x3a>
 800a876:	4620      	mov	r0, r4
 800a878:	4629      	mov	r1, r5
 800a87a:	6872      	ldr	r2, [r6, #4]
 800a87c:	2301      	movs	r3, #1
 800a87e:	f000 fa2d 	bl	800acdc <arm_radix8_butterfly_f32>
 800a882:	f1b8 0f00 	cmp.w	r8, #0
 800a886:	d111      	bne.n	800a8ac <arm_cfft_f32+0x64>
 800a888:	2f01      	cmp	r7, #1
 800a88a:	d016      	beq.n	800a8ba <arm_cfft_f32+0x72>
 800a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a890:	2d20      	cmp	r5, #32
 800a892:	d031      	beq.n	800a8f8 <arm_cfft_f32+0xb0>
 800a894:	d948      	bls.n	800a928 <arm_cfft_f32+0xe0>
 800a896:	2d40      	cmp	r5, #64	@ 0x40
 800a898:	d0ed      	beq.n	800a876 <arm_cfft_f32+0x2e>
 800a89a:	2d80      	cmp	r5, #128	@ 0x80
 800a89c:	d1f1      	bne.n	800a882 <arm_cfft_f32+0x3a>
 800a89e:	4630      	mov	r0, r6
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	f7ff fca7 	bl	800a1f4 <arm_cfft_radix8by2_f32>
 800a8a6:	f1b8 0f00 	cmp.w	r8, #0
 800a8aa:	d0ed      	beq.n	800a888 <arm_cfft_f32+0x40>
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	89b1      	ldrh	r1, [r6, #12]
 800a8b0:	68b2      	ldr	r2, [r6, #8]
 800a8b2:	f7f5 fd15 	bl	80002e0 <arm_bitreversal_32>
 800a8b6:	2f01      	cmp	r7, #1
 800a8b8:	d1e8      	bne.n	800a88c <arm_cfft_f32+0x44>
 800a8ba:	ee07 5a90 	vmov	s15, r5
 800a8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8c2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a8c6:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800a8ca:	2d00      	cmp	r5, #0
 800a8cc:	d0de      	beq.n	800a88c <arm_cfft_f32+0x44>
 800a8ce:	f104 0108 	add.w	r1, r4, #8
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a8de:	3108      	adds	r1, #8
 800a8e0:	429d      	cmp	r5, r3
 800a8e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a8e6:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a8ea:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a8ee:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a8f2:	d1ef      	bne.n	800a8d4 <arm_cfft_f32+0x8c>
 800a8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	f7ff fd4c 	bl	800a398 <arm_cfft_radix8by4_f32>
 800a900:	e7bf      	b.n	800a882 <arm_cfft_f32+0x3a>
 800a902:	b1a5      	cbz	r5, 800a92e <arm_cfft_f32+0xe6>
 800a904:	f101 030c 	add.w	r3, r1, #12
 800a908:	2200      	movs	r2, #0
 800a90a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a90e:	3201      	adds	r2, #1
 800a910:	3308      	adds	r3, #8
 800a912:	eef1 7a67 	vneg.f32	s15, s15
 800a916:	4295      	cmp	r5, r2
 800a918:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a91c:	d1f5      	bne.n	800a90a <arm_cfft_f32+0xc2>
 800a91e:	e79c      	b.n	800a85a <arm_cfft_f32+0x12>
 800a920:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800a924:	d0a7      	beq.n	800a876 <arm_cfft_f32+0x2e>
 800a926:	e7ac      	b.n	800a882 <arm_cfft_f32+0x3a>
 800a928:	2d10      	cmp	r5, #16
 800a92a:	d0b8      	beq.n	800a89e <arm_cfft_f32+0x56>
 800a92c:	e7a9      	b.n	800a882 <arm_cfft_f32+0x3a>
 800a92e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a932:	d896      	bhi.n	800a862 <arm_cfft_f32+0x1a>
 800a934:	e7ac      	b.n	800a890 <arm_cfft_f32+0x48>
 800a936:	bf00      	nop

0800a938 <arm_biquad_cascade_df1_init_f32>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4604      	mov	r4, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	461d      	mov	r5, r3
 800a940:	2100      	movs	r1, #0
 800a942:	60a2      	str	r2, [r4, #8]
 800a944:	0102      	lsls	r2, r0, #4
 800a946:	6020      	str	r0, [r4, #0]
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 fe97 	bl	800b67c <memset>
 800a94e:	6065      	str	r5, [r4, #4]
 800a950:	bd38      	pop	{r3, r4, r5, pc}
 800a952:	bf00      	nop

0800a954 <arm_biquad_cascade_df1_f32>:
 800a954:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800a958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a95c:	4696      	mov	lr, r2
 800a95e:	6886      	ldr	r6, [r0, #8]
 800a960:	6845      	ldr	r5, [r0, #4]
 800a962:	ea4f 180c 	mov.w	r8, ip, lsl #4
 800a966:	f003 0203 	and.w	r2, r3, #3
 800a96a:	3614      	adds	r6, #20
 800a96c:	3510      	adds	r5, #16
 800a96e:	6807      	ldr	r7, [r0, #0]
 800a970:	eb0e 0908 	add.w	r9, lr, r8
 800a974:	ed56 3a05 	vldr	s7, [r6, #-20]	@ 0xffffffec
 800a978:	ed16 3a04 	vldr	s6, [r6, #-16]
 800a97c:	ed56 2a03 	vldr	s5, [r6, #-12]
 800a980:	ed16 2a02 	vldr	s4, [r6, #-8]
 800a984:	ed56 1a01 	vldr	s3, [r6, #-4]
 800a988:	ed15 1a04 	vldr	s2, [r5, #-16]
 800a98c:	ed55 0a03 	vldr	s1, [r5, #-12]
 800a990:	ed55 7a02 	vldr	s15, [r5, #-8]
 800a994:	ed15 6a01 	vldr	s12, [r5, #-4]
 800a998:	f1bc 0f00 	cmp.w	ip, #0
 800a99c:	f000 80a3 	beq.w	800aae6 <arm_biquad_cascade_df1_f32+0x192>
 800a9a0:	f101 0010 	add.w	r0, r1, #16
 800a9a4:	f10e 0310 	add.w	r3, lr, #16
 800a9a8:	4664      	mov	r4, ip
 800a9aa:	ed10 4a04 	vldr	s8, [r0, #-16]
 800a9ae:	ee23 7a01 	vmul.f32	s14, s6, s2
 800a9b2:	ee62 0aa0 	vmul.f32	s1, s5, s1
 800a9b6:	3c01      	subs	r4, #1
 800a9b8:	ee23 5a84 	vmul.f32	s10, s7, s8
 800a9bc:	f100 0010 	add.w	r0, r0, #16
 800a9c0:	ee22 0a27 	vmul.f32	s0, s4, s15
 800a9c4:	f103 0310 	add.w	r3, r3, #16
 800a9c8:	ee21 6a86 	vmul.f32	s12, s3, s12
 800a9cc:	ee75 4a07 	vadd.f32	s9, s10, s14
 800a9d0:	ee61 6aa7 	vmul.f32	s13, s3, s15
 800a9d4:	ee63 5a04 	vmul.f32	s11, s6, s8
 800a9d8:	ee34 7aa0 	vadd.f32	s14, s9, s1
 800a9dc:	ee22 1a81 	vmul.f32	s2, s5, s2
 800a9e0:	ee22 4a84 	vmul.f32	s8, s5, s8
 800a9e4:	ee37 7a00 	vadd.f32	s14, s14, s0
 800a9e8:	ee37 6a06 	vadd.f32	s12, s14, s12
 800a9ec:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 800a9f0:	ee22 7a06 	vmul.f32	s14, s4, s12
 800a9f4:	ed50 7a07 	vldr	s15, [r0, #-28]	@ 0xffffffe4
 800a9f8:	ee21 6a86 	vmul.f32	s12, s3, s12
 800a9fc:	ee23 5aa7 	vmul.f32	s10, s7, s15
 800aa00:	ee23 0a27 	vmul.f32	s0, s6, s15
 800aa04:	ee62 4aa7 	vmul.f32	s9, s5, s15
 800aa08:	ee35 5a25 	vadd.f32	s10, s10, s11
 800aa0c:	ee75 5a01 	vadd.f32	s11, s10, s2
 800aa10:	ee75 5a87 	vadd.f32	s11, s11, s14
 800aa14:	ee75 6aa6 	vadd.f32	s13, s11, s13
 800aa18:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800aa1c:	ee62 7a26 	vmul.f32	s15, s4, s13
 800aa20:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 800aa24:	ee61 5aa6 	vmul.f32	s11, s3, s13
 800aa28:	ee23 5aa0 	vmul.f32	s10, s7, s1
 800aa2c:	ee23 7a20 	vmul.f32	s14, s6, s1
 800aa30:	ee35 5a00 	vadd.f32	s10, s10, s0
 800aa34:	ee75 6a04 	vadd.f32	s13, s10, s8
 800aa38:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800aa3c:	ee36 6a86 	vadd.f32	s12, s13, s12
 800aa40:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800aa44:	ee62 7a06 	vmul.f32	s15, s4, s12
 800aa48:	ed10 1a05 	vldr	s2, [r0, #-20]	@ 0xffffffec
 800aa4c:	ee63 6a81 	vmul.f32	s13, s7, s2
 800aa50:	ee36 7a87 	vadd.f32	s14, s13, s14
 800aa54:	ee37 7a24 	vadd.f32	s14, s14, s9
 800aa58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa5c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800aa60:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800aa64:	d1a1      	bne.n	800a9aa <arm_biquad_cascade_df1_f32+0x56>
 800aa66:	4441      	add	r1, r8
 800aa68:	4648      	mov	r0, r9
 800aa6a:	b39a      	cbz	r2, 800aad4 <arm_biquad_cascade_df1_f32+0x180>
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	e003      	b.n	800aa78 <arm_biquad_cascade_df1_f32+0x124>
 800aa70:	eef0 7a45 	vmov.f32	s15, s10
 800aa74:	eeb0 1a47 	vmov.f32	s2, s14
 800aa78:	ecb1 7a01 	vldmia	r1!, {s14}
 800aa7c:	ee63 4a01 	vmul.f32	s9, s6, s2
 800aa80:	ee62 5aa0 	vmul.f32	s11, s5, s1
 800aa84:	3b01      	subs	r3, #1
 800aa86:	ee23 4a87 	vmul.f32	s8, s7, s14
 800aa8a:	ee22 5a27 	vmul.f32	s10, s4, s15
 800aa8e:	ee61 6a86 	vmul.f32	s13, s3, s12
 800aa92:	ee74 4a24 	vadd.f32	s9, s8, s9
 800aa96:	eef0 0a41 	vmov.f32	s1, s2
 800aa9a:	eeb0 6a67 	vmov.f32	s12, s15
 800aa9e:	ee74 4aa5 	vadd.f32	s9, s9, s11
 800aaa2:	ee34 5a85 	vadd.f32	s10, s9, s10
 800aaa6:	ee35 5a26 	vadd.f32	s10, s10, s13
 800aaaa:	eca0 5a01 	vstmia	r0!, {s10}
 800aaae:	d1df      	bne.n	800aa70 <arm_biquad_cascade_df1_f32+0x11c>
 800aab0:	3f01      	subs	r7, #1
 800aab2:	ed05 7a04 	vstr	s14, [r5, #-16]
 800aab6:	ed05 1a03 	vstr	s2, [r5, #-12]
 800aaba:	f106 0614 	add.w	r6, r6, #20
 800aabe:	ed05 5a02 	vstr	s10, [r5, #-8]
 800aac2:	4671      	mov	r1, lr
 800aac4:	ed45 7a01 	vstr	s15, [r5, #-4]
 800aac8:	f105 0510 	add.w	r5, r5, #16
 800aacc:	f47f af52 	bne.w	800a974 <arm_biquad_cascade_df1_f32+0x20>
 800aad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aad4:	eeb0 5a67 	vmov.f32	s10, s15
 800aad8:	eeb0 7a41 	vmov.f32	s14, s2
 800aadc:	eef0 7a46 	vmov.f32	s15, s12
 800aae0:	eeb0 1a60 	vmov.f32	s2, s1
 800aae4:	e7e4      	b.n	800aab0 <arm_biquad_cascade_df1_f32+0x15c>
 800aae6:	4670      	mov	r0, lr
 800aae8:	e7bf      	b.n	800aa6a <arm_biquad_cascade_df1_f32+0x116>
 800aaea:	bf00      	nop

0800aaec <arm_scale_f32>:
 800aaec:	b470      	push	{r4, r5, r6}
 800aaee:	0896      	lsrs	r6, r2, #2
 800aaf0:	d025      	beq.n	800ab3e <arm_scale_f32+0x52>
 800aaf2:	f100 0410 	add.w	r4, r0, #16
 800aaf6:	f101 0310 	add.w	r3, r1, #16
 800aafa:	4635      	mov	r5, r6
 800aafc:	ed14 6a04 	vldr	s12, [r4, #-16]
 800ab00:	3d01      	subs	r5, #1
 800ab02:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ab06:	f103 0310 	add.w	r3, r3, #16
 800ab0a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800ab0e:	ee26 6a00 	vmul.f32	s12, s12, s0
 800ab12:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ab16:	ee66 6a80 	vmul.f32	s13, s13, s0
 800ab1a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800ab1e:	f104 0410 	add.w	r4, r4, #16
 800ab22:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ab26:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 800ab2a:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800ab2e:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 800ab32:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800ab36:	d1e1      	bne.n	800aafc <arm_scale_f32+0x10>
 800ab38:	0136      	lsls	r6, r6, #4
 800ab3a:	4430      	add	r0, r6
 800ab3c:	4431      	add	r1, r6
 800ab3e:	f012 0203 	ands.w	r2, r2, #3
 800ab42:	d007      	beq.n	800ab54 <arm_scale_f32+0x68>
 800ab44:	ecf0 7a01 	vldmia	r0!, {s15}
 800ab48:	3a01      	subs	r2, #1
 800ab4a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ab4e:	ece1 7a01 	vstmia	r1!, {s15}
 800ab52:	d1f7      	bne.n	800ab44 <arm_scale_f32+0x58>
 800ab54:	bc70      	pop	{r4, r5, r6}
 800ab56:	4770      	bx	lr

0800ab58 <arm_offset_f32>:
 800ab58:	b470      	push	{r4, r5, r6}
 800ab5a:	0896      	lsrs	r6, r2, #2
 800ab5c:	d025      	beq.n	800abaa <arm_offset_f32+0x52>
 800ab5e:	f100 0410 	add.w	r4, r0, #16
 800ab62:	f101 0310 	add.w	r3, r1, #16
 800ab66:	4635      	mov	r5, r6
 800ab68:	ed14 6a04 	vldr	s12, [r4, #-16]
 800ab6c:	3d01      	subs	r5, #1
 800ab6e:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ab72:	f103 0310 	add.w	r3, r3, #16
 800ab76:	ed14 7a02 	vldr	s14, [r4, #-8]
 800ab7a:	ee36 6a00 	vadd.f32	s12, s12, s0
 800ab7e:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ab82:	ee76 6a80 	vadd.f32	s13, s13, s0
 800ab86:	ee37 7a00 	vadd.f32	s14, s14, s0
 800ab8a:	f104 0410 	add.w	r4, r4, #16
 800ab8e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ab92:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 800ab96:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800ab9a:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 800ab9e:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800aba2:	d1e1      	bne.n	800ab68 <arm_offset_f32+0x10>
 800aba4:	0136      	lsls	r6, r6, #4
 800aba6:	4430      	add	r0, r6
 800aba8:	4431      	add	r1, r6
 800abaa:	f012 0203 	ands.w	r2, r2, #3
 800abae:	d007      	beq.n	800abc0 <arm_offset_f32+0x68>
 800abb0:	ecf0 7a01 	vldmia	r0!, {s15}
 800abb4:	3a01      	subs	r2, #1
 800abb6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800abba:	ece1 7a01 	vstmia	r1!, {s15}
 800abbe:	d1f7      	bne.n	800abb0 <arm_offset_f32+0x58>
 800abc0:	bc70      	pop	{r4, r5, r6}
 800abc2:	4770      	bx	lr

0800abc4 <arm_mult_f32>:
 800abc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abc6:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800abca:	d033      	beq.n	800ac34 <arm_mult_f32+0x70>
 800abcc:	f100 0610 	add.w	r6, r0, #16
 800abd0:	f101 0510 	add.w	r5, r1, #16
 800abd4:	f102 0410 	add.w	r4, r2, #16
 800abd8:	4677      	mov	r7, lr
 800abda:	ed16 7a04 	vldr	s14, [r6, #-16]
 800abde:	3f01      	subs	r7, #1
 800abe0:	ed15 6a04 	vldr	s12, [r5, #-16]
 800abe4:	f106 0610 	add.w	r6, r6, #16
 800abe8:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 800abec:	f105 0510 	add.w	r5, r5, #16
 800abf0:	ee27 6a06 	vmul.f32	s12, s14, s12
 800abf4:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 800abf8:	ed16 7a07 	vldr	s14, [r6, #-28]	@ 0xffffffe4
 800abfc:	f104 0410 	add.w	r4, r4, #16
 800ac00:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 800ac04:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ac08:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 800ac0c:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 800ac10:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ac14:	ed15 6a05 	vldr	s12, [r5, #-20]	@ 0xffffffec
 800ac18:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 800ac1c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ac20:	ed04 7a07 	vstr	s14, [r4, #-28]	@ 0xffffffe4
 800ac24:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 800ac28:	d1d7      	bne.n	800abda <arm_mult_f32+0x16>
 800ac2a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800ac2e:	4420      	add	r0, r4
 800ac30:	4421      	add	r1, r4
 800ac32:	4422      	add	r2, r4
 800ac34:	f013 0303 	ands.w	r3, r3, #3
 800ac38:	d009      	beq.n	800ac4e <arm_mult_f32+0x8a>
 800ac3a:	ecf0 7a01 	vldmia	r0!, {s15}
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	ecb1 7a01 	vldmia	r1!, {s14}
 800ac44:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac48:	ece2 7a01 	vstmia	r2!, {s15}
 800ac4c:	d1f5      	bne.n	800ac3a <arm_mult_f32+0x76>
 800ac4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac50 <arm_add_f32>:
 800ac50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac52:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800ac56:	d033      	beq.n	800acc0 <arm_add_f32+0x70>
 800ac58:	f100 0610 	add.w	r6, r0, #16
 800ac5c:	f101 0510 	add.w	r5, r1, #16
 800ac60:	f102 0410 	add.w	r4, r2, #16
 800ac64:	4677      	mov	r7, lr
 800ac66:	ed16 7a03 	vldr	s14, [r6, #-12]
 800ac6a:	3f01      	subs	r7, #1
 800ac6c:	ed56 7a02 	vldr	s15, [r6, #-8]
 800ac70:	f105 0510 	add.w	r5, r5, #16
 800ac74:	ed15 6a07 	vldr	s12, [r5, #-28]	@ 0xffffffe4
 800ac78:	f106 0610 	add.w	r6, r6, #16
 800ac7c:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 800ac80:	f104 0410 	add.w	r4, r4, #16
 800ac84:	ed15 5a05 	vldr	s10, [r5, #-20]	@ 0xffffffec
 800ac88:	ee37 6a06 	vadd.f32	s12, s14, s12
 800ac8c:	ed55 5a08 	vldr	s11, [r5, #-32]	@ 0xffffffe0
 800ac90:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800ac94:	ed16 7a05 	vldr	s14, [r6, #-20]	@ 0xffffffec
 800ac98:	ed56 7a08 	vldr	s15, [r6, #-32]	@ 0xffffffe0
 800ac9c:	ee37 7a05 	vadd.f32	s14, s14, s10
 800aca0:	ed04 6a07 	vstr	s12, [r4, #-28]	@ 0xffffffe4
 800aca4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800aca8:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 800acac:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 800acb0:	ed44 7a08 	vstr	s15, [r4, #-32]	@ 0xffffffe0
 800acb4:	d1d7      	bne.n	800ac66 <arm_add_f32+0x16>
 800acb6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800acba:	4420      	add	r0, r4
 800acbc:	4421      	add	r1, r4
 800acbe:	4422      	add	r2, r4
 800acc0:	f013 0303 	ands.w	r3, r3, #3
 800acc4:	d009      	beq.n	800acda <arm_add_f32+0x8a>
 800acc6:	ecf0 7a01 	vldmia	r0!, {s15}
 800acca:	3b01      	subs	r3, #1
 800accc:	ecb1 7a01 	vldmia	r1!, {s14}
 800acd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acd4:	ece2 7a01 	vstmia	r2!, {s15}
 800acd8:	d1f5      	bne.n	800acc6 <arm_add_f32+0x76>
 800acda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800acdc <arm_radix8_butterfly_f32>:
 800acdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	469e      	mov	lr, r3
 800ace2:	1d03      	adds	r3, r0, #4
 800ace4:	4683      	mov	fp, r0
 800ace6:	468a      	mov	sl, r1
 800ace8:	4688      	mov	r8, r1
 800acea:	469c      	mov	ip, r3
 800acec:	ed2d 8b10 	vpush	{d8-d15}
 800acf0:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 800b004 <arm_radix8_butterfly_f32+0x328>
 800acf4:	b09f      	sub	sp, #124	@ 0x7c
 800acf6:	921c      	str	r2, [sp, #112]	@ 0x70
 800acf8:	931d      	str	r3, [sp, #116]	@ 0x74
 800acfa:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 800acfe:	f04f 0900 	mov.w	r9, #0
 800ad02:	461a      	mov	r2, r3
 800ad04:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad06:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ad0a:	0051      	lsls	r1, r2, #1
 800ad0c:	4608      	mov	r0, r1
 800ad0e:	9103      	str	r1, [sp, #12]
 800ad10:	00d1      	lsls	r1, r2, #3
 800ad12:	1885      	adds	r5, r0, r2
 800ad14:	0110      	lsls	r0, r2, #4
 800ad16:	eb0b 0601 	add.w	r6, fp, r1
 800ad1a:	9101      	str	r1, [sp, #4]
 800ad1c:	18ac      	adds	r4, r5, r2
 800ad1e:	9002      	str	r0, [sp, #8]
 800ad20:	1877      	adds	r7, r6, r1
 800ad22:	4611      	mov	r1, r2
 800ad24:	4422      	add	r2, r4
 800ad26:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800ad2a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800ad2e:	1850      	adds	r0, r2, r1
 800ad30:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800ad34:	4401      	add	r1, r0
 800ad36:	3204      	adds	r2, #4
 800ad38:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 800ad3c:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 800ad40:	3104      	adds	r1, #4
 800ad42:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800ad46:	44c1      	add	r9, r8
 800ad48:	edd4 6a00 	vldr	s13, [r4]
 800ad4c:	ed97 6a00 	vldr	s12, [r7]
 800ad50:	45ca      	cmp	sl, r9
 800ad52:	edd0 7a00 	vldr	s15, [r0]
 800ad56:	ee37 5a66 	vsub.f32	s10, s14, s13
 800ad5a:	edd6 5a00 	vldr	s11, [r6]
 800ad5e:	ee37 2a26 	vadd.f32	s4, s14, s13
 800ad62:	ee76 2a67 	vsub.f32	s5, s12, s15
 800ad66:	edd5 6a00 	vldr	s13, [r5]
 800ad6a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ad6e:	ee76 4a27 	vadd.f32	s9, s12, s15
 800ad72:	ed11 6a01 	vldr	s12, [r1, #-4]
 800ad76:	ee75 1a87 	vadd.f32	s3, s11, s14
 800ad7a:	ee36 4a86 	vadd.f32	s8, s13, s12
 800ad7e:	ee72 7a24 	vadd.f32	s15, s4, s9
 800ad82:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800ad86:	ee76 5ac6 	vsub.f32	s11, s13, s12
 800ad8a:	ee31 6a84 	vadd.f32	s12, s3, s8
 800ad8e:	ee32 2a64 	vsub.f32	s4, s4, s9
 800ad92:	ee77 6a65 	vsub.f32	s13, s14, s11
 800ad96:	ee77 4a86 	vadd.f32	s9, s15, s12
 800ad9a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ad9e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800ada2:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800ada6:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800adaa:	edc4 7a00 	vstr	s15, [r4]
 800adae:	ee66 6a89 	vmul.f32	s13, s13, s18
 800adb2:	edd6 5a01 	vldr	s11, [r6, #4]
 800adb6:	ee27 6a09 	vmul.f32	s12, s14, s18
 800adba:	edd5 3a01 	vldr	s7, [r5, #4]
 800adbe:	ed92 4a00 	vldr	s8, [r2]
 800adc2:	ee35 1a26 	vadd.f32	s2, s10, s13
 800adc6:	edd1 4a00 	vldr	s9, [r1]
 800adca:	ee75 6a66 	vsub.f32	s13, s10, s13
 800adce:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800add2:	ed94 0a01 	vldr	s0, [r4, #4]
 800add6:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800adda:	ed9c 7a00 	vldr	s14, [ip]
 800adde:	edd0 0a01 	vldr	s1, [r0, #4]
 800ade2:	ee35 4a84 	vadd.f32	s8, s11, s8
 800ade6:	ed97 5a01 	vldr	s10, [r7, #4]
 800adea:	ee73 4aa4 	vadd.f32	s9, s7, s9
 800adee:	ee73 5a27 	vadd.f32	s11, s6, s15
 800adf2:	ee77 3a00 	vadd.f32	s7, s14, s0
 800adf6:	ee33 3a67 	vsub.f32	s6, s6, s15
 800adfa:	ee37 7a40 	vsub.f32	s14, s14, s0
 800adfe:	ee35 0a20 	vadd.f32	s0, s10, s1
 800ae02:	ee63 7a09 	vmul.f32	s15, s6, s18
 800ae06:	ee35 5a60 	vsub.f32	s10, s10, s1
 800ae0a:	ee33 3a80 	vadd.f32	s6, s7, s0
 800ae0e:	ee74 0a24 	vadd.f32	s1, s8, s9
 800ae12:	ee65 5a89 	vmul.f32	s11, s11, s18
 800ae16:	ee74 4a64 	vsub.f32	s9, s8, s9
 800ae1a:	ee33 4ac0 	vsub.f32	s8, s7, s0
 800ae1e:	ee75 3a25 	vadd.f32	s7, s10, s11
 800ae22:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ae26:	ee37 5a27 	vadd.f32	s10, s14, s15
 800ae2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae2e:	ee32 7a86 	vadd.f32	s14, s5, s12
 800ae32:	ee32 6ac6 	vsub.f32	s12, s5, s12
 800ae36:	ee73 2a20 	vadd.f32	s5, s6, s1
 800ae3a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800ae3e:	ee72 0a24 	vadd.f32	s1, s4, s9
 800ae42:	edcc 2a00 	vstr	s5, [ip]
 800ae46:	ee72 4a64 	vsub.f32	s9, s4, s9
 800ae4a:	ed84 3a01 	vstr	s6, [r4, #4]
 800ae4e:	ee74 2a61 	vsub.f32	s5, s8, s3
 800ae52:	ee31 3a23 	vadd.f32	s6, s2, s7
 800ae56:	edc7 0a00 	vstr	s1, [r7]
 800ae5a:	ee31 1a63 	vsub.f32	s2, s2, s7
 800ae5e:	edc0 4a00 	vstr	s9, [r0]
 800ae62:	ee76 3aa5 	vadd.f32	s7, s13, s11
 800ae66:	edc7 2a01 	vstr	s5, [r7, #4]
 800ae6a:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800ae6e:	441c      	add	r4, r3
 800ae70:	ee75 5a47 	vsub.f32	s11, s10, s14
 800ae74:	449c      	add	ip, r3
 800ae76:	ee35 5a07 	vadd.f32	s10, s10, s14
 800ae7a:	441f      	add	r7, r3
 800ae7c:	ee37 7ac6 	vsub.f32	s14, s15, s12
 800ae80:	ee34 4a21 	vadd.f32	s8, s8, s3
 800ae84:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ae88:	ed80 4a01 	vstr	s8, [r0, #4]
 800ae8c:	4418      	add	r0, r3
 800ae8e:	ed86 3a00 	vstr	s6, [r6]
 800ae92:	ed01 1a01 	vstr	s2, [r1, #-4]
 800ae96:	ed42 3a01 	vstr	s7, [r2, #-4]
 800ae9a:	edc5 6a00 	vstr	s13, [r5]
 800ae9e:	edc6 5a01 	vstr	s11, [r6, #4]
 800aea2:	441e      	add	r6, r3
 800aea4:	ed81 5a00 	vstr	s10, [r1]
 800aea8:	4419      	add	r1, r3
 800aeaa:	ed82 7a00 	vstr	s14, [r2]
 800aeae:	441a      	add	r2, r3
 800aeb0:	edc5 7a01 	vstr	s15, [r5, #4]
 800aeb4:	441d      	add	r5, r3
 800aeb6:	f63f af44 	bhi.w	800ad42 <arm_radix8_butterfly_f32+0x66>
 800aeba:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800aebc:	2f07      	cmp	r7, #7
 800aebe:	f240 81e8 	bls.w	800b292 <arm_radix8_butterfly_f32+0x5b6>
 800aec2:	9903      	ldr	r1, [sp, #12]
 800aec4:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 800aec8:	9e01      	ldr	r6, [sp, #4]
 800aeca:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 800aece:	19ca      	adds	r2, r1, r7
 800aed0:	1c4c      	adds	r4, r1, #1
 800aed2:	eb05 010e 	add.w	r1, r5, lr
 800aed6:	00ed      	lsls	r5, r5, #3
 800aed8:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800aedc:	3608      	adds	r6, #8
 800aede:	950f      	str	r5, [sp, #60]	@ 0x3c
 800aee0:	eb01 050e 	add.w	r5, r1, lr
 800aee4:	00c9      	lsls	r1, r1, #3
 800aee6:	443c      	add	r4, r7
 800aee8:	9618      	str	r6, [sp, #96]	@ 0x60
 800aeea:	00ee      	lsls	r6, r5, #3
 800aeec:	460f      	mov	r7, r1
 800aeee:	9114      	str	r1, [sp, #80]	@ 0x50
 800aef0:	9902      	ldr	r1, [sp, #8]
 800aef2:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800aef6:	9611      	str	r6, [sp, #68]	@ 0x44
 800aef8:	00c0      	lsls	r0, r0, #3
 800aefa:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800aefc:	3108      	adds	r1, #8
 800aefe:	3404      	adds	r4, #4
 800af00:	f04f 0901 	mov.w	r9, #1
 800af04:	9119      	str	r1, [sp, #100]	@ 0x64
 800af06:	eb05 010e 	add.w	r1, r5, lr
 800af0a:	4635      	mov	r5, r6
 800af0c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af0e:	9301      	str	r3, [sp, #4]
 800af10:	443d      	add	r5, r7
 800af12:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800af14:	9507      	str	r5, [sp, #28]
 800af16:	eb01 050e 	add.w	r5, r1, lr
 800af1a:	00c9      	lsls	r1, r1, #3
 800af1c:	19f7      	adds	r7, r6, r7
 800af1e:	00ed      	lsls	r5, r5, #3
 800af20:	9110      	str	r1, [sp, #64]	@ 0x40
 800af22:	00d1      	lsls	r1, r2, #3
 800af24:	970a      	str	r7, [sp, #40]	@ 0x28
 800af26:	462f      	mov	r7, r5
 800af28:	9515      	str	r5, [sp, #84]	@ 0x54
 800af2a:	0112      	lsls	r2, r2, #4
 800af2c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800af2e:	19f4      	adds	r4, r6, r7
 800af30:	320c      	adds	r2, #12
 800af32:	3108      	adds	r1, #8
 800af34:	1975      	adds	r5, r6, r5
 800af36:	9408      	str	r4, [sp, #32]
 800af38:	9217      	str	r2, [sp, #92]	@ 0x5c
 800af3a:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800af3e:	9509      	str	r5, [sp, #36]	@ 0x24
 800af40:	f100 020c 	add.w	r2, r0, #12
 800af44:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800af46:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800af48:	1975      	adds	r5, r6, r5
 800af4a:	9216      	str	r2, [sp, #88]	@ 0x58
 800af4c:	1932      	adds	r2, r6, r4
 800af4e:	911b      	str	r1, [sp, #108]	@ 0x6c
 800af50:	9505      	str	r5, [sp, #20]
 800af52:	ea4f 150e 	mov.w	r5, lr, lsl #4
 800af56:	0179      	lsls	r1, r7, #5
 800af58:	9204      	str	r2, [sp, #16]
 800af5a:	1972      	adds	r2, r6, r5
 800af5c:	9412      	str	r4, [sp, #72]	@ 0x48
 800af5e:	9513      	str	r5, [sp, #76]	@ 0x4c
 800af60:	9206      	str	r2, [sp, #24]
 800af62:	f101 0208 	add.w	r2, r1, #8
 800af66:	921a      	str	r2, [sp, #104]	@ 0x68
 800af68:	2200      	movs	r2, #0
 800af6a:	f102 0108 	add.w	r1, r2, #8
 800af6e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af70:	46cc      	mov	ip, r9
 800af72:	460f      	mov	r7, r1
 800af74:	910c      	str	r1, [sp, #48]	@ 0x30
 800af76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af78:	eb0b 0e07 	add.w	lr, fp, r7
 800af7c:	9f04      	ldr	r7, [sp, #16]
 800af7e:	188e      	adds	r6, r1, r2
 800af80:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800af82:	edd7 fa00 	vldr	s31, [r7]
 800af86:	9f06      	ldr	r7, [sp, #24]
 800af88:	188d      	adds	r5, r1, r2
 800af8a:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800af8c:	445e      	add	r6, fp
 800af8e:	ed97 fa00 	vldr	s30, [r7]
 800af92:	445d      	add	r5, fp
 800af94:	9f05      	ldr	r7, [sp, #20]
 800af96:	188c      	adds	r4, r1, r2
 800af98:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800af9a:	edd7 ea00 	vldr	s29, [r7]
 800af9e:	445c      	add	r4, fp
 800afa0:	9f07      	ldr	r7, [sp, #28]
 800afa2:	1888      	adds	r0, r1, r2
 800afa4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800afa6:	ed97 ea00 	vldr	s28, [r7]
 800afaa:	4458      	add	r0, fp
 800afac:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800afae:	4411      	add	r1, r2
 800afb0:	441a      	add	r2, r3
 800afb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afb4:	edd7 da00 	vldr	s27, [r7]
 800afb8:	4459      	add	r1, fp
 800afba:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800afbc:	445a      	add	r2, fp
 800afbe:	930d      	str	r3, [sp, #52]	@ 0x34
 800afc0:	ed97 da00 	vldr	s26, [r7]
 800afc4:	9f08      	ldr	r7, [sp, #32]
 800afc6:	edd7 ca00 	vldr	s25, [r7]
 800afca:	9f04      	ldr	r7, [sp, #16]
 800afcc:	ed97 ca01 	vldr	s24, [r7, #4]
 800afd0:	9f06      	ldr	r7, [sp, #24]
 800afd2:	edd7 ba01 	vldr	s23, [r7, #4]
 800afd6:	9f05      	ldr	r7, [sp, #20]
 800afd8:	ed97 ba01 	vldr	s22, [r7, #4]
 800afdc:	9f07      	ldr	r7, [sp, #28]
 800afde:	edd7 aa01 	vldr	s21, [r7, #4]
 800afe2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800afe4:	ed97 aa01 	vldr	s20, [r7, #4]
 800afe8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800afea:	9b01      	ldr	r3, [sp, #4]
 800afec:	edd7 7a01 	vldr	s15, [r7, #4]
 800aff0:	9f08      	ldr	r7, [sp, #32]
 800aff2:	edcd 7a02 	vstr	s15, [sp, #8]
 800aff6:	edd7 7a01 	vldr	s15, [r7, #4]
 800affa:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800affc:	edcd 7a03 	vstr	s15, [sp, #12]
 800b000:	e002      	b.n	800b008 <arm_radix8_butterfly_f32+0x32c>
 800b002:	bf00      	nop
 800b004:	3f3504f3 	.word	0x3f3504f3
 800b008:	ed90 2a00 	vldr	s4, [r0]
 800b00c:	44c4      	add	ip, r8
 800b00e:	ed96 7a00 	vldr	s14, [r6]
 800b012:	ed94 8a00 	vldr	s16, [r4]
 800b016:	45e2      	cmp	sl, ip
 800b018:	ed52 7a01 	vldr	s15, [r2, #-4]
 800b01c:	ed95 5a00 	vldr	s10, [r5]
 800b020:	ed51 5a01 	vldr	s11, [r1, #-4]
 800b024:	ee38 6a27 	vadd.f32	s12, s16, s15
 800b028:	ed9e 1a00 	vldr	s2, [lr]
 800b02c:	ee78 2a67 	vsub.f32	s5, s16, s15
 800b030:	ed17 4a01 	vldr	s8, [r7, #-4]
 800b034:	ee75 3a25 	vadd.f32	s7, s10, s11
 800b038:	ee31 3a07 	vadd.f32	s6, s2, s14
 800b03c:	edde 4a01 	vldr	s9, [lr, #4]
 800b040:	ee72 6a04 	vadd.f32	s13, s4, s8
 800b044:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b048:	ee73 1a06 	vadd.f32	s3, s6, s12
 800b04c:	ee33 5aa6 	vadd.f32	s10, s7, s13
 800b050:	ee32 4a44 	vsub.f32	s8, s4, s8
 800b054:	ee31 1a47 	vsub.f32	s2, s2, s14
 800b058:	ee31 7a85 	vadd.f32	s14, s3, s10
 800b05c:	ee75 7a84 	vadd.f32	s15, s11, s8
 800b060:	ee33 3a46 	vsub.f32	s6, s6, s12
 800b064:	ed8e 7a00 	vstr	s14, [lr]
 800b068:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800b06c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b070:	ed90 2a01 	vldr	s4, [r0, #4]
 800b074:	ed95 7a01 	vldr	s14, [r5, #4]
 800b078:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800b07c:	ed91 6a00 	vldr	s12, [r1]
 800b080:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800b084:	edd7 8a00 	vldr	s17, [r7]
 800b088:	ee32 8ae7 	vsub.f32	s16, s5, s15
 800b08c:	ee72 5aa7 	vadd.f32	s11, s5, s15
 800b090:	edd2 0a00 	vldr	s1, [r2]
 800b094:	ee72 6a68 	vsub.f32	s13, s4, s17
 800b098:	edd6 7a01 	vldr	s15, [r6, #4]
 800b09c:	ee77 2a46 	vsub.f32	s5, s14, s12
 800b0a0:	ee37 0a06 	vadd.f32	s0, s14, s12
 800b0a4:	ed94 7a01 	vldr	s14, [r4, #4]
 800b0a8:	ee32 6a28 	vadd.f32	s12, s4, s17
 800b0ac:	ee72 9ae6 	vsub.f32	s19, s5, s13
 800b0b0:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800b0b4:	ee72 2aa6 	vadd.f32	s5, s5, s13
 800b0b8:	ee77 6a20 	vadd.f32	s13, s14, s1
 800b0bc:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800b0c0:	ee37 7a60 	vsub.f32	s14, s14, s1
 800b0c4:	ee24 4a09 	vmul.f32	s8, s8, s18
 800b0c8:	ee70 0a06 	vadd.f32	s1, s0, s12
 800b0cc:	ee69 7a89 	vmul.f32	s15, s19, s18
 800b0d0:	ee62 2a89 	vmul.f32	s5, s5, s18
 800b0d4:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b0d8:	ee32 0a26 	vadd.f32	s0, s4, s13
 800b0dc:	ee72 6a66 	vsub.f32	s13, s4, s13
 800b0e0:	ee77 8a62 	vsub.f32	s17, s14, s5
 800b0e4:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800b0e8:	ee74 7ae7 	vsub.f32	s15, s9, s15
 800b0ec:	ee77 4a22 	vadd.f32	s9, s14, s5
 800b0f0:	ee71 2a04 	vadd.f32	s5, s2, s8
 800b0f4:	ee31 7a44 	vsub.f32	s14, s2, s8
 800b0f8:	ee30 1a60 	vsub.f32	s2, s0, s1
 800b0fc:	ee73 1a06 	vadd.f32	s3, s6, s12
 800b100:	ee33 6a46 	vsub.f32	s12, s6, s12
 800b104:	ee36 3ae3 	vsub.f32	s6, s13, s7
 800b108:	ee37 4ac8 	vsub.f32	s8, s15, s16
 800b10c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b110:	ee77 7a88 	vadd.f32	s15, s15, s16
 800b114:	ee72 3a65 	vsub.f32	s7, s4, s11
 800b118:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800b11c:	ee72 5a25 	vadd.f32	s11, s4, s11
 800b120:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800b124:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800b128:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800b12c:	ee77 2a28 	vadd.f32	s5, s14, s17
 800b130:	ee37 7a68 	vsub.f32	s14, s14, s17
 800b134:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800b138:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800b13c:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800b140:	ee70 0a20 	vadd.f32	s1, s0, s1
 800b144:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800b148:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800b14c:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800b150:	edce 0a01 	vstr	s1, [lr, #4]
 800b154:	ee38 8a88 	vadd.f32	s16, s17, s16
 800b158:	449e      	add	lr, r3
 800b15a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800b15e:	ee31 5a45 	vsub.f32	s10, s2, s10
 800b162:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800b166:	ed86 8a00 	vstr	s16, [r6]
 800b16a:	ee39 0a80 	vadd.f32	s0, s19, s0
 800b16e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b172:	ed86 5a01 	vstr	s10, [r6, #4]
 800b176:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800b17a:	edcd 3a01 	vstr	s7, [sp, #4]
 800b17e:	ed9d 5a03 	vldr	s10, [sp, #12]
 800b182:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800b186:	eddd 3a02 	vldr	s7, [sp, #8]
 800b18a:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800b18e:	ed84 0a00 	vstr	s0, [r4]
 800b192:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b196:	ed84 3a01 	vstr	s6, [r4, #4]
 800b19a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800b19e:	ee23 6a86 	vmul.f32	s12, s7, s12
 800b1a2:	eddd 3a01 	vldr	s7, [sp, #4]
 800b1a6:	ee25 5a25 	vmul.f32	s10, s10, s11
 800b1aa:	441e      	add	r6, r3
 800b1ac:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800b1b0:	441c      	add	r4, r3
 800b1b2:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800b1b6:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b1ba:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800b1be:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800b1c2:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800b1c6:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800b1ca:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800b1ce:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800b1d2:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800b1d6:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800b1da:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800b1de:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800b1e2:	ee38 8a01 	vadd.f32	s16, s16, s2
 800b1e6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800b1ea:	ee39 5a85 	vadd.f32	s10, s19, s10
 800b1ee:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800b1f2:	ed02 8a01 	vstr	s16, [r2, #-4]
 800b1f6:	ee30 0a21 	vadd.f32	s0, s0, s3
 800b1fa:	ed82 6a00 	vstr	s12, [r2]
 800b1fe:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b202:	edc5 0a00 	vstr	s1, [r5]
 800b206:	ee33 3a28 	vadd.f32	s6, s6, s17
 800b20a:	edc5 3a01 	vstr	s7, [r5, #4]
 800b20e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b212:	ed07 5a01 	vstr	s10, [r7, #-4]
 800b216:	edc7 4a00 	vstr	s9, [r7]
 800b21a:	441d      	add	r5, r3
 800b21c:	ed01 0a01 	vstr	s0, [r1, #-4]
 800b220:	441a      	add	r2, r3
 800b222:	edc1 2a00 	vstr	s5, [r1]
 800b226:	441f      	add	r7, r3
 800b228:	ed80 3a00 	vstr	s6, [r0]
 800b22c:	4419      	add	r1, r3
 800b22e:	ed80 7a01 	vstr	s14, [r0, #4]
 800b232:	4418      	add	r0, r3
 800b234:	f63f aee8 	bhi.w	800b008 <arm_radix8_butterfly_f32+0x32c>
 800b238:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b23a:	f109 0901 	add.w	r9, r9, #1
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	9b04      	ldr	r3, [sp, #16]
 800b242:	4413      	add	r3, r2
 800b244:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b246:	9304      	str	r3, [sp, #16]
 800b248:	9b06      	ldr	r3, [sp, #24]
 800b24a:	4413      	add	r3, r2
 800b24c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b24e:	9306      	str	r3, [sp, #24]
 800b250:	9b05      	ldr	r3, [sp, #20]
 800b252:	4413      	add	r3, r2
 800b254:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b256:	9305      	str	r3, [sp, #20]
 800b258:	9b07      	ldr	r3, [sp, #28]
 800b25a:	4413      	add	r3, r2
 800b25c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b25e:	9307      	str	r3, [sp, #28]
 800b260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b262:	4413      	add	r3, r2
 800b264:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b266:	930a      	str	r3, [sp, #40]	@ 0x28
 800b268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b26a:	4413      	add	r3, r2
 800b26c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b26e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b270:	9b08      	ldr	r3, [sp, #32]
 800b272:	4413      	add	r3, r2
 800b274:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b276:	9308      	str	r3, [sp, #32]
 800b278:	3208      	adds	r2, #8
 800b27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b27c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b27e:	4599      	cmp	r9, r3
 800b280:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b282:	f47f ae72 	bne.w	800af6a <arm_radix8_butterfly_f32+0x28e>
 800b286:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 800b28a:	46c8      	mov	r8, r9
 800b28c:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 800b290:	e533      	b.n	800acfa <arm_radix8_butterfly_f32+0x1e>
 800b292:	b01f      	add	sp, #124	@ 0x7c
 800b294:	ecbd 8b10 	vpop	{d8-d15}
 800b298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b29c <atoi>:
 800b29c:	220a      	movs	r2, #10
 800b29e:	2100      	movs	r1, #0
 800b2a0:	f000 b94c 	b.w	800b53c <strtol>

0800b2a4 <srand>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4b10      	ldr	r3, [pc, #64]	@ (800b2e8 <srand+0x44>)
 800b2a8:	681d      	ldr	r5, [r3, #0]
 800b2aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	b9b3      	cbnz	r3, 800b2de <srand+0x3a>
 800b2b0:	2018      	movs	r0, #24
 800b2b2:	f000 fa63 	bl	800b77c <malloc>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	6328      	str	r0, [r5, #48]	@ 0x30
 800b2ba:	b920      	cbnz	r0, 800b2c6 <srand+0x22>
 800b2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b2ec <srand+0x48>)
 800b2be:	480c      	ldr	r0, [pc, #48]	@ (800b2f0 <srand+0x4c>)
 800b2c0:	2146      	movs	r1, #70	@ 0x46
 800b2c2:	f000 fa3d 	bl	800b740 <__assert_func>
 800b2c6:	490b      	ldr	r1, [pc, #44]	@ (800b2f4 <srand+0x50>)
 800b2c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f8 <srand+0x54>)
 800b2ca:	e9c0 1300 	strd	r1, r3, [r0]
 800b2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b2fc <srand+0x58>)
 800b2d0:	6083      	str	r3, [r0, #8]
 800b2d2:	230b      	movs	r3, #11
 800b2d4:	8183      	strh	r3, [r0, #12]
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	2001      	movs	r0, #1
 800b2da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b2de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	611c      	str	r4, [r3, #16]
 800b2e4:	615a      	str	r2, [r3, #20]
 800b2e6:	bd38      	pop	{r3, r4, r5, pc}
 800b2e8:	24000034 	.word	0x24000034
 800b2ec:	08083f7c 	.word	0x08083f7c
 800b2f0:	08083f93 	.word	0x08083f93
 800b2f4:	abcd330e 	.word	0xabcd330e
 800b2f8:	e66d1234 	.word	0xe66d1234
 800b2fc:	0005deec 	.word	0x0005deec

0800b300 <std>:
 800b300:	2300      	movs	r3, #0
 800b302:	b510      	push	{r4, lr}
 800b304:	4604      	mov	r4, r0
 800b306:	e9c0 3300 	strd	r3, r3, [r0]
 800b30a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b30e:	6083      	str	r3, [r0, #8]
 800b310:	8181      	strh	r1, [r0, #12]
 800b312:	6643      	str	r3, [r0, #100]	@ 0x64
 800b314:	81c2      	strh	r2, [r0, #14]
 800b316:	6183      	str	r3, [r0, #24]
 800b318:	4619      	mov	r1, r3
 800b31a:	2208      	movs	r2, #8
 800b31c:	305c      	adds	r0, #92	@ 0x5c
 800b31e:	f000 f9ad 	bl	800b67c <memset>
 800b322:	4b0d      	ldr	r3, [pc, #52]	@ (800b358 <std+0x58>)
 800b324:	6263      	str	r3, [r4, #36]	@ 0x24
 800b326:	4b0d      	ldr	r3, [pc, #52]	@ (800b35c <std+0x5c>)
 800b328:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b32a:	4b0d      	ldr	r3, [pc, #52]	@ (800b360 <std+0x60>)
 800b32c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b32e:	4b0d      	ldr	r3, [pc, #52]	@ (800b364 <std+0x64>)
 800b330:	6323      	str	r3, [r4, #48]	@ 0x30
 800b332:	4b0d      	ldr	r3, [pc, #52]	@ (800b368 <std+0x68>)
 800b334:	6224      	str	r4, [r4, #32]
 800b336:	429c      	cmp	r4, r3
 800b338:	d006      	beq.n	800b348 <std+0x48>
 800b33a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b33e:	4294      	cmp	r4, r2
 800b340:	d002      	beq.n	800b348 <std+0x48>
 800b342:	33d0      	adds	r3, #208	@ 0xd0
 800b344:	429c      	cmp	r4, r3
 800b346:	d105      	bne.n	800b354 <std+0x54>
 800b348:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b350:	f000 b9f2 	b.w	800b738 <__retarget_lock_init_recursive>
 800b354:	bd10      	pop	{r4, pc}
 800b356:	bf00      	nop
 800b358:	0800ba41 	.word	0x0800ba41
 800b35c:	0800ba63 	.word	0x0800ba63
 800b360:	0800ba9b 	.word	0x0800ba9b
 800b364:	0800babf 	.word	0x0800babf
 800b368:	2406f5f0 	.word	0x2406f5f0

0800b36c <stdio_exit_handler>:
 800b36c:	4a02      	ldr	r2, [pc, #8]	@ (800b378 <stdio_exit_handler+0xc>)
 800b36e:	4903      	ldr	r1, [pc, #12]	@ (800b37c <stdio_exit_handler+0x10>)
 800b370:	4803      	ldr	r0, [pc, #12]	@ (800b380 <stdio_exit_handler+0x14>)
 800b372:	f000 b965 	b.w	800b640 <_fwalk_sglue>
 800b376:	bf00      	nop
 800b378:	24000028 	.word	0x24000028
 800b37c:	0800b9d9 	.word	0x0800b9d9
 800b380:	24000038 	.word	0x24000038

0800b384 <cleanup_stdio>:
 800b384:	6841      	ldr	r1, [r0, #4]
 800b386:	4b0c      	ldr	r3, [pc, #48]	@ (800b3b8 <cleanup_stdio+0x34>)
 800b388:	4299      	cmp	r1, r3
 800b38a:	b510      	push	{r4, lr}
 800b38c:	4604      	mov	r4, r0
 800b38e:	d001      	beq.n	800b394 <cleanup_stdio+0x10>
 800b390:	f000 fb22 	bl	800b9d8 <_fflush_r>
 800b394:	68a1      	ldr	r1, [r4, #8]
 800b396:	4b09      	ldr	r3, [pc, #36]	@ (800b3bc <cleanup_stdio+0x38>)
 800b398:	4299      	cmp	r1, r3
 800b39a:	d002      	beq.n	800b3a2 <cleanup_stdio+0x1e>
 800b39c:	4620      	mov	r0, r4
 800b39e:	f000 fb1b 	bl	800b9d8 <_fflush_r>
 800b3a2:	68e1      	ldr	r1, [r4, #12]
 800b3a4:	4b06      	ldr	r3, [pc, #24]	@ (800b3c0 <cleanup_stdio+0x3c>)
 800b3a6:	4299      	cmp	r1, r3
 800b3a8:	d004      	beq.n	800b3b4 <cleanup_stdio+0x30>
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b0:	f000 bb12 	b.w	800b9d8 <_fflush_r>
 800b3b4:	bd10      	pop	{r4, pc}
 800b3b6:	bf00      	nop
 800b3b8:	2406f5f0 	.word	0x2406f5f0
 800b3bc:	2406f658 	.word	0x2406f658
 800b3c0:	2406f6c0 	.word	0x2406f6c0

0800b3c4 <global_stdio_init.part.0>:
 800b3c4:	b510      	push	{r4, lr}
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f4 <global_stdio_init.part.0+0x30>)
 800b3c8:	4c0b      	ldr	r4, [pc, #44]	@ (800b3f8 <global_stdio_init.part.0+0x34>)
 800b3ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b3fc <global_stdio_init.part.0+0x38>)
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	2104      	movs	r1, #4
 800b3d4:	f7ff ff94 	bl	800b300 <std>
 800b3d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3dc:	2201      	movs	r2, #1
 800b3de:	2109      	movs	r1, #9
 800b3e0:	f7ff ff8e 	bl	800b300 <std>
 800b3e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3e8:	2202      	movs	r2, #2
 800b3ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3ee:	2112      	movs	r1, #18
 800b3f0:	f7ff bf86 	b.w	800b300 <std>
 800b3f4:	2406f728 	.word	0x2406f728
 800b3f8:	2406f5f0 	.word	0x2406f5f0
 800b3fc:	0800b36d 	.word	0x0800b36d

0800b400 <__sfp_lock_acquire>:
 800b400:	4801      	ldr	r0, [pc, #4]	@ (800b408 <__sfp_lock_acquire+0x8>)
 800b402:	f000 b99a 	b.w	800b73a <__retarget_lock_acquire_recursive>
 800b406:	bf00      	nop
 800b408:	2406f72d 	.word	0x2406f72d

0800b40c <__sfp_lock_release>:
 800b40c:	4801      	ldr	r0, [pc, #4]	@ (800b414 <__sfp_lock_release+0x8>)
 800b40e:	f000 b995 	b.w	800b73c <__retarget_lock_release_recursive>
 800b412:	bf00      	nop
 800b414:	2406f72d 	.word	0x2406f72d

0800b418 <__sinit>:
 800b418:	b510      	push	{r4, lr}
 800b41a:	4604      	mov	r4, r0
 800b41c:	f7ff fff0 	bl	800b400 <__sfp_lock_acquire>
 800b420:	6a23      	ldr	r3, [r4, #32]
 800b422:	b11b      	cbz	r3, 800b42c <__sinit+0x14>
 800b424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b428:	f7ff bff0 	b.w	800b40c <__sfp_lock_release>
 800b42c:	4b04      	ldr	r3, [pc, #16]	@ (800b440 <__sinit+0x28>)
 800b42e:	6223      	str	r3, [r4, #32]
 800b430:	4b04      	ldr	r3, [pc, #16]	@ (800b444 <__sinit+0x2c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1f5      	bne.n	800b424 <__sinit+0xc>
 800b438:	f7ff ffc4 	bl	800b3c4 <global_stdio_init.part.0>
 800b43c:	e7f2      	b.n	800b424 <__sinit+0xc>
 800b43e:	bf00      	nop
 800b440:	0800b385 	.word	0x0800b385
 800b444:	2406f728 	.word	0x2406f728

0800b448 <_strtol_l.isra.0>:
 800b448:	2b24      	cmp	r3, #36	@ 0x24
 800b44a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b44e:	4686      	mov	lr, r0
 800b450:	4690      	mov	r8, r2
 800b452:	d801      	bhi.n	800b458 <_strtol_l.isra.0+0x10>
 800b454:	2b01      	cmp	r3, #1
 800b456:	d106      	bne.n	800b466 <_strtol_l.isra.0+0x1e>
 800b458:	f000 f944 	bl	800b6e4 <__errno>
 800b45c:	2316      	movs	r3, #22
 800b45e:	6003      	str	r3, [r0, #0]
 800b460:	2000      	movs	r0, #0
 800b462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b466:	4834      	ldr	r0, [pc, #208]	@ (800b538 <_strtol_l.isra.0+0xf0>)
 800b468:	460d      	mov	r5, r1
 800b46a:	462a      	mov	r2, r5
 800b46c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b470:	5d06      	ldrb	r6, [r0, r4]
 800b472:	f016 0608 	ands.w	r6, r6, #8
 800b476:	d1f8      	bne.n	800b46a <_strtol_l.isra.0+0x22>
 800b478:	2c2d      	cmp	r4, #45	@ 0x2d
 800b47a:	d110      	bne.n	800b49e <_strtol_l.isra.0+0x56>
 800b47c:	782c      	ldrb	r4, [r5, #0]
 800b47e:	2601      	movs	r6, #1
 800b480:	1c95      	adds	r5, r2, #2
 800b482:	f033 0210 	bics.w	r2, r3, #16
 800b486:	d115      	bne.n	800b4b4 <_strtol_l.isra.0+0x6c>
 800b488:	2c30      	cmp	r4, #48	@ 0x30
 800b48a:	d10d      	bne.n	800b4a8 <_strtol_l.isra.0+0x60>
 800b48c:	782a      	ldrb	r2, [r5, #0]
 800b48e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b492:	2a58      	cmp	r2, #88	@ 0x58
 800b494:	d108      	bne.n	800b4a8 <_strtol_l.isra.0+0x60>
 800b496:	786c      	ldrb	r4, [r5, #1]
 800b498:	3502      	adds	r5, #2
 800b49a:	2310      	movs	r3, #16
 800b49c:	e00a      	b.n	800b4b4 <_strtol_l.isra.0+0x6c>
 800b49e:	2c2b      	cmp	r4, #43	@ 0x2b
 800b4a0:	bf04      	itt	eq
 800b4a2:	782c      	ldrbeq	r4, [r5, #0]
 800b4a4:	1c95      	addeq	r5, r2, #2
 800b4a6:	e7ec      	b.n	800b482 <_strtol_l.isra.0+0x3a>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1f6      	bne.n	800b49a <_strtol_l.isra.0+0x52>
 800b4ac:	2c30      	cmp	r4, #48	@ 0x30
 800b4ae:	bf14      	ite	ne
 800b4b0:	230a      	movne	r3, #10
 800b4b2:	2308      	moveq	r3, #8
 800b4b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b4b8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b4bc:	2200      	movs	r2, #0
 800b4be:	fbbc f9f3 	udiv	r9, ip, r3
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	fb03 ca19 	mls	sl, r3, r9, ip
 800b4c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b4cc:	2f09      	cmp	r7, #9
 800b4ce:	d80f      	bhi.n	800b4f0 <_strtol_l.isra.0+0xa8>
 800b4d0:	463c      	mov	r4, r7
 800b4d2:	42a3      	cmp	r3, r4
 800b4d4:	dd1b      	ble.n	800b50e <_strtol_l.isra.0+0xc6>
 800b4d6:	1c57      	adds	r7, r2, #1
 800b4d8:	d007      	beq.n	800b4ea <_strtol_l.isra.0+0xa2>
 800b4da:	4581      	cmp	r9, r0
 800b4dc:	d314      	bcc.n	800b508 <_strtol_l.isra.0+0xc0>
 800b4de:	d101      	bne.n	800b4e4 <_strtol_l.isra.0+0x9c>
 800b4e0:	45a2      	cmp	sl, r4
 800b4e2:	db11      	blt.n	800b508 <_strtol_l.isra.0+0xc0>
 800b4e4:	fb00 4003 	mla	r0, r0, r3, r4
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4ee:	e7eb      	b.n	800b4c8 <_strtol_l.isra.0+0x80>
 800b4f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b4f4:	2f19      	cmp	r7, #25
 800b4f6:	d801      	bhi.n	800b4fc <_strtol_l.isra.0+0xb4>
 800b4f8:	3c37      	subs	r4, #55	@ 0x37
 800b4fa:	e7ea      	b.n	800b4d2 <_strtol_l.isra.0+0x8a>
 800b4fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b500:	2f19      	cmp	r7, #25
 800b502:	d804      	bhi.n	800b50e <_strtol_l.isra.0+0xc6>
 800b504:	3c57      	subs	r4, #87	@ 0x57
 800b506:	e7e4      	b.n	800b4d2 <_strtol_l.isra.0+0x8a>
 800b508:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b50c:	e7ed      	b.n	800b4ea <_strtol_l.isra.0+0xa2>
 800b50e:	1c53      	adds	r3, r2, #1
 800b510:	d108      	bne.n	800b524 <_strtol_l.isra.0+0xdc>
 800b512:	2322      	movs	r3, #34	@ 0x22
 800b514:	f8ce 3000 	str.w	r3, [lr]
 800b518:	4660      	mov	r0, ip
 800b51a:	f1b8 0f00 	cmp.w	r8, #0
 800b51e:	d0a0      	beq.n	800b462 <_strtol_l.isra.0+0x1a>
 800b520:	1e69      	subs	r1, r5, #1
 800b522:	e006      	b.n	800b532 <_strtol_l.isra.0+0xea>
 800b524:	b106      	cbz	r6, 800b528 <_strtol_l.isra.0+0xe0>
 800b526:	4240      	negs	r0, r0
 800b528:	f1b8 0f00 	cmp.w	r8, #0
 800b52c:	d099      	beq.n	800b462 <_strtol_l.isra.0+0x1a>
 800b52e:	2a00      	cmp	r2, #0
 800b530:	d1f6      	bne.n	800b520 <_strtol_l.isra.0+0xd8>
 800b532:	f8c8 1000 	str.w	r1, [r8]
 800b536:	e794      	b.n	800b462 <_strtol_l.isra.0+0x1a>
 800b538:	0808405b 	.word	0x0808405b

0800b53c <strtol>:
 800b53c:	4613      	mov	r3, r2
 800b53e:	460a      	mov	r2, r1
 800b540:	4601      	mov	r1, r0
 800b542:	4802      	ldr	r0, [pc, #8]	@ (800b54c <strtol+0x10>)
 800b544:	6800      	ldr	r0, [r0, #0]
 800b546:	f7ff bf7f 	b.w	800b448 <_strtol_l.isra.0>
 800b54a:	bf00      	nop
 800b54c:	24000034 	.word	0x24000034

0800b550 <_strtoul_l.isra.0>:
 800b550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b554:	4e34      	ldr	r6, [pc, #208]	@ (800b628 <_strtoul_l.isra.0+0xd8>)
 800b556:	4686      	mov	lr, r0
 800b558:	460d      	mov	r5, r1
 800b55a:	4628      	mov	r0, r5
 800b55c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b560:	5d37      	ldrb	r7, [r6, r4]
 800b562:	f017 0708 	ands.w	r7, r7, #8
 800b566:	d1f8      	bne.n	800b55a <_strtoul_l.isra.0+0xa>
 800b568:	2c2d      	cmp	r4, #45	@ 0x2d
 800b56a:	d110      	bne.n	800b58e <_strtoul_l.isra.0+0x3e>
 800b56c:	782c      	ldrb	r4, [r5, #0]
 800b56e:	2701      	movs	r7, #1
 800b570:	1c85      	adds	r5, r0, #2
 800b572:	f033 0010 	bics.w	r0, r3, #16
 800b576:	d115      	bne.n	800b5a4 <_strtoul_l.isra.0+0x54>
 800b578:	2c30      	cmp	r4, #48	@ 0x30
 800b57a:	d10d      	bne.n	800b598 <_strtoul_l.isra.0+0x48>
 800b57c:	7828      	ldrb	r0, [r5, #0]
 800b57e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b582:	2858      	cmp	r0, #88	@ 0x58
 800b584:	d108      	bne.n	800b598 <_strtoul_l.isra.0+0x48>
 800b586:	786c      	ldrb	r4, [r5, #1]
 800b588:	3502      	adds	r5, #2
 800b58a:	2310      	movs	r3, #16
 800b58c:	e00a      	b.n	800b5a4 <_strtoul_l.isra.0+0x54>
 800b58e:	2c2b      	cmp	r4, #43	@ 0x2b
 800b590:	bf04      	itt	eq
 800b592:	782c      	ldrbeq	r4, [r5, #0]
 800b594:	1c85      	addeq	r5, r0, #2
 800b596:	e7ec      	b.n	800b572 <_strtoul_l.isra.0+0x22>
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1f6      	bne.n	800b58a <_strtoul_l.isra.0+0x3a>
 800b59c:	2c30      	cmp	r4, #48	@ 0x30
 800b59e:	bf14      	ite	ne
 800b5a0:	230a      	movne	r3, #10
 800b5a2:	2308      	moveq	r3, #8
 800b5a4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800b5a8:	2600      	movs	r6, #0
 800b5aa:	fbb8 f8f3 	udiv	r8, r8, r3
 800b5ae:	fb03 f908 	mul.w	r9, r3, r8
 800b5b2:	ea6f 0909 	mvn.w	r9, r9
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b5bc:	f1bc 0f09 	cmp.w	ip, #9
 800b5c0:	d810      	bhi.n	800b5e4 <_strtoul_l.isra.0+0x94>
 800b5c2:	4664      	mov	r4, ip
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	dd1e      	ble.n	800b606 <_strtoul_l.isra.0+0xb6>
 800b5c8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800b5cc:	d007      	beq.n	800b5de <_strtoul_l.isra.0+0x8e>
 800b5ce:	4580      	cmp	r8, r0
 800b5d0:	d316      	bcc.n	800b600 <_strtoul_l.isra.0+0xb0>
 800b5d2:	d101      	bne.n	800b5d8 <_strtoul_l.isra.0+0x88>
 800b5d4:	45a1      	cmp	r9, r4
 800b5d6:	db13      	blt.n	800b600 <_strtoul_l.isra.0+0xb0>
 800b5d8:	fb00 4003 	mla	r0, r0, r3, r4
 800b5dc:	2601      	movs	r6, #1
 800b5de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5e2:	e7e9      	b.n	800b5b8 <_strtoul_l.isra.0+0x68>
 800b5e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b5e8:	f1bc 0f19 	cmp.w	ip, #25
 800b5ec:	d801      	bhi.n	800b5f2 <_strtoul_l.isra.0+0xa2>
 800b5ee:	3c37      	subs	r4, #55	@ 0x37
 800b5f0:	e7e8      	b.n	800b5c4 <_strtoul_l.isra.0+0x74>
 800b5f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b5f6:	f1bc 0f19 	cmp.w	ip, #25
 800b5fa:	d804      	bhi.n	800b606 <_strtoul_l.isra.0+0xb6>
 800b5fc:	3c57      	subs	r4, #87	@ 0x57
 800b5fe:	e7e1      	b.n	800b5c4 <_strtoul_l.isra.0+0x74>
 800b600:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800b604:	e7eb      	b.n	800b5de <_strtoul_l.isra.0+0x8e>
 800b606:	1c73      	adds	r3, r6, #1
 800b608:	d106      	bne.n	800b618 <_strtoul_l.isra.0+0xc8>
 800b60a:	2322      	movs	r3, #34	@ 0x22
 800b60c:	f8ce 3000 	str.w	r3, [lr]
 800b610:	4630      	mov	r0, r6
 800b612:	b932      	cbnz	r2, 800b622 <_strtoul_l.isra.0+0xd2>
 800b614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b618:	b107      	cbz	r7, 800b61c <_strtoul_l.isra.0+0xcc>
 800b61a:	4240      	negs	r0, r0
 800b61c:	2a00      	cmp	r2, #0
 800b61e:	d0f9      	beq.n	800b614 <_strtoul_l.isra.0+0xc4>
 800b620:	b106      	cbz	r6, 800b624 <_strtoul_l.isra.0+0xd4>
 800b622:	1e69      	subs	r1, r5, #1
 800b624:	6011      	str	r1, [r2, #0]
 800b626:	e7f5      	b.n	800b614 <_strtoul_l.isra.0+0xc4>
 800b628:	0808405b 	.word	0x0808405b

0800b62c <strtoul>:
 800b62c:	4613      	mov	r3, r2
 800b62e:	460a      	mov	r2, r1
 800b630:	4601      	mov	r1, r0
 800b632:	4802      	ldr	r0, [pc, #8]	@ (800b63c <strtoul+0x10>)
 800b634:	6800      	ldr	r0, [r0, #0]
 800b636:	f7ff bf8b 	b.w	800b550 <_strtoul_l.isra.0>
 800b63a:	bf00      	nop
 800b63c:	24000034 	.word	0x24000034

0800b640 <_fwalk_sglue>:
 800b640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b644:	4607      	mov	r7, r0
 800b646:	4688      	mov	r8, r1
 800b648:	4614      	mov	r4, r2
 800b64a:	2600      	movs	r6, #0
 800b64c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b650:	f1b9 0901 	subs.w	r9, r9, #1
 800b654:	d505      	bpl.n	800b662 <_fwalk_sglue+0x22>
 800b656:	6824      	ldr	r4, [r4, #0]
 800b658:	2c00      	cmp	r4, #0
 800b65a:	d1f7      	bne.n	800b64c <_fwalk_sglue+0xc>
 800b65c:	4630      	mov	r0, r6
 800b65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b662:	89ab      	ldrh	r3, [r5, #12]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d907      	bls.n	800b678 <_fwalk_sglue+0x38>
 800b668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b66c:	3301      	adds	r3, #1
 800b66e:	d003      	beq.n	800b678 <_fwalk_sglue+0x38>
 800b670:	4629      	mov	r1, r5
 800b672:	4638      	mov	r0, r7
 800b674:	47c0      	blx	r8
 800b676:	4306      	orrs	r6, r0
 800b678:	3568      	adds	r5, #104	@ 0x68
 800b67a:	e7e9      	b.n	800b650 <_fwalk_sglue+0x10>

0800b67c <memset>:
 800b67c:	4402      	add	r2, r0
 800b67e:	4603      	mov	r3, r0
 800b680:	4293      	cmp	r3, r2
 800b682:	d100      	bne.n	800b686 <memset+0xa>
 800b684:	4770      	bx	lr
 800b686:	f803 1b01 	strb.w	r1, [r3], #1
 800b68a:	e7f9      	b.n	800b680 <memset+0x4>

0800b68c <__strtok_r>:
 800b68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b68e:	4604      	mov	r4, r0
 800b690:	b908      	cbnz	r0, 800b696 <__strtok_r+0xa>
 800b692:	6814      	ldr	r4, [r2, #0]
 800b694:	b144      	cbz	r4, 800b6a8 <__strtok_r+0x1c>
 800b696:	4620      	mov	r0, r4
 800b698:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b69c:	460f      	mov	r7, r1
 800b69e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b6a2:	b91e      	cbnz	r6, 800b6ac <__strtok_r+0x20>
 800b6a4:	b965      	cbnz	r5, 800b6c0 <__strtok_r+0x34>
 800b6a6:	6015      	str	r5, [r2, #0]
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	e005      	b.n	800b6b8 <__strtok_r+0x2c>
 800b6ac:	42b5      	cmp	r5, r6
 800b6ae:	d1f6      	bne.n	800b69e <__strtok_r+0x12>
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1f0      	bne.n	800b696 <__strtok_r+0xa>
 800b6b4:	6014      	str	r4, [r2, #0]
 800b6b6:	7003      	strb	r3, [r0, #0]
 800b6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6ba:	461c      	mov	r4, r3
 800b6bc:	e00c      	b.n	800b6d8 <__strtok_r+0x4c>
 800b6be:	b91d      	cbnz	r5, 800b6c8 <__strtok_r+0x3c>
 800b6c0:	4627      	mov	r7, r4
 800b6c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6c6:	460e      	mov	r6, r1
 800b6c8:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b6cc:	42ab      	cmp	r3, r5
 800b6ce:	d1f6      	bne.n	800b6be <__strtok_r+0x32>
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d0f2      	beq.n	800b6ba <__strtok_r+0x2e>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	703b      	strb	r3, [r7, #0]
 800b6d8:	6014      	str	r4, [r2, #0]
 800b6da:	e7ed      	b.n	800b6b8 <__strtok_r+0x2c>

0800b6dc <strtok_r>:
 800b6dc:	2301      	movs	r3, #1
 800b6de:	f7ff bfd5 	b.w	800b68c <__strtok_r>
	...

0800b6e4 <__errno>:
 800b6e4:	4b01      	ldr	r3, [pc, #4]	@ (800b6ec <__errno+0x8>)
 800b6e6:	6818      	ldr	r0, [r3, #0]
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	24000034 	.word	0x24000034

0800b6f0 <__libc_init_array>:
 800b6f0:	b570      	push	{r4, r5, r6, lr}
 800b6f2:	4d0d      	ldr	r5, [pc, #52]	@ (800b728 <__libc_init_array+0x38>)
 800b6f4:	4c0d      	ldr	r4, [pc, #52]	@ (800b72c <__libc_init_array+0x3c>)
 800b6f6:	1b64      	subs	r4, r4, r5
 800b6f8:	10a4      	asrs	r4, r4, #2
 800b6fa:	2600      	movs	r6, #0
 800b6fc:	42a6      	cmp	r6, r4
 800b6fe:	d109      	bne.n	800b714 <__libc_init_array+0x24>
 800b700:	4d0b      	ldr	r5, [pc, #44]	@ (800b730 <__libc_init_array+0x40>)
 800b702:	4c0c      	ldr	r4, [pc, #48]	@ (800b734 <__libc_init_array+0x44>)
 800b704:	f001 f952 	bl	800c9ac <_init>
 800b708:	1b64      	subs	r4, r4, r5
 800b70a:	10a4      	asrs	r4, r4, #2
 800b70c:	2600      	movs	r6, #0
 800b70e:	42a6      	cmp	r6, r4
 800b710:	d105      	bne.n	800b71e <__libc_init_array+0x2e>
 800b712:	bd70      	pop	{r4, r5, r6, pc}
 800b714:	f855 3b04 	ldr.w	r3, [r5], #4
 800b718:	4798      	blx	r3
 800b71a:	3601      	adds	r6, #1
 800b71c:	e7ee      	b.n	800b6fc <__libc_init_array+0xc>
 800b71e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b722:	4798      	blx	r3
 800b724:	3601      	adds	r6, #1
 800b726:	e7f2      	b.n	800b70e <__libc_init_array+0x1e>
 800b728:	080842b4 	.word	0x080842b4
 800b72c:	080842b4 	.word	0x080842b4
 800b730:	080842b4 	.word	0x080842b4
 800b734:	080842b8 	.word	0x080842b8

0800b738 <__retarget_lock_init_recursive>:
 800b738:	4770      	bx	lr

0800b73a <__retarget_lock_acquire_recursive>:
 800b73a:	4770      	bx	lr

0800b73c <__retarget_lock_release_recursive>:
 800b73c:	4770      	bx	lr
	...

0800b740 <__assert_func>:
 800b740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b742:	4614      	mov	r4, r2
 800b744:	461a      	mov	r2, r3
 800b746:	4b09      	ldr	r3, [pc, #36]	@ (800b76c <__assert_func+0x2c>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4605      	mov	r5, r0
 800b74c:	68d8      	ldr	r0, [r3, #12]
 800b74e:	b14c      	cbz	r4, 800b764 <__assert_func+0x24>
 800b750:	4b07      	ldr	r3, [pc, #28]	@ (800b770 <__assert_func+0x30>)
 800b752:	9100      	str	r1, [sp, #0]
 800b754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b758:	4906      	ldr	r1, [pc, #24]	@ (800b774 <__assert_func+0x34>)
 800b75a:	462b      	mov	r3, r5
 800b75c:	f000 f9b4 	bl	800bac8 <fiprintf>
 800b760:	f000 fa1a 	bl	800bb98 <abort>
 800b764:	4b04      	ldr	r3, [pc, #16]	@ (800b778 <__assert_func+0x38>)
 800b766:	461c      	mov	r4, r3
 800b768:	e7f3      	b.n	800b752 <__assert_func+0x12>
 800b76a:	bf00      	nop
 800b76c:	24000034 	.word	0x24000034
 800b770:	08083feb 	.word	0x08083feb
 800b774:	08083ff8 	.word	0x08083ff8
 800b778:	08084026 	.word	0x08084026

0800b77c <malloc>:
 800b77c:	4b02      	ldr	r3, [pc, #8]	@ (800b788 <malloc+0xc>)
 800b77e:	4601      	mov	r1, r0
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	f000 b825 	b.w	800b7d0 <_malloc_r>
 800b786:	bf00      	nop
 800b788:	24000034 	.word	0x24000034

0800b78c <sbrk_aligned>:
 800b78c:	b570      	push	{r4, r5, r6, lr}
 800b78e:	4e0f      	ldr	r6, [pc, #60]	@ (800b7cc <sbrk_aligned+0x40>)
 800b790:	460c      	mov	r4, r1
 800b792:	6831      	ldr	r1, [r6, #0]
 800b794:	4605      	mov	r5, r0
 800b796:	b911      	cbnz	r1, 800b79e <sbrk_aligned+0x12>
 800b798:	f000 f9cc 	bl	800bb34 <_sbrk_r>
 800b79c:	6030      	str	r0, [r6, #0]
 800b79e:	4621      	mov	r1, r4
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	f000 f9c7 	bl	800bb34 <_sbrk_r>
 800b7a6:	1c43      	adds	r3, r0, #1
 800b7a8:	d103      	bne.n	800b7b2 <sbrk_aligned+0x26>
 800b7aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	bd70      	pop	{r4, r5, r6, pc}
 800b7b2:	1cc4      	adds	r4, r0, #3
 800b7b4:	f024 0403 	bic.w	r4, r4, #3
 800b7b8:	42a0      	cmp	r0, r4
 800b7ba:	d0f8      	beq.n	800b7ae <sbrk_aligned+0x22>
 800b7bc:	1a21      	subs	r1, r4, r0
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f000 f9b8 	bl	800bb34 <_sbrk_r>
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	d1f2      	bne.n	800b7ae <sbrk_aligned+0x22>
 800b7c8:	e7ef      	b.n	800b7aa <sbrk_aligned+0x1e>
 800b7ca:	bf00      	nop
 800b7cc:	2406f730 	.word	0x2406f730

0800b7d0 <_malloc_r>:
 800b7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d4:	1ccd      	adds	r5, r1, #3
 800b7d6:	f025 0503 	bic.w	r5, r5, #3
 800b7da:	3508      	adds	r5, #8
 800b7dc:	2d0c      	cmp	r5, #12
 800b7de:	bf38      	it	cc
 800b7e0:	250c      	movcc	r5, #12
 800b7e2:	2d00      	cmp	r5, #0
 800b7e4:	4606      	mov	r6, r0
 800b7e6:	db01      	blt.n	800b7ec <_malloc_r+0x1c>
 800b7e8:	42a9      	cmp	r1, r5
 800b7ea:	d904      	bls.n	800b7f6 <_malloc_r+0x26>
 800b7ec:	230c      	movs	r3, #12
 800b7ee:	6033      	str	r3, [r6, #0]
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8cc <_malloc_r+0xfc>
 800b7fa:	f000 f915 	bl	800ba28 <__malloc_lock>
 800b7fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b802:	461c      	mov	r4, r3
 800b804:	bb44      	cbnz	r4, 800b858 <_malloc_r+0x88>
 800b806:	4629      	mov	r1, r5
 800b808:	4630      	mov	r0, r6
 800b80a:	f7ff ffbf 	bl	800b78c <sbrk_aligned>
 800b80e:	1c43      	adds	r3, r0, #1
 800b810:	4604      	mov	r4, r0
 800b812:	d158      	bne.n	800b8c6 <_malloc_r+0xf6>
 800b814:	f8d8 4000 	ldr.w	r4, [r8]
 800b818:	4627      	mov	r7, r4
 800b81a:	2f00      	cmp	r7, #0
 800b81c:	d143      	bne.n	800b8a6 <_malloc_r+0xd6>
 800b81e:	2c00      	cmp	r4, #0
 800b820:	d04b      	beq.n	800b8ba <_malloc_r+0xea>
 800b822:	6823      	ldr	r3, [r4, #0]
 800b824:	4639      	mov	r1, r7
 800b826:	4630      	mov	r0, r6
 800b828:	eb04 0903 	add.w	r9, r4, r3
 800b82c:	f000 f982 	bl	800bb34 <_sbrk_r>
 800b830:	4581      	cmp	r9, r0
 800b832:	d142      	bne.n	800b8ba <_malloc_r+0xea>
 800b834:	6821      	ldr	r1, [r4, #0]
 800b836:	1a6d      	subs	r5, r5, r1
 800b838:	4629      	mov	r1, r5
 800b83a:	4630      	mov	r0, r6
 800b83c:	f7ff ffa6 	bl	800b78c <sbrk_aligned>
 800b840:	3001      	adds	r0, #1
 800b842:	d03a      	beq.n	800b8ba <_malloc_r+0xea>
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	442b      	add	r3, r5
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	f8d8 3000 	ldr.w	r3, [r8]
 800b84e:	685a      	ldr	r2, [r3, #4]
 800b850:	bb62      	cbnz	r2, 800b8ac <_malloc_r+0xdc>
 800b852:	f8c8 7000 	str.w	r7, [r8]
 800b856:	e00f      	b.n	800b878 <_malloc_r+0xa8>
 800b858:	6822      	ldr	r2, [r4, #0]
 800b85a:	1b52      	subs	r2, r2, r5
 800b85c:	d420      	bmi.n	800b8a0 <_malloc_r+0xd0>
 800b85e:	2a0b      	cmp	r2, #11
 800b860:	d917      	bls.n	800b892 <_malloc_r+0xc2>
 800b862:	1961      	adds	r1, r4, r5
 800b864:	42a3      	cmp	r3, r4
 800b866:	6025      	str	r5, [r4, #0]
 800b868:	bf18      	it	ne
 800b86a:	6059      	strne	r1, [r3, #4]
 800b86c:	6863      	ldr	r3, [r4, #4]
 800b86e:	bf08      	it	eq
 800b870:	f8c8 1000 	streq.w	r1, [r8]
 800b874:	5162      	str	r2, [r4, r5]
 800b876:	604b      	str	r3, [r1, #4]
 800b878:	4630      	mov	r0, r6
 800b87a:	f000 f8db 	bl	800ba34 <__malloc_unlock>
 800b87e:	f104 000b 	add.w	r0, r4, #11
 800b882:	1d23      	adds	r3, r4, #4
 800b884:	f020 0007 	bic.w	r0, r0, #7
 800b888:	1ac2      	subs	r2, r0, r3
 800b88a:	bf1c      	itt	ne
 800b88c:	1a1b      	subne	r3, r3, r0
 800b88e:	50a3      	strne	r3, [r4, r2]
 800b890:	e7af      	b.n	800b7f2 <_malloc_r+0x22>
 800b892:	6862      	ldr	r2, [r4, #4]
 800b894:	42a3      	cmp	r3, r4
 800b896:	bf0c      	ite	eq
 800b898:	f8c8 2000 	streq.w	r2, [r8]
 800b89c:	605a      	strne	r2, [r3, #4]
 800b89e:	e7eb      	b.n	800b878 <_malloc_r+0xa8>
 800b8a0:	4623      	mov	r3, r4
 800b8a2:	6864      	ldr	r4, [r4, #4]
 800b8a4:	e7ae      	b.n	800b804 <_malloc_r+0x34>
 800b8a6:	463c      	mov	r4, r7
 800b8a8:	687f      	ldr	r7, [r7, #4]
 800b8aa:	e7b6      	b.n	800b81a <_malloc_r+0x4a>
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	d1fb      	bne.n	800b8ac <_malloc_r+0xdc>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	6053      	str	r3, [r2, #4]
 800b8b8:	e7de      	b.n	800b878 <_malloc_r+0xa8>
 800b8ba:	230c      	movs	r3, #12
 800b8bc:	6033      	str	r3, [r6, #0]
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f000 f8b8 	bl	800ba34 <__malloc_unlock>
 800b8c4:	e794      	b.n	800b7f0 <_malloc_r+0x20>
 800b8c6:	6005      	str	r5, [r0, #0]
 800b8c8:	e7d6      	b.n	800b878 <_malloc_r+0xa8>
 800b8ca:	bf00      	nop
 800b8cc:	2406f734 	.word	0x2406f734

0800b8d0 <__sflush_r>:
 800b8d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d8:	0716      	lsls	r6, r2, #28
 800b8da:	4605      	mov	r5, r0
 800b8dc:	460c      	mov	r4, r1
 800b8de:	d454      	bmi.n	800b98a <__sflush_r+0xba>
 800b8e0:	684b      	ldr	r3, [r1, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	dc02      	bgt.n	800b8ec <__sflush_r+0x1c>
 800b8e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	dd48      	ble.n	800b97e <__sflush_r+0xae>
 800b8ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8ee:	2e00      	cmp	r6, #0
 800b8f0:	d045      	beq.n	800b97e <__sflush_r+0xae>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8f8:	682f      	ldr	r7, [r5, #0]
 800b8fa:	6a21      	ldr	r1, [r4, #32]
 800b8fc:	602b      	str	r3, [r5, #0]
 800b8fe:	d030      	beq.n	800b962 <__sflush_r+0x92>
 800b900:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b902:	89a3      	ldrh	r3, [r4, #12]
 800b904:	0759      	lsls	r1, r3, #29
 800b906:	d505      	bpl.n	800b914 <__sflush_r+0x44>
 800b908:	6863      	ldr	r3, [r4, #4]
 800b90a:	1ad2      	subs	r2, r2, r3
 800b90c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b90e:	b10b      	cbz	r3, 800b914 <__sflush_r+0x44>
 800b910:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b912:	1ad2      	subs	r2, r2, r3
 800b914:	2300      	movs	r3, #0
 800b916:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b918:	6a21      	ldr	r1, [r4, #32]
 800b91a:	4628      	mov	r0, r5
 800b91c:	47b0      	blx	r6
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	89a3      	ldrh	r3, [r4, #12]
 800b922:	d106      	bne.n	800b932 <__sflush_r+0x62>
 800b924:	6829      	ldr	r1, [r5, #0]
 800b926:	291d      	cmp	r1, #29
 800b928:	d82b      	bhi.n	800b982 <__sflush_r+0xb2>
 800b92a:	4a2a      	ldr	r2, [pc, #168]	@ (800b9d4 <__sflush_r+0x104>)
 800b92c:	40ca      	lsrs	r2, r1
 800b92e:	07d6      	lsls	r6, r2, #31
 800b930:	d527      	bpl.n	800b982 <__sflush_r+0xb2>
 800b932:	2200      	movs	r2, #0
 800b934:	6062      	str	r2, [r4, #4]
 800b936:	04d9      	lsls	r1, r3, #19
 800b938:	6922      	ldr	r2, [r4, #16]
 800b93a:	6022      	str	r2, [r4, #0]
 800b93c:	d504      	bpl.n	800b948 <__sflush_r+0x78>
 800b93e:	1c42      	adds	r2, r0, #1
 800b940:	d101      	bne.n	800b946 <__sflush_r+0x76>
 800b942:	682b      	ldr	r3, [r5, #0]
 800b944:	b903      	cbnz	r3, 800b948 <__sflush_r+0x78>
 800b946:	6560      	str	r0, [r4, #84]	@ 0x54
 800b948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b94a:	602f      	str	r7, [r5, #0]
 800b94c:	b1b9      	cbz	r1, 800b97e <__sflush_r+0xae>
 800b94e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b952:	4299      	cmp	r1, r3
 800b954:	d002      	beq.n	800b95c <__sflush_r+0x8c>
 800b956:	4628      	mov	r0, r5
 800b958:	f000 f926 	bl	800bba8 <_free_r>
 800b95c:	2300      	movs	r3, #0
 800b95e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b960:	e00d      	b.n	800b97e <__sflush_r+0xae>
 800b962:	2301      	movs	r3, #1
 800b964:	4628      	mov	r0, r5
 800b966:	47b0      	blx	r6
 800b968:	4602      	mov	r2, r0
 800b96a:	1c50      	adds	r0, r2, #1
 800b96c:	d1c9      	bne.n	800b902 <__sflush_r+0x32>
 800b96e:	682b      	ldr	r3, [r5, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d0c6      	beq.n	800b902 <__sflush_r+0x32>
 800b974:	2b1d      	cmp	r3, #29
 800b976:	d001      	beq.n	800b97c <__sflush_r+0xac>
 800b978:	2b16      	cmp	r3, #22
 800b97a:	d11e      	bne.n	800b9ba <__sflush_r+0xea>
 800b97c:	602f      	str	r7, [r5, #0]
 800b97e:	2000      	movs	r0, #0
 800b980:	e022      	b.n	800b9c8 <__sflush_r+0xf8>
 800b982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b986:	b21b      	sxth	r3, r3
 800b988:	e01b      	b.n	800b9c2 <__sflush_r+0xf2>
 800b98a:	690f      	ldr	r7, [r1, #16]
 800b98c:	2f00      	cmp	r7, #0
 800b98e:	d0f6      	beq.n	800b97e <__sflush_r+0xae>
 800b990:	0793      	lsls	r3, r2, #30
 800b992:	680e      	ldr	r6, [r1, #0]
 800b994:	bf08      	it	eq
 800b996:	694b      	ldreq	r3, [r1, #20]
 800b998:	600f      	str	r7, [r1, #0]
 800b99a:	bf18      	it	ne
 800b99c:	2300      	movne	r3, #0
 800b99e:	eba6 0807 	sub.w	r8, r6, r7
 800b9a2:	608b      	str	r3, [r1, #8]
 800b9a4:	f1b8 0f00 	cmp.w	r8, #0
 800b9a8:	dde9      	ble.n	800b97e <__sflush_r+0xae>
 800b9aa:	6a21      	ldr	r1, [r4, #32]
 800b9ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b9ae:	4643      	mov	r3, r8
 800b9b0:	463a      	mov	r2, r7
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	47b0      	blx	r6
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	dc08      	bgt.n	800b9cc <__sflush_r+0xfc>
 800b9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9c2:	81a3      	strh	r3, [r4, #12]
 800b9c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9cc:	4407      	add	r7, r0
 800b9ce:	eba8 0800 	sub.w	r8, r8, r0
 800b9d2:	e7e7      	b.n	800b9a4 <__sflush_r+0xd4>
 800b9d4:	20400001 	.word	0x20400001

0800b9d8 <_fflush_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	690b      	ldr	r3, [r1, #16]
 800b9dc:	4605      	mov	r5, r0
 800b9de:	460c      	mov	r4, r1
 800b9e0:	b913      	cbnz	r3, 800b9e8 <_fflush_r+0x10>
 800b9e2:	2500      	movs	r5, #0
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	bd38      	pop	{r3, r4, r5, pc}
 800b9e8:	b118      	cbz	r0, 800b9f2 <_fflush_r+0x1a>
 800b9ea:	6a03      	ldr	r3, [r0, #32]
 800b9ec:	b90b      	cbnz	r3, 800b9f2 <_fflush_r+0x1a>
 800b9ee:	f7ff fd13 	bl	800b418 <__sinit>
 800b9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d0f3      	beq.n	800b9e2 <_fflush_r+0xa>
 800b9fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9fc:	07d0      	lsls	r0, r2, #31
 800b9fe:	d404      	bmi.n	800ba0a <_fflush_r+0x32>
 800ba00:	0599      	lsls	r1, r3, #22
 800ba02:	d402      	bmi.n	800ba0a <_fflush_r+0x32>
 800ba04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba06:	f7ff fe98 	bl	800b73a <__retarget_lock_acquire_recursive>
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	f7ff ff5f 	bl	800b8d0 <__sflush_r>
 800ba12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba14:	07da      	lsls	r2, r3, #31
 800ba16:	4605      	mov	r5, r0
 800ba18:	d4e4      	bmi.n	800b9e4 <_fflush_r+0xc>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	059b      	lsls	r3, r3, #22
 800ba1e:	d4e1      	bmi.n	800b9e4 <_fflush_r+0xc>
 800ba20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba22:	f7ff fe8b 	bl	800b73c <__retarget_lock_release_recursive>
 800ba26:	e7dd      	b.n	800b9e4 <_fflush_r+0xc>

0800ba28 <__malloc_lock>:
 800ba28:	4801      	ldr	r0, [pc, #4]	@ (800ba30 <__malloc_lock+0x8>)
 800ba2a:	f7ff be86 	b.w	800b73a <__retarget_lock_acquire_recursive>
 800ba2e:	bf00      	nop
 800ba30:	2406f72c 	.word	0x2406f72c

0800ba34 <__malloc_unlock>:
 800ba34:	4801      	ldr	r0, [pc, #4]	@ (800ba3c <__malloc_unlock+0x8>)
 800ba36:	f7ff be81 	b.w	800b73c <__retarget_lock_release_recursive>
 800ba3a:	bf00      	nop
 800ba3c:	2406f72c 	.word	0x2406f72c

0800ba40 <__sread>:
 800ba40:	b510      	push	{r4, lr}
 800ba42:	460c      	mov	r4, r1
 800ba44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba48:	f000 f862 	bl	800bb10 <_read_r>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	bfab      	itete	ge
 800ba50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba52:	89a3      	ldrhlt	r3, [r4, #12]
 800ba54:	181b      	addge	r3, r3, r0
 800ba56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba5a:	bfac      	ite	ge
 800ba5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba5e:	81a3      	strhlt	r3, [r4, #12]
 800ba60:	bd10      	pop	{r4, pc}

0800ba62 <__swrite>:
 800ba62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba66:	461f      	mov	r7, r3
 800ba68:	898b      	ldrh	r3, [r1, #12]
 800ba6a:	05db      	lsls	r3, r3, #23
 800ba6c:	4605      	mov	r5, r0
 800ba6e:	460c      	mov	r4, r1
 800ba70:	4616      	mov	r6, r2
 800ba72:	d505      	bpl.n	800ba80 <__swrite+0x1e>
 800ba74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba78:	2302      	movs	r3, #2
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f000 f836 	bl	800baec <_lseek_r>
 800ba80:	89a3      	ldrh	r3, [r4, #12]
 800ba82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba8a:	81a3      	strh	r3, [r4, #12]
 800ba8c:	4632      	mov	r2, r6
 800ba8e:	463b      	mov	r3, r7
 800ba90:	4628      	mov	r0, r5
 800ba92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba96:	f000 b85d 	b.w	800bb54 <_write_r>

0800ba9a <__sseek>:
 800ba9a:	b510      	push	{r4, lr}
 800ba9c:	460c      	mov	r4, r1
 800ba9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa2:	f000 f823 	bl	800baec <_lseek_r>
 800baa6:	1c43      	adds	r3, r0, #1
 800baa8:	89a3      	ldrh	r3, [r4, #12]
 800baaa:	bf15      	itete	ne
 800baac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800baae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bab2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bab6:	81a3      	strheq	r3, [r4, #12]
 800bab8:	bf18      	it	ne
 800baba:	81a3      	strhne	r3, [r4, #12]
 800babc:	bd10      	pop	{r4, pc}

0800babe <__sclose>:
 800babe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac2:	f000 b859 	b.w	800bb78 <_close_r>
	...

0800bac8 <fiprintf>:
 800bac8:	b40e      	push	{r1, r2, r3}
 800baca:	b503      	push	{r0, r1, lr}
 800bacc:	4601      	mov	r1, r0
 800bace:	ab03      	add	r3, sp, #12
 800bad0:	4805      	ldr	r0, [pc, #20]	@ (800bae8 <fiprintf+0x20>)
 800bad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad6:	6800      	ldr	r0, [r0, #0]
 800bad8:	9301      	str	r3, [sp, #4]
 800bada:	f000 f8d9 	bl	800bc90 <_vfiprintf_r>
 800bade:	b002      	add	sp, #8
 800bae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bae4:	b003      	add	sp, #12
 800bae6:	4770      	bx	lr
 800bae8:	24000034 	.word	0x24000034

0800baec <_lseek_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	4d07      	ldr	r5, [pc, #28]	@ (800bb0c <_lseek_r+0x20>)
 800baf0:	4604      	mov	r4, r0
 800baf2:	4608      	mov	r0, r1
 800baf4:	4611      	mov	r1, r2
 800baf6:	2200      	movs	r2, #0
 800baf8:	602a      	str	r2, [r5, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	f7f7 fbc6 	bl	800328c <_lseek>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_lseek_r+0x1e>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_lseek_r+0x1e>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	2406f738 	.word	0x2406f738

0800bb10 <_read_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	4d07      	ldr	r5, [pc, #28]	@ (800bb30 <_read_r+0x20>)
 800bb14:	4604      	mov	r4, r0
 800bb16:	4608      	mov	r0, r1
 800bb18:	4611      	mov	r1, r2
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	602a      	str	r2, [r5, #0]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	f7f7 fb8c 	bl	800323c <_read>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	d102      	bne.n	800bb2e <_read_r+0x1e>
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	b103      	cbz	r3, 800bb2e <_read_r+0x1e>
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	bd38      	pop	{r3, r4, r5, pc}
 800bb30:	2406f738 	.word	0x2406f738

0800bb34 <_sbrk_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4d06      	ldr	r5, [pc, #24]	@ (800bb50 <_sbrk_r+0x1c>)
 800bb38:	2300      	movs	r3, #0
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	602b      	str	r3, [r5, #0]
 800bb40:	f7f7 fba6 	bl	8003290 <_sbrk>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <_sbrk_r+0x1a>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	b103      	cbz	r3, 800bb4e <_sbrk_r+0x1a>
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	2406f738 	.word	0x2406f738

0800bb54 <_write_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4d07      	ldr	r5, [pc, #28]	@ (800bb74 <_write_r+0x20>)
 800bb58:	4604      	mov	r4, r0
 800bb5a:	4608      	mov	r0, r1
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	602a      	str	r2, [r5, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	f7f7 fb78 	bl	8003258 <_write>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_write_r+0x1e>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_write_r+0x1e>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	2406f738 	.word	0x2406f738

0800bb78 <_close_r>:
 800bb78:	b538      	push	{r3, r4, r5, lr}
 800bb7a:	4d06      	ldr	r5, [pc, #24]	@ (800bb94 <_close_r+0x1c>)
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	4604      	mov	r4, r0
 800bb80:	4608      	mov	r0, r1
 800bb82:	602b      	str	r3, [r5, #0]
 800bb84:	f7f7 fb76 	bl	8003274 <_close>
 800bb88:	1c43      	adds	r3, r0, #1
 800bb8a:	d102      	bne.n	800bb92 <_close_r+0x1a>
 800bb8c:	682b      	ldr	r3, [r5, #0]
 800bb8e:	b103      	cbz	r3, 800bb92 <_close_r+0x1a>
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	bd38      	pop	{r3, r4, r5, pc}
 800bb94:	2406f738 	.word	0x2406f738

0800bb98 <abort>:
 800bb98:	b508      	push	{r3, lr}
 800bb9a:	2006      	movs	r0, #6
 800bb9c:	f000 fc3a 	bl	800c414 <raise>
 800bba0:	2001      	movs	r0, #1
 800bba2:	f7f7 fb45 	bl	8003230 <_exit>
	...

0800bba8 <_free_r>:
 800bba8:	b538      	push	{r3, r4, r5, lr}
 800bbaa:	4605      	mov	r5, r0
 800bbac:	2900      	cmp	r1, #0
 800bbae:	d041      	beq.n	800bc34 <_free_r+0x8c>
 800bbb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbb4:	1f0c      	subs	r4, r1, #4
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	bfb8      	it	lt
 800bbba:	18e4      	addlt	r4, r4, r3
 800bbbc:	f7ff ff34 	bl	800ba28 <__malloc_lock>
 800bbc0:	4a1d      	ldr	r2, [pc, #116]	@ (800bc38 <_free_r+0x90>)
 800bbc2:	6813      	ldr	r3, [r2, #0]
 800bbc4:	b933      	cbnz	r3, 800bbd4 <_free_r+0x2c>
 800bbc6:	6063      	str	r3, [r4, #4]
 800bbc8:	6014      	str	r4, [r2, #0]
 800bbca:	4628      	mov	r0, r5
 800bbcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbd0:	f7ff bf30 	b.w	800ba34 <__malloc_unlock>
 800bbd4:	42a3      	cmp	r3, r4
 800bbd6:	d908      	bls.n	800bbea <_free_r+0x42>
 800bbd8:	6820      	ldr	r0, [r4, #0]
 800bbda:	1821      	adds	r1, r4, r0
 800bbdc:	428b      	cmp	r3, r1
 800bbde:	bf01      	itttt	eq
 800bbe0:	6819      	ldreq	r1, [r3, #0]
 800bbe2:	685b      	ldreq	r3, [r3, #4]
 800bbe4:	1809      	addeq	r1, r1, r0
 800bbe6:	6021      	streq	r1, [r4, #0]
 800bbe8:	e7ed      	b.n	800bbc6 <_free_r+0x1e>
 800bbea:	461a      	mov	r2, r3
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	b10b      	cbz	r3, 800bbf4 <_free_r+0x4c>
 800bbf0:	42a3      	cmp	r3, r4
 800bbf2:	d9fa      	bls.n	800bbea <_free_r+0x42>
 800bbf4:	6811      	ldr	r1, [r2, #0]
 800bbf6:	1850      	adds	r0, r2, r1
 800bbf8:	42a0      	cmp	r0, r4
 800bbfa:	d10b      	bne.n	800bc14 <_free_r+0x6c>
 800bbfc:	6820      	ldr	r0, [r4, #0]
 800bbfe:	4401      	add	r1, r0
 800bc00:	1850      	adds	r0, r2, r1
 800bc02:	4283      	cmp	r3, r0
 800bc04:	6011      	str	r1, [r2, #0]
 800bc06:	d1e0      	bne.n	800bbca <_free_r+0x22>
 800bc08:	6818      	ldr	r0, [r3, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	6053      	str	r3, [r2, #4]
 800bc0e:	4408      	add	r0, r1
 800bc10:	6010      	str	r0, [r2, #0]
 800bc12:	e7da      	b.n	800bbca <_free_r+0x22>
 800bc14:	d902      	bls.n	800bc1c <_free_r+0x74>
 800bc16:	230c      	movs	r3, #12
 800bc18:	602b      	str	r3, [r5, #0]
 800bc1a:	e7d6      	b.n	800bbca <_free_r+0x22>
 800bc1c:	6820      	ldr	r0, [r4, #0]
 800bc1e:	1821      	adds	r1, r4, r0
 800bc20:	428b      	cmp	r3, r1
 800bc22:	bf04      	itt	eq
 800bc24:	6819      	ldreq	r1, [r3, #0]
 800bc26:	685b      	ldreq	r3, [r3, #4]
 800bc28:	6063      	str	r3, [r4, #4]
 800bc2a:	bf04      	itt	eq
 800bc2c:	1809      	addeq	r1, r1, r0
 800bc2e:	6021      	streq	r1, [r4, #0]
 800bc30:	6054      	str	r4, [r2, #4]
 800bc32:	e7ca      	b.n	800bbca <_free_r+0x22>
 800bc34:	bd38      	pop	{r3, r4, r5, pc}
 800bc36:	bf00      	nop
 800bc38:	2406f734 	.word	0x2406f734

0800bc3c <__sfputc_r>:
 800bc3c:	6893      	ldr	r3, [r2, #8]
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	b410      	push	{r4}
 800bc44:	6093      	str	r3, [r2, #8]
 800bc46:	da08      	bge.n	800bc5a <__sfputc_r+0x1e>
 800bc48:	6994      	ldr	r4, [r2, #24]
 800bc4a:	42a3      	cmp	r3, r4
 800bc4c:	db01      	blt.n	800bc52 <__sfputc_r+0x16>
 800bc4e:	290a      	cmp	r1, #10
 800bc50:	d103      	bne.n	800bc5a <__sfputc_r+0x1e>
 800bc52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc56:	f000 babf 	b.w	800c1d8 <__swbuf_r>
 800bc5a:	6813      	ldr	r3, [r2, #0]
 800bc5c:	1c58      	adds	r0, r3, #1
 800bc5e:	6010      	str	r0, [r2, #0]
 800bc60:	7019      	strb	r1, [r3, #0]
 800bc62:	4608      	mov	r0, r1
 800bc64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <__sfputs_r>:
 800bc6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	4614      	mov	r4, r2
 800bc72:	18d5      	adds	r5, r2, r3
 800bc74:	42ac      	cmp	r4, r5
 800bc76:	d101      	bne.n	800bc7c <__sfputs_r+0x12>
 800bc78:	2000      	movs	r0, #0
 800bc7a:	e007      	b.n	800bc8c <__sfputs_r+0x22>
 800bc7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc80:	463a      	mov	r2, r7
 800bc82:	4630      	mov	r0, r6
 800bc84:	f7ff ffda 	bl	800bc3c <__sfputc_r>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d1f3      	bne.n	800bc74 <__sfputs_r+0xa>
 800bc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc90 <_vfiprintf_r>:
 800bc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc94:	460d      	mov	r5, r1
 800bc96:	b09d      	sub	sp, #116	@ 0x74
 800bc98:	4614      	mov	r4, r2
 800bc9a:	4698      	mov	r8, r3
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	b118      	cbz	r0, 800bca8 <_vfiprintf_r+0x18>
 800bca0:	6a03      	ldr	r3, [r0, #32]
 800bca2:	b90b      	cbnz	r3, 800bca8 <_vfiprintf_r+0x18>
 800bca4:	f7ff fbb8 	bl	800b418 <__sinit>
 800bca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcaa:	07d9      	lsls	r1, r3, #31
 800bcac:	d405      	bmi.n	800bcba <_vfiprintf_r+0x2a>
 800bcae:	89ab      	ldrh	r3, [r5, #12]
 800bcb0:	059a      	lsls	r2, r3, #22
 800bcb2:	d402      	bmi.n	800bcba <_vfiprintf_r+0x2a>
 800bcb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcb6:	f7ff fd40 	bl	800b73a <__retarget_lock_acquire_recursive>
 800bcba:	89ab      	ldrh	r3, [r5, #12]
 800bcbc:	071b      	lsls	r3, r3, #28
 800bcbe:	d501      	bpl.n	800bcc4 <_vfiprintf_r+0x34>
 800bcc0:	692b      	ldr	r3, [r5, #16]
 800bcc2:	b99b      	cbnz	r3, 800bcec <_vfiprintf_r+0x5c>
 800bcc4:	4629      	mov	r1, r5
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	f000 fac4 	bl	800c254 <__swsetup_r>
 800bccc:	b170      	cbz	r0, 800bcec <_vfiprintf_r+0x5c>
 800bcce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcd0:	07dc      	lsls	r4, r3, #31
 800bcd2:	d504      	bpl.n	800bcde <_vfiprintf_r+0x4e>
 800bcd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bcd8:	b01d      	add	sp, #116	@ 0x74
 800bcda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcde:	89ab      	ldrh	r3, [r5, #12]
 800bce0:	0598      	lsls	r0, r3, #22
 800bce2:	d4f7      	bmi.n	800bcd4 <_vfiprintf_r+0x44>
 800bce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bce6:	f7ff fd29 	bl	800b73c <__retarget_lock_release_recursive>
 800bcea:	e7f3      	b.n	800bcd4 <_vfiprintf_r+0x44>
 800bcec:	2300      	movs	r3, #0
 800bcee:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcf0:	2320      	movs	r3, #32
 800bcf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcfa:	2330      	movs	r3, #48	@ 0x30
 800bcfc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800beac <_vfiprintf_r+0x21c>
 800bd00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd04:	f04f 0901 	mov.w	r9, #1
 800bd08:	4623      	mov	r3, r4
 800bd0a:	469a      	mov	sl, r3
 800bd0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd10:	b10a      	cbz	r2, 800bd16 <_vfiprintf_r+0x86>
 800bd12:	2a25      	cmp	r2, #37	@ 0x25
 800bd14:	d1f9      	bne.n	800bd0a <_vfiprintf_r+0x7a>
 800bd16:	ebba 0b04 	subs.w	fp, sl, r4
 800bd1a:	d00b      	beq.n	800bd34 <_vfiprintf_r+0xa4>
 800bd1c:	465b      	mov	r3, fp
 800bd1e:	4622      	mov	r2, r4
 800bd20:	4629      	mov	r1, r5
 800bd22:	4630      	mov	r0, r6
 800bd24:	f7ff ffa1 	bl	800bc6a <__sfputs_r>
 800bd28:	3001      	adds	r0, #1
 800bd2a:	f000 80a7 	beq.w	800be7c <_vfiprintf_r+0x1ec>
 800bd2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd30:	445a      	add	r2, fp
 800bd32:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd34:	f89a 3000 	ldrb.w	r3, [sl]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f000 809f 	beq.w	800be7c <_vfiprintf_r+0x1ec>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd48:	f10a 0a01 	add.w	sl, sl, #1
 800bd4c:	9304      	str	r3, [sp, #16]
 800bd4e:	9307      	str	r3, [sp, #28]
 800bd50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd54:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd56:	4654      	mov	r4, sl
 800bd58:	2205      	movs	r2, #5
 800bd5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd5e:	4853      	ldr	r0, [pc, #332]	@ (800beac <_vfiprintf_r+0x21c>)
 800bd60:	f7f4 fb1e 	bl	80003a0 <memchr>
 800bd64:	9a04      	ldr	r2, [sp, #16]
 800bd66:	b9d8      	cbnz	r0, 800bda0 <_vfiprintf_r+0x110>
 800bd68:	06d1      	lsls	r1, r2, #27
 800bd6a:	bf44      	itt	mi
 800bd6c:	2320      	movmi	r3, #32
 800bd6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd72:	0713      	lsls	r3, r2, #28
 800bd74:	bf44      	itt	mi
 800bd76:	232b      	movmi	r3, #43	@ 0x2b
 800bd78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd7c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd80:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd82:	d015      	beq.n	800bdb0 <_vfiprintf_r+0x120>
 800bd84:	9a07      	ldr	r2, [sp, #28]
 800bd86:	4654      	mov	r4, sl
 800bd88:	2000      	movs	r0, #0
 800bd8a:	f04f 0c0a 	mov.w	ip, #10
 800bd8e:	4621      	mov	r1, r4
 800bd90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd94:	3b30      	subs	r3, #48	@ 0x30
 800bd96:	2b09      	cmp	r3, #9
 800bd98:	d94b      	bls.n	800be32 <_vfiprintf_r+0x1a2>
 800bd9a:	b1b0      	cbz	r0, 800bdca <_vfiprintf_r+0x13a>
 800bd9c:	9207      	str	r2, [sp, #28]
 800bd9e:	e014      	b.n	800bdca <_vfiprintf_r+0x13a>
 800bda0:	eba0 0308 	sub.w	r3, r0, r8
 800bda4:	fa09 f303 	lsl.w	r3, r9, r3
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	46a2      	mov	sl, r4
 800bdae:	e7d2      	b.n	800bd56 <_vfiprintf_r+0xc6>
 800bdb0:	9b03      	ldr	r3, [sp, #12]
 800bdb2:	1d19      	adds	r1, r3, #4
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	9103      	str	r1, [sp, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	bfbb      	ittet	lt
 800bdbc:	425b      	neglt	r3, r3
 800bdbe:	f042 0202 	orrlt.w	r2, r2, #2
 800bdc2:	9307      	strge	r3, [sp, #28]
 800bdc4:	9307      	strlt	r3, [sp, #28]
 800bdc6:	bfb8      	it	lt
 800bdc8:	9204      	strlt	r2, [sp, #16]
 800bdca:	7823      	ldrb	r3, [r4, #0]
 800bdcc:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdce:	d10a      	bne.n	800bde6 <_vfiprintf_r+0x156>
 800bdd0:	7863      	ldrb	r3, [r4, #1]
 800bdd2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdd4:	d132      	bne.n	800be3c <_vfiprintf_r+0x1ac>
 800bdd6:	9b03      	ldr	r3, [sp, #12]
 800bdd8:	1d1a      	adds	r2, r3, #4
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	9203      	str	r2, [sp, #12]
 800bdde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bde2:	3402      	adds	r4, #2
 800bde4:	9305      	str	r3, [sp, #20]
 800bde6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bebc <_vfiprintf_r+0x22c>
 800bdea:	7821      	ldrb	r1, [r4, #0]
 800bdec:	2203      	movs	r2, #3
 800bdee:	4650      	mov	r0, sl
 800bdf0:	f7f4 fad6 	bl	80003a0 <memchr>
 800bdf4:	b138      	cbz	r0, 800be06 <_vfiprintf_r+0x176>
 800bdf6:	9b04      	ldr	r3, [sp, #16]
 800bdf8:	eba0 000a 	sub.w	r0, r0, sl
 800bdfc:	2240      	movs	r2, #64	@ 0x40
 800bdfe:	4082      	lsls	r2, r0
 800be00:	4313      	orrs	r3, r2
 800be02:	3401      	adds	r4, #1
 800be04:	9304      	str	r3, [sp, #16]
 800be06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be0a:	4829      	ldr	r0, [pc, #164]	@ (800beb0 <_vfiprintf_r+0x220>)
 800be0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be10:	2206      	movs	r2, #6
 800be12:	f7f4 fac5 	bl	80003a0 <memchr>
 800be16:	2800      	cmp	r0, #0
 800be18:	d03f      	beq.n	800be9a <_vfiprintf_r+0x20a>
 800be1a:	4b26      	ldr	r3, [pc, #152]	@ (800beb4 <_vfiprintf_r+0x224>)
 800be1c:	bb1b      	cbnz	r3, 800be66 <_vfiprintf_r+0x1d6>
 800be1e:	9b03      	ldr	r3, [sp, #12]
 800be20:	3307      	adds	r3, #7
 800be22:	f023 0307 	bic.w	r3, r3, #7
 800be26:	3308      	adds	r3, #8
 800be28:	9303      	str	r3, [sp, #12]
 800be2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be2c:	443b      	add	r3, r7
 800be2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be30:	e76a      	b.n	800bd08 <_vfiprintf_r+0x78>
 800be32:	fb0c 3202 	mla	r2, ip, r2, r3
 800be36:	460c      	mov	r4, r1
 800be38:	2001      	movs	r0, #1
 800be3a:	e7a8      	b.n	800bd8e <_vfiprintf_r+0xfe>
 800be3c:	2300      	movs	r3, #0
 800be3e:	3401      	adds	r4, #1
 800be40:	9305      	str	r3, [sp, #20]
 800be42:	4619      	mov	r1, r3
 800be44:	f04f 0c0a 	mov.w	ip, #10
 800be48:	4620      	mov	r0, r4
 800be4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be4e:	3a30      	subs	r2, #48	@ 0x30
 800be50:	2a09      	cmp	r2, #9
 800be52:	d903      	bls.n	800be5c <_vfiprintf_r+0x1cc>
 800be54:	2b00      	cmp	r3, #0
 800be56:	d0c6      	beq.n	800bde6 <_vfiprintf_r+0x156>
 800be58:	9105      	str	r1, [sp, #20]
 800be5a:	e7c4      	b.n	800bde6 <_vfiprintf_r+0x156>
 800be5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800be60:	4604      	mov	r4, r0
 800be62:	2301      	movs	r3, #1
 800be64:	e7f0      	b.n	800be48 <_vfiprintf_r+0x1b8>
 800be66:	ab03      	add	r3, sp, #12
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	462a      	mov	r2, r5
 800be6c:	4b12      	ldr	r3, [pc, #72]	@ (800beb8 <_vfiprintf_r+0x228>)
 800be6e:	a904      	add	r1, sp, #16
 800be70:	4630      	mov	r0, r6
 800be72:	f3af 8000 	nop.w
 800be76:	4607      	mov	r7, r0
 800be78:	1c78      	adds	r0, r7, #1
 800be7a:	d1d6      	bne.n	800be2a <_vfiprintf_r+0x19a>
 800be7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be7e:	07d9      	lsls	r1, r3, #31
 800be80:	d405      	bmi.n	800be8e <_vfiprintf_r+0x1fe>
 800be82:	89ab      	ldrh	r3, [r5, #12]
 800be84:	059a      	lsls	r2, r3, #22
 800be86:	d402      	bmi.n	800be8e <_vfiprintf_r+0x1fe>
 800be88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be8a:	f7ff fc57 	bl	800b73c <__retarget_lock_release_recursive>
 800be8e:	89ab      	ldrh	r3, [r5, #12]
 800be90:	065b      	lsls	r3, r3, #25
 800be92:	f53f af1f 	bmi.w	800bcd4 <_vfiprintf_r+0x44>
 800be96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be98:	e71e      	b.n	800bcd8 <_vfiprintf_r+0x48>
 800be9a:	ab03      	add	r3, sp, #12
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	462a      	mov	r2, r5
 800bea0:	4b05      	ldr	r3, [pc, #20]	@ (800beb8 <_vfiprintf_r+0x228>)
 800bea2:	a904      	add	r1, sp, #16
 800bea4:	4630      	mov	r0, r6
 800bea6:	f000 f879 	bl	800bf9c <_printf_i>
 800beaa:	e7e4      	b.n	800be76 <_vfiprintf_r+0x1e6>
 800beac:	08084027 	.word	0x08084027
 800beb0:	08084031 	.word	0x08084031
 800beb4:	00000000 	.word	0x00000000
 800beb8:	0800bc6b 	.word	0x0800bc6b
 800bebc:	0808402d 	.word	0x0808402d

0800bec0 <_printf_common>:
 800bec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bec4:	4616      	mov	r6, r2
 800bec6:	4698      	mov	r8, r3
 800bec8:	688a      	ldr	r2, [r1, #8]
 800beca:	690b      	ldr	r3, [r1, #16]
 800becc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bed0:	4293      	cmp	r3, r2
 800bed2:	bfb8      	it	lt
 800bed4:	4613      	movlt	r3, r2
 800bed6:	6033      	str	r3, [r6, #0]
 800bed8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bedc:	4607      	mov	r7, r0
 800bede:	460c      	mov	r4, r1
 800bee0:	b10a      	cbz	r2, 800bee6 <_printf_common+0x26>
 800bee2:	3301      	adds	r3, #1
 800bee4:	6033      	str	r3, [r6, #0]
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	0699      	lsls	r1, r3, #26
 800beea:	bf42      	ittt	mi
 800beec:	6833      	ldrmi	r3, [r6, #0]
 800beee:	3302      	addmi	r3, #2
 800bef0:	6033      	strmi	r3, [r6, #0]
 800bef2:	6825      	ldr	r5, [r4, #0]
 800bef4:	f015 0506 	ands.w	r5, r5, #6
 800bef8:	d106      	bne.n	800bf08 <_printf_common+0x48>
 800befa:	f104 0a19 	add.w	sl, r4, #25
 800befe:	68e3      	ldr	r3, [r4, #12]
 800bf00:	6832      	ldr	r2, [r6, #0]
 800bf02:	1a9b      	subs	r3, r3, r2
 800bf04:	42ab      	cmp	r3, r5
 800bf06:	dc26      	bgt.n	800bf56 <_printf_common+0x96>
 800bf08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf0c:	6822      	ldr	r2, [r4, #0]
 800bf0e:	3b00      	subs	r3, #0
 800bf10:	bf18      	it	ne
 800bf12:	2301      	movne	r3, #1
 800bf14:	0692      	lsls	r2, r2, #26
 800bf16:	d42b      	bmi.n	800bf70 <_printf_common+0xb0>
 800bf18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf1c:	4641      	mov	r1, r8
 800bf1e:	4638      	mov	r0, r7
 800bf20:	47c8      	blx	r9
 800bf22:	3001      	adds	r0, #1
 800bf24:	d01e      	beq.n	800bf64 <_printf_common+0xa4>
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	6922      	ldr	r2, [r4, #16]
 800bf2a:	f003 0306 	and.w	r3, r3, #6
 800bf2e:	2b04      	cmp	r3, #4
 800bf30:	bf02      	ittt	eq
 800bf32:	68e5      	ldreq	r5, [r4, #12]
 800bf34:	6833      	ldreq	r3, [r6, #0]
 800bf36:	1aed      	subeq	r5, r5, r3
 800bf38:	68a3      	ldr	r3, [r4, #8]
 800bf3a:	bf0c      	ite	eq
 800bf3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf40:	2500      	movne	r5, #0
 800bf42:	4293      	cmp	r3, r2
 800bf44:	bfc4      	itt	gt
 800bf46:	1a9b      	subgt	r3, r3, r2
 800bf48:	18ed      	addgt	r5, r5, r3
 800bf4a:	2600      	movs	r6, #0
 800bf4c:	341a      	adds	r4, #26
 800bf4e:	42b5      	cmp	r5, r6
 800bf50:	d11a      	bne.n	800bf88 <_printf_common+0xc8>
 800bf52:	2000      	movs	r0, #0
 800bf54:	e008      	b.n	800bf68 <_printf_common+0xa8>
 800bf56:	2301      	movs	r3, #1
 800bf58:	4652      	mov	r2, sl
 800bf5a:	4641      	mov	r1, r8
 800bf5c:	4638      	mov	r0, r7
 800bf5e:	47c8      	blx	r9
 800bf60:	3001      	adds	r0, #1
 800bf62:	d103      	bne.n	800bf6c <_printf_common+0xac>
 800bf64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf6c:	3501      	adds	r5, #1
 800bf6e:	e7c6      	b.n	800befe <_printf_common+0x3e>
 800bf70:	18e1      	adds	r1, r4, r3
 800bf72:	1c5a      	adds	r2, r3, #1
 800bf74:	2030      	movs	r0, #48	@ 0x30
 800bf76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf7a:	4422      	add	r2, r4
 800bf7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf84:	3302      	adds	r3, #2
 800bf86:	e7c7      	b.n	800bf18 <_printf_common+0x58>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	4641      	mov	r1, r8
 800bf8e:	4638      	mov	r0, r7
 800bf90:	47c8      	blx	r9
 800bf92:	3001      	adds	r0, #1
 800bf94:	d0e6      	beq.n	800bf64 <_printf_common+0xa4>
 800bf96:	3601      	adds	r6, #1
 800bf98:	e7d9      	b.n	800bf4e <_printf_common+0x8e>
	...

0800bf9c <_printf_i>:
 800bf9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa0:	7e0f      	ldrb	r7, [r1, #24]
 800bfa2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bfa4:	2f78      	cmp	r7, #120	@ 0x78
 800bfa6:	4691      	mov	r9, r2
 800bfa8:	4680      	mov	r8, r0
 800bfaa:	460c      	mov	r4, r1
 800bfac:	469a      	mov	sl, r3
 800bfae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bfb2:	d807      	bhi.n	800bfc4 <_printf_i+0x28>
 800bfb4:	2f62      	cmp	r7, #98	@ 0x62
 800bfb6:	d80a      	bhi.n	800bfce <_printf_i+0x32>
 800bfb8:	2f00      	cmp	r7, #0
 800bfba:	f000 80d1 	beq.w	800c160 <_printf_i+0x1c4>
 800bfbe:	2f58      	cmp	r7, #88	@ 0x58
 800bfc0:	f000 80b8 	beq.w	800c134 <_printf_i+0x198>
 800bfc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bfcc:	e03a      	b.n	800c044 <_printf_i+0xa8>
 800bfce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bfd2:	2b15      	cmp	r3, #21
 800bfd4:	d8f6      	bhi.n	800bfc4 <_printf_i+0x28>
 800bfd6:	a101      	add	r1, pc, #4	@ (adr r1, 800bfdc <_printf_i+0x40>)
 800bfd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfdc:	0800c035 	.word	0x0800c035
 800bfe0:	0800c049 	.word	0x0800c049
 800bfe4:	0800bfc5 	.word	0x0800bfc5
 800bfe8:	0800bfc5 	.word	0x0800bfc5
 800bfec:	0800bfc5 	.word	0x0800bfc5
 800bff0:	0800bfc5 	.word	0x0800bfc5
 800bff4:	0800c049 	.word	0x0800c049
 800bff8:	0800bfc5 	.word	0x0800bfc5
 800bffc:	0800bfc5 	.word	0x0800bfc5
 800c000:	0800bfc5 	.word	0x0800bfc5
 800c004:	0800bfc5 	.word	0x0800bfc5
 800c008:	0800c147 	.word	0x0800c147
 800c00c:	0800c073 	.word	0x0800c073
 800c010:	0800c101 	.word	0x0800c101
 800c014:	0800bfc5 	.word	0x0800bfc5
 800c018:	0800bfc5 	.word	0x0800bfc5
 800c01c:	0800c169 	.word	0x0800c169
 800c020:	0800bfc5 	.word	0x0800bfc5
 800c024:	0800c073 	.word	0x0800c073
 800c028:	0800bfc5 	.word	0x0800bfc5
 800c02c:	0800bfc5 	.word	0x0800bfc5
 800c030:	0800c109 	.word	0x0800c109
 800c034:	6833      	ldr	r3, [r6, #0]
 800c036:	1d1a      	adds	r2, r3, #4
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6032      	str	r2, [r6, #0]
 800c03c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c040:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c044:	2301      	movs	r3, #1
 800c046:	e09c      	b.n	800c182 <_printf_i+0x1e6>
 800c048:	6833      	ldr	r3, [r6, #0]
 800c04a:	6820      	ldr	r0, [r4, #0]
 800c04c:	1d19      	adds	r1, r3, #4
 800c04e:	6031      	str	r1, [r6, #0]
 800c050:	0606      	lsls	r6, r0, #24
 800c052:	d501      	bpl.n	800c058 <_printf_i+0xbc>
 800c054:	681d      	ldr	r5, [r3, #0]
 800c056:	e003      	b.n	800c060 <_printf_i+0xc4>
 800c058:	0645      	lsls	r5, r0, #25
 800c05a:	d5fb      	bpl.n	800c054 <_printf_i+0xb8>
 800c05c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c060:	2d00      	cmp	r5, #0
 800c062:	da03      	bge.n	800c06c <_printf_i+0xd0>
 800c064:	232d      	movs	r3, #45	@ 0x2d
 800c066:	426d      	negs	r5, r5
 800c068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c06c:	4858      	ldr	r0, [pc, #352]	@ (800c1d0 <_printf_i+0x234>)
 800c06e:	230a      	movs	r3, #10
 800c070:	e011      	b.n	800c096 <_printf_i+0xfa>
 800c072:	6821      	ldr	r1, [r4, #0]
 800c074:	6833      	ldr	r3, [r6, #0]
 800c076:	0608      	lsls	r0, r1, #24
 800c078:	f853 5b04 	ldr.w	r5, [r3], #4
 800c07c:	d402      	bmi.n	800c084 <_printf_i+0xe8>
 800c07e:	0649      	lsls	r1, r1, #25
 800c080:	bf48      	it	mi
 800c082:	b2ad      	uxthmi	r5, r5
 800c084:	2f6f      	cmp	r7, #111	@ 0x6f
 800c086:	4852      	ldr	r0, [pc, #328]	@ (800c1d0 <_printf_i+0x234>)
 800c088:	6033      	str	r3, [r6, #0]
 800c08a:	bf14      	ite	ne
 800c08c:	230a      	movne	r3, #10
 800c08e:	2308      	moveq	r3, #8
 800c090:	2100      	movs	r1, #0
 800c092:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c096:	6866      	ldr	r6, [r4, #4]
 800c098:	60a6      	str	r6, [r4, #8]
 800c09a:	2e00      	cmp	r6, #0
 800c09c:	db05      	blt.n	800c0aa <_printf_i+0x10e>
 800c09e:	6821      	ldr	r1, [r4, #0]
 800c0a0:	432e      	orrs	r6, r5
 800c0a2:	f021 0104 	bic.w	r1, r1, #4
 800c0a6:	6021      	str	r1, [r4, #0]
 800c0a8:	d04b      	beq.n	800c142 <_printf_i+0x1a6>
 800c0aa:	4616      	mov	r6, r2
 800c0ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0b0:	fb03 5711 	mls	r7, r3, r1, r5
 800c0b4:	5dc7      	ldrb	r7, [r0, r7]
 800c0b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0ba:	462f      	mov	r7, r5
 800c0bc:	42bb      	cmp	r3, r7
 800c0be:	460d      	mov	r5, r1
 800c0c0:	d9f4      	bls.n	800c0ac <_printf_i+0x110>
 800c0c2:	2b08      	cmp	r3, #8
 800c0c4:	d10b      	bne.n	800c0de <_printf_i+0x142>
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	07df      	lsls	r7, r3, #31
 800c0ca:	d508      	bpl.n	800c0de <_printf_i+0x142>
 800c0cc:	6923      	ldr	r3, [r4, #16]
 800c0ce:	6861      	ldr	r1, [r4, #4]
 800c0d0:	4299      	cmp	r1, r3
 800c0d2:	bfde      	ittt	le
 800c0d4:	2330      	movle	r3, #48	@ 0x30
 800c0d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c0de:	1b92      	subs	r2, r2, r6
 800c0e0:	6122      	str	r2, [r4, #16]
 800c0e2:	f8cd a000 	str.w	sl, [sp]
 800c0e6:	464b      	mov	r3, r9
 800c0e8:	aa03      	add	r2, sp, #12
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	4640      	mov	r0, r8
 800c0ee:	f7ff fee7 	bl	800bec0 <_printf_common>
 800c0f2:	3001      	adds	r0, #1
 800c0f4:	d14a      	bne.n	800c18c <_printf_i+0x1f0>
 800c0f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0fa:	b004      	add	sp, #16
 800c0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c100:	6823      	ldr	r3, [r4, #0]
 800c102:	f043 0320 	orr.w	r3, r3, #32
 800c106:	6023      	str	r3, [r4, #0]
 800c108:	4832      	ldr	r0, [pc, #200]	@ (800c1d4 <_printf_i+0x238>)
 800c10a:	2778      	movs	r7, #120	@ 0x78
 800c10c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	6831      	ldr	r1, [r6, #0]
 800c114:	061f      	lsls	r7, r3, #24
 800c116:	f851 5b04 	ldr.w	r5, [r1], #4
 800c11a:	d402      	bmi.n	800c122 <_printf_i+0x186>
 800c11c:	065f      	lsls	r7, r3, #25
 800c11e:	bf48      	it	mi
 800c120:	b2ad      	uxthmi	r5, r5
 800c122:	6031      	str	r1, [r6, #0]
 800c124:	07d9      	lsls	r1, r3, #31
 800c126:	bf44      	itt	mi
 800c128:	f043 0320 	orrmi.w	r3, r3, #32
 800c12c:	6023      	strmi	r3, [r4, #0]
 800c12e:	b11d      	cbz	r5, 800c138 <_printf_i+0x19c>
 800c130:	2310      	movs	r3, #16
 800c132:	e7ad      	b.n	800c090 <_printf_i+0xf4>
 800c134:	4826      	ldr	r0, [pc, #152]	@ (800c1d0 <_printf_i+0x234>)
 800c136:	e7e9      	b.n	800c10c <_printf_i+0x170>
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	f023 0320 	bic.w	r3, r3, #32
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	e7f6      	b.n	800c130 <_printf_i+0x194>
 800c142:	4616      	mov	r6, r2
 800c144:	e7bd      	b.n	800c0c2 <_printf_i+0x126>
 800c146:	6833      	ldr	r3, [r6, #0]
 800c148:	6825      	ldr	r5, [r4, #0]
 800c14a:	6961      	ldr	r1, [r4, #20]
 800c14c:	1d18      	adds	r0, r3, #4
 800c14e:	6030      	str	r0, [r6, #0]
 800c150:	062e      	lsls	r6, r5, #24
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	d501      	bpl.n	800c15a <_printf_i+0x1be>
 800c156:	6019      	str	r1, [r3, #0]
 800c158:	e002      	b.n	800c160 <_printf_i+0x1c4>
 800c15a:	0668      	lsls	r0, r5, #25
 800c15c:	d5fb      	bpl.n	800c156 <_printf_i+0x1ba>
 800c15e:	8019      	strh	r1, [r3, #0]
 800c160:	2300      	movs	r3, #0
 800c162:	6123      	str	r3, [r4, #16]
 800c164:	4616      	mov	r6, r2
 800c166:	e7bc      	b.n	800c0e2 <_printf_i+0x146>
 800c168:	6833      	ldr	r3, [r6, #0]
 800c16a:	1d1a      	adds	r2, r3, #4
 800c16c:	6032      	str	r2, [r6, #0]
 800c16e:	681e      	ldr	r6, [r3, #0]
 800c170:	6862      	ldr	r2, [r4, #4]
 800c172:	2100      	movs	r1, #0
 800c174:	4630      	mov	r0, r6
 800c176:	f7f4 f913 	bl	80003a0 <memchr>
 800c17a:	b108      	cbz	r0, 800c180 <_printf_i+0x1e4>
 800c17c:	1b80      	subs	r0, r0, r6
 800c17e:	6060      	str	r0, [r4, #4]
 800c180:	6863      	ldr	r3, [r4, #4]
 800c182:	6123      	str	r3, [r4, #16]
 800c184:	2300      	movs	r3, #0
 800c186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c18a:	e7aa      	b.n	800c0e2 <_printf_i+0x146>
 800c18c:	6923      	ldr	r3, [r4, #16]
 800c18e:	4632      	mov	r2, r6
 800c190:	4649      	mov	r1, r9
 800c192:	4640      	mov	r0, r8
 800c194:	47d0      	blx	sl
 800c196:	3001      	adds	r0, #1
 800c198:	d0ad      	beq.n	800c0f6 <_printf_i+0x15a>
 800c19a:	6823      	ldr	r3, [r4, #0]
 800c19c:	079b      	lsls	r3, r3, #30
 800c19e:	d413      	bmi.n	800c1c8 <_printf_i+0x22c>
 800c1a0:	68e0      	ldr	r0, [r4, #12]
 800c1a2:	9b03      	ldr	r3, [sp, #12]
 800c1a4:	4298      	cmp	r0, r3
 800c1a6:	bfb8      	it	lt
 800c1a8:	4618      	movlt	r0, r3
 800c1aa:	e7a6      	b.n	800c0fa <_printf_i+0x15e>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	4632      	mov	r2, r6
 800c1b0:	4649      	mov	r1, r9
 800c1b2:	4640      	mov	r0, r8
 800c1b4:	47d0      	blx	sl
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	d09d      	beq.n	800c0f6 <_printf_i+0x15a>
 800c1ba:	3501      	adds	r5, #1
 800c1bc:	68e3      	ldr	r3, [r4, #12]
 800c1be:	9903      	ldr	r1, [sp, #12]
 800c1c0:	1a5b      	subs	r3, r3, r1
 800c1c2:	42ab      	cmp	r3, r5
 800c1c4:	dcf2      	bgt.n	800c1ac <_printf_i+0x210>
 800c1c6:	e7eb      	b.n	800c1a0 <_printf_i+0x204>
 800c1c8:	2500      	movs	r5, #0
 800c1ca:	f104 0619 	add.w	r6, r4, #25
 800c1ce:	e7f5      	b.n	800c1bc <_printf_i+0x220>
 800c1d0:	08084038 	.word	0x08084038
 800c1d4:	08084049 	.word	0x08084049

0800c1d8 <__swbuf_r>:
 800c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1da:	460e      	mov	r6, r1
 800c1dc:	4614      	mov	r4, r2
 800c1de:	4605      	mov	r5, r0
 800c1e0:	b118      	cbz	r0, 800c1ea <__swbuf_r+0x12>
 800c1e2:	6a03      	ldr	r3, [r0, #32]
 800c1e4:	b90b      	cbnz	r3, 800c1ea <__swbuf_r+0x12>
 800c1e6:	f7ff f917 	bl	800b418 <__sinit>
 800c1ea:	69a3      	ldr	r3, [r4, #24]
 800c1ec:	60a3      	str	r3, [r4, #8]
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	071a      	lsls	r2, r3, #28
 800c1f2:	d501      	bpl.n	800c1f8 <__swbuf_r+0x20>
 800c1f4:	6923      	ldr	r3, [r4, #16]
 800c1f6:	b943      	cbnz	r3, 800c20a <__swbuf_r+0x32>
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	f000 f82a 	bl	800c254 <__swsetup_r>
 800c200:	b118      	cbz	r0, 800c20a <__swbuf_r+0x32>
 800c202:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c206:	4638      	mov	r0, r7
 800c208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c20a:	6823      	ldr	r3, [r4, #0]
 800c20c:	6922      	ldr	r2, [r4, #16]
 800c20e:	1a98      	subs	r0, r3, r2
 800c210:	6963      	ldr	r3, [r4, #20]
 800c212:	b2f6      	uxtb	r6, r6
 800c214:	4283      	cmp	r3, r0
 800c216:	4637      	mov	r7, r6
 800c218:	dc05      	bgt.n	800c226 <__swbuf_r+0x4e>
 800c21a:	4621      	mov	r1, r4
 800c21c:	4628      	mov	r0, r5
 800c21e:	f7ff fbdb 	bl	800b9d8 <_fflush_r>
 800c222:	2800      	cmp	r0, #0
 800c224:	d1ed      	bne.n	800c202 <__swbuf_r+0x2a>
 800c226:	68a3      	ldr	r3, [r4, #8]
 800c228:	3b01      	subs	r3, #1
 800c22a:	60a3      	str	r3, [r4, #8]
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	6022      	str	r2, [r4, #0]
 800c232:	701e      	strb	r6, [r3, #0]
 800c234:	6962      	ldr	r2, [r4, #20]
 800c236:	1c43      	adds	r3, r0, #1
 800c238:	429a      	cmp	r2, r3
 800c23a:	d004      	beq.n	800c246 <__swbuf_r+0x6e>
 800c23c:	89a3      	ldrh	r3, [r4, #12]
 800c23e:	07db      	lsls	r3, r3, #31
 800c240:	d5e1      	bpl.n	800c206 <__swbuf_r+0x2e>
 800c242:	2e0a      	cmp	r6, #10
 800c244:	d1df      	bne.n	800c206 <__swbuf_r+0x2e>
 800c246:	4621      	mov	r1, r4
 800c248:	4628      	mov	r0, r5
 800c24a:	f7ff fbc5 	bl	800b9d8 <_fflush_r>
 800c24e:	2800      	cmp	r0, #0
 800c250:	d0d9      	beq.n	800c206 <__swbuf_r+0x2e>
 800c252:	e7d6      	b.n	800c202 <__swbuf_r+0x2a>

0800c254 <__swsetup_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4b29      	ldr	r3, [pc, #164]	@ (800c2fc <__swsetup_r+0xa8>)
 800c258:	4605      	mov	r5, r0
 800c25a:	6818      	ldr	r0, [r3, #0]
 800c25c:	460c      	mov	r4, r1
 800c25e:	b118      	cbz	r0, 800c268 <__swsetup_r+0x14>
 800c260:	6a03      	ldr	r3, [r0, #32]
 800c262:	b90b      	cbnz	r3, 800c268 <__swsetup_r+0x14>
 800c264:	f7ff f8d8 	bl	800b418 <__sinit>
 800c268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c26c:	0719      	lsls	r1, r3, #28
 800c26e:	d422      	bmi.n	800c2b6 <__swsetup_r+0x62>
 800c270:	06da      	lsls	r2, r3, #27
 800c272:	d407      	bmi.n	800c284 <__swsetup_r+0x30>
 800c274:	2209      	movs	r2, #9
 800c276:	602a      	str	r2, [r5, #0]
 800c278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c27c:	81a3      	strh	r3, [r4, #12]
 800c27e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c282:	e033      	b.n	800c2ec <__swsetup_r+0x98>
 800c284:	0758      	lsls	r0, r3, #29
 800c286:	d512      	bpl.n	800c2ae <__swsetup_r+0x5a>
 800c288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c28a:	b141      	cbz	r1, 800c29e <__swsetup_r+0x4a>
 800c28c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c290:	4299      	cmp	r1, r3
 800c292:	d002      	beq.n	800c29a <__swsetup_r+0x46>
 800c294:	4628      	mov	r0, r5
 800c296:	f7ff fc87 	bl	800bba8 <_free_r>
 800c29a:	2300      	movs	r3, #0
 800c29c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c29e:	89a3      	ldrh	r3, [r4, #12]
 800c2a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	6063      	str	r3, [r4, #4]
 800c2aa:	6923      	ldr	r3, [r4, #16]
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	f043 0308 	orr.w	r3, r3, #8
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	6923      	ldr	r3, [r4, #16]
 800c2b8:	b94b      	cbnz	r3, 800c2ce <__swsetup_r+0x7a>
 800c2ba:	89a3      	ldrh	r3, [r4, #12]
 800c2bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2c4:	d003      	beq.n	800c2ce <__swsetup_r+0x7a>
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f000 f83f 	bl	800c34c <__smakebuf_r>
 800c2ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d2:	f013 0201 	ands.w	r2, r3, #1
 800c2d6:	d00a      	beq.n	800c2ee <__swsetup_r+0x9a>
 800c2d8:	2200      	movs	r2, #0
 800c2da:	60a2      	str	r2, [r4, #8]
 800c2dc:	6962      	ldr	r2, [r4, #20]
 800c2de:	4252      	negs	r2, r2
 800c2e0:	61a2      	str	r2, [r4, #24]
 800c2e2:	6922      	ldr	r2, [r4, #16]
 800c2e4:	b942      	cbnz	r2, 800c2f8 <__swsetup_r+0xa4>
 800c2e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2ea:	d1c5      	bne.n	800c278 <__swsetup_r+0x24>
 800c2ec:	bd38      	pop	{r3, r4, r5, pc}
 800c2ee:	0799      	lsls	r1, r3, #30
 800c2f0:	bf58      	it	pl
 800c2f2:	6962      	ldrpl	r2, [r4, #20]
 800c2f4:	60a2      	str	r2, [r4, #8]
 800c2f6:	e7f4      	b.n	800c2e2 <__swsetup_r+0x8e>
 800c2f8:	2000      	movs	r0, #0
 800c2fa:	e7f7      	b.n	800c2ec <__swsetup_r+0x98>
 800c2fc:	24000034 	.word	0x24000034

0800c300 <__swhatbuf_r>:
 800c300:	b570      	push	{r4, r5, r6, lr}
 800c302:	460c      	mov	r4, r1
 800c304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c308:	2900      	cmp	r1, #0
 800c30a:	b096      	sub	sp, #88	@ 0x58
 800c30c:	4615      	mov	r5, r2
 800c30e:	461e      	mov	r6, r3
 800c310:	da0d      	bge.n	800c32e <__swhatbuf_r+0x2e>
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c318:	f04f 0100 	mov.w	r1, #0
 800c31c:	bf14      	ite	ne
 800c31e:	2340      	movne	r3, #64	@ 0x40
 800c320:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c324:	2000      	movs	r0, #0
 800c326:	6031      	str	r1, [r6, #0]
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	b016      	add	sp, #88	@ 0x58
 800c32c:	bd70      	pop	{r4, r5, r6, pc}
 800c32e:	466a      	mov	r2, sp
 800c330:	f000 f89c 	bl	800c46c <_fstat_r>
 800c334:	2800      	cmp	r0, #0
 800c336:	dbec      	blt.n	800c312 <__swhatbuf_r+0x12>
 800c338:	9901      	ldr	r1, [sp, #4]
 800c33a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c33e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c342:	4259      	negs	r1, r3
 800c344:	4159      	adcs	r1, r3
 800c346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c34a:	e7eb      	b.n	800c324 <__swhatbuf_r+0x24>

0800c34c <__smakebuf_r>:
 800c34c:	898b      	ldrh	r3, [r1, #12]
 800c34e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c350:	079d      	lsls	r5, r3, #30
 800c352:	4606      	mov	r6, r0
 800c354:	460c      	mov	r4, r1
 800c356:	d507      	bpl.n	800c368 <__smakebuf_r+0x1c>
 800c358:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	6123      	str	r3, [r4, #16]
 800c360:	2301      	movs	r3, #1
 800c362:	6163      	str	r3, [r4, #20]
 800c364:	b003      	add	sp, #12
 800c366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c368:	ab01      	add	r3, sp, #4
 800c36a:	466a      	mov	r2, sp
 800c36c:	f7ff ffc8 	bl	800c300 <__swhatbuf_r>
 800c370:	9f00      	ldr	r7, [sp, #0]
 800c372:	4605      	mov	r5, r0
 800c374:	4639      	mov	r1, r7
 800c376:	4630      	mov	r0, r6
 800c378:	f7ff fa2a 	bl	800b7d0 <_malloc_r>
 800c37c:	b948      	cbnz	r0, 800c392 <__smakebuf_r+0x46>
 800c37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c382:	059a      	lsls	r2, r3, #22
 800c384:	d4ee      	bmi.n	800c364 <__smakebuf_r+0x18>
 800c386:	f023 0303 	bic.w	r3, r3, #3
 800c38a:	f043 0302 	orr.w	r3, r3, #2
 800c38e:	81a3      	strh	r3, [r4, #12]
 800c390:	e7e2      	b.n	800c358 <__smakebuf_r+0xc>
 800c392:	89a3      	ldrh	r3, [r4, #12]
 800c394:	6020      	str	r0, [r4, #0]
 800c396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	9b01      	ldr	r3, [sp, #4]
 800c39e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3a2:	b15b      	cbz	r3, 800c3bc <__smakebuf_r+0x70>
 800c3a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	f000 f83b 	bl	800c424 <_isatty_r>
 800c3ae:	b128      	cbz	r0, 800c3bc <__smakebuf_r+0x70>
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	f023 0303 	bic.w	r3, r3, #3
 800c3b6:	f043 0301 	orr.w	r3, r3, #1
 800c3ba:	81a3      	strh	r3, [r4, #12]
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	431d      	orrs	r5, r3
 800c3c0:	81a5      	strh	r5, [r4, #12]
 800c3c2:	e7cf      	b.n	800c364 <__smakebuf_r+0x18>

0800c3c4 <_raise_r>:
 800c3c4:	291f      	cmp	r1, #31
 800c3c6:	b538      	push	{r3, r4, r5, lr}
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	d904      	bls.n	800c3d8 <_raise_r+0x14>
 800c3ce:	2316      	movs	r3, #22
 800c3d0:	6003      	str	r3, [r0, #0]
 800c3d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
 800c3d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c3da:	b112      	cbz	r2, 800c3e2 <_raise_r+0x1e>
 800c3dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3e0:	b94b      	cbnz	r3, 800c3f6 <_raise_r+0x32>
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	f000 f840 	bl	800c468 <_getpid_r>
 800c3e8:	4622      	mov	r2, r4
 800c3ea:	4601      	mov	r1, r0
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3f2:	f000 b827 	b.w	800c444 <_kill_r>
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d00a      	beq.n	800c410 <_raise_r+0x4c>
 800c3fa:	1c59      	adds	r1, r3, #1
 800c3fc:	d103      	bne.n	800c406 <_raise_r+0x42>
 800c3fe:	2316      	movs	r3, #22
 800c400:	6003      	str	r3, [r0, #0]
 800c402:	2001      	movs	r0, #1
 800c404:	e7e7      	b.n	800c3d6 <_raise_r+0x12>
 800c406:	2100      	movs	r1, #0
 800c408:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c40c:	4620      	mov	r0, r4
 800c40e:	4798      	blx	r3
 800c410:	2000      	movs	r0, #0
 800c412:	e7e0      	b.n	800c3d6 <_raise_r+0x12>

0800c414 <raise>:
 800c414:	4b02      	ldr	r3, [pc, #8]	@ (800c420 <raise+0xc>)
 800c416:	4601      	mov	r1, r0
 800c418:	6818      	ldr	r0, [r3, #0]
 800c41a:	f7ff bfd3 	b.w	800c3c4 <_raise_r>
 800c41e:	bf00      	nop
 800c420:	24000034 	.word	0x24000034

0800c424 <_isatty_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4d06      	ldr	r5, [pc, #24]	@ (800c440 <_isatty_r+0x1c>)
 800c428:	2300      	movs	r3, #0
 800c42a:	4604      	mov	r4, r0
 800c42c:	4608      	mov	r0, r1
 800c42e:	602b      	str	r3, [r5, #0]
 800c430:	f7f6 ff2a 	bl	8003288 <_isatty>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d102      	bne.n	800c43e <_isatty_r+0x1a>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	b103      	cbz	r3, 800c43e <_isatty_r+0x1a>
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	2406f738 	.word	0x2406f738

0800c444 <_kill_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4d07      	ldr	r5, [pc, #28]	@ (800c464 <_kill_r+0x20>)
 800c448:	2300      	movs	r3, #0
 800c44a:	4604      	mov	r4, r0
 800c44c:	4608      	mov	r0, r1
 800c44e:	4611      	mov	r1, r2
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	f7f6 fee3 	bl	800321c <_kill>
 800c456:	1c43      	adds	r3, r0, #1
 800c458:	d102      	bne.n	800c460 <_kill_r+0x1c>
 800c45a:	682b      	ldr	r3, [r5, #0]
 800c45c:	b103      	cbz	r3, 800c460 <_kill_r+0x1c>
 800c45e:	6023      	str	r3, [r4, #0]
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	bf00      	nop
 800c464:	2406f738 	.word	0x2406f738

0800c468 <_getpid_r>:
 800c468:	f7f6 bed6 	b.w	8003218 <_getpid>

0800c46c <_fstat_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4d07      	ldr	r5, [pc, #28]	@ (800c48c <_fstat_r+0x20>)
 800c470:	2300      	movs	r3, #0
 800c472:	4604      	mov	r4, r0
 800c474:	4608      	mov	r0, r1
 800c476:	4611      	mov	r1, r2
 800c478:	602b      	str	r3, [r5, #0]
 800c47a:	f7f6 feff 	bl	800327c <_fstat>
 800c47e:	1c43      	adds	r3, r0, #1
 800c480:	d102      	bne.n	800c488 <_fstat_r+0x1c>
 800c482:	682b      	ldr	r3, [r5, #0]
 800c484:	b103      	cbz	r3, 800c488 <_fstat_r+0x1c>
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	bd38      	pop	{r3, r4, r5, pc}
 800c48a:	bf00      	nop
 800c48c:	2406f738 	.word	0x2406f738

0800c490 <sinf_poly>:
 800c490:	07cb      	lsls	r3, r1, #31
 800c492:	d412      	bmi.n	800c4ba <sinf_poly+0x2a>
 800c494:	ee21 5b00 	vmul.f64	d5, d1, d0
 800c498:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800c49c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800c4a0:	eea6 7b01 	vfma.f64	d7, d6, d1
 800c4a4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800c4a8:	ee21 1b05 	vmul.f64	d1, d1, d5
 800c4ac:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c4b0:	eea7 0b01 	vfma.f64	d0, d7, d1
 800c4b4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c4b8:	4770      	bx	lr
 800c4ba:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800c4be:	ee21 5b01 	vmul.f64	d5, d1, d1
 800c4c2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800c4c6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800c4ca:	eea1 7b06 	vfma.f64	d7, d1, d6
 800c4ce:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800c4d2:	eea1 0b06 	vfma.f64	d0, d1, d6
 800c4d6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800c4da:	ee21 1b05 	vmul.f64	d1, d1, d5
 800c4de:	eea5 0b06 	vfma.f64	d0, d5, d6
 800c4e2:	e7e5      	b.n	800c4b0 <sinf_poly+0x20>
 800c4e4:	0000      	movs	r0, r0
	...

0800c4e8 <sinf>:
 800c4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4ea:	ee10 4a10 	vmov	r4, s0
 800c4ee:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c4f2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800c4f6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c4fa:	eef0 7a40 	vmov.f32	s15, s0
 800c4fe:	d218      	bcs.n	800c532 <sinf+0x4a>
 800c500:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c504:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800c508:	d20a      	bcs.n	800c520 <sinf+0x38>
 800c50a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800c50e:	d103      	bne.n	800c518 <sinf+0x30>
 800c510:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800c514:	ed8d 1a01 	vstr	s2, [sp, #4]
 800c518:	eeb0 0a67 	vmov.f32	s0, s15
 800c51c:	b003      	add	sp, #12
 800c51e:	bd30      	pop	{r4, r5, pc}
 800c520:	483b      	ldr	r0, [pc, #236]	@ (800c610 <sinf+0x128>)
 800c522:	eeb0 0b46 	vmov.f64	d0, d6
 800c526:	2100      	movs	r1, #0
 800c528:	b003      	add	sp, #12
 800c52a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c52e:	f7ff bfaf 	b.w	800c490 <sinf_poly>
 800c532:	f240 422e 	movw	r2, #1070	@ 0x42e
 800c536:	4293      	cmp	r3, r2
 800c538:	d824      	bhi.n	800c584 <sinf+0x9c>
 800c53a:	4b35      	ldr	r3, [pc, #212]	@ (800c610 <sinf+0x128>)
 800c53c:	ed93 7b08 	vldr	d7, [r3, #32]
 800c540:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c544:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c548:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800c54c:	ee17 1a90 	vmov	r1, s15
 800c550:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800c554:	1609      	asrs	r1, r1, #24
 800c556:	ee07 1a90 	vmov	s15, r1
 800c55a:	f001 0203 	and.w	r2, r1, #3
 800c55e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c562:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c566:	ed92 0b00 	vldr	d0, [r2]
 800c56a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800c56e:	f011 0f02 	tst.w	r1, #2
 800c572:	eea5 6b47 	vfms.f64	d6, d5, d7
 800c576:	bf08      	it	eq
 800c578:	4618      	moveq	r0, r3
 800c57a:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c57e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c582:	e7d1      	b.n	800c528 <sinf+0x40>
 800c584:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800c588:	d237      	bcs.n	800c5fa <sinf+0x112>
 800c58a:	4922      	ldr	r1, [pc, #136]	@ (800c614 <sinf+0x12c>)
 800c58c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800c590:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800c594:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800c598:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800c59c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c5a0:	6a10      	ldr	r0, [r2, #32]
 800c5a2:	6912      	ldr	r2, [r2, #16]
 800c5a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c5a8:	40ab      	lsls	r3, r5
 800c5aa:	fba0 5003 	umull	r5, r0, r0, r3
 800c5ae:	4359      	muls	r1, r3
 800c5b0:	fbe3 0102 	umlal	r0, r1, r3, r2
 800c5b4:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800c5b8:	0f9d      	lsrs	r5, r3, #30
 800c5ba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c5be:	1ac9      	subs	r1, r1, r3
 800c5c0:	f7f4 f8cc 	bl	800075c <__aeabi_l2d>
 800c5c4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800c5c8:	4b11      	ldr	r3, [pc, #68]	@ (800c610 <sinf+0x128>)
 800c5ca:	f004 0203 	and.w	r2, r4, #3
 800c5ce:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c5d2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 800c608 <sinf+0x120>
 800c5d6:	ed92 0b00 	vldr	d0, [r2]
 800c5da:	ec41 0b17 	vmov	d7, r0, r1
 800c5de:	f014 0f02 	tst.w	r4, #2
 800c5e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5e6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	bf08      	it	eq
 800c5ee:	4618      	moveq	r0, r3
 800c5f0:	ee27 1b07 	vmul.f64	d1, d7, d7
 800c5f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c5f8:	e796      	b.n	800c528 <sinf+0x40>
 800c5fa:	b003      	add	sp, #12
 800c5fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c600:	f000 b82a 	b.w	800c658 <__math_invalidf>
 800c604:	f3af 8000 	nop.w
 800c608:	54442d18 	.word	0x54442d18
 800c60c:	3c1921fb 	.word	0x3c1921fb
 800c610:	080841c0 	.word	0x080841c0
 800c614:	0808415c 	.word	0x0808415c

0800c618 <with_errnof>:
 800c618:	b510      	push	{r4, lr}
 800c61a:	ed2d 8b02 	vpush	{d8}
 800c61e:	eeb0 8a40 	vmov.f32	s16, s0
 800c622:	4604      	mov	r4, r0
 800c624:	f7ff f85e 	bl	800b6e4 <__errno>
 800c628:	eeb0 0a48 	vmov.f32	s0, s16
 800c62c:	ecbd 8b02 	vpop	{d8}
 800c630:	6004      	str	r4, [r0, #0]
 800c632:	bd10      	pop	{r4, pc}

0800c634 <xflowf>:
 800c634:	b130      	cbz	r0, 800c644 <xflowf+0x10>
 800c636:	eef1 7a40 	vneg.f32	s15, s0
 800c63a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c63e:	2022      	movs	r0, #34	@ 0x22
 800c640:	f7ff bfea 	b.w	800c618 <with_errnof>
 800c644:	eef0 7a40 	vmov.f32	s15, s0
 800c648:	e7f7      	b.n	800c63a <xflowf+0x6>
	...

0800c64c <__math_oflowf>:
 800c64c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c654 <__math_oflowf+0x8>
 800c650:	f7ff bff0 	b.w	800c634 <xflowf>
 800c654:	70000000 	.word	0x70000000

0800c658 <__math_invalidf>:
 800c658:	eef0 7a40 	vmov.f32	s15, s0
 800c65c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c660:	eef4 7a67 	vcmp.f32	s15, s15
 800c664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c668:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c66c:	d602      	bvs.n	800c674 <__math_invalidf+0x1c>
 800c66e:	2021      	movs	r0, #33	@ 0x21
 800c670:	f7ff bfd2 	b.w	800c618 <with_errnof>
 800c674:	4770      	bx	lr
	...

0800c678 <tanhf>:
 800c678:	b538      	push	{r3, r4, r5, lr}
 800c67a:	ee10 5a10 	vmov	r5, s0
 800c67e:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c682:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c686:	ed2d 8b02 	vpush	{d8}
 800c68a:	eef0 7a40 	vmov.f32	s15, s0
 800c68e:	d30f      	bcc.n	800c6b0 <tanhf+0x38>
 800c690:	4b2a      	ldr	r3, [pc, #168]	@ (800c73c <tanhf+0xc4>)
 800c692:	edd3 6a00 	vldr	s13, [r3]
 800c696:	ed93 7a00 	vldr	s14, [r3]
 800c69a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800c69e:	2d00      	cmp	r5, #0
 800c6a0:	bfac      	ite	ge
 800c6a2:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800c6a6:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800c6aa:	ecbd 8b02 	vpop	{d8}
 800c6ae:	bd38      	pop	{r3, r4, r5, pc}
 800c6b0:	4a23      	ldr	r2, [pc, #140]	@ (800c740 <tanhf+0xc8>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d839      	bhi.n	800c72a <tanhf+0xb2>
 800c6b6:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 800c6ba:	d207      	bcs.n	800c6cc <tanhf+0x54>
 800c6bc:	4b1f      	ldr	r3, [pc, #124]	@ (800c73c <tanhf+0xc4>)
 800c6be:	ed93 0a00 	vldr	s0, [r3]
 800c6c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c6c6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6ca:	e7ee      	b.n	800c6aa <tanhf+0x32>
 800c6cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800c6d0:	4c1c      	ldr	r4, [pc, #112]	@ (800c744 <tanhf+0xcc>)
 800c6d2:	d319      	bcc.n	800c708 <tanhf+0x90>
 800c6d4:	f000 f962 	bl	800c99c <fabsf>
 800c6d8:	edd4 7a00 	vldr	s15, [r4]
 800c6dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6e0:	f000 f834 	bl	800c74c <expm1f>
 800c6e4:	4b15      	ldr	r3, [pc, #84]	@ (800c73c <tanhf+0xc4>)
 800c6e6:	edd3 7a00 	vldr	s15, [r3]
 800c6ea:	ed94 6a00 	vldr	s12, [r4]
 800c6ee:	ed94 7a00 	vldr	s14, [r4]
 800c6f2:	ee37 7a00 	vadd.f32	s14, s14, s0
 800c6f6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c6fa:	ee37 0ae6 	vsub.f32	s0, s15, s13
 800c6fe:	2d00      	cmp	r5, #0
 800c700:	bfb8      	it	lt
 800c702:	eeb1 0a40 	vneglt.f32	s0, s0
 800c706:	e7d0      	b.n	800c6aa <tanhf+0x32>
 800c708:	ed94 8a00 	vldr	s16, [r4]
 800c70c:	f000 f946 	bl	800c99c <fabsf>
 800c710:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800c714:	f000 f81a 	bl	800c74c <expm1f>
 800c718:	edd4 7a00 	vldr	s15, [r4]
 800c71c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c720:	eeb1 7a40 	vneg.f32	s14, s0
 800c724:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c728:	e7e9      	b.n	800c6fe <tanhf+0x86>
 800c72a:	4b04      	ldr	r3, [pc, #16]	@ (800c73c <tanhf+0xc4>)
 800c72c:	ed93 0a00 	vldr	s0, [r3]
 800c730:	4b05      	ldr	r3, [pc, #20]	@ (800c748 <tanhf+0xd0>)
 800c732:	edd3 7a00 	vldr	s15, [r3]
 800c736:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c73a:	e7e0      	b.n	800c6fe <tanhf+0x86>
 800c73c:	080842a8 	.word	0x080842a8
 800c740:	41afffff 	.word	0x41afffff
 800c744:	080842a4 	.word	0x080842a4
 800c748:	080842a0 	.word	0x080842a0

0800c74c <expm1f>:
 800c74c:	ee10 3a10 	vmov	r3, s0
 800c750:	4a83      	ldr	r2, [pc, #524]	@ (800c960 <expm1f+0x214>)
 800c752:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 800c756:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d91e      	bls.n	800c79c <expm1f+0x50>
 800c75e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c762:	d902      	bls.n	800c76a <expm1f+0x1e>
 800c764:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c768:	4770      	bx	lr
 800c76a:	d105      	bne.n	800c778 <expm1f+0x2c>
 800c76c:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800c770:	2800      	cmp	r0, #0
 800c772:	fe00 0a27 	vseleq.f32	s0, s0, s15
 800c776:	4770      	bx	lr
 800c778:	b920      	cbnz	r0, 800c784 <expm1f+0x38>
 800c77a:	4a7a      	ldr	r2, [pc, #488]	@ (800c964 <expm1f+0x218>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d963      	bls.n	800c848 <expm1f+0xfc>
 800c780:	f7ff bf64 	b.w	800c64c <__math_oflowf>
 800c784:	eddf 7a78 	vldr	s15, [pc, #480]	@ 800c968 <expm1f+0x21c>
 800c788:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c78c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c794:	d551      	bpl.n	800c83a <expm1f+0xee>
 800c796:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800c79a:	4770      	bx	lr
 800c79c:	4a73      	ldr	r2, [pc, #460]	@ (800c96c <expm1f+0x220>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d972      	bls.n	800c888 <expm1f+0x13c>
 800c7a2:	4a73      	ldr	r2, [pc, #460]	@ (800c970 <expm1f+0x224>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d868      	bhi.n	800c87a <expm1f+0x12e>
 800c7a8:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800c974 <expm1f+0x228>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d13d      	bne.n	800c82c <expm1f+0xe0>
 800c7b0:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c7b4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800c978 <expm1f+0x22c>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	ee37 0a66 	vsub.f32	s0, s14, s13
 800c7be:	ee77 7a40 	vsub.f32	s15, s14, s0
 800c7c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c7c6:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800c7ca:	ee20 4a25 	vmul.f32	s8, s0, s11
 800c7ce:	ed9f 6a6b 	vldr	s12, [pc, #428]	@ 800c97c <expm1f+0x230>
 800c7d2:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 800c980 <expm1f+0x234>
 800c7d6:	ed9f 5a6b 	vldr	s10, [pc, #428]	@ 800c984 <expm1f+0x238>
 800c7da:	ee20 7a04 	vmul.f32	s14, s0, s8
 800c7de:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 800c7e2:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c7e6:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 800c988 <expm1f+0x23c>
 800c7ea:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c7ee:	eddf 6a67 	vldr	s13, [pc, #412]	@ 800c98c <expm1f+0x240>
 800c7f2:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c7f6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800c7fa:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c7fe:	eef0 6a46 	vmov.f32	s13, s12
 800c802:	eee5 6a07 	vfma.f32	s13, s10, s14
 800c806:	eee4 4a66 	vfms.f32	s9, s8, s13
 800c80a:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 800c80e:	eea0 4a64 	vfms.f32	s8, s0, s9
 800c812:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800c816:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800c81a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d140      	bne.n	800c8a4 <expm1f+0x158>
 800c822:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800c826:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c82a:	4770      	bx	lr
 800c82c:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c830:	eddf 6a57 	vldr	s13, [pc, #348]	@ 800c990 <expm1f+0x244>
 800c834:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c838:	e7bf      	b.n	800c7ba <expm1f+0x6e>
 800c83a:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800c994 <expm1f+0x248>
 800c83e:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c842:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800c846:	e005      	b.n	800c854 <expm1f+0x108>
 800c848:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800c994 <expm1f+0x248>
 800c84c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c850:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c854:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c858:	eeb0 7a40 	vmov.f32	s14, s0
 800c85c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c860:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c864:	ee17 3a90 	vmov	r3, s15
 800c868:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800c974 <expm1f+0x228>
 800c86c:	eea6 7ae7 	vfms.f32	s14, s13, s15
 800c870:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800c978 <expm1f+0x22c>
 800c874:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c878:	e79f      	b.n	800c7ba <expm1f+0x6e>
 800c87a:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800c994 <expm1f+0x248>
 800c87e:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c882:	2800      	cmp	r0, #0
 800c884:	d0e4      	beq.n	800c850 <expm1f+0x104>
 800c886:	e7dc      	b.n	800c842 <expm1f+0xf6>
 800c888:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 800c88c:	d208      	bcs.n	800c8a0 <expm1f+0x154>
 800c88e:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800c998 <expm1f+0x24c>
 800c892:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c896:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800c89a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c89e:	4770      	bx	lr
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	e790      	b.n	800c7c6 <expm1f+0x7a>
 800c8a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c8a8:	1c5a      	adds	r2, r3, #1
 800c8aa:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800c8ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8b2:	d106      	bne.n	800c8c2 <expm1f+0x176>
 800c8b4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c8b8:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 800c8bc:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800c8c0:	4770      	bx	lr
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d118      	bne.n	800c8f8 <expm1f+0x1ac>
 800c8c6:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 800c8ca:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d2:	bf5b      	ittet	pl
 800c8d4:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800c8d8:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 800c8dc:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 800c8e0:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800c8e4:	bf43      	ittte	mi
 800c8e6:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 800c8ea:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 800c8ee:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800c8f2:	eeb0 0a46 	vmovpl.f32	s0, s12
 800c8f6:	4770      	bx	lr
 800c8f8:	1c5a      	adds	r2, r3, #1
 800c8fa:	2a39      	cmp	r2, #57	@ 0x39
 800c8fc:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800c900:	d90b      	bls.n	800c91a <expm1f+0x1ce>
 800c902:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c906:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c90a:	ee17 3a90 	vmov	r3, s15
 800c90e:	4419      	add	r1, r3
 800c910:	ee07 1a90 	vmov	s15, r1
 800c914:	ee37 0ac6 	vsub.f32	s0, s15, s12
 800c918:	4770      	bx	lr
 800c91a:	2b16      	cmp	r3, #22
 800c91c:	dc11      	bgt.n	800c942 <expm1f+0x1f6>
 800c91e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c922:	fa42 f303 	asr.w	r3, r2, r3
 800c926:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 800c92a:	ee07 3a10 	vmov	s14, r3
 800c92e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c932:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c936:	ee17 3a90 	vmov	r3, s15
 800c93a:	440b      	add	r3, r1
 800c93c:	ee00 3a10 	vmov	s0, r3
 800c940:	4770      	bx	lr
 800c942:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800c946:	05db      	lsls	r3, r3, #23
 800c948:	ee07 3a10 	vmov	s14, r3
 800c94c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c950:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c954:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c958:	ee17 3a90 	vmov	r3, s15
 800c95c:	e7ed      	b.n	800c93a <expm1f+0x1ee>
 800c95e:	bf00      	nop
 800c960:	4195b843 	.word	0x4195b843
 800c964:	42b17217 	.word	0x42b17217
 800c968:	0da24260 	.word	0x0da24260
 800c96c:	3eb17218 	.word	0x3eb17218
 800c970:	3f851591 	.word	0x3f851591
 800c974:	3f317180 	.word	0x3f317180
 800c978:	3717f7d1 	.word	0x3717f7d1
 800c97c:	b457edbb 	.word	0xb457edbb
 800c980:	36867e54 	.word	0x36867e54
 800c984:	bd088889 	.word	0xbd088889
 800c988:	b8a670cd 	.word	0xb8a670cd
 800c98c:	3ad00d01 	.word	0x3ad00d01
 800c990:	b717f7d1 	.word	0xb717f7d1
 800c994:	3fb8aa3b 	.word	0x3fb8aa3b
 800c998:	7149f2ca 	.word	0x7149f2ca

0800c99c <fabsf>:
 800c99c:	ee10 3a10 	vmov	r3, s0
 800c9a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c9a4:	ee00 3a10 	vmov	s0, r3
 800c9a8:	4770      	bx	lr
	...

0800c9ac <_init>:
 800c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ae:	bf00      	nop
 800c9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9b2:	bc08      	pop	{r3}
 800c9b4:	469e      	mov	lr, r3
 800c9b6:	4770      	bx	lr

0800c9b8 <_fini>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	bf00      	nop
 800c9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9be:	bc08      	pop	{r3}
 800c9c0:	469e      	mov	lr, r3
 800c9c2:	4770      	bx	lr
