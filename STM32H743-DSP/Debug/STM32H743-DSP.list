
STM32H743-DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c98  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018ac0  08007f40  08007f40  00008f40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08020a00  08020a00  00021a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08020a04  08020a04  00021a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000000a8  24000000  08020a08  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .dtcm_bss     00009040  20000000  20000000  00023000  2**5
                  ALLOC
  7 .dtcm_data    00000000  20009040  20009040  000220a8  2**0
                  CONTENTS
  8 .bss          0001f8bc  240000c0  240000c0  000220c0  2**5
                  ALLOC
  9 ._user_heap_stack 00000604  2401f97c  2401f97c  000220c0  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000220a8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00023b7d  00000000  00000000  000220d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000474c  00000000  00000000  00045c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000012d0  00000000  00000000  0004a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003e04  00000000  00000000  0004b670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000257f6  00000000  00000000  0004f474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00174c34  00000000  00000000  00074c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  001e989e  2**0
                  CONTENTS, READONLY
 18 .debug_loclists 0000fe8f  00000000  00000000  001e9951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001cdd  00000000  00000000  001f97e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000369c  00000000  00000000  001fb4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001feb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000427a  00000000  00000000  001febca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000f0  00000000  00000000  00202e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000c0 	.word	0x240000c0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007f18 	.word	0x08007f18

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000c4 	.word	0x240000c4
 80002d4:	08007f18 	.word	0x08007f18

080002d8 <arm_bitreversal_32>:
 80002d8:	1c4b      	adds	r3, r1, #1
 80002da:	2b01      	cmp	r3, #1
 80002dc:	bf98      	it	ls
 80002de:	4770      	bxls	lr
 80002e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002e4:	1c91      	adds	r1, r2, #2
 80002e6:	089b      	lsrs	r3, r3, #2

080002e8 <arm_bitreversal_32_0>:
 80002e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f0:	880a      	ldrh	r2, [r1, #0]
 80002f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002f6:	4480      	add	r8, r0
 80002f8:	4481      	add	r9, r0
 80002fa:	4402      	add	r2, r0
 80002fc:	4484      	add	ip, r0
 80002fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000302:	f8d8 6000 	ldr.w	r6, [r8]
 8000306:	6815      	ldr	r5, [r2, #0]
 8000308:	f8dc 4000 	ldr.w	r4, [ip]
 800030c:	f8c9 6000 	str.w	r6, [r9]
 8000310:	f8c8 7000 	str.w	r7, [r8]
 8000314:	f8cc 5000 	str.w	r5, [ip]
 8000318:	6014      	str	r4, [r2, #0]
 800031a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800031e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000322:	6855      	ldr	r5, [r2, #4]
 8000324:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000328:	f8c9 6004 	str.w	r6, [r9, #4]
 800032c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000330:	f8cc 5004 	str.w	r5, [ip, #4]
 8000334:	6054      	str	r4, [r2, #4]
 8000336:	3108      	adds	r1, #8
 8000338:	3b01      	subs	r3, #1
 800033a:	d1d5      	bne.n	80002e8 <arm_bitreversal_32_0>
 800033c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000340:	4770      	bx	lr

08000342 <arm_bitreversal_16>:
 8000342:	1c4b      	adds	r3, r1, #1
 8000344:	2b01      	cmp	r3, #1
 8000346:	bf98      	it	ls
 8000348:	4770      	bxls	lr
 800034a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800034e:	1c91      	adds	r1, r2, #2
 8000350:	089b      	lsrs	r3, r3, #2

08000352 <arm_bitreversal_16_0>:
 8000352:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000356:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800035a:	880a      	ldrh	r2, [r1, #0]
 800035c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000360:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000364:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000368:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800036c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000370:	f8d9 7000 	ldr.w	r7, [r9]
 8000374:	f8d8 6000 	ldr.w	r6, [r8]
 8000378:	6815      	ldr	r5, [r2, #0]
 800037a:	f8dc 4000 	ldr.w	r4, [ip]
 800037e:	f8c9 6000 	str.w	r6, [r9]
 8000382:	f8c8 7000 	str.w	r7, [r8]
 8000386:	f8cc 5000 	str.w	r5, [ip]
 800038a:	6014      	str	r4, [r2, #0]
 800038c:	3108      	adds	r1, #8
 800038e:	3b01      	subs	r3, #1
 8000390:	d1df      	bne.n	8000352 <arm_bitreversal_16_0>
 8000392:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000396:	4770      	bx	lr

08000398 <HAL_ADC_ConvHalfCpltCallback>:
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800039a:	f003 021f 	and.w	r2, r3, #31
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800039e:	f3bf 8f4f 	dsb	sy
 80003a2:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003a6:	480a      	ldr	r0, [pc, #40]	@ (80003d0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80003a8:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003aa:	f8c0 325c 	str.w	r3, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80003ae:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 80003b0:	1aca      	subs	r2, r1, r3
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	dcf9      	bgt.n	80003aa <HAL_ADC_ConvHalfCpltCallback+0x12>
 80003b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003ba:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[0â€¦BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)adcInput,
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcHalfComplete(&apipe, adcInput);
 80003be:	4805      	ldr	r0, [pc, #20]	@ (80003d4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80003c0:	4902      	ldr	r1, [pc, #8]	@ (80003cc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80003c2:	6943      	ldr	r3, [r0, #20]
 80003c4:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 80003c8:	4718      	bx	r3
 80003ca:	bf00      	nop
 80003cc:	240050e0 	.word	0x240050e0
 80003d0:	e000ed00 	.word	0xe000ed00
 80003d4:	240150f8 	.word	0x240150f8

080003d8 <HAL_ADC_ConvCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80003d8:	490d      	ldr	r1, [pc, #52]	@ (8000410 <HAL_ADC_ConvCpltCallback+0x38>)
 80003da:	f001 021f 	and.w	r2, r1, #31
 80003de:	f502 6300 	add.w	r3, r2, #2048	@ 0x800
  __ASM volatile ("dsb 0xF":::"memory");
 80003e2:	f3bf 8f4f 	dsb	sy
 80003e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003ea:	480a      	ldr	r0, [pc, #40]	@ (8000414 <HAL_ADC_ConvCpltCallback+0x3c>)
 80003ec:	4411      	add	r1, r2
 80003ee:	1aca      	subs	r2, r1, r3
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80003f0:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 80003f2:	2b00      	cmp	r3, #0
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003f4:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
      } while ( op_size > 0 );
 80003f8:	dcf9      	bgt.n	80003ee <HAL_ADC_ConvCpltCallback+0x16>
 80003fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003fe:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[BUFFER_SIZEâ€¦2*BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)&adcInput[BUFFER_SIZE],
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcComplete(&apipe, adcInput);
 8000402:	4805      	ldr	r0, [pc, #20]	@ (8000418 <HAL_ADC_ConvCpltCallback+0x40>)
 8000404:	4905      	ldr	r1, [pc, #20]	@ (800041c <HAL_ADC_ConvCpltCallback+0x44>)
 8000406:	6983      	ldr	r3, [r0, #24]
 8000408:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 800040c:	4718      	bx	r3
 800040e:	bf00      	nop
 8000410:	240058e0 	.word	0x240058e0
 8000414:	e000ed00 	.word	0xe000ed00
 8000418:	240150f8 	.word	0x240150f8
 800041c:	240050e0 	.word	0x240050e0

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b530      	push	{r4, r5, lr}
 8000422:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000424:	224c      	movs	r2, #76	@ 0x4c
 8000426:	2100      	movs	r1, #0
 8000428:	a80a      	add	r0, sp, #40	@ 0x28
 800042a:	f007 fb89 	bl	8007b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042e:	2220      	movs	r2, #32
 8000430:	2100      	movs	r1, #0
 8000432:	a802      	add	r0, sp, #8
 8000434:	f007 fb84 	bl	8007b40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000438:	2002      	movs	r0, #2
 800043a:	f003 fdeb 	bl	8004014 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800043e:	4a24      	ldr	r2, [pc, #144]	@ (80004d0 <SystemClock_Config+0xb0>)
 8000440:	2100      	movs	r1, #0
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <SystemClock_Config+0xb4>)
 8000444:	9101      	str	r1, [sp, #4]
 8000446:	6991      	ldr	r1, [r2, #24]
 8000448:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800044c:	6191      	str	r1, [r2, #24]
 800044e:	6991      	ldr	r1, [r2, #24]
 8000450:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 8000454:	9101      	str	r1, [sp, #4]
 8000456:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000458:	f041 0101 	orr.w	r1, r1, #1
 800045c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800045e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000460:	f003 0301 	and.w	r3, r3, #1
 8000464:	9301      	str	r3, [sp, #4]
 8000466:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000468:	6993      	ldr	r3, [r2, #24]
 800046a:	049b      	lsls	r3, r3, #18
 800046c:	d5fc      	bpl.n	8000468 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046e:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000470:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000472:	2101      	movs	r1, #1
 8000474:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000478:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
 800047e:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000480:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000482:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000484:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000486:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800048a:	230c      	movs	r3, #12
 800048c:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLN = 60;
 800048e:	233c      	movs	r3, #60	@ 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000490:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000494:	e9cd 5315 	strd	r5, r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f003 fe52 	bl	8004140 <HAL_RCC_OscConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	b108      	cbz	r0, 80004a4 <SystemClock_Config+0x84>
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a4:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004a8:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004aa:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ae:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004b0:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004b2:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b4:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004b6:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004be:	e9cd 4307 	strd	r4, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004c2:	f004 f9b9 	bl	8004838 <HAL_RCC_ClockConfig>
 80004c6:	b108      	cbz	r0, 80004cc <SystemClock_Config+0xac>
 80004c8:	b672      	cpsid	i
  while (1)
 80004ca:	e7fe      	b.n	80004ca <SystemClock_Config+0xaa>
}
 80004cc:	b01f      	add	sp, #124	@ 0x7c
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	58024800 	.word	0x58024800
 80004d4:	58000400 	.word	0x58000400

080004d8 <PeriphCommonClock_Config>:
{
 80004d8:	b500      	push	{lr}
 80004da:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004dc:	22b8      	movs	r2, #184	@ 0xb8
 80004de:	2100      	movs	r1, #0
 80004e0:	a802      	add	r0, sp, #8
 80004e2:	f007 fb2d 	bl	8007b40 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80004e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80004ea:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004ec:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80004ee:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004f2:	f004 fc33 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 80004f6:	b108      	cbz	r0, 80004fc <PeriphCommonClock_Config+0x24>
 80004f8:	b672      	cpsid	i
  while (1)
 80004fa:	e7fe      	b.n	80004fa <PeriphCommonClock_Config+0x22>
}
 80004fc:	b031      	add	sp, #196	@ 0xc4
 80004fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000502:	bf00      	nop

08000504 <main>:
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000504:	2400      	movs	r4, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000506:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000508:	4d7f      	ldr	r5, [pc, #508]	@ (8000708 <main+0x204>)
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
 800050a:	f44f 5800 	mov.w	r8, #8192	@ 0x2000
{
 800050e:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000512:	b093      	sub	sp, #76	@ 0x4c
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 8000514:	2708      	movs	r7, #8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000516:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 800051a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_MPU_Disable();
 800051e:	f002 f8b1 	bl	8002684 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000522:	f248 721f 	movw	r2, #34591	@ 0x871f
 8000526:	f240 1301 	movw	r3, #257	@ 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800052a:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800052c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000530:	930c      	str	r3, [sp, #48]	@ 0x30
 8000532:	e9cd 420a 	strd	r4, r2, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000536:	f002 f8c3 	bl	80026c0 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800053a:	2004      	movs	r0, #4
 800053c:	f002 f8b0 	bl	80026a0 <HAL_MPU_Enable>
  HAL_Init();
 8000540:	f001 f8b6 	bl	80016b0 <HAL_Init>
  SystemClock_Config();
 8000544:	f7ff ff6c 	bl	8000420 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000548:	f7ff ffc6 	bl	80004d8 <PeriphCommonClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000550:	a909      	add	r1, sp, #36	@ 0x24
 8000552:	486e      	ldr	r0, [pc, #440]	@ (800070c <main+0x208>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4333      	orrs	r3, r6
 8000556:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800055a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800055e:	4033      	ands	r3, r6
 8000560:	9304      	str	r3, [sp, #16]
 8000562:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000564:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000568:	f043 0304 	orr.w	r3, r3, #4
 800056c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000570:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 8000574:	9709      	str	r7, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	9305      	str	r3, [sp, #20]
 800057c:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800057e:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000586:	f003 fb3b 	bl	8003c00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);   // set high
 800058a:	4632      	mov	r2, r6
 800058c:	4639      	mov	r1, r7
 800058e:	485f      	ldr	r0, [pc, #380]	@ (800070c <main+0x208>)
 8000590:	f003 fd3c 	bl	800400c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000594:	a909      	add	r1, sp, #36	@ 0x24
 8000596:	485d      	ldr	r0, [pc, #372]	@ (800070c <main+0x208>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
 800059a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800059e:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a2:	f003 fb2d 	bl	8003c00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // set high
 80005a6:	4632      	mov	r2, r6
 80005a8:	4641      	mov	r1, r8
 80005aa:	4858      	ldr	r0, [pc, #352]	@ (800070c <main+0x208>)
 80005ac:	f003 fd2e 	bl	800400c <HAL_GPIO_WritePin>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005b4:	4622      	mov	r2, r4
 80005b6:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b8:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005ba:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005bc:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 80005c0:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc1.Instance = ADC1;
 80005c4:	4d52      	ldr	r5, [pc, #328]	@ (8000710 <main+0x20c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c6:	4033      	ands	r3, r6
 80005c8:	9303      	str	r3, [sp, #12]
 80005ca:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005cc:	f001 fffa 	bl	80025c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005d0:	200b      	movs	r0, #11
 80005d2:	f002 f833 	bl	800263c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005d6:	4622      	mov	r2, r4
 80005d8:	4621      	mov	r1, r4
 80005da:	200c      	movs	r0, #12
 80005dc:	f001 fff2 	bl	80025c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005e0:	200c      	movs	r0, #12
 80005e2:	f002 f82b 	bl	800263c <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005e6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005ea:	612f      	str	r7, [r5, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ec:	f44f 6c9c 	mov.w	ip, #1248	@ 0x4e0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005f0:	4f48      	ldr	r7, [pc, #288]	@ (8000714 <main+0x210>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f2:	4628      	mov	r0, r5
  ADC_MultiModeTypeDef multimode = {0};
 80005f4:	9406      	str	r4, [sp, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	940f      	str	r4, [sp, #60]	@ 0x3c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005f8:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 80005fa:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fc:	772c      	strb	r4, [r5, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 80005fe:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000602:	63ee      	str	r6, [r5, #60]	@ 0x3c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000604:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800060c:	e9c5 c309 	strd	ip, r3, [r5, #36]	@ 0x24
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000610:	2303      	movs	r3, #3
  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8000616:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800061a:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  ADC_MultiModeTypeDef multimode = {0};
 800061e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000622:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000626:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800062a:	62eb      	str	r3, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800062c:	f001 fdee 	bl	800220c <HAL_ADC_Init>
 8000630:	b108      	cbz	r0, 8000636 <main+0x132>
 8000632:	b672      	cpsid	i
  while (1)
 8000634:	e7fe      	b.n	8000634 <main+0x130>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000636:	9006      	str	r0, [sp, #24]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000638:	a906      	add	r1, sp, #24
 800063a:	4628      	mov	r0, r5
 800063c:	f001 ff4e 	bl	80024dc <HAL_ADCEx_MultiModeConfigChannel>
 8000640:	4603      	mov	r3, r0
 8000642:	b108      	cbz	r0, 8000648 <main+0x144>
 8000644:	b672      	cpsid	i
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x142>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000648:	4c33      	ldr	r4, [pc, #204]	@ (8000718 <main+0x214>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	4628      	mov	r0, r5
  sConfig.Offset = 0;
 800064c:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064e:	2505      	movs	r5, #5
  sConfig.OffsetSignedSaturation = DISABLE;
 8000650:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000654:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	a909      	add	r1, sp, #36	@ 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000658:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800065c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000660:	e9cd 530b 	strd	r5, r3, [sp, #44]	@ 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000664:	2304      	movs	r3, #4
 8000666:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	f001 f9f4 	bl	8001a54 <HAL_ADC_ConfigChannel>
 800066c:	b108      	cbz	r0, 8000672 <main+0x16e>
 800066e:	b672      	cpsid	i
  while (1)
 8000670:	e7fe      	b.n	8000670 <main+0x16c>
  htim8.Instance = TIM8;
 8000672:	4c2a      	ldr	r4, [pc, #168]	@ (800071c <main+0x218>)
  htim8.Init.Prescaler = 50-1;
 8000674:	2331      	movs	r3, #49	@ 0x31
 8000676:	4a2a      	ldr	r2, [pc, #168]	@ (8000720 <main+0x21c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000678:	9008      	str	r0, [sp, #32]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	60a0      	str	r0, [r4, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067c:	61a0      	str	r0, [r4, #24]
  htim8.Init.Prescaler = 50-1;
 800067e:	e9c4 2300 	strd	r2, r3, [r4]
  htim8.Init.Period = 100-1;
 8000682:	2363      	movs	r3, #99	@ 0x63
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000684:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8000688:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	e9cd 0006 	strd	r0, r0, [sp, #24]
  htim8.Init.RepetitionCounter = 0;
 8000690:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000694:	4620      	mov	r0, r4
  htim8.Init.Period = 100-1;
 8000696:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000698:	f005 fe12 	bl	80062c0 <HAL_TIM_Base_Init>
 800069c:	b108      	cbz	r0, 80006a2 <main+0x19e>
 800069e:	b672      	cpsid	i
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <main+0x19c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80006a6:	a909      	add	r1, sp, #36	@ 0x24
 80006a8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006aa:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80006ac:	f005 fefc 	bl	80064a8 <HAL_TIM_ConfigClockSource>
 80006b0:	4603      	mov	r3, r0
 80006b2:	b108      	cbz	r0, 80006b8 <main+0x1b4>
 80006b4:	b672      	cpsid	i
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0x1b2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006bc:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006be:	a906      	add	r1, sp, #24
 80006c0:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006c2:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006c4:	f005 ffb8 	bl	8006638 <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4601      	mov	r1, r0
 80006ca:	b108      	cbz	r0, 80006d0 <main+0x1cc>
 80006cc:	b672      	cpsid	i
  while (1)
 80006ce:	e7fe      	b.n	80006ce <main+0x1ca>
  DAC_ChannelConfTypeDef sConfig = {0};
 80006d0:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 80006d2:	4c14      	ldr	r4, [pc, #80]	@ (8000724 <main+0x220>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80006d4:	eb0d 0002 	add.w	r0, sp, r2
 80006d8:	f007 fa32 	bl	8007b40 <memset>
  hdac1.Instance = DAC1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <main+0x224>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006de:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 80006e0:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006e2:	f002 f81d 	bl	8002720 <HAL_DAC_Init>
 80006e6:	4602      	mov	r2, r0
 80006e8:	b108      	cbz	r0, 80006ee <main+0x1ea>
 80006ea:	b672      	cpsid	i
  while (1)
 80006ec:	e7fe      	b.n	80006ec <main+0x1e8>
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80006ee:	231e      	movs	r3, #30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006f0:	a909      	add	r1, sp, #36	@ 0x24
 80006f2:	4620      	mov	r0, r4
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006f4:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80006f6:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006fa:	e9cd 260b 	strd	r2, r6, [sp, #44]	@ 0x2c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006fe:	f002 f8f3 	bl	80028e8 <HAL_DAC_ConfigChannel>
 8000702:	b198      	cbz	r0, 800072c <main+0x228>
 8000704:	b672      	cpsid	i
  while (1)
 8000706:	e7fe      	b.n	8000706 <main+0x202>
 8000708:	58024400 	.word	0x58024400
 800070c:	58020800 	.word	0x58020800
 8000710:	24015274 	.word	0x24015274
 8000714:	40022000 	.word	0x40022000
 8000718:	43210000 	.word	0x43210000
 800071c:	24015124 	.word	0x24015124
 8000720:	40010400 	.word	0x40010400
 8000724:	240151e8 	.word	0x240151e8
 8000728:	40007400 	.word	0x40007400
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800072c:	4b58      	ldr	r3, [pc, #352]	@ (8000890 <main+0x38c>)
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	f412 3280 	ands.w	r2, r2, #65536	@ 0x10000
 8000734:	d123      	bne.n	800077e <main+0x27a>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000736:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800073a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800073e:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000742:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000746:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800074a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 800074e:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000750:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000754:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000756:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
      } while (ways-- != 0U);
 800075a:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800075c:	f8c3 6260 	str.w	r6, [r3, #608]	@ 0x260
      } while (ways-- != 0U);
 8000760:	d2f9      	bcs.n	8000756 <main+0x252>
    } while(sets-- != 0U);
 8000762:	3a20      	subs	r2, #32
 8000764:	f112 0f20 	cmn.w	r2, #32
 8000768:	d1f2      	bne.n	8000750 <main+0x24c>
 800076a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800076e:	695a      	ldr	r2, [r3, #20]
 8000770:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800077a:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800077e:	4b44      	ldr	r3, [pc, #272]	@ (8000890 <main+0x38c>)
 8000780:	695a      	ldr	r2, [r3, #20]
 8000782:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000786:	d111      	bne.n	80007ac <main+0x2a8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000788:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800078c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000790:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000794:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000798:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80007a2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007a8:	f3bf 8f6f 	isb	sy
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 80007ac:	4838      	ldr	r0, [pc, #224]	@ (8000890 <main+0x38c>)
  DWT->CYCCNT  = 0;                                // clear counter
 80007ae:	2400      	movs	r4, #0
 80007b0:	4b38      	ldr	r3, [pc, #224]	@ (8000894 <main+0x390>)
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80007b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 80007b6:	f8d0 20fc 	ldr.w	r2, [r0, #252]	@ 0xfc
 80007ba:	4e37      	ldr	r6, [pc, #220]	@ (8000898 <main+0x394>)
 80007bc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80007c0:	f8df b0e4 	ldr.w	fp, [pc, #228]	@ 80008a8 <main+0x3a4>
 80007c4:	f8df a0f4 	ldr.w	sl, [pc, #244]	@ 80008bc <main+0x3b8>
 80007c8:	f5a6 4930 	sub.w	r9, r6, #45056	@ 0xb000
 80007cc:	f8c0 20fc 	str.w	r2, [r0, #252]	@ 0xfc
		 apipe.updateDelayBuffer(&apipe);
 80007d0:	f5a6 4770 	sub.w	r7, r6, #61440	@ 0xf000
  DWT->CYCCNT  = 0;                                // clear counter
 80007d4:	605c      	str	r4, [r3, #4]
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 80007d6:	681a      	ldr	r2, [r3, #0]
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80007d8:	4830      	ldr	r0, [pc, #192]	@ (800089c <main+0x398>)
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 80007da:	f042 0201 	orr.w	r2, r2, #1
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80007de:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 80008c0 <main+0x3bc>
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 80007e2:	601a      	str	r2, [r3, #0]
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80007e4:	f005 ffd0 	bl	8006788 <arm_rfft_fast_init_f32>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80007e8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007ec:	4621      	mov	r1, r4
 80007ee:	482c      	ldr	r0, [pc, #176]	@ (80008a0 <main+0x39c>)
 80007f0:	f001 fe18 	bl	8002424 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcInput, BUFFER_SIZE*2);
 80007f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007f8:	492a      	ldr	r1, [pc, #168]	@ (80008a4 <main+0x3a0>)
 80007fa:	4829      	ldr	r0, [pc, #164]	@ (80008a0 <main+0x39c>)
 80007fc:	f001 fb92 	bl	8001f24 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 8000800:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000804:	4a28      	ldr	r2, [pc, #160]	@ (80008a8 <main+0x3a4>)
 8000806:	4621      	mov	r1, r4
 8000808:	4828      	ldr	r0, [pc, #160]	@ (80008ac <main+0x3a8>)
 800080a:	9400      	str	r4, [sp, #0]
 800080c:	f001 ff9e 	bl	800274c <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 8000810:	4827      	ldr	r0, [pc, #156]	@ (80008b0 <main+0x3ac>)
 8000812:	f005 fdfb 	bl	800640c <HAL_TIM_Base_Start>
  pipeInit(&apipe);
 8000816:	4827      	ldr	r0, [pc, #156]	@ (80008b4 <main+0x3b0>)
 8000818:	f000 fb50 	bl	8000ebc <pipeInit>
  supro_init_f32();
 800081c:	f000 fcb2 	bl	8001184 <supro_init_f32>
	  if (apipe.bufferReady)
 8000820:	7c32      	ldrb	r2, [r6, #16]
 8000822:	b39a      	cbz	r2, 800088c <main+0x388>
		 apipe.updateDelayBuffer(&apipe);
 8000824:	69f2      	ldr	r2, [r6, #28]
 8000826:	4638      	mov	r0, r7
 8000828:	4790      	blx	r2
		 apipe.loadProcess(&apipe);
 800082a:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 800082c:	4638      	mov	r0, r7
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800082e:	4d1e      	ldr	r5, [pc, #120]	@ (80008a8 <main+0x3a4>)
 8000830:	4790      	blx	r2
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000832:	2108      	movs	r1, #8
 8000834:	4640      	mov	r0, r8
 8000836:	2201      	movs	r2, #1
 8000838:	f003 fbe8 	bl	800400c <HAL_GPIO_WritePin>
		 supro_sim.process(&apipe);
 800083c:	f8da 200c 	ldr.w	r2, [sl, #12]
 8000840:	4638      	mov	r0, r7
 8000842:	f00b 041f 	and.w	r4, fp, #31
 8000846:	4790      	blx	r2
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8000848:	4640      	mov	r0, r8
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	f003 fbdd 	bl	800400c <HAL_GPIO_WritePin>
		 arm_copy_f32(apipe.processBuffer, apipe.outBuffer, BUFFER_SIZE);
 8000852:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000856:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800085a:	4817      	ldr	r0, [pc, #92]	@ (80008b8 <main+0x3b4>)
 800085c:	f005 ff64 	bl	8006728 <arm_copy_f32>
		 apipe.updateDACOutput(&apipe, dacOutput);
 8000860:	6a32      	ldr	r2, [r6, #32]
 8000862:	4629      	mov	r1, r5
 8000864:	4638      	mov	r0, r7
 8000866:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 800086a:	4790      	blx	r2
  __ASM volatile ("dsb 0xF":::"memory");
 800086c:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000870:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <main+0x38c>)
 8000872:	3c20      	subs	r4, #32
 8000874:	f8c2 5268 	str.w	r5, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000878:	3520      	adds	r5, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800087a:	2c00      	cmp	r4, #0
 800087c:	dcf9      	bgt.n	8000872 <main+0x36e>
 800087e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000882:	f3bf 8f6f 	isb	sy
		 apipe.bufferReady = false;
 8000886:	2200      	movs	r2, #0
 8000888:	7432      	strb	r2, [r6, #16]
 800088a:	e7c9      	b.n	8000820 <main+0x31c>
	      __WFI();
 800088c:	bf30      	wfi
 800088e:	e7c7      	b.n	8000820 <main+0x31c>
 8000890:	e000ed00 	.word	0xe000ed00
 8000894:	e0001000 	.word	0xe0001000
 8000898:	240150f8 	.word	0x240150f8
 800089c:	240060e0 	.word	0x240060e0
 80008a0:	24015274 	.word	0x24015274
 80008a4:	240050e0 	.word	0x240050e0
 80008a8:	240040e0 	.word	0x240040e0
 80008ac:	240151e8 	.word	0x240151e8
 80008b0:	24015124 	.word	0x24015124
 80008b4:	240060f8 	.word	0x240060f8
 80008b8:	2400a100 	.word	0x2400a100
 80008bc:	24000038 	.word	0x24000038
 80008c0:	58020800 	.word	0x58020800

080008c4 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <Error_Handler+0x2>

080008c8 <partitioned_fir_convolution_fft>:
#include "partitioned_fir_convolution_fft.h"

void partitioned_fir_convolution_fft(pipe *pipe, fir_t *fir, float* state, float* fftOut, float* zeropad )
{
 80008c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	float *zeropaddedinput = zeropad;
	float *overlap         = state;

    // prepare input
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80008cc:	f244 0608 	movw	r6, #16392	@ 0x4008
{
 80008d0:	b08d      	sub	sp, #52	@ 0x34
 80008d2:	460d      	mov	r5, r1
 80008d4:	461f      	mov	r7, r3
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80008d6:	4406      	add	r6, r0
 80008d8:	9916      	ldr	r1, [sp, #88]	@ 0x58
{
 80008da:	9208      	str	r2, [sp, #32]
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80008dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008e0:	4630      	mov	r0, r6
 80008e2:	f507 5800 	add.w	r8, r7, #8192	@ 0x2000
 80008e6:	f005 ff1f 	bl	8006728 <arm_copy_f32>
    arm_fill_f32(0.0f, &zeropaddedinput[BUFFER_SIZE], BUFFER_SIZE);
 80008ea:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80008ec:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 80009bc <partitioned_fir_convolution_fft+0xf4>
 80008f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f4:	f503 5480 	add.w	r4, r3, #4096	@ 0x1000
 80008f8:	4620      	mov	r0, r4
 80008fa:	f005 fef7 	bl	80066ec <arm_fill_f32>

    // forward FFT
    arm_rfft_fast_f32(&fft, zeropaddedinput, fftOut, 0);
 80008fe:	2300      	movs	r3, #0
 8000900:	463a      	mov	r2, r7
 8000902:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8000904:	482e      	ldr	r0, [pc, #184]	@ (80009c0 <partitioned_fir_convolution_fft+0xf8>)
 8000906:	f005 fff1 	bl	80068ec <arm_rfft_fast_f32>

    // save index and spectrum
    fir->prev_fftidx = fir->curr_fftidx;
 800090a:	68ab      	ldr	r3, [r5, #8]
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 800090c:	686a      	ldr	r2, [r5, #4]
 800090e:	4638      	mov	r0, r7
    fir->prev_fftidx = fir->curr_fftidx;
 8000910:	60eb      	str	r3, [r5, #12]
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 8000912:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000916:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800091a:	f005 ff05 	bl	8006728 <arm_copy_f32>

    arm_fill_f32(0.0f, fftOut, FFT_SIZE);              /* clear accumulator */
 800091e:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 80009bc <partitioned_fir_convolution_fft+0xf4>
 8000922:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000926:	4638      	mov	r0, r7
 8000928:	f005 fee0 	bl	80066ec <arm_fill_f32>

    const uint32_t segs = fir->numSegments;
 800092c:	692a      	ldr	r2, [r5, #16]
 800092e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
    uint32_t i = 0;
    uint32_t idx = fir->prev_fftidx;
 8000932:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    const uint32_t segs = fir->numSegments;
 8000936:	9201      	str	r2, [sp, #4]
    uint32_t i = 0;
 8000938:	f04f 0c00 	mov.w	ip, #0

    // partitioned convolution with pointer arithmetic
    do {
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 800093c:	686a      	ldr	r2, [r5, #4]
                 // tail loop for any remaining bins
                 for (uint32_t rem = (FFT_SIZE % 20) / 2;  rem--;  ) {
                     float xr = *xPtr++;  float xi = *xPtr++;
                     float hr = *hPtr++;  float hi = *hPtr++;

                     float accR = __builtin_fmaf(xr, hr,
 800093e:	f603 7be8 	addw	fp, r3, #4072	@ 0xfe8
                                    __builtin_fmaf(-xi, hi, *yPtr));
                     float accI = __builtin_fmaf(xr, hi,
 8000942:	f603 7aec 	addw	sl, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 8000946:	f503 697f 	add.w	r9, r3, #4080	@ 0xff0
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 800094a:	9203      	str	r2, [sp, #12]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 800094c:	682a      	ldr	r2, [r5, #0]
                     float accI = __builtin_fmaf(xr, hi,
 800094e:	9609      	str	r6, [sp, #36]	@ 0x24
 8000950:	4676      	mov	r6, lr
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8000952:	9204      	str	r2, [sp, #16]
		}
		if (idx-- == 0) {
			idx = segs - 1;
		}

    } while (idx != fir->curr_fftidx);
 8000954:	68aa      	ldr	r2, [r5, #8]
                     float accI = __builtin_fmaf(xr, hi,
 8000956:	950a      	str	r5, [sp, #40]	@ 0x28
    } while (idx != fir->curr_fftidx);
 8000958:	9202      	str	r2, [sp, #8]
 800095a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
                     float accI = __builtin_fmaf(xr, hi,
 800095e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8000960:	9207      	str	r2, [sp, #28]
 8000962:	f603 72f4 	addw	r2, r3, #4084	@ 0xff4
 8000966:	9205      	str	r2, [sp, #20]
                     float accR = __builtin_fmaf(xr, hr,
 8000968:	f603 72f8 	addw	r2, r3, #4088	@ 0xff8
                     float accI = __builtin_fmaf(xr, hi,
 800096c:	f603 73fc 	addw	r3, r3, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 8000970:	9206      	str	r2, [sp, #24]
                     float accI = __builtin_fmaf(xr, hi,
 8000972:	469e      	mov	lr, r3
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8000974:	9b03      	ldr	r3, [sp, #12]
 8000976:	f242 0038 	movw	r0, #8248	@ 0x2038
                 yPtr[0] += xPtr[0] * hPtr[0];
 800097a:	ed97 7a00 	vldr	s14, [r7]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 800097e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8000982:	9b04      	ldr	r3, [sp, #16]
                 yPtr[0] += xPtr[0] * hPtr[0];
 8000984:	ed94 6a00 	vldr	s12, [r4]
 8000988:	f104 0258 	add.w	r2, r4, #88	@ 0x58
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 800098c:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
                 yPtr[0] += xPtr[0] * hPtr[0];
 8000990:	1820      	adds	r0, r4, r0
                 yPtr[1] += xPtr[1] * hPtr[1];
 8000992:	edd7 7a01 	vldr	s15, [r7, #4]
                 yPtr[0] += xPtr[0] * hPtr[0];
 8000996:	edd5 6a00 	vldr	s13, [r5]
 800099a:	f105 0158 	add.w	r1, r5, #88	@ 0x58
 800099e:	9b07      	ldr	r3, [sp, #28]
 80009a0:	eea6 7a26 	vfma.f32	s14, s12, s13
 80009a4:	ed87 7a00 	vstr	s14, [r7]
                 yPtr[1] += xPtr[1] * hPtr[1];
 80009a8:	edd4 6a01 	vldr	s13, [r4, #4]
 80009ac:	ed95 7a01 	vldr	s14, [r5, #4]
 80009b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80009b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80009b8:	e004      	b.n	80009c4 <partitioned_fir_convolution_fft+0xfc>
 80009ba:	bf00      	nop
 80009bc:	00000000 	.word	0x00000000
 80009c0:	240060e0 	.word	0x240060e0
                         float xr = *xPtr++; float xi = *xPtr++;
 80009c4:	ed52 7a13 	vldr	s15, [r2, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80009c8:	3250      	adds	r2, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 80009ca:	ed51 2a14 	vldr	s5, [r1, #-80]	@ 0xffffffb0
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80009ce:	3350      	adds	r3, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 80009d0:	ed51 3a13 	vldr	s7, [r1, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80009d4:	3150      	adds	r1, #80	@ 0x50
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80009d6:	ed13 4a28 	vldr	s8, [r3, #-160]	@ 0xffffff60
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80009da:	ed53 4a27 	vldr	s9, [r3, #-156]	@ 0xffffff64
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80009de:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float xr = *xPtr++; float xi = *xPtr++;
 80009e2:	ed12 3a28 	vldr	s6, [r2, #-160]	@ 0xffffff60
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80009e6:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80009ea:	ed13 5a26 	vldr	s10, [r3, #-152]	@ 0xffffff68
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80009ee:	ed53 5a25 	vldr	s11, [r3, #-148]	@ 0xffffff6c
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80009f2:	ed53 6a24 	vldr	s13, [r3, #-144]	@ 0xffffff70
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80009f6:	ed13 6a23 	vldr	s12, [r3, #-140]	@ 0xffffff74
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80009fa:	ed13 7a22 	vldr	s14, [r3, #-136]	@ 0xffffff78
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80009fe:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a02:	ed53 7a21 	vldr	s15, [r3, #-132]	@ 0xffffff7c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a06:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 8000a0a:	ed03 4a28 	vstr	s8, [r3, #-160]	@ 0xffffff60
                         *(yPtr+1) = accI;
 8000a0e:	ed43 4a27 	vstr	s9, [r3, #-156]	@ 0xffffff64
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a12:	ed12 3a25 	vldr	s6, [r2, #-148]	@ 0xffffff6c
                         float hr = *hPtr++; float hi = *hPtr++;
 8000a16:	ed51 3a26 	vldr	s7, [r1, #-152]	@ 0xffffff68
 8000a1a:	ed51 4a25 	vldr	s9, [r1, #-148]	@ 0xffffff6c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a1e:	eee3 5a23 	vfma.f32	s11, s6, s7
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a22:	ed12 4a26 	vldr	s8, [r2, #-152]	@ 0xffffff68
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a26:	eea3 5a64 	vfms.f32	s10, s6, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a2a:	eee4 5a24 	vfma.f32	s11, s8, s9
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a2e:	eea4 5a23 	vfma.f32	s10, s8, s7
                         *(yPtr+1) = accI;
 8000a32:	ed43 5a25 	vstr	s11, [r3, #-148]	@ 0xffffff6c
                         *yPtr     = accR;
 8000a36:	ed03 5a26 	vstr	s10, [r3, #-152]	@ 0xffffff68
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a3a:	ed12 4a23 	vldr	s8, [r2, #-140]	@ 0xffffff74
                         float hr = *hPtr++; float hi = *hPtr++;
 8000a3e:	ed51 5a24 	vldr	s11, [r1, #-144]	@ 0xffffff70
 8000a42:	ed51 4a23 	vldr	s9, [r1, #-140]	@ 0xffffff74
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a46:	eea4 6a25 	vfma.f32	s12, s8, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a4a:	ed12 5a24 	vldr	s10, [r2, #-144]	@ 0xffffff70
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a4e:	eee4 6a64 	vfms.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a52:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a56:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *(yPtr+1) = accI;
 8000a5a:	ed03 6a23 	vstr	s12, [r3, #-140]	@ 0xffffff74
                         *yPtr     = accR;
 8000a5e:	ed43 6a24 	vstr	s13, [r3, #-144]	@ 0xffffff70
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a62:	ed12 5a21 	vldr	s10, [r2, #-132]	@ 0xffffff7c
                         float hr = *hPtr++; float hi = *hPtr++;
 8000a66:	ed51 5a22 	vldr	s11, [r1, #-136]	@ 0xffffff78
 8000a6a:	ed51 6a21 	vldr	s13, [r1, #-132]	@ 0xffffff7c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a6e:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a72:	ed12 6a22 	vldr	s12, [r2, #-136]	@ 0xffffff78
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a76:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a7a:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a7e:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8000a82:	ed43 7a21 	vstr	s15, [r3, #-132]	@ 0xffffff7c
                         *yPtr     = accR;
 8000a86:	ed03 7a22 	vstr	s14, [r3, #-136]	@ 0xffffff78
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a8a:	ed12 3a20 	vldr	s6, [r2, #-128]	@ 0xffffff80
 8000a8e:	ed52 7a1f 	vldr	s15, [r2, #-124]	@ 0xffffff84
                         float hr = *hPtr++; float hi = *hPtr++;
 8000a92:	ed51 3a1f 	vldr	s7, [r1, #-124]	@ 0xffffff84
 8000a96:	ed51 2a20 	vldr	s5, [r1, #-128]	@ 0xffffff80
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a9a:	ed13 4a20 	vldr	s8, [r3, #-128]	@ 0xffffff80
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a9e:	ed53 4a1f 	vldr	s9, [r3, #-124]	@ 0xffffff84
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000aa2:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000aa6:	ed53 5a1e 	vldr	s11, [r3, #-120]	@ 0xffffff88
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000aaa:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000aae:	ed13 5a1d 	vldr	s10, [r3, #-116]	@ 0xffffff8c
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ab2:	ed13 6a1c 	vldr	s12, [r3, #-112]	@ 0xffffff90
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000ab6:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000aba:	ed53 7a1a 	vldr	s15, [r3, #-104]	@ 0xffffff98
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000abe:	ed13 7a19 	vldr	s14, [r3, #-100]	@ 0xffffff9c
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ac2:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000ac6:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 8000aca:	ed03 4a20 	vstr	s8, [r3, #-128]	@ 0xffffff80
                         *(yPtr+1) = accI;
 8000ace:	ed43 4a1f 	vstr	s9, [r3, #-124]	@ 0xffffff84
                         float xr = *xPtr++; float xi = *xPtr++;
 8000ad2:	ed12 3a1d 	vldr	s6, [r2, #-116]	@ 0xffffff8c
                         float hr = *hPtr++; float hi = *hPtr++;
 8000ad6:	ed51 4a1e 	vldr	s9, [r1, #-120]	@ 0xffffff88
 8000ada:	ed51 3a1d 	vldr	s7, [r1, #-116]	@ 0xffffff8c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000ade:	eea3 5a24 	vfma.f32	s10, s6, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 8000ae2:	ed12 4a1e 	vldr	s8, [r2, #-120]	@ 0xffffff88
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ae6:	eee3 5a63 	vfms.f32	s11, s6, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000aea:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000aee:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *(yPtr+1) = accI;
 8000af2:	ed03 5a1d 	vstr	s10, [r3, #-116]	@ 0xffffff8c
                         *yPtr     = accR;
 8000af6:	ed43 5a1e 	vstr	s11, [r3, #-120]	@ 0xffffff88
                         float xr = *xPtr++; float xi = *xPtr++;
 8000afa:	ed12 4a1b 	vldr	s8, [r2, #-108]	@ 0xffffff94
                         float hr = *hPtr++; float hi = *hPtr++;
 8000afe:	ed51 4a1c 	vldr	s9, [r1, #-112]	@ 0xffffff90
 8000b02:	ed51 5a1b 	vldr	s11, [r1, #-108]	@ 0xffffff94
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b06:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b0a:	ed12 5a1c 	vldr	s10, [r2, #-112]	@ 0xffffff90
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b0e:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b12:	eee5 6a25 	vfma.f32	s13, s10, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b16:	eea5 6a24 	vfma.f32	s12, s10, s9
                         *(yPtr+1) = accI;
 8000b1a:	ed43 6a1b 	vstr	s13, [r3, #-108]	@ 0xffffff94
                         *yPtr     = accR;
 8000b1e:	ed03 6a1c 	vstr	s12, [r3, #-112]	@ 0xffffff90
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b22:	ed12 5a19 	vldr	s10, [r2, #-100]	@ 0xffffff9c
                         float hr = *hPtr++; float hi = *hPtr++;
 8000b26:	ed51 6a1a 	vldr	s13, [r1, #-104]	@ 0xffffff98
 8000b2a:	ed51 5a19 	vldr	s11, [r1, #-100]	@ 0xffffff9c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b2e:	eea5 7a26 	vfma.f32	s14, s10, s13
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b32:	ed12 6a1a 	vldr	s12, [r2, #-104]	@ 0xffffff98
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b36:	eee5 7a65 	vfms.f32	s15, s10, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b3a:	eea6 7a25 	vfma.f32	s14, s12, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b3e:	eee6 7a26 	vfma.f32	s15, s12, s13
                         *(yPtr+1) = accI;
 8000b42:	ed03 7a19 	vstr	s14, [r3, #-100]	@ 0xffffff9c
                         *yPtr     = accR;
 8000b46:	ed43 7a1a 	vstr	s15, [r3, #-104]	@ 0xffffff98
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b4a:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8000b4e:	ed12 4a17 	vldr	s8, [r2, #-92]	@ 0xffffffa4
                         float hr = *hPtr++; float hi = *hPtr++;
 8000b52:	ed51 5a17 	vldr	s11, [r1, #-92]	@ 0xffffffa4
 8000b56:	ed51 4a18 	vldr	s9, [r1, #-96]	@ 0xffffffa0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b5a:	ed13 6a18 	vldr	s12, [r3, #-96]	@ 0xffffffa0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b5e:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b62:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b66:	ed13 7a16 	vldr	s14, [r3, #-88]	@ 0xffffffa8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b6a:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b6e:	ed53 7a15 	vldr	s15, [r3, #-84]	@ 0xffffffac
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b72:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b76:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *yPtr     = accR;
 8000b7a:	ed03 6a18 	vstr	s12, [r3, #-96]	@ 0xffffffa0
                         *(yPtr+1) = accI;
 8000b7e:	ed43 6a17 	vstr	s13, [r3, #-92]	@ 0xffffffa4
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b82:	ed12 5a15 	vldr	s10, [r2, #-84]	@ 0xffffffac
                         float hr = *hPtr++; float hi = *hPtr++;
 8000b86:	ed51 5a16 	vldr	s11, [r1, #-88]	@ 0xffffffa8
 8000b8a:	ed51 6a15 	vldr	s13, [r1, #-84]	@ 0xffffffac
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b8e:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b92:	ed12 6a16 	vldr	s12, [r2, #-88]	@ 0xffffffa8
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b96:	eea5 7a66 	vfms.f32	s14, s10, s13
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8000b9a:	4282      	cmp	r2, r0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b9c:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ba0:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8000ba4:	ed43 7a15 	vstr	s15, [r3, #-84]	@ 0xffffffac
                         *yPtr     = accR;
 8000ba8:	ed03 7a16 	vstr	s14, [r3, #-88]	@ 0xffffffa8
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8000bac:	f47f af0a 	bne.w	80009c4 <partitioned_fir_convolution_fft+0xfc>
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000bb0:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
			i = 0;
 8000bb4:	9b01      	ldr	r3, [sp, #4]
		if (++i >= segs) {
 8000bb6:	f10c 0c01 	add.w	ip, ip, #1
                     float accR = __builtin_fmaf(xr, hr,
 8000bba:	ed9b 7a00 	vldr	s14, [fp]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000bbe:	f602 71ec 	addw	r1, r2, #4076	@ 0xfec
                     float accI = __builtin_fmaf(xr, hi,
 8000bc2:	edda 7a00 	vldr	s15, [sl]
			i = 0;
 8000bc6:	4563      	cmp	r3, ip
 8000bc8:	bf98      	it	ls
 8000bca:	f04f 0c00 	movls.w	ip, #0
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000bce:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000bd2:	ed91 6a00 	vldr	s12, [r1]
 8000bd6:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000bda:	f603 71e8 	addw	r1, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8000bde:	9805      	ldr	r0, [sp, #20]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000be0:	f505 5500 	add.w	r5, r5, #8192	@ 0x2000
 8000be4:	edd1 6a00 	vldr	s13, [r1]
 8000be8:	f603 71ec 	addw	r1, r3, #4076	@ 0xfec
 8000bec:	edd1 5a00 	vldr	s11, [r1]
                     float accI = __builtin_fmaf(xr, hi,
 8000bf0:	eee6 7a26 	vfma.f32	s15, s12, s13
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000bf4:	f602 71e8 	addw	r1, r2, #4072	@ 0xfe8
                     float accR = __builtin_fmaf(xr, hr,
 8000bf8:	eea6 7a65 	vfms.f32	s14, s12, s11
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000bfc:	ed91 6a00 	vldr	s12, [r1]
 8000c00:	f602 71f4 	addw	r1, r2, #4084	@ 0xff4
                     float accI = __builtin_fmaf(xr, hi,
 8000c04:	eee6 7a25 	vfma.f32	s15, s12, s11
                     float accR = __builtin_fmaf(xr, hr,
 8000c08:	eea6 7a26 	vfma.f32	s14, s12, s13
                     *yPtr     = accR;
 8000c0c:	ed8b 7a00 	vstr	s14, [fp]
                     *(yPtr+1) = accI;
 8000c10:	edca 7a00 	vstr	s15, [sl]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c14:	ed91 6a00 	vldr	s12, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c18:	f503 617f 	add.w	r1, r3, #4080	@ 0xff0
                     float accI = __builtin_fmaf(xr, hi,
 8000c1c:	edd0 7a00 	vldr	s15, [r0]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c20:	edd1 6a00 	vldr	s13, [r1]
 8000c24:	f603 71f4 	addw	r1, r3, #4084	@ 0xff4
                     float accR = __builtin_fmaf(xr, hr,
 8000c28:	ed99 7a00 	vldr	s14, [r9]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c2c:	edd1 5a00 	vldr	s11, [r1]
                     float accI = __builtin_fmaf(xr, hi,
 8000c30:	eee6 7a26 	vfma.f32	s15, s12, s13
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c34:	f502 617f 	add.w	r1, r2, #4080	@ 0xff0
                     float accR = __builtin_fmaf(xr, hr,
 8000c38:	eea6 7a65 	vfms.f32	s14, s12, s11
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c3c:	ed91 6a00 	vldr	s12, [r1]
 8000c40:	f602 71fc 	addw	r1, r2, #4092	@ 0xffc
 8000c44:	f602 72f8 	addw	r2, r2, #4088	@ 0xff8
                     float accI = __builtin_fmaf(xr, hi,
 8000c48:	eee6 7a25 	vfma.f32	s15, s12, s11
                     float accR = __builtin_fmaf(xr, hr,
 8000c4c:	eea6 7a26 	vfma.f32	s14, s12, s13
                     *yPtr     = accR;
 8000c50:	ed89 7a00 	vstr	s14, [r9]
                     *(yPtr+1) = accI;
 8000c54:	edc0 7a00 	vstr	s15, [r0]
                     float accR = __builtin_fmaf(xr, hr,
 8000c58:	9806      	ldr	r0, [sp, #24]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c5a:	ed92 6a00 	vldr	s12, [r2]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c5e:	f603 72f8 	addw	r2, r3, #4088	@ 0xff8
 8000c62:	f603 73fc 	addw	r3, r3, #4092	@ 0xffc
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c66:	ed91 5a00 	vldr	s10, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c6a:	edd2 6a00 	vldr	s13, [r2]
 8000c6e:	edd3 5a00 	vldr	s11, [r3]
                     float accR = __builtin_fmaf(xr, hr,
 8000c72:	ed90 7a00 	vldr	s14, [r0]
                     float accI = __builtin_fmaf(xr, hi,
 8000c76:	edde 7a00 	vldr	s15, [lr]
                     float accR = __builtin_fmaf(xr, hr,
 8000c7a:	eea5 7a65 	vfms.f32	s14, s10, s11
                     float accI = __builtin_fmaf(xr, hi,
 8000c7e:	eee5 7a26 	vfma.f32	s15, s10, s13
                     float accR = __builtin_fmaf(xr, hr,
 8000c82:	eea6 7a26 	vfma.f32	s14, s12, s13
                     float accI = __builtin_fmaf(xr, hi,
 8000c86:	eee6 7a25 	vfma.f32	s15, s12, s11
                     *yPtr     = accR;
 8000c8a:	ed80 7a00 	vstr	s14, [r0]
                     *(yPtr+1) = accI;
 8000c8e:	edce 7a00 	vstr	s15, [lr]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c92:	ed94 5a01 	vldr	s10, [r4, #4]
 8000c96:	ed94 6a00 	vldr	s12, [r4]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c9a:	edd5 5a00 	vldr	s11, [r5]
 8000c9e:	edd5 6a01 	vldr	s13, [r5, #4]
                     float accR = __builtin_fmaf(xr, hr,
 8000ca2:	ed98 7a00 	vldr	s14, [r8]
                     float accI = __builtin_fmaf(xr, hi,
 8000ca6:	edd8 7a01 	vldr	s15, [r8, #4]
                     float accR = __builtin_fmaf(xr, hr,
 8000caa:	eea5 7a66 	vfms.f32	s14, s10, s13
                     float accI = __builtin_fmaf(xr, hi,
 8000cae:	eee5 7a25 	vfma.f32	s15, s10, s11
                     float accR = __builtin_fmaf(xr, hr,
 8000cb2:	eea6 7a25 	vfma.f32	s14, s12, s11
                     float accI = __builtin_fmaf(xr, hi,
 8000cb6:	eee6 7a26 	vfma.f32	s15, s12, s13
                     *yPtr     = accR;
 8000cba:	ed88 7a00 	vstr	s14, [r8]
                     *(yPtr+1) = accI;
 8000cbe:	edc8 7a01 	vstr	s15, [r8, #4]
		if (idx-- == 0) {
 8000cc2:	b33e      	cbz	r6, 8000d14 <partitioned_fir_convolution_fft+0x44c>
 8000cc4:	3e01      	subs	r6, #1
    } while (idx != fir->curr_fftidx);
 8000cc6:	9b02      	ldr	r3, [sp, #8]
 8000cc8:	42b3      	cmp	r3, r6
 8000cca:	f47f ae53 	bne.w	8000974 <partitioned_fir_convolution_fft+0xac>

    // advance write index
    if (++fir->curr_fftidx >= segs) {
        fir->curr_fftidx = 0;
 8000cce:	9a01      	ldr	r2, [sp, #4]
    if (++fir->curr_fftidx >= segs) {
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
    }

    // inverse FFT
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8000cd4:	4639      	mov	r1, r7
        fir->curr_fftidx = 0;
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	bf28      	it	cs
 8000cda:	2300      	movcs	r3, #0
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8000cdc:	480f      	ldr	r0, [pc, #60]	@ (8000d1c <partitioned_fir_convolution_fft+0x454>)
 8000cde:	9a16      	ldr	r2, [sp, #88]	@ 0x58
    if (++fir->curr_fftidx >= segs) {
 8000ce0:	e9dd 6509 	ldrd	r6, r5, [sp, #36]	@ 0x24
 8000ce4:	60ab      	str	r3, [r5, #8]
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f005 fe00 	bl	80068ec <arm_rfft_fast_f32>

    // overlap-add and scaling
    const float32_t invN = 1.0f ;/// (float32_t)segs;
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8000cec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8000cee:	9a08      	ldr	r2, [sp, #32]
 8000cf0:	4621      	mov	r1, r4
        float32_t s = zeropaddedinput[k]            * invN;
 8000cf2:	ecf3 7a01 	vldmia	r3!, {s15}
        float32_t o = overlap[k]                    * invN;
 8000cf6:	ed92 7a00 	vldr	s14, [r2]
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8000cfa:	429c      	cmp	r4, r3
        pipe->processBuffer[k] = s + o;
 8000cfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d00:	ece6 7a01 	vstmia	r6!, {s15}
        overlap[k]             = zeropaddedinput[BUFFER_SIZE + k];
 8000d04:	f851 0b04 	ldr.w	r0, [r1], #4
 8000d08:	f842 0b04 	str.w	r0, [r2], #4
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8000d0c:	d1f1      	bne.n	8000cf2 <partitioned_fir_convolution_fft+0x42a>
    }

}
 8000d0e:	b00d      	add	sp, #52	@ 0x34
 8000d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			idx = segs - 1;
 8000d14:	9b01      	ldr	r3, [sp, #4]
 8000d16:	1e5e      	subs	r6, r3, #1
 8000d18:	e7d5      	b.n	8000cc6 <partitioned_fir_convolution_fft+0x3fe>
 8000d1a:	bf00      	nop
 8000d1c:	240060e0 	.word	0x240060e0

08000d20 <pipe_getDelayBuffer>:

float32_t *pipe_getDelayBuffer(pipe *self, uint16_t n)
{
    uint32_t offset = n * BUFFER_SIZE;

    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8000d20:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
 8000d24:	4a09      	ldr	r2, [pc, #36]	@ (8000d4c <pipe_getDelayBuffer+0x2c>)

    return &self->delayBuffer[index];
 8000d26:	f241 4c02 	movw	ip, #5122	@ 0x1402
    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000d30:	eba3 2181 	sub.w	r1, r3, r1, lsl #10
 8000d34:	fba2 2301 	umull	r2, r3, r2, r1
 8000d38:	0b5b      	lsrs	r3, r3, #13
 8000d3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d3e:	eba1 21c3 	sub.w	r1, r1, r3, lsl #11
    return &self->delayBuffer[index];
 8000d42:	448c      	add	ip, r1
}
 8000d44:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	cccccccd 	.word	0xcccccccd

08000d50 <pipe_loadProcess>:
    }
}

static void pipe_loadProcess(pipe *self)
{
	arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8000d50:	f244 0108 	movw	r1, #16392	@ 0x4008
 8000d54:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 8000d58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d5c:	4401      	add	r1, r0
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	f005 bce2 	b.w	8006728 <arm_copy_f32>

08000d64 <pipe_updateDelayBuffer>:
{
 8000d64:	b510      	push	{r4, lr}
    arm_copy_f32(self->inBuffer, &self->delayBuffer[self->delayIndex], BUFFER_SIZE);
 8000d66:	f500 4470 	add.w	r4, r0, #61440	@ 0xf000
 8000d6a:	f241 4102 	movw	r1, #5122	@ 0x1402
 8000d6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d72:	68e3      	ldr	r3, [r4, #12]
 8000d74:	4419      	add	r1, r3
 8000d76:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 8000d7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000d7e:	6818      	ldr	r0, [r3, #0]
 8000d80:	f005 fcd2 	bl	8006728 <arm_copy_f32>
    self->delayIndex += BUFFER_SIZE;
 8000d84:	68e3      	ldr	r3, [r4, #12]
 8000d86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
        self->delayIndex = 0;
 8000d8a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8000d8e:	bf28      	it	cs
 8000d90:	2300      	movcs	r3, #0
 8000d92:	60e3      	str	r3, [r4, #12]
}
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	bf00      	nop

08000d98 <pipe_updateDACOutput>:
{
 8000d98:	b570      	push	{r4, r5, r6, lr}
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8000d9a:	f500 4580 	add.w	r5, r0, #16384	@ 0x4000
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000d9e:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
{
 8000da2:	460c      	mov	r4, r1
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8000da4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000da8:	6869      	ldr	r1, [r5, #4]
 8000daa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000dae:	7a1e      	ldrb	r6, [r3, #8]
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8000db0:	4608      	mov	r0, r1
 8000db2:	f006 fb23 	bl	80073fc <arm_offset_f32>
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8000db6:	6869      	ldr	r1, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000db8:	fab6 f686 	clz	r6, r6
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8000dbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000df0 <pipe_updateDACOutput+0x58>
 8000dc6:	f006 fae3 	bl	8007390 <arm_scale_f32>
 8000dca:	686a      	ldr	r2, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000dcc:	0976      	lsrs	r6, r6, #5
    for (i = 0; i < BUFFER_SIZE; i++)
 8000dce:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8000dd2:	eb04 21c6 	add.w	r1, r4, r6, lsl #11
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8000dd6:	ecf2 7a01 	vldmia	r2!, {s15}
 8000dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    for (i = 0; i < BUFFER_SIZE; i++)
 8000dde:	4290      	cmp	r0, r2
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8000de0:	ee17 3a90 	vmov	r3, s15
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	f821 3b02 	strh.w	r3, [r1], #2
    for (i = 0; i < BUFFER_SIZE; i++)
 8000dea:	d1f4      	bne.n	8000dd6 <pipe_updateDACOutput+0x3e>
}
 8000dec:	bd70      	pop	{r4, r5, r6, pc}
 8000dee:	bf00      	nop
 8000df0:	45000000 	.word	0x45000000

08000df4 <pipe_ADC_Complete>:
{
 8000df4:	b538      	push	{r3, r4, r5, lr}
 8000df6:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
 8000dfa:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8000dfc:	f501 6c00 	add.w	ip, r1, #2048	@ 0x800
 8000e00:	f500 5e00 	add.w	lr, r0, #8192	@ 0x2000
 8000e04:	462a      	mov	r2, r5
        self->inBuffer2[i] = (float32_t)adcInput[BUFFER_SIZE + i];
 8000e06:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e14:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8000e18:	4572      	cmp	r2, lr
 8000e1a:	d1f4      	bne.n	8000e06 <pipe_ADC_Complete+0x12>
    arm_scale_f32(self->inBuffer2, ADC_BITS2VOLTS, self->inBuffer2, BUFFER_SIZE);
 8000e1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e20:	4629      	mov	r1, r5
 8000e22:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000e58 <pipe_ADC_Complete+0x64>
 8000e26:	4628      	mov	r0, r5
 8000e28:	f006 fab2 	bl	8007390 <arm_scale_f32>
    arm_offset_f32(self->inBuffer2, -1.0f, self->inBuffer2, BUFFER_SIZE);
 8000e2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e30:	4629      	mov	r1, r5
 8000e32:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000e36:	4628      	mov	r0, r5
 8000e38:	f006 fae0 	bl	80073fc <arm_offset_f32>
    self->inBuffer  = self->inBuffer2;
 8000e3c:	f504 4280 	add.w	r2, r4, #16384	@ 0x4000
    self->ppState   = 0;
 8000e40:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->outBuffer = self->outBuffer2;
 8000e44:	f504 5440 	add.w	r4, r4, #12288	@ 0x3000
    self->ppState   = 0;
 8000e48:	2100      	movs	r1, #0
    self->outBuffer = self->outBuffer2;
 8000e4a:	e9c2 5400 	strd	r5, r4, [r2]
    self->bufferReady = true;
 8000e4e:	2201      	movs	r2, #1
    self->ppState   = 0;
 8000e50:	7219      	strb	r1, [r3, #8]
    self->bufferReady = true;
 8000e52:	741a      	strb	r2, [r3, #16]
}
 8000e54:	bd38      	pop	{r3, r4, r5, pc}
 8000e56:	bf00      	nop
 8000e58:	38000000 	.word	0x38000000

08000e5c <pipe_ADC_HalfComplete>:
{
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	468c      	mov	ip, r1
 8000e60:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8000e62:	4602      	mov	r2, r0
 8000e64:	f500 5e80 	add.w	lr, r0, #4096	@ 0x1000
        self->inBuffer1[i] = (float32_t)adcInput[i];
 8000e68:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e76:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8000e7a:	4572      	cmp	r2, lr
 8000e7c:	d1f4      	bne.n	8000e68 <pipe_ADC_HalfComplete+0xc>
    arm_scale_f32(self->inBuffer1, ADC_BITS2VOLTS, self->inBuffer1, BUFFER_SIZE);
 8000e7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e82:	4621      	mov	r1, r4
 8000e84:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000eb8 <pipe_ADC_HalfComplete+0x5c>
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f006 fa81 	bl	8007390 <arm_scale_f32>
    arm_offset_f32(self->inBuffer1, -1.0f, self->inBuffer1, BUFFER_SIZE);
 8000e8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e92:	4621      	mov	r1, r4
 8000e94:	4620      	mov	r0, r4
 8000e96:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000e9a:	f006 faaf 	bl	80073fc <arm_offset_f32>
    self->ppState   = 1;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->inBuffer  = self->inBuffer1;
 8000ea4:	f504 4180 	add.w	r1, r4, #16384	@ 0x4000
    self->outBuffer = self->outBuffer1;
 8000ea8:	f504 5000 	add.w	r0, r4, #8192	@ 0x2000
 8000eac:	e9c1 4000 	strd	r4, r0, [r1]
    self->ppState   = 1;
 8000eb0:	721a      	strb	r2, [r3, #8]
    self->bufferReady = true;
 8000eb2:	741a      	strb	r2, [r3, #16]
}
 8000eb4:	bd10      	pop	{r4, pc}
 8000eb6:	bf00      	nop
 8000eb8:	38000000 	.word	0x38000000

08000ebc <pipeInit>:
}

void pipeInit(pipe *self)
{
 8000ebc:	4684      	mov	ip, r0
    self->delayIndex = 0;
    self->bufferReady = false;

    self->adcHalfComplete = pipe_ADC_HalfComplete;
    self->adcComplete     = pipe_ADC_Complete;
    self->updateDelayBuffer = pipe_updateDelayBuffer;
 8000ebe:	4811      	ldr	r0, [pc, #68]	@ (8000f04 <pipeInit+0x48>)
    self->ppState   = 0;
 8000ec0:	2100      	movs	r1, #0
    self->inBuffer  = self->inBuffer2;
 8000ec2:	f50c 4280 	add.w	r2, ip, #16384	@ 0x4000
    self->ppState   = 0;
 8000ec6:	f50c 4370 	add.w	r3, ip, #61440	@ 0xf000
{
 8000eca:	b470      	push	{r4, r5, r6}
    self->inBuffer  = self->inBuffer2;
 8000ecc:	f50c 5680 	add.w	r6, ip, #4096	@ 0x1000
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8000ed0:	4d0d      	ldr	r5, [pc, #52]	@ (8000f08 <pipeInit+0x4c>)
    self->adcComplete     = pipe_ADC_Complete;
 8000ed2:	4c0e      	ldr	r4, [pc, #56]	@ (8000f0c <pipeInit+0x50>)
    self->inBuffer  = self->inBuffer2;
 8000ed4:	6016      	str	r6, [r2, #0]
    self->outBuffer = self->outBuffer2;
 8000ed6:	f50c 5640 	add.w	r6, ip, #12288	@ 0x3000
 8000eda:	6056      	str	r6, [r2, #4]
    self->updateDACOutput = pipe_updateDACOutput;
 8000edc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f10 <pipeInit+0x54>)
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8000ede:	615d      	str	r5, [r3, #20]
    self->ppState   = 0;
 8000ee0:	7219      	strb	r1, [r3, #8]
    self->adcComplete     = pipe_ADC_Complete;
 8000ee2:	619c      	str	r4, [r3, #24]
    self->delayIndex = 0;
 8000ee4:	60d9      	str	r1, [r3, #12]
    self->bufferReady = false;
 8000ee6:	7419      	strb	r1, [r3, #16]
    self->updateDACOutput = pipe_updateDACOutput;
 8000ee8:	e9c3 0207 	strd	r0, r2, [r3, #28]
    self->getDelayBuffer = pipe_getDelayBuffer;
 8000eec:	4809      	ldr	r0, [pc, #36]	@ (8000f14 <pipeInit+0x58>)
    self->loadProcess = pipe_loadProcess;
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <pipeInit+0x5c>)
 8000ef0:	e9c3 0209 	strd	r0, r2, [r3, #36]	@ 0x24

    for(int i = 0; i < BUFFER_SIZE ; i++) {

    	self->processBuffer[i] = 0;
 8000ef4:	f244 0008 	movw	r0, #16392	@ 0x4008
 8000ef8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000efc:	4460      	add	r0, ip

    }

}
 8000efe:	bc70      	pop	{r4, r5, r6}
    	self->processBuffer[i] = 0;
 8000f00:	f006 be1e 	b.w	8007b40 <memset>
 8000f04:	08000d65 	.word	0x08000d65
 8000f08:	08000e5d 	.word	0x08000e5d
 8000f0c:	08000df5 	.word	0x08000df5
 8000f10:	08000d99 	.word	0x08000d99
 8000f14:	08000d21 	.word	0x08000d21
 8000f18:	08000d51 	.word	0x08000d51

08000f1c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <HAL_MspInit+0x20>)
{
 8000f1e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f20:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f24:	f042 0202 	orr.w	r2, r2, #2
 8000f28:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f38:	b002      	add	sp, #8
 8000f3a:	4770      	bx	lr
 8000f3c:	58024400 	.word	0x58024400

08000f40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f40:	b570      	push	{r4, r5, r6, lr}
 8000f42:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	2100      	movs	r1, #0
{
 8000f46:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	22c0      	movs	r2, #192	@ 0xc0
 8000f4a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	9106      	str	r1, [sp, #24]
 8000f4e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000f52:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f56:	f006 fdf3 	bl	8007b40 <memset>
  if(hadc->Instance==ADC1)
 8000f5a:	4b31      	ldr	r3, [pc, #196]	@ (8001020 <HAL_ADC_MspInit+0xe0>)
 8000f5c:	6822      	ldr	r2, [r4, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d001      	beq.n	8000f66 <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f62:	b038      	add	sp, #224	@ 0xe0
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000f72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f76:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f78:	f003 fef0 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d148      	bne.n	8001012 <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f80:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA1_Stream0;
 8000f86:	4d28      	ldr	r5, [pc, #160]	@ (8001028 <HAL_ADC_MspInit+0xe8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f88:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000f8c:	f042 0220 	orr.w	r2, r2, #32
 8000f90:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000f94:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000f98:	f002 0220 	and.w	r2, r2, #32
 8000f9c:	9200      	str	r2, [sp, #0]
 8000f9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fa4:	f042 0201 	orr.w	r2, r2, #1
 8000fa8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fac:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fba:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	481b      	ldr	r0, [pc, #108]	@ (800102c <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f002 fe1c 	bl	8003c00 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8000fc8:	4a19      	ldr	r2, [pc, #100]	@ (8001030 <HAL_ADC_MspInit+0xf0>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fca:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fcc:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fce:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fd0:	e885 004c 	stmia.w	r5, {r2, r3, r6}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	e9c5 6203 	strd	r6, r2, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe0:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fe2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fea:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000fee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ff2:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ff4:	f001 fe2e 	bl	8002c54 <HAL_DMA_Init>
 8000ff8:	b970      	cbnz	r0, 8001018 <HAL_ADC_MspInit+0xd8>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ffe:	64e5      	str	r5, [r4, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001000:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001002:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001004:	f001 fade 	bl	80025c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001008:	2012      	movs	r0, #18
 800100a:	f001 fb17 	bl	800263c <HAL_NVIC_EnableIRQ>
}
 800100e:	b038      	add	sp, #224	@ 0xe0
 8001010:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001012:	f7ff fc57 	bl	80008c4 <Error_Handler>
 8001016:	e7b3      	b.n	8000f80 <HAL_ADC_MspInit+0x40>
      Error_Handler();
 8001018:	f7ff fc54 	bl	80008c4 <Error_Handler>
 800101c:	e7ed      	b.n	8000ffa <HAL_ADC_MspInit+0xba>
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000
 8001024:	58024400 	.word	0x58024400
 8001028:	240151fc 	.word	0x240151fc
 800102c:	58020000 	.word	0x58020000
 8001030:	40020010 	.word	0x40020010

08001034 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8001034:	4b2c      	ldr	r3, [pc, #176]	@ (80010e8 <HAL_DAC_MspInit+0xb4>)
 8001036:	6802      	ldr	r2, [r0, #0]
{
 8001038:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 800103a:	429a      	cmp	r2, r3
{
 800103c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f04f 0400 	mov.w	r4, #0
 8001042:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001046:	9404      	str	r4, [sp, #16]
 8001048:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 800104c:	d001      	beq.n	8001052 <HAL_DAC_MspInit+0x1e>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800104e:	b008      	add	sp, #32
 8001050:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001052:	4b26      	ldr	r3, [pc, #152]	@ (80010ec <HAL_DAC_MspInit+0xb8>)
 8001054:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8001058:	4e25      	ldr	r6, [pc, #148]	@ (80010f0 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 800105a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800105e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001062:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001066:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800106a:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 800106e:	9200      	str	r2, [sp, #0]
 8001070:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800107e:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800108a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	4819      	ldr	r0, [pc, #100]	@ (80010f4 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001090:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f002 fdb4 	bl	8003c00 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8001098:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800109a:	2343      	movs	r3, #67	@ 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800109c:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800109e:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80010a0:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010a2:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80010a4:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a8:	2240      	movs	r2, #64	@ 0x40
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ae:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010b4:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ba:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80010be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c2:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80010c4:	f001 fdc6 	bl	8002c54 <HAL_DMA_Init>
 80010c8:	b958      	cbnz	r0, 80010e2 <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80010cc:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010ce:	2036      	movs	r0, #54	@ 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80010d0:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010d2:	4611      	mov	r1, r2
 80010d4:	f001 fa76 	bl	80025c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010d8:	2036      	movs	r0, #54	@ 0x36
 80010da:	f001 faaf 	bl	800263c <HAL_NVIC_EnableIRQ>
}
 80010de:	b008      	add	sp, #32
 80010e0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80010e2:	f7ff fbef 	bl	80008c4 <Error_Handler>
 80010e6:	e7f0      	b.n	80010ca <HAL_DAC_MspInit+0x96>
 80010e8:	40007400 	.word	0x40007400
 80010ec:	58024400 	.word	0x58024400
 80010f0:	24015170 	.word	0x24015170
 80010f4:	58020000 	.word	0x58020000
 80010f8:	40020028 	.word	0x40020028

080010fc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_TIM_Base_MspInit+0x2c>)
 80010fe:	6802      	ldr	r2, [r0, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d000      	beq.n	8001106 <HAL_TIM_Base_MspInit+0xa>
 8001104:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_TIM_Base_MspInit+0x30>)
{
 8001108:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 800110a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800110e:	f042 0202 	orr.w	r2, r2, #2
 8001112:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001122:	b002      	add	sp, #8
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40010400 	.word	0x40010400
 800112c:	58024400 	.word	0x58024400

08001130 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001130:	e7fe      	b.n	8001130 <NMI_Handler>
 8001132:	bf00      	nop

08001134 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <HardFault_Handler>
 8001136:	bf00      	nop

08001138 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler>
 800113a:	bf00      	nop

0800113c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <BusFault_Handler>
 800113e:	bf00      	nop

08001140 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler>
 8001142:	bf00      	nop

08001144 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001150:	f000 bade 	b.w	8001710 <HAL_IncTick>

08001154 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001154:	4801      	ldr	r0, [pc, #4]	@ (800115c <DMA1_Stream0_IRQHandler+0x8>)
 8001156:	f002 bb41 	b.w	80037dc <HAL_DMA_IRQHandler>
 800115a:	bf00      	nop
 800115c:	240151fc 	.word	0x240151fc

08001160 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001160:	4801      	ldr	r0, [pc, #4]	@ (8001168 <DMA1_Stream1_IRQHandler+0x8>)
 8001162:	f002 bb3b 	b.w	80037dc <HAL_DMA_IRQHandler>
 8001166:	bf00      	nop
 8001168:	24015170 	.word	0x24015170

0800116c <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800116c:	4801      	ldr	r0, [pc, #4]	@ (8001174 <ADC_IRQHandler+0x8>)
 800116e:	f000 baf1 	b.w	8001754 <HAL_ADC_IRQHandler>
 8001172:	bf00      	nop
 8001174:	24015274 	.word	0x24015274

08001178 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001178:	4801      	ldr	r0, [pc, #4]	@ (8001180 <TIM6_DAC_IRQHandler+0x8>)
 800117a:	f001 bb83 	b.w	8002884 <HAL_DAC_IRQHandler>
 800117e:	bf00      	nop
 8001180:	240151e8 	.word	0x240151e8

08001184 <supro_init_f32>:
    1.99907439945f,     /* -(-1.9990744) */
   -0.99907482762f      /* -( 0.99907483) */
};

void supro_init_f32()
{
 8001184:	b510      	push	{r4, lr}

	//arm_fir_init_f32(&preamp_fir_5Hz_lowpass, NUM_TAPS, (float32_t *)&firCoeffs32[0], &preamp_firState_f32[0], (uint32_t)BLOCK_SIZE);
	//arm_fir_init_f32(&poweramp_fir_5Hz_lowpass, NUM_TAPS, (float32_t *)&firCoeffs32[0], &poweramp_firState_f32[0], (uint32_t)BLOCK_SIZE);
    arm_biquad_cascade_df1_init_f32(&preampLP,  LP_STAGES,
 8001186:	4c15      	ldr	r4, [pc, #84]	@ (80011dc <supro_init_f32+0x58>)
{
 8001188:	b082      	sub	sp, #8
    arm_biquad_cascade_df1_init_f32(&preampLP,  LP_STAGES,
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <supro_init_f32+0x5c>)
 800118c:	2101      	movs	r1, #1
 800118e:	4622      	mov	r2, r4
 8001190:	4814      	ldr	r0, [pc, #80]	@ (80011e4 <supro_init_f32+0x60>)
 8001192:	f006 f823 	bl	80071dc <arm_biquad_cascade_df1_init_f32>
                                    (float32_t *)LP5Hz_Biquad,
                                    preampLP_State);
    arm_biquad_cascade_df1_init_f32(&powerampLP, LP_STAGES,
 8001196:	4622      	mov	r2, r4
                                    (float32_t *)LP5Hz_Biquad,
                                    powerampLP_State);

	arm_fir_init_f32(&h1_fir_f32, h1_fir_LEN, (float32_t *)&h1_fir_coeffs[0], &h1_fir[0], (uint32_t)BLOCK_SIZE);
 8001198:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    arm_biquad_cascade_df1_init_f32(&powerampLP, LP_STAGES,
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <supro_init_f32+0x64>)
 800119e:	2101      	movs	r1, #1
 80011a0:	4812      	ldr	r0, [pc, #72]	@ (80011ec <supro_init_f32+0x68>)
 80011a2:	f006 f81b 	bl	80071dc <arm_biquad_cascade_df1_init_f32>
	arm_fir_init_f32(&h1_fir_f32, h1_fir_LEN, (float32_t *)&h1_fir_coeffs[0], &h1_fir[0], (uint32_t)BLOCK_SIZE);
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <supro_init_f32+0x6c>)
 80011a8:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <supro_init_f32+0x70>)
 80011aa:	f240 2159 	movw	r1, #601	@ 0x259
 80011ae:	4812      	ldr	r0, [pc, #72]	@ (80011f8 <supro_init_f32+0x74>)
 80011b0:	9400      	str	r4, [sp, #0]
 80011b2:	f006 f801 	bl	80071b8 <arm_fir_init_f32>
	arm_fir_init_f32(&h2_fir_f32, h2_fir_LEN, (float32_t *)&h2_fir_coeffs[0], &h2_fir[0], (uint32_t)BLOCK_SIZE);
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <supro_init_f32+0x78>)
 80011b8:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <supro_init_f32+0x7c>)
 80011ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011be:	4811      	ldr	r0, [pc, #68]	@ (8001204 <supro_init_f32+0x80>)
 80011c0:	9400      	str	r4, [sp, #0]
 80011c2:	f005 fff9 	bl	80071b8 <arm_fir_init_f32>
	arm_fir_init_f32(&h3_fir_f32, h3_fir_LEN, (float32_t *)&h3_fir_coeffs[0], &h3_fir[0], (uint32_t)BLOCK_SIZE);
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <supro_init_f32+0x84>)
 80011c8:	4a10      	ldr	r2, [pc, #64]	@ (800120c <supro_init_f32+0x88>)
 80011ca:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80011ce:	4810      	ldr	r0, [pc, #64]	@ (8001210 <supro_init_f32+0x8c>)
 80011d0:	9400      	str	r4, [sp, #0]
 80011d2:	f005 fff1 	bl	80071b8 <arm_fir_init_f32>

}
 80011d6:	b002      	add	sp, #8
 80011d8:	bd10      	pop	{r4, pc}
 80011da:	bf00      	nop
 80011dc:	0800bf40 	.word	0x0800bf40
 80011e0:	20000020 	.word	0x20000020
 80011e4:	24019834 	.word	0x24019834
 80011e8:	20000000 	.word	0x20000000
 80011ec:	24019828 	.word	0x24019828
 80011f0:	24017ea4 	.word	0x24017ea4
 80011f4:	0800cc20 	.word	0x0800cc20
 80011f8:	2401981c 	.word	0x2401981c
 80011fc:	24016aa8 	.word	0x24016aa8
 8001200:	0800c820 	.word	0x0800c820
 8001204:	24019810 	.word	0x24019810
 8001208:	240152d8 	.word	0x240152d8
 800120c:	0800c040 	.word	0x0800c040
 8001210:	24019804 	.word	0x24019804

08001214 <supro_preamp_f32>:


}

void supro_preamp_f32(pipe *p)
{
 8001214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        *gPost = &supro_parameters[SUPRO_P_POST_GAIN_IDX],   // post-gain (p[N+11])
        *gWet  = &supro_parameters[SUPRO_P_BLEND_IDX],    // wet mix
        *bias  = &supro_parameters[SUPRO_P_BIAS_IDX];     // envelope bias (p[N+4])

    /* 1) envelope = sqrt( 2 * LP( x^2 ) ) */
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 8001218:	f244 0808 	movw	r8, #16392	@ 0x4008
{
 800121c:	f5ad 4dc0 	sub.w	sp, sp, #24576	@ 0x6000
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 8001220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001224:	4480      	add	r8, r0
    //arm_fir_f32(&preamp_fir_5Hz_lowpass, temp, envelope, BLOCK_SIZE);
    arm_biquad_cascade_df1_f32(&preampLP, temp, envelope, BLOCK_SIZE);
 8001226:	f50d 5580 	add.w	r5, sp, #4096	@ 0x1000
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 800122a:	466a      	mov	r2, sp
 800122c:	466c      	mov	r4, sp
 800122e:	4641      	mov	r1, r8
 8001230:	4640      	mov	r0, r8
 8001232:	f006 f919 	bl	8007468 <arm_mult_f32>
    arm_biquad_cascade_df1_f32(&preampLP, temp, envelope, BLOCK_SIZE);
 8001236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800123a:	462a      	mov	r2, r5
 800123c:	4669      	mov	r1, sp
 800123e:	483e      	ldr	r0, [pc, #248]	@ (8001338 <supro_preamp_f32+0x124>)
 8001240:	f005 ffda 	bl	80071f8 <arm_biquad_cascade_df1_f32>
    arm_scale_f32(envelope, 2.0f, temp, BLOCK_SIZE);
 8001244:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001248:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800124c:	4669      	mov	r1, sp
 800124e:	4628      	mov	r0, r5
 8001250:	f006 f89e 	bl	8007390 <arm_scale_f32>

    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
        float32_t v = temp[i];
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 8001254:	eddf 6a39 	vldr	s13, [pc, #228]	@ 800133c <supro_preamp_f32+0x128>
 8001258:	462b      	mov	r3, r5
        float32_t v = temp[i];
 800125a:	ecf4 7a01 	vldmia	r4!, {s15}
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 800125e:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8001262:	eeb1 7ae7 	vsqrt.f32	s14, s15
    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
 8001266:	42ac      	cmp	r4, r5
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 8001268:	eca3 7a01 	vstmia	r3!, {s14}
    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
 800126c:	d1f5      	bne.n	800125a <supro_preamp_f32+0x46>
    }

    /* 2) pre-gain */
    arm_scale_f32(p->processBuffer, *gPre, xpre, BLOCK_SIZE);
 800126e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001272:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001340 <supro_preamp_f32+0x12c>
 8001276:	4640      	mov	r0, r8
 8001278:	f50d 5100 	add.w	r1, sp, #8192	@ 0x2000
 800127c:	4e31      	ldr	r6, [pc, #196]	@ (8001344 <supro_preamp_f32+0x130>)
 800127e:	f006 f887 	bl	8007390 <arm_scale_f32>

    /* 3) add envelope bias */
    arm_scale_f32(envelope, *bias, temp, BLOCK_SIZE);
 8001282:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8001348 <supro_preamp_f32+0x134>
 8001286:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800128a:	4620      	mov	r0, r4
 800128c:	4669      	mov	r1, sp
 800128e:	f006 f87f 	bl	8007390 <arm_scale_f32>
    arm_add_f32(xpre, temp, xmapped, BLOCK_SIZE);
 8001292:	f50d 45a0 	add.w	r5, sp, #20480	@ 0x5000
 8001296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800129a:	4669      	mov	r1, sp
 800129c:	f50d 5240 	add.w	r2, sp, #12288	@ 0x3000
 80012a0:	f50d 5000 	add.w	r0, sp, #8192	@ 0x2000
 80012a4:	f1a6 079c 	sub.w	r7, r6, #156	@ 0x9c
 80012a8:	f006 f924 	bl	80074f4 <arm_add_f32>

    /* 4) Horner polynomial on xmapped */
    arm_scale_f32(xmapped,  a[SUPRO_NUM_A_VALS-1], yMap, BLOCK_SIZE);
 80012ac:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 800134c <supro_preamp_f32+0x138>
 80012b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012b4:	f50d 4180 	add.w	r1, sp, #16384	@ 0x4000
 80012b8:	f50d 5040 	add.w	r0, sp, #12288	@ 0x3000
 80012bc:	f006 f868 	bl	8007390 <arm_scale_f32>
    for (int k = SUPRO_NUM_A_VALS-2; k >= 0; --k) {
        arm_mult_f32(xmapped, yMap, yMap, BLOCK_SIZE);
 80012c0:	f50d 4280 	add.w	r2, sp, #16384	@ 0x4000
 80012c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c8:	f50d 5040 	add.w	r0, sp, #12288	@ 0x3000
 80012cc:	f50d 4480 	add.w	r4, sp, #16384	@ 0x4000
 80012d0:	4611      	mov	r1, r2
 80012d2:	f006 f8c9 	bl	8007468 <arm_mult_f32>
        for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
            yMap[i] += a[k];
 80012d6:	ed36 7a01 	vldmdb	r6!, {s14}
 80012da:	edd4 7a00 	vldr	s15, [r4]
 80012de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012e2:	ece4 7a01 	vstmia	r4!, {s15}
        for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
 80012e6:	42ac      	cmp	r4, r5
 80012e8:	d1f7      	bne.n	80012da <supro_preamp_f32+0xc6>
    for (int k = SUPRO_NUM_A_VALS-2; k >= 0; --k) {
 80012ea:	42be      	cmp	r6, r7
 80012ec:	d1e8      	bne.n	80012c0 <supro_preamp_f32+0xac>
    }

    /* 5) wet/dry mix */
    arm_scale_f32(yMap, *gWet, temp, BLOCK_SIZE);
 80012ee:	f50d 4080 	add.w	r0, sp, #16384	@ 0x4000
 80012f2:	4669      	mov	r1, sp
 80012f4:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001350 <supro_preamp_f32+0x13c>
 80012f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012fc:	f006 f848 	bl	8007390 <arm_scale_f32>
    arm_scale_f32(xpre, 1.0f - *gWet, yDry, BLOCK_SIZE);
 8001300:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001354 <supro_preamp_f32+0x140>
 8001304:	f50d 5000 	add.w	r0, sp, #8192	@ 0x2000
 8001308:	4621      	mov	r1, r4
 800130a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800130e:	f006 f83f 	bl	8007390 <arm_scale_f32>
    arm_add_f32(temp, yDry, temp, BLOCK_SIZE);
 8001312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001316:	466a      	mov	r2, sp
 8001318:	4621      	mov	r1, r4
 800131a:	4668      	mov	r0, sp
 800131c:	f006 f8ea 	bl	80074f4 <arm_add_f32>

    /* 6) post-gain */
    arm_scale_f32(temp, *gPost, p->processBuffer, BLOCK_SIZE);
 8001320:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001324:	4641      	mov	r1, r8
 8001326:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001358 <supro_preamp_f32+0x144>
 800132a:	4668      	mov	r0, sp
 800132c:	f006 f830 	bl	8007390 <arm_scale_f32>


}
 8001330:	f50d 4dc0 	add.w	sp, sp, #24576	@ 0x6000
 8001334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001338:	24019834 	.word	0x24019834
 800133c:	00000000 	.word	0x00000000
 8001340:	3f710983 	.word	0x3f710983
 8001344:	0800bff0 	.word	0x0800bff0
 8001348:	3f186130 	.word	0x3f186130
 800134c:	d267d638 	.word	0xd267d638
 8001350:	3f0d61b4 	.word	0x3f0d61b4
 8001354:	3ee53c98 	.word	0x3ee53c98
 8001358:	3f7db881 	.word	0x3f7db881

0800135c <supro_poweramp_f32>:


void supro_poweramp_f32(pipe *p)
{
 800135c:	b570      	push	{r4, r5, r6, lr}
	//arm_scale_f32(p->processBuffer, 0.1, p->processBuffer, BLOCK_SIZE); // temporary scaling until SPENCER corrects pipe scaling

    float32_t temp[BLOCK_SIZE], envelope[BLOCK_SIZE];

    /* 1) envelope = sqrt( 2 * LP( x^2 ) ) */
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 800135e:	f244 0408 	movw	r4, #16392	@ 0x4008
 8001362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
{
 8001366:	ed2d 8b0a 	vpush	{d8-d12}
 800136a:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 800136e:	4404      	add	r4, r0
    //arm_fir_f32(&poweramp_fir_5Hz_lowpass, temp, envelope, BLOCK_SIZE);
    arm_biquad_cascade_df1_f32(&powerampLP, temp, envelope, BLOCK_SIZE);
 8001370:	f50d 5680 	add.w	r6, sp, #4096	@ 0x1000
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 8001374:	466a      	mov	r2, sp
 8001376:	4621      	mov	r1, r4
 8001378:	4620      	mov	r0, r4
 800137a:	f006 f875 	bl	8007468 <arm_mult_f32>
    arm_biquad_cascade_df1_f32(&powerampLP, temp, envelope, BLOCK_SIZE);
 800137e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001382:	4632      	mov	r2, r6
 8001384:	4669      	mov	r1, sp
 8001386:	4839      	ldr	r0, [pc, #228]	@ (800146c <supro_poweramp_f32+0x110>)
 8001388:	4635      	mov	r5, r6
 800138a:	f005 ff35 	bl	80071f8 <arm_biquad_cascade_df1_f32>
    arm_scale_f32(envelope, 2.0f, temp, BLOCK_SIZE);
 800138e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001392:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001396:	4669      	mov	r1, sp
 8001398:	4630      	mov	r0, r6
 800139a:	f005 fff9 	bl	8007390 <arm_scale_f32>

    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
        float32_t v = temp[i];
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 800139e:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001470 <supro_poweramp_f32+0x114>
 80013a2:	466b      	mov	r3, sp
    arm_scale_f32(envelope, 2.0f, temp, BLOCK_SIZE);
 80013a4:	4632      	mov	r2, r6
        float32_t v = temp[i];
 80013a6:	ecf3 7a01 	vldmia	r3!, {s15}
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 80013aa:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80013ae:	eeb1 7ae7 	vsqrt.f32	s14, s15
    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
 80013b2:	429e      	cmp	r6, r3
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 80013b4:	eca2 7a01 	vstmia	r2!, {s14}
    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
 80013b8:	d1f5      	bne.n	80013a6 <supro_poweramp_f32+0x4a>
 80013ba:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
	 * 3. Per-sample processing loop
	 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
	for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
	{
		/* 3.1 Feed-forward bias & pre-gain (MATLAB: xBias, xPre) */
		float32_t xBias = p->processBuffer[i] - (*gBias) * envelope[i];
 80013be:	eddf 9a2d 	vldr	s19, [pc, #180]	@ 8001474 <supro_poweramp_f32+0x118>
		float32_t xPre  = (*gPre) * xBias;              /* dry path copy */
 80013c2:	ed9f 9a2d 	vldr	s18, [pc, #180]	@ 8001478 <supro_poweramp_f32+0x11c>
		float32_t m;                                    /* shaped sample */

		/* 3.2 Piece-wise tanh mapping (Eq. 6) */
		if (xPre > kP_val) {                    /* Region A */
 80013c6:	eddf 8a2d 	vldr	s17, [pc, #180]	@ 800147c <supro_poweramp_f32+0x120>
			m = tanh_kP - coeffP * tanhf(gP_val * xPre - kP_val);
		} else if (xPre >= -kN_val) {           /* Region B */
 80013ca:	ed9f ba2d 	vldr	s22, [pc, #180]	@ 8001480 <supro_poweramp_f32+0x124>
			m = tanhf(xPre);
		} else {                                /* Region C */
			m = -tanh_kN - coeffN * tanhf(gN_val * xPre + kN_val);
 80013ce:	eddf aa2d 	vldr	s21, [pc, #180]	@ 8001484 <supro_poweramp_f32+0x128>
 80013d2:	ed9f aa2d 	vldr	s20, [pc, #180]	@ 8001488 <supro_poweramp_f32+0x12c>
 80013d6:	ed9f ca2d 	vldr	s24, [pc, #180]	@ 800148c <supro_poweramp_f32+0x130>
 80013da:	eddf ba2d 	vldr	s23, [pc, #180]	@ 8001490 <supro_poweramp_f32+0x134>
			m = tanh_kP - coeffP * tanhf(gP_val * xPre - kP_val);
 80013de:	ed9f 8a2d 	vldr	s16, [pc, #180]	@ 8001494 <supro_poweramp_f32+0x138>
 80013e2:	e00f      	b.n	8001404 <supro_poweramp_f32+0xa8>
 80013e4:	f006 fbde 	bl	8007ba4 <tanhf>
 80013e8:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001498 <supro_poweramp_f32+0x13c>
 80013ec:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800149c <supro_poweramp_f32+0x140>
 80013f0:	eee0 7a07 	vfma.f32	s15, s0, s14
		}

		/* 3.3 Wet/dry blend then post-gain */
		//m = (*gWet) * m + (1.0f - *gWet) * xPre;   /* yMap in MATLAB   */
		p->processBuffer[i] = (*gPost) * m;        /* y output         */
 80013f4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80014a0 <supro_poweramp_f32+0x144>
	for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
 80013f8:	42b5      	cmp	r5, r6
		p->processBuffer[i] = (*gPost) * m;        /* y output         */
 80013fa:	ee27 0a87 	vmul.f32	s0, s15, s14
 80013fe:	ed04 0a01 	vstr	s0, [r4, #-4]
	for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
 8001402:	d027      	beq.n	8001454 <supro_poweramp_f32+0xf8>
		float32_t xBias = p->processBuffer[i] - (*gBias) * envelope[i];
 8001404:	ecb5 7a01 	vldmia	r5!, {s14}
 8001408:	ecf4 7a01 	vldmia	r4!, {s15}
			m = tanh_kP - coeffP * tanhf(gP_val * xPre - kP_val);
 800140c:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80014a4 <supro_poweramp_f32+0x148>
		float32_t xBias = p->processBuffer[i] - (*gBias) * envelope[i];
 8001410:	eee7 7a69 	vfms.f32	s15, s14, s19
		if (xPre > kP_val) {                    /* Region A */
 8001414:	eef4 7ae8 	vcmpe.f32	s15, s17
		float32_t xPre  = (*gPre) * xBias;              /* dry path copy */
 8001418:	ee27 7a89 	vmul.f32	s14, s15, s18
		if (xPre > kP_val) {                    /* Region A */
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			m = tanh_kP - coeffP * tanhf(gP_val * xPre - kP_val);
 8001420:	eea7 0a48 	vfms.f32	s0, s14, s16
		if (xPre > kP_val) {                    /* Region A */
 8001424:	dcde      	bgt.n	80013e4 <supro_poweramp_f32+0x88>
		} else if (xPre >= -kN_val) {           /* Region B */
 8001426:	eef4 7acb 	vcmpe.f32	s15, s22
			m = -tanh_kN - coeffN * tanhf(gN_val * xPre + kN_val);
 800142a:	eeb0 0a4a 	vmov.f32	s0, s20
		} else if (xPre >= -kN_val) {           /* Region B */
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			m = -tanh_kN - coeffN * tanhf(gN_val * xPre + kN_val);
 8001432:	eea7 0a2a 	vfma.f32	s0, s14, s21
		} else if (xPre >= -kN_val) {           /* Region B */
 8001436:	db12      	blt.n	800145e <supro_poweramp_f32+0x102>
			m = tanhf(xPre);
 8001438:	eeb0 0a47 	vmov.f32	s0, s14
 800143c:	f006 fbb2 	bl	8007ba4 <tanhf>
 8001440:	eef0 7a40 	vmov.f32	s15, s0
		p->processBuffer[i] = (*gPost) * m;        /* y output         */
 8001444:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80014a0 <supro_poweramp_f32+0x144>
	for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
 8001448:	42b5      	cmp	r5, r6
		p->processBuffer[i] = (*gPost) * m;        /* y output         */
 800144a:	ee27 0a87 	vmul.f32	s0, s15, s14
 800144e:	ed04 0a01 	vstr	s0, [r4, #-4]
	for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
 8001452:	d1d7      	bne.n	8001404 <supro_poweramp_f32+0xa8>
	}


}
 8001454:	f50d 5d00 	add.w	sp, sp, #8192	@ 0x2000
 8001458:	ecbd 8b0a 	vpop	{d8-d12}
 800145c:	bd70      	pop	{r4, r5, r6, pc}
			m = -tanh_kN - coeffN * tanhf(gN_val * xPre + kN_val);
 800145e:	f006 fba1 	bl	8007ba4 <tanhf>
 8001462:	eef0 7a6b 	vmov.f32	s15, s23
 8001466:	eee0 7a4c 	vfms.f32	s15, s0, s24
 800146a:	e7c3      	b.n	80013f4 <supro_poweramp_f32+0x98>
 800146c:	24019828 	.word	0x24019828
 8001470:	00000000 	.word	0x00000000
 8001474:	3f1ed3f6 	.word	0x3f1ed3f6
 8001478:	3f8e9370 	.word	0x3f8e9370
 800147c:	3f64018b 	.word	0x3f64018b
 8001480:	bf655493 	.word	0xbf655493
 8001484:	3f7fa057 	.word	0x3f7fa057
 8001488:	3f7f71fb 	.word	0x3f7f71fb
 800148c:	bed80d82 	.word	0xbed80d82
 8001490:	bf42bc17 	.word	0xbf42bc17
 8001494:	3f806a2a 	.word	0x3f806a2a
 8001498:	bed8ee5b 	.word	0xbed8ee5b
 800149c:	3f421c45 	.word	0x3f421c45
 80014a0:	40d6c29a 	.word	0x40d6c29a
 80014a4:	3f7df857 	.word	0x3f7df857

080014a8 <supro_process>:
{
 80014a8:	b570      	push	{r4, r5, r6, lr}
	arm_scale_f32(p->processBuffer, 0.1, p->processBuffer, BUFFER_SIZE);
 80014aa:	f244 0508 	movw	r5, #16392	@ 0x4008
{
 80014ae:	b082      	sub	sp, #8
	arm_scale_f32(p->processBuffer, 0.1, p->processBuffer, BUFFER_SIZE);
 80014b0:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001518 <supro_process+0x70>
{
 80014b4:	4604      	mov	r4, r0
	arm_scale_f32(p->processBuffer, 0.1, p->processBuffer, BUFFER_SIZE);
 80014b6:	4405      	add	r5, r0
 80014b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
	partitioned_fir_convolution_fft(p, supro_sim.fir1, state, fftOut, zeropad);
 80014bc:	4e17      	ldr	r6, [pc, #92]	@ (800151c <supro_process+0x74>)
	arm_scale_f32(p->processBuffer, 0.1, p->processBuffer, BUFFER_SIZE);
 80014be:	4629      	mov	r1, r5
 80014c0:	4628      	mov	r0, r5
 80014c2:	f005 ff65 	bl	8007390 <arm_scale_f32>
	partitioned_fir_convolution_fft(p, supro_sim.fir1, state, fftOut, zeropad);
 80014c6:	4a16      	ldr	r2, [pc, #88]	@ (8001520 <supro_process+0x78>)
 80014c8:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <supro_process+0x7c>)
 80014ca:	4620      	mov	r0, r4
 80014cc:	9200      	str	r2, [sp, #0]
 80014ce:	4a16      	ldr	r2, [pc, #88]	@ (8001528 <supro_process+0x80>)
 80014d0:	6831      	ldr	r1, [r6, #0]
 80014d2:	f7ff f9f9 	bl	80008c8 <partitioned_fir_convolution_fft>
	supro_preamp_f32(p);
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fe9c 	bl	8001214 <supro_preamp_f32>
	partitioned_fir_convolution_fft(p, supro_sim.fir2, state2, fftOut2, zeropad2);
 80014dc:	4a13      	ldr	r2, [pc, #76]	@ (800152c <supro_process+0x84>)
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <supro_process+0x88>)
 80014e0:	4620      	mov	r0, r4
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	4a13      	ldr	r2, [pc, #76]	@ (8001534 <supro_process+0x8c>)
 80014e6:	6871      	ldr	r1, [r6, #4]
 80014e8:	f7ff f9ee 	bl	80008c8 <partitioned_fir_convolution_fft>
    supro_poweramp_f32(p);
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff ff35 	bl	800135c <supro_poweramp_f32>
	partitioned_fir_convolution_fft(p, supro_sim.fir3, state3, fftOut3, zeropad3);
 80014f2:	4a11      	ldr	r2, [pc, #68]	@ (8001538 <supro_process+0x90>)
 80014f4:	68b1      	ldr	r1, [r6, #8]
 80014f6:	4620      	mov	r0, r4
 80014f8:	9200      	str	r2, [sp, #0]
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <supro_process+0x94>)
 80014fc:	4a10      	ldr	r2, [pc, #64]	@ (8001540 <supro_process+0x98>)
 80014fe:	f7ff f9e3 	bl	80008c8 <partitioned_fir_convolution_fft>
	arm_scale_f32(p->processBuffer, 0.01, p->processBuffer, BUFFER_SIZE);
 8001502:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001506:	4629      	mov	r1, r5
 8001508:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001544 <supro_process+0x9c>
 800150c:	4628      	mov	r0, r5
}
 800150e:	b002      	add	sp, #8
 8001510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	arm_scale_f32(p->processBuffer, 0.01, p->processBuffer, BUFFER_SIZE);
 8001514:	f005 bf3c 	b.w	8007390 <arm_scale_f32>
 8001518:	3dcccccd 	.word	0x3dcccccd
 800151c:	24000038 	.word	0x24000038
 8001520:	20007040 	.word	0x20007040
 8001524:	2401d840 	.word	0x2401d840
 8001528:	20006040 	.word	0x20006040
 800152c:	20004040 	.word	0x20004040
 8001530:	2401b840 	.word	0x2401b840
 8001534:	20003040 	.word	0x20003040
 8001538:	20001040 	.word	0x20001040
 800153c:	24019840 	.word	0x24019840
 8001540:	20000040 	.word	0x20000040
 8001544:	3c23d70a 	.word	0x3c23d70a

08001548 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001548:	4927      	ldr	r1, [pc, #156]	@ (80015e8 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800154a:	4a28      	ldr	r2, [pc, #160]	@ (80015ec <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800154c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8001554:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800155a:	6813      	ldr	r3, [r2, #0]
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	2b06      	cmp	r3, #6
 8001562:	d805      	bhi.n	8001570 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001564:	6813      	ldr	r3, [r2, #0]
 8001566:	f023 030f 	bic.w	r3, r3, #15
 800156a:	f043 0307 	orr.w	r3, r3, #7
 800156e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001570:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001572:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001574:	4a1f      	ldr	r2, [pc, #124]	@ (80015f4 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8001576:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001578:	481c      	ldr	r0, [pc, #112]	@ (80015ec <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800157a:	f041 0101 	orr.w	r1, r1, #1
 800157e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001580:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001582:	6819      	ldr	r1, [r3, #0]
 8001584:	400a      	ands	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001588:	6803      	ldr	r3, [r0, #0]
 800158a:	071b      	lsls	r3, r3, #28
 800158c:	d505      	bpl.n	800159a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800158e:	6803      	ldr	r3, [r0, #0]
 8001590:	f023 030f 	bic.w	r3, r3, #15
 8001594:	f043 0307 	orr.w	r3, r3, #7
 8001598:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <SystemInit+0xa8>)
 800159c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800159e:	4916      	ldr	r1, [pc, #88]	@ (80015f8 <SystemInit+0xb0>)
  RCC->PLLCFGR = 0x01FF0000;
 80015a0:	4816      	ldr	r0, [pc, #88]	@ (80015fc <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 80015a2:	4c17      	ldr	r4, [pc, #92]	@ (8001600 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 80015a4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80015a6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80015a8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80015aa:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80015ac:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80015ae:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015b2:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015b6:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015ba:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015bc:	4811      	ldr	r0, [pc, #68]	@ (8001604 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 80015be:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80015c2:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 80015c4:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015c6:	6803      	ldr	r3, [r0, #0]
 80015c8:	f36f 030f 	bfc	r3, #0, #16
 80015cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015d0:	d203      	bcs.n	80015da <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <SystemInit+0xc0>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <SystemInit+0xc4>)
 80015dc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015e4:	601a      	str	r2, [r3, #0]
}
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	52002000 	.word	0x52002000
 80015f0:	58024400 	.word	0x58024400
 80015f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80015f8:	01010280 	.word	0x01010280
 80015fc:	01ff0000 	.word	0x01ff0000
 8001600:	02020200 	.word	0x02020200
 8001604:	5c001000 	.word	0x5c001000
 8001608:	51008000 	.word	0x51008000
 800160c:	52004000 	.word	0x52004000

08001610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001610:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001648 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001614:	f7ff ff98 	bl	8001548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800161a:	490d      	ldr	r1, [pc, #52]	@ (8001650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001630:	4c0a      	ldr	r4, [pc, #40]	@ (800165c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163e:	f006 fa8d 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001642:	f7fe ff5f 	bl	8000504 <main>
  bx  lr
 8001646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800164c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001650:	240000a8 	.word	0x240000a8
  ldr r2, =_sidata
 8001654:	08020a08 	.word	0x08020a08
  ldr r2, =_sbss
 8001658:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 800165c:	2401f97c 	.word	0x2401f97c

08001660 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC3_IRQHandler>
	...

08001664 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_InitTick+0x40>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b90b      	cbnz	r3, 800166e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800166a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800166c:	4770      	bx	lr
{
 800166e:	b510      	push	{r4, lr}
 8001670:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001672:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001676:	4a0c      	ldr	r2, [pc, #48]	@ (80016a8 <HAL_InitTick+0x44>)
 8001678:	fbb0 f3f3 	udiv	r3, r0, r3
 800167c:	6810      	ldr	r0, [r2, #0]
 800167e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001682:	f000 ffe9 	bl	8002658 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	2c0f      	cmp	r4, #15
 8001688:	d800      	bhi.n	800168c <HAL_InitTick+0x28>
 800168a:	b108      	cbz	r0, 8001690 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800168c:	2001      	movs	r0, #1
}
 800168e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	4621      	mov	r1, r4
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 ff94 	bl	80025c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4b03      	ldr	r3, [pc, #12]	@ (80016ac <HAL_InitTick+0x48>)
 800169e:	2000      	movs	r0, #0
 80016a0:	601c      	str	r4, [r3, #0]
}
 80016a2:	bd10      	pop	{r4, pc}
 80016a4:	24000050 	.word	0x24000050
 80016a8:	2400004c 	.word	0x2400004c
 80016ac:	24000054 	.word	0x24000054

080016b0 <HAL_Init>:
{
 80016b0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b2:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016b4:	4c12      	ldr	r4, [pc, #72]	@ (8001700 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b6:	f000 ff73 	bl	80025a0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016ba:	f003 f82f 	bl	800471c <HAL_RCC_GetSysClockFreq>
 80016be:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <HAL_Init+0x54>)
 80016c0:	4911      	ldr	r1, [pc, #68]	@ (8001708 <HAL_Init+0x58>)
 80016c2:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016c4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016c6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ca:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016ce:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016d0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016d2:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 80016d6:	490d      	ldr	r1, [pc, #52]	@ (800170c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016d8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016dc:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016de:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80016e2:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e4:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016e6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e8:	f7ff ffbc 	bl	8001664 <HAL_InitTick>
 80016ec:	b110      	cbz	r0, 80016f4 <HAL_Init+0x44>
    return HAL_ERROR;
 80016ee:	2401      	movs	r4, #1
}
 80016f0:	4620      	mov	r0, r4
 80016f2:	bd10      	pop	{r4, pc}
 80016f4:	4604      	mov	r4, r0
  HAL_MspInit();
 80016f6:	f7ff fc11 	bl	8000f1c <HAL_MspInit>
}
 80016fa:	4620      	mov	r0, r4
 80016fc:	bd10      	pop	{r4, pc}
 80016fe:	bf00      	nop
 8001700:	24000048 	.word	0x24000048
 8001704:	58024400 	.word	0x58024400
 8001708:	0800d584 	.word	0x0800d584
 800170c:	2400004c 	.word	0x2400004c

08001710 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001710:	4a03      	ldr	r2, [pc, #12]	@ (8001720 <HAL_IncTick+0x10>)
 8001712:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <HAL_IncTick+0x14>)
 8001714:	6811      	ldr	r1, [r2, #0]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	440b      	add	r3, r1
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2401f840 	.word	0x2401f840
 8001724:	24000050 	.word	0x24000050

08001728 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001728:	4b01      	ldr	r3, [pc, #4]	@ (8001730 <HAL_GetTick+0x8>)
 800172a:	6818      	ldr	r0, [r3, #0]
}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	2401f840 	.word	0x2401f840

08001734 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001734:	4b01      	ldr	r3, [pc, #4]	@ (800173c <HAL_GetREVID+0x8>)
 8001736:	6818      	ldr	r0, [r3, #0]
}
 8001738:	0c00      	lsrs	r0, r0, #16
 800173a:	4770      	bx	lr
 800173c:	5c001000 	.word	0x5c001000

08001740 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001740:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001742:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001744:	f7fe fe28 	bl	8000398 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001748:	bd08      	pop	{r3, pc}
 800174a:	bf00      	nop

0800174c <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop

08001754 <HAL_ADC_IRQHandler>:
{
 8001754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001756:	4a8e      	ldr	r2, [pc, #568]	@ (8001990 <HAL_ADC_IRQHandler+0x23c>)
{
 8001758:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800175a:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800175c:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 800175e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001760:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001762:	f000 8095 	beq.w	8001890 <HAL_ADC_IRQHandler+0x13c>
 8001766:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800176a:	4293      	cmp	r3, r2
 800176c:	f000 8090 	beq.w	8001890 <HAL_ADC_IRQHandler+0x13c>
 8001770:	4a88      	ldr	r2, [pc, #544]	@ (8001994 <HAL_ADC_IRQHandler+0x240>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001772:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001774:	07a9      	lsls	r1, r5, #30
 8001776:	f007 071f 	and.w	r7, r7, #31
 800177a:	d502      	bpl.n	8001782 <HAL_ADC_IRQHandler+0x2e>
 800177c:	07b2      	lsls	r2, r6, #30
 800177e:	f100 80aa 	bmi.w	80018d6 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001782:	0769      	lsls	r1, r5, #29
 8001784:	d579      	bpl.n	800187a <HAL_ADC_IRQHandler+0x126>
 8001786:	0772      	lsls	r2, r6, #29
 8001788:	d577      	bpl.n	800187a <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800178a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800178c:	06d2      	lsls	r2, r2, #27
 800178e:	d403      	bmi.n	8001798 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001790:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001796:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800179e:	d11c      	bne.n	80017da <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017a0:	4a7d      	ldr	r2, [pc, #500]	@ (8001998 <HAL_ADC_IRQHandler+0x244>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	f000 80e7 	beq.w	8001976 <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017a8:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80017aa:	0491      	lsls	r1, r2, #18
 80017ac:	d415      	bmi.n	80017da <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	0712      	lsls	r2, r2, #28
 80017b2:	d512      	bpl.n	80017da <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	0750      	lsls	r0, r2, #29
 80017b8:	f100 80f2 	bmi.w	80019a0 <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	f022 020c 	bic.w	r2, r2, #12
 80017c2:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017ca:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017ce:	04d9      	lsls	r1, r3, #19
 80017d0:	d403      	bmi.n	80017da <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80017da:	4620      	mov	r0, r4
 80017dc:	f7fe fdfc 	bl	80003d8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017e6:	06aa      	lsls	r2, r5, #26
 80017e8:	d54d      	bpl.n	8001886 <HAL_ADC_IRQHandler+0x132>
 80017ea:	06b0      	lsls	r0, r6, #26
 80017ec:	d54b      	bpl.n	8001886 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80017f0:	06d0      	lsls	r0, r2, #27
 80017f2:	d403      	bmi.n	80017fc <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80017f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80017fa:	6562      	str	r2, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017fc:	4966      	ldr	r1, [pc, #408]	@ (8001998 <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80017fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001800:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001802:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001804:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
 8001808:	d073      	beq.n	80018f2 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800180a:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800180c:	b9d2      	cbnz	r2, 8001844 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800180e:	018a      	lsls	r2, r1, #6
 8001810:	f100 80a9 	bmi.w	8001966 <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	0650      	lsls	r0, r2, #25
 8001818:	d514      	bpl.n	8001844 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800181a:	0289      	lsls	r1, r1, #10
 800181c:	d412      	bmi.n	8001844 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	0712      	lsls	r2, r2, #28
 8001822:	f100 80c8 	bmi.w	80019b6 <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800182c:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800182e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001834:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001836:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001838:	05d8      	lsls	r0, r3, #23
 800183a:	d403      	bmi.n	8001844 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800183c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001844:	4620      	mov	r0, r4
 8001846:	f000 fe3f 	bl	80024c8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	2260      	movs	r2, #96	@ 0x60
 800184e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001850:	0629      	lsls	r1, r5, #24
 8001852:	d501      	bpl.n	8001858 <HAL_ADC_IRQHandler+0x104>
 8001854:	0632      	lsls	r2, r6, #24
 8001856:	d45f      	bmi.n	8001918 <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001858:	05e8      	lsls	r0, r5, #23
 800185a:	d501      	bpl.n	8001860 <HAL_ADC_IRQHandler+0x10c>
 800185c:	05f1      	lsls	r1, r6, #23
 800185e:	d466      	bmi.n	800192e <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001860:	05aa      	lsls	r2, r5, #22
 8001862:	d501      	bpl.n	8001868 <HAL_ADC_IRQHandler+0x114>
 8001864:	05b0      	lsls	r0, r6, #22
 8001866:	d44b      	bmi.n	8001900 <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001868:	06e9      	lsls	r1, r5, #27
 800186a:	d501      	bpl.n	8001870 <HAL_ADC_IRQHandler+0x11c>
 800186c:	06f2      	lsls	r2, r6, #27
 800186e:	d411      	bmi.n	8001894 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001870:	0569      	lsls	r1, r5, #21
 8001872:	d501      	bpl.n	8001878 <HAL_ADC_IRQHandler+0x124>
 8001874:	0572      	lsls	r2, r6, #21
 8001876:	d466      	bmi.n	8001946 <HAL_ADC_IRQHandler+0x1f2>
}
 8001878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800187a:	0728      	lsls	r0, r5, #28
 800187c:	d5b3      	bpl.n	80017e6 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800187e:	0731      	lsls	r1, r6, #28
 8001880:	d483      	bmi.n	800178a <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001882:	06aa      	lsls	r2, r5, #26
 8001884:	d4b1      	bmi.n	80017ea <HAL_ADC_IRQHandler+0x96>
 8001886:	0669      	lsls	r1, r5, #25
 8001888:	d5e2      	bpl.n	8001850 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800188a:	0672      	lsls	r2, r6, #25
 800188c:	d5e0      	bpl.n	8001850 <HAL_ADC_IRQHandler+0xfc>
 800188e:	e7ae      	b.n	80017ee <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001890:	4a42      	ldr	r2, [pc, #264]	@ (800199c <HAL_ADC_IRQHandler+0x248>)
 8001892:	e76e      	b.n	8001772 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001894:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001896:	b17a      	cbz	r2, 80018b8 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001898:	2f00      	cmp	r7, #0
 800189a:	d075      	beq.n	8001988 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800189c:	4a3c      	ldr	r2, [pc, #240]	@ (8001990 <HAL_ADC_IRQHandler+0x23c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	f000 8087 	beq.w	80019b2 <HAL_ADC_IRQHandler+0x25e>
 80018a4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80018a8:	4293      	cmp	r3, r2
 80018aa:	f000 8082 	beq.w	80019b2 <HAL_ADC_IRQHandler+0x25e>
 80018ae:	4a39      	ldr	r2, [pc, #228]	@ (8001994 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80018b0:	6892      	ldr	r2, [r2, #8]
 80018b2:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 80018b6:	d00b      	beq.n	80018d0 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_ADC_ErrorCallback(hadc);
 80018ba:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c0:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 80018ca:	f7ff ff41 	bl	8001750 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	2210      	movs	r2, #16
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e7cc      	b.n	8001870 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018d8:	06d8      	lsls	r0, r3, #27
 80018da:	d403      	bmi.n	80018e4 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80018dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018e2:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80018e4:	4620      	mov	r0, r4
 80018e6:	f000 fdf7 	bl	80024d8 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	2202      	movs	r2, #2
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e747      	b.n	8001782 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018f2:	21c1      	movs	r1, #193	@ 0xc1
 80018f4:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80018f6:	07c9      	lsls	r1, r1, #31
 80018f8:	d487      	bmi.n	800180a <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018fa:	4925      	ldr	r1, [pc, #148]	@ (8001990 <HAL_ADC_IRQHandler+0x23c>)
 80018fc:	68c9      	ldr	r1, [r1, #12]
 80018fe:	e785      	b.n	800180c <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001900:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001902:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001908:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800190a:	f000 fde3 	bl	80024d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e7a7      	b.n	8001868 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001918:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800191a:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800191c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001920:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001922:	f7ff ff13 	bl	800174c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	2280      	movs	r2, #128	@ 0x80
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e794      	b.n	8001858 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800192e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001930:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001936:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001938:	f000 fdca 	bl	80024d0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800193c:	6823      	ldr	r3, [r4, #0]
 800193e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e78c      	b.n	8001860 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001946:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001948:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800194c:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800194e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001952:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001954:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001956:	f042 0208 	orr.w	r2, r2, #8
 800195a:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800195c:	6019      	str	r1, [r3, #0]
}
 800195e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001962:	f000 bdb3 	b.w	80024cc <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001966:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800196a:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800196e:	4302      	orrs	r2, r0
 8001970:	f47f af68 	bne.w	8001844 <HAL_ADC_IRQHandler+0xf0>
 8001974:	e74e      	b.n	8001814 <HAL_ADC_IRQHandler+0xc0>
 8001976:	f240 2221 	movw	r2, #545	@ 0x221
 800197a:	40fa      	lsrs	r2, r7
 800197c:	07d0      	lsls	r0, r2, #31
 800197e:	f53f af13 	bmi.w	80017a8 <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001982:	4a03      	ldr	r2, [pc, #12]	@ (8001990 <HAL_ADC_IRQHandler+0x23c>)
 8001984:	68d2      	ldr	r2, [r2, #12]
 8001986:	e710      	b.n	80017aa <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	0790      	lsls	r0, r2, #30
 800198c:	d0a0      	beq.n	80018d0 <HAL_ADC_IRQHandler+0x17c>
 800198e:	e793      	b.n	80018b8 <HAL_ADC_IRQHandler+0x164>
 8001990:	40022000 	.word	0x40022000
 8001994:	58026300 	.word	0x58026300
 8001998:	40022100 	.word	0x40022100
 800199c:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80019a2:	f043 0310 	orr.w	r3, r3, #16
 80019a6:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	65a3      	str	r3, [r4, #88]	@ 0x58
 80019b0:	e713      	b.n	80017da <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019b2:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <HAL_ADC_IRQHandler+0x274>)
 80019b4:	e77c      	b.n	80018b0 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80019c6:	e73d      	b.n	8001844 <HAL_ADC_IRQHandler+0xf0>
 80019c8:	40022300 	.word	0x40022300

080019cc <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019cc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80019ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80019d0:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
{
 80019d6:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80019d8:	d11d      	bne.n	8001a16 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80019da:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019e0:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80019e2:	680a      	ldr	r2, [r1, #0]
 80019e4:	f012 0f08 	tst.w	r2, #8
 80019e8:	68ca      	ldr	r2, [r1, #12]
 80019ea:	d01b      	beq.n	8001a24 <ADC_DMAConvCplt+0x58>
 80019ec:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80019f0:	d10d      	bne.n	8001a0e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80019f2:	68ca      	ldr	r2, [r1, #12]
 80019f4:	0494      	lsls	r4, r2, #18
 80019f6:	d40a      	bmi.n	8001a0e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80019fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019fe:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a02:	04d1      	lsls	r1, r2, #19
 8001a04:	d403      	bmi.n	8001a0e <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a06:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fce2 	bl	80003d8 <HAL_ADC_ConvCpltCallback>
}
 8001a14:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a16:	06d2      	lsls	r2, r2, #27
 8001a18:	d40a      	bmi.n	8001a30 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001a24:	0790      	lsls	r0, r2, #30
 8001a26:	d0e7      	beq.n	80019f8 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fcd5 	bl	80003d8 <HAL_ADC_ConvCpltCallback>
 8001a2e:	e7f1      	b.n	8001a14 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fe8d 	bl	8001750 <HAL_ADC_ErrorCallback>
}
 8001a36:	bd10      	pop	{r4, pc}

08001a38 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a38:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001a3a:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a3c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a42:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a44:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a4c:	f7ff fe80 	bl	8001750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a50:	bd08      	pop	{r3, pc}
 8001a52:	bf00      	nop

08001a54 <HAL_ADC_ConfigChannel>:
{
 8001a54:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8001a56:	2200      	movs	r2, #0
{
 8001a58:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8001a5a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001a5c:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8001a60:	2a01      	cmp	r2, #1
 8001a62:	f000 80ef 	beq.w	8001c44 <HAL_ADC_ConfigChannel+0x1f0>
 8001a66:	2401      	movs	r4, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a68:	6802      	ldr	r2, [r0, #0]
 8001a6a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001a6c:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a70:	6890      	ldr	r0, [r2, #8]
 8001a72:	0745      	lsls	r5, r0, #29
 8001a74:	d509      	bpl.n	8001a8a <HAL_ADC_ConfigChannel+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8001a78:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a7a:	f042 0220 	orr.w	r2, r2, #32
 8001a7e:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8001a86:	b002      	add	sp, #8
 8001a88:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001a8a:	680d      	ldr	r5, [r1, #0]
 8001a8c:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001a8e:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001a92:	db0d      	blt.n	8001ab0 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001a94:	f3c5 0613 	ubfx	r6, r5, #0, #20
 8001a98:	2e00      	cmp	r6, #0
 8001a9a:	f000 80c1 	beq.w	8001c20 <HAL_ADC_ConfigChannel+0x1cc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001aa2:	b115      	cbz	r5, 8001aaa <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001aa4:	fab5 f585 	clz	r5, r5
 8001aa8:	40ac      	lsls	r4, r5
 8001aaa:	69d5      	ldr	r5, [r2, #28]
 8001aac:	432c      	orrs	r4, r5
 8001aae:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ab0:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8001ab2:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ab6:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8001aba:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001abe:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8001ac0:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ac4:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8001ac8:	fa0c fc04 	lsl.w	ip, ip, r4
 8001acc:	40a0      	lsls	r0, r4
 8001ace:	f85e 4005 	ldr.w	r4, [lr, r5]
 8001ad2:	ea24 0c0c 	bic.w	ip, r4, ip
 8001ad6:	ea4c 0000 	orr.w	r0, ip, r0
 8001ada:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ade:	6890      	ldr	r0, [r2, #8]
 8001ae0:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae4:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ae6:	d101      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae8:	0700      	lsls	r0, r0, #28
 8001aea:	d542      	bpl.n	8001b72 <HAL_ADC_ConfigChannel+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aec:	6890      	ldr	r0, [r2, #8]
 8001aee:	07c6      	lsls	r6, r0, #31
 8001af0:	d43d      	bmi.n	8001b6e <HAL_ADC_ConfigChannel+0x11a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001af2:	68cd      	ldr	r5, [r1, #12]
 8001af4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8001af6:	f005 0618 	and.w	r6, r5, #24
 8001afa:	48a9      	ldr	r0, [pc, #676]	@ (8001da0 <HAL_ADC_ConfigChannel+0x34c>)
 8001afc:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8001b00:	40f0      	lsrs	r0, r6
 8001b02:	f3c4 0613 	ubfx	r6, r4, #0, #20
 8001b06:	4020      	ands	r0, r4
 8001b08:	ea21 0106 	bic.w	r1, r1, r6
 8001b0c:	4301      	orrs	r1, r0
 8001b0e:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b12:	49a4      	ldr	r1, [pc, #656]	@ (8001da4 <HAL_ADC_ConfigChannel+0x350>)
 8001b14:	428d      	cmp	r5, r1
 8001b16:	f000 808a 	beq.w	8001c2e <HAL_ADC_ConfigChannel+0x1da>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b1a:	2c00      	cmp	r4, #0
 8001b1c:	da27      	bge.n	8001b6e <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b1e:	49a2      	ldr	r1, [pc, #648]	@ (8001da8 <HAL_ADC_ConfigChannel+0x354>)
 8001b20:	428a      	cmp	r2, r1
 8001b22:	f000 80bd 	beq.w	8001ca0 <HAL_ADC_ConfigChannel+0x24c>
 8001b26:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8001b2a:	428a      	cmp	r2, r1
 8001b2c:	f000 80b8 	beq.w	8001ca0 <HAL_ADC_ConfigChannel+0x24c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b30:	489e      	ldr	r0, [pc, #632]	@ (8001dac <HAL_ADC_ConfigChannel+0x358>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b32:	499f      	ldr	r1, [pc, #636]	@ (8001db0 <HAL_ADC_ConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b34:	6886      	ldr	r6, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b36:	688d      	ldr	r5, [r1, #8]
 8001b38:	07ed      	lsls	r5, r5, #31
 8001b3a:	d49c      	bmi.n	8001a76 <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b3c:	4d9d      	ldr	r5, [pc, #628]	@ (8001db4 <HAL_ADC_ConfigChannel+0x360>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b3e:	f006 7ce0 	and.w	ip, r6, #29360128	@ 0x1c00000
 8001b42:	42ac      	cmp	r4, r5
 8001b44:	f000 8156 	beq.w	8001df4 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b48:	4d9b      	ldr	r5, [pc, #620]	@ (8001db8 <HAL_ADC_ConfigChannel+0x364>)
 8001b4a:	42ac      	cmp	r4, r5
 8001b4c:	f000 8118 	beq.w	8001d80 <HAL_ADC_ConfigChannel+0x32c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b50:	4d9a      	ldr	r5, [pc, #616]	@ (8001dbc <HAL_ADC_ConfigChannel+0x368>)
 8001b52:	42ac      	cmp	r4, r5
 8001b54:	d10b      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001b56:	0274      	lsls	r4, r6, #9
 8001b58:	d409      	bmi.n	8001b6e <HAL_ADC_ConfigChannel+0x11a>
 8001b5a:	428a      	cmp	r2, r1
 8001b5c:	d107      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b5e:	6882      	ldr	r2, [r0, #8]
 8001b60:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001b64:	ea42 020c 	orr.w	r2, r2, ip
 8001b68:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001b6c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6e:	2000      	movs	r0, #0
 8001b70:	e786      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b72:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b74:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 8001b78:	f04f 0e07 	mov.w	lr, #7
 8001b7c:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b7e:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8001b80:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b84:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001b88:	fa0e fe04 	lsl.w	lr, lr, r4
 8001b8c:	fa06 f404 	lsl.w	r4, r6, r4
 8001b90:	f85c 0005 	ldr.w	r0, [ip, r5]
 8001b94:	ea20 000e 	bic.w	r0, r0, lr
 8001b98:	4320      	orrs	r0, r4
 8001b9a:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b9e:	4888      	ldr	r0, [pc, #544]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x36c>)
 8001ba0:	694d      	ldr	r5, [r1, #20]
 8001ba2:	6800      	ldr	r0, [r0, #0]
 8001ba4:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8001ba8:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8001bac:	68d0      	ldr	r0, [r2, #12]
 8001bae:	d039      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0x1d0>
 8001bb0:	f010 0f10 	tst.w	r0, #16
 8001bb4:	68d0      	ldr	r0, [r2, #12]
 8001bb6:	d035      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0x1d0>
 8001bb8:	0840      	lsrs	r0, r0, #1
 8001bba:	f000 0008 	and.w	r0, r0, #8
 8001bbe:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bc0:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001bc2:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bc4:	2e04      	cmp	r6, #4
 8001bc6:	d040      	beq.n	8001c4a <HAL_ADC_ConfigChannel+0x1f6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc8:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8001bcc:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8001bd0:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 8001bd4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001bd8:	4320      	orrs	r0, r4
 8001bda:	4328      	orrs	r0, r5
 8001bdc:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001be0:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be2:	690d      	ldr	r5, [r1, #16]
 8001be4:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001be8:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 8001bec:	fab4 f484 	clz	r4, r4
 8001bf0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001bf4:	0964      	lsrs	r4, r4, #5
 8001bf6:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 8001bfa:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001bfe:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c00:	690d      	ldr	r5, [r1, #16]
 8001c02:	f1a0 0001 	sub.w	r0, r0, #1
 8001c06:	6914      	ldr	r4, [r2, #16]
 8001c08:	f005 051f 	and.w	r5, r5, #31
 8001c0c:	fab0 f080 	clz	r0, r0
 8001c10:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 8001c14:	0940      	lsrs	r0, r0, #5
 8001c16:	02c0      	lsls	r0, r0, #11
 8001c18:	40a8      	lsls	r0, r5
 8001c1a:	4320      	orrs	r0, r4
 8001c1c:	6110      	str	r0, [r2, #16]
}
 8001c1e:	e765      	b.n	8001aec <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001c20:	4084      	lsls	r4, r0
 8001c22:	e742      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c24:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001c28:	0040      	lsls	r0, r0, #1
 8001c2a:	4085      	lsls	r5, r0
 8001c2c:	e7c8      	b.n	8001bc0 <HAL_ADC_ConfigChannel+0x16c>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001c2e:	495e      	ldr	r1, [pc, #376]	@ (8001da8 <HAL_ADC_ConfigChannel+0x354>)
 8001c30:	428a      	cmp	r2, r1
 8001c32:	d07a      	beq.n	8001d2a <HAL_ADC_ConfigChannel+0x2d6>
 8001c34:	4963      	ldr	r1, [pc, #396]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x370>)
 8001c36:	428a      	cmp	r2, r1
 8001c38:	d040      	beq.n	8001cbc <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001c3a:	69d1      	ldr	r1, [r2, #28]
 8001c3c:	f041 0101 	orr.w	r1, r1, #1
 8001c40:	61d1      	str	r1, [r2, #28]
}
 8001c42:	e76a      	b.n	8001b1a <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8001c44:	2002      	movs	r0, #2
}
 8001c46:	b002      	add	sp, #8
 8001c48:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c4a:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8001c4c:	0684      	lsls	r4, r0, #26
 8001c4e:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8001c52:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8001c56:	d014      	beq.n	8001c82 <HAL_ADC_ConfigChannel+0x22e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c58:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001c5a:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001c5e:	4284      	cmp	r4, r0
 8001c60:	d019      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c62:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001c64:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001c68:	4284      	cmp	r4, r0
 8001c6a:	d00f      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c6c:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001c6e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001c72:	4284      	cmp	r4, r0
 8001c74:	f47f af3a 	bne.w	8001aec <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001c78:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001c7a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001c7e:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8001c80:	e734      	b.n	8001aec <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c82:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8001c84:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001c88:	6610      	str	r0, [r2, #96]	@ 0x60
 8001c8a:	e7e5      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x204>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c8c:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001c8e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001c92:	6690      	str	r0, [r2, #104]	@ 0x68
 8001c94:	e7ea      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x218>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001c96:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001c98:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001c9c:	6650      	str	r0, [r2, #100]	@ 0x64
 8001c9e:	e7e0      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x20e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ca0:	4949      	ldr	r1, [pc, #292]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x374>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca2:	4a41      	ldr	r2, [pc, #260]	@ (8001da8 <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ca4:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca6:	6892      	ldr	r2, [r2, #8]
 8001ca8:	f012 0f01 	tst.w	r2, #1
 8001cac:	4a45      	ldr	r2, [pc, #276]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x370>)
 8001cae:	6892      	ldr	r2, [r2, #8]
 8001cb0:	f47f aee1 	bne.w	8001a76 <HAL_ADC_ConfigChannel+0x22>
 8001cb4:	07d2      	lsls	r2, r2, #31
 8001cb6:	f53f aede 	bmi.w	8001a76 <HAL_ADC_ConfigChannel+0x22>
 8001cba:	e758      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001cbc:	4943      	ldr	r1, [pc, #268]	@ (8001dcc <HAL_ADC_ConfigChannel+0x378>)
 8001cbe:	428c      	cmp	r4, r1
 8001cc0:	d058      	beq.n	8001d74 <HAL_ADC_ConfigChannel+0x320>
 8001cc2:	4943      	ldr	r1, [pc, #268]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x37c>)
 8001cc4:	428c      	cmp	r4, r1
 8001cc6:	d057      	beq.n	8001d78 <HAL_ADC_ConfigChannel+0x324>
 8001cc8:	4942      	ldr	r1, [pc, #264]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x380>)
 8001cca:	428c      	cmp	r4, r1
 8001ccc:	f000 80b5 	beq.w	8001e3a <HAL_ADC_ConfigChannel+0x3e6>
 8001cd0:	4941      	ldr	r1, [pc, #260]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x384>)
 8001cd2:	428c      	cmp	r4, r1
 8001cd4:	f000 80b3 	beq.w	8001e3e <HAL_ADC_ConfigChannel+0x3ea>
 8001cd8:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001cdc:	3110      	adds	r1, #16
 8001cde:	428c      	cmp	r4, r1
 8001ce0:	f000 80af 	beq.w	8001e42 <HAL_ADC_ConfigChannel+0x3ee>
 8001ce4:	493d      	ldr	r1, [pc, #244]	@ (8001ddc <HAL_ADC_ConfigChannel+0x388>)
 8001ce6:	428c      	cmp	r4, r1
 8001ce8:	f000 80ad 	beq.w	8001e46 <HAL_ADC_ConfigChannel+0x3f2>
 8001cec:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8001cf0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8001cf4:	428c      	cmp	r4, r1
 8001cf6:	f000 80a8 	beq.w	8001e4a <HAL_ADC_ConfigChannel+0x3f6>
 8001cfa:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001cfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001d02:	428c      	cmp	r4, r1
 8001d04:	f000 80a3 	beq.w	8001e4e <HAL_ADC_ConfigChannel+0x3fa>
 8001d08:	4935      	ldr	r1, [pc, #212]	@ (8001de0 <HAL_ADC_ConfigChannel+0x38c>)
 8001d0a:	428c      	cmp	r4, r1
 8001d0c:	d195      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x1e6>
 8001d0e:	4935      	ldr	r1, [pc, #212]	@ (8001de4 <HAL_ADC_ConfigChannel+0x390>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001d14:	2900      	cmp	r1, #0
 8001d16:	d031      	beq.n	8001d7c <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 8001d18:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f101 	lsl.w	r1, r0, r1
 8001d22:	69d0      	ldr	r0, [r2, #28]
 8001d24:	4301      	orrs	r1, r0
 8001d26:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d28:	e721      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001d2a:	4928      	ldr	r1, [pc, #160]	@ (8001dcc <HAL_ADC_ConfigChannel+0x378>)
 8001d2c:	428c      	cmp	r4, r1
 8001d2e:	d021      	beq.n	8001d74 <HAL_ADC_ConfigChannel+0x320>
 8001d30:	4927      	ldr	r1, [pc, #156]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x37c>)
 8001d32:	428c      	cmp	r4, r1
 8001d34:	d020      	beq.n	8001d78 <HAL_ADC_ConfigChannel+0x324>
 8001d36:	4927      	ldr	r1, [pc, #156]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x380>)
 8001d38:	428c      	cmp	r4, r1
 8001d3a:	d07e      	beq.n	8001e3a <HAL_ADC_ConfigChannel+0x3e6>
 8001d3c:	4926      	ldr	r1, [pc, #152]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x384>)
 8001d3e:	428c      	cmp	r4, r1
 8001d40:	d07d      	beq.n	8001e3e <HAL_ADC_ConfigChannel+0x3ea>
 8001d42:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001d46:	3110      	adds	r1, #16
 8001d48:	428c      	cmp	r4, r1
 8001d4a:	d07a      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x3ee>
 8001d4c:	4923      	ldr	r1, [pc, #140]	@ (8001ddc <HAL_ADC_ConfigChannel+0x388>)
 8001d4e:	428c      	cmp	r4, r1
 8001d50:	d079      	beq.n	8001e46 <HAL_ADC_ConfigChannel+0x3f2>
 8001d52:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8001d56:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8001d5a:	428c      	cmp	r4, r1
 8001d5c:	d075      	beq.n	8001e4a <HAL_ADC_ConfigChannel+0x3f6>
 8001d5e:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001d62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001d66:	428c      	cmp	r4, r1
 8001d68:	d071      	beq.n	8001e4e <HAL_ADC_ConfigChannel+0x3fa>
 8001d6a:	491f      	ldr	r1, [pc, #124]	@ (8001de8 <HAL_ADC_ConfigChannel+0x394>)
 8001d6c:	428c      	cmp	r4, r1
 8001d6e:	d1cb      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x2b4>
 8001d70:	491e      	ldr	r1, [pc, #120]	@ (8001dec <HAL_ADC_ConfigChannel+0x398>)
 8001d72:	e7cd      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2bc>
 8001d74:	2101      	movs	r1, #1
 8001d76:	e7cb      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2bc>
 8001d78:	491d      	ldr	r1, [pc, #116]	@ (8001df0 <HAL_ADC_ConfigChannel+0x39c>)
 8001d7a:	e7c9      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2bc>
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	e7d0      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x2ce>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d80:	01f5      	lsls	r5, r6, #7
 8001d82:	f53f aef4 	bmi.w	8001b6e <HAL_ADC_ConfigChannel+0x11a>
 8001d86:	428a      	cmp	r2, r1
 8001d88:	f47f aef1 	bne.w	8001b6e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d8c:	6882      	ldr	r2, [r0, #8]
 8001d8e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001d92:	ea42 020c 	orr.w	r2, r2, ip
 8001d96:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001d9a:	6082      	str	r2, [r0, #8]
}
 8001d9c:	e6e7      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x11a>
 8001d9e:	bf00      	nop
 8001da0:	000fffff 	.word	0x000fffff
 8001da4:	47ff0000 	.word	0x47ff0000
 8001da8:	40022000 	.word	0x40022000
 8001dac:	58026300 	.word	0x58026300
 8001db0:	58026000 	.word	0x58026000
 8001db4:	cb840000 	.word	0xcb840000
 8001db8:	c7520000 	.word	0xc7520000
 8001dbc:	cfb80000 	.word	0xcfb80000
 8001dc0:	5c001000 	.word	0x5c001000
 8001dc4:	40022100 	.word	0x40022100
 8001dc8:	40022300 	.word	0x40022300
 8001dcc:	04300002 	.word	0x04300002
 8001dd0:	08600004 	.word	0x08600004
 8001dd4:	0c900008 	.word	0x0c900008
 8001dd8:	10c00010 	.word	0x10c00010
 8001ddc:	2a000400 	.word	0x2a000400
 8001de0:	4b840000 	.word	0x4b840000
 8001de4:	4fb80000 	.word	0x4fb80000
 8001de8:	43210000 	.word	0x43210000
 8001dec:	47520000 	.word	0x47520000
 8001df0:	19200040 	.word	0x19200040
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001df4:	0236      	lsls	r6, r6, #8
 8001df6:	f53f aeba 	bmi.w	8001b6e <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dfa:	428a      	cmp	r2, r1
 8001dfc:	f47f aeb7 	bne.w	8001b6e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e00:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e02:	4914      	ldr	r1, [pc, #80]	@ (8001e54 <HAL_ADC_ConfigChannel+0x400>)
 8001e04:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001e08:	ea42 020c 	orr.w	r2, r2, ip
 8001e0c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e10:	6082      	str	r2, [r0, #8]
 8001e12:	680a      	ldr	r2, [r1, #0]
 8001e14:	4910      	ldr	r1, [pc, #64]	@ (8001e58 <HAL_ADC_ConfigChannel+0x404>)
 8001e16:	0992      	lsrs	r2, r2, #6
 8001e18:	fba1 1202 	umull	r1, r2, r1, r2
 8001e1c:	0992      	lsrs	r2, r2, #6
 8001e1e:	3201      	adds	r2, #1
 8001e20:	0052      	lsls	r2, r2, #1
 8001e22:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001e24:	9a01      	ldr	r2, [sp, #4]
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	f43f aea1 	beq.w	8001b6e <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 8001e2c:	9a01      	ldr	r2, [sp, #4]
 8001e2e:	3a01      	subs	r2, #1
 8001e30:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001e32:	9a01      	ldr	r2, [sp, #4]
 8001e34:	2a00      	cmp	r2, #0
 8001e36:	d1f9      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x3d8>
 8001e38:	e699      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001e3a:	4908      	ldr	r1, [pc, #32]	@ (8001e5c <HAL_ADC_ConfigChannel+0x408>)
 8001e3c:	e768      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2bc>
 8001e3e:	4908      	ldr	r1, [pc, #32]	@ (8001e60 <HAL_ADC_ConfigChannel+0x40c>)
 8001e40:	e766      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2bc>
 8001e42:	4908      	ldr	r1, [pc, #32]	@ (8001e64 <HAL_ADC_ConfigChannel+0x410>)
 8001e44:	e764      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2bc>
 8001e46:	4908      	ldr	r1, [pc, #32]	@ (8001e68 <HAL_ADC_ConfigChannel+0x414>)
 8001e48:	e762      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2bc>
 8001e4a:	4908      	ldr	r1, [pc, #32]	@ (8001e6c <HAL_ADC_ConfigChannel+0x418>)
 8001e4c:	e760      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2bc>
 8001e4e:	4908      	ldr	r1, [pc, #32]	@ (8001e70 <HAL_ADC_ConfigChannel+0x41c>)
 8001e50:	e75e      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x2bc>
 8001e52:	bf00      	nop
 8001e54:	2400004c 	.word	0x2400004c
 8001e58:	053e2d63 	.word	0x053e2d63
 8001e5c:	1d500080 	.word	0x1d500080
 8001e60:	21800100 	.word	0x21800100
 8001e64:	25b00200 	.word	0x25b00200
 8001e68:	2e300800 	.word	0x2e300800
 8001e6c:	32601000 	.word	0x32601000
 8001e70:	36902000 	.word	0x36902000

08001e74 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e74:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	07d1      	lsls	r1, r2, #31
 8001e7a:	d501      	bpl.n	8001e80 <ADC_Enable+0xc>
  return HAL_OK;
 8001e7c:	2000      	movs	r0, #0
}
 8001e7e:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e80:	6899      	ldr	r1, [r3, #8]
 8001e82:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <ADC_Enable+0x9c>)
 8001e84:	4211      	tst	r1, r2
{
 8001e86:	b570      	push	{r4, r5, r6, lr}
 8001e88:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e8a:	d12f      	bne.n	8001eec <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 8001e8c:	6899      	ldr	r1, [r3, #8]
 8001e8e:	4a21      	ldr	r2, [pc, #132]	@ (8001f14 <ADC_Enable+0xa0>)
 8001e90:	400a      	ands	r2, r1
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001e98:	f7ff fc46 	bl	8001728 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f18 <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 8001ea0:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d02c      	beq.n	8001f00 <ADC_Enable+0x8c>
 8001ea6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d028      	beq.n	8001f00 <ADC_Enable+0x8c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001eae:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 8001eb2:	f502 4284 	add.w	r2, r2, #16896	@ 0x4200
 8001eb6:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	07d2      	lsls	r2, r2, #31
 8001ebc:	d414      	bmi.n	8001ee8 <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 8001ebe:	4e15      	ldr	r6, [pc, #84]	@ (8001f14 <ADC_Enable+0xa0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	07d0      	lsls	r0, r2, #31
 8001ec4:	d404      	bmi.n	8001ed0 <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	4032      	ands	r2, r6
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ed0:	f7ff fc2a 	bl	8001728 <HAL_GetTick>
 8001ed4:	1b43      	subs	r3, r0, r5
 8001ed6:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ed8:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001eda:	d902      	bls.n	8001ee2 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	07d1      	lsls	r1, r2, #31
 8001ee0:	d504      	bpl.n	8001eec <ADC_Enable+0x78>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	07d2      	lsls	r2, r2, #31
 8001ee6:	d5eb      	bpl.n	8001ec0 <ADC_Enable+0x4c>
  return HAL_OK;
 8001ee8:	2000      	movs	r0, #0
}
 8001eea:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001eee:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef0:	f043 0310 	orr.w	r3, r3, #16
 8001ef4:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8001efe:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f00:	4a06      	ldr	r2, [pc, #24]	@ (8001f1c <ADC_Enable+0xa8>)
 8001f02:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f04:	06d6      	lsls	r6, r2, #27
 8001f06:	d0d7      	beq.n	8001eb8 <ADC_Enable+0x44>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f08:	4a05      	ldr	r2, [pc, #20]	@ (8001f20 <ADC_Enable+0xac>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d1d4      	bne.n	8001eb8 <ADC_Enable+0x44>
 8001f0e:	e7eb      	b.n	8001ee8 <ADC_Enable+0x74>
 8001f10:	8000003f 	.word	0x8000003f
 8001f14:	7fffffc0 	.word	0x7fffffc0
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40022300 	.word	0x40022300
 8001f20:	40022100 	.word	0x40022100

08001f24 <HAL_ADC_Start_DMA>:
{
 8001f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f28:	4b3b      	ldr	r3, [pc, #236]	@ (8002018 <HAL_ADC_Start_DMA+0xf4>)
{
 8001f2a:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f2c:	6800      	ldr	r0, [r0, #0]
{
 8001f2e:	460e      	mov	r6, r1
 8001f30:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f32:	4298      	cmp	r0, r3
 8001f34:	d01c      	beq.n	8001f70 <HAL_ADC_Start_DMA+0x4c>
 8001f36:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f3a:	4298      	cmp	r0, r3
 8001f3c:	d018      	beq.n	8001f70 <HAL_ADC_Start_DMA+0x4c>
 8001f3e:	4b37      	ldr	r3, [pc, #220]	@ (800201c <HAL_ADC_Start_DMA+0xf8>)
 8001f40:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f42:	6885      	ldr	r5, [r0, #8]
 8001f44:	f015 0504 	ands.w	r5, r5, #4
 8001f48:	d118      	bne.n	8001f7c <HAL_ADC_Start_DMA+0x58>
    __HAL_LOCK(hadc);
 8001f4a:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8001f4e:	2a01      	cmp	r2, #1
 8001f50:	d014      	beq.n	8001f7c <HAL_ADC_Start_DMA+0x58>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f52:	f003 081f 	and.w	r8, r3, #31
 8001f56:	f240 2321 	movw	r3, #545	@ 0x221
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	fa23 f308 	lsr.w	r3, r3, r8
 8001f60:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f64:	4003      	ands	r3, r0
 8001f66:	d10c      	bne.n	8001f82 <HAL_ADC_Start_DMA+0x5e>
      __HAL_UNLOCK(hadc);
 8001f68:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8001f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f70:	4b2b      	ldr	r3, [pc, #172]	@ (8002020 <HAL_ADC_Start_DMA+0xfc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f74:	6885      	ldr	r5, [r0, #8]
 8001f76:	f015 0504 	ands.w	r5, r5, #4
 8001f7a:	d0e6      	beq.n	8001f4a <HAL_ADC_Start_DMA+0x26>
    __HAL_LOCK(hadc);
 8001f7c:	2002      	movs	r0, #2
}
 8001f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff ff76 	bl	8001e74 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d140      	bne.n	800200e <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 8001f8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001f8e:	4b25      	ldr	r3, [pc, #148]	@ (8002024 <HAL_ADC_Start_DMA+0x100>)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f90:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8001f92:	4013      	ands	r3, r2
 8001f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f98:	6563      	str	r3, [r4, #84]	@ 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f9a:	f1b8 0f00 	cmp.w	r8, #0
 8001f9e:	d002      	beq.n	8001fa6 <HAL_ADC_Start_DMA+0x82>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fa0:	4b21      	ldr	r3, [pc, #132]	@ (8002028 <HAL_ADC_Start_DMA+0x104>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fa2:	4299      	cmp	r1, r3
 8001fa4:	d003      	beq.n	8001fae <HAL_ADC_Start_DMA+0x8a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fa6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001fa8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001fac:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001fb0:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8001fb4:	d02e      	beq.n	8002014 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001fb8:	f023 0306 	bic.w	r3, r3, #6
 8001fbc:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fbe:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fc0:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fc2:	4d1a      	ldr	r5, [pc, #104]	@ (800202c <HAL_ADC_Start_DMA+0x108>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fc4:	463b      	mov	r3, r7
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001fc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001fc8:	3140      	adds	r1, #64	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fca:	63c5      	str	r5, [r0, #60]	@ 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fcc:	4d18      	ldr	r5, [pc, #96]	@ (8002030 <HAL_ADC_Start_DMA+0x10c>)
 8001fce:	6405      	str	r5, [r0, #64]	@ 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fd0:	4d18      	ldr	r5, [pc, #96]	@ (8002034 <HAL_ADC_Start_DMA+0x110>)
 8001fd2:	64c5      	str	r5, [r0, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fd4:	251c      	movs	r5, #28
 8001fd6:	f841 5c40 	str.w	r5, [r1, #-64]
        __HAL_UNLOCK(hadc);
 8001fda:	2500      	movs	r5, #0
 8001fdc:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fe0:	f851 5c3c 	ldr.w	r5, [r1, #-60]
 8001fe4:	f045 0510 	orr.w	r5, r5, #16
 8001fe8:	f841 5c3c 	str.w	r5, [r1, #-60]
 8001fec:	f851 5c34 	ldr.w	r5, [r1, #-52]
 8001ff0:	f025 0503 	bic.w	r5, r5, #3
 8001ff4:	4335      	orrs	r5, r6
 8001ff6:	f841 5c34 	str.w	r5, [r1, #-52]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ffa:	f001 f8bb 	bl	8003174 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ffe:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002000:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <HAL_ADC_Start_DMA+0x114>)
 8002002:	6891      	ldr	r1, [r2, #8]
 8002004:	400b      	ands	r3, r1
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6093      	str	r3, [r2, #8]
}
 800200c:	e7b7      	b.n	8001f7e <HAL_ADC_Start_DMA+0x5a>
        __HAL_UNLOCK(hadc);
 800200e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8002012:	e7b4      	b.n	8001f7e <HAL_ADC_Start_DMA+0x5a>
          ADC_CLEAR_ERRORCODE(hadc);
 8002014:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002016:	e7d2      	b.n	8001fbe <HAL_ADC_Start_DMA+0x9a>
 8002018:	40022000 	.word	0x40022000
 800201c:	58026300 	.word	0x58026300
 8002020:	40022300 	.word	0x40022300
 8002024:	fffff0fe 	.word	0xfffff0fe
 8002028:	40022100 	.word	0x40022100
 800202c:	080019cd 	.word	0x080019cd
 8002030:	08001741 	.word	0x08001741
 8002034:	08001a39 	.word	0x08001a39
 8002038:	7fffffc0 	.word	0x7fffffc0

0800203c <ADC_Disable>:
{
 800203c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800203e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	0795      	lsls	r5, r2, #30
 8002044:	d502      	bpl.n	800204c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002046:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8002048:	2000      	movs	r0, #0
}
 800204a:	bd38      	pop	{r3, r4, r5, pc}
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	07d4      	lsls	r4, r2, #31
 8002050:	d5fa      	bpl.n	8002048 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	4604      	mov	r4, r0
 8002056:	f002 020d 	and.w	r2, r2, #13
 800205a:	2a01      	cmp	r2, #1
 800205c:	d009      	beq.n	8002072 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8002060:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002062:	f043 0310 	orr.w	r3, r3, #16
 8002066:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002068:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8002070:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002072:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002074:	2103      	movs	r1, #3
 8002076:	4a0d      	ldr	r2, [pc, #52]	@ (80020ac <ADC_Disable+0x70>)
 8002078:	4002      	ands	r2, r0
 800207a:	f042 0202 	orr.w	r2, r2, #2
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002082:	f7ff fb51 	bl	8001728 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002086:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002088:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	07d9      	lsls	r1, r3, #31
 800208e:	d403      	bmi.n	8002098 <ADC_Disable+0x5c>
 8002090:	e7da      	b.n	8002048 <ADC_Disable+0xc>
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	07db      	lsls	r3, r3, #31
 8002096:	d5d7      	bpl.n	8002048 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002098:	f7ff fb46 	bl	8001728 <HAL_GetTick>
 800209c:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800209e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020a0:	2802      	cmp	r0, #2
 80020a2:	d9f6      	bls.n	8002092 <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	07d2      	lsls	r2, r2, #31
 80020a8:	d5f3      	bpl.n	8002092 <ADC_Disable+0x56>
 80020aa:	e7d8      	b.n	800205e <ADC_Disable+0x22>
 80020ac:	7fffffc0 	.word	0x7fffffc0

080020b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80020b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80020b2:	4a4f      	ldr	r2, [pc, #316]	@ (80021f0 <ADC_ConfigureBoostMode+0x140>)
{
 80020b4:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80020b6:	6803      	ldr	r3, [r0, #0]
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d024      	beq.n	8002106 <ADC_ConfigureBoostMode+0x56>
 80020bc:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d020      	beq.n	8002106 <ADC_ConfigureBoostMode+0x56>
 80020c4:	4b4b      	ldr	r3, [pc, #300]	@ (80021f4 <ADC_ConfigureBoostMode+0x144>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80020cc:	d020      	beq.n	8002110 <ADC_ConfigureBoostMode+0x60>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80020ce:	f002 fcdd 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80020d2:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80020d4:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80020d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020da:	d06d      	beq.n	80021b8 <ADC_ConfigureBoostMode+0x108>
 80020dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80020e0:	d072      	beq.n	80021c8 <ADC_ConfigureBoostMode+0x118>
 80020e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e6:	d067      	beq.n	80021b8 <ADC_ConfigureBoostMode+0x108>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80020e8:	f7ff fb24 	bl	8001734 <HAL_GetREVID>
 80020ec:	f241 0303 	movw	r3, #4099	@ 0x1003
 80020f0:	4298      	cmp	r0, r3
 80020f2:	d82d      	bhi.n	8002150 <ADC_ConfigureBoostMode+0xa0>
  {
    if (freq > 20000000UL)
 80020f4:	4a40      	ldr	r2, [pc, #256]	@ (80021f8 <ADC_ConfigureBoostMode+0x148>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80020f6:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 80020f8:	4295      	cmp	r5, r2
 80020fa:	d947      	bls.n	800218c <ADC_ConfigureBoostMode+0xdc>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002102:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002104:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002106:	4b3d      	ldr	r3, [pc, #244]	@ (80021fc <ADC_ConfigureBoostMode+0x14c>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 800210e:	d1de      	bne.n	80020ce <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002110:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002114:	2100      	movs	r1, #0
 8002116:	f003 ff33 	bl	8005f80 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800211a:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800211c:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800211e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002122:	d04d      	beq.n	80021c0 <ADC_ConfigureBoostMode+0x110>
 8002124:	d825      	bhi.n	8002172 <ADC_ConfigureBoostMode+0xc2>
 8002126:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800212a:	d04b      	beq.n	80021c4 <ADC_ConfigureBoostMode+0x114>
 800212c:	d84e      	bhi.n	80021cc <ADC_ConfigureBoostMode+0x11c>
 800212e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002132:	d008      	beq.n	8002146 <ADC_ConfigureBoostMode+0x96>
 8002134:	d855      	bhi.n	80021e2 <ADC_ConfigureBoostMode+0x132>
 8002136:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800213a:	d004      	beq.n	8002146 <ADC_ConfigureBoostMode+0x96>
 800213c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002140:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002144:	d1d0      	bne.n	80020e8 <ADC_ConfigureBoostMode+0x38>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002146:	0c9b      	lsrs	r3, r3, #18
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 800214e:	e7cb      	b.n	80020e8 <ADC_ConfigureBoostMode+0x38>
    if (freq <= 6250000UL)
 8002150:	4a2b      	ldr	r2, [pc, #172]	@ (8002200 <ADC_ConfigureBoostMode+0x150>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002152:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 8002154:	4295      	cmp	r5, r2
 8002156:	d923      	bls.n	80021a0 <ADC_ConfigureBoostMode+0xf0>
    else if (freq <= 12500000UL)
 8002158:	4a2a      	ldr	r2, [pc, #168]	@ (8002204 <ADC_ConfigureBoostMode+0x154>)
 800215a:	4295      	cmp	r5, r2
 800215c:	d925      	bls.n	80021aa <ADC_ConfigureBoostMode+0xfa>
    else if (freq <= 25000000UL)
 800215e:	4a2a      	ldr	r2, [pc, #168]	@ (8002208 <ADC_ConfigureBoostMode+0x158>)
 8002160:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002162:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8002164:	d839      	bhi.n	80021da <ADC_ConfigureBoostMode+0x12a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002166:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800216a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216e:	609a      	str	r2, [r3, #8]
}
 8002170:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8002172:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002176:	d02e      	beq.n	80021d6 <ADC_ConfigureBoostMode+0x126>
 8002178:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800217c:	d1b4      	bne.n	80020e8 <ADC_ConfigureBoostMode+0x38>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800217e:	f7ff fad9 	bl	8001734 <HAL_GetREVID>
 8002182:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002186:	4298      	cmp	r0, r3
 8002188:	d805      	bhi.n	8002196 <ADC_ConfigureBoostMode+0xe6>
 800218a:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002192:	609a      	str	r2, [r3, #8]
}
 8002194:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <ADC_ConfigureBoostMode+0x150>)
 8002198:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	d304      	bcc.n	80021aa <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80021a6:	609a      	str	r2, [r3, #8]
}
 80021a8:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80021b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021b4:	609a      	str	r2, [r3, #8]
}
 80021b6:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80021b8:	0c1b      	lsrs	r3, r3, #16
 80021ba:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80021be:	e793      	b.n	80020e8 <ADC_ConfigureBoostMode+0x38>
        freq /= 64UL;
 80021c0:	0985      	lsrs	r5, r0, #6
        break;
 80021c2:	e791      	b.n	80020e8 <ADC_ConfigureBoostMode+0x38>
        freq /= 16UL;
 80021c4:	0905      	lsrs	r5, r0, #4
        break;
 80021c6:	e78f      	b.n	80020e8 <ADC_ConfigureBoostMode+0x38>
        freq /= 4UL;
 80021c8:	0885      	lsrs	r5, r0, #2
        break;
 80021ca:	e78d      	b.n	80020e8 <ADC_ConfigureBoostMode+0x38>
    switch (hadc->Init.ClockPrescaler)
 80021cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021d0:	d18a      	bne.n	80020e8 <ADC_ConfigureBoostMode+0x38>
        freq /= 32UL;
 80021d2:	0945      	lsrs	r5, r0, #5
        break;
 80021d4:	e788      	b.n	80020e8 <ADC_ConfigureBoostMode+0x38>
        freq /= 128UL;
 80021d6:	09c5      	lsrs	r5, r0, #7
        break;
 80021d8:	e786      	b.n	80020e8 <ADC_ConfigureBoostMode+0x38>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80021da:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80021de:	609a      	str	r2, [r3, #8]
}
 80021e0:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80021e2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80021e6:	d0ae      	beq.n	8002146 <ADC_ConfigureBoostMode+0x96>
 80021e8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80021ec:	d0ab      	beq.n	8002146 <ADC_ConfigureBoostMode+0x96>
 80021ee:	e77b      	b.n	80020e8 <ADC_ConfigureBoostMode+0x38>
 80021f0:	40022000 	.word	0x40022000
 80021f4:	58026300 	.word	0x58026300
 80021f8:	01312d00 	.word	0x01312d00
 80021fc:	40022300 	.word	0x40022300
 8002200:	00bebc21 	.word	0x00bebc21
 8002204:	017d7841 	.word	0x017d7841
 8002208:	02faf081 	.word	0x02faf081

0800220c <HAL_ADC_Init>:
{
 800220c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 800220e:	2300      	movs	r3, #0
{
 8002210:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002212:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002214:	2800      	cmp	r0, #0
 8002216:	f000 80a9 	beq.w	800236c <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800221a:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800221c:	4604      	mov	r4, r0
 800221e:	2d00      	cmp	r5, #0
 8002220:	f000 80aa 	beq.w	8002378 <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002224:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002226:	6893      	ldr	r3, [r2, #8]
 8002228:	009d      	lsls	r5, r3, #2
 800222a:	d503      	bpl.n	8002234 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800222c:	6891      	ldr	r1, [r2, #8]
 800222e:	4b71      	ldr	r3, [pc, #452]	@ (80023f4 <HAL_ADC_Init+0x1e8>)
 8002230:	400b      	ands	r3, r1
 8002232:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002234:	6893      	ldr	r3, [r2, #8]
 8002236:	00d8      	lsls	r0, r3, #3
 8002238:	d416      	bmi.n	8002268 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800223a:	4b6f      	ldr	r3, [pc, #444]	@ (80023f8 <HAL_ADC_Init+0x1ec>)
 800223c:	496f      	ldr	r1, [pc, #444]	@ (80023fc <HAL_ADC_Init+0x1f0>)
 800223e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002240:	6890      	ldr	r0, [r2, #8]
 8002242:	099b      	lsrs	r3, r3, #6
 8002244:	fba1 1303 	umull	r1, r3, r1, r3
 8002248:	496d      	ldr	r1, [pc, #436]	@ (8002400 <HAL_ADC_Init+0x1f4>)
 800224a:	099b      	lsrs	r3, r3, #6
 800224c:	4001      	ands	r1, r0
 800224e:	3301      	adds	r3, #1
 8002250:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002254:	6091      	str	r1, [r2, #8]
 8002256:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002258:	9b01      	ldr	r3, [sp, #4]
 800225a:	b12b      	cbz	r3, 8002268 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 800225c:	9b01      	ldr	r3, [sp, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002262:	9b01      	ldr	r3, [sp, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f9      	bne.n	800225c <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002268:	6893      	ldr	r3, [r2, #8]
 800226a:	00d9      	lsls	r1, r3, #3
 800226c:	f100 8082 	bmi.w	8002374 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002270:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8002272:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002274:	f043 0310 	orr.w	r3, r3, #16
 8002278:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800227c:	432b      	orrs	r3, r5
 800227e:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002280:	6893      	ldr	r3, [r2, #8]
 8002282:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002286:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002288:	d16c      	bne.n	8002364 <HAL_ADC_Init+0x158>
 800228a:	06db      	lsls	r3, r3, #27
 800228c:	d46a      	bmi.n	8002364 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 800228e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002290:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800229a:	6893      	ldr	r3, [r2, #8]
 800229c:	07de      	lsls	r6, r3, #31
 800229e:	d40c      	bmi.n	80022ba <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022a0:	4b58      	ldr	r3, [pc, #352]	@ (8002404 <HAL_ADC_Init+0x1f8>)
 80022a2:	429a      	cmp	r2, r3
 80022a4:	f000 8081 	beq.w	80023aa <HAL_ADC_Init+0x19e>
 80022a8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d07c      	beq.n	80023aa <HAL_ADC_Init+0x19e>
 80022b0:	4b55      	ldr	r3, [pc, #340]	@ (8002408 <HAL_ADC_Init+0x1fc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	07d9      	lsls	r1, r3, #31
 80022b6:	f140 808a 	bpl.w	80023ce <HAL_ADC_Init+0x1c2>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80022ba:	f7ff fa3b 	bl	8001734 <HAL_GetREVID>
 80022be:	f241 0303 	movw	r3, #4099	@ 0x1003
 80022c2:	68a1      	ldr	r1, [r4, #8]
 80022c4:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022c6:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80022c8:	d85c      	bhi.n	8002384 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022ca:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022ce:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022d0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80022d2:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80022d6:	4302      	orrs	r2, r0
 80022d8:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d103      	bne.n	80022e6 <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022de:	6a23      	ldr	r3, [r4, #32]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80022e8:	b123      	cbz	r3, 80022f4 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ea:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80022ee:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80022f0:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022f2:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	4945      	ldr	r1, [pc, #276]	@ (800240c <HAL_ADC_Init+0x200>)
 80022f8:	68d8      	ldr	r0, [r3, #12]
 80022fa:	4001      	ands	r1, r0
 80022fc:	4311      	orrs	r1, r2
 80022fe:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002306:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002308:	d11c      	bne.n	8002344 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800230a:	0712      	lsls	r2, r2, #28
 800230c:	d41a      	bmi.n	8002344 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800230e:	68d8      	ldr	r0, [r3, #12]
 8002310:	4a3f      	ldr	r2, [pc, #252]	@ (8002410 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002312:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002314:	4002      	ands	r2, r0
 8002316:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800231a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800231c:	430a      	orrs	r2, r1
 800231e:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002320:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8002324:	2a01      	cmp	r2, #1
 8002326:	d054      	beq.n	80023d2 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002330:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8002332:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002336:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800233a:	430a      	orrs	r2, r1
 800233c:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800233e:	f7ff feb7 	bl	80020b0 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002342:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002344:	68e2      	ldr	r2, [r4, #12]
 8002346:	2a01      	cmp	r2, #1
 8002348:	d027      	beq.n	800239a <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800234a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800234c:	f022 020f 	bic.w	r2, r2, #15
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002352:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 8002354:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8002360:	b002      	add	sp, #8
 8002362:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002364:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002366:	f043 0310 	orr.w	r3, r3, #16
 800236a:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 800236c:	2501      	movs	r5, #1
}
 800236e:	4628      	mov	r0, r5
 8002370:	b002      	add	sp, #8
 8002372:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002374:	2500      	movs	r5, #0
 8002376:	e783      	b.n	8002280 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 8002378:	f7fe fde2 	bl	8000f40 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800237c:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800237e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8002382:	e74f      	b.n	8002224 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002384:	2910      	cmp	r1, #16
 8002386:	d1a0      	bne.n	80022ca <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002388:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800238a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800238c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002390:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002392:	430a      	orrs	r2, r1
 8002394:	f042 021c 	orr.w	r2, r2, #28
 8002398:	e79f      	b.n	80022da <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800239a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800239c:	69a2      	ldr	r2, [r4, #24]
 800239e:	f021 010f 	bic.w	r1, r1, #15
 80023a2:	3a01      	subs	r2, #1
 80023a4:	430a      	orrs	r2, r1
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80023a8:	e7d3      	b.n	8002352 <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023aa:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <HAL_ADC_Init+0x1f8>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f013 0f01 	tst.w	r3, #1
 80023b2:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <HAL_ADC_Init+0x208>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	d180      	bne.n	80022ba <HAL_ADC_Init+0xae>
 80023b8:	07d8      	lsls	r0, r3, #31
 80023ba:	f53f af7e 	bmi.w	80022ba <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023be:	4a16      	ldr	r2, [pc, #88]	@ (8002418 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023c0:	6893      	ldr	r3, [r2, #8]
 80023c2:	6861      	ldr	r1, [r4, #4]
 80023c4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80023c8:	430b      	orrs	r3, r1
 80023ca:	6093      	str	r3, [r2, #8]
}
 80023cc:	e775      	b.n	80022ba <HAL_ADC_Init+0xae>
 80023ce:	4a13      	ldr	r2, [pc, #76]	@ (800241c <HAL_ADC_Init+0x210>)
 80023d0:	e7f6      	b.n	80023c0 <HAL_ADC_Init+0x1b4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80023d2:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 80023d6:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 80023d8:	3901      	subs	r1, #1
 80023da:	6918      	ldr	r0, [r3, #16]
 80023dc:	4332      	orrs	r2, r6
 80023de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80023e4:	430a      	orrs	r2, r1
 80023e6:	490e      	ldr	r1, [pc, #56]	@ (8002420 <HAL_ADC_Init+0x214>)
 80023e8:	4001      	ands	r1, r0
 80023ea:	430a      	orrs	r2, r1
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	611a      	str	r2, [r3, #16]
 80023f2:	e79d      	b.n	8002330 <HAL_ADC_Init+0x124>
 80023f4:	5fffffc0 	.word	0x5fffffc0
 80023f8:	2400004c 	.word	0x2400004c
 80023fc:	053e2d63 	.word	0x053e2d63
 8002400:	6fffffc0 	.word	0x6fffffc0
 8002404:	40022000 	.word	0x40022000
 8002408:	58026000 	.word	0x58026000
 800240c:	fff0c003 	.word	0xfff0c003
 8002410:	ffffbffc 	.word	0xffffbffc
 8002414:	40022100 	.word	0x40022100
 8002418:	40022300 	.word	0x40022300
 800241c:	58026300 	.word	0x58026300
 8002420:	fc00f81e 	.word	0xfc00f81e

08002424 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002424:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002426:	2300      	movs	r3, #0
{
 8002428:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800242a:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800242c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8002430:	2b01      	cmp	r3, #1
 8002432:	d040      	beq.n	80024b6 <HAL_ADCEx_Calibration_Start+0x92>
 8002434:	2301      	movs	r3, #1
 8002436:	4604      	mov	r4, r0
 8002438:	460e      	mov	r6, r1
 800243a:	4615      	mov	r5, r2
 800243c:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002440:	f7ff fdfc 	bl	800203c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002444:	b9e8      	cbnz	r0, 8002482 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002446:	6d67      	ldr	r7, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8002448:	f005 4280 	and.w	r2, r5, #1073741824	@ 0x40000000
 800244c:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <HAL_ADCEx_Calibration_Start+0x98>)
 800244e:	f406 3180 	and.w	r1, r6, #65536	@ 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002452:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002454:	403b      	ands	r3, r7
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	6563      	str	r3, [r4, #84]	@ 0x54
 800245c:	4b18      	ldr	r3, [pc, #96]	@ (80024c0 <HAL_ADCEx_Calibration_Start+0x9c>)
 800245e:	68ae      	ldr	r6, [r5, #8]
 8002460:	4033      	ands	r3, r6
 8002462:	4313      	orrs	r3, r2
 8002464:	430b      	orrs	r3, r1
 8002466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800246a:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800246c:	68ab      	ldr	r3, [r5, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800246e:	4a15      	ldr	r2, [pc, #84]	@ (80024c4 <HAL_ADCEx_Calibration_Start+0xa0>)
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0f      	blt.n	8002494 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002474:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002476:	f023 0303 	bic.w	r3, r3, #3
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6563      	str	r3, [r4, #84]	@ 0x54
 8002480:	e003      	b.n	800248a <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800248a:	2300      	movs	r3, #0
 800248c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002490:	b003      	add	sp, #12
 8002492:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8002494:	9b01      	ldr	r3, [sp, #4]
 8002496:	3301      	adds	r3, #1
 8002498:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800249a:	9b01      	ldr	r3, [sp, #4]
 800249c:	4293      	cmp	r3, r2
 800249e:	d3e5      	bcc.n	800246c <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80024a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 80024a2:	2200      	movs	r2, #0
        return HAL_ERROR;
 80024a4:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80024a6:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 80024aa:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        ADC_STATE_CLR_SET(hadc->State,
 80024ae:	f043 0310 	orr.w	r3, r3, #16
 80024b2:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 80024b4:	e7ec      	b.n	8002490 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 80024b6:	2002      	movs	r0, #2
}
 80024b8:	b003      	add	sp, #12
 80024ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024bc:	ffffeefd 	.word	0xffffeefd
 80024c0:	3ffeffc0 	.word	0x3ffeffc0
 80024c4:	25c3f800 	.word	0x25c3f800

080024c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop

080024cc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop

080024d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop

080024d8 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop

080024dc <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024dc:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 80024e0:	2a01      	cmp	r2, #1
 80024e2:	d035      	beq.n	8002550 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 80024e4:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80024e6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80024e8:	2001      	movs	r0, #1
{
 80024ea:	b4f0      	push	{r4, r5, r6, r7}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024ec:	4d28      	ldr	r5, [pc, #160]	@ (8002590 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
{
 80024ee:	b09a      	sub	sp, #104	@ 0x68
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024f0:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80024f2:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024f4:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 80024f6:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80024fa:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024fc:	d008      	beq.n	8002510 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fe:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002500:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002504:	f041 0120 	orr.w	r1, r1, #32
 8002508:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800250a:	b01a      	add	sp, #104	@ 0x68
 800250c:	bcf0      	pop	{r4, r5, r6, r7}
 800250e:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002510:	4a20      	ldr	r2, [pc, #128]	@ (8002594 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8002512:	6890      	ldr	r0, [r2, #8]
 8002514:	0740      	lsls	r0, r0, #29
 8002516:	d50b      	bpl.n	8002530 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8002518:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800251c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251e:	f042 0220 	orr.w	r2, r2, #32
 8002522:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 800252a:	b01a      	add	sp, #104	@ 0x68
 800252c:	bcf0      	pop	{r4, r5, r6, r7}
 800252e:	4770      	bx	lr
 8002530:	68a0      	ldr	r0, [r4, #8]
 8002532:	0745      	lsls	r5, r0, #29
 8002534:	d4f1      	bmi.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002536:	6808      	ldr	r0, [r1, #0]
 8002538:	b9a0      	cbnz	r0, 8002564 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800253a:	4917      	ldr	r1, [pc, #92]	@ (8002598 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 800253c:	6888      	ldr	r0, [r1, #8]
 800253e:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8002542:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002544:	68a0      	ldr	r0, [r4, #8]
 8002546:	07c0      	lsls	r0, r0, #31
 8002548:	d504      	bpl.n	8002554 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800254a:	6892      	ldr	r2, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254c:	2000      	movs	r0, #0
 800254e:	e7e9      	b.n	8002524 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8002550:	2002      	movs	r0, #2
}
 8002552:	4770      	bx	lr
 8002554:	6892      	ldr	r2, [r2, #8]
 8002556:	07d5      	lsls	r5, r2, #31
 8002558:	d4f8      	bmi.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x70>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800255a:	6888      	ldr	r0, [r1, #8]
 800255c:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800255e:	4002      	ands	r2, r0
 8002560:	608a      	str	r2, [r1, #8]
 8002562:	e7f3      	b.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x70>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002564:	4e0c      	ldr	r6, [pc, #48]	@ (8002598 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8002566:	684f      	ldr	r7, [r1, #4]
 8002568:	68b5      	ldr	r5, [r6, #8]
 800256a:	f425 4540 	bic.w	r5, r5, #49152	@ 0xc000
 800256e:	433d      	orrs	r5, r7
 8002570:	60b5      	str	r5, [r6, #8]
 8002572:	68a4      	ldr	r4, [r4, #8]
 8002574:	07e4      	lsls	r4, r4, #31
 8002576:	d4e8      	bmi.n	800254a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002578:	6892      	ldr	r2, [r2, #8]
 800257a:	07d7      	lsls	r7, r2, #31
 800257c:	d4e6      	bmi.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x70>
        MODIFY_REG(tmpADC_Common->CCR,
 800257e:	688a      	ldr	r2, [r1, #8]
 8002580:	68b4      	ldr	r4, [r6, #8]
 8002582:	4310      	orrs	r0, r2
 8002584:	4a05      	ldr	r2, [pc, #20]	@ (800259c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8002586:	4022      	ands	r2, r4
 8002588:	4310      	orrs	r0, r2
 800258a:	60b0      	str	r0, [r6, #8]
 800258c:	e7de      	b.n	800254c <HAL_ADCEx_MultiModeConfigChannel+0x70>
 800258e:	bf00      	nop
 8002590:	40022000 	.word	0x40022000
 8002594:	40022100 	.word	0x40022100
 8002598:	40022300 	.word	0x40022300
 800259c:	fffff0e0 	.word	0xfffff0e0

080025a0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4906      	ldr	r1, [pc, #24]	@ (80025bc <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025aa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ac:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b0:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80025b6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80025b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00
 80025c0:	05fa0000 	.word	0x05fa0000

080025c4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <HAL_NVIC_SetPriority+0x6c>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025cc:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ce:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d6:	f1be 0f04 	cmp.w	lr, #4
 80025da:	bf28      	it	cs
 80025dc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e0:	f1bc 0f06 	cmp.w	ip, #6
 80025e4:	d91a      	bls.n	800261c <HAL_NVIC_SetPriority+0x58>
 80025e6:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	fa03 f30c 	lsl.w	r3, r3, ip
 80025f2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80025fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	fa03 f30e 	lsl.w	r3, r3, lr
 8002600:	ea21 0303 	bic.w	r3, r1, r3
 8002604:	fa03 f30c 	lsl.w	r3, r3, ip
 8002608:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002610:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002612:	db06      	blt.n	8002622 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	4a07      	ldr	r2, [pc, #28]	@ (8002634 <HAL_NVIC_SetPriority+0x70>)
 8002616:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002618:	f85d fb04 	ldr.w	pc, [sp], #4
 800261c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	4694      	mov	ip, r2
 8002620:	e7e9      	b.n	80025f6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002622:	f000 000f 	and.w	r0, r0, #15
 8002626:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <HAL_NVIC_SetPriority+0x74>)
 8002628:	5413      	strb	r3, [r2, r0]
 800262a:	f85d fb04 	ldr.w	pc, [sp], #4
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00
 8002634:	e000e400 	.word	0xe000e400
 8002638:	e000ed14 	.word	0xe000ed14

0800263c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800263c:	2800      	cmp	r0, #0
 800263e:	db07      	blt.n	8002650 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002640:	2301      	movs	r3, #1
 8002642:	f000 011f 	and.w	r1, r0, #31
 8002646:	4a03      	ldr	r2, [pc, #12]	@ (8002654 <HAL_NVIC_EnableIRQ+0x18>)
 8002648:	0940      	lsrs	r0, r0, #5
 800264a:	408b      	lsls	r3, r1
 800264c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000e100 	.word	0xe000e100

08002658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002658:	1e43      	subs	r3, r0, #1
 800265a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800265e:	d301      	bcc.n	8002664 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002660:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002662:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002664:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002668:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	4905      	ldr	r1, [pc, #20]	@ (8002680 <HAL_SYSTICK_Config+0x28>)
 800266c:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002670:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002672:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002674:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002678:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002684:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002688:	4b04      	ldr	r3, [pc, #16]	@ (800269c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800268a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800268c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800268e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8002694:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80026a0:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_MPU_Enable+0x1c>)
 80026a2:	f040 0001 	orr.w	r0, r0, #1
 80026a6:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80026aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026ac:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80026b0:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80026b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026b6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80026c0:	4a16      	ldr	r2, [pc, #88]	@ (800271c <HAL_MPU_ConfigRegion+0x5c>)
 80026c2:	7843      	ldrb	r3, [r0, #1]
 80026c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80026c8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80026d4:	6843      	ldr	r3, [r0, #4]
 80026d6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026da:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026dc:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80026e2:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026e4:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026e8:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026ec:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026ee:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026f0:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026f4:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026f8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80026fc:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026fe:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002702:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002706:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800270a:	7a01      	ldrb	r1, [r0, #8]
 800270c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002710:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002714:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002720:	b188      	cbz	r0, 8002746 <HAL_DAC_Init+0x26>
{
 8002722:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002724:	7903      	ldrb	r3, [r0, #4]
 8002726:	4604      	mov	r4, r0
 8002728:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800272c:	b13b      	cbz	r3, 800273e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800272e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002730:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002732:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002734:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002736:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002738:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800273a:	7122      	strb	r2, [r4, #4]
}
 800273c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800273e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002740:	f7fe fc78 	bl	8001034 <HAL_DAC_MspInit>
 8002744:	e7f3      	b.n	800272e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8002746:	2001      	movs	r0, #1
}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop

0800274c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002750:	2800      	cmp	r0, #0
 8002752:	d05e      	beq.n	8002812 <HAL_DAC_Start_DMA+0xc6>
 8002754:	460e      	mov	r6, r1
 8002756:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002758:	7942      	ldrb	r2, [r0, #5]
 800275a:	4604      	mov	r4, r0
 800275c:	2a01      	cmp	r2, #1
 800275e:	d060      	beq.n	8002822 <HAL_DAC_Start_DMA+0xd6>
 8002760:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002762:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdac);
 8002764:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002766:	2202      	movs	r2, #2
 8002768:	7102      	strb	r2, [r0, #4]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800276a:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 800276c:	bb3e      	cbnz	r6, 80027be <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800276e:	6880      	ldr	r0, [r0, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002770:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002774:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 8002828 <HAL_DAC_Start_DMA+0xdc>
 8002778:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800277c:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 800282c <HAL_DAC_Start_DMA+0xe0>
 8002780:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002784:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 8002830 <HAL_DAC_Start_DMA+0xe4>
 8002788:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800278c:	602a      	str	r2, [r5, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800278e:	2f00      	cmp	r7, #0
 8002790:	d044      	beq.n	800281c <HAL_DAC_Start_DMA+0xd0>
 8002792:	2f04      	cmp	r7, #4
 8002794:	d137      	bne.n	8002806 <HAL_DAC_Start_DMA+0xba>
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
        break;
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002796:	f105 020c 	add.w	r2, r5, #12
  }

  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800279a:	682f      	ldr	r7, [r5, #0]
 800279c:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
 80027a0:	602f      	str	r7, [r5, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80027a2:	f000 fce7 	bl	8003174 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80027a6:	2300      	movs	r3, #0
 80027a8:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80027aa:	bb38      	cbnz	r0, 80027fc <HAL_DAC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80027ac:	6822      	ldr	r2, [r4, #0]
 80027ae:	f006 0110 	and.w	r1, r6, #16
 80027b2:	2301      	movs	r3, #1
 80027b4:	6814      	ldr	r4, [r2, #0]
 80027b6:	408b      	lsls	r3, r1
 80027b8:	4323      	orrs	r3, r4
 80027ba:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 80027bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80027be:	68c0      	ldr	r0, [r0, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80027c0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80027c4:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8002834 <HAL_DAC_Start_DMA+0xe8>
 80027c8:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80027cc:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8002838 <HAL_DAC_Start_DMA+0xec>
 80027d0:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80027d4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800283c <HAL_DAC_Start_DMA+0xf0>
 80027d8:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80027dc:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 80027de:	b1d7      	cbz	r7, 8002816 <HAL_DAC_Start_DMA+0xca>
 80027e0:	2f04      	cmp	r7, #4
 80027e2:	d113      	bne.n	800280c <HAL_DAC_Start_DMA+0xc0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80027e4:	f105 0218 	add.w	r2, r5, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027e8:	682f      	ldr	r7, [r5, #0]
 80027ea:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 80027ee:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80027f0:	f000 fcc0 	bl	8003174 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 80027f4:	2300      	movs	r3, #0
 80027f6:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d0d7      	beq.n	80027ac <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80027fc:	6923      	ldr	r3, [r4, #16]
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	6123      	str	r3, [r4, #16]
}
 8002804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002806:	f105 0210 	add.w	r2, r5, #16
  if (Channel == DAC_CHANNEL_1)
 800280a:	e7c6      	b.n	800279a <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800280c:	f105 021c 	add.w	r2, r5, #28
  if (Channel == DAC_CHANNEL_1)
 8002810:	e7ea      	b.n	80027e8 <HAL_DAC_Start_DMA+0x9c>
    return HAL_ERROR;
 8002812:	2001      	movs	r0, #1
}
 8002814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002816:	f105 0214 	add.w	r2, r5, #20
  if (Channel == DAC_CHANNEL_1)
 800281a:	e7e5      	b.n	80027e8 <HAL_DAC_Start_DMA+0x9c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800281c:	f105 0208 	add.w	r2, r5, #8
  if (Channel == DAC_CHANNEL_1)
 8002820:	e7bb      	b.n	800279a <HAL_DAC_Start_DMA+0x4e>
  __HAL_LOCK(hdac);
 8002822:	2002      	movs	r0, #2
}
 8002824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002826:	bf00      	nop
 8002828:	08002845 	.word	0x08002845
 800282c:	08002859 	.word	0x08002859
 8002830:	08002869 	.word	0x08002869
 8002834:	08002a41 	.word	0x08002a41
 8002838:	08002a55 	.word	0x08002a55
 800283c:	08002a65 	.word	0x08002a65

08002840 <HAL_DAC_ConvCpltCallbackCh1>:
  * @brief  Conversion complete callback in non-blocking mode for Channel1
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop

08002844 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002844:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002846:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002848:	4620      	mov	r0, r4
 800284a:	f7ff fff9 	bl	8002840 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800284e:	2301      	movs	r3, #1
 8002850:	7123      	strb	r3, [r4, #4]
}
 8002852:	bd10      	pop	{r4, pc}

08002854 <HAL_DAC_ConvHalfCpltCallbackCh1>:
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop

08002858 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002858:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800285a:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800285c:	f7ff fffa 	bl	8002854 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002860:	bd08      	pop	{r3, pc}
 8002862:	bf00      	nop

08002864 <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop

08002868 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002868:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286a:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800286c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800286e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002876:	f7ff fff5 	bl	8002864 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800287a:	2301      	movs	r3, #1
 800287c:	7123      	strb	r3, [r4, #4]
}
 800287e:	bd10      	pop	{r4, pc}

08002880 <HAL_DAC_DMAUnderrunCallbackCh1>:
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <HAL_DAC_IRQHandler>:
  uint32_t itsource = hdac->Instance->CR;
 8002884:	6803      	ldr	r3, [r0, #0]
{
 8002886:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = hdac->Instance->CR;
 8002888:	681d      	ldr	r5, [r3, #0]
{
 800288a:	4604      	mov	r4, r0
  uint32_t itflag   = hdac->Instance->SR;
 800288c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800288e:	04aa      	lsls	r2, r5, #18
 8002890:	d501      	bpl.n	8002896 <HAL_DAC_IRQHandler+0x12>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002892:	04b1      	lsls	r1, r6, #18
 8002894:	d417      	bmi.n	80028c6 <HAL_DAC_IRQHandler+0x42>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002896:	00aa      	lsls	r2, r5, #2
 8002898:	d501      	bpl.n	800289e <HAL_DAC_IRQHandler+0x1a>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800289a:	00b3      	lsls	r3, r6, #2
 800289c:	d400      	bmi.n	80028a0 <HAL_DAC_IRQHandler+0x1c>
}
 800289e:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80028a0:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80028a8:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 80028aa:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80028ac:	6922      	ldr	r2, [r4, #16]
 80028ae:	f042 0202 	orr.w	r2, r2, #2
 80028b2:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80028b4:	6359      	str	r1, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
}
 80028bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80028c0:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80028c2:	f000 b8db 	b.w	8002a7c <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 80028c6:	2204      	movs	r2, #4
 80028c8:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80028ca:	6902      	ldr	r2, [r0, #16]
 80028cc:	f042 0201 	orr.w	r2, r2, #1
 80028d0:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80028d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028d6:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028de:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80028e0:	f7ff ffce 	bl	8002880 <HAL_DAC_DMAUnderrunCallbackCh1>
 80028e4:	e7d7      	b.n	8002896 <HAL_DAC_IRQHandler+0x12>
 80028e6:	bf00      	nop

080028e8 <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 80028e8:	2800      	cmp	r0, #0
 80028ea:	f000 8086 	beq.w	80029fa <HAL_DAC_ConfigChannel+0x112>
{
 80028ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028f2:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 80028f4:	2900      	cmp	r1, #0
 80028f6:	d04d      	beq.n	8002994 <HAL_DAC_ConfigChannel+0xac>
  __HAL_LOCK(hdac);
 80028f8:	7943      	ldrb	r3, [r0, #5]
 80028fa:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80028fc:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d079      	beq.n	80029f6 <HAL_DAC_ConfigChannel+0x10e>
 8002902:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002904:	2904      	cmp	r1, #4
 8002906:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8002908:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800290a:	f04f 0302 	mov.w	r3, #2
 800290e:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002910:	d043      	beq.n	800299a <HAL_DAC_ConfigChannel+0xb2>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002912:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8002916:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002918:	6928      	ldr	r0, [r5, #16]
 800291a:	2801      	cmp	r0, #1
 800291c:	d108      	bne.n	8002930 <HAL_DAC_ConfigChannel+0x48>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800291e:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 8002920:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002922:	4090      	lsls	r0, r2
 8002924:	ea26 0600 	bic.w	r6, r6, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002928:	6968      	ldr	r0, [r5, #20]
 800292a:	4090      	lsls	r0, r2
 800292c:	4330      	orrs	r0, r6
    hdac->Instance->CCR = tmpreg1;
 800292e:	6398      	str	r0, [r3, #56]	@ 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002930:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 8002932:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002934:	4090      	lsls	r0, r2
 8002936:	ea26 0600 	bic.w	r6, r6, r0
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800293a:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800293e:	2801      	cmp	r0, #1
 8002940:	d055      	beq.n	80029ee <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002942:	2802      	cmp	r0, #2
 8002944:	d055      	beq.n	80029f2 <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002946:	fab7 f087 	clz	r0, r7
 800294a:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800294c:	4339      	orrs	r1, r7
 800294e:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002950:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002952:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002956:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002958:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800295a:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800295c:	4331      	orrs	r1, r6
  hdac->State = HAL_DAC_STATE_READY;
 800295e:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 8002960:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002968:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800296c:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800296e:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8002970:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002972:	ea21 0105 	bic.w	r1, r1, r5
  __HAL_UNLOCK(hdac);
 8002976:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002978:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800297a:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 800297c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800297e:	fa00 f102 	lsl.w	r1, r0, r2
 8002982:	681a      	ldr	r2, [r3, #0]
  return status;
 8002984:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002986:	ea22 0201 	bic.w	r2, r2, r1
 800298a:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800298c:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 800298e:	7165      	strb	r5, [r4, #5]
}
 8002990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002994:	2001      	movs	r0, #1
}
 8002996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 800299a:	f7fe fec5 	bl	8001728 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800299e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80029a0:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80029a2:	b9be      	cbnz	r6, 80029d4 <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029a4:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8002a38 <HAL_DAC_ConfigChannel+0x150>
 80029a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029aa:	ea12 0f08 	tst.w	r2, r8
 80029ae:	d026      	beq.n	80029fe <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029b0:	f7fe feba 	bl	8001728 <HAL_GetTick>
 80029b4:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029b6:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029b8:	2801      	cmp	r0, #1
 80029ba:	d9f5      	bls.n	80029a8 <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029be:	ea12 0f08 	tst.w	r2, r8
 80029c2:	d0f1      	beq.n	80029a8 <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80029c4:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80029c6:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 80029c8:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80029ca:	f043 0308 	orr.w	r3, r3, #8
 80029ce:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80029d0:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 80029d2:	e7dd      	b.n	8002990 <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80029d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029d6:	2a00      	cmp	r2, #0
 80029d8:	da2a      	bge.n	8002a30 <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029da:	f7fe fea5 	bl	8001728 <HAL_GetTick>
 80029de:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80029e0:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029e2:	2801      	cmp	r0, #1
 80029e4:	d9f6      	bls.n	80029d4 <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80029e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029e8:	2a00      	cmp	r2, #0
 80029ea:	daf3      	bge.n	80029d4 <HAL_DAC_ConfigChannel+0xec>
 80029ec:	e7ea      	b.n	80029c4 <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 80029ee:	2000      	movs	r0, #0
 80029f0:	e7ac      	b.n	800294c <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 80029f2:	2001      	movs	r0, #1
 80029f4:	e7aa      	b.n	800294c <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 80029f6:	2002      	movs	r0, #2
 80029f8:	e7ca      	b.n	8002990 <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 80029fa:	2001      	movs	r0, #1
}
 80029fc:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029fe:	69aa      	ldr	r2, [r5, #24]
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002a02:	f006 0210 	and.w	r2, r6, #16
 8002a06:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8002a0a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002a0c:	4090      	lsls	r0, r2
 8002a0e:	ea21 0100 	bic.w	r1, r1, r0
 8002a12:	69e8      	ldr	r0, [r5, #28]
 8002a14:	4090      	lsls	r0, r2
 8002a16:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002a18:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002a1a:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002a1c:	4090      	lsls	r0, r2
 8002a1e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002a20:	ea21 0100 	bic.w	r1, r1, r0
 8002a24:	6a28      	ldr	r0, [r5, #32]
 8002a26:	4090      	lsls	r0, r2
 8002a28:	4301      	orrs	r1, r0
 8002a2a:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002a2c:	6829      	ldr	r1, [r5, #0]
 8002a2e:	e773      	b.n	8002918 <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a30:	69aa      	ldr	r2, [r5, #24]
 8002a32:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a34:	e7e5      	b.n	8002a02 <HAL_DAC_ConfigChannel+0x11a>
 8002a36:	bf00      	nop
 8002a38:	20008000 	.word	0x20008000

08002a3c <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop

08002a40 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a40:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a42:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002a44:	4620      	mov	r0, r4
 8002a46:	f7ff fff9 	bl	8002a3c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	7123      	strb	r3, [r4, #4]
}
 8002a4e:	bd10      	pop	{r4, pc}

08002a50 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop

08002a54 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002a54:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002a56:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002a58:	f7ff fffa 	bl	8002a50 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a5c:	bd08      	pop	{r3, pc}
 8002a5e:	bf00      	nop

08002a60 <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop

08002a64 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002a64:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a66:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a68:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002a6a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002a72:	f7ff fff5 	bl	8002a60 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a76:	2301      	movs	r3, #1
 8002a78:	7123      	strb	r3, [r4, #4]
}
 8002a7a:	bd10      	pop	{r4, pc}

08002a7c <HAL_DACEx_DMAUnderrunCallbackCh2>:
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop

08002a80 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a80:	4936      	ldr	r1, [pc, #216]	@ (8002b5c <DMA_CalcBaseAndBitshift+0xdc>)
{
 8002a82:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a84:	6803      	ldr	r3, [r0, #0]
 8002a86:	428b      	cmp	r3, r1
 8002a88:	d033      	beq.n	8002af2 <DMA_CalcBaseAndBitshift+0x72>
 8002a8a:	3118      	adds	r1, #24
 8002a8c:	1a59      	subs	r1, r3, r1
 8002a8e:	fab1 f181 	clz	r1, r1
 8002a92:	0949      	lsrs	r1, r1, #5
 8002a94:	bb69      	cbnz	r1, 8002af2 <DMA_CalcBaseAndBitshift+0x72>
 8002a96:	4832      	ldr	r0, [pc, #200]	@ (8002b60 <DMA_CalcBaseAndBitshift+0xe0>)
 8002a98:	4283      	cmp	r3, r0
 8002a9a:	d03e      	beq.n	8002b1a <DMA_CalcBaseAndBitshift+0x9a>
 8002a9c:	3018      	adds	r0, #24
 8002a9e:	4283      	cmp	r3, r0
 8002aa0:	d03e      	beq.n	8002b20 <DMA_CalcBaseAndBitshift+0xa0>
 8002aa2:	3018      	adds	r0, #24
 8002aa4:	4283      	cmp	r3, r0
 8002aa6:	d034      	beq.n	8002b12 <DMA_CalcBaseAndBitshift+0x92>
 8002aa8:	3018      	adds	r0, #24
 8002aaa:	4283      	cmp	r3, r0
 8002aac:	d03b      	beq.n	8002b26 <DMA_CalcBaseAndBitshift+0xa6>
 8002aae:	3018      	adds	r0, #24
 8002ab0:	4283      	cmp	r3, r0
 8002ab2:	d03e      	beq.n	8002b32 <DMA_CalcBaseAndBitshift+0xb2>
 8002ab4:	3018      	adds	r0, #24
 8002ab6:	4283      	cmp	r3, r0
 8002ab8:	d02a      	beq.n	8002b10 <DMA_CalcBaseAndBitshift+0x90>
 8002aba:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002abe:	4283      	cmp	r3, r0
 8002ac0:	d035      	beq.n	8002b2e <DMA_CalcBaseAndBitshift+0xae>
 8002ac2:	4928      	ldr	r1, [pc, #160]	@ (8002b64 <DMA_CalcBaseAndBitshift+0xe4>)
 8002ac4:	428b      	cmp	r3, r1
 8002ac6:	d031      	beq.n	8002b2c <DMA_CalcBaseAndBitshift+0xac>
 8002ac8:	3118      	adds	r1, #24
 8002aca:	428b      	cmp	r3, r1
 8002acc:	d034      	beq.n	8002b38 <DMA_CalcBaseAndBitshift+0xb8>
 8002ace:	3118      	adds	r1, #24
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	d034      	beq.n	8002b3e <DMA_CalcBaseAndBitshift+0xbe>
 8002ad4:	3118      	adds	r1, #24
 8002ad6:	428b      	cmp	r3, r1
 8002ad8:	d034      	beq.n	8002b44 <DMA_CalcBaseAndBitshift+0xc4>
 8002ada:	3118      	adds	r1, #24
 8002adc:	428b      	cmp	r3, r1
 8002ade:	d034      	beq.n	8002b4a <DMA_CalcBaseAndBitshift+0xca>
 8002ae0:	3118      	adds	r1, #24
 8002ae2:	428b      	cmp	r3, r1
 8002ae4:	d034      	beq.n	8002b50 <DMA_CalcBaseAndBitshift+0xd0>
 8002ae6:	3118      	adds	r1, #24
 8002ae8:	428b      	cmp	r3, r1
 8002aea:	d034      	beq.n	8002b56 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002aec:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8002af0:	e011      	b.n	8002b16 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	491c      	ldr	r1, [pc, #112]	@ (8002b68 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002af6:	481d      	ldr	r0, [pc, #116]	@ (8002b6c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002af8:	3b10      	subs	r3, #16
 8002afa:	fba1 1303 	umull	r1, r3, r1, r3
{
 8002afe:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b00:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b02:	4c1b      	ldr	r4, [pc, #108]	@ (8002b70 <DMA_CalcBaseAndBitshift+0xf0>)
 8002b04:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8002b06:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002b0a:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 8002b0e:	4770      	bx	lr
 8002b10:	2116      	movs	r1, #22
 8002b12:	4818      	ldr	r0, [pc, #96]	@ (8002b74 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b14:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002b16:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8002b18:	4770      	bx	lr
 8002b1a:	2110      	movs	r1, #16
 8002b1c:	4813      	ldr	r0, [pc, #76]	@ (8002b6c <DMA_CalcBaseAndBitshift+0xec>)
 8002b1e:	e7f9      	b.n	8002b14 <DMA_CalcBaseAndBitshift+0x94>
 8002b20:	2116      	movs	r1, #22
 8002b22:	4812      	ldr	r0, [pc, #72]	@ (8002b6c <DMA_CalcBaseAndBitshift+0xec>)
 8002b24:	e7f6      	b.n	8002b14 <DMA_CalcBaseAndBitshift+0x94>
 8002b26:	2106      	movs	r1, #6
 8002b28:	4812      	ldr	r0, [pc, #72]	@ (8002b74 <DMA_CalcBaseAndBitshift+0xf4>)
 8002b2a:	e7f3      	b.n	8002b14 <DMA_CalcBaseAndBitshift+0x94>
 8002b2c:	2106      	movs	r1, #6
 8002b2e:	4812      	ldr	r0, [pc, #72]	@ (8002b78 <DMA_CalcBaseAndBitshift+0xf8>)
 8002b30:	e7f0      	b.n	8002b14 <DMA_CalcBaseAndBitshift+0x94>
 8002b32:	2110      	movs	r1, #16
 8002b34:	480f      	ldr	r0, [pc, #60]	@ (8002b74 <DMA_CalcBaseAndBitshift+0xf4>)
 8002b36:	e7ed      	b.n	8002b14 <DMA_CalcBaseAndBitshift+0x94>
 8002b38:	2110      	movs	r1, #16
 8002b3a:	480f      	ldr	r0, [pc, #60]	@ (8002b78 <DMA_CalcBaseAndBitshift+0xf8>)
 8002b3c:	e7ea      	b.n	8002b14 <DMA_CalcBaseAndBitshift+0x94>
 8002b3e:	2116      	movs	r1, #22
 8002b40:	480d      	ldr	r0, [pc, #52]	@ (8002b78 <DMA_CalcBaseAndBitshift+0xf8>)
 8002b42:	e7e7      	b.n	8002b14 <DMA_CalcBaseAndBitshift+0x94>
 8002b44:	2100      	movs	r1, #0
 8002b46:	480d      	ldr	r0, [pc, #52]	@ (8002b7c <DMA_CalcBaseAndBitshift+0xfc>)
 8002b48:	e7e4      	b.n	8002b14 <DMA_CalcBaseAndBitshift+0x94>
 8002b4a:	2106      	movs	r1, #6
 8002b4c:	480b      	ldr	r0, [pc, #44]	@ (8002b7c <DMA_CalcBaseAndBitshift+0xfc>)
 8002b4e:	e7e1      	b.n	8002b14 <DMA_CalcBaseAndBitshift+0x94>
 8002b50:	2110      	movs	r1, #16
 8002b52:	480a      	ldr	r0, [pc, #40]	@ (8002b7c <DMA_CalcBaseAndBitshift+0xfc>)
 8002b54:	e7de      	b.n	8002b14 <DMA_CalcBaseAndBitshift+0x94>
 8002b56:	2116      	movs	r1, #22
 8002b58:	4808      	ldr	r0, [pc, #32]	@ (8002b7c <DMA_CalcBaseAndBitshift+0xfc>)
 8002b5a:	e7db      	b.n	8002b14 <DMA_CalcBaseAndBitshift+0x94>
 8002b5c:	40020010 	.word	0x40020010
 8002b60:	40020040 	.word	0x40020040
 8002b64:	40020428 	.word	0x40020428
 8002b68:	aaaaaaab 	.word	0xaaaaaaab
 8002b6c:	40020000 	.word	0x40020000
 8002b70:	0800d594 	.word	0x0800d594
 8002b74:	40020004 	.word	0x40020004
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020404 	.word	0x40020404

08002b80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002b80:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b82:	4b28      	ldr	r3, [pc, #160]	@ (8002c24 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8002b84:	4928      	ldr	r1, [pc, #160]	@ (8002c28 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
{
 8002b86:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b88:	4d28      	ldr	r5, [pc, #160]	@ (8002c2c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8002b8a:	4c29      	ldr	r4, [pc, #164]	@ (8002c30 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8002b8c:	42aa      	cmp	r2, r5
 8002b8e:	bf18      	it	ne
 8002b90:	429a      	cmpne	r2, r3
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	428a      	cmp	r2, r1
 8002b9a:	bf08      	it	eq
 8002b9c:	f043 0301 	orreq.w	r3, r3, #1
 8002ba0:	3128      	adds	r1, #40	@ 0x28
 8002ba2:	42a2      	cmp	r2, r4
 8002ba4:	bf08      	it	eq
 8002ba6:	f043 0301 	orreq.w	r3, r3, #1
 8002baa:	3428      	adds	r4, #40	@ 0x28
 8002bac:	428a      	cmp	r2, r1
 8002bae:	bf08      	it	eq
 8002bb0:	f043 0301 	orreq.w	r3, r3, #1
 8002bb4:	3128      	adds	r1, #40	@ 0x28
 8002bb6:	42a2      	cmp	r2, r4
 8002bb8:	bf08      	it	eq
 8002bba:	f043 0301 	orreq.w	r3, r3, #1
 8002bbe:	428a      	cmp	r2, r1
 8002bc0:	bf08      	it	eq
 8002bc2:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002bc6:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002bc8:	b913      	cbnz	r3, 8002bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8002bca:	4b1a      	ldr	r3, [pc, #104]	@ (8002c34 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d111      	bne.n	8002bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002bd0:	f1a1 0308 	sub.w	r3, r1, #8
 8002bd4:	4c18      	ldr	r4, [pc, #96]	@ (8002c38 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002bd6:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bd8:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002bda:	fba4 4303 	umull	r4, r3, r4, r3
 8002bde:	4c18      	ldr	r4, [pc, #96]	@ (8002c40 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8002be0:	091d      	lsrs	r5, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002be2:	eb02 1313 	add.w	r3, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002be6:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002be8:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bea:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002bec:	e9c0 3418 	strd	r3, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002bf0:	bc30      	pop	{r4, r5}
 8002bf2:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002bf4:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002bf8:	4912      	ldr	r1, [pc, #72]	@ (8002c44 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002bfa:	4c13      	ldr	r4, [pc, #76]	@ (8002c48 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002bfc:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002bfe:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002c02:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c04:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002c08:	d908      	bls.n	8002c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c0a:	f003 041f 	and.w	r4, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c4c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c10:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002c12:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c14:	40a1      	lsls	r1, r4
 8002c16:	4c0e      	ldr	r4, [pc, #56]	@ (8002c50 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002c18:	0093      	lsls	r3, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c1a:	e7e6      	b.n	8002bea <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
      stream_number += 8U;
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	461c      	mov	r4, r3
 8002c20:	e7f5      	b.n	8002c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
 8002c22:	bf00      	nop
 8002c24:	58025408 	.word	0x58025408
 8002c28:	58025430 	.word	0x58025430
 8002c2c:	5802541c 	.word	0x5802541c
 8002c30:	58025444 	.word	0x58025444
 8002c34:	58025494 	.word	0x58025494
 8002c38:	cccccccd 	.word	0xcccccccd
 8002c3c:	16009600 	.word	0x16009600
 8002c40:	58025880 	.word	0x58025880
 8002c44:	bffdfbf0 	.word	0xbffdfbf0
 8002c48:	aaaaaaab 	.word	0xaaaaaaab
 8002c4c:	10008200 	.word	0x10008200
 8002c50:	40020880 	.word	0x40020880

08002c54 <HAL_DMA_Init>:
{
 8002c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c58:	4605      	mov	r5, r0
 8002c5a:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7fe fd64 	bl	8001728 <HAL_GetTick>
  if(hdma == NULL)
 8002c60:	2d00      	cmp	r5, #0
 8002c62:	f000 81a1 	beq.w	8002fa8 <HAL_DMA_Init+0x354>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c66:	682c      	ldr	r4, [r5, #0]
 8002c68:	4606      	mov	r6, r0
 8002c6a:	4bac      	ldr	r3, [pc, #688]	@ (8002f1c <HAL_DMA_Init+0x2c8>)
 8002c6c:	4aac      	ldr	r2, [pc, #688]	@ (8002f20 <HAL_DMA_Init+0x2cc>)
 8002c6e:	4294      	cmp	r4, r2
 8002c70:	bf18      	it	ne
 8002c72:	429c      	cmpne	r4, r3
 8002c74:	f102 0218 	add.w	r2, r2, #24
 8002c78:	bf0c      	ite	eq
 8002c7a:	2301      	moveq	r3, #1
 8002c7c:	2300      	movne	r3, #0
 8002c7e:	4294      	cmp	r4, r2
 8002c80:	bf08      	it	eq
 8002c82:	f043 0301 	orreq.w	r3, r3, #1
 8002c86:	3218      	adds	r2, #24
 8002c88:	4294      	cmp	r4, r2
 8002c8a:	bf08      	it	eq
 8002c8c:	f043 0301 	orreq.w	r3, r3, #1
 8002c90:	3218      	adds	r2, #24
 8002c92:	4294      	cmp	r4, r2
 8002c94:	bf08      	it	eq
 8002c96:	f043 0301 	orreq.w	r3, r3, #1
 8002c9a:	3218      	adds	r2, #24
 8002c9c:	4294      	cmp	r4, r2
 8002c9e:	bf08      	it	eq
 8002ca0:	f043 0301 	orreq.w	r3, r3, #1
 8002ca4:	3218      	adds	r2, #24
 8002ca6:	4294      	cmp	r4, r2
 8002ca8:	bf08      	it	eq
 8002caa:	f043 0301 	orreq.w	r3, r3, #1
 8002cae:	3218      	adds	r2, #24
 8002cb0:	4294      	cmp	r4, r2
 8002cb2:	bf08      	it	eq
 8002cb4:	f043 0301 	orreq.w	r3, r3, #1
 8002cb8:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002cbc:	4294      	cmp	r4, r2
 8002cbe:	bf08      	it	eq
 8002cc0:	f043 0301 	orreq.w	r3, r3, #1
 8002cc4:	3218      	adds	r2, #24
 8002cc6:	4294      	cmp	r4, r2
 8002cc8:	bf08      	it	eq
 8002cca:	f043 0301 	orreq.w	r3, r3, #1
 8002cce:	3218      	adds	r2, #24
 8002cd0:	4294      	cmp	r4, r2
 8002cd2:	bf08      	it	eq
 8002cd4:	f043 0301 	orreq.w	r3, r3, #1
 8002cd8:	3218      	adds	r2, #24
 8002cda:	4294      	cmp	r4, r2
 8002cdc:	bf08      	it	eq
 8002cde:	f043 0301 	orreq.w	r3, r3, #1
 8002ce2:	3218      	adds	r2, #24
 8002ce4:	4294      	cmp	r4, r2
 8002ce6:	bf08      	it	eq
 8002ce8:	f043 0301 	orreq.w	r3, r3, #1
 8002cec:	3218      	adds	r2, #24
 8002cee:	4294      	cmp	r4, r2
 8002cf0:	bf08      	it	eq
 8002cf2:	f043 0301 	orreq.w	r3, r3, #1
 8002cf6:	3218      	adds	r2, #24
 8002cf8:	4294      	cmp	r4, r2
 8002cfa:	bf08      	it	eq
 8002cfc:	f043 0301 	orreq.w	r3, r3, #1
 8002d00:	b91b      	cbnz	r3, 8002d0a <HAL_DMA_Init+0xb6>
 8002d02:	4b88      	ldr	r3, [pc, #544]	@ (8002f24 <HAL_DMA_Init+0x2d0>)
 8002d04:	429c      	cmp	r4, r3
 8002d06:	f040 8196 	bne.w	8003036 <HAL_DMA_Init+0x3e2>
    __HAL_UNLOCK(hdma);
 8002d0a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d0c:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8002d0e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d12:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6023      	str	r3, [r4, #0]
 8002d1e:	e006      	b.n	8002d2e <HAL_DMA_Init+0xda>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d20:	f7fe fd02 	bl	8001728 <HAL_GetTick>
 8002d24:	1b80      	subs	r0, r0, r6
 8002d26:	2805      	cmp	r0, #5
 8002d28:	f200 8142 	bhi.w	8002fb0 <HAL_DMA_Init+0x35c>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d2c:	682c      	ldr	r4, [r5, #0]
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	07df      	lsls	r7, r3, #31
 8002d32:	d4f5      	bmi.n	8002d20 <HAL_DMA_Init+0xcc>
    registerValue |=  hdma->Init.Direction           |
 8002d34:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d38:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8002d3a:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3c:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002d3e:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6969      	ldr	r1, [r5, #20]
 8002d44:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d46:	69e9      	ldr	r1, [r5, #28]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d4c:	4976      	ldr	r1, [pc, #472]	@ (8002f28 <HAL_DMA_Init+0x2d4>)
 8002d4e:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8002d50:	6a28      	ldr	r0, [r5, #32]
 8002d52:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002d54:	4875      	ldr	r0, [pc, #468]	@ (8002f2c <HAL_DMA_Init+0x2d8>)
    registerValue |=  hdma->Init.Direction           |
 8002d56:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d58:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8002d5a:	2904      	cmp	r1, #4
 8002d5c:	f000 813d 	beq.w	8002fda <HAL_DMA_Init+0x386>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002d60:	6800      	ldr	r0, [r0, #0]
 8002d62:	f36f 000f 	bfc	r0, #0, #16
 8002d66:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8002d6a:	f080 80f1 	bcs.w	8002f50 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002d6e:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d70:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d72:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002d76:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d78:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f7ff fe80 	bl	8002a80 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d80:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002d82:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d84:	496a      	ldr	r1, [pc, #424]	@ (8002f30 <HAL_DMA_Init+0x2dc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d86:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d8a:	4f6a      	ldr	r7, [pc, #424]	@ (8002f34 <HAL_DMA_Init+0x2e0>)
 8002d8c:	1a61      	subs	r1, r4, r1
 8002d8e:	4e6a      	ldr	r6, [pc, #424]	@ (8002f38 <HAL_DMA_Init+0x2e4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d90:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d92:	4a6a      	ldr	r2, [pc, #424]	@ (8002f3c <HAL_DMA_Init+0x2e8>)
 8002d94:	fab1 f181 	clz	r1, r1
 8002d98:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d9a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d9c:	eba4 0a02 	sub.w	sl, r4, r2
 8002da0:	4b67      	ldr	r3, [pc, #412]	@ (8002f40 <HAL_DMA_Init+0x2ec>)
 8002da2:	0949      	lsrs	r1, r1, #5
 8002da4:	4a5e      	ldr	r2, [pc, #376]	@ (8002f20 <HAL_DMA_Init+0x2cc>)
 8002da6:	faba fa8a 	clz	sl, sl
 8002daa:	eba4 0903 	sub.w	r9, r4, r3
 8002dae:	4b5b      	ldr	r3, [pc, #364]	@ (8002f1c <HAL_DMA_Init+0x2c8>)
 8002db0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8002db4:	fab7 f787 	clz	r7, r7
 8002db8:	4294      	cmp	r4, r2
 8002dba:	bf18      	it	ne
 8002dbc:	429c      	cmpne	r4, r3
 8002dbe:	f102 0218 	add.w	r2, r2, #24
 8002dc2:	fab9 f989 	clz	r9, r9
 8002dc6:	eba4 0606 	sub.w	r6, r4, r6
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002dd4:	fab6 f686 	clz	r6, r6
 8002dd8:	4294      	cmp	r4, r2
 8002dda:	bf08      	it	eq
 8002ddc:	f043 0301 	orreq.w	r3, r3, #1
 8002de0:	3218      	adds	r2, #24
 8002de2:	097f      	lsrs	r7, r7, #5
 8002de4:	4294      	cmp	r4, r2
 8002de6:	bf08      	it	eq
 8002de8:	f043 0301 	orreq.w	r3, r3, #1
 8002dec:	3218      	adds	r2, #24
 8002dee:	0976      	lsrs	r6, r6, #5
 8002df0:	4294      	cmp	r4, r2
 8002df2:	bf08      	it	eq
 8002df4:	f043 0301 	orreq.w	r3, r3, #1
 8002df8:	3218      	adds	r2, #24
 8002dfa:	4294      	cmp	r4, r2
 8002dfc:	bf08      	it	eq
 8002dfe:	f043 0301 	orreq.w	r3, r3, #1
 8002e02:	3218      	adds	r2, #24
 8002e04:	4294      	cmp	r4, r2
 8002e06:	bf08      	it	eq
 8002e08:	f043 0301 	orreq.w	r3, r3, #1
 8002e0c:	3218      	adds	r2, #24
 8002e0e:	4294      	cmp	r4, r2
 8002e10:	bf08      	it	eq
 8002e12:	f043 0301 	orreq.w	r3, r3, #1
 8002e16:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002e1a:	4294      	cmp	r4, r2
 8002e1c:	bf08      	it	eq
 8002e1e:	f043 0301 	orreq.w	r3, r3, #1
 8002e22:	3218      	adds	r2, #24
 8002e24:	4294      	cmp	r4, r2
 8002e26:	bf08      	it	eq
 8002e28:	f043 0301 	orreq.w	r3, r3, #1
 8002e2c:	3218      	adds	r2, #24
 8002e2e:	4294      	cmp	r4, r2
 8002e30:	bf08      	it	eq
 8002e32:	f043 0301 	orreq.w	r3, r3, #1
 8002e36:	3218      	adds	r2, #24
 8002e38:	4294      	cmp	r4, r2
 8002e3a:	bf08      	it	eq
 8002e3c:	f043 0301 	orreq.w	r3, r3, #1
 8002e40:	3218      	adds	r2, #24
 8002e42:	4294      	cmp	r4, r2
 8002e44:	bf08      	it	eq
 8002e46:	f043 0301 	orreq.w	r3, r3, #1
 8002e4a:	3218      	adds	r2, #24
 8002e4c:	4294      	cmp	r4, r2
 8002e4e:	bf08      	it	eq
 8002e50:	f043 0301 	orreq.w	r3, r3, #1
 8002e54:	3218      	adds	r2, #24
 8002e56:	4294      	cmp	r4, r2
 8002e58:	bf08      	it	eq
 8002e5a:	f043 0301 	orreq.w	r3, r3, #1
 8002e5e:	3218      	adds	r2, #24
 8002e60:	4294      	cmp	r4, r2
 8002e62:	bf08      	it	eq
 8002e64:	f043 0301 	orreq.w	r3, r3, #1
 8002e68:	4a36      	ldr	r2, [pc, #216]	@ (8002f44 <HAL_DMA_Init+0x2f0>)
 8002e6a:	ea4a 0303 	orr.w	r3, sl, r3
 8002e6e:	eba4 0802 	sub.w	r8, r4, r2
 8002e72:	323c      	adds	r2, #60	@ 0x3c
 8002e74:	430b      	orrs	r3, r1
 8002e76:	fab8 f888 	clz	r8, r8
 8002e7a:	eba4 0b02 	sub.w	fp, r4, r2
 8002e7e:	3214      	adds	r2, #20
 8002e80:	ea49 0303 	orr.w	r3, r9, r3
 8002e84:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002e88:	fabb fb8b 	clz	fp, fp
 8002e8c:	1aa2      	subs	r2, r4, r2
 8002e8e:	ea48 0303 	orr.w	r3, r8, r3
 8002e92:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8002e96:	fab2 f282 	clz	r2, r2
 8002e9a:	433b      	orrs	r3, r7
 8002e9c:	0952      	lsrs	r2, r2, #5
 8002e9e:	4333      	orrs	r3, r6
 8002ea0:	9201      	str	r2, [sp, #4]
 8002ea2:	ea5b 0303 	orrs.w	r3, fp, r3
 8002ea6:	d100      	bne.n	8002eaa <HAL_DMA_Init+0x256>
 8002ea8:	b382      	cbz	r2, 8002f0c <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002eaa:	4628      	mov	r0, r5
 8002eac:	9100      	str	r1, [sp, #0]
 8002eae:	f7ff fe67 	bl	8002b80 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002eb2:	68ab      	ldr	r3, [r5, #8]
 8002eb4:	9900      	ldr	r1, [sp, #0]
 8002eb6:	2b80      	cmp	r3, #128	@ 0x80
 8002eb8:	f000 8083 	beq.w	8002fc2 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ebc:	686a      	ldr	r2, [r5, #4]
 8002ebe:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002ec0:	b2d0      	uxtb	r0, r2
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ec2:	3a01      	subs	r2, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec4:	e9d5 4c19 	ldrd	r4, ip, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ec8:	2a07      	cmp	r2, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002eca:	6018      	str	r0, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ecc:	f8c4 c004 	str.w	ip, [r4, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ed0:	d87e      	bhi.n	8002fd0 <HAL_DMA_Init+0x37c>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ed2:	ea4a 0a01 	orr.w	sl, sl, r1
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002ed6:	1e44      	subs	r4, r0, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ed8:	ea49 090a 	orr.w	r9, r9, sl
 8002edc:	ea48 0809 	orr.w	r8, r8, r9
 8002ee0:	ea47 0708 	orr.w	r7, r7, r8
 8002ee4:	433e      	orrs	r6, r7
 8002ee6:	ea5b 0606 	orrs.w	r6, fp, r6
 8002eea:	d103      	bne.n	8002ef4 <HAL_DMA_Init+0x2a0>
 8002eec:	9b01      	ldr	r3, [sp, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 811d 	beq.w	800312e <HAL_DMA_Init+0x4da>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ef4:	4a14      	ldr	r2, [pc, #80]	@ (8002f48 <HAL_DMA_Init+0x2f4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002ef6:	4915      	ldr	r1, [pc, #84]	@ (8002f4c <HAL_DMA_Init+0x2f8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ef8:	4402      	add	r2, r0
 8002efa:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002efc:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002efe:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002f00:	40a3      	lsls	r3, r4
 8002f02:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
 8002f06:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f08:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f0a:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f0c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f10:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002f12:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 8002f16:	b003      	add	sp, #12
 8002f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f1c:	40020010 	.word	0x40020010
 8002f20:	40020028 	.word	0x40020028
 8002f24:	400204b8 	.word	0x400204b8
 8002f28:	fe10803f 	.word	0xfe10803f
 8002f2c:	5c001000 	.word	0x5c001000
 8002f30:	5802541c 	.word	0x5802541c
 8002f34:	58025458 	.word	0x58025458
 8002f38:	5802546c 	.word	0x5802546c
 8002f3c:	58025408 	.word	0x58025408
 8002f40:	58025430 	.word	0x58025430
 8002f44:	58025444 	.word	0x58025444
 8002f48:	1600963f 	.word	0x1600963f
 8002f4c:	58025940 	.word	0x58025940
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f50:	6868      	ldr	r0, [r5, #4]
 8002f52:	282e      	cmp	r0, #46	@ 0x2e
 8002f54:	d932      	bls.n	8002fbc <HAL_DMA_Init+0x368>
 8002f56:	383f      	subs	r0, #63	@ 0x3f
 8002f58:	2813      	cmp	r0, #19
 8002f5a:	d806      	bhi.n	8002f6a <HAL_DMA_Init+0x316>
 8002f5c:	4e7a      	ldr	r6, [pc, #488]	@ (8003148 <HAL_DMA_Init+0x4f4>)
 8002f5e:	fa26 f000 	lsr.w	r0, r6, r0
 8002f62:	07c0      	lsls	r0, r0, #31
 8002f64:	d501      	bpl.n	8002f6a <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 8002f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f6a:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f6c:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f6e:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f70:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002f74:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f78:	f47f aefe 	bne.w	8002d78 <HAL_DMA_Init+0x124>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f7c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8002f7e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002f80:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f82:	2800      	cmp	r0, #0
 8002f84:	f43f aef8 	beq.w	8002d78 <HAL_DMA_Init+0x124>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f88:	2a00      	cmp	r2, #0
 8002f8a:	d138      	bne.n	8002ffe <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 8002f8c:	2901      	cmp	r1, #1
 8002f8e:	d04d      	beq.n	800302c <HAL_DMA_Init+0x3d8>
 8002f90:	f031 0202 	bics.w	r2, r1, #2
 8002f94:	f47f aef0 	bne.w	8002d78 <HAL_DMA_Init+0x124>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f98:	01c2      	lsls	r2, r0, #7
 8002f9a:	f57f aeed 	bpl.w	8002d78 <HAL_DMA_Init+0x124>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f9e:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8002fa0:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fa2:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002fa4:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8002fa8:	2001      	movs	r0, #1
}
 8002faa:	b003      	add	sp, #12
 8002fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fb0:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fb2:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fb4:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fb6:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        return HAL_ERROR;
 8002fba:	e7f5      	b.n	8002fa8 <HAL_DMA_Init+0x354>
 8002fbc:	2828      	cmp	r0, #40	@ 0x28
 8002fbe:	d9d4      	bls.n	8002f6a <HAL_DMA_Init+0x316>
 8002fc0:	e7d1      	b.n	8002f66 <HAL_DMA_Init+0x312>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fc2:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fc4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8002fc6:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fca:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fcc:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fce:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fd6:	676b      	str	r3, [r5, #116]	@ 0x74
 8002fd8:	e798      	b.n	8002f0c <HAL_DMA_Init+0x2b8>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002fda:	6806      	ldr	r6, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fdc:	e9d5 070b 	ldrd	r0, r7, [r5, #44]	@ 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002fe0:	f36f 060f 	bfc	r6, #0, #16
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fe4:	4307      	orrs	r7, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002fe6:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fea:	ea43 0307 	orr.w	r3, r3, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002fee:	d2af      	bcs.n	8002f50 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ff0:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ff2:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ff4:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002ff8:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ffc:	e7bf      	b.n	8002f7e <HAL_DMA_Init+0x32a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ffe:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003002:	d004      	beq.n	800300e <HAL_DMA_Init+0x3ba>
    switch (hdma->Init.FIFOThreshold)
 8003004:	2902      	cmp	r1, #2
 8003006:	d9ca      	bls.n	8002f9e <HAL_DMA_Init+0x34a>
 8003008:	2903      	cmp	r1, #3
 800300a:	d0c5      	beq.n	8002f98 <HAL_DMA_Init+0x344>
 800300c:	e6b4      	b.n	8002d78 <HAL_DMA_Init+0x124>
    switch (hdma->Init.FIFOThreshold)
 800300e:	2903      	cmp	r1, #3
 8003010:	f63f aeb2 	bhi.w	8002d78 <HAL_DMA_Init+0x124>
 8003014:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <HAL_DMA_Init+0x3c8>)
 8003016:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800301a:	bf00      	nop
 800301c:	08002f9f 	.word	0x08002f9f
 8003020:	08002f99 	.word	0x08002f99
 8003024:	08002f9f 	.word	0x08002f9f
 8003028:	0800302d 	.word	0x0800302d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800302c:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8003030:	f47f aea2 	bne.w	8002d78 <HAL_DMA_Init+0x124>
 8003034:	e7b3      	b.n	8002f9e <HAL_DMA_Init+0x34a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003036:	4a45      	ldr	r2, [pc, #276]	@ (800314c <HAL_DMA_Init+0x4f8>)
 8003038:	4945      	ldr	r1, [pc, #276]	@ (8003150 <HAL_DMA_Init+0x4fc>)
 800303a:	4b46      	ldr	r3, [pc, #280]	@ (8003154 <HAL_DMA_Init+0x500>)
 800303c:	eba4 0a02 	sub.w	sl, r4, r2
 8003040:	1a61      	subs	r1, r4, r1
 8003042:	4f45      	ldr	r7, [pc, #276]	@ (8003158 <HAL_DMA_Init+0x504>)
 8003044:	eba4 0903 	sub.w	r9, r4, r3
 8003048:	faba fa8a 	clz	sl, sl
 800304c:	3314      	adds	r3, #20
 800304e:	fab1 f181 	clz	r1, r1
 8003052:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8003056:	fab9 f989 	clz	r9, r9
 800305a:	eba4 0803 	sub.w	r8, r4, r3
 800305e:	0949      	lsrs	r1, r1, #5
 8003060:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8003064:	1be7      	subs	r7, r4, r7
 8003066:	fab8 f888 	clz	r8, r8
 800306a:	ea4a 0301 	orr.w	r3, sl, r1
 800306e:	4e3b      	ldr	r6, [pc, #236]	@ (800315c <HAL_DMA_Init+0x508>)
 8003070:	3278      	adds	r2, #120	@ 0x78
 8003072:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8003076:	ea49 0303 	orr.w	r3, r9, r3
 800307a:	fab7 f787 	clz	r7, r7
 800307e:	1ba6      	subs	r6, r4, r6
 8003080:	eba4 0b02 	sub.w	fp, r4, r2
 8003084:	ea48 0303 	orr.w	r3, r8, r3
 8003088:	097f      	lsrs	r7, r7, #5
 800308a:	fab6 f686 	clz	r6, r6
 800308e:	3214      	adds	r2, #20
 8003090:	fabb fb8b 	clz	fp, fp
 8003094:	433b      	orrs	r3, r7
 8003096:	0976      	lsrs	r6, r6, #5
 8003098:	1aa2      	subs	r2, r4, r2
 800309a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800309e:	4333      	orrs	r3, r6
 80030a0:	fab2 f282 	clz	r2, r2
 80030a4:	ea5b 0303 	orrs.w	r3, fp, r3
 80030a8:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80030ac:	9201      	str	r2, [sp, #4]
 80030ae:	d101      	bne.n	80030b4 <HAL_DMA_Init+0x460>
 80030b0:	2a00      	cmp	r2, #0
 80030b2:	d043      	beq.n	800313c <HAL_DMA_Init+0x4e8>
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b4:	2302      	movs	r3, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030b6:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8003170 <HAL_DMA_Init+0x51c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ba:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80030be:	2300      	movs	r3, #0
 80030c0:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030c4:	68ab      	ldr	r3, [r5, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030c6:	6822      	ldr	r2, [r4, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030c8:	2b40      	cmp	r3, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030ca:	ea02 0e0e 	and.w	lr, r2, lr
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030ce:	d033      	beq.n	8003138 <HAL_DMA_Init+0x4e4>
 80030d0:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 80030d4:	fab3 f383 	clz	r3, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	0398      	lsls	r0, r3, #14
 80030dc:	9100      	str	r1, [sp, #0]
 80030de:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80030e2:	ea43 0c02 	orr.w	ip, r3, r2
 80030e6:	696a      	ldr	r2, [r5, #20]
 80030e8:	69ab      	ldr	r3, [r5, #24]
 80030ea:	ea4c 0c02 	orr.w	ip, ip, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80030ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003160 <HAL_DMA_Init+0x50c>)
 80030f0:	ea4c 0c03 	orr.w	ip, ip, r3
 80030f4:	69eb      	ldr	r3, [r5, #28]
 80030f6:	4422      	add	r2, r4
 80030f8:	ea4c 0c03 	orr.w	ip, ip, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80030fc:	6a2b      	ldr	r3, [r5, #32]
 80030fe:	ea4e 1313 	orr.w	r3, lr, r3, lsr #4
 8003102:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003106:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003108:	4b16      	ldr	r3, [pc, #88]	@ (8003164 <HAL_DMA_Init+0x510>)
 800310a:	fba3 2302 	umull	r2, r3, r3, r2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800310e:	6020      	str	r0, [r4, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003110:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	65eb      	str	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003118:	f7ff fcb2 	bl	8002a80 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800311c:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800311e:	4602      	mov	r2, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003120:	9900      	ldr	r1, [sp, #0]
 8003122:	f003 001f 	and.w	r0, r3, #31
 8003126:	2301      	movs	r3, #1
 8003128:	4083      	lsls	r3, r0
 800312a:	6053      	str	r3, [r2, #4]
 800312c:	e6bd      	b.n	8002eaa <HAL_DMA_Init+0x256>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800312e:	4a0e      	ldr	r2, [pc, #56]	@ (8003168 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003130:	490e      	ldr	r1, [pc, #56]	@ (800316c <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003132:	4402      	add	r2, r0
 8003134:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003136:	e6e1      	b.n	8002efc <HAL_DMA_Init+0x2a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003138:	2010      	movs	r0, #16
 800313a:	e7cf      	b.n	80030dc <HAL_DMA_Init+0x488>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800313c:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800313e:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003140:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003142:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8003146:	e72f      	b.n	8002fa8 <HAL_DMA_Init+0x354>
 8003148:	000f030f 	.word	0x000f030f
 800314c:	58025408 	.word	0x58025408
 8003150:	5802541c 	.word	0x5802541c
 8003154:	58025430 	.word	0x58025430
 8003158:	58025458 	.word	0x58025458
 800315c:	5802546c 	.word	0x5802546c
 8003160:	a7fdabf8 	.word	0xa7fdabf8
 8003164:	cccccccd 	.word	0xcccccccd
 8003168:	1000823f 	.word	0x1000823f
 800316c:	40020940 	.word	0x40020940
 8003170:	fffe000f 	.word	0xfffe000f

08003174 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8003174:	2800      	cmp	r0, #0
 8003176:	f000 8221 	beq.w	80035bc <HAL_DMA_Start_IT+0x448>
{
 800317a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hdma);
 800317e:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8003182:	2c01      	cmp	r4, #1
 8003184:	f000 8217 	beq.w	80035b6 <HAL_DMA_Start_IT+0x442>
 8003188:	2401      	movs	r4, #1
 800318a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800318e:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8003192:	2c01      	cmp	r4, #1
 8003194:	d008      	beq.n	80031a8 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003196:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 800319a:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800319c:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800319e:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 80031a2:	2001      	movs	r0, #1
}
 80031a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80031a8:	2402      	movs	r4, #2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031aa:	4e69      	ldr	r6, [pc, #420]	@ (8003350 <HAL_DMA_Start_IT+0x1dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031ac:	f8df e1a8 	ldr.w	lr, [pc, #424]	@ 8003358 <HAL_DMA_Start_IT+0x1e4>
    hdma->State = HAL_DMA_STATE_BUSY;
 80031b0:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b4:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 80031b6:	4d67      	ldr	r5, [pc, #412]	@ (8003354 <HAL_DMA_Start_IT+0x1e0>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b8:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 80031ba:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800336c <HAL_DMA_Start_IT+0x1f8>
 80031c0:	4574      	cmp	r4, lr
 80031c2:	bf18      	it	ne
 80031c4:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 80031c6:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8003370 <HAL_DMA_Start_IT+0x1fc>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ca:	f8d0 a058 	ldr.w	sl, [r0, #88]	@ 0x58
 80031ce:	bf0c      	ite	eq
 80031d0:	2601      	moveq	r6, #1
 80031d2:	2600      	movne	r6, #0
 80031d4:	4544      	cmp	r4, r8
 80031d6:	bf14      	ite	ne
 80031d8:	46b1      	movne	r9, r6
 80031da:	f046 0901 	orreq.w	r9, r6, #1
    __HAL_DMA_DISABLE(hdma);
 80031de:	42ac      	cmp	r4, r5
 80031e0:	bf18      	it	ne
 80031e2:	4564      	cmpne	r4, ip
 80031e4:	bf0c      	ite	eq
 80031e6:	2501      	moveq	r5, #1
 80031e8:	2500      	movne	r5, #0
 80031ea:	f040 80c3 	bne.w	8003374 <HAL_DMA_Start_IT+0x200>
 80031ee:	f8d4 c000 	ldr.w	ip, [r4]
 80031f2:	f02c 0c01 	bic.w	ip, ip, #1
 80031f6:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 80031fa:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031fe:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
 8003202:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003204:	f1bc 0f00 	cmp.w	ip, #0
 8003208:	d007      	beq.n	800321a <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800320a:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 800320e:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003210:	b91d      	cbnz	r5, 800321a <HAL_DMA_Start_IT+0xa6>
 8003212:	f1b9 0f00 	cmp.w	r9, #0
 8003216:	f000 8130 	beq.w	800347a <HAL_DMA_Start_IT+0x306>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800321a:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 800321c:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 8003220:	f007 081f 	and.w	r8, r7, #31
 8003224:	fa0e fe08 	lsl.w	lr, lr, r8
 8003228:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800322c:	6827      	ldr	r7, [r4, #0]
 800322e:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 8003232:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003234:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003236:	6883      	ldr	r3, [r0, #8]
 8003238:	2b40      	cmp	r3, #64	@ 0x40
 800323a:	f000 81c1 	beq.w	80035c0 <HAL_DMA_Start_IT+0x44c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800323e:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003240:	60e2      	str	r2, [r4, #12]
      if(hdma->XferHalfCpltCallback != NULL)
 8003242:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003244:	2d00      	cmp	r5, #0
 8003246:	f040 81a1 	bne.w	800358c <HAL_DMA_Start_IT+0x418>
 800324a:	4b43      	ldr	r3, [pc, #268]	@ (8003358 <HAL_DMA_Start_IT+0x1e4>)
 800324c:	429c      	cmp	r4, r3
 800324e:	f000 81de 	beq.w	800360e <HAL_DMA_Start_IT+0x49a>
 8003252:	3318      	adds	r3, #24
 8003254:	429c      	cmp	r4, r3
 8003256:	f000 81f6 	beq.w	8003646 <HAL_DMA_Start_IT+0x4d2>
 800325a:	f1b9 0f00 	cmp.w	r9, #0
 800325e:	f040 81c7 	bne.w	80035f0 <HAL_DMA_Start_IT+0x47c>
 8003262:	4b3e      	ldr	r3, [pc, #248]	@ (800335c <HAL_DMA_Start_IT+0x1e8>)
 8003264:	429c      	cmp	r4, r3
 8003266:	f000 8201 	beq.w	800366c <HAL_DMA_Start_IT+0x4f8>
 800326a:	4b3d      	ldr	r3, [pc, #244]	@ (8003360 <HAL_DMA_Start_IT+0x1ec>)
 800326c:	429c      	cmp	r4, r3
 800326e:	f000 8209 	beq.w	8003684 <HAL_DMA_Start_IT+0x510>
 8003272:	3318      	adds	r3, #24
 8003274:	429c      	cmp	r4, r3
 8003276:	f000 8223 	beq.w	80036c0 <HAL_DMA_Start_IT+0x54c>
 800327a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800327e:	429c      	cmp	r4, r3
 8003280:	f000 8233 	beq.w	80036ea <HAL_DMA_Start_IT+0x576>
 8003284:	3318      	adds	r3, #24
 8003286:	429c      	cmp	r4, r3
 8003288:	f000 8242 	beq.w	8003710 <HAL_DMA_Start_IT+0x59c>
 800328c:	3318      	adds	r3, #24
 800328e:	429c      	cmp	r4, r3
 8003290:	f000 8249 	beq.w	8003726 <HAL_DMA_Start_IT+0x5b2>
 8003294:	3318      	adds	r3, #24
 8003296:	429c      	cmp	r4, r3
 8003298:	f000 8250 	beq.w	800373c <HAL_DMA_Start_IT+0x5c8>
 800329c:	3318      	adds	r3, #24
 800329e:	429c      	cmp	r4, r3
 80032a0:	f000 8257 	beq.w	8003752 <HAL_DMA_Start_IT+0x5de>
 80032a4:	3318      	adds	r3, #24
 80032a6:	429c      	cmp	r4, r3
 80032a8:	f000 8267 	beq.w	800377a <HAL_DMA_Start_IT+0x606>
 80032ac:	3318      	adds	r3, #24
 80032ae:	429c      	cmp	r4, r3
 80032b0:	f000 8265 	beq.w	800377e <HAL_DMA_Start_IT+0x60a>
 80032b4:	3318      	adds	r3, #24
 80032b6:	429c      	cmp	r4, r3
 80032b8:	f000 8275 	beq.w	80037a6 <HAL_DMA_Start_IT+0x632>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	f023 030e 	bic.w	r3, r3, #14
 80032c2:	f043 030a 	orr.w	r3, r3, #10
 80032c6:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80032c8:	b11a      	cbz	r2, 80032d2 <HAL_DMA_Start_IT+0x15e>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032d2:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <HAL_DMA_Start_IT+0x1f0>)
 80032d4:	4a24      	ldr	r2, [pc, #144]	@ (8003368 <HAL_DMA_Start_IT+0x1f4>)
 80032d6:	4294      	cmp	r4, r2
 80032d8:	bf18      	it	ne
 80032da:	429c      	cmpne	r4, r3
 80032dc:	f102 0214 	add.w	r2, r2, #20
 80032e0:	bf0c      	ite	eq
 80032e2:	2301      	moveq	r3, #1
 80032e4:	2300      	movne	r3, #0
 80032e6:	4294      	cmp	r4, r2
 80032e8:	bf08      	it	eq
 80032ea:	f043 0301 	orreq.w	r3, r3, #1
 80032ee:	3214      	adds	r2, #20
 80032f0:	4294      	cmp	r4, r2
 80032f2:	bf08      	it	eq
 80032f4:	f043 0301 	orreq.w	r3, r3, #1
 80032f8:	3214      	adds	r2, #20
 80032fa:	4294      	cmp	r4, r2
 80032fc:	bf08      	it	eq
 80032fe:	f043 0301 	orreq.w	r3, r3, #1
 8003302:	3214      	adds	r2, #20
 8003304:	4294      	cmp	r4, r2
 8003306:	bf08      	it	eq
 8003308:	f043 0301 	orreq.w	r3, r3, #1
 800330c:	3214      	adds	r2, #20
 800330e:	4294      	cmp	r4, r2
 8003310:	bf08      	it	eq
 8003312:	f043 0301 	orreq.w	r3, r3, #1
 8003316:	3214      	adds	r2, #20
 8003318:	4294      	cmp	r4, r2
 800331a:	bf08      	it	eq
 800331c:	f043 0301 	orreq.w	r3, r3, #1
 8003320:	b17b      	cbz	r3, 8003342 <HAL_DMA_Start_IT+0x1ce>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003322:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003324:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	03d2      	lsls	r2, r2, #15
 800332c:	f100 813e 	bmi.w	80035ac <HAL_DMA_Start_IT+0x438>
      if(hdma->DMAmuxRequestGen != 0U)
 8003330:	f1bc 0f00 	cmp.w	ip, #0
 8003334:	d005      	beq.n	8003342 <HAL_DMA_Start_IT+0x1ce>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003336:	f8dc 3000 	ldr.w	r3, [ip]
 800333a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800333e:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 8003342:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6023      	str	r3, [r4, #0]
}
 800334c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003350:	40020070 	.word	0x40020070
 8003354:	40020028 	.word	0x40020028
 8003358:	40020040 	.word	0x40020040
 800335c:	40020088 	.word	0x40020088
 8003360:	400200a0 	.word	0x400200a0
 8003364:	58025408 	.word	0x58025408
 8003368:	5802541c 	.word	0x5802541c
 800336c:	40020058 	.word	0x40020058
 8003370:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8003374:	4574      	cmp	r4, lr
 8003376:	f000 8154 	beq.w	8003622 <HAL_DMA_Start_IT+0x4ae>
 800337a:	4544      	cmp	r4, r8
 800337c:	f000 815a 	beq.w	8003634 <HAL_DMA_Start_IT+0x4c0>
 8003380:	f1b9 0f00 	cmp.w	r9, #0
 8003384:	f040 811f 	bne.w	80035c6 <HAL_DMA_Start_IT+0x452>
 8003388:	f8df c434 	ldr.w	ip, [pc, #1076]	@ 80037c0 <HAL_DMA_Start_IT+0x64c>
 800338c:	4564      	cmp	r4, ip
 800338e:	f000 8164 	beq.w	800365a <HAL_DMA_Start_IT+0x4e6>
 8003392:	f10c 0c18 	add.w	ip, ip, #24
 8003396:	4564      	cmp	r4, ip
 8003398:	f000 8180 	beq.w	800369c <HAL_DMA_Start_IT+0x528>
 800339c:	f10c 0c18 	add.w	ip, ip, #24
 80033a0:	4564      	cmp	r4, ip
 80033a2:	f000 8184 	beq.w	80036ae <HAL_DMA_Start_IT+0x53a>
 80033a6:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 80033aa:	4564      	cmp	r4, ip
 80033ac:	f000 8194 	beq.w	80036d8 <HAL_DMA_Start_IT+0x564>
 80033b0:	f10c 0c18 	add.w	ip, ip, #24
 80033b4:	4564      	cmp	r4, ip
 80033b6:	f000 81a2 	beq.w	80036fe <HAL_DMA_Start_IT+0x58a>
 80033ba:	f10c 0c18 	add.w	ip, ip, #24
 80033be:	4564      	cmp	r4, ip
 80033c0:	f000 81b3 	beq.w	800372a <HAL_DMA_Start_IT+0x5b6>
 80033c4:	f10c 0c18 	add.w	ip, ip, #24
 80033c8:	4564      	cmp	r4, ip
 80033ca:	f000 81b9 	beq.w	8003740 <HAL_DMA_Start_IT+0x5cc>
 80033ce:	f10c 0c18 	add.w	ip, ip, #24
 80033d2:	4564      	cmp	r4, ip
 80033d4:	f000 81bf 	beq.w	8003756 <HAL_DMA_Start_IT+0x5e2>
 80033d8:	f10c 0c18 	add.w	ip, ip, #24
 80033dc:	4564      	cmp	r4, ip
 80033de:	f000 81c3 	beq.w	8003768 <HAL_DMA_Start_IT+0x5f4>
 80033e2:	f10c 0c18 	add.w	ip, ip, #24
 80033e6:	4564      	cmp	r4, ip
 80033e8:	f000 81cb 	beq.w	8003782 <HAL_DMA_Start_IT+0x60e>
 80033ec:	f10c 0c18 	add.w	ip, ip, #24
 80033f0:	4564      	cmp	r4, ip
 80033f2:	f000 81cf 	beq.w	8003794 <HAL_DMA_Start_IT+0x620>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033f6:	f8df c3cc 	ldr.w	ip, [pc, #972]	@ 80037c4 <HAL_DMA_Start_IT+0x650>
 80033fa:	f8df e3cc 	ldr.w	lr, [pc, #972]	@ 80037c8 <HAL_DMA_Start_IT+0x654>
 80033fe:	4574      	cmp	r4, lr
 8003400:	bf18      	it	ne
 8003402:	4564      	cmpne	r4, ip
 8003404:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
 8003408:	bf0c      	ite	eq
 800340a:	f04f 0c01 	moveq.w	ip, #1
 800340e:	f04f 0c00 	movne.w	ip, #0
 8003412:	4574      	cmp	r4, lr
 8003414:	bf08      	it	eq
 8003416:	f04c 0c01 	orreq.w	ip, ip, #1
 800341a:	f10e 0e14 	add.w	lr, lr, #20
 800341e:	4574      	cmp	r4, lr
 8003420:	bf08      	it	eq
 8003422:	f04c 0c01 	orreq.w	ip, ip, #1
 8003426:	f10e 0e14 	add.w	lr, lr, #20
 800342a:	4574      	cmp	r4, lr
 800342c:	bf08      	it	eq
 800342e:	f04c 0c01 	orreq.w	ip, ip, #1
 8003432:	f10e 0e14 	add.w	lr, lr, #20
 8003436:	4574      	cmp	r4, lr
 8003438:	bf08      	it	eq
 800343a:	f04c 0c01 	orreq.w	ip, ip, #1
    __HAL_DMA_DISABLE(hdma);
 800343e:	f8d4 e000 	ldr.w	lr, [r4]
 8003442:	f02e 0e01 	bic.w	lr, lr, #1
 8003446:	f8c4 e000 	str.w	lr, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800344a:	f8df e380 	ldr.w	lr, [pc, #896]	@ 80037cc <HAL_DMA_Start_IT+0x658>
 800344e:	4574      	cmp	r4, lr
 8003450:	bf08      	it	eq
 8003452:	f04c 0c01 	orreq.w	ip, ip, #1
 8003456:	f1bc 0f00 	cmp.w	ip, #0
 800345a:	d103      	bne.n	8003464 <HAL_DMA_Start_IT+0x2f0>
 800345c:	f8df c370 	ldr.w	ip, [pc, #880]	@ 80037d0 <HAL_DMA_Start_IT+0x65c>
 8003460:	4564      	cmp	r4, ip
 8003462:	d14f      	bne.n	8003504 <HAL_DMA_Start_IT+0x390>
    if(hdma->DMAmuxRequestGen != 0U)
 8003464:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003468:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 800346c:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800346e:	f1bc 0f00 	cmp.w	ip, #0
 8003472:	d002      	beq.n	800347a <HAL_DMA_Start_IT+0x306>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003474:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8003478:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800347a:	f8df e344 	ldr.w	lr, [pc, #836]	@ 80037c0 <HAL_DMA_Start_IT+0x64c>
 800347e:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 80037d4 <HAL_DMA_Start_IT+0x660>
 8003482:	4544      	cmp	r4, r8
 8003484:	bf18      	it	ne
 8003486:	4574      	cmpne	r4, lr
 8003488:	f108 0818 	add.w	r8, r8, #24
 800348c:	bf0c      	ite	eq
 800348e:	f04f 0e01 	moveq.w	lr, #1
 8003492:	f04f 0e00 	movne.w	lr, #0
 8003496:	4544      	cmp	r4, r8
 8003498:	bf08      	it	eq
 800349a:	f04e 0e01 	orreq.w	lr, lr, #1
 800349e:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 80034a2:	4544      	cmp	r4, r8
 80034a4:	bf08      	it	eq
 80034a6:	f04e 0e01 	orreq.w	lr, lr, #1
 80034aa:	f108 0818 	add.w	r8, r8, #24
 80034ae:	4544      	cmp	r4, r8
 80034b0:	bf08      	it	eq
 80034b2:	f04e 0e01 	orreq.w	lr, lr, #1
 80034b6:	f108 0818 	add.w	r8, r8, #24
 80034ba:	4544      	cmp	r4, r8
 80034bc:	bf08      	it	eq
 80034be:	f04e 0e01 	orreq.w	lr, lr, #1
 80034c2:	f108 0818 	add.w	r8, r8, #24
 80034c6:	4544      	cmp	r4, r8
 80034c8:	bf08      	it	eq
 80034ca:	f04e 0e01 	orreq.w	lr, lr, #1
 80034ce:	f108 0818 	add.w	r8, r8, #24
 80034d2:	4544      	cmp	r4, r8
 80034d4:	bf08      	it	eq
 80034d6:	f04e 0e01 	orreq.w	lr, lr, #1
 80034da:	f108 0818 	add.w	r8, r8, #24
 80034de:	4544      	cmp	r4, r8
 80034e0:	bf08      	it	eq
 80034e2:	f04e 0e01 	orreq.w	lr, lr, #1
 80034e6:	f108 0818 	add.w	r8, r8, #24
 80034ea:	4544      	cmp	r4, r8
 80034ec:	bf08      	it	eq
 80034ee:	f04e 0e01 	orreq.w	lr, lr, #1
 80034f2:	f1be 0f00 	cmp.w	lr, #0
 80034f6:	f47f ae90 	bne.w	800321a <HAL_DMA_Start_IT+0xa6>
 80034fa:	f8df e2dc 	ldr.w	lr, [pc, #732]	@ 80037d8 <HAL_DMA_Start_IT+0x664>
 80034fe:	4574      	cmp	r4, lr
 8003500:	f43f ae8b 	beq.w	800321a <HAL_DMA_Start_IT+0xa6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003504:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 80037c8 <HAL_DMA_Start_IT+0x654>
 8003508:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 80037c4 <HAL_DMA_Start_IT+0x650>
 800350c:	4574      	cmp	r4, lr
 800350e:	bf18      	it	ne
 8003510:	4564      	cmpne	r4, ip
 8003512:	f10e 0e14 	add.w	lr, lr, #20
 8003516:	bf0c      	ite	eq
 8003518:	f04f 0c01 	moveq.w	ip, #1
 800351c:	f04f 0c00 	movne.w	ip, #0
 8003520:	4574      	cmp	r4, lr
 8003522:	bf08      	it	eq
 8003524:	f04c 0c01 	orreq.w	ip, ip, #1
 8003528:	f10e 0e14 	add.w	lr, lr, #20
 800352c:	4574      	cmp	r4, lr
 800352e:	bf08      	it	eq
 8003530:	f04c 0c01 	orreq.w	ip, ip, #1
 8003534:	f10e 0e14 	add.w	lr, lr, #20
 8003538:	4574      	cmp	r4, lr
 800353a:	bf08      	it	eq
 800353c:	f04c 0c01 	orreq.w	ip, ip, #1
 8003540:	f10e 0e14 	add.w	lr, lr, #20
 8003544:	4574      	cmp	r4, lr
 8003546:	bf08      	it	eq
 8003548:	f04c 0c01 	orreq.w	ip, ip, #1
 800354c:	f10e 0e14 	add.w	lr, lr, #20
 8003550:	4574      	cmp	r4, lr
 8003552:	bf08      	it	eq
 8003554:	f04c 0c01 	orreq.w	ip, ip, #1
 8003558:	f1bc 0f00 	cmp.w	ip, #0
 800355c:	d104      	bne.n	8003568 <HAL_DMA_Start_IT+0x3f4>
 800355e:	f8df c270 	ldr.w	ip, [pc, #624]	@ 80037d0 <HAL_DMA_Start_IT+0x65c>
 8003562:	4564      	cmp	r4, ip
 8003564:	f040 8125 	bne.w	80037b2 <HAL_DMA_Start_IT+0x63e>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003568:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 800356a:	f04f 0c01 	mov.w	ip, #1
 800356e:	f006 0e1f 	and.w	lr, r6, #31
 8003572:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003576:	f8ca c004 	str.w	ip, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800357a:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800357c:	6883      	ldr	r3, [r0, #8]
 800357e:	2b40      	cmp	r3, #64	@ 0x40
 8003580:	f000 8113 	beq.w	80037aa <HAL_DMA_Start_IT+0x636>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003584:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003586:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003588:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800358a:	e65e      	b.n	800324a <HAL_DMA_Start_IT+0xd6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	f023 031e 	bic.w	r3, r3, #30
 8003592:	f043 0316 	orr.w	r3, r3, #22
 8003596:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003598:	b11a      	cbz	r2, 80035a2 <HAL_DMA_Start_IT+0x42e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035a2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	03d2      	lsls	r2, r2, #15
 80035a8:	f57f aec2 	bpl.w	8003330 <HAL_DMA_Start_IT+0x1bc>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e6bc      	b.n	8003330 <HAL_DMA_Start_IT+0x1bc>
  __HAL_LOCK(hdma);
 80035b6:	2002      	movs	r0, #2
}
 80035b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 80035bc:	2001      	movs	r0, #1
}
 80035be:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80035c0:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80035c2:	60e1      	str	r1, [r4, #12]
 80035c4:	e63d      	b.n	8003242 <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 80035c6:	f8df e1f0 	ldr.w	lr, [pc, #496]	@ 80037b8 <HAL_DMA_Start_IT+0x644>
 80035ca:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 80035ce:	f02c 0c01 	bic.w	ip, ip, #1
 80035d2:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 80035d6:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035da:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 80035de:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80035e0:	f1bc 0f00 	cmp.w	ip, #0
 80035e4:	f43f ae19 	beq.w	800321a <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035e8:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 80035ec:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035ee:	e614      	b.n	800321a <HAL_DMA_Start_IT+0xa6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035f0:	4971      	ldr	r1, [pc, #452]	@ (80037b8 <HAL_DMA_Start_IT+0x644>)
 80035f2:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80035f4:	f023 031e 	bic.w	r3, r3, #30
 80035f8:	f043 0316 	orr.w	r3, r3, #22
 80035fc:	670b      	str	r3, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 80035fe:	2a00      	cmp	r2, #0
 8003600:	f43f ae8f 	beq.w	8003322 <HAL_DMA_Start_IT+0x1ae>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f043 0308 	orr.w	r3, r3, #8
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	e689      	b.n	8003322 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800360e:	496a      	ldr	r1, [pc, #424]	@ (80037b8 <HAL_DMA_Start_IT+0x644>)
 8003610:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003612:	f023 031e 	bic.w	r3, r3, #30
 8003616:	f043 0316 	orr.w	r3, r3, #22
 800361a:	640b      	str	r3, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 800361c:	2a00      	cmp	r2, #0
 800361e:	d1f1      	bne.n	8003604 <HAL_DMA_Start_IT+0x490>
 8003620:	e67f      	b.n	8003322 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8003622:	f8df e194 	ldr.w	lr, [pc, #404]	@ 80037b8 <HAL_DMA_Start_IT+0x644>
 8003626:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 800362a:	f02c 0c01 	bic.w	ip, ip, #1
 800362e:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003632:	e5e2      	b.n	80031fa <HAL_DMA_Start_IT+0x86>
    __HAL_DMA_DISABLE(hdma);
 8003634:	f8df e180 	ldr.w	lr, [pc, #384]	@ 80037b8 <HAL_DMA_Start_IT+0x644>
 8003638:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 800363c:	f02c 0c01 	bic.w	ip, ip, #1
 8003640:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003644:	e7c7      	b.n	80035d6 <HAL_DMA_Start_IT+0x462>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003646:	495c      	ldr	r1, [pc, #368]	@ (80037b8 <HAL_DMA_Start_IT+0x644>)
 8003648:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 800364a:	f023 031e 	bic.w	r3, r3, #30
 800364e:	f043 0316 	orr.w	r3, r3, #22
 8003652:	658b      	str	r3, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 8003654:	2a00      	cmp	r2, #0
 8003656:	d1d5      	bne.n	8003604 <HAL_DMA_Start_IT+0x490>
 8003658:	e663      	b.n	8003322 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 800365a:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 80037b8 <HAL_DMA_Start_IT+0x644>
 800365e:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8003662:	f02c 0c01 	bic.w	ip, ip, #1
 8003666:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800366a:	e6fb      	b.n	8003464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800366c:	4952      	ldr	r1, [pc, #328]	@ (80037b8 <HAL_DMA_Start_IT+0x644>)
 800366e:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003672:	f023 031e 	bic.w	r3, r3, #30
 8003676:	f043 0316 	orr.w	r3, r3, #22
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 800367e:	2a00      	cmp	r2, #0
 8003680:	d1c0      	bne.n	8003604 <HAL_DMA_Start_IT+0x490>
 8003682:	e64e      	b.n	8003322 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003684:	494c      	ldr	r1, [pc, #304]	@ (80037b8 <HAL_DMA_Start_IT+0x644>)
 8003686:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
 800368a:	f023 031e 	bic.w	r3, r3, #30
 800368e:	f043 0316 	orr.w	r3, r3, #22
 8003692:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8003696:	2a00      	cmp	r2, #0
 8003698:	d1b4      	bne.n	8003604 <HAL_DMA_Start_IT+0x490>
 800369a:	e642      	b.n	8003322 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 800369c:	f8df e118 	ldr.w	lr, [pc, #280]	@ 80037b8 <HAL_DMA_Start_IT+0x644>
 80036a0:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 80036a4:	f02c 0c01 	bic.w	ip, ip, #1
 80036a8:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036ac:	e6da      	b.n	8003464 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 80036ae:	f8df e108 	ldr.w	lr, [pc, #264]	@ 80037b8 <HAL_DMA_Start_IT+0x644>
 80036b2:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 80036b6:	f02c 0c01 	bic.w	ip, ip, #1
 80036ba:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036be:	e6d1      	b.n	8003464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80036c0:	493d      	ldr	r1, [pc, #244]	@ (80037b8 <HAL_DMA_Start_IT+0x644>)
 80036c2:	f8d1 30b8 	ldr.w	r3, [r1, #184]	@ 0xb8
 80036c6:	f023 031e 	bic.w	r3, r3, #30
 80036ca:	f043 0316 	orr.w	r3, r3, #22
 80036ce:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 80036d2:	2a00      	cmp	r2, #0
 80036d4:	d196      	bne.n	8003604 <HAL_DMA_Start_IT+0x490>
 80036d6:	e624      	b.n	8003322 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80036d8:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 80037bc <HAL_DMA_Start_IT+0x648>
 80036dc:	f8de c010 	ldr.w	ip, [lr, #16]
 80036e0:	f02c 0c01 	bic.w	ip, ip, #1
 80036e4:	f8ce c010 	str.w	ip, [lr, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036e8:	e6bc      	b.n	8003464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80036ea:	4934      	ldr	r1, [pc, #208]	@ (80037bc <HAL_DMA_Start_IT+0x648>)
 80036ec:	690b      	ldr	r3, [r1, #16]
 80036ee:	f023 031e 	bic.w	r3, r3, #30
 80036f2:	f043 0316 	orr.w	r3, r3, #22
 80036f6:	610b      	str	r3, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 80036f8:	2a00      	cmp	r2, #0
 80036fa:	d183      	bne.n	8003604 <HAL_DMA_Start_IT+0x490>
 80036fc:	e611      	b.n	8003322 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80036fe:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 80037bc <HAL_DMA_Start_IT+0x648>
 8003702:	f8de c028 	ldr.w	ip, [lr, #40]	@ 0x28
 8003706:	f02c 0c01 	bic.w	ip, ip, #1
 800370a:	f8ce c028 	str.w	ip, [lr, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800370e:	e6a9      	b.n	8003464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003710:	492a      	ldr	r1, [pc, #168]	@ (80037bc <HAL_DMA_Start_IT+0x648>)
 8003712:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8003714:	f023 031e 	bic.w	r3, r3, #30
 8003718:	f043 0316 	orr.w	r3, r3, #22
 800371c:	628b      	str	r3, [r1, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 800371e:	2a00      	cmp	r2, #0
 8003720:	f47f af70 	bne.w	8003604 <HAL_DMA_Start_IT+0x490>
 8003724:	e5fd      	b.n	8003322 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003726:	4925      	ldr	r1, [pc, #148]	@ (80037bc <HAL_DMA_Start_IT+0x648>)
 8003728:	e772      	b.n	8003610 <HAL_DMA_Start_IT+0x49c>
    __HAL_DMA_DISABLE(hdma);
 800372a:	f8df e090 	ldr.w	lr, [pc, #144]	@ 80037bc <HAL_DMA_Start_IT+0x648>
 800372e:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 8003732:	f02c 0c01 	bic.w	ip, ip, #1
 8003736:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800373a:	e693      	b.n	8003464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800373c:	491f      	ldr	r1, [pc, #124]	@ (80037bc <HAL_DMA_Start_IT+0x648>)
 800373e:	e783      	b.n	8003648 <HAL_DMA_Start_IT+0x4d4>
    __HAL_DMA_DISABLE(hdma);
 8003740:	f8df e078 	ldr.w	lr, [pc, #120]	@ 80037bc <HAL_DMA_Start_IT+0x648>
 8003744:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 8003748:	f02c 0c01 	bic.w	ip, ip, #1
 800374c:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003750:	e688      	b.n	8003464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003752:	491a      	ldr	r1, [pc, #104]	@ (80037bc <HAL_DMA_Start_IT+0x648>)
 8003754:	e74d      	b.n	80035f2 <HAL_DMA_Start_IT+0x47e>
    __HAL_DMA_DISABLE(hdma);
 8003756:	f8df e064 	ldr.w	lr, [pc, #100]	@ 80037bc <HAL_DMA_Start_IT+0x648>
 800375a:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 800375e:	f02c 0c01 	bic.w	ip, ip, #1
 8003762:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003766:	e67d      	b.n	8003464 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8003768:	f8df e050 	ldr.w	lr, [pc, #80]	@ 80037bc <HAL_DMA_Start_IT+0x648>
 800376c:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8003770:	f02c 0c01 	bic.w	ip, ip, #1
 8003774:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003778:	e674      	b.n	8003464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800377a:	4910      	ldr	r1, [pc, #64]	@ (80037bc <HAL_DMA_Start_IT+0x648>)
 800377c:	e777      	b.n	800366e <HAL_DMA_Start_IT+0x4fa>
 800377e:	490f      	ldr	r1, [pc, #60]	@ (80037bc <HAL_DMA_Start_IT+0x648>)
 8003780:	e781      	b.n	8003686 <HAL_DMA_Start_IT+0x512>
    __HAL_DMA_DISABLE(hdma);
 8003782:	f8df e038 	ldr.w	lr, [pc, #56]	@ 80037bc <HAL_DMA_Start_IT+0x648>
 8003786:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 800378a:	f02c 0c01 	bic.w	ip, ip, #1
 800378e:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003792:	e667      	b.n	8003464 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8003794:	f8df e024 	ldr.w	lr, [pc, #36]	@ 80037bc <HAL_DMA_Start_IT+0x648>
 8003798:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 800379c:	f02c 0c01 	bic.w	ip, ip, #1
 80037a0:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037a4:	e65e      	b.n	8003464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80037a6:	4905      	ldr	r1, [pc, #20]	@ (80037bc <HAL_DMA_Start_IT+0x648>)
 80037a8:	e78b      	b.n	80036c2 <HAL_DMA_Start_IT+0x54e>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80037aa:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80037ac:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80037ae:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037b0:	e54b      	b.n	800324a <HAL_DMA_Start_IT+0xd6>
 80037b2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80037b4:	e555      	b.n	8003262 <HAL_DMA_Start_IT+0xee>
 80037b6:	bf00      	nop
 80037b8:	40020000 	.word	0x40020000
 80037bc:	40020400 	.word	0x40020400
 80037c0:	40020088 	.word	0x40020088
 80037c4:	5802541c 	.word	0x5802541c
 80037c8:	58025408 	.word	0x58025408
 80037cc:	58025480 	.word	0x58025480
 80037d0:	58025494 	.word	0x58025494
 80037d4:	400200a0 	.word	0x400200a0
 80037d8:	400204b8 	.word	0x400204b8

080037dc <HAL_DMA_IRQHandler>:
{
 80037dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80037de:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80037e0:	4b94      	ldr	r3, [pc, #592]	@ (8003a34 <HAL_DMA_IRQHandler+0x258>)
{
 80037e2:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037e4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
{
 80037e6:	4607      	mov	r7, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80037e8:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0U;
 80037ea:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037ec:	4b92      	ldr	r3, [pc, #584]	@ (8003a38 <HAL_DMA_IRQHandler+0x25c>)
 80037ee:	6802      	ldr	r2, [r0, #0]
 80037f0:	4892      	ldr	r0, [pc, #584]	@ (8003a3c <HAL_DMA_IRQHandler+0x260>)
  tmpisr_dma  = regs_dma->ISR;
 80037f2:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037f4:	4282      	cmp	r2, r0
 80037f6:	bf18      	it	ne
 80037f8:	429a      	cmpne	r2, r3
 80037fa:	f100 0018 	add.w	r0, r0, #24
  tmpisr_bdma = regs_bdma->ISR;
 80037fe:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003800:	bf0c      	ite	eq
 8003802:	2301      	moveq	r3, #1
 8003804:	2300      	movne	r3, #0
 8003806:	4282      	cmp	r2, r0
 8003808:	bf08      	it	eq
 800380a:	f043 0301 	orreq.w	r3, r3, #1
 800380e:	3018      	adds	r0, #24
 8003810:	4282      	cmp	r2, r0
 8003812:	bf08      	it	eq
 8003814:	f043 0301 	orreq.w	r3, r3, #1
 8003818:	3018      	adds	r0, #24
 800381a:	4282      	cmp	r2, r0
 800381c:	bf08      	it	eq
 800381e:	f043 0301 	orreq.w	r3, r3, #1
 8003822:	3018      	adds	r0, #24
 8003824:	4282      	cmp	r2, r0
 8003826:	bf08      	it	eq
 8003828:	f043 0301 	orreq.w	r3, r3, #1
 800382c:	3018      	adds	r0, #24
 800382e:	4282      	cmp	r2, r0
 8003830:	bf08      	it	eq
 8003832:	f043 0301 	orreq.w	r3, r3, #1
 8003836:	3018      	adds	r0, #24
 8003838:	4282      	cmp	r2, r0
 800383a:	bf08      	it	eq
 800383c:	f043 0301 	orreq.w	r3, r3, #1
 8003840:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8003844:	4282      	cmp	r2, r0
 8003846:	bf08      	it	eq
 8003848:	f043 0301 	orreq.w	r3, r3, #1
 800384c:	3018      	adds	r0, #24
 800384e:	4282      	cmp	r2, r0
 8003850:	bf08      	it	eq
 8003852:	f043 0301 	orreq.w	r3, r3, #1
 8003856:	3018      	adds	r0, #24
 8003858:	4282      	cmp	r2, r0
 800385a:	bf08      	it	eq
 800385c:	f043 0301 	orreq.w	r3, r3, #1
 8003860:	3018      	adds	r0, #24
 8003862:	4282      	cmp	r2, r0
 8003864:	bf08      	it	eq
 8003866:	f043 0301 	orreq.w	r3, r3, #1
 800386a:	3018      	adds	r0, #24
 800386c:	4282      	cmp	r2, r0
 800386e:	bf08      	it	eq
 8003870:	f043 0301 	orreq.w	r3, r3, #1
 8003874:	3018      	adds	r0, #24
 8003876:	4282      	cmp	r2, r0
 8003878:	bf08      	it	eq
 800387a:	f043 0301 	orreq.w	r3, r3, #1
 800387e:	3018      	adds	r0, #24
 8003880:	4282      	cmp	r2, r0
 8003882:	bf08      	it	eq
 8003884:	f043 0301 	orreq.w	r3, r3, #1
 8003888:	b91b      	cbnz	r3, 8003892 <HAL_DMA_IRQHandler+0xb6>
 800388a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a40 <HAL_DMA_IRQHandler+0x264>)
 800388c:	429a      	cmp	r2, r3
 800388e:	f040 812f 	bne.w	8003af0 <HAL_DMA_IRQHandler+0x314>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003894:	2108      	movs	r1, #8
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	4099      	lsls	r1, r3
 800389c:	4221      	tst	r1, r4
 800389e:	d00b      	beq.n	80038b8 <HAL_DMA_IRQHandler+0xdc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80038a0:	6810      	ldr	r0, [r2, #0]
 80038a2:	0740      	lsls	r0, r0, #29
 80038a4:	d508      	bpl.n	80038b8 <HAL_DMA_IRQHandler+0xdc>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80038a6:	6810      	ldr	r0, [r2, #0]
 80038a8:	f020 0004 	bic.w	r0, r0, #4
 80038ac:	6010      	str	r0, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038ae:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038b2:	f041 0101 	orr.w	r1, r1, #1
 80038b6:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038b8:	fa24 f103 	lsr.w	r1, r4, r3
 80038bc:	07c8      	lsls	r0, r1, #31
 80038be:	d509      	bpl.n	80038d4 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80038c0:	6951      	ldr	r1, [r2, #20]
 80038c2:	0609      	lsls	r1, r1, #24
 80038c4:	d506      	bpl.n	80038d4 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038c6:	2101      	movs	r1, #1
 80038c8:	4099      	lsls	r1, r3
 80038ca:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038ce:	f041 0102 	orr.w	r1, r1, #2
 80038d2:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038d4:	2104      	movs	r1, #4
 80038d6:	4099      	lsls	r1, r3
 80038d8:	4221      	tst	r1, r4
 80038da:	d007      	beq.n	80038ec <HAL_DMA_IRQHandler+0x110>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80038dc:	6810      	ldr	r0, [r2, #0]
 80038de:	0780      	lsls	r0, r0, #30
 80038e0:	d504      	bpl.n	80038ec <HAL_DMA_IRQHandler+0x110>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038e2:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038e6:	f041 0104 	orr.w	r1, r1, #4
 80038ea:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ec:	2110      	movs	r1, #16
 80038ee:	4099      	lsls	r1, r3
 80038f0:	4221      	tst	r1, r4
 80038f2:	f000 80b0 	beq.w	8003a56 <HAL_DMA_IRQHandler+0x27a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80038f6:	6810      	ldr	r0, [r2, #0]
 80038f8:	0700      	lsls	r0, r0, #28
 80038fa:	f140 80ac 	bpl.w	8003a56 <HAL_DMA_IRQHandler+0x27a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038fe:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003900:	6811      	ldr	r1, [r2, #0]
 8003902:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003906:	6811      	ldr	r1, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003908:	f040 809e 	bne.w	8003a48 <HAL_DMA_IRQHandler+0x26c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800390c:	05c9      	lsls	r1, r1, #23
 800390e:	d403      	bmi.n	8003918 <HAL_DMA_IRQHandler+0x13c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003910:	6811      	ldr	r1, [r2, #0]
 8003912:	f021 0108 	bic.w	r1, r1, #8
 8003916:	6011      	str	r1, [r2, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8003918:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800391a:	2900      	cmp	r1, #0
 800391c:	f000 809b 	beq.w	8003a56 <HAL_DMA_IRQHandler+0x27a>
            hdma->XferHalfCpltCallback(hdma);
 8003920:	4638      	mov	r0, r7
 8003922:	4788      	blx	r1
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003924:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003926:	2120      	movs	r1, #32
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	4099      	lsls	r1, r3
 800392e:	4221      	tst	r1, r4
 8003930:	d053      	beq.n	80039da <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	4840      	ldr	r0, [pc, #256]	@ (8003a38 <HAL_DMA_IRQHandler+0x25c>)
 8003936:	4c41      	ldr	r4, [pc, #260]	@ (8003a3c <HAL_DMA_IRQHandler+0x260>)
 8003938:	42a2      	cmp	r2, r4
 800393a:	bf18      	it	ne
 800393c:	4282      	cmpne	r2, r0
 800393e:	f104 0418 	add.w	r4, r4, #24
 8003942:	bf0c      	ite	eq
 8003944:	2001      	moveq	r0, #1
 8003946:	2000      	movne	r0, #0
 8003948:	42a2      	cmp	r2, r4
 800394a:	bf08      	it	eq
 800394c:	f040 0001 	orreq.w	r0, r0, #1
 8003950:	3418      	adds	r4, #24
 8003952:	42a2      	cmp	r2, r4
 8003954:	bf08      	it	eq
 8003956:	f040 0001 	orreq.w	r0, r0, #1
 800395a:	3418      	adds	r4, #24
 800395c:	42a2      	cmp	r2, r4
 800395e:	bf08      	it	eq
 8003960:	f040 0001 	orreq.w	r0, r0, #1
 8003964:	3418      	adds	r4, #24
 8003966:	42a2      	cmp	r2, r4
 8003968:	bf08      	it	eq
 800396a:	f040 0001 	orreq.w	r0, r0, #1
 800396e:	3418      	adds	r4, #24
 8003970:	42a2      	cmp	r2, r4
 8003972:	bf08      	it	eq
 8003974:	f040 0001 	orreq.w	r0, r0, #1
 8003978:	3418      	adds	r4, #24
 800397a:	42a2      	cmp	r2, r4
 800397c:	bf08      	it	eq
 800397e:	f040 0001 	orreq.w	r0, r0, #1
 8003982:	f504 7456 	add.w	r4, r4, #856	@ 0x358
 8003986:	42a2      	cmp	r2, r4
 8003988:	bf08      	it	eq
 800398a:	f040 0001 	orreq.w	r0, r0, #1
 800398e:	3418      	adds	r4, #24
 8003990:	42a2      	cmp	r2, r4
 8003992:	bf08      	it	eq
 8003994:	f040 0001 	orreq.w	r0, r0, #1
 8003998:	3418      	adds	r4, #24
 800399a:	42a2      	cmp	r2, r4
 800399c:	bf08      	it	eq
 800399e:	f040 0001 	orreq.w	r0, r0, #1
 80039a2:	3418      	adds	r4, #24
 80039a4:	42a2      	cmp	r2, r4
 80039a6:	bf08      	it	eq
 80039a8:	f040 0001 	orreq.w	r0, r0, #1
 80039ac:	3418      	adds	r4, #24
 80039ae:	42a2      	cmp	r2, r4
 80039b0:	bf08      	it	eq
 80039b2:	f040 0001 	orreq.w	r0, r0, #1
 80039b6:	3418      	adds	r4, #24
 80039b8:	42a2      	cmp	r2, r4
 80039ba:	bf08      	it	eq
 80039bc:	f040 0001 	orreq.w	r0, r0, #1
 80039c0:	3418      	adds	r4, #24
 80039c2:	42a2      	cmp	r2, r4
 80039c4:	bf08      	it	eq
 80039c6:	f040 0001 	orreq.w	r0, r0, #1
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d147      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x282>
 80039ce:	481c      	ldr	r0, [pc, #112]	@ (8003a40 <HAL_DMA_IRQHandler+0x264>)
 80039d0:	4282      	cmp	r2, r0
 80039d2:	d044      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x282>
 80039d4:	6810      	ldr	r0, [r2, #0]
 80039d6:	0780      	lsls	r0, r0, #30
 80039d8:	d444      	bmi.n	8003a64 <HAL_DMA_IRQHandler+0x288>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d070      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x2e6>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e2:	07dc      	lsls	r4, r3, #31
 80039e4:	d51e      	bpl.n	8003a24 <HAL_DMA_IRQHandler+0x248>
        __HAL_DMA_DISABLE(hdma);
 80039e6:	683a      	ldr	r2, [r7, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80039e8:	2104      	movs	r1, #4
 80039ea:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 80039ee:	4915      	ldr	r1, [pc, #84]	@ (8003a44 <HAL_DMA_IRQHandler+0x268>)
        __HAL_DMA_DISABLE(hdma);
 80039f0:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039f2:	fba1 6106 	umull	r6, r1, r1, r6
        __HAL_DMA_DISABLE(hdma);
 80039f6:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80039fa:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e002      	b.n	8003a06 <HAL_DMA_IRQHandler+0x22a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	07d8      	lsls	r0, r3, #31
 8003a04:	d504      	bpl.n	8003a10 <HAL_DMA_IRQHandler+0x234>
          if (++count > timeout)
 8003a06:	9b01      	ldr	r3, [sp, #4]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	428b      	cmp	r3, r1
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	d9f7      	bls.n	8003a00 <HAL_DMA_IRQHandler+0x224>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a10:	6813      	ldr	r3, [r2, #0]
 8003a12:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a14:	bf4c      	ite	mi
 8003a16:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003a18:	2301      	movpl	r3, #1
 8003a1a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8003a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d04b      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x2e6>
          hdma->XferCpltCallback(hdma);
 8003a2a:	4638      	mov	r0, r7
}
 8003a2c:	b003      	add	sp, #12
 8003a2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 8003a32:	4718      	bx	r3
 8003a34:	2400004c 	.word	0x2400004c
 8003a38:	40020010 	.word	0x40020010
 8003a3c:	40020028 	.word	0x40020028
 8003a40:	400204b8 	.word	0x400204b8
 8003a44:	1b4e81b5 	.word	0x1b4e81b5
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a48:	0308      	lsls	r0, r1, #12
 8003a4a:	f57f af65 	bpl.w	8003918 <HAL_DMA_IRQHandler+0x13c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003a4e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a50:	2900      	cmp	r1, #0
 8003a52:	f47f af65 	bne.w	8003920 <HAL_DMA_IRQHandler+0x144>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a56:	2120      	movs	r1, #32
 8003a58:	4099      	lsls	r1, r3
 8003a5a:	420c      	tst	r4, r1
 8003a5c:	d0bd      	beq.n	80039da <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003a5e:	6810      	ldr	r0, [r2, #0]
 8003a60:	06c4      	lsls	r4, r0, #27
 8003a62:	d5ba      	bpl.n	80039da <HAL_DMA_IRQHandler+0x1fe>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a64:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a66:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8003a6a:	2904      	cmp	r1, #4
 8003a6c:	d00e      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x2b0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a6e:	6813      	ldr	r3, [r2, #0]
 8003a70:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a74:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a76:	d026      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0x2ea>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a78:	031d      	lsls	r5, r3, #12
 8003a7a:	d531      	bpl.n	8003ae0 <HAL_DMA_IRQHandler+0x304>
          if(hdma->XferCpltCallback != NULL)
 8003a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ab      	beq.n	80039da <HAL_DMA_IRQHandler+0x1fe>
            hdma->XferCpltCallback(hdma);
 8003a82:	4638      	mov	r0, r7
 8003a84:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a88:	b1db      	cbz	r3, 8003ac2 <HAL_DMA_IRQHandler+0x2e6>
 8003a8a:	e7a9      	b.n	80039e0 <HAL_DMA_IRQHandler+0x204>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a8c:	6811      	ldr	r1, [r2, #0]
 8003a8e:	f021 0116 	bic.w	r1, r1, #22
 8003a92:	6011      	str	r1, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a94:	6951      	ldr	r1, [r2, #20]
 8003a96:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003a9a:	6151      	str	r1, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a9e:	b319      	cbz	r1, 8003ae8 <HAL_DMA_IRQHandler+0x30c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003aa0:	6811      	ldr	r1, [r2, #0]
 8003aa2:	f021 0108 	bic.w	r1, r1, #8
 8003aa6:	6011      	str	r1, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aa8:	223f      	movs	r2, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8003aaa:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
          __HAL_UNLOCK(hdma);
 8003ab0:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ab2:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8003ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003aba:	f887 2034 	strb.w	r2, [r7, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1b3      	bne.n	8003a2a <HAL_DMA_IRQHandler+0x24e>
}
 8003ac2:	b003      	add	sp, #12
 8003ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ac6:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8003aca:	d1d7      	bne.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003acc:	6811      	ldr	r1, [r2, #0]
 8003ace:	f021 0110 	bic.w	r1, r1, #16
 8003ad2:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003ad4:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8003ad6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003ada:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8003ade:	e7cd      	b.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1CpltCallback != NULL)
 8003ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1cd      	bne.n	8003a82 <HAL_DMA_IRQHandler+0x2a6>
 8003ae6:	e778      	b.n	80039da <HAL_DMA_IRQHandler+0x1fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ae8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003aea:	2900      	cmp	r1, #0
 8003aec:	d1d8      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x2c4>
 8003aee:	e7db      	b.n	8003aa8 <HAL_DMA_IRQHandler+0x2cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003af0:	4b40      	ldr	r3, [pc, #256]	@ (8003bf4 <HAL_DMA_IRQHandler+0x418>)
 8003af2:	4841      	ldr	r0, [pc, #260]	@ (8003bf8 <HAL_DMA_IRQHandler+0x41c>)
 8003af4:	4282      	cmp	r2, r0
 8003af6:	bf18      	it	ne
 8003af8:	429a      	cmpne	r2, r3
 8003afa:	f100 0014 	add.w	r0, r0, #20
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	4282      	cmp	r2, r0
 8003b06:	bf08      	it	eq
 8003b08:	f043 0301 	orreq.w	r3, r3, #1
 8003b0c:	3014      	adds	r0, #20
 8003b0e:	4282      	cmp	r2, r0
 8003b10:	bf08      	it	eq
 8003b12:	f043 0301 	orreq.w	r3, r3, #1
 8003b16:	3014      	adds	r0, #20
 8003b18:	4282      	cmp	r2, r0
 8003b1a:	bf08      	it	eq
 8003b1c:	f043 0301 	orreq.w	r3, r3, #1
 8003b20:	3014      	adds	r0, #20
 8003b22:	4282      	cmp	r2, r0
 8003b24:	bf08      	it	eq
 8003b26:	f043 0301 	orreq.w	r3, r3, #1
 8003b2a:	3014      	adds	r0, #20
 8003b2c:	4282      	cmp	r2, r0
 8003b2e:	bf08      	it	eq
 8003b30:	f043 0301 	orreq.w	r3, r3, #1
 8003b34:	b913      	cbnz	r3, 8003b3c <HAL_DMA_IRQHandler+0x360>
 8003b36:	4b31      	ldr	r3, [pc, #196]	@ (8003bfc <HAL_DMA_IRQHandler+0x420>)
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1c2      	bne.n	8003ac2 <HAL_DMA_IRQHandler+0x2e6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b3c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003b3e:	2404      	movs	r4, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b40:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b42:	f000 001f 	and.w	r0, r0, #31
 8003b46:	4084      	lsls	r4, r0
 8003b48:	420c      	tst	r4, r1
 8003b4a:	d00b      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x388>
 8003b4c:	075e      	lsls	r6, r3, #29
 8003b4e:	d509      	bpl.n	8003b64 <HAL_DMA_IRQHandler+0x388>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b50:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b52:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b54:	d532      	bpl.n	8003bbc <HAL_DMA_IRQHandler+0x3e0>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b56:	03da      	lsls	r2, r3, #15
 8003b58:	d436      	bmi.n	8003bc8 <HAL_DMA_IRQHandler+0x3ec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f47f af64 	bne.w	8003a2a <HAL_DMA_IRQHandler+0x24e>
 8003b62:	e7ae      	b.n	8003ac2 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b64:	2402      	movs	r4, #2
 8003b66:	4084      	lsls	r4, r0
 8003b68:	420c      	tst	r4, r1
 8003b6a:	d00b      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x3a8>
 8003b6c:	079e      	lsls	r6, r3, #30
 8003b6e:	d509      	bpl.n	8003b84 <HAL_DMA_IRQHandler+0x3a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b70:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b72:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b74:	d52d      	bpl.n	8003bd2 <HAL_DMA_IRQHandler+0x3f6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b76:	03da      	lsls	r2, r3, #15
 8003b78:	d437      	bmi.n	8003bea <HAL_DMA_IRQHandler+0x40e>
          if(hdma->XferM1CpltCallback != NULL)
 8003b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f47f af54 	bne.w	8003a2a <HAL_DMA_IRQHandler+0x24e>
 8003b82:	e79e      	b.n	8003ac2 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b84:	2408      	movs	r4, #8
 8003b86:	4084      	lsls	r4, r0
 8003b88:	420c      	tst	r4, r1
 8003b8a:	d09a      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x2e6>
 8003b8c:	071b      	lsls	r3, r3, #28
 8003b8e:	d598      	bpl.n	8003ac2 <HAL_DMA_IRQHandler+0x2e6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b90:	6813      	ldr	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 8003b92:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b94:	f023 030e 	bic.w	r3, r3, #14
 8003b98:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b9a:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8003b9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b9e:	fa03 f000 	lsl.w	r0, r3, r0
 8003ba2:	6068      	str	r0, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ba4:	657b      	str	r3, [r7, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 8003ba6:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003baa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 8003bae:	2a00      	cmp	r2, #0
 8003bb0:	d087      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x2e6>
        hdma->XferErrorCallback(hdma);
 8003bb2:	4638      	mov	r0, r7
}
 8003bb4:	b003      	add	sp, #12
 8003bb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8003bba:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bbc:	069b      	lsls	r3, r3, #26
 8003bbe:	d403      	bmi.n	8003bc8 <HAL_DMA_IRQHandler+0x3ec>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bc0:	6813      	ldr	r3, [r2, #0]
 8003bc2:	f023 0304 	bic.w	r3, r3, #4
 8003bc6:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f47f af2d 	bne.w	8003a2a <HAL_DMA_IRQHandler+0x24e>
 8003bd0:	e777      	b.n	8003ac2 <HAL_DMA_IRQHandler+0x2e6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bd2:	f013 0320 	ands.w	r3, r3, #32
 8003bd6:	d108      	bne.n	8003bea <HAL_DMA_IRQHandler+0x40e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bd8:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003bda:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bdc:	f021 010a 	bic.w	r1, r1, #10
 8003be0:	6011      	str	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003be2:	f887 0035 	strb.w	r0, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003be6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8003bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f47f af1c 	bne.w	8003a2a <HAL_DMA_IRQHandler+0x24e>
 8003bf2:	e766      	b.n	8003ac2 <HAL_DMA_IRQHandler+0x2e6>
 8003bf4:	58025408 	.word	0x58025408
 8003bf8:	5802541c 	.word	0x5802541c
 8003bfc:	58025494 	.word	0x58025494

08003c00 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c00:	680b      	ldr	r3, [r1, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 81dc 	beq.w	8003fc0 <HAL_GPIO_Init+0x3c0>
 8003c08:	4ab4      	ldr	r2, [pc, #720]	@ (8003edc <HAL_GPIO_Init+0x2dc>)
 8003c0a:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 8003c0c:	f04f 0200 	mov.w	r2, #0
{
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c14:	f04f 0b01 	mov.w	fp, #1
{
 8003c18:	b085      	sub	sp, #20
 8003c1a:	f000 8105 	beq.w	8003e28 <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c1e:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c22:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c24:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 8003c28:	9b00      	ldr	r3, [sp, #0]
 8003c2a:	ea1c 0a03 	ands.w	sl, ip, r3
 8003c2e:	f000 814b 	beq.w	8003ec8 <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c32:	684d      	ldr	r5, [r1, #4]
 8003c34:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c36:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c38:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c3c:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c40:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c44:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c46:	f1b8 0f01 	cmp.w	r8, #1
 8003c4a:	f240 815d 	bls.w	8003f08 <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4e:	2f03      	cmp	r7, #3
 8003c50:	f040 81cf 	bne.w	8003ff2 <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c54:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8003c58:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c5a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c5e:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c62:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 8003c66:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c68:	f000 812e 	beq.w	8003ec8 <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6c:	4e9c      	ldr	r6, [pc, #624]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c6e:	f002 0703 	and.w	r7, r2, #3
 8003c72:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c74:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c78:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c7a:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c7e:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c82:	4b98      	ldr	r3, [pc, #608]	@ (8003ee4 <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c84:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8003c88:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 8003c8c:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c90:	4298      	cmp	r0, r3
 8003c92:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c96:	f004 0402 	and.w	r4, r4, #2
 8003c9a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003c9e:	9403      	str	r4, [sp, #12]
 8003ca0:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003ca2:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ca4:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ca8:	f000 8178 	beq.w	8003f9c <HAL_GPIO_Init+0x39c>
 8003cac:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee8 <HAL_GPIO_Init+0x2e8>)
 8003cae:	4298      	cmp	r0, r3
 8003cb0:	f000 80de 	beq.w	8003e70 <HAL_GPIO_Init+0x270>
 8003cb4:	f8df c234 	ldr.w	ip, [pc, #564]	@ 8003eec <HAL_GPIO_Init+0x2ec>
 8003cb8:	4560      	cmp	r0, ip
 8003cba:	f000 817b 	beq.w	8003fb4 <HAL_GPIO_Init+0x3b4>
 8003cbe:	f8df c230 	ldr.w	ip, [pc, #560]	@ 8003ef0 <HAL_GPIO_Init+0x2f0>
 8003cc2:	4560      	cmp	r0, ip
 8003cc4:	f000 817d 	beq.w	8003fc2 <HAL_GPIO_Init+0x3c2>
 8003cc8:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8003ef4 <HAL_GPIO_Init+0x2f4>
 8003ccc:	4560      	cmp	r0, ip
 8003cce:	f000 816b 	beq.w	8003fa8 <HAL_GPIO_Init+0x3a8>
 8003cd2:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8003ef8 <HAL_GPIO_Init+0x2f8>
 8003cd6:	4560      	cmp	r0, ip
 8003cd8:	f000 8179 	beq.w	8003fce <HAL_GPIO_Init+0x3ce>
 8003cdc:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 8003efc <HAL_GPIO_Init+0x2fc>
 8003ce0:	4560      	cmp	r0, ip
 8003ce2:	f000 817a 	beq.w	8003fda <HAL_GPIO_Init+0x3da>
 8003ce6:	f8df c218 	ldr.w	ip, [pc, #536]	@ 8003f00 <HAL_GPIO_Init+0x300>
 8003cea:	4560      	cmp	r0, ip
 8003cec:	f000 817b 	beq.w	8003fe6 <HAL_GPIO_Init+0x3e6>
 8003cf0:	f8df c210 	ldr.w	ip, [pc, #528]	@ 8003f04 <HAL_GPIO_Init+0x304>
 8003cf4:	4560      	cmp	r0, ip
 8003cf6:	bf0c      	ite	eq
 8003cf8:	f04f 0c09 	moveq.w	ip, #9
 8003cfc:	f04f 0c0a 	movne.w	ip, #10
 8003d00:	fa0c f707 	lsl.w	r7, ip, r7
 8003d04:	433c      	orrs	r4, r7
 8003d06:	e0b8      	b.n	8003e7a <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 8003d08:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d0c:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d0e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d10:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d14:	fa06 f807 	lsl.w	r8, r6, r7
 8003d18:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003d1c:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d20:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003d24:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d28:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d2c:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d30:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 8003d34:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 8003d38:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d3c:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d3e:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d42:	fa06 fe07 	lsl.w	lr, r6, r7
 8003d46:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 8003d4a:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d4e:	d117      	bne.n	8003d80 <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d50:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d54:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003d56:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d5a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003d5e:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d62:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8003d66:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d6a:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d6c:	260f      	movs	r6, #15
 8003d6e:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d72:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d74:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d78:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003d7c:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d80:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8003d82:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d84:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d88:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d8c:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8003d90:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d92:	d045      	beq.n	8003e20 <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d94:	4f52      	ldr	r7, [pc, #328]	@ (8003ee0 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d96:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d98:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8003d9c:	f044 0402 	orr.w	r4, r4, #2
 8003da0:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8003da4:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8003da8:	f022 0703 	bic.w	r7, r2, #3
 8003dac:	f004 0402 	and.w	r4, r4, #2
 8003db0:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 8003db4:	9403      	str	r4, [sp, #12]
 8003db6:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8003dba:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dbc:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003dc0:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dc4:	00a4      	lsls	r4, r4, #2
 8003dc6:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dca:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dcc:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd0:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 8003dd2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 8003dd6:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 8003dda:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ddc:	f100 80d2 	bmi.w	8003f84 <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 8003de0:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003de2:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8003de6:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 8003de8:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dea:	02ae      	lsls	r6, r5, #10
 8003dec:	f100 80d3 	bmi.w	8003f96 <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 8003df0:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003df2:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8003df6:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003df8:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dfc:	03ae      	lsls	r6, r5, #14
 8003dfe:	f100 80c7 	bmi.w	8003f90 <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 8003e02:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e04:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e08:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003e0a:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003e0e:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e12:	f100 80ba 	bmi.w	8003f8a <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 8003e16:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003e18:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8003e1c:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 8003e20:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e22:	fa33 f402 	lsrs.w	r4, r3, r2
 8003e26:	d055      	beq.n	8003ed4 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e28:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 8003e2c:	ea13 0c0e 	ands.w	ip, r3, lr
 8003e30:	d0f6      	beq.n	8003e20 <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e32:	684d      	ldr	r5, [r1, #4]
 8003e34:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e36:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e38:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e3c:	fa06 f807 	lsl.w	r8, r6, r7
 8003e40:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e44:	f104 38ff 	add.w	r8, r4, #4294967295
 8003e48:	f1b8 0f01 	cmp.w	r8, #1
 8003e4c:	f67f af5c 	bls.w	8003d08 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e50:	2c03      	cmp	r4, #3
 8003e52:	d095      	beq.n	8003d80 <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 8003e54:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8003edc <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e58:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 8003e5a:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e5e:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e62:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e66:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 8003e6a:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6e:	e787      	b.n	8003d80 <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e70:	f04f 0c02 	mov.w	ip, #2
 8003e74:	fa0c f707 	lsl.w	r7, ip, r7
 8003e78:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e7a:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e7c:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8003e7e:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8003e82:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 8003e86:	bf4c      	ite	mi
 8003e88:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 8003e8c:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e8e:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 8003e90:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 8003e94:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8003e98:	bf54      	ite	pl
 8003e9a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003e9c:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ea0:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8003ea2:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003ea6:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8003eaa:	bf54      	ite	pl
 8003eac:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003eae:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eb2:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003eb4:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003eb8:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8003ebc:	bf54      	ite	pl
 8003ebe:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003ec0:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 8003ec4:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 8003ec8:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003eca:	9b00      	ldr	r3, [sp, #0]
 8003ecc:	fa33 f402 	lsrs.w	r4, r3, r2
 8003ed0:	f47f aea8 	bne.w	8003c24 <HAL_GPIO_Init+0x24>
  }
}
 8003ed4:	b005      	add	sp, #20
 8003ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eda:	bf00      	nop
 8003edc:	58020000 	.word	0x58020000
 8003ee0:	58024400 	.word	0x58024400
 8003ee4:	58020400 	.word	0x58020400
 8003ee8:	58020800 	.word	0x58020800
 8003eec:	58020c00 	.word	0x58020c00
 8003ef0:	58021000 	.word	0x58021000
 8003ef4:	58021400 	.word	0x58021400
 8003ef8:	58021800 	.word	0x58021800
 8003efc:	58021c00 	.word	0x58021c00
 8003f00:	58022000 	.word	0x58022000
 8003f04:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 8003f08:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f0c:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f0e:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f10:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f14:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f18:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f1a:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003f1e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f22:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003f26:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2a:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f2e:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f32:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8003f36:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f3a:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 8003f3e:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f42:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f46:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003f4a:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f4e:	f47f ae81 	bne.w	8003c54 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f52:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f56:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003f58:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f5c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003f60:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f64:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8003f68:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f6c:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f6e:	230f      	movs	r3, #15
 8003f70:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f74:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f76:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f7a:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003f7e:	f8c8 c020 	str.w	ip, [r8, #32]
 8003f82:	e667      	b.n	8003c54 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8003f84:	ea44 040c 	orr.w	r4, r4, ip
 8003f88:	e72b      	b.n	8003de2 <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 8003f8a:	ea44 040c 	orr.w	r4, r4, ip
 8003f8e:	e743      	b.n	8003e18 <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 8003f90:	ea4c 0404 	orr.w	r4, ip, r4
 8003f94:	e736      	b.n	8003e04 <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 8003f96:	ea44 040c 	orr.w	r4, r4, ip
 8003f9a:	e72a      	b.n	8003df2 <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f9c:	f04f 0c01 	mov.w	ip, #1
 8003fa0:	fa0c f707 	lsl.w	r7, ip, r7
 8003fa4:	433c      	orrs	r4, r7
 8003fa6:	e768      	b.n	8003e7a <HAL_GPIO_Init+0x27a>
 8003fa8:	f04f 0c05 	mov.w	ip, #5
 8003fac:	fa0c f707 	lsl.w	r7, ip, r7
 8003fb0:	433c      	orrs	r4, r7
 8003fb2:	e762      	b.n	8003e7a <HAL_GPIO_Init+0x27a>
 8003fb4:	f04f 0c03 	mov.w	ip, #3
 8003fb8:	fa0c f707 	lsl.w	r7, ip, r7
 8003fbc:	433c      	orrs	r4, r7
 8003fbe:	e75c      	b.n	8003e7a <HAL_GPIO_Init+0x27a>
 8003fc0:	4770      	bx	lr
 8003fc2:	f04f 0c04 	mov.w	ip, #4
 8003fc6:	fa0c f707 	lsl.w	r7, ip, r7
 8003fca:	433c      	orrs	r4, r7
 8003fcc:	e755      	b.n	8003e7a <HAL_GPIO_Init+0x27a>
 8003fce:	f04f 0c06 	mov.w	ip, #6
 8003fd2:	fa0c f707 	lsl.w	r7, ip, r7
 8003fd6:	433c      	orrs	r4, r7
 8003fd8:	e74f      	b.n	8003e7a <HAL_GPIO_Init+0x27a>
 8003fda:	f04f 0c07 	mov.w	ip, #7
 8003fde:	fa0c f707 	lsl.w	r7, ip, r7
 8003fe2:	433c      	orrs	r4, r7
 8003fe4:	e749      	b.n	8003e7a <HAL_GPIO_Init+0x27a>
 8003fe6:	f04f 0c08 	mov.w	ip, #8
 8003fea:	fa0c f707 	lsl.w	r7, ip, r7
 8003fee:	433c      	orrs	r4, r7
 8003ff0:	e743      	b.n	8003e7a <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 8003ff2:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff6:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ff8:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ffc:	fa03 fc04 	lsl.w	ip, r3, r4
 8004000:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8004004:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004008:	e624      	b.n	8003c54 <HAL_GPIO_Init+0x54>
 800400a:	bf00      	nop

0800400c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800400c:	b902      	cbnz	r2, 8004010 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800400e:	0409      	lsls	r1, r1, #16
 8004010:	6181      	str	r1, [r0, #24]
  }
}
 8004012:	4770      	bx	lr

08004014 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004014:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004016:	4c10      	ldr	r4, [pc, #64]	@ (8004058 <HAL_PWREx_ConfigSupply+0x44>)
 8004018:	68e3      	ldr	r3, [r4, #12]
 800401a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800401e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004020:	d105      	bne.n	800402e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	1a18      	subs	r0, r3, r0
 8004028:	bf18      	it	ne
 800402a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800402c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800402e:	f023 0307 	bic.w	r3, r3, #7
 8004032:	4303      	orrs	r3, r0
 8004034:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8004036:	f7fd fb77 	bl	8001728 <HAL_GetTick>
 800403a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800403c:	e005      	b.n	800404a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800403e:	f7fd fb73 	bl	8001728 <HAL_GetTick>
 8004042:	1b40      	subs	r0, r0, r5
 8004044:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004048:	d804      	bhi.n	8004054 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800404a:	6863      	ldr	r3, [r4, #4]
 800404c:	049b      	lsls	r3, r3, #18
 800404e:	d5f6      	bpl.n	800403e <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8004050:	2000      	movs	r0, #0
}
 8004052:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004054:	2001      	movs	r0, #1
}
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	58024800 	.word	0x58024800

0800405c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800405c:	4b33      	ldr	r3, [pc, #204]	@ (800412c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800405e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004060:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004062:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004064:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8004066:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800406a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800406c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004070:	d036      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004072:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004076:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800407a:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800407e:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004082:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 8004086:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800408c:	ee06 2a90 	vmov	s13, r2
 8004090:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8004094:	d002      	beq.n	800409c <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8004096:	2902      	cmp	r1, #2
 8004098:	d042      	beq.n	8004120 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800409a:	b319      	cbz	r1, 80040e4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800409c:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8004130 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80040a0:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80040b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040b6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80040ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040be:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80040c2:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80040ca:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80040cc:	ee07 3a10 	vmov	s14, r3
 80040d0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80040d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80040d8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80040dc:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80040e0:	bc30      	pop	{r4, r5}
 80040e2:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	0692      	lsls	r2, r2, #26
 80040e8:	d51d      	bpl.n	8004126 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040ea:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040f0:	4a10      	ldr	r2, [pc, #64]	@ (8004134 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040f4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040fc:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040fe:	ee06 3a10 	vmov	s12, r3
 8004102:	ee05 2a90 	vmov	s11, r2
 8004106:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800410a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800410e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004112:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004116:	ee36 7a26 	vadd.f32	s14, s12, s13
 800411a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800411e:	e7d0      	b.n	80040c2 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004120:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004138 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8004124:	e7bc      	b.n	80040a0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004126:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800413c <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 800412a:	e7b9      	b.n	80040a0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800412c:	58024400 	.word	0x58024400
 8004130:	4a742400 	.word	0x4a742400
 8004134:	03d09000 	.word	0x03d09000
 8004138:	4bbebc20 	.word	0x4bbebc20
 800413c:	4c742400 	.word	0x4c742400

08004140 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004140:	2800      	cmp	r0, #0
 8004142:	f000 82e7 	beq.w	8004714 <HAL_RCC_OscConfig+0x5d4>
{
 8004146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004148:	6803      	ldr	r3, [r0, #0]
 800414a:	4604      	mov	r4, r0
 800414c:	07d9      	lsls	r1, r3, #31
 800414e:	d52e      	bpl.n	80041ae <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004150:	4997      	ldr	r1, [pc, #604]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
 8004152:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004154:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004156:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800415a:	2a10      	cmp	r2, #16
 800415c:	f000 80ee 	beq.w	800433c <HAL_RCC_OscConfig+0x1fc>
 8004160:	2a18      	cmp	r2, #24
 8004162:	f000 80e6 	beq.w	8004332 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004166:	6863      	ldr	r3, [r4, #4]
 8004168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416c:	f000 8111 	beq.w	8004392 <HAL_RCC_OscConfig+0x252>
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8167 	beq.w	8004444 <HAL_RCC_OscConfig+0x304>
 8004176:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800417a:	4b8d      	ldr	r3, [pc, #564]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	f000 8288 	beq.w	8004692 <HAL_RCC_OscConfig+0x552>
 8004182:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800418e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004190:	f7fd faca 	bl	8001728 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004194:	4e86      	ldr	r6, [pc, #536]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8004196:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004198:	e005      	b.n	80041a6 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800419a:	f7fd fac5 	bl	8001728 <HAL_GetTick>
 800419e:	1b40      	subs	r0, r0, r5
 80041a0:	2864      	cmp	r0, #100	@ 0x64
 80041a2:	f200 814d 	bhi.w	8004440 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041a6:	6833      	ldr	r3, [r6, #0]
 80041a8:	039b      	lsls	r3, r3, #14
 80041aa:	d5f6      	bpl.n	800419a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	079d      	lsls	r5, r3, #30
 80041b0:	d470      	bmi.n	8004294 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041b2:	06d9      	lsls	r1, r3, #27
 80041b4:	d533      	bpl.n	800421e <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b6:	4a7e      	ldr	r2, [pc, #504]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
 80041b8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041ba:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	f000 80cb 	beq.w	800435c <HAL_RCC_OscConfig+0x21c>
 80041c6:	2b18      	cmp	r3, #24
 80041c8:	f000 80c3 	beq.w	8004352 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80041cc:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80041ce:	4d78      	ldr	r5, [pc, #480]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 816f 	beq.w	80044b4 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 80041d6:	682b      	ldr	r3, [r5, #0]
 80041d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80041de:	f7fd faa3 	bl	8001728 <HAL_GetTick>
 80041e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041e4:	e005      	b.n	80041f2 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041e6:	f7fd fa9f 	bl	8001728 <HAL_GetTick>
 80041ea:	1b80      	subs	r0, r0, r6
 80041ec:	2802      	cmp	r0, #2
 80041ee:	f200 8127 	bhi.w	8004440 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041f2:	682b      	ldr	r3, [r5, #0]
 80041f4:	05db      	lsls	r3, r3, #23
 80041f6:	d5f6      	bpl.n	80041e6 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041f8:	f7fd fa9c 	bl	8001734 <HAL_GetREVID>
 80041fc:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004200:	4298      	cmp	r0, r3
 8004202:	f200 8267 	bhi.w	80046d4 <HAL_RCC_OscConfig+0x594>
 8004206:	6a22      	ldr	r2, [r4, #32]
 8004208:	686b      	ldr	r3, [r5, #4]
 800420a:	2a20      	cmp	r2, #32
 800420c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004210:	bf0c      	ite	eq
 8004212:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8004216:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800421a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	071d      	lsls	r5, r3, #28
 8004220:	d516      	bpl.n	8004250 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004222:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004224:	4d62      	ldr	r5, [pc, #392]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 8122 	beq.w	8004470 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 800422c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004234:	f7fd fa78 	bl	8001728 <HAL_GetTick>
 8004238:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800423a:	e005      	b.n	8004248 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800423c:	f7fd fa74 	bl	8001728 <HAL_GetTick>
 8004240:	1b80      	subs	r0, r0, r6
 8004242:	2802      	cmp	r0, #2
 8004244:	f200 80fc 	bhi.w	8004440 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004248:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800424a:	0798      	lsls	r0, r3, #30
 800424c:	d5f6      	bpl.n	800423c <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	069a      	lsls	r2, r3, #26
 8004252:	d516      	bpl.n	8004282 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004254:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8004256:	4d56      	ldr	r5, [pc, #344]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 811a 	beq.w	8004492 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 800425e:	682b      	ldr	r3, [r5, #0]
 8004260:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004264:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004266:	f7fd fa5f 	bl	8001728 <HAL_GetTick>
 800426a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800426c:	e005      	b.n	800427a <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800426e:	f7fd fa5b 	bl	8001728 <HAL_GetTick>
 8004272:	1b80      	subs	r0, r0, r6
 8004274:	2802      	cmp	r0, #2
 8004276:	f200 80e3 	bhi.w	8004440 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800427a:	682b      	ldr	r3, [r5, #0]
 800427c:	049f      	lsls	r7, r3, #18
 800427e:	d5f6      	bpl.n	800426e <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	0759      	lsls	r1, r3, #29
 8004284:	f100 808b 	bmi.w	800439e <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004288:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 80bf 	bne.w	800440e <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8004290:	2000      	movs	r0, #0
}
 8004292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004294:	4a46      	ldr	r2, [pc, #280]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
 8004296:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004298:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800429a:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800429e:	d12d      	bne.n	80042fc <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a0:	4b43      	ldr	r3, [pc, #268]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042a2:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	0759      	lsls	r1, r3, #29
 80042a8:	d501      	bpl.n	80042ae <HAL_RCC_OscConfig+0x16e>
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	d04f      	beq.n	800434e <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042ae:	4d40      	ldr	r5, [pc, #256]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	f023 0319 	bic.w	r3, r3, #25
 80042b6:	4313      	orrs	r3, r2
 80042b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80042ba:	f7fd fa35 	bl	8001728 <HAL_GetTick>
 80042be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c0:	e005      	b.n	80042ce <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c2:	f7fd fa31 	bl	8001728 <HAL_GetTick>
 80042c6:	1b80      	subs	r0, r0, r6
 80042c8:	2802      	cmp	r0, #2
 80042ca:	f200 80b9 	bhi.w	8004440 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ce:	682b      	ldr	r3, [r5, #0]
 80042d0:	075b      	lsls	r3, r3, #29
 80042d2:	d5f6      	bpl.n	80042c2 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d4:	f7fd fa2e 	bl	8001734 <HAL_GetREVID>
 80042d8:	f241 0303 	movw	r3, #4099	@ 0x1003
 80042dc:	4298      	cmp	r0, r3
 80042de:	f200 8110 	bhi.w	8004502 <HAL_RCC_OscConfig+0x3c2>
 80042e2:	6922      	ldr	r2, [r4, #16]
 80042e4:	686b      	ldr	r3, [r5, #4]
 80042e6:	2a40      	cmp	r2, #64	@ 0x40
 80042e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80042ec:	bf0c      	ite	eq
 80042ee:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 80042f2:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80042f6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	e75a      	b.n	80041b2 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80042fc:	2b18      	cmp	r3, #24
 80042fe:	f000 80fc 	beq.w	80044fa <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004302:	4d2b      	ldr	r5, [pc, #172]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004304:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004306:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004308:	2a00      	cmp	r2, #0
 800430a:	f000 80e5 	beq.w	80044d8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800430e:	f023 0319 	bic.w	r3, r3, #25
 8004312:	4313      	orrs	r3, r2
 8004314:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004316:	f7fd fa07 	bl	8001728 <HAL_GetTick>
 800431a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800431c:	e005      	b.n	800432a <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431e:	f7fd fa03 	bl	8001728 <HAL_GetTick>
 8004322:	1b80      	subs	r0, r0, r6
 8004324:	2802      	cmp	r0, #2
 8004326:	f200 808b 	bhi.w	8004440 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800432a:	682b      	ldr	r3, [r5, #0]
 800432c:	075f      	lsls	r7, r3, #29
 800432e:	d5f6      	bpl.n	800431e <HAL_RCC_OscConfig+0x1de>
 8004330:	e7d0      	b.n	80042d4 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004332:	f001 0103 	and.w	r1, r1, #3
 8004336:	2902      	cmp	r1, #2
 8004338:	f47f af15 	bne.w	8004166 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433c:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	0392      	lsls	r2, r2, #14
 8004342:	f57f af34 	bpl.w	80041ae <HAL_RCC_OscConfig+0x6e>
 8004346:	6862      	ldr	r2, [r4, #4]
 8004348:	2a00      	cmp	r2, #0
 800434a:	f47f af30 	bne.w	80041ae <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 800434e:	2001      	movs	r0, #1
}
 8004350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004352:	f002 0203 	and.w	r2, r2, #3
 8004356:	2a01      	cmp	r2, #1
 8004358:	f47f af38 	bne.w	80041cc <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800435c:	4b14      	ldr	r3, [pc, #80]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	05da      	lsls	r2, r3, #23
 8004362:	d502      	bpl.n	800436a <HAL_RCC_OscConfig+0x22a>
 8004364:	69e3      	ldr	r3, [r4, #28]
 8004366:	2b80      	cmp	r3, #128	@ 0x80
 8004368:	d1f1      	bne.n	800434e <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800436a:	f7fd f9e3 	bl	8001734 <HAL_GetREVID>
 800436e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004372:	4298      	cmp	r0, r3
 8004374:	f200 80ce 	bhi.w	8004514 <HAL_RCC_OscConfig+0x3d4>
 8004378:	6a22      	ldr	r2, [r4, #32]
 800437a:	2a20      	cmp	r2, #32
 800437c:	f000 81b9 	beq.w	80046f2 <HAL_RCC_OscConfig+0x5b2>
 8004380:	490b      	ldr	r1, [pc, #44]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
 8004382:	684b      	ldr	r3, [r1, #4]
 8004384:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004388:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800438c:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	e745      	b.n	800421e <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004392:	4a07      	ldr	r2, [pc, #28]	@ (80043b0 <HAL_RCC_OscConfig+0x270>)
 8004394:	6813      	ldr	r3, [r2, #0]
 8004396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800439c:	e6f8      	b.n	8004190 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800439e:	4d05      	ldr	r5, [pc, #20]	@ (80043b4 <HAL_RCC_OscConfig+0x274>)
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80043a8:	f7fd f9be 	bl	8001728 <HAL_GetTick>
 80043ac:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x282>
 80043b0:	58024400 	.word	0x58024400
 80043b4:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b8:	f7fd f9b6 	bl	8001728 <HAL_GetTick>
 80043bc:	1b80      	subs	r0, r0, r6
 80043be:	2864      	cmp	r0, #100	@ 0x64
 80043c0:	d83e      	bhi.n	8004440 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c2:	682b      	ldr	r3, [r5, #0]
 80043c4:	05da      	lsls	r2, r3, #23
 80043c6:	d5f7      	bpl.n	80043b8 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c8:	68a3      	ldr	r3, [r4, #8]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	f000 818b 	beq.w	80046e6 <HAL_RCC_OscConfig+0x5a6>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8166 	beq.w	80046a2 <HAL_RCC_OscConfig+0x562>
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	4b85      	ldr	r3, [pc, #532]	@ (80045f0 <HAL_RCC_OscConfig+0x4b0>)
 80043da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043dc:	f000 8192 	beq.w	8004704 <HAL_RCC_OscConfig+0x5c4>
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80043e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043e8:	f022 0204 	bic.w	r2, r2, #4
 80043ec:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80043ee:	f7fd f99b 	bl	8001728 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043f2:	4e7f      	ldr	r6, [pc, #508]	@ (80045f0 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f4:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80043f8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043fa:	e004      	b.n	8004406 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fd f994 	bl	8001728 <HAL_GetTick>
 8004400:	1b40      	subs	r0, r0, r5
 8004402:	42b8      	cmp	r0, r7
 8004404:	d81c      	bhi.n	8004440 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004406:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004408:	079b      	lsls	r3, r3, #30
 800440a:	d5f7      	bpl.n	80043fc <HAL_RCC_OscConfig+0x2bc>
 800440c:	e73c      	b.n	8004288 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800440e:	4d78      	ldr	r5, [pc, #480]	@ (80045f0 <HAL_RCC_OscConfig+0x4b0>)
 8004410:	692a      	ldr	r2, [r5, #16]
 8004412:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8004416:	2a18      	cmp	r2, #24
 8004418:	f000 80ee 	beq.w	80045f8 <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800441c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800441e:	682b      	ldr	r3, [r5, #0]
 8004420:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004424:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004426:	d07f      	beq.n	8004528 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 8004428:	f7fd f97e 	bl	8001728 <HAL_GetTick>
 800442c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800442e:	682b      	ldr	r3, [r5, #0]
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	f57f af2d 	bpl.w	8004290 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004436:	f7fd f977 	bl	8001728 <HAL_GetTick>
 800443a:	1b00      	subs	r0, r0, r4
 800443c:	2802      	cmp	r0, #2
 800443e:	d9f6      	bls.n	800442e <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 8004440:	2003      	movs	r0, #3
}
 8004442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004444:	4d6a      	ldr	r5, [pc, #424]	@ (80045f0 <HAL_RCC_OscConfig+0x4b0>)
 8004446:	682b      	ldr	r3, [r5, #0]
 8004448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800444c:	602b      	str	r3, [r5, #0]
 800444e:	682b      	ldr	r3, [r5, #0]
 8004450:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004454:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004456:	f7fd f967 	bl	8001728 <HAL_GetTick>
 800445a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800445c:	e004      	b.n	8004468 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800445e:	f7fd f963 	bl	8001728 <HAL_GetTick>
 8004462:	1b80      	subs	r0, r0, r6
 8004464:	2864      	cmp	r0, #100	@ 0x64
 8004466:	d8eb      	bhi.n	8004440 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	039f      	lsls	r7, r3, #14
 800446c:	d4f7      	bmi.n	800445e <HAL_RCC_OscConfig+0x31e>
 800446e:	e69d      	b.n	80041ac <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004470:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004478:	f7fd f956 	bl	8001728 <HAL_GetTick>
 800447c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800447e:	e004      	b.n	800448a <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004480:	f7fd f952 	bl	8001728 <HAL_GetTick>
 8004484:	1b80      	subs	r0, r0, r6
 8004486:	2802      	cmp	r0, #2
 8004488:	d8da      	bhi.n	8004440 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800448a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800448c:	0799      	lsls	r1, r3, #30
 800448e:	d4f7      	bmi.n	8004480 <HAL_RCC_OscConfig+0x340>
 8004490:	e6dd      	b.n	800424e <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004498:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800449a:	f7fd f945 	bl	8001728 <HAL_GetTick>
 800449e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044a0:	e004      	b.n	80044ac <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044a2:	f7fd f941 	bl	8001728 <HAL_GetTick>
 80044a6:	1b80      	subs	r0, r0, r6
 80044a8:	2802      	cmp	r0, #2
 80044aa:	d8c9      	bhi.n	8004440 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	0498      	lsls	r0, r3, #18
 80044b0:	d4f7      	bmi.n	80044a2 <HAL_RCC_OscConfig+0x362>
 80044b2:	e6e5      	b.n	8004280 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80044bc:	f7fd f934 	bl	8001728 <HAL_GetTick>
 80044c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044c2:	e004      	b.n	80044ce <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80044c4:	f7fd f930 	bl	8001728 <HAL_GetTick>
 80044c8:	1b80      	subs	r0, r0, r6
 80044ca:	2802      	cmp	r0, #2
 80044cc:	d8b8      	bhi.n	8004440 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044ce:	682b      	ldr	r3, [r5, #0]
 80044d0:	05df      	lsls	r7, r3, #23
 80044d2:	d4f7      	bmi.n	80044c4 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	e6a2      	b.n	800421e <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80044de:	f7fd f923 	bl	8001728 <HAL_GetTick>
 80044e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044e4:	e004      	b.n	80044f0 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e6:	f7fd f91f 	bl	8001728 <HAL_GetTick>
 80044ea:	1b80      	subs	r0, r0, r6
 80044ec:	2802      	cmp	r0, #2
 80044ee:	d8a7      	bhi.n	8004440 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	0758      	lsls	r0, r3, #29
 80044f4:	d4f7      	bmi.n	80044e6 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	e65b      	b.n	80041b2 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044fa:	0790      	lsls	r0, r2, #30
 80044fc:	f47f af01 	bne.w	8004302 <HAL_RCC_OscConfig+0x1c2>
 8004500:	e6ce      	b.n	80042a0 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004502:	686b      	ldr	r3, [r5, #4]
 8004504:	6922      	ldr	r2, [r4, #16]
 8004506:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800450a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800450e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	e64e      	b.n	80041b2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004514:	4a36      	ldr	r2, [pc, #216]	@ (80045f0 <HAL_RCC_OscConfig+0x4b0>)
 8004516:	6a21      	ldr	r1, [r4, #32]
 8004518:	68d3      	ldr	r3, [r2, #12]
 800451a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800451e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004522:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	e67a      	b.n	800421e <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8004528:	f7fd f8fe 	bl	8001728 <HAL_GetTick>
 800452c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800452e:	e004      	b.n	800453a <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004530:	f7fd f8fa 	bl	8001728 <HAL_GetTick>
 8004534:	1b80      	subs	r0, r0, r6
 8004536:	2802      	cmp	r0, #2
 8004538:	d882      	bhi.n	8004440 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800453a:	682b      	ldr	r3, [r5, #0]
 800453c:	0199      	lsls	r1, r3, #6
 800453e:	d4f7      	bmi.n	8004530 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004540:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8004542:	4b2c      	ldr	r3, [pc, #176]	@ (80045f4 <HAL_RCC_OscConfig+0x4b4>)
 8004544:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004546:	400b      	ands	r3, r1
 8004548:	4313      	orrs	r3, r2
 800454a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800454c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004550:	62ab      	str	r3, [r5, #40]	@ 0x28
 8004552:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004554:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8004558:	3901      	subs	r1, #1
 800455a:	3b01      	subs	r3, #1
 800455c:	3a01      	subs	r2, #1
 800455e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004562:	025b      	lsls	r3, r3, #9
 8004564:	0412      	lsls	r2, r2, #16
 8004566:	b29b      	uxth	r3, r3
 8004568:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800456c:	4313      	orrs	r3, r2
 800456e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004570:	3a01      	subs	r2, #1
 8004572:	430b      	orrs	r3, r1
 8004574:	0612      	lsls	r2, r2, #24
 8004576:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800457a:	4313      	orrs	r3, r2
 800457c:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800457e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004586:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004588:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800458a:	f36f 03cf 	bfc	r3, #3, #13
 800458e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004592:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004594:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004596:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004598:	f023 030c 	bic.w	r3, r3, #12
 800459c:	4313      	orrs	r3, r2
 800459e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045a0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80045a2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80045a4:	f023 0302 	bic.w	r3, r3, #2
 80045a8:	4313      	orrs	r3, r2
 80045aa:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80045ac:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80045ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80045b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ba:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045bc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80045be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045c2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80045c4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80045d4:	f7fd f8a8 	bl	8001728 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045d8:	4d05      	ldr	r5, [pc, #20]	@ (80045f0 <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 80045da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	019a      	lsls	r2, r3, #6
 80045e0:	f53f ae56 	bmi.w	8004290 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fd f8a0 	bl	8001728 <HAL_GetTick>
 80045e8:	1b00      	subs	r0, r0, r4
 80045ea:	2802      	cmp	r0, #2
 80045ec:	d9f6      	bls.n	80045dc <HAL_RCC_OscConfig+0x49c>
 80045ee:	e727      	b.n	8004440 <HAL_RCC_OscConfig+0x300>
 80045f0:	58024400 	.word	0x58024400
 80045f4:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f8:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80045fa:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045fc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045fe:	f43f aea6 	beq.w	800434e <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004602:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004606:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004608:	428b      	cmp	r3, r1
 800460a:	f47f aea0 	bne.w	800434e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800460e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004612:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004614:	429a      	cmp	r2, r3
 8004616:	f47f ae9a 	bne.w	800434e <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800461a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800461c:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8004620:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004622:	429a      	cmp	r2, r3
 8004624:	f47f ae93 	bne.w	800434e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004628:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800462a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800462e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	f47f ae8c 	bne.w	800434e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004636:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004638:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800463c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	f47f ae85 	bne.w	800434e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004644:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004646:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800464a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800464c:	4298      	cmp	r0, r3
 800464e:	f47f ae7e 	bne.w	800434e <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004652:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004654:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004656:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800465a:	429a      	cmp	r2, r3
 800465c:	f43f ae18 	beq.w	8004290 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8004660:	4a2d      	ldr	r2, [pc, #180]	@ (8004718 <HAL_RCC_OscConfig+0x5d8>)
 8004662:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800466a:	f7fd f85d 	bl	8001728 <HAL_GetTick>
 800466e:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004670:	f7fd f85a 	bl	8001728 <HAL_GetTick>
 8004674:	42a8      	cmp	r0, r5
 8004676:	d0fb      	beq.n	8004670 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004678:	4a27      	ldr	r2, [pc, #156]	@ (8004718 <HAL_RCC_OscConfig+0x5d8>)
 800467a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800467c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800467e:	f36f 03cf 	bfc	r3, #3, #13
 8004682:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004686:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004688:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004690:	e5fe      	b.n	8004290 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004692:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800469e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046a0:	e576      	b.n	8004190 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a2:	4d1d      	ldr	r5, [pc, #116]	@ (8004718 <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a4:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	672b      	str	r3, [r5, #112]	@ 0x70
 80046b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80046b2:	f023 0304 	bic.w	r3, r3, #4
 80046b6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80046b8:	f7fd f836 	bl	8001728 <HAL_GetTick>
 80046bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046be:	e005      	b.n	80046cc <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c0:	f7fd f832 	bl	8001728 <HAL_GetTick>
 80046c4:	1b80      	subs	r0, r0, r6
 80046c6:	42b8      	cmp	r0, r7
 80046c8:	f63f aeba 	bhi.w	8004440 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046cc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80046ce:	0798      	lsls	r0, r3, #30
 80046d0:	d4f6      	bmi.n	80046c0 <HAL_RCC_OscConfig+0x580>
 80046d2:	e5d9      	b.n	8004288 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046d4:	68eb      	ldr	r3, [r5, #12]
 80046d6:	6a22      	ldr	r2, [r4, #32]
 80046d8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80046dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80046e0:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	e59b      	b.n	800421e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004718 <HAL_RCC_OscConfig+0x5d8>)
 80046e8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046f0:	e67d      	b.n	80043ee <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046f2:	4a09      	ldr	r2, [pc, #36]	@ (8004718 <HAL_RCC_OscConfig+0x5d8>)
 80046f4:	6853      	ldr	r3, [r2, #4]
 80046f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80046fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046fe:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	e58c      	b.n	800421e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004704:	f042 0204 	orr.w	r2, r2, #4
 8004708:	671a      	str	r2, [r3, #112]	@ 0x70
 800470a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004712:	e66c      	b.n	80043ee <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 8004714:	2001      	movs	r0, #1
}
 8004716:	4770      	bx	lr
 8004718:	58024400 	.word	0x58024400

0800471c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800471c:	4a3f      	ldr	r2, [pc, #252]	@ (800481c <HAL_RCC_GetSysClockFreq+0x100>)
 800471e:	6913      	ldr	r3, [r2, #16]
 8004720:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004724:	2b10      	cmp	r3, #16
 8004726:	d04f      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0xac>
 8004728:	2b18      	cmp	r3, #24
 800472a:	d00a      	beq.n	8004742 <HAL_RCC_GetSysClockFreq+0x26>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d14d      	bne.n	80047cc <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004730:	6813      	ldr	r3, [r2, #0]
 8004732:	0699      	lsls	r1, r3, #26
 8004734:	d54c      	bpl.n	80047d0 <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004736:	6813      	ldr	r3, [r2, #0]
 8004738:	4839      	ldr	r0, [pc, #228]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
 800473a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800473e:	40d8      	lsrs	r0, r3
 8004740:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004742:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8004744:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004746:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004748:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 800474a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800474e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004750:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004754:	d036      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004756:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800475a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800475e:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004762:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004766:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 800476a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800476c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004770:	ee06 3a90 	vmov	s13, r3
 8004774:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8004778:	d002      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0x64>
 800477a:	2902      	cmp	r1, #2
 800477c:	d048      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0xf4>
 800477e:	b349      	cbz	r1, 80047d4 <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004780:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004824 <HAL_RCC_GetSysClockFreq+0x108>
 8004784:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004788:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800478a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478e:	ee07 3a10 	vmov	s14, r3
 8004792:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004796:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800479a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800479e:	ee37 7a26 	vadd.f32	s14, s14, s13
 80047a2:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80047a6:	4b1d      	ldr	r3, [pc, #116]	@ (800481c <HAL_RCC_GetSysClockFreq+0x100>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047aa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80047ae:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80047b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c0:	ee17 0a90 	vmov	r0, s15
}
 80047c4:	bc30      	pop	{r4, r5}
 80047c6:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c8:	4817      	ldr	r0, [pc, #92]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ca:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 80047cc:	4817      	ldr	r0, [pc, #92]	@ (800482c <HAL_RCC_GetSysClockFreq+0x110>)
 80047ce:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80047d0:	4813      	ldr	r0, [pc, #76]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
}
 80047d2:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047d4:	6813      	ldr	r3, [r2, #0]
 80047d6:	069b      	lsls	r3, r3, #26
 80047d8:	d51d      	bpl.n	8004816 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047da:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047e0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047e2:	490f      	ldr	r1, [pc, #60]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x104>)
 80047e4:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047ec:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047ee:	ee06 3a10 	vmov	s12, r3
 80047f2:	ee05 1a90 	vmov	s11, r1
 80047f6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80047fa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80047fe:	ee36 6a07 	vadd.f32	s12, s12, s14
 8004802:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004806:	ee76 7a26 	vadd.f32	s15, s12, s13
 800480a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800480e:	e7ca      	b.n	80047a6 <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004810:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004830 <HAL_RCC_GetSysClockFreq+0x114>
 8004814:	e7b6      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004816:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004834 <HAL_RCC_GetSysClockFreq+0x118>
 800481a:	e7b3      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x68>
 800481c:	58024400 	.word	0x58024400
 8004820:	03d09000 	.word	0x03d09000
 8004824:	4a742400 	.word	0x4a742400
 8004828:	017d7840 	.word	0x017d7840
 800482c:	003d0900 	.word	0x003d0900
 8004830:	4bbebc20 	.word	0x4bbebc20
 8004834:	4c742400 	.word	0x4c742400

08004838 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004838:	2800      	cmp	r0, #0
 800483a:	f000 810e 	beq.w	8004a5a <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800483e:	4a8d      	ldr	r2, [pc, #564]	@ (8004a74 <HAL_RCC_ClockConfig+0x23c>)
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	428b      	cmp	r3, r1
{
 8004848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484c:	4604      	mov	r4, r0
 800484e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004850:	d20c      	bcs.n	800486c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	f023 030f 	bic.w	r3, r3, #15
 8004858:	430b      	orrs	r3, r1
 800485a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485c:	6813      	ldr	r3, [r2, #0]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	428b      	cmp	r3, r1
 8004864:	d002      	beq.n	800486c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004866:	2001      	movs	r0, #1
}
 8004868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	0758      	lsls	r0, r3, #29
 8004870:	d50b      	bpl.n	800488a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004872:	4981      	ldr	r1, [pc, #516]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004874:	6920      	ldr	r0, [r4, #16]
 8004876:	698a      	ldr	r2, [r1, #24]
 8004878:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800487c:	4290      	cmp	r0, r2
 800487e:	d904      	bls.n	800488a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004880:	698a      	ldr	r2, [r1, #24]
 8004882:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004886:	4302      	orrs	r2, r0
 8004888:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488a:	0719      	lsls	r1, r3, #28
 800488c:	d50b      	bpl.n	80048a6 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800488e:	497a      	ldr	r1, [pc, #488]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004890:	6960      	ldr	r0, [r4, #20]
 8004892:	69ca      	ldr	r2, [r1, #28]
 8004894:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004898:	4290      	cmp	r0, r2
 800489a:	d904      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800489c:	69ca      	ldr	r2, [r1, #28]
 800489e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80048a2:	4302      	orrs	r2, r0
 80048a4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a6:	06da      	lsls	r2, r3, #27
 80048a8:	d50b      	bpl.n	80048c2 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048aa:	4973      	ldr	r1, [pc, #460]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 80048ac:	69a0      	ldr	r0, [r4, #24]
 80048ae:	69ca      	ldr	r2, [r1, #28]
 80048b0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80048b4:	4290      	cmp	r0, r2
 80048b6:	d904      	bls.n	80048c2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80048b8:	69ca      	ldr	r2, [r1, #28]
 80048ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048be:	4302      	orrs	r2, r0
 80048c0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048c2:	069f      	lsls	r7, r3, #26
 80048c4:	d50b      	bpl.n	80048de <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048c6:	496c      	ldr	r1, [pc, #432]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 80048c8:	69e0      	ldr	r0, [r4, #28]
 80048ca:	6a0a      	ldr	r2, [r1, #32]
 80048cc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80048d0:	4290      	cmp	r0, r2
 80048d2:	d904      	bls.n	80048de <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80048d4:	6a0a      	ldr	r2, [r1, #32]
 80048d6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80048da:	4302      	orrs	r2, r0
 80048dc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048de:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e0:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e4:	f140 80ab 	bpl.w	8004a3e <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048e8:	4e63      	ldr	r6, [pc, #396]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 80048ea:	68e0      	ldr	r0, [r4, #12]
 80048ec:	69b1      	ldr	r1, [r6, #24]
 80048ee:	f001 010f 	and.w	r1, r1, #15
 80048f2:	4288      	cmp	r0, r1
 80048f4:	d904      	bls.n	8004900 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f6:	69b1      	ldr	r1, [r6, #24]
 80048f8:	f021 010f 	bic.w	r1, r1, #15
 80048fc:	4301      	orrs	r1, r0
 80048fe:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004900:	2a00      	cmp	r2, #0
 8004902:	d030      	beq.n	8004966 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004904:	4a5c      	ldr	r2, [pc, #368]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004906:	68a1      	ldr	r1, [r4, #8]
 8004908:	6993      	ldr	r3, [r2, #24]
 800490a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800490e:	430b      	orrs	r3, r1
 8004910:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004912:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004914:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004916:	2902      	cmp	r1, #2
 8004918:	f000 80a1 	beq.w	8004a5e <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491c:	2903      	cmp	r1, #3
 800491e:	f000 8098 	beq.w	8004a52 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004922:	2901      	cmp	r1, #1
 8004924:	f000 80a1 	beq.w	8004a6a <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004928:	075f      	lsls	r7, r3, #29
 800492a:	d59c      	bpl.n	8004866 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800492c:	4e52      	ldr	r6, [pc, #328]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492e:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004932:	6933      	ldr	r3, [r6, #16]
 8004934:	f023 0307 	bic.w	r3, r3, #7
 8004938:	430b      	orrs	r3, r1
 800493a:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800493c:	f7fc fef4 	bl	8001728 <HAL_GetTick>
 8004940:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	e005      	b.n	8004950 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004944:	f7fc fef0 	bl	8001728 <HAL_GetTick>
 8004948:	1bc0      	subs	r0, r0, r7
 800494a:	4540      	cmp	r0, r8
 800494c:	f200 808b 	bhi.w	8004a66 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004950:	6933      	ldr	r3, [r6, #16]
 8004952:	6862      	ldr	r2, [r4, #4]
 8004954:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004958:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800495c:	d1f2      	bne.n	8004944 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	079e      	lsls	r6, r3, #30
 8004962:	d506      	bpl.n	8004972 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004964:	68e0      	ldr	r0, [r4, #12]
 8004966:	4944      	ldr	r1, [pc, #272]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004968:	698a      	ldr	r2, [r1, #24]
 800496a:	f002 020f 	and.w	r2, r2, #15
 800496e:	4290      	cmp	r0, r2
 8004970:	d369      	bcc.n	8004a46 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004972:	4940      	ldr	r1, [pc, #256]	@ (8004a74 <HAL_RCC_ClockConfig+0x23c>)
 8004974:	680a      	ldr	r2, [r1, #0]
 8004976:	f002 020f 	and.w	r2, r2, #15
 800497a:	42aa      	cmp	r2, r5
 800497c:	d90a      	bls.n	8004994 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	680a      	ldr	r2, [r1, #0]
 8004980:	f022 020f 	bic.w	r2, r2, #15
 8004984:	432a      	orrs	r2, r5
 8004986:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004988:	680a      	ldr	r2, [r1, #0]
 800498a:	f002 020f 	and.w	r2, r2, #15
 800498e:	42aa      	cmp	r2, r5
 8004990:	f47f af69 	bne.w	8004866 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004994:	0758      	lsls	r0, r3, #29
 8004996:	d50b      	bpl.n	80049b0 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004998:	4937      	ldr	r1, [pc, #220]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 800499a:	6920      	ldr	r0, [r4, #16]
 800499c:	698a      	ldr	r2, [r1, #24]
 800499e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80049a2:	4290      	cmp	r0, r2
 80049a4:	d204      	bcs.n	80049b0 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049a6:	698a      	ldr	r2, [r1, #24]
 80049a8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80049ac:	4302      	orrs	r2, r0
 80049ae:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b0:	0719      	lsls	r1, r3, #28
 80049b2:	d50b      	bpl.n	80049cc <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049b4:	4930      	ldr	r1, [pc, #192]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 80049b6:	6960      	ldr	r0, [r4, #20]
 80049b8:	69ca      	ldr	r2, [r1, #28]
 80049ba:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80049be:	4290      	cmp	r0, r2
 80049c0:	d204      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049c2:	69ca      	ldr	r2, [r1, #28]
 80049c4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80049c8:	4302      	orrs	r2, r0
 80049ca:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049cc:	06da      	lsls	r2, r3, #27
 80049ce:	d50b      	bpl.n	80049e8 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049d0:	4929      	ldr	r1, [pc, #164]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 80049d2:	69a0      	ldr	r0, [r4, #24]
 80049d4:	69ca      	ldr	r2, [r1, #28]
 80049d6:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80049da:	4290      	cmp	r0, r2
 80049dc:	d204      	bcs.n	80049e8 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049de:	69ca      	ldr	r2, [r1, #28]
 80049e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049e4:	4302      	orrs	r2, r0
 80049e6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049e8:	069b      	lsls	r3, r3, #26
 80049ea:	d50b      	bpl.n	8004a04 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049ec:	4a22      	ldr	r2, [pc, #136]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 80049ee:	69e1      	ldr	r1, [r4, #28]
 80049f0:	6a13      	ldr	r3, [r2, #32]
 80049f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049f6:	4299      	cmp	r1, r3
 80049f8:	d204      	bcs.n	8004a04 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049fa:	6a13      	ldr	r3, [r2, #32]
 80049fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a00:	430b      	orrs	r3, r1
 8004a02:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a04:	f7ff fe8a 	bl	800471c <HAL_RCC_GetSysClockFreq>
 8004a08:	4a1b      	ldr	r2, [pc, #108]	@ (8004a78 <HAL_RCC_ClockConfig+0x240>)
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	481b      	ldr	r0, [pc, #108]	@ (8004a7c <HAL_RCC_ClockConfig+0x244>)
 8004a0e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a10:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a12:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8004a16:	4d1a      	ldr	r5, [pc, #104]	@ (8004a80 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a18:	f002 020f 	and.w	r2, r2, #15
 8004a1c:	4c19      	ldr	r4, [pc, #100]	@ (8004a84 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a1e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a20:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a22:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8004a26:	4818      	ldr	r0, [pc, #96]	@ (8004a88 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a28:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a2c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8004a2e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8004a30:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a32:	40d3      	lsrs	r3, r2
 8004a34:	6023      	str	r3, [r4, #0]
}
 8004a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8004a3a:	f7fc be13 	b.w	8001664 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	f47f af60 	bne.w	8004904 <HAL_RCC_ClockConfig+0xcc>
 8004a44:	e795      	b.n	8004972 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a46:	698a      	ldr	r2, [r1, #24]
 8004a48:	f022 020f 	bic.w	r2, r2, #15
 8004a4c:	4302      	orrs	r2, r0
 8004a4e:	618a      	str	r2, [r1, #24]
 8004a50:	e78f      	b.n	8004972 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a52:	019a      	lsls	r2, r3, #6
 8004a54:	f53f af6a 	bmi.w	800492c <HAL_RCC_ClockConfig+0xf4>
 8004a58:	e705      	b.n	8004866 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004a5a:	2001      	movs	r0, #1
}
 8004a5c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a5e:	0398      	lsls	r0, r3, #14
 8004a60:	f53f af64 	bmi.w	800492c <HAL_RCC_ClockConfig+0xf4>
 8004a64:	e6ff      	b.n	8004866 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004a66:	2003      	movs	r0, #3
 8004a68:	e6fe      	b.n	8004868 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a6a:	05db      	lsls	r3, r3, #23
 8004a6c:	f53f af5e 	bmi.w	800492c <HAL_RCC_ClockConfig+0xf4>
 8004a70:	e6f9      	b.n	8004866 <HAL_RCC_ClockConfig+0x2e>
 8004a72:	bf00      	nop
 8004a74:	52002000 	.word	0x52002000
 8004a78:	58024400 	.word	0x58024400
 8004a7c:	0800d584 	.word	0x0800d584
 8004a80:	2400004c 	.word	0x2400004c
 8004a84:	24000048 	.word	0x24000048
 8004a88:	24000054 	.word	0x24000054

08004a8c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a8c:	4a18      	ldr	r2, [pc, #96]	@ (8004af0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a8e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a90:	6913      	ldr	r3, [r2, #16]
 8004a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d024      	beq.n	8004ae4 <HAL_RCC_GetHCLKFreq+0x58>
 8004a9a:	2b18      	cmp	r3, #24
 8004a9c:	d009      	beq.n	8004ab2 <HAL_RCC_GetHCLKFreq+0x26>
 8004a9e:	bb1b      	cbnz	r3, 8004ae8 <HAL_RCC_GetHCLKFreq+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa0:	6813      	ldr	r3, [r2, #0]
 8004aa2:	069b      	lsls	r3, r3, #26
 8004aa4:	d522      	bpl.n	8004aec <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	4b12      	ldr	r3, [pc, #72]	@ (8004af4 <HAL_RCC_GetHCLKFreq+0x68>)
 8004aaa:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004aae:	40d3      	lsrs	r3, r2
 8004ab0:	e002      	b.n	8004ab8 <HAL_RCC_GetHCLKFreq+0x2c>
 8004ab2:	f7ff fad3 	bl	800405c <HAL_RCC_GetSysClockFreq.part.0>
 8004ab6:	4603      	mov	r3, r0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ab8:	490d      	ldr	r1, [pc, #52]	@ (8004af0 <HAL_RCC_GetHCLKFreq+0x64>)
 8004aba:	480f      	ldr	r0, [pc, #60]	@ (8004af8 <HAL_RCC_GetHCLKFreq+0x6c>)
 8004abc:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004abe:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ac0:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8004afc <HAL_RCC_GetHCLKFreq+0x70>)
 8004ac6:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004aca:	4d0d      	ldr	r5, [pc, #52]	@ (8004b00 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004acc:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ace:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ad0:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ad4:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ad8:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ada:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8004ade:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ae0:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004ae2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ae4:	4b07      	ldr	r3, [pc, #28]	@ (8004b04 <HAL_RCC_GetHCLKFreq+0x78>)
 8004ae6:	e7e7      	b.n	8004ab8 <HAL_RCC_GetHCLKFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8004ae8:	4b07      	ldr	r3, [pc, #28]	@ (8004b08 <HAL_RCC_GetHCLKFreq+0x7c>)
 8004aea:	e7e5      	b.n	8004ab8 <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004aec:	4b01      	ldr	r3, [pc, #4]	@ (8004af4 <HAL_RCC_GetHCLKFreq+0x68>)
 8004aee:	e7e3      	b.n	8004ab8 <HAL_RCC_GetHCLKFreq+0x2c>
 8004af0:	58024400 	.word	0x58024400
 8004af4:	03d09000 	.word	0x03d09000
 8004af8:	0800d584 	.word	0x0800d584
 8004afc:	24000048 	.word	0x24000048
 8004b00:	2400004c 	.word	0x2400004c
 8004b04:	017d7840 	.word	0x017d7840
 8004b08:	003d0900 	.word	0x003d0900

08004b0c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b0e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b10:	6913      	ldr	r3, [r2, #16]
 8004b12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d02b      	beq.n	8004b72 <HAL_RCC_GetPCLK1Freq+0x66>
 8004b1a:	2b18      	cmp	r3, #24
 8004b1c:	d009      	beq.n	8004b32 <HAL_RCC_GetPCLK1Freq+0x26>
 8004b1e:	bb53      	cbnz	r3, 8004b76 <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b20:	6813      	ldr	r3, [r2, #0]
 8004b22:	069b      	lsls	r3, r3, #26
 8004b24:	d529      	bpl.n	8004b7a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	4b16      	ldr	r3, [pc, #88]	@ (8004b84 <HAL_RCC_GetPCLK1Freq+0x78>)
 8004b2a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004b2e:	40d3      	lsrs	r3, r2
 8004b30:	e002      	b.n	8004b38 <HAL_RCC_GetPCLK1Freq+0x2c>
 8004b32:	f7ff fa93 	bl	800405c <HAL_RCC_GetSysClockFreq.part.0>
 8004b36:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b38:	4a11      	ldr	r2, [pc, #68]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x74>)
 8004b3a:	4913      	ldr	r1, [pc, #76]	@ (8004b88 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8004b3c:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8004b3e:	4d13      	ldr	r5, [pc, #76]	@ (8004b8c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b40:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b44:	4c12      	ldr	r4, [pc, #72]	@ (8004b90 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b46:	5c08      	ldrb	r0, [r1, r0]
 8004b48:	f000 001f 	and.w	r0, r0, #31
 8004b4c:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b4e:	6990      	ldr	r0, [r2, #24]
 8004b50:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8004b54:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b56:	5c08      	ldrb	r0, [r1, r0]
 8004b58:	f000 001f 	and.w	r0, r0, #31
 8004b5c:	40c3      	lsrs	r3, r0
 8004b5e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004b60:	69d2      	ldr	r2, [r2, #28]
 8004b62:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004b66:	5c88      	ldrb	r0, [r1, r2]
 8004b68:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b6c:	fa23 f000 	lsr.w	r0, r3, r0
 8004b70:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b72:	4b08      	ldr	r3, [pc, #32]	@ (8004b94 <HAL_RCC_GetPCLK1Freq+0x88>)
 8004b74:	e7e0      	b.n	8004b38 <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 8004b76:	4b08      	ldr	r3, [pc, #32]	@ (8004b98 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004b78:	e7de      	b.n	8004b38 <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b7a:	4b02      	ldr	r3, [pc, #8]	@ (8004b84 <HAL_RCC_GetPCLK1Freq+0x78>)
 8004b7c:	e7dc      	b.n	8004b38 <HAL_RCC_GetPCLK1Freq+0x2c>
 8004b7e:	bf00      	nop
 8004b80:	58024400 	.word	0x58024400
 8004b84:	03d09000 	.word	0x03d09000
 8004b88:	0800d584 	.word	0x0800d584
 8004b8c:	2400004c 	.word	0x2400004c
 8004b90:	24000048 	.word	0x24000048
 8004b94:	017d7840 	.word	0x017d7840
 8004b98:	003d0900 	.word	0x003d0900

08004b9c <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b9e:	4c36      	ldr	r4, [pc, #216]	@ (8004c78 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004baa:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bac:	f7fc fdbc 	bl	8001728 <HAL_GetTick>
 8004bb0:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bb2:	e004      	b.n	8004bbe <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bb4:	f7fc fdb8 	bl	8001728 <HAL_GetTick>
 8004bb8:	1b40      	subs	r0, r0, r5
 8004bba:	2802      	cmp	r0, #2
 8004bbc:	d856      	bhi.n	8004c6c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	011a      	lsls	r2, r3, #4
 8004bc2:	d4f7      	bmi.n	8004bb4 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004bc4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004bc6:	6832      	ldr	r2, [r6, #0]
 8004bc8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004bcc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004bd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004bd2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	3a01      	subs	r2, #1
 8004bda:	025b      	lsls	r3, r3, #9
 8004bdc:	0412      	lsls	r2, r2, #16
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004be4:	4313      	orrs	r3, r2
 8004be6:	6872      	ldr	r2, [r6, #4]
 8004be8:	3a01      	subs	r2, #1
 8004bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	6932      	ldr	r2, [r6, #16]
 8004bf2:	3a01      	subs	r2, #1
 8004bf4:	0612      	lsls	r2, r2, #24
 8004bf6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bfe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004c00:	6972      	ldr	r2, [r6, #20]
 8004c02:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c06:	4313      	orrs	r3, r2
 8004c08:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c0a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004c0c:	69b2      	ldr	r2, [r6, #24]
 8004c0e:	f023 0320 	bic.w	r3, r3, #32
 8004c12:	4313      	orrs	r3, r2
 8004c14:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c16:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004c18:	f023 0310 	bic.w	r3, r3, #16
 8004c1c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c1e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004c20:	69f2      	ldr	r2, [r6, #28]
 8004c22:	f36f 03cf 	bfc	r3, #3, #13
 8004c26:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004c2a:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c2c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004c2e:	f043 0310 	orr.w	r3, r3, #16
 8004c32:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c34:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004c36:	b1df      	cbz	r7, 8004c70 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c38:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c3a:	bf0c      	ite	eq
 8004c3c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c40:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8004c44:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c46:	4c0c      	ldr	r4, [pc, #48]	@ (8004c78 <RCCEx_PLL2_Config.part.0+0xdc>)
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c4e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c50:	f7fc fd6a 	bl	8001728 <HAL_GetTick>
 8004c54:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c56:	e004      	b.n	8004c62 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c58:	f7fc fd66 	bl	8001728 <HAL_GetTick>
 8004c5c:	1b40      	subs	r0, r0, r5
 8004c5e:	2802      	cmp	r0, #2
 8004c60:	d804      	bhi.n	8004c6c <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	d5f7      	bpl.n	8004c58 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8004c68:	2000      	movs	r0, #0
}
 8004c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004c6c:	2003      	movs	r0, #3
}
 8004c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c76:	e7e6      	b.n	8004c46 <RCCEx_PLL2_Config.part.0+0xaa>
 8004c78:	58024400 	.word	0x58024400

08004c7c <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c7e:	4c36      	ldr	r4, [pc, #216]	@ (8004d58 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004c80:	4606      	mov	r6, r0
 8004c82:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c8a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8c:	f7fc fd4c 	bl	8001728 <HAL_GetTick>
 8004c90:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c92:	e004      	b.n	8004c9e <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c94:	f7fc fd48 	bl	8001728 <HAL_GetTick>
 8004c98:	1b40      	subs	r0, r0, r5
 8004c9a:	2802      	cmp	r0, #2
 8004c9c:	d856      	bhi.n	8004d4c <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	009a      	lsls	r2, r3, #2
 8004ca2:	d4f7      	bmi.n	8004c94 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ca4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004ca6:	6832      	ldr	r2, [r6, #0]
 8004ca8:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8004cac:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004cb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cb2:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	3a01      	subs	r2, #1
 8004cba:	025b      	lsls	r3, r3, #9
 8004cbc:	0412      	lsls	r2, r2, #16
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	6872      	ldr	r2, [r6, #4]
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	6932      	ldr	r2, [r6, #16]
 8004cd2:	3a01      	subs	r2, #1
 8004cd4:	0612      	lsls	r2, r2, #24
 8004cd6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cde:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004ce0:	6972      	ldr	r2, [r6, #20]
 8004ce2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004cec:	69b2      	ldr	r2, [r6, #24]
 8004cee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cf6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cfc:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cfe:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004d00:	69f2      	ldr	r2, [r6, #28]
 8004d02:	f36f 03cf 	bfc	r3, #3, #13
 8004d06:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004d0a:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d0c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d12:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004d16:	b1df      	cbz	r7, 8004d50 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d18:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d1a:	bf0c      	ite	eq
 8004d1c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d20:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8004d24:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d26:	4c0c      	ldr	r4, [pc, #48]	@ (8004d58 <RCCEx_PLL3_Config.part.0+0xdc>)
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d2e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d30:	f7fc fcfa 	bl	8001728 <HAL_GetTick>
 8004d34:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d36:	e004      	b.n	8004d42 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d38:	f7fc fcf6 	bl	8001728 <HAL_GetTick>
 8004d3c:	1b40      	subs	r0, r0, r5
 8004d3e:	2802      	cmp	r0, #2
 8004d40:	d804      	bhi.n	8004d4c <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	d5f7      	bpl.n	8004d38 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8004d48:	2000      	movs	r0, #0
}
 8004d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004d4c:	2003      	movs	r0, #3
}
 8004d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d56:	e7e6      	b.n	8004d26 <RCCEx_PLL3_Config.part.0+0xaa>
 8004d58:	58024400 	.word	0x58024400

08004d5c <HAL_RCCEx_PeriphCLKConfig>:
{
 8004d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d60:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8004d64:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d66:	011d      	lsls	r5, r3, #4
 8004d68:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8004d6c:	d524      	bpl.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d6e:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004d70:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004d74:	f000 85df 	beq.w	8005936 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8004d78:	f200 86a8 	bhi.w	8005acc <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004d7c:	2900      	cmp	r1, #0
 8004d7e:	f000 85f6 	beq.w	800596e <HAL_RCCEx_PeriphCLKConfig+0xc12>
 8004d82:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004d86:	f040 86a5 	bne.w	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d8a:	49a9      	ldr	r1, [pc, #676]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d8c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004d8e:	f001 0103 	and.w	r1, r1, #3
 8004d92:	2903      	cmp	r1, #3
 8004d94:	f000 869e 	beq.w	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8004d98:	2102      	movs	r1, #2
 8004d9a:	3008      	adds	r0, #8
 8004d9c:	f7ff fefe 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8004da0:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004da2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004da6:	b93e      	cbnz	r6, 8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004da8:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004daa:	4da1      	ldr	r5, [pc, #644]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dac:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004dae:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8004db0:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8004db4:	4301      	orrs	r1, r0
 8004db6:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004db8:	05d8      	lsls	r0, r3, #23
 8004dba:	d50a      	bpl.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004dbc:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004dbe:	2904      	cmp	r1, #4
 8004dc0:	d806      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004dc2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004dc6:	03ff      	.short	0x03ff
 8004dc8:	0582056d 	.word	0x0582056d
 8004dcc:	04040404 	.word	0x04040404
      status = ret;
 8004dd0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004dd2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004dd4:	0599      	lsls	r1, r3, #22
 8004dd6:	d524      	bpl.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004dd8:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004dda:	2980      	cmp	r1, #128	@ 0x80
 8004ddc:	f000 854b 	beq.w	8005876 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004de0:	f200 8687 	bhi.w	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8004de4:	2900      	cmp	r1, #0
 8004de6:	f000 85bb 	beq.w	8005960 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8004dea:	2940      	cmp	r1, #64	@ 0x40
 8004dec:	f040 8688 	bne.w	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004df0:	498f      	ldr	r1, [pc, #572]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004df2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004df4:	f001 0103 	and.w	r1, r1, #3
 8004df8:	2903      	cmp	r1, #3
 8004dfa:	f000 8681 	beq.w	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8004dfe:	2100      	movs	r1, #0
 8004e00:	f104 0008 	add.w	r0, r4, #8
 8004e04:	f7ff feca 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8004e08:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004e0a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004e0e:	2d00      	cmp	r5, #0
 8004e10:	f040 8543 	bne.w	800589a <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004e14:	4f86      	ldr	r7, [pc, #536]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e16:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004e18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004e1a:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8004e1e:	4301      	orrs	r1, r0
 8004e20:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004e22:	055f      	lsls	r7, r3, #21
 8004e24:	d528      	bpl.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004e26:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8004e2a:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8004e2e:	f000 855c 	beq.w	80058ea <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004e32:	f200 8652 	bhi.w	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 8004e36:	2900      	cmp	r1, #0
 8004e38:	f000 858b 	beq.w	8005952 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004e3c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004e40:	f040 8653 	bne.w	8005aea <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e44:	497a      	ldr	r1, [pc, #488]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e46:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004e48:	f001 0103 	and.w	r1, r1, #3
 8004e4c:	2903      	cmp	r1, #3
 8004e4e:	f000 864c 	beq.w	8005aea <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004e52:	2100      	movs	r1, #0
 8004e54:	f104 0008 	add.w	r0, r4, #8
 8004e58:	f7ff fea0 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8004e5c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e5e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	f040 8553 	bne.w	800590e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e68:	4f71      	ldr	r7, [pc, #452]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e6a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8004e6e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e70:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8004e74:	4301      	orrs	r1, r0
 8004e76:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e78:	0518      	lsls	r0, r3, #20
 8004e7a:	d528      	bpl.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004e7c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8004e80:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8004e84:	f000 8546 	beq.w	8005914 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 8004e88:	f200 8614 	bhi.w	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	f000 84d6 	beq.w	800583e <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8004e92:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004e96:	f040 8615 	bne.w	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e9a:	4965      	ldr	r1, [pc, #404]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e9c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004e9e:	f001 0103 	and.w	r1, r1, #3
 8004ea2:	2903      	cmp	r1, #3
 8004ea4:	f000 860e 	beq.w	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	f104 0008 	add.w	r0, r4, #8
 8004eae:	f7ff fe75 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8004eb2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004eb4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004eb8:	2d00      	cmp	r5, #0
 8004eba:	f040 84c8 	bne.w	800584e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ebe:	4f5c      	ldr	r7, [pc, #368]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ec0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8004ec4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004ec6:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8004eca:	4301      	orrs	r1, r0
 8004ecc:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ece:	0199      	lsls	r1, r3, #6
 8004ed0:	d518      	bpl.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 8004ed2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004ed4:	2920      	cmp	r1, #32
 8004ed6:	f000 8434 	beq.w	8005742 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 8004eda:	f200 8615 	bhi.w	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8004ede:	b139      	cbz	r1, 8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8004ee0:	2910      	cmp	r1, #16
 8004ee2:	f040 8614 	bne.w	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee6:	4852      	ldr	r0, [pc, #328]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ee8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004eea:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004eee:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004ef0:	2d00      	cmp	r5, #0
 8004ef2:	f040 83bf 	bne.w	8005674 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ef6:	4f4e      	ldr	r7, [pc, #312]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ef8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004efa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004efc:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8004f00:	4301      	orrs	r1, r0
 8004f02:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f04:	04df      	lsls	r7, r3, #19
 8004f06:	d526      	bpl.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004f08:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8004f0a:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8004f0e:	f000 84a1 	beq.w	8005854 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 8004f12:	f200 85c3 	bhi.w	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd40>
 8004f16:	2900      	cmp	r1, #0
 8004f18:	f000 8486 	beq.w	8005828 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004f1c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004f20:	f040 85c4 	bne.w	8005aac <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f24:	4942      	ldr	r1, [pc, #264]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f26:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004f28:	f001 0103 	and.w	r1, r1, #3
 8004f2c:	2903      	cmp	r1, #3
 8004f2e:	f000 85bd 	beq.w	8005aac <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8004f32:	2100      	movs	r1, #0
 8004f34:	f104 0008 	add.w	r0, r4, #8
 8004f38:	f7ff fe30 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8004f3c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f3e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f42:	2d00      	cmp	r5, #0
 8004f44:	f040 8478 	bne.w	8005838 <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f48:	4f39      	ldr	r7, [pc, #228]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f4a:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004f4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f4e:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004f52:	4301      	orrs	r1, r0
 8004f54:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f56:	0498      	lsls	r0, r3, #18
 8004f58:	d524      	bpl.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f5a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004f5c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004f60:	f000 8415 	beq.w	800578e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004f64:	f200 8556 	bhi.w	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8004f68:	b191      	cbz	r1, 8004f90 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004f6a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004f6e:	f040 855b 	bne.w	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f72:	492f      	ldr	r1, [pc, #188]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f74:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004f76:	f001 0103 	and.w	r1, r1, #3
 8004f7a:	2903      	cmp	r1, #3
 8004f7c:	f000 8554 	beq.w	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004f80:	2101      	movs	r1, #1
 8004f82:	f104 0008 	add.w	r0, r4, #8
 8004f86:	f7ff fe09 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8004f8a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f8c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f90:	2d00      	cmp	r5, #0
 8004f92:	f040 838f 	bne.w	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f96:	4f26      	ldr	r7, [pc, #152]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f98:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8004f9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f9c:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8004fa0:	4301      	orrs	r1, r0
 8004fa2:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004fa4:	0459      	lsls	r1, r3, #17
 8004fa6:	d526      	bpl.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004fa8:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8004fac:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004fb0:	f000 8426 	beq.w	8005800 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004fb4:	f200 854a 	bhi.w	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 8004fb8:	b191      	cbz	r1, 8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004fba:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8004fbe:	f040 854f 	bne.w	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fc2:	491b      	ldr	r1, [pc, #108]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fc4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004fc6:	f001 0103 	and.w	r1, r1, #3
 8004fca:	2903      	cmp	r1, #3
 8004fcc:	f000 8548 	beq.w	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	f104 0008 	add.w	r0, r4, #8
 8004fd6:	f7ff fde1 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8004fda:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fdc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004fe0:	2d00      	cmp	r5, #0
 8004fe2:	f040 835b 	bne.w	800569c <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fe6:	4f12      	ldr	r7, [pc, #72]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fe8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8004fec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004fee:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8004ff2:	4301      	orrs	r1, r0
 8004ff4:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ff6:	041f      	lsls	r7, r3, #16
 8004ff8:	d50d      	bpl.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 8004ffa:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8004ffc:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8005000:	f000 8260 	beq.w	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8005004:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8005008:	f000 8591 	beq.w	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800500c:	2900      	cmp	r1, #0
 800500e:	f000 825e 	beq.w	80054ce <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 8005012:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005014:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005016:	01d8      	lsls	r0, r3, #7
 8005018:	d515      	bpl.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 800501a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800501c:	2903      	cmp	r1, #3
 800501e:	f200 85b4 	bhi.w	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8005022:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005026:	000c      	.short	0x000c
 8005028:	03a10007 	.word	0x03a10007
 800502c:	000c      	.short	0x000c
 800502e:	bf00      	nop
 8005030:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005034:	4836      	ldr	r0, [pc, #216]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8005036:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005038:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800503c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800503e:	2d00      	cmp	r5, #0
 8005040:	f000 831a 	beq.w	8005678 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 8005044:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005046:	0259      	lsls	r1, r3, #9
 8005048:	f100 827a 	bmi.w	8005540 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800504c:	07df      	lsls	r7, r3, #31
 800504e:	d52f      	bpl.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 8005050:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8005052:	2928      	cmp	r1, #40	@ 0x28
 8005054:	d82a      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005056:	e8df f011 	tbh	[pc, r1, lsl #1]
 800505a:	0257      	.short	0x0257
 800505c:	00290029 	.word	0x00290029
 8005060:	00290029 	.word	0x00290029
 8005064:	00290029 	.word	0x00290029
 8005068:	02480029 	.word	0x02480029
 800506c:	00290029 	.word	0x00290029
 8005070:	00290029 	.word	0x00290029
 8005074:	00290029 	.word	0x00290029
 8005078:	04b90029 	.word	0x04b90029
 800507c:	00290029 	.word	0x00290029
 8005080:	00290029 	.word	0x00290029
 8005084:	00290029 	.word	0x00290029
 8005088:	02570029 	.word	0x02570029
 800508c:	00290029 	.word	0x00290029
 8005090:	00290029 	.word	0x00290029
 8005094:	00290029 	.word	0x00290029
 8005098:	02570029 	.word	0x02570029
 800509c:	00290029 	.word	0x00290029
 80050a0:	00290029 	.word	0x00290029
 80050a4:	00290029 	.word	0x00290029
 80050a8:	02570029 	.word	0x02570029
      status = ret;
 80050ac:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80050ae:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80050b0:	0798      	lsls	r0, r3, #30
 80050b2:	d51e      	bpl.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80050b4:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80050b6:	2905      	cmp	r1, #5
 80050b8:	f200 8550 	bhi.w	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80050bc:	e8df f011 	tbh	[pc, r1, lsl #1]
 80050c0:	00060015 	.word	0x00060015
 80050c4:	00150471 	.word	0x00150471
 80050c8:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050cc:	4910      	ldr	r1, [pc, #64]	@ (8005110 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80050ce:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80050d0:	f001 0103 	and.w	r1, r1, #3
 80050d4:	2903      	cmp	r1, #3
 80050d6:	f000 8541 	beq.w	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80050da:	2101      	movs	r1, #1
 80050dc:	f104 0008 	add.w	r0, r4, #8
 80050e0:	f7ff fd5c 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 80050e4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050e6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80050ea:	2d00      	cmp	r5, #0
 80050ec:	f000 82cc 	beq.w	8005688 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 80050f0:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050f2:	0759      	lsls	r1, r3, #29
 80050f4:	d521      	bpl.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80050f6:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80050fa:	2905      	cmp	r1, #5
 80050fc:	f200 852a 	bhi.w	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8005100:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005104:	00080017 	.word	0x00080017
 8005108:	0017043c 	.word	0x0017043c
 800510c:	00170017 	.word	0x00170017
 8005110:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005114:	49ae      	ldr	r1, [pc, #696]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005116:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005118:	f001 0103 	and.w	r1, r1, #3
 800511c:	2903      	cmp	r1, #3
 800511e:	f000 8519 	beq.w	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8005122:	2101      	movs	r1, #1
 8005124:	f104 0008 	add.w	r0, r4, #8
 8005128:	f7ff fd38 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 800512c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800512e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005132:	2d00      	cmp	r5, #0
 8005134:	f000 82c2 	beq.w	80056bc <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 8005138:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800513a:	069f      	lsls	r7, r3, #26
 800513c:	d526      	bpl.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800513e:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8005142:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8005146:	f000 82c6 	beq.w	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800514a:	f200 8455 	bhi.w	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800514e:	b191      	cbz	r1, 8005176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005150:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8005154:	f040 845a 	bne.w	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005158:	499d      	ldr	r1, [pc, #628]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800515a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800515c:	f001 0103 	and.w	r1, r1, #3
 8005160:	2903      	cmp	r1, #3
 8005162:	f000 8453 	beq.w	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8005166:	2100      	movs	r1, #0
 8005168:	f104 0008 	add.w	r0, r4, #8
 800516c:	f7ff fd16 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8005170:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005172:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005176:	2d00      	cmp	r5, #0
 8005178:	f040 828e 	bne.w	8005698 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800517c:	4f94      	ldr	r7, [pc, #592]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800517e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8005182:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005184:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8005188:	4301      	orrs	r1, r0
 800518a:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800518c:	0658      	lsls	r0, r3, #25
 800518e:	d526      	bpl.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005190:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8005194:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8005198:	f000 82af 	beq.w	80056fa <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800519c:	f200 8464 	bhi.w	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80051a0:	b191      	cbz	r1, 80051c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 80051a2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80051a6:	f040 8469 	bne.w	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051aa:	4989      	ldr	r1, [pc, #548]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051ac:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80051ae:	f001 0103 	and.w	r1, r1, #3
 80051b2:	2903      	cmp	r1, #3
 80051b4:	f000 8462 	beq.w	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80051b8:	2100      	movs	r1, #0
 80051ba:	f104 0008 	add.w	r0, r4, #8
 80051be:	f7ff fced 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 80051c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051c8:	2d00      	cmp	r5, #0
 80051ca:	f040 8269 	bne.w	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051ce:	4f80      	ldr	r7, [pc, #512]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051d0:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80051d4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80051d6:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 80051da:	4301      	orrs	r1, r0
 80051dc:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80051de:	0619      	lsls	r1, r3, #24
 80051e0:	d526      	bpl.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80051e2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80051e6:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 80051ea:	f000 8298 	beq.w	800571e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80051ee:	f200 841f 	bhi.w	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 80051f2:	b191      	cbz	r1, 800521a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80051f4:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80051f8:	f040 8424 	bne.w	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051fc:	4974      	ldr	r1, [pc, #464]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051fe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005200:	f001 0103 	and.w	r1, r1, #3
 8005204:	2903      	cmp	r1, #3
 8005206:	f000 841d 	beq.w	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800520a:	2100      	movs	r1, #0
 800520c:	f104 0008 	add.w	r0, r4, #8
 8005210:	f7ff fcc4 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8005214:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005216:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800521a:	2d00      	cmp	r5, #0
 800521c:	f040 8244 	bne.w	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005220:	4f6b      	ldr	r7, [pc, #428]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005222:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8005226:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005228:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 800522c:	4301      	orrs	r1, r0
 800522e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005230:	071f      	lsls	r7, r3, #28
 8005232:	d50b      	bpl.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005234:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005238:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800523c:	f000 81d4 	beq.w	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005240:	4f63      	ldr	r7, [pc, #396]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005242:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005244:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005248:	4301      	orrs	r1, r0
 800524a:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800524c:	06d8      	lsls	r0, r3, #27
 800524e:	d50b      	bpl.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005250:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8005254:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8005258:	f000 81db 	beq.w	8005612 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800525c:	4f5c      	ldr	r7, [pc, #368]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800525e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005260:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8005264:	4301      	orrs	r1, r0
 8005266:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005268:	0319      	lsls	r1, r3, #12
 800526a:	d524      	bpl.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 800526c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8005270:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8005274:	f000 82b1 	beq.w	80057da <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005278:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800527c:	d010      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 800527e:	2900      	cmp	r1, #0
 8005280:	f040 8130 	bne.w	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005284:	4852      	ldr	r0, [pc, #328]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005286:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8005288:	f000 0003 	and.w	r0, r0, #3
 800528c:	2803      	cmp	r0, #3
 800528e:	f000 8129 	beq.w	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8005292:	f104 0008 	add.w	r0, r4, #8
 8005296:	f7ff fc81 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 800529a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800529c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052a0:	2d00      	cmp	r5, #0
 80052a2:	f040 81ff 	bne.w	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052a6:	4f4a      	ldr	r7, [pc, #296]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80052a8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 80052ac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80052ae:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80052b2:	4301      	orrs	r1, r0
 80052b4:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052b6:	035f      	lsls	r7, r3, #13
 80052b8:	d50f      	bpl.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 80052ba:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80052be:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80052c2:	f000 8277 	beq.w	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 80052c6:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 80052ca:	f000 812d 	beq.w	8005528 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80052ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80052d2:	f000 8124 	beq.w	800551e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 80052d6:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80052d8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052da:	03d8      	lsls	r0, r3, #15
 80052dc:	d520      	bpl.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 80052de:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80052e0:	2900      	cmp	r1, #0
 80052e2:	f000 81aa 	beq.w	800563a <HAL_RCCEx_PeriphCLKConfig+0x8de>
 80052e6:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80052ea:	f040 80e8 	bne.w	80054be <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ee:	4938      	ldr	r1, [pc, #224]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80052f0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80052f2:	f001 0103 	and.w	r1, r1, #3
 80052f6:	2903      	cmp	r1, #3
 80052f8:	f000 80e1 	beq.w	80054be <HAL_RCCEx_PeriphCLKConfig+0x762>
 80052fc:	2102      	movs	r1, #2
 80052fe:	f104 0008 	add.w	r0, r4, #8
 8005302:	f7ff fc4b 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8005306:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005308:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800530c:	2d00      	cmp	r5, #0
 800530e:	f040 819c 	bne.w	800564a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005312:	4f2f      	ldr	r7, [pc, #188]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005314:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005316:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005318:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800531c:	4301      	orrs	r1, r0
 800531e:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005320:	0099      	lsls	r1, r3, #2
 8005322:	d50e      	bpl.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005324:	492a      	ldr	r1, [pc, #168]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005326:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005328:	f001 0103 	and.w	r1, r1, #3
 800532c:	2903      	cmp	r1, #3
 800532e:	d007      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8005330:	2102      	movs	r1, #2
 8005332:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005336:	f7ff fca1 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800533a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800533e:	b100      	cbz	r0, 8005342 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 8005340:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005342:	039f      	lsls	r7, r3, #14
 8005344:	f100 80ab 	bmi.w	800549e <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 8005348:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800534a:	02d8      	lsls	r0, r3, #11
 800534c:	d506      	bpl.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800534e:	4820      	ldr	r0, [pc, #128]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005350:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8005352:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005354:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005358:	4331      	orrs	r1, r6
 800535a:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800535c:	00d9      	lsls	r1, r3, #3
 800535e:	d507      	bpl.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005360:	481b      	ldr	r0, [pc, #108]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005362:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8005366:	6901      	ldr	r1, [r0, #16]
 8005368:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800536c:	4331      	orrs	r1, r6
 800536e:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005370:	029f      	lsls	r7, r3, #10
 8005372:	d506      	bpl.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005374:	4816      	ldr	r0, [pc, #88]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005376:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8005378:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800537a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800537e:	4331      	orrs	r1, r6
 8005380:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005382:	005e      	lsls	r6, r3, #1
 8005384:	d509      	bpl.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005386:	4912      	ldr	r1, [pc, #72]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005388:	6908      	ldr	r0, [r1, #16]
 800538a:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800538e:	6108      	str	r0, [r1, #16]
 8005390:	6908      	ldr	r0, [r1, #16]
 8005392:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 8005396:	4330      	orrs	r0, r6
 8005398:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800539a:	2b00      	cmp	r3, #0
 800539c:	da06      	bge.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800539e:	480c      	ldr	r0, [pc, #48]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80053a0:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80053a2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80053a4:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80053a8:	4331      	orrs	r1, r6
 80053aa:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80053ac:	0218      	lsls	r0, r3, #8
 80053ae:	d507      	bpl.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053b0:	4907      	ldr	r1, [pc, #28]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80053b2:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 80053b6:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80053b8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053bc:	4303      	orrs	r3, r0
 80053be:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80053c0:	07d1      	lsls	r1, r2, #31
 80053c2:	d511      	bpl.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053c4:	4b02      	ldr	r3, [pc, #8]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	e001      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80053d0:	58024400 	.word	0x58024400
 80053d4:	f000 835c 	beq.w	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 80053d8:	2100      	movs	r1, #0
 80053da:	f104 0008 	add.w	r0, r4, #8
 80053de:	f7ff fbdd 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80053e2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80053e4:	b100      	cbz	r0, 80053e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80053e6:	4605      	mov	r5, r0
 80053e8:	0793      	lsls	r3, r2, #30
 80053ea:	d50e      	bpl.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053ec:	4baf      	ldr	r3, [pc, #700]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80053ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	f000 834d 	beq.w	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80053fa:	2101      	movs	r1, #1
 80053fc:	f104 0008 	add.w	r0, r4, #8
 8005400:	f7ff fbcc 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005404:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005406:	b100      	cbz	r0, 800540a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005408:	4605      	mov	r5, r0
 800540a:	0757      	lsls	r7, r2, #29
 800540c:	d50e      	bpl.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800540e:	4ba7      	ldr	r3, [pc, #668]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	2b03      	cmp	r3, #3
 8005418:	f000 833e 	beq.w	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800541c:	2102      	movs	r1, #2
 800541e:	f104 0008 	add.w	r0, r4, #8
 8005422:	f7ff fbbb 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005426:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005428:	b100      	cbz	r0, 800542c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800542a:	4605      	mov	r5, r0
 800542c:	0716      	lsls	r6, r2, #28
 800542e:	d50e      	bpl.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005430:	4b9e      	ldr	r3, [pc, #632]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005434:	f003 0303 	and.w	r3, r3, #3
 8005438:	2b03      	cmp	r3, #3
 800543a:	f000 8323 	beq.w	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xd28>
 800543e:	2100      	movs	r1, #0
 8005440:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005444:	f7ff fc1a 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005448:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800544a:	b100      	cbz	r0, 800544e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800544c:	4605      	mov	r5, r0
 800544e:	06d0      	lsls	r0, r2, #27
 8005450:	d50f      	bpl.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005452:	4b96      	ldr	r3, [pc, #600]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b03      	cmp	r3, #3
 800545c:	f000 8314 	beq.w	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 8005460:	2101      	movs	r1, #1
 8005462:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005466:	f7ff fc09 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800546a:	2800      	cmp	r0, #0
 800546c:	f040 8359 	bne.w	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005470:	6862      	ldr	r2, [r4, #4]
 8005472:	0693      	lsls	r3, r2, #26
 8005474:	d50e      	bpl.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005476:	4b8d      	ldr	r3, [pc, #564]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b03      	cmp	r3, #3
 8005480:	f000 82b7 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005484:	2102      	movs	r1, #2
 8005486:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800548a:	f7ff fbf7 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800548e:	2800      	cmp	r0, #0
 8005490:	f040 82af 	bne.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 8005494:	1e28      	subs	r0, r5, #0
 8005496:	bf18      	it	ne
 8005498:	2001      	movne	r0, #1
}
 800549a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 800549e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80054a2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80054a6:	f000 80d2 	beq.w	800564e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80054aa:	f240 8110 	bls.w	80056ce <HAL_RCCEx_PeriphCLKConfig+0x972>
 80054ae:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 80054b2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80054b6:	f000 80cf 	beq.w	8005658 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80054ba:	2501      	movs	r5, #1
 80054bc:	e745      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 80054be:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80054c0:	4635      	mov	r5, r6
 80054c2:	e72d      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c4:	4879      	ldr	r0, [pc, #484]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054c6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80054c8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80054cc:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80054ce:	2d00      	cmp	r5, #0
 80054d0:	f040 80ce 	bne.w	8005670 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054d4:	4f75      	ldr	r7, [pc, #468]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054d6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80054d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80054da:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80054de:	4301      	orrs	r1, r0
 80054e0:	6539      	str	r1, [r7, #80]	@ 0x50
 80054e2:	e598      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 80054e4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80054e6:	4635      	mov	r5, r6
 80054e8:	e6e5      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054ea:	4970      	ldr	r1, [pc, #448]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054ec:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80054ee:	f001 0103 	and.w	r1, r1, #3
 80054f2:	2903      	cmp	r1, #3
 80054f4:	f43f adda 	beq.w	80050ac <HAL_RCCEx_PeriphCLKConfig+0x350>
 80054f8:	2101      	movs	r1, #1
 80054fa:	f104 0008 	add.w	r0, r4, #8
 80054fe:	f7ff fb4d 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8005502:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005504:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005508:	2d00      	cmp	r5, #0
 800550a:	f040 80d5 	bne.w	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800550e:	4f67      	ldr	r7, [pc, #412]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005510:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005512:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005514:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8005518:	4301      	orrs	r1, r0
 800551a:	6579      	str	r1, [r7, #84]	@ 0x54
 800551c:	e5c8      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800551e:	4863      	ldr	r0, [pc, #396]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005520:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005522:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005526:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005528:	2d00      	cmp	r5, #0
 800552a:	f040 809f 	bne.w	800566c <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800552e:	4f5f      	ldr	r7, [pc, #380]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005530:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8005534:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005536:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800553a:	4301      	orrs	r1, r0
 800553c:	6579      	str	r1, [r7, #84]	@ 0x54
 800553e:	e6cc      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005540:	4f5b      	ldr	r7, [pc, #364]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005548:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800554a:	f7fc f8ed 	bl	8001728 <HAL_GetTick>
 800554e:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005550:	e006      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005552:	f7fc f8e9 	bl	8001728 <HAL_GetTick>
 8005556:	eba0 0008 	sub.w	r0, r0, r8
 800555a:	2864      	cmp	r0, #100	@ 0x64
 800555c:	f200 82db 	bhi.w	8005b16 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	05da      	lsls	r2, r3, #23
 8005564:	d5f5      	bpl.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 8005566:	2d00      	cmp	r5, #0
 8005568:	f040 82d6 	bne.w	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800556c:	4a4f      	ldr	r2, [pc, #316]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800556e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005572:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005574:	4059      	eors	r1, r3
 8005576:	f411 7f40 	tst.w	r1, #768	@ 0x300
 800557a:	d00b      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800557c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800557e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005580:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005584:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8005588:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800558a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 800558c:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8005590:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8005592:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005598:	f000 82fb 	beq.w	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800559c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80055a0:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80055a4:	f000 8309 	beq.w	8005bba <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 80055a8:	4940      	ldr	r1, [pc, #256]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80055aa:	690a      	ldr	r2, [r1, #16]
 80055ac:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80055b0:	610a      	str	r2, [r1, #16]
 80055b2:	483e      	ldr	r0, [pc, #248]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80055b4:	f3c3 010b 	ubfx	r1, r3, #0, #12
 80055b8:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 80055ba:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80055bc:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c0:	6701      	str	r1, [r0, #112]	@ 0x70
 80055c2:	e543      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c4:	4839      	ldr	r0, [pc, #228]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80055c6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80055c8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80055cc:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 80055ce:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	f040 8177 	bne.w	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055d6:	4f35      	ldr	r7, [pc, #212]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80055d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055dc:	f021 0107 	bic.w	r1, r1, #7
 80055e0:	4301      	orrs	r1, r0
 80055e2:	6539      	str	r1, [r7, #80]	@ 0x50
 80055e4:	f7ff bbf6 	b.w	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055e8:	4930      	ldr	r1, [pc, #192]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80055ea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80055ec:	f001 0103 	and.w	r1, r1, #3
 80055f0:	2903      	cmp	r1, #3
 80055f2:	f000 82ba 	beq.w	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 80055f6:	2102      	movs	r1, #2
 80055f8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80055fc:	f7ff fb3e 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005600:	2800      	cmp	r0, #0
 8005602:	f000 82b5 	beq.w	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005606:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 800560a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800560c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005610:	e616      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005612:	4926      	ldr	r1, [pc, #152]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005614:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005616:	f001 0103 	and.w	r1, r1, #3
 800561a:	2903      	cmp	r1, #3
 800561c:	f000 82a2 	beq.w	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8005620:	2102      	movs	r1, #2
 8005622:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005626:	f7ff fb29 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800562a:	2800      	cmp	r0, #0
 800562c:	f040 82a6 	bne.w	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005630:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005634:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005638:	e610      	b.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800563a:	481c      	ldr	r0, [pc, #112]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800563c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800563e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005642:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005644:	2d00      	cmp	r5, #0
 8005646:	f43f ae64 	beq.w	8005312 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 800564a:	462e      	mov	r6, r5
 800564c:	e668      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564e:	4f17      	ldr	r7, [pc, #92]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005650:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005652:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8005656:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005658:	2d00      	cmp	r5, #0
 800565a:	f47f ae76 	bne.w	800534a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800565e:	4d13      	ldr	r5, [pc, #76]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005660:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8005662:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8005666:	4301      	orrs	r1, r0
 8005668:	6569      	str	r1, [r5, #84]	@ 0x54
 800566a:	e66d      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 800566c:	462e      	mov	r6, r5
 800566e:	e634      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 8005670:	462e      	mov	r6, r5
 8005672:	e4d0      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8005674:	462e      	mov	r6, r5
 8005676:	e445      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005678:	4f0c      	ldr	r7, [pc, #48]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800567a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800567c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800567e:	f021 0103 	bic.w	r1, r1, #3
 8005682:	4301      	orrs	r1, r0
 8005684:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8005686:	e4de      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005688:	4f08      	ldr	r7, [pc, #32]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800568a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 800568c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800568e:	f021 0107 	bic.w	r1, r1, #7
 8005692:	4301      	orrs	r1, r0
 8005694:	6579      	str	r1, [r7, #84]	@ 0x54
 8005696:	e52c      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 8005698:	462e      	mov	r6, r5
 800569a:	e577      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 800569c:	462e      	mov	r6, r5
 800569e:	e4aa      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 80056a0:	462e      	mov	r6, r5
 80056a2:	e59c      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 80056a4:	462e      	mov	r6, r5
 80056a6:	e606      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 80056a8:	462e      	mov	r6, r5
 80056aa:	e5c1      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80056ac:	58024400 	.word	0x58024400
 80056b0:	58024800 	.word	0x58024800
      status = ret;
 80056b4:	462e      	mov	r6, r5
 80056b6:	e475      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 80056b8:	462e      	mov	r6, r5
 80056ba:	e4f9      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056bc:	4fc2      	ldr	r7, [pc, #776]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80056be:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80056c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80056c4:	f021 0107 	bic.w	r1, r1, #7
 80056c8:	4301      	orrs	r1, r0
 80056ca:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056cc:	e535      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 80056ce:	2900      	cmp	r1, #0
 80056d0:	f47f aef3 	bne.w	80054ba <HAL_RCCEx_PeriphCLKConfig+0x75e>
 80056d4:	e7c0      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056d6:	49bc      	ldr	r1, [pc, #752]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80056d8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80056da:	f001 0103 	and.w	r1, r1, #3
 80056de:	2903      	cmp	r1, #3
 80056e0:	f000 8194 	beq.w	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 80056e4:	2102      	movs	r1, #2
 80056e6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80056ea:	f7ff fac7 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 80056ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056f0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80056f4:	2d00      	cmp	r5, #0
 80056f6:	d1cf      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 80056f8:	e540      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056fa:	49b3      	ldr	r1, [pc, #716]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80056fc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80056fe:	f001 0103 	and.w	r1, r1, #3
 8005702:	2903      	cmp	r1, #3
 8005704:	f000 81ba 	beq.w	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005708:	2102      	movs	r1, #2
 800570a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800570e:	f7ff fab5 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 8005712:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005714:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005718:	2d00      	cmp	r5, #0
 800571a:	d1c1      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x944>
 800571c:	e557      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800571e:	49aa      	ldr	r1, [pc, #680]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005720:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005722:	f001 0103 	and.w	r1, r1, #3
 8005726:	2903      	cmp	r1, #3
 8005728:	f000 818c 	beq.w	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800572c:	2102      	movs	r1, #2
 800572e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005732:	f7ff faa3 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 8005736:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005738:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800573c:	2d00      	cmp	r5, #0
 800573e:	d1b3      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8005740:	e56e      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005742:	49a1      	ldr	r1, [pc, #644]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005744:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005746:	f001 0103 	and.w	r1, r1, #3
 800574a:	2903      	cmp	r1, #3
 800574c:	f000 81df 	beq.w	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 8005750:	2102      	movs	r1, #2
 8005752:	f104 0008 	add.w	r0, r4, #8
 8005756:	f7ff fa21 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 800575a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800575c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005760:	2d00      	cmp	r5, #0
 8005762:	d187      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8005764:	f7ff bbc7 	b.w	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005768:	4997      	ldr	r1, [pc, #604]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800576a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800576c:	f001 0103 	and.w	r1, r1, #3
 8005770:	2903      	cmp	r1, #3
 8005772:	f000 820a 	beq.w	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8005776:	2102      	movs	r1, #2
 8005778:	f104 0008 	add.w	r0, r4, #8
 800577c:	f7ff fa0e 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8005780:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005782:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005786:	2d00      	cmp	r5, #0
 8005788:	f47f ac5c 	bne.w	8005044 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800578c:	e774      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800578e:	498e      	ldr	r1, [pc, #568]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005790:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005792:	f001 0103 	and.w	r1, r1, #3
 8005796:	2903      	cmp	r1, #3
 8005798:	f000 8146 	beq.w	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800579c:	2101      	movs	r1, #1
 800579e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80057a2:	f7ff fa6b 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 80057a6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057a8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80057ac:	2d00      	cmp	r5, #0
 80057ae:	d181      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x958>
 80057b0:	f7ff bbf1 	b.w	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057b4:	4984      	ldr	r1, [pc, #528]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057b6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80057b8:	f001 0103 	and.w	r1, r1, #3
 80057bc:	2903      	cmp	r1, #3
 80057be:	f43f ad8a 	beq.w	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80057c2:	2101      	movs	r1, #1
 80057c4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80057c8:	f7ff fa58 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 80057cc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057ce:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80057d2:	2d00      	cmp	r5, #0
 80057d4:	f47f af4a 	bne.w	800566c <HAL_RCCEx_PeriphCLKConfig+0x910>
 80057d8:	e6a9      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057da:	497b      	ldr	r1, [pc, #492]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057dc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80057de:	f001 0103 	and.w	r1, r1, #3
 80057e2:	2903      	cmp	r1, #3
 80057e4:	f43f ae7e 	beq.w	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x788>
 80057e8:	2102      	movs	r1, #2
 80057ea:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80057ee:	f7ff fa45 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 80057f2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057f4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	f47f af53 	bne.w	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x948>
 80057fe:	e552      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005800:	4971      	ldr	r1, [pc, #452]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005802:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005804:	f001 0103 	and.w	r1, r1, #3
 8005808:	2903      	cmp	r1, #3
 800580a:	f000 8129 	beq.w	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 800580e:	2101      	movs	r1, #1
 8005810:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005814:	f7ff fa32 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 8005818:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800581a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800581e:	2d00      	cmp	r5, #0
 8005820:	f47f af3c 	bne.w	800569c <HAL_RCCEx_PeriphCLKConfig+0x940>
 8005824:	f7ff bbdf 	b.w	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005828:	4867      	ldr	r0, [pc, #412]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800582a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800582c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005830:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005832:	2d00      	cmp	r5, #0
 8005834:	f43f ab88 	beq.w	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 8005838:	462e      	mov	r6, r5
 800583a:	f7ff bb8c 	b.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800583e:	4862      	ldr	r0, [pc, #392]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005840:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005842:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005846:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005848:	2d00      	cmp	r5, #0
 800584a:	f43f ab38 	beq.w	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 800584e:	462e      	mov	r6, r5
 8005850:	f7ff bb3d 	b.w	8004ece <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005854:	495c      	ldr	r1, [pc, #368]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005856:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005858:	f001 0103 	and.w	r1, r1, #3
 800585c:	2903      	cmp	r1, #3
 800585e:	f000 8125 	beq.w	8005aac <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8005862:	2100      	movs	r1, #0
 8005864:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005868:	f7ff fa08 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 800586c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800586e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005872:	f7ff bb66 	b.w	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005876:	4954      	ldr	r1, [pc, #336]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005878:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800587a:	f001 0103 	and.w	r1, r1, #3
 800587e:	2903      	cmp	r1, #3
 8005880:	f000 813e 	beq.w	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8005884:	2100      	movs	r1, #0
 8005886:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800588a:	f7ff f9f7 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 800588e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005890:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005894:	2d00      	cmp	r5, #0
 8005896:	f43f aabd 	beq.w	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 800589a:	462e      	mov	r6, r5
 800589c:	f7ff bac1 	b.w	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058a0:	4949      	ldr	r1, [pc, #292]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80058a2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80058a4:	f001 0103 	and.w	r1, r1, #3
 80058a8:	2903      	cmp	r1, #3
 80058aa:	f43f aa91 	beq.w	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80058ae:	2100      	movs	r1, #0
 80058b0:	f104 0008 	add.w	r0, r4, #8
 80058b4:	f7ff f972 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 80058b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80058be:	2d00      	cmp	r5, #0
 80058c0:	f43f ae89 	beq.w	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 80058c4:	462e      	mov	r6, r5
 80058c6:	f7ff ba85 	b.w	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058ca:	493f      	ldr	r1, [pc, #252]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80058cc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80058ce:	f001 0103 	and.w	r1, r1, #3
 80058d2:	2903      	cmp	r1, #3
 80058d4:	f43f aa7c 	beq.w	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80058d8:	2100      	movs	r1, #0
 80058da:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80058de:	f7ff f9cd 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 80058e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058e4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80058e8:	e672      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058ea:	4937      	ldr	r1, [pc, #220]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80058ec:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80058ee:	f001 0103 	and.w	r1, r1, #3
 80058f2:	2903      	cmp	r1, #3
 80058f4:	f000 80f9 	beq.w	8005aea <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80058f8:	2100      	movs	r1, #0
 80058fa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80058fe:	f7ff f9bd 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 8005902:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005904:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005908:	2d00      	cmp	r5, #0
 800590a:	f43f aaad 	beq.w	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 800590e:	462e      	mov	r6, r5
 8005910:	f7ff bab2 	b.w	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005914:	492c      	ldr	r1, [pc, #176]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005916:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005918:	f001 0103 	and.w	r1, r1, #3
 800591c:	2903      	cmp	r1, #3
 800591e:	f000 80d1 	beq.w	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8005922:	2100      	movs	r1, #0
 8005924:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005928:	f7ff f9a8 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 800592c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800592e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005932:	f7ff bac1 	b.w	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005936:	4924      	ldr	r1, [pc, #144]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005938:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800593a:	f001 0103 	and.w	r1, r1, #3
 800593e:	2903      	cmp	r1, #3
 8005940:	f000 80c8 	beq.w	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8005944:	2102      	movs	r1, #2
 8005946:	3028      	adds	r0, #40	@ 0x28
 8005948:	f7ff f998 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 800594c:	4606      	mov	r6, r0
        break;
 800594e:	f7ff ba28 	b.w	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005952:	481d      	ldr	r0, [pc, #116]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005954:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005956:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800595a:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 800595c:	f7ff ba81 	b.w	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005960:	4819      	ldr	r0, [pc, #100]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005962:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005964:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005968:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 800596a:	f7ff ba50 	b.w	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800596e:	4d16      	ldr	r5, [pc, #88]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005970:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8005972:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8005976:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005978:	f7ff ba17 	b.w	8004daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800597c:	4912      	ldr	r1, [pc, #72]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800597e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005980:	f001 0103 	and.w	r1, r1, #3
 8005984:	2903      	cmp	r1, #3
 8005986:	f000 80e5 	beq.w	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 800598a:	2101      	movs	r1, #1
 800598c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005990:	f7ff f974 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 8005994:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005996:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800599a:	2d00      	cmp	r5, #0
 800599c:	f47f abcc 	bne.w	8005138 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80059a0:	e68c      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059a2:	4909      	ldr	r1, [pc, #36]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80059a4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80059a6:	f001 0103 	and.w	r1, r1, #3
 80059aa:	2903      	cmp	r1, #3
 80059ac:	f000 80d6 	beq.w	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80059b0:	2101      	movs	r1, #1
 80059b2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80059b6:	f7ff f961 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 80059ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059bc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80059c0:	2d00      	cmp	r5, #0
 80059c2:	f47f ab95 	bne.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80059c6:	e65f      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 80059c8:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059cc:	4983      	ldr	r1, [pc, #524]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 80059ce:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80059d0:	f001 0103 	and.w	r1, r1, #3
 80059d4:	2903      	cmp	r1, #3
 80059d6:	f43f ab69 	beq.w	80050ac <HAL_RCCEx_PeriphCLKConfig+0x350>
 80059da:	2101      	movs	r1, #1
 80059dc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80059e0:	f7ff f94c 	bl	8004c7c <RCCEx_PLL3_Config.part.0>
 80059e4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059e6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80059ea:	2d00      	cmp	r5, #0
 80059ec:	f47f ae64 	bne.w	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80059f0:	e58d      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 80059f2:	2001      	movs	r0, #1
}
 80059f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 80059f8:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 80059fc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005a00:	f43f abb9 	beq.w	8005176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005a04:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8005a08:	f43f abb5 	beq.w	8005176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 8005a0c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005a0e:	4635      	mov	r5, r6
 8005a10:	f7ff bbbc 	b.w	800518c <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a14:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8005a18:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8005a1c:	f43f aab8 	beq.w	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005a20:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8005a24:	f43f aab4 	beq.w	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 8005a28:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005a2a:	4635      	mov	r5, r6
 8005a2c:	f7ff baba 	b.w	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005a30:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8005a34:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005a38:	f43f abef 	beq.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005a3c:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8005a40:	f43f abeb 	beq.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 8005a44:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005a46:	4635      	mov	r5, r6
 8005a48:	f7ff bbf2 	b.w	8005230 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a4c:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8005a50:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005a54:	f43f aac4 	beq.w	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8005a58:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8005a5c:	f43f aac0 	beq.w	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 8005a60:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005a62:	4635      	mov	r5, r6
 8005a64:	f7ff bac7 	b.w	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005a68:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8005a6c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8005a70:	f43f abaa 	beq.w	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8005a74:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8005a78:	f43f aba6 	beq.w	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 8005a7c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005a7e:	4635      	mov	r5, r6
 8005a80:	f7ff bbad 	b.w	80051de <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 8005a84:	2501      	movs	r5, #1
 8005a86:	e4e2      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a88:	0691      	lsls	r1, r2, #26
 8005a8a:	d5b2      	bpl.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 8005a8c:	2501      	movs	r5, #1
 8005a8e:	e4f2      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 8005a90:	2501      	movs	r5, #1
 8005a92:	e4a9      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005a94:	2501      	movs	r5, #1
 8005a96:	e4b8      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8005a98:	2501      	movs	r5, #1
 8005a9a:	e4c7      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a9c:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8005aa0:	f43f aa4f 	beq.w	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8005aa4:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8005aa8:	f43f aa4b 	beq.w	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 8005aac:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005aae:	4635      	mov	r5, r6
 8005ab0:	f7ff ba51 	b.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ab4:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8005ab8:	f43f a9fe 	beq.w	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005abc:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8005ac0:	f43f a9fa 	beq.w	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 8005ac4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005ac6:	4635      	mov	r5, r6
 8005ac8:	f7ff ba01 	b.w	8004ece <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005acc:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8005ad0:	f43f a96b 	beq.w	8004daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 8005ad4:	2601      	movs	r6, #1
 8005ad6:	f7ff b96f 	b.w	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ada:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8005ade:	f43f a9c0 	beq.w	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ae2:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8005ae6:	f43f a9bc 	beq.w	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 8005aea:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005aec:	4635      	mov	r5, r6
 8005aee:	f7ff b9c3 	b.w	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 8005af2:	29c0      	cmp	r1, #192	@ 0xc0
 8005af4:	f43f a98b 	beq.w	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8005af8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005afc:	f43f a987 	beq.w	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 8005b00:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005b02:	4635      	mov	r5, r6
 8005b04:	f7ff b98d 	b.w	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 8005b08:	2930      	cmp	r1, #48	@ 0x30
 8005b0a:	f43f a9f1 	beq.w	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 8005b0e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005b10:	4635      	mov	r5, r6
 8005b12:	f7ff b9f7 	b.w	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 8005b16:	2503      	movs	r5, #3
      status = ret;
 8005b18:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b1a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005b1e:	f7ff ba95 	b.w	800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b22:	6863      	ldr	r3, [r4, #4]
 8005b24:	069a      	lsls	r2, r3, #26
 8005b26:	f57f af64 	bpl.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	e4a3      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b2e:	492b      	ldr	r1, [pc, #172]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005b30:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005b32:	f001 0103 	and.w	r1, r1, #3
 8005b36:	2903      	cmp	r1, #3
 8005b38:	f43f aa6b 	beq.w	8005012 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	f104 0008 	add.w	r0, r4, #8
 8005b42:	f7ff f82b 	bl	8004b9c <RCCEx_PLL2_Config.part.0>
 8005b46:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b48:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	f47f ad8f 	bne.w	8005670 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8005b52:	e4bf      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 8005b54:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005b56:	4635      	mov	r5, r6
 8005b58:	f7ff baef 	b.w	800513a <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 8005b5c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005b5e:	4635      	mov	r5, r6
 8005b60:	f7ff bac7 	b.w	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 8005b64:	2601      	movs	r6, #1
 8005b66:	f7ff bb79 	b.w	800525c <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 8005b6a:	2601      	movs	r6, #1
 8005b6c:	f7ff bb68 	b.w	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b70:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b74:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005b78:	f7ff bb62 	b.w	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b7c:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 8005b80:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b82:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005b86:	f7ff bb69 	b.w	800525c <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 8005b8a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005b8c:	4635      	mov	r5, r6
 8005b8e:	f7ff ba5a 	b.w	8005046 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 8005b92:	f7fb fdc9 	bl	8001728 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b96:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8005bdc <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 8005b9a:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b9c:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ba0:	e004      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fb fdc1 	bl	8001728 <HAL_GetTick>
 8005ba6:	1bc0      	subs	r0, r0, r7
 8005ba8:	4548      	cmp	r0, r9
 8005baa:	d810      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bac:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8005bb0:	079b      	lsls	r3, r3, #30
 8005bb2:	d5f6      	bpl.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005bb8:	e4f0      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005bba:	4808      	ldr	r0, [pc, #32]	@ (8005bdc <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005bbc:	4a08      	ldr	r2, [pc, #32]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 8005bbe:	6901      	ldr	r1, [r0, #16]
 8005bc0:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005bc4:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	6102      	str	r2, [r0, #16]
 8005bcc:	e4f1      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 8005bce:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005bd0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005bd4:	4635      	mov	r5, r6
 8005bd6:	f7ff ba39 	b.w	800504c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8005bda:	bf00      	nop
 8005bdc:	58024400 	.word	0x58024400
 8005be0:	00ffffcf 	.word	0x00ffffcf

08005be4 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005be4:	4a47      	ldr	r2, [pc, #284]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8005be6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005be8:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bea:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bec:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8005bee:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bf2:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005bf6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8005bf8:	d05b      	beq.n	8005cb2 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005bfa:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bfe:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c02:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c06:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c0a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005c0e:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c14:	ee06 1a90 	vmov	s13, r1
 8005c18:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005c1c:	d003      	beq.n	8005c26 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8005c1e:	2c02      	cmp	r4, #2
 8005c20:	d06a      	beq.n	8005cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8005c22:	2c00      	cmp	r4, #0
 8005c24:	d04a      	beq.n	8005cbc <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c26:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005c2a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005c2e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c34:	ee07 3a90 	vmov	s15, r3
 8005c38:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c40:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c48:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8005c4e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005c52:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005c54:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005c58:	ee07 3a10 	vmov	s14, r3
 8005c5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005c60:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005c62:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c6a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005c6e:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005c72:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005c74:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005c78:	ee07 3a10 	vmov	s14, r3
 8005c7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005c80:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c88:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005c8c:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005c90:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005c92:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005c96:	ee06 3a90 	vmov	s13, r3
 8005c9a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005c9e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005ca2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ca6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005caa:	ee17 3a90 	vmov	r3, s15
 8005cae:	6083      	str	r3, [r0, #8]
}
 8005cb0:	4770      	bx	lr
 8005cb2:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005cb4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005cb8:	6083      	str	r3, [r0, #8]
}
 8005cba:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cbc:	6813      	ldr	r3, [r2, #0]
 8005cbe:	069b      	lsls	r3, r3, #26
 8005cc0:	d51d      	bpl.n	8005cfe <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cc2:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cc4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005cc8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cca:	4910      	ldr	r1, [pc, #64]	@ (8005d0c <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8005ccc:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cd4:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cd6:	ee06 3a10 	vmov	s12, r3
 8005cda:	ee05 1a90 	vmov	s11, r1
 8005cde:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005ce2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005ce6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005cea:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005cee:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cf6:	e7a9      	b.n	8005c4c <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cf8:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005d10 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8005cfc:	e795      	b.n	8005c2a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cfe:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005d14 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8005d02:	e792      	b.n	8005c2a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005d04:	58024400 	.word	0x58024400
 8005d08:	4a742400 	.word	0x4a742400
 8005d0c:	03d09000 	.word	0x03d09000
 8005d10:	4bbebc20 	.word	0x4bbebc20
 8005d14:	4c742400 	.word	0x4c742400

08005d18 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d18:	4a47      	ldr	r2, [pc, #284]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8005d1a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d1c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d1e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d20:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8005d22:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d26:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d2a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8005d2c:	d05b      	beq.n	8005de6 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d2e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d32:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d36:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d3a:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d3e:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005d42:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d48:	ee06 1a90 	vmov	s13, r1
 8005d4c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005d50:	d003      	beq.n	8005d5a <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8005d52:	2c02      	cmp	r4, #2
 8005d54:	d06a      	beq.n	8005e2c <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 8005d56:	2c00      	cmp	r4, #0
 8005d58:	d04a      	beq.n	8005df0 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d5a:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005e3c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005d5e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005d62:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d74:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005d80:	4a2d      	ldr	r2, [pc, #180]	@ (8005e38 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8005d82:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005d86:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005d88:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005d8c:	ee07 3a10 	vmov	s14, r3
 8005d90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005d94:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005d96:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005d9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d9e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005da2:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005da6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005da8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005dac:	ee07 3a10 	vmov	s14, r3
 8005db0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005db4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005db8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005dbc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005dc0:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005dc4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005dc6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005dca:	ee06 3a90 	vmov	s13, r3
 8005dce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005dd2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005dd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005dda:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005dde:	ee17 3a90 	vmov	r3, s15
 8005de2:	6083      	str	r3, [r0, #8]
}
 8005de4:	4770      	bx	lr
 8005de6:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005de8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005dec:	6083      	str	r3, [r0, #8]
}
 8005dee:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005df0:	6813      	ldr	r3, [r2, #0]
 8005df2:	069b      	lsls	r3, r3, #26
 8005df4:	d51d      	bpl.n	8005e32 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005df6:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005df8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005dfc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dfe:	4910      	ldr	r1, [pc, #64]	@ (8005e40 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8005e00:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e08:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e0a:	ee06 3a10 	vmov	s12, r3
 8005e0e:	ee05 1a90 	vmov	s11, r1
 8005e12:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005e16:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005e1a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e1e:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005e22:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e2a:	e7a9      	b.n	8005d80 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e2c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005e44 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8005e30:	e795      	b.n	8005d5e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e32:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005e48 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8005e36:	e792      	b.n	8005d5e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8005e38:	58024400 	.word	0x58024400
 8005e3c:	4a742400 	.word	0x4a742400
 8005e40:	03d09000 	.word	0x03d09000
 8005e44:	4bbebc20 	.word	0x4bbebc20
 8005e48:	4c742400 	.word	0x4c742400

08005e4c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e4c:	4a47      	ldr	r2, [pc, #284]	@ (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8005e4e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e50:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005e52:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005e54:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 8005e56:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005e5a:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e5e:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8005e60:	d05b      	beq.n	8005f1a <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e62:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005e66:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e6a:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e6e:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e72:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005e76:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e7c:	ee06 1a90 	vmov	s13, r1
 8005e80:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005e84:	d04e      	beq.n	8005f24 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8005e86:	2c02      	cmp	r4, #2
 8005e88:	d06d      	beq.n	8005f66 <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8005e8a:	2c00      	cmp	r4, #0
 8005e8c:	d04d      	beq.n	8005f2a <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e8e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005f70 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8005e92:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005e96:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9c:	ee07 3a90 	vmov	s15, r3
 8005ea0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ea8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8005f6c <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8005eb6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005eba:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005ebc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005ec0:	ee07 3a10 	vmov	s14, r3
 8005ec4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005ec8:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005eca:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005ece:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ed2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005ed6:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005eda:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005edc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005ee0:	ee07 3a10 	vmov	s14, r3
 8005ee4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ee8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005eec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ef0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005ef4:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005ef8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005efa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005efe:	ee06 3a90 	vmov	s13, r3
 8005f02:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005f06:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005f0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005f0e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005f12:	ee17 3a90 	vmov	r3, s15
 8005f16:	6083      	str	r3, [r0, #8]
}
 8005f18:	4770      	bx	lr
 8005f1a:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005f1c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005f20:	6083      	str	r3, [r0, #8]
}
 8005f22:	4770      	bx	lr
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f24:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8005f74 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 8005f28:	e7b3      	b.n	8005e92 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f2a:	6813      	ldr	r3, [r2, #0]
 8005f2c:	069b      	lsls	r3, r3, #26
 8005f2e:	d5ae      	bpl.n	8005e8e <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f30:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f32:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005f36:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f38:	490f      	ldr	r1, [pc, #60]	@ (8005f78 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>)
 8005f3a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f42:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f44:	ee06 3a10 	vmov	s12, r3
 8005f48:	ee05 1a90 	vmov	s11, r1
 8005f4c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005f50:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005f54:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005f58:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005f5c:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f64:	e7a6      	b.n	8005eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f66:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005f7c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8005f6a:	e792      	b.n	8005e92 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8005f6c:	58024400 	.word	0x58024400
 8005f70:	4c742400 	.word	0x4c742400
 8005f74:	4a742400 	.word	0x4a742400
 8005f78:	03d09000 	.word	0x03d09000
 8005f7c:	4bbebc20 	.word	0x4bbebc20

08005f80 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f80:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8005f84:	430b      	orrs	r3, r1
{
 8005f86:	b500      	push	{lr}
 8005f88:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f8a:	d04c      	beq.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005f8c:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8005f90:	430b      	orrs	r3, r1
 8005f92:	d036      	beq.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005f94:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	d06c      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005f9c:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	d04b      	beq.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005fa4:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8005fa8:	430b      	orrs	r3, r1
 8005faa:	f000 80b6 	beq.w	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005fae:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8005fb2:	430b      	orrs	r3, r1
 8005fb4:	f000 80ec 	beq.w	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005fb8:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	d069      	beq.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005fc0:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	f000 80d6 	beq.w	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005fca:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	f000 8109 	beq.w	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005fd4:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8005fd8:	4308      	orrs	r0, r1
 8005fda:	d120      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005fdc:	4a95      	ldr	r2, [pc, #596]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fde:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005fe0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8005fe4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fe8:	f000 80aa 	beq.w	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8005fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff0:	f000 8116 	beq.w	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005ff4:	b99b      	cbnz	r3, 800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ff6:	6810      	ldr	r0, [r2, #0]
 8005ff8:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005ffc:	d047      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8005ffe:	488e      	ldr	r0, [pc, #568]	@ (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
  return frequency;
 8006000:	e045      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006002:	4a8c      	ldr	r2, [pc, #560]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006004:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006006:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 800600a:	2b80      	cmp	r3, #128	@ 0x80
 800600c:	f000 8093 	beq.w	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8006010:	f240 808b 	bls.w	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006014:	2bc0      	cmp	r3, #192	@ 0xc0
 8006016:	d039      	beq.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800601c:	d05c      	beq.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
          frequency = 0;
 800601e:	2000      	movs	r0, #0
}
 8006020:	b005      	add	sp, #20
 8006022:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006026:	4b83      	ldr	r3, [pc, #524]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800602a:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800602e:	2b04      	cmp	r3, #4
 8006030:	d8f5      	bhi.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8006032:	e8df f003 	tbb	[pc, r3]
 8006036:	3c68      	.short	0x3c68
 8006038:	2b46      	.short	0x2b46
 800603a:	50          	.byte	0x50
 800603b:	00          	.byte	0x00
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800603c:	4a7d      	ldr	r2, [pc, #500]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800603e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006040:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 8006044:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006048:	d075      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800604a:	d96e      	bls.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800604c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006050:	d01c      	beq.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006052:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006056:	d1e2      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006058:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800605a:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800605c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006060:	0752      	lsls	r2, r2, #29
 8006062:	d541      	bpl.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8006064:	2b00      	cmp	r3, #0
 8006066:	d13f      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006068:	4b72      	ldr	r3, [pc, #456]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800606a:	4874      	ldr	r0, [pc, #464]	@ (800623c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006072:	40d8      	lsrs	r0, r3
 8006074:	e00b      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006076:	4a6f      	ldr	r2, [pc, #444]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006078:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800607a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006082:	d058      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8006084:	d951      	bls.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006086:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800608a:	d15e      	bne.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 800608c:	486c      	ldr	r0, [pc, #432]	@ (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 800608e:	b005      	add	sp, #20
 8006090:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006094:	4a67      	ldr	r2, [pc, #412]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006096:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a0:	f000 80df 	beq.w	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 80060a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060a8:	d0d6      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1b7      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060ae:	4b61      	ldr	r3, [pc, #388]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80060b6:	d0ea      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060b8:	a801      	add	r0, sp, #4
 80060ba:	f7ff fd93 	bl	8005be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060be:	9801      	ldr	r0, [sp, #4]
 80060c0:	e7e5      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060c2:	4b5c      	ldr	r3, [pc, #368]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80060ca:	d0e0      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060cc:	a801      	add	r0, sp, #4
 80060ce:	f7ff fe23 	bl	8005d18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060d2:	9801      	ldr	r0, [sp, #4]
 80060d4:	e7db      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060d6:	4a57      	ldr	r2, [pc, #348]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060d8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060da:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060e0:	0749      	lsls	r1, r1, #29
 80060e2:	d501      	bpl.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d038      	beq.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060e8:	4a52      	ldr	r2, [pc, #328]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060ea:	6812      	ldr	r2, [r2, #0]
 80060ec:	05d0      	lsls	r0, r2, #23
 80060ee:	d502      	bpl.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80060f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060f4:	d067      	beq.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060f6:	4a4f      	ldr	r2, [pc, #316]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	0391      	lsls	r1, r2, #14
 80060fc:	d58f      	bpl.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80060fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006102:	d18c      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8006104:	e77b      	b.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006106:	4b4b      	ldr	r3, [pc, #300]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800610e:	d0be      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006110:	a801      	add	r0, sp, #4
 8006112:	f7ff fe9b 	bl	8005e4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006116:	9802      	ldr	r0, [sp, #8]
 8006118:	e7b9      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800611a:	4a46      	ldr	r2, [pc, #280]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800611c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800611e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8006122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006126:	d006      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8006128:	d81d      	bhi.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800612a:	b14b      	cbz	r3, 8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800612c:	6810      	ldr	r0, [r2, #0]
 800612e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006132:	d0ac      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006134:	e7c0      	b.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006136:	6810      	ldr	r0, [r2, #0]
 8006138:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800613c:	d0a7      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800613e:	e7c5      	b.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006140:	6810      	ldr	r0, [r2, #0]
 8006142:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8006146:	d0a2      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006148:	e7e2      	b.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
    switch (saiclocksource)
 800614a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800614e:	d0c3      	beq.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006150:	e765      	b.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006152:	6810      	ldr	r0, [r2, #0]
 8006154:	f010 0004 	ands.w	r0, r0, #4
 8006158:	d099      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800615a:	6813      	ldr	r3, [r2, #0]
 800615c:	4837      	ldr	r0, [pc, #220]	@ (800623c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800615e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006162:	40d8      	lsrs	r0, r3
 8006164:	e793      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8006166:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800616a:	d08f      	beq.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800616c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006170:	f43f af72 	beq.w	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006174:	e753      	b.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006176:	4b2f      	ldr	r3, [pc, #188]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006178:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 800617a:	03d2      	lsls	r2, r2, #15
 800617c:	d5c4      	bpl.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006184:	d083      	beq.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006186:	a801      	add	r0, sp, #4
 8006188:	f7ff fd2c 	bl	8005be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800618c:	9803      	ldr	r0, [sp, #12]
 800618e:	e77e      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006190:	4a28      	ldr	r2, [pc, #160]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006192:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006194:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8006198:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800619c:	d0d9      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 800619e:	d814      	bhi.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 80061a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a4:	d03c      	beq.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80061a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061aa:	d04f      	beq.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f af36 	bne.w	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
}
 80061b2:	b005      	add	sp, #20
 80061b4:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80061b8:	f7fe bca8 	b.w	8004b0c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80061bc:	6810      	ldr	r0, [r2, #0]
 80061be:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 80061c2:	f43f af64 	beq.w	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 80061c6:	481f      	ldr	r0, [pc, #124]	@ (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80061c8:	e761      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80061ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061ce:	d0f5      	beq.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 80061d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061d4:	f47f af23 	bne.w	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061d8:	4b16      	ldr	r3, [pc, #88]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80061e0:	f43f af55 	beq.w	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80061e4:	e70b      	b.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80061e6:	4b13      	ldr	r3, [pc, #76]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ea:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 80061ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061f2:	d04e      	beq.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80061f4:	d83f      	bhi.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80061f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061fa:	d043      	beq.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80061fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006200:	d024      	beq.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8006202:	2b00      	cmp	r3, #0
 8006204:	f47f af0b 	bne.w	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006208:	f7fe fc40 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 800620c:	4b09      	ldr	r3, [pc, #36]	@ (8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800620e:	4a0e      	ldr	r2, [pc, #56]	@ (8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006216:	5cd3      	ldrb	r3, [r2, r3]
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	40d8      	lsrs	r0, r3
        break;
 800621e:	e736      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006220:	6810      	ldr	r0, [r2, #0]
 8006222:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006226:	f43f af32 	beq.w	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800622a:	a801      	add	r0, sp, #4
 800622c:	f7ff fcda 	bl	8005be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006230:	9802      	ldr	r0, [sp, #8]
 8006232:	e72c      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006234:	58024400 	.word	0x58024400
 8006238:	017d7840 	.word	0x017d7840
 800623c:	03d09000 	.word	0x03d09000
 8006240:	00bb8000 	.word	0x00bb8000
 8006244:	003d0900 	.word	0x003d0900
 8006248:	0800d584 	.word	0x0800d584
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800624c:	4b1a      	ldr	r3, [pc, #104]	@ (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006254:	f43f af1b 	beq.w	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006258:	a801      	add	r0, sp, #4
 800625a:	f7ff fd5d 	bl	8005d18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800625e:	9802      	ldr	r0, [sp, #8]
 8006260:	e715      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006262:	6810      	ldr	r0, [r2, #0]
 8006264:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006268:	f43f af11 	beq.w	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800626c:	a801      	add	r0, sp, #4
 800626e:	f7ff fd53 	bl	8005d18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006272:	9803      	ldr	r0, [sp, #12]
 8006274:	e70b      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800627a:	d016      	beq.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800627c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006280:	d0aa      	beq.n	80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006282:	e6cc      	b.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006284:	4b0c      	ldr	r3, [pc, #48]	@ (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800628c:	f43f aeff 	beq.w	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006290:	e7cb      	b.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006292:	4b09      	ldr	r3, [pc, #36]	@ (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	f010 0004 	ands.w	r0, r0, #4
 800629a:	f43f aef8 	beq.w	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4806      	ldr	r0, [pc, #24]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80062a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80062a6:	40d8      	lsrs	r0, r3
 80062a8:	e6f1      	b.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80062aa:	4b03      	ldr	r3, [pc, #12]	@ (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 80062b2:	f43f aeec 	beq.w	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80062b6:	e786      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 80062b8:	58024400 	.word	0x58024400
 80062bc:	03d09000 	.word	0x03d09000

080062c0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c0:	2800      	cmp	r0, #0
 80062c2:	f000 8095 	beq.w	80063f0 <HAL_TIM_Base_Init+0x130>
{
 80062c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80062cc:	4604      	mov	r4, r0
 80062ce:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 8087 	beq.w	80063e6 <HAL_TIM_Base_Init+0x126>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d8:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80062da:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062dc:	4945      	ldr	r1, [pc, #276]	@ (80063f4 <HAL_TIM_Base_Init+0x134>)
 80062de:	4d46      	ldr	r5, [pc, #280]	@ (80063f8 <HAL_TIM_Base_Init+0x138>)
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e4:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ec:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 80062f0:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f2:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062f6:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f8:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062fc:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062fe:	ea4f 1151 	mov.w	r1, r1, lsr #5

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006302:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006304:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8006308:	d01f      	beq.n	800634a <HAL_TIM_Base_Init+0x8a>
 800630a:	b9f1      	cbnz	r1, 800634a <HAL_TIM_Base_Init+0x8a>
 800630c:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 8006408 <HAL_TIM_Base_Init+0x148>
 8006310:	4563      	cmp	r3, ip
 8006312:	d050      	beq.n	80063b6 <HAL_TIM_Base_Init+0xf6>
 8006314:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8006318:	4563      	cmp	r3, ip
 800631a:	d04c      	beq.n	80063b6 <HAL_TIM_Base_Init+0xf6>
 800631c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8006320:	4563      	cmp	r3, ip
 8006322:	d012      	beq.n	800634a <HAL_TIM_Base_Init+0x8a>
 8006324:	f1be 0f00 	cmp.w	lr, #0
 8006328:	d10f      	bne.n	800634a <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800632a:	4d34      	ldr	r5, [pc, #208]	@ (80063fc <HAL_TIM_Base_Init+0x13c>)
 800632c:	4934      	ldr	r1, [pc, #208]	@ (8006400 <HAL_TIM_Base_Init+0x140>)
 800632e:	428b      	cmp	r3, r1
 8006330:	bf18      	it	ne
 8006332:	42ab      	cmpne	r3, r5
 8006334:	d043      	beq.n	80063be <HAL_TIM_Base_Init+0xfe>
 8006336:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800633a:	428b      	cmp	r3, r1
 800633c:	d03f      	beq.n	80063be <HAL_TIM_Base_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800633e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006342:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006344:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006346:	4310      	orrs	r0, r2

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006348:	e014      	b.n	8006374 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 800634a:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800634c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006350:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8006354:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006356:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006358:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 800635a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800635e:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006362:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006366:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006368:	b911      	cbnz	r1, 8006370 <HAL_TIM_Base_Init+0xb0>
 800636a:	f1be 0f00 	cmp.w	lr, #0
 800636e:	d02f      	beq.n	80063d0 <HAL_TIM_Base_Init+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006370:	6962      	ldr	r2, [r4, #20]
 8006372:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006374:	6819      	ldr	r1, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006376:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006378:	f041 0104 	orr.w	r1, r1, #4
 800637c:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 800637e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006380:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8006382:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006384:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006388:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 800638c:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8006390:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 8006394:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 8006398:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 800639c:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a0:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 80063a4:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 80063a8:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 80063ac:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80063b0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 80063b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80063ba:	68a1      	ldr	r1, [r4, #8]
 80063bc:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063be:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80063c0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c4:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063c6:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80063c8:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063ce:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063d0:	490c      	ldr	r1, [pc, #48]	@ (8006404 <HAL_TIM_Base_Init+0x144>)
 80063d2:	4a0a      	ldr	r2, [pc, #40]	@ (80063fc <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d4:	4293      	cmp	r3, r2
 80063d6:	bf18      	it	ne
 80063d8:	428b      	cmpne	r3, r1
 80063da:	d0c9      	beq.n	8006370 <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d0c5      	beq.n	8006370 <HAL_TIM_Base_Init+0xb0>
 80063e4:	e7c6      	b.n	8006374 <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 80063e6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80063ea:	f7fa fe87 	bl	80010fc <HAL_TIM_Base_MspInit>
 80063ee:	e773      	b.n	80062d8 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 80063f0:	2001      	movs	r0, #1
}
 80063f2:	4770      	bx	lr
 80063f4:	40010000 	.word	0x40010000
 80063f8:	40010400 	.word	0x40010400
 80063fc:	40014000 	.word	0x40014000
 8006400:	40014400 	.word	0x40014400
 8006404:	40014800 	.word	0x40014800
 8006408:	40000400 	.word	0x40000400

0800640c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800640c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006410:	2b01      	cmp	r3, #1
 8006412:	d139      	bne.n	8006488 <HAL_TIM_Base_Start+0x7c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006414:	6802      	ldr	r2, [r0, #0]
 8006416:	4b1d      	ldr	r3, [pc, #116]	@ (800648c <HAL_TIM_Base_Start+0x80>)
 8006418:	491d      	ldr	r1, [pc, #116]	@ (8006490 <HAL_TIM_Base_Start+0x84>)
 800641a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800641e:	bf18      	it	ne
 8006420:	429a      	cmpne	r2, r3
{
 8006422:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006424:	bf0c      	ite	eq
 8006426:	2301      	moveq	r3, #1
 8006428:	2300      	movne	r3, #0
 800642a:	4d1a      	ldr	r5, [pc, #104]	@ (8006494 <HAL_TIM_Base_Start+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 800642c:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642e:	42aa      	cmp	r2, r5
 8006430:	bf08      	it	eq
 8006432:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006436:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800643a:	4c17      	ldr	r4, [pc, #92]	@ (8006498 <HAL_TIM_Base_Start+0x8c>)
 800643c:	428a      	cmp	r2, r1
 800643e:	bf08      	it	eq
 8006440:	f043 0301 	orreq.w	r3, r3, #1
 8006444:	4815      	ldr	r0, [pc, #84]	@ (800649c <HAL_TIM_Base_Start+0x90>)
 8006446:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800644a:	42a2      	cmp	r2, r4
 800644c:	bf08      	it	eq
 800644e:	f043 0301 	orreq.w	r3, r3, #1
 8006452:	4282      	cmp	r2, r0
 8006454:	bf08      	it	eq
 8006456:	f043 0301 	orreq.w	r3, r3, #1
 800645a:	428a      	cmp	r2, r1
 800645c:	bf08      	it	eq
 800645e:	f043 0301 	orreq.w	r3, r3, #1
 8006462:	b913      	cbnz	r3, 800646a <HAL_TIM_Base_Start+0x5e>
 8006464:	4b0e      	ldr	r3, [pc, #56]	@ (80064a0 <HAL_TIM_Base_Start+0x94>)
 8006466:	429a      	cmp	r2, r3
 8006468:	d107      	bne.n	800647a <HAL_TIM_Base_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800646a:	6891      	ldr	r1, [r2, #8]
 800646c:	4b0d      	ldr	r3, [pc, #52]	@ (80064a4 <HAL_TIM_Base_Start+0x98>)
 800646e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006470:	2b06      	cmp	r3, #6
 8006472:	d006      	beq.n	8006482 <HAL_TIM_Base_Start+0x76>
 8006474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006478:	d003      	beq.n	8006482 <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	f043 0301 	orr.w	r3, r3, #1
 8006480:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006482:	2000      	movs	r0, #0
}
 8006484:	bc30      	pop	{r4, r5}
 8006486:	4770      	bx	lr
    return HAL_ERROR;
 8006488:	2001      	movs	r0, #1
}
 800648a:	4770      	bx	lr
 800648c:	40010000 	.word	0x40010000
 8006490:	40000800 	.word	0x40000800
 8006494:	40000400 	.word	0x40000400
 8006498:	40000c00 	.word	0x40000c00
 800649c:	40010400 	.word	0x40010400
 80064a0:	40014000 	.word	0x40014000
 80064a4:	00010007 	.word	0x00010007

080064a8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80064a8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80064ac:	2a01      	cmp	r2, #1
 80064ae:	d06d      	beq.n	800658c <HAL_TIM_ConfigClockSource+0xe4>
  tmpsmcr = htim->Instance->SMCR;
 80064b0:	6802      	ldr	r2, [r0, #0]
 80064b2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80064b4:	2001      	movs	r0, #1
{
 80064b6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 80064ba:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80064be:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c2:	4c59      	ldr	r4, [pc, #356]	@ (8006628 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 80064c4:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c6:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 80064c8:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80064ca:	680c      	ldr	r4, [r1, #0]
 80064cc:	2c70      	cmp	r4, #112	@ 0x70
 80064ce:	f000 8087 	beq.w	80065e0 <HAL_TIM_ConfigClockSource+0x138>
 80064d2:	d825      	bhi.n	8006520 <HAL_TIM_ConfigClockSource+0x78>
 80064d4:	2c50      	cmp	r4, #80	@ 0x50
 80064d6:	d05b      	beq.n	8006590 <HAL_TIM_ConfigClockSource+0xe8>
 80064d8:	d82b      	bhi.n	8006532 <HAL_TIM_ConfigClockSource+0x8a>
 80064da:	2c40      	cmp	r4, #64	@ 0x40
 80064dc:	f040 8090 	bne.w	8006600 <HAL_TIM_ConfigClockSource+0x158>
                               sClockSourceConfig->ClockPolarity,
 80064e0:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80064e2:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064e4:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e6:	6a10      	ldr	r0, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064e8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ec:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 80064f0:	430c      	orrs	r4, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064f2:	494e      	ldr	r1, [pc, #312]	@ (800662c <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f4:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f6:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064f8:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064fc:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006500:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006502:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006504:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006506:	4001      	ands	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006508:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800650c:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800650e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006510:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006512:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8006514:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800651c:	bc30      	pop	{r4, r5}
 800651e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006520:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8006524:	d04c      	beq.n	80065c0 <HAL_TIM_ConfigClockSource+0x118>
 8006526:	d81f      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0xc0>
 8006528:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 800652c:	bf18      	it	ne
 800652e:	2001      	movne	r0, #1
 8006530:	e7ee      	b.n	8006510 <HAL_TIM_ConfigClockSource+0x68>
 8006532:	2c60      	cmp	r4, #96	@ 0x60
 8006534:	d1ec      	bne.n	8006510 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 8006536:	6a10      	ldr	r0, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8006538:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800653a:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
                               sClockSourceConfig->ClockFilter);
 800653e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006540:	493a      	ldr	r1, [pc, #232]	@ (800662c <HAL_TIM_ConfigClockSource+0x184>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8006542:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006546:	6a14      	ldr	r4, [r2, #32]
 8006548:	f024 0410 	bic.w	r4, r4, #16
 800654c:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654e:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006550:	f424 4470 	bic.w	r4, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006554:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006558:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 800655a:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800655c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800655e:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006560:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006564:	6091      	str	r1, [r2, #8]
}
 8006566:	e7d2      	b.n	800650e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8006568:	4931      	ldr	r1, [pc, #196]	@ (8006630 <HAL_TIM_ConfigClockSource+0x188>)
 800656a:	428c      	cmp	r4, r1
 800656c:	d006      	beq.n	800657c <HAL_TIM_ConfigClockSource+0xd4>
 800656e:	d94f      	bls.n	8006610 <HAL_TIM_ConfigClockSource+0x168>
 8006570:	4930      	ldr	r1, [pc, #192]	@ (8006634 <HAL_TIM_ConfigClockSource+0x18c>)
 8006572:	428c      	cmp	r4, r1
 8006574:	d002      	beq.n	800657c <HAL_TIM_ConfigClockSource+0xd4>
 8006576:	3110      	adds	r1, #16
 8006578:	428c      	cmp	r4, r1
 800657a:	d1c9      	bne.n	8006510 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800657c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800657e:	492b      	ldr	r1, [pc, #172]	@ (800662c <HAL_TIM_ConfigClockSource+0x184>)
 8006580:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006582:	4321      	orrs	r1, r4
 8006584:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8006588:	6091      	str	r1, [r2, #8]
}
 800658a:	e7c0      	b.n	800650e <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 800658c:	2002      	movs	r0, #2
}
 800658e:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8006590:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006592:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006594:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006596:	6a10      	ldr	r0, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006598:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659c:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 80065a0:	430c      	orrs	r4, r1
  tmpsmcr &= ~TIM_SMCR_TS;
 80065a2:	4922      	ldr	r1, [pc, #136]	@ (800662c <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065a4:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065a6:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065a8:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065ac:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80065b0:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80065b2:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80065b4:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80065b6:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065b8:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80065bc:	6091      	str	r1, [r2, #8]
}
 80065be:	e7a6      	b.n	800650e <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065c0:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80065c4:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065c6:	4328      	orrs	r0, r5
 80065c8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ca:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ce:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80065d2:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d4:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065d6:	6891      	ldr	r1, [r2, #8]
 80065d8:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80065dc:	6091      	str	r1, [r2, #8]
      break;
 80065de:	e796      	b.n	800650e <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065e0:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80065e4:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065e6:	4328      	orrs	r0, r5
 80065e8:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065ea:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ee:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80065f2:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 80065f4:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80065f6:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065f8:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80065fc:	6091      	str	r1, [r2, #8]
      break;
 80065fe:	e786      	b.n	800650e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8006600:	d886      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x68>
 8006602:	2c20      	cmp	r4, #32
 8006604:	d0ba      	beq.n	800657c <HAL_TIM_ConfigClockSource+0xd4>
 8006606:	d80a      	bhi.n	800661e <HAL_TIM_ConfigClockSource+0x176>
 8006608:	f034 0110 	bics.w	r1, r4, #16
 800660c:	d180      	bne.n	8006510 <HAL_TIM_ConfigClockSource+0x68>
 800660e:	e7b5      	b.n	800657c <HAL_TIM_ConfigClockSource+0xd4>
 8006610:	f024 0110 	bic.w	r1, r4, #16
 8006614:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006618:	f47f af7a 	bne.w	8006510 <HAL_TIM_ConfigClockSource+0x68>
 800661c:	e7ae      	b.n	800657c <HAL_TIM_ConfigClockSource+0xd4>
 800661e:	2c30      	cmp	r4, #48	@ 0x30
 8006620:	d0ac      	beq.n	800657c <HAL_TIM_ConfigClockSource+0xd4>
      status = HAL_ERROR;
 8006622:	2001      	movs	r0, #1
 8006624:	e774      	b.n	8006510 <HAL_TIM_ConfigClockSource+0x68>
 8006626:	bf00      	nop
 8006628:	ffce0088 	.word	0xffce0088
 800662c:	ffcfff8f 	.word	0xffcfff8f
 8006630:	00100020 	.word	0x00100020
 8006634:	00100030 	.word	0x00100030

08006638 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006638:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d04b      	beq.n	80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006640:	6803      	ldr	r3, [r0, #0]
 8006642:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	2002      	movs	r0, #2
{
 8006646:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006648:	4d24      	ldr	r5, [pc, #144]	@ (80066dc <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800664a:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800664e:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006650:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006652:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006654:	d029      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006656:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800665a:	42ab      	cmp	r3, r5
 800665c:	d025      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665e:	4d20      	ldr	r5, [pc, #128]	@ (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8006660:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006664:	42ab      	cmp	r3, r5
 8006666:	bf18      	it	ne
 8006668:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 800666c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006670:	bf0c      	ite	eq
 8006672:	f04f 0c01 	moveq.w	ip, #1
 8006676:	f04f 0c00 	movne.w	ip, #0
 800667a:	42ab      	cmp	r3, r5
 800667c:	bf08      	it	eq
 800667e:	f04c 0c01 	orreq.w	ip, ip, #1
 8006682:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006686:	42ab      	cmp	r3, r5
 8006688:	bf08      	it	eq
 800668a:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800668e:	680d      	ldr	r5, [r1, #0]
 8006690:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006692:	4d14      	ldr	r5, [pc, #80]	@ (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8006694:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006696:	42ab      	cmp	r3, r5
 8006698:	bf14      	ite	ne
 800669a:	4660      	movne	r0, ip
 800669c:	f04c 0001 	orreq.w	r0, ip, #1
 80066a0:	b960      	cbnz	r0, 80066bc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80066a2:	4811      	ldr	r0, [pc, #68]	@ (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80066a4:	4283      	cmp	r3, r0
 80066a6:	d009      	beq.n	80066bc <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80066a8:	e00d      	b.n	80066c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066aa:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066ac:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066b0:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b4:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b8:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80066ba:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066bc:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066be:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066c2:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066c4:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80066c6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80066c8:	2101      	movs	r1, #1

  return HAL_OK;
 80066ca:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80066cc:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80066d0:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80066d4:	bc30      	pop	{r4, r5}
 80066d6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80066d8:	2002      	movs	r0, #2
}
 80066da:	4770      	bx	lr
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40000400 	.word	0x40000400
 80066e4:	40001800 	.word	0x40001800
 80066e8:	40014000 	.word	0x40014000

080066ec <arm_fill_f32>:
 80066ec:	b410      	push	{r4}
 80066ee:	088c      	lsrs	r4, r1, #2
 80066f0:	d010      	beq.n	8006714 <arm_fill_f32+0x28>
 80066f2:	f100 0310 	add.w	r3, r0, #16
 80066f6:	4622      	mov	r2, r4
 80066f8:	3a01      	subs	r2, #1
 80066fa:	ed03 0a04 	vstr	s0, [r3, #-16]
 80066fe:	ed03 0a03 	vstr	s0, [r3, #-12]
 8006702:	f103 0310 	add.w	r3, r3, #16
 8006706:	ed03 0a06 	vstr	s0, [r3, #-24]	@ 0xffffffe8
 800670a:	ed03 0a05 	vstr	s0, [r3, #-20]	@ 0xffffffec
 800670e:	d1f3      	bne.n	80066f8 <arm_fill_f32+0xc>
 8006710:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8006714:	f011 0103 	ands.w	r1, r1, #3
 8006718:	d003      	beq.n	8006722 <arm_fill_f32+0x36>
 800671a:	3901      	subs	r1, #1
 800671c:	eca0 0a01 	vstmia	r0!, {s0}
 8006720:	d1fb      	bne.n	800671a <arm_fill_f32+0x2e>
 8006722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006726:	4770      	bx	lr

08006728 <arm_copy_f32>:
 8006728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800672c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8006730:	d01e      	beq.n	8006770 <arm_copy_f32+0x48>
 8006732:	f100 0410 	add.w	r4, r0, #16
 8006736:	f101 0310 	add.w	r3, r1, #16
 800673a:	4645      	mov	r5, r8
 800673c:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8006740:	3d01      	subs	r5, #1
 8006742:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8006746:	f103 0310 	add.w	r3, r3, #16
 800674a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800674e:	f104 0410 	add.w	r4, r4, #16
 8006752:	f854 6c14 	ldr.w	r6, [r4, #-20]
 8006756:	f843 cc20 	str.w	ip, [r3, #-32]
 800675a:	f843 ec1c 	str.w	lr, [r3, #-28]
 800675e:	f843 7c18 	str.w	r7, [r3, #-24]
 8006762:	f843 6c14 	str.w	r6, [r3, #-20]
 8006766:	d1e9      	bne.n	800673c <arm_copy_f32+0x14>
 8006768:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800676c:	4440      	add	r0, r8
 800676e:	4441      	add	r1, r8
 8006770:	f012 0203 	ands.w	r2, r2, #3
 8006774:	d005      	beq.n	8006782 <arm_copy_f32+0x5a>
 8006776:	f850 3b04 	ldr.w	r3, [r0], #4
 800677a:	3a01      	subs	r2, #1
 800677c:	f841 3b04 	str.w	r3, [r1], #4
 8006780:	d1f9      	bne.n	8006776 <arm_copy_f32+0x4e>
 8006782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006786:	bf00      	nop

08006788 <arm_rfft_fast_init_f32>:
 8006788:	084b      	lsrs	r3, r1, #1
 800678a:	2b80      	cmp	r3, #128	@ 0x80
 800678c:	b430      	push	{r4, r5}
 800678e:	8201      	strh	r1, [r0, #16]
 8006790:	8003      	strh	r3, [r0, #0]
 8006792:	d06f      	beq.n	8006874 <arm_rfft_fast_init_f32+0xec>
 8006794:	d916      	bls.n	80067c4 <arm_rfft_fast_init_f32+0x3c>
 8006796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800679a:	d05e      	beq.n	800685a <arm_rfft_fast_init_f32+0xd2>
 800679c:	d935      	bls.n	800680a <arm_rfft_fast_init_f32+0x82>
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067a2:	d025      	beq.n	80067f0 <arm_rfft_fast_init_f32+0x68>
 80067a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067a8:	d112      	bne.n	80067d0 <arm_rfft_fast_init_f32+0x48>
 80067aa:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 80067ae:	4c37      	ldr	r4, [pc, #220]	@ (800688c <arm_rfft_fast_init_f32+0x104>)
 80067b0:	4937      	ldr	r1, [pc, #220]	@ (8006890 <arm_rfft_fast_init_f32+0x108>)
 80067b2:	2300      	movs	r3, #0
 80067b4:	4a37      	ldr	r2, [pc, #220]	@ (8006894 <arm_rfft_fast_init_f32+0x10c>)
 80067b6:	8185      	strh	r5, [r0, #12]
 80067b8:	6084      	str	r4, [r0, #8]
 80067ba:	6041      	str	r1, [r0, #4]
 80067bc:	6142      	str	r2, [r0, #20]
 80067be:	b258      	sxtb	r0, r3
 80067c0:	bc30      	pop	{r4, r5}
 80067c2:	4770      	bx	lr
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d030      	beq.n	800682a <arm_rfft_fast_init_f32+0xa2>
 80067c8:	2b40      	cmp	r3, #64	@ 0x40
 80067ca:	d005      	beq.n	80067d8 <arm_rfft_fast_init_f32+0x50>
 80067cc:	2b10      	cmp	r3, #16
 80067ce:	d038      	beq.n	8006842 <arm_rfft_fast_init_f32+0xba>
 80067d0:	23ff      	movs	r3, #255	@ 0xff
 80067d2:	bc30      	pop	{r4, r5}
 80067d4:	b258      	sxtb	r0, r3
 80067d6:	4770      	bx	lr
 80067d8:	2538      	movs	r5, #56	@ 0x38
 80067da:	4c2f      	ldr	r4, [pc, #188]	@ (8006898 <arm_rfft_fast_init_f32+0x110>)
 80067dc:	492f      	ldr	r1, [pc, #188]	@ (800689c <arm_rfft_fast_init_f32+0x114>)
 80067de:	2300      	movs	r3, #0
 80067e0:	4a2f      	ldr	r2, [pc, #188]	@ (80068a0 <arm_rfft_fast_init_f32+0x118>)
 80067e2:	8185      	strh	r5, [r0, #12]
 80067e4:	6084      	str	r4, [r0, #8]
 80067e6:	6041      	str	r1, [r0, #4]
 80067e8:	6142      	str	r2, [r0, #20]
 80067ea:	b258      	sxtb	r0, r3
 80067ec:	bc30      	pop	{r4, r5}
 80067ee:	4770      	bx	lr
 80067f0:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 80067f4:	4c2b      	ldr	r4, [pc, #172]	@ (80068a4 <arm_rfft_fast_init_f32+0x11c>)
 80067f6:	492c      	ldr	r1, [pc, #176]	@ (80068a8 <arm_rfft_fast_init_f32+0x120>)
 80067f8:	2300      	movs	r3, #0
 80067fa:	4a2c      	ldr	r2, [pc, #176]	@ (80068ac <arm_rfft_fast_init_f32+0x124>)
 80067fc:	8185      	strh	r5, [r0, #12]
 80067fe:	6084      	str	r4, [r0, #8]
 8006800:	6041      	str	r1, [r0, #4]
 8006802:	6142      	str	r2, [r0, #20]
 8006804:	b258      	sxtb	r0, r3
 8006806:	bc30      	pop	{r4, r5}
 8006808:	4770      	bx	lr
 800680a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800680e:	d1df      	bne.n	80067d0 <arm_rfft_fast_init_f32+0x48>
 8006810:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 8006814:	4c26      	ldr	r4, [pc, #152]	@ (80068b0 <arm_rfft_fast_init_f32+0x128>)
 8006816:	4927      	ldr	r1, [pc, #156]	@ (80068b4 <arm_rfft_fast_init_f32+0x12c>)
 8006818:	2300      	movs	r3, #0
 800681a:	4a27      	ldr	r2, [pc, #156]	@ (80068b8 <arm_rfft_fast_init_f32+0x130>)
 800681c:	8185      	strh	r5, [r0, #12]
 800681e:	6084      	str	r4, [r0, #8]
 8006820:	6041      	str	r1, [r0, #4]
 8006822:	6142      	str	r2, [r0, #20]
 8006824:	b258      	sxtb	r0, r3
 8006826:	bc30      	pop	{r4, r5}
 8006828:	4770      	bx	lr
 800682a:	2530      	movs	r5, #48	@ 0x30
 800682c:	4c23      	ldr	r4, [pc, #140]	@ (80068bc <arm_rfft_fast_init_f32+0x134>)
 800682e:	4924      	ldr	r1, [pc, #144]	@ (80068c0 <arm_rfft_fast_init_f32+0x138>)
 8006830:	2300      	movs	r3, #0
 8006832:	4a24      	ldr	r2, [pc, #144]	@ (80068c4 <arm_rfft_fast_init_f32+0x13c>)
 8006834:	8185      	strh	r5, [r0, #12]
 8006836:	6084      	str	r4, [r0, #8]
 8006838:	6041      	str	r1, [r0, #4]
 800683a:	6142      	str	r2, [r0, #20]
 800683c:	b258      	sxtb	r0, r3
 800683e:	bc30      	pop	{r4, r5}
 8006840:	4770      	bx	lr
 8006842:	2514      	movs	r5, #20
 8006844:	4c20      	ldr	r4, [pc, #128]	@ (80068c8 <arm_rfft_fast_init_f32+0x140>)
 8006846:	4921      	ldr	r1, [pc, #132]	@ (80068cc <arm_rfft_fast_init_f32+0x144>)
 8006848:	2300      	movs	r3, #0
 800684a:	4a21      	ldr	r2, [pc, #132]	@ (80068d0 <arm_rfft_fast_init_f32+0x148>)
 800684c:	8185      	strh	r5, [r0, #12]
 800684e:	6084      	str	r4, [r0, #8]
 8006850:	6041      	str	r1, [r0, #4]
 8006852:	6142      	str	r2, [r0, #20]
 8006854:	b258      	sxtb	r0, r3
 8006856:	bc30      	pop	{r4, r5}
 8006858:	4770      	bx	lr
 800685a:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800685e:	4c1d      	ldr	r4, [pc, #116]	@ (80068d4 <arm_rfft_fast_init_f32+0x14c>)
 8006860:	491d      	ldr	r1, [pc, #116]	@ (80068d8 <arm_rfft_fast_init_f32+0x150>)
 8006862:	2300      	movs	r3, #0
 8006864:	4a1d      	ldr	r2, [pc, #116]	@ (80068dc <arm_rfft_fast_init_f32+0x154>)
 8006866:	8185      	strh	r5, [r0, #12]
 8006868:	6084      	str	r4, [r0, #8]
 800686a:	6041      	str	r1, [r0, #4]
 800686c:	6142      	str	r2, [r0, #20]
 800686e:	b258      	sxtb	r0, r3
 8006870:	bc30      	pop	{r4, r5}
 8006872:	4770      	bx	lr
 8006874:	25d0      	movs	r5, #208	@ 0xd0
 8006876:	4c1a      	ldr	r4, [pc, #104]	@ (80068e0 <arm_rfft_fast_init_f32+0x158>)
 8006878:	491a      	ldr	r1, [pc, #104]	@ (80068e4 <arm_rfft_fast_init_f32+0x15c>)
 800687a:	2300      	movs	r3, #0
 800687c:	4a1a      	ldr	r2, [pc, #104]	@ (80068e8 <arm_rfft_fast_init_f32+0x160>)
 800687e:	8185      	strh	r5, [r0, #12]
 8006880:	6084      	str	r4, [r0, #8]
 8006882:	6041      	str	r1, [r0, #4]
 8006884:	6142      	str	r2, [r0, #20]
 8006886:	b258      	sxtb	r0, r3
 8006888:	bc30      	pop	{r4, r5}
 800688a:	4770      	bx	lr
 800688c:	0801c3a4 	.word	0x0801c3a4
 8006890:	0800d59c 	.word	0x0800d59c
 8006894:	0801370c 	.word	0x0801370c
 8006898:	0801169c 	.word	0x0801169c
 800689c:	0801e164 	.word	0x0801e164
 80068a0:	08020654 	.word	0x08020654
 80068a4:	0801a08c 	.word	0x0801a08c
 80068a8:	08017f8c 	.word	0x08017f8c
 80068ac:	0801170c 	.word	0x0801170c
 80068b0:	080202e4 	.word	0x080202e4
 80068b4:	0801770c 	.word	0x0801770c
 80068b8:	0801e364 	.word	0x0801e364
 80068bc:	0801af44 	.word	0x0801af44
 80068c0:	08019f8c 	.word	0x08019f8c
 80068c4:	0801159c 	.word	0x0801159c
 80068c8:	0801ae9c 	.word	0x0801ae9c
 80068cc:	08017f0c 	.word	0x08017f0c
 80068d0:	0801aec4 	.word	0x0801aec4
 80068d4:	0801eb64 	.word	0x0801eb64
 80068d8:	0801b3a4 	.word	0x0801b3a4
 80068dc:	0801eee4 	.word	0x0801eee4
 80068e0:	08020854 	.word	0x08020854
 80068e4:	0801afa4 	.word	0x0801afa4
 80068e8:	0801fee4 	.word	0x0801fee4

080068ec <arm_rfft_fast_f32>:
 80068ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f0:	8a05      	ldrh	r5, [r0, #16]
 80068f2:	4606      	mov	r6, r0
 80068f4:	4690      	mov	r8, r2
 80068f6:	460c      	mov	r4, r1
 80068f8:	086d      	lsrs	r5, r5, #1
 80068fa:	8005      	strh	r5, [r0, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d15e      	bne.n	80069be <arm_rfft_fast_f32+0xd2>
 8006900:	461a      	mov	r2, r3
 8006902:	2301      	movs	r3, #1
 8006904:	f000 fbe0 	bl	80070c8 <arm_cfft_f32>
 8006908:	edd4 7a00 	vldr	s15, [r4]
 800690c:	ed94 7a01 	vldr	s14, [r4, #4]
 8006910:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8006914:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006918:	8837      	ldrh	r7, [r6, #0]
 800691a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800691e:	6975      	ldr	r5, [r6, #20]
 8006920:	3f01      	subs	r7, #1
 8006922:	eef0 3a46 	vmov.f32	s7, s12
 8006926:	3510      	adds	r5, #16
 8006928:	f108 0610 	add.w	r6, r8, #16
 800692c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006930:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8006934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006938:	f104 0310 	add.w	r3, r4, #16
 800693c:	3808      	subs	r0, #8
 800693e:	ee26 7a86 	vmul.f32	s14, s13, s12
 8006942:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006946:	ed88 7a00 	vstr	s14, [r8]
 800694a:	edc8 7a01 	vstr	s15, [r8, #4]
 800694e:	edd0 6a02 	vldr	s13, [r0, #8]
 8006952:	3f01      	subs	r7, #1
 8006954:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006958:	f1a0 0008 	sub.w	r0, r0, #8
 800695c:	ed13 7a01 	vldr	s14, [r3, #-4]
 8006960:	f105 0508 	add.w	r5, r5, #8
 8006964:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8006968:	ed15 6a04 	vldr	s12, [r5, #-16]
 800696c:	edd0 5a05 	vldr	s11, [r0, #20]
 8006970:	ee36 5a85 	vadd.f32	s10, s13, s10
 8006974:	ed55 6a03 	vldr	s13, [r5, #-12]
 8006978:	f103 0308 	add.w	r3, r3, #8
 800697c:	ee35 4a87 	vadd.f32	s8, s11, s14
 8006980:	f106 0608 	add.w	r6, r6, #8
 8006984:	ee66 4a27 	vmul.f32	s9, s12, s15
 8006988:	ee77 5a65 	vsub.f32	s11, s14, s11
 800698c:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8006990:	ee34 5a85 	vadd.f32	s10, s9, s10
 8006994:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006998:	ee66 6a84 	vmul.f32	s13, s13, s8
 800699c:	ee77 7a25 	vadd.f32	s15, s14, s11
 80069a0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80069a4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80069a8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80069ac:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80069b0:	ed46 6a04 	vstr	s13, [r6, #-16]
 80069b4:	ed46 7a03 	vstr	s15, [r6, #-12]
 80069b8:	d1c9      	bne.n	800694e <arm_rfft_fast_f32+0x62>
 80069ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069be:	edd1 7a00 	vldr	s15, [r1]
 80069c2:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 80069c6:	edd1 6a01 	vldr	s13, [r1, #4]
 80069ca:	1e68      	subs	r0, r5, #1
 80069cc:	6975      	ldr	r5, [r6, #20]
 80069ce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80069d2:	00c1      	lsls	r1, r0, #3
 80069d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069d8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80069dc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80069e0:	ed82 7a00 	vstr	s14, [r2]
 80069e4:	edc2 7a01 	vstr	s15, [r2, #4]
 80069e8:	b3e0      	cbz	r0, 8006a64 <arm_rfft_fast_f32+0x178>
 80069ea:	3908      	subs	r1, #8
 80069ec:	f104 0210 	add.w	r2, r4, #16
 80069f0:	3510      	adds	r5, #16
 80069f2:	440c      	add	r4, r1
 80069f4:	f108 0110 	add.w	r1, r8, #16
 80069f8:	ed94 7a02 	vldr	s14, [r4, #8]
 80069fc:	3801      	subs	r0, #1
 80069fe:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006a02:	f1a4 0408 	sub.w	r4, r4, #8
 8006a06:	ed15 6a02 	vldr	s12, [r5, #-8]
 8006a0a:	f102 0208 	add.w	r2, r2, #8
 8006a0e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8006a12:	ed94 4a05 	vldr	s8, [r4, #20]
 8006a16:	ed12 5a03 	vldr	s10, [r2, #-12]
 8006a1a:	ee77 6a26 	vadd.f32	s13, s14, s13
 8006a1e:	ed55 5a01 	vldr	s11, [r5, #-4]
 8006a22:	f101 0108 	add.w	r1, r1, #8
 8006a26:	ee26 3a27 	vmul.f32	s6, s12, s15
 8006a2a:	f105 0508 	add.w	r5, r5, #8
 8006a2e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8006a32:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8006a36:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006a3a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006a3e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006a42:	ee77 7a05 	vadd.f32	s15, s14, s10
 8006a46:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8006a4a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006a4e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8006a52:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006a56:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006a5a:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006a5e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006a62:	d1c9      	bne.n	80069f8 <arm_rfft_fast_f32+0x10c>
 8006a64:	4630      	mov	r0, r6
 8006a66:	4641      	mov	r1, r8
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a70:	f000 bb2a 	b.w	80070c8 <arm_cfft_f32>

08006a74 <arm_cfft_radix8by2_f32>:
 8006a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a78:	ed2d 8b06 	vpush	{d8-d10}
 8006a7c:	f8b0 e000 	ldrh.w	lr, [r0]
 8006a80:	4607      	mov	r7, r0
 8006a82:	6842      	ldr	r2, [r0, #4]
 8006a84:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8006a88:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8006a8c:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8006a90:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8006a94:	f000 80af 	beq.w	8006bf6 <arm_cfft_radix8by2_f32+0x182>
 8006a98:	3310      	adds	r3, #16
 8006a9a:	3210      	adds	r2, #16
 8006a9c:	f101 0610 	add.w	r6, r1, #16
 8006aa0:	f108 0510 	add.w	r5, r8, #16
 8006aa4:	18cc      	adds	r4, r1, r3
 8006aa6:	4443      	add	r3, r8
 8006aa8:	ed55 6a04 	vldr	s13, [r5, #-16]
 8006aac:	f1be 0e01 	subs.w	lr, lr, #1
 8006ab0:	ed56 4a04 	vldr	s9, [r6, #-16]
 8006ab4:	f104 0410 	add.w	r4, r4, #16
 8006ab8:	ed55 7a02 	vldr	s15, [r5, #-8]
 8006abc:	f106 0610 	add.w	r6, r6, #16
 8006ac0:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8006ac4:	ed53 0a04 	vldr	s1, [r3, #-16]
 8006ac8:	ed13 5a03 	vldr	s10, [r3, #-12]
 8006acc:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006ad0:	ed13 3a02 	vldr	s6, [r3, #-8]
 8006ad4:	f102 0210 	add.w	r2, r2, #16
 8006ad8:	ed15 7a03 	vldr	s14, [r5, #-12]
 8006adc:	f103 0310 	add.w	r3, r3, #16
 8006ae0:	ed55 2a01 	vldr	s5, [r5, #-4]
 8006ae4:	f105 0510 	add.w	r5, r5, #16
 8006ae8:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 8006aec:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 8006af0:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8006af4:	ee33 8a83 	vadd.f32	s16, s7, s6
 8006af8:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 8006afc:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 8006b00:	ee34 0a06 	vadd.f32	s0, s8, s12
 8006b04:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 8006b08:	ee76 aa87 	vadd.f32	s21, s13, s14
 8006b0c:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 8006b10:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006b14:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 8006b18:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8006b1c:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 8006b20:	ee71 8a05 	vadd.f32	s17, s2, s10
 8006b24:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8006b28:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 8006b2c:	ee72 9a22 	vadd.f32	s19, s4, s5
 8006b30:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006b34:	ee35 5a41 	vsub.f32	s10, s10, s2
 8006b38:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 8006b3c:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 8006b40:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006b44:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 8006b48:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8006b4c:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 8006b50:	ee72 7a62 	vsub.f32	s15, s4, s5
 8006b54:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 8006b58:	ee73 2a63 	vsub.f32	s5, s6, s7
 8006b5c:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 8006b60:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8006b64:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8006b68:	ee24 3a84 	vmul.f32	s6, s9, s8
 8006b6c:	ee27 2a26 	vmul.f32	s4, s14, s13
 8006b70:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8006b74:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8006b78:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006b7c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006b80:	ee65 6a26 	vmul.f32	s13, s10, s13
 8006b84:	ee25 5a04 	vmul.f32	s10, s10, s8
 8006b88:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006b8c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8006b90:	ee33 4a02 	vadd.f32	s8, s6, s4
 8006b94:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8006b98:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 8006b9c:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 8006ba0:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8006ba4:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8006ba8:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 8006bac:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8006bb0:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8006bb4:	ee27 4a87 	vmul.f32	s8, s15, s14
 8006bb8:	ee61 5a87 	vmul.f32	s11, s3, s14
 8006bbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006bc0:	ee22 5a87 	vmul.f32	s10, s5, s14
 8006bc4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006bc8:	ee26 6a26 	vmul.f32	s12, s12, s13
 8006bcc:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8006bd0:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006bd4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006bd8:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006bdc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006be0:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 8006be4:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 8006be8:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 8006bec:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8006bf0:	f47f af5a 	bne.w	8006aa8 <arm_cfft_radix8by2_f32+0x34>
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	fa1f f48c 	uxth.w	r4, ip
 8006bfa:	4608      	mov	r0, r1
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	4621      	mov	r1, r4
 8006c00:	f000 fcbe 	bl	8007580 <arm_radix8_butterfly_f32>
 8006c04:	4640      	mov	r0, r8
 8006c06:	4621      	mov	r1, r4
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	ecbd 8b06 	vpop	{d8-d10}
 8006c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c14:	f000 bcb4 	b.w	8007580 <arm_radix8_butterfly_f32>

08006c18 <arm_cfft_radix8by4_f32>:
 8006c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	ed2d 8b06 	vpush	{d8-d10}
 8006c20:	8804      	ldrh	r4, [r0, #0]
 8006c22:	b08f      	sub	sp, #60	@ 0x3c
 8006c24:	ed91 6a00 	vldr	s12, [r1]
 8006c28:	460a      	mov	r2, r1
 8006c2a:	0864      	lsrs	r4, r4, #1
 8006c2c:	ed91 7a01 	vldr	s14, [r1, #4]
 8006c30:	9101      	str	r1, [sp, #4]
 8006c32:	00a3      	lsls	r3, r4, #2
 8006c34:	9104      	str	r1, [sp, #16]
 8006c36:	0864      	lsrs	r4, r4, #1
 8006c38:	6841      	ldr	r1, [r0, #4]
 8006c3a:	900c      	str	r0, [sp, #48]	@ 0x30
 8006c3c:	4625      	mov	r5, r4
 8006c3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c40:	f101 0408 	add.w	r4, r1, #8
 8006c44:	f101 0610 	add.w	r6, r1, #16
 8006c48:	9406      	str	r4, [sp, #24]
 8006c4a:	18d4      	adds	r4, r2, r3
 8006c4c:	1eaa      	subs	r2, r5, #2
 8006c4e:	f101 0518 	add.w	r5, r1, #24
 8006c52:	18e0      	adds	r0, r4, r3
 8006c54:	ed94 4a00 	vldr	s8, [r4]
 8006c58:	edd4 3a01 	vldr	s7, [r4, #4]
 8006c5c:	46a6      	mov	lr, r4
 8006c5e:	edd0 6a00 	vldr	s13, [r0]
 8006c62:	18c7      	adds	r7, r0, r3
 8006c64:	edd0 7a01 	vldr	s15, [r0, #4]
 8006c68:	46a0      	mov	r8, r4
 8006c6a:	ee76 5a26 	vadd.f32	s11, s12, s13
 8006c6e:	edd7 4a00 	vldr	s9, [r7]
 8006c72:	9402      	str	r4, [sp, #8]
 8006c74:	4604      	mov	r4, r0
 8006c76:	9507      	str	r5, [sp, #28]
 8006c78:	4605      	mov	r5, r0
 8006c7a:	ee75 2a84 	vadd.f32	s5, s11, s8
 8006c7e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c80:	9801      	ldr	r0, [sp, #4]
 8006c82:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006c86:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006c8a:	ed97 5a01 	vldr	s10, [r7, #4]
 8006c8e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006c92:	46bc      	mov	ip, r7
 8006c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c98:	9605      	str	r6, [sp, #20]
 8006c9a:	ee36 7a63 	vsub.f32	s14, s12, s7
 8006c9e:	9703      	str	r7, [sp, #12]
 8006ca0:	ee12 9a90 	vmov	r9, s5
 8006ca4:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8006ca8:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8006cac:	1f3e      	subs	r6, r7, #4
 8006cae:	f840 9b08 	str.w	r9, [r0], #8
 8006cb2:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8006cb6:	edde 2a01 	vldr	s5, [lr, #4]
 8006cba:	ee77 3ac4 	vsub.f32	s7, s15, s8
 8006cbe:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006cc2:	ed9c 4a01 	vldr	s8, [ip, #4]
 8006cc6:	ee36 6a22 	vadd.f32	s12, s12, s5
 8006cca:	9001      	str	r0, [sp, #4]
 8006ccc:	ee37 7a45 	vsub.f32	s14, s14, s10
 8006cd0:	9804      	ldr	r0, [sp, #16]
 8006cd2:	ee75 6a26 	vadd.f32	s13, s10, s13
 8006cd6:	f1ae 0704 	sub.w	r7, lr, #4
 8006cda:	ee36 6a04 	vadd.f32	s12, s12, s8
 8006cde:	ee33 4a45 	vsub.f32	s8, s6, s10
 8006ce2:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8006ce6:	ee33 5aa4 	vadd.f32	s10, s7, s9
 8006cea:	ed80 6a01 	vstr	s12, [r0, #4]
 8006cee:	ee14 9a10 	vmov	r9, s8
 8006cf2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006cf6:	f848 9b08 	str.w	r9, [r8], #8
 8006cfa:	ed8e 5a01 	vstr	s10, [lr, #4]
 8006cfe:	ee15 ea90 	vmov	lr, s11
 8006d02:	f844 eb08 	str.w	lr, [r4], #8
 8006d06:	ee16 ea90 	vmov	lr, s13
 8006d0a:	9408      	str	r4, [sp, #32]
 8006d0c:	462c      	mov	r4, r5
 8006d0e:	ed85 7a01 	vstr	s14, [r5, #4]
 8006d12:	9d03      	ldr	r5, [sp, #12]
 8006d14:	f84c eb08 	str.w	lr, [ip], #8
 8006d18:	edc5 7a01 	vstr	s15, [r5, #4]
 8006d1c:	0855      	lsrs	r5, r2, #1
 8006d1e:	9509      	str	r5, [sp, #36]	@ 0x24
 8006d20:	f000 8130 	beq.w	8006f84 <arm_cfft_radix8by4_f32+0x36c>
 8006d24:	9804      	ldr	r0, [sp, #16]
 8006d26:	3b08      	subs	r3, #8
 8006d28:	46ab      	mov	fp, r5
 8006d2a:	f1a4 020c 	sub.w	r2, r4, #12
 8006d2e:	f100 0510 	add.w	r5, r0, #16
 8006d32:	f101 0920 	add.w	r9, r1, #32
 8006d36:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8006d3a:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006d3e:	4433      	add	r3, r6
 8006d40:	3410      	adds	r4, #16
 8006d42:	4660      	mov	r0, ip
 8006d44:	4641      	mov	r1, r8
 8006d46:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8006d4a:	ed54 6a02 	vldr	s13, [r4, #-8]
 8006d4e:	f1bb 0b01 	subs.w	fp, fp, #1
 8006d52:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006d56:	f10a 0a08 	add.w	sl, sl, #8
 8006d5a:	edd1 7a00 	vldr	s15, [r1]
 8006d5e:	f105 0508 	add.w	r5, r5, #8
 8006d62:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8006d66:	edd0 2a00 	vldr	s5, [r0]
 8006d6a:	ed14 7a01 	vldr	s14, [r4, #-4]
 8006d6e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8006d72:	ed55 6a03 	vldr	s13, [r5, #-12]
 8006d76:	f1a2 0208 	sub.w	r2, r2, #8
 8006d7a:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8006d7e:	ed90 2a01 	vldr	s4, [r0, #4]
 8006d82:	ee36 5a87 	vadd.f32	s10, s13, s14
 8006d86:	ed91 6a01 	vldr	s12, [r1, #4]
 8006d8a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006d8e:	f109 0910 	add.w	r9, r9, #16
 8006d92:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8006d96:	f104 0408 	add.w	r4, r4, #8
 8006d9a:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8006d9e:	f10e 0e18 	add.w	lr, lr, #24
 8006da2:	ee37 3a67 	vsub.f32	s6, s14, s15
 8006da6:	f1a3 0308 	sub.w	r3, r3, #8
 8006daa:	ed45 6a04 	vstr	s13, [r5, #-16]
 8006dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006db2:	edd1 6a01 	vldr	s13, [r1, #4]
 8006db6:	ee76 1a25 	vadd.f32	s3, s12, s11
 8006dba:	edd0 4a01 	vldr	s9, [r0, #4]
 8006dbe:	ee33 3a22 	vadd.f32	s6, s6, s5
 8006dc2:	ee75 6a26 	vadd.f32	s13, s10, s13
 8006dc6:	ee35 5a46 	vsub.f32	s10, s10, s12
 8006dca:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006dce:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006dd2:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8006dd6:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006dda:	ed45 6a03 	vstr	s13, [r5, #-12]
 8006dde:	ee32 2a06 	vadd.f32	s4, s4, s12
 8006de2:	edd6 7a00 	vldr	s15, [r6]
 8006de6:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8006dea:	ed97 1a00 	vldr	s2, [r7]
 8006dee:	ee77 2a62 	vsub.f32	s5, s14, s5
 8006df2:	ed92 8a04 	vldr	s16, [r2, #16]
 8006df6:	ee71 8a27 	vadd.f32	s17, s2, s15
 8006dfa:	ed93 aa04 	vldr	s20, [r3, #16]
 8006dfe:	ed16 7a01 	vldr	s14, [r6, #-4]
 8006e02:	ee71 7a67 	vsub.f32	s15, s2, s15
 8006e06:	ed57 0a01 	vldr	s1, [r7, #-4]
 8006e0a:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8006e0e:	ee38 6a88 	vadd.f32	s12, s17, s16
 8006e12:	edd3 9a03 	vldr	s19, [r3, #12]
 8006e16:	ee30 0a87 	vadd.f32	s0, s1, s14
 8006e1a:	ed92 9a03 	vldr	s18, [r2, #12]
 8006e1e:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8006e22:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8006e26:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8006e2a:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8006e2e:	ee16 ca10 	vmov	ip, s12
 8006e32:	ee30 6a49 	vsub.f32	s12, s0, s18
 8006e36:	ee71 4a07 	vadd.f32	s9, s2, s14
 8006e3a:	f847 c908 	str.w	ip, [r7], #-8
 8006e3e:	ee34 4a29 	vadd.f32	s8, s8, s19
 8006e42:	edd2 8a03 	vldr	s17, [r2, #12]
 8006e46:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8006e4a:	ed93 8a03 	vldr	s16, [r3, #12]
 8006e4e:	ee71 0a47 	vsub.f32	s1, s2, s14
 8006e52:	ee30 0a28 	vadd.f32	s0, s0, s17
 8006e56:	ee39 1a67 	vsub.f32	s2, s18, s15
 8006e5a:	ee36 6a69 	vsub.f32	s12, s12, s19
 8006e5e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8006e62:	ee75 5aca 	vsub.f32	s11, s11, s20
 8006e66:	ed87 0a01 	vstr	s0, [r7, #4]
 8006e6a:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8006e6e:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8006e72:	ee21 8a80 	vmul.f32	s16, s3, s0
 8006e76:	ee23 7a26 	vmul.f32	s14, s6, s13
 8006e7a:	ee64 7a26 	vmul.f32	s15, s8, s13
 8006e7e:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8006e82:	ee24 4a00 	vmul.f32	s8, s8, s0
 8006e86:	ee23 3a00 	vmul.f32	s6, s6, s0
 8006e8a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8006e8e:	ee24 0a80 	vmul.f32	s0, s9, s0
 8006e92:	ee38 7a07 	vadd.f32	s14, s16, s14
 8006e96:	ee76 6a84 	vadd.f32	s13, s13, s8
 8006e9a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006e9e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006ea2:	ee17 ca10 	vmov	ip, s14
 8006ea6:	f841 cb08 	str.w	ip, [r1], #8
 8006eaa:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006eae:	ed82 0a04 	vstr	s0, [r2, #16]
 8006eb2:	edc2 6a03 	vstr	s13, [r2, #12]
 8006eb6:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 8006eba:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 8006ebe:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8006ec2:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8006ec6:	ee65 4a27 	vmul.f32	s9, s10, s15
 8006eca:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8006ece:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8006ed2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006ed6:	ee25 5a26 	vmul.f32	s10, s10, s13
 8006eda:	ee66 6a26 	vmul.f32	s13, s12, s13
 8006ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ee2:	ee34 6a24 	vadd.f32	s12, s8, s9
 8006ee6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8006eea:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006eee:	ee17 ca90 	vmov	ip, s15
 8006ef2:	ed04 6a04 	vstr	s12, [r4, #-16]
 8006ef6:	ed04 5a03 	vstr	s10, [r4, #-12]
 8006efa:	f846 c908 	str.w	ip, [r6], #-8
 8006efe:	edc6 6a01 	vstr	s13, [r6, #4]
 8006f02:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 8006f06:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 8006f0a:	ee62 5a27 	vmul.f32	s11, s4, s15
 8006f0e:	ee22 6a87 	vmul.f32	s12, s5, s14
 8006f12:	ee22 2a07 	vmul.f32	s4, s4, s14
 8006f16:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8006f1a:	ee61 6a07 	vmul.f32	s13, s2, s14
 8006f1e:	ee20 7a87 	vmul.f32	s14, s1, s14
 8006f22:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006f26:	ee61 7a27 	vmul.f32	s15, s2, s15
 8006f2a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8006f2e:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8006f32:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8006f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f3a:	ee16 ca10 	vmov	ip, s12
 8006f3e:	f840 cb08 	str.w	ip, [r0], #8
 8006f42:	ed40 2a01 	vstr	s5, [r0, #-4]
 8006f46:	edc3 0a04 	vstr	s1, [r3, #16]
 8006f4a:	edc3 7a03 	vstr	s15, [r3, #12]
 8006f4e:	f47f aefc 	bne.w	8006d4a <arm_cfft_radix8by4_f32+0x132>
 8006f52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f54:	9805      	ldr	r0, [sp, #20]
 8006f56:	00cb      	lsls	r3, r1, #3
 8006f58:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8006f5c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006f60:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006f64:	4498      	add	r8, r3
 8006f66:	449c      	add	ip, r3
 8006f68:	9105      	str	r1, [sp, #20]
 8006f6a:	9901      	ldr	r1, [sp, #4]
 8006f6c:	4419      	add	r1, r3
 8006f6e:	9101      	str	r1, [sp, #4]
 8006f70:	9906      	ldr	r1, [sp, #24]
 8006f72:	4419      	add	r1, r3
 8006f74:	9106      	str	r1, [sp, #24]
 8006f76:	9908      	ldr	r1, [sp, #32]
 8006f78:	4419      	add	r1, r3
 8006f7a:	9b07      	ldr	r3, [sp, #28]
 8006f7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f80:	9108      	str	r1, [sp, #32]
 8006f82:	9307      	str	r3, [sp, #28]
 8006f84:	9a01      	ldr	r2, [sp, #4]
 8006f86:	2304      	movs	r3, #4
 8006f88:	9e08      	ldr	r6, [sp, #32]
 8006f8a:	edd2 6a00 	vldr	s13, [r2]
 8006f8e:	ed96 4a00 	vldr	s8, [r6]
 8006f92:	edd8 7a00 	vldr	s15, [r8]
 8006f96:	ee36 6a84 	vadd.f32	s12, s13, s8
 8006f9a:	eddc 2a00 	vldr	s5, [ip]
 8006f9e:	ed96 7a01 	vldr	s14, [r6, #4]
 8006fa2:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8006fa6:	edd2 6a01 	vldr	s13, [r2, #4]
 8006faa:	ee76 4a27 	vadd.f32	s9, s12, s15
 8006fae:	ed98 2a01 	vldr	s4, [r8, #4]
 8006fb2:	ee76 5a87 	vadd.f32	s11, s13, s14
 8006fb6:	ed9c 5a01 	vldr	s10, [ip, #4]
 8006fba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006fbe:	9d05      	ldr	r5, [sp, #20]
 8006fc0:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8006fc4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8006fc8:	ee72 3a04 	vadd.f32	s7, s4, s8
 8006fcc:	9804      	ldr	r0, [sp, #16]
 8006fce:	ee77 4a67 	vsub.f32	s9, s14, s15
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	edc2 6a00 	vstr	s13, [r2]
 8006fd8:	ee76 6a67 	vsub.f32	s13, s12, s15
 8006fdc:	ed98 3a01 	vldr	s6, [r8, #4]
 8006fe0:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8006fe4:	eddc 1a01 	vldr	s3, [ip, #4]
 8006fe8:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8006fec:	ee35 3a83 	vadd.f32	s6, s11, s6
 8006ff0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006ff4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006ff8:	ee73 5a21 	vadd.f32	s11, s6, s3
 8006ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007000:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007004:	edc2 5a01 	vstr	s11, [r2, #4]
 8007008:	ee35 5a04 	vadd.f32	s10, s10, s8
 800700c:	9a06      	ldr	r2, [sp, #24]
 800700e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007012:	edd2 7a00 	vldr	s15, [r2]
 8007016:	edd2 5a01 	vldr	s11, [r2, #4]
 800701a:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800701e:	ee63 3aa5 	vmul.f32	s7, s7, s11
 8007022:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8007026:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800702a:	ee77 7a62 	vsub.f32	s15, s14, s5
 800702e:	ee74 5a25 	vadd.f32	s11, s8, s11
 8007032:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8007036:	edc8 5a00 	vstr	s11, [r8]
 800703a:	edc8 4a01 	vstr	s9, [r8, #4]
 800703e:	edd5 4a01 	vldr	s9, [r5, #4]
 8007042:	ed95 7a00 	vldr	s14, [r5]
 8007046:	9d07      	ldr	r5, [sp, #28]
 8007048:	ee66 5a87 	vmul.f32	s11, s13, s14
 800704c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8007050:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007054:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007058:	ee77 6a66 	vsub.f32	s13, s14, s13
 800705c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007060:	edc6 6a01 	vstr	s13, [r6, #4]
 8007064:	ed86 6a00 	vstr	s12, [r6]
 8007068:	ed95 6a01 	vldr	s12, [r5, #4]
 800706c:	ed95 7a00 	vldr	s14, [r5]
 8007070:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007072:	ee65 6a07 	vmul.f32	s13, s10, s14
 8007076:	ee27 7a87 	vmul.f32	s14, s15, s14
 800707a:	ee25 5a06 	vmul.f32	s10, s10, s12
 800707e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007082:	ee37 5a45 	vsub.f32	s10, s14, s10
 8007086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800708a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800708e:	edcc 7a00 	vstr	s15, [ip]
 8007092:	6872      	ldr	r2, [r6, #4]
 8007094:	f000 fa74 	bl	8007580 <arm_radix8_butterfly_f32>
 8007098:	9802      	ldr	r0, [sp, #8]
 800709a:	4621      	mov	r1, r4
 800709c:	6872      	ldr	r2, [r6, #4]
 800709e:	2304      	movs	r3, #4
 80070a0:	f000 fa6e 	bl	8007580 <arm_radix8_butterfly_f32>
 80070a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80070a6:	4621      	mov	r1, r4
 80070a8:	6872      	ldr	r2, [r6, #4]
 80070aa:	2304      	movs	r3, #4
 80070ac:	f000 fa68 	bl	8007580 <arm_radix8_butterfly_f32>
 80070b0:	9803      	ldr	r0, [sp, #12]
 80070b2:	4621      	mov	r1, r4
 80070b4:	6872      	ldr	r2, [r6, #4]
 80070b6:	2304      	movs	r3, #4
 80070b8:	b00f      	add	sp, #60	@ 0x3c
 80070ba:	ecbd 8b06 	vpop	{d8-d10}
 80070be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c2:	f000 ba5d 	b.w	8007580 <arm_radix8_butterfly_f32>
 80070c6:	bf00      	nop

080070c8 <arm_cfft_f32>:
 80070c8:	2a01      	cmp	r2, #1
 80070ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ce:	4606      	mov	r6, r0
 80070d0:	4617      	mov	r7, r2
 80070d2:	460c      	mov	r4, r1
 80070d4:	4698      	mov	r8, r3
 80070d6:	8805      	ldrh	r5, [r0, #0]
 80070d8:	d053      	beq.n	8007182 <arm_cfft_f32+0xba>
 80070da:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80070de:	d04b      	beq.n	8007178 <arm_cfft_f32+0xb0>
 80070e0:	d916      	bls.n	8007110 <arm_cfft_f32+0x48>
 80070e2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80070e6:	d01a      	beq.n	800711e <arm_cfft_f32+0x56>
 80070e8:	d95a      	bls.n	80071a0 <arm_cfft_f32+0xd8>
 80070ea:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80070ee:	d043      	beq.n	8007178 <arm_cfft_f32+0xb0>
 80070f0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80070f4:	d105      	bne.n	8007102 <arm_cfft_f32+0x3a>
 80070f6:	4620      	mov	r0, r4
 80070f8:	4629      	mov	r1, r5
 80070fa:	6872      	ldr	r2, [r6, #4]
 80070fc:	2301      	movs	r3, #1
 80070fe:	f000 fa3f 	bl	8007580 <arm_radix8_butterfly_f32>
 8007102:	f1b8 0f00 	cmp.w	r8, #0
 8007106:	d111      	bne.n	800712c <arm_cfft_f32+0x64>
 8007108:	2f01      	cmp	r7, #1
 800710a:	d016      	beq.n	800713a <arm_cfft_f32+0x72>
 800710c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007110:	2d20      	cmp	r5, #32
 8007112:	d031      	beq.n	8007178 <arm_cfft_f32+0xb0>
 8007114:	d948      	bls.n	80071a8 <arm_cfft_f32+0xe0>
 8007116:	2d40      	cmp	r5, #64	@ 0x40
 8007118:	d0ed      	beq.n	80070f6 <arm_cfft_f32+0x2e>
 800711a:	2d80      	cmp	r5, #128	@ 0x80
 800711c:	d1f1      	bne.n	8007102 <arm_cfft_f32+0x3a>
 800711e:	4630      	mov	r0, r6
 8007120:	4621      	mov	r1, r4
 8007122:	f7ff fca7 	bl	8006a74 <arm_cfft_radix8by2_f32>
 8007126:	f1b8 0f00 	cmp.w	r8, #0
 800712a:	d0ed      	beq.n	8007108 <arm_cfft_f32+0x40>
 800712c:	4620      	mov	r0, r4
 800712e:	89b1      	ldrh	r1, [r6, #12]
 8007130:	68b2      	ldr	r2, [r6, #8]
 8007132:	f7f9 f8d1 	bl	80002d8 <arm_bitreversal_32>
 8007136:	2f01      	cmp	r7, #1
 8007138:	d1e8      	bne.n	800710c <arm_cfft_f32+0x44>
 800713a:	ee07 5a90 	vmov	s15, r5
 800713e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007142:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007146:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800714a:	2d00      	cmp	r5, #0
 800714c:	d0de      	beq.n	800710c <arm_cfft_f32+0x44>
 800714e:	f104 0108 	add.w	r1, r4, #8
 8007152:	2300      	movs	r3, #0
 8007154:	ed11 7a02 	vldr	s14, [r1, #-8]
 8007158:	3301      	adds	r3, #1
 800715a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800715e:	3108      	adds	r1, #8
 8007160:	429d      	cmp	r5, r3
 8007162:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007166:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800716a:	ed01 7a04 	vstr	s14, [r1, #-16]
 800716e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007172:	d1ef      	bne.n	8007154 <arm_cfft_f32+0x8c>
 8007174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007178:	4630      	mov	r0, r6
 800717a:	4621      	mov	r1, r4
 800717c:	f7ff fd4c 	bl	8006c18 <arm_cfft_radix8by4_f32>
 8007180:	e7bf      	b.n	8007102 <arm_cfft_f32+0x3a>
 8007182:	b1a5      	cbz	r5, 80071ae <arm_cfft_f32+0xe6>
 8007184:	f101 030c 	add.w	r3, r1, #12
 8007188:	2200      	movs	r2, #0
 800718a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800718e:	3201      	adds	r2, #1
 8007190:	3308      	adds	r3, #8
 8007192:	eef1 7a67 	vneg.f32	s15, s15
 8007196:	4295      	cmp	r5, r2
 8007198:	ed43 7a04 	vstr	s15, [r3, #-16]
 800719c:	d1f5      	bne.n	800718a <arm_cfft_f32+0xc2>
 800719e:	e79c      	b.n	80070da <arm_cfft_f32+0x12>
 80071a0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80071a4:	d0a7      	beq.n	80070f6 <arm_cfft_f32+0x2e>
 80071a6:	e7ac      	b.n	8007102 <arm_cfft_f32+0x3a>
 80071a8:	2d10      	cmp	r5, #16
 80071aa:	d0b8      	beq.n	800711e <arm_cfft_f32+0x56>
 80071ac:	e7a9      	b.n	8007102 <arm_cfft_f32+0x3a>
 80071ae:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80071b2:	d896      	bhi.n	80070e2 <arm_cfft_f32+0x1a>
 80071b4:	e7ac      	b.n	8007110 <arm_cfft_f32+0x48>
 80071b6:	bf00      	nop

080071b8 <arm_fir_init_f32>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	9e06      	ldr	r6, [sp, #24]
 80071bc:	f06f 4440 	mvn.w	r4, #3221225472	@ 0xc0000000
 80071c0:	460f      	mov	r7, r1
 80071c2:	6082      	str	r2, [r0, #8]
 80071c4:	4434      	add	r4, r6
 80071c6:	4605      	mov	r5, r0
 80071c8:	461e      	mov	r6, r3
 80071ca:	8007      	strh	r7, [r0, #0]
 80071cc:	19e2      	adds	r2, r4, r7
 80071ce:	2100      	movs	r1, #0
 80071d0:	4618      	mov	r0, r3
 80071d2:	0092      	lsls	r2, r2, #2
 80071d4:	f000 fcb4 	bl	8007b40 <memset>
 80071d8:	606e      	str	r6, [r5, #4]
 80071da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071dc <arm_biquad_cascade_df1_init_f32>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4604      	mov	r4, r0
 80071e0:	4608      	mov	r0, r1
 80071e2:	461d      	mov	r5, r3
 80071e4:	2100      	movs	r1, #0
 80071e6:	60a2      	str	r2, [r4, #8]
 80071e8:	0102      	lsls	r2, r0, #4
 80071ea:	6020      	str	r0, [r4, #0]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fca7 	bl	8007b40 <memset>
 80071f2:	6065      	str	r5, [r4, #4]
 80071f4:	bd38      	pop	{r3, r4, r5, pc}
 80071f6:	bf00      	nop

080071f8 <arm_biquad_cascade_df1_f32>:
 80071f8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80071fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007200:	4696      	mov	lr, r2
 8007202:	6886      	ldr	r6, [r0, #8]
 8007204:	6845      	ldr	r5, [r0, #4]
 8007206:	ea4f 180c 	mov.w	r8, ip, lsl #4
 800720a:	f003 0203 	and.w	r2, r3, #3
 800720e:	3614      	adds	r6, #20
 8007210:	3510      	adds	r5, #16
 8007212:	6807      	ldr	r7, [r0, #0]
 8007214:	eb0e 0908 	add.w	r9, lr, r8
 8007218:	ed56 3a05 	vldr	s7, [r6, #-20]	@ 0xffffffec
 800721c:	ed16 3a04 	vldr	s6, [r6, #-16]
 8007220:	ed56 2a03 	vldr	s5, [r6, #-12]
 8007224:	ed16 2a02 	vldr	s4, [r6, #-8]
 8007228:	ed56 1a01 	vldr	s3, [r6, #-4]
 800722c:	ed15 1a04 	vldr	s2, [r5, #-16]
 8007230:	ed55 0a03 	vldr	s1, [r5, #-12]
 8007234:	ed55 7a02 	vldr	s15, [r5, #-8]
 8007238:	ed15 6a01 	vldr	s12, [r5, #-4]
 800723c:	f1bc 0f00 	cmp.w	ip, #0
 8007240:	f000 80a3 	beq.w	800738a <arm_biquad_cascade_df1_f32+0x192>
 8007244:	f101 0010 	add.w	r0, r1, #16
 8007248:	f10e 0310 	add.w	r3, lr, #16
 800724c:	4664      	mov	r4, ip
 800724e:	ed10 4a04 	vldr	s8, [r0, #-16]
 8007252:	ee23 7a01 	vmul.f32	s14, s6, s2
 8007256:	ee62 0aa0 	vmul.f32	s1, s5, s1
 800725a:	3c01      	subs	r4, #1
 800725c:	ee23 5a84 	vmul.f32	s10, s7, s8
 8007260:	f100 0010 	add.w	r0, r0, #16
 8007264:	ee22 0a27 	vmul.f32	s0, s4, s15
 8007268:	f103 0310 	add.w	r3, r3, #16
 800726c:	ee21 6a86 	vmul.f32	s12, s3, s12
 8007270:	ee75 4a07 	vadd.f32	s9, s10, s14
 8007274:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8007278:	ee63 5a04 	vmul.f32	s11, s6, s8
 800727c:	ee34 7aa0 	vadd.f32	s14, s9, s1
 8007280:	ee22 1a81 	vmul.f32	s2, s5, s2
 8007284:	ee22 4a84 	vmul.f32	s8, s5, s8
 8007288:	ee37 7a00 	vadd.f32	s14, s14, s0
 800728c:	ee37 6a06 	vadd.f32	s12, s14, s12
 8007290:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 8007294:	ee22 7a06 	vmul.f32	s14, s4, s12
 8007298:	ed50 7a07 	vldr	s15, [r0, #-28]	@ 0xffffffe4
 800729c:	ee21 6a86 	vmul.f32	s12, s3, s12
 80072a0:	ee23 5aa7 	vmul.f32	s10, s7, s15
 80072a4:	ee23 0a27 	vmul.f32	s0, s6, s15
 80072a8:	ee62 4aa7 	vmul.f32	s9, s5, s15
 80072ac:	ee35 5a25 	vadd.f32	s10, s10, s11
 80072b0:	ee75 5a01 	vadd.f32	s11, s10, s2
 80072b4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80072b8:	ee75 6aa6 	vadd.f32	s13, s11, s13
 80072bc:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 80072c0:	ee62 7a26 	vmul.f32	s15, s4, s13
 80072c4:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 80072c8:	ee61 5aa6 	vmul.f32	s11, s3, s13
 80072cc:	ee23 5aa0 	vmul.f32	s10, s7, s1
 80072d0:	ee23 7a20 	vmul.f32	s14, s6, s1
 80072d4:	ee35 5a00 	vadd.f32	s10, s10, s0
 80072d8:	ee75 6a04 	vadd.f32	s13, s10, s8
 80072dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80072e0:	ee36 6a86 	vadd.f32	s12, s13, s12
 80072e4:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 80072e8:	ee62 7a06 	vmul.f32	s15, s4, s12
 80072ec:	ed10 1a05 	vldr	s2, [r0, #-20]	@ 0xffffffec
 80072f0:	ee63 6a81 	vmul.f32	s13, s7, s2
 80072f4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80072f8:	ee37 7a24 	vadd.f32	s14, s14, s9
 80072fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007300:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007304:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8007308:	d1a1      	bne.n	800724e <arm_biquad_cascade_df1_f32+0x56>
 800730a:	4441      	add	r1, r8
 800730c:	4648      	mov	r0, r9
 800730e:	b39a      	cbz	r2, 8007378 <arm_biquad_cascade_df1_f32+0x180>
 8007310:	4613      	mov	r3, r2
 8007312:	e003      	b.n	800731c <arm_biquad_cascade_df1_f32+0x124>
 8007314:	eef0 7a45 	vmov.f32	s15, s10
 8007318:	eeb0 1a47 	vmov.f32	s2, s14
 800731c:	ecb1 7a01 	vldmia	r1!, {s14}
 8007320:	ee63 4a01 	vmul.f32	s9, s6, s2
 8007324:	ee62 5aa0 	vmul.f32	s11, s5, s1
 8007328:	3b01      	subs	r3, #1
 800732a:	ee23 4a87 	vmul.f32	s8, s7, s14
 800732e:	ee22 5a27 	vmul.f32	s10, s4, s15
 8007332:	ee61 6a86 	vmul.f32	s13, s3, s12
 8007336:	ee74 4a24 	vadd.f32	s9, s8, s9
 800733a:	eef0 0a41 	vmov.f32	s1, s2
 800733e:	eeb0 6a67 	vmov.f32	s12, s15
 8007342:	ee74 4aa5 	vadd.f32	s9, s9, s11
 8007346:	ee34 5a85 	vadd.f32	s10, s9, s10
 800734a:	ee35 5a26 	vadd.f32	s10, s10, s13
 800734e:	eca0 5a01 	vstmia	r0!, {s10}
 8007352:	d1df      	bne.n	8007314 <arm_biquad_cascade_df1_f32+0x11c>
 8007354:	3f01      	subs	r7, #1
 8007356:	ed05 7a04 	vstr	s14, [r5, #-16]
 800735a:	ed05 1a03 	vstr	s2, [r5, #-12]
 800735e:	f106 0614 	add.w	r6, r6, #20
 8007362:	ed05 5a02 	vstr	s10, [r5, #-8]
 8007366:	4671      	mov	r1, lr
 8007368:	ed45 7a01 	vstr	s15, [r5, #-4]
 800736c:	f105 0510 	add.w	r5, r5, #16
 8007370:	f47f af52 	bne.w	8007218 <arm_biquad_cascade_df1_f32+0x20>
 8007374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007378:	eeb0 5a67 	vmov.f32	s10, s15
 800737c:	eeb0 7a41 	vmov.f32	s14, s2
 8007380:	eef0 7a46 	vmov.f32	s15, s12
 8007384:	eeb0 1a60 	vmov.f32	s2, s1
 8007388:	e7e4      	b.n	8007354 <arm_biquad_cascade_df1_f32+0x15c>
 800738a:	4670      	mov	r0, lr
 800738c:	e7bf      	b.n	800730e <arm_biquad_cascade_df1_f32+0x116>
 800738e:	bf00      	nop

08007390 <arm_scale_f32>:
 8007390:	b470      	push	{r4, r5, r6}
 8007392:	0896      	lsrs	r6, r2, #2
 8007394:	d025      	beq.n	80073e2 <arm_scale_f32+0x52>
 8007396:	f100 0410 	add.w	r4, r0, #16
 800739a:	f101 0310 	add.w	r3, r1, #16
 800739e:	4635      	mov	r5, r6
 80073a0:	ed14 6a04 	vldr	s12, [r4, #-16]
 80073a4:	3d01      	subs	r5, #1
 80073a6:	ed54 6a03 	vldr	s13, [r4, #-12]
 80073aa:	f103 0310 	add.w	r3, r3, #16
 80073ae:	ed14 7a02 	vldr	s14, [r4, #-8]
 80073b2:	ee26 6a00 	vmul.f32	s12, s12, s0
 80073b6:	ed54 7a01 	vldr	s15, [r4, #-4]
 80073ba:	ee66 6a80 	vmul.f32	s13, s13, s0
 80073be:	ee27 7a00 	vmul.f32	s14, s14, s0
 80073c2:	f104 0410 	add.w	r4, r4, #16
 80073c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80073ca:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 80073ce:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 80073d2:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 80073d6:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 80073da:	d1e1      	bne.n	80073a0 <arm_scale_f32+0x10>
 80073dc:	0136      	lsls	r6, r6, #4
 80073de:	4430      	add	r0, r6
 80073e0:	4431      	add	r1, r6
 80073e2:	f012 0203 	ands.w	r2, r2, #3
 80073e6:	d007      	beq.n	80073f8 <arm_scale_f32+0x68>
 80073e8:	ecf0 7a01 	vldmia	r0!, {s15}
 80073ec:	3a01      	subs	r2, #1
 80073ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80073f2:	ece1 7a01 	vstmia	r1!, {s15}
 80073f6:	d1f7      	bne.n	80073e8 <arm_scale_f32+0x58>
 80073f8:	bc70      	pop	{r4, r5, r6}
 80073fa:	4770      	bx	lr

080073fc <arm_offset_f32>:
 80073fc:	b470      	push	{r4, r5, r6}
 80073fe:	0896      	lsrs	r6, r2, #2
 8007400:	d025      	beq.n	800744e <arm_offset_f32+0x52>
 8007402:	f100 0410 	add.w	r4, r0, #16
 8007406:	f101 0310 	add.w	r3, r1, #16
 800740a:	4635      	mov	r5, r6
 800740c:	ed14 6a04 	vldr	s12, [r4, #-16]
 8007410:	3d01      	subs	r5, #1
 8007412:	ed54 6a03 	vldr	s13, [r4, #-12]
 8007416:	f103 0310 	add.w	r3, r3, #16
 800741a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800741e:	ee36 6a00 	vadd.f32	s12, s12, s0
 8007422:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007426:	ee76 6a80 	vadd.f32	s13, s13, s0
 800742a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800742e:	f104 0410 	add.w	r4, r4, #16
 8007432:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007436:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 800743a:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800743e:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 8007442:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8007446:	d1e1      	bne.n	800740c <arm_offset_f32+0x10>
 8007448:	0136      	lsls	r6, r6, #4
 800744a:	4430      	add	r0, r6
 800744c:	4431      	add	r1, r6
 800744e:	f012 0203 	ands.w	r2, r2, #3
 8007452:	d007      	beq.n	8007464 <arm_offset_f32+0x68>
 8007454:	ecf0 7a01 	vldmia	r0!, {s15}
 8007458:	3a01      	subs	r2, #1
 800745a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800745e:	ece1 7a01 	vstmia	r1!, {s15}
 8007462:	d1f7      	bne.n	8007454 <arm_offset_f32+0x58>
 8007464:	bc70      	pop	{r4, r5, r6}
 8007466:	4770      	bx	lr

08007468 <arm_mult_f32>:
 8007468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800746a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800746e:	d033      	beq.n	80074d8 <arm_mult_f32+0x70>
 8007470:	f100 0610 	add.w	r6, r0, #16
 8007474:	f101 0510 	add.w	r5, r1, #16
 8007478:	f102 0410 	add.w	r4, r2, #16
 800747c:	4677      	mov	r7, lr
 800747e:	ed16 7a04 	vldr	s14, [r6, #-16]
 8007482:	3f01      	subs	r7, #1
 8007484:	ed15 6a04 	vldr	s12, [r5, #-16]
 8007488:	f106 0610 	add.w	r6, r6, #16
 800748c:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8007490:	f105 0510 	add.w	r5, r5, #16
 8007494:	ee27 6a06 	vmul.f32	s12, s14, s12
 8007498:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 800749c:	ed16 7a07 	vldr	s14, [r6, #-28]	@ 0xffffffe4
 80074a0:	f104 0410 	add.w	r4, r4, #16
 80074a4:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 80074a8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80074ac:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 80074b0:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 80074b4:	ee27 7a25 	vmul.f32	s14, s14, s11
 80074b8:	ed15 6a05 	vldr	s12, [r5, #-20]	@ 0xffffffec
 80074bc:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 80074c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80074c4:	ed04 7a07 	vstr	s14, [r4, #-28]	@ 0xffffffe4
 80074c8:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80074cc:	d1d7      	bne.n	800747e <arm_mult_f32+0x16>
 80074ce:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80074d2:	4420      	add	r0, r4
 80074d4:	4421      	add	r1, r4
 80074d6:	4422      	add	r2, r4
 80074d8:	f013 0303 	ands.w	r3, r3, #3
 80074dc:	d009      	beq.n	80074f2 <arm_mult_f32+0x8a>
 80074de:	ecf0 7a01 	vldmia	r0!, {s15}
 80074e2:	3b01      	subs	r3, #1
 80074e4:	ecb1 7a01 	vldmia	r1!, {s14}
 80074e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074ec:	ece2 7a01 	vstmia	r2!, {s15}
 80074f0:	d1f5      	bne.n	80074de <arm_mult_f32+0x76>
 80074f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074f4 <arm_add_f32>:
 80074f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f6:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80074fa:	d033      	beq.n	8007564 <arm_add_f32+0x70>
 80074fc:	f100 0610 	add.w	r6, r0, #16
 8007500:	f101 0510 	add.w	r5, r1, #16
 8007504:	f102 0410 	add.w	r4, r2, #16
 8007508:	4677      	mov	r7, lr
 800750a:	ed16 7a03 	vldr	s14, [r6, #-12]
 800750e:	3f01      	subs	r7, #1
 8007510:	ed56 7a02 	vldr	s15, [r6, #-8]
 8007514:	f105 0510 	add.w	r5, r5, #16
 8007518:	ed15 6a07 	vldr	s12, [r5, #-28]	@ 0xffffffe4
 800751c:	f106 0610 	add.w	r6, r6, #16
 8007520:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 8007524:	f104 0410 	add.w	r4, r4, #16
 8007528:	ed15 5a05 	vldr	s10, [r5, #-20]	@ 0xffffffec
 800752c:	ee37 6a06 	vadd.f32	s12, s14, s12
 8007530:	ed55 5a08 	vldr	s11, [r5, #-32]	@ 0xffffffe0
 8007534:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007538:	ed16 7a05 	vldr	s14, [r6, #-20]	@ 0xffffffec
 800753c:	ed56 7a08 	vldr	s15, [r6, #-32]	@ 0xffffffe0
 8007540:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007544:	ed04 6a07 	vstr	s12, [r4, #-28]	@ 0xffffffe4
 8007548:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800754c:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 8007550:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 8007554:	ed44 7a08 	vstr	s15, [r4, #-32]	@ 0xffffffe0
 8007558:	d1d7      	bne.n	800750a <arm_add_f32+0x16>
 800755a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800755e:	4420      	add	r0, r4
 8007560:	4421      	add	r1, r4
 8007562:	4422      	add	r2, r4
 8007564:	f013 0303 	ands.w	r3, r3, #3
 8007568:	d009      	beq.n	800757e <arm_add_f32+0x8a>
 800756a:	ecf0 7a01 	vldmia	r0!, {s15}
 800756e:	3b01      	subs	r3, #1
 8007570:	ecb1 7a01 	vldmia	r1!, {s14}
 8007574:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007578:	ece2 7a01 	vstmia	r2!, {s15}
 800757c:	d1f5      	bne.n	800756a <arm_add_f32+0x76>
 800757e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007580 <arm_radix8_butterfly_f32>:
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	469e      	mov	lr, r3
 8007586:	1d03      	adds	r3, r0, #4
 8007588:	4683      	mov	fp, r0
 800758a:	468a      	mov	sl, r1
 800758c:	4688      	mov	r8, r1
 800758e:	469c      	mov	ip, r3
 8007590:	ed2d 8b10 	vpush	{d8-d15}
 8007594:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 80078a8 <arm_radix8_butterfly_f32+0x328>
 8007598:	b09f      	sub	sp, #124	@ 0x7c
 800759a:	921c      	str	r2, [sp, #112]	@ 0x70
 800759c:	931d      	str	r3, [sp, #116]	@ 0x74
 800759e:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 80075a2:	f04f 0900 	mov.w	r9, #0
 80075a6:	461a      	mov	r2, r3
 80075a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80075aa:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80075ae:	0051      	lsls	r1, r2, #1
 80075b0:	4608      	mov	r0, r1
 80075b2:	9103      	str	r1, [sp, #12]
 80075b4:	00d1      	lsls	r1, r2, #3
 80075b6:	1885      	adds	r5, r0, r2
 80075b8:	0110      	lsls	r0, r2, #4
 80075ba:	eb0b 0601 	add.w	r6, fp, r1
 80075be:	9101      	str	r1, [sp, #4]
 80075c0:	18ac      	adds	r4, r5, r2
 80075c2:	9002      	str	r0, [sp, #8]
 80075c4:	1877      	adds	r7, r6, r1
 80075c6:	4611      	mov	r1, r2
 80075c8:	4422      	add	r2, r4
 80075ca:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 80075ce:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 80075d2:	1850      	adds	r0, r2, r1
 80075d4:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80075d8:	4401      	add	r1, r0
 80075da:	3204      	adds	r2, #4
 80075dc:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 80075e0:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 80075e4:	3104      	adds	r1, #4
 80075e6:	ed1c 7a01 	vldr	s14, [ip, #-4]
 80075ea:	44c1      	add	r9, r8
 80075ec:	edd4 6a00 	vldr	s13, [r4]
 80075f0:	ed97 6a00 	vldr	s12, [r7]
 80075f4:	45ca      	cmp	sl, r9
 80075f6:	edd0 7a00 	vldr	s15, [r0]
 80075fa:	ee37 5a66 	vsub.f32	s10, s14, s13
 80075fe:	edd6 5a00 	vldr	s11, [r6]
 8007602:	ee37 2a26 	vadd.f32	s4, s14, s13
 8007606:	ee76 2a67 	vsub.f32	s5, s12, s15
 800760a:	edd5 6a00 	vldr	s13, [r5]
 800760e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007612:	ee76 4a27 	vadd.f32	s9, s12, s15
 8007616:	ed11 6a01 	vldr	s12, [r1, #-4]
 800761a:	ee75 1a87 	vadd.f32	s3, s11, s14
 800761e:	ee36 4a86 	vadd.f32	s8, s13, s12
 8007622:	ee72 7a24 	vadd.f32	s15, s4, s9
 8007626:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800762a:	ee76 5ac6 	vsub.f32	s11, s13, s12
 800762e:	ee31 6a84 	vadd.f32	s12, s3, s8
 8007632:	ee32 2a64 	vsub.f32	s4, s4, s9
 8007636:	ee77 6a65 	vsub.f32	s13, s14, s11
 800763a:	ee77 4a86 	vadd.f32	s9, s15, s12
 800763e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007642:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007646:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800764a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800764e:	edc4 7a00 	vstr	s15, [r4]
 8007652:	ee66 6a89 	vmul.f32	s13, s13, s18
 8007656:	edd6 5a01 	vldr	s11, [r6, #4]
 800765a:	ee27 6a09 	vmul.f32	s12, s14, s18
 800765e:	edd5 3a01 	vldr	s7, [r5, #4]
 8007662:	ed92 4a00 	vldr	s8, [r2]
 8007666:	ee35 1a26 	vadd.f32	s2, s10, s13
 800766a:	edd1 4a00 	vldr	s9, [r1]
 800766e:	ee75 6a66 	vsub.f32	s13, s10, s13
 8007672:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8007676:	ed94 0a01 	vldr	s0, [r4, #4]
 800767a:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800767e:	ed9c 7a00 	vldr	s14, [ip]
 8007682:	edd0 0a01 	vldr	s1, [r0, #4]
 8007686:	ee35 4a84 	vadd.f32	s8, s11, s8
 800768a:	ed97 5a01 	vldr	s10, [r7, #4]
 800768e:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8007692:	ee73 5a27 	vadd.f32	s11, s6, s15
 8007696:	ee77 3a00 	vadd.f32	s7, s14, s0
 800769a:	ee33 3a67 	vsub.f32	s6, s6, s15
 800769e:	ee37 7a40 	vsub.f32	s14, s14, s0
 80076a2:	ee35 0a20 	vadd.f32	s0, s10, s1
 80076a6:	ee63 7a09 	vmul.f32	s15, s6, s18
 80076aa:	ee35 5a60 	vsub.f32	s10, s10, s1
 80076ae:	ee33 3a80 	vadd.f32	s6, s7, s0
 80076b2:	ee74 0a24 	vadd.f32	s1, s8, s9
 80076b6:	ee65 5a89 	vmul.f32	s11, s11, s18
 80076ba:	ee74 4a64 	vsub.f32	s9, s8, s9
 80076be:	ee33 4ac0 	vsub.f32	s8, s7, s0
 80076c2:	ee75 3a25 	vadd.f32	s7, s10, s11
 80076c6:	ee75 5a65 	vsub.f32	s11, s10, s11
 80076ca:	ee37 5a27 	vadd.f32	s10, s14, s15
 80076ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076d2:	ee32 7a86 	vadd.f32	s14, s5, s12
 80076d6:	ee32 6ac6 	vsub.f32	s12, s5, s12
 80076da:	ee73 2a20 	vadd.f32	s5, s6, s1
 80076de:	ee33 3a60 	vsub.f32	s6, s6, s1
 80076e2:	ee72 0a24 	vadd.f32	s1, s4, s9
 80076e6:	edcc 2a00 	vstr	s5, [ip]
 80076ea:	ee72 4a64 	vsub.f32	s9, s4, s9
 80076ee:	ed84 3a01 	vstr	s6, [r4, #4]
 80076f2:	ee74 2a61 	vsub.f32	s5, s8, s3
 80076f6:	ee31 3a23 	vadd.f32	s6, s2, s7
 80076fa:	edc7 0a00 	vstr	s1, [r7]
 80076fe:	ee31 1a63 	vsub.f32	s2, s2, s7
 8007702:	edc0 4a00 	vstr	s9, [r0]
 8007706:	ee76 3aa5 	vadd.f32	s7, s13, s11
 800770a:	edc7 2a01 	vstr	s5, [r7, #4]
 800770e:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8007712:	441c      	add	r4, r3
 8007714:	ee75 5a47 	vsub.f32	s11, s10, s14
 8007718:	449c      	add	ip, r3
 800771a:	ee35 5a07 	vadd.f32	s10, s10, s14
 800771e:	441f      	add	r7, r3
 8007720:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8007724:	ee34 4a21 	vadd.f32	s8, s8, s3
 8007728:	ee77 7a86 	vadd.f32	s15, s15, s12
 800772c:	ed80 4a01 	vstr	s8, [r0, #4]
 8007730:	4418      	add	r0, r3
 8007732:	ed86 3a00 	vstr	s6, [r6]
 8007736:	ed01 1a01 	vstr	s2, [r1, #-4]
 800773a:	ed42 3a01 	vstr	s7, [r2, #-4]
 800773e:	edc5 6a00 	vstr	s13, [r5]
 8007742:	edc6 5a01 	vstr	s11, [r6, #4]
 8007746:	441e      	add	r6, r3
 8007748:	ed81 5a00 	vstr	s10, [r1]
 800774c:	4419      	add	r1, r3
 800774e:	ed82 7a00 	vstr	s14, [r2]
 8007752:	441a      	add	r2, r3
 8007754:	edc5 7a01 	vstr	s15, [r5, #4]
 8007758:	441d      	add	r5, r3
 800775a:	f63f af44 	bhi.w	80075e6 <arm_radix8_butterfly_f32+0x66>
 800775e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8007760:	2f07      	cmp	r7, #7
 8007762:	f240 81e8 	bls.w	8007b36 <arm_radix8_butterfly_f32+0x5b6>
 8007766:	9903      	ldr	r1, [sp, #12]
 8007768:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 800776c:	9e01      	ldr	r6, [sp, #4]
 800776e:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8007772:	19ca      	adds	r2, r1, r7
 8007774:	1c4c      	adds	r4, r1, #1
 8007776:	eb05 010e 	add.w	r1, r5, lr
 800777a:	00ed      	lsls	r5, r5, #3
 800777c:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8007780:	3608      	adds	r6, #8
 8007782:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007784:	eb01 050e 	add.w	r5, r1, lr
 8007788:	00c9      	lsls	r1, r1, #3
 800778a:	443c      	add	r4, r7
 800778c:	9618      	str	r6, [sp, #96]	@ 0x60
 800778e:	00ee      	lsls	r6, r5, #3
 8007790:	460f      	mov	r7, r1
 8007792:	9114      	str	r1, [sp, #80]	@ 0x50
 8007794:	9902      	ldr	r1, [sp, #8]
 8007796:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800779a:	9611      	str	r6, [sp, #68]	@ 0x44
 800779c:	00c0      	lsls	r0, r0, #3
 800779e:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80077a0:	3108      	adds	r1, #8
 80077a2:	3404      	adds	r4, #4
 80077a4:	f04f 0901 	mov.w	r9, #1
 80077a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80077aa:	eb05 010e 	add.w	r1, r5, lr
 80077ae:	4635      	mov	r5, r6
 80077b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077b2:	9301      	str	r3, [sp, #4]
 80077b4:	443d      	add	r5, r7
 80077b6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80077b8:	9507      	str	r5, [sp, #28]
 80077ba:	eb01 050e 	add.w	r5, r1, lr
 80077be:	00c9      	lsls	r1, r1, #3
 80077c0:	19f7      	adds	r7, r6, r7
 80077c2:	00ed      	lsls	r5, r5, #3
 80077c4:	9110      	str	r1, [sp, #64]	@ 0x40
 80077c6:	00d1      	lsls	r1, r2, #3
 80077c8:	970a      	str	r7, [sp, #40]	@ 0x28
 80077ca:	462f      	mov	r7, r5
 80077cc:	9515      	str	r5, [sp, #84]	@ 0x54
 80077ce:	0112      	lsls	r2, r2, #4
 80077d0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80077d2:	19f4      	adds	r4, r6, r7
 80077d4:	320c      	adds	r2, #12
 80077d6:	3108      	adds	r1, #8
 80077d8:	1975      	adds	r5, r6, r5
 80077da:	9408      	str	r4, [sp, #32]
 80077dc:	9217      	str	r2, [sp, #92]	@ 0x5c
 80077de:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80077e2:	9509      	str	r5, [sp, #36]	@ 0x24
 80077e4:	f100 020c 	add.w	r2, r0, #12
 80077e8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80077ea:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80077ec:	1975      	adds	r5, r6, r5
 80077ee:	9216      	str	r2, [sp, #88]	@ 0x58
 80077f0:	1932      	adds	r2, r6, r4
 80077f2:	911b      	str	r1, [sp, #108]	@ 0x6c
 80077f4:	9505      	str	r5, [sp, #20]
 80077f6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80077fa:	0179      	lsls	r1, r7, #5
 80077fc:	9204      	str	r2, [sp, #16]
 80077fe:	1972      	adds	r2, r6, r5
 8007800:	9412      	str	r4, [sp, #72]	@ 0x48
 8007802:	9513      	str	r5, [sp, #76]	@ 0x4c
 8007804:	9206      	str	r2, [sp, #24]
 8007806:	f101 0208 	add.w	r2, r1, #8
 800780a:	921a      	str	r2, [sp, #104]	@ 0x68
 800780c:	2200      	movs	r2, #0
 800780e:	f102 0108 	add.w	r1, r2, #8
 8007812:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007814:	46cc      	mov	ip, r9
 8007816:	460f      	mov	r7, r1
 8007818:	910c      	str	r1, [sp, #48]	@ 0x30
 800781a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800781c:	eb0b 0e07 	add.w	lr, fp, r7
 8007820:	9f04      	ldr	r7, [sp, #16]
 8007822:	188e      	adds	r6, r1, r2
 8007824:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8007826:	edd7 fa00 	vldr	s31, [r7]
 800782a:	9f06      	ldr	r7, [sp, #24]
 800782c:	188d      	adds	r5, r1, r2
 800782e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8007830:	445e      	add	r6, fp
 8007832:	ed97 fa00 	vldr	s30, [r7]
 8007836:	445d      	add	r5, fp
 8007838:	9f05      	ldr	r7, [sp, #20]
 800783a:	188c      	adds	r4, r1, r2
 800783c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800783e:	edd7 ea00 	vldr	s29, [r7]
 8007842:	445c      	add	r4, fp
 8007844:	9f07      	ldr	r7, [sp, #28]
 8007846:	1888      	adds	r0, r1, r2
 8007848:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800784a:	ed97 ea00 	vldr	s28, [r7]
 800784e:	4458      	add	r0, fp
 8007850:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007852:	4411      	add	r1, r2
 8007854:	441a      	add	r2, r3
 8007856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007858:	edd7 da00 	vldr	s27, [r7]
 800785c:	4459      	add	r1, fp
 800785e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007860:	445a      	add	r2, fp
 8007862:	930d      	str	r3, [sp, #52]	@ 0x34
 8007864:	ed97 da00 	vldr	s26, [r7]
 8007868:	9f08      	ldr	r7, [sp, #32]
 800786a:	edd7 ca00 	vldr	s25, [r7]
 800786e:	9f04      	ldr	r7, [sp, #16]
 8007870:	ed97 ca01 	vldr	s24, [r7, #4]
 8007874:	9f06      	ldr	r7, [sp, #24]
 8007876:	edd7 ba01 	vldr	s23, [r7, #4]
 800787a:	9f05      	ldr	r7, [sp, #20]
 800787c:	ed97 ba01 	vldr	s22, [r7, #4]
 8007880:	9f07      	ldr	r7, [sp, #28]
 8007882:	edd7 aa01 	vldr	s21, [r7, #4]
 8007886:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007888:	ed97 aa01 	vldr	s20, [r7, #4]
 800788c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	edd7 7a01 	vldr	s15, [r7, #4]
 8007894:	9f08      	ldr	r7, [sp, #32]
 8007896:	edcd 7a02 	vstr	s15, [sp, #8]
 800789a:	edd7 7a01 	vldr	s15, [r7, #4]
 800789e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80078a0:	edcd 7a03 	vstr	s15, [sp, #12]
 80078a4:	e002      	b.n	80078ac <arm_radix8_butterfly_f32+0x32c>
 80078a6:	bf00      	nop
 80078a8:	3f3504f3 	.word	0x3f3504f3
 80078ac:	ed90 2a00 	vldr	s4, [r0]
 80078b0:	44c4      	add	ip, r8
 80078b2:	ed96 7a00 	vldr	s14, [r6]
 80078b6:	ed94 8a00 	vldr	s16, [r4]
 80078ba:	45e2      	cmp	sl, ip
 80078bc:	ed52 7a01 	vldr	s15, [r2, #-4]
 80078c0:	ed95 5a00 	vldr	s10, [r5]
 80078c4:	ed51 5a01 	vldr	s11, [r1, #-4]
 80078c8:	ee38 6a27 	vadd.f32	s12, s16, s15
 80078cc:	ed9e 1a00 	vldr	s2, [lr]
 80078d0:	ee78 2a67 	vsub.f32	s5, s16, s15
 80078d4:	ed17 4a01 	vldr	s8, [r7, #-4]
 80078d8:	ee75 3a25 	vadd.f32	s7, s10, s11
 80078dc:	ee31 3a07 	vadd.f32	s6, s2, s14
 80078e0:	edde 4a01 	vldr	s9, [lr, #4]
 80078e4:	ee72 6a04 	vadd.f32	s13, s4, s8
 80078e8:	ee75 5a65 	vsub.f32	s11, s10, s11
 80078ec:	ee73 1a06 	vadd.f32	s3, s6, s12
 80078f0:	ee33 5aa6 	vadd.f32	s10, s7, s13
 80078f4:	ee32 4a44 	vsub.f32	s8, s4, s8
 80078f8:	ee31 1a47 	vsub.f32	s2, s2, s14
 80078fc:	ee31 7a85 	vadd.f32	s14, s3, s10
 8007900:	ee75 7a84 	vadd.f32	s15, s11, s8
 8007904:	ee33 3a46 	vsub.f32	s6, s6, s12
 8007908:	ed8e 7a00 	vstr	s14, [lr]
 800790c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8007910:	ee67 7a89 	vmul.f32	s15, s15, s18
 8007914:	ed90 2a01 	vldr	s4, [r0, #4]
 8007918:	ed95 7a01 	vldr	s14, [r5, #4]
 800791c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8007920:	ed91 6a00 	vldr	s12, [r1]
 8007924:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8007928:	edd7 8a00 	vldr	s17, [r7]
 800792c:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8007930:	ee72 5aa7 	vadd.f32	s11, s5, s15
 8007934:	edd2 0a00 	vldr	s1, [r2]
 8007938:	ee72 6a68 	vsub.f32	s13, s4, s17
 800793c:	edd6 7a01 	vldr	s15, [r6, #4]
 8007940:	ee77 2a46 	vsub.f32	s5, s14, s12
 8007944:	ee37 0a06 	vadd.f32	s0, s14, s12
 8007948:	ed94 7a01 	vldr	s14, [r4, #4]
 800794c:	ee32 6a28 	vadd.f32	s12, s4, s17
 8007950:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8007954:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8007958:	ee72 2aa6 	vadd.f32	s5, s5, s13
 800795c:	ee77 6a20 	vadd.f32	s13, s14, s1
 8007960:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8007964:	ee37 7a60 	vsub.f32	s14, s14, s1
 8007968:	ee24 4a09 	vmul.f32	s8, s8, s18
 800796c:	ee70 0a06 	vadd.f32	s1, s0, s12
 8007970:	ee69 7a89 	vmul.f32	s15, s19, s18
 8007974:	ee62 2a89 	vmul.f32	s5, s5, s18
 8007978:	ee30 6a46 	vsub.f32	s12, s0, s12
 800797c:	ee32 0a26 	vadd.f32	s0, s4, s13
 8007980:	ee72 6a66 	vsub.f32	s13, s4, s13
 8007984:	ee77 8a62 	vsub.f32	s17, s14, s5
 8007988:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800798c:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8007990:	ee77 4a22 	vadd.f32	s9, s14, s5
 8007994:	ee71 2a04 	vadd.f32	s5, s2, s8
 8007998:	ee31 7a44 	vsub.f32	s14, s2, s8
 800799c:	ee30 1a60 	vsub.f32	s2, s0, s1
 80079a0:	ee73 1a06 	vadd.f32	s3, s6, s12
 80079a4:	ee33 6a46 	vsub.f32	s12, s6, s12
 80079a8:	ee36 3ae3 	vsub.f32	s6, s13, s7
 80079ac:	ee37 4ac8 	vsub.f32	s8, s15, s16
 80079b0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80079b4:	ee77 7a88 	vadd.f32	s15, s15, s16
 80079b8:	ee72 3a65 	vsub.f32	s7, s4, s11
 80079bc:	ee2a 8a81 	vmul.f32	s16, s21, s2
 80079c0:	ee72 5a25 	vadd.f32	s11, s4, s11
 80079c4:	ee2e 1a01 	vmul.f32	s2, s28, s2
 80079c8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80079cc:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80079d0:	ee77 2a28 	vadd.f32	s5, s14, s17
 80079d4:	ee37 7a68 	vsub.f32	s14, s14, s17
 80079d8:	ee6e 8a05 	vmul.f32	s17, s28, s10
 80079dc:	ee2a 5a85 	vmul.f32	s10, s21, s10
 80079e0:	ee6f 9a21 	vmul.f32	s19, s30, s3
 80079e4:	ee70 0a20 	vadd.f32	s1, s0, s1
 80079e8:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 80079ec:	ee2b 0a83 	vmul.f32	s0, s23, s6
 80079f0:	ee2f 3a03 	vmul.f32	s6, s30, s6
 80079f4:	edce 0a01 	vstr	s1, [lr, #4]
 80079f8:	ee38 8a88 	vadd.f32	s16, s17, s16
 80079fc:	449e      	add	lr, r3
 80079fe:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8007a02:	ee31 5a45 	vsub.f32	s10, s2, s10
 8007a06:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8007a0a:	ed86 8a00 	vstr	s16, [r6]
 8007a0e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8007a12:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007a16:	ed86 5a01 	vstr	s10, [r6, #4]
 8007a1a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8007a1e:	edcd 3a01 	vstr	s7, [sp, #4]
 8007a22:	ed9d 5a03 	vldr	s10, [sp, #12]
 8007a26:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8007a2a:	eddd 3a02 	vldr	s7, [sp, #8]
 8007a2e:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8007a32:	ed84 0a00 	vstr	s0, [r4]
 8007a36:	ee65 4a24 	vmul.f32	s9, s10, s9
 8007a3a:	ed84 3a01 	vstr	s6, [r4, #4]
 8007a3e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8007a42:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007a46:	eddd 3a01 	vldr	s7, [sp, #4]
 8007a4a:	ee25 5a25 	vmul.f32	s10, s10, s11
 8007a4e:	441e      	add	r6, r3
 8007a50:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8007a54:	441c      	add	r4, r3
 8007a56:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8007a5a:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8007a5e:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8007a62:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8007a66:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8007a6a:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8007a6e:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8007a72:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8007a76:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8007a7a:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8007a7e:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8007a82:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8007a86:	ee38 8a01 	vadd.f32	s16, s16, s2
 8007a8a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8007a8e:	ee39 5a85 	vadd.f32	s10, s19, s10
 8007a92:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8007a96:	ed02 8a01 	vstr	s16, [r2, #-4]
 8007a9a:	ee30 0a21 	vadd.f32	s0, s0, s3
 8007a9e:	ed82 6a00 	vstr	s12, [r2]
 8007aa2:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007aa6:	edc5 0a00 	vstr	s1, [r5]
 8007aaa:	ee33 3a28 	vadd.f32	s6, s6, s17
 8007aae:	edc5 3a01 	vstr	s7, [r5, #4]
 8007ab2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007ab6:	ed07 5a01 	vstr	s10, [r7, #-4]
 8007aba:	edc7 4a00 	vstr	s9, [r7]
 8007abe:	441d      	add	r5, r3
 8007ac0:	ed01 0a01 	vstr	s0, [r1, #-4]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	edc1 2a00 	vstr	s5, [r1]
 8007aca:	441f      	add	r7, r3
 8007acc:	ed80 3a00 	vstr	s6, [r0]
 8007ad0:	4419      	add	r1, r3
 8007ad2:	ed80 7a01 	vstr	s14, [r0, #4]
 8007ad6:	4418      	add	r0, r3
 8007ad8:	f63f aee8 	bhi.w	80078ac <arm_radix8_butterfly_f32+0x32c>
 8007adc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ade:	f109 0901 	add.w	r9, r9, #1
 8007ae2:	9301      	str	r3, [sp, #4]
 8007ae4:	9b04      	ldr	r3, [sp, #16]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	9b06      	ldr	r3, [sp, #24]
 8007aee:	4413      	add	r3, r2
 8007af0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007af2:	9306      	str	r3, [sp, #24]
 8007af4:	9b05      	ldr	r3, [sp, #20]
 8007af6:	4413      	add	r3, r2
 8007af8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007afa:	9305      	str	r3, [sp, #20]
 8007afc:	9b07      	ldr	r3, [sp, #28]
 8007afe:	4413      	add	r3, r2
 8007b00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007b02:	9307      	str	r3, [sp, #28]
 8007b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b06:	4413      	add	r3, r2
 8007b08:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007b0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b0e:	4413      	add	r3, r2
 8007b10:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b14:	9b08      	ldr	r3, [sp, #32]
 8007b16:	4413      	add	r3, r2
 8007b18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b1a:	9308      	str	r3, [sp, #32]
 8007b1c:	3208      	adds	r2, #8
 8007b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b20:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007b22:	4599      	cmp	r9, r3
 8007b24:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007b26:	f47f ae72 	bne.w	800780e <arm_radix8_butterfly_f32+0x28e>
 8007b2a:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 8007b2e:	46c8      	mov	r8, r9
 8007b30:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 8007b34:	e533      	b.n	800759e <arm_radix8_butterfly_f32+0x1e>
 8007b36:	b01f      	add	sp, #124	@ 0x7c
 8007b38:	ecbd 8b10 	vpop	{d8-d15}
 8007b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b40 <memset>:
 8007b40:	4402      	add	r2, r0
 8007b42:	4603      	mov	r3, r0
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d100      	bne.n	8007b4a <memset+0xa>
 8007b48:	4770      	bx	lr
 8007b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b4e:	e7f9      	b.n	8007b44 <memset+0x4>

08007b50 <__errno>:
 8007b50:	4b01      	ldr	r3, [pc, #4]	@ (8007b58 <__errno+0x8>)
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	24000058 	.word	0x24000058

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4d0d      	ldr	r5, [pc, #52]	@ (8007b94 <__libc_init_array+0x38>)
 8007b60:	4c0d      	ldr	r4, [pc, #52]	@ (8007b98 <__libc_init_array+0x3c>)
 8007b62:	1b64      	subs	r4, r4, r5
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	2600      	movs	r6, #0
 8007b68:	42a6      	cmp	r6, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	4d0b      	ldr	r5, [pc, #44]	@ (8007b9c <__libc_init_array+0x40>)
 8007b6e:	4c0c      	ldr	r4, [pc, #48]	@ (8007ba0 <__libc_init_array+0x44>)
 8007b70:	f000 f9d2 	bl	8007f18 <_init>
 8007b74:	1b64      	subs	r4, r4, r5
 8007b76:	10a4      	asrs	r4, r4, #2
 8007b78:	2600      	movs	r6, #0
 8007b7a:	42a6      	cmp	r6, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b84:	4798      	blx	r3
 8007b86:	3601      	adds	r6, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8e:	4798      	blx	r3
 8007b90:	3601      	adds	r6, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	08020a00 	.word	0x08020a00
 8007b98:	08020a00 	.word	0x08020a00
 8007b9c:	08020a00 	.word	0x08020a00
 8007ba0:	08020a04 	.word	0x08020a04

08007ba4 <tanhf>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	ee10 5a10 	vmov	r5, s0
 8007baa:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007bae:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007bb2:	ed2d 8b02 	vpush	{d8}
 8007bb6:	eef0 7a40 	vmov.f32	s15, s0
 8007bba:	d30f      	bcc.n	8007bdc <tanhf+0x38>
 8007bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8007c68 <tanhf+0xc4>)
 8007bbe:	edd3 6a00 	vldr	s13, [r3]
 8007bc2:	ed93 7a00 	vldr	s14, [r3]
 8007bc6:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8007bca:	2d00      	cmp	r5, #0
 8007bcc:	bfac      	ite	ge
 8007bce:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8007bd2:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8007bd6:	ecbd 8b02 	vpop	{d8}
 8007bda:	bd38      	pop	{r3, r4, r5, pc}
 8007bdc:	4a23      	ldr	r2, [pc, #140]	@ (8007c6c <tanhf+0xc8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d839      	bhi.n	8007c56 <tanhf+0xb2>
 8007be2:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 8007be6:	d207      	bcs.n	8007bf8 <tanhf+0x54>
 8007be8:	4b1f      	ldr	r3, [pc, #124]	@ (8007c68 <tanhf+0xc4>)
 8007bea:	ed93 0a00 	vldr	s0, [r3]
 8007bee:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007bf2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007bf6:	e7ee      	b.n	8007bd6 <tanhf+0x32>
 8007bf8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8007bfc:	4c1c      	ldr	r4, [pc, #112]	@ (8007c70 <tanhf+0xcc>)
 8007bfe:	d319      	bcc.n	8007c34 <tanhf+0x90>
 8007c00:	f000 f982 	bl	8007f08 <fabsf>
 8007c04:	edd4 7a00 	vldr	s15, [r4]
 8007c08:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c0c:	f000 f834 	bl	8007c78 <expm1f>
 8007c10:	4b15      	ldr	r3, [pc, #84]	@ (8007c68 <tanhf+0xc4>)
 8007c12:	edd3 7a00 	vldr	s15, [r3]
 8007c16:	ed94 6a00 	vldr	s12, [r4]
 8007c1a:	ed94 7a00 	vldr	s14, [r4]
 8007c1e:	ee37 7a00 	vadd.f32	s14, s14, s0
 8007c22:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8007c26:	ee37 0ae6 	vsub.f32	s0, s15, s13
 8007c2a:	2d00      	cmp	r5, #0
 8007c2c:	bfb8      	it	lt
 8007c2e:	eeb1 0a40 	vneglt.f32	s0, s0
 8007c32:	e7d0      	b.n	8007bd6 <tanhf+0x32>
 8007c34:	ed94 8a00 	vldr	s16, [r4]
 8007c38:	f000 f966 	bl	8007f08 <fabsf>
 8007c3c:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8007c40:	f000 f81a 	bl	8007c78 <expm1f>
 8007c44:	edd4 7a00 	vldr	s15, [r4]
 8007c48:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007c4c:	eeb1 7a40 	vneg.f32	s14, s0
 8007c50:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007c54:	e7e9      	b.n	8007c2a <tanhf+0x86>
 8007c56:	4b04      	ldr	r3, [pc, #16]	@ (8007c68 <tanhf+0xc4>)
 8007c58:	ed93 0a00 	vldr	s0, [r3]
 8007c5c:	4b05      	ldr	r3, [pc, #20]	@ (8007c74 <tanhf+0xd0>)
 8007c5e:	edd3 7a00 	vldr	s15, [r3]
 8007c62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007c66:	e7e0      	b.n	8007c2a <tanhf+0x86>
 8007c68:	080209fc 	.word	0x080209fc
 8007c6c:	41afffff 	.word	0x41afffff
 8007c70:	080209f8 	.word	0x080209f8
 8007c74:	080209f4 	.word	0x080209f4

08007c78 <expm1f>:
 8007c78:	ee10 3a10 	vmov	r3, s0
 8007c7c:	4a83      	ldr	r2, [pc, #524]	@ (8007e8c <expm1f+0x214>)
 8007c7e:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 8007c82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d91e      	bls.n	8007cc8 <expm1f+0x50>
 8007c8a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007c8e:	d902      	bls.n	8007c96 <expm1f+0x1e>
 8007c90:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c94:	4770      	bx	lr
 8007c96:	d105      	bne.n	8007ca4 <expm1f+0x2c>
 8007c98:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	fe00 0a27 	vseleq.f32	s0, s0, s15
 8007ca2:	4770      	bx	lr
 8007ca4:	b920      	cbnz	r0, 8007cb0 <expm1f+0x38>
 8007ca6:	4a7a      	ldr	r2, [pc, #488]	@ (8007e90 <expm1f+0x218>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d963      	bls.n	8007d74 <expm1f+0xfc>
 8007cac:	f000 b926 	b.w	8007efc <__math_oflowf>
 8007cb0:	eddf 7a78 	vldr	s15, [pc, #480]	@ 8007e94 <expm1f+0x21c>
 8007cb4:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007cb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc0:	d551      	bpl.n	8007d66 <expm1f+0xee>
 8007cc2:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8007cc6:	4770      	bx	lr
 8007cc8:	4a73      	ldr	r2, [pc, #460]	@ (8007e98 <expm1f+0x220>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d972      	bls.n	8007db4 <expm1f+0x13c>
 8007cce:	4a73      	ldr	r2, [pc, #460]	@ (8007e9c <expm1f+0x224>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d868      	bhi.n	8007da6 <expm1f+0x12e>
 8007cd4:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8007ea0 <expm1f+0x228>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d13d      	bne.n	8007d58 <expm1f+0xe0>
 8007cdc:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007ce0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007ea4 <expm1f+0x22c>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	ee37 0a66 	vsub.f32	s0, s14, s13
 8007cea:	ee77 7a40 	vsub.f32	s15, s14, s0
 8007cee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007cf2:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8007cf6:	ee20 4a25 	vmul.f32	s8, s0, s11
 8007cfa:	ed9f 6a6b 	vldr	s12, [pc, #428]	@ 8007ea8 <expm1f+0x230>
 8007cfe:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8007eac <expm1f+0x234>
 8007d02:	ed9f 5a6b 	vldr	s10, [pc, #428]	@ 8007eb0 <expm1f+0x238>
 8007d06:	ee20 7a04 	vmul.f32	s14, s0, s8
 8007d0a:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 8007d0e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007d12:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 8007eb4 <expm1f+0x23c>
 8007d16:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007d1a:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8007eb8 <expm1f+0x240>
 8007d1e:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007d22:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007d26:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007d2a:	eef0 6a46 	vmov.f32	s13, s12
 8007d2e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007d32:	eee4 4a66 	vfms.f32	s9, s8, s13
 8007d36:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 8007d3a:	eea0 4a64 	vfms.f32	s8, s0, s9
 8007d3e:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8007d42:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8007d46:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d140      	bne.n	8007dd0 <expm1f+0x158>
 8007d4e:	ee90 7a26 	vfnms.f32	s14, s0, s13
 8007d52:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007d56:	4770      	bx	lr
 8007d58:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007d5c:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8007ebc <expm1f+0x244>
 8007d60:	f04f 33ff 	mov.w	r3, #4294967295
 8007d64:	e7bf      	b.n	8007ce6 <expm1f+0x6e>
 8007d66:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8007ec0 <expm1f+0x248>
 8007d6a:	ee20 7a07 	vmul.f32	s14, s0, s14
 8007d6e:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 8007d72:	e005      	b.n	8007d80 <expm1f+0x108>
 8007d74:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8007ec0 <expm1f+0x248>
 8007d78:	ee20 7a07 	vmul.f32	s14, s0, s14
 8007d7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007d80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d84:	eeb0 7a40 	vmov.f32	s14, s0
 8007d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007d90:	ee17 3a90 	vmov	r3, s15
 8007d94:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8007ea0 <expm1f+0x228>
 8007d98:	eea6 7ae7 	vfms.f32	s14, s13, s15
 8007d9c:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8007ea4 <expm1f+0x22c>
 8007da0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007da4:	e79f      	b.n	8007ce6 <expm1f+0x6e>
 8007da6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8007ec0 <expm1f+0x248>
 8007daa:	ee20 7a07 	vmul.f32	s14, s0, s14
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d0e4      	beq.n	8007d7c <expm1f+0x104>
 8007db2:	e7dc      	b.n	8007d6e <expm1f+0xf6>
 8007db4:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 8007db8:	d208      	bcs.n	8007dcc <expm1f+0x154>
 8007dba:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8007ec4 <expm1f+0x24c>
 8007dbe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007dc2:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8007dc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007dca:	4770      	bx	lr
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e790      	b.n	8007cf2 <expm1f+0x7a>
 8007dd0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8007dda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007dde:	d106      	bne.n	8007dee <expm1f+0x176>
 8007de0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007de4:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 8007de8:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8007dec:	4770      	bx	lr
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d118      	bne.n	8007e24 <expm1f+0x1ac>
 8007df2:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 8007df6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dfe:	bf5b      	ittet	pl
 8007e00:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8007e04:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 8007e08:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8007e0c:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8007e10:	bf43      	ittte	mi
 8007e12:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 8007e16:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 8007e1a:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8007e1e:	eeb0 0a46 	vmovpl.f32	s0, s12
 8007e22:	4770      	bx	lr
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	2a39      	cmp	r2, #57	@ 0x39
 8007e28:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8007e2c:	d90b      	bls.n	8007e46 <expm1f+0x1ce>
 8007e2e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007e32:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007e36:	ee17 3a90 	vmov	r3, s15
 8007e3a:	4419      	add	r1, r3
 8007e3c:	ee07 1a90 	vmov	s15, r1
 8007e40:	ee37 0ac6 	vsub.f32	s0, s15, s12
 8007e44:	4770      	bx	lr
 8007e46:	2b16      	cmp	r3, #22
 8007e48:	dc11      	bgt.n	8007e6e <expm1f+0x1f6>
 8007e4a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e4e:	fa42 f303 	asr.w	r3, r2, r3
 8007e52:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 8007e56:	ee07 3a10 	vmov	s14, r3
 8007e5a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e62:	ee17 3a90 	vmov	r3, s15
 8007e66:	440b      	add	r3, r1
 8007e68:	ee00 3a10 	vmov	s0, r3
 8007e6c:	4770      	bx	lr
 8007e6e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8007e72:	05db      	lsls	r3, r3, #23
 8007e74:	ee07 3a10 	vmov	s14, r3
 8007e78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e7c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007e80:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007e84:	ee17 3a90 	vmov	r3, s15
 8007e88:	e7ed      	b.n	8007e66 <expm1f+0x1ee>
 8007e8a:	bf00      	nop
 8007e8c:	4195b843 	.word	0x4195b843
 8007e90:	42b17217 	.word	0x42b17217
 8007e94:	0da24260 	.word	0x0da24260
 8007e98:	3eb17218 	.word	0x3eb17218
 8007e9c:	3f851591 	.word	0x3f851591
 8007ea0:	3f317180 	.word	0x3f317180
 8007ea4:	3717f7d1 	.word	0x3717f7d1
 8007ea8:	b457edbb 	.word	0xb457edbb
 8007eac:	36867e54 	.word	0x36867e54
 8007eb0:	bd088889 	.word	0xbd088889
 8007eb4:	b8a670cd 	.word	0xb8a670cd
 8007eb8:	3ad00d01 	.word	0x3ad00d01
 8007ebc:	b717f7d1 	.word	0xb717f7d1
 8007ec0:	3fb8aa3b 	.word	0x3fb8aa3b
 8007ec4:	7149f2ca 	.word	0x7149f2ca

08007ec8 <with_errnof>:
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	ed2d 8b02 	vpush	{d8}
 8007ece:	eeb0 8a40 	vmov.f32	s16, s0
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	f7ff fe3c 	bl	8007b50 <__errno>
 8007ed8:	eeb0 0a48 	vmov.f32	s0, s16
 8007edc:	ecbd 8b02 	vpop	{d8}
 8007ee0:	6004      	str	r4, [r0, #0]
 8007ee2:	bd10      	pop	{r4, pc}

08007ee4 <xflowf>:
 8007ee4:	b130      	cbz	r0, 8007ef4 <xflowf+0x10>
 8007ee6:	eef1 7a40 	vneg.f32	s15, s0
 8007eea:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007eee:	2022      	movs	r0, #34	@ 0x22
 8007ef0:	f7ff bfea 	b.w	8007ec8 <with_errnof>
 8007ef4:	eef0 7a40 	vmov.f32	s15, s0
 8007ef8:	e7f7      	b.n	8007eea <xflowf+0x6>
	...

08007efc <__math_oflowf>:
 8007efc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007f04 <__math_oflowf+0x8>
 8007f00:	f7ff bff0 	b.w	8007ee4 <xflowf>
 8007f04:	70000000 	.word	0x70000000

08007f08 <fabsf>:
 8007f08:	ee10 3a10 	vmov	r3, s0
 8007f0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f10:	ee00 3a10 	vmov	s0, r3
 8007f14:	4770      	bx	lr
	...

08007f18 <_init>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	bf00      	nop
 8007f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1e:	bc08      	pop	{r3}
 8007f20:	469e      	mov	lr, r3
 8007f22:	4770      	bx	lr

08007f24 <_fini>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	bf00      	nop
 8007f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2a:	bc08      	pop	{r3}
 8007f2c:	469e      	mov	lr, r3
 8007f2e:	4770      	bx	lr
