
STM32H743-DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090bc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0007765c  08009360  08009360  0000a360  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080809bc  080809bc  000819bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080809c4  080809c4  000819c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080809c8  080809c8  000819c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000080  24000000  080809cc  00082000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcm_bss     0000c020  20000000  20000000  00083000  2**5
                  ALLOC
  8 .dtcm_data    00000000  2000c020  2000c020  00082080  2**0
                  CONTENTS
  9 .bss          0007e400  24000080  24000080  00082080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2407e480  2407e480  00082080  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00082080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260df  00000000  00000000  000820ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005670  00000000  00000000  000a818d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000106de  00000000  00000000  000ad7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  000bdee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001f82  00000000  00000000  000bf3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c26c  00000000  00000000  000c133a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ab1c  00000000  00000000  000fd5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00177b7d  00000000  00000000  001280c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  0029fc3f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042b8  00000000  00000000  0029fcf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  002a3fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000041c4  00000000  00000000  002a401a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000e0  00000000  00000000  002a81de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009344 	.word	0x08009344

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08009344 	.word	0x08009344

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <cabinet_simulation_f32_process>:
 *
 * @param self Generic FX handler containing allocated state and FIR pointers.
 * @param p    Audio pipeline context.
 */
static void cabinet_simulation_f32_process(FX_HANDLER_t *self, pipe *p)
{
 8000440:	4603      	mov	r3, r0
    // self->states[2]: pointer to FIR filter handler
    // self->states[1]: pointer to overlap/state buffer
    partitioned_fir_convolution_fft(
 8000442:	4608      	mov	r0, r1
 8000444:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8000448:	f000 be3a 	b.w	80010c0 <partitioned_fir_convolution_fft>

0800044c <fx_cabinet_clean>:
    fx->clean =   fx_cabinet_clean;
}


void fx_cabinet_clean(FX_HANDLER_t *fx)
{
 800044c:	b538      	push	{r3, r4, r5, lr}
 800044e:	4604      	mov	r4, r0

	fir_OD_M212_VINT_DYN_201_P05_00_f32_clean((fir_t *)fx->states[2]);
 8000450:	6940      	ldr	r0, [r0, #20]
 8000452:	f000 fa73 	bl	800093c <fir_OD_M212_VINT_DYN_201_P05_00_f32_clean>
    self->fir1  = NULL;
 8000456:	2500      	movs	r5, #0
    cabinet_simulation_clean_f32((cabinet_simulation_f32*)fx->states[3]);
 8000458:	69a3      	ldr	r3, [r4, #24]

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 800045a:	2220      	movs	r2, #32
 800045c:	4629      	mov	r1, r5
 800045e:	f104 000c 	add.w	r0, r4, #12
    self->fir1  = NULL;
 8000462:	e9c3 550b 	strd	r5, r5, [r3, #44]	@ 0x2c
    	fx->states[i] = NULL;
 8000466:	f007 ffd0 	bl	800840a <memset>

    fx->process = NULL;
 800046a:	6065      	str	r5, [r4, #4]

}
 800046c:	bd38      	pop	{r3, r4, r5, pc}
 800046e:	bf00      	nop

08000470 <fx_cabinet_init>:
{
 8000470:	b510      	push	{r4, lr}
    fx->states[0] = _static_mem_alloc(
 8000472:	2104      	movs	r1, #4
{
 8000474:	4604      	mov	r4, r0
    fx->states[0] = _static_mem_alloc(
 8000476:	f242 0008 	movw	r0, #8200	@ 0x2008
 800047a:	f000 fb13 	bl	8000aa4 <_static_mem_alloc>
 800047e:	4603      	mov	r3, r0
    fx->states[1] = _dctm_static_mem_alloc(
 8000480:	2104      	movs	r1, #4
 8000482:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    fx->states[0] = _static_mem_alloc(
 8000486:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _dctm_static_mem_alloc(
 8000488:	f000 faf6 	bl	8000a78 <_dctm_static_mem_alloc>
 800048c:	4603      	mov	r3, r0
    fx->states[2] = _static_mem_alloc(
 800048e:	2104      	movs	r1, #4
 8000490:	2014      	movs	r0, #20
    fx->states[1] = _dctm_static_mem_alloc(
 8000492:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8000494:	f000 fb06 	bl	8000aa4 <_static_mem_alloc>
 8000498:	4603      	mov	r3, r0
    fx->states[3] = _static_mem_alloc(
 800049a:	2104      	movs	r1, #4
 800049c:	2034      	movs	r0, #52	@ 0x34
    fx->states[2] = _static_mem_alloc(
 800049e:	6163      	str	r3, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 80004a0:	f000 fb00 	bl	8000aa4 <_static_mem_alloc>
 80004a4:	4603      	mov	r3, r0
    fir_OD_M212_VINT_DYN_201_P05_00_f32_init(
 80004a6:	68e1      	ldr	r1, [r4, #12]
 80004a8:	6960      	ldr	r0, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 80004aa:	61a3      	str	r3, [r4, #24]
    fir_OD_M212_VINT_DYN_201_P05_00_f32_init(
 80004ac:	f000 fa32 	bl	8000914 <fir_OD_M212_VINT_DYN_201_P05_00_f32_init>
        (cabinet_simulation_f32 *)fx->states[3],
 80004b0:	69a3      	ldr	r3, [r4, #24]
    fx->process = cabinet_simulation_f32_process;
 80004b2:	4904      	ldr	r1, [pc, #16]	@ (80004c4 <fx_cabinet_init+0x54>)
        (fir_t *)fx->states[2]
 80004b4:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    self->fir1  = fir;
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
    fx->clean =   fx_cabinet_clean;
 80004ba:	4a03      	ldr	r2, [pc, #12]	@ (80004c8 <fx_cabinet_init+0x58>)
    self->fir1  = fir;
 80004bc:	62d8      	str	r0, [r3, #44]	@ 0x2c
    fx->clean =   fx_cabinet_clean;
 80004be:	e9c4 1201 	strd	r1, r2, [r4, #4]
}
 80004c2:	bd10      	pop	{r4, pc}
 80004c4:	08000441 	.word	0x08000441
 80004c8:	0800044d 	.word	0x0800044d

080004cc <convolution_reverb_f32_process>:
 */
static void convolution_reverb_f32_process(
    FX_HANDLER_t *self,
    pipe         *p
)
{
 80004cc:	4603      	mov	r3, r0
    // self->states[2]: FIR handler pointer
    // self->states[1]: overlap/state buffer pointer
    partitioned_fir_convolution_fft(
 80004ce:	4608      	mov	r0, r1
 80004d0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80004d4:	f000 bdf4 	b.w	80010c0 <partitioned_fir_convolution_fft>

080004d8 <fx_reverb_init>:
 * convolution_reverb instance, then initializes and assigns the processing callback.
 *
 * @param fx Pointer to FX_HANDLER_t to configure for reverb effect.
 */
void fx_reverb_init(FX_HANDLER_t *fx)
{
 80004d8:	b510      	push	{r4, lr}
    // Allocate FFT-domain memory for reverb: numSegments * FFT_SIZE + space for Handlers
    fx->states[0] = _static_mem_alloc(
 80004da:	2104      	movs	r1, #4
{
 80004dc:	4604      	mov	r4, r0
    fx->states[0] = _static_mem_alloc(
 80004de:	4813      	ldr	r0, [pc, #76]	@ (800052c <fx_reverb_init+0x54>)
 80004e0:	f000 fae0 	bl	8000aa4 <_static_mem_alloc>
 80004e4:	4603      	mov	r3, r0
        (NUMSEGMENTS_EMT * FFT_SIZE + 2 * NUMSEGMENTS_EMT) * sizeof(float),
        _Alignof(float)
    );

    // Allocate DTCM state buffer for overlap (BUFFER_SIZE floats)
    fx->states[1] = _dctm_static_mem_alloc(
 80004e6:	2104      	movs	r1, #4
 80004e8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    fx->states[0] = _static_mem_alloc(
 80004ec:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _dctm_static_mem_alloc(
 80004ee:	f000 fac3 	bl	8000a78 <_dctm_static_mem_alloc>
 80004f2:	4603      	mov	r3, r0
        BUFFER_SIZE * sizeof(float),
        _Alignof(float)
    );

    // Allocate FIR filter handler
    fx->states[2] = _static_mem_alloc(
 80004f4:	2104      	movs	r1, #4
 80004f6:	2014      	movs	r0, #20
    fx->states[1] = _dctm_static_mem_alloc(
 80004f8:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 80004fa:	f000 fad3 	bl	8000aa4 <_static_mem_alloc>
 80004fe:	4603      	mov	r3, r0
        sizeof(fir_t),
        _Alignof(fir_t)
    );

    // Allocate convolution reverb simulation instance
    fx->states[3] = _static_mem_alloc(
 8000500:	2104      	movs	r1, #4
 8000502:	2034      	movs	r0, #52	@ 0x34
    fx->states[2] = _static_mem_alloc(
 8000504:	6163      	str	r3, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 8000506:	f000 facd 	bl	8000aa4 <_static_mem_alloc>
 800050a:	4603      	mov	r3, r0
        sizeof(convolution_reverb_f32),
        _Alignof(convolution_reverb_f32)
    );

    // Initialize FIR handler with FFT memory
    fir_emt_140_dark_3_f32_init(
 800050c:	68e1      	ldr	r1, [r4, #12]
 800050e:	6960      	ldr	r0, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 8000510:	61a3      	str	r3, [r4, #24]
    fir_emt_140_dark_3_f32_init(
 8000512:	f000 fa19 	bl	8000948 <fir_emt_140_dark_3_f32_init>
        (float *)fx->states[0]
    );

    // Initialize reverb simulation with state buffer and FIR handler
    convolution_reverb_f32_init(
        (convolution_reverb_f32 *)fx->states[3],
 8000516:	69a3      	ldr	r3, [r4, #24]
        (float32_t *)fx->states[1],
        (fir_t *)fx->states[2]
    );

    // Set processing callback for convolution reverb
    fx->process = convolution_reverb_f32_process;
 8000518:	4905      	ldr	r1, [pc, #20]	@ (8000530 <fx_reverb_init+0x58>)
        (fir_t *)fx->states[2]
 800051a:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    self->fir1  = fir;
 800051e:	631a      	str	r2, [r3, #48]	@ 0x30
    fx->clean =   fx_cabinet_clean;
 8000520:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <fx_reverb_init+0x5c>)
    self->fir1  = fir;
 8000522:	62d8      	str	r0, [r3, #44]	@ 0x2c
    fx->clean =   fx_cabinet_clean;
 8000524:	e9c4 1201 	strd	r1, r2, [r4, #4]
}
 8000528:	bd10      	pop	{r4, pc}
 800052a:	bf00      	nop
 800052c:	0005c170 	.word	0x0005c170
 8000530:	080004cd 	.word	0x080004cd
 8000534:	0800044d 	.word	0x0800044d

08000538 <fx_reverb_clean>:


void fx_reverb_clean(FX_HANDLER_t *fx)
{
 8000538:	b538      	push	{r3, r4, r5, lr}
 800053a:	4604      	mov	r4, r0

    fir_emt_140_dark_3_f32_clean((fir_t *)fx->states[2]);
 800053c:	6940      	ldr	r0, [r0, #20]
 800053e:	f000 fa27 	bl	8000990 <fir_emt_140_dark_3_f32_clean>
   self->fir1  = NULL;
 8000542:	2500      	movs	r5, #0
    convolution_reverb_f32_clean((convolution_reverb_f32*)fx->states[3]);
 8000544:	69a3      	ldr	r3, [r4, #24]

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 8000546:	2220      	movs	r2, #32
 8000548:	4629      	mov	r1, r5
 800054a:	f104 000c 	add.w	r0, r4, #12
   self->fir1  = NULL;
 800054e:	e9c3 550b 	strd	r5, r5, [r3, #44]	@ 0x2c
    	fx->states[i] = NULL;
 8000552:	f007 ff5a 	bl	800840a <memset>

    fx->process = NULL;
 8000556:	6065      	str	r5, [r4, #4]

}
 8000558:	bd38      	pop	{r3, r4, r5, pc}
 800055a:	bf00      	nop

0800055c <fx_null_process>:

static void fx_null_process(FX_HANDLER_t *fx, pipe *p){

	// empty process

}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <fx_null_clean>:

static void fx_null_clean(FX_HANDLER_t *fx) {

}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <fx_null_init>:
 * @brief empty initialize
 * @param fx Pointer to an FX_HANDLER_t to initialize
 */
void fx_null_init(FX_HANDLER_t *fx) {

	fx->process = fx_null_process;
 8000564:	4a02      	ldr	r2, [pc, #8]	@ (8000570 <fx_null_init+0xc>)
	fx->clean = fx_null_clean;
 8000566:	4b03      	ldr	r3, [pc, #12]	@ (8000574 <fx_null_init+0x10>)
 8000568:	e9c0 2301 	strd	r2, r3, [r0, #4]
}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	0800055d 	.word	0x0800055d
 8000574:	08000561 	.word	0x08000561

08000578 <supro_simulation_f32_process>:

/**
 * @brief Main FX chain processing: reverb → preamp → reverb → poweramp → reverb.
 */
static void supro_simulation_f32_process(FX_HANDLER_t *fx, pipe *p)
{
 8000578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float32_t *overlap = (float32_t *)fx->states[0];
    fir_t     *firs    = (fir_t *)fx->states[2];

    // 1) Dry signal attenuation
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 800057c:	f244 0708 	movw	r7, #16392	@ 0x4008
    fir_t     *firs    = (fir_t *)fx->states[2];
 8000580:	6943      	ldr	r3, [r0, #20]
    float32_t *overlap = (float32_t *)fx->states[0];
 8000582:	68c5      	ldr	r5, [r0, #12]
{
 8000584:	460c      	mov	r4, r1
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 8000586:	440f      	add	r7, r1
    fir_t     *firs    = (fir_t *)fx->states[2];
 8000588:	461e      	mov	r6, r3
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 800058a:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 80007e4 <supro_simulation_f32_process+0x26c>
 800058e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
{
 8000592:	4683      	mov	fp, r0
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 8000594:	4638      	mov	r0, r7
{
 8000596:	ed2d 8b0a 	vpush	{d8-d12}
 800059a:	b085      	sub	sp, #20
 800059c:	9103      	str	r1, [sp, #12]
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 800059e:	4639      	mov	r1, r7
    fir_t     *firs    = (fir_t *)fx->states[2];
 80005a0:	9302      	str	r3, [sp, #8]
    float32_t *overlap = (float32_t *)fx->states[0];
 80005a2:	9501      	str	r5, [sp, #4]
    arm_scale_f32(p->processBuffer, 0.1f, p->processBuffer, BUFFER_SIZE);
 80005a4:	f007 f970 	bl	8007888 <arm_scale_f32>

    // 2) First convolution reverb
    partitioned_fir_convolution_fft(p, &firs[0], &overlap[0]);
 80005a8:	462a      	mov	r2, r5
 80005aa:	4631      	mov	r1, r6
 80005ac:	4620      	mov	r0, r4
    float32_t        gWet   = a[SUPRO_P_BLEND_IDX];
    float32_t        bias   = a[SUPRO_P_BIAS_IDX];

    // Envelope detection: squared → lowpass → sqrt(2·env)
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5], scratch, env, BUFFER_SIZE);
 80005ae:	4e8e      	ldr	r6, [pc, #568]	@ (80007e8 <supro_simulation_f32_process+0x270>)
    partitioned_fir_convolution_fft(p, &firs[0], &overlap[0]);
 80005b0:	f000 fd86 	bl	80010c0 <partitioned_fir_convolution_fft>
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
 80005b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b8:	4a8c      	ldr	r2, [pc, #560]	@ (80007ec <supro_simulation_f32_process+0x274>)
 80005ba:	4639      	mov	r1, r7
 80005bc:	4638      	mov	r0, r7
 80005be:	f506 5580 	add.w	r5, r6, #4096	@ 0x1000
 80005c2:	f007 f9cd 	bl	8007960 <arm_mult_f32>
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5], scratch, env, BUFFER_SIZE);
 80005c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ca:	4988      	ldr	r1, [pc, #544]	@ (80007ec <supro_simulation_f32_process+0x274>)
 80005cc:	4632      	mov	r2, r6
 80005ce:	f8db 0020 	ldr.w	r0, [fp, #32]
 80005d2:	f007 f88d 	bl	80076f0 <arm_biquad_cascade_df1_f32>
    arm_scale_f32(env, 2.0f, env, BUFFER_SIZE);
 80005d6:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80005da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005de:	4631      	mov	r1, r6
 80005e0:	4630      	mov	r0, r6
 80005e2:	f007 f951 	bl	8007888 <arm_scale_f32>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] = sqrtf(fmaxf(env[i], 0.0f));
 80005e6:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80007f0 <supro_simulation_f32_process+0x278>
    arm_scale_f32(env, 2.0f, env, BUFFER_SIZE);
 80005ea:	4633      	mov	r3, r6
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] = sqrtf(fmaxf(env[i], 0.0f));
 80005ec:	edd3 7a00 	vldr	s15, [r3]
 80005f0:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80005f4:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80005f8:	eca3 7a01 	vstmia	r3!, {s14}
 80005fc:	42ab      	cmp	r3, r5
 80005fe:	d1f5      	bne.n	80005ec <supro_simulation_f32_process+0x74>

    // Polynomial distortion via Horner's method
    arm_scale_f32(x, gPre, scratch, BUFFER_SIZE);
 8000600:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 80007f4 <supro_simulation_f32_process+0x27c>
 8000604:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000608:	4978      	ldr	r1, [pc, #480]	@ (80007ec <supro_simulation_f32_process+0x274>)
 800060a:	4638      	mov	r0, r7
 800060c:	f007 f93c 	bl	8007888 <arm_scale_f32>
    arm_scale_f32(env, bias, env, BUFFER_SIZE);
 8000610:	4975      	ldr	r1, [pc, #468]	@ (80007e8 <supro_simulation_f32_process+0x270>)
 8000612:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 80007f8 <supro_simulation_f32_process+0x280>
 8000616:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800061a:	4608      	mov	r0, r1
 800061c:	4c77      	ldr	r4, [pc, #476]	@ (80007fc <supro_simulation_f32_process+0x284>)
 800061e:	f007 f933 	bl	8007888 <arm_scale_f32>
    arm_add_f32(scratch, env, scratch, BUFFER_SIZE);
 8000622:	4a72      	ldr	r2, [pc, #456]	@ (80007ec <supro_simulation_f32_process+0x274>)
 8000624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000628:	496f      	ldr	r1, [pc, #444]	@ (80007e8 <supro_simulation_f32_process+0x270>)
 800062a:	4610      	mov	r0, r2
    uint32_t K = SUPRO_NUM_A_VALS;
    arm_scale_f32(scratch, a[K-1], env, BUFFER_SIZE);
    for (int k = K-2; k >= 0; --k) {
        arm_mult_f32(scratch, env, env, BUFFER_SIZE);
 800062c:	f8df a1b8 	ldr.w	sl, [pc, #440]	@ 80007e8 <supro_simulation_f32_process+0x270>
 8000630:	f8df 91b8 	ldr.w	r9, [pc, #440]	@ 80007ec <supro_simulation_f32_process+0x274>
 8000634:	f1a4 089c 	sub.w	r8, r4, #156	@ 0x9c
    arm_add_f32(scratch, env, scratch, BUFFER_SIZE);
 8000638:	f007 f9d8 	bl	80079ec <arm_add_f32>
    arm_scale_f32(scratch, a[K-1], env, BUFFER_SIZE);
 800063c:	ed9f 0a70 	vldr	s0, [pc, #448]	@ 8000800 <supro_simulation_f32_process+0x288>
 8000640:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000644:	4968      	ldr	r1, [pc, #416]	@ (80007e8 <supro_simulation_f32_process+0x270>)
 8000646:	4869      	ldr	r0, [pc, #420]	@ (80007ec <supro_simulation_f32_process+0x274>)
 8000648:	f007 f91e 	bl	8007888 <arm_scale_f32>
        arm_mult_f32(scratch, env, env, BUFFER_SIZE);
 800064c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000650:	4652      	mov	r2, sl
 8000652:	4965      	ldr	r1, [pc, #404]	@ (80007e8 <supro_simulation_f32_process+0x270>)
 8000654:	4648      	mov	r0, r9
 8000656:	f007 f983 	bl	8007960 <arm_mult_f32>
        for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] += a[k];
 800065a:	ed34 7a01 	vldmdb	r4!, {s14}
 800065e:	4633      	mov	r3, r6
 8000660:	edd3 7a00 	vldr	s15, [r3]
 8000664:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000668:	ece3 7a01 	vstmia	r3!, {s15}
 800066c:	42ab      	cmp	r3, r5
 800066e:	d1f7      	bne.n	8000660 <supro_simulation_f32_process+0xe8>
    for (int k = K-2; k >= 0; --k) {
 8000670:	45a0      	cmp	r8, r4
 8000672:	d1eb      	bne.n	800064c <supro_simulation_f32_process+0xd4>
    }

    // Wet/dry mix and postgain
    arm_scale_f32(env, gWet, env, BUFFER_SIZE);
 8000674:	495c      	ldr	r1, [pc, #368]	@ (80007e8 <supro_simulation_f32_process+0x270>)
 8000676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800067a:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8000804 <supro_simulation_f32_process+0x28c>
 800067e:	4608      	mov	r0, r1
 8000680:	4c61      	ldr	r4, [pc, #388]	@ (8000808 <supro_simulation_f32_process+0x290>)
 8000682:	f007 f901 	bl	8007888 <arm_scale_f32>
    arm_scale_f32(scratch, 1 - gWet, scratch, BUFFER_SIZE);
 8000686:	4959      	ldr	r1, [pc, #356]	@ (80007ec <supro_simulation_f32_process+0x274>)
 8000688:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 800080c <supro_simulation_f32_process+0x294>
 800068c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000690:	4608      	mov	r0, r1
 8000692:	f504 5680 	add.w	r6, r4, #4096	@ 0x1000
 8000696:	f007 f8f7 	bl	8007888 <arm_scale_f32>
    arm_add_f32(env, scratch, scratch, BUFFER_SIZE);
 800069a:	4a54      	ldr	r2, [pc, #336]	@ (80007ec <supro_simulation_f32_process+0x274>)
 800069c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a0:	4851      	ldr	r0, [pc, #324]	@ (80007e8 <supro_simulation_f32_process+0x270>)
 80006a2:	4611      	mov	r1, r2
 80006a4:	f007 f9a2 	bl	80079ec <arm_add_f32>
    arm_scale_f32(scratch, gPost, x, BUFFER_SIZE);
 80006a8:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8000810 <supro_simulation_f32_process+0x298>
 80006ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006b0:	4639      	mov	r1, r7
 80006b2:	484e      	ldr	r0, [pc, #312]	@ (80007ec <supro_simulation_f32_process+0x274>)
 80006b4:	f007 f8e8 	bl	8007888 <arm_scale_f32>
    partitioned_fir_convolution_fft(p, &firs[1], &overlap[BUFFER_SIZE]);
 80006b8:	9b01      	ldr	r3, [sp, #4]
 80006ba:	9803      	ldr	r0, [sp, #12]
 80006bc:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80006c0:	9b02      	ldr	r3, [sp, #8]
 80006c2:	f103 0114 	add.w	r1, r3, #20
 80006c6:	f000 fcfb 	bl	80010c0 <partitioned_fir_convolution_fft>

    float32_t *x       = p->processBuffer;
    float32_t *scratch = pow_scratch;

    // Envelope detection
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
 80006ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ce:	4a4e      	ldr	r2, [pc, #312]	@ (8000808 <supro_simulation_f32_process+0x290>)
 80006d0:	4639      	mov	r1, r7
 80006d2:	4638      	mov	r0, r7
 80006d4:	f007 f944 	bl	8007960 <arm_mult_f32>
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[6], scratch, scratch, BUFFER_SIZE);
 80006d8:	4a4b      	ldr	r2, [pc, #300]	@ (8000808 <supro_simulation_f32_process+0x290>)
 80006da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006de:	f8db 0024 	ldr.w	r0, [fp, #36]	@ 0x24
 80006e2:	4611      	mov	r1, r2
 80006e4:	f007 f804 	bl	80076f0 <arm_biquad_cascade_df1_f32>
    arm_scale_f32(scratch, 2.0f, scratch, BUFFER_SIZE);
 80006e8:	4947      	ldr	r1, [pc, #284]	@ (8000808 <supro_simulation_f32_process+0x290>)
 80006ea:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80006ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006f2:	4608      	mov	r0, r1
 80006f4:	f007 f8c8 	bl	8007888 <arm_scale_f32>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) scratch[i] = sqrtf(fmaxf(scratch[i], 0.0f));
 80006f8:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80007f0 <supro_simulation_f32_process+0x278>
    arm_scale_f32(scratch, 2.0f, scratch, BUFFER_SIZE);
 80006fc:	4623      	mov	r3, r4
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) scratch[i] = sqrtf(fmaxf(scratch[i], 0.0f));
 80006fe:	edd3 7a00 	vldr	s15, [r3]
 8000702:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8000706:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800070a:	eca3 7a01 	vstmia	r3!, {s14}
 800070e:	42b3      	cmp	r3, r6
 8000710:	d1f5      	bne.n	80006fe <supro_simulation_f32_process+0x186>
    float32_t coeffP  = (tanh_kP*tanh_kP - 1.0f) / gP;

    // Nonlinearity per sample
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
        float32_t env   = scratch[i];
        float32_t xBias = x[i] - gBias * env;
 8000712:	eddf 9a39 	vldr	s19, [pc, #228]	@ 80007f8 <supro_simulation_f32_process+0x280>
 8000716:	463d      	mov	r5, r7
        float32_t xPre  = gPre * xBias;
 8000718:	ed9f 9a3e 	vldr	s18, [pc, #248]	@ 8000814 <supro_simulation_f32_process+0x29c>
        float32_t m;
        if (xPre > kP) {
 800071c:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8000818 <supro_simulation_f32_process+0x2a0>
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
        } else if (xPre >= -kN) {
 8000720:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 800081c <supro_simulation_f32_process+0x2a4>
            m = tanhf(xPre);
        } else {
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 8000724:	eddf aa3e 	vldr	s21, [pc, #248]	@ 8000820 <supro_simulation_f32_process+0x2a8>
 8000728:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8000824 <supro_simulation_f32_process+0x2ac>
 800072c:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8000828 <supro_simulation_f32_process+0x2b0>
 8000730:	eddf ba3e 	vldr	s23, [pc, #248]	@ 800082c <supro_simulation_f32_process+0x2b4>
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 8000734:	ed9f 8a3e 	vldr	s16, [pc, #248]	@ 8000830 <supro_simulation_f32_process+0x2b8>
 8000738:	e00f      	b.n	800075a <supro_simulation_f32_process+0x1e2>
 800073a:	f008 fc49 	bl	8008fd0 <tanhf>
 800073e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8000834 <supro_simulation_f32_process+0x2bc>
 8000742:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8000838 <supro_simulation_f32_process+0x2c0>
 8000746:	eee0 7a07 	vfma.f32	s15, s0, s14
        }
        x[i] = gPost * m;
 800074a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800083c <supro_simulation_f32_process+0x2c4>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 800074e:	42a6      	cmp	r6, r4
        x[i] = gPost * m;
 8000750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000754:	ed45 7a01 	vstr	s15, [r5, #-4]
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 8000758:	d027      	beq.n	80007aa <supro_simulation_f32_process+0x232>
        float32_t env   = scratch[i];
 800075a:	ecb4 7a01 	vldmia	r4!, {s14}
        float32_t xBias = x[i] - gBias * env;
 800075e:	ecf5 7a01 	vldmia	r5!, {s15}
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 8000762:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8000840 <supro_simulation_f32_process+0x2c8>
        float32_t xBias = x[i] - gBias * env;
 8000766:	eee7 7a69 	vfms.f32	s15, s14, s19
        if (xPre > kP) {
 800076a:	eef4 7ae8 	vcmpe.f32	s15, s17
        float32_t xPre  = gPre * xBias;
 800076e:	ee27 7a89 	vmul.f32	s14, s15, s18
        if (xPre > kP) {
 8000772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 8000776:	eea7 0a48 	vfms.f32	s0, s14, s16
        if (xPre > kP) {
 800077a:	dcde      	bgt.n	800073a <supro_simulation_f32_process+0x1c2>
        } else if (xPre >= -kN) {
 800077c:	eef4 7acb 	vcmpe.f32	s15, s22
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 8000780:	eeb0 0a4a 	vmov.f32	s0, s20
        } else if (xPre >= -kN) {
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 8000788:	eea7 0a2a 	vfma.f32	s0, s14, s21
        } else if (xPre >= -kN) {
 800078c:	db22      	blt.n	80007d4 <supro_simulation_f32_process+0x25c>
            m = tanhf(xPre);
 800078e:	eeb0 0a47 	vmov.f32	s0, s14
 8000792:	f008 fc1d 	bl	8008fd0 <tanhf>
 8000796:	eef0 7a40 	vmov.f32	s15, s0
        x[i] = gPost * m;
 800079a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800083c <supro_simulation_f32_process+0x2c4>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 800079e:	42a6      	cmp	r6, r4
        x[i] = gPost * m;
 80007a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007a4:	ed45 7a01 	vstr	s15, [r5, #-4]
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 80007a8:	d1d7      	bne.n	800075a <supro_simulation_f32_process+0x1e2>
    partitioned_fir_convolution_fft(p, &firs[2], &overlap[2 * BUFFER_SIZE]);
 80007aa:	9b01      	ldr	r3, [sp, #4]
 80007ac:	9902      	ldr	r1, [sp, #8]
 80007ae:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 80007b2:	9803      	ldr	r0, [sp, #12]
 80007b4:	3128      	adds	r1, #40	@ 0x28
 80007b6:	f000 fc83 	bl	80010c0 <partitioned_fir_convolution_fft>
    arm_scale_f32(p->processBuffer, 0.005f, p->processBuffer, BUFFER_SIZE);
 80007ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007be:	4639      	mov	r1, r7
 80007c0:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8000844 <supro_simulation_f32_process+0x2cc>
 80007c4:	4638      	mov	r0, r7
}
 80007c6:	b005      	add	sp, #20
 80007c8:	ecbd 8b0a 	vpop	{d8-d12}
 80007cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_scale_f32(p->processBuffer, 0.005f, p->processBuffer, BUFFER_SIZE);
 80007d0:	f007 b85a 	b.w	8007888 <arm_scale_f32>
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 80007d4:	f008 fbfc 	bl	8008fd0 <tanhf>
 80007d8:	eef0 7a6b 	vmov.f32	s15, s23
 80007dc:	eee0 7a4c 	vfms.f32	s15, s0, s24
 80007e0:	e7b3      	b.n	800074a <supro_simulation_f32_process+0x1d2>
 80007e2:	bf00      	nop
 80007e4:	3dcccccd 	.word	0x3dcccccd
 80007e8:	2400109c 	.word	0x2400109c
 80007ec:	2400209c 	.word	0x2400209c
 80007f0:	00000000 	.word	0x00000000
 80007f4:	3f710983 	.word	0x3f710983
 80007f8:	3f186130 	.word	0x3f186130
 80007fc:	08009410 	.word	0x08009410
 8000800:	d267d638 	.word	0xd267d638
 8000804:	3f0d61b4 	.word	0x3f0d61b4
 8000808:	2400009c 	.word	0x2400009c
 800080c:	3ee53c98 	.word	0x3ee53c98
 8000810:	3f7db881 	.word	0x3f7db881
 8000814:	3f8e9370 	.word	0x3f8e9370
 8000818:	3f64018b 	.word	0x3f64018b
 800081c:	bf655493 	.word	0xbf655493
 8000820:	3f7fa057 	.word	0x3f7fa057
 8000824:	3f7f71fb 	.word	0x3f7f71fb
 8000828:	bed80d82 	.word	0xbed80d82
 800082c:	bf42bc17 	.word	0xbf42bc17
 8000830:	3f806a2a 	.word	0x3f806a2a
 8000834:	bed8ee5b 	.word	0xbed8ee5b
 8000838:	3f421c45 	.word	0x3f421c45
 800083c:	40d6c29a 	.word	0x40d6c29a
 8000840:	3f7df857 	.word	0x3f7df857
 8000844:	3ba3d70a 	.word	0x3ba3d70a

08000848 <fx_supro_init>:
{
 8000848:	b570      	push	{r4, r5, r6, lr}
    fx->states[0] = _dctm_static_mem_alloc(
 800084a:	2104      	movs	r1, #4
{
 800084c:	4604      	mov	r4, r0
    fx->states[0] = _dctm_static_mem_alloc(
 800084e:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8000852:	f000 f911 	bl	8000a78 <_dctm_static_mem_alloc>
 8000856:	4603      	mov	r3, r0
    fx->states[1] = _static_mem_alloc(
 8000858:	2104      	movs	r1, #4
 800085a:	f246 0018 	movw	r0, #24600	@ 0x6018
    fx->states[0] = _dctm_static_mem_alloc(
 800085e:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _static_mem_alloc(
 8000860:	f000 f920 	bl	8000aa4 <_static_mem_alloc>
 8000864:	4603      	mov	r3, r0
    fx->states[2] = _static_mem_alloc(
 8000866:	2104      	movs	r1, #4
 8000868:	203c      	movs	r0, #60	@ 0x3c
    fx->states[1] = _static_mem_alloc(
 800086a:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 800086c:	f000 f91a 	bl	8000aa4 <_static_mem_alloc>
        float32_t *fftBuf = (float32_t *)fx->states[1];
 8000870:	6926      	ldr	r6, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8000872:	6160      	str	r0, [r4, #20]
 8000874:	4605      	mov	r5, r0
        fir_h1_f32_init(&firs[0], &fftBuf[0 * BUFFER_OFFSET]);
 8000876:	4631      	mov	r1, r6
 8000878:	f000 f8aa 	bl	80009d0 <fir_h1_f32_init>
        fir_h2_f32_init(&firs[1], &fftBuf[1 * BUFFER_OFFSET]);
 800087c:	f242 0108 	movw	r1, #8200	@ 0x2008
 8000880:	f105 0014 	add.w	r0, r5, #20
 8000884:	4431      	add	r1, r6
 8000886:	f000 f8b7 	bl	80009f8 <fir_h2_f32_init>
        fir_h3_f32_init(&firs[2], &fftBuf[2 * BUFFER_OFFSET]);
 800088a:	f244 0110 	movw	r1, #16400	@ 0x4010
 800088e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5],
 8000892:	4d1d      	ldr	r5, [pc, #116]	@ (8000908 <fx_supro_init+0xc0>)
        fir_h3_f32_init(&firs[2], &fftBuf[2 * BUFFER_OFFSET]);
 8000894:	4431      	add	r1, r6
 8000896:	f000 f8c3 	bl	8000a20 <fir_h3_f32_init>
    fx->states[3] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 800089a:	2104      	movs	r1, #4
 800089c:	2010      	movs	r0, #16
 800089e:	f000 f8eb 	bl	8000a78 <_dctm_static_mem_alloc>
 80008a2:	4603      	mov	r3, r0
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 80008a4:	2104      	movs	r1, #4
 80008a6:	2010      	movs	r0, #16
    fx->states[3] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 80008a8:	61a3      	str	r3, [r4, #24]
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 80008aa:	f000 f8e5 	bl	8000a78 <_dctm_static_mem_alloc>
 80008ae:	4603      	mov	r3, r0
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 80008b0:	2104      	movs	r1, #4
 80008b2:	200c      	movs	r0, #12
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 80008b4:	61e3      	str	r3, [r4, #28]
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 80008b6:	f000 f8f5 	bl	8000aa4 <_static_mem_alloc>
 80008ba:	4603      	mov	r3, r0
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 80008bc:	2104      	movs	r1, #4
 80008be:	200c      	movs	r0, #12
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 80008c0:	6223      	str	r3, [r4, #32]
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 80008c2:	f000 f8ef 	bl	8000aa4 <_static_mem_alloc>
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5],
 80008c6:	69a3      	ldr	r3, [r4, #24]
 80008c8:	462a      	mov	r2, r5
 80008ca:	2101      	movs	r1, #1
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 80008cc:	6260      	str	r0, [r4, #36]	@ 0x24
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5],
 80008ce:	6a20      	ldr	r0, [r4, #32]
 80008d0:	f006 ff00 	bl	80076d4 <arm_biquad_cascade_df1_init_f32>
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[6],
 80008d4:	69e3      	ldr	r3, [r4, #28]
 80008d6:	462a      	mov	r2, r5
 80008d8:	2101      	movs	r1, #1
 80008da:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80008dc:	f006 fefa 	bl	80076d4 <arm_biquad_cascade_df1_init_f32>
    fx->states[7] = _static_mem_alloc(sizeof(supro_simulation_f32), _Alignof(supro_simulation_f32));
 80008e0:	2104      	movs	r1, #4
 80008e2:	203c      	movs	r0, #60	@ 0x3c
 80008e4:	f000 f8de 	bl	8000aa4 <_static_mem_alloc>
        fir_t     *firs      = (fir_t *)fx->states[2];
 80008e8:	6963      	ldr	r3, [r4, #20]
        float32_t *dtcmState = (float32_t *)fx->states[0];
 80008ea:	68e1      	ldr	r1, [r4, #12]
        supro_simulation_init_f32((supro_simulation_f32 *)fx->states[7],
 80008ec:	f103 0214 	add.w	r2, r3, #20
    fx->states[7] = _static_mem_alloc(sizeof(supro_simulation_f32), _Alignof(supro_simulation_f32));
 80008f0:	62a0      	str	r0, [r4, #40]	@ 0x28
    self->fir1  = fir1;
 80008f2:	62c3      	str	r3, [r0, #44]	@ 0x2c
        supro_simulation_init_f32((supro_simulation_f32 *)fx->states[7],
 80008f4:	3328      	adds	r3, #40	@ 0x28
    self->fir2  = fir2;
 80008f6:	6302      	str	r2, [r0, #48]	@ 0x30
    fx->process = supro_simulation_f32_process;
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <fx_supro_init+0xc4>)
    self->fir3  = fir3;
 80008fa:	e9c0 310d 	strd	r3, r1, [r0, #52]	@ 0x34
    fx->clean = fx_reverb_clean;
 80008fe:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <fx_supro_init+0xc8>)
 8000900:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
 8000904:	bd70      	pop	{r4, r5, r6, pc}
 8000906:	bf00      	nop
 8000908:	08009360 	.word	0x08009360
 800090c:	08000579 	.word	0x08000579
 8000910:	08000539 	.word	0x08000539

08000914 <fir_OD_M212_VINT_DYN_201_P05_00_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + OD_M212_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + OD_M212_SCRATCH_FLOATS + OD_M212_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 8000914:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 8000918:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 800091c:	440a      	add	r2, r1
void fir_OD_M212_VINT_DYN_201_P05_00_f32_init(fir_t *self, float *state){
 800091e:	b430      	push	{r4, r5}
    self->numSegments  = OD_M212_SEGMENTS;
    self->curr_fftidx  = 0;
 8000920:	2400      	movs	r4, #0
    self->numSegments  = OD_M212_SEGMENTS;
 8000922:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8000924:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < OD_M212_SEGMENTS; ++i) {
        IR_TABLE [i] = &_CAB_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000928:	4a03      	ldr	r2, [pc, #12]	@ (8000938 <fir_OD_M212_VINT_DYN_201_P05_00_f32_init+0x24>)
    self->numSegments  = OD_M212_SEGMENTS;
 800092a:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 800092c:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8000930:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_CAB_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000932:	e9c3 2100 	strd	r2, r1, [r3]
}
 8000936:	4770      	bx	lr
 8000938:	08009460 	.word	0x08009460

0800093c <fir_OD_M212_VINT_DYN_201_P05_00_f32_clean>:

void fir_OD_M212_VINT_DYN_201_P05_00_f32_clean(fir_t *self){

    for (uint32_t i = 0; i < OD_M212_SEGMENTS; ++i) {
    	self->ir_ffts [i]   = NULL;
 800093c:	2300      	movs	r3, #0
    	self->prev_ffts [i] = NULL;
 800093e:	e9d0 1200 	ldrd	r1, r2, [r0]
    	self->ir_ffts [i]   = NULL;
 8000942:	600b      	str	r3, [r1, #0]
    	self->prev_ffts [i] = NULL;
 8000944:	6013      	str	r3, [r2, #0]
    }

}
 8000946:	4770      	bx	lr

08000948 <fir_emt_140_dark_3_f32_init>:
#include "impulse_responses.h"
#include "stdio.h"


void fir_emt_140_dark_3_f32_init(fir_t *self, float *state){
 8000948:	b470      	push	{r4, r5, r6}
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + EMT_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + EMT_SCRATCH_FLOATS + EMT_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 800094a:	4c0e      	ldr	r4, [pc, #56]	@ (8000984 <fir_emt_140_dark_3_f32_init+0x3c>)
    self->numSegments  = EMT_SEGMENTS;
    self->curr_fftidx  = 0;
 800094c:	2500      	movs	r5, #0
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <fir_emt_140_dark_3_f32_init+0x40>)
    self->ir_ffts      = IR_TABLE;
 8000950:	f501 26b8 	add.w	r6, r1, #376832	@ 0x5c000
    self->prev_ffts    = PREV_TABLE;
 8000954:	440c      	add	r4, r1
 8000956:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <fir_emt_140_dark_3_f32_init+0x44>)
 8000958:	f503 2cb8 	add.w	ip, r3, #376832	@ 0x5c000
    self->ir_ffts      = IR_TABLE;
 800095c:	6006      	str	r6, [r0, #0]
    self->prev_ffts    = PREV_TABLE;
 800095e:	6044      	str	r4, [r0, #4]
    self->numSegments  = EMT_SEGMENTS;
 8000960:	440a      	add	r2, r1
 8000962:	242e      	movs	r4, #46	@ 0x2e
    self->curr_fftidx  = 0;
 8000964:	e9c0 5502 	strd	r5, r5, [r0, #8]
    self->numSegments  = EMT_SEGMENTS;
 8000968:	6104      	str	r4, [r0, #16]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
        IR_TABLE [i] = &_EMT_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 800096a:	f842 3f04 	str.w	r3, [r2, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 800096e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
 8000972:	f8c2 10b8 	str.w	r1, [r2, #184]	@ 0xb8
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 8000976:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800097a:	4563      	cmp	r3, ip
 800097c:	d1f5      	bne.n	800096a <fir_emt_140_dark_3_f32_init+0x22>
    }

}
 800097e:	bc70      	pop	{r4, r5, r6}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	0005c0b8 	.word	0x0005c0b8
 8000988:	0800b460 	.word	0x0800b460
 800098c:	0005bffc 	.word	0x0005bffc

08000990 <fir_emt_140_dark_3_f32_clean>:


void fir_emt_140_dark_3_f32_clean(fir_t *self)
{
 8000990:	4603      	mov	r3, r0
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
    	self->ir_ffts [i]   = NULL;
 8000992:	6800      	ldr	r0, [r0, #0]
{
 8000994:	b510      	push	{r4, lr}
    	self->prev_ffts [i] = NULL;
 8000996:	685c      	ldr	r4, [r3, #4]
 8000998:	f100 03b7 	add.w	r3, r0, #183	@ 0xb7
 800099c:	1b1b      	subs	r3, r3, r4
 800099e:	f5b3 7fb7 	cmp.w	r3, #366	@ 0x16e
 80009a2:	d90a      	bls.n	80009ba <fir_emt_140_dark_3_f32_clean+0x2a>
    	self->ir_ffts [i]   = NULL;
 80009a4:	22b8      	movs	r2, #184	@ 0xb8
 80009a6:	2100      	movs	r1, #0
 80009a8:	f007 fd2f 	bl	800840a <memset>
    	self->prev_ffts [i] = NULL;
 80009ac:	4620      	mov	r0, r4
 80009ae:	22b8      	movs	r2, #184	@ 0xb8
 80009b0:	2100      	movs	r1, #0
    }
}
 80009b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	self->prev_ffts [i] = NULL;
 80009b6:	f007 bd28 	b.w	800840a <memset>
 80009ba:	1f03      	subs	r3, r0, #4
 80009bc:	1f22      	subs	r2, r4, #4
 80009be:	30b4      	adds	r0, #180	@ 0xb4
    	self->ir_ffts [i]   = NULL;
 80009c0:	2100      	movs	r1, #0
 80009c2:	f843 1f04 	str.w	r1, [r3, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 80009c6:	4283      	cmp	r3, r0
    	self->prev_ffts [i] = NULL;
 80009c8:	f842 1f04 	str.w	r1, [r2, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 80009cc:	d1f9      	bne.n	80009c2 <fir_emt_140_dark_3_f32_clean+0x32>
}
 80009ce:	bd10      	pop	{r4, pc}

080009d0 <fir_h1_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H1_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H1_SCRATCH_FLOATS + H1_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 80009d0:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 80009d4:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 80009d8:	440a      	add	r2, r1
void fir_h1_f32_init(fir_t *self, float *state){
 80009da:	b430      	push	{r4, r5}
    self->numSegments  = H1_SEGMENTS;
    self->curr_fftidx  = 0;
 80009dc:	2400      	movs	r4, #0
    self->numSegments  = H1_SEGMENTS;
 80009de:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 80009e0:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H1_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H1_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 80009e4:	4a03      	ldr	r2, [pc, #12]	@ (80009f4 <fir_h1_f32_init+0x24>)
    self->numSegments  = H1_SEGMENTS;
 80009e6:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 80009e8:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 80009ec:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H1_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 80009ee:	e9c3 2100 	strd	r2, r1, [r3]
}
 80009f2:	4770      	bx	lr
 80009f4:	08067460 	.word	0x08067460

080009f8 <fir_h2_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H2_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H2_SCRATCH_FLOATS + H2_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 80009f8:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 80009fc:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 8000a00:	440a      	add	r2, r1
void fir_h2_f32_init(fir_t *self, float *state){
 8000a02:	b430      	push	{r4, r5}
    self->numSegments  = H2_SEGMENTS;
    self->curr_fftidx  = 0;
 8000a04:	2400      	movs	r4, #0
    self->numSegments  = H2_SEGMENTS;
 8000a06:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8000a08:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H2_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H2_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000a0c:	4a03      	ldr	r2, [pc, #12]	@ (8000a1c <fir_h2_f32_init+0x24>)
    self->numSegments  = H2_SEGMENTS;
 8000a0e:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 8000a10:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8000a14:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H2_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000a16:	e9c3 2100 	strd	r2, r1, [r3]
}
 8000a1a:	4770      	bx	lr
 8000a1c:	08069460 	.word	0x08069460

08000a20 <fir_h3_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H3_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H3_SCRATCH_FLOATS + H3_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 8000a20:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 8000a24:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 8000a28:	440a      	add	r2, r1
void fir_h3_f32_init(fir_t *self, float *state){
 8000a2a:	b430      	push	{r4, r5}
    self->numSegments  = H3_SEGMENTS;
    self->curr_fftidx  = 0;
 8000a2c:	2400      	movs	r4, #0
    self->numSegments  = H3_SEGMENTS;
 8000a2e:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8000a30:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H3_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H3_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000a34:	4a03      	ldr	r2, [pc, #12]	@ (8000a44 <fir_h3_f32_init+0x24>)
    self->numSegments  = H3_SEGMENTS;
 8000a36:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 8000a38:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8000a3c:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H3_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8000a3e:	e9c3 2100 	strd	r2, r1, [r3]
}
 8000a42:	4770      	bx	lr
 8000a44:	0806b460 	.word	0x0806b460

08000a48 <dctm_pool_init>:
 * Clears the dtcm_static_pool to zero and resets the head pointer.
 * Must be called once at system startup before any DTCM allocations.
 */
void dctm_pool_init()
{
    dtcm_pool_head = 0u;
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <dctm_pool_init+0x10>)
    memset(dtcm_static_pool, 0, DTCM_STATIC_POOL_SIZE);
 8000a4c:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <dctm_pool_init+0x14>)
    dtcm_pool_head = 0u;
 8000a52:	6019      	str	r1, [r3, #0]
    memset(dtcm_static_pool, 0, DTCM_STATIC_POOL_SIZE);
 8000a54:	f007 bcd9 	b.w	800840a <memset>
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000020 	.word	0x20000020

08000a60 <static_pool_init>:
 * Clears the static_pool to zero and resets the head pointer.
 * Must be called once at system startup before any SRAM allocations.
 */
void static_pool_init()
{
    pool_head = 0u;
 8000a60:	2100      	movs	r1, #0
 8000a62:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <static_pool_init+0x10>)
    memset(static_pool, 0, STATIC_POOL_SIZE);
 8000a64:	f44f 22d0 	mov.w	r2, #425984	@ 0x68000
 8000a68:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <static_pool_init+0x14>)
    pool_head = 0u;
 8000a6a:	6019      	str	r1, [r3, #0]
    memset(static_pool, 0, STATIC_POOL_SIZE);
 8000a6c:	f007 bccd 	b.w	800840a <memset>
 8000a70:	2400309c 	.word	0x2400309c
 8000a74:	240030a0 	.word	0x240030a0

08000a78 <_dctm_static_mem_alloc>:
 * @param align Required byte alignment for the returned pointer.
 * @return Pointer to the allocated block within dtcm_static_pool.
 *         On overflow, calls _memory_alloc_error_handler().
 */
void *_dctm_static_mem_alloc(size_t size, size_t align)
{
 8000a78:	b410      	push	{r4}
    size_t off = align_up(dtcm_pool_head, align);
 8000a7a:	4c08      	ldr	r4, [pc, #32]	@ (8000a9c <_dctm_static_mem_alloc+0x24>)
    return (x + (align - 1u)) & ~(align - 1u);
 8000a7c:	424a      	negs	r2, r1
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	440b      	add	r3, r1
 8000a84:	4013      	ands	r3, r2

    if (off + size > DTCM_STATIC_POOL_SIZE) {
 8000a86:	18c2      	adds	r2, r0, r3
 8000a88:	f5b2 4f20 	cmp.w	r2, #40960	@ 0xa000
 8000a8c:	d805      	bhi.n	8000a9a <_dctm_static_mem_alloc+0x22>
        _memory_alloc_error_handler();
    }

    dtcm_pool_head = off + size;
    return &dtcm_static_pool[off];
 8000a8e:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <_dctm_static_mem_alloc+0x28>)
    dtcm_pool_head = off + size;
 8000a90:	6022      	str	r2, [r4, #0]
}
 8000a92:	4418      	add	r0, r3
 8000a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	e7fe      	b.n	8000a9a <_dctm_static_mem_alloc+0x22>
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000020 	.word	0x20000020

08000aa4 <_static_mem_alloc>:
 * @param align Required byte alignment for the returned pointer.
 * @return Pointer to the allocated block within static_pool.
 *         On overflow, calls _memory_alloc_error_handler().
 */
void *_static_mem_alloc(size_t size, size_t align)
{
 8000aa4:	b410      	push	{r4}
    size_t off = align_up(pool_head, align);
 8000aa6:	4c08      	ldr	r4, [pc, #32]	@ (8000ac8 <_static_mem_alloc+0x24>)
    return (x + (align - 1u)) & ~(align - 1u);
 8000aa8:	424a      	negs	r2, r1
 8000aaa:	6823      	ldr	r3, [r4, #0]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	440b      	add	r3, r1
 8000ab0:	4013      	ands	r3, r2

    if (off + size > STATIC_POOL_SIZE) {
 8000ab2:	18c2      	adds	r2, r0, r3
 8000ab4:	f5b2 2fd0 	cmp.w	r2, #425984	@ 0x68000
 8000ab8:	d805      	bhi.n	8000ac6 <_static_mem_alloc+0x22>
        _memory_alloc_error_handler();
    }

    pool_head = off + size;
    return &static_pool[off];
 8000aba:	4804      	ldr	r0, [pc, #16]	@ (8000acc <_static_mem_alloc+0x28>)
    pool_head = off + size;
 8000abc:	6022      	str	r2, [r4, #0]
}
 8000abe:	4418      	add	r0, r3
 8000ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	e7fe      	b.n	8000ac6 <_static_mem_alloc+0x22>
 8000ac8:	2400309c 	.word	0x2400309c
 8000acc:	240030a0 	.word	0x240030a0

08000ad0 <HAL_ADC_ConvHalfCpltCallback>:
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000ad2:	f003 021f 	and.w	r2, r3, #31
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ad6:	f3bf 8f4f 	dsb	sy
 8000ada:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000ade:	480a      	ldr	r0, [pc, #40]	@ (8000b08 <HAL_ADC_ConvHalfCpltCallback+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8000ae0:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000ae2:	f8c0 325c 	str.w	r3, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000ae6:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000ae8:	1aca      	subs	r2, r1, r3
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	dcf9      	bgt.n	8000ae2 <HAL_ADC_ConvHalfCpltCallback+0x12>
 8000aee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000af2:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[0…BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)adcInput,
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcHalfComplete(&apipe, adcInput);
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000af8:	4902      	ldr	r1, [pc, #8]	@ (8000b04 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000afa:	6943      	ldr	r3, [r0, #20]
 8000afc:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 8000b00:	4718      	bx	r3
 8000b02:	bf00      	nop
 8000b04:	2406c0a4 	.word	0x2406c0a4
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	2407c14c 	.word	0x2407c14c

08000b10 <HAL_ADC_ConvCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000b10:	490d      	ldr	r1, [pc, #52]	@ (8000b48 <HAL_ADC_ConvCpltCallback+0x38>)
 8000b12:	f001 021f 	and.w	r2, r1, #31
 8000b16:	f502 6300 	add.w	r3, r2, #2048	@ 0x800
  __ASM volatile ("dsb 0xF":::"memory");
 8000b1a:	f3bf 8f4f 	dsb	sy
 8000b1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000b22:	480a      	ldr	r0, [pc, #40]	@ (8000b4c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b24:	4411      	add	r1, r2
 8000b26:	1aca      	subs	r2, r1, r3
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000b28:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8000b2a:	2b00      	cmp	r3, #0
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000b2c:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
      } while ( op_size > 0 );
 8000b30:	dcf9      	bgt.n	8000b26 <HAL_ADC_ConvCpltCallback+0x16>
 8000b32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b36:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[BUFFER_SIZE…2*BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)&adcInput[BUFFER_SIZE],
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcComplete(&apipe, adcInput);
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <HAL_ADC_ConvCpltCallback+0x40>)
 8000b3c:	4905      	ldr	r1, [pc, #20]	@ (8000b54 <HAL_ADC_ConvCpltCallback+0x44>)
 8000b3e:	6983      	ldr	r3, [r0, #24]
 8000b40:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 8000b44:	4718      	bx	r3
 8000b46:	bf00      	nop
 8000b48:	2406c8a4 	.word	0x2406c8a4
 8000b4c:	e000ed00 	.word	0xe000ed00
 8000b50:	2407c14c 	.word	0x2407c14c
 8000b54:	2406c0a4 	.word	0x2406c0a4

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b530      	push	{r4, r5, lr}
 8000b5a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5c:	224c      	movs	r2, #76	@ 0x4c
 8000b5e:	2100      	movs	r1, #0
 8000b60:	a80a      	add	r0, sp, #40	@ 0x28
 8000b62:	f007 fc52 	bl	800840a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b66:	2220      	movs	r2, #32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	a802      	add	r0, sp, #8
 8000b6c:	f007 fc4d 	bl	800840a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b70:	2002      	movs	r0, #2
 8000b72:	f003 fcdd 	bl	8004530 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b76:	4a24      	ldr	r2, [pc, #144]	@ (8000c08 <SystemClock_Config+0xb0>)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <SystemClock_Config+0xb4>)
 8000b7c:	9101      	str	r1, [sp, #4]
 8000b7e:	6991      	ldr	r1, [r2, #24]
 8000b80:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8000b84:	6191      	str	r1, [r2, #24]
 8000b86:	6991      	ldr	r1, [r2, #24]
 8000b88:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 8000b8c:	9101      	str	r1, [sp, #4]
 8000b8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000b90:	f041 0101 	orr.w	r1, r1, #1
 8000b94:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba0:	6993      	ldr	r3, [r2, #24]
 8000ba2:	049b      	lsls	r3, r3, #18
 8000ba4:	d5fc      	bpl.n	8000ba0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba6:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba8:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000baa:	2101      	movs	r1, #1
 8000bac:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bae:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bb0:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb2:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bb6:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bb8:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bba:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bbc:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bbe:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bc6:	233c      	movs	r3, #60	@ 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc8:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bcc:	e9cd 5315 	strd	r5, r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd0:	f003 fd44 	bl	800465c <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	b108      	cbz	r0, 8000bdc <SystemClock_Config+0x84>
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bda:	e7fe      	b.n	8000bda <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000be0:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000be2:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be4:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be6:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000be8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bea:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bec:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bee:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf6:	e9cd 4307 	strd	r4, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bfa:	f004 f8ab 	bl	8004d54 <HAL_RCC_ClockConfig>
 8000bfe:	b108      	cbz	r0, 8000c04 <SystemClock_Config+0xac>
 8000c00:	b672      	cpsid	i
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <SystemClock_Config+0xaa>
}
 8000c04:	b01f      	add	sp, #124	@ 0x7c
 8000c06:	bd30      	pop	{r4, r5, pc}
 8000c08:	58024800 	.word	0x58024800
 8000c0c:	58000400 	.word	0x58000400

08000c10 <PeriphCommonClock_Config>:
{
 8000c10:	b500      	push	{lr}
 8000c12:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c14:	22b8      	movs	r2, #184	@ 0xb8
 8000c16:	2100      	movs	r1, #0
 8000c18:	a802      	add	r0, sp, #8
 8000c1a:	f007 fbf6 	bl	800840a <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000c1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000c22:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c24:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000c26:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2a:	f004 fb25 	bl	8005278 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	b108      	cbz	r0, 8000c34 <PeriphCommonClock_Config+0x24>
 8000c30:	b672      	cpsid	i
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <PeriphCommonClock_Config+0x22>
}
 8000c34:	b031      	add	sp, #196	@ 0xc4
 8000c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c3a:	bf00      	nop

08000c3c <main>:
{
 8000c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c40:	2400      	movs	r4, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c42:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4d7f      	ldr	r5, [pc, #508]	@ (8000e44 <main+0x208>)
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 8000c46:	2708      	movs	r7, #8
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
 8000c48:	f44f 5800 	mov.w	r8, #8192	@ 0x2000
{
 8000c4c:	ed2d 8b02 	vpush	{d8}
 8000c50:	b093      	sub	sp, #76	@ 0x4c
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c52:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8000c56:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_MPU_Disable();
 8000c5a:	f001 ff9b 	bl	8002b94 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c5e:	f248 721f 	movw	r2, #34591	@ 0x871f
 8000c62:	f240 1301 	movw	r3, #257	@ 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c66:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c68:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8000c6e:	e9cd 420a 	strd	r4, r2, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c72:	f001 ffad 	bl	8002bd0 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c76:	2004      	movs	r0, #4
 8000c78:	f001 ff9a 	bl	8002bb0 <HAL_MPU_Enable>
  HAL_Init();
 8000c7c:	f000 ffa0 	bl	8001bc0 <HAL_Init>
  SystemClock_Config();
 8000c80:	f7ff ff6a 	bl	8000b58 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000c84:	f7ff ffc4 	bl	8000c10 <PeriphCommonClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	a909      	add	r1, sp, #36	@ 0x24
 8000c8e:	486e      	ldr	r0, [pc, #440]	@ (8000e48 <main+0x20c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4333      	orrs	r3, r6
 8000c92:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000c96:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000c9a:	4033      	ands	r3, r6
 8000c9c:	9304      	str	r3, [sp, #16]
 8000c9e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000cac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 8000cb0:	9709      	str	r7, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	9305      	str	r3, [sp, #20]
 8000cb8:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8000cbe:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f003 fa25 	bl	8004110 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);   // set high
 8000cc6:	4632      	mov	r2, r6
 8000cc8:	4639      	mov	r1, r7
 8000cca:	485f      	ldr	r0, [pc, #380]	@ (8000e48 <main+0x20c>)
 8000ccc:	f003 fc2c 	bl	8004528 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	a909      	add	r1, sp, #36	@ 0x24
 8000cd2:	485d      	ldr	r0, [pc, #372]	@ (8000e48 <main+0x20c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
 8000cd6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000cda:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f003 fa17 	bl	8004110 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // set high
 8000ce2:	4632      	mov	r2, r6
 8000ce4:	4641      	mov	r1, r8
 8000ce6:	4858      	ldr	r0, [pc, #352]	@ (8000e48 <main+0x20c>)
 8000ce8:	f003 fc1e 	bl	8004528 <HAL_GPIO_WritePin>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cec:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cf0:	4622      	mov	r2, r4
 8000cf2:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf4:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cf6:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf8:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000cfc:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc1.Instance = ADC1;
 8000d00:	4d52      	ldr	r5, [pc, #328]	@ (8000e4c <main+0x210>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d02:	4033      	ands	r3, r6
 8000d04:	9303      	str	r3, [sp, #12]
 8000d06:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d08:	f001 fee4 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d0c:	200b      	movs	r0, #11
 8000d0e:	f001 ff1d 	bl	8002b4c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d12:	4622      	mov	r2, r4
 8000d14:	4621      	mov	r1, r4
 8000d16:	200c      	movs	r0, #12
 8000d18:	f001 fedc 	bl	8002ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d1c:	200c      	movs	r0, #12
 8000d1e:	f001 ff15 	bl	8002b4c <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d22:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d26:	612f      	str	r7, [r5, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d28:	f44f 6c9c 	mov.w	ip, #1248	@ 0x4e0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d2c:	4f48      	ldr	r7, [pc, #288]	@ (8000e50 <main+0x214>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2e:	4628      	mov	r0, r5
  ADC_MultiModeTypeDef multimode = {0};
 8000d30:	9406      	str	r4, [sp, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d32:	940f      	str	r4, [sp, #60]	@ 0x3c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d34:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 8000d36:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d38:	772c      	strb	r4, [r5, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 8000d3a:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000d3e:	63ee      	str	r6, [r5, #60]	@ 0x3c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d40:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d48:	e9c5 c309 	strd	ip, r3, [r5, #36]	@ 0x24
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d4c:	2303      	movs	r3, #3
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8000d52:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8000d56:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  ADC_MultiModeTypeDef multimode = {0};
 8000d5a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d5e:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d62:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d66:	62eb      	str	r3, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d68:	f001 fcd8 	bl	800271c <HAL_ADC_Init>
 8000d6c:	b108      	cbz	r0, 8000d72 <main+0x136>
 8000d6e:	b672      	cpsid	i
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <main+0x134>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d72:	9006      	str	r0, [sp, #24]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d74:	a906      	add	r1, sp, #24
 8000d76:	4628      	mov	r0, r5
 8000d78:	f001 fe38 	bl	80029ec <HAL_ADCEx_MultiModeConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b108      	cbz	r0, 8000d84 <main+0x148>
 8000d80:	b672      	cpsid	i
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <main+0x146>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d84:	4c33      	ldr	r4, [pc, #204]	@ (8000e54 <main+0x218>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d86:	4628      	mov	r0, r5
  sConfig.Offset = 0;
 8000d88:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d8a:	2505      	movs	r5, #5
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d8c:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d90:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d92:	a909      	add	r1, sp, #36	@ 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d94:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d98:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d9c:	e9cd 530b 	strd	r5, r3, [sp, #44]	@ 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000da0:	2304      	movs	r3, #4
 8000da2:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da4:	f001 f8de 	bl	8001f64 <HAL_ADC_ConfigChannel>
 8000da8:	b108      	cbz	r0, 8000dae <main+0x172>
 8000daa:	b672      	cpsid	i
  while (1)
 8000dac:	e7fe      	b.n	8000dac <main+0x170>
  htim8.Instance = TIM8;
 8000dae:	4c2a      	ldr	r4, [pc, #168]	@ (8000e58 <main+0x21c>)
  htim8.Init.Prescaler = 50-1;
 8000db0:	2331      	movs	r3, #49	@ 0x31
 8000db2:	4a2a      	ldr	r2, [pc, #168]	@ (8000e5c <main+0x220>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	9008      	str	r0, [sp, #32]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	60a0      	str	r0, [r4, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db8:	61a0      	str	r0, [r4, #24]
  htim8.Init.Prescaler = 50-1;
 8000dba:	e9c4 2300 	strd	r2, r3, [r4]
  htim8.Init.Period = 100-1;
 8000dbe:	2363      	movs	r3, #99	@ 0x63
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc0:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8000dc4:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	e9cd 0006 	strd	r0, r0, [sp, #24]
  htim8.Init.RepetitionCounter = 0;
 8000dcc:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dd0:	4620      	mov	r0, r4
  htim8.Init.Period = 100-1;
 8000dd2:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dd4:	f005 fd02 	bl	80067dc <HAL_TIM_Base_Init>
 8000dd8:	b108      	cbz	r0, 8000dde <main+0x1a2>
 8000dda:	b672      	cpsid	i
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <main+0x1a0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000de2:	a909      	add	r1, sp, #36	@ 0x24
 8000de4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de6:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000de8:	f005 fdec 	bl	80069c4 <HAL_TIM_ConfigClockSource>
 8000dec:	4603      	mov	r3, r0
 8000dee:	b108      	cbz	r0, 8000df4 <main+0x1b8>
 8000df0:	b672      	cpsid	i
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <main+0x1b6>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000df8:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000dfa:	a906      	add	r1, sp, #24
 8000dfc:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dfe:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e00:	f005 fea8 	bl	8006b54 <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4601      	mov	r1, r0
 8000e06:	b108      	cbz	r0, 8000e0c <main+0x1d0>
 8000e08:	b672      	cpsid	i
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <main+0x1ce>
  DAC_ChannelConfTypeDef sConfig = {0};
 8000e0c:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 8000e0e:	4c14      	ldr	r4, [pc, #80]	@ (8000e60 <main+0x224>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000e10:	eb0d 0002 	add.w	r0, sp, r2
 8000e14:	f007 faf9 	bl	800840a <memset>
  hdac1.Instance = DAC1;
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <main+0x228>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e1a:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8000e1c:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e1e:	f001 ff07 	bl	8002c30 <HAL_DAC_Init>
 8000e22:	4602      	mov	r2, r0
 8000e24:	b108      	cbz	r0, 8000e2a <main+0x1ee>
 8000e26:	b672      	cpsid	i
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <main+0x1ec>
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000e2a:	231e      	movs	r3, #30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e2c:	a909      	add	r1, sp, #36	@ 0x24
 8000e2e:	4620      	mov	r0, r4
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e30:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000e32:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e36:	e9cd 260b 	strd	r2, r6, [sp, #44]	@ 0x2c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e3a:	f001 ffdd 	bl	8002df8 <HAL_DAC_ConfigChannel>
 8000e3e:	b198      	cbz	r0, 8000e68 <main+0x22c>
 8000e40:	b672      	cpsid	i
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <main+0x206>
 8000e44:	58024400 	.word	0x58024400
 8000e48:	58020800 	.word	0x58020800
 8000e4c:	2407c2c8 	.word	0x2407c2c8
 8000e50:	40022000 	.word	0x40022000
 8000e54:	43210000 	.word	0x43210000
 8000e58:	2407c178 	.word	0x2407c178
 8000e5c:	40010400 	.word	0x40010400
 8000e60:	2407c23c 	.word	0x2407c23c
 8000e64:	40007400 	.word	0x40007400
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e68:	4b7d      	ldr	r3, [pc, #500]	@ (8001060 <main+0x424>)
 8000e6a:	695a      	ldr	r2, [r3, #20]
 8000e6c:	f412 3280 	ands.w	r2, r2, #65536	@ 0x10000
 8000e70:	d123      	bne.n	8000eba <main+0x27e>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e76:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8000e7a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e7e:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e82:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e86:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8000e8a:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e8c:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e90:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e92:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
      } while (ways-- != 0U);
 8000e96:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e98:	f8c3 6260 	str.w	r6, [r3, #608]	@ 0x260
      } while (ways-- != 0U);
 8000e9c:	d2f9      	bcs.n	8000e92 <main+0x256>
    } while(sets-- != 0U);
 8000e9e:	3a20      	subs	r2, #32
 8000ea0:	f112 0f20 	cmn.w	r2, #32
 8000ea4:	d1f2      	bne.n	8000e8c <main+0x250>
 8000ea6:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000eaa:	695a      	ldr	r2, [r3, #20]
 8000eac:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000eb0:	615a      	str	r2, [r3, #20]
 8000eb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eb6:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	4b69      	ldr	r3, [pc, #420]	@ (8001060 <main+0x424>)
 8000ebc:	695a      	ldr	r2, [r3, #20]
 8000ebe:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000ec2:	d111      	bne.n	8000ee8 <main+0x2ac>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ec8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ecc:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ed4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ed8:	695a      	ldr	r2, [r3, #20]
 8000eda:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000ede:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ee4:	f3bf 8f6f 	isb	sy
  dctm_pool_init();
 8000ee8:	f7ff fdae 	bl	8000a48 <dctm_pool_init>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 8000eec:	2400      	movs	r4, #0
  static_pool_init();
 8000eee:	f7ff fdb7 	bl	8000a60 <static_pool_init>
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 8000ef2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ef6:	485b      	ldr	r0, [pc, #364]	@ (8001064 <main+0x428>)
  for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8000ef8:	4625      	mov	r5, r4
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 8000efa:	f005 fed3 	bl	8006ca4 <arm_rfft_fast_init_f32>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000efe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000f02:	2100      	movs	r1, #0
 8000f04:	4858      	ldr	r0, [pc, #352]	@ (8001068 <main+0x42c>)
 8000f06:	f001 fd15 	bl	8002934 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcInput, BUFFER_SIZE*2);
 8000f0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f0e:	4957      	ldr	r1, [pc, #348]	@ (800106c <main+0x430>)
 8000f10:	4855      	ldr	r0, [pc, #340]	@ (8001068 <main+0x42c>)
 8000f12:	f001 fa8f 	bl	8002434 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 8000f16:	4621      	mov	r1, r4
 8000f18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f1c:	4a54      	ldr	r2, [pc, #336]	@ (8001070 <main+0x434>)
 8000f1e:	9400      	str	r4, [sp, #0]
 8000f20:	4854      	ldr	r0, [pc, #336]	@ (8001074 <main+0x438>)
 8000f22:	f001 fe9b 	bl	8002c5c <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 8000f26:	4854      	ldr	r0, [pc, #336]	@ (8001078 <main+0x43c>)
  nodes[0] = &fx_handle_0;
 8000f28:	4e54      	ldr	r6, [pc, #336]	@ (800107c <main+0x440>)
  HAL_TIM_Base_Start(&htim8);
 8000f2a:	f005 fcfd 	bl	8006928 <HAL_TIM_Base_Start>
  nodes[0] = &fx_handle_0;
 8000f2e:	4954      	ldr	r1, [pc, #336]	@ (8001080 <main+0x444>)
  nodes[1] = &fx_handle_1;
 8000f30:	4a54      	ldr	r2, [pc, #336]	@ (8001084 <main+0x448>)
  nodes[2]->type = FX_REVERB;
 8000f32:	4637      	mov	r7, r6
  nodes[2] = &fx_handle_2;
 8000f34:	4b54      	ldr	r3, [pc, #336]	@ (8001088 <main+0x44c>)
  nodes[1] = &fx_handle_1;
 8000f36:	e9c6 1200 	strd	r1, r2, [r6]
  nodes[2] = &fx_handle_2;
 8000f3a:	60b3      	str	r3, [r6, #8]
  srand(HAL_GetTick());  // seed the PRNG
 8000f3c:	f000 fe7c 	bl	8001c38 <HAL_GetTick>
 8000f40:	f007 f930 	bl	80081a4 <srand>
  pipeInit(&apipe);
 8000f44:	4851      	ldr	r0, [pc, #324]	@ (800108c <main+0x450>)
 8000f46:	f000 fbc3 	bl	80016d0 <pipeInit>
  nodes[0]->type = FX_SUPRO;
 8000f4a:	6833      	ldr	r3, [r6, #0]
 8000f4c:	2102      	movs	r1, #2
  nodes[1]->type = FX_CABINET;
 8000f4e:	2201      	movs	r2, #1
  nodes[0]->type = FX_SUPRO;
 8000f50:	7019      	strb	r1, [r3, #0]
  nodes[1]->type = FX_CABINET;
 8000f52:	6873      	ldr	r3, [r6, #4]
 8000f54:	701a      	strb	r2, [r3, #0]
  nodes[2]->type = FX_REVERB;
 8000f56:	68b3      	ldr	r3, [r6, #8]
 8000f58:	701c      	strb	r4, [r3, #0]
  for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8000f5a:	4c4d      	ldr	r4, [pc, #308]	@ (8001090 <main+0x454>)
		 fx_init[nodes[i]->type](nodes[i]);
 8000f5c:	f857 0b04 	ldr.w	r0, [r7], #4
  for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8000f60:	3501      	adds	r5, #1
		 fx_init[nodes[i]->type](nodes[i]);
 8000f62:	7803      	ldrb	r3, [r0, #0]
 8000f64:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000f68:	4798      	blx	r3
  for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8000f6a:	2d03      	cmp	r5, #3
 8000f6c:	d1f6      	bne.n	8000f5c <main+0x320>
 8000f6e:	4f49      	ldr	r7, [pc, #292]	@ (8001094 <main+0x458>)
 8000f70:	4d49      	ldr	r5, [pc, #292]	@ (8001098 <main+0x45c>)
 8000f72:	4c4a      	ldr	r4, [pc, #296]	@ (800109c <main+0x460>)
		 apipe.updateDelayBuffer(&apipe);
 8000f74:	f5a7 4870 	sub.w	r8, r7, #61440	@ 0xf000
		if (( sum_of_squares / BUFFER_SIZE) < noise_thresh){
 8000f78:	ed9f 8a49 	vldr	s16, [pc, #292]	@ 80010a0 <main+0x464>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f7c:	f8df a138 	ldr.w	sl, [pc, #312]	@ 80010b8 <main+0x47c>
	  if (apipe.bufferReady)
 8000f80:	7c3b      	ldrb	r3, [r7, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d061      	beq.n	800104a <main+0x40e>
		 apipe.updateDelayBuffer(&apipe);
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	4640      	mov	r0, r8
 8000f8a:	4798      	blx	r3
		 apipe.loadProcess(&apipe);
 8000f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8e:	4640      	mov	r0, r8
 8000f90:	4798      	blx	r3
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2108      	movs	r1, #8
 8000f96:	4650      	mov	r0, sl
 8000f98:	f003 fac6 	bl	8004528 <HAL_GPIO_WritePin>
		for (int i = 0; i < BUFFER_SIZE; i++) {
 8000f9c:	4b41      	ldr	r3, [pc, #260]	@ (80010a4 <main+0x468>)
			sum_of_squares += apipe.processBuffer[i] * apipe.processBuffer[i];
 8000f9e:	edd4 7a00 	vldr	s15, [r4]
 8000fa2:	ecb3 7a01 	vldmia	r3!, {s14}
 8000fa6:	eee7 7a07 	vfma.f32	s15, s14, s14
		for (int i = 0; i < BUFFER_SIZE; i++) {
 8000faa:	42ab      	cmp	r3, r5
			sum_of_squares += apipe.processBuffer[i] * apipe.processBuffer[i];
 8000fac:	edc4 7a00 	vstr	s15, [r4]
		for (int i = 0; i < BUFFER_SIZE; i++) {
 8000fb0:	d1f5      	bne.n	8000f9e <main+0x362>
		if (( sum_of_squares / BUFFER_SIZE) < noise_thresh){
 8000fb2:	edd4 7a00 	vldr	s15, [r4]
 8000fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80010a8 <main+0x46c>)
 8000fb8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc8:	d441      	bmi.n	800104e <main+0x412>
		sum_of_squares = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	46b3      	mov	fp, r6
		 for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8000fce:	f04f 0900 	mov.w	r9, #0
		sum_of_squares = 0;
 8000fd2:	6023      	str	r3, [r4, #0]
				nodes[i]->process(nodes[i], &apipe);
 8000fd4:	f85b 0b04 	ldr.w	r0, [fp], #4
		 for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8000fd8:	f109 0901 	add.w	r9, r9, #1
				nodes[i]->process(nodes[i], &apipe);
 8000fdc:	4641      	mov	r1, r8
 8000fde:	6843      	ldr	r3, [r0, #4]
 8000fe0:	4798      	blx	r3
		 for (int i = 0 ; i< 3 ; ++i) { // i < MAX_NODES
 8000fe2:	f1b9 0f03 	cmp.w	r9, #3
 8000fe6:	d1f5      	bne.n	8000fd4 <main+0x398>
	     arm_scale_f32(apipe.processBuffer, 0.01, apipe.processBuffer, BUFFER_SIZE);
 8000fe8:	492e      	ldr	r1, [pc, #184]	@ (80010a4 <main+0x468>)
 8000fea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fee:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 80010ac <main+0x470>
 8000ff2:	4608      	mov	r0, r1
		 apipe.updateDACOutput(&apipe, dacOutput);
 8000ff4:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8001070 <main+0x434>
	     arm_scale_f32(apipe.processBuffer, 0.01, apipe.processBuffer, BUFFER_SIZE);
 8000ff8:	f006 fc46 	bl	8007888 <arm_scale_f32>
		 arm_copy_f32(apipe.processBuffer, apipe.outBuffer, BUFFER_SIZE);
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <main+0x474>)
 8000ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001002:	6859      	ldr	r1, [r3, #4]
 8001004:	f103 0008 	add.w	r0, r3, #8
 8001008:	f005 fe1c 	bl	8006c44 <arm_copy_f32>
		 apipe.updateDACOutput(&apipe, dacOutput);
 800100c:	6a3b      	ldr	r3, [r7, #32]
 800100e:	4640      	mov	r0, r8
 8001010:	4649      	mov	r1, r9
 8001012:	4798      	blx	r3
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001014:	f009 021f 	and.w	r2, r9, #31
 8001018:	464b      	mov	r3, r9
 800101a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
  __ASM volatile ("dsb 0xF":::"memory");
 800101e:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001022:	490f      	ldr	r1, [pc, #60]	@ (8001060 <main+0x424>)
 8001024:	3a20      	subs	r2, #32
 8001026:	f8c1 3268 	str.w	r3, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800102a:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800102c:	2a00      	cmp	r2, #0
 800102e:	dcf9      	bgt.n	8001024 <main+0x3e8>
 8001030:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001034:	f3bf 8f6f 	isb	sy
		 apipe.bufferReady = false;
 8001038:	2300      	movs	r3, #0
		 volatile GPIO_PinState trig = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 800103a:	2108      	movs	r1, #8
 800103c:	4650      	mov	r0, sl
		 apipe.bufferReady = false;
 800103e:	743b      	strb	r3, [r7, #16]
		 volatile GPIO_PinState trig = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8001040:	f003 fa6c 	bl	800451c <HAL_GPIO_ReadPin>
 8001044:	f88d 0024 	strb.w	r0, [sp, #36]	@ 0x24
 8001048:	e79a      	b.n	8000f80 <main+0x344>
	      __WFI();
 800104a:	bf30      	wfi
 800104c:	e798      	b.n	8000f80 <main+0x344>
			 arm_fill_f32(0.0f, apipe.processBuffer, BUFFER_SIZE);
 800104e:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80010b4 <main+0x478>
 8001052:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001056:	4813      	ldr	r0, [pc, #76]	@ (80010a4 <main+0x468>)
 8001058:	f005 fdd6 	bl	8006c08 <arm_fill_f32>
 800105c:	e7b5      	b.n	8000fca <main+0x38e>
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	2406d0a4 	.word	0x2406d0a4
 8001068:	2407c2c8 	.word	0x2407c2c8
 800106c:	2406c0a4 	.word	0x2406c0a4
 8001070:	2406b0a4 	.word	0x2406b0a4
 8001074:	2407c23c 	.word	0x2407c23c
 8001078:	2407c178 	.word	0x2407c178
 800107c:	2406d0bc 	.word	0x2406d0bc
 8001080:	2406d120 	.word	0x2406d120
 8001084:	2406d0f4 	.word	0x2406d0f4
 8001088:	2406d0c8 	.word	0x2406d0c8
 800108c:	2406d14c 	.word	0x2406d14c
 8001090:	24000004 	.word	0x24000004
 8001094:	2407c14c 	.word	0x2407c14c
 8001098:	24072154 	.word	0x24072154
 800109c:	2406b0a0 	.word	0x2406b0a0
 80010a0:	3a800000 	.word	0x3a800000
 80010a4:	24071154 	.word	0x24071154
 80010a8:	24000000 	.word	0x24000000
 80010ac:	3c23d70a 	.word	0x3c23d70a
 80010b0:	2407114c 	.word	0x2407114c
 80010b4:	00000000 	.word	0x00000000
 80010b8:	58020800 	.word	0x58020800

080010bc <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
  while (1)
 80010be:	e7fe      	b.n	80010be <Error_Handler+0x2>

080010c0 <partitioned_fir_convolution_fft>:
__attribute__((section(".dtcm"), aligned(32))) float zeropad[FFT_SIZE];
float fftOut[FFT_SIZE];


void partitioned_fir_convolution_fft(pipe *pipe, fir_t *fir, float* overlap_state_buf )
{
 80010c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	float *zeropaddedinput = zeropad;
	float *overlap         = overlap_state_buf;

    // prepare input
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80010c4:	f244 0408 	movw	r4, #16392	@ 0x4008
{
 80010c8:	b08b      	sub	sp, #44	@ 0x2c
 80010ca:	4613      	mov	r3, r2
 80010cc:	460d      	mov	r5, r1
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80010ce:	4404      	add	r4, r0
 80010d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010d4:	4933      	ldr	r1, [pc, #204]	@ (80011a4 <partitioned_fir_convolution_fft+0xe4>)
 80010d6:	4620      	mov	r0, r4
{
 80010d8:	9307      	str	r3, [sp, #28]
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80010da:	f005 fdb3 	bl	8006c44 <arm_copy_f32>
    arm_fill_f32(0.0f, &zeropaddedinput[BUFFER_SIZE], BUFFER_SIZE);
 80010de:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80011a8 <partitioned_fir_convolution_fft+0xe8>
 80010e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010e6:	4831      	ldr	r0, [pc, #196]	@ (80011ac <partitioned_fir_convolution_fft+0xec>)
 80010e8:	f005 fd8e 	bl	8006c08 <arm_fill_f32>

    // forward FFT
    arm_rfft_fast_f32(&fft, zeropaddedinput, fftOut, 0);
 80010ec:	2300      	movs	r3, #0
 80010ee:	4a30      	ldr	r2, [pc, #192]	@ (80011b0 <partitioned_fir_convolution_fft+0xf0>)
 80010f0:	492c      	ldr	r1, [pc, #176]	@ (80011a4 <partitioned_fir_convolution_fft+0xe4>)
 80010f2:	4830      	ldr	r0, [pc, #192]	@ (80011b4 <partitioned_fir_convolution_fft+0xf4>)
 80010f4:	f005 fe88 	bl	8006e08 <arm_rfft_fast_f32>

    // save index and spectrum
    fir->prev_fftidx = fir->curr_fftidx;
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 80010f8:	482d      	ldr	r0, [pc, #180]	@ (80011b0 <partitioned_fir_convolution_fft+0xf0>)
 80010fa:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80010fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001102:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    fir->prev_fftidx = fir->curr_fftidx;
 8001106:	60eb      	str	r3, [r5, #12]
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 8001108:	f005 fd9c 	bl	8006c44 <arm_copy_f32>

    arm_fill_f32(0.0f, fftOut, FFT_SIZE);              /* clear accumulator */
 800110c:	4828      	ldr	r0, [pc, #160]	@ (80011b0 <partitioned_fir_convolution_fft+0xf0>)
 800110e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001112:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80011a8 <partitioned_fir_convolution_fft+0xe8>
 8001116:	f005 fd77 	bl	8006c08 <arm_fill_f32>

    const uint32_t segs = fir->numSegments;
 800111a:	692b      	ldr	r3, [r5, #16]
 800111c:	f8df e090 	ldr.w	lr, [pc, #144]	@ 80011b0 <partitioned_fir_convolution_fft+0xf0>
    uint32_t i = 0;
 8001120:	f04f 0c00 	mov.w	ip, #0
    const uint32_t segs = fir->numSegments;
 8001124:	9303      	str	r3, [sp, #12]
    uint32_t idx = fir->prev_fftidx;

    // partitioned convolution with pointer arithmetic
    do {
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8001126:	686b      	ldr	r3, [r5, #4]
 8001128:	f50e 50ff 	add.w	r0, lr, #8160	@ 0x1fe0
		}
		if (idx-- == 0) {
			idx = segs - 1;
		}

    } while (idx != fir->curr_fftidx);
 800112c:	68aa      	ldr	r2, [r5, #8]
 800112e:	f50e 5700 	add.w	r7, lr, #8192	@ 0x2000
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8001132:	9305      	str	r3, [sp, #20]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8001134:	682b      	ldr	r3, [r5, #0]
    } while (idx != fir->curr_fftidx);
 8001136:	9204      	str	r2, [sp, #16]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8001138:	9306      	str	r3, [sp, #24]
 800113a:	f50e 5380 	add.w	r3, lr, #4096	@ 0x1000
    uint32_t idx = fir->prev_fftidx;
 800113e:	68ee      	ldr	r6, [r5, #12]
                     float accR = __builtin_fmaf(xr, hr,
 8001140:	f603 72f8 	addw	r2, r3, #4088	@ 0xff8
 8001144:	f603 7be8 	addw	fp, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8001148:	f603 7aec 	addw	sl, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 800114c:	f503 697f 	add.w	r9, r3, #4080	@ 0xff0
                     float accI = __builtin_fmaf(xr, hi,
 8001150:	f603 78f4 	addw	r8, r3, #4084	@ 0xff4
 8001154:	f603 73fc 	addw	r3, r3, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 8001158:	9201      	str	r2, [sp, #4]
                     float accI = __builtin_fmaf(xr, hi,
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	e9cd 4508 	strd	r4, r5, [sp, #32]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8001160:	9b05      	ldr	r3, [sp, #20]
                 yPtr[0] += xPtr[0] * hPtr[0];
 8001162:	ed9e 7a00 	vldr	s14, [lr]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8001166:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 800116a:	9b06      	ldr	r3, [sp, #24]
                 yPtr[1] += xPtr[1] * hPtr[1];
 800116c:	edde 7a01 	vldr	s15, [lr, #4]
 8001170:	f105 0158 	add.w	r1, r5, #88	@ 0x58
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8001174:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
                 yPtr[0] += xPtr[0] * hPtr[0];
 8001178:	ed95 5a00 	vldr	s10, [r5]
 800117c:	edd4 5a00 	vldr	s11, [r4]
 8001180:	f104 0258 	add.w	r2, r4, #88	@ 0x58
                 yPtr[1] += xPtr[1] * hPtr[1];
 8001184:	ed95 6a01 	vldr	s12, [r5, #4]
 8001188:	edd4 6a01 	vldr	s13, [r4, #4]
                 yPtr[0] += xPtr[0] * hPtr[0];
 800118c:	eea5 7a25 	vfma.f32	s14, s10, s11
                 yPtr[1] += xPtr[1] * hPtr[1];
 8001190:	eee6 7a26 	vfma.f32	s15, s12, s13
                 yPtr[0] += xPtr[0] * hPtr[0];
 8001194:	ed8e 7a00 	vstr	s14, [lr]
                 yPtr[1] += xPtr[1] * hPtr[1];
 8001198:	edce 7a01 	vstr	s15, [lr, #4]
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 800119c:	f8df e010 	ldr.w	lr, [pc, #16]	@ 80011b0 <partitioned_fir_convolution_fft+0xf0>
 80011a0:	4673      	mov	r3, lr
 80011a2:	e009      	b.n	80011b8 <partitioned_fir_convolution_fft+0xf8>
 80011a4:	2000a020 	.word	0x2000a020
 80011a8:	00000000 	.word	0x00000000
 80011ac:	2000b020 	.word	0x2000b020
 80011b0:	2407c32c 	.word	0x2407c32c
 80011b4:	2406d0a4 	.word	0x2406d0a4
                         float xr = *xPtr++; float xi = *xPtr++;
 80011b8:	ed51 7a13 	vldr	s15, [r1, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80011bc:	3350      	adds	r3, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 80011be:	ed52 2a14 	vldr	s5, [r2, #-80]	@ 0xffffffb0
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80011c2:	3150      	adds	r1, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 80011c4:	ed52 3a13 	vldr	s7, [r2, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 80011c8:	3250      	adds	r2, #80	@ 0x50
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80011ca:	ed13 4a12 	vldr	s8, [r3, #-72]	@ 0xffffffb8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80011ce:	ed53 4a11 	vldr	s9, [r3, #-68]	@ 0xffffffbc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80011d2:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float xr = *xPtr++; float xi = *xPtr++;
 80011d6:	ed11 3a28 	vldr	s6, [r1, #-160]	@ 0xffffff60
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80011da:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80011de:	ed13 5a10 	vldr	s10, [r3, #-64]	@ 0xffffffc0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80011e2:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80011e6:	ed53 6a0e 	vldr	s13, [r3, #-56]	@ 0xffffffc8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80011ea:	ed13 6a0d 	vldr	s12, [r3, #-52]	@ 0xffffffcc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80011ee:	ed13 7a0c 	vldr	s14, [r3, #-48]	@ 0xffffffd0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80011f2:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80011f6:	ed53 7a0b 	vldr	s15, [r3, #-44]	@ 0xffffffd4
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80011fa:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 80011fe:	ed03 4a12 	vstr	s8, [r3, #-72]	@ 0xffffffb8
                         *(yPtr+1) = accI;
 8001202:	ed43 4a11 	vstr	s9, [r3, #-68]	@ 0xffffffbc
                         float hr = *hPtr++; float hi = *hPtr++;
 8001206:	ed52 3a26 	vldr	s7, [r2, #-152]	@ 0xffffff68
 800120a:	ed52 4a25 	vldr	s9, [r2, #-148]	@ 0xffffff6c
                         float xr = *xPtr++; float xi = *xPtr++;
 800120e:	ed11 3a25 	vldr	s6, [r1, #-148]	@ 0xffffff6c
 8001212:	ed11 4a26 	vldr	s8, [r1, #-152]	@ 0xffffff68
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001216:	eea3 5a64 	vfms.f32	s10, s6, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800121a:	eee3 5a23 	vfma.f32	s11, s6, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800121e:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001222:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *yPtr     = accR;
 8001226:	ed03 5a10 	vstr	s10, [r3, #-64]	@ 0xffffffc0
                         *(yPtr+1) = accI;
 800122a:	ed43 5a0f 	vstr	s11, [r3, #-60]	@ 0xffffffc4
                         float xr = *xPtr++; float xi = *xPtr++;
 800122e:	ed11 4a23 	vldr	s8, [r1, #-140]	@ 0xffffff74
                         float hr = *hPtr++; float hi = *hPtr++;
 8001232:	ed52 5a24 	vldr	s11, [r2, #-144]	@ 0xffffff70
 8001236:	ed52 4a23 	vldr	s9, [r2, #-140]	@ 0xffffff74
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800123a:	eea4 6a25 	vfma.f32	s12, s8, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 800123e:	ed11 5a24 	vldr	s10, [r1, #-144]	@ 0xffffff70
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001242:	eee4 6a64 	vfms.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001246:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800124a:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *(yPtr+1) = accI;
 800124e:	ed03 6a0d 	vstr	s12, [r3, #-52]	@ 0xffffffcc
                         *yPtr     = accR;
 8001252:	ed43 6a0e 	vstr	s13, [r3, #-56]	@ 0xffffffc8
                         float xr = *xPtr++; float xi = *xPtr++;
 8001256:	ed11 5a21 	vldr	s10, [r1, #-132]	@ 0xffffff7c
                         float hr = *hPtr++; float hi = *hPtr++;
 800125a:	ed52 5a22 	vldr	s11, [r2, #-136]	@ 0xffffff78
 800125e:	ed52 6a21 	vldr	s13, [r2, #-132]	@ 0xffffff7c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001262:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8001266:	ed11 6a22 	vldr	s12, [r1, #-136]	@ 0xffffff78
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800126a:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800126e:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001272:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8001276:	ed43 7a0b 	vstr	s15, [r3, #-44]	@ 0xffffffd4
                         *yPtr     = accR;
 800127a:	ed03 7a0c 	vstr	s14, [r3, #-48]	@ 0xffffffd0
                         float xr = *xPtr++; float xi = *xPtr++;
 800127e:	ed11 3a20 	vldr	s6, [r1, #-128]	@ 0xffffff80
 8001282:	ed51 7a1f 	vldr	s15, [r1, #-124]	@ 0xffffff84
                         float hr = *hPtr++; float hi = *hPtr++;
 8001286:	ed52 3a1f 	vldr	s7, [r2, #-124]	@ 0xffffff84
 800128a:	ed52 2a20 	vldr	s5, [r2, #-128]	@ 0xffffff80
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800128e:	ed13 4a0a 	vldr	s8, [r3, #-40]	@ 0xffffffd8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001292:	ed53 4a09 	vldr	s9, [r3, #-36]	@ 0xffffffdc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001296:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800129a:	ed53 5a08 	vldr	s11, [r3, #-32]	@ 0xffffffe0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800129e:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80012a2:	ed13 5a07 	vldr	s10, [r3, #-28]	@ 0xffffffe4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80012a6:	ed13 6a06 	vldr	s12, [r3, #-24]	@ 0xffffffe8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80012aa:	ed53 6a05 	vldr	s13, [r3, #-20]	@ 0xffffffec
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80012ae:	ed53 7a04 	vldr	s15, [r3, #-16]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80012b2:	ed13 7a03 	vldr	s14, [r3, #-12]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80012b6:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80012ba:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 80012be:	ed03 4a0a 	vstr	s8, [r3, #-40]	@ 0xffffffd8
                         *(yPtr+1) = accI;
 80012c2:	ed43 4a09 	vstr	s9, [r3, #-36]	@ 0xffffffdc
                         float hr = *hPtr++; float hi = *hPtr++;
 80012c6:	ed52 4a1e 	vldr	s9, [r2, #-120]	@ 0xffffff88
                         float xr = *xPtr++; float xi = *xPtr++;
 80012ca:	ed11 3a1d 	vldr	s6, [r1, #-116]	@ 0xffffff8c
                         float hr = *hPtr++; float hi = *hPtr++;
 80012ce:	ed52 3a1d 	vldr	s7, [r2, #-116]	@ 0xffffff8c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80012d2:	eea3 5a24 	vfma.f32	s10, s6, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 80012d6:	ed11 4a1e 	vldr	s8, [r1, #-120]	@ 0xffffff88
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80012da:	eee3 5a63 	vfms.f32	s11, s6, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80012de:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 80012e2:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *(yPtr+1) = accI;
 80012e6:	ed03 5a07 	vstr	s10, [r3, #-28]	@ 0xffffffe4
                         *yPtr     = accR;
 80012ea:	ed43 5a08 	vstr	s11, [r3, #-32]	@ 0xffffffe0
                         float xr = *xPtr++; float xi = *xPtr++;
 80012ee:	ed11 4a1b 	vldr	s8, [r1, #-108]	@ 0xffffff94
                         float hr = *hPtr++; float hi = *hPtr++;
 80012f2:	ed52 4a1c 	vldr	s9, [r2, #-112]	@ 0xffffff90
 80012f6:	ed52 5a1b 	vldr	s11, [r2, #-108]	@ 0xffffff94
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 80012fa:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 80012fe:	ed11 5a1c 	vldr	s10, [r1, #-112]	@ 0xffffff90
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001302:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001306:	eee5 6a25 	vfma.f32	s13, s10, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800130a:	eea5 6a24 	vfma.f32	s12, s10, s9
                         *(yPtr+1) = accI;
 800130e:	ed43 6a05 	vstr	s13, [r3, #-20]	@ 0xffffffec
                         *yPtr     = accR;
 8001312:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
                         float hr = *hPtr++; float hi = *hPtr++;
 8001316:	ed52 6a1a 	vldr	s13, [r2, #-104]	@ 0xffffff98
 800131a:	ed52 5a19 	vldr	s11, [r2, #-100]	@ 0xffffff9c
                         float xr = *xPtr++; float xi = *xPtr++;
 800131e:	ed11 5a19 	vldr	s10, [r1, #-100]	@ 0xffffff9c
 8001322:	ed11 6a1a 	vldr	s12, [r1, #-104]	@ 0xffffff98
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001326:	eea5 7a26 	vfma.f32	s14, s10, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800132a:	eee5 7a65 	vfms.f32	s15, s10, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800132e:	eea6 7a25 	vfma.f32	s14, s12, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001332:	eee6 7a26 	vfma.f32	s15, s12, s13
                         *(yPtr+1) = accI;
 8001336:	ed03 7a03 	vstr	s14, [r3, #-12]
                         *yPtr     = accR;
 800133a:	ed43 7a04 	vstr	s15, [r3, #-16]
                         float xr = *xPtr++; float xi = *xPtr++;
 800133e:	ed11 5a18 	vldr	s10, [r1, #-96]	@ 0xffffffa0
                         float hr = *hPtr++; float hi = *hPtr++;
 8001342:	ed52 5a17 	vldr	s11, [r2, #-92]	@ 0xffffffa4
                         float xr = *xPtr++; float xi = *xPtr++;
 8001346:	ed11 4a17 	vldr	s8, [r1, #-92]	@ 0xffffffa4
                         float hr = *hPtr++; float hi = *hPtr++;
 800134a:	ed52 4a18 	vldr	s9, [r2, #-96]	@ 0xffffffa0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800134e:	ed13 6a02 	vldr	s12, [r3, #-8]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001352:	ed53 6a01 	vldr	s13, [r3, #-4]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001356:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800135a:	ed93 7a00 	vldr	s14, [r3]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800135e:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001362:	edd3 7a01 	vldr	s15, [r3, #4]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001366:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800136a:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *yPtr     = accR;
 800136e:	ed03 6a02 	vstr	s12, [r3, #-8]
                         *(yPtr+1) = accI;
 8001372:	ed43 6a01 	vstr	s13, [r3, #-4]
                         float xr = *xPtr++; float xi = *xPtr++;
 8001376:	ed11 5a15 	vldr	s10, [r1, #-84]	@ 0xffffffac
                         float hr = *hPtr++; float hi = *hPtr++;
 800137a:	ed52 5a16 	vldr	s11, [r2, #-88]	@ 0xffffffa8
 800137e:	ed52 6a15 	vldr	s13, [r2, #-84]	@ 0xffffffac
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8001382:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8001386:	ed11 6a16 	vldr	s12, [r1, #-88]	@ 0xffffffa8
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 800138a:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 800138e:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8001392:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8001396:	edc3 7a01 	vstr	s15, [r3, #4]
                         *yPtr     = accR;
 800139a:	ed83 7a00 	vstr	s14, [r3]
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 800139e:	4283      	cmp	r3, r0
 80013a0:	f47f af0a 	bne.w	80011b8 <partitioned_fir_convolution_fft+0xf8>
                     float accR = __builtin_fmaf(xr, hr,
 80013a4:	9b01      	ldr	r3, [sp, #4]
		if (++i >= segs) {
 80013a6:	f10c 0c01 	add.w	ip, ip, #1
                     float accI = __builtin_fmaf(xr, hi,
 80013aa:	9a02      	ldr	r2, [sp, #8]
                     float accR = __builtin_fmaf(xr, hr,
 80013ac:	ed93 7a00 	vldr	s14, [r3]
                     float xr = *xPtr++;  float xi = *xPtr++;
 80013b0:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
                     float accI = __builtin_fmaf(xr, hi,
 80013b4:	edd2 7a00 	vldr	s15, [r2]
                     float xr = *xPtr++;  float xi = *xPtr++;
 80013b8:	f505 5500 	add.w	r5, r5, #8192	@ 0x2000
                     float hr = *hPtr++;  float hi = *hPtr++;
 80013bc:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 80013c0:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
                     float accR = __builtin_fmaf(xr, hr,
 80013c4:	ed97 5a00 	vldr	s10, [r7]
                     float xr = *xPtr++;  float xi = *xPtr++;
 80013c8:	ed95 2a01 	vldr	s4, [r5, #4]
                     float hr = *hPtr++;  float hi = *hPtr++;
 80013cc:	edd4 2a01 	vldr	s5, [r4, #4]
			i = 0;
 80013d0:	9903      	ldr	r1, [sp, #12]
                     float accR = __builtin_fmaf(xr, hr,
 80013d2:	eea2 5a62 	vfms.f32	s10, s4, s5
                     float accI = __builtin_fmaf(xr, hi,
 80013d6:	edd7 5a01 	vldr	s11, [r7, #4]
                     float xr = *xPtr++;  float xi = *xPtr++;
 80013da:	ed95 3a00 	vldr	s6, [r5]
			i = 0;
 80013de:	4561      	cmp	r1, ip
 80013e0:	bf98      	it	ls
 80013e2:	f04f 0c00 	movls.w	ip, #0
                     float hr = *hPtr++;  float hi = *hPtr++;
 80013e6:	edd4 3a00 	vldr	s7, [r4]
                     float xr = *xPtr++;  float xi = *xPtr++;
 80013ea:	f603 71ec 	addw	r1, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 80013ee:	ed9b 4a00 	vldr	s8, [fp]
                     float accI = __builtin_fmaf(xr, hi,
 80013f2:	eee2 5a23 	vfma.f32	s11, s4, s7
 80013f6:	edda 4a00 	vldr	s9, [sl]
                     float accR = __builtin_fmaf(xr, hr,
 80013fa:	ed99 6a00 	vldr	s12, [r9]
 80013fe:	eea3 5a23 	vfma.f32	s10, s6, s7
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001402:	edd1 3a00 	vldr	s7, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8001406:	f602 71e8 	addw	r1, r2, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 800140a:	edd8 6a00 	vldr	s13, [r8]
                     float hr = *hPtr++;  float hi = *hPtr++;
 800140e:	edd1 0a00 	vldr	s1, [r1]
 8001412:	f602 71ec 	addw	r1, r2, #4076	@ 0xfec
                     float accI = __builtin_fmaf(xr, hi,
 8001416:	eee3 5a22 	vfma.f32	s11, s6, s5
                     float hr = *hPtr++;  float hi = *hPtr++;
 800141a:	edd1 1a00 	vldr	s3, [r1]
                     float xr = *xPtr++;  float xi = *xPtr++;
 800141e:	f603 71f4 	addw	r1, r3, #4084	@ 0xff4
                     float accI = __builtin_fmaf(xr, hi,
 8001422:	eee3 4aa0 	vfma.f32	s9, s7, s1
                     float accR = __builtin_fmaf(xr, hr,
 8001426:	eea3 4ae1 	vfms.f32	s8, s7, s3
                     float xr = *xPtr++;  float xi = *xPtr++;
 800142a:	edd1 3a00 	vldr	s7, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 800142e:	f502 617f 	add.w	r1, r2, #4080	@ 0xff0
 8001432:	ed91 2a00 	vldr	s4, [r1]
 8001436:	f602 71f4 	addw	r1, r2, #4084	@ 0xff4
 800143a:	edd1 2a00 	vldr	s5, [r1]
                     float xr = *xPtr++;  float xi = *xPtr++;
 800143e:	f603 71fc 	addw	r1, r3, #4092	@ 0xffc
                     float accI = __builtin_fmaf(xr, hi,
 8001442:	eee3 6a82 	vfma.f32	s13, s7, s4
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001446:	ed91 1a00 	vldr	s2, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 800144a:	f602 71f8 	addw	r1, r2, #4088	@ 0xff8
 800144e:	f602 72fc 	addw	r2, r2, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 8001452:	eea3 6ae2 	vfms.f32	s12, s7, s5
                     float hr = *hPtr++;  float hi = *hPtr++;
 8001456:	ed91 3a00 	vldr	s6, [r1]
 800145a:	edd2 3a00 	vldr	s7, [r2]
                     float xr = *xPtr++;  float xi = *xPtr++;
 800145e:	f603 72e8 	addw	r2, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8001462:	eee1 7a03 	vfma.f32	s15, s2, s6
                     float accR = __builtin_fmaf(xr, hr,
 8001466:	eea1 7a63 	vfms.f32	s14, s2, s7
                     float xr = *xPtr++;  float xi = *xPtr++;
 800146a:	ed92 1a00 	vldr	s2, [r2]
 800146e:	f503 627f 	add.w	r2, r3, #4080	@ 0xff0
 8001472:	f603 73f8 	addw	r3, r3, #4088	@ 0xff8
                     float accR = __builtin_fmaf(xr, hr,
 8001476:	eea1 4a20 	vfma.f32	s8, s2, s1
                     float accI = __builtin_fmaf(xr, hi,
 800147a:	eee1 4a21 	vfma.f32	s9, s2, s3
                     *yPtr     = accR;
 800147e:	ed8b 4a00 	vstr	s8, [fp]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8001482:	ed92 4a00 	vldr	s8, [r2]
                     *(yPtr+1) = accI;
 8001486:	edca 4a00 	vstr	s9, [sl]
                     float accR = __builtin_fmaf(xr, hr,
 800148a:	eea4 6a02 	vfma.f32	s12, s8, s4
                     float xr = *xPtr++;  float xi = *xPtr++;
 800148e:	edd3 4a00 	vldr	s9, [r3]
                     float accI = __builtin_fmaf(xr, hi,
 8001492:	eee4 6a22 	vfma.f32	s13, s8, s5
                     *yPtr     = accR;
 8001496:	ed87 5a00 	vstr	s10, [r7]
                     float accR = __builtin_fmaf(xr, hr,
 800149a:	eea4 7a83 	vfma.f32	s14, s9, s6
                     *(yPtr+1) = accI;
 800149e:	edc7 5a01 	vstr	s11, [r7, #4]
                     float accI = __builtin_fmaf(xr, hi,
 80014a2:	eee4 7aa3 	vfma.f32	s15, s9, s7
                     *yPtr     = accR;
 80014a6:	ed89 6a00 	vstr	s12, [r9]
                     *(yPtr+1) = accI;
 80014aa:	edc8 6a00 	vstr	s13, [r8]
                     *yPtr     = accR;
 80014ae:	9b01      	ldr	r3, [sp, #4]
                     *(yPtr+1) = accI;
 80014b0:	9a02      	ldr	r2, [sp, #8]
                     *yPtr     = accR;
 80014b2:	ed83 7a00 	vstr	s14, [r3]
                     *(yPtr+1) = accI;
 80014b6:	edc2 7a00 	vstr	s15, [r2]
		if (idx-- == 0) {
 80014ba:	b396      	cbz	r6, 8001522 <partitioned_fir_convolution_fft+0x462>
 80014bc:	3e01      	subs	r6, #1
    } while (idx != fir->curr_fftidx);
 80014be:	9b04      	ldr	r3, [sp, #16]
 80014c0:	42b3      	cmp	r3, r6
 80014c2:	f47f ae4d 	bne.w	8001160 <partitioned_fir_convolution_fft+0xa0>

    // advance write index
    if (++fir->curr_fftidx >= segs) {
        fir->curr_fftidx = 0;
 80014c6:	9e03      	ldr	r6, [sp, #12]
    if (++fir->curr_fftidx >= segs) {
 80014c8:	3301      	adds	r3, #1
    }

    // inverse FFT
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 80014ca:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <partitioned_fir_convolution_fft+0x468>)
        fir->curr_fftidx = 0;
 80014cc:	42b3      	cmp	r3, r6
 80014ce:	bf28      	it	cs
 80014d0:	2300      	movcs	r3, #0
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 80014d2:	4916      	ldr	r1, [pc, #88]	@ (800152c <partitioned_fir_convolution_fft+0x46c>)
 80014d4:	4816      	ldr	r0, [pc, #88]	@ (8001530 <partitioned_fir_convolution_fft+0x470>)
    if (++fir->curr_fftidx >= segs) {
 80014d6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80014da:	60ab      	str	r3, [r5, #8]
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 80014dc:	2301      	movs	r3, #1
 80014de:	f005 fc93 	bl	8006e08 <arm_rfft_fast_f32>

    // overlap-add and scaling
    const float32_t invN = 1.0f / (float32_t)segs;
 80014e2:	ee07 6a90 	vmov	s15, r6
 80014e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001528 <partitioned_fir_convolution_fft+0x468>)
 80014ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014f0:	9b07      	ldr	r3, [sp, #28]
 80014f2:	f502 5180 	add.w	r1, r2, #4096	@ 0x1000
 80014f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 80014fa:	460d      	mov	r5, r1
        float32_t s = zeropaddedinput[k]            * invN;
 80014fc:	ecf2 7a01 	vldmia	r2!, {s15}
        float32_t o = overlap[k]                    * invN;
 8001500:	ed93 7a00 	vldr	s14, [r3]
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8001504:	4295      	cmp	r5, r2
        pipe->processBuffer[k] = s + o;
 8001506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800150a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800150e:	ece4 7a01 	vstmia	r4!, {s15}
        overlap[k]             = zeropaddedinput[BUFFER_SIZE + k];
 8001512:	f851 0b04 	ldr.w	r0, [r1], #4
 8001516:	f843 0b04 	str.w	r0, [r3], #4
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 800151a:	d1ef      	bne.n	80014fc <partitioned_fir_convolution_fft+0x43c>
    }

}
 800151c:	b00b      	add	sp, #44	@ 0x2c
 800151e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			idx = segs - 1;
 8001522:	9b03      	ldr	r3, [sp, #12]
 8001524:	1e5e      	subs	r6, r3, #1
 8001526:	e7ca      	b.n	80014be <partitioned_fir_convolution_fft+0x3fe>
 8001528:	2000a020 	.word	0x2000a020
 800152c:	2407c32c 	.word	0x2407c32c
 8001530:	2406d0a4 	.word	0x2406d0a4

08001534 <pipe_getDelayBuffer>:

float32_t *pipe_getDelayBuffer(pipe *self, uint16_t n)
{
    uint32_t offset = n * BUFFER_SIZE;

    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8001534:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
 8001538:	4a09      	ldr	r2, [pc, #36]	@ (8001560 <pipe_getDelayBuffer+0x2c>)

    return &self->delayBuffer[index];
 800153a:	f241 4c02 	movw	ip, #5122	@ 0x1402
    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8001544:	eba3 2181 	sub.w	r1, r3, r1, lsl #10
 8001548:	fba2 2301 	umull	r2, r3, r2, r1
 800154c:	0b5b      	lsrs	r3, r3, #13
 800154e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001552:	eba1 21c3 	sub.w	r1, r1, r3, lsl #11
    return &self->delayBuffer[index];
 8001556:	448c      	add	ip, r1
}
 8001558:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	cccccccd 	.word	0xcccccccd

08001564 <pipe_loadProcess>:
    }
}

static void pipe_loadProcess(pipe *self)
{
	arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8001564:	f244 0108 	movw	r1, #16392	@ 0x4008
 8001568:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 800156c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001570:	4401      	add	r1, r0
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	f005 bb66 	b.w	8006c44 <arm_copy_f32>

08001578 <pipe_updateDelayBuffer>:
{
 8001578:	b510      	push	{r4, lr}
    arm_copy_f32(self->inBuffer, &self->delayBuffer[self->delayIndex], BUFFER_SIZE);
 800157a:	f500 4470 	add.w	r4, r0, #61440	@ 0xf000
 800157e:	f241 4102 	movw	r1, #5122	@ 0x1402
 8001582:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001586:	68e3      	ldr	r3, [r4, #12]
 8001588:	4419      	add	r1, r3
 800158a:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 800158e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	f005 fb56 	bl	8006c44 <arm_copy_f32>
    self->delayIndex += BUFFER_SIZE;
 8001598:	68e3      	ldr	r3, [r4, #12]
 800159a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
        self->delayIndex = 0;
 800159e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80015a2:	bf28      	it	cs
 80015a4:	2300      	movcs	r3, #0
 80015a6:	60e3      	str	r3, [r4, #12]
}
 80015a8:	bd10      	pop	{r4, pc}
 80015aa:	bf00      	nop

080015ac <pipe_updateDACOutput>:
{
 80015ac:	b570      	push	{r4, r5, r6, lr}
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 80015ae:	f500 4580 	add.w	r5, r0, #16384	@ 0x4000
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 80015b2:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
{
 80015b6:	460c      	mov	r4, r1
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 80015b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80015bc:	6869      	ldr	r1, [r5, #4]
 80015be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 80015c2:	7a1e      	ldrb	r6, [r3, #8]
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 80015c4:	4608      	mov	r0, r1
 80015c6:	f006 f995 	bl	80078f4 <arm_offset_f32>
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 80015ca:	6869      	ldr	r1, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 80015cc:	fab6 f686 	clz	r6, r6
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 80015d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015d4:	4608      	mov	r0, r1
 80015d6:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001604 <pipe_updateDACOutput+0x58>
 80015da:	f006 f955 	bl	8007888 <arm_scale_f32>
 80015de:	686a      	ldr	r2, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 80015e0:	0976      	lsrs	r6, r6, #5
    for (i = 0; i < BUFFER_SIZE; i++)
 80015e2:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 80015e6:	eb04 21c6 	add.w	r1, r4, r6, lsl #11
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 80015ea:	ecf2 7a01 	vldmia	r2!, {s15}
 80015ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    for (i = 0; i < BUFFER_SIZE; i++)
 80015f2:	4290      	cmp	r0, r2
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 80015f4:	ee17 3a90 	vmov	r3, s15
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	f821 3b02 	strh.w	r3, [r1], #2
    for (i = 0; i < BUFFER_SIZE; i++)
 80015fe:	d1f4      	bne.n	80015ea <pipe_updateDACOutput+0x3e>
}
 8001600:	bd70      	pop	{r4, r5, r6, pc}
 8001602:	bf00      	nop
 8001604:	45000000 	.word	0x45000000

08001608 <pipe_ADC_Complete>:
{
 8001608:	b538      	push	{r3, r4, r5, lr}
 800160a:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
 800160e:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8001610:	f501 6c00 	add.w	ip, r1, #2048	@ 0x800
 8001614:	f500 5e00 	add.w	lr, r0, #8192	@ 0x2000
 8001618:	462a      	mov	r2, r5
        self->inBuffer2[i] = (float32_t)adcInput[BUFFER_SIZE + i];
 800161a:	f83c 3b02 	ldrh.w	r3, [ip], #2
 800161e:	b29b      	uxth	r3, r3
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001628:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 800162c:	4572      	cmp	r2, lr
 800162e:	d1f4      	bne.n	800161a <pipe_ADC_Complete+0x12>
    arm_scale_f32(self->inBuffer2, ADC_BITS2VOLTS, self->inBuffer2, BUFFER_SIZE);
 8001630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001634:	4629      	mov	r1, r5
 8001636:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800166c <pipe_ADC_Complete+0x64>
 800163a:	4628      	mov	r0, r5
 800163c:	f006 f924 	bl	8007888 <arm_scale_f32>
    arm_offset_f32(self->inBuffer2, -1.0f, self->inBuffer2, BUFFER_SIZE);
 8001640:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001644:	4629      	mov	r1, r5
 8001646:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800164a:	4628      	mov	r0, r5
 800164c:	f006 f952 	bl	80078f4 <arm_offset_f32>
    self->inBuffer  = self->inBuffer2;
 8001650:	f504 4280 	add.w	r2, r4, #16384	@ 0x4000
    self->ppState   = 0;
 8001654:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->outBuffer = self->outBuffer2;
 8001658:	f504 5440 	add.w	r4, r4, #12288	@ 0x3000
    self->ppState   = 0;
 800165c:	2100      	movs	r1, #0
    self->outBuffer = self->outBuffer2;
 800165e:	e9c2 5400 	strd	r5, r4, [r2]
    self->bufferReady = true;
 8001662:	2201      	movs	r2, #1
    self->ppState   = 0;
 8001664:	7219      	strb	r1, [r3, #8]
    self->bufferReady = true;
 8001666:	741a      	strb	r2, [r3, #16]
}
 8001668:	bd38      	pop	{r3, r4, r5, pc}
 800166a:	bf00      	nop
 800166c:	38000000 	.word	0x38000000

08001670 <pipe_ADC_HalfComplete>:
{
 8001670:	b510      	push	{r4, lr}
 8001672:	468c      	mov	ip, r1
 8001674:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8001676:	4602      	mov	r2, r0
 8001678:	f500 5e80 	add.w	lr, r0, #4096	@ 0x1000
        self->inBuffer1[i] = (float32_t)adcInput[i];
 800167c:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8001680:	b29b      	uxth	r3, r3
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168a:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 800168e:	4572      	cmp	r2, lr
 8001690:	d1f4      	bne.n	800167c <pipe_ADC_HalfComplete+0xc>
    arm_scale_f32(self->inBuffer1, ADC_BITS2VOLTS, self->inBuffer1, BUFFER_SIZE);
 8001692:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001696:	4621      	mov	r1, r4
 8001698:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80016cc <pipe_ADC_HalfComplete+0x5c>
 800169c:	4620      	mov	r0, r4
 800169e:	f006 f8f3 	bl	8007888 <arm_scale_f32>
    arm_offset_f32(self->inBuffer1, -1.0f, self->inBuffer1, BUFFER_SIZE);
 80016a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a6:	4621      	mov	r1, r4
 80016a8:	4620      	mov	r0, r4
 80016aa:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80016ae:	f006 f921 	bl	80078f4 <arm_offset_f32>
    self->ppState   = 1;
 80016b2:	2201      	movs	r2, #1
 80016b4:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->inBuffer  = self->inBuffer1;
 80016b8:	f504 4180 	add.w	r1, r4, #16384	@ 0x4000
    self->outBuffer = self->outBuffer1;
 80016bc:	f504 5000 	add.w	r0, r4, #8192	@ 0x2000
 80016c0:	e9c1 4000 	strd	r4, r0, [r1]
    self->ppState   = 1;
 80016c4:	721a      	strb	r2, [r3, #8]
    self->bufferReady = true;
 80016c6:	741a      	strb	r2, [r3, #16]
}
 80016c8:	bd10      	pop	{r4, pc}
 80016ca:	bf00      	nop
 80016cc:	38000000 	.word	0x38000000

080016d0 <pipeInit>:
}

void pipeInit(pipe *self)
{
 80016d0:	4684      	mov	ip, r0
    self->delayIndex = 0;
    self->bufferReady = false;

    self->adcHalfComplete = pipe_ADC_HalfComplete;
    self->adcComplete     = pipe_ADC_Complete;
    self->updateDelayBuffer = pipe_updateDelayBuffer;
 80016d2:	4811      	ldr	r0, [pc, #68]	@ (8001718 <pipeInit+0x48>)
    self->ppState   = 0;
 80016d4:	2100      	movs	r1, #0
    self->inBuffer  = self->inBuffer2;
 80016d6:	f50c 4280 	add.w	r2, ip, #16384	@ 0x4000
    self->ppState   = 0;
 80016da:	f50c 4370 	add.w	r3, ip, #61440	@ 0xf000
{
 80016de:	b470      	push	{r4, r5, r6}
    self->inBuffer  = self->inBuffer2;
 80016e0:	f50c 5680 	add.w	r6, ip, #4096	@ 0x1000
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 80016e4:	4d0d      	ldr	r5, [pc, #52]	@ (800171c <pipeInit+0x4c>)
    self->adcComplete     = pipe_ADC_Complete;
 80016e6:	4c0e      	ldr	r4, [pc, #56]	@ (8001720 <pipeInit+0x50>)
    self->inBuffer  = self->inBuffer2;
 80016e8:	6016      	str	r6, [r2, #0]
    self->outBuffer = self->outBuffer2;
 80016ea:	f50c 5640 	add.w	r6, ip, #12288	@ 0x3000
 80016ee:	6056      	str	r6, [r2, #4]
    self->updateDACOutput = pipe_updateDACOutput;
 80016f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001724 <pipeInit+0x54>)
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 80016f2:	615d      	str	r5, [r3, #20]
    self->ppState   = 0;
 80016f4:	7219      	strb	r1, [r3, #8]
    self->adcComplete     = pipe_ADC_Complete;
 80016f6:	619c      	str	r4, [r3, #24]
    self->delayIndex = 0;
 80016f8:	60d9      	str	r1, [r3, #12]
    self->bufferReady = false;
 80016fa:	7419      	strb	r1, [r3, #16]
    self->updateDACOutput = pipe_updateDACOutput;
 80016fc:	e9c3 0207 	strd	r0, r2, [r3, #28]
    self->getDelayBuffer = pipe_getDelayBuffer;
 8001700:	4809      	ldr	r0, [pc, #36]	@ (8001728 <pipeInit+0x58>)
    self->loadProcess = pipe_loadProcess;
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <pipeInit+0x5c>)
 8001704:	e9c3 0209 	strd	r0, r2, [r3, #36]	@ 0x24

    for(int i = 0; i < BUFFER_SIZE ; i++) {

    	self->processBuffer[i] = 0;
 8001708:	f244 0008 	movw	r0, #16392	@ 0x4008
 800170c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001710:	4460      	add	r0, ip

    }

}
 8001712:	bc70      	pop	{r4, r5, r6}
    	self->processBuffer[i] = 0;
 8001714:	f006 be79 	b.w	800840a <memset>
 8001718:	08001579 	.word	0x08001579
 800171c:	08001671 	.word	0x08001671
 8001720:	08001609 	.word	0x08001609
 8001724:	080015ad 	.word	0x080015ad
 8001728:	08001535 	.word	0x08001535
 800172c:	08001565 	.word	0x08001565

08001730 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <HAL_MspInit+0x20>)
{
 8001732:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001734:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001738:	f042 0202 	orr.w	r2, r2, #2
 800173c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001740:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174c:	b002      	add	sp, #8
 800174e:	4770      	bx	lr
 8001750:	58024400 	.word	0x58024400

08001754 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	2100      	movs	r1, #0
{
 800175a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800175c:	22c0      	movs	r2, #192	@ 0xc0
 800175e:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	9106      	str	r1, [sp, #24]
 8001762:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001766:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800176a:	f006 fe4e 	bl	800840a <memset>
  if(hadc->Instance==ADC1)
 800176e:	4b31      	ldr	r3, [pc, #196]	@ (8001834 <HAL_ADC_MspInit+0xe0>)
 8001770:	6822      	ldr	r2, [r4, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001776:	b038      	add	sp, #224	@ 0xe0
 8001778:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800177a:	2300      	movs	r3, #0
 800177c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001780:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001782:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001786:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800178a:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178c:	f003 fd74 	bl	8005278 <HAL_RCCEx_PeriphCLKConfig>
 8001790:	2800      	cmp	r0, #0
 8001792:	d148      	bne.n	8001826 <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001794:	4b28      	ldr	r3, [pc, #160]	@ (8001838 <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA1_Stream0;
 800179a:	4d28      	ldr	r5, [pc, #160]	@ (800183c <HAL_ADC_MspInit+0xe8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 800179c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80017a0:	f042 0220 	orr.w	r2, r2, #32
 80017a4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80017a8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80017ac:	f002 0220 	and.w	r2, r2, #32
 80017b0:	9200      	str	r2, [sp, #0]
 80017b2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017c0:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ce:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	481b      	ldr	r0, [pc, #108]	@ (8001840 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f002 fc9a 	bl	8004110 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 80017dc:	4a19      	ldr	r2, [pc, #100]	@ (8001844 <HAL_ADC_MspInit+0xf0>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017de:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017e0:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e2:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017e4:	e885 004c 	stmia.w	r5, {r2, r3, r6}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017f0:	e9c5 6203 	strd	r6, r2, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017f4:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017fe:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001802:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001806:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001808:	f001 fcac 	bl	8003164 <HAL_DMA_Init>
 800180c:	b970      	cbnz	r0, 800182c <HAL_ADC_MspInit+0xd8>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001812:	64e5      	str	r5, [r4, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001814:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001816:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001818:	f001 f95c 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800181c:	2012      	movs	r0, #18
 800181e:	f001 f995 	bl	8002b4c <HAL_NVIC_EnableIRQ>
}
 8001822:	b038      	add	sp, #224	@ 0xe0
 8001824:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001826:	f7ff fc49 	bl	80010bc <Error_Handler>
 800182a:	e7b3      	b.n	8001794 <HAL_ADC_MspInit+0x40>
      Error_Handler();
 800182c:	f7ff fc46 	bl	80010bc <Error_Handler>
 8001830:	e7ed      	b.n	800180e <HAL_ADC_MspInit+0xba>
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000
 8001838:	58024400 	.word	0x58024400
 800183c:	2407c250 	.word	0x2407c250
 8001840:	58020000 	.word	0x58020000
 8001844:	40020010 	.word	0x40020010

08001848 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8001848:	4b2c      	ldr	r3, [pc, #176]	@ (80018fc <HAL_DAC_MspInit+0xb4>)
 800184a:	6802      	ldr	r2, [r0, #0]
{
 800184c:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 800184e:	429a      	cmp	r2, r3
{
 8001850:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f04f 0400 	mov.w	r4, #0
 8001856:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800185a:	9404      	str	r4, [sp, #16]
 800185c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8001860:	d001      	beq.n	8001866 <HAL_DAC_MspInit+0x1e>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001862:	b008      	add	sp, #32
 8001864:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001866:	4b26      	ldr	r3, [pc, #152]	@ (8001900 <HAL_DAC_MspInit+0xb8>)
 8001868:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186a:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 800186c:	4e25      	ldr	r6, [pc, #148]	@ (8001904 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 800186e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001872:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001876:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800187a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800187e:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8001882:	9200      	str	r2, [sp, #0]
 8001884:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001892:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800189e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	4819      	ldr	r0, [pc, #100]	@ (8001908 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f002 fc32 	bl	8004110 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80018ac:	4a17      	ldr	r2, [pc, #92]	@ (800190c <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80018ae:	2343      	movs	r3, #67	@ 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80018b0:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b2:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80018b4:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b6:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80018b8:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018bc:	2240      	movs	r2, #64	@ 0x40
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80018be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018c2:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80018c8:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ce:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80018d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018d6:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80018d8:	f001 fc44 	bl	8003164 <HAL_DMA_Init>
 80018dc:	b958      	cbnz	r0, 80018f6 <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80018e0:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018e2:	2036      	movs	r0, #54	@ 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80018e4:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80018e6:	4611      	mov	r1, r2
 80018e8:	f001 f8f4 	bl	8002ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ec:	2036      	movs	r0, #54	@ 0x36
 80018ee:	f001 f92d 	bl	8002b4c <HAL_NVIC_EnableIRQ>
}
 80018f2:	b008      	add	sp, #32
 80018f4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80018f6:	f7ff fbe1 	bl	80010bc <Error_Handler>
 80018fa:	e7f0      	b.n	80018de <HAL_DAC_MspInit+0x96>
 80018fc:	40007400 	.word	0x40007400
 8001900:	58024400 	.word	0x58024400
 8001904:	2407c1c4 	.word	0x2407c1c4
 8001908:	58020000 	.word	0x58020000
 800190c:	40020028 	.word	0x40020028

08001910 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 8001910:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_TIM_Base_MspInit+0x2c>)
 8001912:	6802      	ldr	r2, [r0, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d000      	beq.n	800191a <HAL_TIM_Base_MspInit+0xa>
 8001918:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_TIM_Base_MspInit+0x30>)
{
 800191c:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 800191e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001922:	f042 0202 	orr.w	r2, r2, #2
 8001926:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800192a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8001936:	b002      	add	sp, #8
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40010400 	.word	0x40010400
 8001940:	58024400 	.word	0x58024400

08001944 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler>
 8001946:	bf00      	nop

08001948 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <HardFault_Handler>
 800194a:	bf00      	nop

0800194c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler>
 800194e:	bf00      	nop

08001950 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <BusFault_Handler>
 8001952:	bf00      	nop

08001954 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler>
 8001956:	bf00      	nop

08001958 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop

08001960 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 b95c 	b.w	8001c20 <HAL_IncTick>

08001968 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001968:	4801      	ldr	r0, [pc, #4]	@ (8001970 <DMA1_Stream0_IRQHandler+0x8>)
 800196a:	f002 b9bf 	b.w	8003cec <HAL_DMA_IRQHandler>
 800196e:	bf00      	nop
 8001970:	2407c250 	.word	0x2407c250

08001974 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001974:	4801      	ldr	r0, [pc, #4]	@ (800197c <DMA1_Stream1_IRQHandler+0x8>)
 8001976:	f002 b9b9 	b.w	8003cec <HAL_DMA_IRQHandler>
 800197a:	bf00      	nop
 800197c:	2407c1c4 	.word	0x2407c1c4

08001980 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001980:	4801      	ldr	r0, [pc, #4]	@ (8001988 <ADC_IRQHandler+0x8>)
 8001982:	f000 b96f 	b.w	8001c64 <HAL_ADC_IRQHandler>
 8001986:	bf00      	nop
 8001988:	2407c2c8 	.word	0x2407c2c8

0800198c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800198c:	4801      	ldr	r0, [pc, #4]	@ (8001994 <TIM6_DAC_IRQHandler+0x8>)
 800198e:	f001 ba01 	b.w	8002d94 <HAL_DAC_IRQHandler>
 8001992:	bf00      	nop
 8001994:	2407c23c 	.word	0x2407c23c

08001998 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001998:	2001      	movs	r0, #1
 800199a:	4770      	bx	lr

0800199c <_kill>:

int _kill(int pid, int sig)
{
 800199c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800199e:	f006 fd93 	bl	80084c8 <__errno>
 80019a2:	2216      	movs	r2, #22
 80019a4:	4603      	mov	r3, r0
  return -1;
}
 80019a6:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bd08      	pop	{r3, pc}
 80019ae:	bf00      	nop

080019b0 <_exit>:

void _exit (int status)
{
 80019b0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80019b2:	f006 fd89 	bl	80084c8 <__errno>
 80019b6:	2316      	movs	r3, #22
 80019b8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80019ba:	e7fe      	b.n	80019ba <_exit+0xa>

080019bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019bc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	1e16      	subs	r6, r2, #0
 80019c0:	dd07      	ble.n	80019d2 <_read+0x16>
 80019c2:	460c      	mov	r4, r1
 80019c4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80019c6:	f3af 8000 	nop.w
 80019ca:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ce:	42a5      	cmp	r5, r4
 80019d0:	d1f9      	bne.n	80019c6 <_read+0xa>
  }

  return len;
}
 80019d2:	4630      	mov	r0, r6
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
 80019d6:	bf00      	nop

080019d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	1e16      	subs	r6, r2, #0
 80019dc:	dd07      	ble.n	80019ee <_write+0x16>
 80019de:	460c      	mov	r4, r1
 80019e0:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80019e2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80019e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	42a5      	cmp	r5, r4
 80019ec:	d1f9      	bne.n	80019e2 <_write+0xa>
  }
  return len;
}
 80019ee:	4630      	mov	r0, r6
 80019f0:	bd70      	pop	{r4, r5, r6, pc}
 80019f2:	bf00      	nop

080019f4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop

080019fc <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80019fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8001a00:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001a02:	604b      	str	r3, [r1, #4]
}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop

08001a08 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001a08:	2001      	movs	r0, #1
 8001a0a:	4770      	bx	lr

08001a0c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	4770      	bx	lr

08001a10 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <_sbrk+0x38>)
{
 8001a12:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001a16:	6808      	ldr	r0, [r1, #0]
{
 8001a18:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1a:	4c0d      	ldr	r4, [pc, #52]	@ (8001a50 <_sbrk+0x40>)
 8001a1c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001a1e:	b120      	cbz	r0, 8001a2a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a20:	4403      	add	r3, r0
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d807      	bhi.n	8001a36 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001a26:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001a28:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001a2a:	4c0a      	ldr	r4, [pc, #40]	@ (8001a54 <_sbrk+0x44>)
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001a30:	4403      	add	r3, r0
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d9f7      	bls.n	8001a26 <_sbrk+0x16>
    errno = ENOMEM;
 8001a36:	f006 fd47 	bl	80084c8 <__errno>
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	4603      	mov	r3, r0
    return (void *)-1;
 8001a3e:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8001a42:	601a      	str	r2, [r3, #0]
}
 8001a44:	bd10      	pop	{r4, pc}
 8001a46:	bf00      	nop
 8001a48:	2407e32c 	.word	0x2407e32c
 8001a4c:	24080000 	.word	0x24080000
 8001a50:	00000400 	.word	0x00000400
 8001a54:	2407e480 	.word	0x2407e480

08001a58 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a58:	4927      	ldr	r1, [pc, #156]	@ (8001af8 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a5a:	4a28      	ldr	r2, [pc, #160]	@ (8001afc <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a5c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8001a64:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a6a:	6813      	ldr	r3, [r2, #0]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	2b06      	cmp	r3, #6
 8001a72:	d805      	bhi.n	8001a80 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	f023 030f 	bic.w	r3, r3, #15
 8001a7a:	f043 0307 	orr.w	r3, r3, #7
 8001a7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a80:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a82:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a84:	4a1f      	ldr	r2, [pc, #124]	@ (8001b04 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8001a86:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a88:	481c      	ldr	r0, [pc, #112]	@ (8001afc <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8001a8a:	f041 0101 	orr.w	r1, r1, #1
 8001a8e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001a90:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a98:	6803      	ldr	r3, [r0, #0]
 8001a9a:	071b      	lsls	r3, r3, #28
 8001a9c:	d505      	bpl.n	8001aaa <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a9e:	6803      	ldr	r3, [r0, #0]
 8001aa0:	f023 030f 	bic.w	r3, r3, #15
 8001aa4:	f043 0307 	orr.w	r3, r3, #7
 8001aa8:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <SystemInit+0xa8>)
 8001aac:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001aae:	4916      	ldr	r1, [pc, #88]	@ (8001b08 <SystemInit+0xb0>)
  RCC->PLLCFGR = 0x01FF0000;
 8001ab0:	4816      	ldr	r0, [pc, #88]	@ (8001b0c <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 8001ab2:	4c17      	ldr	r4, [pc, #92]	@ (8001b10 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8001ab4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001ab6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001ab8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8001aba:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8001abc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001abe:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ac0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ac2:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ac6:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ac8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aca:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001acc:	4811      	ldr	r0, [pc, #68]	@ (8001b14 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8001ace:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8001ad2:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001ad4:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ad6:	6803      	ldr	r3, [r0, #0]
 8001ad8:	f36f 030f 	bfc	r3, #0, #16
 8001adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ae0:	d203      	bcs.n	8001aea <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <SystemInit+0xc0>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <SystemInit+0xc4>)
 8001aec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001af0:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001af4:	601a      	str	r2, [r3, #0]
}
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00
 8001afc:	52002000 	.word	0x52002000
 8001b00:	58024400 	.word	0x58024400
 8001b04:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b08:	01010280 	.word	0x01010280
 8001b0c:	01ff0000 	.word	0x01ff0000
 8001b10:	02020200 	.word	0x02020200
 8001b14:	5c001000 	.word	0x5c001000
 8001b18:	51008000 	.word	0x51008000
 8001b1c:	52004000 	.word	0x52004000

08001b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b24:	f7ff ff98 	bl	8001a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b28:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2a:	490d      	ldr	r1, [pc, #52]	@ (8001b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b40:	4c0a      	ldr	r4, [pc, #40]	@ (8001b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f006 fcc1 	bl	80084d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b52:	f7ff f873 	bl	8000c3c <main>
  bx  lr
 8001b56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b60:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8001b64:	080809cc 	.word	0x080809cc
  ldr r2, =_sbss
 8001b68:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8001b6c:	2407e480 	.word	0x2407e480

08001b70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC3_IRQHandler>
	...

08001b74 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_InitTick+0x40>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b90b      	cbnz	r3, 8001b7e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8001b7a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001b7c:	4770      	bx	lr
{
 8001b7e:	b510      	push	{r4, lr}
 8001b80:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b86:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <HAL_InitTick+0x44>)
 8001b88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8c:	6810      	ldr	r0, [r2, #0]
 8001b8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b92:	f000 ffe9 	bl	8002b68 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b96:	2c0f      	cmp	r4, #15
 8001b98:	d800      	bhi.n	8001b9c <HAL_InitTick+0x28>
 8001b9a:	b108      	cbz	r0, 8001ba0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001b9c:	2001      	movs	r0, #1
}
 8001b9e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f000 ff94 	bl	8002ad4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4b03      	ldr	r3, [pc, #12]	@ (8001bbc <HAL_InitTick+0x48>)
 8001bae:	2000      	movs	r0, #0
 8001bb0:	601c      	str	r4, [r3, #0]
}
 8001bb2:	bd10      	pop	{r4, pc}
 8001bb4:	2400001c 	.word	0x2400001c
 8001bb8:	24000018 	.word	0x24000018
 8001bbc:	24000020 	.word	0x24000020

08001bc0 <HAL_Init>:
{
 8001bc0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc2:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bc4:	4c12      	ldr	r4, [pc, #72]	@ (8001c10 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc6:	f000 ff73 	bl	8002ab0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bca:	f003 f835 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_Init+0x54>)
 8001bd0:	4911      	ldr	r1, [pc, #68]	@ (8001c18 <HAL_Init+0x58>)
 8001bd2:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bd4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bd6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bda:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bde:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001be2:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8001be6:	490d      	ldr	r1, [pc, #52]	@ (8001c1c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001be8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bec:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bee:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001bf2:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf4:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bf6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf8:	f7ff ffbc 	bl	8001b74 <HAL_InitTick>
 8001bfc:	b110      	cbz	r0, 8001c04 <HAL_Init+0x44>
    return HAL_ERROR;
 8001bfe:	2401      	movs	r4, #1
}
 8001c00:	4620      	mov	r0, r4
 8001c02:	bd10      	pop	{r4, pc}
 8001c04:	4604      	mov	r4, r0
  HAL_MspInit();
 8001c06:	f7ff fd93 	bl	8001730 <HAL_MspInit>
}
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	bd10      	pop	{r4, pc}
 8001c0e:	bf00      	nop
 8001c10:	24000014 	.word	0x24000014
 8001c14:	58024400 	.word	0x58024400
 8001c18:	0806d460 	.word	0x0806d460
 8001c1c:	24000018 	.word	0x24000018

08001c20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001c20:	4a03      	ldr	r2, [pc, #12]	@ (8001c30 <HAL_IncTick+0x10>)
 8001c22:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <HAL_IncTick+0x14>)
 8001c24:	6811      	ldr	r1, [r2, #0]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	440b      	add	r3, r1
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2407e330 	.word	0x2407e330
 8001c34:	2400001c 	.word	0x2400001c

08001c38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c38:	4b01      	ldr	r3, [pc, #4]	@ (8001c40 <HAL_GetTick+0x8>)
 8001c3a:	6818      	ldr	r0, [r3, #0]
}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2407e330 	.word	0x2407e330

08001c44 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001c44:	4b01      	ldr	r3, [pc, #4]	@ (8001c4c <HAL_GetREVID+0x8>)
 8001c46:	6818      	ldr	r0, [r3, #0]
}
 8001c48:	0c00      	lsrs	r0, r0, #16
 8001c4a:	4770      	bx	lr
 8001c4c:	5c001000 	.word	0x5c001000

08001c50 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c50:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001c52:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c54:	f7fe ff3c 	bl	8000ad0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c58:	bd08      	pop	{r3, pc}
 8001c5a:	bf00      	nop

08001c5c <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop

08001c60 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop

08001c64 <HAL_ADC_IRQHandler>:
{
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c66:	4a8e      	ldr	r2, [pc, #568]	@ (8001ea0 <HAL_ADC_IRQHandler+0x23c>)
{
 8001c68:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c6a:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c6c:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c6e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c70:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c72:	f000 8095 	beq.w	8001da0 <HAL_ADC_IRQHandler+0x13c>
 8001c76:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	f000 8090 	beq.w	8001da0 <HAL_ADC_IRQHandler+0x13c>
 8001c80:	4a88      	ldr	r2, [pc, #544]	@ (8001ea4 <HAL_ADC_IRQHandler+0x240>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c82:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c84:	07a9      	lsls	r1, r5, #30
 8001c86:	f007 071f 	and.w	r7, r7, #31
 8001c8a:	d502      	bpl.n	8001c92 <HAL_ADC_IRQHandler+0x2e>
 8001c8c:	07b2      	lsls	r2, r6, #30
 8001c8e:	f100 80aa 	bmi.w	8001de6 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c92:	0769      	lsls	r1, r5, #29
 8001c94:	d579      	bpl.n	8001d8a <HAL_ADC_IRQHandler+0x126>
 8001c96:	0772      	lsls	r2, r6, #29
 8001c98:	d577      	bpl.n	8001d8a <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c9a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001c9c:	06d2      	lsls	r2, r2, #27
 8001c9e:	d403      	bmi.n	8001ca8 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ca0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca6:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001cae:	d11c      	bne.n	8001cea <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cb0:	4a7d      	ldr	r2, [pc, #500]	@ (8001ea8 <HAL_ADC_IRQHandler+0x244>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	f000 80e7 	beq.w	8001e86 <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cb8:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001cba:	0491      	lsls	r1, r2, #18
 8001cbc:	d415      	bmi.n	8001cea <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	0712      	lsls	r2, r2, #28
 8001cc2:	d512      	bpl.n	8001cea <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	0750      	lsls	r0, r2, #29
 8001cc8:	f100 80f2 	bmi.w	8001eb0 <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	f022 020c 	bic.w	r2, r2, #12
 8001cd2:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cd4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001cd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cda:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cdc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001cde:	04d9      	lsls	r1, r3, #19
 8001ce0:	d403      	bmi.n	8001cea <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ce2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7fe ff10 	bl	8000b10 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001cf6:	06aa      	lsls	r2, r5, #26
 8001cf8:	d54d      	bpl.n	8001d96 <HAL_ADC_IRQHandler+0x132>
 8001cfa:	06b0      	lsls	r0, r6, #26
 8001cfc:	d54b      	bpl.n	8001d96 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cfe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d00:	06d0      	lsls	r0, r2, #27
 8001d02:	d403      	bmi.n	8001d0c <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d0a:	6562      	str	r2, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d0c:	4966      	ldr	r1, [pc, #408]	@ (8001ea8 <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d10:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d12:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d14:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
 8001d18:	d073      	beq.n	8001e02 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d1a:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d1c:	b9d2      	cbnz	r2, 8001d54 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d1e:	018a      	lsls	r2, r1, #6
 8001d20:	f100 80a9 	bmi.w	8001e76 <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	0650      	lsls	r0, r2, #25
 8001d28:	d514      	bpl.n	8001d54 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001d2a:	0289      	lsls	r1, r1, #10
 8001d2c:	d412      	bmi.n	8001d54 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	0712      	lsls	r2, r2, #28
 8001d32:	f100 80c8 	bmi.w	8001ec6 <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d3c:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d44:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001d46:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d48:	05d8      	lsls	r0, r3, #23
 8001d4a:	d403      	bmi.n	8001d54 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d4c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d54:	4620      	mov	r0, r4
 8001d56:	f000 fe3f 	bl	80029d8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	2260      	movs	r2, #96	@ 0x60
 8001d5e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d60:	0629      	lsls	r1, r5, #24
 8001d62:	d501      	bpl.n	8001d68 <HAL_ADC_IRQHandler+0x104>
 8001d64:	0632      	lsls	r2, r6, #24
 8001d66:	d45f      	bmi.n	8001e28 <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d68:	05e8      	lsls	r0, r5, #23
 8001d6a:	d501      	bpl.n	8001d70 <HAL_ADC_IRQHandler+0x10c>
 8001d6c:	05f1      	lsls	r1, r6, #23
 8001d6e:	d466      	bmi.n	8001e3e <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d70:	05aa      	lsls	r2, r5, #22
 8001d72:	d501      	bpl.n	8001d78 <HAL_ADC_IRQHandler+0x114>
 8001d74:	05b0      	lsls	r0, r6, #22
 8001d76:	d44b      	bmi.n	8001e10 <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d78:	06e9      	lsls	r1, r5, #27
 8001d7a:	d501      	bpl.n	8001d80 <HAL_ADC_IRQHandler+0x11c>
 8001d7c:	06f2      	lsls	r2, r6, #27
 8001d7e:	d411      	bmi.n	8001da4 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d80:	0569      	lsls	r1, r5, #21
 8001d82:	d501      	bpl.n	8001d88 <HAL_ADC_IRQHandler+0x124>
 8001d84:	0572      	lsls	r2, r6, #21
 8001d86:	d466      	bmi.n	8001e56 <HAL_ADC_IRQHandler+0x1f2>
}
 8001d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d8a:	0728      	lsls	r0, r5, #28
 8001d8c:	d5b3      	bpl.n	8001cf6 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d8e:	0731      	lsls	r1, r6, #28
 8001d90:	d483      	bmi.n	8001c9a <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d92:	06aa      	lsls	r2, r5, #26
 8001d94:	d4b1      	bmi.n	8001cfa <HAL_ADC_IRQHandler+0x96>
 8001d96:	0669      	lsls	r1, r5, #25
 8001d98:	d5e2      	bpl.n	8001d60 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d9a:	0672      	lsls	r2, r6, #25
 8001d9c:	d5e0      	bpl.n	8001d60 <HAL_ADC_IRQHandler+0xfc>
 8001d9e:	e7ae      	b.n	8001cfe <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001da0:	4a42      	ldr	r2, [pc, #264]	@ (8001eac <HAL_ADC_IRQHandler+0x248>)
 8001da2:	e76e      	b.n	8001c82 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001da4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001da6:	b17a      	cbz	r2, 8001dc8 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001da8:	2f00      	cmp	r7, #0
 8001daa:	d075      	beq.n	8001e98 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001dac:	4a3c      	ldr	r2, [pc, #240]	@ (8001ea0 <HAL_ADC_IRQHandler+0x23c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	f000 8087 	beq.w	8001ec2 <HAL_ADC_IRQHandler+0x25e>
 8001db4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001db8:	4293      	cmp	r3, r2
 8001dba:	f000 8082 	beq.w	8001ec2 <HAL_ADC_IRQHandler+0x25e>
 8001dbe:	4a39      	ldr	r2, [pc, #228]	@ (8001ea4 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001dc0:	6892      	ldr	r2, [r2, #8]
 8001dc2:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 8001dc6:	d00b      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dc8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_ADC_ErrorCallback(hadc);
 8001dca:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dd0:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 8001dda:	f7ff ff41 	bl	8001c60 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	2210      	movs	r2, #16
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e7cc      	b.n	8001d80 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001de6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001de8:	06d8      	lsls	r0, r3, #27
 8001dea:	d403      	bmi.n	8001df4 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001dec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001dee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001df2:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001df4:	4620      	mov	r0, r4
 8001df6:	f000 fdf7 	bl	80029e8 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e747      	b.n	8001c92 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e02:	21c1      	movs	r1, #193	@ 0xc1
 8001e04:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e06:	07c9      	lsls	r1, r1, #31
 8001e08:	d487      	bmi.n	8001d1a <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e0a:	4925      	ldr	r1, [pc, #148]	@ (8001ea0 <HAL_ADC_IRQHandler+0x23c>)
 8001e0c:	68c9      	ldr	r1, [r1, #12]
 8001e0e:	e785      	b.n	8001d1c <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e10:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e12:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e18:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e1a:	f000 fde3 	bl	80029e4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	e7a7      	b.n	8001d78 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e28:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e2a:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e30:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e32:	f7ff ff13 	bl	8001c5c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	2280      	movs	r2, #128	@ 0x80
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e794      	b.n	8001d68 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e40:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e46:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e48:	f000 fdca 	bl	80029e0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e78c      	b.n	8001d70 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e56:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e5c:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e62:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e64:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001e66:	f042 0208 	orr.w	r2, r2, #8
 8001e6a:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e6c:	6019      	str	r1, [r3, #0]
}
 8001e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e72:	f000 bdb3 	b.w	80029dc <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e76:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001e7a:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001e7e:	4302      	orrs	r2, r0
 8001e80:	f47f af68 	bne.w	8001d54 <HAL_ADC_IRQHandler+0xf0>
 8001e84:	e74e      	b.n	8001d24 <HAL_ADC_IRQHandler+0xc0>
 8001e86:	f240 2221 	movw	r2, #545	@ 0x221
 8001e8a:	40fa      	lsrs	r2, r7
 8001e8c:	07d0      	lsls	r0, r2, #31
 8001e8e:	f53f af13 	bmi.w	8001cb8 <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e92:	4a03      	ldr	r2, [pc, #12]	@ (8001ea0 <HAL_ADC_IRQHandler+0x23c>)
 8001e94:	68d2      	ldr	r2, [r2, #12]
 8001e96:	e710      	b.n	8001cba <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	0790      	lsls	r0, r2, #30
 8001e9c:	d0a0      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x17c>
 8001e9e:	e793      	b.n	8001dc8 <HAL_ADC_IRQHandler+0x164>
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	58026300 	.word	0x58026300
 8001ea8:	40022100 	.word	0x40022100
 8001eac:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001eb2:	f043 0310 	orr.w	r3, r3, #16
 8001eb6:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001ec0:	e713      	b.n	8001cea <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ec2:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <HAL_ADC_IRQHandler+0x274>)
 8001ec4:	e77c      	b.n	8001dc0 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001ec8:	f043 0310 	orr.w	r3, r3, #16
 8001ecc:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ece:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001ed6:	e73d      	b.n	8001d54 <HAL_ADC_IRQHandler+0xf0>
 8001ed8:	40022300 	.word	0x40022300

08001edc <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001edc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ede:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ee0:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ee4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
{
 8001ee6:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ee8:	d11d      	bne.n	8001f26 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001eea:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef0:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001ef2:	680a      	ldr	r2, [r1, #0]
 8001ef4:	f012 0f08 	tst.w	r2, #8
 8001ef8:	68ca      	ldr	r2, [r1, #12]
 8001efa:	d01b      	beq.n	8001f34 <ADC_DMAConvCplt+0x58>
 8001efc:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001f00:	d10d      	bne.n	8001f1e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f02:	68ca      	ldr	r2, [r1, #12]
 8001f04:	0494      	lsls	r4, r2, #18
 8001f06:	d40a      	bmi.n	8001f1e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f0e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f12:	04d1      	lsls	r1, r2, #19
 8001f14:	d403      	bmi.n	8001f1e <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f18:	f042 0201 	orr.w	r2, r2, #1
 8001f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fdf6 	bl	8000b10 <HAL_ADC_ConvCpltCallback>
}
 8001f24:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f26:	06d2      	lsls	r2, r2, #27
 8001f28:	d40a      	bmi.n	8001f40 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001f34:	0790      	lsls	r0, r2, #30
 8001f36:	d0e7      	beq.n	8001f08 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fde9 	bl	8000b10 <HAL_ADC_ConvCpltCallback>
 8001f3e:	e7f1      	b.n	8001f24 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fe8d 	bl	8001c60 <HAL_ADC_ErrorCallback>
}
 8001f46:	bd10      	pop	{r4, pc}

08001f48 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f48:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001f4a:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f4c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f52:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f54:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f5c:	f7ff fe80 	bl	8001c60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f60:	bd08      	pop	{r3, pc}
 8001f62:	bf00      	nop

08001f64 <HAL_ADC_ConfigChannel>:
{
 8001f64:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8001f66:	2200      	movs	r2, #0
{
 8001f68:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8001f6a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001f6c:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8001f70:	2a01      	cmp	r2, #1
 8001f72:	f000 80ef 	beq.w	8002154 <HAL_ADC_ConfigChannel+0x1f0>
 8001f76:	2401      	movs	r4, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f78:	6802      	ldr	r2, [r0, #0]
 8001f7a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001f7c:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f80:	6890      	ldr	r0, [r2, #8]
 8001f82:	0745      	lsls	r5, r0, #29
 8001f84:	d509      	bpl.n	8001f9a <HAL_ADC_ConfigChannel+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8001f88:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f8a:	f042 0220 	orr.w	r2, r2, #32
 8001f8e:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8001f96:	b002      	add	sp, #8
 8001f98:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001f9a:	680d      	ldr	r5, [r1, #0]
 8001f9c:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f9e:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001fa2:	db0d      	blt.n	8001fc0 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001fa4:	f3c5 0613 	ubfx	r6, r5, #0, #20
 8001fa8:	2e00      	cmp	r6, #0
 8001faa:	f000 80c1 	beq.w	8002130 <HAL_ADC_ConfigChannel+0x1cc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fb2:	b115      	cbz	r5, 8001fba <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001fb4:	fab5 f585 	clz	r5, r5
 8001fb8:	40ac      	lsls	r4, r5
 8001fba:	69d5      	ldr	r5, [r2, #28]
 8001fbc:	432c      	orrs	r4, r5
 8001fbe:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fc0:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8001fc2:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fc6:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8001fca:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fce:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8001fd0:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fd4:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8001fd8:	fa0c fc04 	lsl.w	ip, ip, r4
 8001fdc:	40a0      	lsls	r0, r4
 8001fde:	f85e 4005 	ldr.w	r4, [lr, r5]
 8001fe2:	ea24 0c0c 	bic.w	ip, r4, ip
 8001fe6:	ea4c 0000 	orr.w	r0, ip, r0
 8001fea:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fee:	6890      	ldr	r0, [r2, #8]
 8001ff0:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ff4:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ff8:	0700      	lsls	r0, r0, #28
 8001ffa:	d542      	bpl.n	8002082 <HAL_ADC_ConfigChannel+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ffc:	6890      	ldr	r0, [r2, #8]
 8001ffe:	07c6      	lsls	r6, r0, #31
 8002000:	d43d      	bmi.n	800207e <HAL_ADC_ConfigChannel+0x11a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002002:	68cd      	ldr	r5, [r1, #12]
 8002004:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8002006:	f005 0618 	and.w	r6, r5, #24
 800200a:	48a9      	ldr	r0, [pc, #676]	@ (80022b0 <HAL_ADC_ConfigChannel+0x34c>)
 800200c:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8002010:	40f0      	lsrs	r0, r6
 8002012:	f3c4 0613 	ubfx	r6, r4, #0, #20
 8002016:	4020      	ands	r0, r4
 8002018:	ea21 0106 	bic.w	r1, r1, r6
 800201c:	4301      	orrs	r1, r0
 800201e:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002022:	49a4      	ldr	r1, [pc, #656]	@ (80022b4 <HAL_ADC_ConfigChannel+0x350>)
 8002024:	428d      	cmp	r5, r1
 8002026:	f000 808a 	beq.w	800213e <HAL_ADC_ConfigChannel+0x1da>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800202a:	2c00      	cmp	r4, #0
 800202c:	da27      	bge.n	800207e <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800202e:	49a2      	ldr	r1, [pc, #648]	@ (80022b8 <HAL_ADC_ConfigChannel+0x354>)
 8002030:	428a      	cmp	r2, r1
 8002032:	f000 80bd 	beq.w	80021b0 <HAL_ADC_ConfigChannel+0x24c>
 8002036:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 800203a:	428a      	cmp	r2, r1
 800203c:	f000 80b8 	beq.w	80021b0 <HAL_ADC_ConfigChannel+0x24c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002040:	489e      	ldr	r0, [pc, #632]	@ (80022bc <HAL_ADC_ConfigChannel+0x358>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002042:	499f      	ldr	r1, [pc, #636]	@ (80022c0 <HAL_ADC_ConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002044:	6886      	ldr	r6, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002046:	688d      	ldr	r5, [r1, #8]
 8002048:	07ed      	lsls	r5, r5, #31
 800204a:	d49c      	bmi.n	8001f86 <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800204c:	4d9d      	ldr	r5, [pc, #628]	@ (80022c4 <HAL_ADC_ConfigChannel+0x360>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800204e:	f006 7ce0 	and.w	ip, r6, #29360128	@ 0x1c00000
 8002052:	42ac      	cmp	r4, r5
 8002054:	f000 8156 	beq.w	8002304 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002058:	4d9b      	ldr	r5, [pc, #620]	@ (80022c8 <HAL_ADC_ConfigChannel+0x364>)
 800205a:	42ac      	cmp	r4, r5
 800205c:	f000 8118 	beq.w	8002290 <HAL_ADC_ConfigChannel+0x32c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002060:	4d9a      	ldr	r5, [pc, #616]	@ (80022cc <HAL_ADC_ConfigChannel+0x368>)
 8002062:	42ac      	cmp	r4, r5
 8002064:	d10b      	bne.n	800207e <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 8002066:	0274      	lsls	r4, r6, #9
 8002068:	d409      	bmi.n	800207e <HAL_ADC_ConfigChannel+0x11a>
 800206a:	428a      	cmp	r2, r1
 800206c:	d107      	bne.n	800207e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800206e:	6882      	ldr	r2, [r0, #8]
 8002070:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002074:	ea42 020c 	orr.w	r2, r2, ip
 8002078:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800207c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207e:	2000      	movs	r0, #0
 8002080:	e786      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002082:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002084:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 8002088:	f04f 0e07 	mov.w	lr, #7
 800208c:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800208e:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8002090:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002094:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8002098:	fa0e fe04 	lsl.w	lr, lr, r4
 800209c:	fa06 f404 	lsl.w	r4, r6, r4
 80020a0:	f85c 0005 	ldr.w	r0, [ip, r5]
 80020a4:	ea20 000e 	bic.w	r0, r0, lr
 80020a8:	4320      	orrs	r0, r4
 80020aa:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020ae:	4888      	ldr	r0, [pc, #544]	@ (80022d0 <HAL_ADC_ConfigChannel+0x36c>)
 80020b0:	694d      	ldr	r5, [r1, #20]
 80020b2:	6800      	ldr	r0, [r0, #0]
 80020b4:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 80020b8:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 80020bc:	68d0      	ldr	r0, [r2, #12]
 80020be:	d039      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x1d0>
 80020c0:	f010 0f10 	tst.w	r0, #16
 80020c4:	68d0      	ldr	r0, [r2, #12]
 80020c6:	d035      	beq.n	8002134 <HAL_ADC_ConfigChannel+0x1d0>
 80020c8:	0840      	lsrs	r0, r0, #1
 80020ca:	f000 0008 	and.w	r0, r0, #8
 80020ce:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020d0:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020d2:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020d4:	2e04      	cmp	r6, #4
 80020d6:	d040      	beq.n	800215a <HAL_ADC_ConfigChannel+0x1f6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d8:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 80020dc:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 80020e0:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 80020e4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80020e8:	4320      	orrs	r0, r4
 80020ea:	4328      	orrs	r0, r5
 80020ec:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80020f0:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f2:	690d      	ldr	r5, [r1, #16]
 80020f4:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80020f8:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 80020fc:	fab4 f484 	clz	r4, r4
 8002100:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002104:	0964      	lsrs	r4, r4, #5
 8002106:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 800210a:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800210e:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002110:	690d      	ldr	r5, [r1, #16]
 8002112:	f1a0 0001 	sub.w	r0, r0, #1
 8002116:	6914      	ldr	r4, [r2, #16]
 8002118:	f005 051f 	and.w	r5, r5, #31
 800211c:	fab0 f080 	clz	r0, r0
 8002120:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 8002124:	0940      	lsrs	r0, r0, #5
 8002126:	02c0      	lsls	r0, r0, #11
 8002128:	40a8      	lsls	r0, r5
 800212a:	4320      	orrs	r0, r4
 800212c:	6110      	str	r0, [r2, #16]
}
 800212e:	e765      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002130:	4084      	lsls	r4, r0
 8002132:	e742      	b.n	8001fba <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002134:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8002138:	0040      	lsls	r0, r0, #1
 800213a:	4085      	lsls	r5, r0
 800213c:	e7c8      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x16c>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800213e:	495e      	ldr	r1, [pc, #376]	@ (80022b8 <HAL_ADC_ConfigChannel+0x354>)
 8002140:	428a      	cmp	r2, r1
 8002142:	d07a      	beq.n	800223a <HAL_ADC_ConfigChannel+0x2d6>
 8002144:	4963      	ldr	r1, [pc, #396]	@ (80022d4 <HAL_ADC_ConfigChannel+0x370>)
 8002146:	428a      	cmp	r2, r1
 8002148:	d040      	beq.n	80021cc <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800214a:	69d1      	ldr	r1, [r2, #28]
 800214c:	f041 0101 	orr.w	r1, r1, #1
 8002150:	61d1      	str	r1, [r2, #28]
}
 8002152:	e76a      	b.n	800202a <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8002154:	2002      	movs	r0, #2
}
 8002156:	b002      	add	sp, #8
 8002158:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800215a:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 800215c:	0684      	lsls	r4, r0, #26
 800215e:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8002162:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8002166:	d014      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x22e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002168:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 800216a:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 800216e:	4284      	cmp	r4, r0
 8002170:	d019      	beq.n	80021a6 <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002172:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8002174:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002178:	4284      	cmp	r4, r0
 800217a:	d00f      	beq.n	800219c <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800217c:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 800217e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002182:	4284      	cmp	r4, r0
 8002184:	f47f af3a 	bne.w	8001ffc <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002188:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 800218a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800218e:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8002190:	e734      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002192:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8002194:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002198:	6610      	str	r0, [r2, #96]	@ 0x60
 800219a:	e7e5      	b.n	8002168 <HAL_ADC_ConfigChannel+0x204>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800219c:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800219e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80021a2:	6690      	str	r0, [r2, #104]	@ 0x68
 80021a4:	e7ea      	b.n	800217c <HAL_ADC_ConfigChannel+0x218>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80021a6:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80021a8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80021ac:	6650      	str	r0, [r2, #100]	@ 0x64
 80021ae:	e7e0      	b.n	8002172 <HAL_ADC_ConfigChannel+0x20e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021b0:	4949      	ldr	r1, [pc, #292]	@ (80022d8 <HAL_ADC_ConfigChannel+0x374>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b2:	4a41      	ldr	r2, [pc, #260]	@ (80022b8 <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021b4:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b6:	6892      	ldr	r2, [r2, #8]
 80021b8:	f012 0f01 	tst.w	r2, #1
 80021bc:	4a45      	ldr	r2, [pc, #276]	@ (80022d4 <HAL_ADC_ConfigChannel+0x370>)
 80021be:	6892      	ldr	r2, [r2, #8]
 80021c0:	f47f aee1 	bne.w	8001f86 <HAL_ADC_ConfigChannel+0x22>
 80021c4:	07d2      	lsls	r2, r2, #31
 80021c6:	f53f aede 	bmi.w	8001f86 <HAL_ADC_ConfigChannel+0x22>
 80021ca:	e758      	b.n	800207e <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80021cc:	4943      	ldr	r1, [pc, #268]	@ (80022dc <HAL_ADC_ConfigChannel+0x378>)
 80021ce:	428c      	cmp	r4, r1
 80021d0:	d058      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x320>
 80021d2:	4943      	ldr	r1, [pc, #268]	@ (80022e0 <HAL_ADC_ConfigChannel+0x37c>)
 80021d4:	428c      	cmp	r4, r1
 80021d6:	d057      	beq.n	8002288 <HAL_ADC_ConfigChannel+0x324>
 80021d8:	4942      	ldr	r1, [pc, #264]	@ (80022e4 <HAL_ADC_ConfigChannel+0x380>)
 80021da:	428c      	cmp	r4, r1
 80021dc:	f000 80b5 	beq.w	800234a <HAL_ADC_ConfigChannel+0x3e6>
 80021e0:	4941      	ldr	r1, [pc, #260]	@ (80022e8 <HAL_ADC_ConfigChannel+0x384>)
 80021e2:	428c      	cmp	r4, r1
 80021e4:	f000 80b3 	beq.w	800234e <HAL_ADC_ConfigChannel+0x3ea>
 80021e8:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 80021ec:	3110      	adds	r1, #16
 80021ee:	428c      	cmp	r4, r1
 80021f0:	f000 80af 	beq.w	8002352 <HAL_ADC_ConfigChannel+0x3ee>
 80021f4:	493d      	ldr	r1, [pc, #244]	@ (80022ec <HAL_ADC_ConfigChannel+0x388>)
 80021f6:	428c      	cmp	r4, r1
 80021f8:	f000 80ad 	beq.w	8002356 <HAL_ADC_ConfigChannel+0x3f2>
 80021fc:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8002200:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8002204:	428c      	cmp	r4, r1
 8002206:	f000 80a8 	beq.w	800235a <HAL_ADC_ConfigChannel+0x3f6>
 800220a:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 800220e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002212:	428c      	cmp	r4, r1
 8002214:	f000 80a3 	beq.w	800235e <HAL_ADC_ConfigChannel+0x3fa>
 8002218:	4935      	ldr	r1, [pc, #212]	@ (80022f0 <HAL_ADC_ConfigChannel+0x38c>)
 800221a:	428c      	cmp	r4, r1
 800221c:	d195      	bne.n	800214a <HAL_ADC_ConfigChannel+0x1e6>
 800221e:	4935      	ldr	r1, [pc, #212]	@ (80022f4 <HAL_ADC_ConfigChannel+0x390>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8002224:	2900      	cmp	r1, #0
 8002226:	d031      	beq.n	800228c <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 8002228:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f101 	lsl.w	r1, r0, r1
 8002232:	69d0      	ldr	r0, [r2, #28]
 8002234:	4301      	orrs	r1, r0
 8002236:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002238:	e721      	b.n	800207e <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800223a:	4928      	ldr	r1, [pc, #160]	@ (80022dc <HAL_ADC_ConfigChannel+0x378>)
 800223c:	428c      	cmp	r4, r1
 800223e:	d021      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x320>
 8002240:	4927      	ldr	r1, [pc, #156]	@ (80022e0 <HAL_ADC_ConfigChannel+0x37c>)
 8002242:	428c      	cmp	r4, r1
 8002244:	d020      	beq.n	8002288 <HAL_ADC_ConfigChannel+0x324>
 8002246:	4927      	ldr	r1, [pc, #156]	@ (80022e4 <HAL_ADC_ConfigChannel+0x380>)
 8002248:	428c      	cmp	r4, r1
 800224a:	d07e      	beq.n	800234a <HAL_ADC_ConfigChannel+0x3e6>
 800224c:	4926      	ldr	r1, [pc, #152]	@ (80022e8 <HAL_ADC_ConfigChannel+0x384>)
 800224e:	428c      	cmp	r4, r1
 8002250:	d07d      	beq.n	800234e <HAL_ADC_ConfigChannel+0x3ea>
 8002252:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8002256:	3110      	adds	r1, #16
 8002258:	428c      	cmp	r4, r1
 800225a:	d07a      	beq.n	8002352 <HAL_ADC_ConfigChannel+0x3ee>
 800225c:	4923      	ldr	r1, [pc, #140]	@ (80022ec <HAL_ADC_ConfigChannel+0x388>)
 800225e:	428c      	cmp	r4, r1
 8002260:	d079      	beq.n	8002356 <HAL_ADC_ConfigChannel+0x3f2>
 8002262:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8002266:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800226a:	428c      	cmp	r4, r1
 800226c:	d075      	beq.n	800235a <HAL_ADC_ConfigChannel+0x3f6>
 800226e:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8002272:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002276:	428c      	cmp	r4, r1
 8002278:	d071      	beq.n	800235e <HAL_ADC_ConfigChannel+0x3fa>
 800227a:	491f      	ldr	r1, [pc, #124]	@ (80022f8 <HAL_ADC_ConfigChannel+0x394>)
 800227c:	428c      	cmp	r4, r1
 800227e:	d1cb      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x2b4>
 8002280:	491e      	ldr	r1, [pc, #120]	@ (80022fc <HAL_ADC_ConfigChannel+0x398>)
 8002282:	e7cd      	b.n	8002220 <HAL_ADC_ConfigChannel+0x2bc>
 8002284:	2101      	movs	r1, #1
 8002286:	e7cb      	b.n	8002220 <HAL_ADC_ConfigChannel+0x2bc>
 8002288:	491d      	ldr	r1, [pc, #116]	@ (8002300 <HAL_ADC_ConfigChannel+0x39c>)
 800228a:	e7c9      	b.n	8002220 <HAL_ADC_ConfigChannel+0x2bc>
 800228c:	2101      	movs	r1, #1
 800228e:	e7d0      	b.n	8002232 <HAL_ADC_ConfigChannel+0x2ce>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002290:	01f5      	lsls	r5, r6, #7
 8002292:	f53f aef4 	bmi.w	800207e <HAL_ADC_ConfigChannel+0x11a>
 8002296:	428a      	cmp	r2, r1
 8002298:	f47f aef1 	bne.w	800207e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800229c:	6882      	ldr	r2, [r0, #8]
 800229e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80022a2:	ea42 020c 	orr.w	r2, r2, ip
 80022a6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80022aa:	6082      	str	r2, [r0, #8]
}
 80022ac:	e6e7      	b.n	800207e <HAL_ADC_ConfigChannel+0x11a>
 80022ae:	bf00      	nop
 80022b0:	000fffff 	.word	0x000fffff
 80022b4:	47ff0000 	.word	0x47ff0000
 80022b8:	40022000 	.word	0x40022000
 80022bc:	58026300 	.word	0x58026300
 80022c0:	58026000 	.word	0x58026000
 80022c4:	cb840000 	.word	0xcb840000
 80022c8:	c7520000 	.word	0xc7520000
 80022cc:	cfb80000 	.word	0xcfb80000
 80022d0:	5c001000 	.word	0x5c001000
 80022d4:	40022100 	.word	0x40022100
 80022d8:	40022300 	.word	0x40022300
 80022dc:	04300002 	.word	0x04300002
 80022e0:	08600004 	.word	0x08600004
 80022e4:	0c900008 	.word	0x0c900008
 80022e8:	10c00010 	.word	0x10c00010
 80022ec:	2a000400 	.word	0x2a000400
 80022f0:	4b840000 	.word	0x4b840000
 80022f4:	4fb80000 	.word	0x4fb80000
 80022f8:	43210000 	.word	0x43210000
 80022fc:	47520000 	.word	0x47520000
 8002300:	19200040 	.word	0x19200040
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002304:	0236      	lsls	r6, r6, #8
 8002306:	f53f aeba 	bmi.w	800207e <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800230a:	428a      	cmp	r2, r1
 800230c:	f47f aeb7 	bne.w	800207e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002310:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002312:	4914      	ldr	r1, [pc, #80]	@ (8002364 <HAL_ADC_ConfigChannel+0x400>)
 8002314:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002318:	ea42 020c 	orr.w	r2, r2, ip
 800231c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002320:	6082      	str	r2, [r0, #8]
 8002322:	680a      	ldr	r2, [r1, #0]
 8002324:	4910      	ldr	r1, [pc, #64]	@ (8002368 <HAL_ADC_ConfigChannel+0x404>)
 8002326:	0992      	lsrs	r2, r2, #6
 8002328:	fba1 1202 	umull	r1, r2, r1, r2
 800232c:	0992      	lsrs	r2, r2, #6
 800232e:	3201      	adds	r2, #1
 8002330:	0052      	lsls	r2, r2, #1
 8002332:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8002334:	9a01      	ldr	r2, [sp, #4]
 8002336:	2a00      	cmp	r2, #0
 8002338:	f43f aea1 	beq.w	800207e <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 800233c:	9a01      	ldr	r2, [sp, #4]
 800233e:	3a01      	subs	r2, #1
 8002340:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8002342:	9a01      	ldr	r2, [sp, #4]
 8002344:	2a00      	cmp	r2, #0
 8002346:	d1f9      	bne.n	800233c <HAL_ADC_ConfigChannel+0x3d8>
 8002348:	e699      	b.n	800207e <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800234a:	4908      	ldr	r1, [pc, #32]	@ (800236c <HAL_ADC_ConfigChannel+0x408>)
 800234c:	e768      	b.n	8002220 <HAL_ADC_ConfigChannel+0x2bc>
 800234e:	4908      	ldr	r1, [pc, #32]	@ (8002370 <HAL_ADC_ConfigChannel+0x40c>)
 8002350:	e766      	b.n	8002220 <HAL_ADC_ConfigChannel+0x2bc>
 8002352:	4908      	ldr	r1, [pc, #32]	@ (8002374 <HAL_ADC_ConfigChannel+0x410>)
 8002354:	e764      	b.n	8002220 <HAL_ADC_ConfigChannel+0x2bc>
 8002356:	4908      	ldr	r1, [pc, #32]	@ (8002378 <HAL_ADC_ConfigChannel+0x414>)
 8002358:	e762      	b.n	8002220 <HAL_ADC_ConfigChannel+0x2bc>
 800235a:	4908      	ldr	r1, [pc, #32]	@ (800237c <HAL_ADC_ConfigChannel+0x418>)
 800235c:	e760      	b.n	8002220 <HAL_ADC_ConfigChannel+0x2bc>
 800235e:	4908      	ldr	r1, [pc, #32]	@ (8002380 <HAL_ADC_ConfigChannel+0x41c>)
 8002360:	e75e      	b.n	8002220 <HAL_ADC_ConfigChannel+0x2bc>
 8002362:	bf00      	nop
 8002364:	24000018 	.word	0x24000018
 8002368:	053e2d63 	.word	0x053e2d63
 800236c:	1d500080 	.word	0x1d500080
 8002370:	21800100 	.word	0x21800100
 8002374:	25b00200 	.word	0x25b00200
 8002378:	2e300800 	.word	0x2e300800
 800237c:	32601000 	.word	0x32601000
 8002380:	36902000 	.word	0x36902000

08002384 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002384:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	07d1      	lsls	r1, r2, #31
 800238a:	d501      	bpl.n	8002390 <ADC_Enable+0xc>
  return HAL_OK;
 800238c:	2000      	movs	r0, #0
}
 800238e:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002390:	6899      	ldr	r1, [r3, #8]
 8002392:	4a23      	ldr	r2, [pc, #140]	@ (8002420 <ADC_Enable+0x9c>)
 8002394:	4211      	tst	r1, r2
{
 8002396:	b570      	push	{r4, r5, r6, lr}
 8002398:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800239a:	d12f      	bne.n	80023fc <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	4a21      	ldr	r2, [pc, #132]	@ (8002424 <ADC_Enable+0xa0>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80023a8:	f7ff fc46 	bl	8001c38 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 80023b0:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d02c      	beq.n	8002410 <ADC_Enable+0x8c>
 80023b6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d028      	beq.n	8002410 <ADC_Enable+0x8c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023be:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 80023c2:	f502 4284 	add.w	r2, r2, #16896	@ 0x4200
 80023c6:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	07d2      	lsls	r2, r2, #31
 80023cc:	d414      	bmi.n	80023f8 <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 80023ce:	4e15      	ldr	r6, [pc, #84]	@ (8002424 <ADC_Enable+0xa0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	07d0      	lsls	r0, r2, #31
 80023d4:	d404      	bmi.n	80023e0 <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	4032      	ands	r2, r6
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023e0:	f7ff fc2a 	bl	8001c38 <HAL_GetTick>
 80023e4:	1b43      	subs	r3, r0, r5
 80023e6:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023e8:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023ea:	d902      	bls.n	80023f2 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	07d1      	lsls	r1, r2, #31
 80023f0:	d504      	bpl.n	80023fc <ADC_Enable+0x78>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	07d2      	lsls	r2, r2, #31
 80023f6:	d5eb      	bpl.n	80023d0 <ADC_Enable+0x4c>
  return HAL_OK;
 80023f8:	2000      	movs	r0, #0
}
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 80023fe:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002400:	f043 0310 	orr.w	r3, r3, #16
 8002404:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002406:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 800240e:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002410:	4a06      	ldr	r2, [pc, #24]	@ (800242c <ADC_Enable+0xa8>)
 8002412:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002414:	06d6      	lsls	r6, r2, #27
 8002416:	d0d7      	beq.n	80023c8 <ADC_Enable+0x44>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002418:	4a05      	ldr	r2, [pc, #20]	@ (8002430 <ADC_Enable+0xac>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800241a:	4293      	cmp	r3, r2
 800241c:	d1d4      	bne.n	80023c8 <ADC_Enable+0x44>
 800241e:	e7eb      	b.n	80023f8 <ADC_Enable+0x74>
 8002420:	8000003f 	.word	0x8000003f
 8002424:	7fffffc0 	.word	0x7fffffc0
 8002428:	40022000 	.word	0x40022000
 800242c:	40022300 	.word	0x40022300
 8002430:	40022100 	.word	0x40022100

08002434 <HAL_ADC_Start_DMA>:
{
 8002434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002438:	4b3b      	ldr	r3, [pc, #236]	@ (8002528 <HAL_ADC_Start_DMA+0xf4>)
{
 800243a:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800243c:	6800      	ldr	r0, [r0, #0]
{
 800243e:	460e      	mov	r6, r1
 8002440:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002442:	4298      	cmp	r0, r3
 8002444:	d01c      	beq.n	8002480 <HAL_ADC_Start_DMA+0x4c>
 8002446:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800244a:	4298      	cmp	r0, r3
 800244c:	d018      	beq.n	8002480 <HAL_ADC_Start_DMA+0x4c>
 800244e:	4b37      	ldr	r3, [pc, #220]	@ (800252c <HAL_ADC_Start_DMA+0xf8>)
 8002450:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002452:	6885      	ldr	r5, [r0, #8]
 8002454:	f015 0504 	ands.w	r5, r5, #4
 8002458:	d118      	bne.n	800248c <HAL_ADC_Start_DMA+0x58>
    __HAL_LOCK(hadc);
 800245a:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 800245e:	2a01      	cmp	r2, #1
 8002460:	d014      	beq.n	800248c <HAL_ADC_Start_DMA+0x58>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002462:	f003 081f 	and.w	r8, r3, #31
 8002466:	f240 2321 	movw	r3, #545	@ 0x221
 800246a:	2001      	movs	r0, #1
 800246c:	fa23 f308 	lsr.w	r3, r3, r8
 8002470:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002474:	4003      	ands	r3, r0
 8002476:	d10c      	bne.n	8002492 <HAL_ADC_Start_DMA+0x5e>
      __HAL_UNLOCK(hadc);
 8002478:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800247c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002480:	4b2b      	ldr	r3, [pc, #172]	@ (8002530 <HAL_ADC_Start_DMA+0xfc>)
 8002482:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002484:	6885      	ldr	r5, [r0, #8]
 8002486:	f015 0504 	ands.w	r5, r5, #4
 800248a:	d0e6      	beq.n	800245a <HAL_ADC_Start_DMA+0x26>
    __HAL_LOCK(hadc);
 800248c:	2002      	movs	r0, #2
}
 800248e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002492:	4620      	mov	r0, r4
 8002494:	f7ff ff76 	bl	8002384 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002498:	2800      	cmp	r0, #0
 800249a:	d140      	bne.n	800251e <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 800249c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800249e:	4b25      	ldr	r3, [pc, #148]	@ (8002534 <HAL_ADC_Start_DMA+0x100>)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024a0:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80024a2:	4013      	ands	r3, r2
 80024a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a8:	6563      	str	r3, [r4, #84]	@ 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024aa:	f1b8 0f00 	cmp.w	r8, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_ADC_Start_DMA+0x82>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024b0:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <HAL_ADC_Start_DMA+0x104>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024b2:	4299      	cmp	r1, r3
 80024b4:	d003      	beq.n	80024be <HAL_ADC_Start_DMA+0x8a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024b6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80024b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80024bc:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80024c0:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 80024c4:	d02e      	beq.n	8002524 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80024c8:	f023 0306 	bic.w	r3, r3, #6
 80024cc:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024ce:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024d0:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024d2:	4d1a      	ldr	r5, [pc, #104]	@ (800253c <HAL_ADC_Start_DMA+0x108>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024d4:	463b      	mov	r3, r7
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80024d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80024d8:	3140      	adds	r1, #64	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024da:	63c5      	str	r5, [r0, #60]	@ 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024dc:	4d18      	ldr	r5, [pc, #96]	@ (8002540 <HAL_ADC_Start_DMA+0x10c>)
 80024de:	6405      	str	r5, [r0, #64]	@ 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024e0:	4d18      	ldr	r5, [pc, #96]	@ (8002544 <HAL_ADC_Start_DMA+0x110>)
 80024e2:	64c5      	str	r5, [r0, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024e4:	251c      	movs	r5, #28
 80024e6:	f841 5c40 	str.w	r5, [r1, #-64]
        __HAL_UNLOCK(hadc);
 80024ea:	2500      	movs	r5, #0
 80024ec:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024f0:	f851 5c3c 	ldr.w	r5, [r1, #-60]
 80024f4:	f045 0510 	orr.w	r5, r5, #16
 80024f8:	f841 5c3c 	str.w	r5, [r1, #-60]
 80024fc:	f851 5c34 	ldr.w	r5, [r1, #-52]
 8002500:	f025 0503 	bic.w	r5, r5, #3
 8002504:	4335      	orrs	r5, r6
 8002506:	f841 5c34 	str.w	r5, [r1, #-52]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800250a:	f001 f8bb 	bl	8003684 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800250e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002510:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <HAL_ADC_Start_DMA+0x114>)
 8002512:	6891      	ldr	r1, [r2, #8]
 8002514:	400b      	ands	r3, r1
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6093      	str	r3, [r2, #8]
}
 800251c:	e7b7      	b.n	800248e <HAL_ADC_Start_DMA+0x5a>
        __HAL_UNLOCK(hadc);
 800251e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8002522:	e7b4      	b.n	800248e <HAL_ADC_Start_DMA+0x5a>
          ADC_CLEAR_ERRORCODE(hadc);
 8002524:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002526:	e7d2      	b.n	80024ce <HAL_ADC_Start_DMA+0x9a>
 8002528:	40022000 	.word	0x40022000
 800252c:	58026300 	.word	0x58026300
 8002530:	40022300 	.word	0x40022300
 8002534:	fffff0fe 	.word	0xfffff0fe
 8002538:	40022100 	.word	0x40022100
 800253c:	08001edd 	.word	0x08001edd
 8002540:	08001c51 	.word	0x08001c51
 8002544:	08001f49 	.word	0x08001f49
 8002548:	7fffffc0 	.word	0x7fffffc0

0800254c <ADC_Disable>:
{
 800254c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800254e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	0795      	lsls	r5, r2, #30
 8002554:	d502      	bpl.n	800255c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002556:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8002558:	2000      	movs	r0, #0
}
 800255a:	bd38      	pop	{r3, r4, r5, pc}
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	07d4      	lsls	r4, r2, #31
 8002560:	d5fa      	bpl.n	8002558 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4604      	mov	r4, r0
 8002566:	f002 020d 	and.w	r2, r2, #13
 800256a:	2a01      	cmp	r2, #1
 800256c:	d009      	beq.n	8002582 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8002570:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002578:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8002580:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002582:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002584:	2103      	movs	r1, #3
 8002586:	4a0d      	ldr	r2, [pc, #52]	@ (80025bc <ADC_Disable+0x70>)
 8002588:	4002      	ands	r2, r0
 800258a:	f042 0202 	orr.w	r2, r2, #2
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002592:	f7ff fb51 	bl	8001c38 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002596:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002598:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	07d9      	lsls	r1, r3, #31
 800259e:	d403      	bmi.n	80025a8 <ADC_Disable+0x5c>
 80025a0:	e7da      	b.n	8002558 <ADC_Disable+0xc>
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	07db      	lsls	r3, r3, #31
 80025a6:	d5d7      	bpl.n	8002558 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025a8:	f7ff fb46 	bl	8001c38 <HAL_GetTick>
 80025ac:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025ae:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025b0:	2802      	cmp	r0, #2
 80025b2:	d9f6      	bls.n	80025a2 <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	07d2      	lsls	r2, r2, #31
 80025b8:	d5f3      	bpl.n	80025a2 <ADC_Disable+0x56>
 80025ba:	e7d8      	b.n	800256e <ADC_Disable+0x22>
 80025bc:	7fffffc0 	.word	0x7fffffc0

080025c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80025c0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025c2:	4a4f      	ldr	r2, [pc, #316]	@ (8002700 <ADC_ConfigureBoostMode+0x140>)
{
 80025c4:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025c6:	6803      	ldr	r3, [r0, #0]
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d024      	beq.n	8002616 <ADC_ConfigureBoostMode+0x56>
 80025cc:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d020      	beq.n	8002616 <ADC_ConfigureBoostMode+0x56>
 80025d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002704 <ADC_ConfigureBoostMode+0x144>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80025dc:	d020      	beq.n	8002620 <ADC_ConfigureBoostMode+0x60>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025de:	f002 fce3 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80025e2:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80025e4:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80025e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025ea:	d06d      	beq.n	80026c8 <ADC_ConfigureBoostMode+0x108>
 80025ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025f0:	d072      	beq.n	80026d8 <ADC_ConfigureBoostMode+0x118>
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f6:	d067      	beq.n	80026c8 <ADC_ConfigureBoostMode+0x108>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80025f8:	f7ff fb24 	bl	8001c44 <HAL_GetREVID>
 80025fc:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002600:	4298      	cmp	r0, r3
 8002602:	d82d      	bhi.n	8002660 <ADC_ConfigureBoostMode+0xa0>
  {
    if (freq > 20000000UL)
 8002604:	4a40      	ldr	r2, [pc, #256]	@ (8002708 <ADC_ConfigureBoostMode+0x148>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002606:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 8002608:	4295      	cmp	r5, r2
 800260a:	d947      	bls.n	800269c <ADC_ConfigureBoostMode+0xdc>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002612:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002614:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002616:	4b3d      	ldr	r3, [pc, #244]	@ (800270c <ADC_ConfigureBoostMode+0x14c>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 800261e:	d1de      	bne.n	80025de <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002620:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002624:	2100      	movs	r1, #0
 8002626:	f003 ff39 	bl	800649c <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800262a:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800262c:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800262e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002632:	d04d      	beq.n	80026d0 <ADC_ConfigureBoostMode+0x110>
 8002634:	d825      	bhi.n	8002682 <ADC_ConfigureBoostMode+0xc2>
 8002636:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800263a:	d04b      	beq.n	80026d4 <ADC_ConfigureBoostMode+0x114>
 800263c:	d84e      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x11c>
 800263e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002642:	d008      	beq.n	8002656 <ADC_ConfigureBoostMode+0x96>
 8002644:	d855      	bhi.n	80026f2 <ADC_ConfigureBoostMode+0x132>
 8002646:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800264a:	d004      	beq.n	8002656 <ADC_ConfigureBoostMode+0x96>
 800264c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002650:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002654:	d1d0      	bne.n	80025f8 <ADC_ConfigureBoostMode+0x38>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002656:	0c9b      	lsrs	r3, r3, #18
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 800265e:	e7cb      	b.n	80025f8 <ADC_ConfigureBoostMode+0x38>
    if (freq <= 6250000UL)
 8002660:	4a2b      	ldr	r2, [pc, #172]	@ (8002710 <ADC_ConfigureBoostMode+0x150>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002662:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 8002664:	4295      	cmp	r5, r2
 8002666:	d923      	bls.n	80026b0 <ADC_ConfigureBoostMode+0xf0>
    else if (freq <= 12500000UL)
 8002668:	4a2a      	ldr	r2, [pc, #168]	@ (8002714 <ADC_ConfigureBoostMode+0x154>)
 800266a:	4295      	cmp	r5, r2
 800266c:	d925      	bls.n	80026ba <ADC_ConfigureBoostMode+0xfa>
    else if (freq <= 25000000UL)
 800266e:	4a2a      	ldr	r2, [pc, #168]	@ (8002718 <ADC_ConfigureBoostMode+0x158>)
 8002670:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002672:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8002674:	d839      	bhi.n	80026ea <ADC_ConfigureBoostMode+0x12a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002676:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800267a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8002682:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002686:	d02e      	beq.n	80026e6 <ADC_ConfigureBoostMode+0x126>
 8002688:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800268c:	d1b4      	bne.n	80025f8 <ADC_ConfigureBoostMode+0x38>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800268e:	f7ff fad9 	bl	8001c44 <HAL_GetREVID>
 8002692:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002696:	4298      	cmp	r0, r3
 8002698:	d805      	bhi.n	80026a6 <ADC_ConfigureBoostMode+0xe6>
 800269a:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026a2:	609a      	str	r2, [r3, #8]
}
 80026a4:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 80026a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002710 <ADC_ConfigureBoostMode+0x150>)
 80026a8:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	d304      	bcc.n	80026ba <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80026b6:	609a      	str	r2, [r3, #8]
}
 80026b8:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80026c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c4:	609a      	str	r2, [r3, #8]
}
 80026c6:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80026ce:	e793      	b.n	80025f8 <ADC_ConfigureBoostMode+0x38>
        freq /= 64UL;
 80026d0:	0985      	lsrs	r5, r0, #6
        break;
 80026d2:	e791      	b.n	80025f8 <ADC_ConfigureBoostMode+0x38>
        freq /= 16UL;
 80026d4:	0905      	lsrs	r5, r0, #4
        break;
 80026d6:	e78f      	b.n	80025f8 <ADC_ConfigureBoostMode+0x38>
        freq /= 4UL;
 80026d8:	0885      	lsrs	r5, r0, #2
        break;
 80026da:	e78d      	b.n	80025f8 <ADC_ConfigureBoostMode+0x38>
    switch (hadc->Init.ClockPrescaler)
 80026dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026e0:	d18a      	bne.n	80025f8 <ADC_ConfigureBoostMode+0x38>
        freq /= 32UL;
 80026e2:	0945      	lsrs	r5, r0, #5
        break;
 80026e4:	e788      	b.n	80025f8 <ADC_ConfigureBoostMode+0x38>
        freq /= 128UL;
 80026e6:	09c5      	lsrs	r5, r0, #7
        break;
 80026e8:	e786      	b.n	80025f8 <ADC_ConfigureBoostMode+0x38>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80026ea:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80026f2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026f6:	d0ae      	beq.n	8002656 <ADC_ConfigureBoostMode+0x96>
 80026f8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026fc:	d0ab      	beq.n	8002656 <ADC_ConfigureBoostMode+0x96>
 80026fe:	e77b      	b.n	80025f8 <ADC_ConfigureBoostMode+0x38>
 8002700:	40022000 	.word	0x40022000
 8002704:	58026300 	.word	0x58026300
 8002708:	01312d00 	.word	0x01312d00
 800270c:	40022300 	.word	0x40022300
 8002710:	00bebc21 	.word	0x00bebc21
 8002714:	017d7841 	.word	0x017d7841
 8002718:	02faf081 	.word	0x02faf081

0800271c <HAL_ADC_Init>:
{
 800271c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 800271e:	2300      	movs	r3, #0
{
 8002720:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002722:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002724:	2800      	cmp	r0, #0
 8002726:	f000 80a9 	beq.w	800287c <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800272a:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800272c:	4604      	mov	r4, r0
 800272e:	2d00      	cmp	r5, #0
 8002730:	f000 80aa 	beq.w	8002888 <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002734:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002736:	6893      	ldr	r3, [r2, #8]
 8002738:	009d      	lsls	r5, r3, #2
 800273a:	d503      	bpl.n	8002744 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800273c:	6891      	ldr	r1, [r2, #8]
 800273e:	4b71      	ldr	r3, [pc, #452]	@ (8002904 <HAL_ADC_Init+0x1e8>)
 8002740:	400b      	ands	r3, r1
 8002742:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002744:	6893      	ldr	r3, [r2, #8]
 8002746:	00d8      	lsls	r0, r3, #3
 8002748:	d416      	bmi.n	8002778 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800274a:	4b6f      	ldr	r3, [pc, #444]	@ (8002908 <HAL_ADC_Init+0x1ec>)
 800274c:	496f      	ldr	r1, [pc, #444]	@ (800290c <HAL_ADC_Init+0x1f0>)
 800274e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002750:	6890      	ldr	r0, [r2, #8]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	fba1 1303 	umull	r1, r3, r1, r3
 8002758:	496d      	ldr	r1, [pc, #436]	@ (8002910 <HAL_ADC_Init+0x1f4>)
 800275a:	099b      	lsrs	r3, r3, #6
 800275c:	4001      	ands	r1, r0
 800275e:	3301      	adds	r3, #1
 8002760:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002764:	6091      	str	r1, [r2, #8]
 8002766:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002768:	9b01      	ldr	r3, [sp, #4]
 800276a:	b12b      	cbz	r3, 8002778 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 800276c:	9b01      	ldr	r3, [sp, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002772:	9b01      	ldr	r3, [sp, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f9      	bne.n	800276c <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002778:	6893      	ldr	r3, [r2, #8]
 800277a:	00d9      	lsls	r1, r3, #3
 800277c:	f100 8082 	bmi.w	8002884 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002780:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8002782:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002784:	f043 0310 	orr.w	r3, r3, #16
 8002788:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800278c:	432b      	orrs	r3, r5
 800278e:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002790:	6893      	ldr	r3, [r2, #8]
 8002792:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002796:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002798:	d16c      	bne.n	8002874 <HAL_ADC_Init+0x158>
 800279a:	06db      	lsls	r3, r3, #27
 800279c:	d46a      	bmi.n	8002874 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 800279e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80027a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027aa:	6893      	ldr	r3, [r2, #8]
 80027ac:	07de      	lsls	r6, r3, #31
 80027ae:	d40c      	bmi.n	80027ca <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b0:	4b58      	ldr	r3, [pc, #352]	@ (8002914 <HAL_ADC_Init+0x1f8>)
 80027b2:	429a      	cmp	r2, r3
 80027b4:	f000 8081 	beq.w	80028ba <HAL_ADC_Init+0x19e>
 80027b8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80027bc:	429a      	cmp	r2, r3
 80027be:	d07c      	beq.n	80028ba <HAL_ADC_Init+0x19e>
 80027c0:	4b55      	ldr	r3, [pc, #340]	@ (8002918 <HAL_ADC_Init+0x1fc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	07d9      	lsls	r1, r3, #31
 80027c6:	f140 808a 	bpl.w	80028de <HAL_ADC_Init+0x1c2>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80027ca:	f7ff fa3b 	bl	8001c44 <HAL_GetREVID>
 80027ce:	f241 0303 	movw	r3, #4099	@ 0x1003
 80027d2:	68a1      	ldr	r1, [r4, #8]
 80027d4:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027d6:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80027d8:	d85c      	bhi.n	8002894 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027da:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027de:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80027e0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80027e2:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80027e6:	4302      	orrs	r2, r0
 80027e8:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d103      	bne.n	80027f6 <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027ee:	6a23      	ldr	r3, [r4, #32]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027f8:	b123      	cbz	r3, 8002804 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027fa:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80027fe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002800:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002802:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	4945      	ldr	r1, [pc, #276]	@ (800291c <HAL_ADC_Init+0x200>)
 8002808:	68d8      	ldr	r0, [r3, #12]
 800280a:	4001      	ands	r1, r0
 800280c:	4311      	orrs	r1, r2
 800280e:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002816:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002818:	d11c      	bne.n	8002854 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800281a:	0712      	lsls	r2, r2, #28
 800281c:	d41a      	bmi.n	8002854 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800281e:	68d8      	ldr	r0, [r3, #12]
 8002820:	4a3f      	ldr	r2, [pc, #252]	@ (8002920 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002822:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002824:	4002      	ands	r2, r0
 8002826:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800282a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800282c:	430a      	orrs	r2, r1
 800282e:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002830:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8002834:	2a01      	cmp	r2, #1
 8002836:	d054      	beq.n	80028e2 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002840:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8002842:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002846:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800284a:	430a      	orrs	r2, r1
 800284c:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800284e:	f7ff feb7 	bl	80025c0 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002852:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002854:	68e2      	ldr	r2, [r4, #12]
 8002856:	2a01      	cmp	r2, #1
 8002858:	d027      	beq.n	80028aa <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800285a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800285c:	f022 020f 	bic.w	r2, r2, #15
 8002860:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002862:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 8002864:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002866:	f023 0303 	bic.w	r3, r3, #3
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8002870:	b002      	add	sp, #8
 8002872:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002874:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002876:	f043 0310 	orr.w	r3, r3, #16
 800287a:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 800287c:	2501      	movs	r5, #1
}
 800287e:	4628      	mov	r0, r5
 8002880:	b002      	add	sp, #8
 8002882:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002884:	2500      	movs	r5, #0
 8002886:	e783      	b.n	8002790 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 8002888:	f7fe ff64 	bl	8001754 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800288c:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800288e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8002892:	e74f      	b.n	8002734 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002894:	2910      	cmp	r1, #16
 8002896:	d1a0      	bne.n	80027da <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002898:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800289a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800289c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80028a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80028a2:	430a      	orrs	r2, r1
 80028a4:	f042 021c 	orr.w	r2, r2, #28
 80028a8:	e79f      	b.n	80027ea <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028ac:	69a2      	ldr	r2, [r4, #24]
 80028ae:	f021 010f 	bic.w	r1, r1, #15
 80028b2:	3a01      	subs	r2, #1
 80028b4:	430a      	orrs	r2, r1
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80028b8:	e7d3      	b.n	8002862 <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028ba:	4b16      	ldr	r3, [pc, #88]	@ (8002914 <HAL_ADC_Init+0x1f8>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f013 0f01 	tst.w	r3, #1
 80028c2:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <HAL_ADC_Init+0x208>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	d180      	bne.n	80027ca <HAL_ADC_Init+0xae>
 80028c8:	07d8      	lsls	r0, r3, #31
 80028ca:	f53f af7e 	bmi.w	80027ca <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ce:	4a16      	ldr	r2, [pc, #88]	@ (8002928 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028d0:	6893      	ldr	r3, [r2, #8]
 80028d2:	6861      	ldr	r1, [r4, #4]
 80028d4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80028d8:	430b      	orrs	r3, r1
 80028da:	6093      	str	r3, [r2, #8]
}
 80028dc:	e775      	b.n	80027ca <HAL_ADC_Init+0xae>
 80028de:	4a13      	ldr	r2, [pc, #76]	@ (800292c <HAL_ADC_Init+0x210>)
 80028e0:	e7f6      	b.n	80028d0 <HAL_ADC_Init+0x1b4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80028e2:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 80028e6:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 80028e8:	3901      	subs	r1, #1
 80028ea:	6918      	ldr	r0, [r3, #16]
 80028ec:	4332      	orrs	r2, r6
 80028ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028f2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80028f4:	430a      	orrs	r2, r1
 80028f6:	490e      	ldr	r1, [pc, #56]	@ (8002930 <HAL_ADC_Init+0x214>)
 80028f8:	4001      	ands	r1, r0
 80028fa:	430a      	orrs	r2, r1
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	611a      	str	r2, [r3, #16]
 8002902:	e79d      	b.n	8002840 <HAL_ADC_Init+0x124>
 8002904:	5fffffc0 	.word	0x5fffffc0
 8002908:	24000018 	.word	0x24000018
 800290c:	053e2d63 	.word	0x053e2d63
 8002910:	6fffffc0 	.word	0x6fffffc0
 8002914:	40022000 	.word	0x40022000
 8002918:	58026000 	.word	0x58026000
 800291c:	fff0c003 	.word	0xfff0c003
 8002920:	ffffbffc 	.word	0xffffbffc
 8002924:	40022100 	.word	0x40022100
 8002928:	40022300 	.word	0x40022300
 800292c:	58026300 	.word	0x58026300
 8002930:	fc00f81e 	.word	0xfc00f81e

08002934 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002934:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002936:	2300      	movs	r3, #0
{
 8002938:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800293a:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800293c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8002940:	2b01      	cmp	r3, #1
 8002942:	d040      	beq.n	80029c6 <HAL_ADCEx_Calibration_Start+0x92>
 8002944:	2301      	movs	r3, #1
 8002946:	4604      	mov	r4, r0
 8002948:	460e      	mov	r6, r1
 800294a:	4615      	mov	r5, r2
 800294c:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002950:	f7ff fdfc 	bl	800254c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002954:	b9e8      	cbnz	r0, 8002992 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002956:	6d67      	ldr	r7, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8002958:	f005 4280 	and.w	r2, r5, #1073741824	@ 0x40000000
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_ADCEx_Calibration_Start+0x98>)
 800295e:	f406 3180 	and.w	r1, r6, #65536	@ 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002962:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002964:	403b      	ands	r3, r7
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	6563      	str	r3, [r4, #84]	@ 0x54
 800296c:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <HAL_ADCEx_Calibration_Start+0x9c>)
 800296e:	68ae      	ldr	r6, [r5, #8]
 8002970:	4033      	ands	r3, r6
 8002972:	4313      	orrs	r3, r2
 8002974:	430b      	orrs	r3, r1
 8002976:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800297a:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800297c:	68ab      	ldr	r3, [r5, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800297e:	4a15      	ldr	r2, [pc, #84]	@ (80029d4 <HAL_ADCEx_Calibration_Start+0xa0>)
 8002980:	2b00      	cmp	r3, #0
 8002982:	db0f      	blt.n	80029a4 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002984:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6563      	str	r3, [r4, #84]	@ 0x54
 8002990:	e003      	b.n	800299a <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002992:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002994:	f043 0310 	orr.w	r3, r3, #16
 8002998:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299a:	2300      	movs	r3, #0
 800299c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80029a0:	b003      	add	sp, #12
 80029a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 80029a4:	9b01      	ldr	r3, [sp, #4]
 80029a6:	3301      	adds	r3, #1
 80029a8:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80029aa:	9b01      	ldr	r3, [sp, #4]
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d3e5      	bcc.n	800297c <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80029b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 80029b2:	2200      	movs	r2, #0
        return HAL_ERROR;
 80029b4:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80029b6:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 80029ba:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        ADC_STATE_CLR_SET(hadc->State,
 80029be:	f043 0310 	orr.w	r3, r3, #16
 80029c2:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 80029c4:	e7ec      	b.n	80029a0 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 80029c6:	2002      	movs	r0, #2
}
 80029c8:	b003      	add	sp, #12
 80029ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029cc:	ffffeefd 	.word	0xffffeefd
 80029d0:	3ffeffc0 	.word	0x3ffeffc0
 80029d4:	25c3f800 	.word	0x25c3f800

080029d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop

080029dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop

080029e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop

080029e4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop

080029e8 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029ec:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 80029f0:	2a01      	cmp	r2, #1
 80029f2:	d035      	beq.n	8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 80029f4:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80029f6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80029f8:	2001      	movs	r0, #1
{
 80029fa:	b4f0      	push	{r4, r5, r6, r7}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029fc:	4d28      	ldr	r5, [pc, #160]	@ (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
{
 80029fe:	b09a      	sub	sp, #104	@ 0x68
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a00:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002a02:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a04:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 8002a06:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002a0a:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a0c:	d008      	beq.n	8002a20 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a0e:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a14:	f041 0120 	orr.w	r1, r1, #32
 8002a18:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002a1a:	b01a      	add	sp, #104	@ 0x68
 8002a1c:	bcf0      	pop	{r4, r5, r6, r7}
 8002a1e:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a20:	4a20      	ldr	r2, [pc, #128]	@ (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8002a22:	6890      	ldr	r0, [r2, #8]
 8002a24:	0740      	lsls	r0, r0, #29
 8002a26:	d50b      	bpl.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8002a28:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8002a2c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2e:	f042 0220 	orr.w	r2, r2, #32
 8002a32:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8002a3a:	b01a      	add	sp, #104	@ 0x68
 8002a3c:	bcf0      	pop	{r4, r5, r6, r7}
 8002a3e:	4770      	bx	lr
 8002a40:	68a0      	ldr	r0, [r4, #8]
 8002a42:	0745      	lsls	r5, r0, #29
 8002a44:	d4f1      	bmi.n	8002a2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a46:	6808      	ldr	r0, [r1, #0]
 8002a48:	b9a0      	cbnz	r0, 8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a4a:	4917      	ldr	r1, [pc, #92]	@ (8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8002a4c:	6888      	ldr	r0, [r1, #8]
 8002a4e:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8002a52:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a54:	68a0      	ldr	r0, [r4, #8]
 8002a56:	07c0      	lsls	r0, r0, #31
 8002a58:	d504      	bpl.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002a5a:	6892      	ldr	r2, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	e7e9      	b.n	8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8002a60:	2002      	movs	r0, #2
}
 8002a62:	4770      	bx	lr
 8002a64:	6892      	ldr	r2, [r2, #8]
 8002a66:	07d5      	lsls	r5, r2, #31
 8002a68:	d4f8      	bmi.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x70>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a6a:	6888      	ldr	r0, [r1, #8]
 8002a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002aac <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8002a6e:	4002      	ands	r2, r0
 8002a70:	608a      	str	r2, [r1, #8]
 8002a72:	e7f3      	b.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x70>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a74:	4e0c      	ldr	r6, [pc, #48]	@ (8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8002a76:	684f      	ldr	r7, [r1, #4]
 8002a78:	68b5      	ldr	r5, [r6, #8]
 8002a7a:	f425 4540 	bic.w	r5, r5, #49152	@ 0xc000
 8002a7e:	433d      	orrs	r5, r7
 8002a80:	60b5      	str	r5, [r6, #8]
 8002a82:	68a4      	ldr	r4, [r4, #8]
 8002a84:	07e4      	lsls	r4, r4, #31
 8002a86:	d4e8      	bmi.n	8002a5a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002a88:	6892      	ldr	r2, [r2, #8]
 8002a8a:	07d7      	lsls	r7, r2, #31
 8002a8c:	d4e6      	bmi.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x70>
        MODIFY_REG(tmpADC_Common->CCR,
 8002a8e:	688a      	ldr	r2, [r1, #8]
 8002a90:	68b4      	ldr	r4, [r6, #8]
 8002a92:	4310      	orrs	r0, r2
 8002a94:	4a05      	ldr	r2, [pc, #20]	@ (8002aac <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8002a96:	4022      	ands	r2, r4
 8002a98:	4310      	orrs	r0, r2
 8002a9a:	60b0      	str	r0, [r6, #8]
 8002a9c:	e7de      	b.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x70>
 8002a9e:	bf00      	nop
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	40022100 	.word	0x40022100
 8002aa8:	40022300 	.word	0x40022300
 8002aac:	fffff0e0 	.word	0xfffff0e0

08002ab0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab0:	4906      	ldr	r1, [pc, #24]	@ (8002acc <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab2:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8002ab8:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aba:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002abc:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac0:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac4:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8002ac6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002ac8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00
 8002ad0:	05fa0000 	.word	0x05fa0000

08002ad4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b40 <HAL_NVIC_SetPriority+0x6c>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ade:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae6:	f1be 0f04 	cmp.w	lr, #4
 8002aea:	bf28      	it	cs
 8002aec:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af0:	f1bc 0f06 	cmp.w	ip, #6
 8002af4:	d91a      	bls.n	8002b2c <HAL_NVIC_SetPriority+0x58>
 8002af6:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
 8002afe:	fa03 f30c 	lsl.w	r3, r3, ip
 8002b02:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8002b0a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	fa03 f30e 	lsl.w	r3, r3, lr
 8002b10:	ea21 0303 	bic.w	r3, r1, r3
 8002b14:	fa03 f30c 	lsl.w	r3, r3, ip
 8002b18:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b20:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002b22:	db06      	blt.n	8002b32 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	4a07      	ldr	r2, [pc, #28]	@ (8002b44 <HAL_NVIC_SetPriority+0x70>)
 8002b26:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b28:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b2c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	4694      	mov	ip, r2
 8002b30:	e7e9      	b.n	8002b06 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b32:	f000 000f 	and.w	r0, r0, #15
 8002b36:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <HAL_NVIC_SetPriority+0x74>)
 8002b38:	5413      	strb	r3, [r2, r0]
 8002b3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00
 8002b44:	e000e400 	.word	0xe000e400
 8002b48:	e000ed14 	.word	0xe000ed14

08002b4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	db07      	blt.n	8002b60 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b50:	2301      	movs	r3, #1
 8002b52:	f000 011f 	and.w	r1, r0, #31
 8002b56:	4a03      	ldr	r2, [pc, #12]	@ (8002b64 <HAL_NVIC_EnableIRQ+0x18>)
 8002b58:	0940      	lsrs	r0, r0, #5
 8002b5a:	408b      	lsls	r3, r1
 8002b5c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b68:	1e43      	subs	r3, r0, #1
 8002b6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b6e:	d301      	bcc.n	8002b74 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b70:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b72:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b74:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b78:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7a:	4905      	ldr	r1, [pc, #20]	@ (8002b90 <HAL_SYSTICK_Config+0x28>)
 8002b7c:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b80:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b82:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b84:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b88:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002b94:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b98:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002b9a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b9e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ba2:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8002ba4:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_MPU_Enable+0x1c>)
 8002bb2:	f040 0001 	orr.w	r0, r0, #1
 8002bb6:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002bba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bbc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002bc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002bc6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002bd0:	4a16      	ldr	r2, [pc, #88]	@ (8002c2c <HAL_MPU_ConfigRegion+0x5c>)
 8002bd2:	7843      	ldrb	r3, [r0, #1]
 8002bd4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002bd8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002be4:	6843      	ldr	r3, [r0, #4]
 8002be6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002bea:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002bec:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002bf0:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002bf2:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002bf4:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002bf8:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002bfc:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002bfe:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c00:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c04:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c08:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c0c:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c0e:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c12:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002c1a:	7a01      	ldrb	r1, [r0, #8]
 8002c1c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002c20:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c24:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c30:	b188      	cbz	r0, 8002c56 <HAL_DAC_Init+0x26>
{
 8002c32:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c34:	7903      	ldrb	r3, [r0, #4]
 8002c36:	4604      	mov	r4, r0
 8002c38:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002c3c:	b13b      	cbz	r3, 8002c4e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c3e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c40:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c42:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c44:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002c46:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c48:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002c4a:	7122      	strb	r2, [r4, #4]
}
 8002c4c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8002c4e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002c50:	f7fe fdfa 	bl	8001848 <HAL_DAC_MspInit>
 8002c54:	e7f3      	b.n	8002c3e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8002c56:	2001      	movs	r0, #1
}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop

08002c5c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5e:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c60:	2800      	cmp	r0, #0
 8002c62:	d05e      	beq.n	8002d22 <HAL_DAC_Start_DMA+0xc6>
 8002c64:	460e      	mov	r6, r1
 8002c66:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c68:	7942      	ldrb	r2, [r0, #5]
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	2a01      	cmp	r2, #1
 8002c6e:	d060      	beq.n	8002d32 <HAL_DAC_Start_DMA+0xd6>
 8002c70:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c72:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdac);
 8002c74:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c76:	2202      	movs	r2, #2
 8002c78:	7102      	strb	r2, [r0, #4]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c7a:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 8002c7c:	bb3e      	cbnz	r6, 8002cce <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c7e:	6880      	ldr	r0, [r0, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c84:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 8002d38 <HAL_DAC_Start_DMA+0xdc>
 8002c88:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c8c:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 8002d3c <HAL_DAC_Start_DMA+0xe0>
 8002c90:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c94:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 8002d40 <HAL_DAC_Start_DMA+0xe4>
 8002c98:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c9c:	602a      	str	r2, [r5, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002c9e:	2f00      	cmp	r7, #0
 8002ca0:	d044      	beq.n	8002d2c <HAL_DAC_Start_DMA+0xd0>
 8002ca2:	2f04      	cmp	r7, #4
 8002ca4:	d137      	bne.n	8002d16 <HAL_DAC_Start_DMA+0xba>
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
        break;
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002ca6:	f105 020c 	add.w	r2, r5, #12
  }

  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002caa:	682f      	ldr	r7, [r5, #0]
 8002cac:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
 8002cb0:	602f      	str	r7, [r5, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002cb2:	f000 fce7 	bl	8003684 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8002cba:	bb38      	cbnz	r0, 8002d0c <HAL_DAC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002cbc:	6822      	ldr	r2, [r4, #0]
 8002cbe:	f006 0110 	and.w	r1, r6, #16
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	6814      	ldr	r4, [r2, #0]
 8002cc6:	408b      	lsls	r3, r1
 8002cc8:	4323      	orrs	r3, r4
 8002cca:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8002ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002cce:	68c0      	ldr	r0, [r0, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002cd0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002cd4:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8002d44 <HAL_DAC_Start_DMA+0xe8>
 8002cd8:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002cdc:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8002d48 <HAL_DAC_Start_DMA+0xec>
 8002ce0:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002ce4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8002d4c <HAL_DAC_Start_DMA+0xf0>
 8002ce8:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002cec:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8002cee:	b1d7      	cbz	r7, 8002d26 <HAL_DAC_Start_DMA+0xca>
 8002cf0:	2f04      	cmp	r7, #4
 8002cf2:	d113      	bne.n	8002d1c <HAL_DAC_Start_DMA+0xc0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002cf4:	f105 0218 	add.w	r2, r5, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002cf8:	682f      	ldr	r7, [r5, #0]
 8002cfa:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 8002cfe:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d00:	f000 fcc0 	bl	8003684 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8002d04:	2300      	movs	r3, #0
 8002d06:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d0d7      	beq.n	8002cbc <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d0c:	6923      	ldr	r3, [r4, #16]
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	6123      	str	r3, [r4, #16]
}
 8002d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002d16:	f105 0210 	add.w	r2, r5, #16
  if (Channel == DAC_CHANNEL_1)
 8002d1a:	e7c6      	b.n	8002caa <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d1c:	f105 021c 	add.w	r2, r5, #28
  if (Channel == DAC_CHANNEL_1)
 8002d20:	e7ea      	b.n	8002cf8 <HAL_DAC_Start_DMA+0x9c>
    return HAL_ERROR;
 8002d22:	2001      	movs	r0, #1
}
 8002d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d26:	f105 0214 	add.w	r2, r5, #20
  if (Channel == DAC_CHANNEL_1)
 8002d2a:	e7e5      	b.n	8002cf8 <HAL_DAC_Start_DMA+0x9c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002d2c:	f105 0208 	add.w	r2, r5, #8
  if (Channel == DAC_CHANNEL_1)
 8002d30:	e7bb      	b.n	8002caa <HAL_DAC_Start_DMA+0x4e>
  __HAL_LOCK(hdac);
 8002d32:	2002      	movs	r0, #2
}
 8002d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	08002d55 	.word	0x08002d55
 8002d3c:	08002d69 	.word	0x08002d69
 8002d40:	08002d79 	.word	0x08002d79
 8002d44:	08002f51 	.word	0x08002f51
 8002d48:	08002f65 	.word	0x08002f65
 8002d4c:	08002f75 	.word	0x08002f75

08002d50 <HAL_DAC_ConvCpltCallbackCh1>:
  * @brief  Conversion complete callback in non-blocking mode for Channel1
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop

08002d54 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d54:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d56:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff fff9 	bl	8002d50 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	7123      	strb	r3, [r4, #4]
}
 8002d62:	bd10      	pop	{r4, pc}

08002d64 <HAL_DAC_ConvHalfCpltCallbackCh1>:
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop

08002d68 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002d68:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002d6a:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002d6c:	f7ff fffa 	bl	8002d64 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d70:	bd08      	pop	{r3, pc}
 8002d72:	bf00      	nop

08002d74 <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop

08002d78 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002d78:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d7a:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d7c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002d7e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002d86:	f7ff fff5 	bl	8002d74 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	7123      	strb	r3, [r4, #4]
}
 8002d8e:	bd10      	pop	{r4, pc}

08002d90 <HAL_DAC_DMAUnderrunCallbackCh1>:
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop

08002d94 <HAL_DAC_IRQHandler>:
  uint32_t itsource = hdac->Instance->CR;
 8002d94:	6803      	ldr	r3, [r0, #0]
{
 8002d96:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = hdac->Instance->CR;
 8002d98:	681d      	ldr	r5, [r3, #0]
{
 8002d9a:	4604      	mov	r4, r0
  uint32_t itflag   = hdac->Instance->SR;
 8002d9c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8002d9e:	04aa      	lsls	r2, r5, #18
 8002da0:	d501      	bpl.n	8002da6 <HAL_DAC_IRQHandler+0x12>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002da2:	04b1      	lsls	r1, r6, #18
 8002da4:	d417      	bmi.n	8002dd6 <HAL_DAC_IRQHandler+0x42>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002da6:	00aa      	lsls	r2, r5, #2
 8002da8:	d501      	bpl.n	8002dae <HAL_DAC_IRQHandler+0x1a>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8002daa:	00b3      	lsls	r3, r6, #2
 8002dac:	d400      	bmi.n	8002db0 <HAL_DAC_IRQHandler+0x1c>
}
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8002db0:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002db8:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8002dba:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002dbc:	6922      	ldr	r2, [r4, #16]
 8002dbe:	f042 0202 	orr.w	r2, r2, #2
 8002dc2:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002dc4:	6359      	str	r1, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
}
 8002dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002dd0:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002dd2:	f000 b8db 	b.w	8002f8c <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002dda:	6902      	ldr	r2, [r0, #16]
 8002ddc:	f042 0201 	orr.w	r2, r2, #1
 8002de0:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002de2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002de6:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dee:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002df0:	f7ff ffce 	bl	8002d90 <HAL_DAC_DMAUnderrunCallbackCh1>
 8002df4:	e7d7      	b.n	8002da6 <HAL_DAC_IRQHandler+0x12>
 8002df6:	bf00      	nop

08002df8 <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	f000 8086 	beq.w	8002f0a <HAL_DAC_ConfigChannel+0x112>
{
 8002dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e02:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8002e04:	2900      	cmp	r1, #0
 8002e06:	d04d      	beq.n	8002ea4 <HAL_DAC_ConfigChannel+0xac>
  __HAL_LOCK(hdac);
 8002e08:	7943      	ldrb	r3, [r0, #5]
 8002e0a:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002e0c:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d079      	beq.n	8002f06 <HAL_DAC_ConfigChannel+0x10e>
 8002e12:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e14:	2904      	cmp	r1, #4
 8002e16:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8002e18:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e1a:	f04f 0302 	mov.w	r3, #2
 8002e1e:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e20:	d043      	beq.n	8002eaa <HAL_DAC_ConfigChannel+0xb2>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002e22:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8002e26:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e28:	6928      	ldr	r0, [r5, #16]
 8002e2a:	2801      	cmp	r0, #1
 8002e2c:	d108      	bne.n	8002e40 <HAL_DAC_ConfigChannel+0x48>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e2e:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 8002e30:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e32:	4090      	lsls	r0, r2
 8002e34:	ea26 0600 	bic.w	r6, r6, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e38:	6968      	ldr	r0, [r5, #20]
 8002e3a:	4090      	lsls	r0, r2
 8002e3c:	4330      	orrs	r0, r6
    hdac->Instance->CCR = tmpreg1;
 8002e3e:	6398      	str	r0, [r3, #56]	@ 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e40:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 8002e42:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e44:	4090      	lsls	r0, r2
 8002e46:	ea26 0600 	bic.w	r6, r6, r0
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002e4a:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002e4e:	2801      	cmp	r0, #1
 8002e50:	d055      	beq.n	8002efe <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002e52:	2802      	cmp	r0, #2
 8002e54:	d055      	beq.n	8002f02 <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002e56:	fab7 f087 	clz	r0, r7
 8002e5a:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002e5c:	4339      	orrs	r1, r7
 8002e5e:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e60:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e62:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e66:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e68:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e6a:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e6c:	4331      	orrs	r1, r6
  hdac->State = HAL_DAC_STATE_READY;
 8002e6e:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 8002e70:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e78:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e7c:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e7e:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8002e80:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e82:	ea21 0105 	bic.w	r1, r1, r5
  __HAL_UNLOCK(hdac);
 8002e86:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e88:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e8a:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 8002e8c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e8e:	fa00 f102 	lsl.w	r1, r0, r2
 8002e92:	681a      	ldr	r2, [r3, #0]
  return status;
 8002e94:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e96:	ea22 0201 	bic.w	r2, r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002e9c:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8002e9e:	7165      	strb	r5, [r4, #5]
}
 8002ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002ea4:	2001      	movs	r0, #1
}
 8002ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8002eaa:	f7fe fec5 	bl	8001c38 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002eae:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002eb0:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8002eb2:	b9be      	cbnz	r6, 8002ee4 <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002eb4:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8002f48 <HAL_DAC_ConfigChannel+0x150>
 8002eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eba:	ea12 0f08 	tst.w	r2, r8
 8002ebe:	d026      	beq.n	8002f0e <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ec0:	f7fe feba 	bl	8001c38 <HAL_GetTick>
 8002ec4:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ec6:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ec8:	2801      	cmp	r0, #1
 8002eca:	d9f5      	bls.n	8002eb8 <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ecc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ece:	ea12 0f08 	tst.w	r2, r8
 8002ed2:	d0f1      	beq.n	8002eb8 <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ed4:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ed6:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 8002ed8:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002eda:	f043 0308 	orr.w	r3, r3, #8
 8002ede:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ee0:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 8002ee2:	e7dd      	b.n	8002ea0 <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	da2a      	bge.n	8002f40 <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002eea:	f7fe fea5 	bl	8001c38 <HAL_GetTick>
 8002eee:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ef0:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ef2:	2801      	cmp	r0, #1
 8002ef4:	d9f6      	bls.n	8002ee4 <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ef8:	2a00      	cmp	r2, #0
 8002efa:	daf3      	bge.n	8002ee4 <HAL_DAC_ConfigChannel+0xec>
 8002efc:	e7ea      	b.n	8002ed4 <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 8002efe:	2000      	movs	r0, #0
 8002f00:	e7ac      	b.n	8002e5c <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 8002f02:	2001      	movs	r0, #1
 8002f04:	e7aa      	b.n	8002e5c <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 8002f06:	2002      	movs	r0, #2
 8002f08:	e7ca      	b.n	8002ea0 <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 8002f0a:	2001      	movs	r0, #1
}
 8002f0c:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f0e:	69aa      	ldr	r2, [r5, #24]
 8002f10:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002f12:	f006 0210 	and.w	r2, r6, #16
 8002f16:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8002f1a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002f1c:	4090      	lsls	r0, r2
 8002f1e:	ea21 0100 	bic.w	r1, r1, r0
 8002f22:	69e8      	ldr	r0, [r5, #28]
 8002f24:	4090      	lsls	r0, r2
 8002f26:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002f28:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002f2a:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002f2c:	4090      	lsls	r0, r2
 8002f2e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002f30:	ea21 0100 	bic.w	r1, r1, r0
 8002f34:	6a28      	ldr	r0, [r5, #32]
 8002f36:	4090      	lsls	r0, r2
 8002f38:	4301      	orrs	r1, r0
 8002f3a:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002f3c:	6829      	ldr	r1, [r5, #0]
 8002f3e:	e773      	b.n	8002e28 <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f40:	69aa      	ldr	r2, [r5, #24]
 8002f42:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f44:	e7e5      	b.n	8002f12 <HAL_DAC_ConfigChannel+0x11a>
 8002f46:	bf00      	nop
 8002f48:	20008000 	.word	0x20008000

08002f4c <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop

08002f50 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f50:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f52:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff fff9 	bl	8002f4c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	7123      	strb	r3, [r4, #4]
}
 8002f5e:	bd10      	pop	{r4, pc}

08002f60 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop

08002f64 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f64:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002f66:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f68:	f7ff fffa 	bl	8002f60 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f6c:	bd08      	pop	{r3, pc}
 8002f6e:	bf00      	nop

08002f70 <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop

08002f74 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002f74:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f76:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f78:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002f7a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002f82:	f7ff fff5 	bl	8002f70 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f86:	2301      	movs	r3, #1
 8002f88:	7123      	strb	r3, [r4, #4]
}
 8002f8a:	bd10      	pop	{r4, pc}

08002f8c <HAL_DACEx_DMAUnderrunCallbackCh2>:
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop

08002f90 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f90:	4936      	ldr	r1, [pc, #216]	@ (800306c <DMA_CalcBaseAndBitshift+0xdc>)
{
 8002f92:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f94:	6803      	ldr	r3, [r0, #0]
 8002f96:	428b      	cmp	r3, r1
 8002f98:	d033      	beq.n	8003002 <DMA_CalcBaseAndBitshift+0x72>
 8002f9a:	3118      	adds	r1, #24
 8002f9c:	1a59      	subs	r1, r3, r1
 8002f9e:	fab1 f181 	clz	r1, r1
 8002fa2:	0949      	lsrs	r1, r1, #5
 8002fa4:	bb69      	cbnz	r1, 8003002 <DMA_CalcBaseAndBitshift+0x72>
 8002fa6:	4832      	ldr	r0, [pc, #200]	@ (8003070 <DMA_CalcBaseAndBitshift+0xe0>)
 8002fa8:	4283      	cmp	r3, r0
 8002faa:	d03e      	beq.n	800302a <DMA_CalcBaseAndBitshift+0x9a>
 8002fac:	3018      	adds	r0, #24
 8002fae:	4283      	cmp	r3, r0
 8002fb0:	d03e      	beq.n	8003030 <DMA_CalcBaseAndBitshift+0xa0>
 8002fb2:	3018      	adds	r0, #24
 8002fb4:	4283      	cmp	r3, r0
 8002fb6:	d034      	beq.n	8003022 <DMA_CalcBaseAndBitshift+0x92>
 8002fb8:	3018      	adds	r0, #24
 8002fba:	4283      	cmp	r3, r0
 8002fbc:	d03b      	beq.n	8003036 <DMA_CalcBaseAndBitshift+0xa6>
 8002fbe:	3018      	adds	r0, #24
 8002fc0:	4283      	cmp	r3, r0
 8002fc2:	d03e      	beq.n	8003042 <DMA_CalcBaseAndBitshift+0xb2>
 8002fc4:	3018      	adds	r0, #24
 8002fc6:	4283      	cmp	r3, r0
 8002fc8:	d02a      	beq.n	8003020 <DMA_CalcBaseAndBitshift+0x90>
 8002fca:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002fce:	4283      	cmp	r3, r0
 8002fd0:	d035      	beq.n	800303e <DMA_CalcBaseAndBitshift+0xae>
 8002fd2:	4928      	ldr	r1, [pc, #160]	@ (8003074 <DMA_CalcBaseAndBitshift+0xe4>)
 8002fd4:	428b      	cmp	r3, r1
 8002fd6:	d031      	beq.n	800303c <DMA_CalcBaseAndBitshift+0xac>
 8002fd8:	3118      	adds	r1, #24
 8002fda:	428b      	cmp	r3, r1
 8002fdc:	d034      	beq.n	8003048 <DMA_CalcBaseAndBitshift+0xb8>
 8002fde:	3118      	adds	r1, #24
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	d034      	beq.n	800304e <DMA_CalcBaseAndBitshift+0xbe>
 8002fe4:	3118      	adds	r1, #24
 8002fe6:	428b      	cmp	r3, r1
 8002fe8:	d034      	beq.n	8003054 <DMA_CalcBaseAndBitshift+0xc4>
 8002fea:	3118      	adds	r1, #24
 8002fec:	428b      	cmp	r3, r1
 8002fee:	d034      	beq.n	800305a <DMA_CalcBaseAndBitshift+0xca>
 8002ff0:	3118      	adds	r1, #24
 8002ff2:	428b      	cmp	r3, r1
 8002ff4:	d034      	beq.n	8003060 <DMA_CalcBaseAndBitshift+0xd0>
 8002ff6:	3118      	adds	r1, #24
 8002ff8:	428b      	cmp	r3, r1
 8002ffa:	d034      	beq.n	8003066 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002ffc:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8003000:	e011      	b.n	8003026 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003002:	b2db      	uxtb	r3, r3
 8003004:	491c      	ldr	r1, [pc, #112]	@ (8003078 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003006:	481d      	ldr	r0, [pc, #116]	@ (800307c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003008:	3b10      	subs	r3, #16
 800300a:	fba1 1303 	umull	r1, r3, r1, r3
{
 800300e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003010:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003012:	4c1b      	ldr	r4, [pc, #108]	@ (8003080 <DMA_CalcBaseAndBitshift+0xf0>)
 8003014:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8003016:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800301a:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 800301e:	4770      	bx	lr
 8003020:	2116      	movs	r1, #22
 8003022:	4818      	ldr	r0, [pc, #96]	@ (8003084 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003024:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003026:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8003028:	4770      	bx	lr
 800302a:	2110      	movs	r1, #16
 800302c:	4813      	ldr	r0, [pc, #76]	@ (800307c <DMA_CalcBaseAndBitshift+0xec>)
 800302e:	e7f9      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x94>
 8003030:	2116      	movs	r1, #22
 8003032:	4812      	ldr	r0, [pc, #72]	@ (800307c <DMA_CalcBaseAndBitshift+0xec>)
 8003034:	e7f6      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x94>
 8003036:	2106      	movs	r1, #6
 8003038:	4812      	ldr	r0, [pc, #72]	@ (8003084 <DMA_CalcBaseAndBitshift+0xf4>)
 800303a:	e7f3      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x94>
 800303c:	2106      	movs	r1, #6
 800303e:	4812      	ldr	r0, [pc, #72]	@ (8003088 <DMA_CalcBaseAndBitshift+0xf8>)
 8003040:	e7f0      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x94>
 8003042:	2110      	movs	r1, #16
 8003044:	480f      	ldr	r0, [pc, #60]	@ (8003084 <DMA_CalcBaseAndBitshift+0xf4>)
 8003046:	e7ed      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x94>
 8003048:	2110      	movs	r1, #16
 800304a:	480f      	ldr	r0, [pc, #60]	@ (8003088 <DMA_CalcBaseAndBitshift+0xf8>)
 800304c:	e7ea      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x94>
 800304e:	2116      	movs	r1, #22
 8003050:	480d      	ldr	r0, [pc, #52]	@ (8003088 <DMA_CalcBaseAndBitshift+0xf8>)
 8003052:	e7e7      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x94>
 8003054:	2100      	movs	r1, #0
 8003056:	480d      	ldr	r0, [pc, #52]	@ (800308c <DMA_CalcBaseAndBitshift+0xfc>)
 8003058:	e7e4      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x94>
 800305a:	2106      	movs	r1, #6
 800305c:	480b      	ldr	r0, [pc, #44]	@ (800308c <DMA_CalcBaseAndBitshift+0xfc>)
 800305e:	e7e1      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x94>
 8003060:	2110      	movs	r1, #16
 8003062:	480a      	ldr	r0, [pc, #40]	@ (800308c <DMA_CalcBaseAndBitshift+0xfc>)
 8003064:	e7de      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x94>
 8003066:	2116      	movs	r1, #22
 8003068:	4808      	ldr	r0, [pc, #32]	@ (800308c <DMA_CalcBaseAndBitshift+0xfc>)
 800306a:	e7db      	b.n	8003024 <DMA_CalcBaseAndBitshift+0x94>
 800306c:	40020010 	.word	0x40020010
 8003070:	40020040 	.word	0x40020040
 8003074:	40020428 	.word	0x40020428
 8003078:	aaaaaaab 	.word	0xaaaaaaab
 800307c:	40020000 	.word	0x40020000
 8003080:	0806d470 	.word	0x0806d470
 8003084:	40020004 	.word	0x40020004
 8003088:	40020400 	.word	0x40020400
 800308c:	40020404 	.word	0x40020404

08003090 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003090:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003092:	4b28      	ldr	r3, [pc, #160]	@ (8003134 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8003094:	4928      	ldr	r1, [pc, #160]	@ (8003138 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
{
 8003096:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003098:	4d28      	ldr	r5, [pc, #160]	@ (800313c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 800309a:	4c29      	ldr	r4, [pc, #164]	@ (8003140 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800309c:	42aa      	cmp	r2, r5
 800309e:	bf18      	it	ne
 80030a0:	429a      	cmpne	r2, r3
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	428a      	cmp	r2, r1
 80030aa:	bf08      	it	eq
 80030ac:	f043 0301 	orreq.w	r3, r3, #1
 80030b0:	3128      	adds	r1, #40	@ 0x28
 80030b2:	42a2      	cmp	r2, r4
 80030b4:	bf08      	it	eq
 80030b6:	f043 0301 	orreq.w	r3, r3, #1
 80030ba:	3428      	adds	r4, #40	@ 0x28
 80030bc:	428a      	cmp	r2, r1
 80030be:	bf08      	it	eq
 80030c0:	f043 0301 	orreq.w	r3, r3, #1
 80030c4:	3128      	adds	r1, #40	@ 0x28
 80030c6:	42a2      	cmp	r2, r4
 80030c8:	bf08      	it	eq
 80030ca:	f043 0301 	orreq.w	r3, r3, #1
 80030ce:	428a      	cmp	r2, r1
 80030d0:	bf08      	it	eq
 80030d2:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030d6:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030d8:	b913      	cbnz	r3, 80030e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 80030da:	4b1a      	ldr	r3, [pc, #104]	@ (8003144 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 80030dc:	429a      	cmp	r2, r3
 80030de:	d111      	bne.n	8003104 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80030e0:	f1a1 0308 	sub.w	r3, r1, #8
 80030e4:	4c18      	ldr	r4, [pc, #96]	@ (8003148 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030e6:	4a19      	ldr	r2, [pc, #100]	@ (800314c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030e8:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80030ea:	fba4 4303 	umull	r4, r3, r4, r3
 80030ee:	4c18      	ldr	r4, [pc, #96]	@ (8003150 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 80030f0:	091d      	lsrs	r5, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030f2:	eb02 1313 	add.w	r3, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030f6:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80030f8:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80030fa:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80030fc:	e9c0 3418 	strd	r3, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003100:	bc30      	pop	{r4, r5}
 8003102:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003104:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003108:	4912      	ldr	r1, [pc, #72]	@ (8003154 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800310a:	4c13      	ldr	r4, [pc, #76]	@ (8003158 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800310c:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800310e:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003112:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003114:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003118:	d908      	bls.n	800312c <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800311a:	f003 041f 	and.w	r4, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800311e:	4a0f      	ldr	r2, [pc, #60]	@ (800315c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003120:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003122:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003124:	40a1      	lsls	r1, r4
 8003126:	4c0e      	ldr	r4, [pc, #56]	@ (8003160 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003128:	0093      	lsls	r3, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800312a:	e7e6      	b.n	80030fa <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
      stream_number += 8U;
 800312c:	3308      	adds	r3, #8
 800312e:	461c      	mov	r4, r3
 8003130:	e7f5      	b.n	800311e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
 8003132:	bf00      	nop
 8003134:	58025408 	.word	0x58025408
 8003138:	58025430 	.word	0x58025430
 800313c:	5802541c 	.word	0x5802541c
 8003140:	58025444 	.word	0x58025444
 8003144:	58025494 	.word	0x58025494
 8003148:	cccccccd 	.word	0xcccccccd
 800314c:	16009600 	.word	0x16009600
 8003150:	58025880 	.word	0x58025880
 8003154:	bffdfbf0 	.word	0xbffdfbf0
 8003158:	aaaaaaab 	.word	0xaaaaaaab
 800315c:	10008200 	.word	0x10008200
 8003160:	40020880 	.word	0x40020880

08003164 <HAL_DMA_Init>:
{
 8003164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003168:	4605      	mov	r5, r0
 800316a:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 800316c:	f7fe fd64 	bl	8001c38 <HAL_GetTick>
  if(hdma == NULL)
 8003170:	2d00      	cmp	r5, #0
 8003172:	f000 81a1 	beq.w	80034b8 <HAL_DMA_Init+0x354>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003176:	682c      	ldr	r4, [r5, #0]
 8003178:	4606      	mov	r6, r0
 800317a:	4bac      	ldr	r3, [pc, #688]	@ (800342c <HAL_DMA_Init+0x2c8>)
 800317c:	4aac      	ldr	r2, [pc, #688]	@ (8003430 <HAL_DMA_Init+0x2cc>)
 800317e:	4294      	cmp	r4, r2
 8003180:	bf18      	it	ne
 8003182:	429c      	cmpne	r4, r3
 8003184:	f102 0218 	add.w	r2, r2, #24
 8003188:	bf0c      	ite	eq
 800318a:	2301      	moveq	r3, #1
 800318c:	2300      	movne	r3, #0
 800318e:	4294      	cmp	r4, r2
 8003190:	bf08      	it	eq
 8003192:	f043 0301 	orreq.w	r3, r3, #1
 8003196:	3218      	adds	r2, #24
 8003198:	4294      	cmp	r4, r2
 800319a:	bf08      	it	eq
 800319c:	f043 0301 	orreq.w	r3, r3, #1
 80031a0:	3218      	adds	r2, #24
 80031a2:	4294      	cmp	r4, r2
 80031a4:	bf08      	it	eq
 80031a6:	f043 0301 	orreq.w	r3, r3, #1
 80031aa:	3218      	adds	r2, #24
 80031ac:	4294      	cmp	r4, r2
 80031ae:	bf08      	it	eq
 80031b0:	f043 0301 	orreq.w	r3, r3, #1
 80031b4:	3218      	adds	r2, #24
 80031b6:	4294      	cmp	r4, r2
 80031b8:	bf08      	it	eq
 80031ba:	f043 0301 	orreq.w	r3, r3, #1
 80031be:	3218      	adds	r2, #24
 80031c0:	4294      	cmp	r4, r2
 80031c2:	bf08      	it	eq
 80031c4:	f043 0301 	orreq.w	r3, r3, #1
 80031c8:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80031cc:	4294      	cmp	r4, r2
 80031ce:	bf08      	it	eq
 80031d0:	f043 0301 	orreq.w	r3, r3, #1
 80031d4:	3218      	adds	r2, #24
 80031d6:	4294      	cmp	r4, r2
 80031d8:	bf08      	it	eq
 80031da:	f043 0301 	orreq.w	r3, r3, #1
 80031de:	3218      	adds	r2, #24
 80031e0:	4294      	cmp	r4, r2
 80031e2:	bf08      	it	eq
 80031e4:	f043 0301 	orreq.w	r3, r3, #1
 80031e8:	3218      	adds	r2, #24
 80031ea:	4294      	cmp	r4, r2
 80031ec:	bf08      	it	eq
 80031ee:	f043 0301 	orreq.w	r3, r3, #1
 80031f2:	3218      	adds	r2, #24
 80031f4:	4294      	cmp	r4, r2
 80031f6:	bf08      	it	eq
 80031f8:	f043 0301 	orreq.w	r3, r3, #1
 80031fc:	3218      	adds	r2, #24
 80031fe:	4294      	cmp	r4, r2
 8003200:	bf08      	it	eq
 8003202:	f043 0301 	orreq.w	r3, r3, #1
 8003206:	3218      	adds	r2, #24
 8003208:	4294      	cmp	r4, r2
 800320a:	bf08      	it	eq
 800320c:	f043 0301 	orreq.w	r3, r3, #1
 8003210:	b91b      	cbnz	r3, 800321a <HAL_DMA_Init+0xb6>
 8003212:	4b88      	ldr	r3, [pc, #544]	@ (8003434 <HAL_DMA_Init+0x2d0>)
 8003214:	429c      	cmp	r4, r3
 8003216:	f040 8196 	bne.w	8003546 <HAL_DMA_Init+0x3e2>
    __HAL_UNLOCK(hdma);
 800321a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800321c:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800321e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8003222:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	e006      	b.n	800323e <HAL_DMA_Init+0xda>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003230:	f7fe fd02 	bl	8001c38 <HAL_GetTick>
 8003234:	1b80      	subs	r0, r0, r6
 8003236:	2805      	cmp	r0, #5
 8003238:	f200 8142 	bhi.w	80034c0 <HAL_DMA_Init+0x35c>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800323c:	682c      	ldr	r4, [r5, #0]
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	07df      	lsls	r7, r3, #31
 8003242:	d4f5      	bmi.n	8003230 <HAL_DMA_Init+0xcc>
    registerValue |=  hdma->Init.Direction           |
 8003244:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003248:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 800324a:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324c:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800324e:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003250:	430b      	orrs	r3, r1
 8003252:	6969      	ldr	r1, [r5, #20]
 8003254:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003256:	69e9      	ldr	r1, [r5, #28]
 8003258:	4313      	orrs	r3, r2
 800325a:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800325c:	4976      	ldr	r1, [pc, #472]	@ (8003438 <HAL_DMA_Init+0x2d4>)
 800325e:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8003260:	6a28      	ldr	r0, [r5, #32]
 8003262:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003264:	4875      	ldr	r0, [pc, #468]	@ (800343c <HAL_DMA_Init+0x2d8>)
    registerValue |=  hdma->Init.Direction           |
 8003266:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003268:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800326a:	2904      	cmp	r1, #4
 800326c:	f000 813d 	beq.w	80034ea <HAL_DMA_Init+0x386>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003270:	6800      	ldr	r0, [r0, #0]
 8003272:	f36f 000f 	bfc	r0, #0, #16
 8003276:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 800327a:	f080 80f1 	bcs.w	8003460 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800327e:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003280:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003282:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003286:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003288:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800328a:	4628      	mov	r0, r5
 800328c:	f7ff fe80 	bl	8002f90 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003290:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003292:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003294:	496a      	ldr	r1, [pc, #424]	@ (8003440 <HAL_DMA_Init+0x2dc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003296:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800329a:	4f6a      	ldr	r7, [pc, #424]	@ (8003444 <HAL_DMA_Init+0x2e0>)
 800329c:	1a61      	subs	r1, r4, r1
 800329e:	4e6a      	ldr	r6, [pc, #424]	@ (8003448 <HAL_DMA_Init+0x2e4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032a0:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032a2:	4a6a      	ldr	r2, [pc, #424]	@ (800344c <HAL_DMA_Init+0x2e8>)
 80032a4:	fab1 f181 	clz	r1, r1
 80032a8:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032aa:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032ac:	eba4 0a02 	sub.w	sl, r4, r2
 80032b0:	4b67      	ldr	r3, [pc, #412]	@ (8003450 <HAL_DMA_Init+0x2ec>)
 80032b2:	0949      	lsrs	r1, r1, #5
 80032b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003430 <HAL_DMA_Init+0x2cc>)
 80032b6:	faba fa8a 	clz	sl, sl
 80032ba:	eba4 0903 	sub.w	r9, r4, r3
 80032be:	4b5b      	ldr	r3, [pc, #364]	@ (800342c <HAL_DMA_Init+0x2c8>)
 80032c0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80032c4:	fab7 f787 	clz	r7, r7
 80032c8:	4294      	cmp	r4, r2
 80032ca:	bf18      	it	ne
 80032cc:	429c      	cmpne	r4, r3
 80032ce:	f102 0218 	add.w	r2, r2, #24
 80032d2:	fab9 f989 	clz	r9, r9
 80032d6:	eba4 0606 	sub.w	r6, r4, r6
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80032e4:	fab6 f686 	clz	r6, r6
 80032e8:	4294      	cmp	r4, r2
 80032ea:	bf08      	it	eq
 80032ec:	f043 0301 	orreq.w	r3, r3, #1
 80032f0:	3218      	adds	r2, #24
 80032f2:	097f      	lsrs	r7, r7, #5
 80032f4:	4294      	cmp	r4, r2
 80032f6:	bf08      	it	eq
 80032f8:	f043 0301 	orreq.w	r3, r3, #1
 80032fc:	3218      	adds	r2, #24
 80032fe:	0976      	lsrs	r6, r6, #5
 8003300:	4294      	cmp	r4, r2
 8003302:	bf08      	it	eq
 8003304:	f043 0301 	orreq.w	r3, r3, #1
 8003308:	3218      	adds	r2, #24
 800330a:	4294      	cmp	r4, r2
 800330c:	bf08      	it	eq
 800330e:	f043 0301 	orreq.w	r3, r3, #1
 8003312:	3218      	adds	r2, #24
 8003314:	4294      	cmp	r4, r2
 8003316:	bf08      	it	eq
 8003318:	f043 0301 	orreq.w	r3, r3, #1
 800331c:	3218      	adds	r2, #24
 800331e:	4294      	cmp	r4, r2
 8003320:	bf08      	it	eq
 8003322:	f043 0301 	orreq.w	r3, r3, #1
 8003326:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800332a:	4294      	cmp	r4, r2
 800332c:	bf08      	it	eq
 800332e:	f043 0301 	orreq.w	r3, r3, #1
 8003332:	3218      	adds	r2, #24
 8003334:	4294      	cmp	r4, r2
 8003336:	bf08      	it	eq
 8003338:	f043 0301 	orreq.w	r3, r3, #1
 800333c:	3218      	adds	r2, #24
 800333e:	4294      	cmp	r4, r2
 8003340:	bf08      	it	eq
 8003342:	f043 0301 	orreq.w	r3, r3, #1
 8003346:	3218      	adds	r2, #24
 8003348:	4294      	cmp	r4, r2
 800334a:	bf08      	it	eq
 800334c:	f043 0301 	orreq.w	r3, r3, #1
 8003350:	3218      	adds	r2, #24
 8003352:	4294      	cmp	r4, r2
 8003354:	bf08      	it	eq
 8003356:	f043 0301 	orreq.w	r3, r3, #1
 800335a:	3218      	adds	r2, #24
 800335c:	4294      	cmp	r4, r2
 800335e:	bf08      	it	eq
 8003360:	f043 0301 	orreq.w	r3, r3, #1
 8003364:	3218      	adds	r2, #24
 8003366:	4294      	cmp	r4, r2
 8003368:	bf08      	it	eq
 800336a:	f043 0301 	orreq.w	r3, r3, #1
 800336e:	3218      	adds	r2, #24
 8003370:	4294      	cmp	r4, r2
 8003372:	bf08      	it	eq
 8003374:	f043 0301 	orreq.w	r3, r3, #1
 8003378:	4a36      	ldr	r2, [pc, #216]	@ (8003454 <HAL_DMA_Init+0x2f0>)
 800337a:	ea4a 0303 	orr.w	r3, sl, r3
 800337e:	eba4 0802 	sub.w	r8, r4, r2
 8003382:	323c      	adds	r2, #60	@ 0x3c
 8003384:	430b      	orrs	r3, r1
 8003386:	fab8 f888 	clz	r8, r8
 800338a:	eba4 0b02 	sub.w	fp, r4, r2
 800338e:	3214      	adds	r2, #20
 8003390:	ea49 0303 	orr.w	r3, r9, r3
 8003394:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8003398:	fabb fb8b 	clz	fp, fp
 800339c:	1aa2      	subs	r2, r4, r2
 800339e:	ea48 0303 	orr.w	r3, r8, r3
 80033a2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80033a6:	fab2 f282 	clz	r2, r2
 80033aa:	433b      	orrs	r3, r7
 80033ac:	0952      	lsrs	r2, r2, #5
 80033ae:	4333      	orrs	r3, r6
 80033b0:	9201      	str	r2, [sp, #4]
 80033b2:	ea5b 0303 	orrs.w	r3, fp, r3
 80033b6:	d100      	bne.n	80033ba <HAL_DMA_Init+0x256>
 80033b8:	b382      	cbz	r2, 800341c <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033ba:	4628      	mov	r0, r5
 80033bc:	9100      	str	r1, [sp, #0]
 80033be:	f7ff fe67 	bl	8003090 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033c2:	68ab      	ldr	r3, [r5, #8]
 80033c4:	9900      	ldr	r1, [sp, #0]
 80033c6:	2b80      	cmp	r3, #128	@ 0x80
 80033c8:	f000 8083 	beq.w	80034d2 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033cc:	686a      	ldr	r2, [r5, #4]
 80033ce:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80033d0:	b2d0      	uxtb	r0, r2
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80033d2:	3a01      	subs	r2, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033d4:	e9d5 4c19 	ldrd	r4, ip, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80033d8:	2a07      	cmp	r2, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033da:	6018      	str	r0, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033dc:	f8c4 c004 	str.w	ip, [r4, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80033e0:	d87e      	bhi.n	80034e0 <HAL_DMA_Init+0x37c>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033e2:	ea4a 0a01 	orr.w	sl, sl, r1
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80033e6:	1e44      	subs	r4, r0, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033e8:	ea49 090a 	orr.w	r9, r9, sl
 80033ec:	ea48 0809 	orr.w	r8, r8, r9
 80033f0:	ea47 0708 	orr.w	r7, r7, r8
 80033f4:	433e      	orrs	r6, r7
 80033f6:	ea5b 0606 	orrs.w	r6, fp, r6
 80033fa:	d103      	bne.n	8003404 <HAL_DMA_Init+0x2a0>
 80033fc:	9b01      	ldr	r3, [sp, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 811d 	beq.w	800363e <HAL_DMA_Init+0x4da>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003404:	4a14      	ldr	r2, [pc, #80]	@ (8003458 <HAL_DMA_Init+0x2f4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003406:	4915      	ldr	r1, [pc, #84]	@ (800345c <HAL_DMA_Init+0x2f8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003408:	4402      	add	r2, r0
 800340a:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800340c:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800340e:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003410:	40a3      	lsls	r3, r4
 8003412:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
 8003416:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003418:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800341a:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800341c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800341e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003420:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003422:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 8003426:	b003      	add	sp, #12
 8003428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342c:	40020010 	.word	0x40020010
 8003430:	40020028 	.word	0x40020028
 8003434:	400204b8 	.word	0x400204b8
 8003438:	fe10803f 	.word	0xfe10803f
 800343c:	5c001000 	.word	0x5c001000
 8003440:	5802541c 	.word	0x5802541c
 8003444:	58025458 	.word	0x58025458
 8003448:	5802546c 	.word	0x5802546c
 800344c:	58025408 	.word	0x58025408
 8003450:	58025430 	.word	0x58025430
 8003454:	58025444 	.word	0x58025444
 8003458:	1600963f 	.word	0x1600963f
 800345c:	58025940 	.word	0x58025940
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003460:	6868      	ldr	r0, [r5, #4]
 8003462:	282e      	cmp	r0, #46	@ 0x2e
 8003464:	d932      	bls.n	80034cc <HAL_DMA_Init+0x368>
 8003466:	383f      	subs	r0, #63	@ 0x3f
 8003468:	2813      	cmp	r0, #19
 800346a:	d806      	bhi.n	800347a <HAL_DMA_Init+0x316>
 800346c:	4e7a      	ldr	r6, [pc, #488]	@ (8003658 <HAL_DMA_Init+0x4f4>)
 800346e:	fa26 f000 	lsr.w	r0, r6, r0
 8003472:	07c0      	lsls	r0, r0, #31
 8003474:	d501      	bpl.n	800347a <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 8003476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800347a:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800347c:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800347e:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003480:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003484:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003488:	f47f aefe 	bne.w	8003288 <HAL_DMA_Init+0x124>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800348c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800348e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8003490:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003492:	2800      	cmp	r0, #0
 8003494:	f43f aef8 	beq.w	8003288 <HAL_DMA_Init+0x124>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003498:	2a00      	cmp	r2, #0
 800349a:	d138      	bne.n	800350e <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 800349c:	2901      	cmp	r1, #1
 800349e:	d04d      	beq.n	800353c <HAL_DMA_Init+0x3d8>
 80034a0:	f031 0202 	bics.w	r2, r1, #2
 80034a4:	f47f aef0 	bne.w	8003288 <HAL_DMA_Init+0x124>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a8:	01c2      	lsls	r2, r0, #7
 80034aa:	f57f aeed 	bpl.w	8003288 <HAL_DMA_Init+0x124>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034ae:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 80034b0:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034b2:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80034b4:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 80034b8:	2001      	movs	r0, #1
}
 80034ba:	b003      	add	sp, #12
 80034bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c0:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80034c2:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c4:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80034c6:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        return HAL_ERROR;
 80034ca:	e7f5      	b.n	80034b8 <HAL_DMA_Init+0x354>
 80034cc:	2828      	cmp	r0, #40	@ 0x28
 80034ce:	d9d4      	bls.n	800347a <HAL_DMA_Init+0x316>
 80034d0:	e7d1      	b.n	8003476 <HAL_DMA_Init+0x312>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034d2:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034d4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 80034d6:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034da:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034dc:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034de:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80034e6:	676b      	str	r3, [r5, #116]	@ 0x74
 80034e8:	e798      	b.n	800341c <HAL_DMA_Init+0x2b8>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80034ea:	6806      	ldr	r6, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034ec:	e9d5 070b 	ldrd	r0, r7, [r5, #44]	@ 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80034f0:	f36f 060f 	bfc	r6, #0, #16
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034f4:	4307      	orrs	r7, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80034f6:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034fa:	ea43 0307 	orr.w	r3, r3, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80034fe:	d2af      	bcs.n	8003460 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003500:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003502:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003504:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003508:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800350c:	e7bf      	b.n	800348e <HAL_DMA_Init+0x32a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800350e:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003512:	d004      	beq.n	800351e <HAL_DMA_Init+0x3ba>
    switch (hdma->Init.FIFOThreshold)
 8003514:	2902      	cmp	r1, #2
 8003516:	d9ca      	bls.n	80034ae <HAL_DMA_Init+0x34a>
 8003518:	2903      	cmp	r1, #3
 800351a:	d0c5      	beq.n	80034a8 <HAL_DMA_Init+0x344>
 800351c:	e6b4      	b.n	8003288 <HAL_DMA_Init+0x124>
    switch (hdma->Init.FIFOThreshold)
 800351e:	2903      	cmp	r1, #3
 8003520:	f63f aeb2 	bhi.w	8003288 <HAL_DMA_Init+0x124>
 8003524:	a201      	add	r2, pc, #4	@ (adr r2, 800352c <HAL_DMA_Init+0x3c8>)
 8003526:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800352a:	bf00      	nop
 800352c:	080034af 	.word	0x080034af
 8003530:	080034a9 	.word	0x080034a9
 8003534:	080034af 	.word	0x080034af
 8003538:	0800353d 	.word	0x0800353d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800353c:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8003540:	f47f aea2 	bne.w	8003288 <HAL_DMA_Init+0x124>
 8003544:	e7b3      	b.n	80034ae <HAL_DMA_Init+0x34a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003546:	4a45      	ldr	r2, [pc, #276]	@ (800365c <HAL_DMA_Init+0x4f8>)
 8003548:	4945      	ldr	r1, [pc, #276]	@ (8003660 <HAL_DMA_Init+0x4fc>)
 800354a:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <HAL_DMA_Init+0x500>)
 800354c:	eba4 0a02 	sub.w	sl, r4, r2
 8003550:	1a61      	subs	r1, r4, r1
 8003552:	4f45      	ldr	r7, [pc, #276]	@ (8003668 <HAL_DMA_Init+0x504>)
 8003554:	eba4 0903 	sub.w	r9, r4, r3
 8003558:	faba fa8a 	clz	sl, sl
 800355c:	3314      	adds	r3, #20
 800355e:	fab1 f181 	clz	r1, r1
 8003562:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8003566:	fab9 f989 	clz	r9, r9
 800356a:	eba4 0803 	sub.w	r8, r4, r3
 800356e:	0949      	lsrs	r1, r1, #5
 8003570:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8003574:	1be7      	subs	r7, r4, r7
 8003576:	fab8 f888 	clz	r8, r8
 800357a:	ea4a 0301 	orr.w	r3, sl, r1
 800357e:	4e3b      	ldr	r6, [pc, #236]	@ (800366c <HAL_DMA_Init+0x508>)
 8003580:	3278      	adds	r2, #120	@ 0x78
 8003582:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8003586:	ea49 0303 	orr.w	r3, r9, r3
 800358a:	fab7 f787 	clz	r7, r7
 800358e:	1ba6      	subs	r6, r4, r6
 8003590:	eba4 0b02 	sub.w	fp, r4, r2
 8003594:	ea48 0303 	orr.w	r3, r8, r3
 8003598:	097f      	lsrs	r7, r7, #5
 800359a:	fab6 f686 	clz	r6, r6
 800359e:	3214      	adds	r2, #20
 80035a0:	fabb fb8b 	clz	fp, fp
 80035a4:	433b      	orrs	r3, r7
 80035a6:	0976      	lsrs	r6, r6, #5
 80035a8:	1aa2      	subs	r2, r4, r2
 80035aa:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80035ae:	4333      	orrs	r3, r6
 80035b0:	fab2 f282 	clz	r2, r2
 80035b4:	ea5b 0303 	orrs.w	r3, fp, r3
 80035b8:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80035bc:	9201      	str	r2, [sp, #4]
 80035be:	d101      	bne.n	80035c4 <HAL_DMA_Init+0x460>
 80035c0:	2a00      	cmp	r2, #0
 80035c2:	d043      	beq.n	800364c <HAL_DMA_Init+0x4e8>
    hdma->State = HAL_DMA_STATE_BUSY;
 80035c4:	2302      	movs	r3, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035c6:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8003680 <HAL_DMA_Init+0x51c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ca:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80035ce:	2300      	movs	r3, #0
 80035d0:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035d4:	68ab      	ldr	r3, [r5, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80035d6:	6822      	ldr	r2, [r4, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035d8:	2b40      	cmp	r3, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035da:	ea02 0e0e 	and.w	lr, r2, lr
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035de:	d033      	beq.n	8003648 <HAL_DMA_Init+0x4e4>
 80035e0:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	0398      	lsls	r0, r3, #14
 80035ec:	9100      	str	r1, [sp, #0]
 80035ee:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80035f2:	ea43 0c02 	orr.w	ip, r3, r2
 80035f6:	696a      	ldr	r2, [r5, #20]
 80035f8:	69ab      	ldr	r3, [r5, #24]
 80035fa:	ea4c 0c02 	orr.w	ip, ip, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003670 <HAL_DMA_Init+0x50c>)
 8003600:	ea4c 0c03 	orr.w	ip, ip, r3
 8003604:	69eb      	ldr	r3, [r5, #28]
 8003606:	4422      	add	r2, r4
 8003608:	ea4c 0c03 	orr.w	ip, ip, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800360c:	6a2b      	ldr	r3, [r5, #32]
 800360e:	ea4e 1313 	orr.w	r3, lr, r3, lsr #4
 8003612:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003616:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003618:	4b16      	ldr	r3, [pc, #88]	@ (8003674 <HAL_DMA_Init+0x510>)
 800361a:	fba3 2302 	umull	r2, r3, r3, r2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800361e:	6020      	str	r0, [r4, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003620:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	65eb      	str	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003628:	f7ff fcb2 	bl	8002f90 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800362c:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800362e:	4602      	mov	r2, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003630:	9900      	ldr	r1, [sp, #0]
 8003632:	f003 001f 	and.w	r0, r3, #31
 8003636:	2301      	movs	r3, #1
 8003638:	4083      	lsls	r3, r0
 800363a:	6053      	str	r3, [r2, #4]
 800363c:	e6bd      	b.n	80033ba <HAL_DMA_Init+0x256>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800363e:	4a0e      	ldr	r2, [pc, #56]	@ (8003678 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003640:	490e      	ldr	r1, [pc, #56]	@ (800367c <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003642:	4402      	add	r2, r0
 8003644:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003646:	e6e1      	b.n	800340c <HAL_DMA_Init+0x2a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003648:	2010      	movs	r0, #16
 800364a:	e7cf      	b.n	80035ec <HAL_DMA_Init+0x488>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800364c:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800364e:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003650:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003652:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8003656:	e72f      	b.n	80034b8 <HAL_DMA_Init+0x354>
 8003658:	000f030f 	.word	0x000f030f
 800365c:	58025408 	.word	0x58025408
 8003660:	5802541c 	.word	0x5802541c
 8003664:	58025430 	.word	0x58025430
 8003668:	58025458 	.word	0x58025458
 800366c:	5802546c 	.word	0x5802546c
 8003670:	a7fdabf8 	.word	0xa7fdabf8
 8003674:	cccccccd 	.word	0xcccccccd
 8003678:	1000823f 	.word	0x1000823f
 800367c:	40020940 	.word	0x40020940
 8003680:	fffe000f 	.word	0xfffe000f

08003684 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8003684:	2800      	cmp	r0, #0
 8003686:	f000 8221 	beq.w	8003acc <HAL_DMA_Start_IT+0x448>
{
 800368a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hdma);
 800368e:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8003692:	2c01      	cmp	r4, #1
 8003694:	f000 8217 	beq.w	8003ac6 <HAL_DMA_Start_IT+0x442>
 8003698:	2401      	movs	r4, #1
 800369a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800369e:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 80036a2:	2c01      	cmp	r4, #1
 80036a4:	d008      	beq.n	80036b8 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80036a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 80036aa:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80036ac:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80036ae:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 80036b2:	2001      	movs	r0, #1
}
 80036b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80036b8:	2402      	movs	r4, #2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036ba:	4e69      	ldr	r6, [pc, #420]	@ (8003860 <HAL_DMA_Start_IT+0x1dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036bc:	f8df e1a8 	ldr.w	lr, [pc, #424]	@ 8003868 <HAL_DMA_Start_IT+0x1e4>
    hdma->State = HAL_DMA_STATE_BUSY;
 80036c0:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c4:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 80036c6:	4d67      	ldr	r5, [pc, #412]	@ (8003864 <HAL_DMA_Start_IT+0x1e0>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c8:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 80036ca:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800387c <HAL_DMA_Start_IT+0x1f8>
 80036d0:	4574      	cmp	r4, lr
 80036d2:	bf18      	it	ne
 80036d4:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 80036d6:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8003880 <HAL_DMA_Start_IT+0x1fc>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036da:	f8d0 a058 	ldr.w	sl, [r0, #88]	@ 0x58
 80036de:	bf0c      	ite	eq
 80036e0:	2601      	moveq	r6, #1
 80036e2:	2600      	movne	r6, #0
 80036e4:	4544      	cmp	r4, r8
 80036e6:	bf14      	ite	ne
 80036e8:	46b1      	movne	r9, r6
 80036ea:	f046 0901 	orreq.w	r9, r6, #1
    __HAL_DMA_DISABLE(hdma);
 80036ee:	42ac      	cmp	r4, r5
 80036f0:	bf18      	it	ne
 80036f2:	4564      	cmpne	r4, ip
 80036f4:	bf0c      	ite	eq
 80036f6:	2501      	moveq	r5, #1
 80036f8:	2500      	movne	r5, #0
 80036fa:	f040 80c3 	bne.w	8003884 <HAL_DMA_Start_IT+0x200>
 80036fe:	f8d4 c000 	ldr.w	ip, [r4]
 8003702:	f02c 0c01 	bic.w	ip, ip, #1
 8003706:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 800370a:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800370e:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
 8003712:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003714:	f1bc 0f00 	cmp.w	ip, #0
 8003718:	d007      	beq.n	800372a <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800371a:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 800371e:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003720:	b91d      	cbnz	r5, 800372a <HAL_DMA_Start_IT+0xa6>
 8003722:	f1b9 0f00 	cmp.w	r9, #0
 8003726:	f000 8130 	beq.w	800398a <HAL_DMA_Start_IT+0x306>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800372a:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 800372c:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 8003730:	f007 081f 	and.w	r8, r7, #31
 8003734:	fa0e fe08 	lsl.w	lr, lr, r8
 8003738:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800373c:	6827      	ldr	r7, [r4, #0]
 800373e:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 8003742:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003744:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003746:	6883      	ldr	r3, [r0, #8]
 8003748:	2b40      	cmp	r3, #64	@ 0x40
 800374a:	f000 81c1 	beq.w	8003ad0 <HAL_DMA_Start_IT+0x44c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800374e:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003750:	60e2      	str	r2, [r4, #12]
      if(hdma->XferHalfCpltCallback != NULL)
 8003752:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003754:	2d00      	cmp	r5, #0
 8003756:	f040 81a1 	bne.w	8003a9c <HAL_DMA_Start_IT+0x418>
 800375a:	4b43      	ldr	r3, [pc, #268]	@ (8003868 <HAL_DMA_Start_IT+0x1e4>)
 800375c:	429c      	cmp	r4, r3
 800375e:	f000 81de 	beq.w	8003b1e <HAL_DMA_Start_IT+0x49a>
 8003762:	3318      	adds	r3, #24
 8003764:	429c      	cmp	r4, r3
 8003766:	f000 81f6 	beq.w	8003b56 <HAL_DMA_Start_IT+0x4d2>
 800376a:	f1b9 0f00 	cmp.w	r9, #0
 800376e:	f040 81c7 	bne.w	8003b00 <HAL_DMA_Start_IT+0x47c>
 8003772:	4b3e      	ldr	r3, [pc, #248]	@ (800386c <HAL_DMA_Start_IT+0x1e8>)
 8003774:	429c      	cmp	r4, r3
 8003776:	f000 8201 	beq.w	8003b7c <HAL_DMA_Start_IT+0x4f8>
 800377a:	4b3d      	ldr	r3, [pc, #244]	@ (8003870 <HAL_DMA_Start_IT+0x1ec>)
 800377c:	429c      	cmp	r4, r3
 800377e:	f000 8209 	beq.w	8003b94 <HAL_DMA_Start_IT+0x510>
 8003782:	3318      	adds	r3, #24
 8003784:	429c      	cmp	r4, r3
 8003786:	f000 8223 	beq.w	8003bd0 <HAL_DMA_Start_IT+0x54c>
 800378a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800378e:	429c      	cmp	r4, r3
 8003790:	f000 8233 	beq.w	8003bfa <HAL_DMA_Start_IT+0x576>
 8003794:	3318      	adds	r3, #24
 8003796:	429c      	cmp	r4, r3
 8003798:	f000 8242 	beq.w	8003c20 <HAL_DMA_Start_IT+0x59c>
 800379c:	3318      	adds	r3, #24
 800379e:	429c      	cmp	r4, r3
 80037a0:	f000 8249 	beq.w	8003c36 <HAL_DMA_Start_IT+0x5b2>
 80037a4:	3318      	adds	r3, #24
 80037a6:	429c      	cmp	r4, r3
 80037a8:	f000 8250 	beq.w	8003c4c <HAL_DMA_Start_IT+0x5c8>
 80037ac:	3318      	adds	r3, #24
 80037ae:	429c      	cmp	r4, r3
 80037b0:	f000 8257 	beq.w	8003c62 <HAL_DMA_Start_IT+0x5de>
 80037b4:	3318      	adds	r3, #24
 80037b6:	429c      	cmp	r4, r3
 80037b8:	f000 8267 	beq.w	8003c8a <HAL_DMA_Start_IT+0x606>
 80037bc:	3318      	adds	r3, #24
 80037be:	429c      	cmp	r4, r3
 80037c0:	f000 8265 	beq.w	8003c8e <HAL_DMA_Start_IT+0x60a>
 80037c4:	3318      	adds	r3, #24
 80037c6:	429c      	cmp	r4, r3
 80037c8:	f000 8275 	beq.w	8003cb6 <HAL_DMA_Start_IT+0x632>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	f023 030e 	bic.w	r3, r3, #14
 80037d2:	f043 030a 	orr.w	r3, r3, #10
 80037d6:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80037d8:	b11a      	cbz	r2, 80037e2 <HAL_DMA_Start_IT+0x15e>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037e2:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <HAL_DMA_Start_IT+0x1f0>)
 80037e4:	4a24      	ldr	r2, [pc, #144]	@ (8003878 <HAL_DMA_Start_IT+0x1f4>)
 80037e6:	4294      	cmp	r4, r2
 80037e8:	bf18      	it	ne
 80037ea:	429c      	cmpne	r4, r3
 80037ec:	f102 0214 	add.w	r2, r2, #20
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	4294      	cmp	r4, r2
 80037f8:	bf08      	it	eq
 80037fa:	f043 0301 	orreq.w	r3, r3, #1
 80037fe:	3214      	adds	r2, #20
 8003800:	4294      	cmp	r4, r2
 8003802:	bf08      	it	eq
 8003804:	f043 0301 	orreq.w	r3, r3, #1
 8003808:	3214      	adds	r2, #20
 800380a:	4294      	cmp	r4, r2
 800380c:	bf08      	it	eq
 800380e:	f043 0301 	orreq.w	r3, r3, #1
 8003812:	3214      	adds	r2, #20
 8003814:	4294      	cmp	r4, r2
 8003816:	bf08      	it	eq
 8003818:	f043 0301 	orreq.w	r3, r3, #1
 800381c:	3214      	adds	r2, #20
 800381e:	4294      	cmp	r4, r2
 8003820:	bf08      	it	eq
 8003822:	f043 0301 	orreq.w	r3, r3, #1
 8003826:	3214      	adds	r2, #20
 8003828:	4294      	cmp	r4, r2
 800382a:	bf08      	it	eq
 800382c:	f043 0301 	orreq.w	r3, r3, #1
 8003830:	b17b      	cbz	r3, 8003852 <HAL_DMA_Start_IT+0x1ce>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003832:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003834:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	03d2      	lsls	r2, r2, #15
 800383c:	f100 813e 	bmi.w	8003abc <HAL_DMA_Start_IT+0x438>
      if(hdma->DMAmuxRequestGen != 0U)
 8003840:	f1bc 0f00 	cmp.w	ip, #0
 8003844:	d005      	beq.n	8003852 <HAL_DMA_Start_IT+0x1ce>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003846:	f8dc 3000 	ldr.w	r3, [ip]
 800384a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800384e:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 8003852:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6023      	str	r3, [r4, #0]
}
 800385c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003860:	40020070 	.word	0x40020070
 8003864:	40020028 	.word	0x40020028
 8003868:	40020040 	.word	0x40020040
 800386c:	40020088 	.word	0x40020088
 8003870:	400200a0 	.word	0x400200a0
 8003874:	58025408 	.word	0x58025408
 8003878:	5802541c 	.word	0x5802541c
 800387c:	40020058 	.word	0x40020058
 8003880:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8003884:	4574      	cmp	r4, lr
 8003886:	f000 8154 	beq.w	8003b32 <HAL_DMA_Start_IT+0x4ae>
 800388a:	4544      	cmp	r4, r8
 800388c:	f000 815a 	beq.w	8003b44 <HAL_DMA_Start_IT+0x4c0>
 8003890:	f1b9 0f00 	cmp.w	r9, #0
 8003894:	f040 811f 	bne.w	8003ad6 <HAL_DMA_Start_IT+0x452>
 8003898:	f8df c434 	ldr.w	ip, [pc, #1076]	@ 8003cd0 <HAL_DMA_Start_IT+0x64c>
 800389c:	4564      	cmp	r4, ip
 800389e:	f000 8164 	beq.w	8003b6a <HAL_DMA_Start_IT+0x4e6>
 80038a2:	f10c 0c18 	add.w	ip, ip, #24
 80038a6:	4564      	cmp	r4, ip
 80038a8:	f000 8180 	beq.w	8003bac <HAL_DMA_Start_IT+0x528>
 80038ac:	f10c 0c18 	add.w	ip, ip, #24
 80038b0:	4564      	cmp	r4, ip
 80038b2:	f000 8184 	beq.w	8003bbe <HAL_DMA_Start_IT+0x53a>
 80038b6:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 80038ba:	4564      	cmp	r4, ip
 80038bc:	f000 8194 	beq.w	8003be8 <HAL_DMA_Start_IT+0x564>
 80038c0:	f10c 0c18 	add.w	ip, ip, #24
 80038c4:	4564      	cmp	r4, ip
 80038c6:	f000 81a2 	beq.w	8003c0e <HAL_DMA_Start_IT+0x58a>
 80038ca:	f10c 0c18 	add.w	ip, ip, #24
 80038ce:	4564      	cmp	r4, ip
 80038d0:	f000 81b3 	beq.w	8003c3a <HAL_DMA_Start_IT+0x5b6>
 80038d4:	f10c 0c18 	add.w	ip, ip, #24
 80038d8:	4564      	cmp	r4, ip
 80038da:	f000 81b9 	beq.w	8003c50 <HAL_DMA_Start_IT+0x5cc>
 80038de:	f10c 0c18 	add.w	ip, ip, #24
 80038e2:	4564      	cmp	r4, ip
 80038e4:	f000 81bf 	beq.w	8003c66 <HAL_DMA_Start_IT+0x5e2>
 80038e8:	f10c 0c18 	add.w	ip, ip, #24
 80038ec:	4564      	cmp	r4, ip
 80038ee:	f000 81c3 	beq.w	8003c78 <HAL_DMA_Start_IT+0x5f4>
 80038f2:	f10c 0c18 	add.w	ip, ip, #24
 80038f6:	4564      	cmp	r4, ip
 80038f8:	f000 81cb 	beq.w	8003c92 <HAL_DMA_Start_IT+0x60e>
 80038fc:	f10c 0c18 	add.w	ip, ip, #24
 8003900:	4564      	cmp	r4, ip
 8003902:	f000 81cf 	beq.w	8003ca4 <HAL_DMA_Start_IT+0x620>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003906:	f8df c3cc 	ldr.w	ip, [pc, #972]	@ 8003cd4 <HAL_DMA_Start_IT+0x650>
 800390a:	f8df e3cc 	ldr.w	lr, [pc, #972]	@ 8003cd8 <HAL_DMA_Start_IT+0x654>
 800390e:	4574      	cmp	r4, lr
 8003910:	bf18      	it	ne
 8003912:	4564      	cmpne	r4, ip
 8003914:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
 8003918:	bf0c      	ite	eq
 800391a:	f04f 0c01 	moveq.w	ip, #1
 800391e:	f04f 0c00 	movne.w	ip, #0
 8003922:	4574      	cmp	r4, lr
 8003924:	bf08      	it	eq
 8003926:	f04c 0c01 	orreq.w	ip, ip, #1
 800392a:	f10e 0e14 	add.w	lr, lr, #20
 800392e:	4574      	cmp	r4, lr
 8003930:	bf08      	it	eq
 8003932:	f04c 0c01 	orreq.w	ip, ip, #1
 8003936:	f10e 0e14 	add.w	lr, lr, #20
 800393a:	4574      	cmp	r4, lr
 800393c:	bf08      	it	eq
 800393e:	f04c 0c01 	orreq.w	ip, ip, #1
 8003942:	f10e 0e14 	add.w	lr, lr, #20
 8003946:	4574      	cmp	r4, lr
 8003948:	bf08      	it	eq
 800394a:	f04c 0c01 	orreq.w	ip, ip, #1
    __HAL_DMA_DISABLE(hdma);
 800394e:	f8d4 e000 	ldr.w	lr, [r4]
 8003952:	f02e 0e01 	bic.w	lr, lr, #1
 8003956:	f8c4 e000 	str.w	lr, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800395a:	f8df e380 	ldr.w	lr, [pc, #896]	@ 8003cdc <HAL_DMA_Start_IT+0x658>
 800395e:	4574      	cmp	r4, lr
 8003960:	bf08      	it	eq
 8003962:	f04c 0c01 	orreq.w	ip, ip, #1
 8003966:	f1bc 0f00 	cmp.w	ip, #0
 800396a:	d103      	bne.n	8003974 <HAL_DMA_Start_IT+0x2f0>
 800396c:	f8df c370 	ldr.w	ip, [pc, #880]	@ 8003ce0 <HAL_DMA_Start_IT+0x65c>
 8003970:	4564      	cmp	r4, ip
 8003972:	d14f      	bne.n	8003a14 <HAL_DMA_Start_IT+0x390>
    if(hdma->DMAmuxRequestGen != 0U)
 8003974:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003978:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 800397c:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800397e:	f1bc 0f00 	cmp.w	ip, #0
 8003982:	d002      	beq.n	800398a <HAL_DMA_Start_IT+0x306>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003984:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8003988:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800398a:	f8df e344 	ldr.w	lr, [pc, #836]	@ 8003cd0 <HAL_DMA_Start_IT+0x64c>
 800398e:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 8003ce4 <HAL_DMA_Start_IT+0x660>
 8003992:	4544      	cmp	r4, r8
 8003994:	bf18      	it	ne
 8003996:	4574      	cmpne	r4, lr
 8003998:	f108 0818 	add.w	r8, r8, #24
 800399c:	bf0c      	ite	eq
 800399e:	f04f 0e01 	moveq.w	lr, #1
 80039a2:	f04f 0e00 	movne.w	lr, #0
 80039a6:	4544      	cmp	r4, r8
 80039a8:	bf08      	it	eq
 80039aa:	f04e 0e01 	orreq.w	lr, lr, #1
 80039ae:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 80039b2:	4544      	cmp	r4, r8
 80039b4:	bf08      	it	eq
 80039b6:	f04e 0e01 	orreq.w	lr, lr, #1
 80039ba:	f108 0818 	add.w	r8, r8, #24
 80039be:	4544      	cmp	r4, r8
 80039c0:	bf08      	it	eq
 80039c2:	f04e 0e01 	orreq.w	lr, lr, #1
 80039c6:	f108 0818 	add.w	r8, r8, #24
 80039ca:	4544      	cmp	r4, r8
 80039cc:	bf08      	it	eq
 80039ce:	f04e 0e01 	orreq.w	lr, lr, #1
 80039d2:	f108 0818 	add.w	r8, r8, #24
 80039d6:	4544      	cmp	r4, r8
 80039d8:	bf08      	it	eq
 80039da:	f04e 0e01 	orreq.w	lr, lr, #1
 80039de:	f108 0818 	add.w	r8, r8, #24
 80039e2:	4544      	cmp	r4, r8
 80039e4:	bf08      	it	eq
 80039e6:	f04e 0e01 	orreq.w	lr, lr, #1
 80039ea:	f108 0818 	add.w	r8, r8, #24
 80039ee:	4544      	cmp	r4, r8
 80039f0:	bf08      	it	eq
 80039f2:	f04e 0e01 	orreq.w	lr, lr, #1
 80039f6:	f108 0818 	add.w	r8, r8, #24
 80039fa:	4544      	cmp	r4, r8
 80039fc:	bf08      	it	eq
 80039fe:	f04e 0e01 	orreq.w	lr, lr, #1
 8003a02:	f1be 0f00 	cmp.w	lr, #0
 8003a06:	f47f ae90 	bne.w	800372a <HAL_DMA_Start_IT+0xa6>
 8003a0a:	f8df e2dc 	ldr.w	lr, [pc, #732]	@ 8003ce8 <HAL_DMA_Start_IT+0x664>
 8003a0e:	4574      	cmp	r4, lr
 8003a10:	f43f ae8b 	beq.w	800372a <HAL_DMA_Start_IT+0xa6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a14:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 8003cd8 <HAL_DMA_Start_IT+0x654>
 8003a18:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 8003cd4 <HAL_DMA_Start_IT+0x650>
 8003a1c:	4574      	cmp	r4, lr
 8003a1e:	bf18      	it	ne
 8003a20:	4564      	cmpne	r4, ip
 8003a22:	f10e 0e14 	add.w	lr, lr, #20
 8003a26:	bf0c      	ite	eq
 8003a28:	f04f 0c01 	moveq.w	ip, #1
 8003a2c:	f04f 0c00 	movne.w	ip, #0
 8003a30:	4574      	cmp	r4, lr
 8003a32:	bf08      	it	eq
 8003a34:	f04c 0c01 	orreq.w	ip, ip, #1
 8003a38:	f10e 0e14 	add.w	lr, lr, #20
 8003a3c:	4574      	cmp	r4, lr
 8003a3e:	bf08      	it	eq
 8003a40:	f04c 0c01 	orreq.w	ip, ip, #1
 8003a44:	f10e 0e14 	add.w	lr, lr, #20
 8003a48:	4574      	cmp	r4, lr
 8003a4a:	bf08      	it	eq
 8003a4c:	f04c 0c01 	orreq.w	ip, ip, #1
 8003a50:	f10e 0e14 	add.w	lr, lr, #20
 8003a54:	4574      	cmp	r4, lr
 8003a56:	bf08      	it	eq
 8003a58:	f04c 0c01 	orreq.w	ip, ip, #1
 8003a5c:	f10e 0e14 	add.w	lr, lr, #20
 8003a60:	4574      	cmp	r4, lr
 8003a62:	bf08      	it	eq
 8003a64:	f04c 0c01 	orreq.w	ip, ip, #1
 8003a68:	f1bc 0f00 	cmp.w	ip, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_DMA_Start_IT+0x3f4>
 8003a6e:	f8df c270 	ldr.w	ip, [pc, #624]	@ 8003ce0 <HAL_DMA_Start_IT+0x65c>
 8003a72:	4564      	cmp	r4, ip
 8003a74:	f040 8125 	bne.w	8003cc2 <HAL_DMA_Start_IT+0x63e>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a78:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 8003a7a:	f04f 0c01 	mov.w	ip, #1
 8003a7e:	f006 0e1f 	and.w	lr, r6, #31
 8003a82:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003a86:	f8ca c004 	str.w	ip, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003a8a:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a8c:	6883      	ldr	r3, [r0, #8]
 8003a8e:	2b40      	cmp	r3, #64	@ 0x40
 8003a90:	f000 8113 	beq.w	8003cba <HAL_DMA_Start_IT+0x636>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003a94:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003a96:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a98:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003a9a:	e65e      	b.n	800375a <HAL_DMA_Start_IT+0xd6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	f023 031e 	bic.w	r3, r3, #30
 8003aa2:	f043 0316 	orr.w	r3, r3, #22
 8003aa6:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003aa8:	b11a      	cbz	r2, 8003ab2 <HAL_DMA_Start_IT+0x42e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	f043 0308 	orr.w	r3, r3, #8
 8003ab0:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ab2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	03d2      	lsls	r2, r2, #15
 8003ab8:	f57f aec2 	bpl.w	8003840 <HAL_DMA_Start_IT+0x1bc>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e6bc      	b.n	8003840 <HAL_DMA_Start_IT+0x1bc>
  __HAL_LOCK(hdma);
 8003ac6:	2002      	movs	r0, #2
}
 8003ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8003acc:	2001      	movs	r0, #1
}
 8003ace:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003ad0:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003ad2:	60e1      	str	r1, [r4, #12]
 8003ad4:	e63d      	b.n	8003752 <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 8003ad6:	f8df e1f0 	ldr.w	lr, [pc, #496]	@ 8003cc8 <HAL_DMA_Start_IT+0x644>
 8003ada:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 8003ade:	f02c 0c01 	bic.w	ip, ip, #1
 8003ae2:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 8003ae6:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aea:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8003aee:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003af0:	f1bc 0f00 	cmp.w	ip, #0
 8003af4:	f43f ae19 	beq.w	800372a <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003af8:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8003afc:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003afe:	e614      	b.n	800372a <HAL_DMA_Start_IT+0xa6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b00:	4971      	ldr	r1, [pc, #452]	@ (8003cc8 <HAL_DMA_Start_IT+0x644>)
 8003b02:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8003b04:	f023 031e 	bic.w	r3, r3, #30
 8003b08:	f043 0316 	orr.w	r3, r3, #22
 8003b0c:	670b      	str	r3, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8003b0e:	2a00      	cmp	r2, #0
 8003b10:	f43f ae8f 	beq.w	8003832 <HAL_DMA_Start_IT+0x1ae>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	f043 0308 	orr.w	r3, r3, #8
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	e689      	b.n	8003832 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b1e:	496a      	ldr	r1, [pc, #424]	@ (8003cc8 <HAL_DMA_Start_IT+0x644>)
 8003b20:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b22:	f023 031e 	bic.w	r3, r3, #30
 8003b26:	f043 0316 	orr.w	r3, r3, #22
 8003b2a:	640b      	str	r3, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8003b2c:	2a00      	cmp	r2, #0
 8003b2e:	d1f1      	bne.n	8003b14 <HAL_DMA_Start_IT+0x490>
 8003b30:	e67f      	b.n	8003832 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8003b32:	f8df e194 	ldr.w	lr, [pc, #404]	@ 8003cc8 <HAL_DMA_Start_IT+0x644>
 8003b36:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 8003b3a:	f02c 0c01 	bic.w	ip, ip, #1
 8003b3e:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b42:	e5e2      	b.n	800370a <HAL_DMA_Start_IT+0x86>
    __HAL_DMA_DISABLE(hdma);
 8003b44:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8003cc8 <HAL_DMA_Start_IT+0x644>
 8003b48:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 8003b4c:	f02c 0c01 	bic.w	ip, ip, #1
 8003b50:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b54:	e7c7      	b.n	8003ae6 <HAL_DMA_Start_IT+0x462>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b56:	495c      	ldr	r1, [pc, #368]	@ (8003cc8 <HAL_DMA_Start_IT+0x644>)
 8003b58:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 8003b5a:	f023 031e 	bic.w	r3, r3, #30
 8003b5e:	f043 0316 	orr.w	r3, r3, #22
 8003b62:	658b      	str	r3, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 8003b64:	2a00      	cmp	r2, #0
 8003b66:	d1d5      	bne.n	8003b14 <HAL_DMA_Start_IT+0x490>
 8003b68:	e663      	b.n	8003832 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8003b6a:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 8003cc8 <HAL_DMA_Start_IT+0x644>
 8003b6e:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8003b72:	f02c 0c01 	bic.w	ip, ip, #1
 8003b76:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b7a:	e6fb      	b.n	8003974 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b7c:	4952      	ldr	r1, [pc, #328]	@ (8003cc8 <HAL_DMA_Start_IT+0x644>)
 8003b7e:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003b82:	f023 031e 	bic.w	r3, r3, #30
 8003b86:	f043 0316 	orr.w	r3, r3, #22
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8003b8e:	2a00      	cmp	r2, #0
 8003b90:	d1c0      	bne.n	8003b14 <HAL_DMA_Start_IT+0x490>
 8003b92:	e64e      	b.n	8003832 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b94:	494c      	ldr	r1, [pc, #304]	@ (8003cc8 <HAL_DMA_Start_IT+0x644>)
 8003b96:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
 8003b9a:	f023 031e 	bic.w	r3, r3, #30
 8003b9e:	f043 0316 	orr.w	r3, r3, #22
 8003ba2:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8003ba6:	2a00      	cmp	r2, #0
 8003ba8:	d1b4      	bne.n	8003b14 <HAL_DMA_Start_IT+0x490>
 8003baa:	e642      	b.n	8003832 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8003bac:	f8df e118 	ldr.w	lr, [pc, #280]	@ 8003cc8 <HAL_DMA_Start_IT+0x644>
 8003bb0:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 8003bb4:	f02c 0c01 	bic.w	ip, ip, #1
 8003bb8:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bbc:	e6da      	b.n	8003974 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8003bbe:	f8df e108 	ldr.w	lr, [pc, #264]	@ 8003cc8 <HAL_DMA_Start_IT+0x644>
 8003bc2:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 8003bc6:	f02c 0c01 	bic.w	ip, ip, #1
 8003bca:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bce:	e6d1      	b.n	8003974 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003bd0:	493d      	ldr	r1, [pc, #244]	@ (8003cc8 <HAL_DMA_Start_IT+0x644>)
 8003bd2:	f8d1 30b8 	ldr.w	r3, [r1, #184]	@ 0xb8
 8003bd6:	f023 031e 	bic.w	r3, r3, #30
 8003bda:	f043 0316 	orr.w	r3, r3, #22
 8003bde:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8003be2:	2a00      	cmp	r2, #0
 8003be4:	d196      	bne.n	8003b14 <HAL_DMA_Start_IT+0x490>
 8003be6:	e624      	b.n	8003832 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8003be8:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 8003ccc <HAL_DMA_Start_IT+0x648>
 8003bec:	f8de c010 	ldr.w	ip, [lr, #16]
 8003bf0:	f02c 0c01 	bic.w	ip, ip, #1
 8003bf4:	f8ce c010 	str.w	ip, [lr, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bf8:	e6bc      	b.n	8003974 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003bfa:	4934      	ldr	r1, [pc, #208]	@ (8003ccc <HAL_DMA_Start_IT+0x648>)
 8003bfc:	690b      	ldr	r3, [r1, #16]
 8003bfe:	f023 031e 	bic.w	r3, r3, #30
 8003c02:	f043 0316 	orr.w	r3, r3, #22
 8003c06:	610b      	str	r3, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 8003c08:	2a00      	cmp	r2, #0
 8003c0a:	d183      	bne.n	8003b14 <HAL_DMA_Start_IT+0x490>
 8003c0c:	e611      	b.n	8003832 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8003c0e:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 8003ccc <HAL_DMA_Start_IT+0x648>
 8003c12:	f8de c028 	ldr.w	ip, [lr, #40]	@ 0x28
 8003c16:	f02c 0c01 	bic.w	ip, ip, #1
 8003c1a:	f8ce c028 	str.w	ip, [lr, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c1e:	e6a9      	b.n	8003974 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c20:	492a      	ldr	r1, [pc, #168]	@ (8003ccc <HAL_DMA_Start_IT+0x648>)
 8003c22:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8003c24:	f023 031e 	bic.w	r3, r3, #30
 8003c28:	f043 0316 	orr.w	r3, r3, #22
 8003c2c:	628b      	str	r3, [r1, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	f47f af70 	bne.w	8003b14 <HAL_DMA_Start_IT+0x490>
 8003c34:	e5fd      	b.n	8003832 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c36:	4925      	ldr	r1, [pc, #148]	@ (8003ccc <HAL_DMA_Start_IT+0x648>)
 8003c38:	e772      	b.n	8003b20 <HAL_DMA_Start_IT+0x49c>
    __HAL_DMA_DISABLE(hdma);
 8003c3a:	f8df e090 	ldr.w	lr, [pc, #144]	@ 8003ccc <HAL_DMA_Start_IT+0x648>
 8003c3e:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 8003c42:	f02c 0c01 	bic.w	ip, ip, #1
 8003c46:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c4a:	e693      	b.n	8003974 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c4c:	491f      	ldr	r1, [pc, #124]	@ (8003ccc <HAL_DMA_Start_IT+0x648>)
 8003c4e:	e783      	b.n	8003b58 <HAL_DMA_Start_IT+0x4d4>
    __HAL_DMA_DISABLE(hdma);
 8003c50:	f8df e078 	ldr.w	lr, [pc, #120]	@ 8003ccc <HAL_DMA_Start_IT+0x648>
 8003c54:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 8003c58:	f02c 0c01 	bic.w	ip, ip, #1
 8003c5c:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c60:	e688      	b.n	8003974 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c62:	491a      	ldr	r1, [pc, #104]	@ (8003ccc <HAL_DMA_Start_IT+0x648>)
 8003c64:	e74d      	b.n	8003b02 <HAL_DMA_Start_IT+0x47e>
    __HAL_DMA_DISABLE(hdma);
 8003c66:	f8df e064 	ldr.w	lr, [pc, #100]	@ 8003ccc <HAL_DMA_Start_IT+0x648>
 8003c6a:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 8003c6e:	f02c 0c01 	bic.w	ip, ip, #1
 8003c72:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c76:	e67d      	b.n	8003974 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8003c78:	f8df e050 	ldr.w	lr, [pc, #80]	@ 8003ccc <HAL_DMA_Start_IT+0x648>
 8003c7c:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8003c80:	f02c 0c01 	bic.w	ip, ip, #1
 8003c84:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c88:	e674      	b.n	8003974 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c8a:	4910      	ldr	r1, [pc, #64]	@ (8003ccc <HAL_DMA_Start_IT+0x648>)
 8003c8c:	e777      	b.n	8003b7e <HAL_DMA_Start_IT+0x4fa>
 8003c8e:	490f      	ldr	r1, [pc, #60]	@ (8003ccc <HAL_DMA_Start_IT+0x648>)
 8003c90:	e781      	b.n	8003b96 <HAL_DMA_Start_IT+0x512>
    __HAL_DMA_DISABLE(hdma);
 8003c92:	f8df e038 	ldr.w	lr, [pc, #56]	@ 8003ccc <HAL_DMA_Start_IT+0x648>
 8003c96:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 8003c9a:	f02c 0c01 	bic.w	ip, ip, #1
 8003c9e:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ca2:	e667      	b.n	8003974 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8003ca4:	f8df e024 	ldr.w	lr, [pc, #36]	@ 8003ccc <HAL_DMA_Start_IT+0x648>
 8003ca8:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 8003cac:	f02c 0c01 	bic.w	ip, ip, #1
 8003cb0:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cb4:	e65e      	b.n	8003974 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003cb6:	4905      	ldr	r1, [pc, #20]	@ (8003ccc <HAL_DMA_Start_IT+0x648>)
 8003cb8:	e78b      	b.n	8003bd2 <HAL_DMA_Start_IT+0x54e>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003cba:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003cbc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003cbe:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cc0:	e54b      	b.n	800375a <HAL_DMA_Start_IT+0xd6>
 8003cc2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003cc4:	e555      	b.n	8003772 <HAL_DMA_Start_IT+0xee>
 8003cc6:	bf00      	nop
 8003cc8:	40020000 	.word	0x40020000
 8003ccc:	40020400 	.word	0x40020400
 8003cd0:	40020088 	.word	0x40020088
 8003cd4:	5802541c 	.word	0x5802541c
 8003cd8:	58025408 	.word	0x58025408
 8003cdc:	58025480 	.word	0x58025480
 8003ce0:	58025494 	.word	0x58025494
 8003ce4:	400200a0 	.word	0x400200a0
 8003ce8:	400204b8 	.word	0x400204b8

08003cec <HAL_DMA_IRQHandler>:
{
 8003cec:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003cee:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cf0:	4b94      	ldr	r3, [pc, #592]	@ (8003f44 <HAL_DMA_IRQHandler+0x258>)
{
 8003cf2:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
{
 8003cf6:	4607      	mov	r7, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cf8:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0U;
 8003cfa:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003cfc:	4b92      	ldr	r3, [pc, #584]	@ (8003f48 <HAL_DMA_IRQHandler+0x25c>)
 8003cfe:	6802      	ldr	r2, [r0, #0]
 8003d00:	4892      	ldr	r0, [pc, #584]	@ (8003f4c <HAL_DMA_IRQHandler+0x260>)
  tmpisr_dma  = regs_dma->ISR;
 8003d02:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d04:	4282      	cmp	r2, r0
 8003d06:	bf18      	it	ne
 8003d08:	429a      	cmpne	r2, r3
 8003d0a:	f100 0018 	add.w	r0, r0, #24
  tmpisr_bdma = regs_bdma->ISR;
 8003d0e:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d10:	bf0c      	ite	eq
 8003d12:	2301      	moveq	r3, #1
 8003d14:	2300      	movne	r3, #0
 8003d16:	4282      	cmp	r2, r0
 8003d18:	bf08      	it	eq
 8003d1a:	f043 0301 	orreq.w	r3, r3, #1
 8003d1e:	3018      	adds	r0, #24
 8003d20:	4282      	cmp	r2, r0
 8003d22:	bf08      	it	eq
 8003d24:	f043 0301 	orreq.w	r3, r3, #1
 8003d28:	3018      	adds	r0, #24
 8003d2a:	4282      	cmp	r2, r0
 8003d2c:	bf08      	it	eq
 8003d2e:	f043 0301 	orreq.w	r3, r3, #1
 8003d32:	3018      	adds	r0, #24
 8003d34:	4282      	cmp	r2, r0
 8003d36:	bf08      	it	eq
 8003d38:	f043 0301 	orreq.w	r3, r3, #1
 8003d3c:	3018      	adds	r0, #24
 8003d3e:	4282      	cmp	r2, r0
 8003d40:	bf08      	it	eq
 8003d42:	f043 0301 	orreq.w	r3, r3, #1
 8003d46:	3018      	adds	r0, #24
 8003d48:	4282      	cmp	r2, r0
 8003d4a:	bf08      	it	eq
 8003d4c:	f043 0301 	orreq.w	r3, r3, #1
 8003d50:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8003d54:	4282      	cmp	r2, r0
 8003d56:	bf08      	it	eq
 8003d58:	f043 0301 	orreq.w	r3, r3, #1
 8003d5c:	3018      	adds	r0, #24
 8003d5e:	4282      	cmp	r2, r0
 8003d60:	bf08      	it	eq
 8003d62:	f043 0301 	orreq.w	r3, r3, #1
 8003d66:	3018      	adds	r0, #24
 8003d68:	4282      	cmp	r2, r0
 8003d6a:	bf08      	it	eq
 8003d6c:	f043 0301 	orreq.w	r3, r3, #1
 8003d70:	3018      	adds	r0, #24
 8003d72:	4282      	cmp	r2, r0
 8003d74:	bf08      	it	eq
 8003d76:	f043 0301 	orreq.w	r3, r3, #1
 8003d7a:	3018      	adds	r0, #24
 8003d7c:	4282      	cmp	r2, r0
 8003d7e:	bf08      	it	eq
 8003d80:	f043 0301 	orreq.w	r3, r3, #1
 8003d84:	3018      	adds	r0, #24
 8003d86:	4282      	cmp	r2, r0
 8003d88:	bf08      	it	eq
 8003d8a:	f043 0301 	orreq.w	r3, r3, #1
 8003d8e:	3018      	adds	r0, #24
 8003d90:	4282      	cmp	r2, r0
 8003d92:	bf08      	it	eq
 8003d94:	f043 0301 	orreq.w	r3, r3, #1
 8003d98:	b91b      	cbnz	r3, 8003da2 <HAL_DMA_IRQHandler+0xb6>
 8003d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f50 <HAL_DMA_IRQHandler+0x264>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	f040 812f 	bne.w	8004000 <HAL_DMA_IRQHandler+0x314>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003da4:	2108      	movs	r1, #8
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	4099      	lsls	r1, r3
 8003dac:	4221      	tst	r1, r4
 8003dae:	d00b      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0xdc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003db0:	6810      	ldr	r0, [r2, #0]
 8003db2:	0740      	lsls	r0, r0, #29
 8003db4:	d508      	bpl.n	8003dc8 <HAL_DMA_IRQHandler+0xdc>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003db6:	6810      	ldr	r0, [r2, #0]
 8003db8:	f020 0004 	bic.w	r0, r0, #4
 8003dbc:	6010      	str	r0, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dbe:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dc2:	f041 0101 	orr.w	r1, r1, #1
 8003dc6:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dc8:	fa24 f103 	lsr.w	r1, r4, r3
 8003dcc:	07c8      	lsls	r0, r1, #31
 8003dce:	d509      	bpl.n	8003de4 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003dd0:	6951      	ldr	r1, [r2, #20]
 8003dd2:	0609      	lsls	r1, r1, #24
 8003dd4:	d506      	bpl.n	8003de4 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4099      	lsls	r1, r3
 8003dda:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ddc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dde:	f041 0102 	orr.w	r1, r1, #2
 8003de2:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003de4:	2104      	movs	r1, #4
 8003de6:	4099      	lsls	r1, r3
 8003de8:	4221      	tst	r1, r4
 8003dea:	d007      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x110>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003dec:	6810      	ldr	r0, [r2, #0]
 8003dee:	0780      	lsls	r0, r0, #30
 8003df0:	d504      	bpl.n	8003dfc <HAL_DMA_IRQHandler+0x110>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003df2:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003df4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003df6:	f041 0104 	orr.w	r1, r1, #4
 8003dfa:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dfc:	2110      	movs	r1, #16
 8003dfe:	4099      	lsls	r1, r3
 8003e00:	4221      	tst	r1, r4
 8003e02:	f000 80b0 	beq.w	8003f66 <HAL_DMA_IRQHandler+0x27a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e06:	6810      	ldr	r0, [r2, #0]
 8003e08:	0700      	lsls	r0, r0, #28
 8003e0a:	f140 80ac 	bpl.w	8003f66 <HAL_DMA_IRQHandler+0x27a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e0e:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e10:	6811      	ldr	r1, [r2, #0]
 8003e12:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e16:	6811      	ldr	r1, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e18:	f040 809e 	bne.w	8003f58 <HAL_DMA_IRQHandler+0x26c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e1c:	05c9      	lsls	r1, r1, #23
 8003e1e:	d403      	bmi.n	8003e28 <HAL_DMA_IRQHandler+0x13c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e20:	6811      	ldr	r1, [r2, #0]
 8003e22:	f021 0108 	bic.w	r1, r1, #8
 8003e26:	6011      	str	r1, [r2, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8003e28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e2a:	2900      	cmp	r1, #0
 8003e2c:	f000 809b 	beq.w	8003f66 <HAL_DMA_IRQHandler+0x27a>
            hdma->XferHalfCpltCallback(hdma);
 8003e30:	4638      	mov	r0, r7
 8003e32:	4788      	blx	r1
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e36:	2120      	movs	r1, #32
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	4099      	lsls	r1, r3
 8003e3e:	4221      	tst	r1, r4
 8003e40:	d053      	beq.n	8003eea <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	4840      	ldr	r0, [pc, #256]	@ (8003f48 <HAL_DMA_IRQHandler+0x25c>)
 8003e46:	4c41      	ldr	r4, [pc, #260]	@ (8003f4c <HAL_DMA_IRQHandler+0x260>)
 8003e48:	42a2      	cmp	r2, r4
 8003e4a:	bf18      	it	ne
 8003e4c:	4282      	cmpne	r2, r0
 8003e4e:	f104 0418 	add.w	r4, r4, #24
 8003e52:	bf0c      	ite	eq
 8003e54:	2001      	moveq	r0, #1
 8003e56:	2000      	movne	r0, #0
 8003e58:	42a2      	cmp	r2, r4
 8003e5a:	bf08      	it	eq
 8003e5c:	f040 0001 	orreq.w	r0, r0, #1
 8003e60:	3418      	adds	r4, #24
 8003e62:	42a2      	cmp	r2, r4
 8003e64:	bf08      	it	eq
 8003e66:	f040 0001 	orreq.w	r0, r0, #1
 8003e6a:	3418      	adds	r4, #24
 8003e6c:	42a2      	cmp	r2, r4
 8003e6e:	bf08      	it	eq
 8003e70:	f040 0001 	orreq.w	r0, r0, #1
 8003e74:	3418      	adds	r4, #24
 8003e76:	42a2      	cmp	r2, r4
 8003e78:	bf08      	it	eq
 8003e7a:	f040 0001 	orreq.w	r0, r0, #1
 8003e7e:	3418      	adds	r4, #24
 8003e80:	42a2      	cmp	r2, r4
 8003e82:	bf08      	it	eq
 8003e84:	f040 0001 	orreq.w	r0, r0, #1
 8003e88:	3418      	adds	r4, #24
 8003e8a:	42a2      	cmp	r2, r4
 8003e8c:	bf08      	it	eq
 8003e8e:	f040 0001 	orreq.w	r0, r0, #1
 8003e92:	f504 7456 	add.w	r4, r4, #856	@ 0x358
 8003e96:	42a2      	cmp	r2, r4
 8003e98:	bf08      	it	eq
 8003e9a:	f040 0001 	orreq.w	r0, r0, #1
 8003e9e:	3418      	adds	r4, #24
 8003ea0:	42a2      	cmp	r2, r4
 8003ea2:	bf08      	it	eq
 8003ea4:	f040 0001 	orreq.w	r0, r0, #1
 8003ea8:	3418      	adds	r4, #24
 8003eaa:	42a2      	cmp	r2, r4
 8003eac:	bf08      	it	eq
 8003eae:	f040 0001 	orreq.w	r0, r0, #1
 8003eb2:	3418      	adds	r4, #24
 8003eb4:	42a2      	cmp	r2, r4
 8003eb6:	bf08      	it	eq
 8003eb8:	f040 0001 	orreq.w	r0, r0, #1
 8003ebc:	3418      	adds	r4, #24
 8003ebe:	42a2      	cmp	r2, r4
 8003ec0:	bf08      	it	eq
 8003ec2:	f040 0001 	orreq.w	r0, r0, #1
 8003ec6:	3418      	adds	r4, #24
 8003ec8:	42a2      	cmp	r2, r4
 8003eca:	bf08      	it	eq
 8003ecc:	f040 0001 	orreq.w	r0, r0, #1
 8003ed0:	3418      	adds	r4, #24
 8003ed2:	42a2      	cmp	r2, r4
 8003ed4:	bf08      	it	eq
 8003ed6:	f040 0001 	orreq.w	r0, r0, #1
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d147      	bne.n	8003f6e <HAL_DMA_IRQHandler+0x282>
 8003ede:	481c      	ldr	r0, [pc, #112]	@ (8003f50 <HAL_DMA_IRQHandler+0x264>)
 8003ee0:	4282      	cmp	r2, r0
 8003ee2:	d044      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x282>
 8003ee4:	6810      	ldr	r0, [r2, #0]
 8003ee6:	0780      	lsls	r0, r0, #30
 8003ee8:	d444      	bmi.n	8003f74 <HAL_DMA_IRQHandler+0x288>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d070      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2e6>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef2:	07dc      	lsls	r4, r3, #31
 8003ef4:	d51e      	bpl.n	8003f34 <HAL_DMA_IRQHandler+0x248>
        __HAL_DMA_DISABLE(hdma);
 8003ef6:	683a      	ldr	r2, [r7, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ef8:	2104      	movs	r1, #4
 8003efa:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8003efe:	4915      	ldr	r1, [pc, #84]	@ (8003f54 <HAL_DMA_IRQHandler+0x268>)
        __HAL_DMA_DISABLE(hdma);
 8003f00:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f02:	fba1 6106 	umull	r6, r1, r1, r6
        __HAL_DMA_DISABLE(hdma);
 8003f06:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f0a:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e002      	b.n	8003f16 <HAL_DMA_IRQHandler+0x22a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f10:	6813      	ldr	r3, [r2, #0]
 8003f12:	07d8      	lsls	r0, r3, #31
 8003f14:	d504      	bpl.n	8003f20 <HAL_DMA_IRQHandler+0x234>
          if (++count > timeout)
 8003f16:	9b01      	ldr	r3, [sp, #4]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	428b      	cmp	r3, r1
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	d9f7      	bls.n	8003f10 <HAL_DMA_IRQHandler+0x224>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f20:	6813      	ldr	r3, [r2, #0]
 8003f22:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f24:	bf4c      	ite	mi
 8003f26:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003f28:	2301      	movpl	r3, #1
 8003f2a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8003f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d04b      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2e6>
          hdma->XferCpltCallback(hdma);
 8003f3a:	4638      	mov	r0, r7
}
 8003f3c:	b003      	add	sp, #12
 8003f3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 8003f42:	4718      	bx	r3
 8003f44:	24000018 	.word	0x24000018
 8003f48:	40020010 	.word	0x40020010
 8003f4c:	40020028 	.word	0x40020028
 8003f50:	400204b8 	.word	0x400204b8
 8003f54:	1b4e81b5 	.word	0x1b4e81b5
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f58:	0308      	lsls	r0, r1, #12
 8003f5a:	f57f af65 	bpl.w	8003e28 <HAL_DMA_IRQHandler+0x13c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003f5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003f60:	2900      	cmp	r1, #0
 8003f62:	f47f af65 	bne.w	8003e30 <HAL_DMA_IRQHandler+0x144>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f66:	2120      	movs	r1, #32
 8003f68:	4099      	lsls	r1, r3
 8003f6a:	420c      	tst	r4, r1
 8003f6c:	d0bd      	beq.n	8003eea <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f6e:	6810      	ldr	r0, [r2, #0]
 8003f70:	06c4      	lsls	r4, r0, #27
 8003f72:	d5ba      	bpl.n	8003eea <HAL_DMA_IRQHandler+0x1fe>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f74:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f76:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8003f7a:	2904      	cmp	r1, #4
 8003f7c:	d00e      	beq.n	8003f9c <HAL_DMA_IRQHandler+0x2b0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f7e:	6813      	ldr	r3, [r2, #0]
 8003f80:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f84:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f86:	d026      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x2ea>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f88:	031d      	lsls	r5, r3, #12
 8003f8a:	d531      	bpl.n	8003ff0 <HAL_DMA_IRQHandler+0x304>
          if(hdma->XferCpltCallback != NULL)
 8003f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0ab      	beq.n	8003eea <HAL_DMA_IRQHandler+0x1fe>
            hdma->XferCpltCallback(hdma);
 8003f92:	4638      	mov	r0, r7
 8003f94:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f98:	b1db      	cbz	r3, 8003fd2 <HAL_DMA_IRQHandler+0x2e6>
 8003f9a:	e7a9      	b.n	8003ef0 <HAL_DMA_IRQHandler+0x204>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f9c:	6811      	ldr	r1, [r2, #0]
 8003f9e:	f021 0116 	bic.w	r1, r1, #22
 8003fa2:	6011      	str	r1, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003fa4:	6951      	ldr	r1, [r2, #20]
 8003fa6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003faa:	6151      	str	r1, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fae:	b319      	cbz	r1, 8003ff8 <HAL_DMA_IRQHandler+0x30c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fb0:	6811      	ldr	r1, [r2, #0]
 8003fb2:	f021 0108 	bic.w	r1, r1, #8
 8003fb6:	6011      	str	r1, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fb8:	223f      	movs	r2, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8003fba:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
          __HAL_UNLOCK(hdma);
 8003fc0:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fc2:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8003fc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003fca:	f887 2034 	strb.w	r2, [r7, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1b3      	bne.n	8003f3a <HAL_DMA_IRQHandler+0x24e>
}
 8003fd2:	b003      	add	sp, #12
 8003fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fd6:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8003fda:	d1d7      	bne.n	8003f8c <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fdc:	6811      	ldr	r1, [r2, #0]
 8003fde:	f021 0110 	bic.w	r1, r1, #16
 8003fe2:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003fe4:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8003fe6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003fea:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8003fee:	e7cd      	b.n	8003f8c <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1CpltCallback != NULL)
 8003ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1cd      	bne.n	8003f92 <HAL_DMA_IRQHandler+0x2a6>
 8003ff6:	e778      	b.n	8003eea <HAL_DMA_IRQHandler+0x1fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ff8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003ffa:	2900      	cmp	r1, #0
 8003ffc:	d1d8      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0x2c4>
 8003ffe:	e7db      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x2cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004000:	4b40      	ldr	r3, [pc, #256]	@ (8004104 <HAL_DMA_IRQHandler+0x418>)
 8004002:	4841      	ldr	r0, [pc, #260]	@ (8004108 <HAL_DMA_IRQHandler+0x41c>)
 8004004:	4282      	cmp	r2, r0
 8004006:	bf18      	it	ne
 8004008:	429a      	cmpne	r2, r3
 800400a:	f100 0014 	add.w	r0, r0, #20
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	4282      	cmp	r2, r0
 8004016:	bf08      	it	eq
 8004018:	f043 0301 	orreq.w	r3, r3, #1
 800401c:	3014      	adds	r0, #20
 800401e:	4282      	cmp	r2, r0
 8004020:	bf08      	it	eq
 8004022:	f043 0301 	orreq.w	r3, r3, #1
 8004026:	3014      	adds	r0, #20
 8004028:	4282      	cmp	r2, r0
 800402a:	bf08      	it	eq
 800402c:	f043 0301 	orreq.w	r3, r3, #1
 8004030:	3014      	adds	r0, #20
 8004032:	4282      	cmp	r2, r0
 8004034:	bf08      	it	eq
 8004036:	f043 0301 	orreq.w	r3, r3, #1
 800403a:	3014      	adds	r0, #20
 800403c:	4282      	cmp	r2, r0
 800403e:	bf08      	it	eq
 8004040:	f043 0301 	orreq.w	r3, r3, #1
 8004044:	b913      	cbnz	r3, 800404c <HAL_DMA_IRQHandler+0x360>
 8004046:	4b31      	ldr	r3, [pc, #196]	@ (800410c <HAL_DMA_IRQHandler+0x420>)
 8004048:	429a      	cmp	r2, r3
 800404a:	d1c2      	bne.n	8003fd2 <HAL_DMA_IRQHandler+0x2e6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800404c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800404e:	2404      	movs	r4, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004050:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004052:	f000 001f 	and.w	r0, r0, #31
 8004056:	4084      	lsls	r4, r0
 8004058:	420c      	tst	r4, r1
 800405a:	d00b      	beq.n	8004074 <HAL_DMA_IRQHandler+0x388>
 800405c:	075e      	lsls	r6, r3, #29
 800405e:	d509      	bpl.n	8004074 <HAL_DMA_IRQHandler+0x388>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004060:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004062:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004064:	d532      	bpl.n	80040cc <HAL_DMA_IRQHandler+0x3e0>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004066:	03da      	lsls	r2, r3, #15
 8004068:	d436      	bmi.n	80040d8 <HAL_DMA_IRQHandler+0x3ec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800406a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800406c:	2b00      	cmp	r3, #0
 800406e:	f47f af64 	bne.w	8003f3a <HAL_DMA_IRQHandler+0x24e>
 8004072:	e7ae      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004074:	2402      	movs	r4, #2
 8004076:	4084      	lsls	r4, r0
 8004078:	420c      	tst	r4, r1
 800407a:	d00b      	beq.n	8004094 <HAL_DMA_IRQHandler+0x3a8>
 800407c:	079e      	lsls	r6, r3, #30
 800407e:	d509      	bpl.n	8004094 <HAL_DMA_IRQHandler+0x3a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004080:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004082:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004084:	d52d      	bpl.n	80040e2 <HAL_DMA_IRQHandler+0x3f6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004086:	03da      	lsls	r2, r3, #15
 8004088:	d437      	bmi.n	80040fa <HAL_DMA_IRQHandler+0x40e>
          if(hdma->XferM1CpltCallback != NULL)
 800408a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408c:	2b00      	cmp	r3, #0
 800408e:	f47f af54 	bne.w	8003f3a <HAL_DMA_IRQHandler+0x24e>
 8004092:	e79e      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004094:	2408      	movs	r4, #8
 8004096:	4084      	lsls	r4, r0
 8004098:	420c      	tst	r4, r1
 800409a:	d09a      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2e6>
 800409c:	071b      	lsls	r3, r3, #28
 800409e:	d598      	bpl.n	8003fd2 <HAL_DMA_IRQHandler+0x2e6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040a0:	6813      	ldr	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 80040a2:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040a4:	f023 030e 	bic.w	r3, r3, #14
 80040a8:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040aa:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 80040ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040ae:	fa03 f000 	lsl.w	r0, r3, r0
 80040b2:	6068      	str	r0, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040b4:	657b      	str	r3, [r7, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 80040b6:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80040ba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 80040be:	2a00      	cmp	r2, #0
 80040c0:	d087      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x2e6>
        hdma->XferErrorCallback(hdma);
 80040c2:	4638      	mov	r0, r7
}
 80040c4:	b003      	add	sp, #12
 80040c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 80040ca:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040cc:	069b      	lsls	r3, r3, #26
 80040ce:	d403      	bmi.n	80040d8 <HAL_DMA_IRQHandler+0x3ec>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040d0:	6813      	ldr	r3, [r2, #0]
 80040d2:	f023 0304 	bic.w	r3, r3, #4
 80040d6:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80040d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f47f af2d 	bne.w	8003f3a <HAL_DMA_IRQHandler+0x24e>
 80040e0:	e777      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x2e6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040e2:	f013 0320 	ands.w	r3, r3, #32
 80040e6:	d108      	bne.n	80040fa <HAL_DMA_IRQHandler+0x40e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040e8:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80040ea:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040ec:	f021 010a 	bic.w	r1, r1, #10
 80040f0:	6011      	str	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80040f2:	f887 0035 	strb.w	r0, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80040f6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80040fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f af1c 	bne.w	8003f3a <HAL_DMA_IRQHandler+0x24e>
 8004102:	e766      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x2e6>
 8004104:	58025408 	.word	0x58025408
 8004108:	5802541c 	.word	0x5802541c
 800410c:	58025494 	.word	0x58025494

08004110 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004110:	680b      	ldr	r3, [r1, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 81dc 	beq.w	80044d0 <HAL_GPIO_Init+0x3c0>
 8004118:	4ab4      	ldr	r2, [pc, #720]	@ (80043ec <HAL_GPIO_Init+0x2dc>)
 800411a:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 800411c:	f04f 0200 	mov.w	r2, #0
{
 8004120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004124:	f04f 0b01 	mov.w	fp, #1
{
 8004128:	b085      	sub	sp, #20
 800412a:	f000 8105 	beq.w	8004338 <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800412e:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004132:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004134:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 8004138:	9b00      	ldr	r3, [sp, #0]
 800413a:	ea1c 0a03 	ands.w	sl, ip, r3
 800413e:	f000 814b 	beq.w	80043d8 <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004142:	684d      	ldr	r5, [r1, #4]
 8004144:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004146:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004148:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800414c:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004150:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004154:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004156:	f1b8 0f01 	cmp.w	r8, #1
 800415a:	f240 815d 	bls.w	8004418 <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800415e:	2f03      	cmp	r7, #3
 8004160:	f040 81cf 	bne.w	8004502 <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004164:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8004168:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800416a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800416e:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004172:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 8004176:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004178:	f000 812e 	beq.w	80043d8 <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417c:	4e9c      	ldr	r6, [pc, #624]	@ (80043f0 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800417e:	f002 0703 	and.w	r7, r2, #3
 8004182:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004184:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004188:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800418a:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800418e:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004192:	4b98      	ldr	r3, [pc, #608]	@ (80043f4 <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004194:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8004198:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 800419c:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041a0:	4298      	cmp	r0, r3
 80041a2:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a6:	f004 0402 	and.w	r4, r4, #2
 80041aa:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80041ae:	9403      	str	r4, [sp, #12]
 80041b0:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80041b2:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041b4:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041b8:	f000 8178 	beq.w	80044ac <HAL_GPIO_Init+0x39c>
 80041bc:	4b8e      	ldr	r3, [pc, #568]	@ (80043f8 <HAL_GPIO_Init+0x2e8>)
 80041be:	4298      	cmp	r0, r3
 80041c0:	f000 80de 	beq.w	8004380 <HAL_GPIO_Init+0x270>
 80041c4:	f8df c234 	ldr.w	ip, [pc, #564]	@ 80043fc <HAL_GPIO_Init+0x2ec>
 80041c8:	4560      	cmp	r0, ip
 80041ca:	f000 817b 	beq.w	80044c4 <HAL_GPIO_Init+0x3b4>
 80041ce:	f8df c230 	ldr.w	ip, [pc, #560]	@ 8004400 <HAL_GPIO_Init+0x2f0>
 80041d2:	4560      	cmp	r0, ip
 80041d4:	f000 817d 	beq.w	80044d2 <HAL_GPIO_Init+0x3c2>
 80041d8:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8004404 <HAL_GPIO_Init+0x2f4>
 80041dc:	4560      	cmp	r0, ip
 80041de:	f000 816b 	beq.w	80044b8 <HAL_GPIO_Init+0x3a8>
 80041e2:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8004408 <HAL_GPIO_Init+0x2f8>
 80041e6:	4560      	cmp	r0, ip
 80041e8:	f000 8179 	beq.w	80044de <HAL_GPIO_Init+0x3ce>
 80041ec:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 800440c <HAL_GPIO_Init+0x2fc>
 80041f0:	4560      	cmp	r0, ip
 80041f2:	f000 817a 	beq.w	80044ea <HAL_GPIO_Init+0x3da>
 80041f6:	f8df c218 	ldr.w	ip, [pc, #536]	@ 8004410 <HAL_GPIO_Init+0x300>
 80041fa:	4560      	cmp	r0, ip
 80041fc:	f000 817b 	beq.w	80044f6 <HAL_GPIO_Init+0x3e6>
 8004200:	f8df c210 	ldr.w	ip, [pc, #528]	@ 8004414 <HAL_GPIO_Init+0x304>
 8004204:	4560      	cmp	r0, ip
 8004206:	bf0c      	ite	eq
 8004208:	f04f 0c09 	moveq.w	ip, #9
 800420c:	f04f 0c0a 	movne.w	ip, #10
 8004210:	fa0c f707 	lsl.w	r7, ip, r7
 8004214:	433c      	orrs	r4, r7
 8004216:	e0b8      	b.n	800438a <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 8004218:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800421c:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800421e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004220:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004224:	fa06 f807 	lsl.w	r8, r6, r7
 8004228:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800422c:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004230:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8004234:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004238:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800423c:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004240:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 8004244:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 8004248:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800424c:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800424e:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004252:	fa06 fe07 	lsl.w	lr, r6, r7
 8004256:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 800425a:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425e:	d117      	bne.n	8004290 <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004260:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004264:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8004266:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800426a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800426e:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004272:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8004276:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800427a:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800427c:	260f      	movs	r6, #15
 800427e:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004282:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004284:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004288:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 800428c:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004290:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8004292:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004294:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004298:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800429c:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 80042a0:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042a2:	d045      	beq.n	8004330 <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a4:	4f52      	ldr	r7, [pc, #328]	@ (80043f0 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042a6:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a8:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 80042ac:	f044 0402 	orr.w	r4, r4, #2
 80042b0:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 80042b4:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 80042b8:	f022 0703 	bic.w	r7, r2, #3
 80042bc:	f004 0402 	and.w	r4, r4, #2
 80042c0:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 80042c4:	9403      	str	r4, [sp, #12]
 80042c6:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80042ca:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042cc:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80042d0:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042d4:	00a4      	lsls	r4, r4, #2
 80042d6:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042da:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042dc:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042e0:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 80042e2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 80042e6:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 80042ea:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ec:	f100 80d2 	bmi.w	8004494 <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 80042f0:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80042f2:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 80042f6:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 80042f8:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042fa:	02ae      	lsls	r6, r5, #10
 80042fc:	f100 80d3 	bmi.w	80044a6 <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 8004300:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004302:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8004306:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004308:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800430c:	03ae      	lsls	r6, r5, #14
 800430e:	f100 80c7 	bmi.w	80044a0 <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 8004312:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004314:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004318:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800431a:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800431e:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004322:	f100 80ba 	bmi.w	800449a <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 8004326:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004328:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800432c:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 8004330:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004332:	fa33 f402 	lsrs.w	r4, r3, r2
 8004336:	d055      	beq.n	80043e4 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004338:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 800433c:	ea13 0c0e 	ands.w	ip, r3, lr
 8004340:	d0f6      	beq.n	8004330 <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004342:	684d      	ldr	r5, [r1, #4]
 8004344:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004346:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004348:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800434c:	fa06 f807 	lsl.w	r8, r6, r7
 8004350:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004354:	f104 38ff 	add.w	r8, r4, #4294967295
 8004358:	f1b8 0f01 	cmp.w	r8, #1
 800435c:	f67f af5c 	bls.w	8004218 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004360:	2c03      	cmp	r4, #3
 8004362:	d095      	beq.n	8004290 <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 8004364:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 80043ec <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004368:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 800436a:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800436e:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004372:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004376:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 800437a:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800437e:	e787      	b.n	8004290 <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004380:	f04f 0c02 	mov.w	ip, #2
 8004384:	fa0c f707 	lsl.w	r7, ip, r7
 8004388:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800438a:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800438c:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 800438e:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8004392:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 8004396:	bf4c      	ite	mi
 8004398:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 800439c:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800439e:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 80043a0:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 80043a4:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 80043a8:	bf54      	ite	pl
 80043aa:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80043ac:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043b0:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 80043b2:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80043b6:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 80043ba:	bf54      	ite	pl
 80043bc:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80043be:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043c2:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80043c4:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80043c8:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 80043cc:	bf54      	ite	pl
 80043ce:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80043d0:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 80043d4:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 80043d8:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043da:	9b00      	ldr	r3, [sp, #0]
 80043dc:	fa33 f402 	lsrs.w	r4, r3, r2
 80043e0:	f47f aea8 	bne.w	8004134 <HAL_GPIO_Init+0x24>
  }
}
 80043e4:	b005      	add	sp, #20
 80043e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ea:	bf00      	nop
 80043ec:	58020000 	.word	0x58020000
 80043f0:	58024400 	.word	0x58024400
 80043f4:	58020400 	.word	0x58020400
 80043f8:	58020800 	.word	0x58020800
 80043fc:	58020c00 	.word	0x58020c00
 8004400:	58021000 	.word	0x58021000
 8004404:	58021400 	.word	0x58021400
 8004408:	58021800 	.word	0x58021800
 800440c:	58021c00 	.word	0x58021c00
 8004410:	58022000 	.word	0x58022000
 8004414:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 8004418:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800441c:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800441e:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004420:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004424:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004428:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800442a:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800442e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004432:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8004436:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800443a:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800443e:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004442:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8004446:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800444a:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 800444e:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004452:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004456:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800445a:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800445e:	f47f ae81 	bne.w	8004164 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004462:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004466:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8004468:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800446c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004470:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004474:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8004478:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800447c:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800447e:	230f      	movs	r3, #15
 8004480:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004484:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004486:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800448a:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 800448e:	f8c8 c020 	str.w	ip, [r8, #32]
 8004492:	e667      	b.n	8004164 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8004494:	ea44 040c 	orr.w	r4, r4, ip
 8004498:	e72b      	b.n	80042f2 <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 800449a:	ea44 040c 	orr.w	r4, r4, ip
 800449e:	e743      	b.n	8004328 <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 80044a0:	ea4c 0404 	orr.w	r4, ip, r4
 80044a4:	e736      	b.n	8004314 <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 80044a6:	ea44 040c 	orr.w	r4, r4, ip
 80044aa:	e72a      	b.n	8004302 <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044ac:	f04f 0c01 	mov.w	ip, #1
 80044b0:	fa0c f707 	lsl.w	r7, ip, r7
 80044b4:	433c      	orrs	r4, r7
 80044b6:	e768      	b.n	800438a <HAL_GPIO_Init+0x27a>
 80044b8:	f04f 0c05 	mov.w	ip, #5
 80044bc:	fa0c f707 	lsl.w	r7, ip, r7
 80044c0:	433c      	orrs	r4, r7
 80044c2:	e762      	b.n	800438a <HAL_GPIO_Init+0x27a>
 80044c4:	f04f 0c03 	mov.w	ip, #3
 80044c8:	fa0c f707 	lsl.w	r7, ip, r7
 80044cc:	433c      	orrs	r4, r7
 80044ce:	e75c      	b.n	800438a <HAL_GPIO_Init+0x27a>
 80044d0:	4770      	bx	lr
 80044d2:	f04f 0c04 	mov.w	ip, #4
 80044d6:	fa0c f707 	lsl.w	r7, ip, r7
 80044da:	433c      	orrs	r4, r7
 80044dc:	e755      	b.n	800438a <HAL_GPIO_Init+0x27a>
 80044de:	f04f 0c06 	mov.w	ip, #6
 80044e2:	fa0c f707 	lsl.w	r7, ip, r7
 80044e6:	433c      	orrs	r4, r7
 80044e8:	e74f      	b.n	800438a <HAL_GPIO_Init+0x27a>
 80044ea:	f04f 0c07 	mov.w	ip, #7
 80044ee:	fa0c f707 	lsl.w	r7, ip, r7
 80044f2:	433c      	orrs	r4, r7
 80044f4:	e749      	b.n	800438a <HAL_GPIO_Init+0x27a>
 80044f6:	f04f 0c08 	mov.w	ip, #8
 80044fa:	fa0c f707 	lsl.w	r7, ip, r7
 80044fe:	433c      	orrs	r4, r7
 8004500:	e743      	b.n	800438a <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 8004502:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004506:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004508:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800450c:	fa03 fc04 	lsl.w	ip, r3, r4
 8004510:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8004514:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004518:	e624      	b.n	8004164 <HAL_GPIO_Init+0x54>
 800451a:	bf00      	nop

0800451c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800451c:	6903      	ldr	r3, [r0, #16]
 800451e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004520:	bf14      	ite	ne
 8004522:	2001      	movne	r0, #1
 8004524:	2000      	moveq	r0, #0
 8004526:	4770      	bx	lr

08004528 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004528:	b902      	cbnz	r2, 800452c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800452a:	0409      	lsls	r1, r1, #16
 800452c:	6181      	str	r1, [r0, #24]
  }
}
 800452e:	4770      	bx	lr

08004530 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004530:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004532:	4c10      	ldr	r4, [pc, #64]	@ (8004574 <HAL_PWREx_ConfigSupply+0x44>)
 8004534:	68e3      	ldr	r3, [r4, #12]
 8004536:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800453a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800453c:	d105      	bne.n	800454a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	1a18      	subs	r0, r3, r0
 8004544:	bf18      	it	ne
 8004546:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8004548:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800454a:	f023 0307 	bic.w	r3, r3, #7
 800454e:	4303      	orrs	r3, r0
 8004550:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8004552:	f7fd fb71 	bl	8001c38 <HAL_GetTick>
 8004556:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004558:	e005      	b.n	8004566 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800455a:	f7fd fb6d 	bl	8001c38 <HAL_GetTick>
 800455e:	1b40      	subs	r0, r0, r5
 8004560:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004564:	d804      	bhi.n	8004570 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004566:	6863      	ldr	r3, [r4, #4]
 8004568:	049b      	lsls	r3, r3, #18
 800456a:	d5f6      	bpl.n	800455a <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 800456c:	2000      	movs	r0, #0
}
 800456e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004570:	2001      	movs	r0, #1
}
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	58024800 	.word	0x58024800

08004578 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004578:	4b33      	ldr	r3, [pc, #204]	@ (8004648 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800457a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800457c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800457e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004580:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8004582:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004588:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800458c:	d036      	beq.n	80045fc <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800458e:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004592:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004596:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800459a:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800459e:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 80045a2:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045a8:	ee06 2a90 	vmov	s13, r2
 80045ac:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 80045b0:	d002      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 80045b2:	2902      	cmp	r1, #2
 80045b4:	d042      	beq.n	800463c <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 80045b6:	b319      	cbz	r1, 8004600 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045b8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800464c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80045bc:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80045ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045d2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80045d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045da:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80045de:	4b1a      	ldr	r3, [pc, #104]	@ (8004648 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80045e6:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80045e8:	ee07 3a10 	vmov	s14, r3
 80045ec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80045f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80045f4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80045f8:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80045fc:	bc30      	pop	{r4, r5}
 80045fe:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	0692      	lsls	r2, r2, #26
 8004604:	d51d      	bpl.n	8004642 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004606:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004608:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800460c:	4a10      	ldr	r2, [pc, #64]	@ (8004650 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800460e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004610:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004614:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004618:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800461a:	ee06 3a10 	vmov	s12, r3
 800461e:	ee05 2a90 	vmov	s11, r2
 8004622:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004626:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800462a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800462e:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8004632:	ee36 7a26 	vadd.f32	s14, s12, s13
 8004636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800463a:	e7d0      	b.n	80045de <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800463c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004654 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8004640:	e7bc      	b.n	80045bc <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004642:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004658 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8004646:	e7b9      	b.n	80045bc <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8004648:	58024400 	.word	0x58024400
 800464c:	4a742400 	.word	0x4a742400
 8004650:	03d09000 	.word	0x03d09000
 8004654:	4bbebc20 	.word	0x4bbebc20
 8004658:	4c742400 	.word	0x4c742400

0800465c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800465c:	2800      	cmp	r0, #0
 800465e:	f000 82e7 	beq.w	8004c30 <HAL_RCC_OscConfig+0x5d4>
{
 8004662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004664:	6803      	ldr	r3, [r0, #0]
 8004666:	4604      	mov	r4, r0
 8004668:	07d9      	lsls	r1, r3, #31
 800466a:	d52e      	bpl.n	80046ca <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800466c:	4997      	ldr	r1, [pc, #604]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
 800466e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004670:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004672:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004676:	2a10      	cmp	r2, #16
 8004678:	f000 80ee 	beq.w	8004858 <HAL_RCC_OscConfig+0x1fc>
 800467c:	2a18      	cmp	r2, #24
 800467e:	f000 80e6 	beq.w	800484e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004682:	6863      	ldr	r3, [r4, #4]
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004688:	f000 8111 	beq.w	80048ae <HAL_RCC_OscConfig+0x252>
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8167 	beq.w	8004960 <HAL_RCC_OscConfig+0x304>
 8004692:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004696:	4b8d      	ldr	r3, [pc, #564]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	f000 8288 	beq.w	8004bae <HAL_RCC_OscConfig+0x552>
 800469e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80046ac:	f7fd fac4 	bl	8001c38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046b0:	4e86      	ldr	r6, [pc, #536]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80046b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046b4:	e005      	b.n	80046c2 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b6:	f7fd fabf 	bl	8001c38 <HAL_GetTick>
 80046ba:	1b40      	subs	r0, r0, r5
 80046bc:	2864      	cmp	r0, #100	@ 0x64
 80046be:	f200 814d 	bhi.w	800495c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046c2:	6833      	ldr	r3, [r6, #0]
 80046c4:	039b      	lsls	r3, r3, #14
 80046c6:	d5f6      	bpl.n	80046b6 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	079d      	lsls	r5, r3, #30
 80046cc:	d470      	bmi.n	80047b0 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046ce:	06d9      	lsls	r1, r3, #27
 80046d0:	d533      	bpl.n	800473a <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046d2:	4a7e      	ldr	r2, [pc, #504]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
 80046d4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046d6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046dc:	2b08      	cmp	r3, #8
 80046de:	f000 80cb 	beq.w	8004878 <HAL_RCC_OscConfig+0x21c>
 80046e2:	2b18      	cmp	r3, #24
 80046e4:	f000 80c3 	beq.w	800486e <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80046e8:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80046ea:	4d78      	ldr	r5, [pc, #480]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 816f 	beq.w	80049d0 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 80046f2:	682b      	ldr	r3, [r5, #0]
 80046f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80046fa:	f7fd fa9d 	bl	8001c38 <HAL_GetTick>
 80046fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004700:	e005      	b.n	800470e <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004702:	f7fd fa99 	bl	8001c38 <HAL_GetTick>
 8004706:	1b80      	subs	r0, r0, r6
 8004708:	2802      	cmp	r0, #2
 800470a:	f200 8127 	bhi.w	800495c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800470e:	682b      	ldr	r3, [r5, #0]
 8004710:	05db      	lsls	r3, r3, #23
 8004712:	d5f6      	bpl.n	8004702 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004714:	f7fd fa96 	bl	8001c44 <HAL_GetREVID>
 8004718:	f241 0303 	movw	r3, #4099	@ 0x1003
 800471c:	4298      	cmp	r0, r3
 800471e:	f200 8267 	bhi.w	8004bf0 <HAL_RCC_OscConfig+0x594>
 8004722:	6a22      	ldr	r2, [r4, #32]
 8004724:	686b      	ldr	r3, [r5, #4]
 8004726:	2a20      	cmp	r2, #32
 8004728:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800472c:	bf0c      	ite	eq
 800472e:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8004732:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8004736:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	071d      	lsls	r5, r3, #28
 800473c:	d516      	bpl.n	800476c <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800473e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004740:	4d62      	ldr	r5, [pc, #392]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8122 	beq.w	800498c <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 8004748:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004750:	f7fd fa72 	bl	8001c38 <HAL_GetTick>
 8004754:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004756:	e005      	b.n	8004764 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004758:	f7fd fa6e 	bl	8001c38 <HAL_GetTick>
 800475c:	1b80      	subs	r0, r0, r6
 800475e:	2802      	cmp	r0, #2
 8004760:	f200 80fc 	bhi.w	800495c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004764:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004766:	0798      	lsls	r0, r3, #30
 8004768:	d5f6      	bpl.n	8004758 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	069a      	lsls	r2, r3, #26
 800476e:	d516      	bpl.n	800479e <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004770:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8004772:	4d56      	ldr	r5, [pc, #344]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 811a 	beq.w	80049ae <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 800477a:	682b      	ldr	r3, [r5, #0]
 800477c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004780:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004782:	f7fd fa59 	bl	8001c38 <HAL_GetTick>
 8004786:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004788:	e005      	b.n	8004796 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800478a:	f7fd fa55 	bl	8001c38 <HAL_GetTick>
 800478e:	1b80      	subs	r0, r0, r6
 8004790:	2802      	cmp	r0, #2
 8004792:	f200 80e3 	bhi.w	800495c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	049f      	lsls	r7, r3, #18
 800479a:	d5f6      	bpl.n	800478a <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	0759      	lsls	r1, r3, #29
 80047a0:	f100 808b 	bmi.w	80048ba <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f040 80bf 	bne.w	800492a <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 80047ac:	2000      	movs	r0, #0
}
 80047ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b0:	4a46      	ldr	r2, [pc, #280]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
 80047b2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80047b6:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80047ba:	d12d      	bne.n	8004818 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047bc:	4b43      	ldr	r3, [pc, #268]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047be:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	0759      	lsls	r1, r3, #29
 80047c4:	d501      	bpl.n	80047ca <HAL_RCC_OscConfig+0x16e>
 80047c6:	2a00      	cmp	r2, #0
 80047c8:	d04f      	beq.n	800486a <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047ca:	4d40      	ldr	r5, [pc, #256]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	f023 0319 	bic.w	r3, r3, #25
 80047d2:	4313      	orrs	r3, r2
 80047d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80047d6:	f7fd fa2f 	bl	8001c38 <HAL_GetTick>
 80047da:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047dc:	e005      	b.n	80047ea <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047de:	f7fd fa2b 	bl	8001c38 <HAL_GetTick>
 80047e2:	1b80      	subs	r0, r0, r6
 80047e4:	2802      	cmp	r0, #2
 80047e6:	f200 80b9 	bhi.w	800495c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ea:	682b      	ldr	r3, [r5, #0]
 80047ec:	075b      	lsls	r3, r3, #29
 80047ee:	d5f6      	bpl.n	80047de <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f0:	f7fd fa28 	bl	8001c44 <HAL_GetREVID>
 80047f4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80047f8:	4298      	cmp	r0, r3
 80047fa:	f200 8110 	bhi.w	8004a1e <HAL_RCC_OscConfig+0x3c2>
 80047fe:	6922      	ldr	r2, [r4, #16]
 8004800:	686b      	ldr	r3, [r5, #4]
 8004802:	2a40      	cmp	r2, #64	@ 0x40
 8004804:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004808:	bf0c      	ite	eq
 800480a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800480e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8004812:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	e75a      	b.n	80046ce <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004818:	2b18      	cmp	r3, #24
 800481a:	f000 80fc 	beq.w	8004a16 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800481e:	4d2b      	ldr	r5, [pc, #172]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004820:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004822:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004824:	2a00      	cmp	r2, #0
 8004826:	f000 80e5 	beq.w	80049f4 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800482a:	f023 0319 	bic.w	r3, r3, #25
 800482e:	4313      	orrs	r3, r2
 8004830:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004832:	f7fd fa01 	bl	8001c38 <HAL_GetTick>
 8004836:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004838:	e005      	b.n	8004846 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483a:	f7fd f9fd 	bl	8001c38 <HAL_GetTick>
 800483e:	1b80      	subs	r0, r0, r6
 8004840:	2802      	cmp	r0, #2
 8004842:	f200 808b 	bhi.w	800495c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004846:	682b      	ldr	r3, [r5, #0]
 8004848:	075f      	lsls	r7, r3, #29
 800484a:	d5f6      	bpl.n	800483a <HAL_RCC_OscConfig+0x1de>
 800484c:	e7d0      	b.n	80047f0 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800484e:	f001 0103 	and.w	r1, r1, #3
 8004852:	2902      	cmp	r1, #2
 8004854:	f47f af15 	bne.w	8004682 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004858:	4a1c      	ldr	r2, [pc, #112]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	0392      	lsls	r2, r2, #14
 800485e:	f57f af34 	bpl.w	80046ca <HAL_RCC_OscConfig+0x6e>
 8004862:	6862      	ldr	r2, [r4, #4]
 8004864:	2a00      	cmp	r2, #0
 8004866:	f47f af30 	bne.w	80046ca <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 800486a:	2001      	movs	r0, #1
}
 800486c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800486e:	f002 0203 	and.w	r2, r2, #3
 8004872:	2a01      	cmp	r2, #1
 8004874:	f47f af38 	bne.w	80046e8 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004878:	4b14      	ldr	r3, [pc, #80]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	05da      	lsls	r2, r3, #23
 800487e:	d502      	bpl.n	8004886 <HAL_RCC_OscConfig+0x22a>
 8004880:	69e3      	ldr	r3, [r4, #28]
 8004882:	2b80      	cmp	r3, #128	@ 0x80
 8004884:	d1f1      	bne.n	800486a <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004886:	f7fd f9dd 	bl	8001c44 <HAL_GetREVID>
 800488a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800488e:	4298      	cmp	r0, r3
 8004890:	f200 80ce 	bhi.w	8004a30 <HAL_RCC_OscConfig+0x3d4>
 8004894:	6a22      	ldr	r2, [r4, #32]
 8004896:	2a20      	cmp	r2, #32
 8004898:	f000 81b9 	beq.w	8004c0e <HAL_RCC_OscConfig+0x5b2>
 800489c:	490b      	ldr	r1, [pc, #44]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
 800489e:	684b      	ldr	r3, [r1, #4]
 80048a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80048a4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80048a8:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	e745      	b.n	800473a <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ae:	4a07      	ldr	r2, [pc, #28]	@ (80048cc <HAL_RCC_OscConfig+0x270>)
 80048b0:	6813      	ldr	r3, [r2, #0]
 80048b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b6:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048b8:	e6f8      	b.n	80046ac <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 80048ba:	4d05      	ldr	r5, [pc, #20]	@ (80048d0 <HAL_RCC_OscConfig+0x274>)
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80048c4:	f7fd f9b8 	bl	8001c38 <HAL_GetTick>
 80048c8:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x282>
 80048cc:	58024400 	.word	0x58024400
 80048d0:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d4:	f7fd f9b0 	bl	8001c38 <HAL_GetTick>
 80048d8:	1b80      	subs	r0, r0, r6
 80048da:	2864      	cmp	r0, #100	@ 0x64
 80048dc:	d83e      	bhi.n	800495c <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	05da      	lsls	r2, r3, #23
 80048e2:	d5f7      	bpl.n	80048d4 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e4:	68a3      	ldr	r3, [r4, #8]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	f000 818b 	beq.w	8004c02 <HAL_RCC_OscConfig+0x5a6>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8166 	beq.w	8004bbe <HAL_RCC_OscConfig+0x562>
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	4b85      	ldr	r3, [pc, #532]	@ (8004b0c <HAL_RCC_OscConfig+0x4b0>)
 80048f6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048f8:	f000 8192 	beq.w	8004c20 <HAL_RCC_OscConfig+0x5c4>
 80048fc:	f022 0201 	bic.w	r2, r2, #1
 8004900:	671a      	str	r2, [r3, #112]	@ 0x70
 8004902:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004904:	f022 0204 	bic.w	r2, r2, #4
 8004908:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800490a:	f7fd f995 	bl	8001c38 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800490e:	4e7f      	ldr	r6, [pc, #508]	@ (8004b0c <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004914:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004916:	e004      	b.n	8004922 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fd f98e 	bl	8001c38 <HAL_GetTick>
 800491c:	1b40      	subs	r0, r0, r5
 800491e:	42b8      	cmp	r0, r7
 8004920:	d81c      	bhi.n	800495c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004922:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004924:	079b      	lsls	r3, r3, #30
 8004926:	d5f7      	bpl.n	8004918 <HAL_RCC_OscConfig+0x2bc>
 8004928:	e73c      	b.n	80047a4 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800492a:	4d78      	ldr	r5, [pc, #480]	@ (8004b0c <HAL_RCC_OscConfig+0x4b0>)
 800492c:	692a      	ldr	r2, [r5, #16]
 800492e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8004932:	2a18      	cmp	r2, #24
 8004934:	f000 80ee 	beq.w	8004b14 <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004938:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800493a:	682b      	ldr	r3, [r5, #0]
 800493c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004940:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004942:	d07f      	beq.n	8004a44 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 8004944:	f7fd f978 	bl	8001c38 <HAL_GetTick>
 8004948:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800494a:	682b      	ldr	r3, [r5, #0]
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	f57f af2d 	bpl.w	80047ac <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004952:	f7fd f971 	bl	8001c38 <HAL_GetTick>
 8004956:	1b00      	subs	r0, r0, r4
 8004958:	2802      	cmp	r0, #2
 800495a:	d9f6      	bls.n	800494a <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 800495c:	2003      	movs	r0, #3
}
 800495e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004960:	4d6a      	ldr	r5, [pc, #424]	@ (8004b0c <HAL_RCC_OscConfig+0x4b0>)
 8004962:	682b      	ldr	r3, [r5, #0]
 8004964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004968:	602b      	str	r3, [r5, #0]
 800496a:	682b      	ldr	r3, [r5, #0]
 800496c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004970:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004972:	f7fd f961 	bl	8001c38 <HAL_GetTick>
 8004976:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004978:	e004      	b.n	8004984 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800497a:	f7fd f95d 	bl	8001c38 <HAL_GetTick>
 800497e:	1b80      	subs	r0, r0, r6
 8004980:	2864      	cmp	r0, #100	@ 0x64
 8004982:	d8eb      	bhi.n	800495c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	039f      	lsls	r7, r3, #14
 8004988:	d4f7      	bmi.n	800497a <HAL_RCC_OscConfig+0x31e>
 800498a:	e69d      	b.n	80046c8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800498c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004994:	f7fd f950 	bl	8001c38 <HAL_GetTick>
 8004998:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800499a:	e004      	b.n	80049a6 <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800499c:	f7fd f94c 	bl	8001c38 <HAL_GetTick>
 80049a0:	1b80      	subs	r0, r0, r6
 80049a2:	2802      	cmp	r0, #2
 80049a4:	d8da      	bhi.n	800495c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049a6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80049a8:	0799      	lsls	r1, r3, #30
 80049aa:	d4f7      	bmi.n	800499c <HAL_RCC_OscConfig+0x340>
 80049ac:	e6dd      	b.n	800476a <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 80049ae:	682b      	ldr	r3, [r5, #0]
 80049b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049b4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80049b6:	f7fd f93f 	bl	8001c38 <HAL_GetTick>
 80049ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049bc:	e004      	b.n	80049c8 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049be:	f7fd f93b 	bl	8001c38 <HAL_GetTick>
 80049c2:	1b80      	subs	r0, r0, r6
 80049c4:	2802      	cmp	r0, #2
 80049c6:	d8c9      	bhi.n	800495c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	0498      	lsls	r0, r3, #18
 80049cc:	d4f7      	bmi.n	80049be <HAL_RCC_OscConfig+0x362>
 80049ce:	e6e5      	b.n	800479c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80049d8:	f7fd f92e 	bl	8001c38 <HAL_GetTick>
 80049dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049de:	e004      	b.n	80049ea <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049e0:	f7fd f92a 	bl	8001c38 <HAL_GetTick>
 80049e4:	1b80      	subs	r0, r0, r6
 80049e6:	2802      	cmp	r0, #2
 80049e8:	d8b8      	bhi.n	800495c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049ea:	682b      	ldr	r3, [r5, #0]
 80049ec:	05df      	lsls	r7, r3, #23
 80049ee:	d4f7      	bmi.n	80049e0 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	e6a2      	b.n	800473a <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80049fa:	f7fd f91d 	bl	8001c38 <HAL_GetTick>
 80049fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a00:	e004      	b.n	8004a0c <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a02:	f7fd f919 	bl	8001c38 <HAL_GetTick>
 8004a06:	1b80      	subs	r0, r0, r6
 8004a08:	2802      	cmp	r0, #2
 8004a0a:	d8a7      	bhi.n	800495c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	0758      	lsls	r0, r3, #29
 8004a10:	d4f7      	bmi.n	8004a02 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	e65b      	b.n	80046ce <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a16:	0790      	lsls	r0, r2, #30
 8004a18:	f47f af01 	bne.w	800481e <HAL_RCC_OscConfig+0x1c2>
 8004a1c:	e6ce      	b.n	80047bc <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1e:	686b      	ldr	r3, [r5, #4]
 8004a20:	6922      	ldr	r2, [r4, #16]
 8004a22:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004a26:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004a2a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	e64e      	b.n	80046ce <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a30:	4a36      	ldr	r2, [pc, #216]	@ (8004b0c <HAL_RCC_OscConfig+0x4b0>)
 8004a32:	6a21      	ldr	r1, [r4, #32]
 8004a34:	68d3      	ldr	r3, [r2, #12]
 8004a36:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004a3a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004a3e:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	e67a      	b.n	800473a <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8004a44:	f7fd f8f8 	bl	8001c38 <HAL_GetTick>
 8004a48:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a4a:	e004      	b.n	8004a56 <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fd f8f4 	bl	8001c38 <HAL_GetTick>
 8004a50:	1b80      	subs	r0, r0, r6
 8004a52:	2802      	cmp	r0, #2
 8004a54:	d882      	bhi.n	800495c <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a56:	682b      	ldr	r3, [r5, #0]
 8004a58:	0199      	lsls	r1, r3, #6
 8004a5a:	d4f7      	bmi.n	8004a4c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a5c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004b10 <HAL_RCC_OscConfig+0x4b4>)
 8004a60:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004a62:	400b      	ands	r3, r1
 8004a64:	4313      	orrs	r3, r2
 8004a66:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004a68:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004a6c:	62ab      	str	r3, [r5, #40]	@ 0x28
 8004a6e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004a70:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8004a74:	3901      	subs	r1, #1
 8004a76:	3b01      	subs	r3, #1
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004a7e:	025b      	lsls	r3, r3, #9
 8004a80:	0412      	lsls	r2, r2, #16
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004a8c:	3a01      	subs	r2, #1
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	0612      	lsls	r2, r2, #24
 8004a92:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004a96:	4313      	orrs	r3, r2
 8004a98:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a9a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004aa2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004aa4:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004aa6:	f36f 03cf 	bfc	r3, #3, #13
 8004aaa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004aae:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ab0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004ab2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004ab4:	f023 030c 	bic.w	r3, r3, #12
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004abc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004abe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004ac0:	f023 0302 	bic.w	r3, r3, #2
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ac8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ace:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ad8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004ada:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ade:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ae0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004af0:	f7fd f8a2 	bl	8001c38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004af4:	4d05      	ldr	r5, [pc, #20]	@ (8004b0c <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 8004af6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	019a      	lsls	r2, r3, #6
 8004afc:	f53f ae56 	bmi.w	80047ac <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b00:	f7fd f89a 	bl	8001c38 <HAL_GetTick>
 8004b04:	1b00      	subs	r0, r0, r4
 8004b06:	2802      	cmp	r0, #2
 8004b08:	d9f6      	bls.n	8004af8 <HAL_RCC_OscConfig+0x49c>
 8004b0a:	e727      	b.n	800495c <HAL_RCC_OscConfig+0x300>
 8004b0c:	58024400 	.word	0x58024400
 8004b10:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b14:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b16:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b18:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b1a:	f43f aea6 	beq.w	800486a <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b22:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004b24:	428b      	cmp	r3, r1
 8004b26:	f47f aea0 	bne.w	800486a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b2a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004b30:	429a      	cmp	r2, r3
 8004b32:	f47f ae9a 	bne.w	800486a <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004b38:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8004b3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	f47f ae93 	bne.w	800486a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b46:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8004b4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	f47f ae8c 	bne.w	800486a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b52:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004b54:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8004b58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	f47f ae85 	bne.w	800486a <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b60:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004b62:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8004b66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b68:	4298      	cmp	r0, r3
 8004b6a:	f47f ae7e 	bne.w	800486a <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b6e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b70:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b72:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b76:	429a      	cmp	r2, r3
 8004b78:	f43f ae18 	beq.w	80047ac <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b7c:	4a2d      	ldr	r2, [pc, #180]	@ (8004c34 <HAL_RCC_OscConfig+0x5d8>)
 8004b7e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8004b86:	f7fd f857 	bl	8001c38 <HAL_GetTick>
 8004b8a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b8c:	f7fd f854 	bl	8001c38 <HAL_GetTick>
 8004b90:	42a8      	cmp	r0, r5
 8004b92:	d0fb      	beq.n	8004b8c <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b94:	4a27      	ldr	r2, [pc, #156]	@ (8004c34 <HAL_RCC_OscConfig+0x5d8>)
 8004b96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004b98:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8004b9a:	f36f 03cf 	bfc	r3, #3, #13
 8004b9e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004ba2:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ba4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bac:	e5fe      	b.n	80047ac <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bae:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004bba:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bbc:	e576      	b.n	80046ac <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bbe:	4d1d      	ldr	r5, [pc, #116]	@ (8004c34 <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bc4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	672b      	str	r3, [r5, #112]	@ 0x70
 8004bcc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004bce:	f023 0304 	bic.w	r3, r3, #4
 8004bd2:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004bd4:	f7fd f830 	bl	8001c38 <HAL_GetTick>
 8004bd8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bda:	e005      	b.n	8004be8 <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fd f82c 	bl	8001c38 <HAL_GetTick>
 8004be0:	1b80      	subs	r0, r0, r6
 8004be2:	42b8      	cmp	r0, r7
 8004be4:	f63f aeba 	bhi.w	800495c <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004be8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004bea:	0798      	lsls	r0, r3, #30
 8004bec:	d4f6      	bmi.n	8004bdc <HAL_RCC_OscConfig+0x580>
 8004bee:	e5d9      	b.n	80047a4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bf0:	68eb      	ldr	r3, [r5, #12]
 8004bf2:	6a22      	ldr	r2, [r4, #32]
 8004bf4:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004bf8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004bfc:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	e59b      	b.n	800473a <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c02:	4a0c      	ldr	r2, [pc, #48]	@ (8004c34 <HAL_RCC_OscConfig+0x5d8>)
 8004c04:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c0c:	e67d      	b.n	800490a <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c0e:	4a09      	ldr	r2, [pc, #36]	@ (8004c34 <HAL_RCC_OscConfig+0x5d8>)
 8004c10:	6853      	ldr	r3, [r2, #4]
 8004c12:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c1a:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	e58c      	b.n	800473a <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c20:	f042 0204 	orr.w	r2, r2, #4
 8004c24:	671a      	str	r2, [r3, #112]	@ 0x70
 8004c26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c2e:	e66c      	b.n	800490a <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 8004c30:	2001      	movs	r0, #1
}
 8004c32:	4770      	bx	lr
 8004c34:	58024400 	.word	0x58024400

08004c38 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c38:	4a3f      	ldr	r2, [pc, #252]	@ (8004d38 <HAL_RCC_GetSysClockFreq+0x100>)
 8004c3a:	6913      	ldr	r3, [r2, #16]
 8004c3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	d04f      	beq.n	8004ce4 <HAL_RCC_GetSysClockFreq+0xac>
 8004c44:	2b18      	cmp	r3, #24
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x26>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d14d      	bne.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c4c:	6813      	ldr	r3, [r2, #0]
 8004c4e:	0699      	lsls	r1, r3, #26
 8004c50:	d54c      	bpl.n	8004cec <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	4839      	ldr	r0, [pc, #228]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004c56:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004c5a:	40d8      	lsrs	r0, r3
 8004c5c:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c5e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8004c60:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004c62:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c64:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8004c66:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c6a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004c6c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004c70:	d036      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c72:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c76:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c7a:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c7e:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004c82:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 8004c86:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c8c:	ee06 3a90 	vmov	s13, r3
 8004c90:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8004c94:	d002      	beq.n	8004c9c <HAL_RCC_GetSysClockFreq+0x64>
 8004c96:	2902      	cmp	r1, #2
 8004c98:	d048      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0xf4>
 8004c9a:	b349      	cbz	r1, 8004cf0 <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c9c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004d40 <HAL_RCC_GetSysClockFreq+0x108>
 8004ca0:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004ca4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004caa:	ee07 3a10 	vmov	s14, r3
 8004cae:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004cb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004cb6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004cba:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004cbe:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d38 <HAL_RCC_GetSysClockFreq+0x100>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004cca:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cdc:	ee17 0a90 	vmov	r0, s15
}
 8004ce0:	bc30      	pop	{r4, r5}
 8004ce2:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ce4:	4817      	ldr	r0, [pc, #92]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ce6:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 8004ce8:	4817      	ldr	r0, [pc, #92]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cea:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cec:	4813      	ldr	r0, [pc, #76]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x104>)
}
 8004cee:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cf0:	6813      	ldr	r3, [r2, #0]
 8004cf2:	069b      	lsls	r3, r3, #26
 8004cf4:	d51d      	bpl.n	8004d32 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cf6:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cfc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cfe:	490f      	ldr	r1, [pc, #60]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x104>)
 8004d00:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d08:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d0a:	ee06 3a10 	vmov	s12, r3
 8004d0e:	ee05 1a90 	vmov	s11, r1
 8004d12:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004d16:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004d1a:	ee36 6a07 	vadd.f32	s12, s12, s14
 8004d1e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8004d22:	ee76 7a26 	vadd.f32	s15, s12, s13
 8004d26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d2a:	e7ca      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d2c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004d4c <HAL_RCC_GetSysClockFreq+0x114>
 8004d30:	e7b6      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d32:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004d50 <HAL_RCC_GetSysClockFreq+0x118>
 8004d36:	e7b3      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x68>
 8004d38:	58024400 	.word	0x58024400
 8004d3c:	03d09000 	.word	0x03d09000
 8004d40:	4a742400 	.word	0x4a742400
 8004d44:	017d7840 	.word	0x017d7840
 8004d48:	003d0900 	.word	0x003d0900
 8004d4c:	4bbebc20 	.word	0x4bbebc20
 8004d50:	4c742400 	.word	0x4c742400

08004d54 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004d54:	2800      	cmp	r0, #0
 8004d56:	f000 810e 	beq.w	8004f76 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d5a:	4a8d      	ldr	r2, [pc, #564]	@ (8004f90 <HAL_RCC_ClockConfig+0x23c>)
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	428b      	cmp	r3, r1
{
 8004d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d68:	4604      	mov	r4, r0
 8004d6a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d6c:	d20c      	bcs.n	8004d88 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6e:	6813      	ldr	r3, [r2, #0]
 8004d70:	f023 030f 	bic.w	r3, r3, #15
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d78:	6813      	ldr	r3, [r2, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	428b      	cmp	r3, r1
 8004d80:	d002      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004d82:	2001      	movs	r0, #1
}
 8004d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	0758      	lsls	r0, r3, #29
 8004d8c:	d50b      	bpl.n	8004da6 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d8e:	4981      	ldr	r1, [pc, #516]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004d90:	6920      	ldr	r0, [r4, #16]
 8004d92:	698a      	ldr	r2, [r1, #24]
 8004d94:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004d98:	4290      	cmp	r0, r2
 8004d9a:	d904      	bls.n	8004da6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d9c:	698a      	ldr	r2, [r1, #24]
 8004d9e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004da2:	4302      	orrs	r2, r0
 8004da4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da6:	0719      	lsls	r1, r3, #28
 8004da8:	d50b      	bpl.n	8004dc2 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004daa:	497a      	ldr	r1, [pc, #488]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004dac:	6960      	ldr	r0, [r4, #20]
 8004dae:	69ca      	ldr	r2, [r1, #28]
 8004db0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004db4:	4290      	cmp	r0, r2
 8004db6:	d904      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004db8:	69ca      	ldr	r2, [r1, #28]
 8004dba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004dbe:	4302      	orrs	r2, r0
 8004dc0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc2:	06da      	lsls	r2, r3, #27
 8004dc4:	d50b      	bpl.n	8004dde <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004dc6:	4973      	ldr	r1, [pc, #460]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004dc8:	69a0      	ldr	r0, [r4, #24]
 8004dca:	69ca      	ldr	r2, [r1, #28]
 8004dcc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004dd0:	4290      	cmp	r0, r2
 8004dd2:	d904      	bls.n	8004dde <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004dd4:	69ca      	ldr	r2, [r1, #28]
 8004dd6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dda:	4302      	orrs	r2, r0
 8004ddc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dde:	069f      	lsls	r7, r3, #26
 8004de0:	d50b      	bpl.n	8004dfa <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004de2:	496c      	ldr	r1, [pc, #432]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004de4:	69e0      	ldr	r0, [r4, #28]
 8004de6:	6a0a      	ldr	r2, [r1, #32]
 8004de8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004dec:	4290      	cmp	r0, r2
 8004dee:	d904      	bls.n	8004dfa <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004df0:	6a0a      	ldr	r2, [r1, #32]
 8004df2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004df6:	4302      	orrs	r2, r0
 8004df8:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dfa:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfc:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e00:	f140 80ab 	bpl.w	8004f5a <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e04:	4e63      	ldr	r6, [pc, #396]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004e06:	68e0      	ldr	r0, [r4, #12]
 8004e08:	69b1      	ldr	r1, [r6, #24]
 8004e0a:	f001 010f 	and.w	r1, r1, #15
 8004e0e:	4288      	cmp	r0, r1
 8004e10:	d904      	bls.n	8004e1c <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e12:	69b1      	ldr	r1, [r6, #24]
 8004e14:	f021 010f 	bic.w	r1, r1, #15
 8004e18:	4301      	orrs	r1, r0
 8004e1a:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e1c:	2a00      	cmp	r2, #0
 8004e1e:	d030      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e20:	4a5c      	ldr	r2, [pc, #368]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004e22:	68a1      	ldr	r1, [r4, #8]
 8004e24:	6993      	ldr	r3, [r2, #24]
 8004e26:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e30:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e32:	2902      	cmp	r1, #2
 8004e34:	f000 80a1 	beq.w	8004f7a <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e38:	2903      	cmp	r1, #3
 8004e3a:	f000 8098 	beq.w	8004f6e <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e3e:	2901      	cmp	r1, #1
 8004e40:	f000 80a1 	beq.w	8004f86 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e44:	075f      	lsls	r7, r3, #29
 8004e46:	d59c      	bpl.n	8004d82 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e48:	4e52      	ldr	r6, [pc, #328]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e4a:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e4e:	6933      	ldr	r3, [r6, #16]
 8004e50:	f023 0307 	bic.w	r3, r3, #7
 8004e54:	430b      	orrs	r3, r1
 8004e56:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8004e58:	f7fc feee 	bl	8001c38 <HAL_GetTick>
 8004e5c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5e:	e005      	b.n	8004e6c <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e60:	f7fc feea 	bl	8001c38 <HAL_GetTick>
 8004e64:	1bc0      	subs	r0, r0, r7
 8004e66:	4540      	cmp	r0, r8
 8004e68:	f200 808b 	bhi.w	8004f82 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6c:	6933      	ldr	r3, [r6, #16]
 8004e6e:	6862      	ldr	r2, [r4, #4]
 8004e70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e74:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004e78:	d1f2      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	079e      	lsls	r6, r3, #30
 8004e7e:	d506      	bpl.n	8004e8e <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e80:	68e0      	ldr	r0, [r4, #12]
 8004e82:	4944      	ldr	r1, [pc, #272]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004e84:	698a      	ldr	r2, [r1, #24]
 8004e86:	f002 020f 	and.w	r2, r2, #15
 8004e8a:	4290      	cmp	r0, r2
 8004e8c:	d369      	bcc.n	8004f62 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e8e:	4940      	ldr	r1, [pc, #256]	@ (8004f90 <HAL_RCC_ClockConfig+0x23c>)
 8004e90:	680a      	ldr	r2, [r1, #0]
 8004e92:	f002 020f 	and.w	r2, r2, #15
 8004e96:	42aa      	cmp	r2, r5
 8004e98:	d90a      	bls.n	8004eb0 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9a:	680a      	ldr	r2, [r1, #0]
 8004e9c:	f022 020f 	bic.w	r2, r2, #15
 8004ea0:	432a      	orrs	r2, r5
 8004ea2:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea4:	680a      	ldr	r2, [r1, #0]
 8004ea6:	f002 020f 	and.w	r2, r2, #15
 8004eaa:	42aa      	cmp	r2, r5
 8004eac:	f47f af69 	bne.w	8004d82 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004eb0:	0758      	lsls	r0, r3, #29
 8004eb2:	d50b      	bpl.n	8004ecc <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004eb4:	4937      	ldr	r1, [pc, #220]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004eb6:	6920      	ldr	r0, [r4, #16]
 8004eb8:	698a      	ldr	r2, [r1, #24]
 8004eba:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004ebe:	4290      	cmp	r0, r2
 8004ec0:	d204      	bcs.n	8004ecc <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ec2:	698a      	ldr	r2, [r1, #24]
 8004ec4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004ec8:	4302      	orrs	r2, r0
 8004eca:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	0719      	lsls	r1, r3, #28
 8004ece:	d50b      	bpl.n	8004ee8 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ed0:	4930      	ldr	r1, [pc, #192]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004ed2:	6960      	ldr	r0, [r4, #20]
 8004ed4:	69ca      	ldr	r2, [r1, #28]
 8004ed6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004eda:	4290      	cmp	r0, r2
 8004edc:	d204      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ede:	69ca      	ldr	r2, [r1, #28]
 8004ee0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004ee4:	4302      	orrs	r2, r0
 8004ee6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee8:	06da      	lsls	r2, r3, #27
 8004eea:	d50b      	bpl.n	8004f04 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004eec:	4929      	ldr	r1, [pc, #164]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004eee:	69a0      	ldr	r0, [r4, #24]
 8004ef0:	69ca      	ldr	r2, [r1, #28]
 8004ef2:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004ef6:	4290      	cmp	r0, r2
 8004ef8:	d204      	bcs.n	8004f04 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004efa:	69ca      	ldr	r2, [r1, #28]
 8004efc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f00:	4302      	orrs	r2, r0
 8004f02:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f04:	069b      	lsls	r3, r3, #26
 8004f06:	d50b      	bpl.n	8004f20 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f08:	4a22      	ldr	r2, [pc, #136]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004f0a:	69e1      	ldr	r1, [r4, #28]
 8004f0c:	6a13      	ldr	r3, [r2, #32]
 8004f0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f12:	4299      	cmp	r1, r3
 8004f14:	d204      	bcs.n	8004f20 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f16:	6a13      	ldr	r3, [r2, #32]
 8004f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f20:	f7ff fe8a 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004f24:	4a1b      	ldr	r2, [pc, #108]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004f26:	4603      	mov	r3, r0
 8004f28:	481b      	ldr	r0, [pc, #108]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004f2a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f2c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f2e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8004f32:	4d1a      	ldr	r5, [pc, #104]	@ (8004f9c <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f34:	f002 020f 	and.w	r2, r2, #15
 8004f38:	4c19      	ldr	r4, [pc, #100]	@ (8004fa0 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f3a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f3c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f3e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8004f42:	4818      	ldr	r0, [pc, #96]	@ (8004fa4 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f44:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f48:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8004f4a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8004f4c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f4e:	40d3      	lsrs	r3, r2
 8004f50:	6023      	str	r3, [r4, #0]
}
 8004f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8004f56:	f7fc be0d 	b.w	8001b74 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5a:	2a00      	cmp	r2, #0
 8004f5c:	f47f af60 	bne.w	8004e20 <HAL_RCC_ClockConfig+0xcc>
 8004f60:	e795      	b.n	8004e8e <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f62:	698a      	ldr	r2, [r1, #24]
 8004f64:	f022 020f 	bic.w	r2, r2, #15
 8004f68:	4302      	orrs	r2, r0
 8004f6a:	618a      	str	r2, [r1, #24]
 8004f6c:	e78f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f6e:	019a      	lsls	r2, r3, #6
 8004f70:	f53f af6a 	bmi.w	8004e48 <HAL_RCC_ClockConfig+0xf4>
 8004f74:	e705      	b.n	8004d82 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004f76:	2001      	movs	r0, #1
}
 8004f78:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f7a:	0398      	lsls	r0, r3, #14
 8004f7c:	f53f af64 	bmi.w	8004e48 <HAL_RCC_ClockConfig+0xf4>
 8004f80:	e6ff      	b.n	8004d82 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004f82:	2003      	movs	r0, #3
 8004f84:	e6fe      	b.n	8004d84 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f86:	05db      	lsls	r3, r3, #23
 8004f88:	f53f af5e 	bmi.w	8004e48 <HAL_RCC_ClockConfig+0xf4>
 8004f8c:	e6f9      	b.n	8004d82 <HAL_RCC_ClockConfig+0x2e>
 8004f8e:	bf00      	nop
 8004f90:	52002000 	.word	0x52002000
 8004f94:	58024400 	.word	0x58024400
 8004f98:	0806d460 	.word	0x0806d460
 8004f9c:	24000018 	.word	0x24000018
 8004fa0:	24000014 	.word	0x24000014
 8004fa4:	24000020 	.word	0x24000020

08004fa8 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa8:	4a18      	ldr	r2, [pc, #96]	@ (800500c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004faa:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fac:	6913      	ldr	r3, [r2, #16]
 8004fae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d024      	beq.n	8005000 <HAL_RCC_GetHCLKFreq+0x58>
 8004fb6:	2b18      	cmp	r3, #24
 8004fb8:	d009      	beq.n	8004fce <HAL_RCC_GetHCLKFreq+0x26>
 8004fba:	bb1b      	cbnz	r3, 8005004 <HAL_RCC_GetHCLKFreq+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fbc:	6813      	ldr	r3, [r2, #0]
 8004fbe:	069b      	lsls	r3, r3, #26
 8004fc0:	d522      	bpl.n	8005008 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	4b12      	ldr	r3, [pc, #72]	@ (8005010 <HAL_RCC_GetHCLKFreq+0x68>)
 8004fc6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004fca:	40d3      	lsrs	r3, r2
 8004fcc:	e002      	b.n	8004fd4 <HAL_RCC_GetHCLKFreq+0x2c>
 8004fce:	f7ff fad3 	bl	8004578 <HAL_RCC_GetSysClockFreq.part.0>
 8004fd2:	4603      	mov	r3, r0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fd4:	490d      	ldr	r1, [pc, #52]	@ (800500c <HAL_RCC_GetHCLKFreq+0x64>)
 8004fd6:	480f      	ldr	r0, [pc, #60]	@ (8005014 <HAL_RCC_GetHCLKFreq+0x6c>)
 8004fd8:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fda:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fdc:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8005018 <HAL_RCC_GetHCLKFreq+0x70>)
 8004fe2:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800501c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fe8:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fea:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fec:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ff0:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ff4:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ff6:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8004ffa:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ffc:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005000:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <HAL_RCC_GetHCLKFreq+0x78>)
 8005002:	e7e7      	b.n	8004fd4 <HAL_RCC_GetHCLKFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8005004:	4b07      	ldr	r3, [pc, #28]	@ (8005024 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005006:	e7e5      	b.n	8004fd4 <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005008:	4b01      	ldr	r3, [pc, #4]	@ (8005010 <HAL_RCC_GetHCLKFreq+0x68>)
 800500a:	e7e3      	b.n	8004fd4 <HAL_RCC_GetHCLKFreq+0x2c>
 800500c:	58024400 	.word	0x58024400
 8005010:	03d09000 	.word	0x03d09000
 8005014:	0806d460 	.word	0x0806d460
 8005018:	24000014 	.word	0x24000014
 800501c:	24000018 	.word	0x24000018
 8005020:	017d7840 	.word	0x017d7840
 8005024:	003d0900 	.word	0x003d0900

08005028 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005028:	4a1c      	ldr	r2, [pc, #112]	@ (800509c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800502a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800502c:	6913      	ldr	r3, [r2, #16]
 800502e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005032:	2b10      	cmp	r3, #16
 8005034:	d02b      	beq.n	800508e <HAL_RCC_GetPCLK1Freq+0x66>
 8005036:	2b18      	cmp	r3, #24
 8005038:	d009      	beq.n	800504e <HAL_RCC_GetPCLK1Freq+0x26>
 800503a:	bb53      	cbnz	r3, 8005092 <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800503c:	6813      	ldr	r3, [r2, #0]
 800503e:	069b      	lsls	r3, r3, #26
 8005040:	d529      	bpl.n	8005096 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	4b16      	ldr	r3, [pc, #88]	@ (80050a0 <HAL_RCC_GetPCLK1Freq+0x78>)
 8005046:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800504a:	40d3      	lsrs	r3, r2
 800504c:	e002      	b.n	8005054 <HAL_RCC_GetPCLK1Freq+0x2c>
 800504e:	f7ff fa93 	bl	8004578 <HAL_RCC_GetSysClockFreq.part.0>
 8005052:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005054:	4a11      	ldr	r2, [pc, #68]	@ (800509c <HAL_RCC_GetPCLK1Freq+0x74>)
 8005056:	4913      	ldr	r1, [pc, #76]	@ (80050a4 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8005058:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 800505a:	4d13      	ldr	r5, [pc, #76]	@ (80050a8 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800505c:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005060:	4c12      	ldr	r4, [pc, #72]	@ (80050ac <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005062:	5c08      	ldrb	r0, [r1, r0]
 8005064:	f000 001f 	and.w	r0, r0, #31
 8005068:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800506a:	6990      	ldr	r0, [r2, #24]
 800506c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8005070:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005072:	5c08      	ldrb	r0, [r1, r0]
 8005074:	f000 001f 	and.w	r0, r0, #31
 8005078:	40c3      	lsrs	r3, r0
 800507a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800507c:	69d2      	ldr	r2, [r2, #28]
 800507e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005082:	5c88      	ldrb	r0, [r1, r2]
 8005084:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005088:	fa23 f000 	lsr.w	r0, r3, r0
 800508c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800508e:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <HAL_RCC_GetPCLK1Freq+0x88>)
 8005090:	e7e0      	b.n	8005054 <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 8005092:	4b08      	ldr	r3, [pc, #32]	@ (80050b4 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8005094:	e7de      	b.n	8005054 <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005096:	4b02      	ldr	r3, [pc, #8]	@ (80050a0 <HAL_RCC_GetPCLK1Freq+0x78>)
 8005098:	e7dc      	b.n	8005054 <HAL_RCC_GetPCLK1Freq+0x2c>
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400
 80050a0:	03d09000 	.word	0x03d09000
 80050a4:	0806d460 	.word	0x0806d460
 80050a8:	24000018 	.word	0x24000018
 80050ac:	24000014 	.word	0x24000014
 80050b0:	017d7840 	.word	0x017d7840
 80050b4:	003d0900 	.word	0x003d0900

080050b8 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050ba:	4c36      	ldr	r4, [pc, #216]	@ (8005194 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80050bc:	4606      	mov	r6, r0
 80050be:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050c6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c8:	f7fc fdb6 	bl	8001c38 <HAL_GetTick>
 80050cc:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050ce:	e004      	b.n	80050da <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050d0:	f7fc fdb2 	bl	8001c38 <HAL_GetTick>
 80050d4:	1b40      	subs	r0, r0, r5
 80050d6:	2802      	cmp	r0, #2
 80050d8:	d856      	bhi.n	8005188 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	011a      	lsls	r2, r3, #4
 80050de:	d4f7      	bmi.n	80050d0 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80050e2:	6832      	ldr	r2, [r6, #0]
 80050e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80050e8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80050ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050ee:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	3a01      	subs	r2, #1
 80050f6:	025b      	lsls	r3, r3, #9
 80050f8:	0412      	lsls	r2, r2, #16
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005100:	4313      	orrs	r3, r2
 8005102:	6872      	ldr	r2, [r6, #4]
 8005104:	3a01      	subs	r2, #1
 8005106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800510a:	4313      	orrs	r3, r2
 800510c:	6932      	ldr	r2, [r6, #16]
 800510e:	3a01      	subs	r2, #1
 8005110:	0612      	lsls	r2, r2, #24
 8005112:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005116:	4313      	orrs	r3, r2
 8005118:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800511a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800511c:	6972      	ldr	r2, [r6, #20]
 800511e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005122:	4313      	orrs	r3, r2
 8005124:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005126:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005128:	69b2      	ldr	r2, [r6, #24]
 800512a:	f023 0320 	bic.w	r3, r3, #32
 800512e:	4313      	orrs	r3, r2
 8005130:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005132:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005134:	f023 0310 	bic.w	r3, r3, #16
 8005138:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800513a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800513c:	69f2      	ldr	r2, [r6, #28]
 800513e:	f36f 03cf 	bfc	r3, #3, #13
 8005142:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005146:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005148:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800514a:	f043 0310 	orr.w	r3, r3, #16
 800514e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005150:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8005152:	b1df      	cbz	r7, 800518c <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005154:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005156:	bf0c      	ite	eq
 8005158:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800515c:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8005160:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005162:	4c0c      	ldr	r4, [pc, #48]	@ (8005194 <RCCEx_PLL2_Config.part.0+0xdc>)
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800516a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516c:	f7fc fd64 	bl	8001c38 <HAL_GetTick>
 8005170:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005172:	e004      	b.n	800517e <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005174:	f7fc fd60 	bl	8001c38 <HAL_GetTick>
 8005178:	1b40      	subs	r0, r0, r5
 800517a:	2802      	cmp	r0, #2
 800517c:	d804      	bhi.n	8005188 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	d5f7      	bpl.n	8005174 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8005184:	2000      	movs	r0, #0
}
 8005186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005188:	2003      	movs	r0, #3
}
 800518a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800518c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005190:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005192:	e7e6      	b.n	8005162 <RCCEx_PLL2_Config.part.0+0xaa>
 8005194:	58024400 	.word	0x58024400

08005198 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800519a:	4c36      	ldr	r4, [pc, #216]	@ (8005274 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800519c:	4606      	mov	r6, r0
 800519e:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051a6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a8:	f7fc fd46 	bl	8001c38 <HAL_GetTick>
 80051ac:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051ae:	e004      	b.n	80051ba <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051b0:	f7fc fd42 	bl	8001c38 <HAL_GetTick>
 80051b4:	1b40      	subs	r0, r0, r5
 80051b6:	2802      	cmp	r0, #2
 80051b8:	d856      	bhi.n	8005268 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	009a      	lsls	r2, r3, #2
 80051be:	d4f7      	bmi.n	80051b0 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80051c2:	6832      	ldr	r2, [r6, #0]
 80051c4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80051c8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80051cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051ce:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	3a01      	subs	r2, #1
 80051d6:	025b      	lsls	r3, r3, #9
 80051d8:	0412      	lsls	r2, r2, #16
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80051e0:	4313      	orrs	r3, r2
 80051e2:	6872      	ldr	r2, [r6, #4]
 80051e4:	3a01      	subs	r2, #1
 80051e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ea:	4313      	orrs	r3, r2
 80051ec:	6932      	ldr	r2, [r6, #16]
 80051ee:	3a01      	subs	r2, #1
 80051f0:	0612      	lsls	r2, r2, #24
 80051f2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80051f6:	4313      	orrs	r3, r2
 80051f8:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80051fc:	6972      	ldr	r2, [r6, #20]
 80051fe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005202:	4313      	orrs	r3, r2
 8005204:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005206:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005208:	69b2      	ldr	r2, [r6, #24]
 800520a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800520e:	4313      	orrs	r3, r2
 8005210:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005212:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005218:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800521a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800521c:	69f2      	ldr	r2, [r6, #28]
 800521e:	f36f 03cf 	bfc	r3, #3, #13
 8005222:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005226:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005228:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800522a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800522e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005230:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8005232:	b1df      	cbz	r7, 800526c <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005234:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005236:	bf0c      	ite	eq
 8005238:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800523c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8005240:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005242:	4c0c      	ldr	r4, [pc, #48]	@ (8005274 <RCCEx_PLL3_Config.part.0+0xdc>)
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800524a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524c:	f7fc fcf4 	bl	8001c38 <HAL_GetTick>
 8005250:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005252:	e004      	b.n	800525e <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005254:	f7fc fcf0 	bl	8001c38 <HAL_GetTick>
 8005258:	1b40      	subs	r0, r0, r5
 800525a:	2802      	cmp	r0, #2
 800525c:	d804      	bhi.n	8005268 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	d5f7      	bpl.n	8005254 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8005264:	2000      	movs	r0, #0
}
 8005266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005268:	2003      	movs	r0, #3
}
 800526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800526c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005272:	e7e6      	b.n	8005242 <RCCEx_PLL3_Config.part.0+0xaa>
 8005274:	58024400 	.word	0x58024400

08005278 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800527c:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8005280:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005282:	011d      	lsls	r5, r3, #4
 8005284:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8005288:	d524      	bpl.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800528a:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800528c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005290:	f000 85df 	beq.w	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8005294:	f200 86a8 	bhi.w	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8005298:	2900      	cmp	r1, #0
 800529a:	f000 85f6 	beq.w	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc12>
 800529e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80052a2:	f040 86a5 	bne.w	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052a6:	49a9      	ldr	r1, [pc, #676]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052a8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80052aa:	f001 0103 	and.w	r1, r1, #3
 80052ae:	2903      	cmp	r1, #3
 80052b0:	f000 869e 	beq.w	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80052b4:	2102      	movs	r1, #2
 80052b6:	3008      	adds	r0, #8
 80052b8:	f7ff fefe 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 80052bc:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052be:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052c2:	b93e      	cbnz	r6, 80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052c4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80052c6:	4da1      	ldr	r5, [pc, #644]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052c8:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052ca:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80052cc:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 80052d0:	4301      	orrs	r1, r0
 80052d2:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052d4:	05d8      	lsls	r0, r3, #23
 80052d6:	d50a      	bpl.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 80052d8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80052da:	2904      	cmp	r1, #4
 80052dc:	d806      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80052de:	e8df f011 	tbh	[pc, r1, lsl #1]
 80052e2:	03ff      	.short	0x03ff
 80052e4:	0582056d 	.word	0x0582056d
 80052e8:	04040404 	.word	0x04040404
      status = ret;
 80052ec:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80052ee:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052f0:	0599      	lsls	r1, r3, #22
 80052f2:	d524      	bpl.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 80052f4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80052f6:	2980      	cmp	r1, #128	@ 0x80
 80052f8:	f000 854b 	beq.w	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80052fc:	f200 8687 	bhi.w	800600e <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8005300:	2900      	cmp	r1, #0
 8005302:	f000 85bb 	beq.w	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8005306:	2940      	cmp	r1, #64	@ 0x40
 8005308:	f040 8688 	bne.w	800601c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800530c:	498f      	ldr	r1, [pc, #572]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800530e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005310:	f001 0103 	and.w	r1, r1, #3
 8005314:	2903      	cmp	r1, #3
 8005316:	f000 8681 	beq.w	800601c <HAL_RCCEx_PeriphCLKConfig+0xda4>
 800531a:	2100      	movs	r1, #0
 800531c:	f104 0008 	add.w	r0, r4, #8
 8005320:	f7ff feca 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8005324:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005326:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800532a:	2d00      	cmp	r5, #0
 800532c:	f040 8543 	bne.w	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005330:	4f86      	ldr	r7, [pc, #536]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005332:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8005334:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005336:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 800533a:	4301      	orrs	r1, r0
 800533c:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800533e:	055f      	lsls	r7, r3, #21
 8005340:	d528      	bpl.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005342:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8005346:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 800534a:	f000 855c 	beq.w	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800534e:	f200 8652 	bhi.w	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 8005352:	2900      	cmp	r1, #0
 8005354:	f000 858b 	beq.w	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005358:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800535c:	f040 8653 	bne.w	8006006 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005360:	497a      	ldr	r1, [pc, #488]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005362:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005364:	f001 0103 	and.w	r1, r1, #3
 8005368:	2903      	cmp	r1, #3
 800536a:	f000 864c 	beq.w	8006006 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800536e:	2100      	movs	r1, #0
 8005370:	f104 0008 	add.w	r0, r4, #8
 8005374:	f7ff fea0 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8005378:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800537a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800537e:	2d00      	cmp	r5, #0
 8005380:	f040 8553 	bne.w	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005384:	4f71      	ldr	r7, [pc, #452]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005386:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800538a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800538c:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8005390:	4301      	orrs	r1, r0
 8005392:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005394:	0518      	lsls	r0, r3, #20
 8005396:	d528      	bpl.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005398:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800539c:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 80053a0:	f000 8546 	beq.w	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 80053a4:	f200 8614 	bhi.w	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 80053a8:	2900      	cmp	r1, #0
 80053aa:	f000 84d6 	beq.w	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xae2>
 80053ae:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80053b2:	f040 8615 	bne.w	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053b6:	4965      	ldr	r1, [pc, #404]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053b8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80053ba:	f001 0103 	and.w	r1, r1, #3
 80053be:	2903      	cmp	r1, #3
 80053c0:	f000 860e 	beq.w	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 80053c4:	2100      	movs	r1, #0
 80053c6:	f104 0008 	add.w	r0, r4, #8
 80053ca:	f7ff fe75 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 80053ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053d0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80053d4:	2d00      	cmp	r5, #0
 80053d6:	f040 84c8 	bne.w	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053da:	4f5c      	ldr	r7, [pc, #368]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053dc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80053e0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80053e2:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 80053e6:	4301      	orrs	r1, r0
 80053e8:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053ea:	0199      	lsls	r1, r3, #6
 80053ec:	d518      	bpl.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 80053ee:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80053f0:	2920      	cmp	r1, #32
 80053f2:	f000 8434 	beq.w	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 80053f6:	f200 8615 	bhi.w	8006024 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80053fa:	b139      	cbz	r1, 800540c <HAL_RCCEx_PeriphCLKConfig+0x194>
 80053fc:	2910      	cmp	r1, #16
 80053fe:	f040 8614 	bne.w	800602a <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005402:	4852      	ldr	r0, [pc, #328]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005404:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005406:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800540a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800540c:	2d00      	cmp	r5, #0
 800540e:	f040 83bf 	bne.w	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005412:	4f4e      	ldr	r7, [pc, #312]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005414:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005416:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005418:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 800541c:	4301      	orrs	r1, r0
 800541e:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005420:	04df      	lsls	r7, r3, #19
 8005422:	d526      	bpl.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005424:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8005426:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800542a:	f000 84a1 	beq.w	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 800542e:	f200 85c3 	bhi.w	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 8005432:	2900      	cmp	r1, #0
 8005434:	f000 8486 	beq.w	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005438:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800543c:	f040 85c4 	bne.w	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005440:	4942      	ldr	r1, [pc, #264]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005442:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005444:	f001 0103 	and.w	r1, r1, #3
 8005448:	2903      	cmp	r1, #3
 800544a:	f000 85bd 	beq.w	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 800544e:	2100      	movs	r1, #0
 8005450:	f104 0008 	add.w	r0, r4, #8
 8005454:	f7ff fe30 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8005458:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800545a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800545e:	2d00      	cmp	r5, #0
 8005460:	f040 8478 	bne.w	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005464:	4f39      	ldr	r7, [pc, #228]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005466:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005468:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800546a:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800546e:	4301      	orrs	r1, r0
 8005470:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005472:	0498      	lsls	r0, r3, #18
 8005474:	d524      	bpl.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005476:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8005478:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800547c:	f000 8415 	beq.w	8005caa <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005480:	f200 8556 	bhi.w	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8005484:	b191      	cbz	r1, 80054ac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005486:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800548a:	f040 855b 	bne.w	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800548e:	492f      	ldr	r1, [pc, #188]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005490:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005492:	f001 0103 	and.w	r1, r1, #3
 8005496:	2903      	cmp	r1, #3
 8005498:	f000 8554 	beq.w	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800549c:	2101      	movs	r1, #1
 800549e:	f104 0008 	add.w	r0, r4, #8
 80054a2:	f7ff fe09 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 80054a6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054a8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	f040 838f 	bne.w	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054b2:	4f26      	ldr	r7, [pc, #152]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054b4:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80054b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80054b8:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80054bc:	4301      	orrs	r1, r0
 80054be:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054c0:	0459      	lsls	r1, r3, #17
 80054c2:	d526      	bpl.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 80054c4:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80054c8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80054cc:	f000 8426 	beq.w	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80054d0:	f200 854a 	bhi.w	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 80054d4:	b191      	cbz	r1, 80054fc <HAL_RCCEx_PeriphCLKConfig+0x284>
 80054d6:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80054da:	f040 854f 	bne.w	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054de:	491b      	ldr	r1, [pc, #108]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054e0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80054e2:	f001 0103 	and.w	r1, r1, #3
 80054e6:	2903      	cmp	r1, #3
 80054e8:	f000 8548 	beq.w	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xd04>
 80054ec:	2101      	movs	r1, #1
 80054ee:	f104 0008 	add.w	r0, r4, #8
 80054f2:	f7ff fde1 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 80054f6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054f8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	f040 835b 	bne.w	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005502:	4f12      	ldr	r7, [pc, #72]	@ (800554c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005504:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8005508:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800550a:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800550e:	4301      	orrs	r1, r0
 8005510:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005512:	041f      	lsls	r7, r3, #16
 8005514:	d50d      	bpl.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 8005516:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8005518:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800551c:	f000 8260 	beq.w	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8005520:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8005524:	f000 8591 	beq.w	800604a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005528:	2900      	cmp	r1, #0
 800552a:	f000 825e 	beq.w	80059ea <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 800552e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005530:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005532:	01d8      	lsls	r0, r3, #7
 8005534:	d515      	bpl.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 8005536:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005538:	2903      	cmp	r1, #3
 800553a:	f200 85b4 	bhi.w	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800553e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005542:	000c      	.short	0x000c
 8005544:	03a10007 	.word	0x03a10007
 8005548:	000c      	.short	0x000c
 800554a:	bf00      	nop
 800554c:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005550:	4836      	ldr	r0, [pc, #216]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8005552:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005554:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005558:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800555a:	2d00      	cmp	r5, #0
 800555c:	f000 831a 	beq.w	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 8005560:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005562:	0259      	lsls	r1, r3, #9
 8005564:	f100 827a 	bmi.w	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005568:	07df      	lsls	r7, r3, #31
 800556a:	d52f      	bpl.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 800556c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800556e:	2928      	cmp	r1, #40	@ 0x28
 8005570:	d82a      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005572:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005576:	0257      	.short	0x0257
 8005578:	00290029 	.word	0x00290029
 800557c:	00290029 	.word	0x00290029
 8005580:	00290029 	.word	0x00290029
 8005584:	02480029 	.word	0x02480029
 8005588:	00290029 	.word	0x00290029
 800558c:	00290029 	.word	0x00290029
 8005590:	00290029 	.word	0x00290029
 8005594:	04b90029 	.word	0x04b90029
 8005598:	00290029 	.word	0x00290029
 800559c:	00290029 	.word	0x00290029
 80055a0:	00290029 	.word	0x00290029
 80055a4:	02570029 	.word	0x02570029
 80055a8:	00290029 	.word	0x00290029
 80055ac:	00290029 	.word	0x00290029
 80055b0:	00290029 	.word	0x00290029
 80055b4:	02570029 	.word	0x02570029
 80055b8:	00290029 	.word	0x00290029
 80055bc:	00290029 	.word	0x00290029
 80055c0:	00290029 	.word	0x00290029
 80055c4:	02570029 	.word	0x02570029
      status = ret;
 80055c8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80055ca:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055cc:	0798      	lsls	r0, r3, #30
 80055ce:	d51e      	bpl.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80055d0:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80055d2:	2905      	cmp	r1, #5
 80055d4:	f200 8550 	bhi.w	8006078 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80055d8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80055dc:	00060015 	.word	0x00060015
 80055e0:	00150471 	.word	0x00150471
 80055e4:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055e8:	4910      	ldr	r1, [pc, #64]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80055ea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80055ec:	f001 0103 	and.w	r1, r1, #3
 80055f0:	2903      	cmp	r1, #3
 80055f2:	f000 8541 	beq.w	8006078 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80055f6:	2101      	movs	r1, #1
 80055f8:	f104 0008 	add.w	r0, r4, #8
 80055fc:	f7ff fd5c 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8005600:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005602:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005606:	2d00      	cmp	r5, #0
 8005608:	f000 82cc 	beq.w	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 800560c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800560e:	0759      	lsls	r1, r3, #29
 8005610:	d521      	bpl.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005612:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8005616:	2905      	cmp	r1, #5
 8005618:	f200 852a 	bhi.w	8006070 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 800561c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005620:	00080017 	.word	0x00080017
 8005624:	0017043c 	.word	0x0017043c
 8005628:	00170017 	.word	0x00170017
 800562c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005630:	49ae      	ldr	r1, [pc, #696]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005632:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005634:	f001 0103 	and.w	r1, r1, #3
 8005638:	2903      	cmp	r1, #3
 800563a:	f000 8519 	beq.w	8006070 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 800563e:	2101      	movs	r1, #1
 8005640:	f104 0008 	add.w	r0, r4, #8
 8005644:	f7ff fd38 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8005648:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800564a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800564e:	2d00      	cmp	r5, #0
 8005650:	f000 82c2 	beq.w	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 8005654:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005656:	069f      	lsls	r7, r3, #26
 8005658:	d526      	bpl.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800565a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800565e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8005662:	f000 82c6 	beq.w	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005666:	f200 8455 	bhi.w	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800566a:	b191      	cbz	r1, 8005692 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800566c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8005670:	f040 845a 	bne.w	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005674:	499d      	ldr	r1, [pc, #628]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005676:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005678:	f001 0103 	and.w	r1, r1, #3
 800567c:	2903      	cmp	r1, #3
 800567e:	f000 8453 	beq.w	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8005682:	2100      	movs	r1, #0
 8005684:	f104 0008 	add.w	r0, r4, #8
 8005688:	f7ff fd16 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 800568c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800568e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005692:	2d00      	cmp	r5, #0
 8005694:	f040 828e 	bne.w	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005698:	4f94      	ldr	r7, [pc, #592]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800569a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800569e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056a0:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80056a4:	4301      	orrs	r1, r0
 80056a6:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056a8:	0658      	lsls	r0, r3, #25
 80056aa:	d526      	bpl.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80056ac:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 80056b0:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80056b4:	f000 82af 	beq.w	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80056b8:	f200 8464 	bhi.w	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80056bc:	b191      	cbz	r1, 80056e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 80056be:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80056c2:	f040 8469 	bne.w	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056c6:	4989      	ldr	r1, [pc, #548]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80056c8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80056ca:	f001 0103 	and.w	r1, r1, #3
 80056ce:	2903      	cmp	r1, #3
 80056d0:	f000 8462 	beq.w	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80056d4:	2100      	movs	r1, #0
 80056d6:	f104 0008 	add.w	r0, r4, #8
 80056da:	f7ff fced 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 80056de:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056e0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80056e4:	2d00      	cmp	r5, #0
 80056e6:	f040 8269 	bne.w	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056ea:	4f80      	ldr	r7, [pc, #512]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80056ec:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80056f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80056f2:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 80056f6:	4301      	orrs	r1, r0
 80056f8:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056fa:	0619      	lsls	r1, r3, #24
 80056fc:	d526      	bpl.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80056fe:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8005702:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8005706:	f000 8298 	beq.w	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800570a:	f200 841f 	bhi.w	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 800570e:	b191      	cbz	r1, 8005736 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005710:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8005714:	f040 8424 	bne.w	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005718:	4974      	ldr	r1, [pc, #464]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800571a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800571c:	f001 0103 	and.w	r1, r1, #3
 8005720:	2903      	cmp	r1, #3
 8005722:	f000 841d 	beq.w	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005726:	2100      	movs	r1, #0
 8005728:	f104 0008 	add.w	r0, r4, #8
 800572c:	f7ff fcc4 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8005730:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005732:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005736:	2d00      	cmp	r5, #0
 8005738:	f040 8244 	bne.w	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800573c:	4f6b      	ldr	r7, [pc, #428]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800573e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8005742:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005744:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005748:	4301      	orrs	r1, r0
 800574a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800574c:	071f      	lsls	r7, r3, #28
 800574e:	d50b      	bpl.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005750:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8005754:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8005758:	f000 81d4 	beq.w	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800575c:	4f63      	ldr	r7, [pc, #396]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800575e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005760:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005764:	4301      	orrs	r1, r0
 8005766:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005768:	06d8      	lsls	r0, r3, #27
 800576a:	d50b      	bpl.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800576c:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8005770:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8005774:	f000 81db 	beq.w	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005778:	4f5c      	ldr	r7, [pc, #368]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800577a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800577c:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8005780:	4301      	orrs	r1, r0
 8005782:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005784:	0319      	lsls	r1, r3, #12
 8005786:	d524      	bpl.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 8005788:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 800578c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8005790:	f000 82b1 	beq.w	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005794:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8005798:	d010      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x544>
 800579a:	2900      	cmp	r1, #0
 800579c:	f040 8130 	bne.w	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057a0:	4852      	ldr	r0, [pc, #328]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80057a2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80057a4:	f000 0003 	and.w	r0, r0, #3
 80057a8:	2803      	cmp	r0, #3
 80057aa:	f000 8129 	beq.w	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x788>
 80057ae:	f104 0008 	add.w	r0, r4, #8
 80057b2:	f7ff fc81 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 80057b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80057bc:	2d00      	cmp	r5, #0
 80057be:	f040 81ff 	bne.w	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057c2:	4f4a      	ldr	r7, [pc, #296]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80057c4:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 80057c8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80057ca:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80057ce:	4301      	orrs	r1, r0
 80057d0:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057d2:	035f      	lsls	r7, r3, #13
 80057d4:	d50f      	bpl.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 80057d6:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80057da:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80057de:	f000 8277 	beq.w	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 80057e2:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 80057e6:	f000 812d 	beq.w	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80057ea:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80057ee:	f000 8124 	beq.w	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 80057f2:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80057f4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057f6:	03d8      	lsls	r0, r3, #15
 80057f8:	d520      	bpl.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 80057fa:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80057fc:	2900      	cmp	r1, #0
 80057fe:	f000 81aa 	beq.w	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8005802:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8005806:	f040 80e8 	bne.w	80059da <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800580a:	4938      	ldr	r1, [pc, #224]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800580c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800580e:	f001 0103 	and.w	r1, r1, #3
 8005812:	2903      	cmp	r1, #3
 8005814:	f000 80e1 	beq.w	80059da <HAL_RCCEx_PeriphCLKConfig+0x762>
 8005818:	2102      	movs	r1, #2
 800581a:	f104 0008 	add.w	r0, r4, #8
 800581e:	f7ff fc4b 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8005822:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005824:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005828:	2d00      	cmp	r5, #0
 800582a:	f040 819c 	bne.w	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800582e:	4f2f      	ldr	r7, [pc, #188]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005830:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005832:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005834:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8005838:	4301      	orrs	r1, r0
 800583a:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800583c:	0099      	lsls	r1, r3, #2
 800583e:	d50e      	bpl.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005840:	492a      	ldr	r1, [pc, #168]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005842:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005844:	f001 0103 	and.w	r1, r1, #3
 8005848:	2903      	cmp	r1, #3
 800584a:	d007      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800584c:	2102      	movs	r1, #2
 800584e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005852:	f7ff fca1 	bl	8005198 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005856:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800585a:	b100      	cbz	r0, 800585e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 800585c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800585e:	039f      	lsls	r7, r3, #14
 8005860:	f100 80ab 	bmi.w	80059ba <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 8005864:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005866:	02d8      	lsls	r0, r3, #11
 8005868:	d506      	bpl.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800586a:	4820      	ldr	r0, [pc, #128]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800586c:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 800586e:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005870:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005874:	4331      	orrs	r1, r6
 8005876:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005878:	00d9      	lsls	r1, r3, #3
 800587a:	d507      	bpl.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800587c:	481b      	ldr	r0, [pc, #108]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800587e:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8005882:	6901      	ldr	r1, [r0, #16]
 8005884:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8005888:	4331      	orrs	r1, r6
 800588a:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800588c:	029f      	lsls	r7, r3, #10
 800588e:	d506      	bpl.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005890:	4816      	ldr	r0, [pc, #88]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005892:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8005894:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8005896:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800589a:	4331      	orrs	r1, r6
 800589c:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800589e:	005e      	lsls	r6, r3, #1
 80058a0:	d509      	bpl.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058a2:	4912      	ldr	r1, [pc, #72]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80058a4:	6908      	ldr	r0, [r1, #16]
 80058a6:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80058aa:	6108      	str	r0, [r1, #16]
 80058ac:	6908      	ldr	r0, [r1, #16]
 80058ae:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 80058b2:	4330      	orrs	r0, r6
 80058b4:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	da06      	bge.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058ba:	480c      	ldr	r0, [pc, #48]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80058bc:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80058be:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80058c0:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80058c4:	4331      	orrs	r1, r6
 80058c6:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058c8:	0218      	lsls	r0, r3, #8
 80058ca:	d507      	bpl.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058cc:	4907      	ldr	r1, [pc, #28]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80058ce:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 80058d2:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80058d4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80058d8:	4303      	orrs	r3, r0
 80058da:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058dc:	07d1      	lsls	r1, r2, #31
 80058de:	d511      	bpl.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058e0:	4b02      	ldr	r3, [pc, #8]	@ (80058ec <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80058e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	e001      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80058ec:	58024400 	.word	0x58024400
 80058f0:	f000 835c 	beq.w	8005fac <HAL_RCCEx_PeriphCLKConfig+0xd34>
 80058f4:	2100      	movs	r1, #0
 80058f6:	f104 0008 	add.w	r0, r4, #8
 80058fa:	f7ff fbdd 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80058fe:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005900:	b100      	cbz	r0, 8005904 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005902:	4605      	mov	r5, r0
 8005904:	0793      	lsls	r3, r2, #30
 8005906:	d50e      	bpl.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005908:	4baf      	ldr	r3, [pc, #700]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	f003 0303 	and.w	r3, r3, #3
 8005910:	2b03      	cmp	r3, #3
 8005912:	f000 834d 	beq.w	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8005916:	2101      	movs	r1, #1
 8005918:	f104 0008 	add.w	r0, r4, #8
 800591c:	f7ff fbcc 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005920:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005922:	b100      	cbz	r0, 8005926 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005924:	4605      	mov	r5, r0
 8005926:	0757      	lsls	r7, r2, #29
 8005928:	d50e      	bpl.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800592a:	4ba7      	ldr	r3, [pc, #668]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800592c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b03      	cmp	r3, #3
 8005934:	f000 833e 	beq.w	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8005938:	2102      	movs	r1, #2
 800593a:	f104 0008 	add.w	r0, r4, #8
 800593e:	f7ff fbbb 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005942:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005944:	b100      	cbz	r0, 8005948 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005946:	4605      	mov	r5, r0
 8005948:	0716      	lsls	r6, r2, #28
 800594a:	d50e      	bpl.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800594c:	4b9e      	ldr	r3, [pc, #632]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	2b03      	cmp	r3, #3
 8005956:	f000 8323 	beq.w	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xd28>
 800595a:	2100      	movs	r1, #0
 800595c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005960:	f7ff fc1a 	bl	8005198 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005964:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005966:	b100      	cbz	r0, 800596a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005968:	4605      	mov	r5, r0
 800596a:	06d0      	lsls	r0, r2, #27
 800596c:	d50f      	bpl.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800596e:	4b96      	ldr	r3, [pc, #600]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b03      	cmp	r3, #3
 8005978:	f000 8314 	beq.w	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 800597c:	2101      	movs	r1, #1
 800597e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005982:	f7ff fc09 	bl	8005198 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8005986:	2800      	cmp	r0, #0
 8005988:	f040 8359 	bne.w	800603e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800598c:	6862      	ldr	r2, [r4, #4]
 800598e:	0693      	lsls	r3, r2, #26
 8005990:	d50e      	bpl.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005992:	4b8d      	ldr	r3, [pc, #564]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b03      	cmp	r3, #3
 800599c:	f000 82b7 	beq.w	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80059a0:	2102      	movs	r1, #2
 80059a2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80059a6:	f7ff fbf7 	bl	8005198 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80059aa:	2800      	cmp	r0, #0
 80059ac:	f040 82af 	bne.w	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 80059b0:	1e28      	subs	r0, r5, #0
 80059b2:	bf18      	it	ne
 80059b4:	2001      	movne	r0, #1
}
 80059b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 80059ba:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80059be:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80059c2:	f000 80d2 	beq.w	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80059c6:	f240 8110 	bls.w	8005bea <HAL_RCCEx_PeriphCLKConfig+0x972>
 80059ca:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 80059ce:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80059d2:	f000 80cf 	beq.w	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80059d6:	2501      	movs	r5, #1
 80059d8:	e745      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 80059da:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80059dc:	4635      	mov	r5, r6
 80059de:	e72d      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e0:	4879      	ldr	r0, [pc, #484]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80059e2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80059e4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80059e8:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80059ea:	2d00      	cmp	r5, #0
 80059ec:	f040 80ce 	bne.w	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059f0:	4f75      	ldr	r7, [pc, #468]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80059f2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80059f4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059f6:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80059fa:	4301      	orrs	r1, r0
 80059fc:	6539      	str	r1, [r7, #80]	@ 0x50
 80059fe:	e598      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8005a00:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005a02:	4635      	mov	r5, r6
 8005a04:	e6e5      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a06:	4970      	ldr	r1, [pc, #448]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005a08:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005a0a:	f001 0103 	and.w	r1, r1, #3
 8005a0e:	2903      	cmp	r1, #3
 8005a10:	f43f adda 	beq.w	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005a14:	2101      	movs	r1, #1
 8005a16:	f104 0008 	add.w	r0, r4, #8
 8005a1a:	f7ff fb4d 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8005a1e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a20:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005a24:	2d00      	cmp	r5, #0
 8005a26:	f040 80d5 	bne.w	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a2a:	4f67      	ldr	r7, [pc, #412]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005a2c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005a2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a30:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8005a34:	4301      	orrs	r1, r0
 8005a36:	6579      	str	r1, [r7, #84]	@ 0x54
 8005a38:	e5c8      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a3a:	4863      	ldr	r0, [pc, #396]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005a3c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005a3e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005a42:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005a44:	2d00      	cmp	r5, #0
 8005a46:	f040 809f 	bne.w	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a4a:	4f5f      	ldr	r7, [pc, #380]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005a4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8005a50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a52:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005a56:	4301      	orrs	r1, r0
 8005a58:	6579      	str	r1, [r7, #84]	@ 0x54
 8005a5a:	e6cc      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a5c:	4f5b      	ldr	r7, [pc, #364]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a64:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8005a66:	f7fc f8e7 	bl	8001c38 <HAL_GetTick>
 8005a6a:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a6c:	e006      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6e:	f7fc f8e3 	bl	8001c38 <HAL_GetTick>
 8005a72:	eba0 0008 	sub.w	r0, r0, r8
 8005a76:	2864      	cmp	r0, #100	@ 0x64
 8005a78:	f200 82db 	bhi.w	8006032 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	05da      	lsls	r2, r3, #23
 8005a80:	d5f5      	bpl.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 8005a82:	2d00      	cmp	r5, #0
 8005a84:	f040 82d6 	bne.w	8006034 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a88:	4a4f      	ldr	r2, [pc, #316]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005a8a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005a8e:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005a90:	4059      	eors	r1, r3
 8005a92:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8005a96:	d00b      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a98:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a9a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a9c:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005aa0:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8005aa4:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005aa6:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8005aa8:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8005aac:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8005aae:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ab4:	f000 82fb 	beq.w	80060ae <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ab8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005abc:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005ac0:	f000 8309 	beq.w	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 8005ac4:	4940      	ldr	r1, [pc, #256]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005ac6:	690a      	ldr	r2, [r1, #16]
 8005ac8:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8005acc:	610a      	str	r2, [r1, #16]
 8005ace:	483e      	ldr	r0, [pc, #248]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005ad0:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8005ad4:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8005ad6:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ad8:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005adc:	6701      	str	r1, [r0, #112]	@ 0x70
 8005ade:	e543      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae0:	4839      	ldr	r0, [pc, #228]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005ae2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005ae4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005ae8:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005aea:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005aec:	2d00      	cmp	r5, #0
 8005aee:	f040 8177 	bne.w	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005af2:	4f35      	ldr	r7, [pc, #212]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005af6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005af8:	f021 0107 	bic.w	r1, r1, #7
 8005afc:	4301      	orrs	r1, r0
 8005afe:	6539      	str	r1, [r7, #80]	@ 0x50
 8005b00:	f7ff bbf6 	b.w	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b04:	4930      	ldr	r1, [pc, #192]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005b06:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005b08:	f001 0103 	and.w	r1, r1, #3
 8005b0c:	2903      	cmp	r1, #3
 8005b0e:	f000 82ba 	beq.w	8006086 <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 8005b12:	2102      	movs	r1, #2
 8005b14:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005b18:	f7ff fb3e 	bl	8005198 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	f000 82b5 	beq.w	800608c <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b22:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 8005b26:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b28:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005b2c:	e616      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b2e:	4926      	ldr	r1, [pc, #152]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005b30:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005b32:	f001 0103 	and.w	r1, r1, #3
 8005b36:	2903      	cmp	r1, #3
 8005b38:	f000 82a2 	beq.w	8006080 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005b42:	f7ff fb29 	bl	8005198 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f040 82a6 	bne.w	8006098 <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b4c:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b50:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005b54:	e610      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b56:	481c      	ldr	r0, [pc, #112]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005b58:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005b5a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005b5e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005b60:	2d00      	cmp	r5, #0
 8005b62:	f43f ae64 	beq.w	800582e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 8005b66:	462e      	mov	r6, r5
 8005b68:	e668      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6a:	4f17      	ldr	r7, [pc, #92]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005b6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b6e:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8005b72:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005b74:	2d00      	cmp	r5, #0
 8005b76:	f47f ae76 	bne.w	8005866 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b7a:	4d13      	ldr	r5, [pc, #76]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005b7c:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8005b7e:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8005b82:	4301      	orrs	r1, r0
 8005b84:	6569      	str	r1, [r5, #84]	@ 0x54
 8005b86:	e66d      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 8005b88:	462e      	mov	r6, r5
 8005b8a:	e634      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 8005b8c:	462e      	mov	r6, r5
 8005b8e:	e4d0      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8005b90:	462e      	mov	r6, r5
 8005b92:	e445      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b94:	4f0c      	ldr	r7, [pc, #48]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005b96:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005b98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005b9a:	f021 0103 	bic.w	r1, r1, #3
 8005b9e:	4301      	orrs	r1, r0
 8005ba0:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8005ba2:	e4de      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ba4:	4f08      	ldr	r7, [pc, #32]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005ba6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005ba8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005baa:	f021 0107 	bic.w	r1, r1, #7
 8005bae:	4301      	orrs	r1, r0
 8005bb0:	6579      	str	r1, [r7, #84]	@ 0x54
 8005bb2:	e52c      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 8005bb4:	462e      	mov	r6, r5
 8005bb6:	e577      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 8005bb8:	462e      	mov	r6, r5
 8005bba:	e4aa      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 8005bbc:	462e      	mov	r6, r5
 8005bbe:	e59c      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 8005bc0:	462e      	mov	r6, r5
 8005bc2:	e606      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 8005bc4:	462e      	mov	r6, r5
 8005bc6:	e5c1      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	58024800 	.word	0x58024800
      status = ret;
 8005bd0:	462e      	mov	r6, r5
 8005bd2:	e475      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 8005bd4:	462e      	mov	r6, r5
 8005bd6:	e4f9      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bd8:	4fc2      	ldr	r7, [pc, #776]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005bda:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8005bde:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005be0:	f021 0107 	bic.w	r1, r1, #7
 8005be4:	4301      	orrs	r1, r0
 8005be6:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005be8:	e535      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 8005bea:	2900      	cmp	r1, #0
 8005bec:	f47f aef3 	bne.w	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8005bf0:	e7c0      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bf2:	49bc      	ldr	r1, [pc, #752]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005bf4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005bf6:	f001 0103 	and.w	r1, r1, #3
 8005bfa:	2903      	cmp	r1, #3
 8005bfc:	f000 8194 	beq.w	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8005c00:	2102      	movs	r1, #2
 8005c02:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005c06:	f7ff fac7 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005c0a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c0c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c10:	2d00      	cmp	r5, #0
 8005c12:	d1cf      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8005c14:	e540      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c16:	49b3      	ldr	r1, [pc, #716]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005c18:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005c1a:	f001 0103 	and.w	r1, r1, #3
 8005c1e:	2903      	cmp	r1, #3
 8005c20:	f000 81ba 	beq.w	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005c24:	2102      	movs	r1, #2
 8005c26:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005c2a:	f7ff fab5 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005c2e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c30:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c34:	2d00      	cmp	r5, #0
 8005c36:	d1c1      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x944>
 8005c38:	e557      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c3a:	49aa      	ldr	r1, [pc, #680]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005c3c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005c3e:	f001 0103 	and.w	r1, r1, #3
 8005c42:	2903      	cmp	r1, #3
 8005c44:	f000 818c 	beq.w	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005c48:	2102      	movs	r1, #2
 8005c4a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005c4e:	f7ff faa3 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005c52:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c54:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c58:	2d00      	cmp	r5, #0
 8005c5a:	d1b3      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8005c5c:	e56e      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c5e:	49a1      	ldr	r1, [pc, #644]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005c60:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005c62:	f001 0103 	and.w	r1, r1, #3
 8005c66:	2903      	cmp	r1, #3
 8005c68:	f000 81df 	beq.w	800602a <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 8005c6c:	2102      	movs	r1, #2
 8005c6e:	f104 0008 	add.w	r0, r4, #8
 8005c72:	f7ff fa21 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8005c76:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c78:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005c7c:	2d00      	cmp	r5, #0
 8005c7e:	d187      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8005c80:	f7ff bbc7 	b.w	8005412 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c84:	4997      	ldr	r1, [pc, #604]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005c86:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005c88:	f001 0103 	and.w	r1, r1, #3
 8005c8c:	2903      	cmp	r1, #3
 8005c8e:	f000 820a 	beq.w	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8005c92:	2102      	movs	r1, #2
 8005c94:	f104 0008 	add.w	r0, r4, #8
 8005c98:	f7ff fa0e 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8005c9c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c9e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	f47f ac5c 	bne.w	8005560 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005ca8:	e774      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005caa:	498e      	ldr	r1, [pc, #568]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005cac:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005cae:	f001 0103 	and.w	r1, r1, #3
 8005cb2:	2903      	cmp	r1, #3
 8005cb4:	f000 8146 	beq.w	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005cb8:	2101      	movs	r1, #1
 8005cba:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005cbe:	f7ff fa6b 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005cc2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cc4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005cc8:	2d00      	cmp	r5, #0
 8005cca:	d181      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8005ccc:	f7ff bbf1 	b.w	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cd0:	4984      	ldr	r1, [pc, #528]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005cd2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005cd4:	f001 0103 	and.w	r1, r1, #3
 8005cd8:	2903      	cmp	r1, #3
 8005cda:	f43f ad8a 	beq.w	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005cde:	2101      	movs	r1, #1
 8005ce0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005ce4:	f7ff fa58 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005ce8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005cea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	f47f af4a 	bne.w	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005cf4:	e6a9      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cf6:	497b      	ldr	r1, [pc, #492]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005cf8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005cfa:	f001 0103 	and.w	r1, r1, #3
 8005cfe:	2903      	cmp	r1, #3
 8005d00:	f43f ae7e 	beq.w	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8005d04:	2102      	movs	r1, #2
 8005d06:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005d0a:	f7ff fa45 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005d0e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d10:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	f47f af53 	bne.w	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8005d1a:	e552      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d1c:	4971      	ldr	r1, [pc, #452]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005d1e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005d20:	f001 0103 	and.w	r1, r1, #3
 8005d24:	2903      	cmp	r1, #3
 8005d26:	f000 8129 	beq.w	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005d30:	f7ff fa32 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005d34:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d36:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005d3a:	2d00      	cmp	r5, #0
 8005d3c:	f47f af3c 	bne.w	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8005d40:	f7ff bbdf 	b.w	8005502 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d44:	4867      	ldr	r0, [pc, #412]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005d46:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005d48:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005d4c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	f43f ab88 	beq.w	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 8005d54:	462e      	mov	r6, r5
 8005d56:	f7ff bb8c 	b.w	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5a:	4862      	ldr	r0, [pc, #392]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005d5c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005d5e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005d62:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	f43f ab38 	beq.w	80053da <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 8005d6a:	462e      	mov	r6, r5
 8005d6c:	f7ff bb3d 	b.w	80053ea <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d70:	495c      	ldr	r1, [pc, #368]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005d72:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005d74:	f001 0103 	and.w	r1, r1, #3
 8005d78:	2903      	cmp	r1, #3
 8005d7a:	f000 8125 	beq.w	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8005d7e:	2100      	movs	r1, #0
 8005d80:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005d84:	f7ff fa08 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005d88:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d8a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005d8e:	f7ff bb66 	b.w	800545e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d92:	4954      	ldr	r1, [pc, #336]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005d94:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005d96:	f001 0103 	and.w	r1, r1, #3
 8005d9a:	2903      	cmp	r1, #3
 8005d9c:	f000 813e 	beq.w	800601c <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8005da0:	2100      	movs	r1, #0
 8005da2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005da6:	f7ff f9f7 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005daa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005dac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	f43f aabd 	beq.w	8005330 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 8005db6:	462e      	mov	r6, r5
 8005db8:	f7ff bac1 	b.w	800533e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dbc:	4949      	ldr	r1, [pc, #292]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005dbe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005dc0:	f001 0103 	and.w	r1, r1, #3
 8005dc4:	2903      	cmp	r1, #3
 8005dc6:	f43f aa91 	beq.w	80052ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005dca:	2100      	movs	r1, #0
 8005dcc:	f104 0008 	add.w	r0, r4, #8
 8005dd0:	f7ff f972 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8005dd4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005dd6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005dda:	2d00      	cmp	r5, #0
 8005ddc:	f43f ae89 	beq.w	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 8005de0:	462e      	mov	r6, r5
 8005de2:	f7ff ba85 	b.w	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005de6:	493f      	ldr	r1, [pc, #252]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005de8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005dea:	f001 0103 	and.w	r1, r1, #3
 8005dee:	2903      	cmp	r1, #3
 8005df0:	f43f aa7c 	beq.w	80052ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005df4:	2100      	movs	r1, #0
 8005df6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005dfa:	f7ff f9cd 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005dfe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005e00:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005e04:	e672      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e06:	4937      	ldr	r1, [pc, #220]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005e08:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005e0a:	f001 0103 	and.w	r1, r1, #3
 8005e0e:	2903      	cmp	r1, #3
 8005e10:	f000 80f9 	beq.w	8006006 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005e14:	2100      	movs	r1, #0
 8005e16:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005e1a:	f7ff f9bd 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005e1e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e20:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005e24:	2d00      	cmp	r5, #0
 8005e26:	f43f aaad 	beq.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 8005e2a:	462e      	mov	r6, r5
 8005e2c:	f7ff bab2 	b.w	8005394 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e30:	492c      	ldr	r1, [pc, #176]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005e32:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005e34:	f001 0103 	and.w	r1, r1, #3
 8005e38:	2903      	cmp	r1, #3
 8005e3a:	f000 80d1 	beq.w	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8005e3e:	2100      	movs	r1, #0
 8005e40:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005e44:	f7ff f9a8 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005e48:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e4a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005e4e:	f7ff bac1 	b.w	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e52:	4924      	ldr	r1, [pc, #144]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005e54:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005e56:	f001 0103 	and.w	r1, r1, #3
 8005e5a:	2903      	cmp	r1, #3
 8005e5c:	f000 80c8 	beq.w	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8005e60:	2102      	movs	r1, #2
 8005e62:	3028      	adds	r0, #40	@ 0x28
 8005e64:	f7ff f998 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005e68:	4606      	mov	r6, r0
        break;
 8005e6a:	f7ff ba28 	b.w	80052be <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e6e:	481d      	ldr	r0, [pc, #116]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005e70:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005e72:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005e76:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8005e78:	f7ff ba81 	b.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e7c:	4819      	ldr	r0, [pc, #100]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005e7e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005e80:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005e84:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8005e86:	f7ff ba50 	b.w	800532a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e8a:	4d16      	ldr	r5, [pc, #88]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005e8c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8005e8e:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8005e92:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005e94:	f7ff ba17 	b.w	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e98:	4912      	ldr	r1, [pc, #72]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005e9a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005e9c:	f001 0103 	and.w	r1, r1, #3
 8005ea0:	2903      	cmp	r1, #3
 8005ea2:	f000 80e5 	beq.w	8006070 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005eac:	f7ff f974 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005eb0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005eb2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005eb6:	2d00      	cmp	r5, #0
 8005eb8:	f47f abcc 	bne.w	8005654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8005ebc:	e68c      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ebe:	4909      	ldr	r1, [pc, #36]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005ec0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005ec2:	f001 0103 	and.w	r1, r1, #3
 8005ec6:	2903      	cmp	r1, #3
 8005ec8:	f000 80d6 	beq.w	8006078 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8005ecc:	2101      	movs	r1, #1
 8005ece:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005ed2:	f7ff f961 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005ed6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ed8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005edc:	2d00      	cmp	r5, #0
 8005ede:	f47f ab95 	bne.w	800560c <HAL_RCCEx_PeriphCLKConfig+0x394>
 8005ee2:	e65f      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 8005ee4:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ee8:	4983      	ldr	r1, [pc, #524]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005eea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005eec:	f001 0103 	and.w	r1, r1, #3
 8005ef0:	2903      	cmp	r1, #3
 8005ef2:	f43f ab69 	beq.w	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005efc:	f7ff f94c 	bl	8005198 <RCCEx_PLL3_Config.part.0>
 8005f00:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f02:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005f06:	2d00      	cmp	r5, #0
 8005f08:	f47f ae64 	bne.w	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005f0c:	e58d      	b.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 8005f0e:	2001      	movs	r0, #1
}
 8005f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f14:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8005f18:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005f1c:	f43f abb9 	beq.w	8005692 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005f20:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8005f24:	f43f abb5 	beq.w	8005692 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 8005f28:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005f2a:	4635      	mov	r5, r6
 8005f2c:	f7ff bbbc 	b.w	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f30:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8005f34:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8005f38:	f43f aab8 	beq.w	80054ac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005f3c:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8005f40:	f43f aab4 	beq.w	80054ac <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 8005f44:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005f46:	4635      	mov	r5, r6
 8005f48:	f7ff baba 	b.w	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005f4c:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8005f50:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005f54:	f43f abef 	beq.w	8005736 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005f58:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8005f5c:	f43f abeb 	beq.w	8005736 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 8005f60:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005f62:	4635      	mov	r5, r6
 8005f64:	f7ff bbf2 	b.w	800574c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f68:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8005f6c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005f70:	f43f aac4 	beq.w	80054fc <HAL_RCCEx_PeriphCLKConfig+0x284>
 8005f74:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8005f78:	f43f aac0 	beq.w	80054fc <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 8005f7c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005f7e:	4635      	mov	r5, r6
 8005f80:	f7ff bac7 	b.w	8005512 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f84:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8005f88:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8005f8c:	f43f abaa 	beq.w	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8005f90:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8005f94:	f43f aba6 	beq.w	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 8005f98:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005f9a:	4635      	mov	r5, r6
 8005f9c:	f7ff bbad 	b.w	80056fa <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 8005fa0:	2501      	movs	r5, #1
 8005fa2:	e4e2      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005fa4:	0691      	lsls	r1, r2, #26
 8005fa6:	d5b2      	bpl.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 8005fa8:	2501      	movs	r5, #1
 8005faa:	e4f2      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 8005fac:	2501      	movs	r5, #1
 8005fae:	e4a9      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005fb0:	2501      	movs	r5, #1
 8005fb2:	e4b8      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8005fb4:	2501      	movs	r5, #1
 8005fb6:	e4c7      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005fb8:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8005fbc:	f43f aa4f 	beq.w	800545e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8005fc0:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8005fc4:	f43f aa4b 	beq.w	800545e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 8005fc8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005fca:	4635      	mov	r5, r6
 8005fcc:	f7ff ba51 	b.w	8005472 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005fd0:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8005fd4:	f43f a9fe 	beq.w	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005fd8:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8005fdc:	f43f a9fa 	beq.w	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 8005fe0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005fe2:	4635      	mov	r5, r6
 8005fe4:	f7ff ba01 	b.w	80053ea <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005fe8:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8005fec:	f43f a96b 	beq.w	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 8005ff0:	2601      	movs	r6, #1
 8005ff2:	f7ff b96f 	b.w	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ff6:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8005ffa:	f43f a9c0 	beq.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ffe:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8006002:	f43f a9bc 	beq.w	800537e <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 8006006:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8006008:	4635      	mov	r5, r6
 800600a:	f7ff b9c3 	b.w	8005394 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 800600e:	29c0      	cmp	r1, #192	@ 0xc0
 8006010:	f43f a98b 	beq.w	800532a <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8006014:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006018:	f43f a987 	beq.w	800532a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 800601c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800601e:	4635      	mov	r5, r6
 8006020:	f7ff b98d 	b.w	800533e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 8006024:	2930      	cmp	r1, #48	@ 0x30
 8006026:	f43f a9f1 	beq.w	800540c <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 800602a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800602c:	4635      	mov	r5, r6
 800602e:	f7ff b9f7 	b.w	8005420 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 8006032:	2503      	movs	r5, #3
      status = ret;
 8006034:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006036:	e9d4 3200 	ldrd	r3, r2, [r4]
 800603a:	f7ff ba95 	b.w	8005568 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800603e:	6863      	ldr	r3, [r4, #4]
 8006040:	069a      	lsls	r2, r3, #26
 8006042:	f57f af64 	bpl.w	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006046:	4605      	mov	r5, r0
 8006048:	e4a3      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800604a:	492b      	ldr	r1, [pc, #172]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 800604c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800604e:	f001 0103 	and.w	r1, r1, #3
 8006052:	2903      	cmp	r1, #3
 8006054:	f43f aa6b 	beq.w	800552e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8006058:	2101      	movs	r1, #1
 800605a:	f104 0008 	add.w	r0, r4, #8
 800605e:	f7ff f82b 	bl	80050b8 <RCCEx_PLL2_Config.part.0>
 8006062:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006064:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006068:	2d00      	cmp	r5, #0
 800606a:	f47f ad8f 	bne.w	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x914>
 800606e:	e4bf      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 8006070:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8006072:	4635      	mov	r5, r6
 8006074:	f7ff baef 	b.w	8005656 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 8006078:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800607a:	4635      	mov	r5, r6
 800607c:	f7ff bac7 	b.w	800560e <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 8006080:	2601      	movs	r6, #1
 8006082:	f7ff bb79 	b.w	8005778 <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 8006086:	2601      	movs	r6, #1
 8006088:	f7ff bb68 	b.w	800575c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800608c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006090:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006094:	f7ff bb62 	b.w	800575c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006098:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 800609c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800609e:	e9d4 3200 	ldrd	r3, r2, [r4]
 80060a2:	f7ff bb69 	b.w	8005778 <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 80060a6:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80060a8:	4635      	mov	r5, r6
 80060aa:	f7ff ba5a 	b.w	8005562 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 80060ae:	f7fb fdc3 	bl	8001c38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060b2:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 80060b6:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b8:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060bc:	e004      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060be:	f7fb fdbb 	bl	8001c38 <HAL_GetTick>
 80060c2:	1bc0      	subs	r0, r0, r7
 80060c4:	4548      	cmp	r0, r9
 80060c6:	d810      	bhi.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060c8:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80060cc:	079b      	lsls	r3, r3, #30
 80060ce:	d5f6      	bpl.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060d0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80060d4:	e4f0      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80060d6:	4808      	ldr	r0, [pc, #32]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 80060d8:	4a08      	ldr	r2, [pc, #32]	@ (80060fc <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 80060da:	6901      	ldr	r1, [r0, #16]
 80060dc:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80060e0:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 80060e4:	430a      	orrs	r2, r1
 80060e6:	6102      	str	r2, [r0, #16]
 80060e8:	e4f1      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 80060ea:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060ec:	e9d4 3200 	ldrd	r3, r2, [r4]
 80060f0:	4635      	mov	r5, r6
 80060f2:	f7ff ba39 	b.w	8005568 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80060f6:	bf00      	nop
 80060f8:	58024400 	.word	0x58024400
 80060fc:	00ffffcf 	.word	0x00ffffcf

08006100 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006100:	4a47      	ldr	r2, [pc, #284]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8006102:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006104:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006106:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006108:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 800610a:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800610e:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006112:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8006114:	d05b      	beq.n	80061ce <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006116:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800611a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800611e:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006122:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006126:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800612a:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800612c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006130:	ee06 1a90 	vmov	s13, r1
 8006134:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8006138:	d003      	beq.n	8006142 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 800613a:	2c02      	cmp	r4, #2
 800613c:	d06a      	beq.n	8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 800613e:	2c00      	cmp	r4, #0
 8006140:	d04a      	beq.n	80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006142:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006146:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800614a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800614c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800615c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006164:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006168:	4a2d      	ldr	r2, [pc, #180]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 800616a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800616e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8006170:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006174:	ee07 3a10 	vmov	s14, r3
 8006178:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800617c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800617e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006182:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006186:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800618a:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800618e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8006190:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006194:	ee07 3a10 	vmov	s14, r3
 8006198:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800619c:	ee37 7a06 	vadd.f32	s14, s14, s12
 80061a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061a4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80061a8:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061ac:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80061ae:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80061b2:	ee06 3a90 	vmov	s13, r3
 80061b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80061ba:	ee76 6a86 	vadd.f32	s13, s13, s12
 80061be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061c2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80061c6:	ee17 3a90 	vmov	r3, s15
 80061ca:	6083      	str	r3, [r0, #8]
}
 80061cc:	4770      	bx	lr
 80061ce:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061d0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061d4:	6083      	str	r3, [r0, #8]
}
 80061d6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061d8:	6813      	ldr	r3, [r2, #0]
 80061da:	069b      	lsls	r3, r3, #26
 80061dc:	d51d      	bpl.n	800621a <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061de:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80061e4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061e6:	4910      	ldr	r1, [pc, #64]	@ (8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 80061e8:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061f0:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061f2:	ee06 3a10 	vmov	s12, r3
 80061f6:	ee05 1a90 	vmov	s11, r1
 80061fa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80061fe:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006202:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006206:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800620a:	ee36 7a26 	vadd.f32	s14, s12, s13
 800620e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006212:	e7a9      	b.n	8006168 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006214:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800622c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8006218:	e795      	b.n	8006146 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800621a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 800621e:	e792      	b.n	8006146 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8006220:	58024400 	.word	0x58024400
 8006224:	4a742400 	.word	0x4a742400
 8006228:	03d09000 	.word	0x03d09000
 800622c:	4bbebc20 	.word	0x4bbebc20
 8006230:	4c742400 	.word	0x4c742400

08006234 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006234:	4a47      	ldr	r2, [pc, #284]	@ (8006354 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8006236:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006238:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800623a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800623c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 800623e:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006242:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006246:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8006248:	d05b      	beq.n	8006302 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800624a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800624e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006252:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006256:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800625a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800625e:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006264:	ee06 1a90 	vmov	s13, r1
 8006268:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800626c:	d003      	beq.n	8006276 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 800626e:	2c02      	cmp	r4, #2
 8006270:	d06a      	beq.n	8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 8006272:	2c00      	cmp	r4, #0
 8006274:	d04a      	beq.n	800630c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006276:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800627a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800627e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006284:	ee07 3a90 	vmov	s15, r3
 8006288:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800628c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006290:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006298:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800629c:	4a2d      	ldr	r2, [pc, #180]	@ (8006354 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 800629e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80062a2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80062a4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80062a8:	ee07 3a10 	vmov	s14, r3
 80062ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80062b0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80062b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80062b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062ba:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80062be:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80062c2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80062c4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80062c8:	ee07 3a10 	vmov	s14, r3
 80062cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80062d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80062d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062d8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80062dc:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80062e0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80062e2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80062e6:	ee06 3a90 	vmov	s13, r3
 80062ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80062ee:	ee76 6a86 	vadd.f32	s13, s13, s12
 80062f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80062f6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80062fa:	ee17 3a90 	vmov	r3, s15
 80062fe:	6083      	str	r3, [r0, #8]
}
 8006300:	4770      	bx	lr
 8006302:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006304:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006308:	6083      	str	r3, [r0, #8]
}
 800630a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800630c:	6813      	ldr	r3, [r2, #0]
 800630e:	069b      	lsls	r3, r3, #26
 8006310:	d51d      	bpl.n	800634e <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006312:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006314:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006318:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800631a:	4910      	ldr	r1, [pc, #64]	@ (800635c <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 800631c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006320:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006324:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006326:	ee06 3a10 	vmov	s12, r3
 800632a:	ee05 1a90 	vmov	s11, r1
 800632e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006332:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006336:	ee36 6a27 	vadd.f32	s12, s12, s15
 800633a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800633e:	ee36 7a26 	vadd.f32	s14, s12, s13
 8006342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006346:	e7a9      	b.n	800629c <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006348:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006360 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 800634c:	e795      	b.n	800627a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800634e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8006352:	e792      	b.n	800627a <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8006354:	58024400 	.word	0x58024400
 8006358:	4a742400 	.word	0x4a742400
 800635c:	03d09000 	.word	0x03d09000
 8006360:	4bbebc20 	.word	0x4bbebc20
 8006364:	4c742400 	.word	0x4c742400

08006368 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006368:	4a47      	ldr	r2, [pc, #284]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 800636a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800636c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800636e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006370:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 8006372:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006376:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800637a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 800637c:	d05b      	beq.n	8006436 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800637e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006382:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006386:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800638a:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800638e:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8006392:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006398:	ee06 1a90 	vmov	s13, r1
 800639c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80063a0:	d04e      	beq.n	8006440 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 80063a2:	2c02      	cmp	r4, #2
 80063a4:	d06d      	beq.n	8006482 <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 80063a6:	2c00      	cmp	r4, #0
 80063a8:	d04d      	beq.n	8006446 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063aa:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800648c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80063ae:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80063b2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80063b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80063c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063c4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80063c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063cc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80063d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006488 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 80063d2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80063d6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80063d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80063dc:	ee07 3a10 	vmov	s14, r3
 80063e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80063e4:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80063e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80063ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063ee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80063f2:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80063f6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80063f8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80063fc:	ee07 3a10 	vmov	s14, r3
 8006400:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006404:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006408:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800640c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006410:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006414:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006416:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800641a:	ee06 3a90 	vmov	s13, r3
 800641e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006422:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006426:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800642a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800642e:	ee17 3a90 	vmov	r3, s15
 8006432:	6083      	str	r3, [r0, #8]
}
 8006434:	4770      	bx	lr
 8006436:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006438:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800643c:	6083      	str	r3, [r0, #8]
}
 800643e:	4770      	bx	lr
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006440:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8006490 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 8006444:	e7b3      	b.n	80063ae <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	069b      	lsls	r3, r3, #26
 800644a:	d5ae      	bpl.n	80063aa <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800644c:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800644e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006452:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006454:	490f      	ldr	r1, [pc, #60]	@ (8006494 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>)
 8006456:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800645a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800645e:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006460:	ee06 3a10 	vmov	s12, r3
 8006464:	ee05 1a90 	vmov	s11, r1
 8006468:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800646c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006470:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006474:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8006478:	ee36 7a26 	vadd.f32	s14, s12, s13
 800647c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006480:	e7a6      	b.n	80063d0 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006482:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006498 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8006486:	e792      	b.n	80063ae <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8006488:	58024400 	.word	0x58024400
 800648c:	4c742400 	.word	0x4c742400
 8006490:	4a742400 	.word	0x4a742400
 8006494:	03d09000 	.word	0x03d09000
 8006498:	4bbebc20 	.word	0x4bbebc20

0800649c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800649c:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80064a0:	430b      	orrs	r3, r1
{
 80064a2:	b500      	push	{lr}
 80064a4:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064a6:	d04c      	beq.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80064a8:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 80064ac:	430b      	orrs	r3, r1
 80064ae:	d036      	beq.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80064b0:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80064b4:	430b      	orrs	r3, r1
 80064b6:	d06c      	beq.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80064b8:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 80064bc:	430b      	orrs	r3, r1
 80064be:	d04b      	beq.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80064c0:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 80064c4:	430b      	orrs	r3, r1
 80064c6:	f000 80b6 	beq.w	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80064ca:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 80064ce:	430b      	orrs	r3, r1
 80064d0:	f000 80ec 	beq.w	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80064d4:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 80064d8:	430b      	orrs	r3, r1
 80064da:	d069      	beq.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80064dc:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 80064e0:	430b      	orrs	r3, r1
 80064e2:	f000 80d6 	beq.w	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80064e6:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 80064ea:	430b      	orrs	r3, r1
 80064ec:	f000 8109 	beq.w	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80064f0:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 80064f4:	4308      	orrs	r0, r1
 80064f6:	d120      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80064f8:	4a95      	ldr	r2, [pc, #596]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064fa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80064fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8006500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006504:	f000 80aa 	beq.w	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8006508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800650c:	f000 8116 	beq.w	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8006510:	b99b      	cbnz	r3, 800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006512:	6810      	ldr	r0, [r2, #0]
 8006514:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8006518:	d047      	beq.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 800651a:	488e      	ldr	r0, [pc, #568]	@ (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
  return frequency;
 800651c:	e045      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800651e:	4a8c      	ldr	r2, [pc, #560]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006520:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006522:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 8006526:	2b80      	cmp	r3, #128	@ 0x80
 8006528:	f000 8093 	beq.w	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800652c:	f240 808b 	bls.w	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006530:	2bc0      	cmp	r3, #192	@ 0xc0
 8006532:	d039      	beq.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006538:	d05c      	beq.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
          frequency = 0;
 800653a:	2000      	movs	r0, #0
}
 800653c:	b005      	add	sp, #20
 800653e:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006542:	4b83      	ldr	r3, [pc, #524]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006546:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800654a:	2b04      	cmp	r3, #4
 800654c:	d8f5      	bhi.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800654e:	e8df f003 	tbb	[pc, r3]
 8006552:	3c68      	.short	0x3c68
 8006554:	2b46      	.short	0x2b46
 8006556:	50          	.byte	0x50
 8006557:	00          	.byte	0x00
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006558:	4a7d      	ldr	r2, [pc, #500]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800655a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800655c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 8006560:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006564:	d075      	beq.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8006566:	d96e      	bls.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006568:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800656c:	d01c      	beq.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800656e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006572:	d1e2      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006574:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006576:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006578:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800657c:	0752      	lsls	r2, r2, #29
 800657e:	d541      	bpl.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8006580:	2b00      	cmp	r3, #0
 8006582:	d13f      	bne.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006584:	4b72      	ldr	r3, [pc, #456]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006586:	4874      	ldr	r0, [pc, #464]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800658e:	40d8      	lsrs	r0, r3
 8006590:	e00b      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006592:	4a6f      	ldr	r2, [pc, #444]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006594:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8006596:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 800659a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800659e:	d058      	beq.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80065a0:	d951      	bls.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80065a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80065a6:	d15e      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 80065a8:	486c      	ldr	r0, [pc, #432]	@ (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 80065aa:	b005      	add	sp, #20
 80065ac:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80065b0:	4a67      	ldr	r2, [pc, #412]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065b2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80065b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 80065b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065bc:	f000 80df 	beq.w	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 80065c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065c4:	d0d6      	beq.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1b7      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065ca:	4b61      	ldr	r3, [pc, #388]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80065d2:	d0ea      	beq.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065d4:	a801      	add	r0, sp, #4
 80065d6:	f7ff fd93 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065da:	9801      	ldr	r0, [sp, #4]
 80065dc:	e7e5      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065de:	4b5c      	ldr	r3, [pc, #368]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80065e6:	d0e0      	beq.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065e8:	a801      	add	r0, sp, #4
 80065ea:	f7ff fe23 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065ee:	9801      	ldr	r0, [sp, #4]
 80065f0:	e7db      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065f2:	4a57      	ldr	r2, [pc, #348]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065f4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065f6:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065fc:	0749      	lsls	r1, r1, #29
 80065fe:	d501      	bpl.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d038      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006604:	4a52      	ldr	r2, [pc, #328]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	05d0      	lsls	r0, r2, #23
 800660a:	d502      	bpl.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800660c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006610:	d067      	beq.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006612:	4a4f      	ldr	r2, [pc, #316]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	0391      	lsls	r1, r2, #14
 8006618:	d58f      	bpl.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800661a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800661e:	d18c      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8006620:	e77b      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006622:	4b4b      	ldr	r3, [pc, #300]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800662a:	d0be      	beq.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800662c:	a801      	add	r0, sp, #4
 800662e:	f7ff fe9b 	bl	8006368 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006632:	9802      	ldr	r0, [sp, #8]
 8006634:	e7b9      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006636:	4a46      	ldr	r2, [pc, #280]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006638:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800663a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 800663e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006642:	d006      	beq.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8006644:	d81d      	bhi.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006646:	b14b      	cbz	r3, 800665c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006648:	6810      	ldr	r0, [r2, #0]
 800664a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800664e:	d0ac      	beq.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006650:	e7c0      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006652:	6810      	ldr	r0, [r2, #0]
 8006654:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006658:	d0a7      	beq.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800665a:	e7c5      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800665c:	6810      	ldr	r0, [r2, #0]
 800665e:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8006662:	d0a2      	beq.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006664:	e7e2      	b.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
    switch (saiclocksource)
 8006666:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800666a:	d0c3      	beq.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800666c:	e765      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800666e:	6810      	ldr	r0, [r2, #0]
 8006670:	f010 0004 	ands.w	r0, r0, #4
 8006674:	d099      	beq.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006676:	6813      	ldr	r3, [r2, #0]
 8006678:	4837      	ldr	r0, [pc, #220]	@ (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800667a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800667e:	40d8      	lsrs	r0, r3
 8006680:	e793      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8006682:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006686:	d08f      	beq.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800668c:	f43f af72 	beq.w	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006690:	e753      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006692:	4b2f      	ldr	r3, [pc, #188]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006694:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8006696:	03d2      	lsls	r2, r2, #15
 8006698:	d5c4      	bpl.n	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800669a:	6818      	ldr	r0, [r3, #0]
 800669c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80066a0:	d083      	beq.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066a2:	a801      	add	r0, sp, #4
 80066a4:	f7ff fd2c 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80066a8:	9803      	ldr	r0, [sp, #12]
 80066aa:	e77e      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80066ac:	4a28      	ldr	r2, [pc, #160]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066ae:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80066b0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 80066b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066b8:	d0d9      	beq.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 80066ba:	d814      	bhi.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 80066bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c0:	d03c      	beq.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80066c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066c6:	d04f      	beq.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f47f af36 	bne.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
}
 80066ce:	b005      	add	sp, #20
 80066d0:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80066d4:	f7fe bca8 	b.w	8005028 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80066d8:	6810      	ldr	r0, [r2, #0]
 80066da:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 80066de:	f43f af64 	beq.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 80066e2:	481f      	ldr	r0, [pc, #124]	@ (8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80066e4:	e761      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80066e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066ea:	d0f5      	beq.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 80066ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066f0:	f47f af23 	bne.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066f4:	4b16      	ldr	r3, [pc, #88]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80066fc:	f43f af55 	beq.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006700:	e70b      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006702:	4b13      	ldr	r3, [pc, #76]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006706:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 800670a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800670e:	d04e      	beq.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8006710:	d83f      	bhi.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8006712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006716:	d043      	beq.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800671c:	d024      	beq.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800671e:	2b00      	cmp	r3, #0
 8006720:	f47f af0b 	bne.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006724:	f7fe fc40 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8006728:	4b09      	ldr	r3, [pc, #36]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800672a:	4a0e      	ldr	r2, [pc, #56]	@ (8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006732:	5cd3      	ldrb	r3, [r2, r3]
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	40d8      	lsrs	r0, r3
        break;
 800673a:	e736      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800673c:	6810      	ldr	r0, [r2, #0]
 800673e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006742:	f43f af32 	beq.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006746:	a801      	add	r0, sp, #4
 8006748:	f7ff fcda 	bl	8006100 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800674c:	9802      	ldr	r0, [sp, #8]
 800674e:	e72c      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006750:	58024400 	.word	0x58024400
 8006754:	017d7840 	.word	0x017d7840
 8006758:	03d09000 	.word	0x03d09000
 800675c:	00bb8000 	.word	0x00bb8000
 8006760:	003d0900 	.word	0x003d0900
 8006764:	0806d460 	.word	0x0806d460
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006768:	4b1a      	ldr	r3, [pc, #104]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006770:	f43f af1b 	beq.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006774:	a801      	add	r0, sp, #4
 8006776:	f7ff fd5d 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800677a:	9802      	ldr	r0, [sp, #8]
 800677c:	e715      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800677e:	6810      	ldr	r0, [r2, #0]
 8006780:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8006784:	f43f af11 	beq.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006788:	a801      	add	r0, sp, #4
 800678a:	f7ff fd53 	bl	8006234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800678e:	9803      	ldr	r0, [sp, #12]
 8006790:	e70b      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8006792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006796:	d016      	beq.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800679c:	d0aa      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800679e:	e6cc      	b.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067a0:	4b0c      	ldr	r3, [pc, #48]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80067a8:	f43f aeff 	beq.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80067ac:	e7cb      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067ae:	4b09      	ldr	r3, [pc, #36]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	f010 0004 	ands.w	r0, r0, #4
 80067b6:	f43f aef8 	beq.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4806      	ldr	r0, [pc, #24]	@ (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80067be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80067c2:	40d8      	lsrs	r0, r3
 80067c4:	e6f1      	b.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80067c6:	4b03      	ldr	r3, [pc, #12]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 80067ce:	f43f aeec 	beq.w	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80067d2:	e786      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 80067d4:	58024400 	.word	0x58024400
 80067d8:	03d09000 	.word	0x03d09000

080067dc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067dc:	2800      	cmp	r0, #0
 80067de:	f000 8095 	beq.w	800690c <HAL_TIM_Base_Init+0x130>
{
 80067e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80067e8:	4604      	mov	r4, r0
 80067ea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 8087 	beq.w	8006902 <HAL_TIM_Base_Init+0x126>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f4:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80067f6:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067f8:	4945      	ldr	r1, [pc, #276]	@ (8006910 <HAL_TIM_Base_Init+0x134>)
 80067fa:	4d46      	ldr	r5, [pc, #280]	@ (8006914 <HAL_TIM_Base_Init+0x138>)
 80067fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006800:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006808:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 800680c:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800680e:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006812:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006814:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006818:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800681a:	ea4f 1151 	mov.w	r1, r1, lsr #5

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800681e:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006820:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8006824:	d01f      	beq.n	8006866 <HAL_TIM_Base_Init+0x8a>
 8006826:	b9f1      	cbnz	r1, 8006866 <HAL_TIM_Base_Init+0x8a>
 8006828:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 8006924 <HAL_TIM_Base_Init+0x148>
 800682c:	4563      	cmp	r3, ip
 800682e:	d050      	beq.n	80068d2 <HAL_TIM_Base_Init+0xf6>
 8006830:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8006834:	4563      	cmp	r3, ip
 8006836:	d04c      	beq.n	80068d2 <HAL_TIM_Base_Init+0xf6>
 8006838:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800683c:	4563      	cmp	r3, ip
 800683e:	d012      	beq.n	8006866 <HAL_TIM_Base_Init+0x8a>
 8006840:	f1be 0f00 	cmp.w	lr, #0
 8006844:	d10f      	bne.n	8006866 <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006846:	4d34      	ldr	r5, [pc, #208]	@ (8006918 <HAL_TIM_Base_Init+0x13c>)
 8006848:	4934      	ldr	r1, [pc, #208]	@ (800691c <HAL_TIM_Base_Init+0x140>)
 800684a:	428b      	cmp	r3, r1
 800684c:	bf18      	it	ne
 800684e:	42ab      	cmpne	r3, r5
 8006850:	d043      	beq.n	80068da <HAL_TIM_Base_Init+0xfe>
 8006852:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006856:	428b      	cmp	r3, r1
 8006858:	d03f      	beq.n	80068da <HAL_TIM_Base_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800685a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800685e:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006860:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006862:	4310      	orrs	r0, r2

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006864:	e014      	b.n	8006890 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 8006866:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006868:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686c:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8006870:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006872:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006874:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 8006876:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800687a:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800687e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006882:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006884:	b911      	cbnz	r1, 800688c <HAL_TIM_Base_Init+0xb0>
 8006886:	f1be 0f00 	cmp.w	lr, #0
 800688a:	d02f      	beq.n	80068ec <HAL_TIM_Base_Init+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800688c:	6962      	ldr	r2, [r4, #20]
 800688e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006890:	6819      	ldr	r1, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006892:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006894:	f041 0104 	orr.w	r1, r1, #4
 8006898:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 800689a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800689c:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800689e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068a0:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 80068a8:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 80068ac:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 80068b0:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 80068b4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 80068b8:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068bc:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 80068c0:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 80068c4:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 80068c8:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80068cc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 80068d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80068d6:	68a1      	ldr	r1, [r4, #8]
 80068d8:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068da:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80068dc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068e0:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068e2:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80068e4:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068ea:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ec:	490c      	ldr	r1, [pc, #48]	@ (8006920 <HAL_TIM_Base_Init+0x144>)
 80068ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006918 <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068f0:	4293      	cmp	r3, r2
 80068f2:	bf18      	it	ne
 80068f4:	428b      	cmpne	r3, r1
 80068f6:	d0c9      	beq.n	800688c <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d0c5      	beq.n	800688c <HAL_TIM_Base_Init+0xb0>
 8006900:	e7c6      	b.n	8006890 <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 8006902:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006906:	f7fb f803 	bl	8001910 <HAL_TIM_Base_MspInit>
 800690a:	e773      	b.n	80067f4 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 800690c:	2001      	movs	r0, #1
}
 800690e:	4770      	bx	lr
 8006910:	40010000 	.word	0x40010000
 8006914:	40010400 	.word	0x40010400
 8006918:	40014000 	.word	0x40014000
 800691c:	40014400 	.word	0x40014400
 8006920:	40014800 	.word	0x40014800
 8006924:	40000400 	.word	0x40000400

08006928 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006928:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800692c:	2b01      	cmp	r3, #1
 800692e:	d139      	bne.n	80069a4 <HAL_TIM_Base_Start+0x7c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006930:	6802      	ldr	r2, [r0, #0]
 8006932:	4b1d      	ldr	r3, [pc, #116]	@ (80069a8 <HAL_TIM_Base_Start+0x80>)
 8006934:	491d      	ldr	r1, [pc, #116]	@ (80069ac <HAL_TIM_Base_Start+0x84>)
 8006936:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800693a:	bf18      	it	ne
 800693c:	429a      	cmpne	r2, r3
{
 800693e:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006940:	bf0c      	ite	eq
 8006942:	2301      	moveq	r3, #1
 8006944:	2300      	movne	r3, #0
 8006946:	4d1a      	ldr	r5, [pc, #104]	@ (80069b0 <HAL_TIM_Base_Start+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006948:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694a:	42aa      	cmp	r2, r5
 800694c:	bf08      	it	eq
 800694e:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006952:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006956:	4c17      	ldr	r4, [pc, #92]	@ (80069b4 <HAL_TIM_Base_Start+0x8c>)
 8006958:	428a      	cmp	r2, r1
 800695a:	bf08      	it	eq
 800695c:	f043 0301 	orreq.w	r3, r3, #1
 8006960:	4815      	ldr	r0, [pc, #84]	@ (80069b8 <HAL_TIM_Base_Start+0x90>)
 8006962:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8006966:	42a2      	cmp	r2, r4
 8006968:	bf08      	it	eq
 800696a:	f043 0301 	orreq.w	r3, r3, #1
 800696e:	4282      	cmp	r2, r0
 8006970:	bf08      	it	eq
 8006972:	f043 0301 	orreq.w	r3, r3, #1
 8006976:	428a      	cmp	r2, r1
 8006978:	bf08      	it	eq
 800697a:	f043 0301 	orreq.w	r3, r3, #1
 800697e:	b913      	cbnz	r3, 8006986 <HAL_TIM_Base_Start+0x5e>
 8006980:	4b0e      	ldr	r3, [pc, #56]	@ (80069bc <HAL_TIM_Base_Start+0x94>)
 8006982:	429a      	cmp	r2, r3
 8006984:	d107      	bne.n	8006996 <HAL_TIM_Base_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006986:	6891      	ldr	r1, [r2, #8]
 8006988:	4b0d      	ldr	r3, [pc, #52]	@ (80069c0 <HAL_TIM_Base_Start+0x98>)
 800698a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800698c:	2b06      	cmp	r3, #6
 800698e:	d006      	beq.n	800699e <HAL_TIM_Base_Start+0x76>
 8006990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006994:	d003      	beq.n	800699e <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 8006996:	6813      	ldr	r3, [r2, #0]
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800699e:	2000      	movs	r0, #0
}
 80069a0:	bc30      	pop	{r4, r5}
 80069a2:	4770      	bx	lr
    return HAL_ERROR;
 80069a4:	2001      	movs	r0, #1
}
 80069a6:	4770      	bx	lr
 80069a8:	40010000 	.word	0x40010000
 80069ac:	40000800 	.word	0x40000800
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000c00 	.word	0x40000c00
 80069b8:	40010400 	.word	0x40010400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	00010007 	.word	0x00010007

080069c4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80069c4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80069c8:	2a01      	cmp	r2, #1
 80069ca:	d06d      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0xe4>
  tmpsmcr = htim->Instance->SMCR;
 80069cc:	6802      	ldr	r2, [r0, #0]
 80069ce:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80069d0:	2001      	movs	r0, #1
{
 80069d2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80069d4:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 80069d6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80069da:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069de:	4c59      	ldr	r4, [pc, #356]	@ (8006b44 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 80069e0:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069e2:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 80069e4:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80069e6:	680c      	ldr	r4, [r1, #0]
 80069e8:	2c70      	cmp	r4, #112	@ 0x70
 80069ea:	f000 8087 	beq.w	8006afc <HAL_TIM_ConfigClockSource+0x138>
 80069ee:	d825      	bhi.n	8006a3c <HAL_TIM_ConfigClockSource+0x78>
 80069f0:	2c50      	cmp	r4, #80	@ 0x50
 80069f2:	d05b      	beq.n	8006aac <HAL_TIM_ConfigClockSource+0xe8>
 80069f4:	d82b      	bhi.n	8006a4e <HAL_TIM_ConfigClockSource+0x8a>
 80069f6:	2c40      	cmp	r4, #64	@ 0x40
 80069f8:	f040 8090 	bne.w	8006b1c <HAL_TIM_ConfigClockSource+0x158>
                               sClockSourceConfig->ClockPolarity,
 80069fc:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80069fe:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a00:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a02:	6a10      	ldr	r0, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a04:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a08:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8006a0c:	430c      	orrs	r4, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a0e:	494e      	ldr	r1, [pc, #312]	@ (8006b48 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a10:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a12:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a14:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a18:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006a1c:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006a1e:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006a20:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a22:	4001      	ands	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a24:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a28:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006a2c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006a2e:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8006a30:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006a38:	bc30      	pop	{r4, r5}
 8006a3a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006a3c:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8006a40:	d04c      	beq.n	8006adc <HAL_TIM_ConfigClockSource+0x118>
 8006a42:	d81f      	bhi.n	8006a84 <HAL_TIM_ConfigClockSource+0xc0>
 8006a44:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 8006a48:	bf18      	it	ne
 8006a4a:	2001      	movne	r0, #1
 8006a4c:	e7ee      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x68>
 8006a4e:	2c60      	cmp	r4, #96	@ 0x60
 8006a50:	d1ec      	bne.n	8006a2c <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 8006a52:	6a10      	ldr	r0, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8006a54:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a56:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
                               sClockSourceConfig->ClockFilter);
 8006a5a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a5c:	493a      	ldr	r1, [pc, #232]	@ (8006b48 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a5e:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a62:	6a14      	ldr	r4, [r2, #32]
 8006a64:	f024 0410 	bic.w	r4, r4, #16
 8006a68:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a6a:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a6c:	f424 4470 	bic.w	r4, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a70:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006a74:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 8006a76:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006a78:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a7a:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a7c:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006a80:	6091      	str	r1, [r2, #8]
}
 8006a82:	e7d2      	b.n	8006a2a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8006a84:	4931      	ldr	r1, [pc, #196]	@ (8006b4c <HAL_TIM_ConfigClockSource+0x188>)
 8006a86:	428c      	cmp	r4, r1
 8006a88:	d006      	beq.n	8006a98 <HAL_TIM_ConfigClockSource+0xd4>
 8006a8a:	d94f      	bls.n	8006b2c <HAL_TIM_ConfigClockSource+0x168>
 8006a8c:	4930      	ldr	r1, [pc, #192]	@ (8006b50 <HAL_TIM_ConfigClockSource+0x18c>)
 8006a8e:	428c      	cmp	r4, r1
 8006a90:	d002      	beq.n	8006a98 <HAL_TIM_ConfigClockSource+0xd4>
 8006a92:	3110      	adds	r1, #16
 8006a94:	428c      	cmp	r4, r1
 8006a96:	d1c9      	bne.n	8006a2c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8006a98:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a9a:	492b      	ldr	r1, [pc, #172]	@ (8006b48 <HAL_TIM_ConfigClockSource+0x184>)
 8006a9c:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a9e:	4321      	orrs	r1, r4
 8006aa0:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8006aa4:	6091      	str	r1, [r2, #8]
}
 8006aa6:	e7c0      	b.n	8006a2a <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8006aa8:	2002      	movs	r0, #2
}
 8006aaa:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8006aac:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006aae:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006ab0:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab2:	6a10      	ldr	r0, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ab4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ab8:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8006abc:	430c      	orrs	r4, r1
  tmpsmcr &= ~TIM_SMCR_TS;
 8006abe:	4922      	ldr	r1, [pc, #136]	@ (8006b48 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac0:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ac2:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ac4:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ac8:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006acc:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006ace:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006ad0:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ad2:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ad4:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8006ad8:	6091      	str	r1, [r2, #8]
}
 8006ada:	e7a6      	b.n	8006a2a <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006adc:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006ae0:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ae2:	4328      	orrs	r0, r5
 8006ae4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae6:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aea:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006aee:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af0:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006af2:	6891      	ldr	r1, [r2, #8]
 8006af4:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8006af8:	6091      	str	r1, [r2, #8]
      break;
 8006afa:	e796      	b.n	8006a2a <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006afc:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006b00:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b02:	4328      	orrs	r0, r5
 8006b04:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b06:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b0a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006b0e:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8006b10:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006b12:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b14:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006b18:	6091      	str	r1, [r2, #8]
      break;
 8006b1a:	e786      	b.n	8006a2a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8006b1c:	d886      	bhi.n	8006a2c <HAL_TIM_ConfigClockSource+0x68>
 8006b1e:	2c20      	cmp	r4, #32
 8006b20:	d0ba      	beq.n	8006a98 <HAL_TIM_ConfigClockSource+0xd4>
 8006b22:	d80a      	bhi.n	8006b3a <HAL_TIM_ConfigClockSource+0x176>
 8006b24:	f034 0110 	bics.w	r1, r4, #16
 8006b28:	d180      	bne.n	8006a2c <HAL_TIM_ConfigClockSource+0x68>
 8006b2a:	e7b5      	b.n	8006a98 <HAL_TIM_ConfigClockSource+0xd4>
 8006b2c:	f024 0110 	bic.w	r1, r4, #16
 8006b30:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006b34:	f47f af7a 	bne.w	8006a2c <HAL_TIM_ConfigClockSource+0x68>
 8006b38:	e7ae      	b.n	8006a98 <HAL_TIM_ConfigClockSource+0xd4>
 8006b3a:	2c30      	cmp	r4, #48	@ 0x30
 8006b3c:	d0ac      	beq.n	8006a98 <HAL_TIM_ConfigClockSource+0xd4>
      status = HAL_ERROR;
 8006b3e:	2001      	movs	r0, #1
 8006b40:	e774      	b.n	8006a2c <HAL_TIM_ConfigClockSource+0x68>
 8006b42:	bf00      	nop
 8006b44:	ffce0088 	.word	0xffce0088
 8006b48:	ffcfff8f 	.word	0xffcfff8f
 8006b4c:	00100020 	.word	0x00100020
 8006b50:	00100030 	.word	0x00100030

08006b54 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b54:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d04b      	beq.n	8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b5c:	6803      	ldr	r3, [r0, #0]
 8006b5e:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8006b60:	2002      	movs	r0, #2
{
 8006b62:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b64:	4d24      	ldr	r5, [pc, #144]	@ (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006b66:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b6a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006b6c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006b6e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b70:	d029      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006b72:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006b76:	42ab      	cmp	r3, r5
 8006b78:	d025      	beq.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b7a:	4d20      	ldr	r5, [pc, #128]	@ (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b7c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b80:	42ab      	cmp	r3, r5
 8006b82:	bf18      	it	ne
 8006b84:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8006b88:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006b8c:	bf0c      	ite	eq
 8006b8e:	f04f 0c01 	moveq.w	ip, #1
 8006b92:	f04f 0c00 	movne.w	ip, #0
 8006b96:	42ab      	cmp	r3, r5
 8006b98:	bf08      	it	eq
 8006b9a:	f04c 0c01 	orreq.w	ip, ip, #1
 8006b9e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006ba2:	42ab      	cmp	r3, r5
 8006ba4:	bf08      	it	eq
 8006ba6:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006baa:	680d      	ldr	r5, [r1, #0]
 8006bac:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bae:	4d14      	ldr	r5, [pc, #80]	@ (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8006bb0:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb2:	42ab      	cmp	r3, r5
 8006bb4:	bf14      	ite	ne
 8006bb6:	4660      	movne	r0, ip
 8006bb8:	f04c 0001 	orreq.w	r0, ip, #1
 8006bbc:	b960      	cbnz	r0, 8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006bbe:	4811      	ldr	r0, [pc, #68]	@ (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006bc0:	4283      	cmp	r3, r0
 8006bc2:	d009      	beq.n	8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006bc4:	e00d      	b.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bc6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bc8:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bcc:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bce:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd0:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd4:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8006bd6:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bda:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bde:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006be0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006be2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	2101      	movs	r1, #1

  return HAL_OK;
 8006be6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8006be8:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006bec:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8006bf0:	bc30      	pop	{r4, r5}
 8006bf2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006bf4:	2002      	movs	r0, #2
}
 8006bf6:	4770      	bx	lr
 8006bf8:	40010000 	.word	0x40010000
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40001800 	.word	0x40001800
 8006c04:	40014000 	.word	0x40014000

08006c08 <arm_fill_f32>:
 8006c08:	b410      	push	{r4}
 8006c0a:	088c      	lsrs	r4, r1, #2
 8006c0c:	d010      	beq.n	8006c30 <arm_fill_f32+0x28>
 8006c0e:	f100 0310 	add.w	r3, r0, #16
 8006c12:	4622      	mov	r2, r4
 8006c14:	3a01      	subs	r2, #1
 8006c16:	ed03 0a04 	vstr	s0, [r3, #-16]
 8006c1a:	ed03 0a03 	vstr	s0, [r3, #-12]
 8006c1e:	f103 0310 	add.w	r3, r3, #16
 8006c22:	ed03 0a06 	vstr	s0, [r3, #-24]	@ 0xffffffe8
 8006c26:	ed03 0a05 	vstr	s0, [r3, #-20]	@ 0xffffffec
 8006c2a:	d1f3      	bne.n	8006c14 <arm_fill_f32+0xc>
 8006c2c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8006c30:	f011 0103 	ands.w	r1, r1, #3
 8006c34:	d003      	beq.n	8006c3e <arm_fill_f32+0x36>
 8006c36:	3901      	subs	r1, #1
 8006c38:	eca0 0a01 	vstmia	r0!, {s0}
 8006c3c:	d1fb      	bne.n	8006c36 <arm_fill_f32+0x2e>
 8006c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <arm_copy_f32>:
 8006c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c48:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8006c4c:	d01e      	beq.n	8006c8c <arm_copy_f32+0x48>
 8006c4e:	f100 0410 	add.w	r4, r0, #16
 8006c52:	f101 0310 	add.w	r3, r1, #16
 8006c56:	4645      	mov	r5, r8
 8006c58:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8006c5c:	3d01      	subs	r5, #1
 8006c5e:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8006c62:	f103 0310 	add.w	r3, r3, #16
 8006c66:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8006c6a:	f104 0410 	add.w	r4, r4, #16
 8006c6e:	f854 6c14 	ldr.w	r6, [r4, #-20]
 8006c72:	f843 cc20 	str.w	ip, [r3, #-32]
 8006c76:	f843 ec1c 	str.w	lr, [r3, #-28]
 8006c7a:	f843 7c18 	str.w	r7, [r3, #-24]
 8006c7e:	f843 6c14 	str.w	r6, [r3, #-20]
 8006c82:	d1e9      	bne.n	8006c58 <arm_copy_f32+0x14>
 8006c84:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8006c88:	4440      	add	r0, r8
 8006c8a:	4441      	add	r1, r8
 8006c8c:	f012 0203 	ands.w	r2, r2, #3
 8006c90:	d005      	beq.n	8006c9e <arm_copy_f32+0x5a>
 8006c92:	f850 3b04 	ldr.w	r3, [r0], #4
 8006c96:	3a01      	subs	r2, #1
 8006c98:	f841 3b04 	str.w	r3, [r1], #4
 8006c9c:	d1f9      	bne.n	8006c92 <arm_copy_f32+0x4e>
 8006c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ca2:	bf00      	nop

08006ca4 <arm_rfft_fast_init_f32>:
 8006ca4:	084b      	lsrs	r3, r1, #1
 8006ca6:	2b80      	cmp	r3, #128	@ 0x80
 8006ca8:	b430      	push	{r4, r5}
 8006caa:	8201      	strh	r1, [r0, #16]
 8006cac:	8003      	strh	r3, [r0, #0]
 8006cae:	d06f      	beq.n	8006d90 <arm_rfft_fast_init_f32+0xec>
 8006cb0:	d916      	bls.n	8006ce0 <arm_rfft_fast_init_f32+0x3c>
 8006cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cb6:	d05e      	beq.n	8006d76 <arm_rfft_fast_init_f32+0xd2>
 8006cb8:	d935      	bls.n	8006d26 <arm_rfft_fast_init_f32+0x82>
 8006cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cbe:	d025      	beq.n	8006d0c <arm_rfft_fast_init_f32+0x68>
 8006cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cc4:	d112      	bne.n	8006cec <arm_rfft_fast_init_f32+0x48>
 8006cc6:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 8006cca:	4c37      	ldr	r4, [pc, #220]	@ (8006da8 <arm_rfft_fast_init_f32+0x104>)
 8006ccc:	4937      	ldr	r1, [pc, #220]	@ (8006dac <arm_rfft_fast_init_f32+0x108>)
 8006cce:	2300      	movs	r3, #0
 8006cd0:	4a37      	ldr	r2, [pc, #220]	@ (8006db0 <arm_rfft_fast_init_f32+0x10c>)
 8006cd2:	8185      	strh	r5, [r0, #12]
 8006cd4:	6084      	str	r4, [r0, #8]
 8006cd6:	6041      	str	r1, [r0, #4]
 8006cd8:	6142      	str	r2, [r0, #20]
 8006cda:	b258      	sxtb	r0, r3
 8006cdc:	bc30      	pop	{r4, r5}
 8006cde:	4770      	bx	lr
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d030      	beq.n	8006d46 <arm_rfft_fast_init_f32+0xa2>
 8006ce4:	2b40      	cmp	r3, #64	@ 0x40
 8006ce6:	d005      	beq.n	8006cf4 <arm_rfft_fast_init_f32+0x50>
 8006ce8:	2b10      	cmp	r3, #16
 8006cea:	d038      	beq.n	8006d5e <arm_rfft_fast_init_f32+0xba>
 8006cec:	23ff      	movs	r3, #255	@ 0xff
 8006cee:	bc30      	pop	{r4, r5}
 8006cf0:	b258      	sxtb	r0, r3
 8006cf2:	4770      	bx	lr
 8006cf4:	2538      	movs	r5, #56	@ 0x38
 8006cf6:	4c2f      	ldr	r4, [pc, #188]	@ (8006db4 <arm_rfft_fast_init_f32+0x110>)
 8006cf8:	492f      	ldr	r1, [pc, #188]	@ (8006db8 <arm_rfft_fast_init_f32+0x114>)
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8006dbc <arm_rfft_fast_init_f32+0x118>)
 8006cfe:	8185      	strh	r5, [r0, #12]
 8006d00:	6084      	str	r4, [r0, #8]
 8006d02:	6041      	str	r1, [r0, #4]
 8006d04:	6142      	str	r2, [r0, #20]
 8006d06:	b258      	sxtb	r0, r3
 8006d08:	bc30      	pop	{r4, r5}
 8006d0a:	4770      	bx	lr
 8006d0c:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 8006d10:	4c2b      	ldr	r4, [pc, #172]	@ (8006dc0 <arm_rfft_fast_init_f32+0x11c>)
 8006d12:	492c      	ldr	r1, [pc, #176]	@ (8006dc4 <arm_rfft_fast_init_f32+0x120>)
 8006d14:	2300      	movs	r3, #0
 8006d16:	4a2c      	ldr	r2, [pc, #176]	@ (8006dc8 <arm_rfft_fast_init_f32+0x124>)
 8006d18:	8185      	strh	r5, [r0, #12]
 8006d1a:	6084      	str	r4, [r0, #8]
 8006d1c:	6041      	str	r1, [r0, #4]
 8006d1e:	6142      	str	r2, [r0, #20]
 8006d20:	b258      	sxtb	r0, r3
 8006d22:	bc30      	pop	{r4, r5}
 8006d24:	4770      	bx	lr
 8006d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d2a:	d1df      	bne.n	8006cec <arm_rfft_fast_init_f32+0x48>
 8006d2c:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 8006d30:	4c26      	ldr	r4, [pc, #152]	@ (8006dcc <arm_rfft_fast_init_f32+0x128>)
 8006d32:	4927      	ldr	r1, [pc, #156]	@ (8006dd0 <arm_rfft_fast_init_f32+0x12c>)
 8006d34:	2300      	movs	r3, #0
 8006d36:	4a27      	ldr	r2, [pc, #156]	@ (8006dd4 <arm_rfft_fast_init_f32+0x130>)
 8006d38:	8185      	strh	r5, [r0, #12]
 8006d3a:	6084      	str	r4, [r0, #8]
 8006d3c:	6041      	str	r1, [r0, #4]
 8006d3e:	6142      	str	r2, [r0, #20]
 8006d40:	b258      	sxtb	r0, r3
 8006d42:	bc30      	pop	{r4, r5}
 8006d44:	4770      	bx	lr
 8006d46:	2530      	movs	r5, #48	@ 0x30
 8006d48:	4c23      	ldr	r4, [pc, #140]	@ (8006dd8 <arm_rfft_fast_init_f32+0x134>)
 8006d4a:	4924      	ldr	r1, [pc, #144]	@ (8006ddc <arm_rfft_fast_init_f32+0x138>)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4a24      	ldr	r2, [pc, #144]	@ (8006de0 <arm_rfft_fast_init_f32+0x13c>)
 8006d50:	8185      	strh	r5, [r0, #12]
 8006d52:	6084      	str	r4, [r0, #8]
 8006d54:	6041      	str	r1, [r0, #4]
 8006d56:	6142      	str	r2, [r0, #20]
 8006d58:	b258      	sxtb	r0, r3
 8006d5a:	bc30      	pop	{r4, r5}
 8006d5c:	4770      	bx	lr
 8006d5e:	2514      	movs	r5, #20
 8006d60:	4c20      	ldr	r4, [pc, #128]	@ (8006de4 <arm_rfft_fast_init_f32+0x140>)
 8006d62:	4921      	ldr	r1, [pc, #132]	@ (8006de8 <arm_rfft_fast_init_f32+0x144>)
 8006d64:	2300      	movs	r3, #0
 8006d66:	4a21      	ldr	r2, [pc, #132]	@ (8006dec <arm_rfft_fast_init_f32+0x148>)
 8006d68:	8185      	strh	r5, [r0, #12]
 8006d6a:	6084      	str	r4, [r0, #8]
 8006d6c:	6041      	str	r1, [r0, #4]
 8006d6e:	6142      	str	r2, [r0, #20]
 8006d70:	b258      	sxtb	r0, r3
 8006d72:	bc30      	pop	{r4, r5}
 8006d74:	4770      	bx	lr
 8006d76:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 8006d7a:	4c1d      	ldr	r4, [pc, #116]	@ (8006df0 <arm_rfft_fast_init_f32+0x14c>)
 8006d7c:	491d      	ldr	r1, [pc, #116]	@ (8006df4 <arm_rfft_fast_init_f32+0x150>)
 8006d7e:	2300      	movs	r3, #0
 8006d80:	4a1d      	ldr	r2, [pc, #116]	@ (8006df8 <arm_rfft_fast_init_f32+0x154>)
 8006d82:	8185      	strh	r5, [r0, #12]
 8006d84:	6084      	str	r4, [r0, #8]
 8006d86:	6041      	str	r1, [r0, #4]
 8006d88:	6142      	str	r2, [r0, #20]
 8006d8a:	b258      	sxtb	r0, r3
 8006d8c:	bc30      	pop	{r4, r5}
 8006d8e:	4770      	bx	lr
 8006d90:	25d0      	movs	r5, #208	@ 0xd0
 8006d92:	4c1a      	ldr	r4, [pc, #104]	@ (8006dfc <arm_rfft_fast_init_f32+0x158>)
 8006d94:	491a      	ldr	r1, [pc, #104]	@ (8006e00 <arm_rfft_fast_init_f32+0x15c>)
 8006d96:	2300      	movs	r3, #0
 8006d98:	4a1a      	ldr	r2, [pc, #104]	@ (8006e04 <arm_rfft_fast_init_f32+0x160>)
 8006d9a:	8185      	strh	r5, [r0, #12]
 8006d9c:	6084      	str	r4, [r0, #8]
 8006d9e:	6041      	str	r1, [r0, #4]
 8006da0:	6142      	str	r2, [r0, #20]
 8006da2:	b258      	sxtb	r0, r3
 8006da4:	bc30      	pop	{r4, r5}
 8006da6:	4770      	bx	lr
 8006da8:	0807c280 	.word	0x0807c280
 8006dac:	0806d478 	.word	0x0806d478
 8006db0:	080735e8 	.word	0x080735e8
 8006db4:	08071578 	.word	0x08071578
 8006db8:	0807e040 	.word	0x0807e040
 8006dbc:	08080530 	.word	0x08080530
 8006dc0:	08079f68 	.word	0x08079f68
 8006dc4:	08077e68 	.word	0x08077e68
 8006dc8:	080715e8 	.word	0x080715e8
 8006dcc:	080801c0 	.word	0x080801c0
 8006dd0:	080775e8 	.word	0x080775e8
 8006dd4:	0807e240 	.word	0x0807e240
 8006dd8:	0807ae20 	.word	0x0807ae20
 8006ddc:	08079e68 	.word	0x08079e68
 8006de0:	08071478 	.word	0x08071478
 8006de4:	0807ad78 	.word	0x0807ad78
 8006de8:	08077de8 	.word	0x08077de8
 8006dec:	0807ada0 	.word	0x0807ada0
 8006df0:	0807ea40 	.word	0x0807ea40
 8006df4:	0807b280 	.word	0x0807b280
 8006df8:	0807edc0 	.word	0x0807edc0
 8006dfc:	08080730 	.word	0x08080730
 8006e00:	0807ae80 	.word	0x0807ae80
 8006e04:	0807fdc0 	.word	0x0807fdc0

08006e08 <arm_rfft_fast_f32>:
 8006e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0c:	8a05      	ldrh	r5, [r0, #16]
 8006e0e:	4606      	mov	r6, r0
 8006e10:	4690      	mov	r8, r2
 8006e12:	460c      	mov	r4, r1
 8006e14:	086d      	lsrs	r5, r5, #1
 8006e16:	8005      	strh	r5, [r0, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d15e      	bne.n	8006eda <arm_rfft_fast_f32+0xd2>
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f000 fbe0 	bl	80075e4 <arm_cfft_f32>
 8006e24:	edd4 7a00 	vldr	s15, [r4]
 8006e28:	ed94 7a01 	vldr	s14, [r4, #4]
 8006e2c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8006e30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006e34:	8837      	ldrh	r7, [r6, #0]
 8006e36:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006e3a:	6975      	ldr	r5, [r6, #20]
 8006e3c:	3f01      	subs	r7, #1
 8006e3e:	eef0 3a46 	vmov.f32	s7, s12
 8006e42:	3510      	adds	r5, #16
 8006e44:	f108 0610 	add.w	r6, r8, #16
 8006e48:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006e4c:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8006e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e54:	f104 0310 	add.w	r3, r4, #16
 8006e58:	3808      	subs	r0, #8
 8006e5a:	ee26 7a86 	vmul.f32	s14, s13, s12
 8006e5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006e62:	ed88 7a00 	vstr	s14, [r8]
 8006e66:	edc8 7a01 	vstr	s15, [r8, #4]
 8006e6a:	edd0 6a02 	vldr	s13, [r0, #8]
 8006e6e:	3f01      	subs	r7, #1
 8006e70:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006e74:	f1a0 0008 	sub.w	r0, r0, #8
 8006e78:	ed13 7a01 	vldr	s14, [r3, #-4]
 8006e7c:	f105 0508 	add.w	r5, r5, #8
 8006e80:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8006e84:	ed15 6a04 	vldr	s12, [r5, #-16]
 8006e88:	edd0 5a05 	vldr	s11, [r0, #20]
 8006e8c:	ee36 5a85 	vadd.f32	s10, s13, s10
 8006e90:	ed55 6a03 	vldr	s13, [r5, #-12]
 8006e94:	f103 0308 	add.w	r3, r3, #8
 8006e98:	ee35 4a87 	vadd.f32	s8, s11, s14
 8006e9c:	f106 0608 	add.w	r6, r6, #8
 8006ea0:	ee66 4a27 	vmul.f32	s9, s12, s15
 8006ea4:	ee77 5a65 	vsub.f32	s11, s14, s11
 8006ea8:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8006eac:	ee34 5a85 	vadd.f32	s10, s9, s10
 8006eb0:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006eb4:	ee66 6a84 	vmul.f32	s13, s13, s8
 8006eb8:	ee77 7a25 	vadd.f32	s15, s14, s11
 8006ebc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006ec0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006ec4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006ec8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006ecc:	ed46 6a04 	vstr	s13, [r6, #-16]
 8006ed0:	ed46 7a03 	vstr	s15, [r6, #-12]
 8006ed4:	d1c9      	bne.n	8006e6a <arm_rfft_fast_f32+0x62>
 8006ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eda:	edd1 7a00 	vldr	s15, [r1]
 8006ede:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8006ee2:	edd1 6a01 	vldr	s13, [r1, #4]
 8006ee6:	1e68      	subs	r0, r5, #1
 8006ee8:	6975      	ldr	r5, [r6, #20]
 8006eea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006eee:	00c1      	lsls	r1, r0, #3
 8006ef0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ef4:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006ef8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006efc:	ed82 7a00 	vstr	s14, [r2]
 8006f00:	edc2 7a01 	vstr	s15, [r2, #4]
 8006f04:	b3e0      	cbz	r0, 8006f80 <arm_rfft_fast_f32+0x178>
 8006f06:	3908      	subs	r1, #8
 8006f08:	f104 0210 	add.w	r2, r4, #16
 8006f0c:	3510      	adds	r5, #16
 8006f0e:	440c      	add	r4, r1
 8006f10:	f108 0110 	add.w	r1, r8, #16
 8006f14:	ed94 7a02 	vldr	s14, [r4, #8]
 8006f18:	3801      	subs	r0, #1
 8006f1a:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006f1e:	f1a4 0408 	sub.w	r4, r4, #8
 8006f22:	ed15 6a02 	vldr	s12, [r5, #-8]
 8006f26:	f102 0208 	add.w	r2, r2, #8
 8006f2a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8006f2e:	ed94 4a05 	vldr	s8, [r4, #20]
 8006f32:	ed12 5a03 	vldr	s10, [r2, #-12]
 8006f36:	ee77 6a26 	vadd.f32	s13, s14, s13
 8006f3a:	ed55 5a01 	vldr	s11, [r5, #-4]
 8006f3e:	f101 0108 	add.w	r1, r1, #8
 8006f42:	ee26 3a27 	vmul.f32	s6, s12, s15
 8006f46:	f105 0508 	add.w	r5, r5, #8
 8006f4a:	ee74 4a05 	vadd.f32	s9, s8, s10
 8006f4e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8006f52:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006f56:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006f5a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006f5e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8006f62:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8006f66:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006f6a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8006f6e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006f72:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006f76:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006f7a:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006f7e:	d1c9      	bne.n	8006f14 <arm_rfft_fast_f32+0x10c>
 8006f80:	4630      	mov	r0, r6
 8006f82:	4641      	mov	r1, r8
 8006f84:	461a      	mov	r2, r3
 8006f86:	2301      	movs	r3, #1
 8006f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8c:	f000 bb2a 	b.w	80075e4 <arm_cfft_f32>

08006f90 <arm_cfft_radix8by2_f32>:
 8006f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f94:	ed2d 8b06 	vpush	{d8-d10}
 8006f98:	f8b0 e000 	ldrh.w	lr, [r0]
 8006f9c:	4607      	mov	r7, r0
 8006f9e:	6842      	ldr	r2, [r0, #4]
 8006fa0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8006fa4:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8006fa8:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8006fac:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8006fb0:	f000 80af 	beq.w	8007112 <arm_cfft_radix8by2_f32+0x182>
 8006fb4:	3310      	adds	r3, #16
 8006fb6:	3210      	adds	r2, #16
 8006fb8:	f101 0610 	add.w	r6, r1, #16
 8006fbc:	f108 0510 	add.w	r5, r8, #16
 8006fc0:	18cc      	adds	r4, r1, r3
 8006fc2:	4443      	add	r3, r8
 8006fc4:	ed55 6a04 	vldr	s13, [r5, #-16]
 8006fc8:	f1be 0e01 	subs.w	lr, lr, #1
 8006fcc:	ed56 4a04 	vldr	s9, [r6, #-16]
 8006fd0:	f104 0410 	add.w	r4, r4, #16
 8006fd4:	ed55 7a02 	vldr	s15, [r5, #-8]
 8006fd8:	f106 0610 	add.w	r6, r6, #16
 8006fdc:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8006fe0:	ed53 0a04 	vldr	s1, [r3, #-16]
 8006fe4:	ed13 5a03 	vldr	s10, [r3, #-12]
 8006fe8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006fec:	ed13 3a02 	vldr	s6, [r3, #-8]
 8006ff0:	f102 0210 	add.w	r2, r2, #16
 8006ff4:	ed15 7a03 	vldr	s14, [r5, #-12]
 8006ff8:	f103 0310 	add.w	r3, r3, #16
 8006ffc:	ed55 2a01 	vldr	s5, [r5, #-4]
 8007000:	f105 0510 	add.w	r5, r5, #16
 8007004:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 8007008:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800700c:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8007010:	ee33 8a83 	vadd.f32	s16, s7, s6
 8007014:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 8007018:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800701c:	ee34 0a06 	vadd.f32	s0, s8, s12
 8007020:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 8007024:	ee76 aa87 	vadd.f32	s21, s13, s14
 8007028:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800702c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007030:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 8007034:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8007038:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800703c:	ee71 8a05 	vadd.f32	s17, s2, s10
 8007040:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8007044:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 8007048:	ee72 9a22 	vadd.f32	s19, s4, s5
 800704c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007050:	ee35 5a41 	vsub.f32	s10, s10, s2
 8007054:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 8007058:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800705c:	ee36 6a44 	vsub.f32	s12, s12, s8
 8007060:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 8007064:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8007068:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800706c:	ee72 7a62 	vsub.f32	s15, s4, s5
 8007070:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 8007074:	ee73 2a63 	vsub.f32	s5, s6, s7
 8007078:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800707c:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8007080:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8007084:	ee24 3a84 	vmul.f32	s6, s9, s8
 8007088:	ee27 2a26 	vmul.f32	s4, s14, s13
 800708c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8007090:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8007094:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007098:	ee65 5a84 	vmul.f32	s11, s11, s8
 800709c:	ee65 6a26 	vmul.f32	s13, s10, s13
 80070a0:	ee25 5a04 	vmul.f32	s10, s10, s8
 80070a4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80070a8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80070ac:	ee33 4a02 	vadd.f32	s8, s6, s4
 80070b0:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80070b4:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 80070b8:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 80070bc:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 80070c0:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 80070c4:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 80070c8:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 80070cc:	ee61 4aa6 	vmul.f32	s9, s3, s13
 80070d0:	ee27 4a87 	vmul.f32	s8, s15, s14
 80070d4:	ee61 5a87 	vmul.f32	s11, s3, s14
 80070d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80070dc:	ee22 5a87 	vmul.f32	s10, s5, s14
 80070e0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80070e4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80070e8:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80070ec:	ee74 4a84 	vadd.f32	s9, s9, s8
 80070f0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80070f4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80070f8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80070fc:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 8007100:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 8007104:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 8007108:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800710c:	f47f af5a 	bne.w	8006fc4 <arm_cfft_radix8by2_f32+0x34>
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	fa1f f48c 	uxth.w	r4, ip
 8007116:	4608      	mov	r0, r1
 8007118:	2302      	movs	r3, #2
 800711a:	4621      	mov	r1, r4
 800711c:	f000 fcac 	bl	8007a78 <arm_radix8_butterfly_f32>
 8007120:	4640      	mov	r0, r8
 8007122:	4621      	mov	r1, r4
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	2302      	movs	r3, #2
 8007128:	ecbd 8b06 	vpop	{d8-d10}
 800712c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007130:	f000 bca2 	b.w	8007a78 <arm_radix8_butterfly_f32>

08007134 <arm_cfft_radix8by4_f32>:
 8007134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007138:	ed2d 8b06 	vpush	{d8-d10}
 800713c:	8804      	ldrh	r4, [r0, #0]
 800713e:	b08f      	sub	sp, #60	@ 0x3c
 8007140:	ed91 6a00 	vldr	s12, [r1]
 8007144:	460a      	mov	r2, r1
 8007146:	0864      	lsrs	r4, r4, #1
 8007148:	ed91 7a01 	vldr	s14, [r1, #4]
 800714c:	9101      	str	r1, [sp, #4]
 800714e:	00a3      	lsls	r3, r4, #2
 8007150:	9104      	str	r1, [sp, #16]
 8007152:	0864      	lsrs	r4, r4, #1
 8007154:	6841      	ldr	r1, [r0, #4]
 8007156:	900c      	str	r0, [sp, #48]	@ 0x30
 8007158:	4625      	mov	r5, r4
 800715a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800715c:	f101 0408 	add.w	r4, r1, #8
 8007160:	f101 0610 	add.w	r6, r1, #16
 8007164:	9406      	str	r4, [sp, #24]
 8007166:	18d4      	adds	r4, r2, r3
 8007168:	1eaa      	subs	r2, r5, #2
 800716a:	f101 0518 	add.w	r5, r1, #24
 800716e:	18e0      	adds	r0, r4, r3
 8007170:	ed94 4a00 	vldr	s8, [r4]
 8007174:	edd4 3a01 	vldr	s7, [r4, #4]
 8007178:	46a6      	mov	lr, r4
 800717a:	edd0 6a00 	vldr	s13, [r0]
 800717e:	18c7      	adds	r7, r0, r3
 8007180:	edd0 7a01 	vldr	s15, [r0, #4]
 8007184:	46a0      	mov	r8, r4
 8007186:	ee76 5a26 	vadd.f32	s11, s12, s13
 800718a:	edd7 4a00 	vldr	s9, [r7]
 800718e:	9402      	str	r4, [sp, #8]
 8007190:	4604      	mov	r4, r0
 8007192:	9507      	str	r5, [sp, #28]
 8007194:	4605      	mov	r5, r0
 8007196:	ee75 2a84 	vadd.f32	s5, s11, s8
 800719a:	900a      	str	r0, [sp, #40]	@ 0x28
 800719c:	9801      	ldr	r0, [sp, #4]
 800719e:	ee76 6a66 	vsub.f32	s13, s12, s13
 80071a2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80071a6:	ed97 5a01 	vldr	s10, [r7, #4]
 80071aa:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80071ae:	46bc      	mov	ip, r7
 80071b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071b4:	9605      	str	r6, [sp, #20]
 80071b6:	ee36 7a63 	vsub.f32	s14, s12, s7
 80071ba:	9703      	str	r7, [sp, #12]
 80071bc:	ee12 9a90 	vmov	r9, s5
 80071c0:	ee33 3aa6 	vadd.f32	s6, s7, s13
 80071c4:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80071c8:	1f3e      	subs	r6, r7, #4
 80071ca:	f840 9b08 	str.w	r9, [r0], #8
 80071ce:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80071d2:	edde 2a01 	vldr	s5, [lr, #4]
 80071d6:	ee77 3ac4 	vsub.f32	s7, s15, s8
 80071da:	ee77 7a84 	vadd.f32	s15, s15, s8
 80071de:	ed9c 4a01 	vldr	s8, [ip, #4]
 80071e2:	ee36 6a22 	vadd.f32	s12, s12, s5
 80071e6:	9001      	str	r0, [sp, #4]
 80071e8:	ee37 7a45 	vsub.f32	s14, s14, s10
 80071ec:	9804      	ldr	r0, [sp, #16]
 80071ee:	ee75 6a26 	vadd.f32	s13, s10, s13
 80071f2:	f1ae 0704 	sub.w	r7, lr, #4
 80071f6:	ee36 6a04 	vadd.f32	s12, s12, s8
 80071fa:	ee33 4a45 	vsub.f32	s8, s6, s10
 80071fe:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8007202:	ee33 5aa4 	vadd.f32	s10, s7, s9
 8007206:	ed80 6a01 	vstr	s12, [r0, #4]
 800720a:	ee14 9a10 	vmov	r9, s8
 800720e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007212:	f848 9b08 	str.w	r9, [r8], #8
 8007216:	ed8e 5a01 	vstr	s10, [lr, #4]
 800721a:	ee15 ea90 	vmov	lr, s11
 800721e:	f844 eb08 	str.w	lr, [r4], #8
 8007222:	ee16 ea90 	vmov	lr, s13
 8007226:	9408      	str	r4, [sp, #32]
 8007228:	462c      	mov	r4, r5
 800722a:	ed85 7a01 	vstr	s14, [r5, #4]
 800722e:	9d03      	ldr	r5, [sp, #12]
 8007230:	f84c eb08 	str.w	lr, [ip], #8
 8007234:	edc5 7a01 	vstr	s15, [r5, #4]
 8007238:	0855      	lsrs	r5, r2, #1
 800723a:	9509      	str	r5, [sp, #36]	@ 0x24
 800723c:	f000 8130 	beq.w	80074a0 <arm_cfft_radix8by4_f32+0x36c>
 8007240:	9804      	ldr	r0, [sp, #16]
 8007242:	3b08      	subs	r3, #8
 8007244:	46ab      	mov	fp, r5
 8007246:	f1a4 020c 	sub.w	r2, r4, #12
 800724a:	f100 0510 	add.w	r5, r0, #16
 800724e:	f101 0920 	add.w	r9, r1, #32
 8007252:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8007256:	f8dd a014 	ldr.w	sl, [sp, #20]
 800725a:	4433      	add	r3, r6
 800725c:	3410      	adds	r4, #16
 800725e:	4660      	mov	r0, ip
 8007260:	4641      	mov	r1, r8
 8007262:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8007266:	ed54 6a02 	vldr	s13, [r4, #-8]
 800726a:	f1bb 0b01 	subs.w	fp, fp, #1
 800726e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007272:	f10a 0a08 	add.w	sl, sl, #8
 8007276:	edd1 7a00 	vldr	s15, [r1]
 800727a:	f105 0508 	add.w	r5, r5, #8
 800727e:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8007282:	edd0 2a00 	vldr	s5, [r0]
 8007286:	ed14 7a01 	vldr	s14, [r4, #-4]
 800728a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800728e:	ed55 6a03 	vldr	s13, [r5, #-12]
 8007292:	f1a2 0208 	sub.w	r2, r2, #8
 8007296:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800729a:	ed90 2a01 	vldr	s4, [r0, #4]
 800729e:	ee36 5a87 	vadd.f32	s10, s13, s14
 80072a2:	ed91 6a01 	vldr	s12, [r1, #4]
 80072a6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80072aa:	f109 0910 	add.w	r9, r9, #16
 80072ae:	ee72 6aa4 	vadd.f32	s13, s5, s9
 80072b2:	f104 0408 	add.w	r4, r4, #8
 80072b6:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80072ba:	f10e 0e18 	add.w	lr, lr, #24
 80072be:	ee37 3a67 	vsub.f32	s6, s14, s15
 80072c2:	f1a3 0308 	sub.w	r3, r3, #8
 80072c6:	ed45 6a04 	vstr	s13, [r5, #-16]
 80072ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072ce:	edd1 6a01 	vldr	s13, [r1, #4]
 80072d2:	ee76 1a25 	vadd.f32	s3, s12, s11
 80072d6:	edd0 4a01 	vldr	s9, [r0, #4]
 80072da:	ee33 3a22 	vadd.f32	s6, s6, s5
 80072de:	ee75 6a26 	vadd.f32	s13, s10, s13
 80072e2:	ee35 5a46 	vsub.f32	s10, s10, s12
 80072e6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80072ea:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80072ee:	ee71 1ac2 	vsub.f32	s3, s3, s4
 80072f2:	ee35 5a42 	vsub.f32	s10, s10, s4
 80072f6:	ed45 6a03 	vstr	s13, [r5, #-12]
 80072fa:	ee32 2a06 	vadd.f32	s4, s4, s12
 80072fe:	edd6 7a00 	vldr	s15, [r6]
 8007302:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007306:	ed97 1a00 	vldr	s2, [r7]
 800730a:	ee77 2a62 	vsub.f32	s5, s14, s5
 800730e:	ed92 8a04 	vldr	s16, [r2, #16]
 8007312:	ee71 8a27 	vadd.f32	s17, s2, s15
 8007316:	ed93 aa04 	vldr	s20, [r3, #16]
 800731a:	ed16 7a01 	vldr	s14, [r6, #-4]
 800731e:	ee71 7a67 	vsub.f32	s15, s2, s15
 8007322:	ed57 0a01 	vldr	s1, [r7, #-4]
 8007326:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800732a:	ee38 6a88 	vadd.f32	s12, s17, s16
 800732e:	edd3 9a03 	vldr	s19, [r3, #12]
 8007332:	ee30 0a87 	vadd.f32	s0, s1, s14
 8007336:	ed92 9a03 	vldr	s18, [r2, #12]
 800733a:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800733e:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8007342:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8007346:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800734a:	ee16 ca10 	vmov	ip, s12
 800734e:	ee30 6a49 	vsub.f32	s12, s0, s18
 8007352:	ee71 4a07 	vadd.f32	s9, s2, s14
 8007356:	f847 c908 	str.w	ip, [r7], #-8
 800735a:	ee34 4a29 	vadd.f32	s8, s8, s19
 800735e:	edd2 8a03 	vldr	s17, [r2, #12]
 8007362:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8007366:	ed93 8a03 	vldr	s16, [r3, #12]
 800736a:	ee71 0a47 	vsub.f32	s1, s2, s14
 800736e:	ee30 0a28 	vadd.f32	s0, s0, s17
 8007372:	ee39 1a67 	vsub.f32	s2, s18, s15
 8007376:	ee36 6a69 	vsub.f32	s12, s12, s19
 800737a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800737e:	ee75 5aca 	vsub.f32	s11, s11, s20
 8007382:	ed87 0a01 	vstr	s0, [r7, #4]
 8007386:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800738a:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800738e:	ee21 8a80 	vmul.f32	s16, s3, s0
 8007392:	ee23 7a26 	vmul.f32	s14, s6, s13
 8007396:	ee64 7a26 	vmul.f32	s15, s8, s13
 800739a:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800739e:	ee24 4a00 	vmul.f32	s8, s8, s0
 80073a2:	ee23 3a00 	vmul.f32	s6, s6, s0
 80073a6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80073aa:	ee24 0a80 	vmul.f32	s0, s9, s0
 80073ae:	ee38 7a07 	vadd.f32	s14, s16, s14
 80073b2:	ee76 6a84 	vadd.f32	s13, s13, s8
 80073b6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80073ba:	ee33 3a61 	vsub.f32	s6, s6, s3
 80073be:	ee17 ca10 	vmov	ip, s14
 80073c2:	f841 cb08 	str.w	ip, [r1], #8
 80073c6:	ed01 3a01 	vstr	s6, [r1, #-4]
 80073ca:	ed82 0a04 	vstr	s0, [r2, #16]
 80073ce:	edc2 6a03 	vstr	s13, [r2, #12]
 80073d2:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 80073d6:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 80073da:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 80073de:	ee23 4aa6 	vmul.f32	s8, s7, s13
 80073e2:	ee65 4a27 	vmul.f32	s9, s10, s15
 80073e6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80073ea:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80073ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80073f2:	ee25 5a26 	vmul.f32	s10, s10, s13
 80073f6:	ee66 6a26 	vmul.f32	s13, s12, s13
 80073fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073fe:	ee34 6a24 	vadd.f32	s12, s8, s9
 8007402:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8007406:	ee35 5a63 	vsub.f32	s10, s10, s7
 800740a:	ee17 ca90 	vmov	ip, s15
 800740e:	ed04 6a04 	vstr	s12, [r4, #-16]
 8007412:	ed04 5a03 	vstr	s10, [r4, #-12]
 8007416:	f846 c908 	str.w	ip, [r6], #-8
 800741a:	edc6 6a01 	vstr	s13, [r6, #4]
 800741e:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 8007422:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 8007426:	ee62 5a27 	vmul.f32	s11, s4, s15
 800742a:	ee22 6a87 	vmul.f32	s12, s5, s14
 800742e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8007432:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8007436:	ee61 6a07 	vmul.f32	s13, s2, s14
 800743a:	ee20 7a87 	vmul.f32	s14, s1, s14
 800743e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007442:	ee61 7a27 	vmul.f32	s15, s2, s15
 8007446:	ee35 6a86 	vadd.f32	s12, s11, s12
 800744a:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800744e:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8007452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007456:	ee16 ca10 	vmov	ip, s12
 800745a:	f840 cb08 	str.w	ip, [r0], #8
 800745e:	ed40 2a01 	vstr	s5, [r0, #-4]
 8007462:	edc3 0a04 	vstr	s1, [r3, #16]
 8007466:	edc3 7a03 	vstr	s15, [r3, #12]
 800746a:	f47f aefc 	bne.w	8007266 <arm_cfft_radix8by4_f32+0x132>
 800746e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007470:	9805      	ldr	r0, [sp, #20]
 8007472:	00cb      	lsls	r3, r1, #3
 8007474:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8007478:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800747c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007480:	4498      	add	r8, r3
 8007482:	449c      	add	ip, r3
 8007484:	9105      	str	r1, [sp, #20]
 8007486:	9901      	ldr	r1, [sp, #4]
 8007488:	4419      	add	r1, r3
 800748a:	9101      	str	r1, [sp, #4]
 800748c:	9906      	ldr	r1, [sp, #24]
 800748e:	4419      	add	r1, r3
 8007490:	9106      	str	r1, [sp, #24]
 8007492:	9908      	ldr	r1, [sp, #32]
 8007494:	4419      	add	r1, r3
 8007496:	9b07      	ldr	r3, [sp, #28]
 8007498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800749c:	9108      	str	r1, [sp, #32]
 800749e:	9307      	str	r3, [sp, #28]
 80074a0:	9a01      	ldr	r2, [sp, #4]
 80074a2:	2304      	movs	r3, #4
 80074a4:	9e08      	ldr	r6, [sp, #32]
 80074a6:	edd2 6a00 	vldr	s13, [r2]
 80074aa:	ed96 4a00 	vldr	s8, [r6]
 80074ae:	edd8 7a00 	vldr	s15, [r8]
 80074b2:	ee36 6a84 	vadd.f32	s12, s13, s8
 80074b6:	eddc 2a00 	vldr	s5, [ip]
 80074ba:	ed96 7a01 	vldr	s14, [r6, #4]
 80074be:	ee36 4ac4 	vsub.f32	s8, s13, s8
 80074c2:	edd2 6a01 	vldr	s13, [r2, #4]
 80074c6:	ee76 4a27 	vadd.f32	s9, s12, s15
 80074ca:	ed98 2a01 	vldr	s4, [r8, #4]
 80074ce:	ee76 5a87 	vadd.f32	s11, s13, s14
 80074d2:	ed9c 5a01 	vldr	s10, [ip, #4]
 80074d6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80074da:	9d05      	ldr	r5, [sp, #20]
 80074dc:	ee72 6aa4 	vadd.f32	s13, s5, s9
 80074e0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80074e4:	ee72 3a04 	vadd.f32	s7, s4, s8
 80074e8:	9804      	ldr	r0, [sp, #16]
 80074ea:	ee77 4a67 	vsub.f32	s9, s14, s15
 80074ee:	4621      	mov	r1, r4
 80074f0:	edc2 6a00 	vstr	s13, [r2]
 80074f4:	ee76 6a67 	vsub.f32	s13, s12, s15
 80074f8:	ed98 3a01 	vldr	s6, [r8, #4]
 80074fc:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8007500:	eddc 1a01 	vldr	s3, [ip, #4]
 8007504:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8007508:	ee35 3a83 	vadd.f32	s6, s11, s6
 800750c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007510:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007514:	ee73 5a21 	vadd.f32	s11, s6, s3
 8007518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800751c:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007520:	edc2 5a01 	vstr	s11, [r2, #4]
 8007524:	ee35 5a04 	vadd.f32	s10, s10, s8
 8007528:	9a06      	ldr	r2, [sp, #24]
 800752a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800752e:	edd2 7a00 	vldr	s15, [r2]
 8007532:	edd2 5a01 	vldr	s11, [r2, #4]
 8007536:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800753a:	ee63 3aa5 	vmul.f32	s7, s7, s11
 800753e:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8007542:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8007546:	ee77 7a62 	vsub.f32	s15, s14, s5
 800754a:	ee74 5a25 	vadd.f32	s11, s8, s11
 800754e:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8007552:	edc8 5a00 	vstr	s11, [r8]
 8007556:	edc8 4a01 	vstr	s9, [r8, #4]
 800755a:	edd5 4a01 	vldr	s9, [r5, #4]
 800755e:	ed95 7a00 	vldr	s14, [r5]
 8007562:	9d07      	ldr	r5, [sp, #28]
 8007564:	ee66 5a87 	vmul.f32	s11, s13, s14
 8007568:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800756c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007570:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007574:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007578:	ee35 6a86 	vadd.f32	s12, s11, s12
 800757c:	edc6 6a01 	vstr	s13, [r6, #4]
 8007580:	ed86 6a00 	vstr	s12, [r6]
 8007584:	ed95 6a01 	vldr	s12, [r5, #4]
 8007588:	ed95 7a00 	vldr	s14, [r5]
 800758c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800758e:	ee65 6a07 	vmul.f32	s13, s10, s14
 8007592:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007596:	ee25 5a06 	vmul.f32	s10, s10, s12
 800759a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800759e:	ee37 5a45 	vsub.f32	s10, s14, s10
 80075a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a6:	ed8c 5a01 	vstr	s10, [ip, #4]
 80075aa:	edcc 7a00 	vstr	s15, [ip]
 80075ae:	6872      	ldr	r2, [r6, #4]
 80075b0:	f000 fa62 	bl	8007a78 <arm_radix8_butterfly_f32>
 80075b4:	9802      	ldr	r0, [sp, #8]
 80075b6:	4621      	mov	r1, r4
 80075b8:	6872      	ldr	r2, [r6, #4]
 80075ba:	2304      	movs	r3, #4
 80075bc:	f000 fa5c 	bl	8007a78 <arm_radix8_butterfly_f32>
 80075c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075c2:	4621      	mov	r1, r4
 80075c4:	6872      	ldr	r2, [r6, #4]
 80075c6:	2304      	movs	r3, #4
 80075c8:	f000 fa56 	bl	8007a78 <arm_radix8_butterfly_f32>
 80075cc:	9803      	ldr	r0, [sp, #12]
 80075ce:	4621      	mov	r1, r4
 80075d0:	6872      	ldr	r2, [r6, #4]
 80075d2:	2304      	movs	r3, #4
 80075d4:	b00f      	add	sp, #60	@ 0x3c
 80075d6:	ecbd 8b06 	vpop	{d8-d10}
 80075da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075de:	f000 ba4b 	b.w	8007a78 <arm_radix8_butterfly_f32>
 80075e2:	bf00      	nop

080075e4 <arm_cfft_f32>:
 80075e4:	2a01      	cmp	r2, #1
 80075e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ea:	4606      	mov	r6, r0
 80075ec:	4617      	mov	r7, r2
 80075ee:	460c      	mov	r4, r1
 80075f0:	4698      	mov	r8, r3
 80075f2:	8805      	ldrh	r5, [r0, #0]
 80075f4:	d053      	beq.n	800769e <arm_cfft_f32+0xba>
 80075f6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80075fa:	d04b      	beq.n	8007694 <arm_cfft_f32+0xb0>
 80075fc:	d916      	bls.n	800762c <arm_cfft_f32+0x48>
 80075fe:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8007602:	d01a      	beq.n	800763a <arm_cfft_f32+0x56>
 8007604:	d95a      	bls.n	80076bc <arm_cfft_f32+0xd8>
 8007606:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800760a:	d043      	beq.n	8007694 <arm_cfft_f32+0xb0>
 800760c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8007610:	d105      	bne.n	800761e <arm_cfft_f32+0x3a>
 8007612:	4620      	mov	r0, r4
 8007614:	4629      	mov	r1, r5
 8007616:	6872      	ldr	r2, [r6, #4]
 8007618:	2301      	movs	r3, #1
 800761a:	f000 fa2d 	bl	8007a78 <arm_radix8_butterfly_f32>
 800761e:	f1b8 0f00 	cmp.w	r8, #0
 8007622:	d111      	bne.n	8007648 <arm_cfft_f32+0x64>
 8007624:	2f01      	cmp	r7, #1
 8007626:	d016      	beq.n	8007656 <arm_cfft_f32+0x72>
 8007628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800762c:	2d20      	cmp	r5, #32
 800762e:	d031      	beq.n	8007694 <arm_cfft_f32+0xb0>
 8007630:	d948      	bls.n	80076c4 <arm_cfft_f32+0xe0>
 8007632:	2d40      	cmp	r5, #64	@ 0x40
 8007634:	d0ed      	beq.n	8007612 <arm_cfft_f32+0x2e>
 8007636:	2d80      	cmp	r5, #128	@ 0x80
 8007638:	d1f1      	bne.n	800761e <arm_cfft_f32+0x3a>
 800763a:	4630      	mov	r0, r6
 800763c:	4621      	mov	r1, r4
 800763e:	f7ff fca7 	bl	8006f90 <arm_cfft_radix8by2_f32>
 8007642:	f1b8 0f00 	cmp.w	r8, #0
 8007646:	d0ed      	beq.n	8007624 <arm_cfft_f32+0x40>
 8007648:	4620      	mov	r0, r4
 800764a:	89b1      	ldrh	r1, [r6, #12]
 800764c:	68b2      	ldr	r2, [r6, #8]
 800764e:	f7f8 fe47 	bl	80002e0 <arm_bitreversal_32>
 8007652:	2f01      	cmp	r7, #1
 8007654:	d1e8      	bne.n	8007628 <arm_cfft_f32+0x44>
 8007656:	ee07 5a90 	vmov	s15, r5
 800765a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007662:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8007666:	2d00      	cmp	r5, #0
 8007668:	d0de      	beq.n	8007628 <arm_cfft_f32+0x44>
 800766a:	f104 0108 	add.w	r1, r4, #8
 800766e:	2300      	movs	r3, #0
 8007670:	ed11 7a02 	vldr	s14, [r1, #-8]
 8007674:	3301      	adds	r3, #1
 8007676:	ed51 7a01 	vldr	s15, [r1, #-4]
 800767a:	3108      	adds	r1, #8
 800767c:	429d      	cmp	r5, r3
 800767e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007682:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007686:	ed01 7a04 	vstr	s14, [r1, #-16]
 800768a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800768e:	d1ef      	bne.n	8007670 <arm_cfft_f32+0x8c>
 8007690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007694:	4630      	mov	r0, r6
 8007696:	4621      	mov	r1, r4
 8007698:	f7ff fd4c 	bl	8007134 <arm_cfft_radix8by4_f32>
 800769c:	e7bf      	b.n	800761e <arm_cfft_f32+0x3a>
 800769e:	b1a5      	cbz	r5, 80076ca <arm_cfft_f32+0xe6>
 80076a0:	f101 030c 	add.w	r3, r1, #12
 80076a4:	2200      	movs	r2, #0
 80076a6:	ed53 7a02 	vldr	s15, [r3, #-8]
 80076aa:	3201      	adds	r2, #1
 80076ac:	3308      	adds	r3, #8
 80076ae:	eef1 7a67 	vneg.f32	s15, s15
 80076b2:	4295      	cmp	r5, r2
 80076b4:	ed43 7a04 	vstr	s15, [r3, #-16]
 80076b8:	d1f5      	bne.n	80076a6 <arm_cfft_f32+0xc2>
 80076ba:	e79c      	b.n	80075f6 <arm_cfft_f32+0x12>
 80076bc:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80076c0:	d0a7      	beq.n	8007612 <arm_cfft_f32+0x2e>
 80076c2:	e7ac      	b.n	800761e <arm_cfft_f32+0x3a>
 80076c4:	2d10      	cmp	r5, #16
 80076c6:	d0b8      	beq.n	800763a <arm_cfft_f32+0x56>
 80076c8:	e7a9      	b.n	800761e <arm_cfft_f32+0x3a>
 80076ca:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80076ce:	d896      	bhi.n	80075fe <arm_cfft_f32+0x1a>
 80076d0:	e7ac      	b.n	800762c <arm_cfft_f32+0x48>
 80076d2:	bf00      	nop

080076d4 <arm_biquad_cascade_df1_init_f32>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4604      	mov	r4, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	461d      	mov	r5, r3
 80076dc:	2100      	movs	r1, #0
 80076de:	60a2      	str	r2, [r4, #8]
 80076e0:	0102      	lsls	r2, r0, #4
 80076e2:	6020      	str	r0, [r4, #0]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 fe90 	bl	800840a <memset>
 80076ea:	6065      	str	r5, [r4, #4]
 80076ec:	bd38      	pop	{r3, r4, r5, pc}
 80076ee:	bf00      	nop

080076f0 <arm_biquad_cascade_df1_f32>:
 80076f0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80076f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076f8:	4696      	mov	lr, r2
 80076fa:	6886      	ldr	r6, [r0, #8]
 80076fc:	6845      	ldr	r5, [r0, #4]
 80076fe:	ea4f 180c 	mov.w	r8, ip, lsl #4
 8007702:	f003 0203 	and.w	r2, r3, #3
 8007706:	3614      	adds	r6, #20
 8007708:	3510      	adds	r5, #16
 800770a:	6807      	ldr	r7, [r0, #0]
 800770c:	eb0e 0908 	add.w	r9, lr, r8
 8007710:	ed56 3a05 	vldr	s7, [r6, #-20]	@ 0xffffffec
 8007714:	ed16 3a04 	vldr	s6, [r6, #-16]
 8007718:	ed56 2a03 	vldr	s5, [r6, #-12]
 800771c:	ed16 2a02 	vldr	s4, [r6, #-8]
 8007720:	ed56 1a01 	vldr	s3, [r6, #-4]
 8007724:	ed15 1a04 	vldr	s2, [r5, #-16]
 8007728:	ed55 0a03 	vldr	s1, [r5, #-12]
 800772c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8007730:	ed15 6a01 	vldr	s12, [r5, #-4]
 8007734:	f1bc 0f00 	cmp.w	ip, #0
 8007738:	f000 80a3 	beq.w	8007882 <arm_biquad_cascade_df1_f32+0x192>
 800773c:	f101 0010 	add.w	r0, r1, #16
 8007740:	f10e 0310 	add.w	r3, lr, #16
 8007744:	4664      	mov	r4, ip
 8007746:	ed10 4a04 	vldr	s8, [r0, #-16]
 800774a:	ee23 7a01 	vmul.f32	s14, s6, s2
 800774e:	ee62 0aa0 	vmul.f32	s1, s5, s1
 8007752:	3c01      	subs	r4, #1
 8007754:	ee23 5a84 	vmul.f32	s10, s7, s8
 8007758:	f100 0010 	add.w	r0, r0, #16
 800775c:	ee22 0a27 	vmul.f32	s0, s4, s15
 8007760:	f103 0310 	add.w	r3, r3, #16
 8007764:	ee21 6a86 	vmul.f32	s12, s3, s12
 8007768:	ee75 4a07 	vadd.f32	s9, s10, s14
 800776c:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8007770:	ee63 5a04 	vmul.f32	s11, s6, s8
 8007774:	ee34 7aa0 	vadd.f32	s14, s9, s1
 8007778:	ee22 1a81 	vmul.f32	s2, s5, s2
 800777c:	ee22 4a84 	vmul.f32	s8, s5, s8
 8007780:	ee37 7a00 	vadd.f32	s14, s14, s0
 8007784:	ee37 6a06 	vadd.f32	s12, s14, s12
 8007788:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 800778c:	ee22 7a06 	vmul.f32	s14, s4, s12
 8007790:	ed50 7a07 	vldr	s15, [r0, #-28]	@ 0xffffffe4
 8007794:	ee21 6a86 	vmul.f32	s12, s3, s12
 8007798:	ee23 5aa7 	vmul.f32	s10, s7, s15
 800779c:	ee23 0a27 	vmul.f32	s0, s6, s15
 80077a0:	ee62 4aa7 	vmul.f32	s9, s5, s15
 80077a4:	ee35 5a25 	vadd.f32	s10, s10, s11
 80077a8:	ee75 5a01 	vadd.f32	s11, s10, s2
 80077ac:	ee75 5a87 	vadd.f32	s11, s11, s14
 80077b0:	ee75 6aa6 	vadd.f32	s13, s11, s13
 80077b4:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 80077b8:	ee62 7a26 	vmul.f32	s15, s4, s13
 80077bc:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 80077c0:	ee61 5aa6 	vmul.f32	s11, s3, s13
 80077c4:	ee23 5aa0 	vmul.f32	s10, s7, s1
 80077c8:	ee23 7a20 	vmul.f32	s14, s6, s1
 80077cc:	ee35 5a00 	vadd.f32	s10, s10, s0
 80077d0:	ee75 6a04 	vadd.f32	s13, s10, s8
 80077d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80077d8:	ee36 6a86 	vadd.f32	s12, s13, s12
 80077dc:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 80077e0:	ee62 7a06 	vmul.f32	s15, s4, s12
 80077e4:	ed10 1a05 	vldr	s2, [r0, #-20]	@ 0xffffffec
 80077e8:	ee63 6a81 	vmul.f32	s13, s7, s2
 80077ec:	ee36 7a87 	vadd.f32	s14, s13, s14
 80077f0:	ee37 7a24 	vadd.f32	s14, s14, s9
 80077f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077f8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80077fc:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8007800:	d1a1      	bne.n	8007746 <arm_biquad_cascade_df1_f32+0x56>
 8007802:	4441      	add	r1, r8
 8007804:	4648      	mov	r0, r9
 8007806:	b39a      	cbz	r2, 8007870 <arm_biquad_cascade_df1_f32+0x180>
 8007808:	4613      	mov	r3, r2
 800780a:	e003      	b.n	8007814 <arm_biquad_cascade_df1_f32+0x124>
 800780c:	eef0 7a45 	vmov.f32	s15, s10
 8007810:	eeb0 1a47 	vmov.f32	s2, s14
 8007814:	ecb1 7a01 	vldmia	r1!, {s14}
 8007818:	ee63 4a01 	vmul.f32	s9, s6, s2
 800781c:	ee62 5aa0 	vmul.f32	s11, s5, s1
 8007820:	3b01      	subs	r3, #1
 8007822:	ee23 4a87 	vmul.f32	s8, s7, s14
 8007826:	ee22 5a27 	vmul.f32	s10, s4, s15
 800782a:	ee61 6a86 	vmul.f32	s13, s3, s12
 800782e:	ee74 4a24 	vadd.f32	s9, s8, s9
 8007832:	eef0 0a41 	vmov.f32	s1, s2
 8007836:	eeb0 6a67 	vmov.f32	s12, s15
 800783a:	ee74 4aa5 	vadd.f32	s9, s9, s11
 800783e:	ee34 5a85 	vadd.f32	s10, s9, s10
 8007842:	ee35 5a26 	vadd.f32	s10, s10, s13
 8007846:	eca0 5a01 	vstmia	r0!, {s10}
 800784a:	d1df      	bne.n	800780c <arm_biquad_cascade_df1_f32+0x11c>
 800784c:	3f01      	subs	r7, #1
 800784e:	ed05 7a04 	vstr	s14, [r5, #-16]
 8007852:	ed05 1a03 	vstr	s2, [r5, #-12]
 8007856:	f106 0614 	add.w	r6, r6, #20
 800785a:	ed05 5a02 	vstr	s10, [r5, #-8]
 800785e:	4671      	mov	r1, lr
 8007860:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007864:	f105 0510 	add.w	r5, r5, #16
 8007868:	f47f af52 	bne.w	8007710 <arm_biquad_cascade_df1_f32+0x20>
 800786c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007870:	eeb0 5a67 	vmov.f32	s10, s15
 8007874:	eeb0 7a41 	vmov.f32	s14, s2
 8007878:	eef0 7a46 	vmov.f32	s15, s12
 800787c:	eeb0 1a60 	vmov.f32	s2, s1
 8007880:	e7e4      	b.n	800784c <arm_biquad_cascade_df1_f32+0x15c>
 8007882:	4670      	mov	r0, lr
 8007884:	e7bf      	b.n	8007806 <arm_biquad_cascade_df1_f32+0x116>
 8007886:	bf00      	nop

08007888 <arm_scale_f32>:
 8007888:	b470      	push	{r4, r5, r6}
 800788a:	0896      	lsrs	r6, r2, #2
 800788c:	d025      	beq.n	80078da <arm_scale_f32+0x52>
 800788e:	f100 0410 	add.w	r4, r0, #16
 8007892:	f101 0310 	add.w	r3, r1, #16
 8007896:	4635      	mov	r5, r6
 8007898:	ed14 6a04 	vldr	s12, [r4, #-16]
 800789c:	3d01      	subs	r5, #1
 800789e:	ed54 6a03 	vldr	s13, [r4, #-12]
 80078a2:	f103 0310 	add.w	r3, r3, #16
 80078a6:	ed14 7a02 	vldr	s14, [r4, #-8]
 80078aa:	ee26 6a00 	vmul.f32	s12, s12, s0
 80078ae:	ed54 7a01 	vldr	s15, [r4, #-4]
 80078b2:	ee66 6a80 	vmul.f32	s13, s13, s0
 80078b6:	ee27 7a00 	vmul.f32	s14, s14, s0
 80078ba:	f104 0410 	add.w	r4, r4, #16
 80078be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80078c2:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 80078c6:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 80078ca:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 80078ce:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 80078d2:	d1e1      	bne.n	8007898 <arm_scale_f32+0x10>
 80078d4:	0136      	lsls	r6, r6, #4
 80078d6:	4430      	add	r0, r6
 80078d8:	4431      	add	r1, r6
 80078da:	f012 0203 	ands.w	r2, r2, #3
 80078de:	d007      	beq.n	80078f0 <arm_scale_f32+0x68>
 80078e0:	ecf0 7a01 	vldmia	r0!, {s15}
 80078e4:	3a01      	subs	r2, #1
 80078e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80078ea:	ece1 7a01 	vstmia	r1!, {s15}
 80078ee:	d1f7      	bne.n	80078e0 <arm_scale_f32+0x58>
 80078f0:	bc70      	pop	{r4, r5, r6}
 80078f2:	4770      	bx	lr

080078f4 <arm_offset_f32>:
 80078f4:	b470      	push	{r4, r5, r6}
 80078f6:	0896      	lsrs	r6, r2, #2
 80078f8:	d025      	beq.n	8007946 <arm_offset_f32+0x52>
 80078fa:	f100 0410 	add.w	r4, r0, #16
 80078fe:	f101 0310 	add.w	r3, r1, #16
 8007902:	4635      	mov	r5, r6
 8007904:	ed14 6a04 	vldr	s12, [r4, #-16]
 8007908:	3d01      	subs	r5, #1
 800790a:	ed54 6a03 	vldr	s13, [r4, #-12]
 800790e:	f103 0310 	add.w	r3, r3, #16
 8007912:	ed14 7a02 	vldr	s14, [r4, #-8]
 8007916:	ee36 6a00 	vadd.f32	s12, s12, s0
 800791a:	ed54 7a01 	vldr	s15, [r4, #-4]
 800791e:	ee76 6a80 	vadd.f32	s13, s13, s0
 8007922:	ee37 7a00 	vadd.f32	s14, s14, s0
 8007926:	f104 0410 	add.w	r4, r4, #16
 800792a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800792e:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 8007932:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8007936:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 800793a:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800793e:	d1e1      	bne.n	8007904 <arm_offset_f32+0x10>
 8007940:	0136      	lsls	r6, r6, #4
 8007942:	4430      	add	r0, r6
 8007944:	4431      	add	r1, r6
 8007946:	f012 0203 	ands.w	r2, r2, #3
 800794a:	d007      	beq.n	800795c <arm_offset_f32+0x68>
 800794c:	ecf0 7a01 	vldmia	r0!, {s15}
 8007950:	3a01      	subs	r2, #1
 8007952:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007956:	ece1 7a01 	vstmia	r1!, {s15}
 800795a:	d1f7      	bne.n	800794c <arm_offset_f32+0x58>
 800795c:	bc70      	pop	{r4, r5, r6}
 800795e:	4770      	bx	lr

08007960 <arm_mult_f32>:
 8007960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007962:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8007966:	d033      	beq.n	80079d0 <arm_mult_f32+0x70>
 8007968:	f100 0610 	add.w	r6, r0, #16
 800796c:	f101 0510 	add.w	r5, r1, #16
 8007970:	f102 0410 	add.w	r4, r2, #16
 8007974:	4677      	mov	r7, lr
 8007976:	ed16 7a04 	vldr	s14, [r6, #-16]
 800797a:	3f01      	subs	r7, #1
 800797c:	ed15 6a04 	vldr	s12, [r5, #-16]
 8007980:	f106 0610 	add.w	r6, r6, #16
 8007984:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8007988:	f105 0510 	add.w	r5, r5, #16
 800798c:	ee27 6a06 	vmul.f32	s12, s14, s12
 8007990:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 8007994:	ed16 7a07 	vldr	s14, [r6, #-28]	@ 0xffffffe4
 8007998:	f104 0410 	add.w	r4, r4, #16
 800799c:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 80079a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80079a4:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 80079a8:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 80079ac:	ee27 7a25 	vmul.f32	s14, s14, s11
 80079b0:	ed15 6a05 	vldr	s12, [r5, #-20]	@ 0xffffffec
 80079b4:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 80079b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80079bc:	ed04 7a07 	vstr	s14, [r4, #-28]	@ 0xffffffe4
 80079c0:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80079c4:	d1d7      	bne.n	8007976 <arm_mult_f32+0x16>
 80079c6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80079ca:	4420      	add	r0, r4
 80079cc:	4421      	add	r1, r4
 80079ce:	4422      	add	r2, r4
 80079d0:	f013 0303 	ands.w	r3, r3, #3
 80079d4:	d009      	beq.n	80079ea <arm_mult_f32+0x8a>
 80079d6:	ecf0 7a01 	vldmia	r0!, {s15}
 80079da:	3b01      	subs	r3, #1
 80079dc:	ecb1 7a01 	vldmia	r1!, {s14}
 80079e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079e4:	ece2 7a01 	vstmia	r2!, {s15}
 80079e8:	d1f5      	bne.n	80079d6 <arm_mult_f32+0x76>
 80079ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079ec <arm_add_f32>:
 80079ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ee:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80079f2:	d033      	beq.n	8007a5c <arm_add_f32+0x70>
 80079f4:	f100 0610 	add.w	r6, r0, #16
 80079f8:	f101 0510 	add.w	r5, r1, #16
 80079fc:	f102 0410 	add.w	r4, r2, #16
 8007a00:	4677      	mov	r7, lr
 8007a02:	ed16 7a03 	vldr	s14, [r6, #-12]
 8007a06:	3f01      	subs	r7, #1
 8007a08:	ed56 7a02 	vldr	s15, [r6, #-8]
 8007a0c:	f105 0510 	add.w	r5, r5, #16
 8007a10:	ed15 6a07 	vldr	s12, [r5, #-28]	@ 0xffffffe4
 8007a14:	f106 0610 	add.w	r6, r6, #16
 8007a18:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 8007a1c:	f104 0410 	add.w	r4, r4, #16
 8007a20:	ed15 5a05 	vldr	s10, [r5, #-20]	@ 0xffffffec
 8007a24:	ee37 6a06 	vadd.f32	s12, s14, s12
 8007a28:	ed55 5a08 	vldr	s11, [r5, #-32]	@ 0xffffffe0
 8007a2c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007a30:	ed16 7a05 	vldr	s14, [r6, #-20]	@ 0xffffffec
 8007a34:	ed56 7a08 	vldr	s15, [r6, #-32]	@ 0xffffffe0
 8007a38:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007a3c:	ed04 6a07 	vstr	s12, [r4, #-28]	@ 0xffffffe4
 8007a40:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007a44:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 8007a48:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 8007a4c:	ed44 7a08 	vstr	s15, [r4, #-32]	@ 0xffffffe0
 8007a50:	d1d7      	bne.n	8007a02 <arm_add_f32+0x16>
 8007a52:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007a56:	4420      	add	r0, r4
 8007a58:	4421      	add	r1, r4
 8007a5a:	4422      	add	r2, r4
 8007a5c:	f013 0303 	ands.w	r3, r3, #3
 8007a60:	d009      	beq.n	8007a76 <arm_add_f32+0x8a>
 8007a62:	ecf0 7a01 	vldmia	r0!, {s15}
 8007a66:	3b01      	subs	r3, #1
 8007a68:	ecb1 7a01 	vldmia	r1!, {s14}
 8007a6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a70:	ece2 7a01 	vstmia	r2!, {s15}
 8007a74:	d1f5      	bne.n	8007a62 <arm_add_f32+0x76>
 8007a76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a78 <arm_radix8_butterfly_f32>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	1d03      	adds	r3, r0, #4
 8007a80:	4683      	mov	fp, r0
 8007a82:	468a      	mov	sl, r1
 8007a84:	4688      	mov	r8, r1
 8007a86:	469c      	mov	ip, r3
 8007a88:	ed2d 8b10 	vpush	{d8-d15}
 8007a8c:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 8007da0 <arm_radix8_butterfly_f32+0x328>
 8007a90:	b09f      	sub	sp, #124	@ 0x7c
 8007a92:	921c      	str	r2, [sp, #112]	@ 0x70
 8007a94:	931d      	str	r3, [sp, #116]	@ 0x74
 8007a96:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8007a9a:	f04f 0900 	mov.w	r9, #0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007aa2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007aa6:	0051      	lsls	r1, r2, #1
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	9103      	str	r1, [sp, #12]
 8007aac:	00d1      	lsls	r1, r2, #3
 8007aae:	1885      	adds	r5, r0, r2
 8007ab0:	0110      	lsls	r0, r2, #4
 8007ab2:	eb0b 0601 	add.w	r6, fp, r1
 8007ab6:	9101      	str	r1, [sp, #4]
 8007ab8:	18ac      	adds	r4, r5, r2
 8007aba:	9002      	str	r0, [sp, #8]
 8007abc:	1877      	adds	r7, r6, r1
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4422      	add	r2, r4
 8007ac2:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8007ac6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8007aca:	1850      	adds	r0, r2, r1
 8007acc:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8007ad0:	4401      	add	r1, r0
 8007ad2:	3204      	adds	r2, #4
 8007ad4:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8007ad8:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8007adc:	3104      	adds	r1, #4
 8007ade:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8007ae2:	44c1      	add	r9, r8
 8007ae4:	edd4 6a00 	vldr	s13, [r4]
 8007ae8:	ed97 6a00 	vldr	s12, [r7]
 8007aec:	45ca      	cmp	sl, r9
 8007aee:	edd0 7a00 	vldr	s15, [r0]
 8007af2:	ee37 5a66 	vsub.f32	s10, s14, s13
 8007af6:	edd6 5a00 	vldr	s11, [r6]
 8007afa:	ee37 2a26 	vadd.f32	s4, s14, s13
 8007afe:	ee76 2a67 	vsub.f32	s5, s12, s15
 8007b02:	edd5 6a00 	vldr	s13, [r5]
 8007b06:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007b0a:	ee76 4a27 	vadd.f32	s9, s12, s15
 8007b0e:	ed11 6a01 	vldr	s12, [r1, #-4]
 8007b12:	ee75 1a87 	vadd.f32	s3, s11, s14
 8007b16:	ee36 4a86 	vadd.f32	s8, s13, s12
 8007b1a:	ee72 7a24 	vadd.f32	s15, s4, s9
 8007b1e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8007b22:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8007b26:	ee31 6a84 	vadd.f32	s12, s3, s8
 8007b2a:	ee32 2a64 	vsub.f32	s4, s4, s9
 8007b2e:	ee77 6a65 	vsub.f32	s13, s14, s11
 8007b32:	ee77 4a86 	vadd.f32	s9, s15, s12
 8007b36:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007b3a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007b3e:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8007b42:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8007b46:	edc4 7a00 	vstr	s15, [r4]
 8007b4a:	ee66 6a89 	vmul.f32	s13, s13, s18
 8007b4e:	edd6 5a01 	vldr	s11, [r6, #4]
 8007b52:	ee27 6a09 	vmul.f32	s12, s14, s18
 8007b56:	edd5 3a01 	vldr	s7, [r5, #4]
 8007b5a:	ed92 4a00 	vldr	s8, [r2]
 8007b5e:	ee35 1a26 	vadd.f32	s2, s10, s13
 8007b62:	edd1 4a00 	vldr	s9, [r1]
 8007b66:	ee75 6a66 	vsub.f32	s13, s10, s13
 8007b6a:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8007b6e:	ed94 0a01 	vldr	s0, [r4, #4]
 8007b72:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8007b76:	ed9c 7a00 	vldr	s14, [ip]
 8007b7a:	edd0 0a01 	vldr	s1, [r0, #4]
 8007b7e:	ee35 4a84 	vadd.f32	s8, s11, s8
 8007b82:	ed97 5a01 	vldr	s10, [r7, #4]
 8007b86:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8007b8a:	ee73 5a27 	vadd.f32	s11, s6, s15
 8007b8e:	ee77 3a00 	vadd.f32	s7, s14, s0
 8007b92:	ee33 3a67 	vsub.f32	s6, s6, s15
 8007b96:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007b9a:	ee35 0a20 	vadd.f32	s0, s10, s1
 8007b9e:	ee63 7a09 	vmul.f32	s15, s6, s18
 8007ba2:	ee35 5a60 	vsub.f32	s10, s10, s1
 8007ba6:	ee33 3a80 	vadd.f32	s6, s7, s0
 8007baa:	ee74 0a24 	vadd.f32	s1, s8, s9
 8007bae:	ee65 5a89 	vmul.f32	s11, s11, s18
 8007bb2:	ee74 4a64 	vsub.f32	s9, s8, s9
 8007bb6:	ee33 4ac0 	vsub.f32	s8, s7, s0
 8007bba:	ee75 3a25 	vadd.f32	s7, s10, s11
 8007bbe:	ee75 5a65 	vsub.f32	s11, s10, s11
 8007bc2:	ee37 5a27 	vadd.f32	s10, s14, s15
 8007bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bca:	ee32 7a86 	vadd.f32	s14, s5, s12
 8007bce:	ee32 6ac6 	vsub.f32	s12, s5, s12
 8007bd2:	ee73 2a20 	vadd.f32	s5, s6, s1
 8007bd6:	ee33 3a60 	vsub.f32	s6, s6, s1
 8007bda:	ee72 0a24 	vadd.f32	s1, s4, s9
 8007bde:	edcc 2a00 	vstr	s5, [ip]
 8007be2:	ee72 4a64 	vsub.f32	s9, s4, s9
 8007be6:	ed84 3a01 	vstr	s6, [r4, #4]
 8007bea:	ee74 2a61 	vsub.f32	s5, s8, s3
 8007bee:	ee31 3a23 	vadd.f32	s6, s2, s7
 8007bf2:	edc7 0a00 	vstr	s1, [r7]
 8007bf6:	ee31 1a63 	vsub.f32	s2, s2, s7
 8007bfa:	edc0 4a00 	vstr	s9, [r0]
 8007bfe:	ee76 3aa5 	vadd.f32	s7, s13, s11
 8007c02:	edc7 2a01 	vstr	s5, [r7, #4]
 8007c06:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8007c0a:	441c      	add	r4, r3
 8007c0c:	ee75 5a47 	vsub.f32	s11, s10, s14
 8007c10:	449c      	add	ip, r3
 8007c12:	ee35 5a07 	vadd.f32	s10, s10, s14
 8007c16:	441f      	add	r7, r3
 8007c18:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8007c1c:	ee34 4a21 	vadd.f32	s8, s8, s3
 8007c20:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007c24:	ed80 4a01 	vstr	s8, [r0, #4]
 8007c28:	4418      	add	r0, r3
 8007c2a:	ed86 3a00 	vstr	s6, [r6]
 8007c2e:	ed01 1a01 	vstr	s2, [r1, #-4]
 8007c32:	ed42 3a01 	vstr	s7, [r2, #-4]
 8007c36:	edc5 6a00 	vstr	s13, [r5]
 8007c3a:	edc6 5a01 	vstr	s11, [r6, #4]
 8007c3e:	441e      	add	r6, r3
 8007c40:	ed81 5a00 	vstr	s10, [r1]
 8007c44:	4419      	add	r1, r3
 8007c46:	ed82 7a00 	vstr	s14, [r2]
 8007c4a:	441a      	add	r2, r3
 8007c4c:	edc5 7a01 	vstr	s15, [r5, #4]
 8007c50:	441d      	add	r5, r3
 8007c52:	f63f af44 	bhi.w	8007ade <arm_radix8_butterfly_f32+0x66>
 8007c56:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8007c58:	2f07      	cmp	r7, #7
 8007c5a:	f240 81e8 	bls.w	800802e <arm_radix8_butterfly_f32+0x5b6>
 8007c5e:	9903      	ldr	r1, [sp, #12]
 8007c60:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8007c64:	9e01      	ldr	r6, [sp, #4]
 8007c66:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8007c6a:	19ca      	adds	r2, r1, r7
 8007c6c:	1c4c      	adds	r4, r1, #1
 8007c6e:	eb05 010e 	add.w	r1, r5, lr
 8007c72:	00ed      	lsls	r5, r5, #3
 8007c74:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8007c78:	3608      	adds	r6, #8
 8007c7a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007c7c:	eb01 050e 	add.w	r5, r1, lr
 8007c80:	00c9      	lsls	r1, r1, #3
 8007c82:	443c      	add	r4, r7
 8007c84:	9618      	str	r6, [sp, #96]	@ 0x60
 8007c86:	00ee      	lsls	r6, r5, #3
 8007c88:	460f      	mov	r7, r1
 8007c8a:	9114      	str	r1, [sp, #80]	@ 0x50
 8007c8c:	9902      	ldr	r1, [sp, #8]
 8007c8e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8007c92:	9611      	str	r6, [sp, #68]	@ 0x44
 8007c94:	00c0      	lsls	r0, r0, #3
 8007c96:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007c98:	3108      	adds	r1, #8
 8007c9a:	3404      	adds	r4, #4
 8007c9c:	f04f 0901 	mov.w	r9, #1
 8007ca0:	9119      	str	r1, [sp, #100]	@ 0x64
 8007ca2:	eb05 010e 	add.w	r1, r5, lr
 8007ca6:	4635      	mov	r5, r6
 8007ca8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007caa:	9301      	str	r3, [sp, #4]
 8007cac:	443d      	add	r5, r7
 8007cae:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8007cb0:	9507      	str	r5, [sp, #28]
 8007cb2:	eb01 050e 	add.w	r5, r1, lr
 8007cb6:	00c9      	lsls	r1, r1, #3
 8007cb8:	19f7      	adds	r7, r6, r7
 8007cba:	00ed      	lsls	r5, r5, #3
 8007cbc:	9110      	str	r1, [sp, #64]	@ 0x40
 8007cbe:	00d1      	lsls	r1, r2, #3
 8007cc0:	970a      	str	r7, [sp, #40]	@ 0x28
 8007cc2:	462f      	mov	r7, r5
 8007cc4:	9515      	str	r5, [sp, #84]	@ 0x54
 8007cc6:	0112      	lsls	r2, r2, #4
 8007cc8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8007cca:	19f4      	adds	r4, r6, r7
 8007ccc:	320c      	adds	r2, #12
 8007cce:	3108      	adds	r1, #8
 8007cd0:	1975      	adds	r5, r6, r5
 8007cd2:	9408      	str	r4, [sp, #32]
 8007cd4:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007cd6:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8007cda:	9509      	str	r5, [sp, #36]	@ 0x24
 8007cdc:	f100 020c 	add.w	r2, r0, #12
 8007ce0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007ce2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8007ce4:	1975      	adds	r5, r6, r5
 8007ce6:	9216      	str	r2, [sp, #88]	@ 0x58
 8007ce8:	1932      	adds	r2, r6, r4
 8007cea:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007cec:	9505      	str	r5, [sp, #20]
 8007cee:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8007cf2:	0179      	lsls	r1, r7, #5
 8007cf4:	9204      	str	r2, [sp, #16]
 8007cf6:	1972      	adds	r2, r6, r5
 8007cf8:	9412      	str	r4, [sp, #72]	@ 0x48
 8007cfa:	9513      	str	r5, [sp, #76]	@ 0x4c
 8007cfc:	9206      	str	r2, [sp, #24]
 8007cfe:	f101 0208 	add.w	r2, r1, #8
 8007d02:	921a      	str	r2, [sp, #104]	@ 0x68
 8007d04:	2200      	movs	r2, #0
 8007d06:	f102 0108 	add.w	r1, r2, #8
 8007d0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d0c:	46cc      	mov	ip, r9
 8007d0e:	460f      	mov	r7, r1
 8007d10:	910c      	str	r1, [sp, #48]	@ 0x30
 8007d12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d14:	eb0b 0e07 	add.w	lr, fp, r7
 8007d18:	9f04      	ldr	r7, [sp, #16]
 8007d1a:	188e      	adds	r6, r1, r2
 8007d1c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8007d1e:	edd7 fa00 	vldr	s31, [r7]
 8007d22:	9f06      	ldr	r7, [sp, #24]
 8007d24:	188d      	adds	r5, r1, r2
 8007d26:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8007d28:	445e      	add	r6, fp
 8007d2a:	ed97 fa00 	vldr	s30, [r7]
 8007d2e:	445d      	add	r5, fp
 8007d30:	9f05      	ldr	r7, [sp, #20]
 8007d32:	188c      	adds	r4, r1, r2
 8007d34:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8007d36:	edd7 ea00 	vldr	s29, [r7]
 8007d3a:	445c      	add	r4, fp
 8007d3c:	9f07      	ldr	r7, [sp, #28]
 8007d3e:	1888      	adds	r0, r1, r2
 8007d40:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8007d42:	ed97 ea00 	vldr	s28, [r7]
 8007d46:	4458      	add	r0, fp
 8007d48:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007d4a:	4411      	add	r1, r2
 8007d4c:	441a      	add	r2, r3
 8007d4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d50:	edd7 da00 	vldr	s27, [r7]
 8007d54:	4459      	add	r1, fp
 8007d56:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007d58:	445a      	add	r2, fp
 8007d5a:	930d      	str	r3, [sp, #52]	@ 0x34
 8007d5c:	ed97 da00 	vldr	s26, [r7]
 8007d60:	9f08      	ldr	r7, [sp, #32]
 8007d62:	edd7 ca00 	vldr	s25, [r7]
 8007d66:	9f04      	ldr	r7, [sp, #16]
 8007d68:	ed97 ca01 	vldr	s24, [r7, #4]
 8007d6c:	9f06      	ldr	r7, [sp, #24]
 8007d6e:	edd7 ba01 	vldr	s23, [r7, #4]
 8007d72:	9f05      	ldr	r7, [sp, #20]
 8007d74:	ed97 ba01 	vldr	s22, [r7, #4]
 8007d78:	9f07      	ldr	r7, [sp, #28]
 8007d7a:	edd7 aa01 	vldr	s21, [r7, #4]
 8007d7e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007d80:	ed97 aa01 	vldr	s20, [r7, #4]
 8007d84:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d8c:	9f08      	ldr	r7, [sp, #32]
 8007d8e:	edcd 7a02 	vstr	s15, [sp, #8]
 8007d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d96:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8007d98:	edcd 7a03 	vstr	s15, [sp, #12]
 8007d9c:	e002      	b.n	8007da4 <arm_radix8_butterfly_f32+0x32c>
 8007d9e:	bf00      	nop
 8007da0:	3f3504f3 	.word	0x3f3504f3
 8007da4:	ed90 2a00 	vldr	s4, [r0]
 8007da8:	44c4      	add	ip, r8
 8007daa:	ed96 7a00 	vldr	s14, [r6]
 8007dae:	ed94 8a00 	vldr	s16, [r4]
 8007db2:	45e2      	cmp	sl, ip
 8007db4:	ed52 7a01 	vldr	s15, [r2, #-4]
 8007db8:	ed95 5a00 	vldr	s10, [r5]
 8007dbc:	ed51 5a01 	vldr	s11, [r1, #-4]
 8007dc0:	ee38 6a27 	vadd.f32	s12, s16, s15
 8007dc4:	ed9e 1a00 	vldr	s2, [lr]
 8007dc8:	ee78 2a67 	vsub.f32	s5, s16, s15
 8007dcc:	ed17 4a01 	vldr	s8, [r7, #-4]
 8007dd0:	ee75 3a25 	vadd.f32	s7, s10, s11
 8007dd4:	ee31 3a07 	vadd.f32	s6, s2, s14
 8007dd8:	edde 4a01 	vldr	s9, [lr, #4]
 8007ddc:	ee72 6a04 	vadd.f32	s13, s4, s8
 8007de0:	ee75 5a65 	vsub.f32	s11, s10, s11
 8007de4:	ee73 1a06 	vadd.f32	s3, s6, s12
 8007de8:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8007dec:	ee32 4a44 	vsub.f32	s8, s4, s8
 8007df0:	ee31 1a47 	vsub.f32	s2, s2, s14
 8007df4:	ee31 7a85 	vadd.f32	s14, s3, s10
 8007df8:	ee75 7a84 	vadd.f32	s15, s11, s8
 8007dfc:	ee33 3a46 	vsub.f32	s6, s6, s12
 8007e00:	ed8e 7a00 	vstr	s14, [lr]
 8007e04:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8007e08:	ee67 7a89 	vmul.f32	s15, s15, s18
 8007e0c:	ed90 2a01 	vldr	s4, [r0, #4]
 8007e10:	ed95 7a01 	vldr	s14, [r5, #4]
 8007e14:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8007e18:	ed91 6a00 	vldr	s12, [r1]
 8007e1c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8007e20:	edd7 8a00 	vldr	s17, [r7]
 8007e24:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8007e28:	ee72 5aa7 	vadd.f32	s11, s5, s15
 8007e2c:	edd2 0a00 	vldr	s1, [r2]
 8007e30:	ee72 6a68 	vsub.f32	s13, s4, s17
 8007e34:	edd6 7a01 	vldr	s15, [r6, #4]
 8007e38:	ee77 2a46 	vsub.f32	s5, s14, s12
 8007e3c:	ee37 0a06 	vadd.f32	s0, s14, s12
 8007e40:	ed94 7a01 	vldr	s14, [r4, #4]
 8007e44:	ee32 6a28 	vadd.f32	s12, s4, s17
 8007e48:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8007e4c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8007e50:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8007e54:	ee77 6a20 	vadd.f32	s13, s14, s1
 8007e58:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8007e5c:	ee37 7a60 	vsub.f32	s14, s14, s1
 8007e60:	ee24 4a09 	vmul.f32	s8, s8, s18
 8007e64:	ee70 0a06 	vadd.f32	s1, s0, s12
 8007e68:	ee69 7a89 	vmul.f32	s15, s19, s18
 8007e6c:	ee62 2a89 	vmul.f32	s5, s5, s18
 8007e70:	ee30 6a46 	vsub.f32	s12, s0, s12
 8007e74:	ee32 0a26 	vadd.f32	s0, s4, s13
 8007e78:	ee72 6a66 	vsub.f32	s13, s4, s13
 8007e7c:	ee77 8a62 	vsub.f32	s17, s14, s5
 8007e80:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8007e84:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8007e88:	ee77 4a22 	vadd.f32	s9, s14, s5
 8007e8c:	ee71 2a04 	vadd.f32	s5, s2, s8
 8007e90:	ee31 7a44 	vsub.f32	s14, s2, s8
 8007e94:	ee30 1a60 	vsub.f32	s2, s0, s1
 8007e98:	ee73 1a06 	vadd.f32	s3, s6, s12
 8007e9c:	ee33 6a46 	vsub.f32	s12, s6, s12
 8007ea0:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8007ea4:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8007ea8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8007eac:	ee77 7a88 	vadd.f32	s15, s15, s16
 8007eb0:	ee72 3a65 	vsub.f32	s7, s4, s11
 8007eb4:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8007eb8:	ee72 5a25 	vadd.f32	s11, s4, s11
 8007ebc:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8007ec0:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8007ec4:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8007ec8:	ee77 2a28 	vadd.f32	s5, s14, s17
 8007ecc:	ee37 7a68 	vsub.f32	s14, s14, s17
 8007ed0:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8007ed4:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8007ed8:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8007edc:	ee70 0a20 	vadd.f32	s1, s0, s1
 8007ee0:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8007ee4:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8007ee8:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8007eec:	edce 0a01 	vstr	s1, [lr, #4]
 8007ef0:	ee38 8a88 	vadd.f32	s16, s17, s16
 8007ef4:	449e      	add	lr, r3
 8007ef6:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8007efa:	ee31 5a45 	vsub.f32	s10, s2, s10
 8007efe:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8007f02:	ed86 8a00 	vstr	s16, [r6]
 8007f06:	ee39 0a80 	vadd.f32	s0, s19, s0
 8007f0a:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007f0e:	ed86 5a01 	vstr	s10, [r6, #4]
 8007f12:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8007f16:	edcd 3a01 	vstr	s7, [sp, #4]
 8007f1a:	ed9d 5a03 	vldr	s10, [sp, #12]
 8007f1e:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8007f22:	eddd 3a02 	vldr	s7, [sp, #8]
 8007f26:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8007f2a:	ed84 0a00 	vstr	s0, [r4]
 8007f2e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8007f32:	ed84 3a01 	vstr	s6, [r4, #4]
 8007f36:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8007f3a:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007f3e:	eddd 3a01 	vldr	s7, [sp, #4]
 8007f42:	ee25 5a25 	vmul.f32	s10, s10, s11
 8007f46:	441e      	add	r6, r3
 8007f48:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8007f4c:	441c      	add	r4, r3
 8007f4e:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8007f52:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8007f56:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8007f5a:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8007f5e:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8007f62:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8007f66:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8007f6a:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8007f6e:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8007f72:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8007f76:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8007f7a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8007f7e:	ee38 8a01 	vadd.f32	s16, s16, s2
 8007f82:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8007f86:	ee39 5a85 	vadd.f32	s10, s19, s10
 8007f8a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8007f8e:	ed02 8a01 	vstr	s16, [r2, #-4]
 8007f92:	ee30 0a21 	vadd.f32	s0, s0, s3
 8007f96:	ed82 6a00 	vstr	s12, [r2]
 8007f9a:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007f9e:	edc5 0a00 	vstr	s1, [r5]
 8007fa2:	ee33 3a28 	vadd.f32	s6, s6, s17
 8007fa6:	edc5 3a01 	vstr	s7, [r5, #4]
 8007faa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007fae:	ed07 5a01 	vstr	s10, [r7, #-4]
 8007fb2:	edc7 4a00 	vstr	s9, [r7]
 8007fb6:	441d      	add	r5, r3
 8007fb8:	ed01 0a01 	vstr	s0, [r1, #-4]
 8007fbc:	441a      	add	r2, r3
 8007fbe:	edc1 2a00 	vstr	s5, [r1]
 8007fc2:	441f      	add	r7, r3
 8007fc4:	ed80 3a00 	vstr	s6, [r0]
 8007fc8:	4419      	add	r1, r3
 8007fca:	ed80 7a01 	vstr	s14, [r0, #4]
 8007fce:	4418      	add	r0, r3
 8007fd0:	f63f aee8 	bhi.w	8007da4 <arm_radix8_butterfly_f32+0x32c>
 8007fd4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007fd6:	f109 0901 	add.w	r9, r9, #1
 8007fda:	9301      	str	r3, [sp, #4]
 8007fdc:	9b04      	ldr	r3, [sp, #16]
 8007fde:	4413      	add	r3, r2
 8007fe0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007fe2:	9304      	str	r3, [sp, #16]
 8007fe4:	9b06      	ldr	r3, [sp, #24]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007fea:	9306      	str	r3, [sp, #24]
 8007fec:	9b05      	ldr	r3, [sp, #20]
 8007fee:	4413      	add	r3, r2
 8007ff0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ff2:	9305      	str	r3, [sp, #20]
 8007ff4:	9b07      	ldr	r3, [sp, #28]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ffa:	9307      	str	r3, [sp, #28]
 8007ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ffe:	4413      	add	r3, r2
 8008000:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008002:	930a      	str	r3, [sp, #40]	@ 0x28
 8008004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008006:	4413      	add	r3, r2
 8008008:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800800a:	9309      	str	r3, [sp, #36]	@ 0x24
 800800c:	9b08      	ldr	r3, [sp, #32]
 800800e:	4413      	add	r3, r2
 8008010:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008012:	9308      	str	r3, [sp, #32]
 8008014:	3208      	adds	r2, #8
 8008016:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008018:	920b      	str	r2, [sp, #44]	@ 0x2c
 800801a:	4599      	cmp	r9, r3
 800801c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800801e:	f47f ae72 	bne.w	8007d06 <arm_radix8_butterfly_f32+0x28e>
 8008022:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 8008026:	46c8      	mov	r8, r9
 8008028:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 800802c:	e533      	b.n	8007a96 <arm_radix8_butterfly_f32+0x1e>
 800802e:	b01f      	add	sp, #124	@ 0x7c
 8008030:	ecbd 8b10 	vpop	{d8-d15}
 8008034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008038 <malloc>:
 8008038:	4b02      	ldr	r3, [pc, #8]	@ (8008044 <malloc+0xc>)
 800803a:	4601      	mov	r1, r0
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	f000 b825 	b.w	800808c <_malloc_r>
 8008042:	bf00      	nop
 8008044:	24000030 	.word	0x24000030

08008048 <sbrk_aligned>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	4e0f      	ldr	r6, [pc, #60]	@ (8008088 <sbrk_aligned+0x40>)
 800804c:	460c      	mov	r4, r1
 800804e:	6831      	ldr	r1, [r6, #0]
 8008050:	4605      	mov	r5, r0
 8008052:	b911      	cbnz	r1, 800805a <sbrk_aligned+0x12>
 8008054:	f000 fa16 	bl	8008484 <_sbrk_r>
 8008058:	6030      	str	r0, [r6, #0]
 800805a:	4621      	mov	r1, r4
 800805c:	4628      	mov	r0, r5
 800805e:	f000 fa11 	bl	8008484 <_sbrk_r>
 8008062:	1c43      	adds	r3, r0, #1
 8008064:	d103      	bne.n	800806e <sbrk_aligned+0x26>
 8008066:	f04f 34ff 	mov.w	r4, #4294967295
 800806a:	4620      	mov	r0, r4
 800806c:	bd70      	pop	{r4, r5, r6, pc}
 800806e:	1cc4      	adds	r4, r0, #3
 8008070:	f024 0403 	bic.w	r4, r4, #3
 8008074:	42a0      	cmp	r0, r4
 8008076:	d0f8      	beq.n	800806a <sbrk_aligned+0x22>
 8008078:	1a21      	subs	r1, r4, r0
 800807a:	4628      	mov	r0, r5
 800807c:	f000 fa02 	bl	8008484 <_sbrk_r>
 8008080:	3001      	adds	r0, #1
 8008082:	d1f2      	bne.n	800806a <sbrk_aligned+0x22>
 8008084:	e7ef      	b.n	8008066 <sbrk_aligned+0x1e>
 8008086:	bf00      	nop
 8008088:	2407e334 	.word	0x2407e334

0800808c <_malloc_r>:
 800808c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008090:	1ccd      	adds	r5, r1, #3
 8008092:	f025 0503 	bic.w	r5, r5, #3
 8008096:	3508      	adds	r5, #8
 8008098:	2d0c      	cmp	r5, #12
 800809a:	bf38      	it	cc
 800809c:	250c      	movcc	r5, #12
 800809e:	2d00      	cmp	r5, #0
 80080a0:	4606      	mov	r6, r0
 80080a2:	db01      	blt.n	80080a8 <_malloc_r+0x1c>
 80080a4:	42a9      	cmp	r1, r5
 80080a6:	d904      	bls.n	80080b2 <_malloc_r+0x26>
 80080a8:	230c      	movs	r3, #12
 80080aa:	6033      	str	r3, [r6, #0]
 80080ac:	2000      	movs	r0, #0
 80080ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008188 <_malloc_r+0xfc>
 80080b6:	f000 f869 	bl	800818c <__malloc_lock>
 80080ba:	f8d8 3000 	ldr.w	r3, [r8]
 80080be:	461c      	mov	r4, r3
 80080c0:	bb44      	cbnz	r4, 8008114 <_malloc_r+0x88>
 80080c2:	4629      	mov	r1, r5
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7ff ffbf 	bl	8008048 <sbrk_aligned>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	4604      	mov	r4, r0
 80080ce:	d158      	bne.n	8008182 <_malloc_r+0xf6>
 80080d0:	f8d8 4000 	ldr.w	r4, [r8]
 80080d4:	4627      	mov	r7, r4
 80080d6:	2f00      	cmp	r7, #0
 80080d8:	d143      	bne.n	8008162 <_malloc_r+0xd6>
 80080da:	2c00      	cmp	r4, #0
 80080dc:	d04b      	beq.n	8008176 <_malloc_r+0xea>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	4639      	mov	r1, r7
 80080e2:	4630      	mov	r0, r6
 80080e4:	eb04 0903 	add.w	r9, r4, r3
 80080e8:	f000 f9cc 	bl	8008484 <_sbrk_r>
 80080ec:	4581      	cmp	r9, r0
 80080ee:	d142      	bne.n	8008176 <_malloc_r+0xea>
 80080f0:	6821      	ldr	r1, [r4, #0]
 80080f2:	1a6d      	subs	r5, r5, r1
 80080f4:	4629      	mov	r1, r5
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7ff ffa6 	bl	8008048 <sbrk_aligned>
 80080fc:	3001      	adds	r0, #1
 80080fe:	d03a      	beq.n	8008176 <_malloc_r+0xea>
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	442b      	add	r3, r5
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	f8d8 3000 	ldr.w	r3, [r8]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	bb62      	cbnz	r2, 8008168 <_malloc_r+0xdc>
 800810e:	f8c8 7000 	str.w	r7, [r8]
 8008112:	e00f      	b.n	8008134 <_malloc_r+0xa8>
 8008114:	6822      	ldr	r2, [r4, #0]
 8008116:	1b52      	subs	r2, r2, r5
 8008118:	d420      	bmi.n	800815c <_malloc_r+0xd0>
 800811a:	2a0b      	cmp	r2, #11
 800811c:	d917      	bls.n	800814e <_malloc_r+0xc2>
 800811e:	1961      	adds	r1, r4, r5
 8008120:	42a3      	cmp	r3, r4
 8008122:	6025      	str	r5, [r4, #0]
 8008124:	bf18      	it	ne
 8008126:	6059      	strne	r1, [r3, #4]
 8008128:	6863      	ldr	r3, [r4, #4]
 800812a:	bf08      	it	eq
 800812c:	f8c8 1000 	streq.w	r1, [r8]
 8008130:	5162      	str	r2, [r4, r5]
 8008132:	604b      	str	r3, [r1, #4]
 8008134:	4630      	mov	r0, r6
 8008136:	f000 f82f 	bl	8008198 <__malloc_unlock>
 800813a:	f104 000b 	add.w	r0, r4, #11
 800813e:	1d23      	adds	r3, r4, #4
 8008140:	f020 0007 	bic.w	r0, r0, #7
 8008144:	1ac2      	subs	r2, r0, r3
 8008146:	bf1c      	itt	ne
 8008148:	1a1b      	subne	r3, r3, r0
 800814a:	50a3      	strne	r3, [r4, r2]
 800814c:	e7af      	b.n	80080ae <_malloc_r+0x22>
 800814e:	6862      	ldr	r2, [r4, #4]
 8008150:	42a3      	cmp	r3, r4
 8008152:	bf0c      	ite	eq
 8008154:	f8c8 2000 	streq.w	r2, [r8]
 8008158:	605a      	strne	r2, [r3, #4]
 800815a:	e7eb      	b.n	8008134 <_malloc_r+0xa8>
 800815c:	4623      	mov	r3, r4
 800815e:	6864      	ldr	r4, [r4, #4]
 8008160:	e7ae      	b.n	80080c0 <_malloc_r+0x34>
 8008162:	463c      	mov	r4, r7
 8008164:	687f      	ldr	r7, [r7, #4]
 8008166:	e7b6      	b.n	80080d6 <_malloc_r+0x4a>
 8008168:	461a      	mov	r2, r3
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	42a3      	cmp	r3, r4
 800816e:	d1fb      	bne.n	8008168 <_malloc_r+0xdc>
 8008170:	2300      	movs	r3, #0
 8008172:	6053      	str	r3, [r2, #4]
 8008174:	e7de      	b.n	8008134 <_malloc_r+0xa8>
 8008176:	230c      	movs	r3, #12
 8008178:	6033      	str	r3, [r6, #0]
 800817a:	4630      	mov	r0, r6
 800817c:	f000 f80c 	bl	8008198 <__malloc_unlock>
 8008180:	e794      	b.n	80080ac <_malloc_r+0x20>
 8008182:	6005      	str	r5, [r0, #0]
 8008184:	e7d6      	b.n	8008134 <_malloc_r+0xa8>
 8008186:	bf00      	nop
 8008188:	2407e338 	.word	0x2407e338

0800818c <__malloc_lock>:
 800818c:	4801      	ldr	r0, [pc, #4]	@ (8008194 <__malloc_lock+0x8>)
 800818e:	f000 b9c6 	b.w	800851e <__retarget_lock_acquire_recursive>
 8008192:	bf00      	nop
 8008194:	2407e47c 	.word	0x2407e47c

08008198 <__malloc_unlock>:
 8008198:	4801      	ldr	r0, [pc, #4]	@ (80081a0 <__malloc_unlock+0x8>)
 800819a:	f000 b9c1 	b.w	8008520 <__retarget_lock_release_recursive>
 800819e:	bf00      	nop
 80081a0:	2407e47c 	.word	0x2407e47c

080081a4 <srand>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4b10      	ldr	r3, [pc, #64]	@ (80081e8 <srand+0x44>)
 80081a8:	681d      	ldr	r5, [r3, #0]
 80081aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80081ac:	4604      	mov	r4, r0
 80081ae:	b9b3      	cbnz	r3, 80081de <srand+0x3a>
 80081b0:	2018      	movs	r0, #24
 80081b2:	f7ff ff41 	bl	8008038 <malloc>
 80081b6:	4602      	mov	r2, r0
 80081b8:	6328      	str	r0, [r5, #48]	@ 0x30
 80081ba:	b920      	cbnz	r0, 80081c6 <srand+0x22>
 80081bc:	4b0b      	ldr	r3, [pc, #44]	@ (80081ec <srand+0x48>)
 80081be:	480c      	ldr	r0, [pc, #48]	@ (80081f0 <srand+0x4c>)
 80081c0:	2146      	movs	r1, #70	@ 0x46
 80081c2:	f000 f9af 	bl	8008524 <__assert_func>
 80081c6:	490b      	ldr	r1, [pc, #44]	@ (80081f4 <srand+0x50>)
 80081c8:	4b0b      	ldr	r3, [pc, #44]	@ (80081f8 <srand+0x54>)
 80081ca:	e9c0 1300 	strd	r1, r3, [r0]
 80081ce:	4b0b      	ldr	r3, [pc, #44]	@ (80081fc <srand+0x58>)
 80081d0:	6083      	str	r3, [r0, #8]
 80081d2:	230b      	movs	r3, #11
 80081d4:	8183      	strh	r3, [r0, #12]
 80081d6:	2100      	movs	r1, #0
 80081d8:	2001      	movs	r0, #1
 80081da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80081de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80081e0:	2200      	movs	r2, #0
 80081e2:	611c      	str	r4, [r3, #16]
 80081e4:	615a      	str	r2, [r3, #20]
 80081e6:	bd38      	pop	{r3, r4, r5, pc}
 80081e8:	24000030 	.word	0x24000030
 80081ec:	080808d0 	.word	0x080808d0
 80081f0:	080808e7 	.word	0x080808e7
 80081f4:	abcd330e 	.word	0xabcd330e
 80081f8:	e66d1234 	.word	0xe66d1234
 80081fc:	0005deec 	.word	0x0005deec

08008200 <std>:
 8008200:	2300      	movs	r3, #0
 8008202:	b510      	push	{r4, lr}
 8008204:	4604      	mov	r4, r0
 8008206:	e9c0 3300 	strd	r3, r3, [r0]
 800820a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800820e:	6083      	str	r3, [r0, #8]
 8008210:	8181      	strh	r1, [r0, #12]
 8008212:	6643      	str	r3, [r0, #100]	@ 0x64
 8008214:	81c2      	strh	r2, [r0, #14]
 8008216:	6183      	str	r3, [r0, #24]
 8008218:	4619      	mov	r1, r3
 800821a:	2208      	movs	r2, #8
 800821c:	305c      	adds	r0, #92	@ 0x5c
 800821e:	f000 f8f4 	bl	800840a <memset>
 8008222:	4b0d      	ldr	r3, [pc, #52]	@ (8008258 <std+0x58>)
 8008224:	6263      	str	r3, [r4, #36]	@ 0x24
 8008226:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <std+0x5c>)
 8008228:	62a3      	str	r3, [r4, #40]	@ 0x28
 800822a:	4b0d      	ldr	r3, [pc, #52]	@ (8008260 <std+0x60>)
 800822c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800822e:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <std+0x64>)
 8008230:	6323      	str	r3, [r4, #48]	@ 0x30
 8008232:	4b0d      	ldr	r3, [pc, #52]	@ (8008268 <std+0x68>)
 8008234:	6224      	str	r4, [r4, #32]
 8008236:	429c      	cmp	r4, r3
 8008238:	d006      	beq.n	8008248 <std+0x48>
 800823a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800823e:	4294      	cmp	r4, r2
 8008240:	d002      	beq.n	8008248 <std+0x48>
 8008242:	33d0      	adds	r3, #208	@ 0xd0
 8008244:	429c      	cmp	r4, r3
 8008246:	d105      	bne.n	8008254 <std+0x54>
 8008248:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800824c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008250:	f000 b964 	b.w	800851c <__retarget_lock_init_recursive>
 8008254:	bd10      	pop	{r4, pc}
 8008256:	bf00      	nop
 8008258:	08008385 	.word	0x08008385
 800825c:	080083a7 	.word	0x080083a7
 8008260:	080083df 	.word	0x080083df
 8008264:	08008403 	.word	0x08008403
 8008268:	2407e33c 	.word	0x2407e33c

0800826c <stdio_exit_handler>:
 800826c:	4a02      	ldr	r2, [pc, #8]	@ (8008278 <stdio_exit_handler+0xc>)
 800826e:	4903      	ldr	r1, [pc, #12]	@ (800827c <stdio_exit_handler+0x10>)
 8008270:	4803      	ldr	r0, [pc, #12]	@ (8008280 <stdio_exit_handler+0x14>)
 8008272:	f000 b869 	b.w	8008348 <_fwalk_sglue>
 8008276:	bf00      	nop
 8008278:	24000024 	.word	0x24000024
 800827c:	080086fd 	.word	0x080086fd
 8008280:	24000034 	.word	0x24000034

08008284 <cleanup_stdio>:
 8008284:	6841      	ldr	r1, [r0, #4]
 8008286:	4b0c      	ldr	r3, [pc, #48]	@ (80082b8 <cleanup_stdio+0x34>)
 8008288:	4299      	cmp	r1, r3
 800828a:	b510      	push	{r4, lr}
 800828c:	4604      	mov	r4, r0
 800828e:	d001      	beq.n	8008294 <cleanup_stdio+0x10>
 8008290:	f000 fa34 	bl	80086fc <_fflush_r>
 8008294:	68a1      	ldr	r1, [r4, #8]
 8008296:	4b09      	ldr	r3, [pc, #36]	@ (80082bc <cleanup_stdio+0x38>)
 8008298:	4299      	cmp	r1, r3
 800829a:	d002      	beq.n	80082a2 <cleanup_stdio+0x1e>
 800829c:	4620      	mov	r0, r4
 800829e:	f000 fa2d 	bl	80086fc <_fflush_r>
 80082a2:	68e1      	ldr	r1, [r4, #12]
 80082a4:	4b06      	ldr	r3, [pc, #24]	@ (80082c0 <cleanup_stdio+0x3c>)
 80082a6:	4299      	cmp	r1, r3
 80082a8:	d004      	beq.n	80082b4 <cleanup_stdio+0x30>
 80082aa:	4620      	mov	r0, r4
 80082ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b0:	f000 ba24 	b.w	80086fc <_fflush_r>
 80082b4:	bd10      	pop	{r4, pc}
 80082b6:	bf00      	nop
 80082b8:	2407e33c 	.word	0x2407e33c
 80082bc:	2407e3a4 	.word	0x2407e3a4
 80082c0:	2407e40c 	.word	0x2407e40c

080082c4 <global_stdio_init.part.0>:
 80082c4:	b510      	push	{r4, lr}
 80082c6:	4b0b      	ldr	r3, [pc, #44]	@ (80082f4 <global_stdio_init.part.0+0x30>)
 80082c8:	4c0b      	ldr	r4, [pc, #44]	@ (80082f8 <global_stdio_init.part.0+0x34>)
 80082ca:	4a0c      	ldr	r2, [pc, #48]	@ (80082fc <global_stdio_init.part.0+0x38>)
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	4620      	mov	r0, r4
 80082d0:	2200      	movs	r2, #0
 80082d2:	2104      	movs	r1, #4
 80082d4:	f7ff ff94 	bl	8008200 <std>
 80082d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082dc:	2201      	movs	r2, #1
 80082de:	2109      	movs	r1, #9
 80082e0:	f7ff ff8e 	bl	8008200 <std>
 80082e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082e8:	2202      	movs	r2, #2
 80082ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082ee:	2112      	movs	r1, #18
 80082f0:	f7ff bf86 	b.w	8008200 <std>
 80082f4:	2407e474 	.word	0x2407e474
 80082f8:	2407e33c 	.word	0x2407e33c
 80082fc:	0800826d 	.word	0x0800826d

08008300 <__sfp_lock_acquire>:
 8008300:	4801      	ldr	r0, [pc, #4]	@ (8008308 <__sfp_lock_acquire+0x8>)
 8008302:	f000 b90c 	b.w	800851e <__retarget_lock_acquire_recursive>
 8008306:	bf00      	nop
 8008308:	2407e47d 	.word	0x2407e47d

0800830c <__sfp_lock_release>:
 800830c:	4801      	ldr	r0, [pc, #4]	@ (8008314 <__sfp_lock_release+0x8>)
 800830e:	f000 b907 	b.w	8008520 <__retarget_lock_release_recursive>
 8008312:	bf00      	nop
 8008314:	2407e47d 	.word	0x2407e47d

08008318 <__sinit>:
 8008318:	b510      	push	{r4, lr}
 800831a:	4604      	mov	r4, r0
 800831c:	f7ff fff0 	bl	8008300 <__sfp_lock_acquire>
 8008320:	6a23      	ldr	r3, [r4, #32]
 8008322:	b11b      	cbz	r3, 800832c <__sinit+0x14>
 8008324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008328:	f7ff bff0 	b.w	800830c <__sfp_lock_release>
 800832c:	4b04      	ldr	r3, [pc, #16]	@ (8008340 <__sinit+0x28>)
 800832e:	6223      	str	r3, [r4, #32]
 8008330:	4b04      	ldr	r3, [pc, #16]	@ (8008344 <__sinit+0x2c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1f5      	bne.n	8008324 <__sinit+0xc>
 8008338:	f7ff ffc4 	bl	80082c4 <global_stdio_init.part.0>
 800833c:	e7f2      	b.n	8008324 <__sinit+0xc>
 800833e:	bf00      	nop
 8008340:	08008285 	.word	0x08008285
 8008344:	2407e474 	.word	0x2407e474

08008348 <_fwalk_sglue>:
 8008348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800834c:	4607      	mov	r7, r0
 800834e:	4688      	mov	r8, r1
 8008350:	4614      	mov	r4, r2
 8008352:	2600      	movs	r6, #0
 8008354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008358:	f1b9 0901 	subs.w	r9, r9, #1
 800835c:	d505      	bpl.n	800836a <_fwalk_sglue+0x22>
 800835e:	6824      	ldr	r4, [r4, #0]
 8008360:	2c00      	cmp	r4, #0
 8008362:	d1f7      	bne.n	8008354 <_fwalk_sglue+0xc>
 8008364:	4630      	mov	r0, r6
 8008366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800836a:	89ab      	ldrh	r3, [r5, #12]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d907      	bls.n	8008380 <_fwalk_sglue+0x38>
 8008370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008374:	3301      	adds	r3, #1
 8008376:	d003      	beq.n	8008380 <_fwalk_sglue+0x38>
 8008378:	4629      	mov	r1, r5
 800837a:	4638      	mov	r0, r7
 800837c:	47c0      	blx	r8
 800837e:	4306      	orrs	r6, r0
 8008380:	3568      	adds	r5, #104	@ 0x68
 8008382:	e7e9      	b.n	8008358 <_fwalk_sglue+0x10>

08008384 <__sread>:
 8008384:	b510      	push	{r4, lr}
 8008386:	460c      	mov	r4, r1
 8008388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838c:	f000 f868 	bl	8008460 <_read_r>
 8008390:	2800      	cmp	r0, #0
 8008392:	bfab      	itete	ge
 8008394:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008396:	89a3      	ldrhlt	r3, [r4, #12]
 8008398:	181b      	addge	r3, r3, r0
 800839a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800839e:	bfac      	ite	ge
 80083a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083a2:	81a3      	strhlt	r3, [r4, #12]
 80083a4:	bd10      	pop	{r4, pc}

080083a6 <__swrite>:
 80083a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083aa:	461f      	mov	r7, r3
 80083ac:	898b      	ldrh	r3, [r1, #12]
 80083ae:	05db      	lsls	r3, r3, #23
 80083b0:	4605      	mov	r5, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	4616      	mov	r6, r2
 80083b6:	d505      	bpl.n	80083c4 <__swrite+0x1e>
 80083b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083bc:	2302      	movs	r3, #2
 80083be:	2200      	movs	r2, #0
 80083c0:	f000 f83c 	bl	800843c <_lseek_r>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083ce:	81a3      	strh	r3, [r4, #12]
 80083d0:	4632      	mov	r2, r6
 80083d2:	463b      	mov	r3, r7
 80083d4:	4628      	mov	r0, r5
 80083d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083da:	f000 b863 	b.w	80084a4 <_write_r>

080083de <__sseek>:
 80083de:	b510      	push	{r4, lr}
 80083e0:	460c      	mov	r4, r1
 80083e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e6:	f000 f829 	bl	800843c <_lseek_r>
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	bf15      	itete	ne
 80083f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083fa:	81a3      	strheq	r3, [r4, #12]
 80083fc:	bf18      	it	ne
 80083fe:	81a3      	strhne	r3, [r4, #12]
 8008400:	bd10      	pop	{r4, pc}

08008402 <__sclose>:
 8008402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008406:	f000 b809 	b.w	800841c <_close_r>

0800840a <memset>:
 800840a:	4402      	add	r2, r0
 800840c:	4603      	mov	r3, r0
 800840e:	4293      	cmp	r3, r2
 8008410:	d100      	bne.n	8008414 <memset+0xa>
 8008412:	4770      	bx	lr
 8008414:	f803 1b01 	strb.w	r1, [r3], #1
 8008418:	e7f9      	b.n	800840e <memset+0x4>
	...

0800841c <_close_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d06      	ldr	r5, [pc, #24]	@ (8008438 <_close_r+0x1c>)
 8008420:	2300      	movs	r3, #0
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	f7f9 fae4 	bl	80019f4 <_close>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_close_r+0x1a>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_close_r+0x1a>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	2407e478 	.word	0x2407e478

0800843c <_lseek_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d07      	ldr	r5, [pc, #28]	@ (800845c <_lseek_r+0x20>)
 8008440:	4604      	mov	r4, r0
 8008442:	4608      	mov	r0, r1
 8008444:	4611      	mov	r1, r2
 8008446:	2200      	movs	r2, #0
 8008448:	602a      	str	r2, [r5, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	f7f9 fade 	bl	8001a0c <_lseek>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_lseek_r+0x1e>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_lseek_r+0x1e>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	2407e478 	.word	0x2407e478

08008460 <_read_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4d07      	ldr	r5, [pc, #28]	@ (8008480 <_read_r+0x20>)
 8008464:	4604      	mov	r4, r0
 8008466:	4608      	mov	r0, r1
 8008468:	4611      	mov	r1, r2
 800846a:	2200      	movs	r2, #0
 800846c:	602a      	str	r2, [r5, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	f7f9 faa4 	bl	80019bc <_read>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d102      	bne.n	800847e <_read_r+0x1e>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	b103      	cbz	r3, 800847e <_read_r+0x1e>
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	2407e478 	.word	0x2407e478

08008484 <_sbrk_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	4d06      	ldr	r5, [pc, #24]	@ (80084a0 <_sbrk_r+0x1c>)
 8008488:	2300      	movs	r3, #0
 800848a:	4604      	mov	r4, r0
 800848c:	4608      	mov	r0, r1
 800848e:	602b      	str	r3, [r5, #0]
 8008490:	f7f9 fabe 	bl	8001a10 <_sbrk>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_sbrk_r+0x1a>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b103      	cbz	r3, 800849e <_sbrk_r+0x1a>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	2407e478 	.word	0x2407e478

080084a4 <_write_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4d07      	ldr	r5, [pc, #28]	@ (80084c4 <_write_r+0x20>)
 80084a8:	4604      	mov	r4, r0
 80084aa:	4608      	mov	r0, r1
 80084ac:	4611      	mov	r1, r2
 80084ae:	2200      	movs	r2, #0
 80084b0:	602a      	str	r2, [r5, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	f7f9 fa90 	bl	80019d8 <_write>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_write_r+0x1e>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_write_r+0x1e>
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	2407e478 	.word	0x2407e478

080084c8 <__errno>:
 80084c8:	4b01      	ldr	r3, [pc, #4]	@ (80084d0 <__errno+0x8>)
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	24000030 	.word	0x24000030

080084d4 <__libc_init_array>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	4d0d      	ldr	r5, [pc, #52]	@ (800850c <__libc_init_array+0x38>)
 80084d8:	4c0d      	ldr	r4, [pc, #52]	@ (8008510 <__libc_init_array+0x3c>)
 80084da:	1b64      	subs	r4, r4, r5
 80084dc:	10a4      	asrs	r4, r4, #2
 80084de:	2600      	movs	r6, #0
 80084e0:	42a6      	cmp	r6, r4
 80084e2:	d109      	bne.n	80084f8 <__libc_init_array+0x24>
 80084e4:	4d0b      	ldr	r5, [pc, #44]	@ (8008514 <__libc_init_array+0x40>)
 80084e6:	4c0c      	ldr	r4, [pc, #48]	@ (8008518 <__libc_init_array+0x44>)
 80084e8:	f000 ff2c 	bl	8009344 <_init>
 80084ec:	1b64      	subs	r4, r4, r5
 80084ee:	10a4      	asrs	r4, r4, #2
 80084f0:	2600      	movs	r6, #0
 80084f2:	42a6      	cmp	r6, r4
 80084f4:	d105      	bne.n	8008502 <__libc_init_array+0x2e>
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fc:	4798      	blx	r3
 80084fe:	3601      	adds	r6, #1
 8008500:	e7ee      	b.n	80084e0 <__libc_init_array+0xc>
 8008502:	f855 3b04 	ldr.w	r3, [r5], #4
 8008506:	4798      	blx	r3
 8008508:	3601      	adds	r6, #1
 800850a:	e7f2      	b.n	80084f2 <__libc_init_array+0x1e>
 800850c:	080809c4 	.word	0x080809c4
 8008510:	080809c4 	.word	0x080809c4
 8008514:	080809c4 	.word	0x080809c4
 8008518:	080809c8 	.word	0x080809c8

0800851c <__retarget_lock_init_recursive>:
 800851c:	4770      	bx	lr

0800851e <__retarget_lock_acquire_recursive>:
 800851e:	4770      	bx	lr

08008520 <__retarget_lock_release_recursive>:
 8008520:	4770      	bx	lr
	...

08008524 <__assert_func>:
 8008524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008526:	4614      	mov	r4, r2
 8008528:	461a      	mov	r2, r3
 800852a:	4b09      	ldr	r3, [pc, #36]	@ (8008550 <__assert_func+0x2c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4605      	mov	r5, r0
 8008530:	68d8      	ldr	r0, [r3, #12]
 8008532:	b14c      	cbz	r4, 8008548 <__assert_func+0x24>
 8008534:	4b07      	ldr	r3, [pc, #28]	@ (8008554 <__assert_func+0x30>)
 8008536:	9100      	str	r1, [sp, #0]
 8008538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800853c:	4906      	ldr	r1, [pc, #24]	@ (8008558 <__assert_func+0x34>)
 800853e:	462b      	mov	r3, r5
 8008540:	f000 f904 	bl	800874c <fiprintf>
 8008544:	f000 f914 	bl	8008770 <abort>
 8008548:	4b04      	ldr	r3, [pc, #16]	@ (800855c <__assert_func+0x38>)
 800854a:	461c      	mov	r4, r3
 800854c:	e7f3      	b.n	8008536 <__assert_func+0x12>
 800854e:	bf00      	nop
 8008550:	24000030 	.word	0x24000030
 8008554:	0808093f 	.word	0x0808093f
 8008558:	0808094c 	.word	0x0808094c
 800855c:	0808097a 	.word	0x0808097a

08008560 <_free_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4605      	mov	r5, r0
 8008564:	2900      	cmp	r1, #0
 8008566:	d041      	beq.n	80085ec <_free_r+0x8c>
 8008568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856c:	1f0c      	subs	r4, r1, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfb8      	it	lt
 8008572:	18e4      	addlt	r4, r4, r3
 8008574:	f7ff fe0a 	bl	800818c <__malloc_lock>
 8008578:	4a1d      	ldr	r2, [pc, #116]	@ (80085f0 <_free_r+0x90>)
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	b933      	cbnz	r3, 800858c <_free_r+0x2c>
 800857e:	6063      	str	r3, [r4, #4]
 8008580:	6014      	str	r4, [r2, #0]
 8008582:	4628      	mov	r0, r5
 8008584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008588:	f7ff be06 	b.w	8008198 <__malloc_unlock>
 800858c:	42a3      	cmp	r3, r4
 800858e:	d908      	bls.n	80085a2 <_free_r+0x42>
 8008590:	6820      	ldr	r0, [r4, #0]
 8008592:	1821      	adds	r1, r4, r0
 8008594:	428b      	cmp	r3, r1
 8008596:	bf01      	itttt	eq
 8008598:	6819      	ldreq	r1, [r3, #0]
 800859a:	685b      	ldreq	r3, [r3, #4]
 800859c:	1809      	addeq	r1, r1, r0
 800859e:	6021      	streq	r1, [r4, #0]
 80085a0:	e7ed      	b.n	800857e <_free_r+0x1e>
 80085a2:	461a      	mov	r2, r3
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	b10b      	cbz	r3, 80085ac <_free_r+0x4c>
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	d9fa      	bls.n	80085a2 <_free_r+0x42>
 80085ac:	6811      	ldr	r1, [r2, #0]
 80085ae:	1850      	adds	r0, r2, r1
 80085b0:	42a0      	cmp	r0, r4
 80085b2:	d10b      	bne.n	80085cc <_free_r+0x6c>
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	4401      	add	r1, r0
 80085b8:	1850      	adds	r0, r2, r1
 80085ba:	4283      	cmp	r3, r0
 80085bc:	6011      	str	r1, [r2, #0]
 80085be:	d1e0      	bne.n	8008582 <_free_r+0x22>
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	6053      	str	r3, [r2, #4]
 80085c6:	4408      	add	r0, r1
 80085c8:	6010      	str	r0, [r2, #0]
 80085ca:	e7da      	b.n	8008582 <_free_r+0x22>
 80085cc:	d902      	bls.n	80085d4 <_free_r+0x74>
 80085ce:	230c      	movs	r3, #12
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	e7d6      	b.n	8008582 <_free_r+0x22>
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	1821      	adds	r1, r4, r0
 80085d8:	428b      	cmp	r3, r1
 80085da:	bf04      	itt	eq
 80085dc:	6819      	ldreq	r1, [r3, #0]
 80085de:	685b      	ldreq	r3, [r3, #4]
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	bf04      	itt	eq
 80085e4:	1809      	addeq	r1, r1, r0
 80085e6:	6021      	streq	r1, [r4, #0]
 80085e8:	6054      	str	r4, [r2, #4]
 80085ea:	e7ca      	b.n	8008582 <_free_r+0x22>
 80085ec:	bd38      	pop	{r3, r4, r5, pc}
 80085ee:	bf00      	nop
 80085f0:	2407e338 	.word	0x2407e338

080085f4 <__sflush_r>:
 80085f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085fc:	0716      	lsls	r6, r2, #28
 80085fe:	4605      	mov	r5, r0
 8008600:	460c      	mov	r4, r1
 8008602:	d454      	bmi.n	80086ae <__sflush_r+0xba>
 8008604:	684b      	ldr	r3, [r1, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	dc02      	bgt.n	8008610 <__sflush_r+0x1c>
 800860a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800860c:	2b00      	cmp	r3, #0
 800860e:	dd48      	ble.n	80086a2 <__sflush_r+0xae>
 8008610:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008612:	2e00      	cmp	r6, #0
 8008614:	d045      	beq.n	80086a2 <__sflush_r+0xae>
 8008616:	2300      	movs	r3, #0
 8008618:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800861c:	682f      	ldr	r7, [r5, #0]
 800861e:	6a21      	ldr	r1, [r4, #32]
 8008620:	602b      	str	r3, [r5, #0]
 8008622:	d030      	beq.n	8008686 <__sflush_r+0x92>
 8008624:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	0759      	lsls	r1, r3, #29
 800862a:	d505      	bpl.n	8008638 <__sflush_r+0x44>
 800862c:	6863      	ldr	r3, [r4, #4]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008632:	b10b      	cbz	r3, 8008638 <__sflush_r+0x44>
 8008634:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008636:	1ad2      	subs	r2, r2, r3
 8008638:	2300      	movs	r3, #0
 800863a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800863c:	6a21      	ldr	r1, [r4, #32]
 800863e:	4628      	mov	r0, r5
 8008640:	47b0      	blx	r6
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	d106      	bne.n	8008656 <__sflush_r+0x62>
 8008648:	6829      	ldr	r1, [r5, #0]
 800864a:	291d      	cmp	r1, #29
 800864c:	d82b      	bhi.n	80086a6 <__sflush_r+0xb2>
 800864e:	4a2a      	ldr	r2, [pc, #168]	@ (80086f8 <__sflush_r+0x104>)
 8008650:	40ca      	lsrs	r2, r1
 8008652:	07d6      	lsls	r6, r2, #31
 8008654:	d527      	bpl.n	80086a6 <__sflush_r+0xb2>
 8008656:	2200      	movs	r2, #0
 8008658:	6062      	str	r2, [r4, #4]
 800865a:	04d9      	lsls	r1, r3, #19
 800865c:	6922      	ldr	r2, [r4, #16]
 800865e:	6022      	str	r2, [r4, #0]
 8008660:	d504      	bpl.n	800866c <__sflush_r+0x78>
 8008662:	1c42      	adds	r2, r0, #1
 8008664:	d101      	bne.n	800866a <__sflush_r+0x76>
 8008666:	682b      	ldr	r3, [r5, #0]
 8008668:	b903      	cbnz	r3, 800866c <__sflush_r+0x78>
 800866a:	6560      	str	r0, [r4, #84]	@ 0x54
 800866c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800866e:	602f      	str	r7, [r5, #0]
 8008670:	b1b9      	cbz	r1, 80086a2 <__sflush_r+0xae>
 8008672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008676:	4299      	cmp	r1, r3
 8008678:	d002      	beq.n	8008680 <__sflush_r+0x8c>
 800867a:	4628      	mov	r0, r5
 800867c:	f7ff ff70 	bl	8008560 <_free_r>
 8008680:	2300      	movs	r3, #0
 8008682:	6363      	str	r3, [r4, #52]	@ 0x34
 8008684:	e00d      	b.n	80086a2 <__sflush_r+0xae>
 8008686:	2301      	movs	r3, #1
 8008688:	4628      	mov	r0, r5
 800868a:	47b0      	blx	r6
 800868c:	4602      	mov	r2, r0
 800868e:	1c50      	adds	r0, r2, #1
 8008690:	d1c9      	bne.n	8008626 <__sflush_r+0x32>
 8008692:	682b      	ldr	r3, [r5, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0c6      	beq.n	8008626 <__sflush_r+0x32>
 8008698:	2b1d      	cmp	r3, #29
 800869a:	d001      	beq.n	80086a0 <__sflush_r+0xac>
 800869c:	2b16      	cmp	r3, #22
 800869e:	d11e      	bne.n	80086de <__sflush_r+0xea>
 80086a0:	602f      	str	r7, [r5, #0]
 80086a2:	2000      	movs	r0, #0
 80086a4:	e022      	b.n	80086ec <__sflush_r+0xf8>
 80086a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086aa:	b21b      	sxth	r3, r3
 80086ac:	e01b      	b.n	80086e6 <__sflush_r+0xf2>
 80086ae:	690f      	ldr	r7, [r1, #16]
 80086b0:	2f00      	cmp	r7, #0
 80086b2:	d0f6      	beq.n	80086a2 <__sflush_r+0xae>
 80086b4:	0793      	lsls	r3, r2, #30
 80086b6:	680e      	ldr	r6, [r1, #0]
 80086b8:	bf08      	it	eq
 80086ba:	694b      	ldreq	r3, [r1, #20]
 80086bc:	600f      	str	r7, [r1, #0]
 80086be:	bf18      	it	ne
 80086c0:	2300      	movne	r3, #0
 80086c2:	eba6 0807 	sub.w	r8, r6, r7
 80086c6:	608b      	str	r3, [r1, #8]
 80086c8:	f1b8 0f00 	cmp.w	r8, #0
 80086cc:	dde9      	ble.n	80086a2 <__sflush_r+0xae>
 80086ce:	6a21      	ldr	r1, [r4, #32]
 80086d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086d2:	4643      	mov	r3, r8
 80086d4:	463a      	mov	r2, r7
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b0      	blx	r6
 80086da:	2800      	cmp	r0, #0
 80086dc:	dc08      	bgt.n	80086f0 <__sflush_r+0xfc>
 80086de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f0:	4407      	add	r7, r0
 80086f2:	eba8 0800 	sub.w	r8, r8, r0
 80086f6:	e7e7      	b.n	80086c8 <__sflush_r+0xd4>
 80086f8:	20400001 	.word	0x20400001

080086fc <_fflush_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	690b      	ldr	r3, [r1, #16]
 8008700:	4605      	mov	r5, r0
 8008702:	460c      	mov	r4, r1
 8008704:	b913      	cbnz	r3, 800870c <_fflush_r+0x10>
 8008706:	2500      	movs	r5, #0
 8008708:	4628      	mov	r0, r5
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	b118      	cbz	r0, 8008716 <_fflush_r+0x1a>
 800870e:	6a03      	ldr	r3, [r0, #32]
 8008710:	b90b      	cbnz	r3, 8008716 <_fflush_r+0x1a>
 8008712:	f7ff fe01 	bl	8008318 <__sinit>
 8008716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0f3      	beq.n	8008706 <_fflush_r+0xa>
 800871e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008720:	07d0      	lsls	r0, r2, #31
 8008722:	d404      	bmi.n	800872e <_fflush_r+0x32>
 8008724:	0599      	lsls	r1, r3, #22
 8008726:	d402      	bmi.n	800872e <_fflush_r+0x32>
 8008728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800872a:	f7ff fef8 	bl	800851e <__retarget_lock_acquire_recursive>
 800872e:	4628      	mov	r0, r5
 8008730:	4621      	mov	r1, r4
 8008732:	f7ff ff5f 	bl	80085f4 <__sflush_r>
 8008736:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008738:	07da      	lsls	r2, r3, #31
 800873a:	4605      	mov	r5, r0
 800873c:	d4e4      	bmi.n	8008708 <_fflush_r+0xc>
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	059b      	lsls	r3, r3, #22
 8008742:	d4e1      	bmi.n	8008708 <_fflush_r+0xc>
 8008744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008746:	f7ff feeb 	bl	8008520 <__retarget_lock_release_recursive>
 800874a:	e7dd      	b.n	8008708 <_fflush_r+0xc>

0800874c <fiprintf>:
 800874c:	b40e      	push	{r1, r2, r3}
 800874e:	b503      	push	{r0, r1, lr}
 8008750:	4601      	mov	r1, r0
 8008752:	ab03      	add	r3, sp, #12
 8008754:	4805      	ldr	r0, [pc, #20]	@ (800876c <fiprintf+0x20>)
 8008756:	f853 2b04 	ldr.w	r2, [r3], #4
 800875a:	6800      	ldr	r0, [r0, #0]
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	f000 f837 	bl	80087d0 <_vfiprintf_r>
 8008762:	b002      	add	sp, #8
 8008764:	f85d eb04 	ldr.w	lr, [sp], #4
 8008768:	b003      	add	sp, #12
 800876a:	4770      	bx	lr
 800876c:	24000030 	.word	0x24000030

08008770 <abort>:
 8008770:	b508      	push	{r3, lr}
 8008772:	2006      	movs	r0, #6
 8008774:	f000 fb8c 	bl	8008e90 <raise>
 8008778:	2001      	movs	r0, #1
 800877a:	f7f9 f919 	bl	80019b0 <_exit>

0800877e <__sfputc_r>:
 800877e:	6893      	ldr	r3, [r2, #8]
 8008780:	3b01      	subs	r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	b410      	push	{r4}
 8008786:	6093      	str	r3, [r2, #8]
 8008788:	da08      	bge.n	800879c <__sfputc_r+0x1e>
 800878a:	6994      	ldr	r4, [r2, #24]
 800878c:	42a3      	cmp	r3, r4
 800878e:	db01      	blt.n	8008794 <__sfputc_r+0x16>
 8008790:	290a      	cmp	r1, #10
 8008792:	d103      	bne.n	800879c <__sfputc_r+0x1e>
 8008794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008798:	f000 babe 	b.w	8008d18 <__swbuf_r>
 800879c:	6813      	ldr	r3, [r2, #0]
 800879e:	1c58      	adds	r0, r3, #1
 80087a0:	6010      	str	r0, [r2, #0]
 80087a2:	7019      	strb	r1, [r3, #0]
 80087a4:	4608      	mov	r0, r1
 80087a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <__sfputs_r>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	4606      	mov	r6, r0
 80087b0:	460f      	mov	r7, r1
 80087b2:	4614      	mov	r4, r2
 80087b4:	18d5      	adds	r5, r2, r3
 80087b6:	42ac      	cmp	r4, r5
 80087b8:	d101      	bne.n	80087be <__sfputs_r+0x12>
 80087ba:	2000      	movs	r0, #0
 80087bc:	e007      	b.n	80087ce <__sfputs_r+0x22>
 80087be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c2:	463a      	mov	r2, r7
 80087c4:	4630      	mov	r0, r6
 80087c6:	f7ff ffda 	bl	800877e <__sfputc_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	d1f3      	bne.n	80087b6 <__sfputs_r+0xa>
 80087ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087d0 <_vfiprintf_r>:
 80087d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d4:	460d      	mov	r5, r1
 80087d6:	b09d      	sub	sp, #116	@ 0x74
 80087d8:	4614      	mov	r4, r2
 80087da:	4698      	mov	r8, r3
 80087dc:	4606      	mov	r6, r0
 80087de:	b118      	cbz	r0, 80087e8 <_vfiprintf_r+0x18>
 80087e0:	6a03      	ldr	r3, [r0, #32]
 80087e2:	b90b      	cbnz	r3, 80087e8 <_vfiprintf_r+0x18>
 80087e4:	f7ff fd98 	bl	8008318 <__sinit>
 80087e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087ea:	07d9      	lsls	r1, r3, #31
 80087ec:	d405      	bmi.n	80087fa <_vfiprintf_r+0x2a>
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	059a      	lsls	r2, r3, #22
 80087f2:	d402      	bmi.n	80087fa <_vfiprintf_r+0x2a>
 80087f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087f6:	f7ff fe92 	bl	800851e <__retarget_lock_acquire_recursive>
 80087fa:	89ab      	ldrh	r3, [r5, #12]
 80087fc:	071b      	lsls	r3, r3, #28
 80087fe:	d501      	bpl.n	8008804 <_vfiprintf_r+0x34>
 8008800:	692b      	ldr	r3, [r5, #16]
 8008802:	b99b      	cbnz	r3, 800882c <_vfiprintf_r+0x5c>
 8008804:	4629      	mov	r1, r5
 8008806:	4630      	mov	r0, r6
 8008808:	f000 fac4 	bl	8008d94 <__swsetup_r>
 800880c:	b170      	cbz	r0, 800882c <_vfiprintf_r+0x5c>
 800880e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008810:	07dc      	lsls	r4, r3, #31
 8008812:	d504      	bpl.n	800881e <_vfiprintf_r+0x4e>
 8008814:	f04f 30ff 	mov.w	r0, #4294967295
 8008818:	b01d      	add	sp, #116	@ 0x74
 800881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881e:	89ab      	ldrh	r3, [r5, #12]
 8008820:	0598      	lsls	r0, r3, #22
 8008822:	d4f7      	bmi.n	8008814 <_vfiprintf_r+0x44>
 8008824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008826:	f7ff fe7b 	bl	8008520 <__retarget_lock_release_recursive>
 800882a:	e7f3      	b.n	8008814 <_vfiprintf_r+0x44>
 800882c:	2300      	movs	r3, #0
 800882e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008830:	2320      	movs	r3, #32
 8008832:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008836:	f8cd 800c 	str.w	r8, [sp, #12]
 800883a:	2330      	movs	r3, #48	@ 0x30
 800883c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80089ec <_vfiprintf_r+0x21c>
 8008840:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008844:	f04f 0901 	mov.w	r9, #1
 8008848:	4623      	mov	r3, r4
 800884a:	469a      	mov	sl, r3
 800884c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008850:	b10a      	cbz	r2, 8008856 <_vfiprintf_r+0x86>
 8008852:	2a25      	cmp	r2, #37	@ 0x25
 8008854:	d1f9      	bne.n	800884a <_vfiprintf_r+0x7a>
 8008856:	ebba 0b04 	subs.w	fp, sl, r4
 800885a:	d00b      	beq.n	8008874 <_vfiprintf_r+0xa4>
 800885c:	465b      	mov	r3, fp
 800885e:	4622      	mov	r2, r4
 8008860:	4629      	mov	r1, r5
 8008862:	4630      	mov	r0, r6
 8008864:	f7ff ffa2 	bl	80087ac <__sfputs_r>
 8008868:	3001      	adds	r0, #1
 800886a:	f000 80a7 	beq.w	80089bc <_vfiprintf_r+0x1ec>
 800886e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008870:	445a      	add	r2, fp
 8008872:	9209      	str	r2, [sp, #36]	@ 0x24
 8008874:	f89a 3000 	ldrb.w	r3, [sl]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 809f 	beq.w	80089bc <_vfiprintf_r+0x1ec>
 800887e:	2300      	movs	r3, #0
 8008880:	f04f 32ff 	mov.w	r2, #4294967295
 8008884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008888:	f10a 0a01 	add.w	sl, sl, #1
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	9307      	str	r3, [sp, #28]
 8008890:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008894:	931a      	str	r3, [sp, #104]	@ 0x68
 8008896:	4654      	mov	r4, sl
 8008898:	2205      	movs	r2, #5
 800889a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889e:	4853      	ldr	r0, [pc, #332]	@ (80089ec <_vfiprintf_r+0x21c>)
 80088a0:	f7f7 fd7e 	bl	80003a0 <memchr>
 80088a4:	9a04      	ldr	r2, [sp, #16]
 80088a6:	b9d8      	cbnz	r0, 80088e0 <_vfiprintf_r+0x110>
 80088a8:	06d1      	lsls	r1, r2, #27
 80088aa:	bf44      	itt	mi
 80088ac:	2320      	movmi	r3, #32
 80088ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088b2:	0713      	lsls	r3, r2, #28
 80088b4:	bf44      	itt	mi
 80088b6:	232b      	movmi	r3, #43	@ 0x2b
 80088b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088bc:	f89a 3000 	ldrb.w	r3, [sl]
 80088c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c2:	d015      	beq.n	80088f0 <_vfiprintf_r+0x120>
 80088c4:	9a07      	ldr	r2, [sp, #28]
 80088c6:	4654      	mov	r4, sl
 80088c8:	2000      	movs	r0, #0
 80088ca:	f04f 0c0a 	mov.w	ip, #10
 80088ce:	4621      	mov	r1, r4
 80088d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d4:	3b30      	subs	r3, #48	@ 0x30
 80088d6:	2b09      	cmp	r3, #9
 80088d8:	d94b      	bls.n	8008972 <_vfiprintf_r+0x1a2>
 80088da:	b1b0      	cbz	r0, 800890a <_vfiprintf_r+0x13a>
 80088dc:	9207      	str	r2, [sp, #28]
 80088de:	e014      	b.n	800890a <_vfiprintf_r+0x13a>
 80088e0:	eba0 0308 	sub.w	r3, r0, r8
 80088e4:	fa09 f303 	lsl.w	r3, r9, r3
 80088e8:	4313      	orrs	r3, r2
 80088ea:	9304      	str	r3, [sp, #16]
 80088ec:	46a2      	mov	sl, r4
 80088ee:	e7d2      	b.n	8008896 <_vfiprintf_r+0xc6>
 80088f0:	9b03      	ldr	r3, [sp, #12]
 80088f2:	1d19      	adds	r1, r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	9103      	str	r1, [sp, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	bfbb      	ittet	lt
 80088fc:	425b      	neglt	r3, r3
 80088fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008902:	9307      	strge	r3, [sp, #28]
 8008904:	9307      	strlt	r3, [sp, #28]
 8008906:	bfb8      	it	lt
 8008908:	9204      	strlt	r2, [sp, #16]
 800890a:	7823      	ldrb	r3, [r4, #0]
 800890c:	2b2e      	cmp	r3, #46	@ 0x2e
 800890e:	d10a      	bne.n	8008926 <_vfiprintf_r+0x156>
 8008910:	7863      	ldrb	r3, [r4, #1]
 8008912:	2b2a      	cmp	r3, #42	@ 0x2a
 8008914:	d132      	bne.n	800897c <_vfiprintf_r+0x1ac>
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	9203      	str	r2, [sp, #12]
 800891e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008922:	3402      	adds	r4, #2
 8008924:	9305      	str	r3, [sp, #20]
 8008926:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089fc <_vfiprintf_r+0x22c>
 800892a:	7821      	ldrb	r1, [r4, #0]
 800892c:	2203      	movs	r2, #3
 800892e:	4650      	mov	r0, sl
 8008930:	f7f7 fd36 	bl	80003a0 <memchr>
 8008934:	b138      	cbz	r0, 8008946 <_vfiprintf_r+0x176>
 8008936:	9b04      	ldr	r3, [sp, #16]
 8008938:	eba0 000a 	sub.w	r0, r0, sl
 800893c:	2240      	movs	r2, #64	@ 0x40
 800893e:	4082      	lsls	r2, r0
 8008940:	4313      	orrs	r3, r2
 8008942:	3401      	adds	r4, #1
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894a:	4829      	ldr	r0, [pc, #164]	@ (80089f0 <_vfiprintf_r+0x220>)
 800894c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008950:	2206      	movs	r2, #6
 8008952:	f7f7 fd25 	bl	80003a0 <memchr>
 8008956:	2800      	cmp	r0, #0
 8008958:	d03f      	beq.n	80089da <_vfiprintf_r+0x20a>
 800895a:	4b26      	ldr	r3, [pc, #152]	@ (80089f4 <_vfiprintf_r+0x224>)
 800895c:	bb1b      	cbnz	r3, 80089a6 <_vfiprintf_r+0x1d6>
 800895e:	9b03      	ldr	r3, [sp, #12]
 8008960:	3307      	adds	r3, #7
 8008962:	f023 0307 	bic.w	r3, r3, #7
 8008966:	3308      	adds	r3, #8
 8008968:	9303      	str	r3, [sp, #12]
 800896a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800896c:	443b      	add	r3, r7
 800896e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008970:	e76a      	b.n	8008848 <_vfiprintf_r+0x78>
 8008972:	fb0c 3202 	mla	r2, ip, r2, r3
 8008976:	460c      	mov	r4, r1
 8008978:	2001      	movs	r0, #1
 800897a:	e7a8      	b.n	80088ce <_vfiprintf_r+0xfe>
 800897c:	2300      	movs	r3, #0
 800897e:	3401      	adds	r4, #1
 8008980:	9305      	str	r3, [sp, #20]
 8008982:	4619      	mov	r1, r3
 8008984:	f04f 0c0a 	mov.w	ip, #10
 8008988:	4620      	mov	r0, r4
 800898a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800898e:	3a30      	subs	r2, #48	@ 0x30
 8008990:	2a09      	cmp	r2, #9
 8008992:	d903      	bls.n	800899c <_vfiprintf_r+0x1cc>
 8008994:	2b00      	cmp	r3, #0
 8008996:	d0c6      	beq.n	8008926 <_vfiprintf_r+0x156>
 8008998:	9105      	str	r1, [sp, #20]
 800899a:	e7c4      	b.n	8008926 <_vfiprintf_r+0x156>
 800899c:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a0:	4604      	mov	r4, r0
 80089a2:	2301      	movs	r3, #1
 80089a4:	e7f0      	b.n	8008988 <_vfiprintf_r+0x1b8>
 80089a6:	ab03      	add	r3, sp, #12
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	462a      	mov	r2, r5
 80089ac:	4b12      	ldr	r3, [pc, #72]	@ (80089f8 <_vfiprintf_r+0x228>)
 80089ae:	a904      	add	r1, sp, #16
 80089b0:	4630      	mov	r0, r6
 80089b2:	f3af 8000 	nop.w
 80089b6:	4607      	mov	r7, r0
 80089b8:	1c78      	adds	r0, r7, #1
 80089ba:	d1d6      	bne.n	800896a <_vfiprintf_r+0x19a>
 80089bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089be:	07d9      	lsls	r1, r3, #31
 80089c0:	d405      	bmi.n	80089ce <_vfiprintf_r+0x1fe>
 80089c2:	89ab      	ldrh	r3, [r5, #12]
 80089c4:	059a      	lsls	r2, r3, #22
 80089c6:	d402      	bmi.n	80089ce <_vfiprintf_r+0x1fe>
 80089c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089ca:	f7ff fda9 	bl	8008520 <__retarget_lock_release_recursive>
 80089ce:	89ab      	ldrh	r3, [r5, #12]
 80089d0:	065b      	lsls	r3, r3, #25
 80089d2:	f53f af1f 	bmi.w	8008814 <_vfiprintf_r+0x44>
 80089d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089d8:	e71e      	b.n	8008818 <_vfiprintf_r+0x48>
 80089da:	ab03      	add	r3, sp, #12
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	462a      	mov	r2, r5
 80089e0:	4b05      	ldr	r3, [pc, #20]	@ (80089f8 <_vfiprintf_r+0x228>)
 80089e2:	a904      	add	r1, sp, #16
 80089e4:	4630      	mov	r0, r6
 80089e6:	f000 f879 	bl	8008adc <_printf_i>
 80089ea:	e7e4      	b.n	80089b6 <_vfiprintf_r+0x1e6>
 80089ec:	0808097b 	.word	0x0808097b
 80089f0:	08080985 	.word	0x08080985
 80089f4:	00000000 	.word	0x00000000
 80089f8:	080087ad 	.word	0x080087ad
 80089fc:	08080981 	.word	0x08080981

08008a00 <_printf_common>:
 8008a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a04:	4616      	mov	r6, r2
 8008a06:	4698      	mov	r8, r3
 8008a08:	688a      	ldr	r2, [r1, #8]
 8008a0a:	690b      	ldr	r3, [r1, #16]
 8008a0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a10:	4293      	cmp	r3, r2
 8008a12:	bfb8      	it	lt
 8008a14:	4613      	movlt	r3, r2
 8008a16:	6033      	str	r3, [r6, #0]
 8008a18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	b10a      	cbz	r2, 8008a26 <_printf_common+0x26>
 8008a22:	3301      	adds	r3, #1
 8008a24:	6033      	str	r3, [r6, #0]
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	0699      	lsls	r1, r3, #26
 8008a2a:	bf42      	ittt	mi
 8008a2c:	6833      	ldrmi	r3, [r6, #0]
 8008a2e:	3302      	addmi	r3, #2
 8008a30:	6033      	strmi	r3, [r6, #0]
 8008a32:	6825      	ldr	r5, [r4, #0]
 8008a34:	f015 0506 	ands.w	r5, r5, #6
 8008a38:	d106      	bne.n	8008a48 <_printf_common+0x48>
 8008a3a:	f104 0a19 	add.w	sl, r4, #25
 8008a3e:	68e3      	ldr	r3, [r4, #12]
 8008a40:	6832      	ldr	r2, [r6, #0]
 8008a42:	1a9b      	subs	r3, r3, r2
 8008a44:	42ab      	cmp	r3, r5
 8008a46:	dc26      	bgt.n	8008a96 <_printf_common+0x96>
 8008a48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a4c:	6822      	ldr	r2, [r4, #0]
 8008a4e:	3b00      	subs	r3, #0
 8008a50:	bf18      	it	ne
 8008a52:	2301      	movne	r3, #1
 8008a54:	0692      	lsls	r2, r2, #26
 8008a56:	d42b      	bmi.n	8008ab0 <_printf_common+0xb0>
 8008a58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a5c:	4641      	mov	r1, r8
 8008a5e:	4638      	mov	r0, r7
 8008a60:	47c8      	blx	r9
 8008a62:	3001      	adds	r0, #1
 8008a64:	d01e      	beq.n	8008aa4 <_printf_common+0xa4>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	6922      	ldr	r2, [r4, #16]
 8008a6a:	f003 0306 	and.w	r3, r3, #6
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	bf02      	ittt	eq
 8008a72:	68e5      	ldreq	r5, [r4, #12]
 8008a74:	6833      	ldreq	r3, [r6, #0]
 8008a76:	1aed      	subeq	r5, r5, r3
 8008a78:	68a3      	ldr	r3, [r4, #8]
 8008a7a:	bf0c      	ite	eq
 8008a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a80:	2500      	movne	r5, #0
 8008a82:	4293      	cmp	r3, r2
 8008a84:	bfc4      	itt	gt
 8008a86:	1a9b      	subgt	r3, r3, r2
 8008a88:	18ed      	addgt	r5, r5, r3
 8008a8a:	2600      	movs	r6, #0
 8008a8c:	341a      	adds	r4, #26
 8008a8e:	42b5      	cmp	r5, r6
 8008a90:	d11a      	bne.n	8008ac8 <_printf_common+0xc8>
 8008a92:	2000      	movs	r0, #0
 8008a94:	e008      	b.n	8008aa8 <_printf_common+0xa8>
 8008a96:	2301      	movs	r3, #1
 8008a98:	4652      	mov	r2, sl
 8008a9a:	4641      	mov	r1, r8
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	47c8      	blx	r9
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d103      	bne.n	8008aac <_printf_common+0xac>
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aac:	3501      	adds	r5, #1
 8008aae:	e7c6      	b.n	8008a3e <_printf_common+0x3e>
 8008ab0:	18e1      	adds	r1, r4, r3
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	2030      	movs	r0, #48	@ 0x30
 8008ab6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008aba:	4422      	add	r2, r4
 8008abc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ac0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	e7c7      	b.n	8008a58 <_printf_common+0x58>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4622      	mov	r2, r4
 8008acc:	4641      	mov	r1, r8
 8008ace:	4638      	mov	r0, r7
 8008ad0:	47c8      	blx	r9
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d0e6      	beq.n	8008aa4 <_printf_common+0xa4>
 8008ad6:	3601      	adds	r6, #1
 8008ad8:	e7d9      	b.n	8008a8e <_printf_common+0x8e>
	...

08008adc <_printf_i>:
 8008adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae0:	7e0f      	ldrb	r7, [r1, #24]
 8008ae2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ae4:	2f78      	cmp	r7, #120	@ 0x78
 8008ae6:	4691      	mov	r9, r2
 8008ae8:	4680      	mov	r8, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	469a      	mov	sl, r3
 8008aee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008af2:	d807      	bhi.n	8008b04 <_printf_i+0x28>
 8008af4:	2f62      	cmp	r7, #98	@ 0x62
 8008af6:	d80a      	bhi.n	8008b0e <_printf_i+0x32>
 8008af8:	2f00      	cmp	r7, #0
 8008afa:	f000 80d1 	beq.w	8008ca0 <_printf_i+0x1c4>
 8008afe:	2f58      	cmp	r7, #88	@ 0x58
 8008b00:	f000 80b8 	beq.w	8008c74 <_printf_i+0x198>
 8008b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b0c:	e03a      	b.n	8008b84 <_printf_i+0xa8>
 8008b0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b12:	2b15      	cmp	r3, #21
 8008b14:	d8f6      	bhi.n	8008b04 <_printf_i+0x28>
 8008b16:	a101      	add	r1, pc, #4	@ (adr r1, 8008b1c <_printf_i+0x40>)
 8008b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b1c:	08008b75 	.word	0x08008b75
 8008b20:	08008b89 	.word	0x08008b89
 8008b24:	08008b05 	.word	0x08008b05
 8008b28:	08008b05 	.word	0x08008b05
 8008b2c:	08008b05 	.word	0x08008b05
 8008b30:	08008b05 	.word	0x08008b05
 8008b34:	08008b89 	.word	0x08008b89
 8008b38:	08008b05 	.word	0x08008b05
 8008b3c:	08008b05 	.word	0x08008b05
 8008b40:	08008b05 	.word	0x08008b05
 8008b44:	08008b05 	.word	0x08008b05
 8008b48:	08008c87 	.word	0x08008c87
 8008b4c:	08008bb3 	.word	0x08008bb3
 8008b50:	08008c41 	.word	0x08008c41
 8008b54:	08008b05 	.word	0x08008b05
 8008b58:	08008b05 	.word	0x08008b05
 8008b5c:	08008ca9 	.word	0x08008ca9
 8008b60:	08008b05 	.word	0x08008b05
 8008b64:	08008bb3 	.word	0x08008bb3
 8008b68:	08008b05 	.word	0x08008b05
 8008b6c:	08008b05 	.word	0x08008b05
 8008b70:	08008c49 	.word	0x08008c49
 8008b74:	6833      	ldr	r3, [r6, #0]
 8008b76:	1d1a      	adds	r2, r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6032      	str	r2, [r6, #0]
 8008b7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b84:	2301      	movs	r3, #1
 8008b86:	e09c      	b.n	8008cc2 <_printf_i+0x1e6>
 8008b88:	6833      	ldr	r3, [r6, #0]
 8008b8a:	6820      	ldr	r0, [r4, #0]
 8008b8c:	1d19      	adds	r1, r3, #4
 8008b8e:	6031      	str	r1, [r6, #0]
 8008b90:	0606      	lsls	r6, r0, #24
 8008b92:	d501      	bpl.n	8008b98 <_printf_i+0xbc>
 8008b94:	681d      	ldr	r5, [r3, #0]
 8008b96:	e003      	b.n	8008ba0 <_printf_i+0xc4>
 8008b98:	0645      	lsls	r5, r0, #25
 8008b9a:	d5fb      	bpl.n	8008b94 <_printf_i+0xb8>
 8008b9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ba0:	2d00      	cmp	r5, #0
 8008ba2:	da03      	bge.n	8008bac <_printf_i+0xd0>
 8008ba4:	232d      	movs	r3, #45	@ 0x2d
 8008ba6:	426d      	negs	r5, r5
 8008ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bac:	4858      	ldr	r0, [pc, #352]	@ (8008d10 <_printf_i+0x234>)
 8008bae:	230a      	movs	r3, #10
 8008bb0:	e011      	b.n	8008bd6 <_printf_i+0xfa>
 8008bb2:	6821      	ldr	r1, [r4, #0]
 8008bb4:	6833      	ldr	r3, [r6, #0]
 8008bb6:	0608      	lsls	r0, r1, #24
 8008bb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bbc:	d402      	bmi.n	8008bc4 <_printf_i+0xe8>
 8008bbe:	0649      	lsls	r1, r1, #25
 8008bc0:	bf48      	it	mi
 8008bc2:	b2ad      	uxthmi	r5, r5
 8008bc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bc6:	4852      	ldr	r0, [pc, #328]	@ (8008d10 <_printf_i+0x234>)
 8008bc8:	6033      	str	r3, [r6, #0]
 8008bca:	bf14      	ite	ne
 8008bcc:	230a      	movne	r3, #10
 8008bce:	2308      	moveq	r3, #8
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bd6:	6866      	ldr	r6, [r4, #4]
 8008bd8:	60a6      	str	r6, [r4, #8]
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	db05      	blt.n	8008bea <_printf_i+0x10e>
 8008bde:	6821      	ldr	r1, [r4, #0]
 8008be0:	432e      	orrs	r6, r5
 8008be2:	f021 0104 	bic.w	r1, r1, #4
 8008be6:	6021      	str	r1, [r4, #0]
 8008be8:	d04b      	beq.n	8008c82 <_printf_i+0x1a6>
 8008bea:	4616      	mov	r6, r2
 8008bec:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bf0:	fb03 5711 	mls	r7, r3, r1, r5
 8008bf4:	5dc7      	ldrb	r7, [r0, r7]
 8008bf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bfa:	462f      	mov	r7, r5
 8008bfc:	42bb      	cmp	r3, r7
 8008bfe:	460d      	mov	r5, r1
 8008c00:	d9f4      	bls.n	8008bec <_printf_i+0x110>
 8008c02:	2b08      	cmp	r3, #8
 8008c04:	d10b      	bne.n	8008c1e <_printf_i+0x142>
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	07df      	lsls	r7, r3, #31
 8008c0a:	d508      	bpl.n	8008c1e <_printf_i+0x142>
 8008c0c:	6923      	ldr	r3, [r4, #16]
 8008c0e:	6861      	ldr	r1, [r4, #4]
 8008c10:	4299      	cmp	r1, r3
 8008c12:	bfde      	ittt	le
 8008c14:	2330      	movle	r3, #48	@ 0x30
 8008c16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c1e:	1b92      	subs	r2, r2, r6
 8008c20:	6122      	str	r2, [r4, #16]
 8008c22:	f8cd a000 	str.w	sl, [sp]
 8008c26:	464b      	mov	r3, r9
 8008c28:	aa03      	add	r2, sp, #12
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	f7ff fee7 	bl	8008a00 <_printf_common>
 8008c32:	3001      	adds	r0, #1
 8008c34:	d14a      	bne.n	8008ccc <_printf_i+0x1f0>
 8008c36:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3a:	b004      	add	sp, #16
 8008c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	f043 0320 	orr.w	r3, r3, #32
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	4832      	ldr	r0, [pc, #200]	@ (8008d14 <_printf_i+0x238>)
 8008c4a:	2778      	movs	r7, #120	@ 0x78
 8008c4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	6831      	ldr	r1, [r6, #0]
 8008c54:	061f      	lsls	r7, r3, #24
 8008c56:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c5a:	d402      	bmi.n	8008c62 <_printf_i+0x186>
 8008c5c:	065f      	lsls	r7, r3, #25
 8008c5e:	bf48      	it	mi
 8008c60:	b2ad      	uxthmi	r5, r5
 8008c62:	6031      	str	r1, [r6, #0]
 8008c64:	07d9      	lsls	r1, r3, #31
 8008c66:	bf44      	itt	mi
 8008c68:	f043 0320 	orrmi.w	r3, r3, #32
 8008c6c:	6023      	strmi	r3, [r4, #0]
 8008c6e:	b11d      	cbz	r5, 8008c78 <_printf_i+0x19c>
 8008c70:	2310      	movs	r3, #16
 8008c72:	e7ad      	b.n	8008bd0 <_printf_i+0xf4>
 8008c74:	4826      	ldr	r0, [pc, #152]	@ (8008d10 <_printf_i+0x234>)
 8008c76:	e7e9      	b.n	8008c4c <_printf_i+0x170>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	f023 0320 	bic.w	r3, r3, #32
 8008c7e:	6023      	str	r3, [r4, #0]
 8008c80:	e7f6      	b.n	8008c70 <_printf_i+0x194>
 8008c82:	4616      	mov	r6, r2
 8008c84:	e7bd      	b.n	8008c02 <_printf_i+0x126>
 8008c86:	6833      	ldr	r3, [r6, #0]
 8008c88:	6825      	ldr	r5, [r4, #0]
 8008c8a:	6961      	ldr	r1, [r4, #20]
 8008c8c:	1d18      	adds	r0, r3, #4
 8008c8e:	6030      	str	r0, [r6, #0]
 8008c90:	062e      	lsls	r6, r5, #24
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	d501      	bpl.n	8008c9a <_printf_i+0x1be>
 8008c96:	6019      	str	r1, [r3, #0]
 8008c98:	e002      	b.n	8008ca0 <_printf_i+0x1c4>
 8008c9a:	0668      	lsls	r0, r5, #25
 8008c9c:	d5fb      	bpl.n	8008c96 <_printf_i+0x1ba>
 8008c9e:	8019      	strh	r1, [r3, #0]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	6123      	str	r3, [r4, #16]
 8008ca4:	4616      	mov	r6, r2
 8008ca6:	e7bc      	b.n	8008c22 <_printf_i+0x146>
 8008ca8:	6833      	ldr	r3, [r6, #0]
 8008caa:	1d1a      	adds	r2, r3, #4
 8008cac:	6032      	str	r2, [r6, #0]
 8008cae:	681e      	ldr	r6, [r3, #0]
 8008cb0:	6862      	ldr	r2, [r4, #4]
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f7f7 fb73 	bl	80003a0 <memchr>
 8008cba:	b108      	cbz	r0, 8008cc0 <_printf_i+0x1e4>
 8008cbc:	1b80      	subs	r0, r0, r6
 8008cbe:	6060      	str	r0, [r4, #4]
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cca:	e7aa      	b.n	8008c22 <_printf_i+0x146>
 8008ccc:	6923      	ldr	r3, [r4, #16]
 8008cce:	4632      	mov	r2, r6
 8008cd0:	4649      	mov	r1, r9
 8008cd2:	4640      	mov	r0, r8
 8008cd4:	47d0      	blx	sl
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	d0ad      	beq.n	8008c36 <_printf_i+0x15a>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	079b      	lsls	r3, r3, #30
 8008cde:	d413      	bmi.n	8008d08 <_printf_i+0x22c>
 8008ce0:	68e0      	ldr	r0, [r4, #12]
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	4298      	cmp	r0, r3
 8008ce6:	bfb8      	it	lt
 8008ce8:	4618      	movlt	r0, r3
 8008cea:	e7a6      	b.n	8008c3a <_printf_i+0x15e>
 8008cec:	2301      	movs	r3, #1
 8008cee:	4632      	mov	r2, r6
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	47d0      	blx	sl
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	d09d      	beq.n	8008c36 <_printf_i+0x15a>
 8008cfa:	3501      	adds	r5, #1
 8008cfc:	68e3      	ldr	r3, [r4, #12]
 8008cfe:	9903      	ldr	r1, [sp, #12]
 8008d00:	1a5b      	subs	r3, r3, r1
 8008d02:	42ab      	cmp	r3, r5
 8008d04:	dcf2      	bgt.n	8008cec <_printf_i+0x210>
 8008d06:	e7eb      	b.n	8008ce0 <_printf_i+0x204>
 8008d08:	2500      	movs	r5, #0
 8008d0a:	f104 0619 	add.w	r6, r4, #25
 8008d0e:	e7f5      	b.n	8008cfc <_printf_i+0x220>
 8008d10:	0808098c 	.word	0x0808098c
 8008d14:	0808099d 	.word	0x0808099d

08008d18 <__swbuf_r>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	460e      	mov	r6, r1
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	4605      	mov	r5, r0
 8008d20:	b118      	cbz	r0, 8008d2a <__swbuf_r+0x12>
 8008d22:	6a03      	ldr	r3, [r0, #32]
 8008d24:	b90b      	cbnz	r3, 8008d2a <__swbuf_r+0x12>
 8008d26:	f7ff faf7 	bl	8008318 <__sinit>
 8008d2a:	69a3      	ldr	r3, [r4, #24]
 8008d2c:	60a3      	str	r3, [r4, #8]
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	071a      	lsls	r2, r3, #28
 8008d32:	d501      	bpl.n	8008d38 <__swbuf_r+0x20>
 8008d34:	6923      	ldr	r3, [r4, #16]
 8008d36:	b943      	cbnz	r3, 8008d4a <__swbuf_r+0x32>
 8008d38:	4621      	mov	r1, r4
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f000 f82a 	bl	8008d94 <__swsetup_r>
 8008d40:	b118      	cbz	r0, 8008d4a <__swbuf_r+0x32>
 8008d42:	f04f 37ff 	mov.w	r7, #4294967295
 8008d46:	4638      	mov	r0, r7
 8008d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	6922      	ldr	r2, [r4, #16]
 8008d4e:	1a98      	subs	r0, r3, r2
 8008d50:	6963      	ldr	r3, [r4, #20]
 8008d52:	b2f6      	uxtb	r6, r6
 8008d54:	4283      	cmp	r3, r0
 8008d56:	4637      	mov	r7, r6
 8008d58:	dc05      	bgt.n	8008d66 <__swbuf_r+0x4e>
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	f7ff fccd 	bl	80086fc <_fflush_r>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d1ed      	bne.n	8008d42 <__swbuf_r+0x2a>
 8008d66:	68a3      	ldr	r3, [r4, #8]
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	60a3      	str	r3, [r4, #8]
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	6022      	str	r2, [r4, #0]
 8008d72:	701e      	strb	r6, [r3, #0]
 8008d74:	6962      	ldr	r2, [r4, #20]
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d004      	beq.n	8008d86 <__swbuf_r+0x6e>
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	07db      	lsls	r3, r3, #31
 8008d80:	d5e1      	bpl.n	8008d46 <__swbuf_r+0x2e>
 8008d82:	2e0a      	cmp	r6, #10
 8008d84:	d1df      	bne.n	8008d46 <__swbuf_r+0x2e>
 8008d86:	4621      	mov	r1, r4
 8008d88:	4628      	mov	r0, r5
 8008d8a:	f7ff fcb7 	bl	80086fc <_fflush_r>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d0d9      	beq.n	8008d46 <__swbuf_r+0x2e>
 8008d92:	e7d6      	b.n	8008d42 <__swbuf_r+0x2a>

08008d94 <__swsetup_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4b29      	ldr	r3, [pc, #164]	@ (8008e3c <__swsetup_r+0xa8>)
 8008d98:	4605      	mov	r5, r0
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	b118      	cbz	r0, 8008da8 <__swsetup_r+0x14>
 8008da0:	6a03      	ldr	r3, [r0, #32]
 8008da2:	b90b      	cbnz	r3, 8008da8 <__swsetup_r+0x14>
 8008da4:	f7ff fab8 	bl	8008318 <__sinit>
 8008da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dac:	0719      	lsls	r1, r3, #28
 8008dae:	d422      	bmi.n	8008df6 <__swsetup_r+0x62>
 8008db0:	06da      	lsls	r2, r3, #27
 8008db2:	d407      	bmi.n	8008dc4 <__swsetup_r+0x30>
 8008db4:	2209      	movs	r2, #9
 8008db6:	602a      	str	r2, [r5, #0]
 8008db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc2:	e033      	b.n	8008e2c <__swsetup_r+0x98>
 8008dc4:	0758      	lsls	r0, r3, #29
 8008dc6:	d512      	bpl.n	8008dee <__swsetup_r+0x5a>
 8008dc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dca:	b141      	cbz	r1, 8008dde <__swsetup_r+0x4a>
 8008dcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dd0:	4299      	cmp	r1, r3
 8008dd2:	d002      	beq.n	8008dda <__swsetup_r+0x46>
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f7ff fbc3 	bl	8008560 <_free_r>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008de4:	81a3      	strh	r3, [r4, #12]
 8008de6:	2300      	movs	r3, #0
 8008de8:	6063      	str	r3, [r4, #4]
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	f043 0308 	orr.w	r3, r3, #8
 8008df4:	81a3      	strh	r3, [r4, #12]
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	b94b      	cbnz	r3, 8008e0e <__swsetup_r+0x7a>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e04:	d003      	beq.n	8008e0e <__swsetup_r+0x7a>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f000 f883 	bl	8008f14 <__smakebuf_r>
 8008e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e12:	f013 0201 	ands.w	r2, r3, #1
 8008e16:	d00a      	beq.n	8008e2e <__swsetup_r+0x9a>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	60a2      	str	r2, [r4, #8]
 8008e1c:	6962      	ldr	r2, [r4, #20]
 8008e1e:	4252      	negs	r2, r2
 8008e20:	61a2      	str	r2, [r4, #24]
 8008e22:	6922      	ldr	r2, [r4, #16]
 8008e24:	b942      	cbnz	r2, 8008e38 <__swsetup_r+0xa4>
 8008e26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e2a:	d1c5      	bne.n	8008db8 <__swsetup_r+0x24>
 8008e2c:	bd38      	pop	{r3, r4, r5, pc}
 8008e2e:	0799      	lsls	r1, r3, #30
 8008e30:	bf58      	it	pl
 8008e32:	6962      	ldrpl	r2, [r4, #20]
 8008e34:	60a2      	str	r2, [r4, #8]
 8008e36:	e7f4      	b.n	8008e22 <__swsetup_r+0x8e>
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e7f7      	b.n	8008e2c <__swsetup_r+0x98>
 8008e3c:	24000030 	.word	0x24000030

08008e40 <_raise_r>:
 8008e40:	291f      	cmp	r1, #31
 8008e42:	b538      	push	{r3, r4, r5, lr}
 8008e44:	4605      	mov	r5, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	d904      	bls.n	8008e54 <_raise_r+0x14>
 8008e4a:	2316      	movs	r3, #22
 8008e4c:	6003      	str	r3, [r0, #0]
 8008e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e52:	bd38      	pop	{r3, r4, r5, pc}
 8008e54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e56:	b112      	cbz	r2, 8008e5e <_raise_r+0x1e>
 8008e58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e5c:	b94b      	cbnz	r3, 8008e72 <_raise_r+0x32>
 8008e5e:	4628      	mov	r0, r5
 8008e60:	f000 f830 	bl	8008ec4 <_getpid_r>
 8008e64:	4622      	mov	r2, r4
 8008e66:	4601      	mov	r1, r0
 8008e68:	4628      	mov	r0, r5
 8008e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e6e:	f000 b817 	b.w	8008ea0 <_kill_r>
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d00a      	beq.n	8008e8c <_raise_r+0x4c>
 8008e76:	1c59      	adds	r1, r3, #1
 8008e78:	d103      	bne.n	8008e82 <_raise_r+0x42>
 8008e7a:	2316      	movs	r3, #22
 8008e7c:	6003      	str	r3, [r0, #0]
 8008e7e:	2001      	movs	r0, #1
 8008e80:	e7e7      	b.n	8008e52 <_raise_r+0x12>
 8008e82:	2100      	movs	r1, #0
 8008e84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e88:	4620      	mov	r0, r4
 8008e8a:	4798      	blx	r3
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e7e0      	b.n	8008e52 <_raise_r+0x12>

08008e90 <raise>:
 8008e90:	4b02      	ldr	r3, [pc, #8]	@ (8008e9c <raise+0xc>)
 8008e92:	4601      	mov	r1, r0
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	f7ff bfd3 	b.w	8008e40 <_raise_r>
 8008e9a:	bf00      	nop
 8008e9c:	24000030 	.word	0x24000030

08008ea0 <_kill_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	4d07      	ldr	r5, [pc, #28]	@ (8008ec0 <_kill_r+0x20>)
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	4608      	mov	r0, r1
 8008eaa:	4611      	mov	r1, r2
 8008eac:	602b      	str	r3, [r5, #0]
 8008eae:	f7f8 fd75 	bl	800199c <_kill>
 8008eb2:	1c43      	adds	r3, r0, #1
 8008eb4:	d102      	bne.n	8008ebc <_kill_r+0x1c>
 8008eb6:	682b      	ldr	r3, [r5, #0]
 8008eb8:	b103      	cbz	r3, 8008ebc <_kill_r+0x1c>
 8008eba:	6023      	str	r3, [r4, #0]
 8008ebc:	bd38      	pop	{r3, r4, r5, pc}
 8008ebe:	bf00      	nop
 8008ec0:	2407e478 	.word	0x2407e478

08008ec4 <_getpid_r>:
 8008ec4:	f7f8 bd68 	b.w	8001998 <_getpid>

08008ec8 <__swhatbuf_r>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	460c      	mov	r4, r1
 8008ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed0:	2900      	cmp	r1, #0
 8008ed2:	b096      	sub	sp, #88	@ 0x58
 8008ed4:	4615      	mov	r5, r2
 8008ed6:	461e      	mov	r6, r3
 8008ed8:	da0d      	bge.n	8008ef6 <__swhatbuf_r+0x2e>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ee0:	f04f 0100 	mov.w	r1, #0
 8008ee4:	bf14      	ite	ne
 8008ee6:	2340      	movne	r3, #64	@ 0x40
 8008ee8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008eec:	2000      	movs	r0, #0
 8008eee:	6031      	str	r1, [r6, #0]
 8008ef0:	602b      	str	r3, [r5, #0]
 8008ef2:	b016      	add	sp, #88	@ 0x58
 8008ef4:	bd70      	pop	{r4, r5, r6, pc}
 8008ef6:	466a      	mov	r2, sp
 8008ef8:	f000 f848 	bl	8008f8c <_fstat_r>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	dbec      	blt.n	8008eda <__swhatbuf_r+0x12>
 8008f00:	9901      	ldr	r1, [sp, #4]
 8008f02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f0a:	4259      	negs	r1, r3
 8008f0c:	4159      	adcs	r1, r3
 8008f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f12:	e7eb      	b.n	8008eec <__swhatbuf_r+0x24>

08008f14 <__smakebuf_r>:
 8008f14:	898b      	ldrh	r3, [r1, #12]
 8008f16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f18:	079d      	lsls	r5, r3, #30
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	d507      	bpl.n	8008f30 <__smakebuf_r+0x1c>
 8008f20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	6123      	str	r3, [r4, #16]
 8008f28:	2301      	movs	r3, #1
 8008f2a:	6163      	str	r3, [r4, #20]
 8008f2c:	b003      	add	sp, #12
 8008f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f30:	ab01      	add	r3, sp, #4
 8008f32:	466a      	mov	r2, sp
 8008f34:	f7ff ffc8 	bl	8008ec8 <__swhatbuf_r>
 8008f38:	9f00      	ldr	r7, [sp, #0]
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f7ff f8a4 	bl	800808c <_malloc_r>
 8008f44:	b948      	cbnz	r0, 8008f5a <__smakebuf_r+0x46>
 8008f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f4a:	059a      	lsls	r2, r3, #22
 8008f4c:	d4ee      	bmi.n	8008f2c <__smakebuf_r+0x18>
 8008f4e:	f023 0303 	bic.w	r3, r3, #3
 8008f52:	f043 0302 	orr.w	r3, r3, #2
 8008f56:	81a3      	strh	r3, [r4, #12]
 8008f58:	e7e2      	b.n	8008f20 <__smakebuf_r+0xc>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	6020      	str	r0, [r4, #0]
 8008f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f62:	81a3      	strh	r3, [r4, #12]
 8008f64:	9b01      	ldr	r3, [sp, #4]
 8008f66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f6a:	b15b      	cbz	r3, 8008f84 <__smakebuf_r+0x70>
 8008f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f70:	4630      	mov	r0, r6
 8008f72:	f000 f81d 	bl	8008fb0 <_isatty_r>
 8008f76:	b128      	cbz	r0, 8008f84 <__smakebuf_r+0x70>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f023 0303 	bic.w	r3, r3, #3
 8008f7e:	f043 0301 	orr.w	r3, r3, #1
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	431d      	orrs	r5, r3
 8008f88:	81a5      	strh	r5, [r4, #12]
 8008f8a:	e7cf      	b.n	8008f2c <__smakebuf_r+0x18>

08008f8c <_fstat_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d07      	ldr	r5, [pc, #28]	@ (8008fac <_fstat_r+0x20>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	4611      	mov	r1, r2
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	f7f8 fd2f 	bl	80019fc <_fstat>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	d102      	bne.n	8008fa8 <_fstat_r+0x1c>
 8008fa2:	682b      	ldr	r3, [r5, #0]
 8008fa4:	b103      	cbz	r3, 8008fa8 <_fstat_r+0x1c>
 8008fa6:	6023      	str	r3, [r4, #0]
 8008fa8:	bd38      	pop	{r3, r4, r5, pc}
 8008faa:	bf00      	nop
 8008fac:	2407e478 	.word	0x2407e478

08008fb0 <_isatty_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	4d06      	ldr	r5, [pc, #24]	@ (8008fcc <_isatty_r+0x1c>)
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	4608      	mov	r0, r1
 8008fba:	602b      	str	r3, [r5, #0]
 8008fbc:	f7f8 fd24 	bl	8001a08 <_isatty>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d102      	bne.n	8008fca <_isatty_r+0x1a>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	b103      	cbz	r3, 8008fca <_isatty_r+0x1a>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	bd38      	pop	{r3, r4, r5, pc}
 8008fcc:	2407e478 	.word	0x2407e478

08008fd0 <tanhf>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	ee10 5a10 	vmov	r5, s0
 8008fd6:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008fda:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008fde:	ed2d 8b02 	vpush	{d8}
 8008fe2:	eef0 7a40 	vmov.f32	s15, s0
 8008fe6:	d30f      	bcc.n	8009008 <tanhf+0x38>
 8008fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8009094 <tanhf+0xc4>)
 8008fea:	edd3 6a00 	vldr	s13, [r3]
 8008fee:	ed93 7a00 	vldr	s14, [r3]
 8008ff2:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	bfac      	ite	ge
 8008ffa:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8008ffe:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8009002:	ecbd 8b02 	vpop	{d8}
 8009006:	bd38      	pop	{r3, r4, r5, pc}
 8009008:	4a23      	ldr	r2, [pc, #140]	@ (8009098 <tanhf+0xc8>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d839      	bhi.n	8009082 <tanhf+0xb2>
 800900e:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 8009012:	d207      	bcs.n	8009024 <tanhf+0x54>
 8009014:	4b1f      	ldr	r3, [pc, #124]	@ (8009094 <tanhf+0xc4>)
 8009016:	ed93 0a00 	vldr	s0, [r3]
 800901a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800901e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009022:	e7ee      	b.n	8009002 <tanhf+0x32>
 8009024:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009028:	4c1c      	ldr	r4, [pc, #112]	@ (800909c <tanhf+0xcc>)
 800902a:	d319      	bcc.n	8009060 <tanhf+0x90>
 800902c:	f000 f982 	bl	8009334 <fabsf>
 8009030:	edd4 7a00 	vldr	s15, [r4]
 8009034:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009038:	f000 f834 	bl	80090a4 <expm1f>
 800903c:	4b15      	ldr	r3, [pc, #84]	@ (8009094 <tanhf+0xc4>)
 800903e:	edd3 7a00 	vldr	s15, [r3]
 8009042:	ed94 6a00 	vldr	s12, [r4]
 8009046:	ed94 7a00 	vldr	s14, [r4]
 800904a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800904e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009052:	ee37 0ae6 	vsub.f32	s0, s15, s13
 8009056:	2d00      	cmp	r5, #0
 8009058:	bfb8      	it	lt
 800905a:	eeb1 0a40 	vneglt.f32	s0, s0
 800905e:	e7d0      	b.n	8009002 <tanhf+0x32>
 8009060:	ed94 8a00 	vldr	s16, [r4]
 8009064:	f000 f966 	bl	8009334 <fabsf>
 8009068:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800906c:	f000 f81a 	bl	80090a4 <expm1f>
 8009070:	edd4 7a00 	vldr	s15, [r4]
 8009074:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009078:	eeb1 7a40 	vneg.f32	s14, s0
 800907c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009080:	e7e9      	b.n	8009056 <tanhf+0x86>
 8009082:	4b04      	ldr	r3, [pc, #16]	@ (8009094 <tanhf+0xc4>)
 8009084:	ed93 0a00 	vldr	s0, [r3]
 8009088:	4b05      	ldr	r3, [pc, #20]	@ (80090a0 <tanhf+0xd0>)
 800908a:	edd3 7a00 	vldr	s15, [r3]
 800908e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009092:	e7e0      	b.n	8009056 <tanhf+0x86>
 8009094:	080809b8 	.word	0x080809b8
 8009098:	41afffff 	.word	0x41afffff
 800909c:	080809b4 	.word	0x080809b4
 80090a0:	080809b0 	.word	0x080809b0

080090a4 <expm1f>:
 80090a4:	ee10 3a10 	vmov	r3, s0
 80090a8:	4a83      	ldr	r2, [pc, #524]	@ (80092b8 <expm1f+0x214>)
 80090aa:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 80090ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d91e      	bls.n	80090f4 <expm1f+0x50>
 80090b6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80090ba:	d902      	bls.n	80090c2 <expm1f+0x1e>
 80090bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80090c0:	4770      	bx	lr
 80090c2:	d105      	bne.n	80090d0 <expm1f+0x2c>
 80090c4:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80090c8:	2800      	cmp	r0, #0
 80090ca:	fe00 0a27 	vseleq.f32	s0, s0, s15
 80090ce:	4770      	bx	lr
 80090d0:	b920      	cbnz	r0, 80090dc <expm1f+0x38>
 80090d2:	4a7a      	ldr	r2, [pc, #488]	@ (80092bc <expm1f+0x218>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d963      	bls.n	80091a0 <expm1f+0xfc>
 80090d8:	f000 b926 	b.w	8009328 <__math_oflowf>
 80090dc:	eddf 7a78 	vldr	s15, [pc, #480]	@ 80092c0 <expm1f+0x21c>
 80090e0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80090e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ec:	d551      	bpl.n	8009192 <expm1f+0xee>
 80090ee:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80090f2:	4770      	bx	lr
 80090f4:	4a73      	ldr	r2, [pc, #460]	@ (80092c4 <expm1f+0x220>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d972      	bls.n	80091e0 <expm1f+0x13c>
 80090fa:	4a73      	ldr	r2, [pc, #460]	@ (80092c8 <expm1f+0x224>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d868      	bhi.n	80091d2 <expm1f+0x12e>
 8009100:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 80092cc <expm1f+0x228>
 8009104:	2800      	cmp	r0, #0
 8009106:	d13d      	bne.n	8009184 <expm1f+0xe0>
 8009108:	ee30 7a47 	vsub.f32	s14, s0, s14
 800910c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80092d0 <expm1f+0x22c>
 8009110:	2301      	movs	r3, #1
 8009112:	ee37 0a66 	vsub.f32	s0, s14, s13
 8009116:	ee77 7a40 	vsub.f32	s15, s14, s0
 800911a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800911e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8009122:	ee20 4a25 	vmul.f32	s8, s0, s11
 8009126:	ed9f 6a6b 	vldr	s12, [pc, #428]	@ 80092d4 <expm1f+0x230>
 800912a:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80092d8 <expm1f+0x234>
 800912e:	ed9f 5a6b 	vldr	s10, [pc, #428]	@ 80092dc <expm1f+0x238>
 8009132:	ee20 7a04 	vmul.f32	s14, s0, s8
 8009136:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 800913a:	eee7 6a06 	vfma.f32	s13, s14, s12
 800913e:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 80092e0 <expm1f+0x23c>
 8009142:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009146:	eddf 6a67 	vldr	s13, [pc, #412]	@ 80092e4 <expm1f+0x240>
 800914a:	eee6 6a07 	vfma.f32	s13, s12, s14
 800914e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009152:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009156:	eef0 6a46 	vmov.f32	s13, s12
 800915a:	eee5 6a07 	vfma.f32	s13, s10, s14
 800915e:	eee4 4a66 	vfms.f32	s9, s8, s13
 8009162:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 8009166:	eea0 4a64 	vfms.f32	s8, s0, s9
 800916a:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800916e:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8009172:	ee66 6a87 	vmul.f32	s13, s13, s14
 8009176:	2b00      	cmp	r3, #0
 8009178:	d140      	bne.n	80091fc <expm1f+0x158>
 800917a:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800917e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009182:	4770      	bx	lr
 8009184:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009188:	eddf 6a57 	vldr	s13, [pc, #348]	@ 80092e8 <expm1f+0x244>
 800918c:	f04f 33ff 	mov.w	r3, #4294967295
 8009190:	e7bf      	b.n	8009112 <expm1f+0x6e>
 8009192:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80092ec <expm1f+0x248>
 8009196:	ee20 7a07 	vmul.f32	s14, s0, s14
 800919a:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800919e:	e005      	b.n	80091ac <expm1f+0x108>
 80091a0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80092ec <expm1f+0x248>
 80091a4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80091a8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80091ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091b0:	eeb0 7a40 	vmov.f32	s14, s0
 80091b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80091bc:	ee17 3a90 	vmov	r3, s15
 80091c0:	eddf 7a42 	vldr	s15, [pc, #264]	@ 80092cc <expm1f+0x228>
 80091c4:	eea6 7ae7 	vfms.f32	s14, s13, s15
 80091c8:	eddf 7a41 	vldr	s15, [pc, #260]	@ 80092d0 <expm1f+0x22c>
 80091cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80091d0:	e79f      	b.n	8009112 <expm1f+0x6e>
 80091d2:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80092ec <expm1f+0x248>
 80091d6:	ee20 7a07 	vmul.f32	s14, s0, s14
 80091da:	2800      	cmp	r0, #0
 80091dc:	d0e4      	beq.n	80091a8 <expm1f+0x104>
 80091de:	e7dc      	b.n	800919a <expm1f+0xf6>
 80091e0:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 80091e4:	d208      	bcs.n	80091f8 <expm1f+0x154>
 80091e6:	eddf 7a42 	vldr	s15, [pc, #264]	@ 80092f0 <expm1f+0x24c>
 80091ea:	ee70 7a27 	vadd.f32	s15, s0, s15
 80091ee:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80091f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80091f6:	4770      	bx	lr
 80091f8:	2300      	movs	r3, #0
 80091fa:	e790      	b.n	800911e <expm1f+0x7a>
 80091fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009200:	1c5a      	adds	r2, r3, #1
 8009202:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8009206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800920a:	d106      	bne.n	800921a <expm1f+0x176>
 800920c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009210:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 8009214:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8009218:	4770      	bx	lr
 800921a:	2b01      	cmp	r3, #1
 800921c:	d118      	bne.n	8009250 <expm1f+0x1ac>
 800921e:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 8009222:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800922a:	bf5b      	ittet	pl
 800922c:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8009230:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 8009234:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8009238:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800923c:	bf43      	ittte	mi
 800923e:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 8009242:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 8009246:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800924a:	eeb0 0a46 	vmovpl.f32	s0, s12
 800924e:	4770      	bx	lr
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	2a39      	cmp	r2, #57	@ 0x39
 8009254:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8009258:	d90b      	bls.n	8009272 <expm1f+0x1ce>
 800925a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800925e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009262:	ee17 3a90 	vmov	r3, s15
 8009266:	4419      	add	r1, r3
 8009268:	ee07 1a90 	vmov	s15, r1
 800926c:	ee37 0ac6 	vsub.f32	s0, s15, s12
 8009270:	4770      	bx	lr
 8009272:	2b16      	cmp	r3, #22
 8009274:	dc11      	bgt.n	800929a <expm1f+0x1f6>
 8009276:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800927a:	fa42 f303 	asr.w	r3, r2, r3
 800927e:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 8009282:	ee07 3a10 	vmov	s14, r3
 8009286:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800928a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800928e:	ee17 3a90 	vmov	r3, s15
 8009292:	440b      	add	r3, r1
 8009294:	ee00 3a10 	vmov	s0, r3
 8009298:	4770      	bx	lr
 800929a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800929e:	05db      	lsls	r3, r3, #23
 80092a0:	ee07 3a10 	vmov	s14, r3
 80092a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092a8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80092ac:	ee77 7a86 	vadd.f32	s15, s15, s12
 80092b0:	ee17 3a90 	vmov	r3, s15
 80092b4:	e7ed      	b.n	8009292 <expm1f+0x1ee>
 80092b6:	bf00      	nop
 80092b8:	4195b843 	.word	0x4195b843
 80092bc:	42b17217 	.word	0x42b17217
 80092c0:	0da24260 	.word	0x0da24260
 80092c4:	3eb17218 	.word	0x3eb17218
 80092c8:	3f851591 	.word	0x3f851591
 80092cc:	3f317180 	.word	0x3f317180
 80092d0:	3717f7d1 	.word	0x3717f7d1
 80092d4:	b457edbb 	.word	0xb457edbb
 80092d8:	36867e54 	.word	0x36867e54
 80092dc:	bd088889 	.word	0xbd088889
 80092e0:	b8a670cd 	.word	0xb8a670cd
 80092e4:	3ad00d01 	.word	0x3ad00d01
 80092e8:	b717f7d1 	.word	0xb717f7d1
 80092ec:	3fb8aa3b 	.word	0x3fb8aa3b
 80092f0:	7149f2ca 	.word	0x7149f2ca

080092f4 <with_errnof>:
 80092f4:	b510      	push	{r4, lr}
 80092f6:	ed2d 8b02 	vpush	{d8}
 80092fa:	eeb0 8a40 	vmov.f32	s16, s0
 80092fe:	4604      	mov	r4, r0
 8009300:	f7ff f8e2 	bl	80084c8 <__errno>
 8009304:	eeb0 0a48 	vmov.f32	s0, s16
 8009308:	ecbd 8b02 	vpop	{d8}
 800930c:	6004      	str	r4, [r0, #0]
 800930e:	bd10      	pop	{r4, pc}

08009310 <xflowf>:
 8009310:	b130      	cbz	r0, 8009320 <xflowf+0x10>
 8009312:	eef1 7a40 	vneg.f32	s15, s0
 8009316:	ee27 0a80 	vmul.f32	s0, s15, s0
 800931a:	2022      	movs	r0, #34	@ 0x22
 800931c:	f7ff bfea 	b.w	80092f4 <with_errnof>
 8009320:	eef0 7a40 	vmov.f32	s15, s0
 8009324:	e7f7      	b.n	8009316 <xflowf+0x6>
	...

08009328 <__math_oflowf>:
 8009328:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009330 <__math_oflowf+0x8>
 800932c:	f7ff bff0 	b.w	8009310 <xflowf>
 8009330:	70000000 	.word	0x70000000

08009334 <fabsf>:
 8009334:	ee10 3a10 	vmov	r3, s0
 8009338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800933c:	ee00 3a10 	vmov	s0, r3
 8009340:	4770      	bx	lr
	...

08009344 <_init>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	bf00      	nop
 8009348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934a:	bc08      	pop	{r3}
 800934c:	469e      	mov	lr, r3
 800934e:	4770      	bx	lr

08009350 <_fini>:
 8009350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009352:	bf00      	nop
 8009354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009356:	bc08      	pop	{r3}
 8009358:	469e      	mov	lr, r3
 800935a:	4770      	bx	lr
