
STM32H743-DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d3c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00076ac0  08007fe0  08007fe0  00008fe0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0807eaa0  0807eaa0  0007faa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0807eaa4  0807eaa4  0007faa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000000cc  24000000  0807eaa8  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .dtcm_bss     00007040  20000000  20000000  00081000  2**5
                  ALLOC
  7 .dtcm_data    00000000  20007040  20007040  000800cc  2**0
                  CONTENTS
  8 .bss          00079a48  240000e0  240000e0  000800e0  2**5
                  ALLOC
  9 ._user_heap_stack 00000600  24079b28  24079b28  000800e0  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000800cc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00024804  00000000  00000000  000800fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004c44  00000000  00000000  000a48fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001350  00000000  00000000  000a9548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a299  00000000  00000000  000aa898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002742c  00000000  00000000  000e4b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00174e95  00000000  00000000  0010bf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  00280df2  2**0
                  CONTENTS, READONLY
 18 .debug_loclists 0000fec1  00000000  00000000  00280ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001d14  00000000  00000000  00290d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003718  00000000  00000000  00292a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00296194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000427a  00000000  00000000  00296202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000f0  00000000  00000000  0029a47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000e0 	.word	0x240000e0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007fbc 	.word	0x08007fbc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000e4 	.word	0x240000e4
 80002d4:	08007fbc 	.word	0x08007fbc

080002d8 <arm_bitreversal_32>:
 80002d8:	1c4b      	adds	r3, r1, #1
 80002da:	2b01      	cmp	r3, #1
 80002dc:	bf98      	it	ls
 80002de:	4770      	bxls	lr
 80002e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002e4:	1c91      	adds	r1, r2, #2
 80002e6:	089b      	lsrs	r3, r3, #2

080002e8 <arm_bitreversal_32_0>:
 80002e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f0:	880a      	ldrh	r2, [r1, #0]
 80002f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002f6:	4480      	add	r8, r0
 80002f8:	4481      	add	r9, r0
 80002fa:	4402      	add	r2, r0
 80002fc:	4484      	add	ip, r0
 80002fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000302:	f8d8 6000 	ldr.w	r6, [r8]
 8000306:	6815      	ldr	r5, [r2, #0]
 8000308:	f8dc 4000 	ldr.w	r4, [ip]
 800030c:	f8c9 6000 	str.w	r6, [r9]
 8000310:	f8c8 7000 	str.w	r7, [r8]
 8000314:	f8cc 5000 	str.w	r5, [ip]
 8000318:	6014      	str	r4, [r2, #0]
 800031a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800031e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000322:	6855      	ldr	r5, [r2, #4]
 8000324:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000328:	f8c9 6004 	str.w	r6, [r9, #4]
 800032c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000330:	f8cc 5004 	str.w	r5, [ip, #4]
 8000334:	6054      	str	r4, [r2, #4]
 8000336:	3108      	adds	r1, #8
 8000338:	3b01      	subs	r3, #1
 800033a:	d1d5      	bne.n	80002e8 <arm_bitreversal_32_0>
 800033c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000340:	4770      	bx	lr

08000342 <arm_bitreversal_16>:
 8000342:	1c4b      	adds	r3, r1, #1
 8000344:	2b01      	cmp	r3, #1
 8000346:	bf98      	it	ls
 8000348:	4770      	bxls	lr
 800034a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800034e:	1c91      	adds	r1, r2, #2
 8000350:	089b      	lsrs	r3, r3, #2

08000352 <arm_bitreversal_16_0>:
 8000352:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000356:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800035a:	880a      	ldrh	r2, [r1, #0]
 800035c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000360:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000364:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000368:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800036c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000370:	f8d9 7000 	ldr.w	r7, [r9]
 8000374:	f8d8 6000 	ldr.w	r6, [r8]
 8000378:	6815      	ldr	r5, [r2, #0]
 800037a:	f8dc 4000 	ldr.w	r4, [ip]
 800037e:	f8c9 6000 	str.w	r6, [r9]
 8000382:	f8c8 7000 	str.w	r7, [r8]
 8000386:	f8cc 5000 	str.w	r5, [ip]
 800038a:	6014      	str	r4, [r2, #0]
 800038c:	3108      	adds	r1, #8
 800038e:	3b01      	subs	r3, #1
 8000390:	d1df      	bne.n	8000352 <arm_bitreversal_16_0>
 8000392:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000396:	4770      	bx	lr

08000398 <cabinet_process>:
__attribute__((section(".dtcm"), aligned(32))) float state4[BUFFER_SIZE];


static void cabinet_process(pipe *p){

	partitioned_fir_convolution_fft(p, cabinet_sim.fir1, state4);
 8000398:	4b02      	ldr	r3, [pc, #8]	@ (80003a4 <cabinet_process+0xc>)
 800039a:	4a03      	ldr	r2, [pc, #12]	@ (80003a8 <cabinet_process+0x10>)
 800039c:	6819      	ldr	r1, [r3, #0]
 800039e:	f000 baf5 	b.w	800098c <partitioned_fir_convolution_fft>
 80003a2:	bf00      	nop
 80003a4:	2400001c 	.word	0x2400001c
 80003a8:	20000000 	.word	0x20000000

080003ac <convolution_reverb_f32_process>:
#include "_MULTI_FX.h"


void convolution_reverb_f32_process(convolution_reverb_f32 *self, pipe *p){

	partitioned_fir_convolution_fft(p, convolution_reverb.fir1, self->state);
 80003ac:	4b02      	ldr	r3, [pc, #8]	@ (80003b8 <convolution_reverb_f32_process+0xc>)
 80003ae:	6842      	ldr	r2, [r0, #4]
 80003b0:	4608      	mov	r0, r1
 80003b2:	6819      	ldr	r1, [r3, #0]
 80003b4:	f000 baea 	b.w	800098c <partitioned_fir_convolution_fft>
 80003b8:	24006100 	.word	0x24006100

080003bc <convolution_reverb_f32_init>:


void convolution_reverb_f32_init(convolution_reverb_f32 *self, float32_t *state, fir_t *fir){

	self->state = state;
	self->fir1 = fir;
 80003bc:	e9c0 2100 	strd	r2, r1, [r0]


}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop

080003c4 <fir_emt_140_dark_3_f32_init>:

};

*/

void fir_emt_140_dark_3_f32_init(fir_t *self, float *state){
 80003c4:	b470      	push	{r4, r5, r6}
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + SCRATCH_FLOATS + EMT_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 80003c6:	4c0e      	ldr	r4, [pc, #56]	@ (8000400 <fir_emt_140_dark_3_f32_init+0x3c>)
    self->numSegments  = EMT_SEGMENTS;
    self->curr_fftidx  = 0;
 80003c8:	2500      	movs	r5, #0
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <fir_emt_140_dark_3_f32_init+0x40>)
    self->ir_ffts      = IR_TABLE;
 80003cc:	f501 26b8 	add.w	r6, r1, #376832	@ 0x5c000
    self->prev_ffts    = PREV_TABLE;
 80003d0:	440c      	add	r4, r1
 80003d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000408 <fir_emt_140_dark_3_f32_init+0x44>)
 80003d4:	f503 2cb8 	add.w	ip, r3, #376832	@ 0x5c000
    self->ir_ffts      = IR_TABLE;
 80003d8:	6006      	str	r6, [r0, #0]
    self->prev_ffts    = PREV_TABLE;
 80003da:	6044      	str	r4, [r0, #4]
    self->numSegments  = EMT_SEGMENTS;
 80003dc:	440a      	add	r2, r1
 80003de:	242e      	movs	r4, #46	@ 0x2e
    self->curr_fftidx  = 0;
 80003e0:	e9c0 5502 	strd	r5, r5, [r0, #8]
    self->numSegments  = EMT_SEGMENTS;
 80003e4:	6104      	str	r4, [r0, #16]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
        IR_TABLE [i] = &_EMT_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 80003e6:	f842 3f04 	str.w	r3, [r2, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 80003ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
 80003ee:	f8c2 10b8 	str.w	r1, [r2, #184]	@ 0xb8
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 80003f2:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80003f6:	4563      	cmp	r3, ip
 80003f8:	d1f5      	bne.n	80003e6 <fir_emt_140_dark_3_f32_init+0x22>
    }

}
 80003fa:	bc70      	pop	{r4, r5, r6}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	0005c0b8 	.word	0x0005c0b8
 8000404:	08009fe0 	.word	0x08009fe0
 8000408:	0005bffc 	.word	0x0005bffc

0800040c <HAL_ADC_ConvHalfCpltCallback>:
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800040c:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800040e:	f003 021f 	and.w	r2, r3, #31
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000412:	f3bf 8f4f 	dsb	sy
 8000416:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800041a:	480a      	ldr	r0, [pc, #40]	@ (8000444 <HAL_ADC_ConvHalfCpltCallback+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 800041c:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800041e:	f8c0 325c 	str.w	r3, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000422:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000424:	1aca      	subs	r2, r1, r3
 8000426:	2a00      	cmp	r2, #0
 8000428:	dcf9      	bgt.n	800041e <HAL_ADC_ConvHalfCpltCallback+0x12>
 800042a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800042e:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[0…BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)adcInput,
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcHalfComplete(&apipe, adcInput);
 8000432:	4805      	ldr	r0, [pc, #20]	@ (8000448 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000434:	4902      	ldr	r1, [pc, #8]	@ (8000440 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000436:	6943      	ldr	r3, [r0, #20]
 8000438:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 800043c:	4718      	bx	r3
 800043e:	bf00      	nop
 8000440:	2406328c 	.word	0x2406328c
 8000444:	e000ed00 	.word	0xe000ed00
 8000448:	240732a4 	.word	0x240732a4

0800044c <HAL_ADC_ConvCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800044c:	490d      	ldr	r1, [pc, #52]	@ (8000484 <HAL_ADC_ConvCpltCallback+0x38>)
 800044e:	f001 021f 	and.w	r2, r1, #31
 8000452:	f502 6300 	add.w	r3, r2, #2048	@ 0x800
  __ASM volatile ("dsb 0xF":::"memory");
 8000456:	f3bf 8f4f 	dsb	sy
 800045a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800045e:	480a      	ldr	r0, [pc, #40]	@ (8000488 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000460:	4411      	add	r1, r2
 8000462:	1aca      	subs	r2, r1, r3
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000464:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8000466:	2b00      	cmp	r3, #0
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000468:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
      } while ( op_size > 0 );
 800046c:	dcf9      	bgt.n	8000462 <HAL_ADC_ConvCpltCallback+0x16>
 800046e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000472:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[BUFFER_SIZE…2*BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)&adcInput[BUFFER_SIZE],
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcComplete(&apipe, adcInput);
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <HAL_ADC_ConvCpltCallback+0x40>)
 8000478:	4905      	ldr	r1, [pc, #20]	@ (8000490 <HAL_ADC_ConvCpltCallback+0x44>)
 800047a:	6983      	ldr	r3, [r0, #24]
 800047c:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 8000480:	4718      	bx	r3
 8000482:	bf00      	nop
 8000484:	24063a8c 	.word	0x24063a8c
 8000488:	e000ed00 	.word	0xe000ed00
 800048c:	240732a4 	.word	0x240732a4
 8000490:	2406328c 	.word	0x2406328c

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000498:	224c      	movs	r2, #76	@ 0x4c
 800049a:	2100      	movs	r1, #0
 800049c:	a80a      	add	r0, sp, #40	@ 0x28
 800049e:	f007 fba1 	bl	8007be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a2:	2220      	movs	r2, #32
 80004a4:	2100      	movs	r1, #0
 80004a6:	a802      	add	r0, sp, #8
 80004a8:	f007 fb9c 	bl	8007be4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004ac:	2002      	movs	r0, #2
 80004ae:	f003 fe03 	bl	80040b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004b2:	4a24      	ldr	r2, [pc, #144]	@ (8000544 <SystemClock_Config+0xb0>)
 80004b4:	2100      	movs	r1, #0
 80004b6:	4b24      	ldr	r3, [pc, #144]	@ (8000548 <SystemClock_Config+0xb4>)
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	6991      	ldr	r1, [r2, #24]
 80004bc:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80004c0:	6191      	str	r1, [r2, #24]
 80004c2:	6991      	ldr	r1, [r2, #24]
 80004c4:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 80004c8:	9101      	str	r1, [sp, #4]
 80004ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80004cc:	f041 0101 	orr.w	r1, r1, #1
 80004d0:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80004d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d4:	f003 0301 	and.w	r3, r3, #1
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004dc:	6993      	ldr	r3, [r2, #24]
 80004de:	049b      	lsls	r3, r3, #18
 80004e0:	d5fc      	bpl.n	80004dc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e2:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004e4:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004e6:	2101      	movs	r1, #1
 80004e8:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ea:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 60;
 80004ec:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ee:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f0:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004f2:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004f4:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004f6:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004f8:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004fa:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004fe:	230c      	movs	r3, #12
 8000500:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000502:	233c      	movs	r3, #60	@ 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000504:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000508:	e9cd 5315 	strd	r5, r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f003 fe6a 	bl	80041e4 <HAL_RCC_OscConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	b108      	cbz	r0, 8000518 <SystemClock_Config+0x84>
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000516:	e7fe      	b.n	8000516 <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000518:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800051a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800051c:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800051e:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000522:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000524:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000526:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000528:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800052a:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800052e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000532:	e9cd 4307 	strd	r4, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000536:	f004 f9d1 	bl	80048dc <HAL_RCC_ClockConfig>
 800053a:	b108      	cbz	r0, 8000540 <SystemClock_Config+0xac>
 800053c:	b672      	cpsid	i
  while (1)
 800053e:	e7fe      	b.n	800053e <SystemClock_Config+0xaa>
}
 8000540:	b01f      	add	sp, #124	@ 0x7c
 8000542:	bd30      	pop	{r4, r5, pc}
 8000544:	58024800 	.word	0x58024800
 8000548:	58000400 	.word	0x58000400

0800054c <PeriphCommonClock_Config>:
{
 800054c:	b500      	push	{lr}
 800054e:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000550:	22b8      	movs	r2, #184	@ 0xb8
 8000552:	2100      	movs	r1, #0
 8000554:	a802      	add	r0, sp, #8
 8000556:	f007 fb45 	bl	8007be4 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800055a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800055e:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000560:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000562:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000566:	f004 fc4b 	bl	8004e00 <HAL_RCCEx_PeriphCLKConfig>
 800056a:	b108      	cbz	r0, 8000570 <PeriphCommonClock_Config+0x24>
 800056c:	b672      	cpsid	i
  while (1)
 800056e:	e7fe      	b.n	800056e <PeriphCommonClock_Config+0x22>
}
 8000570:	b031      	add	sp, #196	@ 0xc4
 8000572:	f85d fb04 	ldr.w	pc, [sp], #4
 8000576:	bf00      	nop

08000578 <main>:
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000578:	2400      	movs	r4, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800057a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4d7f      	ldr	r5, [pc, #508]	@ (800077c <main+0x204>)
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
 800057e:	f44f 5800 	mov.w	r8, #8192	@ 0x2000
{
 8000582:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000586:	b093      	sub	sp, #76	@ 0x4c
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 8000588:	2708      	movs	r7, #8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800058a:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 800058e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_MPU_Disable();
 8000592:	f002 f8c9 	bl	8002728 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000596:	f248 721f 	movw	r2, #34591	@ 0x871f
 800059a:	f240 1301 	movw	r3, #257	@ 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800059e:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005a0:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80005a6:	e9cd 420a 	strd	r4, r2, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005aa:	f002 f8db 	bl	8002764 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80005ae:	2004      	movs	r0, #4
 80005b0:	f002 f8c8 	bl	8002744 <HAL_MPU_Enable>
  HAL_Init();
 80005b4:	f001 f8ce 	bl	8001754 <HAL_Init>
  SystemClock_Config();
 80005b8:	f7ff ff6c 	bl	8000494 <SystemClock_Config>
  PeriphCommonClock_Config();
 80005bc:	f7ff ffc6 	bl	800054c <PeriphCommonClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c4:	a909      	add	r1, sp, #36	@ 0x24
 80005c6:	486e      	ldr	r0, [pc, #440]	@ (8000780 <main+0x208>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4333      	orrs	r3, r6
 80005ca:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80005ce:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80005d2:	4033      	ands	r3, r6
 80005d4:	9304      	str	r3, [sp, #16]
 80005d6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80005e4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 80005e8:	9709      	str	r7, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	9305      	str	r3, [sp, #20]
 80005f0:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80005f2:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fa:	f003 fb53 	bl	8003ca4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);   // set high
 80005fe:	4632      	mov	r2, r6
 8000600:	4639      	mov	r1, r7
 8000602:	485f      	ldr	r0, [pc, #380]	@ (8000780 <main+0x208>)
 8000604:	f003 fd54 	bl	80040b0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000608:	a909      	add	r1, sp, #36	@ 0x24
 800060a:	485d      	ldr	r0, [pc, #372]	@ (8000780 <main+0x208>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin   = GPIO_PIN_13;
 800060e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000612:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000616:	f003 fb45 	bl	8003ca4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // set high
 800061a:	4632      	mov	r2, r6
 800061c:	4641      	mov	r1, r8
 800061e:	4858      	ldr	r0, [pc, #352]	@ (8000780 <main+0x208>)
 8000620:	f003 fd46 	bl	80040b0 <HAL_GPIO_WritePin>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000624:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000628:	4622      	mov	r2, r4
 800062a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800062c:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800062e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000630:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8000634:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc1.Instance = ADC1;
 8000638:	4d52      	ldr	r5, [pc, #328]	@ (8000784 <main+0x20c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063a:	4033      	ands	r3, r6
 800063c:	9303      	str	r3, [sp, #12]
 800063e:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000640:	f002 f812 	bl	8002668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000644:	200b      	movs	r0, #11
 8000646:	f002 f84b 	bl	80026e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800064a:	4622      	mov	r2, r4
 800064c:	4621      	mov	r1, r4
 800064e:	200c      	movs	r0, #12
 8000650:	f002 f80a 	bl	8002668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000654:	200c      	movs	r0, #12
 8000656:	f002 f843 	bl	80026e0 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800065a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800065e:	612f      	str	r7, [r5, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000660:	f44f 6c9c 	mov.w	ip, #1248	@ 0x4e0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000664:	4f48      	ldr	r7, [pc, #288]	@ (8000788 <main+0x210>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000666:	4628      	mov	r0, r5
  ADC_MultiModeTypeDef multimode = {0};
 8000668:	9406      	str	r4, [sp, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800066a:	940f      	str	r4, [sp, #60]	@ 0x3c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800066c:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 800066e:	61ae      	str	r6, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000670:	772c      	strb	r4, [r5, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 8000672:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000676:	63ee      	str	r6, [r5, #60]	@ 0x3c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000678:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800067c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000680:	e9c5 c309 	strd	ip, r3, [r5, #36]	@ 0x24
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000684:	2303      	movs	r3, #3
  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 800068a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800068e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  ADC_MultiModeTypeDef multimode = {0};
 8000692:	e9cd 4407 	strd	r4, r4, [sp, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000696:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800069a:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800069e:	62eb      	str	r3, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a0:	f001 fe06 	bl	80022b0 <HAL_ADC_Init>
 80006a4:	b108      	cbz	r0, 80006aa <main+0x132>
 80006a6:	b672      	cpsid	i
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <main+0x130>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006aa:	9006      	str	r0, [sp, #24]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ac:	a906      	add	r1, sp, #24
 80006ae:	4628      	mov	r0, r5
 80006b0:	f001 ff66 	bl	8002580 <HAL_ADCEx_MultiModeConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b108      	cbz	r0, 80006bc <main+0x144>
 80006b8:	b672      	cpsid	i
  while (1)
 80006ba:	e7fe      	b.n	80006ba <main+0x142>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006bc:	4c33      	ldr	r4, [pc, #204]	@ (800078c <main+0x214>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	4628      	mov	r0, r5
  sConfig.Offset = 0;
 80006c0:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006c2:	2505      	movs	r5, #5
  sConfig.OffsetSignedSaturation = DISABLE;
 80006c4:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c8:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	a909      	add	r1, sp, #36	@ 0x24
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006cc:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006d4:	e9cd 530b 	strd	r5, r3, [sp, #44]	@ 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d8:	2304      	movs	r3, #4
 80006da:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	f001 fa0c 	bl	8001af8 <HAL_ADC_ConfigChannel>
 80006e0:	b108      	cbz	r0, 80006e6 <main+0x16e>
 80006e2:	b672      	cpsid	i
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <main+0x16c>
  htim8.Instance = TIM8;
 80006e6:	4c2a      	ldr	r4, [pc, #168]	@ (8000790 <main+0x218>)
  htim8.Init.Prescaler = 50-1;
 80006e8:	2331      	movs	r3, #49	@ 0x31
 80006ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000794 <main+0x21c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	9008      	str	r0, [sp, #32]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ee:	60a0      	str	r0, [r4, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f0:	61a0      	str	r0, [r4, #24]
  htim8.Init.Prescaler = 50-1;
 80006f2:	e9c4 2300 	strd	r2, r3, [r4]
  htim8.Init.Period = 100-1;
 80006f6:	2363      	movs	r3, #99	@ 0x63
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f8:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80006fc:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	e9cd 0006 	strd	r0, r0, [sp, #24]
  htim8.Init.RepetitionCounter = 0;
 8000704:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000708:	4620      	mov	r0, r4
  htim8.Init.Period = 100-1;
 800070a:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800070c:	f005 fe2a 	bl	8006364 <HAL_TIM_Base_Init>
 8000710:	b108      	cbz	r0, 8000716 <main+0x19e>
 8000712:	b672      	cpsid	i
  while (1)
 8000714:	e7fe      	b.n	8000714 <main+0x19c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800071a:	a909      	add	r1, sp, #36	@ 0x24
 800071c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071e:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000720:	f005 ff14 	bl	800654c <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	b108      	cbz	r0, 800072c <main+0x1b4>
 8000728:	b672      	cpsid	i
  while (1)
 800072a:	e7fe      	b.n	800072a <main+0x1b2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000730:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000732:	a906      	add	r1, sp, #24
 8000734:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000736:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000738:	f005 ffd0 	bl	80066dc <HAL_TIMEx_MasterConfigSynchronization>
 800073c:	4601      	mov	r1, r0
 800073e:	b108      	cbz	r0, 8000744 <main+0x1cc>
 8000740:	b672      	cpsid	i
  while (1)
 8000742:	e7fe      	b.n	8000742 <main+0x1ca>
  DAC_ChannelConfTypeDef sConfig = {0};
 8000744:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 8000746:	4c14      	ldr	r4, [pc, #80]	@ (8000798 <main+0x220>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000748:	eb0d 0002 	add.w	r0, sp, r2
 800074c:	f007 fa4a 	bl	8007be4 <memset>
  hdac1.Instance = DAC1;
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <main+0x224>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000752:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8000754:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000756:	f002 f835 	bl	80027c4 <HAL_DAC_Init>
 800075a:	4602      	mov	r2, r0
 800075c:	b108      	cbz	r0, 8000762 <main+0x1ea>
 800075e:	b672      	cpsid	i
  while (1)
 8000760:	e7fe      	b.n	8000760 <main+0x1e8>
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000762:	231e      	movs	r3, #30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000764:	a909      	add	r1, sp, #36	@ 0x24
 8000766:	4620      	mov	r0, r4
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000768:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800076a:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800076e:	e9cd 260b 	strd	r2, r6, [sp, #44]	@ 0x2c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000772:	f002 f90b 	bl	800298c <HAL_DAC_ConfigChannel>
 8000776:	b198      	cbz	r0, 80007a0 <main+0x228>
 8000778:	b672      	cpsid	i
  while (1)
 800077a:	e7fe      	b.n	800077a <main+0x202>
 800077c:	58024400 	.word	0x58024400
 8000780:	58020800 	.word	0x58020800
 8000784:	24073420 	.word	0x24073420
 8000788:	40022000 	.word	0x40022000
 800078c:	43210000 	.word	0x43210000
 8000790:	240732d0 	.word	0x240732d0
 8000794:	40010400 	.word	0x40010400
 8000798:	24073394 	.word	0x24073394
 800079c:	40007400 	.word	0x40007400
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007a0:	4b66      	ldr	r3, [pc, #408]	@ (800093c <main+0x3c4>)
 80007a2:	695a      	ldr	r2, [r3, #20]
 80007a4:	f412 3280 	ands.w	r2, r2, #65536	@ 0x10000
 80007a8:	d123      	bne.n	80007f2 <main+0x27a>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80007ae:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80007b2:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007b6:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007ba:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007be:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 80007c2:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007c4:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007c8:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007ca:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
      } while (ways-- != 0U);
 80007ce:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007d0:	f8c3 6260 	str.w	r6, [r3, #608]	@ 0x260
      } while (ways-- != 0U);
 80007d4:	d2f9      	bcs.n	80007ca <main+0x252>
    } while(sets-- != 0U);
 80007d6:	3a20      	subs	r2, #32
 80007d8:	f112 0f20 	cmn.w	r2, #32
 80007dc:	d1f2      	bne.n	80007c4 <main+0x24c>
 80007de:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80007e2:	695a      	ldr	r2, [r3, #20]
 80007e4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007ee:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <main+0x3c4>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 80007fa:	d111      	bne.n	8000820 <main+0x2a8>
  __ASM volatile ("dsb 0xF":::"memory");
 80007fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000800:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000804:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800080c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000816:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000818:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800081c:	f3bf 8f6f 	isb	sy
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 8000820:	4846      	ldr	r0, [pc, #280]	@ (800093c <main+0x3c4>)
  DWT->CYCCNT  = 0;                                // clear counter
 8000822:	2400      	movs	r4, #0
 8000824:	4b46      	ldr	r3, [pc, #280]	@ (8000940 <main+0x3c8>)
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 8000826:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 800082a:	f8d0 20fc 	ldr.w	r2, [r0, #252]	@ 0xfc
 800082e:	4e45      	ldr	r6, [pc, #276]	@ (8000944 <main+0x3cc>)
 8000830:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000834:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800097c <main+0x404>
 8000838:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8000980 <main+0x408>
 800083c:	f5a6 4930 	sub.w	r9, r6, #45056	@ 0xb000
 8000840:	f8c0 20fc 	str.w	r2, [r0, #252]	@ 0xfc
		 apipe.updateDelayBuffer(&apipe);
 8000844:	f5a6 4770 	sub.w	r7, r6, #61440	@ 0xf000
  DWT->CYCCNT  = 0;                                // clear counter
 8000848:	605c      	str	r4, [r3, #4]
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 800084a:	681a      	ldr	r2, [r3, #0]
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 800084c:	483e      	ldr	r0, [pc, #248]	@ (8000948 <main+0x3d0>)
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 800084e:	f042 0201 	orr.w	r2, r2, #1
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000852:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8000984 <main+0x40c>
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 8000856:	601a      	str	r2, [r3, #0]
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 8000858:	f005 ffe8 	bl	800682c <arm_rfft_fast_init_f32>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800085c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000860:	4621      	mov	r1, r4
 8000862:	483a      	ldr	r0, [pc, #232]	@ (800094c <main+0x3d4>)
 8000864:	f001 fe30 	bl	80024c8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcInput, BUFFER_SIZE*2);
 8000868:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800086c:	4938      	ldr	r1, [pc, #224]	@ (8000950 <main+0x3d8>)
 800086e:	4837      	ldr	r0, [pc, #220]	@ (800094c <main+0x3d4>)
 8000870:	f001 fbaa 	bl	8001fc8 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 8000874:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000878:	4a36      	ldr	r2, [pc, #216]	@ (8000954 <main+0x3dc>)
 800087a:	4621      	mov	r1, r4
 800087c:	4836      	ldr	r0, [pc, #216]	@ (8000958 <main+0x3e0>)
 800087e:	9400      	str	r4, [sp, #0]
 8000880:	f001 ffb6 	bl	80027f0 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 8000884:	4835      	ldr	r0, [pc, #212]	@ (800095c <main+0x3e4>)
 8000886:	f005 fe13 	bl	80064b0 <HAL_TIM_Base_Start>
  pipeInit(&apipe);
 800088a:	4835      	ldr	r0, [pc, #212]	@ (8000960 <main+0x3e8>)
 800088c:	f000 fb7e 	bl	8000f8c <pipeInit>
  supro_init_f32(); //replace with fx_int();
 8000890:	f000 fe64 	bl	800155c <supro_init_f32>
  fir_emt_140_dark_3_f32_init(&fir_emt_140_dark_3, prev_ffts_EMT);
 8000894:	4933      	ldr	r1, [pc, #204]	@ (8000964 <main+0x3ec>)
 8000896:	4834      	ldr	r0, [pc, #208]	@ (8000968 <main+0x3f0>)
 8000898:	f7ff fd94 	bl	80003c4 <fir_emt_140_dark_3_f32_init>
  convolution_reverb_f32_init(&convolution_reverb, state5 , &fir_emt_140_dark_3);
 800089c:	4a32      	ldr	r2, [pc, #200]	@ (8000968 <main+0x3f0>)
 800089e:	4933      	ldr	r1, [pc, #204]	@ (800096c <main+0x3f4>)
 80008a0:	4833      	ldr	r0, [pc, #204]	@ (8000970 <main+0x3f8>)
 80008a2:	f7ff fd8b 	bl	80003bc <convolution_reverb_f32_init>
 80008a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000954 <main+0x3dc>)
	  if (apipe.bufferReady)
 80008a8:	7c32      	ldrb	r2, [r6, #16]
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d044      	beq.n	8000938 <main+0x3c0>
		 apipe.updateDelayBuffer(&apipe);
 80008ae:	69f2      	ldr	r2, [r6, #28]
 80008b0:	4638      	mov	r0, r7
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80008b2:	f003 041f 	and.w	r4, r3, #31
 80008b6:	4790      	blx	r2
		 apipe.loadProcess(&apipe);
 80008b8:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 80008ba:	4638      	mov	r0, r7
 80008bc:	4790      	blx	r2
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80008be:	2108      	movs	r1, #8
 80008c0:	4640      	mov	r0, r8
 80008c2:	2201      	movs	r2, #1
 80008c4:	f003 fbf4 	bl	80040b0 <HAL_GPIO_WritePin>
		 supro_sim.process(&apipe);
 80008c8:	f8db 200c 	ldr.w	r2, [fp, #12]
 80008cc:	4638      	mov	r0, r7
 80008ce:	4d21      	ldr	r5, [pc, #132]	@ (8000954 <main+0x3dc>)
 80008d0:	4790      	blx	r2
		 cabinet_sim.process(&apipe);
 80008d2:	f8da 2004 	ldr.w	r2, [sl, #4]
 80008d6:	4638      	mov	r0, r7
 80008d8:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 80008dc:	4790      	blx	r2
		 convolution_reverb_f32_process(&convolution_reverb, &apipe);
 80008de:	4639      	mov	r1, r7
 80008e0:	4823      	ldr	r0, [pc, #140]	@ (8000970 <main+0x3f8>)
 80008e2:	f7ff fd63 	bl	80003ac <convolution_reverb_f32_process>
			arm_scale_f32(apipe.processBuffer, 0.01,apipe.processBuffer, BUFFER_SIZE);
 80008e6:	4923      	ldr	r1, [pc, #140]	@ (8000974 <main+0x3fc>)
 80008e8:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8000978 <main+0x400>
 80008ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008f0:	4608      	mov	r0, r1
 80008f2:	f006 fd9f 	bl	8007434 <arm_scale_f32>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80008f6:	4640      	mov	r0, r8
 80008f8:	2200      	movs	r2, #0
 80008fa:	2108      	movs	r1, #8
 80008fc:	f003 fbd8 	bl	80040b0 <HAL_GPIO_WritePin>
		 arm_copy_f32(apipe.processBuffer, apipe.outBuffer, BUFFER_SIZE);
 8000900:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8000904:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000908:	481a      	ldr	r0, [pc, #104]	@ (8000974 <main+0x3fc>)
 800090a:	f005 ff5f 	bl	80067cc <arm_copy_f32>
		 apipe.updateDACOutput(&apipe, dacOutput);
 800090e:	6a32      	ldr	r2, [r6, #32]
 8000910:	4629      	mov	r1, r5
 8000912:	4638      	mov	r0, r7
 8000914:	4790      	blx	r2
  __ASM volatile ("dsb 0xF":::"memory");
 8000916:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800091a:	4a08      	ldr	r2, [pc, #32]	@ (800093c <main+0x3c4>)
 800091c:	462b      	mov	r3, r5
 800091e:	3c20      	subs	r4, #32
 8000920:	f8c2 5268 	str.w	r5, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000924:	3520      	adds	r5, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8000926:	2c00      	cmp	r4, #0
 8000928:	dcf9      	bgt.n	800091e <main+0x3a6>
 800092a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800092e:	f3bf 8f6f 	isb	sy
		 apipe.bufferReady = false;
 8000932:	2200      	movs	r2, #0
 8000934:	7432      	strb	r2, [r6, #16]
 8000936:	e7b7      	b.n	80008a8 <main+0x330>
	      __WFI();
 8000938:	bf30      	wfi
 800093a:	e7b5      	b.n	80008a8 <main+0x330>
 800093c:	e000ed00 	.word	0xe000ed00
 8000940:	e0001000 	.word	0xe0001000
 8000944:	240732a4 	.word	0x240732a4
 8000948:	2406428c 	.word	0x2406428c
 800094c:	24073420 	.word	0x24073420
 8000950:	2406328c 	.word	0x2406328c
 8000954:	2406228c 	.word	0x2406228c
 8000958:	24073394 	.word	0x24073394
 800095c:	240732d0 	.word	0x240732d0
 8000960:	240642a4 	.word	0x240642a4
 8000964:	2400611c 	.word	0x2400611c
 8000968:	24006108 	.word	0x24006108
 800096c:	20001000 	.word	0x20001000
 8000970:	24006100 	.word	0x24006100
 8000974:	240682ac 	.word	0x240682ac
 8000978:	3c23d70a 	.word	0x3c23d70a
 800097c:	2400005c 	.word	0x2400005c
 8000980:	2400001c 	.word	0x2400001c
 8000984:	58020800 	.word	0x58020800

08000988 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
  while (1)
 800098a:	e7fe      	b.n	800098a <Error_Handler+0x2>

0800098c <partitioned_fir_convolution_fft>:
__attribute__((section(".dtcm"), aligned(32))) float zeropad[FFT_SIZE];
float fftOut[FFT_SIZE];


void partitioned_fir_convolution_fft(pipe *pipe, fir_t *fir, float* overlap_state_buf )
{
 800098c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	float *zeropaddedinput = zeropad;
	float *overlap         = overlap_state_buf;

    // prepare input
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 8000990:	f244 0408 	movw	r4, #16392	@ 0x4008
{
 8000994:	b08b      	sub	sp, #44	@ 0x2c
 8000996:	4613      	mov	r3, r2
 8000998:	460d      	mov	r5, r1
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 800099a:	4404      	add	r4, r0
 800099c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a0:	4933      	ldr	r1, [pc, #204]	@ (8000a70 <partitioned_fir_convolution_fft+0xe4>)
 80009a2:	4620      	mov	r0, r4
{
 80009a4:	9307      	str	r3, [sp, #28]
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 80009a6:	f005 ff11 	bl	80067cc <arm_copy_f32>
    arm_fill_f32(0.0f, &zeropaddedinput[BUFFER_SIZE], BUFFER_SIZE);
 80009aa:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8000a74 <partitioned_fir_convolution_fft+0xe8>
 80009ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009b2:	4831      	ldr	r0, [pc, #196]	@ (8000a78 <partitioned_fir_convolution_fft+0xec>)
 80009b4:	f005 feec 	bl	8006790 <arm_fill_f32>

    // forward FFT
    arm_rfft_fast_f32(&fft, zeropaddedinput, fftOut, 0);
 80009b8:	2300      	movs	r3, #0
 80009ba:	4a30      	ldr	r2, [pc, #192]	@ (8000a7c <partitioned_fir_convolution_fft+0xf0>)
 80009bc:	492c      	ldr	r1, [pc, #176]	@ (8000a70 <partitioned_fir_convolution_fft+0xe4>)
 80009be:	4830      	ldr	r0, [pc, #192]	@ (8000a80 <partitioned_fir_convolution_fft+0xf4>)
 80009c0:	f005 ffe6 	bl	8006990 <arm_rfft_fast_f32>

    // save index and spectrum
    fir->prev_fftidx = fir->curr_fftidx;
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 80009c4:	482d      	ldr	r0, [pc, #180]	@ (8000a7c <partitioned_fir_convolution_fft+0xf0>)
 80009c6:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80009ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80009ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    fir->prev_fftidx = fir->curr_fftidx;
 80009d2:	60eb      	str	r3, [r5, #12]
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 80009d4:	f005 fefa 	bl	80067cc <arm_copy_f32>

    arm_fill_f32(0.0f, fftOut, FFT_SIZE);              /* clear accumulator */
 80009d8:	4828      	ldr	r0, [pc, #160]	@ (8000a7c <partitioned_fir_convolution_fft+0xf0>)
 80009da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009de:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8000a74 <partitioned_fir_convolution_fft+0xe8>
 80009e2:	f005 fed5 	bl	8006790 <arm_fill_f32>

    const uint32_t segs = fir->numSegments;
 80009e6:	692b      	ldr	r3, [r5, #16]
 80009e8:	f8df e090 	ldr.w	lr, [pc, #144]	@ 8000a7c <partitioned_fir_convolution_fft+0xf0>
    uint32_t i = 0;
 80009ec:	f04f 0c00 	mov.w	ip, #0
    const uint32_t segs = fir->numSegments;
 80009f0:	9303      	str	r3, [sp, #12]
    uint32_t idx = fir->prev_fftidx;

    // partitioned convolution with pointer arithmetic
    do {
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 80009f2:	686b      	ldr	r3, [r5, #4]
 80009f4:	f50e 50ff 	add.w	r0, lr, #8160	@ 0x1fe0
		}
		if (idx-- == 0) {
			idx = segs - 1;
		}

    } while (idx != fir->curr_fftidx);
 80009f8:	68aa      	ldr	r2, [r5, #8]
 80009fa:	f50e 5700 	add.w	r7, lr, #8192	@ 0x2000
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 80009fe:	9305      	str	r3, [sp, #20]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8000a00:	682b      	ldr	r3, [r5, #0]
    } while (idx != fir->curr_fftidx);
 8000a02:	9204      	str	r2, [sp, #16]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8000a04:	9306      	str	r3, [sp, #24]
 8000a06:	f50e 5380 	add.w	r3, lr, #4096	@ 0x1000
    uint32_t idx = fir->prev_fftidx;
 8000a0a:	68ee      	ldr	r6, [r5, #12]
                     float accR = __builtin_fmaf(xr, hr,
 8000a0c:	f603 72f8 	addw	r2, r3, #4088	@ 0xff8
 8000a10:	f603 7be8 	addw	fp, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8000a14:	f603 7aec 	addw	sl, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 8000a18:	f503 697f 	add.w	r9, r3, #4080	@ 0xff0
                     float accI = __builtin_fmaf(xr, hi,
 8000a1c:	f603 78f4 	addw	r8, r3, #4084	@ 0xff4
 8000a20:	f603 73fc 	addw	r3, r3, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 8000a24:	9201      	str	r2, [sp, #4]
                     float accI = __builtin_fmaf(xr, hi,
 8000a26:	9302      	str	r3, [sp, #8]
 8000a28:	e9cd 4508 	strd	r4, r5, [sp, #32]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8000a2c:	9b05      	ldr	r3, [sp, #20]
                 yPtr[0] += xPtr[0] * hPtr[0];
 8000a2e:	ed9e 7a00 	vldr	s14, [lr]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8000a32:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8000a36:	9b06      	ldr	r3, [sp, #24]
                 yPtr[1] += xPtr[1] * hPtr[1];
 8000a38:	edde 7a01 	vldr	s15, [lr, #4]
 8000a3c:	f105 0158 	add.w	r1, r5, #88	@ 0x58
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 8000a40:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
                 yPtr[0] += xPtr[0] * hPtr[0];
 8000a44:	ed95 5a00 	vldr	s10, [r5]
 8000a48:	edd4 5a00 	vldr	s11, [r4]
 8000a4c:	f104 0258 	add.w	r2, r4, #88	@ 0x58
                 yPtr[1] += xPtr[1] * hPtr[1];
 8000a50:	ed95 6a01 	vldr	s12, [r5, #4]
 8000a54:	edd4 6a01 	vldr	s13, [r4, #4]
                 yPtr[0] += xPtr[0] * hPtr[0];
 8000a58:	eea5 7a25 	vfma.f32	s14, s10, s11
                 yPtr[1] += xPtr[1] * hPtr[1];
 8000a5c:	eee6 7a26 	vfma.f32	s15, s12, s13
                 yPtr[0] += xPtr[0] * hPtr[0];
 8000a60:	ed8e 7a00 	vstr	s14, [lr]
                 yPtr[1] += xPtr[1] * hPtr[1];
 8000a64:	edce 7a01 	vstr	s15, [lr, #4]
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8000a68:	f8df e010 	ldr.w	lr, [pc, #16]	@ 8000a7c <partitioned_fir_convolution_fft+0xf0>
 8000a6c:	4673      	mov	r3, lr
 8000a6e:	e009      	b.n	8000a84 <partitioned_fir_convolution_fft+0xf8>
 8000a70:	20002000 	.word	0x20002000
 8000a74:	00000000 	.word	0x00000000
 8000a78:	20003000 	.word	0x20003000
 8000a7c:	24073484 	.word	0x24073484
 8000a80:	2406428c 	.word	0x2406428c
                         float xr = *xPtr++; float xi = *xPtr++;
 8000a84:	ed51 7a13 	vldr	s15, [r1, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8000a88:	3350      	adds	r3, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 8000a8a:	ed52 2a14 	vldr	s5, [r2, #-80]	@ 0xffffffb0
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8000a8e:	3150      	adds	r1, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 8000a90:	ed52 3a13 	vldr	s7, [r2, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8000a94:	3250      	adds	r2, #80	@ 0x50
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a96:	ed13 4a12 	vldr	s8, [r3, #-72]	@ 0xffffffb8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000a9a:	ed53 4a11 	vldr	s9, [r3, #-68]	@ 0xffffffbc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000a9e:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float xr = *xPtr++; float xi = *xPtr++;
 8000aa2:	ed11 3a28 	vldr	s6, [r1, #-160]	@ 0xffffff60
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000aa6:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000aaa:	ed13 5a10 	vldr	s10, [r3, #-64]	@ 0xffffffc0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000aae:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ab2:	ed53 6a0e 	vldr	s13, [r3, #-56]	@ 0xffffffc8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000ab6:	ed13 6a0d 	vldr	s12, [r3, #-52]	@ 0xffffffcc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000aba:	ed13 7a0c 	vldr	s14, [r3, #-48]	@ 0xffffffd0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000abe:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000ac2:	ed53 7a0b 	vldr	s15, [r3, #-44]	@ 0xffffffd4
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000ac6:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 8000aca:	ed03 4a12 	vstr	s8, [r3, #-72]	@ 0xffffffb8
                         *(yPtr+1) = accI;
 8000ace:	ed43 4a11 	vstr	s9, [r3, #-68]	@ 0xffffffbc
                         float hr = *hPtr++; float hi = *hPtr++;
 8000ad2:	ed52 3a26 	vldr	s7, [r2, #-152]	@ 0xffffff68
 8000ad6:	ed52 4a25 	vldr	s9, [r2, #-148]	@ 0xffffff6c
                         float xr = *xPtr++; float xi = *xPtr++;
 8000ada:	ed11 3a25 	vldr	s6, [r1, #-148]	@ 0xffffff6c
 8000ade:	ed11 4a26 	vldr	s8, [r1, #-152]	@ 0xffffff68
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ae2:	eea3 5a64 	vfms.f32	s10, s6, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000ae6:	eee3 5a23 	vfma.f32	s11, s6, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000aea:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000aee:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *yPtr     = accR;
 8000af2:	ed03 5a10 	vstr	s10, [r3, #-64]	@ 0xffffffc0
                         *(yPtr+1) = accI;
 8000af6:	ed43 5a0f 	vstr	s11, [r3, #-60]	@ 0xffffffc4
                         float xr = *xPtr++; float xi = *xPtr++;
 8000afa:	ed11 4a23 	vldr	s8, [r1, #-140]	@ 0xffffff74
                         float hr = *hPtr++; float hi = *hPtr++;
 8000afe:	ed52 5a24 	vldr	s11, [r2, #-144]	@ 0xffffff70
 8000b02:	ed52 4a23 	vldr	s9, [r2, #-140]	@ 0xffffff74
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b06:	eea4 6a25 	vfma.f32	s12, s8, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b0a:	ed11 5a24 	vldr	s10, [r1, #-144]	@ 0xffffff70
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b0e:	eee4 6a64 	vfms.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b12:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b16:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *(yPtr+1) = accI;
 8000b1a:	ed03 6a0d 	vstr	s12, [r3, #-52]	@ 0xffffffcc
                         *yPtr     = accR;
 8000b1e:	ed43 6a0e 	vstr	s13, [r3, #-56]	@ 0xffffffc8
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b22:	ed11 5a21 	vldr	s10, [r1, #-132]	@ 0xffffff7c
                         float hr = *hPtr++; float hi = *hPtr++;
 8000b26:	ed52 5a22 	vldr	s11, [r2, #-136]	@ 0xffffff78
 8000b2a:	ed52 6a21 	vldr	s13, [r2, #-132]	@ 0xffffff7c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b2e:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b32:	ed11 6a22 	vldr	s12, [r1, #-136]	@ 0xffffff78
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b36:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b3a:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b3e:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8000b42:	ed43 7a0b 	vstr	s15, [r3, #-44]	@ 0xffffffd4
                         *yPtr     = accR;
 8000b46:	ed03 7a0c 	vstr	s14, [r3, #-48]	@ 0xffffffd0
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b4a:	ed11 3a20 	vldr	s6, [r1, #-128]	@ 0xffffff80
 8000b4e:	ed51 7a1f 	vldr	s15, [r1, #-124]	@ 0xffffff84
                         float hr = *hPtr++; float hi = *hPtr++;
 8000b52:	ed52 3a1f 	vldr	s7, [r2, #-124]	@ 0xffffff84
 8000b56:	ed52 2a20 	vldr	s5, [r2, #-128]	@ 0xffffff80
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b5a:	ed13 4a0a 	vldr	s8, [r3, #-40]	@ 0xffffffd8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b5e:	ed53 4a09 	vldr	s9, [r3, #-36]	@ 0xffffffdc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b62:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b66:	ed53 5a08 	vldr	s11, [r3, #-32]	@ 0xffffffe0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b6a:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b6e:	ed13 5a07 	vldr	s10, [r3, #-28]	@ 0xffffffe4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b72:	ed13 6a06 	vldr	s12, [r3, #-24]	@ 0xffffffe8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b76:	ed53 6a05 	vldr	s13, [r3, #-20]	@ 0xffffffec
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b7a:	ed53 7a04 	vldr	s15, [r3, #-16]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b7e:	ed13 7a03 	vldr	s14, [r3, #-12]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000b82:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b86:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 8000b8a:	ed03 4a0a 	vstr	s8, [r3, #-40]	@ 0xffffffd8
                         *(yPtr+1) = accI;
 8000b8e:	ed43 4a09 	vstr	s9, [r3, #-36]	@ 0xffffffdc
                         float hr = *hPtr++; float hi = *hPtr++;
 8000b92:	ed52 4a1e 	vldr	s9, [r2, #-120]	@ 0xffffff88
                         float xr = *xPtr++; float xi = *xPtr++;
 8000b96:	ed11 3a1d 	vldr	s6, [r1, #-116]	@ 0xffffff8c
                         float hr = *hPtr++; float hi = *hPtr++;
 8000b9a:	ed52 3a1d 	vldr	s7, [r2, #-116]	@ 0xffffff8c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000b9e:	eea3 5a24 	vfma.f32	s10, s6, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 8000ba2:	ed11 4a1e 	vldr	s8, [r1, #-120]	@ 0xffffff88
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000ba6:	eee3 5a63 	vfms.f32	s11, s6, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000baa:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000bae:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *(yPtr+1) = accI;
 8000bb2:	ed03 5a07 	vstr	s10, [r3, #-28]	@ 0xffffffe4
                         *yPtr     = accR;
 8000bb6:	ed43 5a08 	vstr	s11, [r3, #-32]	@ 0xffffffe0
                         float xr = *xPtr++; float xi = *xPtr++;
 8000bba:	ed11 4a1b 	vldr	s8, [r1, #-108]	@ 0xffffff94
                         float hr = *hPtr++; float hi = *hPtr++;
 8000bbe:	ed52 4a1c 	vldr	s9, [r2, #-112]	@ 0xffffff90
 8000bc2:	ed52 5a1b 	vldr	s11, [r2, #-108]	@ 0xffffff94
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000bc6:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 8000bca:	ed11 5a1c 	vldr	s10, [r1, #-112]	@ 0xffffff90
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000bce:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000bd2:	eee5 6a25 	vfma.f32	s13, s10, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000bd6:	eea5 6a24 	vfma.f32	s12, s10, s9
                         *(yPtr+1) = accI;
 8000bda:	ed43 6a05 	vstr	s13, [r3, #-20]	@ 0xffffffec
                         *yPtr     = accR;
 8000bde:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
                         float hr = *hPtr++; float hi = *hPtr++;
 8000be2:	ed52 6a1a 	vldr	s13, [r2, #-104]	@ 0xffffff98
 8000be6:	ed52 5a19 	vldr	s11, [r2, #-100]	@ 0xffffff9c
                         float xr = *xPtr++; float xi = *xPtr++;
 8000bea:	ed11 5a19 	vldr	s10, [r1, #-100]	@ 0xffffff9c
 8000bee:	ed11 6a1a 	vldr	s12, [r1, #-104]	@ 0xffffff98
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000bf2:	eea5 7a26 	vfma.f32	s14, s10, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000bf6:	eee5 7a65 	vfms.f32	s15, s10, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000bfa:	eea6 7a25 	vfma.f32	s14, s12, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000bfe:	eee6 7a26 	vfma.f32	s15, s12, s13
                         *(yPtr+1) = accI;
 8000c02:	ed03 7a03 	vstr	s14, [r3, #-12]
                         *yPtr     = accR;
 8000c06:	ed43 7a04 	vstr	s15, [r3, #-16]
                         float xr = *xPtr++; float xi = *xPtr++;
 8000c0a:	ed11 5a18 	vldr	s10, [r1, #-96]	@ 0xffffffa0
                         float hr = *hPtr++; float hi = *hPtr++;
 8000c0e:	ed52 5a17 	vldr	s11, [r2, #-92]	@ 0xffffffa4
                         float xr = *xPtr++; float xi = *xPtr++;
 8000c12:	ed11 4a17 	vldr	s8, [r1, #-92]	@ 0xffffffa4
                         float hr = *hPtr++; float hi = *hPtr++;
 8000c16:	ed52 4a18 	vldr	s9, [r2, #-96]	@ 0xffffffa0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000c1a:	ed13 6a02 	vldr	s12, [r3, #-8]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000c1e:	ed53 6a01 	vldr	s13, [r3, #-4]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000c22:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000c26:	ed93 7a00 	vldr	s14, [r3]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000c2a:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000c2e:	edd3 7a01 	vldr	s15, [r3, #4]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000c32:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000c36:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *yPtr     = accR;
 8000c3a:	ed03 6a02 	vstr	s12, [r3, #-8]
                         *(yPtr+1) = accI;
 8000c3e:	ed43 6a01 	vstr	s13, [r3, #-4]
                         float xr = *xPtr++; float xi = *xPtr++;
 8000c42:	ed11 5a15 	vldr	s10, [r1, #-84]	@ 0xffffffac
                         float hr = *hPtr++; float hi = *hPtr++;
 8000c46:	ed52 5a16 	vldr	s11, [r2, #-88]	@ 0xffffffa8
 8000c4a:	ed52 6a15 	vldr	s13, [r2, #-84]	@ 0xffffffac
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000c4e:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8000c52:	ed11 6a16 	vldr	s12, [r1, #-88]	@ 0xffffffa8
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000c56:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8000c5a:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8000c5e:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8000c62:	edc3 7a01 	vstr	s15, [r3, #4]
                         *yPtr     = accR;
 8000c66:	ed83 7a00 	vstr	s14, [r3]
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8000c6a:	4283      	cmp	r3, r0
 8000c6c:	f47f af0a 	bne.w	8000a84 <partitioned_fir_convolution_fft+0xf8>
                     float accR = __builtin_fmaf(xr, hr,
 8000c70:	9b01      	ldr	r3, [sp, #4]
		if (++i >= segs) {
 8000c72:	f10c 0c01 	add.w	ip, ip, #1
                     float accI = __builtin_fmaf(xr, hi,
 8000c76:	9a02      	ldr	r2, [sp, #8]
                     float accR = __builtin_fmaf(xr, hr,
 8000c78:	ed93 7a00 	vldr	s14, [r3]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c7c:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
                     float accI = __builtin_fmaf(xr, hi,
 8000c80:	edd2 7a00 	vldr	s15, [r2]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c84:	f505 5500 	add.w	r5, r5, #8192	@ 0x2000
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c88:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8000c8c:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
                     float accR = __builtin_fmaf(xr, hr,
 8000c90:	ed97 5a00 	vldr	s10, [r7]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000c94:	ed95 2a01 	vldr	s4, [r5, #4]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000c98:	edd4 2a01 	vldr	s5, [r4, #4]
			i = 0;
 8000c9c:	9903      	ldr	r1, [sp, #12]
                     float accR = __builtin_fmaf(xr, hr,
 8000c9e:	eea2 5a62 	vfms.f32	s10, s4, s5
                     float accI = __builtin_fmaf(xr, hi,
 8000ca2:	edd7 5a01 	vldr	s11, [r7, #4]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000ca6:	ed95 3a00 	vldr	s6, [r5]
			i = 0;
 8000caa:	4561      	cmp	r1, ip
 8000cac:	bf98      	it	ls
 8000cae:	f04f 0c00 	movls.w	ip, #0
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000cb2:	edd4 3a00 	vldr	s7, [r4]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000cb6:	f603 71ec 	addw	r1, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 8000cba:	ed9b 4a00 	vldr	s8, [fp]
                     float accI = __builtin_fmaf(xr, hi,
 8000cbe:	eee2 5a23 	vfma.f32	s11, s4, s7
 8000cc2:	edda 4a00 	vldr	s9, [sl]
                     float accR = __builtin_fmaf(xr, hr,
 8000cc6:	ed99 6a00 	vldr	s12, [r9]
 8000cca:	eea3 5a23 	vfma.f32	s10, s6, s7
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000cce:	edd1 3a00 	vldr	s7, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000cd2:	f602 71e8 	addw	r1, r2, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8000cd6:	edd8 6a00 	vldr	s13, [r8]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000cda:	edd1 0a00 	vldr	s1, [r1]
 8000cde:	f602 71ec 	addw	r1, r2, #4076	@ 0xfec
                     float accI = __builtin_fmaf(xr, hi,
 8000ce2:	eee3 5a22 	vfma.f32	s11, s6, s5
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000ce6:	edd1 1a00 	vldr	s3, [r1]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000cea:	f603 71f4 	addw	r1, r3, #4084	@ 0xff4
                     float accI = __builtin_fmaf(xr, hi,
 8000cee:	eee3 4aa0 	vfma.f32	s9, s7, s1
                     float accR = __builtin_fmaf(xr, hr,
 8000cf2:	eea3 4ae1 	vfms.f32	s8, s7, s3
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000cf6:	edd1 3a00 	vldr	s7, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000cfa:	f502 617f 	add.w	r1, r2, #4080	@ 0xff0
 8000cfe:	ed91 2a00 	vldr	s4, [r1]
 8000d02:	f602 71f4 	addw	r1, r2, #4084	@ 0xff4
 8000d06:	edd1 2a00 	vldr	s5, [r1]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000d0a:	f603 71fc 	addw	r1, r3, #4092	@ 0xffc
                     float accI = __builtin_fmaf(xr, hi,
 8000d0e:	eee3 6a82 	vfma.f32	s13, s7, s4
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000d12:	ed91 1a00 	vldr	s2, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000d16:	f602 71f8 	addw	r1, r2, #4088	@ 0xff8
 8000d1a:	f602 72fc 	addw	r2, r2, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 8000d1e:	eea3 6ae2 	vfms.f32	s12, s7, s5
                     float hr = *hPtr++;  float hi = *hPtr++;
 8000d22:	ed91 3a00 	vldr	s6, [r1]
 8000d26:	edd2 3a00 	vldr	s7, [r2]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000d2a:	f603 72e8 	addw	r2, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8000d2e:	eee1 7a03 	vfma.f32	s15, s2, s6
                     float accR = __builtin_fmaf(xr, hr,
 8000d32:	eea1 7a63 	vfms.f32	s14, s2, s7
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000d36:	ed92 1a00 	vldr	s2, [r2]
 8000d3a:	f503 627f 	add.w	r2, r3, #4080	@ 0xff0
 8000d3e:	f603 73f8 	addw	r3, r3, #4088	@ 0xff8
                     float accR = __builtin_fmaf(xr, hr,
 8000d42:	eea1 4a20 	vfma.f32	s8, s2, s1
                     float accI = __builtin_fmaf(xr, hi,
 8000d46:	eee1 4a21 	vfma.f32	s9, s2, s3
                     *yPtr     = accR;
 8000d4a:	ed8b 4a00 	vstr	s8, [fp]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000d4e:	ed92 4a00 	vldr	s8, [r2]
                     *(yPtr+1) = accI;
 8000d52:	edca 4a00 	vstr	s9, [sl]
                     float accR = __builtin_fmaf(xr, hr,
 8000d56:	eea4 6a02 	vfma.f32	s12, s8, s4
                     float xr = *xPtr++;  float xi = *xPtr++;
 8000d5a:	edd3 4a00 	vldr	s9, [r3]
                     float accI = __builtin_fmaf(xr, hi,
 8000d5e:	eee4 6a22 	vfma.f32	s13, s8, s5
                     *yPtr     = accR;
 8000d62:	ed87 5a00 	vstr	s10, [r7]
                     float accR = __builtin_fmaf(xr, hr,
 8000d66:	eea4 7a83 	vfma.f32	s14, s9, s6
                     *(yPtr+1) = accI;
 8000d6a:	edc7 5a01 	vstr	s11, [r7, #4]
                     float accI = __builtin_fmaf(xr, hi,
 8000d6e:	eee4 7aa3 	vfma.f32	s15, s9, s7
                     *yPtr     = accR;
 8000d72:	ed89 6a00 	vstr	s12, [r9]
                     *(yPtr+1) = accI;
 8000d76:	edc8 6a00 	vstr	s13, [r8]
                     *yPtr     = accR;
 8000d7a:	9b01      	ldr	r3, [sp, #4]
                     *(yPtr+1) = accI;
 8000d7c:	9a02      	ldr	r2, [sp, #8]
                     *yPtr     = accR;
 8000d7e:	ed83 7a00 	vstr	s14, [r3]
                     *(yPtr+1) = accI;
 8000d82:	edc2 7a00 	vstr	s15, [r2]
		if (idx-- == 0) {
 8000d86:	b34e      	cbz	r6, 8000ddc <partitioned_fir_convolution_fft+0x450>
 8000d88:	3e01      	subs	r6, #1
    } while (idx != fir->curr_fftidx);
 8000d8a:	9b04      	ldr	r3, [sp, #16]
 8000d8c:	42b3      	cmp	r3, r6
 8000d8e:	f47f ae4d 	bne.w	8000a2c <partitioned_fir_convolution_fft+0xa0>

    // advance write index
    if (++fir->curr_fftidx >= segs) {
 8000d92:	461a      	mov	r2, r3
        fir->curr_fftidx = 0;
 8000d94:	9b03      	ldr	r3, [sp, #12]
    }

    // inverse FFT
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8000d96:	4913      	ldr	r1, [pc, #76]	@ (8000de4 <partitioned_fir_convolution_fft+0x458>)
    if (++fir->curr_fftidx >= segs) {
 8000d98:	3201      	adds	r2, #1
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8000d9a:	4813      	ldr	r0, [pc, #76]	@ (8000de8 <partitioned_fir_convolution_fft+0x45c>)
    if (++fir->curr_fftidx >= segs) {
 8000d9c:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
        fir->curr_fftidx = 0;
 8000da0:	429a      	cmp	r2, r3
 8000da2:	bf28      	it	cs
 8000da4:	2200      	movcs	r2, #0
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8000da6:	2301      	movs	r3, #1
 8000da8:	60aa      	str	r2, [r5, #8]
 8000daa:	4a10      	ldr	r2, [pc, #64]	@ (8000dec <partitioned_fir_convolution_fft+0x460>)
 8000dac:	f005 fdf0 	bl	8006990 <arm_rfft_fast_f32>

    // overlap-add and scaling
    const float32_t invN = 1.0f;// / (float32_t)segs;
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8000db0:	4a0e      	ldr	r2, [pc, #56]	@ (8000dec <partitioned_fir_convolution_fft+0x460>)
 8000db2:	9b07      	ldr	r3, [sp, #28]
 8000db4:	f502 5180 	add.w	r1, r2, #4096	@ 0x1000
 8000db8:	460d      	mov	r5, r1
        float32_t s = zeropaddedinput[k]            * invN;
 8000dba:	ecf2 7a01 	vldmia	r2!, {s15}
        float32_t o = overlap[k]                    * invN;
 8000dbe:	ed93 7a00 	vldr	s14, [r3]
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8000dc2:	4295      	cmp	r5, r2
        pipe->processBuffer[k] = s + o;
 8000dc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dc8:	ece4 7a01 	vstmia	r4!, {s15}
        overlap[k]             = zeropaddedinput[BUFFER_SIZE + k];
 8000dcc:	f851 0b04 	ldr.w	r0, [r1], #4
 8000dd0:	f843 0b04 	str.w	r0, [r3], #4
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8000dd4:	d1f1      	bne.n	8000dba <partitioned_fir_convolution_fft+0x42e>
    }

}
 8000dd6:	b00b      	add	sp, #44	@ 0x2c
 8000dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			idx = segs - 1;
 8000ddc:	9b03      	ldr	r3, [sp, #12]
 8000dde:	1e5e      	subs	r6, r3, #1
 8000de0:	e7d3      	b.n	8000d8a <partitioned_fir_convolution_fft+0x3fe>
 8000de2:	bf00      	nop
 8000de4:	24073484 	.word	0x24073484
 8000de8:	2406428c 	.word	0x2406428c
 8000dec:	20002000 	.word	0x20002000

08000df0 <pipe_getDelayBuffer>:

float32_t *pipe_getDelayBuffer(pipe *self, uint16_t n)
{
    uint32_t offset = n * BUFFER_SIZE;

    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8000df0:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
 8000df4:	4a09      	ldr	r2, [pc, #36]	@ (8000e1c <pipe_getDelayBuffer+0x2c>)

    return &self->delayBuffer[index];
 8000df6:	f241 4c02 	movw	ip, #5122	@ 0x1402
    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000e00:	eba3 2181 	sub.w	r1, r3, r1, lsl #10
 8000e04:	fba2 2301 	umull	r2, r3, r2, r1
 8000e08:	0b5b      	lsrs	r3, r3, #13
 8000e0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e0e:	eba1 21c3 	sub.w	r1, r1, r3, lsl #11
    return &self->delayBuffer[index];
 8000e12:	448c      	add	ip, r1
}
 8000e14:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	cccccccd 	.word	0xcccccccd

08000e20 <pipe_loadProcess>:
    }
}

static void pipe_loadProcess(pipe *self)
{
	arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8000e20:	f244 0108 	movw	r1, #16392	@ 0x4008
 8000e24:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 8000e28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e2c:	4401      	add	r1, r0
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	f005 bccc 	b.w	80067cc <arm_copy_f32>

08000e34 <pipe_updateDelayBuffer>:
{
 8000e34:	b510      	push	{r4, lr}
    arm_copy_f32(self->inBuffer, &self->delayBuffer[self->delayIndex], BUFFER_SIZE);
 8000e36:	f500 4470 	add.w	r4, r0, #61440	@ 0xf000
 8000e3a:	f241 4102 	movw	r1, #5122	@ 0x1402
 8000e3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e42:	68e3      	ldr	r3, [r4, #12]
 8000e44:	4419      	add	r1, r3
 8000e46:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 8000e4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000e4e:	6818      	ldr	r0, [r3, #0]
 8000e50:	f005 fcbc 	bl	80067cc <arm_copy_f32>
    self->delayIndex += BUFFER_SIZE;
 8000e54:	68e3      	ldr	r3, [r4, #12]
 8000e56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
        self->delayIndex = 0;
 8000e5a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8000e5e:	bf28      	it	cs
 8000e60:	2300      	movcs	r3, #0
 8000e62:	60e3      	str	r3, [r4, #12]
}
 8000e64:	bd10      	pop	{r4, pc}
 8000e66:	bf00      	nop

08000e68 <pipe_updateDACOutput>:
{
 8000e68:	b570      	push	{r4, r5, r6, lr}
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8000e6a:	f500 4580 	add.w	r5, r0, #16384	@ 0x4000
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000e6e:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
{
 8000e72:	460c      	mov	r4, r1
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8000e74:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000e78:	6869      	ldr	r1, [r5, #4]
 8000e7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000e7e:	7a1e      	ldrb	r6, [r3, #8]
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8000e80:	4608      	mov	r0, r1
 8000e82:	f006 fb0d 	bl	80074a0 <arm_offset_f32>
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8000e86:	6869      	ldr	r1, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000e88:	fab6 f686 	clz	r6, r6
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8000e8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e90:	4608      	mov	r0, r1
 8000e92:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000ec0 <pipe_updateDACOutput+0x58>
 8000e96:	f006 facd 	bl	8007434 <arm_scale_f32>
 8000e9a:	686a      	ldr	r2, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000e9c:	0976      	lsrs	r6, r6, #5
    for (i = 0; i < BUFFER_SIZE; i++)
 8000e9e:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8000ea2:	eb04 21c6 	add.w	r1, r4, r6, lsl #11
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8000ea6:	ecf2 7a01 	vldmia	r2!, {s15}
 8000eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    for (i = 0; i < BUFFER_SIZE; i++)
 8000eae:	4290      	cmp	r0, r2
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8000eb0:	ee17 3a90 	vmov	r3, s15
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	f821 3b02 	strh.w	r3, [r1], #2
    for (i = 0; i < BUFFER_SIZE; i++)
 8000eba:	d1f4      	bne.n	8000ea6 <pipe_updateDACOutput+0x3e>
}
 8000ebc:	bd70      	pop	{r4, r5, r6, pc}
 8000ebe:	bf00      	nop
 8000ec0:	45000000 	.word	0x45000000

08000ec4 <pipe_ADC_Complete>:
{
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
 8000eca:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8000ecc:	f501 6c00 	add.w	ip, r1, #2048	@ 0x800
 8000ed0:	f500 5e00 	add.w	lr, r0, #8192	@ 0x2000
 8000ed4:	462a      	mov	r2, r5
        self->inBuffer2[i] = (float32_t)adcInput[BUFFER_SIZE + i];
 8000ed6:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee4:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8000ee8:	4572      	cmp	r2, lr
 8000eea:	d1f4      	bne.n	8000ed6 <pipe_ADC_Complete+0x12>
    arm_scale_f32(self->inBuffer2, ADC_BITS2VOLTS, self->inBuffer2, BUFFER_SIZE);
 8000eec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef0:	4629      	mov	r1, r5
 8000ef2:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000f28 <pipe_ADC_Complete+0x64>
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	f006 fa9c 	bl	8007434 <arm_scale_f32>
    arm_offset_f32(self->inBuffer2, -1.0f, self->inBuffer2, BUFFER_SIZE);
 8000efc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f00:	4629      	mov	r1, r5
 8000f02:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000f06:	4628      	mov	r0, r5
 8000f08:	f006 faca 	bl	80074a0 <arm_offset_f32>
    self->inBuffer  = self->inBuffer2;
 8000f0c:	f504 4280 	add.w	r2, r4, #16384	@ 0x4000
    self->ppState   = 0;
 8000f10:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->outBuffer = self->outBuffer2;
 8000f14:	f504 5440 	add.w	r4, r4, #12288	@ 0x3000
    self->ppState   = 0;
 8000f18:	2100      	movs	r1, #0
    self->outBuffer = self->outBuffer2;
 8000f1a:	e9c2 5400 	strd	r5, r4, [r2]
    self->bufferReady = true;
 8000f1e:	2201      	movs	r2, #1
    self->ppState   = 0;
 8000f20:	7219      	strb	r1, [r3, #8]
    self->bufferReady = true;
 8000f22:	741a      	strb	r2, [r3, #16]
}
 8000f24:	bd38      	pop	{r3, r4, r5, pc}
 8000f26:	bf00      	nop
 8000f28:	38000000 	.word	0x38000000

08000f2c <pipe_ADC_HalfComplete>:
{
 8000f2c:	b510      	push	{r4, lr}
 8000f2e:	468c      	mov	ip, r1
 8000f30:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8000f32:	4602      	mov	r2, r0
 8000f34:	f500 5e80 	add.w	lr, r0, #4096	@ 0x1000
        self->inBuffer1[i] = (float32_t)adcInput[i];
 8000f38:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f46:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8000f4a:	4572      	cmp	r2, lr
 8000f4c:	d1f4      	bne.n	8000f38 <pipe_ADC_HalfComplete+0xc>
    arm_scale_f32(self->inBuffer1, ADC_BITS2VOLTS, self->inBuffer1, BUFFER_SIZE);
 8000f4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f52:	4621      	mov	r1, r4
 8000f54:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000f88 <pipe_ADC_HalfComplete+0x5c>
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f006 fa6b 	bl	8007434 <arm_scale_f32>
    arm_offset_f32(self->inBuffer1, -1.0f, self->inBuffer1, BUFFER_SIZE);
 8000f5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f62:	4621      	mov	r1, r4
 8000f64:	4620      	mov	r0, r4
 8000f66:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000f6a:	f006 fa99 	bl	80074a0 <arm_offset_f32>
    self->ppState   = 1;
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->inBuffer  = self->inBuffer1;
 8000f74:	f504 4180 	add.w	r1, r4, #16384	@ 0x4000
    self->outBuffer = self->outBuffer1;
 8000f78:	f504 5000 	add.w	r0, r4, #8192	@ 0x2000
 8000f7c:	e9c1 4000 	strd	r4, r0, [r1]
    self->ppState   = 1;
 8000f80:	721a      	strb	r2, [r3, #8]
    self->bufferReady = true;
 8000f82:	741a      	strb	r2, [r3, #16]
}
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	bf00      	nop
 8000f88:	38000000 	.word	0x38000000

08000f8c <pipeInit>:
}

void pipeInit(pipe *self)
{
 8000f8c:	4684      	mov	ip, r0
    self->delayIndex = 0;
    self->bufferReady = false;

    self->adcHalfComplete = pipe_ADC_HalfComplete;
    self->adcComplete     = pipe_ADC_Complete;
    self->updateDelayBuffer = pipe_updateDelayBuffer;
 8000f8e:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <pipeInit+0x48>)
    self->ppState   = 0;
 8000f90:	2100      	movs	r1, #0
    self->inBuffer  = self->inBuffer2;
 8000f92:	f50c 4280 	add.w	r2, ip, #16384	@ 0x4000
    self->ppState   = 0;
 8000f96:	f50c 4370 	add.w	r3, ip, #61440	@ 0xf000
{
 8000f9a:	b470      	push	{r4, r5, r6}
    self->inBuffer  = self->inBuffer2;
 8000f9c:	f50c 5680 	add.w	r6, ip, #4096	@ 0x1000
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8000fa0:	4d0d      	ldr	r5, [pc, #52]	@ (8000fd8 <pipeInit+0x4c>)
    self->adcComplete     = pipe_ADC_Complete;
 8000fa2:	4c0e      	ldr	r4, [pc, #56]	@ (8000fdc <pipeInit+0x50>)
    self->inBuffer  = self->inBuffer2;
 8000fa4:	6016      	str	r6, [r2, #0]
    self->outBuffer = self->outBuffer2;
 8000fa6:	f50c 5640 	add.w	r6, ip, #12288	@ 0x3000
 8000faa:	6056      	str	r6, [r2, #4]
    self->updateDACOutput = pipe_updateDACOutput;
 8000fac:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe0 <pipeInit+0x54>)
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8000fae:	615d      	str	r5, [r3, #20]
    self->ppState   = 0;
 8000fb0:	7219      	strb	r1, [r3, #8]
    self->adcComplete     = pipe_ADC_Complete;
 8000fb2:	619c      	str	r4, [r3, #24]
    self->delayIndex = 0;
 8000fb4:	60d9      	str	r1, [r3, #12]
    self->bufferReady = false;
 8000fb6:	7419      	strb	r1, [r3, #16]
    self->updateDACOutput = pipe_updateDACOutput;
 8000fb8:	e9c3 0207 	strd	r0, r2, [r3, #28]
    self->getDelayBuffer = pipe_getDelayBuffer;
 8000fbc:	4809      	ldr	r0, [pc, #36]	@ (8000fe4 <pipeInit+0x58>)
    self->loadProcess = pipe_loadProcess;
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <pipeInit+0x5c>)
 8000fc0:	e9c3 0209 	strd	r0, r2, [r3, #36]	@ 0x24

    for(int i = 0; i < BUFFER_SIZE ; i++) {

    	self->processBuffer[i] = 0;
 8000fc4:	f244 0008 	movw	r0, #16392	@ 0x4008
 8000fc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fcc:	4460      	add	r0, ip

    }

}
 8000fce:	bc70      	pop	{r4, r5, r6}
    	self->processBuffer[i] = 0;
 8000fd0:	f006 be08 	b.w	8007be4 <memset>
 8000fd4:	08000e35 	.word	0x08000e35
 8000fd8:	08000f2d 	.word	0x08000f2d
 8000fdc:	08000ec5 	.word	0x08000ec5
 8000fe0:	08000e69 	.word	0x08000e69
 8000fe4:	08000df1 	.word	0x08000df1
 8000fe8:	08000e21 	.word	0x08000e21

08000fec <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <HAL_MspInit+0x20>)
{
 8000fee:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000ff4:	f042 0202 	orr.w	r2, r2, #2
 8000ff8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001008:	b002      	add	sp, #8
 800100a:	4770      	bx	lr
 800100c:	58024400 	.word	0x58024400

08001010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	2100      	movs	r1, #0
{
 8001016:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	22c0      	movs	r2, #192	@ 0xc0
 800101a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	9106      	str	r1, [sp, #24]
 800101e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001022:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001026:	f006 fddd 	bl	8007be4 <memset>
  if(hadc->Instance==ADC1)
 800102a:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <HAL_ADC_MspInit+0xe0>)
 800102c:	6822      	ldr	r2, [r4, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d001      	beq.n	8001036 <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001032:	b038      	add	sp, #224	@ 0xe0
 8001034:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001036:	2300      	movs	r3, #0
 8001038:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800103e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001042:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001046:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001048:	f003 feda 	bl	8004e00 <HAL_RCCEx_PeriphCLKConfig>
 800104c:	2800      	cmp	r0, #0
 800104e:	d148      	bne.n	80010e2 <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001050:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA1_Stream0;
 8001056:	4d28      	ldr	r5, [pc, #160]	@ (80010f8 <HAL_ADC_MspInit+0xe8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001058:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800105c:	f042 0220 	orr.w	r2, r2, #32
 8001060:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8001064:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001068:	f002 0220 	and.w	r2, r2, #32
 800106c:	9200      	str	r2, [sp, #0]
 800106e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001074:	f042 0201 	orr.w	r2, r2, #1
 8001078:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800107c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800108a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	481b      	ldr	r0, [pc, #108]	@ (80010fc <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001090:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f002 fe06 	bl	8003ca4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8001098:	4a19      	ldr	r2, [pc, #100]	@ (8001100 <HAL_ADC_MspInit+0xf0>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800109a:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800109c:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109e:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010a0:	e885 004c 	stmia.w	r5, {r2, r3, r6}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ac:	e9c5 6203 	strd	r6, r2, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b0:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ba:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80010be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010c2:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010c4:	f001 fe18 	bl	8002cf8 <HAL_DMA_Init>
 80010c8:	b970      	cbnz	r0, 80010e8 <HAL_ADC_MspInit+0xd8>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010ce:	64e5      	str	r5, [r4, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010d0:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010d2:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010d4:	f001 fac8 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010d8:	2012      	movs	r0, #18
 80010da:	f001 fb01 	bl	80026e0 <HAL_NVIC_EnableIRQ>
}
 80010de:	b038      	add	sp, #224	@ 0xe0
 80010e0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80010e2:	f7ff fc51 	bl	8000988 <Error_Handler>
 80010e6:	e7b3      	b.n	8001050 <HAL_ADC_MspInit+0x40>
      Error_Handler();
 80010e8:	f7ff fc4e 	bl	8000988 <Error_Handler>
 80010ec:	e7ed      	b.n	80010ca <HAL_ADC_MspInit+0xba>
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000
 80010f4:	58024400 	.word	0x58024400
 80010f8:	240733a8 	.word	0x240733a8
 80010fc:	58020000 	.word	0x58020000
 8001100:	40020010 	.word	0x40020010

08001104 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8001104:	4b2c      	ldr	r3, [pc, #176]	@ (80011b8 <HAL_DAC_MspInit+0xb4>)
 8001106:	6802      	ldr	r2, [r0, #0]
{
 8001108:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 800110a:	429a      	cmp	r2, r3
{
 800110c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f04f 0400 	mov.w	r4, #0
 8001112:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001116:	9404      	str	r4, [sp, #16]
 8001118:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 800111c:	d001      	beq.n	8001122 <HAL_DAC_MspInit+0x1e>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800111e:	b008      	add	sp, #32
 8001120:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <HAL_DAC_MspInit+0xb8>)
 8001124:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8001128:	4e25      	ldr	r6, [pc, #148]	@ (80011c0 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 800112a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800112e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001132:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001136:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800113a:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 800113e:	9200      	str	r2, [sp, #0]
 8001140:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114e:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800115a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	4819      	ldr	r0, [pc, #100]	@ (80011c4 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001160:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f002 fd9e 	bl	8003ca4 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8001168:	4a17      	ldr	r2, [pc, #92]	@ (80011c8 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800116a:	2343      	movs	r3, #67	@ 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800116c:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800116e:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001170:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001172:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001174:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001178:	2240      	movs	r2, #64	@ 0x40
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800117a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800117e:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001184:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001186:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800118a:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800118e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001192:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001194:	f001 fdb0 	bl	8002cf8 <HAL_DMA_Init>
 8001198:	b958      	cbnz	r0, 80011b2 <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800119c:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800119e:	2036      	movs	r0, #54	@ 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80011a0:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011a2:	4611      	mov	r1, r2
 80011a4:	f001 fa60 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011a8:	2036      	movs	r0, #54	@ 0x36
 80011aa:	f001 fa99 	bl	80026e0 <HAL_NVIC_EnableIRQ>
}
 80011ae:	b008      	add	sp, #32
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80011b2:	f7ff fbe9 	bl	8000988 <Error_Handler>
 80011b6:	e7f0      	b.n	800119a <HAL_DAC_MspInit+0x96>
 80011b8:	40007400 	.word	0x40007400
 80011bc:	58024400 	.word	0x58024400
 80011c0:	2407331c 	.word	0x2407331c
 80011c4:	58020000 	.word	0x58020000
 80011c8:	40020028 	.word	0x40020028

080011cc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <HAL_TIM_Base_MspInit+0x2c>)
 80011ce:	6802      	ldr	r2, [r0, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d000      	beq.n	80011d6 <HAL_TIM_Base_MspInit+0xa>
 80011d4:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <HAL_TIM_Base_MspInit+0x30>)
{
 80011d8:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011da:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80011de:	f042 0202 	orr.w	r2, r2, #2
 80011e2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80011e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 80011f2:	b002      	add	sp, #8
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40010400 	.word	0x40010400
 80011fc:	58024400 	.word	0x58024400

08001200 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler>
 8001202:	bf00      	nop

08001204 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <HardFault_Handler>
 8001206:	bf00      	nop

08001208 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler>
 800120a:	bf00      	nop

0800120c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <BusFault_Handler>
 800120e:	bf00      	nop

08001210 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler>
 8001212:	bf00      	nop

08001214 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop

0800121c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 bac8 	b.w	80017b4 <HAL_IncTick>

08001224 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001224:	4801      	ldr	r0, [pc, #4]	@ (800122c <DMA1_Stream0_IRQHandler+0x8>)
 8001226:	f002 bb2b 	b.w	8003880 <HAL_DMA_IRQHandler>
 800122a:	bf00      	nop
 800122c:	240733a8 	.word	0x240733a8

08001230 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001230:	4801      	ldr	r0, [pc, #4]	@ (8001238 <DMA1_Stream1_IRQHandler+0x8>)
 8001232:	f002 bb25 	b.w	8003880 <HAL_DMA_IRQHandler>
 8001236:	bf00      	nop
 8001238:	2407331c 	.word	0x2407331c

0800123c <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800123c:	4801      	ldr	r0, [pc, #4]	@ (8001244 <ADC_IRQHandler+0x8>)
 800123e:	f000 badb 	b.w	80017f8 <HAL_ADC_IRQHandler>
 8001242:	bf00      	nop
 8001244:	24073420 	.word	0x24073420

08001248 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001248:	4801      	ldr	r0, [pc, #4]	@ (8001250 <TIM6_DAC_IRQHandler+0x8>)
 800124a:	f001 bb6d 	b.w	8002928 <HAL_DAC_IRQHandler>
 800124e:	bf00      	nop
 8001250:	24073394 	.word	0x24073394

08001254 <supro_preamp_f32>:


}

void supro_preamp_f32(pipe *p)
{
 8001254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        *gPost = &supro_parameters[SUPRO_P_POST_GAIN_IDX],   // post-gain (p[N+11])
        *gWet  = &supro_parameters[SUPRO_P_BLEND_IDX],    // wet mix
        *bias  = &supro_parameters[SUPRO_P_BIAS_IDX];     // envelope bias (p[N+4])

    /* 1) envelope = sqrt( 2 * LP( x^2 ) ) */
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 8001258:	f244 0808 	movw	r8, #16392	@ 0x4008
{
 800125c:	f5ad 4dc0 	sub.w	sp, sp, #24576	@ 0x6000
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 8001260:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001264:	4480      	add	r8, r0
    //arm_fir_f32(&preamp_fir_5Hz_lowpass, temp, envelope, BLOCK_SIZE);
    arm_biquad_cascade_df1_f32(&preampLP, temp, envelope, BLOCK_SIZE);
 8001266:	f50d 5580 	add.w	r5, sp, #4096	@ 0x1000
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 800126a:	466a      	mov	r2, sp
 800126c:	466c      	mov	r4, sp
 800126e:	4641      	mov	r1, r8
 8001270:	4640      	mov	r0, r8
 8001272:	f006 f94b 	bl	800750c <arm_mult_f32>
    arm_biquad_cascade_df1_f32(&preampLP, temp, envelope, BLOCK_SIZE);
 8001276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800127a:	462a      	mov	r2, r5
 800127c:	4669      	mov	r1, sp
 800127e:	483e      	ldr	r0, [pc, #248]	@ (8001378 <supro_preamp_f32+0x124>)
 8001280:	f006 f80c 	bl	800729c <arm_biquad_cascade_df1_f32>
    arm_scale_f32(envelope, 2.0f, temp, BLOCK_SIZE);
 8001284:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001288:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800128c:	4669      	mov	r1, sp
 800128e:	4628      	mov	r0, r5
 8001290:	f006 f8d0 	bl	8007434 <arm_scale_f32>

    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
        float32_t v = temp[i];
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 8001294:	eddf 6a39 	vldr	s13, [pc, #228]	@ 800137c <supro_preamp_f32+0x128>
 8001298:	462b      	mov	r3, r5
        float32_t v = temp[i];
 800129a:	ecf4 7a01 	vldmia	r4!, {s15}
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 800129e:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80012a2:	eeb1 7ae7 	vsqrt.f32	s14, s15
    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
 80012a6:	42ac      	cmp	r4, r5
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 80012a8:	eca3 7a01 	vstmia	r3!, {s14}
    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
 80012ac:	d1f5      	bne.n	800129a <supro_preamp_f32+0x46>
    }

    /* 2) pre-gain */
    arm_scale_f32(p->processBuffer, *gPre, xpre, BLOCK_SIZE);
 80012ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012b2:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001380 <supro_preamp_f32+0x12c>
 80012b6:	4640      	mov	r0, r8
 80012b8:	f50d 5100 	add.w	r1, sp, #8192	@ 0x2000
 80012bc:	4e31      	ldr	r6, [pc, #196]	@ (8001384 <supro_preamp_f32+0x130>)
 80012be:	f006 f8b9 	bl	8007434 <arm_scale_f32>

    /* 3) add envelope bias */
    arm_scale_f32(envelope, *bias, temp, BLOCK_SIZE);
 80012c2:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8001388 <supro_preamp_f32+0x134>
 80012c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ca:	4620      	mov	r0, r4
 80012cc:	4669      	mov	r1, sp
 80012ce:	f006 f8b1 	bl	8007434 <arm_scale_f32>
    arm_add_f32(xpre, temp, xmapped, BLOCK_SIZE);
 80012d2:	f50d 45a0 	add.w	r5, sp, #20480	@ 0x5000
 80012d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012da:	4669      	mov	r1, sp
 80012dc:	f50d 5240 	add.w	r2, sp, #12288	@ 0x3000
 80012e0:	f50d 5000 	add.w	r0, sp, #8192	@ 0x2000
 80012e4:	f1a6 079c 	sub.w	r7, r6, #156	@ 0x9c
 80012e8:	f006 f956 	bl	8007598 <arm_add_f32>

    /* 4) Horner polynomial on xmapped */
    arm_scale_f32(xmapped,  a[SUPRO_NUM_A_VALS-1], yMap, BLOCK_SIZE);
 80012ec:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 800138c <supro_preamp_f32+0x138>
 80012f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012f4:	f50d 4180 	add.w	r1, sp, #16384	@ 0x4000
 80012f8:	f50d 5040 	add.w	r0, sp, #12288	@ 0x3000
 80012fc:	f006 f89a 	bl	8007434 <arm_scale_f32>
    for (int k = SUPRO_NUM_A_VALS-2; k >= 0; --k) {
        arm_mult_f32(xmapped, yMap, yMap, BLOCK_SIZE);
 8001300:	f50d 4280 	add.w	r2, sp, #16384	@ 0x4000
 8001304:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001308:	f50d 5040 	add.w	r0, sp, #12288	@ 0x3000
 800130c:	f50d 4480 	add.w	r4, sp, #16384	@ 0x4000
 8001310:	4611      	mov	r1, r2
 8001312:	f006 f8fb 	bl	800750c <arm_mult_f32>
        for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
            yMap[i] += a[k];
 8001316:	ed36 7a01 	vldmdb	r6!, {s14}
 800131a:	edd4 7a00 	vldr	s15, [r4]
 800131e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001322:	ece4 7a01 	vstmia	r4!, {s15}
        for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
 8001326:	42ac      	cmp	r4, r5
 8001328:	d1f7      	bne.n	800131a <supro_preamp_f32+0xc6>
    for (int k = SUPRO_NUM_A_VALS-2; k >= 0; --k) {
 800132a:	42be      	cmp	r6, r7
 800132c:	d1e8      	bne.n	8001300 <supro_preamp_f32+0xac>
    }

    /* 5) wet/dry mix */
    arm_scale_f32(yMap, *gWet, temp, BLOCK_SIZE);
 800132e:	f50d 4080 	add.w	r0, sp, #16384	@ 0x4000
 8001332:	4669      	mov	r1, sp
 8001334:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001390 <supro_preamp_f32+0x13c>
 8001338:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800133c:	f006 f87a 	bl	8007434 <arm_scale_f32>
    arm_scale_f32(xpre, 1.0f - *gWet, yDry, BLOCK_SIZE);
 8001340:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001394 <supro_preamp_f32+0x140>
 8001344:	f50d 5000 	add.w	r0, sp, #8192	@ 0x2000
 8001348:	4621      	mov	r1, r4
 800134a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800134e:	f006 f871 	bl	8007434 <arm_scale_f32>
    arm_add_f32(temp, yDry, temp, BLOCK_SIZE);
 8001352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001356:	466a      	mov	r2, sp
 8001358:	4621      	mov	r1, r4
 800135a:	4668      	mov	r0, sp
 800135c:	f006 f91c 	bl	8007598 <arm_add_f32>

    /* 6) post-gain */
    arm_scale_f32(temp, *gPost, p->processBuffer, BLOCK_SIZE);
 8001360:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001364:	4641      	mov	r1, r8
 8001366:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001398 <supro_preamp_f32+0x144>
 800136a:	4668      	mov	r0, sp
 800136c:	f006 f862 	bl	8007434 <arm_scale_f32>


}
 8001370:	f50d 4dc0 	add.w	sp, sp, #24576	@ 0x6000
 8001374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001378:	240799e0 	.word	0x240799e0
 800137c:	00000000 	.word	0x00000000
 8001380:	3f710983 	.word	0x3f710983
 8001384:	0806a090 	.word	0x0806a090
 8001388:	3f186130 	.word	0x3f186130
 800138c:	d267d638 	.word	0xd267d638
 8001390:	3f0d61b4 	.word	0x3f0d61b4
 8001394:	3ee53c98 	.word	0x3ee53c98
 8001398:	3f7db881 	.word	0x3f7db881

0800139c <supro_poweramp_f32>:


void supro_poweramp_f32(pipe *p)
{
 800139c:	b570      	push	{r4, r5, r6, lr}
	//arm_scale_f32(p->processBuffer, 0.1, p->processBuffer, BLOCK_SIZE); // temporary scaling until SPENCER corrects pipe scaling

    float32_t temp[BLOCK_SIZE], envelope[BLOCK_SIZE];

    /* 1) envelope = sqrt( 2 * LP( x^2 ) ) */
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 800139e:	f244 0408 	movw	r4, #16392	@ 0x4008
 80013a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
{
 80013a6:	ed2d 8b0a 	vpush	{d8-d12}
 80013aa:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 80013ae:	4404      	add	r4, r0
    //arm_fir_f32(&poweramp_fir_5Hz_lowpass, temp, envelope, BLOCK_SIZE);
    arm_biquad_cascade_df1_f32(&powerampLP, temp, envelope, BLOCK_SIZE);
 80013b0:	f50d 5680 	add.w	r6, sp, #4096	@ 0x1000
    arm_mult_f32(p->processBuffer, p->processBuffer, temp, BLOCK_SIZE);
 80013b4:	466a      	mov	r2, sp
 80013b6:	4621      	mov	r1, r4
 80013b8:	4620      	mov	r0, r4
 80013ba:	f006 f8a7 	bl	800750c <arm_mult_f32>
    arm_biquad_cascade_df1_f32(&powerampLP, temp, envelope, BLOCK_SIZE);
 80013be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013c2:	4632      	mov	r2, r6
 80013c4:	4669      	mov	r1, sp
 80013c6:	4839      	ldr	r0, [pc, #228]	@ (80014ac <supro_poweramp_f32+0x110>)
 80013c8:	4635      	mov	r5, r6
 80013ca:	f005 ff67 	bl	800729c <arm_biquad_cascade_df1_f32>
    arm_scale_f32(envelope, 2.0f, temp, BLOCK_SIZE);
 80013ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013d2:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80013d6:	4669      	mov	r1, sp
 80013d8:	4630      	mov	r0, r6
 80013da:	f006 f82b 	bl	8007434 <arm_scale_f32>

    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
        float32_t v = temp[i];
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 80013de:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80014b0 <supro_poweramp_f32+0x114>
 80013e2:	466b      	mov	r3, sp
    arm_scale_f32(envelope, 2.0f, temp, BLOCK_SIZE);
 80013e4:	4632      	mov	r2, r6
        float32_t v = temp[i];
 80013e6:	ecf3 7a01 	vldmia	r3!, {s15}
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 80013ea:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80013ee:	eeb1 7ae7 	vsqrt.f32	s14, s15
    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
 80013f2:	429e      	cmp	r6, r3
        envelope[i] = sqrtf(v > 0.0f ? v : 0.0f);
 80013f4:	eca2 7a01 	vstmia	r2!, {s14}
    for(uint32_t i = 0; i < (uint32_t)BLOCK_SIZE; i++){
 80013f8:	d1f5      	bne.n	80013e6 <supro_poweramp_f32+0x4a>
 80013fa:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
	 * 3. Per-sample processing loop
	 * ────────────────────────────────────────── */
	for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
	{
		/* 3.1 Feed-forward bias & pre-gain (MATLAB: xBias, xPre) */
		float32_t xBias = p->processBuffer[i] - (*gBias) * envelope[i];
 80013fe:	eddf 9a2d 	vldr	s19, [pc, #180]	@ 80014b4 <supro_poweramp_f32+0x118>
		float32_t xPre  = (*gPre) * xBias;              /* dry path copy */
 8001402:	ed9f 9a2d 	vldr	s18, [pc, #180]	@ 80014b8 <supro_poweramp_f32+0x11c>
		float32_t m;                                    /* shaped sample */

		/* 3.2 Piece-wise tanh mapping (Eq. 6) */
		if (xPre > kP_val) {                    /* Region A */
 8001406:	eddf 8a2d 	vldr	s17, [pc, #180]	@ 80014bc <supro_poweramp_f32+0x120>
			m = tanh_kP - coeffP * tanhf(gP_val * xPre - kP_val);
		} else if (xPre >= -kN_val) {           /* Region B */
 800140a:	ed9f ba2d 	vldr	s22, [pc, #180]	@ 80014c0 <supro_poweramp_f32+0x124>
			m = tanhf(xPre);
		} else {                                /* Region C */
			m = -tanh_kN - coeffN * tanhf(gN_val * xPre + kN_val);
 800140e:	eddf aa2d 	vldr	s21, [pc, #180]	@ 80014c4 <supro_poweramp_f32+0x128>
 8001412:	ed9f aa2d 	vldr	s20, [pc, #180]	@ 80014c8 <supro_poweramp_f32+0x12c>
 8001416:	ed9f ca2d 	vldr	s24, [pc, #180]	@ 80014cc <supro_poweramp_f32+0x130>
 800141a:	eddf ba2d 	vldr	s23, [pc, #180]	@ 80014d0 <supro_poweramp_f32+0x134>
			m = tanh_kP - coeffP * tanhf(gP_val * xPre - kP_val);
 800141e:	ed9f 8a2d 	vldr	s16, [pc, #180]	@ 80014d4 <supro_poweramp_f32+0x138>
 8001422:	e00f      	b.n	8001444 <supro_poweramp_f32+0xa8>
 8001424:	f006 fc10 	bl	8007c48 <tanhf>
 8001428:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80014d8 <supro_poweramp_f32+0x13c>
 800142c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80014dc <supro_poweramp_f32+0x140>
 8001430:	eee0 7a07 	vfma.f32	s15, s0, s14
		}

		/* 3.3 Wet/dry blend then post-gain */
		//m = (*gWet) * m + (1.0f - *gWet) * xPre;   /* yMap in MATLAB   */
		p->processBuffer[i] = (*gPost) * m;        /* y output         */
 8001434:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80014e0 <supro_poweramp_f32+0x144>
	for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
 8001438:	42b5      	cmp	r5, r6
		p->processBuffer[i] = (*gPost) * m;        /* y output         */
 800143a:	ee27 0a87 	vmul.f32	s0, s15, s14
 800143e:	ed04 0a01 	vstr	s0, [r4, #-4]
	for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
 8001442:	d027      	beq.n	8001494 <supro_poweramp_f32+0xf8>
		float32_t xBias = p->processBuffer[i] - (*gBias) * envelope[i];
 8001444:	ecb5 7a01 	vldmia	r5!, {s14}
 8001448:	ecf4 7a01 	vldmia	r4!, {s15}
			m = tanh_kP - coeffP * tanhf(gP_val * xPre - kP_val);
 800144c:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80014e4 <supro_poweramp_f32+0x148>
		float32_t xBias = p->processBuffer[i] - (*gBias) * envelope[i];
 8001450:	eee7 7a69 	vfms.f32	s15, s14, s19
		if (xPre > kP_val) {                    /* Region A */
 8001454:	eef4 7ae8 	vcmpe.f32	s15, s17
		float32_t xPre  = (*gPre) * xBias;              /* dry path copy */
 8001458:	ee27 7a89 	vmul.f32	s14, s15, s18
		if (xPre > kP_val) {                    /* Region A */
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			m = tanh_kP - coeffP * tanhf(gP_val * xPre - kP_val);
 8001460:	eea7 0a48 	vfms.f32	s0, s14, s16
		if (xPre > kP_val) {                    /* Region A */
 8001464:	dcde      	bgt.n	8001424 <supro_poweramp_f32+0x88>
		} else if (xPre >= -kN_val) {           /* Region B */
 8001466:	eef4 7acb 	vcmpe.f32	s15, s22
			m = -tanh_kN - coeffN * tanhf(gN_val * xPre + kN_val);
 800146a:	eeb0 0a4a 	vmov.f32	s0, s20
		} else if (xPre >= -kN_val) {           /* Region B */
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			m = -tanh_kN - coeffN * tanhf(gN_val * xPre + kN_val);
 8001472:	eea7 0a2a 	vfma.f32	s0, s14, s21
		} else if (xPre >= -kN_val) {           /* Region B */
 8001476:	db12      	blt.n	800149e <supro_poweramp_f32+0x102>
			m = tanhf(xPre);
 8001478:	eeb0 0a47 	vmov.f32	s0, s14
 800147c:	f006 fbe4 	bl	8007c48 <tanhf>
 8001480:	eef0 7a40 	vmov.f32	s15, s0
		p->processBuffer[i] = (*gPost) * m;        /* y output         */
 8001484:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80014e0 <supro_poweramp_f32+0x144>
	for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
 8001488:	42b5      	cmp	r5, r6
		p->processBuffer[i] = (*gPost) * m;        /* y output         */
 800148a:	ee27 0a87 	vmul.f32	s0, s15, s14
 800148e:	ed04 0a01 	vstr	s0, [r4, #-4]
	for (uint32_t i = 0; i < BLOCK_SIZE; ++i)
 8001492:	d1d7      	bne.n	8001444 <supro_poweramp_f32+0xa8>
	}


}
 8001494:	f50d 5d00 	add.w	sp, sp, #8192	@ 0x2000
 8001498:	ecbd 8b0a 	vpop	{d8-d12}
 800149c:	bd70      	pop	{r4, r5, r6, pc}
			m = -tanh_kN - coeffN * tanhf(gN_val * xPre + kN_val);
 800149e:	f006 fbd3 	bl	8007c48 <tanhf>
 80014a2:	eef0 7a6b 	vmov.f32	s15, s23
 80014a6:	eee0 7a4c 	vfms.f32	s15, s0, s24
 80014aa:	e7c3      	b.n	8001434 <supro_poweramp_f32+0x98>
 80014ac:	240799d4 	.word	0x240799d4
 80014b0:	00000000 	.word	0x00000000
 80014b4:	3f1ed3f6 	.word	0x3f1ed3f6
 80014b8:	3f8e9370 	.word	0x3f8e9370
 80014bc:	3f64018b 	.word	0x3f64018b
 80014c0:	bf655493 	.word	0xbf655493
 80014c4:	3f7fa057 	.word	0x3f7fa057
 80014c8:	3f7f71fb 	.word	0x3f7f71fb
 80014cc:	bed80d82 	.word	0xbed80d82
 80014d0:	bf42bc17 	.word	0xbf42bc17
 80014d4:	3f806a2a 	.word	0x3f806a2a
 80014d8:	bed8ee5b 	.word	0xbed8ee5b
 80014dc:	3f421c45 	.word	0x3f421c45
 80014e0:	40d6c29a 	.word	0x40d6c29a
 80014e4:	3f7df857 	.word	0x3f7df857

080014e8 <supro_process>:
{
 80014e8:	b570      	push	{r4, r5, r6, lr}
	arm_scale_f32(p->processBuffer, 0.1, p->processBuffer, BUFFER_SIZE);
 80014ea:	f244 0508 	movw	r5, #16392	@ 0x4008
{
 80014ee:	4604      	mov	r4, r0
	partitioned_fir_convolution_fft(p, supro_sim.fir1, state);
 80014f0:	4e14      	ldr	r6, [pc, #80]	@ (8001544 <supro_process+0x5c>)
	arm_scale_f32(p->processBuffer, 0.1, p->processBuffer, BUFFER_SIZE);
 80014f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f6:	4405      	add	r5, r0
 80014f8:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001548 <supro_process+0x60>
 80014fc:	4629      	mov	r1, r5
 80014fe:	4628      	mov	r0, r5
 8001500:	f005 ff98 	bl	8007434 <arm_scale_f32>
	partitioned_fir_convolution_fft(p, supro_sim.fir1, state);
 8001504:	6831      	ldr	r1, [r6, #0]
 8001506:	4a11      	ldr	r2, [pc, #68]	@ (800154c <supro_process+0x64>)
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff fa3f 	bl	800098c <partitioned_fir_convolution_fft>
	supro_preamp_f32(p);
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff fea0 	bl	8001254 <supro_preamp_f32>
	partitioned_fir_convolution_fft(p, supro_sim.fir2, state2);
 8001514:	6871      	ldr	r1, [r6, #4]
 8001516:	4a0e      	ldr	r2, [pc, #56]	@ (8001550 <supro_process+0x68>)
 8001518:	4620      	mov	r0, r4
 800151a:	f7ff fa37 	bl	800098c <partitioned_fir_convolution_fft>
    supro_poweramp_f32(p);
 800151e:	4620      	mov	r0, r4
 8001520:	f7ff ff3c 	bl	800139c <supro_poweramp_f32>
	partitioned_fir_convolution_fft(p, supro_sim.fir3, state3);
 8001524:	68b1      	ldr	r1, [r6, #8]
 8001526:	4620      	mov	r0, r4
 8001528:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <supro_process+0x6c>)
 800152a:	f7ff fa2f 	bl	800098c <partitioned_fir_convolution_fft>
	arm_scale_f32(p->processBuffer, 0.01, p->processBuffer, BUFFER_SIZE);
 800152e:	4629      	mov	r1, r5
 8001530:	4628      	mov	r0, r5
 8001532:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001536:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001558 <supro_process+0x70>
}
 800153a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	arm_scale_f32(p->processBuffer, 0.01, p->processBuffer, BUFFER_SIZE);
 800153e:	f005 bf79 	b.w	8007434 <arm_scale_f32>
 8001542:	bf00      	nop
 8001544:	2400005c 	.word	0x2400005c
 8001548:	3dcccccd 	.word	0x3dcccccd
 800154c:	20006040 	.word	0x20006040
 8001550:	20005040 	.word	0x20005040
 8001554:	20004040 	.word	0x20004040
 8001558:	3c23d70a 	.word	0x3c23d70a

0800155c <supro_init_f32>:
{
 800155c:	b510      	push	{r4, lr}
    arm_biquad_cascade_df1_init_f32(&preampLP,  LP_STAGES,
 800155e:	4c15      	ldr	r4, [pc, #84]	@ (80015b4 <supro_init_f32+0x58>)
{
 8001560:	b082      	sub	sp, #8
    arm_biquad_cascade_df1_init_f32(&preampLP,  LP_STAGES,
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <supro_init_f32+0x5c>)
 8001564:	2101      	movs	r1, #1
 8001566:	4622      	mov	r2, r4
 8001568:	4814      	ldr	r0, [pc, #80]	@ (80015bc <supro_init_f32+0x60>)
 800156a:	f005 fe89 	bl	8007280 <arm_biquad_cascade_df1_init_f32>
    arm_biquad_cascade_df1_init_f32(&powerampLP, LP_STAGES,
 800156e:	4622      	mov	r2, r4
	arm_fir_init_f32(&h1_fir_f32, h1_fir_LEN, (float32_t *)&h1_fir_coeffs[0], &h1_fir[0], (uint32_t)BLOCK_SIZE);
 8001570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    arm_biquad_cascade_df1_init_f32(&powerampLP, LP_STAGES,
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <supro_init_f32+0x64>)
 8001576:	2101      	movs	r1, #1
 8001578:	4812      	ldr	r0, [pc, #72]	@ (80015c4 <supro_init_f32+0x68>)
 800157a:	f005 fe81 	bl	8007280 <arm_biquad_cascade_df1_init_f32>
	arm_fir_init_f32(&h1_fir_f32, h1_fir_LEN, (float32_t *)&h1_fir_coeffs[0], &h1_fir[0], (uint32_t)BLOCK_SIZE);
 800157e:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <supro_init_f32+0x6c>)
 8001580:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <supro_init_f32+0x70>)
 8001582:	f240 2159 	movw	r1, #601	@ 0x259
 8001586:	4812      	ldr	r0, [pc, #72]	@ (80015d0 <supro_init_f32+0x74>)
 8001588:	9400      	str	r4, [sp, #0]
 800158a:	f005 fe67 	bl	800725c <arm_fir_init_f32>
	arm_fir_init_f32(&h2_fir_f32, h2_fir_LEN, (float32_t *)&h2_fir_coeffs[0], &h2_fir[0], (uint32_t)BLOCK_SIZE);
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <supro_init_f32+0x78>)
 8001590:	4a11      	ldr	r2, [pc, #68]	@ (80015d8 <supro_init_f32+0x7c>)
 8001592:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001596:	4811      	ldr	r0, [pc, #68]	@ (80015dc <supro_init_f32+0x80>)
 8001598:	9400      	str	r4, [sp, #0]
 800159a:	f005 fe5f 	bl	800725c <arm_fir_init_f32>
	arm_fir_init_f32(&h3_fir_f32, h3_fir_LEN, (float32_t *)&h3_fir_coeffs[0], &h3_fir[0], (uint32_t)BLOCK_SIZE);
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <supro_init_f32+0x84>)
 80015a0:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <supro_init_f32+0x88>)
 80015a2:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80015a6:	4810      	ldr	r0, [pc, #64]	@ (80015e8 <supro_init_f32+0x8c>)
 80015a8:	9400      	str	r4, [sp, #0]
 80015aa:	f005 fe57 	bl	800725c <arm_fir_init_f32>
}
 80015ae:	b002      	add	sp, #8
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	bf00      	nop
 80015b4:	08069fe0 	.word	0x08069fe0
 80015b8:	20004020 	.word	0x20004020
 80015bc:	240799e0 	.word	0x240799e0
 80015c0:	20004000 	.word	0x20004000
 80015c4:	240799d4 	.word	0x240799d4
 80015c8:	24078050 	.word	0x24078050
 80015cc:	0806acc0 	.word	0x0806acc0
 80015d0:	240799c8 	.word	0x240799c8
 80015d4:	24076c54 	.word	0x24076c54
 80015d8:	0806a8c0 	.word	0x0806a8c0
 80015dc:	240799bc 	.word	0x240799bc
 80015e0:	24075484 	.word	0x24075484
 80015e4:	0806a0e0 	.word	0x0806a0e0
 80015e8:	240799b0 	.word	0x240799b0

080015ec <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015ec:	4927      	ldr	r1, [pc, #156]	@ (800168c <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015ee:	4a28      	ldr	r2, [pc, #160]	@ (8001690 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015f0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 80015f8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015fe:	6813      	ldr	r3, [r2, #0]
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	2b06      	cmp	r3, #6
 8001606:	d805      	bhi.n	8001614 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001608:	6813      	ldr	r3, [r2, #0]
 800160a:	f023 030f 	bic.w	r3, r3, #15
 800160e:	f043 0307 	orr.w	r3, r3, #7
 8001612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001616:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001618:	4a1f      	ldr	r2, [pc, #124]	@ (8001698 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800161a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800161c:	481c      	ldr	r0, [pc, #112]	@ (8001690 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800161e:	f041 0101 	orr.w	r1, r1, #1
 8001622:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001624:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	400a      	ands	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800162c:	6803      	ldr	r3, [r0, #0]
 800162e:	071b      	lsls	r3, r3, #28
 8001630:	d505      	bpl.n	800163e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001632:	6803      	ldr	r3, [r0, #0]
 8001634:	f023 030f 	bic.w	r3, r3, #15
 8001638:	f043 0307 	orr.w	r3, r3, #7
 800163c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <SystemInit+0xa8>)
 8001640:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001642:	4916      	ldr	r1, [pc, #88]	@ (800169c <SystemInit+0xb0>)
  RCC->PLLCFGR = 0x01FF0000;
 8001644:	4816      	ldr	r0, [pc, #88]	@ (80016a0 <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 8001646:	4c17      	ldr	r4, [pc, #92]	@ (80016a4 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8001648:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800164a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800164c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800164e:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8001650:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001652:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001654:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001656:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001658:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800165a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800165c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800165e:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001660:	4811      	ldr	r0, [pc, #68]	@ (80016a8 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8001662:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8001666:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001668:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800166a:	6803      	ldr	r3, [r0, #0]
 800166c:	f36f 030f 	bfc	r3, #0, #16
 8001670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001674:	d203      	bcs.n	800167e <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <SystemInit+0xc0>)
 8001678:	2201      	movs	r2, #1
 800167a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <SystemInit+0xc4>)
 8001680:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001684:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001688:	601a      	str	r2, [r3, #0]
}
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	52002000 	.word	0x52002000
 8001694:	58024400 	.word	0x58024400
 8001698:	eaf6ed7f 	.word	0xeaf6ed7f
 800169c:	01010280 	.word	0x01010280
 80016a0:	01ff0000 	.word	0x01ff0000
 80016a4:	02020200 	.word	0x02020200
 80016a8:	5c001000 	.word	0x5c001000
 80016ac:	51008000 	.word	0x51008000
 80016b0:	52004000 	.word	0x52004000

080016b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b8:	f7ff ff98 	bl	80015ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016be:	490d      	ldr	r1, [pc, #52]	@ (80016f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c0:	4a0d      	ldr	r2, [pc, #52]	@ (80016f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e2:	f006 fa8d 	bl	8007c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e6:	f7fe ff47 	bl	8000578 <main>
  bx  lr
 80016ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016f4:	240000cc 	.word	0x240000cc
  ldr r2, =_sidata
 80016f8:	0807eaa8 	.word	0x0807eaa8
  ldr r2, =_sbss
 80016fc:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8001700:	24079b28 	.word	0x24079b28

08001704 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC3_IRQHandler>
	...

08001708 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <HAL_InitTick+0x40>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b90b      	cbnz	r3, 8001712 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800170e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001710:	4770      	bx	lr
{
 8001712:	b510      	push	{r4, lr}
 8001714:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001716:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800171a:	4a0c      	ldr	r2, [pc, #48]	@ (800174c <HAL_InitTick+0x44>)
 800171c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001720:	6810      	ldr	r0, [r2, #0]
 8001722:	fbb0 f0f3 	udiv	r0, r0, r3
 8001726:	f000 ffe9 	bl	80026fc <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172a:	2c0f      	cmp	r4, #15
 800172c:	d800      	bhi.n	8001730 <HAL_InitTick+0x28>
 800172e:	b108      	cbz	r0, 8001734 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8001730:	2001      	movs	r0, #1
}
 8001732:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	4621      	mov	r1, r4
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f000 ff94 	bl	8002668 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <HAL_InitTick+0x48>)
 8001742:	2000      	movs	r0, #0
 8001744:	601c      	str	r4, [r3, #0]
}
 8001746:	bd10      	pop	{r4, pc}
 8001748:	24000074 	.word	0x24000074
 800174c:	24000070 	.word	0x24000070
 8001750:	24000078 	.word	0x24000078

08001754 <HAL_Init>:
{
 8001754:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001756:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001758:	4c12      	ldr	r4, [pc, #72]	@ (80017a4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175a:	f000 ff73 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800175e:	f003 f82f 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_Init+0x54>)
 8001764:	4911      	ldr	r1, [pc, #68]	@ (80017ac <HAL_Init+0x58>)
 8001766:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001768:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800176a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800176e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001772:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001774:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001776:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800177a:	490d      	ldr	r1, [pc, #52]	@ (80017b0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800177c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001780:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001782:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001786:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001788:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800178a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800178c:	f7ff ffbc 	bl	8001708 <HAL_InitTick>
 8001790:	b110      	cbz	r0, 8001798 <HAL_Init+0x44>
    return HAL_ERROR;
 8001792:	2401      	movs	r4, #1
}
 8001794:	4620      	mov	r0, r4
 8001796:	bd10      	pop	{r4, pc}
 8001798:	4604      	mov	r4, r0
  HAL_MspInit();
 800179a:	f7ff fc27 	bl	8000fec <HAL_MspInit>
}
 800179e:	4620      	mov	r0, r4
 80017a0:	bd10      	pop	{r4, pc}
 80017a2:	bf00      	nop
 80017a4:	2400006c 	.word	0x2400006c
 80017a8:	58024400 	.word	0x58024400
 80017ac:	0806b624 	.word	0x0806b624
 80017b0:	24000070 	.word	0x24000070

080017b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80017b4:	4a03      	ldr	r2, [pc, #12]	@ (80017c4 <HAL_IncTick+0x10>)
 80017b6:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <HAL_IncTick+0x14>)
 80017b8:	6811      	ldr	r1, [r2, #0]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	440b      	add	r3, r1
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	240799ec 	.word	0x240799ec
 80017c8:	24000074 	.word	0x24000074

080017cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017cc:	4b01      	ldr	r3, [pc, #4]	@ (80017d4 <HAL_GetTick+0x8>)
 80017ce:	6818      	ldr	r0, [r3, #0]
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	240799ec 	.word	0x240799ec

080017d8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80017d8:	4b01      	ldr	r3, [pc, #4]	@ (80017e0 <HAL_GetREVID+0x8>)
 80017da:	6818      	ldr	r0, [r3, #0]
}
 80017dc:	0c00      	lsrs	r0, r0, #16
 80017de:	4770      	bx	lr
 80017e0:	5c001000 	.word	0x5c001000

080017e4 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017e4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80017e6:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017e8:	f7fe fe10 	bl	800040c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017ec:	bd08      	pop	{r3, pc}
 80017ee:	bf00      	nop

080017f0 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop

080017f4 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop

080017f8 <HAL_ADC_IRQHandler>:
{
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017fa:	4a8e      	ldr	r2, [pc, #568]	@ (8001a34 <HAL_ADC_IRQHandler+0x23c>)
{
 80017fc:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017fe:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001800:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001802:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001804:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001806:	f000 8095 	beq.w	8001934 <HAL_ADC_IRQHandler+0x13c>
 800180a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800180e:	4293      	cmp	r3, r2
 8001810:	f000 8090 	beq.w	8001934 <HAL_ADC_IRQHandler+0x13c>
 8001814:	4a88      	ldr	r2, [pc, #544]	@ (8001a38 <HAL_ADC_IRQHandler+0x240>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001816:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001818:	07a9      	lsls	r1, r5, #30
 800181a:	f007 071f 	and.w	r7, r7, #31
 800181e:	d502      	bpl.n	8001826 <HAL_ADC_IRQHandler+0x2e>
 8001820:	07b2      	lsls	r2, r6, #30
 8001822:	f100 80aa 	bmi.w	800197a <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001826:	0769      	lsls	r1, r5, #29
 8001828:	d579      	bpl.n	800191e <HAL_ADC_IRQHandler+0x126>
 800182a:	0772      	lsls	r2, r6, #29
 800182c:	d577      	bpl.n	800191e <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800182e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001830:	06d2      	lsls	r2, r2, #27
 8001832:	d403      	bmi.n	800183c <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001834:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800183a:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001842:	d11c      	bne.n	800187e <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001844:	4a7d      	ldr	r2, [pc, #500]	@ (8001a3c <HAL_ADC_IRQHandler+0x244>)
 8001846:	4293      	cmp	r3, r2
 8001848:	f000 80e7 	beq.w	8001a1a <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800184c:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800184e:	0491      	lsls	r1, r2, #18
 8001850:	d415      	bmi.n	800187e <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	0712      	lsls	r2, r2, #28
 8001856:	d512      	bpl.n	800187e <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	0750      	lsls	r0, r2, #29
 800185c:	f100 80f2 	bmi.w	8001a44 <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	f022 020c 	bic.w	r2, r2, #12
 8001866:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001868:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800186a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800186e:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001870:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001872:	04d9      	lsls	r1, r3, #19
 8001874:	d403      	bmi.n	800187e <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001876:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800187e:	4620      	mov	r0, r4
 8001880:	f7fe fde4 	bl	800044c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800188a:	06aa      	lsls	r2, r5, #26
 800188c:	d54d      	bpl.n	800192a <HAL_ADC_IRQHandler+0x132>
 800188e:	06b0      	lsls	r0, r6, #26
 8001890:	d54b      	bpl.n	800192a <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001892:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001894:	06d0      	lsls	r0, r2, #27
 8001896:	d403      	bmi.n	80018a0 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001898:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800189a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800189e:	6562      	str	r2, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018a0:	4966      	ldr	r1, [pc, #408]	@ (8001a3c <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80018a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018a4:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018a6:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80018a8:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
 80018ac:	d073      	beq.n	8001996 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018ae:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80018b0:	b9d2      	cbnz	r2, 80018e8 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80018b2:	018a      	lsls	r2, r1, #6
 80018b4:	f100 80a9 	bmi.w	8001a0a <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	0650      	lsls	r0, r2, #25
 80018bc:	d514      	bpl.n	80018e8 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80018be:	0289      	lsls	r1, r1, #10
 80018c0:	d412      	bmi.n	80018e8 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	0712      	lsls	r2, r2, #28
 80018c6:	f100 80c8 	bmi.w	8001a5a <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80018d0:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80018d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018d8:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80018da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018dc:	05d8      	lsls	r0, r3, #23
 80018de:	d403      	bmi.n	80018e8 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018e8:	4620      	mov	r0, r4
 80018ea:	f000 fe3f 	bl	800256c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	2260      	movs	r2, #96	@ 0x60
 80018f2:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80018f4:	0629      	lsls	r1, r5, #24
 80018f6:	d501      	bpl.n	80018fc <HAL_ADC_IRQHandler+0x104>
 80018f8:	0632      	lsls	r2, r6, #24
 80018fa:	d45f      	bmi.n	80019bc <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80018fc:	05e8      	lsls	r0, r5, #23
 80018fe:	d501      	bpl.n	8001904 <HAL_ADC_IRQHandler+0x10c>
 8001900:	05f1      	lsls	r1, r6, #23
 8001902:	d466      	bmi.n	80019d2 <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001904:	05aa      	lsls	r2, r5, #22
 8001906:	d501      	bpl.n	800190c <HAL_ADC_IRQHandler+0x114>
 8001908:	05b0      	lsls	r0, r6, #22
 800190a:	d44b      	bmi.n	80019a4 <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800190c:	06e9      	lsls	r1, r5, #27
 800190e:	d501      	bpl.n	8001914 <HAL_ADC_IRQHandler+0x11c>
 8001910:	06f2      	lsls	r2, r6, #27
 8001912:	d411      	bmi.n	8001938 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001914:	0569      	lsls	r1, r5, #21
 8001916:	d501      	bpl.n	800191c <HAL_ADC_IRQHandler+0x124>
 8001918:	0572      	lsls	r2, r6, #21
 800191a:	d466      	bmi.n	80019ea <HAL_ADC_IRQHandler+0x1f2>
}
 800191c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800191e:	0728      	lsls	r0, r5, #28
 8001920:	d5b3      	bpl.n	800188a <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001922:	0731      	lsls	r1, r6, #28
 8001924:	d483      	bmi.n	800182e <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001926:	06aa      	lsls	r2, r5, #26
 8001928:	d4b1      	bmi.n	800188e <HAL_ADC_IRQHandler+0x96>
 800192a:	0669      	lsls	r1, r5, #25
 800192c:	d5e2      	bpl.n	80018f4 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800192e:	0672      	lsls	r2, r6, #25
 8001930:	d5e0      	bpl.n	80018f4 <HAL_ADC_IRQHandler+0xfc>
 8001932:	e7ae      	b.n	8001892 <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001934:	4a42      	ldr	r2, [pc, #264]	@ (8001a40 <HAL_ADC_IRQHandler+0x248>)
 8001936:	e76e      	b.n	8001816 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001938:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800193a:	b17a      	cbz	r2, 800195c <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800193c:	2f00      	cmp	r7, #0
 800193e:	d075      	beq.n	8001a2c <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001940:	4a3c      	ldr	r2, [pc, #240]	@ (8001a34 <HAL_ADC_IRQHandler+0x23c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	f000 8087 	beq.w	8001a56 <HAL_ADC_IRQHandler+0x25e>
 8001948:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800194c:	4293      	cmp	r3, r2
 800194e:	f000 8082 	beq.w	8001a56 <HAL_ADC_IRQHandler+0x25e>
 8001952:	4a39      	ldr	r2, [pc, #228]	@ (8001a38 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001954:	6892      	ldr	r2, [r2, #8]
 8001956:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 800195a:	d00b      	beq.n	8001974 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800195c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_ADC_ErrorCallback(hadc);
 800195e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001960:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001964:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001966:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 800196e:	f7ff ff41 	bl	80017f4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	2210      	movs	r2, #16
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e7cc      	b.n	8001914 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800197a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800197c:	06d8      	lsls	r0, r3, #27
 800197e:	d403      	bmi.n	8001988 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001980:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001982:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001986:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001988:	4620      	mov	r0, r4
 800198a:	f000 fdf7 	bl	800257c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	2202      	movs	r2, #2
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e747      	b.n	8001826 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001996:	21c1      	movs	r1, #193	@ 0xc1
 8001998:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800199a:	07c9      	lsls	r1, r1, #31
 800199c:	d487      	bmi.n	80018ae <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800199e:	4925      	ldr	r1, [pc, #148]	@ (8001a34 <HAL_ADC_IRQHandler+0x23c>)
 80019a0:	68c9      	ldr	r1, [r1, #12]
 80019a2:	e785      	b.n	80018b0 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80019a6:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ac:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80019ae:	f000 fde3 	bl	8002578 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e7a7      	b.n	800190c <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019be:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c4:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019c6:	f7ff ff13 	bl	80017f0 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	2280      	movs	r2, #128	@ 0x80
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e794      	b.n	80018fc <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80019d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80019d4:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80019d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019da:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80019dc:	f000 fdca 	bl	8002574 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e78c      	b.n	8001904 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80019ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80019ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80019f0:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80019f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019f6:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80019f8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80019fa:	f042 0208 	orr.w	r2, r2, #8
 80019fe:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a00:	6019      	str	r1, [r3, #0]
}
 8001a02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a06:	f000 bdb3 	b.w	8002570 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a0a:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001a0e:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001a12:	4302      	orrs	r2, r0
 8001a14:	f47f af68 	bne.w	80018e8 <HAL_ADC_IRQHandler+0xf0>
 8001a18:	e74e      	b.n	80018b8 <HAL_ADC_IRQHandler+0xc0>
 8001a1a:	f240 2221 	movw	r2, #545	@ 0x221
 8001a1e:	40fa      	lsrs	r2, r7
 8001a20:	07d0      	lsls	r0, r2, #31
 8001a22:	f53f af13 	bmi.w	800184c <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a26:	4a03      	ldr	r2, [pc, #12]	@ (8001a34 <HAL_ADC_IRQHandler+0x23c>)
 8001a28:	68d2      	ldr	r2, [r2, #12]
 8001a2a:	e710      	b.n	800184e <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	0790      	lsls	r0, r2, #30
 8001a30:	d0a0      	beq.n	8001974 <HAL_ADC_IRQHandler+0x17c>
 8001a32:	e793      	b.n	800195c <HAL_ADC_IRQHandler+0x164>
 8001a34:	40022000 	.word	0x40022000
 8001a38:	58026300 	.word	0x58026300
 8001a3c:	40022100 	.word	0x40022100
 8001a40:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a44:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001a54:	e713      	b.n	800187e <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <HAL_ADC_IRQHandler+0x274>)
 8001a58:	e77c      	b.n	8001954 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001a6a:	e73d      	b.n	80018e8 <HAL_ADC_IRQHandler+0xf0>
 8001a6c:	40022300 	.word	0x40022300

08001a70 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a70:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001a72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a74:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
{
 8001a7a:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001a7c:	d11d      	bne.n	8001aba <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001a7e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001a86:	680a      	ldr	r2, [r1, #0]
 8001a88:	f012 0f08 	tst.w	r2, #8
 8001a8c:	68ca      	ldr	r2, [r1, #12]
 8001a8e:	d01b      	beq.n	8001ac8 <ADC_DMAConvCplt+0x58>
 8001a90:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001a94:	d10d      	bne.n	8001ab2 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001a96:	68ca      	ldr	r2, [r1, #12]
 8001a98:	0494      	lsls	r4, r2, #18
 8001a9a:	d40a      	bmi.n	8001ab2 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aa2:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001aa4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001aa6:	04d1      	lsls	r1, r2, #19
 8001aa8:	d403      	bmi.n	8001ab2 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aaa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001aac:	f042 0201 	orr.w	r2, r2, #1
 8001ab0:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fcca 	bl	800044c <HAL_ADC_ConvCpltCallback>
}
 8001ab8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001aba:	06d2      	lsls	r2, r2, #27
 8001abc:	d40a      	bmi.n	8001ad4 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac6:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001ac8:	0790      	lsls	r0, r2, #30
 8001aca:	d0e7      	beq.n	8001a9c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fcbd 	bl	800044c <HAL_ADC_ConvCpltCallback>
 8001ad2:	e7f1      	b.n	8001ab8 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fe8d 	bl	80017f4 <HAL_ADC_ErrorCallback>
}
 8001ada:	bd10      	pop	{r4, pc}

08001adc <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001adc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001ade:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ae0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ae6:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ae8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001af0:	f7ff fe80 	bl	80017f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001af4:	bd08      	pop	{r3, pc}
 8001af6:	bf00      	nop

08001af8 <HAL_ADC_ConfigChannel>:
{
 8001af8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8001afa:	2200      	movs	r2, #0
{
 8001afc:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8001afe:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001b00:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8001b04:	2a01      	cmp	r2, #1
 8001b06:	f000 80ef 	beq.w	8001ce8 <HAL_ADC_ConfigChannel+0x1f0>
 8001b0a:	2401      	movs	r4, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b0c:	6802      	ldr	r2, [r0, #0]
 8001b0e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001b10:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b14:	6890      	ldr	r0, [r2, #8]
 8001b16:	0745      	lsls	r5, r0, #29
 8001b18:	d509      	bpl.n	8001b2e <HAL_ADC_ConfigChannel+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8001b1c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1e:	f042 0220 	orr.w	r2, r2, #32
 8001b22:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8001b2a:	b002      	add	sp, #8
 8001b2c:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001b2e:	680d      	ldr	r5, [r1, #0]
 8001b30:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b32:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001b36:	db0d      	blt.n	8001b54 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b38:	f3c5 0613 	ubfx	r6, r5, #0, #20
 8001b3c:	2e00      	cmp	r6, #0
 8001b3e:	f000 80c1 	beq.w	8001cc4 <HAL_ADC_ConfigChannel+0x1cc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b46:	b115      	cbz	r5, 8001b4e <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001b48:	fab5 f585 	clz	r5, r5
 8001b4c:	40ac      	lsls	r4, r5
 8001b4e:	69d5      	ldr	r5, [r2, #28]
 8001b50:	432c      	orrs	r4, r5
 8001b52:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b54:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8001b56:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b5a:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8001b5e:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b62:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8001b64:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b68:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8001b6c:	fa0c fc04 	lsl.w	ip, ip, r4
 8001b70:	40a0      	lsls	r0, r4
 8001b72:	f85e 4005 	ldr.w	r4, [lr, r5]
 8001b76:	ea24 0c0c 	bic.w	ip, r4, ip
 8001b7a:	ea4c 0000 	orr.w	r0, ip, r0
 8001b7e:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b82:	6890      	ldr	r0, [r2, #8]
 8001b84:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b88:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b8c:	0700      	lsls	r0, r0, #28
 8001b8e:	d542      	bpl.n	8001c16 <HAL_ADC_ConfigChannel+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b90:	6890      	ldr	r0, [r2, #8]
 8001b92:	07c6      	lsls	r6, r0, #31
 8001b94:	d43d      	bmi.n	8001c12 <HAL_ADC_ConfigChannel+0x11a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b96:	68cd      	ldr	r5, [r1, #12]
 8001b98:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8001b9a:	f005 0618 	and.w	r6, r5, #24
 8001b9e:	48a9      	ldr	r0, [pc, #676]	@ (8001e44 <HAL_ADC_ConfigChannel+0x34c>)
 8001ba0:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8001ba4:	40f0      	lsrs	r0, r6
 8001ba6:	f3c4 0613 	ubfx	r6, r4, #0, #20
 8001baa:	4020      	ands	r0, r4
 8001bac:	ea21 0106 	bic.w	r1, r1, r6
 8001bb0:	4301      	orrs	r1, r0
 8001bb2:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bb6:	49a4      	ldr	r1, [pc, #656]	@ (8001e48 <HAL_ADC_ConfigChannel+0x350>)
 8001bb8:	428d      	cmp	r5, r1
 8001bba:	f000 808a 	beq.w	8001cd2 <HAL_ADC_ConfigChannel+0x1da>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bbe:	2c00      	cmp	r4, #0
 8001bc0:	da27      	bge.n	8001c12 <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bc2:	49a2      	ldr	r1, [pc, #648]	@ (8001e4c <HAL_ADC_ConfigChannel+0x354>)
 8001bc4:	428a      	cmp	r2, r1
 8001bc6:	f000 80bd 	beq.w	8001d44 <HAL_ADC_ConfigChannel+0x24c>
 8001bca:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8001bce:	428a      	cmp	r2, r1
 8001bd0:	f000 80b8 	beq.w	8001d44 <HAL_ADC_ConfigChannel+0x24c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bd4:	489e      	ldr	r0, [pc, #632]	@ (8001e50 <HAL_ADC_ConfigChannel+0x358>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bd6:	499f      	ldr	r1, [pc, #636]	@ (8001e54 <HAL_ADC_ConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bd8:	6886      	ldr	r6, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bda:	688d      	ldr	r5, [r1, #8]
 8001bdc:	07ed      	lsls	r5, r5, #31
 8001bde:	d49c      	bmi.n	8001b1a <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001be0:	4d9d      	ldr	r5, [pc, #628]	@ (8001e58 <HAL_ADC_ConfigChannel+0x360>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001be2:	f006 7ce0 	and.w	ip, r6, #29360128	@ 0x1c00000
 8001be6:	42ac      	cmp	r4, r5
 8001be8:	f000 8156 	beq.w	8001e98 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bec:	4d9b      	ldr	r5, [pc, #620]	@ (8001e5c <HAL_ADC_ConfigChannel+0x364>)
 8001bee:	42ac      	cmp	r4, r5
 8001bf0:	f000 8118 	beq.w	8001e24 <HAL_ADC_ConfigChannel+0x32c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bf4:	4d9a      	ldr	r5, [pc, #616]	@ (8001e60 <HAL_ADC_ConfigChannel+0x368>)
 8001bf6:	42ac      	cmp	r4, r5
 8001bf8:	d10b      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001bfa:	0274      	lsls	r4, r6, #9
 8001bfc:	d409      	bmi.n	8001c12 <HAL_ADC_ConfigChannel+0x11a>
 8001bfe:	428a      	cmp	r2, r1
 8001c00:	d107      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c02:	6882      	ldr	r2, [r0, #8]
 8001c04:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001c08:	ea42 020c 	orr.w	r2, r2, ip
 8001c0c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001c10:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c12:	2000      	movs	r0, #0
 8001c14:	e786      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c16:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c18:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 8001c1c:	f04f 0e07 	mov.w	lr, #7
 8001c20:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c22:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8001c24:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c28:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001c2c:	fa0e fe04 	lsl.w	lr, lr, r4
 8001c30:	fa06 f404 	lsl.w	r4, r6, r4
 8001c34:	f85c 0005 	ldr.w	r0, [ip, r5]
 8001c38:	ea20 000e 	bic.w	r0, r0, lr
 8001c3c:	4320      	orrs	r0, r4
 8001c3e:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c42:	4888      	ldr	r0, [pc, #544]	@ (8001e64 <HAL_ADC_ConfigChannel+0x36c>)
 8001c44:	694d      	ldr	r5, [r1, #20]
 8001c46:	6800      	ldr	r0, [r0, #0]
 8001c48:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8001c4c:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8001c50:	68d0      	ldr	r0, [r2, #12]
 8001c52:	d039      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x1d0>
 8001c54:	f010 0f10 	tst.w	r0, #16
 8001c58:	68d0      	ldr	r0, [r2, #12]
 8001c5a:	d035      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0x1d0>
 8001c5c:	0840      	lsrs	r0, r0, #1
 8001c5e:	f000 0008 	and.w	r0, r0, #8
 8001c62:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c64:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c66:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c68:	2e04      	cmp	r6, #4
 8001c6a:	d040      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x1f6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c6c:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8001c70:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8001c74:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 8001c78:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001c7c:	4320      	orrs	r0, r4
 8001c7e:	4328      	orrs	r0, r5
 8001c80:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c84:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c86:	690d      	ldr	r5, [r1, #16]
 8001c88:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c8c:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 8001c90:	fab4 f484 	clz	r4, r4
 8001c94:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001c98:	0964      	lsrs	r4, r4, #5
 8001c9a:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 8001c9e:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001ca2:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ca4:	690d      	ldr	r5, [r1, #16]
 8001ca6:	f1a0 0001 	sub.w	r0, r0, #1
 8001caa:	6914      	ldr	r4, [r2, #16]
 8001cac:	f005 051f 	and.w	r5, r5, #31
 8001cb0:	fab0 f080 	clz	r0, r0
 8001cb4:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 8001cb8:	0940      	lsrs	r0, r0, #5
 8001cba:	02c0      	lsls	r0, r0, #11
 8001cbc:	40a8      	lsls	r0, r5
 8001cbe:	4320      	orrs	r0, r4
 8001cc0:	6110      	str	r0, [r2, #16]
}
 8001cc2:	e765      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001cc4:	4084      	lsls	r4, r0
 8001cc6:	e742      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001cc8:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001ccc:	0040      	lsls	r0, r0, #1
 8001cce:	4085      	lsls	r5, r0
 8001cd0:	e7c8      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x16c>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001cd2:	495e      	ldr	r1, [pc, #376]	@ (8001e4c <HAL_ADC_ConfigChannel+0x354>)
 8001cd4:	428a      	cmp	r2, r1
 8001cd6:	d07a      	beq.n	8001dce <HAL_ADC_ConfigChannel+0x2d6>
 8001cd8:	4963      	ldr	r1, [pc, #396]	@ (8001e68 <HAL_ADC_ConfigChannel+0x370>)
 8001cda:	428a      	cmp	r2, r1
 8001cdc:	d040      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001cde:	69d1      	ldr	r1, [r2, #28]
 8001ce0:	f041 0101 	orr.w	r1, r1, #1
 8001ce4:	61d1      	str	r1, [r2, #28]
}
 8001ce6:	e76a      	b.n	8001bbe <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8001ce8:	2002      	movs	r0, #2
}
 8001cea:	b002      	add	sp, #8
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cee:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8001cf0:	0684      	lsls	r4, r0, #26
 8001cf2:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8001cf6:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8001cfa:	d014      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x22e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cfc:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001cfe:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001d02:	4284      	cmp	r4, r0
 8001d04:	d019      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d06:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001d08:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001d0c:	4284      	cmp	r4, r0
 8001d0e:	d00f      	beq.n	8001d30 <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d10:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001d12:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001d16:	4284      	cmp	r4, r0
 8001d18:	f47f af3a 	bne.w	8001b90 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d1c:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001d1e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001d22:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8001d24:	e734      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d26:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8001d28:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001d2c:	6610      	str	r0, [r2, #96]	@ 0x60
 8001d2e:	e7e5      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x204>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d30:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001d32:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001d36:	6690      	str	r0, [r2, #104]	@ 0x68
 8001d38:	e7ea      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x218>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d3a:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001d3c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001d40:	6650      	str	r0, [r2, #100]	@ 0x64
 8001d42:	e7e0      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x20e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d44:	4949      	ldr	r1, [pc, #292]	@ (8001e6c <HAL_ADC_ConfigChannel+0x374>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d46:	4a41      	ldr	r2, [pc, #260]	@ (8001e4c <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d48:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d4a:	6892      	ldr	r2, [r2, #8]
 8001d4c:	f012 0f01 	tst.w	r2, #1
 8001d50:	4a45      	ldr	r2, [pc, #276]	@ (8001e68 <HAL_ADC_ConfigChannel+0x370>)
 8001d52:	6892      	ldr	r2, [r2, #8]
 8001d54:	f47f aee1 	bne.w	8001b1a <HAL_ADC_ConfigChannel+0x22>
 8001d58:	07d2      	lsls	r2, r2, #31
 8001d5a:	f53f aede 	bmi.w	8001b1a <HAL_ADC_ConfigChannel+0x22>
 8001d5e:	e758      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001d60:	4943      	ldr	r1, [pc, #268]	@ (8001e70 <HAL_ADC_ConfigChannel+0x378>)
 8001d62:	428c      	cmp	r4, r1
 8001d64:	d058      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x320>
 8001d66:	4943      	ldr	r1, [pc, #268]	@ (8001e74 <HAL_ADC_ConfigChannel+0x37c>)
 8001d68:	428c      	cmp	r4, r1
 8001d6a:	d057      	beq.n	8001e1c <HAL_ADC_ConfigChannel+0x324>
 8001d6c:	4942      	ldr	r1, [pc, #264]	@ (8001e78 <HAL_ADC_ConfigChannel+0x380>)
 8001d6e:	428c      	cmp	r4, r1
 8001d70:	f000 80b5 	beq.w	8001ede <HAL_ADC_ConfigChannel+0x3e6>
 8001d74:	4941      	ldr	r1, [pc, #260]	@ (8001e7c <HAL_ADC_ConfigChannel+0x384>)
 8001d76:	428c      	cmp	r4, r1
 8001d78:	f000 80b3 	beq.w	8001ee2 <HAL_ADC_ConfigChannel+0x3ea>
 8001d7c:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001d80:	3110      	adds	r1, #16
 8001d82:	428c      	cmp	r4, r1
 8001d84:	f000 80af 	beq.w	8001ee6 <HAL_ADC_ConfigChannel+0x3ee>
 8001d88:	493d      	ldr	r1, [pc, #244]	@ (8001e80 <HAL_ADC_ConfigChannel+0x388>)
 8001d8a:	428c      	cmp	r4, r1
 8001d8c:	f000 80ad 	beq.w	8001eea <HAL_ADC_ConfigChannel+0x3f2>
 8001d90:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8001d94:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8001d98:	428c      	cmp	r4, r1
 8001d9a:	f000 80a8 	beq.w	8001eee <HAL_ADC_ConfigChannel+0x3f6>
 8001d9e:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001da2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001da6:	428c      	cmp	r4, r1
 8001da8:	f000 80a3 	beq.w	8001ef2 <HAL_ADC_ConfigChannel+0x3fa>
 8001dac:	4935      	ldr	r1, [pc, #212]	@ (8001e84 <HAL_ADC_ConfigChannel+0x38c>)
 8001dae:	428c      	cmp	r4, r1
 8001db0:	d195      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x1e6>
 8001db2:	4935      	ldr	r1, [pc, #212]	@ (8001e88 <HAL_ADC_ConfigChannel+0x390>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001db8:	2900      	cmp	r1, #0
 8001dba:	d031      	beq.n	8001e20 <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 8001dbc:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f101 	lsl.w	r1, r0, r1
 8001dc6:	69d0      	ldr	r0, [r2, #28]
 8001dc8:	4301      	orrs	r1, r0
 8001dca:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001dcc:	e721      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001dce:	4928      	ldr	r1, [pc, #160]	@ (8001e70 <HAL_ADC_ConfigChannel+0x378>)
 8001dd0:	428c      	cmp	r4, r1
 8001dd2:	d021      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x320>
 8001dd4:	4927      	ldr	r1, [pc, #156]	@ (8001e74 <HAL_ADC_ConfigChannel+0x37c>)
 8001dd6:	428c      	cmp	r4, r1
 8001dd8:	d020      	beq.n	8001e1c <HAL_ADC_ConfigChannel+0x324>
 8001dda:	4927      	ldr	r1, [pc, #156]	@ (8001e78 <HAL_ADC_ConfigChannel+0x380>)
 8001ddc:	428c      	cmp	r4, r1
 8001dde:	d07e      	beq.n	8001ede <HAL_ADC_ConfigChannel+0x3e6>
 8001de0:	4926      	ldr	r1, [pc, #152]	@ (8001e7c <HAL_ADC_ConfigChannel+0x384>)
 8001de2:	428c      	cmp	r4, r1
 8001de4:	d07d      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x3ea>
 8001de6:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001dea:	3110      	adds	r1, #16
 8001dec:	428c      	cmp	r4, r1
 8001dee:	d07a      	beq.n	8001ee6 <HAL_ADC_ConfigChannel+0x3ee>
 8001df0:	4923      	ldr	r1, [pc, #140]	@ (8001e80 <HAL_ADC_ConfigChannel+0x388>)
 8001df2:	428c      	cmp	r4, r1
 8001df4:	d079      	beq.n	8001eea <HAL_ADC_ConfigChannel+0x3f2>
 8001df6:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8001dfa:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d075      	beq.n	8001eee <HAL_ADC_ConfigChannel+0x3f6>
 8001e02:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001e06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001e0a:	428c      	cmp	r4, r1
 8001e0c:	d071      	beq.n	8001ef2 <HAL_ADC_ConfigChannel+0x3fa>
 8001e0e:	491f      	ldr	r1, [pc, #124]	@ (8001e8c <HAL_ADC_ConfigChannel+0x394>)
 8001e10:	428c      	cmp	r4, r1
 8001e12:	d1cb      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x2b4>
 8001e14:	491e      	ldr	r1, [pc, #120]	@ (8001e90 <HAL_ADC_ConfigChannel+0x398>)
 8001e16:	e7cd      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2bc>
 8001e18:	2101      	movs	r1, #1
 8001e1a:	e7cb      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2bc>
 8001e1c:	491d      	ldr	r1, [pc, #116]	@ (8001e94 <HAL_ADC_ConfigChannel+0x39c>)
 8001e1e:	e7c9      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2bc>
 8001e20:	2101      	movs	r1, #1
 8001e22:	e7d0      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x2ce>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e24:	01f5      	lsls	r5, r6, #7
 8001e26:	f53f aef4 	bmi.w	8001c12 <HAL_ADC_ConfigChannel+0x11a>
 8001e2a:	428a      	cmp	r2, r1
 8001e2c:	f47f aef1 	bne.w	8001c12 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e30:	6882      	ldr	r2, [r0, #8]
 8001e32:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001e36:	ea42 020c 	orr.w	r2, r2, ip
 8001e3a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001e3e:	6082      	str	r2, [r0, #8]
}
 8001e40:	e6e7      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x11a>
 8001e42:	bf00      	nop
 8001e44:	000fffff 	.word	0x000fffff
 8001e48:	47ff0000 	.word	0x47ff0000
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	58026300 	.word	0x58026300
 8001e54:	58026000 	.word	0x58026000
 8001e58:	cb840000 	.word	0xcb840000
 8001e5c:	c7520000 	.word	0xc7520000
 8001e60:	cfb80000 	.word	0xcfb80000
 8001e64:	5c001000 	.word	0x5c001000
 8001e68:	40022100 	.word	0x40022100
 8001e6c:	40022300 	.word	0x40022300
 8001e70:	04300002 	.word	0x04300002
 8001e74:	08600004 	.word	0x08600004
 8001e78:	0c900008 	.word	0x0c900008
 8001e7c:	10c00010 	.word	0x10c00010
 8001e80:	2a000400 	.word	0x2a000400
 8001e84:	4b840000 	.word	0x4b840000
 8001e88:	4fb80000 	.word	0x4fb80000
 8001e8c:	43210000 	.word	0x43210000
 8001e90:	47520000 	.word	0x47520000
 8001e94:	19200040 	.word	0x19200040
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e98:	0236      	lsls	r6, r6, #8
 8001e9a:	f53f aeba 	bmi.w	8001c12 <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e9e:	428a      	cmp	r2, r1
 8001ea0:	f47f aeb7 	bne.w	8001c12 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ea4:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ea6:	4914      	ldr	r1, [pc, #80]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x400>)
 8001ea8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001eac:	ea42 020c 	orr.w	r2, r2, ip
 8001eb0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001eb4:	6082      	str	r2, [r0, #8]
 8001eb6:	680a      	ldr	r2, [r1, #0]
 8001eb8:	4910      	ldr	r1, [pc, #64]	@ (8001efc <HAL_ADC_ConfigChannel+0x404>)
 8001eba:	0992      	lsrs	r2, r2, #6
 8001ebc:	fba1 1202 	umull	r1, r2, r1, r2
 8001ec0:	0992      	lsrs	r2, r2, #6
 8001ec2:	3201      	adds	r2, #1
 8001ec4:	0052      	lsls	r2, r2, #1
 8001ec6:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001ec8:	9a01      	ldr	r2, [sp, #4]
 8001eca:	2a00      	cmp	r2, #0
 8001ecc:	f43f aea1 	beq.w	8001c12 <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 8001ed0:	9a01      	ldr	r2, [sp, #4]
 8001ed2:	3a01      	subs	r2, #1
 8001ed4:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001ed6:	9a01      	ldr	r2, [sp, #4]
 8001ed8:	2a00      	cmp	r2, #0
 8001eda:	d1f9      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x3d8>
 8001edc:	e699      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001ede:	4908      	ldr	r1, [pc, #32]	@ (8001f00 <HAL_ADC_ConfigChannel+0x408>)
 8001ee0:	e768      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2bc>
 8001ee2:	4908      	ldr	r1, [pc, #32]	@ (8001f04 <HAL_ADC_ConfigChannel+0x40c>)
 8001ee4:	e766      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2bc>
 8001ee6:	4908      	ldr	r1, [pc, #32]	@ (8001f08 <HAL_ADC_ConfigChannel+0x410>)
 8001ee8:	e764      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2bc>
 8001eea:	4908      	ldr	r1, [pc, #32]	@ (8001f0c <HAL_ADC_ConfigChannel+0x414>)
 8001eec:	e762      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2bc>
 8001eee:	4908      	ldr	r1, [pc, #32]	@ (8001f10 <HAL_ADC_ConfigChannel+0x418>)
 8001ef0:	e760      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2bc>
 8001ef2:	4908      	ldr	r1, [pc, #32]	@ (8001f14 <HAL_ADC_ConfigChannel+0x41c>)
 8001ef4:	e75e      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2bc>
 8001ef6:	bf00      	nop
 8001ef8:	24000070 	.word	0x24000070
 8001efc:	053e2d63 	.word	0x053e2d63
 8001f00:	1d500080 	.word	0x1d500080
 8001f04:	21800100 	.word	0x21800100
 8001f08:	25b00200 	.word	0x25b00200
 8001f0c:	2e300800 	.word	0x2e300800
 8001f10:	32601000 	.word	0x32601000
 8001f14:	36902000 	.word	0x36902000

08001f18 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f18:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	07d1      	lsls	r1, r2, #31
 8001f1e:	d501      	bpl.n	8001f24 <ADC_Enable+0xc>
  return HAL_OK;
 8001f20:	2000      	movs	r0, #0
}
 8001f22:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f24:	6899      	ldr	r1, [r3, #8]
 8001f26:	4a23      	ldr	r2, [pc, #140]	@ (8001fb4 <ADC_Enable+0x9c>)
 8001f28:	4211      	tst	r1, r2
{
 8001f2a:	b570      	push	{r4, r5, r6, lr}
 8001f2c:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f2e:	d12f      	bne.n	8001f90 <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 8001f30:	6899      	ldr	r1, [r3, #8]
 8001f32:	4a21      	ldr	r2, [pc, #132]	@ (8001fb8 <ADC_Enable+0xa0>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001f3c:	f7ff fc46 	bl	80017cc <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	4a1e      	ldr	r2, [pc, #120]	@ (8001fbc <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 8001f44:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d02c      	beq.n	8001fa4 <ADC_Enable+0x8c>
 8001f4a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d028      	beq.n	8001fa4 <ADC_Enable+0x8c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f52:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 8001f56:	f502 4284 	add.w	r2, r2, #16896	@ 0x4200
 8001f5a:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	07d2      	lsls	r2, r2, #31
 8001f60:	d414      	bmi.n	8001f8c <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 8001f62:	4e15      	ldr	r6, [pc, #84]	@ (8001fb8 <ADC_Enable+0xa0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	07d0      	lsls	r0, r2, #31
 8001f68:	d404      	bmi.n	8001f74 <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	4032      	ands	r2, r6
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f74:	f7ff fc2a 	bl	80017cc <HAL_GetTick>
 8001f78:	1b43      	subs	r3, r0, r5
 8001f7a:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f7c:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f7e:	d902      	bls.n	8001f86 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	07d1      	lsls	r1, r2, #31
 8001f84:	d504      	bpl.n	8001f90 <ADC_Enable+0x78>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	07d2      	lsls	r2, r2, #31
 8001f8a:	d5eb      	bpl.n	8001f64 <ADC_Enable+0x4c>
  return HAL_OK;
 8001f8c:	2000      	movs	r0, #0
}
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f90:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001f92:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8001fa2:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fa4:	4a06      	ldr	r2, [pc, #24]	@ (8001fc0 <ADC_Enable+0xa8>)
 8001fa6:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fa8:	06d6      	lsls	r6, r2, #27
 8001faa:	d0d7      	beq.n	8001f5c <ADC_Enable+0x44>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fac:	4a05      	ldr	r2, [pc, #20]	@ (8001fc4 <ADC_Enable+0xac>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d1d4      	bne.n	8001f5c <ADC_Enable+0x44>
 8001fb2:	e7eb      	b.n	8001f8c <ADC_Enable+0x74>
 8001fb4:	8000003f 	.word	0x8000003f
 8001fb8:	7fffffc0 	.word	0x7fffffc0
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40022300 	.word	0x40022300
 8001fc4:	40022100 	.word	0x40022100

08001fc8 <HAL_ADC_Start_DMA>:
{
 8001fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80020bc <HAL_ADC_Start_DMA+0xf4>)
{
 8001fce:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd0:	6800      	ldr	r0, [r0, #0]
{
 8001fd2:	460e      	mov	r6, r1
 8001fd4:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d01c      	beq.n	8002014 <HAL_ADC_Start_DMA+0x4c>
 8001fda:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001fde:	4298      	cmp	r0, r3
 8001fe0:	d018      	beq.n	8002014 <HAL_ADC_Start_DMA+0x4c>
 8001fe2:	4b37      	ldr	r3, [pc, #220]	@ (80020c0 <HAL_ADC_Start_DMA+0xf8>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fe6:	6885      	ldr	r5, [r0, #8]
 8001fe8:	f015 0504 	ands.w	r5, r5, #4
 8001fec:	d118      	bne.n	8002020 <HAL_ADC_Start_DMA+0x58>
    __HAL_LOCK(hadc);
 8001fee:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8001ff2:	2a01      	cmp	r2, #1
 8001ff4:	d014      	beq.n	8002020 <HAL_ADC_Start_DMA+0x58>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ff6:	f003 081f 	and.w	r8, r3, #31
 8001ffa:	f240 2321 	movw	r3, #545	@ 0x221
 8001ffe:	2001      	movs	r0, #1
 8002000:	fa23 f308 	lsr.w	r3, r3, r8
 8002004:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002008:	4003      	ands	r3, r0
 800200a:	d10c      	bne.n	8002026 <HAL_ADC_Start_DMA+0x5e>
      __HAL_UNLOCK(hadc);
 800200c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8002010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002014:	4b2b      	ldr	r3, [pc, #172]	@ (80020c4 <HAL_ADC_Start_DMA+0xfc>)
 8002016:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002018:	6885      	ldr	r5, [r0, #8]
 800201a:	f015 0504 	ands.w	r5, r5, #4
 800201e:	d0e6      	beq.n	8001fee <HAL_ADC_Start_DMA+0x26>
    __HAL_LOCK(hadc);
 8002020:	2002      	movs	r0, #2
}
 8002022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002026:	4620      	mov	r0, r4
 8002028:	f7ff ff76 	bl	8001f18 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800202c:	2800      	cmp	r0, #0
 800202e:	d140      	bne.n	80020b2 <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 8002030:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002032:	4b25      	ldr	r3, [pc, #148]	@ (80020c8 <HAL_ADC_Start_DMA+0x100>)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002034:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002036:	4013      	ands	r3, r2
 8002038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203c:	6563      	str	r3, [r4, #84]	@ 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800203e:	f1b8 0f00 	cmp.w	r8, #0
 8002042:	d002      	beq.n	800204a <HAL_ADC_Start_DMA+0x82>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002044:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <HAL_ADC_Start_DMA+0x104>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002046:	4299      	cmp	r1, r3
 8002048:	d003      	beq.n	8002052 <HAL_ADC_Start_DMA+0x8a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800204a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800204c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002050:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002052:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002054:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8002058:	d02e      	beq.n	80020b8 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800205a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800205c:	f023 0306 	bic.w	r3, r3, #6
 8002060:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002062:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002064:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002066:	4d1a      	ldr	r5, [pc, #104]	@ (80020d0 <HAL_ADC_Start_DMA+0x108>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002068:	463b      	mov	r3, r7
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800206a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800206c:	3140      	adds	r1, #64	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800206e:	63c5      	str	r5, [r0, #60]	@ 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002070:	4d18      	ldr	r5, [pc, #96]	@ (80020d4 <HAL_ADC_Start_DMA+0x10c>)
 8002072:	6405      	str	r5, [r0, #64]	@ 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002074:	4d18      	ldr	r5, [pc, #96]	@ (80020d8 <HAL_ADC_Start_DMA+0x110>)
 8002076:	64c5      	str	r5, [r0, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002078:	251c      	movs	r5, #28
 800207a:	f841 5c40 	str.w	r5, [r1, #-64]
        __HAL_UNLOCK(hadc);
 800207e:	2500      	movs	r5, #0
 8002080:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002084:	f851 5c3c 	ldr.w	r5, [r1, #-60]
 8002088:	f045 0510 	orr.w	r5, r5, #16
 800208c:	f841 5c3c 	str.w	r5, [r1, #-60]
 8002090:	f851 5c34 	ldr.w	r5, [r1, #-52]
 8002094:	f025 0503 	bic.w	r5, r5, #3
 8002098:	4335      	orrs	r5, r6
 800209a:	f841 5c34 	str.w	r5, [r1, #-52]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800209e:	f001 f8bb 	bl	8003218 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020a2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80020a4:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <HAL_ADC_Start_DMA+0x114>)
 80020a6:	6891      	ldr	r1, [r2, #8]
 80020a8:	400b      	ands	r3, r1
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	6093      	str	r3, [r2, #8]
}
 80020b0:	e7b7      	b.n	8002022 <HAL_ADC_Start_DMA+0x5a>
        __HAL_UNLOCK(hadc);
 80020b2:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 80020b6:	e7b4      	b.n	8002022 <HAL_ADC_Start_DMA+0x5a>
          ADC_CLEAR_ERRORCODE(hadc);
 80020b8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80020ba:	e7d2      	b.n	8002062 <HAL_ADC_Start_DMA+0x9a>
 80020bc:	40022000 	.word	0x40022000
 80020c0:	58026300 	.word	0x58026300
 80020c4:	40022300 	.word	0x40022300
 80020c8:	fffff0fe 	.word	0xfffff0fe
 80020cc:	40022100 	.word	0x40022100
 80020d0:	08001a71 	.word	0x08001a71
 80020d4:	080017e5 	.word	0x080017e5
 80020d8:	08001add 	.word	0x08001add
 80020dc:	7fffffc0 	.word	0x7fffffc0

080020e0 <ADC_Disable>:
{
 80020e0:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80020e2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	0795      	lsls	r5, r2, #30
 80020e8:	d502      	bpl.n	80020f0 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ea:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80020ec:	2000      	movs	r0, #0
}
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	07d4      	lsls	r4, r2, #31
 80020f4:	d5fa      	bpl.n	80020ec <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	4604      	mov	r4, r0
 80020fa:	f002 020d 	and.w	r2, r2, #13
 80020fe:	2a01      	cmp	r2, #1
 8002100:	d009      	beq.n	8002116 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002102:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8002104:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002106:	f043 0310 	orr.w	r3, r3, #16
 800210a:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8002114:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002116:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002118:	2103      	movs	r1, #3
 800211a:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <ADC_Disable+0x70>)
 800211c:	4002      	ands	r2, r0
 800211e:	f042 0202 	orr.w	r2, r2, #2
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002126:	f7ff fb51 	bl	80017cc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800212a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800212c:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	07d9      	lsls	r1, r3, #31
 8002132:	d403      	bmi.n	800213c <ADC_Disable+0x5c>
 8002134:	e7da      	b.n	80020ec <ADC_Disable+0xc>
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	07db      	lsls	r3, r3, #31
 800213a:	d5d7      	bpl.n	80020ec <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800213c:	f7ff fb46 	bl	80017cc <HAL_GetTick>
 8002140:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002142:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002144:	2802      	cmp	r0, #2
 8002146:	d9f6      	bls.n	8002136 <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	07d2      	lsls	r2, r2, #31
 800214c:	d5f3      	bpl.n	8002136 <ADC_Disable+0x56>
 800214e:	e7d8      	b.n	8002102 <ADC_Disable+0x22>
 8002150:	7fffffc0 	.word	0x7fffffc0

08002154 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002154:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002156:	4a4f      	ldr	r2, [pc, #316]	@ (8002294 <ADC_ConfigureBoostMode+0x140>)
{
 8002158:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800215a:	6803      	ldr	r3, [r0, #0]
 800215c:	4293      	cmp	r3, r2
 800215e:	d024      	beq.n	80021aa <ADC_ConfigureBoostMode+0x56>
 8002160:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002164:	4293      	cmp	r3, r2
 8002166:	d020      	beq.n	80021aa <ADC_ConfigureBoostMode+0x56>
 8002168:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <ADC_ConfigureBoostMode+0x144>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8002170:	d020      	beq.n	80021b4 <ADC_ConfigureBoostMode+0x60>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002172:	f002 fcdd 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002176:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8002178:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800217a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800217e:	d06d      	beq.n	800225c <ADC_ConfigureBoostMode+0x108>
 8002180:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002184:	d072      	beq.n	800226c <ADC_ConfigureBoostMode+0x118>
 8002186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800218a:	d067      	beq.n	800225c <ADC_ConfigureBoostMode+0x108>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800218c:	f7ff fb24 	bl	80017d8 <HAL_GetREVID>
 8002190:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002194:	4298      	cmp	r0, r3
 8002196:	d82d      	bhi.n	80021f4 <ADC_ConfigureBoostMode+0xa0>
  {
    if (freq > 20000000UL)
 8002198:	4a40      	ldr	r2, [pc, #256]	@ (800229c <ADC_ConfigureBoostMode+0x148>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800219a:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 800219c:	4295      	cmp	r5, r2
 800219e:	d947      	bls.n	8002230 <ADC_ConfigureBoostMode+0xdc>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021a6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80021a8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80021aa:	4b3d      	ldr	r3, [pc, #244]	@ (80022a0 <ADC_ConfigureBoostMode+0x14c>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80021b2:	d1de      	bne.n	8002172 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80021b4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80021b8:	2100      	movs	r1, #0
 80021ba:	f003 ff33 	bl	8006024 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80021be:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80021c0:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80021c2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80021c6:	d04d      	beq.n	8002264 <ADC_ConfigureBoostMode+0x110>
 80021c8:	d825      	bhi.n	8002216 <ADC_ConfigureBoostMode+0xc2>
 80021ca:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80021ce:	d04b      	beq.n	8002268 <ADC_ConfigureBoostMode+0x114>
 80021d0:	d84e      	bhi.n	8002270 <ADC_ConfigureBoostMode+0x11c>
 80021d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021d6:	d008      	beq.n	80021ea <ADC_ConfigureBoostMode+0x96>
 80021d8:	d855      	bhi.n	8002286 <ADC_ConfigureBoostMode+0x132>
 80021da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80021de:	d004      	beq.n	80021ea <ADC_ConfigureBoostMode+0x96>
 80021e0:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80021e4:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 80021e8:	d1d0      	bne.n	800218c <ADC_ConfigureBoostMode+0x38>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80021ea:	0c9b      	lsrs	r3, r3, #18
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80021f2:	e7cb      	b.n	800218c <ADC_ConfigureBoostMode+0x38>
    if (freq <= 6250000UL)
 80021f4:	4a2b      	ldr	r2, [pc, #172]	@ (80022a4 <ADC_ConfigureBoostMode+0x150>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80021f6:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 80021f8:	4295      	cmp	r5, r2
 80021fa:	d923      	bls.n	8002244 <ADC_ConfigureBoostMode+0xf0>
    else if (freq <= 12500000UL)
 80021fc:	4a2a      	ldr	r2, [pc, #168]	@ (80022a8 <ADC_ConfigureBoostMode+0x154>)
 80021fe:	4295      	cmp	r5, r2
 8002200:	d925      	bls.n	800224e <ADC_ConfigureBoostMode+0xfa>
    else if (freq <= 25000000UL)
 8002202:	4a2a      	ldr	r2, [pc, #168]	@ (80022ac <ADC_ConfigureBoostMode+0x158>)
 8002204:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002206:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8002208:	d839      	bhi.n	800227e <ADC_ConfigureBoostMode+0x12a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800220a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800220e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002212:	609a      	str	r2, [r3, #8]
}
 8002214:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8002216:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800221a:	d02e      	beq.n	800227a <ADC_ConfigureBoostMode+0x126>
 800221c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002220:	d1b4      	bne.n	800218c <ADC_ConfigureBoostMode+0x38>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002222:	f7ff fad9 	bl	80017d8 <HAL_GetREVID>
 8002226:	f241 0303 	movw	r3, #4099	@ 0x1003
 800222a:	4298      	cmp	r0, r3
 800222c:	d805      	bhi.n	800223a <ADC_ConfigureBoostMode+0xe6>
 800222e:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002236:	609a      	str	r2, [r3, #8]
}
 8002238:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 800223a:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <ADC_ConfigureBoostMode+0x150>)
 800223c:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	d304      	bcc.n	800224e <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002258:	609a      	str	r2, [r3, #8]
}
 800225a:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8002262:	e793      	b.n	800218c <ADC_ConfigureBoostMode+0x38>
        freq /= 64UL;
 8002264:	0985      	lsrs	r5, r0, #6
        break;
 8002266:	e791      	b.n	800218c <ADC_ConfigureBoostMode+0x38>
        freq /= 16UL;
 8002268:	0905      	lsrs	r5, r0, #4
        break;
 800226a:	e78f      	b.n	800218c <ADC_ConfigureBoostMode+0x38>
        freq /= 4UL;
 800226c:	0885      	lsrs	r5, r0, #2
        break;
 800226e:	e78d      	b.n	800218c <ADC_ConfigureBoostMode+0x38>
    switch (hadc->Init.ClockPrescaler)
 8002270:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002274:	d18a      	bne.n	800218c <ADC_ConfigureBoostMode+0x38>
        freq /= 32UL;
 8002276:	0945      	lsrs	r5, r0, #5
        break;
 8002278:	e788      	b.n	800218c <ADC_ConfigureBoostMode+0x38>
        freq /= 128UL;
 800227a:	09c5      	lsrs	r5, r0, #7
        break;
 800227c:	e786      	b.n	800218c <ADC_ConfigureBoostMode+0x38>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800227e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002282:	609a      	str	r2, [r3, #8]
}
 8002284:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8002286:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800228a:	d0ae      	beq.n	80021ea <ADC_ConfigureBoostMode+0x96>
 800228c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002290:	d0ab      	beq.n	80021ea <ADC_ConfigureBoostMode+0x96>
 8002292:	e77b      	b.n	800218c <ADC_ConfigureBoostMode+0x38>
 8002294:	40022000 	.word	0x40022000
 8002298:	58026300 	.word	0x58026300
 800229c:	01312d00 	.word	0x01312d00
 80022a0:	40022300 	.word	0x40022300
 80022a4:	00bebc21 	.word	0x00bebc21
 80022a8:	017d7841 	.word	0x017d7841
 80022ac:	02faf081 	.word	0x02faf081

080022b0 <HAL_ADC_Init>:
{
 80022b0:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80022b2:	2300      	movs	r3, #0
{
 80022b4:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80022b6:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80022b8:	2800      	cmp	r0, #0
 80022ba:	f000 80a9 	beq.w	8002410 <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022be:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80022c0:	4604      	mov	r4, r0
 80022c2:	2d00      	cmp	r5, #0
 80022c4:	f000 80aa 	beq.w	800241c <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022c8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022ca:	6893      	ldr	r3, [r2, #8]
 80022cc:	009d      	lsls	r5, r3, #2
 80022ce:	d503      	bpl.n	80022d8 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022d0:	6891      	ldr	r1, [r2, #8]
 80022d2:	4b71      	ldr	r3, [pc, #452]	@ (8002498 <HAL_ADC_Init+0x1e8>)
 80022d4:	400b      	ands	r3, r1
 80022d6:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022d8:	6893      	ldr	r3, [r2, #8]
 80022da:	00d8      	lsls	r0, r3, #3
 80022dc:	d416      	bmi.n	800230c <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022de:	4b6f      	ldr	r3, [pc, #444]	@ (800249c <HAL_ADC_Init+0x1ec>)
 80022e0:	496f      	ldr	r1, [pc, #444]	@ (80024a0 <HAL_ADC_Init+0x1f0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80022e4:	6890      	ldr	r0, [r2, #8]
 80022e6:	099b      	lsrs	r3, r3, #6
 80022e8:	fba1 1303 	umull	r1, r3, r1, r3
 80022ec:	496d      	ldr	r1, [pc, #436]	@ (80024a4 <HAL_ADC_Init+0x1f4>)
 80022ee:	099b      	lsrs	r3, r3, #6
 80022f0:	4001      	ands	r1, r0
 80022f2:	3301      	adds	r3, #1
 80022f4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80022f8:	6091      	str	r1, [r2, #8]
 80022fa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80022fc:	9b01      	ldr	r3, [sp, #4]
 80022fe:	b12b      	cbz	r3, 800230c <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8002300:	9b01      	ldr	r3, [sp, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002306:	9b01      	ldr	r3, [sp, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f9      	bne.n	8002300 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800230c:	6893      	ldr	r3, [r2, #8]
 800230e:	00d9      	lsls	r1, r3, #3
 8002310:	f100 8082 	bmi.w	8002418 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002314:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8002316:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002318:	f043 0310 	orr.w	r3, r3, #16
 800231c:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002320:	432b      	orrs	r3, r5
 8002322:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002324:	6893      	ldr	r3, [r2, #8]
 8002326:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800232a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800232c:	d16c      	bne.n	8002408 <HAL_ADC_Init+0x158>
 800232e:	06db      	lsls	r3, r3, #27
 8002330:	d46a      	bmi.n	8002408 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 8002332:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002334:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800233e:	6893      	ldr	r3, [r2, #8]
 8002340:	07de      	lsls	r6, r3, #31
 8002342:	d40c      	bmi.n	800235e <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002344:	4b58      	ldr	r3, [pc, #352]	@ (80024a8 <HAL_ADC_Init+0x1f8>)
 8002346:	429a      	cmp	r2, r3
 8002348:	f000 8081 	beq.w	800244e <HAL_ADC_Init+0x19e>
 800234c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002350:	429a      	cmp	r2, r3
 8002352:	d07c      	beq.n	800244e <HAL_ADC_Init+0x19e>
 8002354:	4b55      	ldr	r3, [pc, #340]	@ (80024ac <HAL_ADC_Init+0x1fc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	07d9      	lsls	r1, r3, #31
 800235a:	f140 808a 	bpl.w	8002472 <HAL_ADC_Init+0x1c2>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800235e:	f7ff fa3b 	bl	80017d8 <HAL_GetREVID>
 8002362:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002366:	68a1      	ldr	r1, [r4, #8]
 8002368:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800236a:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800236c:	d85c      	bhi.n	8002428 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800236e:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002372:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002374:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002376:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 800237a:	4302      	orrs	r2, r0
 800237c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800237e:	2b01      	cmp	r3, #1
 8002380:	d103      	bne.n	800238a <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002382:	6a23      	ldr	r3, [r4, #32]
 8002384:	3b01      	subs	r3, #1
 8002386:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800238a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800238c:	b123      	cbz	r3, 8002398 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800238e:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002392:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002394:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002396:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	4945      	ldr	r1, [pc, #276]	@ (80024b0 <HAL_ADC_Init+0x200>)
 800239c:	68d8      	ldr	r0, [r3, #12]
 800239e:	4001      	ands	r1, r0
 80023a0:	4311      	orrs	r1, r2
 80023a2:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023aa:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023ac:	d11c      	bne.n	80023e8 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023ae:	0712      	lsls	r2, r2, #28
 80023b0:	d41a      	bmi.n	80023e8 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023b2:	68d8      	ldr	r0, [r3, #12]
 80023b4:	4a3f      	ldr	r2, [pc, #252]	@ (80024b4 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023b6:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023b8:	4002      	ands	r2, r0
 80023ba:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 80023be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80023c4:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80023c8:	2a01      	cmp	r2, #1
 80023ca:	d054      	beq.n	8002476 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023d4:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80023d6:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023da:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80023de:	430a      	orrs	r2, r1
 80023e0:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 80023e2:	f7ff feb7 	bl	8002154 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023e6:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023e8:	68e2      	ldr	r2, [r4, #12]
 80023ea:	2a01      	cmp	r2, #1
 80023ec:	d027      	beq.n	800243e <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023f0:	f022 020f 	bic.w	r2, r2, #15
 80023f4:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023f6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 80023f8:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8002404:	b002      	add	sp, #8
 8002406:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002408:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800240a:	f043 0310 	orr.w	r3, r3, #16
 800240e:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8002410:	2501      	movs	r5, #1
}
 8002412:	4628      	mov	r0, r5
 8002414:	b002      	add	sp, #8
 8002416:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002418:	2500      	movs	r5, #0
 800241a:	e783      	b.n	8002324 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 800241c:	f7fe fdf8 	bl	8001010 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002420:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8002422:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8002426:	e74f      	b.n	80022c8 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002428:	2910      	cmp	r1, #16
 800242a:	d1a0      	bne.n	800236e <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800242c:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800242e:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002430:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002434:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002436:	430a      	orrs	r2, r1
 8002438:	f042 021c 	orr.w	r2, r2, #28
 800243c:	e79f      	b.n	800237e <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800243e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002440:	69a2      	ldr	r2, [r4, #24]
 8002442:	f021 010f 	bic.w	r1, r1, #15
 8002446:	3a01      	subs	r2, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	631a      	str	r2, [r3, #48]	@ 0x30
 800244c:	e7d3      	b.n	80023f6 <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800244e:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <HAL_ADC_Init+0x1f8>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f013 0f01 	tst.w	r3, #1
 8002456:	4b18      	ldr	r3, [pc, #96]	@ (80024b8 <HAL_ADC_Init+0x208>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	d180      	bne.n	800235e <HAL_ADC_Init+0xae>
 800245c:	07d8      	lsls	r0, r3, #31
 800245e:	f53f af7e 	bmi.w	800235e <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002462:	4a16      	ldr	r2, [pc, #88]	@ (80024bc <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002464:	6893      	ldr	r3, [r2, #8]
 8002466:	6861      	ldr	r1, [r4, #4]
 8002468:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800246c:	430b      	orrs	r3, r1
 800246e:	6093      	str	r3, [r2, #8]
}
 8002470:	e775      	b.n	800235e <HAL_ADC_Init+0xae>
 8002472:	4a13      	ldr	r2, [pc, #76]	@ (80024c0 <HAL_ADC_Init+0x210>)
 8002474:	e7f6      	b.n	8002464 <HAL_ADC_Init+0x1b4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002476:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 800247a:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800247c:	3901      	subs	r1, #1
 800247e:	6918      	ldr	r0, [r3, #16]
 8002480:	4332      	orrs	r2, r6
 8002482:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002486:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002488:	430a      	orrs	r2, r1
 800248a:	490e      	ldr	r1, [pc, #56]	@ (80024c4 <HAL_ADC_Init+0x214>)
 800248c:	4001      	ands	r1, r0
 800248e:	430a      	orrs	r2, r1
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	611a      	str	r2, [r3, #16]
 8002496:	e79d      	b.n	80023d4 <HAL_ADC_Init+0x124>
 8002498:	5fffffc0 	.word	0x5fffffc0
 800249c:	24000070 	.word	0x24000070
 80024a0:	053e2d63 	.word	0x053e2d63
 80024a4:	6fffffc0 	.word	0x6fffffc0
 80024a8:	40022000 	.word	0x40022000
 80024ac:	58026000 	.word	0x58026000
 80024b0:	fff0c003 	.word	0xfff0c003
 80024b4:	ffffbffc 	.word	0xffffbffc
 80024b8:	40022100 	.word	0x40022100
 80024bc:	40022300 	.word	0x40022300
 80024c0:	58026300 	.word	0x58026300
 80024c4:	fc00f81e 	.word	0xfc00f81e

080024c8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80024c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80024ca:	2300      	movs	r3, #0
{
 80024cc:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80024ce:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d0:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d040      	beq.n	800255a <HAL_ADCEx_Calibration_Start+0x92>
 80024d8:	2301      	movs	r3, #1
 80024da:	4604      	mov	r4, r0
 80024dc:	460e      	mov	r6, r1
 80024de:	4615      	mov	r5, r2
 80024e0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80024e4:	f7ff fdfc 	bl	80020e0 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80024e8:	b9e8      	cbnz	r0, 8002526 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ea:	6d67      	ldr	r7, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 80024ec:	f005 4280 	and.w	r2, r5, #1073741824	@ 0x40000000
 80024f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <HAL_ADCEx_Calibration_Start+0x98>)
 80024f2:	f406 3180 	and.w	r1, r6, #65536	@ 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80024f6:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80024f8:	403b      	ands	r3, r7
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	6563      	str	r3, [r4, #84]	@ 0x54
 8002500:	4b18      	ldr	r3, [pc, #96]	@ (8002564 <HAL_ADCEx_Calibration_Start+0x9c>)
 8002502:	68ae      	ldr	r6, [r5, #8]
 8002504:	4033      	ands	r3, r6
 8002506:	4313      	orrs	r3, r2
 8002508:	430b      	orrs	r3, r1
 800250a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800250e:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002510:	68ab      	ldr	r3, [r5, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002512:	4a15      	ldr	r2, [pc, #84]	@ (8002568 <HAL_ADCEx_Calibration_Start+0xa0>)
 8002514:	2b00      	cmp	r3, #0
 8002516:	db0f      	blt.n	8002538 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002518:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800251a:	f023 0303 	bic.w	r3, r3, #3
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6563      	str	r3, [r4, #84]	@ 0x54
 8002524:	e003      	b.n	800252e <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002528:	f043 0310 	orr.w	r3, r3, #16
 800252c:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252e:	2300      	movs	r3, #0
 8002530:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8002534:	b003      	add	sp, #12
 8002536:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8002538:	9b01      	ldr	r3, [sp, #4]
 800253a:	3301      	adds	r3, #1
 800253c:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800253e:	9b01      	ldr	r3, [sp, #4]
 8002540:	4293      	cmp	r3, r2
 8002542:	d3e5      	bcc.n	8002510 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8002544:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8002546:	2200      	movs	r2, #0
        return HAL_ERROR;
 8002548:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800254a:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 800254e:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8002552:	f043 0310 	orr.w	r3, r3, #16
 8002556:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8002558:	e7ec      	b.n	8002534 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 800255a:	2002      	movs	r0, #2
}
 800255c:	b003      	add	sp, #12
 800255e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002560:	ffffeefd 	.word	0xffffeefd
 8002564:	3ffeffc0 	.word	0x3ffeffc0
 8002568:	25c3f800 	.word	0x25c3f800

0800256c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop

08002570 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop

08002574 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop

08002578 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop

0800257c <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop

08002580 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002580:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8002584:	2a01      	cmp	r2, #1
 8002586:	d035      	beq.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8002588:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800258a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800258c:	2001      	movs	r0, #1
{
 800258e:	b4f0      	push	{r4, r5, r6, r7}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002590:	4d28      	ldr	r5, [pc, #160]	@ (8002634 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
{
 8002592:	b09a      	sub	sp, #104	@ 0x68
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002594:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002596:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002598:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 800259a:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800259e:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025a0:	d008      	beq.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a2:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a8:	f041 0120 	orr.w	r1, r1, #32
 80025ac:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80025ae:	b01a      	add	sp, #104	@ 0x68
 80025b0:	bcf0      	pop	{r4, r5, r6, r7}
 80025b2:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025b4:	4a20      	ldr	r2, [pc, #128]	@ (8002638 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80025b6:	6890      	ldr	r0, [r2, #8]
 80025b8:	0740      	lsls	r0, r0, #29
 80025ba:	d50b      	bpl.n	80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 80025bc:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80025c0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c2:	f042 0220 	orr.w	r2, r2, #32
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 80025ce:	b01a      	add	sp, #104	@ 0x68
 80025d0:	bcf0      	pop	{r4, r5, r6, r7}
 80025d2:	4770      	bx	lr
 80025d4:	68a0      	ldr	r0, [r4, #8]
 80025d6:	0745      	lsls	r5, r0, #29
 80025d8:	d4f1      	bmi.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025da:	6808      	ldr	r0, [r1, #0]
 80025dc:	b9a0      	cbnz	r0, 8002608 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80025de:	4917      	ldr	r1, [pc, #92]	@ (800263c <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 80025e0:	6888      	ldr	r0, [r1, #8]
 80025e2:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 80025e6:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025e8:	68a0      	ldr	r0, [r4, #8]
 80025ea:	07c0      	lsls	r0, r0, #31
 80025ec:	d504      	bpl.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80025ee:	6892      	ldr	r2, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f0:	2000      	movs	r0, #0
 80025f2:	e7e9      	b.n	80025c8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 80025f4:	2002      	movs	r0, #2
}
 80025f6:	4770      	bx	lr
 80025f8:	6892      	ldr	r2, [r2, #8]
 80025fa:	07d5      	lsls	r5, r2, #31
 80025fc:	d4f8      	bmi.n	80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025fe:	6888      	ldr	r0, [r1, #8]
 8002600:	4a0f      	ldr	r2, [pc, #60]	@ (8002640 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8002602:	4002      	ands	r2, r0
 8002604:	608a      	str	r2, [r1, #8]
 8002606:	e7f3      	b.n	80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002608:	4e0c      	ldr	r6, [pc, #48]	@ (800263c <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 800260a:	684f      	ldr	r7, [r1, #4]
 800260c:	68b5      	ldr	r5, [r6, #8]
 800260e:	f425 4540 	bic.w	r5, r5, #49152	@ 0xc000
 8002612:	433d      	orrs	r5, r7
 8002614:	60b5      	str	r5, [r6, #8]
 8002616:	68a4      	ldr	r4, [r4, #8]
 8002618:	07e4      	lsls	r4, r4, #31
 800261a:	d4e8      	bmi.n	80025ee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800261c:	6892      	ldr	r2, [r2, #8]
 800261e:	07d7      	lsls	r7, r2, #31
 8002620:	d4e6      	bmi.n	80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
        MODIFY_REG(tmpADC_Common->CCR,
 8002622:	688a      	ldr	r2, [r1, #8]
 8002624:	68b4      	ldr	r4, [r6, #8]
 8002626:	4310      	orrs	r0, r2
 8002628:	4a05      	ldr	r2, [pc, #20]	@ (8002640 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800262a:	4022      	ands	r2, r4
 800262c:	4310      	orrs	r0, r2
 800262e:	60b0      	str	r0, [r6, #8]
 8002630:	e7de      	b.n	80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 8002632:	bf00      	nop
 8002634:	40022000 	.word	0x40022000
 8002638:	40022100 	.word	0x40022100
 800263c:	40022300 	.word	0x40022300
 8002640:	fffff0e0 	.word	0xfffff0e0

08002644 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4906      	ldr	r1, [pc, #24]	@ (8002660 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800264a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002654:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002658:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800265a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800265c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00
 8002664:	05fa0000 	.word	0x05fa0000

08002668 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002668:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <HAL_NVIC_SetPriority+0x6c>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002672:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267a:	f1be 0f04 	cmp.w	lr, #4
 800267e:	bf28      	it	cs
 8002680:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002684:	f1bc 0f06 	cmp.w	ip, #6
 8002688:	d91a      	bls.n	80026c0 <HAL_NVIC_SetPriority+0x58>
 800268a:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	fa03 f30c 	lsl.w	r3, r3, ip
 8002696:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800269e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	fa03 f30e 	lsl.w	r3, r3, lr
 80026a4:	ea21 0303 	bic.w	r3, r1, r3
 80026a8:	fa03 f30c 	lsl.w	r3, r3, ip
 80026ac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80026b4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80026b6:	db06      	blt.n	80026c6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	4a07      	ldr	r2, [pc, #28]	@ (80026d8 <HAL_NVIC_SetPriority+0x70>)
 80026ba:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80026bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80026c0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	4694      	mov	ip, r2
 80026c4:	e7e9      	b.n	800269a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	f000 000f 	and.w	r0, r0, #15
 80026ca:	4a04      	ldr	r2, [pc, #16]	@ (80026dc <HAL_NVIC_SetPriority+0x74>)
 80026cc:	5413      	strb	r3, [r2, r0]
 80026ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00
 80026d8:	e000e400 	.word	0xe000e400
 80026dc:	e000ed14 	.word	0xe000ed14

080026e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026e0:	2800      	cmp	r0, #0
 80026e2:	db07      	blt.n	80026f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026e4:	2301      	movs	r3, #1
 80026e6:	f000 011f 	and.w	r1, r0, #31
 80026ea:	4a03      	ldr	r2, [pc, #12]	@ (80026f8 <HAL_NVIC_EnableIRQ+0x18>)
 80026ec:	0940      	lsrs	r0, r0, #5
 80026ee:	408b      	lsls	r3, r1
 80026f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000e100 	.word	0xe000e100

080026fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026fc:	1e43      	subs	r3, r0, #1
 80026fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002702:	d301      	bcc.n	8002708 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002704:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002706:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002708:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	4905      	ldr	r1, [pc, #20]	@ (8002724 <HAL_SYSTICK_Config+0x28>)
 8002710:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002714:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002716:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8002728:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800272c:	4b04      	ldr	r3, [pc, #16]	@ (8002740 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800272e:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002730:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002732:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002736:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8002738:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_MPU_Enable+0x1c>)
 8002746:	f040 0001 	orr.w	r0, r0, #1
 800274a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800274e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002750:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002756:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800275a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002764:	4a16      	ldr	r2, [pc, #88]	@ (80027c0 <HAL_MPU_ConfigRegion+0x5c>)
 8002766:	7843      	ldrb	r3, [r0, #1]
 8002768:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800276c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002778:	6843      	ldr	r3, [r0, #4]
 800277a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800277e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002780:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002784:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002786:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002788:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800278c:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002790:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002792:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002794:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002798:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800279c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027a0:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027a2:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027a6:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80027ae:	7a01      	ldrb	r1, [r0, #8]
 80027b0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80027b4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027b8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80027c4:	b188      	cbz	r0, 80027ea <HAL_DAC_Init+0x26>
{
 80027c6:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80027c8:	7903      	ldrb	r3, [r0, #4]
 80027ca:	4604      	mov	r4, r0
 80027cc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80027d0:	b13b      	cbz	r3, 80027e2 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027d2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80027d4:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027d6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80027d8:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80027da:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027dc:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80027de:	7122      	strb	r2, [r4, #4]
}
 80027e0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80027e2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80027e4:	f7fe fc8e 	bl	8001104 <HAL_DAC_MspInit>
 80027e8:	e7f3      	b.n	80027d2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80027ea:	2001      	movs	r0, #1
}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop

080027f0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d05e      	beq.n	80028b6 <HAL_DAC_Start_DMA+0xc6>
 80027f8:	460e      	mov	r6, r1
 80027fa:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027fc:	7942      	ldrb	r2, [r0, #5]
 80027fe:	4604      	mov	r4, r0
 8002800:	2a01      	cmp	r2, #1
 8002802:	d060      	beq.n	80028c6 <HAL_DAC_Start_DMA+0xd6>
 8002804:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002806:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdac);
 8002808:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800280a:	2202      	movs	r2, #2
 800280c:	7102      	strb	r2, [r0, #4]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800280e:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 8002810:	bb3e      	cbnz	r6, 8002862 <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002812:	6880      	ldr	r0, [r0, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002814:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002818:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 80028cc <HAL_DAC_Start_DMA+0xdc>
 800281c:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002820:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 80028d0 <HAL_DAC_Start_DMA+0xe0>
 8002824:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002828:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 80028d4 <HAL_DAC_Start_DMA+0xe4>
 800282c:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002830:	602a      	str	r2, [r5, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002832:	2f00      	cmp	r7, #0
 8002834:	d044      	beq.n	80028c0 <HAL_DAC_Start_DMA+0xd0>
 8002836:	2f04      	cmp	r7, #4
 8002838:	d137      	bne.n	80028aa <HAL_DAC_Start_DMA+0xba>
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
        break;
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800283a:	f105 020c 	add.w	r2, r5, #12
  }

  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800283e:	682f      	ldr	r7, [r5, #0]
 8002840:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
 8002844:	602f      	str	r7, [r5, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002846:	f000 fce7 	bl	8003218 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800284a:	2300      	movs	r3, #0
 800284c:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800284e:	bb38      	cbnz	r0, 80028a0 <HAL_DAC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002850:	6822      	ldr	r2, [r4, #0]
 8002852:	f006 0110 	and.w	r1, r6, #16
 8002856:	2301      	movs	r3, #1
 8002858:	6814      	ldr	r4, [r2, #0]
 800285a:	408b      	lsls	r3, r1
 800285c:	4323      	orrs	r3, r4
 800285e:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8002860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002862:	68c0      	ldr	r0, [r0, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002864:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002868:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 80028d8 <HAL_DAC_Start_DMA+0xe8>
 800286c:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002870:	f8df c068 	ldr.w	ip, [pc, #104]	@ 80028dc <HAL_DAC_Start_DMA+0xec>
 8002874:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002878:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80028e0 <HAL_DAC_Start_DMA+0xf0>
 800287c:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002880:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8002882:	b1d7      	cbz	r7, 80028ba <HAL_DAC_Start_DMA+0xca>
 8002884:	2f04      	cmp	r7, #4
 8002886:	d113      	bne.n	80028b0 <HAL_DAC_Start_DMA+0xc0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002888:	f105 0218 	add.w	r2, r5, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800288c:	682f      	ldr	r7, [r5, #0]
 800288e:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 8002892:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002894:	f000 fcc0 	bl	8003218 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8002898:	2300      	movs	r3, #0
 800289a:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 800289c:	2800      	cmp	r0, #0
 800289e:	d0d7      	beq.n	8002850 <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028a0:	6923      	ldr	r3, [r4, #16]
 80028a2:	f043 0304 	orr.w	r3, r3, #4
 80028a6:	6123      	str	r3, [r4, #16]
}
 80028a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80028aa:	f105 0210 	add.w	r2, r5, #16
  if (Channel == DAC_CHANNEL_1)
 80028ae:	e7c6      	b.n	800283e <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80028b0:	f105 021c 	add.w	r2, r5, #28
  if (Channel == DAC_CHANNEL_1)
 80028b4:	e7ea      	b.n	800288c <HAL_DAC_Start_DMA+0x9c>
    return HAL_ERROR;
 80028b6:	2001      	movs	r0, #1
}
 80028b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80028ba:	f105 0214 	add.w	r2, r5, #20
  if (Channel == DAC_CHANNEL_1)
 80028be:	e7e5      	b.n	800288c <HAL_DAC_Start_DMA+0x9c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80028c0:	f105 0208 	add.w	r2, r5, #8
  if (Channel == DAC_CHANNEL_1)
 80028c4:	e7bb      	b.n	800283e <HAL_DAC_Start_DMA+0x4e>
  __HAL_LOCK(hdac);
 80028c6:	2002      	movs	r0, #2
}
 80028c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ca:	bf00      	nop
 80028cc:	080028e9 	.word	0x080028e9
 80028d0:	080028fd 	.word	0x080028fd
 80028d4:	0800290d 	.word	0x0800290d
 80028d8:	08002ae5 	.word	0x08002ae5
 80028dc:	08002af9 	.word	0x08002af9
 80028e0:	08002b09 	.word	0x08002b09

080028e4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @brief  Conversion complete callback in non-blocking mode for Channel1
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop

080028e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80028e8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ea:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7ff fff9 	bl	80028e4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028f2:	2301      	movs	r3, #1
 80028f4:	7123      	strb	r3, [r4, #4]
}
 80028f6:	bd10      	pop	{r4, pc}

080028f8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop

080028fc <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80028fc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80028fe:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002900:	f7ff fffa 	bl	80028f8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002904:	bd08      	pop	{r3, pc}
 8002906:	bf00      	nop

08002908 <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop

0800290c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800290c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800290e:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002910:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002912:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 800291a:	f7ff fff5 	bl	8002908 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800291e:	2301      	movs	r3, #1
 8002920:	7123      	strb	r3, [r4, #4]
}
 8002922:	bd10      	pop	{r4, pc}

08002924 <HAL_DAC_DMAUnderrunCallbackCh1>:
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop

08002928 <HAL_DAC_IRQHandler>:
  uint32_t itsource = hdac->Instance->CR;
 8002928:	6803      	ldr	r3, [r0, #0]
{
 800292a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = hdac->Instance->CR;
 800292c:	681d      	ldr	r5, [r3, #0]
{
 800292e:	4604      	mov	r4, r0
  uint32_t itflag   = hdac->Instance->SR;
 8002930:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8002932:	04aa      	lsls	r2, r5, #18
 8002934:	d501      	bpl.n	800293a <HAL_DAC_IRQHandler+0x12>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002936:	04b1      	lsls	r1, r6, #18
 8002938:	d417      	bmi.n	800296a <HAL_DAC_IRQHandler+0x42>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800293a:	00aa      	lsls	r2, r5, #2
 800293c:	d501      	bpl.n	8002942 <HAL_DAC_IRQHandler+0x1a>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800293e:	00b3      	lsls	r3, r6, #2
 8002940:	d400      	bmi.n	8002944 <HAL_DAC_IRQHandler+0x1c>
}
 8002942:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8002944:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800294c:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 800294e:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002950:	6922      	ldr	r2, [r4, #16]
 8002952:	f042 0202 	orr.w	r2, r2, #2
 8002956:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002958:	6359      	str	r1, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
}
 8002960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002964:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002966:	f000 b8db 	b.w	8002b20 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 800296a:	2204      	movs	r2, #4
 800296c:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800296e:	6902      	ldr	r2, [r0, #16]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002976:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800297a:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002982:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002984:	f7ff ffce 	bl	8002924 <HAL_DAC_DMAUnderrunCallbackCh1>
 8002988:	e7d7      	b.n	800293a <HAL_DAC_IRQHandler+0x12>
 800298a:	bf00      	nop

0800298c <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 800298c:	2800      	cmp	r0, #0
 800298e:	f000 8086 	beq.w	8002a9e <HAL_DAC_ConfigChannel+0x112>
{
 8002992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002996:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8002998:	2900      	cmp	r1, #0
 800299a:	d04d      	beq.n	8002a38 <HAL_DAC_ConfigChannel+0xac>
  __HAL_LOCK(hdac);
 800299c:	7943      	ldrb	r3, [r0, #5]
 800299e:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80029a0:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d079      	beq.n	8002a9a <HAL_DAC_ConfigChannel+0x10e>
 80029a6:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80029a8:	2904      	cmp	r1, #4
 80029aa:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 80029ac:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80029ae:	f04f 0302 	mov.w	r3, #2
 80029b2:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80029b4:	d043      	beq.n	8002a3e <HAL_DAC_ConfigChannel+0xb2>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80029b6:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 80029ba:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80029bc:	6928      	ldr	r0, [r5, #16]
 80029be:	2801      	cmp	r0, #1
 80029c0:	d108      	bne.n	80029d4 <HAL_DAC_ConfigChannel+0x48>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80029c2:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 80029c4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80029c6:	4090      	lsls	r0, r2
 80029c8:	ea26 0600 	bic.w	r6, r6, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029cc:	6968      	ldr	r0, [r5, #20]
 80029ce:	4090      	lsls	r0, r2
 80029d0:	4330      	orrs	r0, r6
    hdac->Instance->CCR = tmpreg1;
 80029d2:	6398      	str	r0, [r3, #56]	@ 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80029d4:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 80029d6:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80029d8:	4090      	lsls	r0, r2
 80029da:	ea26 0600 	bic.w	r6, r6, r0
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80029de:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80029e2:	2801      	cmp	r0, #1
 80029e4:	d055      	beq.n	8002a92 <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80029e6:	2802      	cmp	r0, #2
 80029e8:	d055      	beq.n	8002a96 <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80029ea:	fab7 f087 	clz	r0, r7
 80029ee:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80029f0:	4339      	orrs	r1, r7
 80029f2:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029f4:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80029f6:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029fa:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029fc:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80029fe:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a00:	4331      	orrs	r1, r6
  hdac->State = HAL_DAC_STATE_READY;
 8002a02:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 8002a04:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a06:	6819      	ldr	r1, [r3, #0]
 8002a08:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a0c:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002a10:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a12:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8002a14:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002a16:	ea21 0105 	bic.w	r1, r1, r5
  __HAL_UNLOCK(hdac);
 8002a1a:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a1c:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a1e:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 8002a20:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a22:	fa00 f102 	lsl.w	r1, r0, r2
 8002a26:	681a      	ldr	r2, [r3, #0]
  return status;
 8002a28:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a2a:	ea22 0201 	bic.w	r2, r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002a30:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8002a32:	7165      	strb	r5, [r4, #5]
}
 8002a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002a38:	2001      	movs	r0, #1
}
 8002a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8002a3e:	f7fe fec5 	bl	80017cc <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a42:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002a44:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8002a46:	b9be      	cbnz	r6, 8002a78 <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a48:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8002adc <HAL_DAC_ConfigChannel+0x150>
 8002a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a4e:	ea12 0f08 	tst.w	r2, r8
 8002a52:	d026      	beq.n	8002aa2 <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a54:	f7fe feba 	bl	80017cc <HAL_GetTick>
 8002a58:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a5a:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a5c:	2801      	cmp	r0, #1
 8002a5e:	d9f5      	bls.n	8002a4c <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a62:	ea12 0f08 	tst.w	r2, r8
 8002a66:	d0f1      	beq.n	8002a4c <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a68:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a6a:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 8002a6c:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a6e:	f043 0308 	orr.w	r3, r3, #8
 8002a72:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a74:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 8002a76:	e7dd      	b.n	8002a34 <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a7a:	2a00      	cmp	r2, #0
 8002a7c:	da2a      	bge.n	8002ad4 <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a7e:	f7fe fea5 	bl	80017cc <HAL_GetTick>
 8002a82:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a84:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a86:	2801      	cmp	r0, #1
 8002a88:	d9f6      	bls.n	8002a78 <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a8c:	2a00      	cmp	r2, #0
 8002a8e:	daf3      	bge.n	8002a78 <HAL_DAC_ConfigChannel+0xec>
 8002a90:	e7ea      	b.n	8002a68 <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 8002a92:	2000      	movs	r0, #0
 8002a94:	e7ac      	b.n	80029f0 <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 8002a96:	2001      	movs	r0, #1
 8002a98:	e7aa      	b.n	80029f0 <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	e7ca      	b.n	8002a34 <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 8002a9e:	2001      	movs	r0, #1
}
 8002aa0:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002aa2:	69aa      	ldr	r2, [r5, #24]
 8002aa4:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002aa6:	f006 0210 	and.w	r2, r6, #16
 8002aaa:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8002aae:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002ab0:	4090      	lsls	r0, r2
 8002ab2:	ea21 0100 	bic.w	r1, r1, r0
 8002ab6:	69e8      	ldr	r0, [r5, #28]
 8002ab8:	4090      	lsls	r0, r2
 8002aba:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002abc:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002abe:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002ac0:	4090      	lsls	r0, r2
 8002ac2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002ac4:	ea21 0100 	bic.w	r1, r1, r0
 8002ac8:	6a28      	ldr	r0, [r5, #32]
 8002aca:	4090      	lsls	r0, r2
 8002acc:	4301      	orrs	r1, r0
 8002ace:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002ad0:	6829      	ldr	r1, [r5, #0]
 8002ad2:	e773      	b.n	80029bc <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ad4:	69aa      	ldr	r2, [r5, #24]
 8002ad6:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ad8:	e7e5      	b.n	8002aa6 <HAL_DAC_ConfigChannel+0x11a>
 8002ada:	bf00      	nop
 8002adc:	20008000 	.word	0x20008000

08002ae0 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop

08002ae4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae6:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7ff fff9 	bl	8002ae0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002aee:	2301      	movs	r3, #1
 8002af0:	7123      	strb	r3, [r4, #4]
}
 8002af2:	bd10      	pop	{r4, pc}

08002af4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002af8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002afa:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002afc:	f7ff fffa 	bl	8002af4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b00:	bd08      	pop	{r3, pc}
 8002b02:	bf00      	nop

08002b04 <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop

08002b08 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002b08:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0a:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b0c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002b0e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002b16:	f7ff fff5 	bl	8002b04 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	7123      	strb	r3, [r4, #4]
}
 8002b1e:	bd10      	pop	{r4, pc}

08002b20 <HAL_DACEx_DMAUnderrunCallbackCh2>:
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop

08002b24 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b24:	4936      	ldr	r1, [pc, #216]	@ (8002c00 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8002b26:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b28:	6803      	ldr	r3, [r0, #0]
 8002b2a:	428b      	cmp	r3, r1
 8002b2c:	d033      	beq.n	8002b96 <DMA_CalcBaseAndBitshift+0x72>
 8002b2e:	3118      	adds	r1, #24
 8002b30:	1a59      	subs	r1, r3, r1
 8002b32:	fab1 f181 	clz	r1, r1
 8002b36:	0949      	lsrs	r1, r1, #5
 8002b38:	bb69      	cbnz	r1, 8002b96 <DMA_CalcBaseAndBitshift+0x72>
 8002b3a:	4832      	ldr	r0, [pc, #200]	@ (8002c04 <DMA_CalcBaseAndBitshift+0xe0>)
 8002b3c:	4283      	cmp	r3, r0
 8002b3e:	d03e      	beq.n	8002bbe <DMA_CalcBaseAndBitshift+0x9a>
 8002b40:	3018      	adds	r0, #24
 8002b42:	4283      	cmp	r3, r0
 8002b44:	d03e      	beq.n	8002bc4 <DMA_CalcBaseAndBitshift+0xa0>
 8002b46:	3018      	adds	r0, #24
 8002b48:	4283      	cmp	r3, r0
 8002b4a:	d034      	beq.n	8002bb6 <DMA_CalcBaseAndBitshift+0x92>
 8002b4c:	3018      	adds	r0, #24
 8002b4e:	4283      	cmp	r3, r0
 8002b50:	d03b      	beq.n	8002bca <DMA_CalcBaseAndBitshift+0xa6>
 8002b52:	3018      	adds	r0, #24
 8002b54:	4283      	cmp	r3, r0
 8002b56:	d03e      	beq.n	8002bd6 <DMA_CalcBaseAndBitshift+0xb2>
 8002b58:	3018      	adds	r0, #24
 8002b5a:	4283      	cmp	r3, r0
 8002b5c:	d02a      	beq.n	8002bb4 <DMA_CalcBaseAndBitshift+0x90>
 8002b5e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002b62:	4283      	cmp	r3, r0
 8002b64:	d035      	beq.n	8002bd2 <DMA_CalcBaseAndBitshift+0xae>
 8002b66:	4928      	ldr	r1, [pc, #160]	@ (8002c08 <DMA_CalcBaseAndBitshift+0xe4>)
 8002b68:	428b      	cmp	r3, r1
 8002b6a:	d031      	beq.n	8002bd0 <DMA_CalcBaseAndBitshift+0xac>
 8002b6c:	3118      	adds	r1, #24
 8002b6e:	428b      	cmp	r3, r1
 8002b70:	d034      	beq.n	8002bdc <DMA_CalcBaseAndBitshift+0xb8>
 8002b72:	3118      	adds	r1, #24
 8002b74:	428b      	cmp	r3, r1
 8002b76:	d034      	beq.n	8002be2 <DMA_CalcBaseAndBitshift+0xbe>
 8002b78:	3118      	adds	r1, #24
 8002b7a:	428b      	cmp	r3, r1
 8002b7c:	d034      	beq.n	8002be8 <DMA_CalcBaseAndBitshift+0xc4>
 8002b7e:	3118      	adds	r1, #24
 8002b80:	428b      	cmp	r3, r1
 8002b82:	d034      	beq.n	8002bee <DMA_CalcBaseAndBitshift+0xca>
 8002b84:	3118      	adds	r1, #24
 8002b86:	428b      	cmp	r3, r1
 8002b88:	d034      	beq.n	8002bf4 <DMA_CalcBaseAndBitshift+0xd0>
 8002b8a:	3118      	adds	r1, #24
 8002b8c:	428b      	cmp	r3, r1
 8002b8e:	d034      	beq.n	8002bfa <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002b90:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8002b94:	e011      	b.n	8002bba <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	491c      	ldr	r1, [pc, #112]	@ (8002c0c <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002b9a:	481d      	ldr	r0, [pc, #116]	@ (8002c10 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b9c:	3b10      	subs	r3, #16
 8002b9e:	fba1 1303 	umull	r1, r3, r1, r3
{
 8002ba2:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002ba4:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002ba6:	4c1b      	ldr	r4, [pc, #108]	@ (8002c14 <DMA_CalcBaseAndBitshift+0xf0>)
 8002ba8:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8002baa:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002bae:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 8002bb2:	4770      	bx	lr
 8002bb4:	2116      	movs	r1, #22
 8002bb6:	4818      	ldr	r0, [pc, #96]	@ (8002c18 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002bb8:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002bba:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8002bbc:	4770      	bx	lr
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	4813      	ldr	r0, [pc, #76]	@ (8002c10 <DMA_CalcBaseAndBitshift+0xec>)
 8002bc2:	e7f9      	b.n	8002bb8 <DMA_CalcBaseAndBitshift+0x94>
 8002bc4:	2116      	movs	r1, #22
 8002bc6:	4812      	ldr	r0, [pc, #72]	@ (8002c10 <DMA_CalcBaseAndBitshift+0xec>)
 8002bc8:	e7f6      	b.n	8002bb8 <DMA_CalcBaseAndBitshift+0x94>
 8002bca:	2106      	movs	r1, #6
 8002bcc:	4812      	ldr	r0, [pc, #72]	@ (8002c18 <DMA_CalcBaseAndBitshift+0xf4>)
 8002bce:	e7f3      	b.n	8002bb8 <DMA_CalcBaseAndBitshift+0x94>
 8002bd0:	2106      	movs	r1, #6
 8002bd2:	4812      	ldr	r0, [pc, #72]	@ (8002c1c <DMA_CalcBaseAndBitshift+0xf8>)
 8002bd4:	e7f0      	b.n	8002bb8 <DMA_CalcBaseAndBitshift+0x94>
 8002bd6:	2110      	movs	r1, #16
 8002bd8:	480f      	ldr	r0, [pc, #60]	@ (8002c18 <DMA_CalcBaseAndBitshift+0xf4>)
 8002bda:	e7ed      	b.n	8002bb8 <DMA_CalcBaseAndBitshift+0x94>
 8002bdc:	2110      	movs	r1, #16
 8002bde:	480f      	ldr	r0, [pc, #60]	@ (8002c1c <DMA_CalcBaseAndBitshift+0xf8>)
 8002be0:	e7ea      	b.n	8002bb8 <DMA_CalcBaseAndBitshift+0x94>
 8002be2:	2116      	movs	r1, #22
 8002be4:	480d      	ldr	r0, [pc, #52]	@ (8002c1c <DMA_CalcBaseAndBitshift+0xf8>)
 8002be6:	e7e7      	b.n	8002bb8 <DMA_CalcBaseAndBitshift+0x94>
 8002be8:	2100      	movs	r1, #0
 8002bea:	480d      	ldr	r0, [pc, #52]	@ (8002c20 <DMA_CalcBaseAndBitshift+0xfc>)
 8002bec:	e7e4      	b.n	8002bb8 <DMA_CalcBaseAndBitshift+0x94>
 8002bee:	2106      	movs	r1, #6
 8002bf0:	480b      	ldr	r0, [pc, #44]	@ (8002c20 <DMA_CalcBaseAndBitshift+0xfc>)
 8002bf2:	e7e1      	b.n	8002bb8 <DMA_CalcBaseAndBitshift+0x94>
 8002bf4:	2110      	movs	r1, #16
 8002bf6:	480a      	ldr	r0, [pc, #40]	@ (8002c20 <DMA_CalcBaseAndBitshift+0xfc>)
 8002bf8:	e7de      	b.n	8002bb8 <DMA_CalcBaseAndBitshift+0x94>
 8002bfa:	2116      	movs	r1, #22
 8002bfc:	4808      	ldr	r0, [pc, #32]	@ (8002c20 <DMA_CalcBaseAndBitshift+0xfc>)
 8002bfe:	e7db      	b.n	8002bb8 <DMA_CalcBaseAndBitshift+0x94>
 8002c00:	40020010 	.word	0x40020010
 8002c04:	40020040 	.word	0x40020040
 8002c08:	40020428 	.word	0x40020428
 8002c0c:	aaaaaaab 	.word	0xaaaaaaab
 8002c10:	40020000 	.word	0x40020000
 8002c14:	0806b634 	.word	0x0806b634
 8002c18:	40020004 	.word	0x40020004
 8002c1c:	40020400 	.word	0x40020400
 8002c20:	40020404 	.word	0x40020404

08002c24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002c24:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c26:	4b28      	ldr	r3, [pc, #160]	@ (8002cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8002c28:	4928      	ldr	r1, [pc, #160]	@ (8002ccc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
{
 8002c2a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c2c:	4d28      	ldr	r5, [pc, #160]	@ (8002cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8002c2e:	4c29      	ldr	r4, [pc, #164]	@ (8002cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8002c30:	42aa      	cmp	r2, r5
 8002c32:	bf18      	it	ne
 8002c34:	429a      	cmpne	r2, r3
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	428a      	cmp	r2, r1
 8002c3e:	bf08      	it	eq
 8002c40:	f043 0301 	orreq.w	r3, r3, #1
 8002c44:	3128      	adds	r1, #40	@ 0x28
 8002c46:	42a2      	cmp	r2, r4
 8002c48:	bf08      	it	eq
 8002c4a:	f043 0301 	orreq.w	r3, r3, #1
 8002c4e:	3428      	adds	r4, #40	@ 0x28
 8002c50:	428a      	cmp	r2, r1
 8002c52:	bf08      	it	eq
 8002c54:	f043 0301 	orreq.w	r3, r3, #1
 8002c58:	3128      	adds	r1, #40	@ 0x28
 8002c5a:	42a2      	cmp	r2, r4
 8002c5c:	bf08      	it	eq
 8002c5e:	f043 0301 	orreq.w	r3, r3, #1
 8002c62:	428a      	cmp	r2, r1
 8002c64:	bf08      	it	eq
 8002c66:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c6a:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c6c:	b913      	cbnz	r3, 8002c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d111      	bne.n	8002c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002c74:	f1a1 0308 	sub.w	r3, r1, #8
 8002c78:	4c18      	ldr	r4, [pc, #96]	@ (8002cdc <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002c7a:	4a19      	ldr	r2, [pc, #100]	@ (8002ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c7c:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002c7e:	fba4 4303 	umull	r4, r3, r4, r3
 8002c82:	4c18      	ldr	r4, [pc, #96]	@ (8002ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8002c84:	091d      	lsrs	r5, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002c86:	eb02 1313 	add.w	r3, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c8a:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002c8c:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002c8e:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002c90:	e9c0 3418 	strd	r3, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002c94:	bc30      	pop	{r4, r5}
 8002c96:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c98:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002c9c:	4912      	ldr	r1, [pc, #72]	@ (8002ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002c9e:	4c13      	ldr	r4, [pc, #76]	@ (8002cec <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002ca0:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002ca2:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002ca6:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002ca8:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002cac:	d908      	bls.n	8002cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002cae:	f003 041f 	and.w	r4, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8002cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002cb4:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002cb6:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002cb8:	40a1      	lsls	r1, r4
 8002cba:	4c0e      	ldr	r4, [pc, #56]	@ (8002cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002cbc:	0093      	lsls	r3, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002cbe:	e7e6      	b.n	8002c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
      stream_number += 8U;
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	461c      	mov	r4, r3
 8002cc4:	e7f5      	b.n	8002cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
 8002cc6:	bf00      	nop
 8002cc8:	58025408 	.word	0x58025408
 8002ccc:	58025430 	.word	0x58025430
 8002cd0:	5802541c 	.word	0x5802541c
 8002cd4:	58025444 	.word	0x58025444
 8002cd8:	58025494 	.word	0x58025494
 8002cdc:	cccccccd 	.word	0xcccccccd
 8002ce0:	16009600 	.word	0x16009600
 8002ce4:	58025880 	.word	0x58025880
 8002ce8:	bffdfbf0 	.word	0xbffdfbf0
 8002cec:	aaaaaaab 	.word	0xaaaaaaab
 8002cf0:	10008200 	.word	0x10008200
 8002cf4:	40020880 	.word	0x40020880

08002cf8 <HAL_DMA_Init>:
{
 8002cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cfc:	4605      	mov	r5, r0
 8002cfe:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8002d00:	f7fe fd64 	bl	80017cc <HAL_GetTick>
  if(hdma == NULL)
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	f000 81a1 	beq.w	800304c <HAL_DMA_Init+0x354>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d0a:	682c      	ldr	r4, [r5, #0]
 8002d0c:	4606      	mov	r6, r0
 8002d0e:	4bac      	ldr	r3, [pc, #688]	@ (8002fc0 <HAL_DMA_Init+0x2c8>)
 8002d10:	4aac      	ldr	r2, [pc, #688]	@ (8002fc4 <HAL_DMA_Init+0x2cc>)
 8002d12:	4294      	cmp	r4, r2
 8002d14:	bf18      	it	ne
 8002d16:	429c      	cmpne	r4, r3
 8002d18:	f102 0218 	add.w	r2, r2, #24
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	4294      	cmp	r4, r2
 8002d24:	bf08      	it	eq
 8002d26:	f043 0301 	orreq.w	r3, r3, #1
 8002d2a:	3218      	adds	r2, #24
 8002d2c:	4294      	cmp	r4, r2
 8002d2e:	bf08      	it	eq
 8002d30:	f043 0301 	orreq.w	r3, r3, #1
 8002d34:	3218      	adds	r2, #24
 8002d36:	4294      	cmp	r4, r2
 8002d38:	bf08      	it	eq
 8002d3a:	f043 0301 	orreq.w	r3, r3, #1
 8002d3e:	3218      	adds	r2, #24
 8002d40:	4294      	cmp	r4, r2
 8002d42:	bf08      	it	eq
 8002d44:	f043 0301 	orreq.w	r3, r3, #1
 8002d48:	3218      	adds	r2, #24
 8002d4a:	4294      	cmp	r4, r2
 8002d4c:	bf08      	it	eq
 8002d4e:	f043 0301 	orreq.w	r3, r3, #1
 8002d52:	3218      	adds	r2, #24
 8002d54:	4294      	cmp	r4, r2
 8002d56:	bf08      	it	eq
 8002d58:	f043 0301 	orreq.w	r3, r3, #1
 8002d5c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002d60:	4294      	cmp	r4, r2
 8002d62:	bf08      	it	eq
 8002d64:	f043 0301 	orreq.w	r3, r3, #1
 8002d68:	3218      	adds	r2, #24
 8002d6a:	4294      	cmp	r4, r2
 8002d6c:	bf08      	it	eq
 8002d6e:	f043 0301 	orreq.w	r3, r3, #1
 8002d72:	3218      	adds	r2, #24
 8002d74:	4294      	cmp	r4, r2
 8002d76:	bf08      	it	eq
 8002d78:	f043 0301 	orreq.w	r3, r3, #1
 8002d7c:	3218      	adds	r2, #24
 8002d7e:	4294      	cmp	r4, r2
 8002d80:	bf08      	it	eq
 8002d82:	f043 0301 	orreq.w	r3, r3, #1
 8002d86:	3218      	adds	r2, #24
 8002d88:	4294      	cmp	r4, r2
 8002d8a:	bf08      	it	eq
 8002d8c:	f043 0301 	orreq.w	r3, r3, #1
 8002d90:	3218      	adds	r2, #24
 8002d92:	4294      	cmp	r4, r2
 8002d94:	bf08      	it	eq
 8002d96:	f043 0301 	orreq.w	r3, r3, #1
 8002d9a:	3218      	adds	r2, #24
 8002d9c:	4294      	cmp	r4, r2
 8002d9e:	bf08      	it	eq
 8002da0:	f043 0301 	orreq.w	r3, r3, #1
 8002da4:	b91b      	cbnz	r3, 8002dae <HAL_DMA_Init+0xb6>
 8002da6:	4b88      	ldr	r3, [pc, #544]	@ (8002fc8 <HAL_DMA_Init+0x2d0>)
 8002da8:	429c      	cmp	r4, r3
 8002daa:	f040 8196 	bne.w	80030da <HAL_DMA_Init+0x3e2>
    __HAL_UNLOCK(hdma);
 8002dae:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002db0:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8002db2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8002db6:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	e006      	b.n	8002dd2 <HAL_DMA_Init+0xda>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dc4:	f7fe fd02 	bl	80017cc <HAL_GetTick>
 8002dc8:	1b80      	subs	r0, r0, r6
 8002dca:	2805      	cmp	r0, #5
 8002dcc:	f200 8142 	bhi.w	8003054 <HAL_DMA_Init+0x35c>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dd0:	682c      	ldr	r4, [r5, #0]
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	07df      	lsls	r7, r3, #31
 8002dd6:	d4f5      	bmi.n	8002dc4 <HAL_DMA_Init+0xcc>
    registerValue |=  hdma->Init.Direction           |
 8002dd8:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ddc:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8002dde:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de0:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002de2:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6969      	ldr	r1, [r5, #20]
 8002de8:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dea:	69e9      	ldr	r1, [r5, #28]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002df0:	4976      	ldr	r1, [pc, #472]	@ (8002fcc <HAL_DMA_Init+0x2d4>)
 8002df2:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8002df4:	6a28      	ldr	r0, [r5, #32]
 8002df6:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002df8:	4875      	ldr	r0, [pc, #468]	@ (8002fd0 <HAL_DMA_Init+0x2d8>)
    registerValue |=  hdma->Init.Direction           |
 8002dfa:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dfc:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8002dfe:	2904      	cmp	r1, #4
 8002e00:	f000 813d 	beq.w	800307e <HAL_DMA_Init+0x386>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e04:	6800      	ldr	r0, [r0, #0]
 8002e06:	f36f 000f 	bfc	r0, #0, #16
 8002e0a:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8002e0e:	f080 80f1 	bcs.w	8002ff4 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e12:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e14:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e16:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002e1a:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002e1c:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f7ff fe80 	bl	8002b24 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e24:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002e26:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e28:	496a      	ldr	r1, [pc, #424]	@ (8002fd4 <HAL_DMA_Init+0x2dc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e2a:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e2e:	4f6a      	ldr	r7, [pc, #424]	@ (8002fd8 <HAL_DMA_Init+0x2e0>)
 8002e30:	1a61      	subs	r1, r4, r1
 8002e32:	4e6a      	ldr	r6, [pc, #424]	@ (8002fdc <HAL_DMA_Init+0x2e4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e34:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e36:	4a6a      	ldr	r2, [pc, #424]	@ (8002fe0 <HAL_DMA_Init+0x2e8>)
 8002e38:	fab1 f181 	clz	r1, r1
 8002e3c:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e3e:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e40:	eba4 0a02 	sub.w	sl, r4, r2
 8002e44:	4b67      	ldr	r3, [pc, #412]	@ (8002fe4 <HAL_DMA_Init+0x2ec>)
 8002e46:	0949      	lsrs	r1, r1, #5
 8002e48:	4a5e      	ldr	r2, [pc, #376]	@ (8002fc4 <HAL_DMA_Init+0x2cc>)
 8002e4a:	faba fa8a 	clz	sl, sl
 8002e4e:	eba4 0903 	sub.w	r9, r4, r3
 8002e52:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc0 <HAL_DMA_Init+0x2c8>)
 8002e54:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8002e58:	fab7 f787 	clz	r7, r7
 8002e5c:	4294      	cmp	r4, r2
 8002e5e:	bf18      	it	ne
 8002e60:	429c      	cmpne	r4, r3
 8002e62:	f102 0218 	add.w	r2, r2, #24
 8002e66:	fab9 f989 	clz	r9, r9
 8002e6a:	eba4 0606 	sub.w	r6, r4, r6
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002e78:	fab6 f686 	clz	r6, r6
 8002e7c:	4294      	cmp	r4, r2
 8002e7e:	bf08      	it	eq
 8002e80:	f043 0301 	orreq.w	r3, r3, #1
 8002e84:	3218      	adds	r2, #24
 8002e86:	097f      	lsrs	r7, r7, #5
 8002e88:	4294      	cmp	r4, r2
 8002e8a:	bf08      	it	eq
 8002e8c:	f043 0301 	orreq.w	r3, r3, #1
 8002e90:	3218      	adds	r2, #24
 8002e92:	0976      	lsrs	r6, r6, #5
 8002e94:	4294      	cmp	r4, r2
 8002e96:	bf08      	it	eq
 8002e98:	f043 0301 	orreq.w	r3, r3, #1
 8002e9c:	3218      	adds	r2, #24
 8002e9e:	4294      	cmp	r4, r2
 8002ea0:	bf08      	it	eq
 8002ea2:	f043 0301 	orreq.w	r3, r3, #1
 8002ea6:	3218      	adds	r2, #24
 8002ea8:	4294      	cmp	r4, r2
 8002eaa:	bf08      	it	eq
 8002eac:	f043 0301 	orreq.w	r3, r3, #1
 8002eb0:	3218      	adds	r2, #24
 8002eb2:	4294      	cmp	r4, r2
 8002eb4:	bf08      	it	eq
 8002eb6:	f043 0301 	orreq.w	r3, r3, #1
 8002eba:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002ebe:	4294      	cmp	r4, r2
 8002ec0:	bf08      	it	eq
 8002ec2:	f043 0301 	orreq.w	r3, r3, #1
 8002ec6:	3218      	adds	r2, #24
 8002ec8:	4294      	cmp	r4, r2
 8002eca:	bf08      	it	eq
 8002ecc:	f043 0301 	orreq.w	r3, r3, #1
 8002ed0:	3218      	adds	r2, #24
 8002ed2:	4294      	cmp	r4, r2
 8002ed4:	bf08      	it	eq
 8002ed6:	f043 0301 	orreq.w	r3, r3, #1
 8002eda:	3218      	adds	r2, #24
 8002edc:	4294      	cmp	r4, r2
 8002ede:	bf08      	it	eq
 8002ee0:	f043 0301 	orreq.w	r3, r3, #1
 8002ee4:	3218      	adds	r2, #24
 8002ee6:	4294      	cmp	r4, r2
 8002ee8:	bf08      	it	eq
 8002eea:	f043 0301 	orreq.w	r3, r3, #1
 8002eee:	3218      	adds	r2, #24
 8002ef0:	4294      	cmp	r4, r2
 8002ef2:	bf08      	it	eq
 8002ef4:	f043 0301 	orreq.w	r3, r3, #1
 8002ef8:	3218      	adds	r2, #24
 8002efa:	4294      	cmp	r4, r2
 8002efc:	bf08      	it	eq
 8002efe:	f043 0301 	orreq.w	r3, r3, #1
 8002f02:	3218      	adds	r2, #24
 8002f04:	4294      	cmp	r4, r2
 8002f06:	bf08      	it	eq
 8002f08:	f043 0301 	orreq.w	r3, r3, #1
 8002f0c:	4a36      	ldr	r2, [pc, #216]	@ (8002fe8 <HAL_DMA_Init+0x2f0>)
 8002f0e:	ea4a 0303 	orr.w	r3, sl, r3
 8002f12:	eba4 0802 	sub.w	r8, r4, r2
 8002f16:	323c      	adds	r2, #60	@ 0x3c
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	fab8 f888 	clz	r8, r8
 8002f1e:	eba4 0b02 	sub.w	fp, r4, r2
 8002f22:	3214      	adds	r2, #20
 8002f24:	ea49 0303 	orr.w	r3, r9, r3
 8002f28:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002f2c:	fabb fb8b 	clz	fp, fp
 8002f30:	1aa2      	subs	r2, r4, r2
 8002f32:	ea48 0303 	orr.w	r3, r8, r3
 8002f36:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8002f3a:	fab2 f282 	clz	r2, r2
 8002f3e:	433b      	orrs	r3, r7
 8002f40:	0952      	lsrs	r2, r2, #5
 8002f42:	4333      	orrs	r3, r6
 8002f44:	9201      	str	r2, [sp, #4]
 8002f46:	ea5b 0303 	orrs.w	r3, fp, r3
 8002f4a:	d100      	bne.n	8002f4e <HAL_DMA_Init+0x256>
 8002f4c:	b382      	cbz	r2, 8002fb0 <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f4e:	4628      	mov	r0, r5
 8002f50:	9100      	str	r1, [sp, #0]
 8002f52:	f7ff fe67 	bl	8002c24 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f56:	68ab      	ldr	r3, [r5, #8]
 8002f58:	9900      	ldr	r1, [sp, #0]
 8002f5a:	2b80      	cmp	r3, #128	@ 0x80
 8002f5c:	f000 8083 	beq.w	8003066 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f60:	686a      	ldr	r2, [r5, #4]
 8002f62:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002f64:	b2d0      	uxtb	r0, r2
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f66:	3a01      	subs	r2, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f68:	e9d5 4c19 	ldrd	r4, ip, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f6c:	2a07      	cmp	r2, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f6e:	6018      	str	r0, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f70:	f8c4 c004 	str.w	ip, [r4, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f74:	d87e      	bhi.n	8003074 <HAL_DMA_Init+0x37c>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f76:	ea4a 0a01 	orr.w	sl, sl, r1
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002f7a:	1e44      	subs	r4, r0, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f7c:	ea49 090a 	orr.w	r9, r9, sl
 8002f80:	ea48 0809 	orr.w	r8, r8, r9
 8002f84:	ea47 0708 	orr.w	r7, r7, r8
 8002f88:	433e      	orrs	r6, r7
 8002f8a:	ea5b 0606 	orrs.w	r6, fp, r6
 8002f8e:	d103      	bne.n	8002f98 <HAL_DMA_Init+0x2a0>
 8002f90:	9b01      	ldr	r3, [sp, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 811d 	beq.w	80031d2 <HAL_DMA_Init+0x4da>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f98:	4a14      	ldr	r2, [pc, #80]	@ (8002fec <HAL_DMA_Init+0x2f4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002f9a:	4915      	ldr	r1, [pc, #84]	@ (8002ff0 <HAL_DMA_Init+0x2f8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f9c:	4402      	add	r2, r0
 8002f9e:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002fa0:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fa2:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002fa4:	40a3      	lsls	r3, r4
 8002fa6:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
 8002faa:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fac:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fae:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb4:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002fb6:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 8002fba:	b003      	add	sp, #12
 8002fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc0:	40020010 	.word	0x40020010
 8002fc4:	40020028 	.word	0x40020028
 8002fc8:	400204b8 	.word	0x400204b8
 8002fcc:	fe10803f 	.word	0xfe10803f
 8002fd0:	5c001000 	.word	0x5c001000
 8002fd4:	5802541c 	.word	0x5802541c
 8002fd8:	58025458 	.word	0x58025458
 8002fdc:	5802546c 	.word	0x5802546c
 8002fe0:	58025408 	.word	0x58025408
 8002fe4:	58025430 	.word	0x58025430
 8002fe8:	58025444 	.word	0x58025444
 8002fec:	1600963f 	.word	0x1600963f
 8002ff0:	58025940 	.word	0x58025940
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ff4:	6868      	ldr	r0, [r5, #4]
 8002ff6:	282e      	cmp	r0, #46	@ 0x2e
 8002ff8:	d932      	bls.n	8003060 <HAL_DMA_Init+0x368>
 8002ffa:	383f      	subs	r0, #63	@ 0x3f
 8002ffc:	2813      	cmp	r0, #19
 8002ffe:	d806      	bhi.n	800300e <HAL_DMA_Init+0x316>
 8003000:	4e7a      	ldr	r6, [pc, #488]	@ (80031ec <HAL_DMA_Init+0x4f4>)
 8003002:	fa26 f000 	lsr.w	r0, r6, r0
 8003006:	07c0      	lsls	r0, r0, #31
 8003008:	d501      	bpl.n	800300e <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 800300a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800300e:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003010:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003012:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003014:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003018:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800301c:	f47f aefe 	bne.w	8002e1c <HAL_DMA_Init+0x124>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003020:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8003022:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8003024:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003026:	2800      	cmp	r0, #0
 8003028:	f43f aef8 	beq.w	8002e1c <HAL_DMA_Init+0x124>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800302c:	2a00      	cmp	r2, #0
 800302e:	d138      	bne.n	80030a2 <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 8003030:	2901      	cmp	r1, #1
 8003032:	d04d      	beq.n	80030d0 <HAL_DMA_Init+0x3d8>
 8003034:	f031 0202 	bics.w	r2, r1, #2
 8003038:	f47f aef0 	bne.w	8002e1c <HAL_DMA_Init+0x124>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800303c:	01c2      	lsls	r2, r0, #7
 800303e:	f57f aeed 	bpl.w	8002e1c <HAL_DMA_Init+0x124>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003042:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8003044:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003046:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8003048:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 800304c:	2001      	movs	r0, #1
}
 800304e:	b003      	add	sp, #12
 8003050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003054:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8003056:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003058:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800305a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        return HAL_ERROR;
 800305e:	e7f5      	b.n	800304c <HAL_DMA_Init+0x354>
 8003060:	2828      	cmp	r0, #40	@ 0x28
 8003062:	d9d4      	bls.n	800300e <HAL_DMA_Init+0x316>
 8003064:	e7d1      	b.n	800300a <HAL_DMA_Init+0x312>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003066:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003068:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800306a:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800306e:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003070:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003072:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800307a:	676b      	str	r3, [r5, #116]	@ 0x74
 800307c:	e798      	b.n	8002fb0 <HAL_DMA_Init+0x2b8>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800307e:	6806      	ldr	r6, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003080:	e9d5 070b 	ldrd	r0, r7, [r5, #44]	@ 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003084:	f36f 060f 	bfc	r6, #0, #16
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003088:	4307      	orrs	r7, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800308a:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800308e:	ea43 0307 	orr.w	r3, r3, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003092:	d2af      	bcs.n	8002ff4 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003094:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003096:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003098:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800309c:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a0:	e7bf      	b.n	8003022 <HAL_DMA_Init+0x32a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030a2:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_Init+0x3ba>
    switch (hdma->Init.FIFOThreshold)
 80030a8:	2902      	cmp	r1, #2
 80030aa:	d9ca      	bls.n	8003042 <HAL_DMA_Init+0x34a>
 80030ac:	2903      	cmp	r1, #3
 80030ae:	d0c5      	beq.n	800303c <HAL_DMA_Init+0x344>
 80030b0:	e6b4      	b.n	8002e1c <HAL_DMA_Init+0x124>
    switch (hdma->Init.FIFOThreshold)
 80030b2:	2903      	cmp	r1, #3
 80030b4:	f63f aeb2 	bhi.w	8002e1c <HAL_DMA_Init+0x124>
 80030b8:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <HAL_DMA_Init+0x3c8>)
 80030ba:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 80030be:	bf00      	nop
 80030c0:	08003043 	.word	0x08003043
 80030c4:	0800303d 	.word	0x0800303d
 80030c8:	08003043 	.word	0x08003043
 80030cc:	080030d1 	.word	0x080030d1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d0:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 80030d4:	f47f aea2 	bne.w	8002e1c <HAL_DMA_Init+0x124>
 80030d8:	e7b3      	b.n	8003042 <HAL_DMA_Init+0x34a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030da:	4a45      	ldr	r2, [pc, #276]	@ (80031f0 <HAL_DMA_Init+0x4f8>)
 80030dc:	4945      	ldr	r1, [pc, #276]	@ (80031f4 <HAL_DMA_Init+0x4fc>)
 80030de:	4b46      	ldr	r3, [pc, #280]	@ (80031f8 <HAL_DMA_Init+0x500>)
 80030e0:	eba4 0a02 	sub.w	sl, r4, r2
 80030e4:	1a61      	subs	r1, r4, r1
 80030e6:	4f45      	ldr	r7, [pc, #276]	@ (80031fc <HAL_DMA_Init+0x504>)
 80030e8:	eba4 0903 	sub.w	r9, r4, r3
 80030ec:	faba fa8a 	clz	sl, sl
 80030f0:	3314      	adds	r3, #20
 80030f2:	fab1 f181 	clz	r1, r1
 80030f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80030fa:	fab9 f989 	clz	r9, r9
 80030fe:	eba4 0803 	sub.w	r8, r4, r3
 8003102:	0949      	lsrs	r1, r1, #5
 8003104:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8003108:	1be7      	subs	r7, r4, r7
 800310a:	fab8 f888 	clz	r8, r8
 800310e:	ea4a 0301 	orr.w	r3, sl, r1
 8003112:	4e3b      	ldr	r6, [pc, #236]	@ (8003200 <HAL_DMA_Init+0x508>)
 8003114:	3278      	adds	r2, #120	@ 0x78
 8003116:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800311a:	ea49 0303 	orr.w	r3, r9, r3
 800311e:	fab7 f787 	clz	r7, r7
 8003122:	1ba6      	subs	r6, r4, r6
 8003124:	eba4 0b02 	sub.w	fp, r4, r2
 8003128:	ea48 0303 	orr.w	r3, r8, r3
 800312c:	097f      	lsrs	r7, r7, #5
 800312e:	fab6 f686 	clz	r6, r6
 8003132:	3214      	adds	r2, #20
 8003134:	fabb fb8b 	clz	fp, fp
 8003138:	433b      	orrs	r3, r7
 800313a:	0976      	lsrs	r6, r6, #5
 800313c:	1aa2      	subs	r2, r4, r2
 800313e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8003142:	4333      	orrs	r3, r6
 8003144:	fab2 f282 	clz	r2, r2
 8003148:	ea5b 0303 	orrs.w	r3, fp, r3
 800314c:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003150:	9201      	str	r2, [sp, #4]
 8003152:	d101      	bne.n	8003158 <HAL_DMA_Init+0x460>
 8003154:	2a00      	cmp	r2, #0
 8003156:	d043      	beq.n	80031e0 <HAL_DMA_Init+0x4e8>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003158:	2302      	movs	r3, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800315a:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8003214 <HAL_DMA_Init+0x51c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800315e:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8003162:	2300      	movs	r3, #0
 8003164:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003168:	68ab      	ldr	r3, [r5, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800316a:	6822      	ldr	r2, [r4, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800316c:	2b40      	cmp	r3, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800316e:	ea02 0e0e 	and.w	lr, r2, lr
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003172:	d033      	beq.n	80031dc <HAL_DMA_Init+0x4e4>
 8003174:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	0398      	lsls	r0, r3, #14
 8003180:	9100      	str	r1, [sp, #0]
 8003182:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8003186:	ea43 0c02 	orr.w	ip, r3, r2
 800318a:	696a      	ldr	r2, [r5, #20]
 800318c:	69ab      	ldr	r3, [r5, #24]
 800318e:	ea4c 0c02 	orr.w	ip, ip, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003192:	4a1c      	ldr	r2, [pc, #112]	@ (8003204 <HAL_DMA_Init+0x50c>)
 8003194:	ea4c 0c03 	orr.w	ip, ip, r3
 8003198:	69eb      	ldr	r3, [r5, #28]
 800319a:	4422      	add	r2, r4
 800319c:	ea4c 0c03 	orr.w	ip, ip, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80031a0:	6a2b      	ldr	r3, [r5, #32]
 80031a2:	ea4e 1313 	orr.w	r3, lr, r3, lsr #4
 80031a6:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031aa:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031ac:	4b16      	ldr	r3, [pc, #88]	@ (8003208 <HAL_DMA_Init+0x510>)
 80031ae:	fba3 2302 	umull	r2, r3, r3, r2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80031b2:	6020      	str	r0, [r4, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031b4:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80031b6:	091b      	lsrs	r3, r3, #4
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	65eb      	str	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031bc:	f7ff fcb2 	bl	8002b24 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031c0:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031c2:	4602      	mov	r2, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031c4:	9900      	ldr	r1, [sp, #0]
 80031c6:	f003 001f 	and.w	r0, r3, #31
 80031ca:	2301      	movs	r3, #1
 80031cc:	4083      	lsls	r3, r0
 80031ce:	6053      	str	r3, [r2, #4]
 80031d0:	e6bd      	b.n	8002f4e <HAL_DMA_Init+0x256>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031d2:	4a0e      	ldr	r2, [pc, #56]	@ (800320c <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031d4:	490e      	ldr	r1, [pc, #56]	@ (8003210 <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031d6:	4402      	add	r2, r0
 80031d8:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031da:	e6e1      	b.n	8002fa0 <HAL_DMA_Init+0x2a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031dc:	2010      	movs	r0, #16
 80031de:	e7cf      	b.n	8003180 <HAL_DMA_Init+0x488>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031e0:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80031e2:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031e4:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80031e6:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 80031ea:	e72f      	b.n	800304c <HAL_DMA_Init+0x354>
 80031ec:	000f030f 	.word	0x000f030f
 80031f0:	58025408 	.word	0x58025408
 80031f4:	5802541c 	.word	0x5802541c
 80031f8:	58025430 	.word	0x58025430
 80031fc:	58025458 	.word	0x58025458
 8003200:	5802546c 	.word	0x5802546c
 8003204:	a7fdabf8 	.word	0xa7fdabf8
 8003208:	cccccccd 	.word	0xcccccccd
 800320c:	1000823f 	.word	0x1000823f
 8003210:	40020940 	.word	0x40020940
 8003214:	fffe000f 	.word	0xfffe000f

08003218 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8003218:	2800      	cmp	r0, #0
 800321a:	f000 8221 	beq.w	8003660 <HAL_DMA_Start_IT+0x448>
{
 800321e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hdma);
 8003222:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8003226:	2c01      	cmp	r4, #1
 8003228:	f000 8217 	beq.w	800365a <HAL_DMA_Start_IT+0x442>
 800322c:	2401      	movs	r4, #1
 800322e:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003232:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8003236:	2c01      	cmp	r4, #1
 8003238:	d008      	beq.n	800324c <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800323a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 800323e:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003240:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8003242:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8003246:	2001      	movs	r0, #1
}
 8003248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800324c:	2402      	movs	r4, #2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800324e:	4e69      	ldr	r6, [pc, #420]	@ (80033f4 <HAL_DMA_Start_IT+0x1dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003250:	f8df e1a8 	ldr.w	lr, [pc, #424]	@ 80033fc <HAL_DMA_Start_IT+0x1e4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003254:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003258:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 800325a:	4d67      	ldr	r5, [pc, #412]	@ (80033f8 <HAL_DMA_Start_IT+0x1e0>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800325c:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 800325e:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003260:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003410 <HAL_DMA_Start_IT+0x1f8>
 8003264:	4574      	cmp	r4, lr
 8003266:	bf18      	it	ne
 8003268:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 800326a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8003414 <HAL_DMA_Start_IT+0x1fc>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800326e:	f8d0 a058 	ldr.w	sl, [r0, #88]	@ 0x58
 8003272:	bf0c      	ite	eq
 8003274:	2601      	moveq	r6, #1
 8003276:	2600      	movne	r6, #0
 8003278:	4544      	cmp	r4, r8
 800327a:	bf14      	ite	ne
 800327c:	46b1      	movne	r9, r6
 800327e:	f046 0901 	orreq.w	r9, r6, #1
    __HAL_DMA_DISABLE(hdma);
 8003282:	42ac      	cmp	r4, r5
 8003284:	bf18      	it	ne
 8003286:	4564      	cmpne	r4, ip
 8003288:	bf0c      	ite	eq
 800328a:	2501      	moveq	r5, #1
 800328c:	2500      	movne	r5, #0
 800328e:	f040 80c3 	bne.w	8003418 <HAL_DMA_Start_IT+0x200>
 8003292:	f8d4 c000 	ldr.w	ip, [r4]
 8003296:	f02c 0c01 	bic.w	ip, ip, #1
 800329a:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 800329e:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032a2:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
 80032a6:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80032a8:	f1bc 0f00 	cmp.w	ip, #0
 80032ac:	d007      	beq.n	80032be <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ae:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 80032b2:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032b4:	b91d      	cbnz	r5, 80032be <HAL_DMA_Start_IT+0xa6>
 80032b6:	f1b9 0f00 	cmp.w	r9, #0
 80032ba:	f000 8130 	beq.w	800351e <HAL_DMA_Start_IT+0x306>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032be:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 80032c0:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 80032c4:	f007 081f 	and.w	r8, r7, #31
 80032c8:	fa0e fe08 	lsl.w	lr, lr, r8
 80032cc:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032d0:	6827      	ldr	r7, [r4, #0]
 80032d2:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 80032d6:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80032d8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032da:	6883      	ldr	r3, [r0, #8]
 80032dc:	2b40      	cmp	r3, #64	@ 0x40
 80032de:	f000 81c1 	beq.w	8003664 <HAL_DMA_Start_IT+0x44c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80032e2:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80032e4:	60e2      	str	r2, [r4, #12]
      if(hdma->XferHalfCpltCallback != NULL)
 80032e6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032e8:	2d00      	cmp	r5, #0
 80032ea:	f040 81a1 	bne.w	8003630 <HAL_DMA_Start_IT+0x418>
 80032ee:	4b43      	ldr	r3, [pc, #268]	@ (80033fc <HAL_DMA_Start_IT+0x1e4>)
 80032f0:	429c      	cmp	r4, r3
 80032f2:	f000 81de 	beq.w	80036b2 <HAL_DMA_Start_IT+0x49a>
 80032f6:	3318      	adds	r3, #24
 80032f8:	429c      	cmp	r4, r3
 80032fa:	f000 81f6 	beq.w	80036ea <HAL_DMA_Start_IT+0x4d2>
 80032fe:	f1b9 0f00 	cmp.w	r9, #0
 8003302:	f040 81c7 	bne.w	8003694 <HAL_DMA_Start_IT+0x47c>
 8003306:	4b3e      	ldr	r3, [pc, #248]	@ (8003400 <HAL_DMA_Start_IT+0x1e8>)
 8003308:	429c      	cmp	r4, r3
 800330a:	f000 8201 	beq.w	8003710 <HAL_DMA_Start_IT+0x4f8>
 800330e:	4b3d      	ldr	r3, [pc, #244]	@ (8003404 <HAL_DMA_Start_IT+0x1ec>)
 8003310:	429c      	cmp	r4, r3
 8003312:	f000 8209 	beq.w	8003728 <HAL_DMA_Start_IT+0x510>
 8003316:	3318      	adds	r3, #24
 8003318:	429c      	cmp	r4, r3
 800331a:	f000 8223 	beq.w	8003764 <HAL_DMA_Start_IT+0x54c>
 800331e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8003322:	429c      	cmp	r4, r3
 8003324:	f000 8233 	beq.w	800378e <HAL_DMA_Start_IT+0x576>
 8003328:	3318      	adds	r3, #24
 800332a:	429c      	cmp	r4, r3
 800332c:	f000 8242 	beq.w	80037b4 <HAL_DMA_Start_IT+0x59c>
 8003330:	3318      	adds	r3, #24
 8003332:	429c      	cmp	r4, r3
 8003334:	f000 8249 	beq.w	80037ca <HAL_DMA_Start_IT+0x5b2>
 8003338:	3318      	adds	r3, #24
 800333a:	429c      	cmp	r4, r3
 800333c:	f000 8250 	beq.w	80037e0 <HAL_DMA_Start_IT+0x5c8>
 8003340:	3318      	adds	r3, #24
 8003342:	429c      	cmp	r4, r3
 8003344:	f000 8257 	beq.w	80037f6 <HAL_DMA_Start_IT+0x5de>
 8003348:	3318      	adds	r3, #24
 800334a:	429c      	cmp	r4, r3
 800334c:	f000 8267 	beq.w	800381e <HAL_DMA_Start_IT+0x606>
 8003350:	3318      	adds	r3, #24
 8003352:	429c      	cmp	r4, r3
 8003354:	f000 8265 	beq.w	8003822 <HAL_DMA_Start_IT+0x60a>
 8003358:	3318      	adds	r3, #24
 800335a:	429c      	cmp	r4, r3
 800335c:	f000 8275 	beq.w	800384a <HAL_DMA_Start_IT+0x632>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	f023 030e 	bic.w	r3, r3, #14
 8003366:	f043 030a 	orr.w	r3, r3, #10
 800336a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800336c:	b11a      	cbz	r2, 8003376 <HAL_DMA_Start_IT+0x15e>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003376:	4b24      	ldr	r3, [pc, #144]	@ (8003408 <HAL_DMA_Start_IT+0x1f0>)
 8003378:	4a24      	ldr	r2, [pc, #144]	@ (800340c <HAL_DMA_Start_IT+0x1f4>)
 800337a:	4294      	cmp	r4, r2
 800337c:	bf18      	it	ne
 800337e:	429c      	cmpne	r4, r3
 8003380:	f102 0214 	add.w	r2, r2, #20
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	4294      	cmp	r4, r2
 800338c:	bf08      	it	eq
 800338e:	f043 0301 	orreq.w	r3, r3, #1
 8003392:	3214      	adds	r2, #20
 8003394:	4294      	cmp	r4, r2
 8003396:	bf08      	it	eq
 8003398:	f043 0301 	orreq.w	r3, r3, #1
 800339c:	3214      	adds	r2, #20
 800339e:	4294      	cmp	r4, r2
 80033a0:	bf08      	it	eq
 80033a2:	f043 0301 	orreq.w	r3, r3, #1
 80033a6:	3214      	adds	r2, #20
 80033a8:	4294      	cmp	r4, r2
 80033aa:	bf08      	it	eq
 80033ac:	f043 0301 	orreq.w	r3, r3, #1
 80033b0:	3214      	adds	r2, #20
 80033b2:	4294      	cmp	r4, r2
 80033b4:	bf08      	it	eq
 80033b6:	f043 0301 	orreq.w	r3, r3, #1
 80033ba:	3214      	adds	r2, #20
 80033bc:	4294      	cmp	r4, r2
 80033be:	bf08      	it	eq
 80033c0:	f043 0301 	orreq.w	r3, r3, #1
 80033c4:	b17b      	cbz	r3, 80033e6 <HAL_DMA_Start_IT+0x1ce>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033c6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80033c8:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	03d2      	lsls	r2, r2, #15
 80033d0:	f100 813e 	bmi.w	8003650 <HAL_DMA_Start_IT+0x438>
      if(hdma->DMAmuxRequestGen != 0U)
 80033d4:	f1bc 0f00 	cmp.w	ip, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_DMA_Start_IT+0x1ce>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033da:	f8dc 3000 	ldr.w	r3, [ip]
 80033de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e2:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 80033e6:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6023      	str	r3, [r4, #0]
}
 80033f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f4:	40020070 	.word	0x40020070
 80033f8:	40020028 	.word	0x40020028
 80033fc:	40020040 	.word	0x40020040
 8003400:	40020088 	.word	0x40020088
 8003404:	400200a0 	.word	0x400200a0
 8003408:	58025408 	.word	0x58025408
 800340c:	5802541c 	.word	0x5802541c
 8003410:	40020058 	.word	0x40020058
 8003414:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8003418:	4574      	cmp	r4, lr
 800341a:	f000 8154 	beq.w	80036c6 <HAL_DMA_Start_IT+0x4ae>
 800341e:	4544      	cmp	r4, r8
 8003420:	f000 815a 	beq.w	80036d8 <HAL_DMA_Start_IT+0x4c0>
 8003424:	f1b9 0f00 	cmp.w	r9, #0
 8003428:	f040 811f 	bne.w	800366a <HAL_DMA_Start_IT+0x452>
 800342c:	f8df c434 	ldr.w	ip, [pc, #1076]	@ 8003864 <HAL_DMA_Start_IT+0x64c>
 8003430:	4564      	cmp	r4, ip
 8003432:	f000 8164 	beq.w	80036fe <HAL_DMA_Start_IT+0x4e6>
 8003436:	f10c 0c18 	add.w	ip, ip, #24
 800343a:	4564      	cmp	r4, ip
 800343c:	f000 8180 	beq.w	8003740 <HAL_DMA_Start_IT+0x528>
 8003440:	f10c 0c18 	add.w	ip, ip, #24
 8003444:	4564      	cmp	r4, ip
 8003446:	f000 8184 	beq.w	8003752 <HAL_DMA_Start_IT+0x53a>
 800344a:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 800344e:	4564      	cmp	r4, ip
 8003450:	f000 8194 	beq.w	800377c <HAL_DMA_Start_IT+0x564>
 8003454:	f10c 0c18 	add.w	ip, ip, #24
 8003458:	4564      	cmp	r4, ip
 800345a:	f000 81a2 	beq.w	80037a2 <HAL_DMA_Start_IT+0x58a>
 800345e:	f10c 0c18 	add.w	ip, ip, #24
 8003462:	4564      	cmp	r4, ip
 8003464:	f000 81b3 	beq.w	80037ce <HAL_DMA_Start_IT+0x5b6>
 8003468:	f10c 0c18 	add.w	ip, ip, #24
 800346c:	4564      	cmp	r4, ip
 800346e:	f000 81b9 	beq.w	80037e4 <HAL_DMA_Start_IT+0x5cc>
 8003472:	f10c 0c18 	add.w	ip, ip, #24
 8003476:	4564      	cmp	r4, ip
 8003478:	f000 81bf 	beq.w	80037fa <HAL_DMA_Start_IT+0x5e2>
 800347c:	f10c 0c18 	add.w	ip, ip, #24
 8003480:	4564      	cmp	r4, ip
 8003482:	f000 81c3 	beq.w	800380c <HAL_DMA_Start_IT+0x5f4>
 8003486:	f10c 0c18 	add.w	ip, ip, #24
 800348a:	4564      	cmp	r4, ip
 800348c:	f000 81cb 	beq.w	8003826 <HAL_DMA_Start_IT+0x60e>
 8003490:	f10c 0c18 	add.w	ip, ip, #24
 8003494:	4564      	cmp	r4, ip
 8003496:	f000 81cf 	beq.w	8003838 <HAL_DMA_Start_IT+0x620>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800349a:	f8df c3cc 	ldr.w	ip, [pc, #972]	@ 8003868 <HAL_DMA_Start_IT+0x650>
 800349e:	f8df e3cc 	ldr.w	lr, [pc, #972]	@ 800386c <HAL_DMA_Start_IT+0x654>
 80034a2:	4574      	cmp	r4, lr
 80034a4:	bf18      	it	ne
 80034a6:	4564      	cmpne	r4, ip
 80034a8:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
 80034ac:	bf0c      	ite	eq
 80034ae:	f04f 0c01 	moveq.w	ip, #1
 80034b2:	f04f 0c00 	movne.w	ip, #0
 80034b6:	4574      	cmp	r4, lr
 80034b8:	bf08      	it	eq
 80034ba:	f04c 0c01 	orreq.w	ip, ip, #1
 80034be:	f10e 0e14 	add.w	lr, lr, #20
 80034c2:	4574      	cmp	r4, lr
 80034c4:	bf08      	it	eq
 80034c6:	f04c 0c01 	orreq.w	ip, ip, #1
 80034ca:	f10e 0e14 	add.w	lr, lr, #20
 80034ce:	4574      	cmp	r4, lr
 80034d0:	bf08      	it	eq
 80034d2:	f04c 0c01 	orreq.w	ip, ip, #1
 80034d6:	f10e 0e14 	add.w	lr, lr, #20
 80034da:	4574      	cmp	r4, lr
 80034dc:	bf08      	it	eq
 80034de:	f04c 0c01 	orreq.w	ip, ip, #1
    __HAL_DMA_DISABLE(hdma);
 80034e2:	f8d4 e000 	ldr.w	lr, [r4]
 80034e6:	f02e 0e01 	bic.w	lr, lr, #1
 80034ea:	f8c4 e000 	str.w	lr, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ee:	f8df e380 	ldr.w	lr, [pc, #896]	@ 8003870 <HAL_DMA_Start_IT+0x658>
 80034f2:	4574      	cmp	r4, lr
 80034f4:	bf08      	it	eq
 80034f6:	f04c 0c01 	orreq.w	ip, ip, #1
 80034fa:	f1bc 0f00 	cmp.w	ip, #0
 80034fe:	d103      	bne.n	8003508 <HAL_DMA_Start_IT+0x2f0>
 8003500:	f8df c370 	ldr.w	ip, [pc, #880]	@ 8003874 <HAL_DMA_Start_IT+0x65c>
 8003504:	4564      	cmp	r4, ip
 8003506:	d14f      	bne.n	80035a8 <HAL_DMA_Start_IT+0x390>
    if(hdma->DMAmuxRequestGen != 0U)
 8003508:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800350c:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8003510:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003512:	f1bc 0f00 	cmp.w	ip, #0
 8003516:	d002      	beq.n	800351e <HAL_DMA_Start_IT+0x306>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003518:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 800351c:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800351e:	f8df e344 	ldr.w	lr, [pc, #836]	@ 8003864 <HAL_DMA_Start_IT+0x64c>
 8003522:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 8003878 <HAL_DMA_Start_IT+0x660>
 8003526:	4544      	cmp	r4, r8
 8003528:	bf18      	it	ne
 800352a:	4574      	cmpne	r4, lr
 800352c:	f108 0818 	add.w	r8, r8, #24
 8003530:	bf0c      	ite	eq
 8003532:	f04f 0e01 	moveq.w	lr, #1
 8003536:	f04f 0e00 	movne.w	lr, #0
 800353a:	4544      	cmp	r4, r8
 800353c:	bf08      	it	eq
 800353e:	f04e 0e01 	orreq.w	lr, lr, #1
 8003542:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 8003546:	4544      	cmp	r4, r8
 8003548:	bf08      	it	eq
 800354a:	f04e 0e01 	orreq.w	lr, lr, #1
 800354e:	f108 0818 	add.w	r8, r8, #24
 8003552:	4544      	cmp	r4, r8
 8003554:	bf08      	it	eq
 8003556:	f04e 0e01 	orreq.w	lr, lr, #1
 800355a:	f108 0818 	add.w	r8, r8, #24
 800355e:	4544      	cmp	r4, r8
 8003560:	bf08      	it	eq
 8003562:	f04e 0e01 	orreq.w	lr, lr, #1
 8003566:	f108 0818 	add.w	r8, r8, #24
 800356a:	4544      	cmp	r4, r8
 800356c:	bf08      	it	eq
 800356e:	f04e 0e01 	orreq.w	lr, lr, #1
 8003572:	f108 0818 	add.w	r8, r8, #24
 8003576:	4544      	cmp	r4, r8
 8003578:	bf08      	it	eq
 800357a:	f04e 0e01 	orreq.w	lr, lr, #1
 800357e:	f108 0818 	add.w	r8, r8, #24
 8003582:	4544      	cmp	r4, r8
 8003584:	bf08      	it	eq
 8003586:	f04e 0e01 	orreq.w	lr, lr, #1
 800358a:	f108 0818 	add.w	r8, r8, #24
 800358e:	4544      	cmp	r4, r8
 8003590:	bf08      	it	eq
 8003592:	f04e 0e01 	orreq.w	lr, lr, #1
 8003596:	f1be 0f00 	cmp.w	lr, #0
 800359a:	f47f ae90 	bne.w	80032be <HAL_DMA_Start_IT+0xa6>
 800359e:	f8df e2dc 	ldr.w	lr, [pc, #732]	@ 800387c <HAL_DMA_Start_IT+0x664>
 80035a2:	4574      	cmp	r4, lr
 80035a4:	f43f ae8b 	beq.w	80032be <HAL_DMA_Start_IT+0xa6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035a8:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 800386c <HAL_DMA_Start_IT+0x654>
 80035ac:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 8003868 <HAL_DMA_Start_IT+0x650>
 80035b0:	4574      	cmp	r4, lr
 80035b2:	bf18      	it	ne
 80035b4:	4564      	cmpne	r4, ip
 80035b6:	f10e 0e14 	add.w	lr, lr, #20
 80035ba:	bf0c      	ite	eq
 80035bc:	f04f 0c01 	moveq.w	ip, #1
 80035c0:	f04f 0c00 	movne.w	ip, #0
 80035c4:	4574      	cmp	r4, lr
 80035c6:	bf08      	it	eq
 80035c8:	f04c 0c01 	orreq.w	ip, ip, #1
 80035cc:	f10e 0e14 	add.w	lr, lr, #20
 80035d0:	4574      	cmp	r4, lr
 80035d2:	bf08      	it	eq
 80035d4:	f04c 0c01 	orreq.w	ip, ip, #1
 80035d8:	f10e 0e14 	add.w	lr, lr, #20
 80035dc:	4574      	cmp	r4, lr
 80035de:	bf08      	it	eq
 80035e0:	f04c 0c01 	orreq.w	ip, ip, #1
 80035e4:	f10e 0e14 	add.w	lr, lr, #20
 80035e8:	4574      	cmp	r4, lr
 80035ea:	bf08      	it	eq
 80035ec:	f04c 0c01 	orreq.w	ip, ip, #1
 80035f0:	f10e 0e14 	add.w	lr, lr, #20
 80035f4:	4574      	cmp	r4, lr
 80035f6:	bf08      	it	eq
 80035f8:	f04c 0c01 	orreq.w	ip, ip, #1
 80035fc:	f1bc 0f00 	cmp.w	ip, #0
 8003600:	d104      	bne.n	800360c <HAL_DMA_Start_IT+0x3f4>
 8003602:	f8df c270 	ldr.w	ip, [pc, #624]	@ 8003874 <HAL_DMA_Start_IT+0x65c>
 8003606:	4564      	cmp	r4, ip
 8003608:	f040 8125 	bne.w	8003856 <HAL_DMA_Start_IT+0x63e>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800360c:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 800360e:	f04f 0c01 	mov.w	ip, #1
 8003612:	f006 0e1f 	and.w	lr, r6, #31
 8003616:	fa0c fc0e 	lsl.w	ip, ip, lr
 800361a:	f8ca c004 	str.w	ip, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800361e:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003620:	6883      	ldr	r3, [r0, #8]
 8003622:	2b40      	cmp	r3, #64	@ 0x40
 8003624:	f000 8113 	beq.w	800384e <HAL_DMA_Start_IT+0x636>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003628:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800362a:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800362c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800362e:	e65e      	b.n	80032ee <HAL_DMA_Start_IT+0xd6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003630:	6823      	ldr	r3, [r4, #0]
 8003632:	f023 031e 	bic.w	r3, r3, #30
 8003636:	f043 0316 	orr.w	r3, r3, #22
 800363a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800363c:	b11a      	cbz	r2, 8003646 <HAL_DMA_Start_IT+0x42e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003646:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	03d2      	lsls	r2, r2, #15
 800364c:	f57f aec2 	bpl.w	80033d4 <HAL_DMA_Start_IT+0x1bc>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e6bc      	b.n	80033d4 <HAL_DMA_Start_IT+0x1bc>
  __HAL_LOCK(hdma);
 800365a:	2002      	movs	r0, #2
}
 800365c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8003660:	2001      	movs	r0, #1
}
 8003662:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003664:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003666:	60e1      	str	r1, [r4, #12]
 8003668:	e63d      	b.n	80032e6 <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 800366a:	f8df e1f0 	ldr.w	lr, [pc, #496]	@ 800385c <HAL_DMA_Start_IT+0x644>
 800366e:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 8003672:	f02c 0c01 	bic.w	ip, ip, #1
 8003676:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 800367a:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800367e:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8003682:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003684:	f1bc 0f00 	cmp.w	ip, #0
 8003688:	f43f ae19 	beq.w	80032be <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800368c:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8003690:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003692:	e614      	b.n	80032be <HAL_DMA_Start_IT+0xa6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003694:	4971      	ldr	r1, [pc, #452]	@ (800385c <HAL_DMA_Start_IT+0x644>)
 8003696:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8003698:	f023 031e 	bic.w	r3, r3, #30
 800369c:	f043 0316 	orr.w	r3, r3, #22
 80036a0:	670b      	str	r3, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 80036a2:	2a00      	cmp	r2, #0
 80036a4:	f43f ae8f 	beq.w	80033c6 <HAL_DMA_Start_IT+0x1ae>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	f043 0308 	orr.w	r3, r3, #8
 80036ae:	6023      	str	r3, [r4, #0]
 80036b0:	e689      	b.n	80033c6 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80036b2:	496a      	ldr	r1, [pc, #424]	@ (800385c <HAL_DMA_Start_IT+0x644>)
 80036b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80036b6:	f023 031e 	bic.w	r3, r3, #30
 80036ba:	f043 0316 	orr.w	r3, r3, #22
 80036be:	640b      	str	r3, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 80036c0:	2a00      	cmp	r2, #0
 80036c2:	d1f1      	bne.n	80036a8 <HAL_DMA_Start_IT+0x490>
 80036c4:	e67f      	b.n	80033c6 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80036c6:	f8df e194 	ldr.w	lr, [pc, #404]	@ 800385c <HAL_DMA_Start_IT+0x644>
 80036ca:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 80036ce:	f02c 0c01 	bic.w	ip, ip, #1
 80036d2:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036d6:	e5e2      	b.n	800329e <HAL_DMA_Start_IT+0x86>
    __HAL_DMA_DISABLE(hdma);
 80036d8:	f8df e180 	ldr.w	lr, [pc, #384]	@ 800385c <HAL_DMA_Start_IT+0x644>
 80036dc:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 80036e0:	f02c 0c01 	bic.w	ip, ip, #1
 80036e4:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036e8:	e7c7      	b.n	800367a <HAL_DMA_Start_IT+0x462>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80036ea:	495c      	ldr	r1, [pc, #368]	@ (800385c <HAL_DMA_Start_IT+0x644>)
 80036ec:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 80036ee:	f023 031e 	bic.w	r3, r3, #30
 80036f2:	f043 0316 	orr.w	r3, r3, #22
 80036f6:	658b      	str	r3, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 80036f8:	2a00      	cmp	r2, #0
 80036fa:	d1d5      	bne.n	80036a8 <HAL_DMA_Start_IT+0x490>
 80036fc:	e663      	b.n	80033c6 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80036fe:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 800385c <HAL_DMA_Start_IT+0x644>
 8003702:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8003706:	f02c 0c01 	bic.w	ip, ip, #1
 800370a:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800370e:	e6fb      	b.n	8003508 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003710:	4952      	ldr	r1, [pc, #328]	@ (800385c <HAL_DMA_Start_IT+0x644>)
 8003712:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003716:	f023 031e 	bic.w	r3, r3, #30
 800371a:	f043 0316 	orr.w	r3, r3, #22
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8003722:	2a00      	cmp	r2, #0
 8003724:	d1c0      	bne.n	80036a8 <HAL_DMA_Start_IT+0x490>
 8003726:	e64e      	b.n	80033c6 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003728:	494c      	ldr	r1, [pc, #304]	@ (800385c <HAL_DMA_Start_IT+0x644>)
 800372a:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
 800372e:	f023 031e 	bic.w	r3, r3, #30
 8003732:	f043 0316 	orr.w	r3, r3, #22
 8003736:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 800373a:	2a00      	cmp	r2, #0
 800373c:	d1b4      	bne.n	80036a8 <HAL_DMA_Start_IT+0x490>
 800373e:	e642      	b.n	80033c6 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8003740:	f8df e118 	ldr.w	lr, [pc, #280]	@ 800385c <HAL_DMA_Start_IT+0x644>
 8003744:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 8003748:	f02c 0c01 	bic.w	ip, ip, #1
 800374c:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003750:	e6da      	b.n	8003508 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8003752:	f8df e108 	ldr.w	lr, [pc, #264]	@ 800385c <HAL_DMA_Start_IT+0x644>
 8003756:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 800375a:	f02c 0c01 	bic.w	ip, ip, #1
 800375e:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003762:	e6d1      	b.n	8003508 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003764:	493d      	ldr	r1, [pc, #244]	@ (800385c <HAL_DMA_Start_IT+0x644>)
 8003766:	f8d1 30b8 	ldr.w	r3, [r1, #184]	@ 0xb8
 800376a:	f023 031e 	bic.w	r3, r3, #30
 800376e:	f043 0316 	orr.w	r3, r3, #22
 8003772:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8003776:	2a00      	cmp	r2, #0
 8003778:	d196      	bne.n	80036a8 <HAL_DMA_Start_IT+0x490>
 800377a:	e624      	b.n	80033c6 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 800377c:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 8003860 <HAL_DMA_Start_IT+0x648>
 8003780:	f8de c010 	ldr.w	ip, [lr, #16]
 8003784:	f02c 0c01 	bic.w	ip, ip, #1
 8003788:	f8ce c010 	str.w	ip, [lr, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800378c:	e6bc      	b.n	8003508 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800378e:	4934      	ldr	r1, [pc, #208]	@ (8003860 <HAL_DMA_Start_IT+0x648>)
 8003790:	690b      	ldr	r3, [r1, #16]
 8003792:	f023 031e 	bic.w	r3, r3, #30
 8003796:	f043 0316 	orr.w	r3, r3, #22
 800379a:	610b      	str	r3, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 800379c:	2a00      	cmp	r2, #0
 800379e:	d183      	bne.n	80036a8 <HAL_DMA_Start_IT+0x490>
 80037a0:	e611      	b.n	80033c6 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80037a2:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 8003860 <HAL_DMA_Start_IT+0x648>
 80037a6:	f8de c028 	ldr.w	ip, [lr, #40]	@ 0x28
 80037aa:	f02c 0c01 	bic.w	ip, ip, #1
 80037ae:	f8ce c028 	str.w	ip, [lr, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037b2:	e6a9      	b.n	8003508 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80037b4:	492a      	ldr	r1, [pc, #168]	@ (8003860 <HAL_DMA_Start_IT+0x648>)
 80037b6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80037b8:	f023 031e 	bic.w	r3, r3, #30
 80037bc:	f043 0316 	orr.w	r3, r3, #22
 80037c0:	628b      	str	r3, [r1, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 80037c2:	2a00      	cmp	r2, #0
 80037c4:	f47f af70 	bne.w	80036a8 <HAL_DMA_Start_IT+0x490>
 80037c8:	e5fd      	b.n	80033c6 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80037ca:	4925      	ldr	r1, [pc, #148]	@ (8003860 <HAL_DMA_Start_IT+0x648>)
 80037cc:	e772      	b.n	80036b4 <HAL_DMA_Start_IT+0x49c>
    __HAL_DMA_DISABLE(hdma);
 80037ce:	f8df e090 	ldr.w	lr, [pc, #144]	@ 8003860 <HAL_DMA_Start_IT+0x648>
 80037d2:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 80037d6:	f02c 0c01 	bic.w	ip, ip, #1
 80037da:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037de:	e693      	b.n	8003508 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80037e0:	491f      	ldr	r1, [pc, #124]	@ (8003860 <HAL_DMA_Start_IT+0x648>)
 80037e2:	e783      	b.n	80036ec <HAL_DMA_Start_IT+0x4d4>
    __HAL_DMA_DISABLE(hdma);
 80037e4:	f8df e078 	ldr.w	lr, [pc, #120]	@ 8003860 <HAL_DMA_Start_IT+0x648>
 80037e8:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 80037ec:	f02c 0c01 	bic.w	ip, ip, #1
 80037f0:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037f4:	e688      	b.n	8003508 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80037f6:	491a      	ldr	r1, [pc, #104]	@ (8003860 <HAL_DMA_Start_IT+0x648>)
 80037f8:	e74d      	b.n	8003696 <HAL_DMA_Start_IT+0x47e>
    __HAL_DMA_DISABLE(hdma);
 80037fa:	f8df e064 	ldr.w	lr, [pc, #100]	@ 8003860 <HAL_DMA_Start_IT+0x648>
 80037fe:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 8003802:	f02c 0c01 	bic.w	ip, ip, #1
 8003806:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800380a:	e67d      	b.n	8003508 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 800380c:	f8df e050 	ldr.w	lr, [pc, #80]	@ 8003860 <HAL_DMA_Start_IT+0x648>
 8003810:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8003814:	f02c 0c01 	bic.w	ip, ip, #1
 8003818:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800381c:	e674      	b.n	8003508 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800381e:	4910      	ldr	r1, [pc, #64]	@ (8003860 <HAL_DMA_Start_IT+0x648>)
 8003820:	e777      	b.n	8003712 <HAL_DMA_Start_IT+0x4fa>
 8003822:	490f      	ldr	r1, [pc, #60]	@ (8003860 <HAL_DMA_Start_IT+0x648>)
 8003824:	e781      	b.n	800372a <HAL_DMA_Start_IT+0x512>
    __HAL_DMA_DISABLE(hdma);
 8003826:	f8df e038 	ldr.w	lr, [pc, #56]	@ 8003860 <HAL_DMA_Start_IT+0x648>
 800382a:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 800382e:	f02c 0c01 	bic.w	ip, ip, #1
 8003832:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003836:	e667      	b.n	8003508 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8003838:	f8df e024 	ldr.w	lr, [pc, #36]	@ 8003860 <HAL_DMA_Start_IT+0x648>
 800383c:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 8003840:	f02c 0c01 	bic.w	ip, ip, #1
 8003844:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003848:	e65e      	b.n	8003508 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800384a:	4905      	ldr	r1, [pc, #20]	@ (8003860 <HAL_DMA_Start_IT+0x648>)
 800384c:	e78b      	b.n	8003766 <HAL_DMA_Start_IT+0x54e>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800384e:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003850:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003852:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003854:	e54b      	b.n	80032ee <HAL_DMA_Start_IT+0xd6>
 8003856:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003858:	e555      	b.n	8003306 <HAL_DMA_Start_IT+0xee>
 800385a:	bf00      	nop
 800385c:	40020000 	.word	0x40020000
 8003860:	40020400 	.word	0x40020400
 8003864:	40020088 	.word	0x40020088
 8003868:	5802541c 	.word	0x5802541c
 800386c:	58025408 	.word	0x58025408
 8003870:	58025480 	.word	0x58025480
 8003874:	58025494 	.word	0x58025494
 8003878:	400200a0 	.word	0x400200a0
 800387c:	400204b8 	.word	0x400204b8

08003880 <HAL_DMA_IRQHandler>:
{
 8003880:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003882:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003884:	4b94      	ldr	r3, [pc, #592]	@ (8003ad8 <HAL_DMA_IRQHandler+0x258>)
{
 8003886:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003888:	6d85      	ldr	r5, [r0, #88]	@ 0x58
{
 800388a:	4607      	mov	r7, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800388c:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0U;
 800388e:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003890:	4b92      	ldr	r3, [pc, #584]	@ (8003adc <HAL_DMA_IRQHandler+0x25c>)
 8003892:	6802      	ldr	r2, [r0, #0]
 8003894:	4892      	ldr	r0, [pc, #584]	@ (8003ae0 <HAL_DMA_IRQHandler+0x260>)
  tmpisr_dma  = regs_dma->ISR;
 8003896:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003898:	4282      	cmp	r2, r0
 800389a:	bf18      	it	ne
 800389c:	429a      	cmpne	r2, r3
 800389e:	f100 0018 	add.w	r0, r0, #24
  tmpisr_bdma = regs_bdma->ISR;
 80038a2:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	4282      	cmp	r2, r0
 80038ac:	bf08      	it	eq
 80038ae:	f043 0301 	orreq.w	r3, r3, #1
 80038b2:	3018      	adds	r0, #24
 80038b4:	4282      	cmp	r2, r0
 80038b6:	bf08      	it	eq
 80038b8:	f043 0301 	orreq.w	r3, r3, #1
 80038bc:	3018      	adds	r0, #24
 80038be:	4282      	cmp	r2, r0
 80038c0:	bf08      	it	eq
 80038c2:	f043 0301 	orreq.w	r3, r3, #1
 80038c6:	3018      	adds	r0, #24
 80038c8:	4282      	cmp	r2, r0
 80038ca:	bf08      	it	eq
 80038cc:	f043 0301 	orreq.w	r3, r3, #1
 80038d0:	3018      	adds	r0, #24
 80038d2:	4282      	cmp	r2, r0
 80038d4:	bf08      	it	eq
 80038d6:	f043 0301 	orreq.w	r3, r3, #1
 80038da:	3018      	adds	r0, #24
 80038dc:	4282      	cmp	r2, r0
 80038de:	bf08      	it	eq
 80038e0:	f043 0301 	orreq.w	r3, r3, #1
 80038e4:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80038e8:	4282      	cmp	r2, r0
 80038ea:	bf08      	it	eq
 80038ec:	f043 0301 	orreq.w	r3, r3, #1
 80038f0:	3018      	adds	r0, #24
 80038f2:	4282      	cmp	r2, r0
 80038f4:	bf08      	it	eq
 80038f6:	f043 0301 	orreq.w	r3, r3, #1
 80038fa:	3018      	adds	r0, #24
 80038fc:	4282      	cmp	r2, r0
 80038fe:	bf08      	it	eq
 8003900:	f043 0301 	orreq.w	r3, r3, #1
 8003904:	3018      	adds	r0, #24
 8003906:	4282      	cmp	r2, r0
 8003908:	bf08      	it	eq
 800390a:	f043 0301 	orreq.w	r3, r3, #1
 800390e:	3018      	adds	r0, #24
 8003910:	4282      	cmp	r2, r0
 8003912:	bf08      	it	eq
 8003914:	f043 0301 	orreq.w	r3, r3, #1
 8003918:	3018      	adds	r0, #24
 800391a:	4282      	cmp	r2, r0
 800391c:	bf08      	it	eq
 800391e:	f043 0301 	orreq.w	r3, r3, #1
 8003922:	3018      	adds	r0, #24
 8003924:	4282      	cmp	r2, r0
 8003926:	bf08      	it	eq
 8003928:	f043 0301 	orreq.w	r3, r3, #1
 800392c:	b91b      	cbnz	r3, 8003936 <HAL_DMA_IRQHandler+0xb6>
 800392e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ae4 <HAL_DMA_IRQHandler+0x264>)
 8003930:	429a      	cmp	r2, r3
 8003932:	f040 812f 	bne.w	8003b94 <HAL_DMA_IRQHandler+0x314>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003938:	2108      	movs	r1, #8
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	4099      	lsls	r1, r3
 8003940:	4221      	tst	r1, r4
 8003942:	d00b      	beq.n	800395c <HAL_DMA_IRQHandler+0xdc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003944:	6810      	ldr	r0, [r2, #0]
 8003946:	0740      	lsls	r0, r0, #29
 8003948:	d508      	bpl.n	800395c <HAL_DMA_IRQHandler+0xdc>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800394a:	6810      	ldr	r0, [r2, #0]
 800394c:	f020 0004 	bic.w	r0, r0, #4
 8003950:	6010      	str	r0, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003952:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003954:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003956:	f041 0101 	orr.w	r1, r1, #1
 800395a:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800395c:	fa24 f103 	lsr.w	r1, r4, r3
 8003960:	07c8      	lsls	r0, r1, #31
 8003962:	d509      	bpl.n	8003978 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003964:	6951      	ldr	r1, [r2, #20]
 8003966:	0609      	lsls	r1, r1, #24
 8003968:	d506      	bpl.n	8003978 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800396a:	2101      	movs	r1, #1
 800396c:	4099      	lsls	r1, r3
 800396e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003970:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003972:	f041 0102 	orr.w	r1, r1, #2
 8003976:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003978:	2104      	movs	r1, #4
 800397a:	4099      	lsls	r1, r3
 800397c:	4221      	tst	r1, r4
 800397e:	d007      	beq.n	8003990 <HAL_DMA_IRQHandler+0x110>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003980:	6810      	ldr	r0, [r2, #0]
 8003982:	0780      	lsls	r0, r0, #30
 8003984:	d504      	bpl.n	8003990 <HAL_DMA_IRQHandler+0x110>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003986:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003988:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800398a:	f041 0104 	orr.w	r1, r1, #4
 800398e:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003990:	2110      	movs	r1, #16
 8003992:	4099      	lsls	r1, r3
 8003994:	4221      	tst	r1, r4
 8003996:	f000 80b0 	beq.w	8003afa <HAL_DMA_IRQHandler+0x27a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800399a:	6810      	ldr	r0, [r2, #0]
 800399c:	0700      	lsls	r0, r0, #28
 800399e:	f140 80ac 	bpl.w	8003afa <HAL_DMA_IRQHandler+0x27a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039a2:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039a4:	6811      	ldr	r1, [r2, #0]
 80039a6:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039aa:	6811      	ldr	r1, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039ac:	f040 809e 	bne.w	8003aec <HAL_DMA_IRQHandler+0x26c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039b0:	05c9      	lsls	r1, r1, #23
 80039b2:	d403      	bmi.n	80039bc <HAL_DMA_IRQHandler+0x13c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039b4:	6811      	ldr	r1, [r2, #0]
 80039b6:	f021 0108 	bic.w	r1, r1, #8
 80039ba:	6011      	str	r1, [r2, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80039bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039be:	2900      	cmp	r1, #0
 80039c0:	f000 809b 	beq.w	8003afa <HAL_DMA_IRQHandler+0x27a>
            hdma->XferHalfCpltCallback(hdma);
 80039c4:	4638      	mov	r0, r7
 80039c6:	4788      	blx	r1
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ca:	2120      	movs	r1, #32
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	4099      	lsls	r1, r3
 80039d2:	4221      	tst	r1, r4
 80039d4:	d053      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	4840      	ldr	r0, [pc, #256]	@ (8003adc <HAL_DMA_IRQHandler+0x25c>)
 80039da:	4c41      	ldr	r4, [pc, #260]	@ (8003ae0 <HAL_DMA_IRQHandler+0x260>)
 80039dc:	42a2      	cmp	r2, r4
 80039de:	bf18      	it	ne
 80039e0:	4282      	cmpne	r2, r0
 80039e2:	f104 0418 	add.w	r4, r4, #24
 80039e6:	bf0c      	ite	eq
 80039e8:	2001      	moveq	r0, #1
 80039ea:	2000      	movne	r0, #0
 80039ec:	42a2      	cmp	r2, r4
 80039ee:	bf08      	it	eq
 80039f0:	f040 0001 	orreq.w	r0, r0, #1
 80039f4:	3418      	adds	r4, #24
 80039f6:	42a2      	cmp	r2, r4
 80039f8:	bf08      	it	eq
 80039fa:	f040 0001 	orreq.w	r0, r0, #1
 80039fe:	3418      	adds	r4, #24
 8003a00:	42a2      	cmp	r2, r4
 8003a02:	bf08      	it	eq
 8003a04:	f040 0001 	orreq.w	r0, r0, #1
 8003a08:	3418      	adds	r4, #24
 8003a0a:	42a2      	cmp	r2, r4
 8003a0c:	bf08      	it	eq
 8003a0e:	f040 0001 	orreq.w	r0, r0, #1
 8003a12:	3418      	adds	r4, #24
 8003a14:	42a2      	cmp	r2, r4
 8003a16:	bf08      	it	eq
 8003a18:	f040 0001 	orreq.w	r0, r0, #1
 8003a1c:	3418      	adds	r4, #24
 8003a1e:	42a2      	cmp	r2, r4
 8003a20:	bf08      	it	eq
 8003a22:	f040 0001 	orreq.w	r0, r0, #1
 8003a26:	f504 7456 	add.w	r4, r4, #856	@ 0x358
 8003a2a:	42a2      	cmp	r2, r4
 8003a2c:	bf08      	it	eq
 8003a2e:	f040 0001 	orreq.w	r0, r0, #1
 8003a32:	3418      	adds	r4, #24
 8003a34:	42a2      	cmp	r2, r4
 8003a36:	bf08      	it	eq
 8003a38:	f040 0001 	orreq.w	r0, r0, #1
 8003a3c:	3418      	adds	r4, #24
 8003a3e:	42a2      	cmp	r2, r4
 8003a40:	bf08      	it	eq
 8003a42:	f040 0001 	orreq.w	r0, r0, #1
 8003a46:	3418      	adds	r4, #24
 8003a48:	42a2      	cmp	r2, r4
 8003a4a:	bf08      	it	eq
 8003a4c:	f040 0001 	orreq.w	r0, r0, #1
 8003a50:	3418      	adds	r4, #24
 8003a52:	42a2      	cmp	r2, r4
 8003a54:	bf08      	it	eq
 8003a56:	f040 0001 	orreq.w	r0, r0, #1
 8003a5a:	3418      	adds	r4, #24
 8003a5c:	42a2      	cmp	r2, r4
 8003a5e:	bf08      	it	eq
 8003a60:	f040 0001 	orreq.w	r0, r0, #1
 8003a64:	3418      	adds	r4, #24
 8003a66:	42a2      	cmp	r2, r4
 8003a68:	bf08      	it	eq
 8003a6a:	f040 0001 	orreq.w	r0, r0, #1
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d147      	bne.n	8003b02 <HAL_DMA_IRQHandler+0x282>
 8003a72:	481c      	ldr	r0, [pc, #112]	@ (8003ae4 <HAL_DMA_IRQHandler+0x264>)
 8003a74:	4282      	cmp	r2, r0
 8003a76:	d044      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x282>
 8003a78:	6810      	ldr	r0, [r2, #0]
 8003a7a:	0780      	lsls	r0, r0, #30
 8003a7c:	d444      	bmi.n	8003b08 <HAL_DMA_IRQHandler+0x288>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d070      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x2e6>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a86:	07dc      	lsls	r4, r3, #31
 8003a88:	d51e      	bpl.n	8003ac8 <HAL_DMA_IRQHandler+0x248>
        __HAL_DMA_DISABLE(hdma);
 8003a8a:	683a      	ldr	r2, [r7, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a8c:	2104      	movs	r1, #4
 8003a8e:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a92:	4915      	ldr	r1, [pc, #84]	@ (8003ae8 <HAL_DMA_IRQHandler+0x268>)
        __HAL_DMA_DISABLE(hdma);
 8003a94:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a96:	fba1 6106 	umull	r6, r1, r1, r6
        __HAL_DMA_DISABLE(hdma);
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a9e:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	e002      	b.n	8003aaa <HAL_DMA_IRQHandler+0x22a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003aa4:	6813      	ldr	r3, [r2, #0]
 8003aa6:	07d8      	lsls	r0, r3, #31
 8003aa8:	d504      	bpl.n	8003ab4 <HAL_DMA_IRQHandler+0x234>
          if (++count > timeout)
 8003aaa:	9b01      	ldr	r3, [sp, #4]
 8003aac:	3301      	adds	r3, #1
 8003aae:	428b      	cmp	r3, r1
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	d9f7      	bls.n	8003aa4 <HAL_DMA_IRQHandler+0x224>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ab4:	6813      	ldr	r3, [r2, #0]
 8003ab6:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ab8:	bf4c      	ite	mi
 8003aba:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003abc:	2301      	movpl	r3, #1
 8003abe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8003ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d04b      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x2e6>
          hdma->XferCpltCallback(hdma);
 8003ace:	4638      	mov	r0, r7
}
 8003ad0:	b003      	add	sp, #12
 8003ad2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 8003ad6:	4718      	bx	r3
 8003ad8:	24000070 	.word	0x24000070
 8003adc:	40020010 	.word	0x40020010
 8003ae0:	40020028 	.word	0x40020028
 8003ae4:	400204b8 	.word	0x400204b8
 8003ae8:	1b4e81b5 	.word	0x1b4e81b5
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003aec:	0308      	lsls	r0, r1, #12
 8003aee:	f57f af65 	bpl.w	80039bc <HAL_DMA_IRQHandler+0x13c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003af2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003af4:	2900      	cmp	r1, #0
 8003af6:	f47f af65 	bne.w	80039c4 <HAL_DMA_IRQHandler+0x144>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003afa:	2120      	movs	r1, #32
 8003afc:	4099      	lsls	r1, r3
 8003afe:	420c      	tst	r4, r1
 8003b00:	d0bd      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b02:	6810      	ldr	r0, [r2, #0]
 8003b04:	06c4      	lsls	r4, r0, #27
 8003b06:	d5ba      	bpl.n	8003a7e <HAL_DMA_IRQHandler+0x1fe>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b08:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b0a:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8003b0e:	2904      	cmp	r1, #4
 8003b10:	d00e      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x2b0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b12:	6813      	ldr	r3, [r2, #0]
 8003b14:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b18:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b1a:	d026      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x2ea>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b1c:	031d      	lsls	r5, r3, #12
 8003b1e:	d531      	bpl.n	8003b84 <HAL_DMA_IRQHandler+0x304>
          if(hdma->XferCpltCallback != NULL)
 8003b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0ab      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x1fe>
            hdma->XferCpltCallback(hdma);
 8003b26:	4638      	mov	r0, r7
 8003b28:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b2c:	b1db      	cbz	r3, 8003b66 <HAL_DMA_IRQHandler+0x2e6>
 8003b2e:	e7a9      	b.n	8003a84 <HAL_DMA_IRQHandler+0x204>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b30:	6811      	ldr	r1, [r2, #0]
 8003b32:	f021 0116 	bic.w	r1, r1, #22
 8003b36:	6011      	str	r1, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b38:	6951      	ldr	r1, [r2, #20]
 8003b3a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003b3e:	6151      	str	r1, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b42:	b319      	cbz	r1, 8003b8c <HAL_DMA_IRQHandler+0x30c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b44:	6811      	ldr	r1, [r2, #0]
 8003b46:	f021 0108 	bic.w	r1, r1, #8
 8003b4a:	6011      	str	r1, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b4c:	223f      	movs	r2, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8003b4e:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
          __HAL_UNLOCK(hdma);
 8003b54:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b56:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8003b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8003b5a:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003b5e:	f887 2034 	strb.w	r2, [r7, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1b3      	bne.n	8003ace <HAL_DMA_IRQHandler+0x24e>
}
 8003b66:	b003      	add	sp, #12
 8003b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b6a:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8003b6e:	d1d7      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003b70:	6811      	ldr	r1, [r2, #0]
 8003b72:	f021 0110 	bic.w	r1, r1, #16
 8003b76:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003b78:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8003b7a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8003b82:	e7cd      	b.n	8003b20 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1CpltCallback != NULL)
 8003b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1cd      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x2a6>
 8003b8a:	e778      	b.n	8003a7e <HAL_DMA_IRQHandler+0x1fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b8c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003b8e:	2900      	cmp	r1, #0
 8003b90:	d1d8      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x2c4>
 8003b92:	e7db      	b.n	8003b4c <HAL_DMA_IRQHandler+0x2cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b94:	4b40      	ldr	r3, [pc, #256]	@ (8003c98 <HAL_DMA_IRQHandler+0x418>)
 8003b96:	4841      	ldr	r0, [pc, #260]	@ (8003c9c <HAL_DMA_IRQHandler+0x41c>)
 8003b98:	4282      	cmp	r2, r0
 8003b9a:	bf18      	it	ne
 8003b9c:	429a      	cmpne	r2, r3
 8003b9e:	f100 0014 	add.w	r0, r0, #20
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	4282      	cmp	r2, r0
 8003baa:	bf08      	it	eq
 8003bac:	f043 0301 	orreq.w	r3, r3, #1
 8003bb0:	3014      	adds	r0, #20
 8003bb2:	4282      	cmp	r2, r0
 8003bb4:	bf08      	it	eq
 8003bb6:	f043 0301 	orreq.w	r3, r3, #1
 8003bba:	3014      	adds	r0, #20
 8003bbc:	4282      	cmp	r2, r0
 8003bbe:	bf08      	it	eq
 8003bc0:	f043 0301 	orreq.w	r3, r3, #1
 8003bc4:	3014      	adds	r0, #20
 8003bc6:	4282      	cmp	r2, r0
 8003bc8:	bf08      	it	eq
 8003bca:	f043 0301 	orreq.w	r3, r3, #1
 8003bce:	3014      	adds	r0, #20
 8003bd0:	4282      	cmp	r2, r0
 8003bd2:	bf08      	it	eq
 8003bd4:	f043 0301 	orreq.w	r3, r3, #1
 8003bd8:	b913      	cbnz	r3, 8003be0 <HAL_DMA_IRQHandler+0x360>
 8003bda:	4b31      	ldr	r3, [pc, #196]	@ (8003ca0 <HAL_DMA_IRQHandler+0x420>)
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1c2      	bne.n	8003b66 <HAL_DMA_IRQHandler+0x2e6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003be0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003be2:	2404      	movs	r4, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003be4:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003be6:	f000 001f 	and.w	r0, r0, #31
 8003bea:	4084      	lsls	r4, r0
 8003bec:	420c      	tst	r4, r1
 8003bee:	d00b      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x388>
 8003bf0:	075e      	lsls	r6, r3, #29
 8003bf2:	d509      	bpl.n	8003c08 <HAL_DMA_IRQHandler+0x388>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf4:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003bf6:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf8:	d532      	bpl.n	8003c60 <HAL_DMA_IRQHandler+0x3e0>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bfa:	03da      	lsls	r2, r3, #15
 8003bfc:	d436      	bmi.n	8003c6c <HAL_DMA_IRQHandler+0x3ec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f47f af64 	bne.w	8003ace <HAL_DMA_IRQHandler+0x24e>
 8003c06:	e7ae      	b.n	8003b66 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c08:	2402      	movs	r4, #2
 8003c0a:	4084      	lsls	r4, r0
 8003c0c:	420c      	tst	r4, r1
 8003c0e:	d00b      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x3a8>
 8003c10:	079e      	lsls	r6, r3, #30
 8003c12:	d509      	bpl.n	8003c28 <HAL_DMA_IRQHandler+0x3a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c14:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c16:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c18:	d52d      	bpl.n	8003c76 <HAL_DMA_IRQHandler+0x3f6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c1a:	03da      	lsls	r2, r3, #15
 8003c1c:	d437      	bmi.n	8003c8e <HAL_DMA_IRQHandler+0x40e>
          if(hdma->XferM1CpltCallback != NULL)
 8003c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f af54 	bne.w	8003ace <HAL_DMA_IRQHandler+0x24e>
 8003c26:	e79e      	b.n	8003b66 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c28:	2408      	movs	r4, #8
 8003c2a:	4084      	lsls	r4, r0
 8003c2c:	420c      	tst	r4, r1
 8003c2e:	d09a      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x2e6>
 8003c30:	071b      	lsls	r3, r3, #28
 8003c32:	d598      	bpl.n	8003b66 <HAL_DMA_IRQHandler+0x2e6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c34:	6813      	ldr	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 8003c36:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c38:	f023 030e 	bic.w	r3, r3, #14
 8003c3c:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c3e:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8003c40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c42:	fa03 f000 	lsl.w	r0, r3, r0
 8003c46:	6068      	str	r0, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c48:	657b      	str	r3, [r7, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 8003c4a:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 8003c52:	2a00      	cmp	r2, #0
 8003c54:	d087      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x2e6>
        hdma->XferErrorCallback(hdma);
 8003c56:	4638      	mov	r0, r7
}
 8003c58:	b003      	add	sp, #12
 8003c5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8003c5e:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c60:	069b      	lsls	r3, r3, #26
 8003c62:	d403      	bmi.n	8003c6c <HAL_DMA_IRQHandler+0x3ec>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c64:	6813      	ldr	r3, [r2, #0]
 8003c66:	f023 0304 	bic.w	r3, r3, #4
 8003c6a:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003c6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f47f af2d 	bne.w	8003ace <HAL_DMA_IRQHandler+0x24e>
 8003c74:	e777      	b.n	8003b66 <HAL_DMA_IRQHandler+0x2e6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c76:	f013 0320 	ands.w	r3, r3, #32
 8003c7a:	d108      	bne.n	8003c8e <HAL_DMA_IRQHandler+0x40e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c7c:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003c7e:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c80:	f021 010a 	bic.w	r1, r1, #10
 8003c84:	6011      	str	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003c86:	f887 0035 	strb.w	r0, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003c8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f af1c 	bne.w	8003ace <HAL_DMA_IRQHandler+0x24e>
 8003c96:	e766      	b.n	8003b66 <HAL_DMA_IRQHandler+0x2e6>
 8003c98:	58025408 	.word	0x58025408
 8003c9c:	5802541c 	.word	0x5802541c
 8003ca0:	58025494 	.word	0x58025494

08003ca4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ca4:	680b      	ldr	r3, [r1, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 81dc 	beq.w	8004064 <HAL_GPIO_Init+0x3c0>
 8003cac:	4ab4      	ldr	r2, [pc, #720]	@ (8003f80 <HAL_GPIO_Init+0x2dc>)
 8003cae:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 8003cb0:	f04f 0200 	mov.w	r2, #0
{
 8003cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cb8:	f04f 0b01 	mov.w	fp, #1
{
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	f000 8105 	beq.w	8003ecc <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cc2:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cc6:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003cc8:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 8003ccc:	9b00      	ldr	r3, [sp, #0]
 8003cce:	ea1c 0a03 	ands.w	sl, ip, r3
 8003cd2:	f000 814b 	beq.w	8003f6c <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cd6:	684d      	ldr	r5, [r1, #4]
 8003cd8:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cda:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cdc:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ce0:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce4:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ce8:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cea:	f1b8 0f01 	cmp.w	r8, #1
 8003cee:	f240 815d 	bls.w	8003fac <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf2:	2f03      	cmp	r7, #3
 8003cf4:	f040 81cf 	bne.w	8004096 <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cf8:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8003cfc:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cfe:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d02:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d06:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 8003d0a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d0c:	f000 812e 	beq.w	8003f6c <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d10:	4e9c      	ldr	r6, [pc, #624]	@ (8003f84 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d12:	f002 0703 	and.w	r7, r2, #3
 8003d16:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d18:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d1c:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1e:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d22:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d26:	4b98      	ldr	r3, [pc, #608]	@ (8003f88 <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d28:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8003d2c:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 8003d30:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d34:	4298      	cmp	r0, r3
 8003d36:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d3a:	f004 0402 	and.w	r4, r4, #2
 8003d3e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003d42:	9403      	str	r4, [sp, #12]
 8003d44:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003d46:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d48:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d4c:	f000 8178 	beq.w	8004040 <HAL_GPIO_Init+0x39c>
 8003d50:	4b8e      	ldr	r3, [pc, #568]	@ (8003f8c <HAL_GPIO_Init+0x2e8>)
 8003d52:	4298      	cmp	r0, r3
 8003d54:	f000 80de 	beq.w	8003f14 <HAL_GPIO_Init+0x270>
 8003d58:	f8df c234 	ldr.w	ip, [pc, #564]	@ 8003f90 <HAL_GPIO_Init+0x2ec>
 8003d5c:	4560      	cmp	r0, ip
 8003d5e:	f000 817b 	beq.w	8004058 <HAL_GPIO_Init+0x3b4>
 8003d62:	f8df c230 	ldr.w	ip, [pc, #560]	@ 8003f94 <HAL_GPIO_Init+0x2f0>
 8003d66:	4560      	cmp	r0, ip
 8003d68:	f000 817d 	beq.w	8004066 <HAL_GPIO_Init+0x3c2>
 8003d6c:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8003f98 <HAL_GPIO_Init+0x2f4>
 8003d70:	4560      	cmp	r0, ip
 8003d72:	f000 816b 	beq.w	800404c <HAL_GPIO_Init+0x3a8>
 8003d76:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8003f9c <HAL_GPIO_Init+0x2f8>
 8003d7a:	4560      	cmp	r0, ip
 8003d7c:	f000 8179 	beq.w	8004072 <HAL_GPIO_Init+0x3ce>
 8003d80:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 8003fa0 <HAL_GPIO_Init+0x2fc>
 8003d84:	4560      	cmp	r0, ip
 8003d86:	f000 817a 	beq.w	800407e <HAL_GPIO_Init+0x3da>
 8003d8a:	f8df c218 	ldr.w	ip, [pc, #536]	@ 8003fa4 <HAL_GPIO_Init+0x300>
 8003d8e:	4560      	cmp	r0, ip
 8003d90:	f000 817b 	beq.w	800408a <HAL_GPIO_Init+0x3e6>
 8003d94:	f8df c210 	ldr.w	ip, [pc, #528]	@ 8003fa8 <HAL_GPIO_Init+0x304>
 8003d98:	4560      	cmp	r0, ip
 8003d9a:	bf0c      	ite	eq
 8003d9c:	f04f 0c09 	moveq.w	ip, #9
 8003da0:	f04f 0c0a 	movne.w	ip, #10
 8003da4:	fa0c f707 	lsl.w	r7, ip, r7
 8003da8:	433c      	orrs	r4, r7
 8003daa:	e0b8      	b.n	8003f1e <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 8003dac:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db0:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003db2:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003db4:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003db8:	fa06 f807 	lsl.w	r8, r6, r7
 8003dbc:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003dc0:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dc4:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003dc8:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dcc:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dd0:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd4:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 8003dd8:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 8003ddc:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de0:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003de2:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de6:	fa06 fe07 	lsl.w	lr, r6, r7
 8003dea:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 8003dee:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df2:	d117      	bne.n	8003e24 <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003df4:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003df8:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003dfa:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003dfe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003e02:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e06:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8003e0a:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e0e:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e10:	260f      	movs	r6, #15
 8003e12:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e16:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e18:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e1c:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003e20:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e24:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8003e26:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e28:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e2c:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e30:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8003e34:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e36:	d045      	beq.n	8003ec4 <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e38:	4f52      	ldr	r7, [pc, #328]	@ (8003f84 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e3a:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3c:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8003e40:	f044 0402 	orr.w	r4, r4, #2
 8003e44:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8003e48:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8003e4c:	f022 0703 	bic.w	r7, r2, #3
 8003e50:	f004 0402 	and.w	r4, r4, #2
 8003e54:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 8003e58:	9403      	str	r4, [sp, #12]
 8003e5a:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8003e5e:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e60:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003e64:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e68:	00a4      	lsls	r4, r4, #2
 8003e6a:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e6e:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e70:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e74:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 8003e76:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 8003e7a:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 8003e7e:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e80:	f100 80d2 	bmi.w	8004028 <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 8003e84:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003e86:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8003e8a:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 8003e8c:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e8e:	02ae      	lsls	r6, r5, #10
 8003e90:	f100 80d3 	bmi.w	800403a <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 8003e94:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003e96:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8003e9a:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e9c:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ea0:	03ae      	lsls	r6, r5, #14
 8003ea2:	f100 80c7 	bmi.w	8004034 <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 8003ea6:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ea8:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eac:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003eae:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003eb2:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eb6:	f100 80ba 	bmi.w	800402e <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 8003eba:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ebc:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8003ec0:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 8003ec4:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ec6:	fa33 f402 	lsrs.w	r4, r3, r2
 8003eca:	d055      	beq.n	8003f78 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ecc:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 8003ed0:	ea13 0c0e 	ands.w	ip, r3, lr
 8003ed4:	d0f6      	beq.n	8003ec4 <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ed6:	684d      	ldr	r5, [r1, #4]
 8003ed8:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eda:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003edc:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ee0:	fa06 f807 	lsl.w	r8, r6, r7
 8003ee4:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ee8:	f104 38ff 	add.w	r8, r4, #4294967295
 8003eec:	f1b8 0f01 	cmp.w	r8, #1
 8003ef0:	f67f af5c 	bls.w	8003dac <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef4:	2c03      	cmp	r4, #3
 8003ef6:	d095      	beq.n	8003e24 <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 8003ef8:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8003f80 <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003efc:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 8003efe:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f02:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f06:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f0a:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 8003f0e:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f12:	e787      	b.n	8003e24 <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f14:	f04f 0c02 	mov.w	ip, #2
 8003f18:	fa0c f707 	lsl.w	r7, ip, r7
 8003f1c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f1e:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f20:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8003f22:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8003f26:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 8003f2a:	bf4c      	ite	mi
 8003f2c:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 8003f30:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f32:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 8003f34:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 8003f38:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8003f3c:	bf54      	ite	pl
 8003f3e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003f40:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f44:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8003f46:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003f4a:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8003f4e:	bf54      	ite	pl
 8003f50:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003f52:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f56:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003f58:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003f5c:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8003f60:	bf54      	ite	pl
 8003f62:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003f64:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 8003f68:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 8003f6c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f6e:	9b00      	ldr	r3, [sp, #0]
 8003f70:	fa33 f402 	lsrs.w	r4, r3, r2
 8003f74:	f47f aea8 	bne.w	8003cc8 <HAL_GPIO_Init+0x24>
  }
}
 8003f78:	b005      	add	sp, #20
 8003f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	58020000 	.word	0x58020000
 8003f84:	58024400 	.word	0x58024400
 8003f88:	58020400 	.word	0x58020400
 8003f8c:	58020800 	.word	0x58020800
 8003f90:	58020c00 	.word	0x58020c00
 8003f94:	58021000 	.word	0x58021000
 8003f98:	58021400 	.word	0x58021400
 8003f9c:	58021800 	.word	0x58021800
 8003fa0:	58021c00 	.word	0x58021c00
 8003fa4:	58022000 	.word	0x58022000
 8003fa8:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 8003fac:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fb0:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fb2:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fb4:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fb8:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fbc:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fbe:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003fc2:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc6:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003fca:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fce:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fd2:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fd6:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8003fda:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fde:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 8003fe2:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fe6:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fea:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003fee:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ff2:	f47f ae81 	bne.w	8003cf8 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ff6:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ffa:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003ffc:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004000:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004004:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004008:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 800400c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004010:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004012:	230f      	movs	r3, #15
 8004014:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004018:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800401a:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800401e:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 8004022:	f8c8 c020 	str.w	ip, [r8, #32]
 8004026:	e667      	b.n	8003cf8 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8004028:	ea44 040c 	orr.w	r4, r4, ip
 800402c:	e72b      	b.n	8003e86 <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 800402e:	ea44 040c 	orr.w	r4, r4, ip
 8004032:	e743      	b.n	8003ebc <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 8004034:	ea4c 0404 	orr.w	r4, ip, r4
 8004038:	e736      	b.n	8003ea8 <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 800403a:	ea44 040c 	orr.w	r4, r4, ip
 800403e:	e72a      	b.n	8003e96 <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004040:	f04f 0c01 	mov.w	ip, #1
 8004044:	fa0c f707 	lsl.w	r7, ip, r7
 8004048:	433c      	orrs	r4, r7
 800404a:	e768      	b.n	8003f1e <HAL_GPIO_Init+0x27a>
 800404c:	f04f 0c05 	mov.w	ip, #5
 8004050:	fa0c f707 	lsl.w	r7, ip, r7
 8004054:	433c      	orrs	r4, r7
 8004056:	e762      	b.n	8003f1e <HAL_GPIO_Init+0x27a>
 8004058:	f04f 0c03 	mov.w	ip, #3
 800405c:	fa0c f707 	lsl.w	r7, ip, r7
 8004060:	433c      	orrs	r4, r7
 8004062:	e75c      	b.n	8003f1e <HAL_GPIO_Init+0x27a>
 8004064:	4770      	bx	lr
 8004066:	f04f 0c04 	mov.w	ip, #4
 800406a:	fa0c f707 	lsl.w	r7, ip, r7
 800406e:	433c      	orrs	r4, r7
 8004070:	e755      	b.n	8003f1e <HAL_GPIO_Init+0x27a>
 8004072:	f04f 0c06 	mov.w	ip, #6
 8004076:	fa0c f707 	lsl.w	r7, ip, r7
 800407a:	433c      	orrs	r4, r7
 800407c:	e74f      	b.n	8003f1e <HAL_GPIO_Init+0x27a>
 800407e:	f04f 0c07 	mov.w	ip, #7
 8004082:	fa0c f707 	lsl.w	r7, ip, r7
 8004086:	433c      	orrs	r4, r7
 8004088:	e749      	b.n	8003f1e <HAL_GPIO_Init+0x27a>
 800408a:	f04f 0c08 	mov.w	ip, #8
 800408e:	fa0c f707 	lsl.w	r7, ip, r7
 8004092:	433c      	orrs	r4, r7
 8004094:	e743      	b.n	8003f1e <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 8004096:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800409a:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800409c:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a0:	fa03 fc04 	lsl.w	ip, r3, r4
 80040a4:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80040a8:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ac:	e624      	b.n	8003cf8 <HAL_GPIO_Init+0x54>
 80040ae:	bf00      	nop

080040b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040b0:	b902      	cbnz	r2, 80040b4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040b2:	0409      	lsls	r1, r1, #16
 80040b4:	6181      	str	r1, [r0, #24]
  }
}
 80040b6:	4770      	bx	lr

080040b8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040b8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040ba:	4c10      	ldr	r4, [pc, #64]	@ (80040fc <HAL_PWREx_ConfigSupply+0x44>)
 80040bc:	68e3      	ldr	r3, [r4, #12]
 80040be:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040c2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040c4:	d105      	bne.n	80040d2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	1a18      	subs	r0, r3, r0
 80040cc:	bf18      	it	ne
 80040ce:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80040d0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80040d2:	f023 0307 	bic.w	r3, r3, #7
 80040d6:	4303      	orrs	r3, r0
 80040d8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80040da:	f7fd fb77 	bl	80017cc <HAL_GetTick>
 80040de:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040e0:	e005      	b.n	80040ee <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040e2:	f7fd fb73 	bl	80017cc <HAL_GetTick>
 80040e6:	1b40      	subs	r0, r0, r5
 80040e8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80040ec:	d804      	bhi.n	80040f8 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040ee:	6863      	ldr	r3, [r4, #4]
 80040f0:	049b      	lsls	r3, r3, #18
 80040f2:	d5f6      	bpl.n	80040e2 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 80040f4:	2000      	movs	r0, #0
}
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80040f8:	2001      	movs	r0, #1
}
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	58024800 	.word	0x58024800

08004100 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004100:	4b33      	ldr	r3, [pc, #204]	@ (80041d0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8004102:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004104:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004106:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004108:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800410a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800410e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004110:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8004114:	d036      	beq.n	8004184 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004116:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800411a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800411e:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004122:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004126:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 800412a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800412c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004130:	ee06 2a90 	vmov	s13, r2
 8004134:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8004138:	d002      	beq.n	8004140 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 800413a:	2902      	cmp	r1, #2
 800413c:	d042      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800413e:	b319      	cbz	r1, 8004188 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004140:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80041d4 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8004144:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800415a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004166:	4b1a      	ldr	r3, [pc, #104]	@ (80041d0 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800416e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004170:	ee07 3a10 	vmov	s14, r3
 8004174:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004178:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800417c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004180:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8004184:	bc30      	pop	{r4, r5}
 8004186:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	0692      	lsls	r2, r2, #26
 800418c:	d51d      	bpl.n	80041ca <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800418e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004190:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004194:	4a10      	ldr	r2, [pc, #64]	@ (80041d8 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004198:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800419c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041a0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041a2:	ee06 3a10 	vmov	s12, r3
 80041a6:	ee05 2a90 	vmov	s11, r2
 80041aa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80041ae:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80041b2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80041b6:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80041ba:	ee36 7a26 	vadd.f32	s14, s12, s13
 80041be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c2:	e7d0      	b.n	8004166 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041c4:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80041dc <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 80041c8:	e7bc      	b.n	8004144 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041ca:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80041e0 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 80041ce:	e7b9      	b.n	8004144 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80041d0:	58024400 	.word	0x58024400
 80041d4:	4a742400 	.word	0x4a742400
 80041d8:	03d09000 	.word	0x03d09000
 80041dc:	4bbebc20 	.word	0x4bbebc20
 80041e0:	4c742400 	.word	0x4c742400

080041e4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80041e4:	2800      	cmp	r0, #0
 80041e6:	f000 82e7 	beq.w	80047b8 <HAL_RCC_OscConfig+0x5d4>
{
 80041ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ec:	6803      	ldr	r3, [r0, #0]
 80041ee:	4604      	mov	r4, r0
 80041f0:	07d9      	lsls	r1, r3, #31
 80041f2:	d52e      	bpl.n	8004252 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f4:	4997      	ldr	r1, [pc, #604]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 80041f6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041f8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041fa:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041fe:	2a10      	cmp	r2, #16
 8004200:	f000 80ee 	beq.w	80043e0 <HAL_RCC_OscConfig+0x1fc>
 8004204:	2a18      	cmp	r2, #24
 8004206:	f000 80e6 	beq.w	80043d6 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800420a:	6863      	ldr	r3, [r4, #4]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004210:	f000 8111 	beq.w	8004436 <HAL_RCC_OscConfig+0x252>
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8167 	beq.w	80044e8 <HAL_RCC_OscConfig+0x304>
 800421a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800421e:	4b8d      	ldr	r3, [pc, #564]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	f000 8288 	beq.w	8004736 <HAL_RCC_OscConfig+0x552>
 8004226:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004232:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004234:	f7fd faca 	bl	80017cc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004238:	4e86      	ldr	r6, [pc, #536]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800423a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800423c:	e005      	b.n	800424a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800423e:	f7fd fac5 	bl	80017cc <HAL_GetTick>
 8004242:	1b40      	subs	r0, r0, r5
 8004244:	2864      	cmp	r0, #100	@ 0x64
 8004246:	f200 814d 	bhi.w	80044e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800424a:	6833      	ldr	r3, [r6, #0]
 800424c:	039b      	lsls	r3, r3, #14
 800424e:	d5f6      	bpl.n	800423e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	079d      	lsls	r5, r3, #30
 8004254:	d470      	bmi.n	8004338 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004256:	06d9      	lsls	r1, r3, #27
 8004258:	d533      	bpl.n	80042c2 <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425a:	4a7e      	ldr	r2, [pc, #504]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 800425c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800425e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004260:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004264:	2b08      	cmp	r3, #8
 8004266:	f000 80cb 	beq.w	8004400 <HAL_RCC_OscConfig+0x21c>
 800426a:	2b18      	cmp	r3, #24
 800426c:	f000 80c3 	beq.w	80043f6 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004270:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8004272:	4d78      	ldr	r5, [pc, #480]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 816f 	beq.w	8004558 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 800427a:	682b      	ldr	r3, [r5, #0]
 800427c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004280:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004282:	f7fd faa3 	bl	80017cc <HAL_GetTick>
 8004286:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004288:	e005      	b.n	8004296 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800428a:	f7fd fa9f 	bl	80017cc <HAL_GetTick>
 800428e:	1b80      	subs	r0, r0, r6
 8004290:	2802      	cmp	r0, #2
 8004292:	f200 8127 	bhi.w	80044e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004296:	682b      	ldr	r3, [r5, #0]
 8004298:	05db      	lsls	r3, r3, #23
 800429a:	d5f6      	bpl.n	800428a <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800429c:	f7fd fa9c 	bl	80017d8 <HAL_GetREVID>
 80042a0:	f241 0303 	movw	r3, #4099	@ 0x1003
 80042a4:	4298      	cmp	r0, r3
 80042a6:	f200 8267 	bhi.w	8004778 <HAL_RCC_OscConfig+0x594>
 80042aa:	6a22      	ldr	r2, [r4, #32]
 80042ac:	686b      	ldr	r3, [r5, #4]
 80042ae:	2a20      	cmp	r2, #32
 80042b0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80042b4:	bf0c      	ite	eq
 80042b6:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 80042ba:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80042be:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	071d      	lsls	r5, r3, #28
 80042c4:	d516      	bpl.n	80042f4 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042c6:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80042c8:	4d62      	ldr	r5, [pc, #392]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8122 	beq.w	8004514 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 80042d0:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80042d8:	f7fd fa78 	bl	80017cc <HAL_GetTick>
 80042dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042de:	e005      	b.n	80042ec <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e0:	f7fd fa74 	bl	80017cc <HAL_GetTick>
 80042e4:	1b80      	subs	r0, r0, r6
 80042e6:	2802      	cmp	r0, #2
 80042e8:	f200 80fc 	bhi.w	80044e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042ec:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80042ee:	0798      	lsls	r0, r3, #30
 80042f0:	d5f6      	bpl.n	80042e0 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	069a      	lsls	r2, r3, #26
 80042f6:	d516      	bpl.n	8004326 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80042f8:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80042fa:	4d56      	ldr	r5, [pc, #344]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 811a 	beq.w	8004536 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 8004302:	682b      	ldr	r3, [r5, #0]
 8004304:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004308:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800430a:	f7fd fa5f 	bl	80017cc <HAL_GetTick>
 800430e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004310:	e005      	b.n	800431e <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004312:	f7fd fa5b 	bl	80017cc <HAL_GetTick>
 8004316:	1b80      	subs	r0, r0, r6
 8004318:	2802      	cmp	r0, #2
 800431a:	f200 80e3 	bhi.w	80044e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800431e:	682b      	ldr	r3, [r5, #0]
 8004320:	049f      	lsls	r7, r3, #18
 8004322:	d5f6      	bpl.n	8004312 <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004324:	6823      	ldr	r3, [r4, #0]
 8004326:	0759      	lsls	r1, r3, #29
 8004328:	f100 808b 	bmi.w	8004442 <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	f040 80bf 	bne.w	80044b2 <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8004334:	2000      	movs	r0, #0
}
 8004336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004338:	4a46      	ldr	r2, [pc, #280]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 800433a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800433c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800433e:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8004342:	d12d      	bne.n	80043a0 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004344:	4b43      	ldr	r3, [pc, #268]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004346:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	0759      	lsls	r1, r3, #29
 800434c:	d501      	bpl.n	8004352 <HAL_RCC_OscConfig+0x16e>
 800434e:	2a00      	cmp	r2, #0
 8004350:	d04f      	beq.n	80043f2 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004352:	4d40      	ldr	r5, [pc, #256]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	f023 0319 	bic.w	r3, r3, #25
 800435a:	4313      	orrs	r3, r2
 800435c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800435e:	f7fd fa35 	bl	80017cc <HAL_GetTick>
 8004362:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004364:	e005      	b.n	8004372 <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004366:	f7fd fa31 	bl	80017cc <HAL_GetTick>
 800436a:	1b80      	subs	r0, r0, r6
 800436c:	2802      	cmp	r0, #2
 800436e:	f200 80b9 	bhi.w	80044e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004372:	682b      	ldr	r3, [r5, #0]
 8004374:	075b      	lsls	r3, r3, #29
 8004376:	d5f6      	bpl.n	8004366 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004378:	f7fd fa2e 	bl	80017d8 <HAL_GetREVID>
 800437c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004380:	4298      	cmp	r0, r3
 8004382:	f200 8110 	bhi.w	80045a6 <HAL_RCC_OscConfig+0x3c2>
 8004386:	6922      	ldr	r2, [r4, #16]
 8004388:	686b      	ldr	r3, [r5, #4]
 800438a:	2a40      	cmp	r2, #64	@ 0x40
 800438c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004390:	bf0c      	ite	eq
 8004392:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8004396:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800439a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	e75a      	b.n	8004256 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043a0:	2b18      	cmp	r3, #24
 80043a2:	f000 80fc 	beq.w	800459e <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043a6:	4d2b      	ldr	r5, [pc, #172]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043a8:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043aa:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043ac:	2a00      	cmp	r2, #0
 80043ae:	f000 80e5 	beq.w	800457c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043b2:	f023 0319 	bic.w	r3, r3, #25
 80043b6:	4313      	orrs	r3, r2
 80043b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043ba:	f7fd fa07 	bl	80017cc <HAL_GetTick>
 80043be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043c0:	e005      	b.n	80043ce <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c2:	f7fd fa03 	bl	80017cc <HAL_GetTick>
 80043c6:	1b80      	subs	r0, r0, r6
 80043c8:	2802      	cmp	r0, #2
 80043ca:	f200 808b 	bhi.w	80044e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ce:	682b      	ldr	r3, [r5, #0]
 80043d0:	075f      	lsls	r7, r3, #29
 80043d2:	d5f6      	bpl.n	80043c2 <HAL_RCC_OscConfig+0x1de>
 80043d4:	e7d0      	b.n	8004378 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80043d6:	f001 0103 	and.w	r1, r1, #3
 80043da:	2902      	cmp	r1, #2
 80043dc:	f47f af15 	bne.w	800420a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	0392      	lsls	r2, r2, #14
 80043e6:	f57f af34 	bpl.w	8004252 <HAL_RCC_OscConfig+0x6e>
 80043ea:	6862      	ldr	r2, [r4, #4]
 80043ec:	2a00      	cmp	r2, #0
 80043ee:	f47f af30 	bne.w	8004252 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 80043f2:	2001      	movs	r0, #1
}
 80043f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043f6:	f002 0203 	and.w	r2, r2, #3
 80043fa:	2a01      	cmp	r2, #1
 80043fc:	f47f af38 	bne.w	8004270 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004400:	4b14      	ldr	r3, [pc, #80]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	05da      	lsls	r2, r3, #23
 8004406:	d502      	bpl.n	800440e <HAL_RCC_OscConfig+0x22a>
 8004408:	69e3      	ldr	r3, [r4, #28]
 800440a:	2b80      	cmp	r3, #128	@ 0x80
 800440c:	d1f1      	bne.n	80043f2 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800440e:	f7fd f9e3 	bl	80017d8 <HAL_GetREVID>
 8004412:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004416:	4298      	cmp	r0, r3
 8004418:	f200 80ce 	bhi.w	80045b8 <HAL_RCC_OscConfig+0x3d4>
 800441c:	6a22      	ldr	r2, [r4, #32]
 800441e:	2a20      	cmp	r2, #32
 8004420:	f000 81b9 	beq.w	8004796 <HAL_RCC_OscConfig+0x5b2>
 8004424:	490b      	ldr	r1, [pc, #44]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 8004426:	684b      	ldr	r3, [r1, #4]
 8004428:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800442c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004430:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	e745      	b.n	80042c2 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004436:	4a07      	ldr	r2, [pc, #28]	@ (8004454 <HAL_RCC_OscConfig+0x270>)
 8004438:	6813      	ldr	r3, [r2, #0]
 800443a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004440:	e6f8      	b.n	8004234 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8004442:	4d05      	ldr	r5, [pc, #20]	@ (8004458 <HAL_RCC_OscConfig+0x274>)
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800444c:	f7fd f9be 	bl	80017cc <HAL_GetTick>
 8004450:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x282>
 8004454:	58024400 	.word	0x58024400
 8004458:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445c:	f7fd f9b6 	bl	80017cc <HAL_GetTick>
 8004460:	1b80      	subs	r0, r0, r6
 8004462:	2864      	cmp	r0, #100	@ 0x64
 8004464:	d83e      	bhi.n	80044e4 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004466:	682b      	ldr	r3, [r5, #0]
 8004468:	05da      	lsls	r2, r3, #23
 800446a:	d5f7      	bpl.n	800445c <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446c:	68a3      	ldr	r3, [r4, #8]
 800446e:	2b01      	cmp	r3, #1
 8004470:	f000 818b 	beq.w	800478a <HAL_RCC_OscConfig+0x5a6>
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8166 	beq.w	8004746 <HAL_RCC_OscConfig+0x562>
 800447a:	2b05      	cmp	r3, #5
 800447c:	4b85      	ldr	r3, [pc, #532]	@ (8004694 <HAL_RCC_OscConfig+0x4b0>)
 800447e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004480:	f000 8192 	beq.w	80047a8 <HAL_RCC_OscConfig+0x5c4>
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	671a      	str	r2, [r3, #112]	@ 0x70
 800448a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800448c:	f022 0204 	bic.w	r2, r2, #4
 8004490:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004492:	f7fd f99b 	bl	80017cc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004496:	4e7f      	ldr	r6, [pc, #508]	@ (8004694 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800449c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800449e:	e004      	b.n	80044aa <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7fd f994 	bl	80017cc <HAL_GetTick>
 80044a4:	1b40      	subs	r0, r0, r5
 80044a6:	42b8      	cmp	r0, r7
 80044a8:	d81c      	bhi.n	80044e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044aa:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80044ac:	079b      	lsls	r3, r3, #30
 80044ae:	d5f7      	bpl.n	80044a0 <HAL_RCC_OscConfig+0x2bc>
 80044b0:	e73c      	b.n	800432c <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044b2:	4d78      	ldr	r5, [pc, #480]	@ (8004694 <HAL_RCC_OscConfig+0x4b0>)
 80044b4:	692a      	ldr	r2, [r5, #16]
 80044b6:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80044ba:	2a18      	cmp	r2, #24
 80044bc:	f000 80ee 	beq.w	800469c <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c0:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80044c2:	682b      	ldr	r3, [r5, #0]
 80044c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044c8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ca:	d07f      	beq.n	80045cc <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 80044cc:	f7fd f97e 	bl	80017cc <HAL_GetTick>
 80044d0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044d2:	682b      	ldr	r3, [r5, #0]
 80044d4:	019b      	lsls	r3, r3, #6
 80044d6:	f57f af2d 	bpl.w	8004334 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044da:	f7fd f977 	bl	80017cc <HAL_GetTick>
 80044de:	1b00      	subs	r0, r0, r4
 80044e0:	2802      	cmp	r0, #2
 80044e2:	d9f6      	bls.n	80044d2 <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 80044e4:	2003      	movs	r0, #3
}
 80044e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e8:	4d6a      	ldr	r5, [pc, #424]	@ (8004694 <HAL_RCC_OscConfig+0x4b0>)
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f0:	602b      	str	r3, [r5, #0]
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80044fa:	f7fd f967 	bl	80017cc <HAL_GetTick>
 80044fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004500:	e004      	b.n	800450c <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004502:	f7fd f963 	bl	80017cc <HAL_GetTick>
 8004506:	1b80      	subs	r0, r0, r6
 8004508:	2864      	cmp	r0, #100	@ 0x64
 800450a:	d8eb      	bhi.n	80044e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	039f      	lsls	r7, r3, #14
 8004510:	d4f7      	bmi.n	8004502 <HAL_RCC_OscConfig+0x31e>
 8004512:	e69d      	b.n	8004250 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8004514:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800451c:	f7fd f956 	bl	80017cc <HAL_GetTick>
 8004520:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004522:	e004      	b.n	800452e <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004524:	f7fd f952 	bl	80017cc <HAL_GetTick>
 8004528:	1b80      	subs	r0, r0, r6
 800452a:	2802      	cmp	r0, #2
 800452c:	d8da      	bhi.n	80044e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800452e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004530:	0799      	lsls	r1, r3, #30
 8004532:	d4f7      	bmi.n	8004524 <HAL_RCC_OscConfig+0x340>
 8004534:	e6dd      	b.n	80042f2 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8004536:	682b      	ldr	r3, [r5, #0]
 8004538:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800453c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800453e:	f7fd f945 	bl	80017cc <HAL_GetTick>
 8004542:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004544:	e004      	b.n	8004550 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004546:	f7fd f941 	bl	80017cc <HAL_GetTick>
 800454a:	1b80      	subs	r0, r0, r6
 800454c:	2802      	cmp	r0, #2
 800454e:	d8c9      	bhi.n	80044e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	0498      	lsls	r0, r3, #18
 8004554:	d4f7      	bmi.n	8004546 <HAL_RCC_OscConfig+0x362>
 8004556:	e6e5      	b.n	8004324 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800455e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004560:	f7fd f934 	bl	80017cc <HAL_GetTick>
 8004564:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004566:	e004      	b.n	8004572 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004568:	f7fd f930 	bl	80017cc <HAL_GetTick>
 800456c:	1b80      	subs	r0, r0, r6
 800456e:	2802      	cmp	r0, #2
 8004570:	d8b8      	bhi.n	80044e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004572:	682b      	ldr	r3, [r5, #0]
 8004574:	05df      	lsls	r7, r3, #23
 8004576:	d4f7      	bmi.n	8004568 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	e6a2      	b.n	80042c2 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004582:	f7fd f923 	bl	80017cc <HAL_GetTick>
 8004586:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004588:	e004      	b.n	8004594 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800458a:	f7fd f91f 	bl	80017cc <HAL_GetTick>
 800458e:	1b80      	subs	r0, r0, r6
 8004590:	2802      	cmp	r0, #2
 8004592:	d8a7      	bhi.n	80044e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	0758      	lsls	r0, r3, #29
 8004598:	d4f7      	bmi.n	800458a <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	e65b      	b.n	8004256 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800459e:	0790      	lsls	r0, r2, #30
 80045a0:	f47f af01 	bne.w	80043a6 <HAL_RCC_OscConfig+0x1c2>
 80045a4:	e6ce      	b.n	8004344 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a6:	686b      	ldr	r3, [r5, #4]
 80045a8:	6922      	ldr	r2, [r4, #16]
 80045aa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80045ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80045b2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	e64e      	b.n	8004256 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045b8:	4a36      	ldr	r2, [pc, #216]	@ (8004694 <HAL_RCC_OscConfig+0x4b0>)
 80045ba:	6a21      	ldr	r1, [r4, #32]
 80045bc:	68d3      	ldr	r3, [r2, #12]
 80045be:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80045c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80045c6:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	e67a      	b.n	80042c2 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 80045cc:	f7fd f8fe 	bl	80017cc <HAL_GetTick>
 80045d0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045d2:	e004      	b.n	80045de <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d4:	f7fd f8fa 	bl	80017cc <HAL_GetTick>
 80045d8:	1b80      	subs	r0, r0, r6
 80045da:	2802      	cmp	r0, #2
 80045dc:	d882      	bhi.n	80044e4 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045de:	682b      	ldr	r3, [r5, #0]
 80045e0:	0199      	lsls	r1, r3, #6
 80045e2:	d4f7      	bmi.n	80045d4 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e4:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80045e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004698 <HAL_RCC_OscConfig+0x4b4>)
 80045e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80045ea:	400b      	ands	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80045f0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80045f4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80045f6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80045f8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80045fc:	3901      	subs	r1, #1
 80045fe:	3b01      	subs	r3, #1
 8004600:	3a01      	subs	r2, #1
 8004602:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004606:	025b      	lsls	r3, r3, #9
 8004608:	0412      	lsls	r2, r2, #16
 800460a:	b29b      	uxth	r3, r3
 800460c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004610:	4313      	orrs	r3, r2
 8004612:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004614:	3a01      	subs	r2, #1
 8004616:	430b      	orrs	r3, r1
 8004618:	0612      	lsls	r2, r2, #24
 800461a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800461e:	4313      	orrs	r3, r2
 8004620:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8004622:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800462a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800462c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800462e:	f36f 03cf 	bfc	r3, #3, #13
 8004632:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004636:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004638:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800463a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800463c:	f023 030c 	bic.w	r3, r3, #12
 8004640:	4313      	orrs	r3, r2
 8004642:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004644:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004646:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004648:	f023 0302 	bic.w	r3, r3, #2
 800464c:	4313      	orrs	r3, r2
 800464e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004650:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004656:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004658:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800465a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800465e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004660:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004662:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004666:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004668:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004676:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004678:	f7fd f8a8 	bl	80017cc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800467c:	4d05      	ldr	r5, [pc, #20]	@ (8004694 <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 800467e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	019a      	lsls	r2, r3, #6
 8004684:	f53f ae56 	bmi.w	8004334 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004688:	f7fd f8a0 	bl	80017cc <HAL_GetTick>
 800468c:	1b00      	subs	r0, r0, r4
 800468e:	2802      	cmp	r0, #2
 8004690:	d9f6      	bls.n	8004680 <HAL_RCC_OscConfig+0x49c>
 8004692:	e727      	b.n	80044e4 <HAL_RCC_OscConfig+0x300>
 8004694:	58024400 	.word	0x58024400
 8004698:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469c:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800469e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046a0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a2:	f43f aea6 	beq.w	80043f2 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a6:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046aa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80046ac:	428b      	cmp	r3, r1
 80046ae:	f47f aea0 	bne.w	80043f2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046b2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80046b8:	429a      	cmp	r2, r3
 80046ba:	f47f ae9a 	bne.w	80043f2 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80046c0:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80046c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	f47f ae93 	bne.w	80043f2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80046ce:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80046d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	f47f ae8c 	bne.w	80043f2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80046dc:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80046e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046e2:	429a      	cmp	r2, r3
 80046e4:	f47f ae85 	bne.w	80043f2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80046e8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80046ea:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80046ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046f0:	4298      	cmp	r0, r3
 80046f2:	f47f ae7e 	bne.w	80043f2 <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046f6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046f8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80046fa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80046fe:	429a      	cmp	r2, r3
 8004700:	f43f ae18 	beq.w	8004334 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8004704:	4a2d      	ldr	r2, [pc, #180]	@ (80047bc <HAL_RCC_OscConfig+0x5d8>)
 8004706:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800470e:	f7fd f85d 	bl	80017cc <HAL_GetTick>
 8004712:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004714:	f7fd f85a 	bl	80017cc <HAL_GetTick>
 8004718:	42a8      	cmp	r0, r5
 800471a:	d0fb      	beq.n	8004714 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800471c:	4a27      	ldr	r2, [pc, #156]	@ (80047bc <HAL_RCC_OscConfig+0x5d8>)
 800471e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004720:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8004722:	f36f 03cf 	bfc	r3, #3, #13
 8004726:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800472a:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800472c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004734:	e5fe      	b.n	8004334 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004736:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004742:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004744:	e576      	b.n	8004234 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004746:	4d1d      	ldr	r5, [pc, #116]	@ (80047bc <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800474c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	672b      	str	r3, [r5, #112]	@ 0x70
 8004754:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004756:	f023 0304 	bic.w	r3, r3, #4
 800475a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800475c:	f7fd f836 	bl	80017cc <HAL_GetTick>
 8004760:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004762:	e005      	b.n	8004770 <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004764:	f7fd f832 	bl	80017cc <HAL_GetTick>
 8004768:	1b80      	subs	r0, r0, r6
 800476a:	42b8      	cmp	r0, r7
 800476c:	f63f aeba 	bhi.w	80044e4 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004770:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004772:	0798      	lsls	r0, r3, #30
 8004774:	d4f6      	bmi.n	8004764 <HAL_RCC_OscConfig+0x580>
 8004776:	e5d9      	b.n	800432c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004778:	68eb      	ldr	r3, [r5, #12]
 800477a:	6a22      	ldr	r2, [r4, #32]
 800477c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004780:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004784:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	e59b      	b.n	80042c2 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478a:	4a0c      	ldr	r2, [pc, #48]	@ (80047bc <HAL_RCC_OscConfig+0x5d8>)
 800478c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004794:	e67d      	b.n	8004492 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004796:	4a09      	ldr	r2, [pc, #36]	@ (80047bc <HAL_RCC_OscConfig+0x5d8>)
 8004798:	6853      	ldr	r3, [r2, #4]
 800479a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800479e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047a2:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	e58c      	b.n	80042c2 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a8:	f042 0204 	orr.w	r2, r2, #4
 80047ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80047ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047b6:	e66c      	b.n	8004492 <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 80047b8:	2001      	movs	r0, #1
}
 80047ba:	4770      	bx	lr
 80047bc:	58024400 	.word	0x58024400

080047c0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c0:	4a3f      	ldr	r2, [pc, #252]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80047c2:	6913      	ldr	r3, [r2, #16]
 80047c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d04f      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0xac>
 80047cc:	2b18      	cmp	r3, #24
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCC_GetSysClockFreq+0x26>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d14d      	bne.n	8004870 <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047d4:	6813      	ldr	r3, [r2, #0]
 80047d6:	0699      	lsls	r1, r3, #26
 80047d8:	d54c      	bpl.n	8004874 <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047da:	6813      	ldr	r3, [r2, #0]
 80047dc:	4839      	ldr	r0, [pc, #228]	@ (80048c4 <HAL_RCC_GetSysClockFreq+0x104>)
 80047de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80047e2:	40d8      	lsrs	r0, r3
 80047e4:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047e6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 80047e8:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80047ea:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047ec:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 80047ee:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047f2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80047f4:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80047f8:	d036      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80047fa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80047fe:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004802:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004806:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800480a:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 800480e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004814:	ee06 3a90 	vmov	s13, r3
 8004818:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800481c:	d002      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x64>
 800481e:	2902      	cmp	r1, #2
 8004820:	d048      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0xf4>
 8004822:	b349      	cbz	r1, 8004878 <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004824:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80048c8 <HAL_RCC_GetSysClockFreq+0x108>
 8004828:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800482c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a10 	vmov	s14, r3
 8004836:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800483a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800483e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004842:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004846:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800484a:	4b1d      	ldr	r3, [pc, #116]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0x100>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004852:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800485c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004864:	ee17 0a90 	vmov	r0, s15
}
 8004868:	bc30      	pop	{r4, r5}
 800486a:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800486c:	4817      	ldr	r0, [pc, #92]	@ (80048cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800486e:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 8004870:	4817      	ldr	r0, [pc, #92]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004872:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004874:	4813      	ldr	r0, [pc, #76]	@ (80048c4 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8004876:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004878:	6813      	ldr	r3, [r2, #0]
 800487a:	069b      	lsls	r3, r3, #26
 800487c:	d51d      	bpl.n	80048ba <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800487e:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004880:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004884:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004886:	490f      	ldr	r1, [pc, #60]	@ (80048c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004888:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800488c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004890:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004892:	ee06 3a10 	vmov	s12, r3
 8004896:	ee05 1a90 	vmov	s11, r1
 800489a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800489e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80048a2:	ee36 6a07 	vadd.f32	s12, s12, s14
 80048a6:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80048aa:	ee76 7a26 	vadd.f32	s15, s12, s13
 80048ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048b2:	e7ca      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048b4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80048d4 <HAL_RCC_GetSysClockFreq+0x114>
 80048b8:	e7b6      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048ba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80048d8 <HAL_RCC_GetSysClockFreq+0x118>
 80048be:	e7b3      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x68>
 80048c0:	58024400 	.word	0x58024400
 80048c4:	03d09000 	.word	0x03d09000
 80048c8:	4a742400 	.word	0x4a742400
 80048cc:	017d7840 	.word	0x017d7840
 80048d0:	003d0900 	.word	0x003d0900
 80048d4:	4bbebc20 	.word	0x4bbebc20
 80048d8:	4c742400 	.word	0x4c742400

080048dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80048dc:	2800      	cmp	r0, #0
 80048de:	f000 810e 	beq.w	8004afe <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e2:	4a8d      	ldr	r2, [pc, #564]	@ (8004b18 <HAL_RCC_ClockConfig+0x23c>)
 80048e4:	6813      	ldr	r3, [r2, #0]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	428b      	cmp	r3, r1
{
 80048ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f0:	4604      	mov	r4, r0
 80048f2:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048f4:	d20c      	bcs.n	8004910 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	f023 030f 	bic.w	r3, r3, #15
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004900:	6813      	ldr	r3, [r2, #0]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	428b      	cmp	r3, r1
 8004908:	d002      	beq.n	8004910 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800490a:	2001      	movs	r0, #1
}
 800490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	0758      	lsls	r0, r3, #29
 8004914:	d50b      	bpl.n	800492e <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004916:	4981      	ldr	r1, [pc, #516]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004918:	6920      	ldr	r0, [r4, #16]
 800491a:	698a      	ldr	r2, [r1, #24]
 800491c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004920:	4290      	cmp	r0, r2
 8004922:	d904      	bls.n	800492e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004924:	698a      	ldr	r2, [r1, #24]
 8004926:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800492a:	4302      	orrs	r2, r0
 800492c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492e:	0719      	lsls	r1, r3, #28
 8004930:	d50b      	bpl.n	800494a <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004932:	497a      	ldr	r1, [pc, #488]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004934:	6960      	ldr	r0, [r4, #20]
 8004936:	69ca      	ldr	r2, [r1, #28]
 8004938:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800493c:	4290      	cmp	r0, r2
 800493e:	d904      	bls.n	800494a <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004940:	69ca      	ldr	r2, [r1, #28]
 8004942:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004946:	4302      	orrs	r2, r0
 8004948:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494a:	06da      	lsls	r2, r3, #27
 800494c:	d50b      	bpl.n	8004966 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800494e:	4973      	ldr	r1, [pc, #460]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004950:	69a0      	ldr	r0, [r4, #24]
 8004952:	69ca      	ldr	r2, [r1, #28]
 8004954:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004958:	4290      	cmp	r0, r2
 800495a:	d904      	bls.n	8004966 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800495c:	69ca      	ldr	r2, [r1, #28]
 800495e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004962:	4302      	orrs	r2, r0
 8004964:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004966:	069f      	lsls	r7, r3, #26
 8004968:	d50b      	bpl.n	8004982 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800496a:	496c      	ldr	r1, [pc, #432]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 800496c:	69e0      	ldr	r0, [r4, #28]
 800496e:	6a0a      	ldr	r2, [r1, #32]
 8004970:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004974:	4290      	cmp	r0, r2
 8004976:	d904      	bls.n	8004982 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004978:	6a0a      	ldr	r2, [r1, #32]
 800497a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800497e:	4302      	orrs	r2, r0
 8004980:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004982:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004984:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004988:	f140 80ab 	bpl.w	8004ae2 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800498c:	4e63      	ldr	r6, [pc, #396]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 800498e:	68e0      	ldr	r0, [r4, #12]
 8004990:	69b1      	ldr	r1, [r6, #24]
 8004992:	f001 010f 	and.w	r1, r1, #15
 8004996:	4288      	cmp	r0, r1
 8004998:	d904      	bls.n	80049a4 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800499a:	69b1      	ldr	r1, [r6, #24]
 800499c:	f021 010f 	bic.w	r1, r1, #15
 80049a0:	4301      	orrs	r1, r0
 80049a2:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a4:	2a00      	cmp	r2, #0
 80049a6:	d030      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049a8:	4a5c      	ldr	r2, [pc, #368]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 80049aa:	68a1      	ldr	r1, [r4, #8]
 80049ac:	6993      	ldr	r3, [r2, #24]
 80049ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049b2:	430b      	orrs	r3, r1
 80049b4:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049b8:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ba:	2902      	cmp	r1, #2
 80049bc:	f000 80a1 	beq.w	8004b02 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c0:	2903      	cmp	r1, #3
 80049c2:	f000 8098 	beq.w	8004af6 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049c6:	2901      	cmp	r1, #1
 80049c8:	f000 80a1 	beq.w	8004b0e <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049cc:	075f      	lsls	r7, r3, #29
 80049ce:	d59c      	bpl.n	800490a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049d0:	4e52      	ldr	r6, [pc, #328]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d2:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049d6:	6933      	ldr	r3, [r6, #16]
 80049d8:	f023 0307 	bic.w	r3, r3, #7
 80049dc:	430b      	orrs	r3, r1
 80049de:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80049e0:	f7fc fef4 	bl	80017cc <HAL_GetTick>
 80049e4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e6:	e005      	b.n	80049f4 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e8:	f7fc fef0 	bl	80017cc <HAL_GetTick>
 80049ec:	1bc0      	subs	r0, r0, r7
 80049ee:	4540      	cmp	r0, r8
 80049f0:	f200 808b 	bhi.w	8004b0a <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f4:	6933      	ldr	r3, [r6, #16]
 80049f6:	6862      	ldr	r2, [r4, #4]
 80049f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049fc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004a00:	d1f2      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	079e      	lsls	r6, r3, #30
 8004a06:	d506      	bpl.n	8004a16 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a08:	68e0      	ldr	r0, [r4, #12]
 8004a0a:	4944      	ldr	r1, [pc, #272]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004a0c:	698a      	ldr	r2, [r1, #24]
 8004a0e:	f002 020f 	and.w	r2, r2, #15
 8004a12:	4290      	cmp	r0, r2
 8004a14:	d369      	bcc.n	8004aea <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a16:	4940      	ldr	r1, [pc, #256]	@ (8004b18 <HAL_RCC_ClockConfig+0x23c>)
 8004a18:	680a      	ldr	r2, [r1, #0]
 8004a1a:	f002 020f 	and.w	r2, r2, #15
 8004a1e:	42aa      	cmp	r2, r5
 8004a20:	d90a      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a22:	680a      	ldr	r2, [r1, #0]
 8004a24:	f022 020f 	bic.w	r2, r2, #15
 8004a28:	432a      	orrs	r2, r5
 8004a2a:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2c:	680a      	ldr	r2, [r1, #0]
 8004a2e:	f002 020f 	and.w	r2, r2, #15
 8004a32:	42aa      	cmp	r2, r5
 8004a34:	f47f af69 	bne.w	800490a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a38:	0758      	lsls	r0, r3, #29
 8004a3a:	d50b      	bpl.n	8004a54 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a3c:	4937      	ldr	r1, [pc, #220]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004a3e:	6920      	ldr	r0, [r4, #16]
 8004a40:	698a      	ldr	r2, [r1, #24]
 8004a42:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004a46:	4290      	cmp	r0, r2
 8004a48:	d204      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a4a:	698a      	ldr	r2, [r1, #24]
 8004a4c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004a50:	4302      	orrs	r2, r0
 8004a52:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	0719      	lsls	r1, r3, #28
 8004a56:	d50b      	bpl.n	8004a70 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a58:	4930      	ldr	r1, [pc, #192]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004a5a:	6960      	ldr	r0, [r4, #20]
 8004a5c:	69ca      	ldr	r2, [r1, #28]
 8004a5e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004a62:	4290      	cmp	r0, r2
 8004a64:	d204      	bcs.n	8004a70 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a66:	69ca      	ldr	r2, [r1, #28]
 8004a68:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004a6c:	4302      	orrs	r2, r0
 8004a6e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a70:	06da      	lsls	r2, r3, #27
 8004a72:	d50b      	bpl.n	8004a8c <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a74:	4929      	ldr	r1, [pc, #164]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004a76:	69a0      	ldr	r0, [r4, #24]
 8004a78:	69ca      	ldr	r2, [r1, #28]
 8004a7a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004a7e:	4290      	cmp	r0, r2
 8004a80:	d204      	bcs.n	8004a8c <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a82:	69ca      	ldr	r2, [r1, #28]
 8004a84:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a88:	4302      	orrs	r2, r0
 8004a8a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a8c:	069b      	lsls	r3, r3, #26
 8004a8e:	d50b      	bpl.n	8004aa8 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a90:	4a22      	ldr	r2, [pc, #136]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004a92:	69e1      	ldr	r1, [r4, #28]
 8004a94:	6a13      	ldr	r3, [r2, #32]
 8004a96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a9a:	4299      	cmp	r1, r3
 8004a9c:	d204      	bcs.n	8004aa8 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a9e:	6a13      	ldr	r3, [r2, #32]
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004aa8:	f7ff fe8a 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8004aac:	4a1b      	ldr	r2, [pc, #108]	@ (8004b1c <HAL_RCC_ClockConfig+0x240>)
 8004aae:	4603      	mov	r3, r0
 8004ab0:	481b      	ldr	r0, [pc, #108]	@ (8004b20 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ab4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ab6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8004aba:	4d1a      	ldr	r5, [pc, #104]	@ (8004b24 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004abc:	f002 020f 	and.w	r2, r2, #15
 8004ac0:	4c19      	ldr	r4, [pc, #100]	@ (8004b28 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ac2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ac4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ac6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8004aca:	4818      	ldr	r0, [pc, #96]	@ (8004b2c <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004acc:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ad0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8004ad2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8004ad4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ad6:	40d3      	lsrs	r3, r2
 8004ad8:	6023      	str	r3, [r4, #0]
}
 8004ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8004ade:	f7fc be13 	b.w	8001708 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	f47f af60 	bne.w	80049a8 <HAL_RCC_ClockConfig+0xcc>
 8004ae8:	e795      	b.n	8004a16 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aea:	698a      	ldr	r2, [r1, #24]
 8004aec:	f022 020f 	bic.w	r2, r2, #15
 8004af0:	4302      	orrs	r2, r0
 8004af2:	618a      	str	r2, [r1, #24]
 8004af4:	e78f      	b.n	8004a16 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004af6:	019a      	lsls	r2, r3, #6
 8004af8:	f53f af6a 	bmi.w	80049d0 <HAL_RCC_ClockConfig+0xf4>
 8004afc:	e705      	b.n	800490a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004afe:	2001      	movs	r0, #1
}
 8004b00:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b02:	0398      	lsls	r0, r3, #14
 8004b04:	f53f af64 	bmi.w	80049d0 <HAL_RCC_ClockConfig+0xf4>
 8004b08:	e6ff      	b.n	800490a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004b0a:	2003      	movs	r0, #3
 8004b0c:	e6fe      	b.n	800490c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b0e:	05db      	lsls	r3, r3, #23
 8004b10:	f53f af5e 	bmi.w	80049d0 <HAL_RCC_ClockConfig+0xf4>
 8004b14:	e6f9      	b.n	800490a <HAL_RCC_ClockConfig+0x2e>
 8004b16:	bf00      	nop
 8004b18:	52002000 	.word	0x52002000
 8004b1c:	58024400 	.word	0x58024400
 8004b20:	0806b624 	.word	0x0806b624
 8004b24:	24000070 	.word	0x24000070
 8004b28:	2400006c 	.word	0x2400006c
 8004b2c:	24000078 	.word	0x24000078

08004b30 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b30:	4a18      	ldr	r2, [pc, #96]	@ (8004b94 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b32:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b34:	6913      	ldr	r3, [r2, #16]
 8004b36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d024      	beq.n	8004b88 <HAL_RCC_GetHCLKFreq+0x58>
 8004b3e:	2b18      	cmp	r3, #24
 8004b40:	d009      	beq.n	8004b56 <HAL_RCC_GetHCLKFreq+0x26>
 8004b42:	bb1b      	cbnz	r3, 8004b8c <HAL_RCC_GetHCLKFreq+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b44:	6813      	ldr	r3, [r2, #0]
 8004b46:	069b      	lsls	r3, r3, #26
 8004b48:	d522      	bpl.n	8004b90 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <HAL_RCC_GetHCLKFreq+0x68>)
 8004b4e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004b52:	40d3      	lsrs	r3, r2
 8004b54:	e002      	b.n	8004b5c <HAL_RCC_GetHCLKFreq+0x2c>
 8004b56:	f7ff fad3 	bl	8004100 <HAL_RCC_GetSysClockFreq.part.0>
 8004b5a:	4603      	mov	r3, r0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b5c:	490d      	ldr	r1, [pc, #52]	@ (8004b94 <HAL_RCC_GetHCLKFreq+0x64>)
 8004b5e:	480f      	ldr	r0, [pc, #60]	@ (8004b9c <HAL_RCC_GetHCLKFreq+0x6c>)
 8004b60:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b62:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b64:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b68:	4c0d      	ldr	r4, [pc, #52]	@ (8004ba0 <HAL_RCC_GetHCLKFreq+0x70>)
 8004b6a:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ba4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b70:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b72:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b74:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b78:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b7c:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b7e:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8004b82:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b84:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b88:	4b07      	ldr	r3, [pc, #28]	@ (8004ba8 <HAL_RCC_GetHCLKFreq+0x78>)
 8004b8a:	e7e7      	b.n	8004b5c <HAL_RCC_GetHCLKFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8004b8c:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <HAL_RCC_GetHCLKFreq+0x7c>)
 8004b8e:	e7e5      	b.n	8004b5c <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b90:	4b01      	ldr	r3, [pc, #4]	@ (8004b98 <HAL_RCC_GetHCLKFreq+0x68>)
 8004b92:	e7e3      	b.n	8004b5c <HAL_RCC_GetHCLKFreq+0x2c>
 8004b94:	58024400 	.word	0x58024400
 8004b98:	03d09000 	.word	0x03d09000
 8004b9c:	0806b624 	.word	0x0806b624
 8004ba0:	2400006c 	.word	0x2400006c
 8004ba4:	24000070 	.word	0x24000070
 8004ba8:	017d7840 	.word	0x017d7840
 8004bac:	003d0900 	.word	0x003d0900

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c24 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb4:	6913      	ldr	r3, [r2, #16]
 8004bb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d02b      	beq.n	8004c16 <HAL_RCC_GetPCLK1Freq+0x66>
 8004bbe:	2b18      	cmp	r3, #24
 8004bc0:	d009      	beq.n	8004bd6 <HAL_RCC_GetPCLK1Freq+0x26>
 8004bc2:	bb53      	cbnz	r3, 8004c1a <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bc4:	6813      	ldr	r3, [r2, #0]
 8004bc6:	069b      	lsls	r3, r3, #26
 8004bc8:	d529      	bpl.n	8004c1e <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	4b16      	ldr	r3, [pc, #88]	@ (8004c28 <HAL_RCC_GetPCLK1Freq+0x78>)
 8004bce:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004bd2:	40d3      	lsrs	r3, r2
 8004bd4:	e002      	b.n	8004bdc <HAL_RCC_GetPCLK1Freq+0x2c>
 8004bd6:	f7ff fa93 	bl	8004100 <HAL_RCC_GetSysClockFreq.part.0>
 8004bda:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bdc:	4a11      	ldr	r2, [pc, #68]	@ (8004c24 <HAL_RCC_GetPCLK1Freq+0x74>)
 8004bde:	4913      	ldr	r1, [pc, #76]	@ (8004c2c <HAL_RCC_GetPCLK1Freq+0x7c>)
 8004be0:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8004be2:	4d13      	ldr	r5, [pc, #76]	@ (8004c30 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004be4:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004be8:	4c12      	ldr	r4, [pc, #72]	@ (8004c34 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bea:	5c08      	ldrb	r0, [r1, r0]
 8004bec:	f000 001f 	and.w	r0, r0, #31
 8004bf0:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bf2:	6990      	ldr	r0, [r2, #24]
 8004bf4:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8004bf8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bfa:	5c08      	ldrb	r0, [r1, r0]
 8004bfc:	f000 001f 	and.w	r0, r0, #31
 8004c00:	40c3      	lsrs	r3, r0
 8004c02:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c04:	69d2      	ldr	r2, [r2, #28]
 8004c06:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004c0a:	5c88      	ldrb	r0, [r1, r2]
 8004c0c:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c10:	fa23 f000 	lsr.w	r0, r3, r0
 8004c14:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c16:	4b08      	ldr	r3, [pc, #32]	@ (8004c38 <HAL_RCC_GetPCLK1Freq+0x88>)
 8004c18:	e7e0      	b.n	8004bdc <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 8004c1a:	4b08      	ldr	r3, [pc, #32]	@ (8004c3c <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004c1c:	e7de      	b.n	8004bdc <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c1e:	4b02      	ldr	r3, [pc, #8]	@ (8004c28 <HAL_RCC_GetPCLK1Freq+0x78>)
 8004c20:	e7dc      	b.n	8004bdc <HAL_RCC_GetPCLK1Freq+0x2c>
 8004c22:	bf00      	nop
 8004c24:	58024400 	.word	0x58024400
 8004c28:	03d09000 	.word	0x03d09000
 8004c2c:	0806b624 	.word	0x0806b624
 8004c30:	24000070 	.word	0x24000070
 8004c34:	2400006c 	.word	0x2400006c
 8004c38:	017d7840 	.word	0x017d7840
 8004c3c:	003d0900 	.word	0x003d0900

08004c40 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c42:	4c36      	ldr	r4, [pc, #216]	@ (8004d1c <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8004c44:	4606      	mov	r6, r0
 8004c46:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c4e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c50:	f7fc fdbc 	bl	80017cc <HAL_GetTick>
 8004c54:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c56:	e004      	b.n	8004c62 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c58:	f7fc fdb8 	bl	80017cc <HAL_GetTick>
 8004c5c:	1b40      	subs	r0, r0, r5
 8004c5e:	2802      	cmp	r0, #2
 8004c60:	d856      	bhi.n	8004d10 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	011a      	lsls	r2, r3, #4
 8004c66:	d4f7      	bmi.n	8004c58 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c68:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004c6a:	6832      	ldr	r2, [r6, #0]
 8004c6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c70:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004c74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c76:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	3a01      	subs	r2, #1
 8004c7e:	025b      	lsls	r3, r3, #9
 8004c80:	0412      	lsls	r2, r2, #16
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	6872      	ldr	r2, [r6, #4]
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c92:	4313      	orrs	r3, r2
 8004c94:	6932      	ldr	r2, [r6, #16]
 8004c96:	3a01      	subs	r2, #1
 8004c98:	0612      	lsls	r2, r2, #24
 8004c9a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ca2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004ca4:	6972      	ldr	r2, [r6, #20]
 8004ca6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004caa:	4313      	orrs	r3, r2
 8004cac:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004cb0:	69b2      	ldr	r2, [r6, #24]
 8004cb2:	f023 0320 	bic.w	r3, r3, #32
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004cbc:	f023 0310 	bic.w	r3, r3, #16
 8004cc0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cc2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004cc4:	69f2      	ldr	r2, [r6, #28]
 8004cc6:	f36f 03cf 	bfc	r3, #3, #13
 8004cca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004cce:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cd0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004cd2:	f043 0310 	orr.w	r3, r3, #16
 8004cd6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004cd8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004cda:	b1df      	cbz	r7, 8004d14 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cdc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cde:	bf0c      	ite	eq
 8004ce0:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ce4:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8004ce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cea:	4c0c      	ldr	r4, [pc, #48]	@ (8004d1c <RCCEx_PLL2_Config.part.0+0xdc>)
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cf2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf4:	f7fc fd6a 	bl	80017cc <HAL_GetTick>
 8004cf8:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cfa:	e004      	b.n	8004d06 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cfc:	f7fc fd66 	bl	80017cc <HAL_GetTick>
 8004d00:	1b40      	subs	r0, r0, r5
 8004d02:	2802      	cmp	r0, #2
 8004d04:	d804      	bhi.n	8004d10 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	d5f7      	bpl.n	8004cfc <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8004d0c:	2000      	movs	r0, #0
}
 8004d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004d10:	2003      	movs	r0, #3
}
 8004d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d1a:	e7e6      	b.n	8004cea <RCCEx_PLL2_Config.part.0+0xaa>
 8004d1c:	58024400 	.word	0x58024400

08004d20 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d22:	4c36      	ldr	r4, [pc, #216]	@ (8004dfc <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004d24:	4606      	mov	r6, r0
 8004d26:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d2e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d30:	f7fc fd4c 	bl	80017cc <HAL_GetTick>
 8004d34:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d36:	e004      	b.n	8004d42 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d38:	f7fc fd48 	bl	80017cc <HAL_GetTick>
 8004d3c:	1b40      	subs	r0, r0, r5
 8004d3e:	2802      	cmp	r0, #2
 8004d40:	d856      	bhi.n	8004df0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	009a      	lsls	r2, r3, #2
 8004d46:	d4f7      	bmi.n	8004d38 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d48:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004d4a:	6832      	ldr	r2, [r6, #0]
 8004d4c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8004d50:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004d54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d56:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	025b      	lsls	r3, r3, #9
 8004d60:	0412      	lsls	r2, r2, #16
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	6872      	ldr	r2, [r6, #4]
 8004d6c:	3a01      	subs	r2, #1
 8004d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d72:	4313      	orrs	r3, r2
 8004d74:	6932      	ldr	r2, [r6, #16]
 8004d76:	3a01      	subs	r2, #1
 8004d78:	0612      	lsls	r2, r2, #24
 8004d7a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d82:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004d84:	6972      	ldr	r2, [r6, #20]
 8004d86:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d8e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004d90:	69b2      	ldr	r2, [r6, #24]
 8004d92:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d96:	4313      	orrs	r3, r2
 8004d98:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004da2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004da4:	69f2      	ldr	r2, [r6, #28]
 8004da6:	f36f 03cf 	bfc	r3, #3, #13
 8004daa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004dae:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004db0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004db6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004db8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004dba:	b1df      	cbz	r7, 8004df4 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dbc:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004dbe:	bf0c      	ite	eq
 8004dc0:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004dc4:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8004dc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dca:	4c0c      	ldr	r4, [pc, #48]	@ (8004dfc <RCCEx_PLL3_Config.part.0+0xdc>)
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd4:	f7fc fcfa 	bl	80017cc <HAL_GetTick>
 8004dd8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dda:	e004      	b.n	8004de6 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ddc:	f7fc fcf6 	bl	80017cc <HAL_GetTick>
 8004de0:	1b40      	subs	r0, r0, r5
 8004de2:	2802      	cmp	r0, #2
 8004de4:	d804      	bhi.n	8004df0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	d5f7      	bpl.n	8004ddc <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8004dec:	2000      	movs	r0, #0
}
 8004dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004df0:	2003      	movs	r0, #3
}
 8004df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004df4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004df8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dfa:	e7e6      	b.n	8004dca <RCCEx_PLL3_Config.part.0+0xaa>
 8004dfc:	58024400 	.word	0x58024400

08004e00 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e04:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8004e08:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e0a:	011d      	lsls	r5, r3, #4
 8004e0c:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8004e10:	d524      	bpl.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004e12:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004e14:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004e18:	f000 85df 	beq.w	80059da <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8004e1c:	f200 86a8 	bhi.w	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004e20:	2900      	cmp	r1, #0
 8004e22:	f000 85f6 	beq.w	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xc12>
 8004e26:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004e2a:	f040 86a5 	bne.w	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e2e:	49a9      	ldr	r1, [pc, #676]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e30:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004e32:	f001 0103 	and.w	r1, r1, #3
 8004e36:	2903      	cmp	r1, #3
 8004e38:	f000 869e 	beq.w	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	3008      	adds	r0, #8
 8004e40:	f7ff fefe 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 8004e44:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e46:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004e4a:	b93e      	cbnz	r6, 8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e4c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004e4e:	4da1      	ldr	r5, [pc, #644]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e50:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e52:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8004e54:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8004e58:	4301      	orrs	r1, r0
 8004e5a:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e5c:	05d8      	lsls	r0, r3, #23
 8004e5e:	d50a      	bpl.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e60:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004e62:	2904      	cmp	r1, #4
 8004e64:	d806      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e66:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004e6a:	03ff      	.short	0x03ff
 8004e6c:	0582056d 	.word	0x0582056d
 8004e70:	04040404 	.word	0x04040404
      status = ret;
 8004e74:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004e76:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004e78:	0599      	lsls	r1, r3, #22
 8004e7a:	d524      	bpl.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004e7c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004e7e:	2980      	cmp	r1, #128	@ 0x80
 8004e80:	f000 854b 	beq.w	800591a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004e84:	f200 8687 	bhi.w	8005b96 <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8004e88:	2900      	cmp	r1, #0
 8004e8a:	f000 85bb 	beq.w	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8004e8e:	2940      	cmp	r1, #64	@ 0x40
 8004e90:	f040 8688 	bne.w	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e94:	498f      	ldr	r1, [pc, #572]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e96:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004e98:	f001 0103 	and.w	r1, r1, #3
 8004e9c:	2903      	cmp	r1, #3
 8004e9e:	f000 8681 	beq.w	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	f104 0008 	add.w	r0, r4, #8
 8004ea8:	f7ff feca 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 8004eac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004eae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004eb2:	2d00      	cmp	r5, #0
 8004eb4:	f040 8543 	bne.w	800593e <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004eb8:	4f86      	ldr	r7, [pc, #536]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004eba:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004ebc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ebe:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8004ec2:	4301      	orrs	r1, r0
 8004ec4:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ec6:	055f      	lsls	r7, r3, #21
 8004ec8:	d528      	bpl.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004eca:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8004ece:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8004ed2:	f000 855c 	beq.w	800598e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004ed6:	f200 8652 	bhi.w	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 8004eda:	2900      	cmp	r1, #0
 8004edc:	f000 858b 	beq.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004ee0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004ee4:	f040 8653 	bne.w	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ee8:	497a      	ldr	r1, [pc, #488]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004eea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004eec:	f001 0103 	and.w	r1, r1, #3
 8004ef0:	2903      	cmp	r1, #3
 8004ef2:	f000 864c 	beq.w	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	f104 0008 	add.w	r0, r4, #8
 8004efc:	f7ff fea0 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 8004f00:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f02:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	f040 8553 	bne.w	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004f0c:	4f71      	ldr	r7, [pc, #452]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f0e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8004f12:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004f14:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8004f18:	4301      	orrs	r1, r0
 8004f1a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f1c:	0518      	lsls	r0, r3, #20
 8004f1e:	d528      	bpl.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004f20:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8004f24:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8004f28:	f000 8546 	beq.w	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 8004f2c:	f200 8614 	bhi.w	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8004f30:	2900      	cmp	r1, #0
 8004f32:	f000 84d6 	beq.w	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8004f36:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004f3a:	f040 8615 	bne.w	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f3e:	4965      	ldr	r1, [pc, #404]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f40:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004f42:	f001 0103 	and.w	r1, r1, #3
 8004f46:	2903      	cmp	r1, #3
 8004f48:	f000 860e 	beq.w	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	f104 0008 	add.w	r0, r4, #8
 8004f52:	f7ff fe75 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 8004f56:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f58:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f5c:	2d00      	cmp	r5, #0
 8004f5e:	f040 84c8 	bne.w	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f62:	4f5c      	ldr	r7, [pc, #368]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f64:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8004f68:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004f6a:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8004f6e:	4301      	orrs	r1, r0
 8004f70:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f72:	0199      	lsls	r1, r3, #6
 8004f74:	d518      	bpl.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 8004f76:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004f78:	2920      	cmp	r1, #32
 8004f7a:	f000 8434 	beq.w	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 8004f7e:	f200 8615 	bhi.w	8005bac <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8004f82:	b139      	cbz	r1, 8004f94 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8004f84:	2910      	cmp	r1, #16
 8004f86:	f040 8614 	bne.w	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f8a:	4852      	ldr	r0, [pc, #328]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f8c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004f8e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004f92:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004f94:	2d00      	cmp	r5, #0
 8004f96:	f040 83bf 	bne.w	8005718 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f9a:	4f4e      	ldr	r7, [pc, #312]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f9c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004f9e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004fa0:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8004fa4:	4301      	orrs	r1, r0
 8004fa6:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004fa8:	04df      	lsls	r7, r3, #19
 8004faa:	d526      	bpl.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004fac:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8004fae:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8004fb2:	f000 84a1 	beq.w	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 8004fb6:	f200 85c3 	bhi.w	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 8004fba:	2900      	cmp	r1, #0
 8004fbc:	f000 8486 	beq.w	80058cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004fc0:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004fc4:	f040 85c4 	bne.w	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fc8:	4942      	ldr	r1, [pc, #264]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004fcc:	f001 0103 	and.w	r1, r1, #3
 8004fd0:	2903      	cmp	r1, #3
 8004fd2:	f000 85bd 	beq.w	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	f104 0008 	add.w	r0, r4, #8
 8004fdc:	f7ff fe30 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 8004fe0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004fe2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004fe6:	2d00      	cmp	r5, #0
 8004fe8:	f040 8478 	bne.w	80058dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004fec:	4f39      	ldr	r7, [pc, #228]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004fee:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004ff0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ff2:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004ff6:	4301      	orrs	r1, r0
 8004ff8:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ffa:	0498      	lsls	r0, r3, #18
 8004ffc:	d524      	bpl.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004ffe:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8005000:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8005004:	f000 8415 	beq.w	8005832 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8005008:	f200 8556 	bhi.w	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 800500c:	b191      	cbz	r1, 8005034 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800500e:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8005012:	f040 855b 	bne.w	8005acc <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005016:	492f      	ldr	r1, [pc, #188]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005018:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800501a:	f001 0103 	and.w	r1, r1, #3
 800501e:	2903      	cmp	r1, #3
 8005020:	f000 8554 	beq.w	8005acc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005024:	2101      	movs	r1, #1
 8005026:	f104 0008 	add.w	r0, r4, #8
 800502a:	f7ff fe09 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 800502e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005030:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005034:	2d00      	cmp	r5, #0
 8005036:	f040 838f 	bne.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800503a:	4f26      	ldr	r7, [pc, #152]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800503c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800503e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005040:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8005044:	4301      	orrs	r1, r0
 8005046:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005048:	0459      	lsls	r1, r3, #17
 800504a:	d526      	bpl.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800504c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8005050:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8005054:	f000 8426 	beq.w	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005058:	f200 854a 	bhi.w	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 800505c:	b191      	cbz	r1, 8005084 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800505e:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8005062:	f040 854f 	bne.w	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005066:	491b      	ldr	r1, [pc, #108]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005068:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800506a:	f001 0103 	and.w	r1, r1, #3
 800506e:	2903      	cmp	r1, #3
 8005070:	f000 8548 	beq.w	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8005074:	2101      	movs	r1, #1
 8005076:	f104 0008 	add.w	r0, r4, #8
 800507a:	f7ff fde1 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 800507e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005080:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005084:	2d00      	cmp	r5, #0
 8005086:	f040 835b 	bne.w	8005740 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800508a:	4f12      	ldr	r7, [pc, #72]	@ (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800508c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8005090:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005092:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8005096:	4301      	orrs	r1, r0
 8005098:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800509a:	041f      	lsls	r7, r3, #16
 800509c:	d50d      	bpl.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 800509e:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80050a0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80050a4:	f000 8260 	beq.w	8005568 <HAL_RCCEx_PeriphCLKConfig+0x768>
 80050a8:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80050ac:	f000 8591 	beq.w	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80050b0:	2900      	cmp	r1, #0
 80050b2:	f000 825e 	beq.w	8005572 <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 80050b6:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80050b8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80050ba:	01d8      	lsls	r0, r3, #7
 80050bc:	d515      	bpl.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 80050be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80050c0:	2903      	cmp	r1, #3
 80050c2:	f200 85b4 	bhi.w	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80050c6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80050ca:	000c      	.short	0x000c
 80050cc:	03a10007 	.word	0x03a10007
 80050d0:	000c      	.short	0x000c
 80050d2:	bf00      	nop
 80050d4:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d8:	4836      	ldr	r0, [pc, #216]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80050da:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80050dc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80050e0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80050e2:	2d00      	cmp	r5, #0
 80050e4:	f000 831a 	beq.w	800571c <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 80050e8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050ea:	0259      	lsls	r1, r3, #9
 80050ec:	f100 827a 	bmi.w	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050f0:	07df      	lsls	r7, r3, #31
 80050f2:	d52f      	bpl.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 80050f4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80050f6:	2928      	cmp	r1, #40	@ 0x28
 80050f8:	d82a      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80050fa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80050fe:	0257      	.short	0x0257
 8005100:	00290029 	.word	0x00290029
 8005104:	00290029 	.word	0x00290029
 8005108:	00290029 	.word	0x00290029
 800510c:	02480029 	.word	0x02480029
 8005110:	00290029 	.word	0x00290029
 8005114:	00290029 	.word	0x00290029
 8005118:	00290029 	.word	0x00290029
 800511c:	04b90029 	.word	0x04b90029
 8005120:	00290029 	.word	0x00290029
 8005124:	00290029 	.word	0x00290029
 8005128:	00290029 	.word	0x00290029
 800512c:	02570029 	.word	0x02570029
 8005130:	00290029 	.word	0x00290029
 8005134:	00290029 	.word	0x00290029
 8005138:	00290029 	.word	0x00290029
 800513c:	02570029 	.word	0x02570029
 8005140:	00290029 	.word	0x00290029
 8005144:	00290029 	.word	0x00290029
 8005148:	00290029 	.word	0x00290029
 800514c:	02570029 	.word	0x02570029
      status = ret;
 8005150:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005152:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005154:	0798      	lsls	r0, r3, #30
 8005156:	d51e      	bpl.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005158:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800515a:	2905      	cmp	r1, #5
 800515c:	f200 8550 	bhi.w	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8005160:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005164:	00060015 	.word	0x00060015
 8005168:	00150471 	.word	0x00150471
 800516c:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005170:	4910      	ldr	r1, [pc, #64]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8005172:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005174:	f001 0103 	and.w	r1, r1, #3
 8005178:	2903      	cmp	r1, #3
 800517a:	f000 8541 	beq.w	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 800517e:	2101      	movs	r1, #1
 8005180:	f104 0008 	add.w	r0, r4, #8
 8005184:	f7ff fd5c 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 8005188:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800518a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800518e:	2d00      	cmp	r5, #0
 8005190:	f000 82cc 	beq.w	800572c <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 8005194:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005196:	0759      	lsls	r1, r3, #29
 8005198:	d521      	bpl.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800519a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800519e:	2905      	cmp	r1, #5
 80051a0:	f200 852a 	bhi.w	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80051a4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80051a8:	00080017 	.word	0x00080017
 80051ac:	0017043c 	.word	0x0017043c
 80051b0:	00170017 	.word	0x00170017
 80051b4:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051b8:	49ae      	ldr	r1, [pc, #696]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051ba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80051bc:	f001 0103 	and.w	r1, r1, #3
 80051c0:	2903      	cmp	r1, #3
 80051c2:	f000 8519 	beq.w	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80051c6:	2101      	movs	r1, #1
 80051c8:	f104 0008 	add.w	r0, r4, #8
 80051cc:	f7ff fd38 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 80051d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051d2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	f000 82c2 	beq.w	8005760 <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 80051dc:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051de:	069f      	lsls	r7, r3, #26
 80051e0:	d526      	bpl.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80051e2:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80051e6:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80051ea:	f000 82c6 	beq.w	800577a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80051ee:	f200 8455 	bhi.w	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80051f2:	b191      	cbz	r1, 800521a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80051f4:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80051f8:	f040 845a 	bne.w	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051fc:	499d      	ldr	r1, [pc, #628]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051fe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005200:	f001 0103 	and.w	r1, r1, #3
 8005204:	2903      	cmp	r1, #3
 8005206:	f000 8453 	beq.w	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 800520a:	2100      	movs	r1, #0
 800520c:	f104 0008 	add.w	r0, r4, #8
 8005210:	f7ff fd16 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 8005214:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005216:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800521a:	2d00      	cmp	r5, #0
 800521c:	f040 828e 	bne.w	800573c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005220:	4f94      	ldr	r7, [pc, #592]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005222:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8005226:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005228:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800522c:	4301      	orrs	r1, r0
 800522e:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005230:	0658      	lsls	r0, r3, #25
 8005232:	d526      	bpl.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005234:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8005238:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800523c:	f000 82af 	beq.w	800579e <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8005240:	f200 8464 	bhi.w	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005244:	b191      	cbz	r1, 800526c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8005246:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800524a:	f040 8469 	bne.w	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800524e:	4989      	ldr	r1, [pc, #548]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005250:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005252:	f001 0103 	and.w	r1, r1, #3
 8005256:	2903      	cmp	r1, #3
 8005258:	f000 8462 	beq.w	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800525c:	2100      	movs	r1, #0
 800525e:	f104 0008 	add.w	r0, r4, #8
 8005262:	f7ff fced 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 8005266:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005268:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800526c:	2d00      	cmp	r5, #0
 800526e:	f040 8269 	bne.w	8005744 <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005272:	4f80      	ldr	r7, [pc, #512]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005274:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8005278:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800527a:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 800527e:	4301      	orrs	r1, r0
 8005280:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005282:	0619      	lsls	r1, r3, #24
 8005284:	d526      	bpl.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005286:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800528a:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800528e:	f000 8298 	beq.w	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005292:	f200 841f 	bhi.w	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8005296:	b191      	cbz	r1, 80052be <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005298:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800529c:	f040 8424 	bne.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052a0:	4974      	ldr	r1, [pc, #464]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80052a2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80052a4:	f001 0103 	and.w	r1, r1, #3
 80052a8:	2903      	cmp	r1, #3
 80052aa:	f000 841d 	beq.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80052ae:	2100      	movs	r1, #0
 80052b0:	f104 0008 	add.w	r0, r4, #8
 80052b4:	f7ff fcc4 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 80052b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80052ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052be:	2d00      	cmp	r5, #0
 80052c0:	f040 8244 	bne.w	800574c <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80052c4:	4f6b      	ldr	r7, [pc, #428]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80052c6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 80052ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80052cc:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80052d0:	4301      	orrs	r1, r0
 80052d2:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80052d4:	071f      	lsls	r7, r3, #28
 80052d6:	d50b      	bpl.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80052d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80052dc:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80052e0:	f000 81d4 	beq.w	800568c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80052e4:	4f63      	ldr	r7, [pc, #396]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80052e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052e8:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80052ec:	4301      	orrs	r1, r0
 80052ee:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052f0:	06d8      	lsls	r0, r3, #27
 80052f2:	d50b      	bpl.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80052f4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80052f8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80052fc:	f000 81db 	beq.w	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005300:	4f5c      	ldr	r7, [pc, #368]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005302:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005304:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8005308:	4301      	orrs	r1, r0
 800530a:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800530c:	0319      	lsls	r1, r3, #12
 800530e:	d524      	bpl.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 8005310:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8005314:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8005318:	f000 82b1 	beq.w	800587e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800531c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8005320:	d010      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8005322:	2900      	cmp	r1, #0
 8005324:	f040 8130 	bne.w	8005588 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005328:	4852      	ldr	r0, [pc, #328]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800532a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800532c:	f000 0003 	and.w	r0, r0, #3
 8005330:	2803      	cmp	r0, #3
 8005332:	f000 8129 	beq.w	8005588 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8005336:	f104 0008 	add.w	r0, r4, #8
 800533a:	f7ff fc81 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 800533e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005340:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005344:	2d00      	cmp	r5, #0
 8005346:	f040 81ff 	bne.w	8005748 <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800534a:	4f4a      	ldr	r7, [pc, #296]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800534c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8005350:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005352:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8005356:	4301      	orrs	r1, r0
 8005358:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800535a:	035f      	lsls	r7, r3, #13
 800535c:	d50f      	bpl.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 800535e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005362:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005366:	f000 8277 	beq.w	8005858 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800536a:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800536e:	f000 812d 	beq.w	80055cc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8005372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005376:	f000 8124 	beq.w	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 800537a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800537c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800537e:	03d8      	lsls	r0, r3, #15
 8005380:	d520      	bpl.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8005382:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005384:	2900      	cmp	r1, #0
 8005386:	f000 81aa 	beq.w	80056de <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800538a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800538e:	f040 80e8 	bne.w	8005562 <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005392:	4938      	ldr	r1, [pc, #224]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005394:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005396:	f001 0103 	and.w	r1, r1, #3
 800539a:	2903      	cmp	r1, #3
 800539c:	f000 80e1 	beq.w	8005562 <HAL_RCCEx_PeriphCLKConfig+0x762>
 80053a0:	2102      	movs	r1, #2
 80053a2:	f104 0008 	add.w	r0, r4, #8
 80053a6:	f7ff fc4b 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 80053aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80053b0:	2d00      	cmp	r5, #0
 80053b2:	f040 819c 	bne.w	80056ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80053b6:	4f2f      	ldr	r7, [pc, #188]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80053b8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80053ba:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80053bc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80053c0:	4301      	orrs	r1, r0
 80053c2:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053c4:	0099      	lsls	r1, r3, #2
 80053c6:	d50e      	bpl.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053c8:	492a      	ldr	r1, [pc, #168]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80053ca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80053cc:	f001 0103 	and.w	r1, r1, #3
 80053d0:	2903      	cmp	r1, #3
 80053d2:	d007      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 80053d4:	2102      	movs	r1, #2
 80053d6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80053da:	f7ff fca1 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053de:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053e2:	b100      	cbz	r0, 80053e6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 80053e4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053e6:	039f      	lsls	r7, r3, #14
 80053e8:	f100 80ab 	bmi.w	8005542 <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 80053ec:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053ee:	02d8      	lsls	r0, r3, #11
 80053f0:	d506      	bpl.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053f2:	4820      	ldr	r0, [pc, #128]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80053f4:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 80053f6:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80053f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80053fc:	4331      	orrs	r1, r6
 80053fe:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005400:	00d9      	lsls	r1, r3, #3
 8005402:	d507      	bpl.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005404:	481b      	ldr	r0, [pc, #108]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005406:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 800540a:	6901      	ldr	r1, [r0, #16]
 800540c:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8005410:	4331      	orrs	r1, r6
 8005412:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005414:	029f      	lsls	r7, r3, #10
 8005416:	d506      	bpl.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005418:	4816      	ldr	r0, [pc, #88]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800541a:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 800541c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800541e:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8005422:	4331      	orrs	r1, r6
 8005424:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005426:	005e      	lsls	r6, r3, #1
 8005428:	d509      	bpl.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800542a:	4912      	ldr	r1, [pc, #72]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800542c:	6908      	ldr	r0, [r1, #16]
 800542e:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8005432:	6108      	str	r0, [r1, #16]
 8005434:	6908      	ldr	r0, [r1, #16]
 8005436:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 800543a:	4330      	orrs	r0, r6
 800543c:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800543e:	2b00      	cmp	r3, #0
 8005440:	da06      	bge.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005442:	480c      	ldr	r0, [pc, #48]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005444:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8005446:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005448:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800544c:	4331      	orrs	r1, r6
 800544e:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005450:	0218      	lsls	r0, r3, #8
 8005452:	d507      	bpl.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005454:	4907      	ldr	r1, [pc, #28]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005456:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800545a:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800545c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005460:	4303      	orrs	r3, r0
 8005462:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005464:	07d1      	lsls	r1, r2, #31
 8005466:	d511      	bpl.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005468:	4b02      	ldr	r3, [pc, #8]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800546a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	2b03      	cmp	r3, #3
 8005472:	e001      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005474:	58024400 	.word	0x58024400
 8005478:	f000 835c 	beq.w	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 800547c:	2100      	movs	r1, #0
 800547e:	f104 0008 	add.w	r0, r4, #8
 8005482:	f7ff fbdd 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005486:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005488:	b100      	cbz	r0, 800548c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800548a:	4605      	mov	r5, r0
 800548c:	0793      	lsls	r3, r2, #30
 800548e:	d50e      	bpl.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005490:	4baf      	ldr	r3, [pc, #700]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	2b03      	cmp	r3, #3
 800549a:	f000 834d 	beq.w	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 800549e:	2101      	movs	r1, #1
 80054a0:	f104 0008 	add.w	r0, r4, #8
 80054a4:	f7ff fbcc 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80054a8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80054aa:	b100      	cbz	r0, 80054ae <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80054ac:	4605      	mov	r5, r0
 80054ae:	0757      	lsls	r7, r2, #29
 80054b0:	d50e      	bpl.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054b2:	4ba7      	ldr	r3, [pc, #668]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	f000 833e 	beq.w	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80054c0:	2102      	movs	r1, #2
 80054c2:	f104 0008 	add.w	r0, r4, #8
 80054c6:	f7ff fbbb 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80054ca:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80054cc:	b100      	cbz	r0, 80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80054ce:	4605      	mov	r5, r0
 80054d0:	0716      	lsls	r6, r2, #28
 80054d2:	d50e      	bpl.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054d4:	4b9e      	ldr	r3, [pc, #632]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	2b03      	cmp	r3, #3
 80054de:	f000 8323 	beq.w	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd28>
 80054e2:	2100      	movs	r1, #0
 80054e4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80054e8:	f7ff fc1a 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80054ec:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80054ee:	b100      	cbz	r0, 80054f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80054f0:	4605      	mov	r5, r0
 80054f2:	06d0      	lsls	r0, r2, #27
 80054f4:	d50f      	bpl.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054f6:	4b96      	ldr	r3, [pc, #600]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b03      	cmp	r3, #3
 8005500:	f000 8314 	beq.w	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 8005504:	2101      	movs	r1, #1
 8005506:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800550a:	f7ff fc09 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 800550e:	2800      	cmp	r0, #0
 8005510:	f040 8359 	bne.w	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005514:	6862      	ldr	r2, [r4, #4]
 8005516:	0693      	lsls	r3, r2, #26
 8005518:	d50e      	bpl.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800551a:	4b8d      	ldr	r3, [pc, #564]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800551c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b03      	cmp	r3, #3
 8005524:	f000 82b7 	beq.w	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005528:	2102      	movs	r1, #2
 800552a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800552e:	f7ff fbf7 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8005532:	2800      	cmp	r0, #0
 8005534:	f040 82af 	bne.w	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 8005538:	1e28      	subs	r0, r5, #0
 800553a:	bf18      	it	ne
 800553c:	2001      	movne	r0, #1
}
 800553e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 8005542:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8005546:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800554a:	f000 80d2 	beq.w	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800554e:	f240 8110 	bls.w	8005772 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005552:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8005556:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800555a:	f000 80cf 	beq.w	80056fc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800555e:	2501      	movs	r5, #1
 8005560:	e745      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 8005562:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005564:	4635      	mov	r5, r6
 8005566:	e72d      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005568:	4879      	ldr	r0, [pc, #484]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800556a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800556c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005570:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005572:	2d00      	cmp	r5, #0
 8005574:	f040 80ce 	bne.w	8005714 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005578:	4f75      	ldr	r7, [pc, #468]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800557a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800557c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800557e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8005582:	4301      	orrs	r1, r0
 8005584:	6539      	str	r1, [r7, #80]	@ 0x50
 8005586:	e598      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8005588:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800558a:	4635      	mov	r5, r6
 800558c:	e6e5      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800558e:	4970      	ldr	r1, [pc, #448]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005590:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005592:	f001 0103 	and.w	r1, r1, #3
 8005596:	2903      	cmp	r1, #3
 8005598:	f43f adda 	beq.w	8005150 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800559c:	2101      	movs	r1, #1
 800559e:	f104 0008 	add.w	r0, r4, #8
 80055a2:	f7ff fb4d 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 80055a6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055a8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80055ac:	2d00      	cmp	r5, #0
 80055ae:	f040 80d5 	bne.w	800575c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055b2:	4f67      	ldr	r7, [pc, #412]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80055b4:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80055b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055b8:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 80055bc:	4301      	orrs	r1, r0
 80055be:	6579      	str	r1, [r7, #84]	@ 0x54
 80055c0:	e5c8      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c2:	4863      	ldr	r0, [pc, #396]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80055c4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80055c6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80055ca:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	f040 809f 	bne.w	8005710 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055d2:	4f5f      	ldr	r7, [pc, #380]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80055d4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80055d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055da:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80055de:	4301      	orrs	r1, r0
 80055e0:	6579      	str	r1, [r7, #84]	@ 0x54
 80055e2:	e6cc      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055e4:	4f5b      	ldr	r7, [pc, #364]	@ (8005754 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ec:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80055ee:	f7fc f8ed 	bl	80017cc <HAL_GetTick>
 80055f2:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055f4:	e006      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f6:	f7fc f8e9 	bl	80017cc <HAL_GetTick>
 80055fa:	eba0 0008 	sub.w	r0, r0, r8
 80055fe:	2864      	cmp	r0, #100	@ 0x64
 8005600:	f200 82db 	bhi.w	8005bba <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	05da      	lsls	r2, r3, #23
 8005608:	d5f5      	bpl.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 800560a:	2d00      	cmp	r5, #0
 800560c:	f040 82d6 	bne.w	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005610:	4a4f      	ldr	r2, [pc, #316]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005612:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005616:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005618:	4059      	eors	r1, r3
 800561a:	f411 7f40 	tst.w	r1, #768	@ 0x300
 800561e:	d00b      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005620:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8005622:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005624:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005628:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 800562c:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800562e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8005630:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8005634:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8005636:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800563c:	f000 82fb 	beq.w	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005640:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005644:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005648:	f000 8309 	beq.w	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 800564c:	4940      	ldr	r1, [pc, #256]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800564e:	690a      	ldr	r2, [r1, #16]
 8005650:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8005654:	610a      	str	r2, [r1, #16]
 8005656:	483e      	ldr	r0, [pc, #248]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005658:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800565c:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 800565e:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005660:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005664:	6701      	str	r1, [r0, #112]	@ 0x70
 8005666:	e543      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005668:	4839      	ldr	r0, [pc, #228]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800566a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800566c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005670:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005672:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005674:	2d00      	cmp	r5, #0
 8005676:	f040 8177 	bne.w	8005968 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800567a:	4f35      	ldr	r7, [pc, #212]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800567c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800567e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005680:	f021 0107 	bic.w	r1, r1, #7
 8005684:	4301      	orrs	r1, r0
 8005686:	6539      	str	r1, [r7, #80]	@ 0x50
 8005688:	f7ff bbf6 	b.w	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800568c:	4930      	ldr	r1, [pc, #192]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800568e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005690:	f001 0103 	and.w	r1, r1, #3
 8005694:	2903      	cmp	r1, #3
 8005696:	f000 82ba 	beq.w	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 800569a:	2102      	movs	r1, #2
 800569c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80056a0:	f7ff fb3e 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056a4:	2800      	cmp	r0, #0
 80056a6:	f000 82b5 	beq.w	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056aa:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 80056ae:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80056b4:	e616      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056b6:	4926      	ldr	r1, [pc, #152]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80056b8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80056ba:	f001 0103 	and.w	r1, r1, #3
 80056be:	2903      	cmp	r1, #3
 80056c0:	f000 82a2 	beq.w	8005c08 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80056c4:	2102      	movs	r1, #2
 80056c6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80056ca:	f7ff fb29 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056ce:	2800      	cmp	r0, #0
 80056d0:	f040 82a6 	bne.w	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056d4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80056dc:	e610      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056de:	481c      	ldr	r0, [pc, #112]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80056e0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80056e2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80056e6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80056e8:	2d00      	cmp	r5, #0
 80056ea:	f43f ae64 	beq.w	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 80056ee:	462e      	mov	r6, r5
 80056f0:	e668      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f2:	4f17      	ldr	r7, [pc, #92]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80056f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056f6:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80056fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	f47f ae76 	bne.w	80053ee <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005702:	4d13      	ldr	r5, [pc, #76]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005704:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8005706:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800570a:	4301      	orrs	r1, r0
 800570c:	6569      	str	r1, [r5, #84]	@ 0x54
 800570e:	e66d      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 8005710:	462e      	mov	r6, r5
 8005712:	e634      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 8005714:	462e      	mov	r6, r5
 8005716:	e4d0      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8005718:	462e      	mov	r6, r5
 800571a:	e445      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800571c:	4f0c      	ldr	r7, [pc, #48]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800571e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005720:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005722:	f021 0103 	bic.w	r1, r1, #3
 8005726:	4301      	orrs	r1, r0
 8005728:	64f9      	str	r1, [r7, #76]	@ 0x4c
 800572a:	e4de      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800572c:	4f08      	ldr	r7, [pc, #32]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800572e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005730:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005732:	f021 0107 	bic.w	r1, r1, #7
 8005736:	4301      	orrs	r1, r0
 8005738:	6579      	str	r1, [r7, #84]	@ 0x54
 800573a:	e52c      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 800573c:	462e      	mov	r6, r5
 800573e:	e577      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 8005740:	462e      	mov	r6, r5
 8005742:	e4aa      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 8005744:	462e      	mov	r6, r5
 8005746:	e59c      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 8005748:	462e      	mov	r6, r5
 800574a:	e606      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 800574c:	462e      	mov	r6, r5
 800574e:	e5c1      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005750:	58024400 	.word	0x58024400
 8005754:	58024800 	.word	0x58024800
      status = ret;
 8005758:	462e      	mov	r6, r5
 800575a:	e475      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 800575c:	462e      	mov	r6, r5
 800575e:	e4f9      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005760:	4fc2      	ldr	r7, [pc, #776]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005762:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8005766:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005768:	f021 0107 	bic.w	r1, r1, #7
 800576c:	4301      	orrs	r1, r0
 800576e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005770:	e535      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 8005772:	2900      	cmp	r1, #0
 8005774:	f47f aef3 	bne.w	800555e <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8005778:	e7c0      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800577a:	49bc      	ldr	r1, [pc, #752]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800577c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800577e:	f001 0103 	and.w	r1, r1, #3
 8005782:	2903      	cmp	r1, #3
 8005784:	f000 8194 	beq.w	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8005788:	2102      	movs	r1, #2
 800578a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800578e:	f7ff fac7 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 8005792:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005794:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005798:	2d00      	cmp	r5, #0
 800579a:	d1cf      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800579c:	e540      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800579e:	49b3      	ldr	r1, [pc, #716]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057a0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80057a2:	f001 0103 	and.w	r1, r1, #3
 80057a6:	2903      	cmp	r1, #3
 80057a8:	f000 81ba 	beq.w	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80057ac:	2102      	movs	r1, #2
 80057ae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80057b2:	f7ff fab5 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 80057b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80057b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80057bc:	2d00      	cmp	r5, #0
 80057be:	d1c1      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x944>
 80057c0:	e557      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057c2:	49aa      	ldr	r1, [pc, #680]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057c4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80057c6:	f001 0103 	and.w	r1, r1, #3
 80057ca:	2903      	cmp	r1, #3
 80057cc:	f000 818c 	beq.w	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80057d0:	2102      	movs	r1, #2
 80057d2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80057d6:	f7ff faa3 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 80057da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80057dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80057e0:	2d00      	cmp	r5, #0
 80057e2:	d1b3      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 80057e4:	e56e      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057e6:	49a1      	ldr	r1, [pc, #644]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057e8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80057ea:	f001 0103 	and.w	r1, r1, #3
 80057ee:	2903      	cmp	r1, #3
 80057f0:	f000 81df 	beq.w	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 80057f4:	2102      	movs	r1, #2
 80057f6:	f104 0008 	add.w	r0, r4, #8
 80057fa:	f7ff fa21 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 80057fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005800:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005804:	2d00      	cmp	r5, #0
 8005806:	d187      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8005808:	f7ff bbc7 	b.w	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800580c:	4997      	ldr	r1, [pc, #604]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800580e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005810:	f001 0103 	and.w	r1, r1, #3
 8005814:	2903      	cmp	r1, #3
 8005816:	f000 820a 	beq.w	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800581a:	2102      	movs	r1, #2
 800581c:	f104 0008 	add.w	r0, r4, #8
 8005820:	f7ff fa0e 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 8005824:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005826:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800582a:	2d00      	cmp	r5, #0
 800582c:	f47f ac5c 	bne.w	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005830:	e774      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005832:	498e      	ldr	r1, [pc, #568]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005834:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005836:	f001 0103 	and.w	r1, r1, #3
 800583a:	2903      	cmp	r1, #3
 800583c:	f000 8146 	beq.w	8005acc <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005840:	2101      	movs	r1, #1
 8005842:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005846:	f7ff fa6b 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 800584a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800584c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005850:	2d00      	cmp	r5, #0
 8005852:	d181      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8005854:	f7ff bbf1 	b.w	800503a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005858:	4984      	ldr	r1, [pc, #528]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800585a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800585c:	f001 0103 	and.w	r1, r1, #3
 8005860:	2903      	cmp	r1, #3
 8005862:	f43f ad8a 	beq.w	800537a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005866:	2101      	movs	r1, #1
 8005868:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800586c:	f7ff fa58 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 8005870:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005872:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005876:	2d00      	cmp	r5, #0
 8005878:	f47f af4a 	bne.w	8005710 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800587c:	e6a9      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800587e:	497b      	ldr	r1, [pc, #492]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005880:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005882:	f001 0103 	and.w	r1, r1, #3
 8005886:	2903      	cmp	r1, #3
 8005888:	f43f ae7e 	beq.w	8005588 <HAL_RCCEx_PeriphCLKConfig+0x788>
 800588c:	2102      	movs	r1, #2
 800588e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005892:	f7ff fa45 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 8005896:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005898:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800589c:	2d00      	cmp	r5, #0
 800589e:	f47f af53 	bne.w	8005748 <HAL_RCCEx_PeriphCLKConfig+0x948>
 80058a2:	e552      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058a4:	4971      	ldr	r1, [pc, #452]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80058a6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80058a8:	f001 0103 	and.w	r1, r1, #3
 80058ac:	2903      	cmp	r1, #3
 80058ae:	f000 8129 	beq.w	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 80058b2:	2101      	movs	r1, #1
 80058b4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80058b8:	f7ff fa32 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 80058bc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058be:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80058c2:	2d00      	cmp	r5, #0
 80058c4:	f47f af3c 	bne.w	8005740 <HAL_RCCEx_PeriphCLKConfig+0x940>
 80058c8:	f7ff bbdf 	b.w	800508a <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058cc:	4867      	ldr	r0, [pc, #412]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80058ce:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80058d0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80058d4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80058d6:	2d00      	cmp	r5, #0
 80058d8:	f43f ab88 	beq.w	8004fec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 80058dc:	462e      	mov	r6, r5
 80058de:	f7ff bb8c 	b.w	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e2:	4862      	ldr	r0, [pc, #392]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80058e4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80058e6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80058ea:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	f43f ab38 	beq.w	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 80058f2:	462e      	mov	r6, r5
 80058f4:	f7ff bb3d 	b.w	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058f8:	495c      	ldr	r1, [pc, #368]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80058fa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80058fc:	f001 0103 	and.w	r1, r1, #3
 8005900:	2903      	cmp	r1, #3
 8005902:	f000 8125 	beq.w	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8005906:	2100      	movs	r1, #0
 8005908:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800590c:	f7ff fa08 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 8005910:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005912:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005916:	f7ff bb66 	b.w	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800591a:	4954      	ldr	r1, [pc, #336]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800591c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800591e:	f001 0103 	and.w	r1, r1, #3
 8005922:	2903      	cmp	r1, #3
 8005924:	f000 813e 	beq.w	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8005928:	2100      	movs	r1, #0
 800592a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800592e:	f7ff f9f7 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 8005932:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005934:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005938:	2d00      	cmp	r5, #0
 800593a:	f43f aabd 	beq.w	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 800593e:	462e      	mov	r6, r5
 8005940:	f7ff bac1 	b.w	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005944:	4949      	ldr	r1, [pc, #292]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005946:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005948:	f001 0103 	and.w	r1, r1, #3
 800594c:	2903      	cmp	r1, #3
 800594e:	f43f aa91 	beq.w	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005952:	2100      	movs	r1, #0
 8005954:	f104 0008 	add.w	r0, r4, #8
 8005958:	f7ff f972 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 800595c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800595e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005962:	2d00      	cmp	r5, #0
 8005964:	f43f ae89 	beq.w	800567a <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 8005968:	462e      	mov	r6, r5
 800596a:	f7ff ba85 	b.w	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800596e:	493f      	ldr	r1, [pc, #252]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005970:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005972:	f001 0103 	and.w	r1, r1, #3
 8005976:	2903      	cmp	r1, #3
 8005978:	f43f aa7c 	beq.w	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800597c:	2100      	movs	r1, #0
 800597e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005982:	f7ff f9cd 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 8005986:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005988:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800598c:	e672      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800598e:	4937      	ldr	r1, [pc, #220]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005990:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005992:	f001 0103 	and.w	r1, r1, #3
 8005996:	2903      	cmp	r1, #3
 8005998:	f000 80f9 	beq.w	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800599c:	2100      	movs	r1, #0
 800599e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80059a2:	f7ff f9bd 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 80059a6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059a8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80059ac:	2d00      	cmp	r5, #0
 80059ae:	f43f aaad 	beq.w	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 80059b2:	462e      	mov	r6, r5
 80059b4:	f7ff bab2 	b.w	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059b8:	492c      	ldr	r1, [pc, #176]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80059ba:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80059bc:	f001 0103 	and.w	r1, r1, #3
 80059c0:	2903      	cmp	r1, #3
 80059c2:	f000 80d1 	beq.w	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 80059c6:	2100      	movs	r1, #0
 80059c8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80059cc:	f7ff f9a8 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 80059d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059d2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80059d6:	f7ff bac1 	b.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059da:	4924      	ldr	r1, [pc, #144]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80059dc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80059de:	f001 0103 	and.w	r1, r1, #3
 80059e2:	2903      	cmp	r1, #3
 80059e4:	f000 80c8 	beq.w	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80059e8:	2102      	movs	r1, #2
 80059ea:	3028      	adds	r0, #40	@ 0x28
 80059ec:	f7ff f998 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 80059f0:	4606      	mov	r6, r0
        break;
 80059f2:	f7ff ba28 	b.w	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f6:	481d      	ldr	r0, [pc, #116]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80059f8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80059fa:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80059fe:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8005a00:	f7ff ba81 	b.w	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a04:	4819      	ldr	r0, [pc, #100]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005a06:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005a08:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005a0c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8005a0e:	f7ff ba50 	b.w	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a12:	4d16      	ldr	r5, [pc, #88]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005a14:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8005a16:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8005a1a:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005a1c:	f7ff ba17 	b.w	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a20:	4912      	ldr	r1, [pc, #72]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005a22:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005a24:	f001 0103 	and.w	r1, r1, #3
 8005a28:	2903      	cmp	r1, #3
 8005a2a:	f000 80e5 	beq.w	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8005a2e:	2101      	movs	r1, #1
 8005a30:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005a34:	f7ff f974 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 8005a38:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a3a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005a3e:	2d00      	cmp	r5, #0
 8005a40:	f47f abcc 	bne.w	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8005a44:	e68c      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a46:	4909      	ldr	r1, [pc, #36]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005a48:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005a4a:	f001 0103 	and.w	r1, r1, #3
 8005a4e:	2903      	cmp	r1, #3
 8005a50:	f000 80d6 	beq.w	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8005a54:	2101      	movs	r1, #1
 8005a56:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005a5a:	f7ff f961 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 8005a5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a60:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005a64:	2d00      	cmp	r5, #0
 8005a66:	f47f ab95 	bne.w	8005194 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8005a6a:	e65f      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x92c>
 8005a6c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a70:	4983      	ldr	r1, [pc, #524]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005a72:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005a74:	f001 0103 	and.w	r1, r1, #3
 8005a78:	2903      	cmp	r1, #3
 8005a7a:	f43f ab69 	beq.w	8005150 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005a7e:	2101      	movs	r1, #1
 8005a80:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005a84:	f7ff f94c 	bl	8004d20 <RCCEx_PLL3_Config.part.0>
 8005a88:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a8a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005a8e:	2d00      	cmp	r5, #0
 8005a90:	f47f ae64 	bne.w	800575c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005a94:	e58d      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 8005a96:	2001      	movs	r0, #1
}
 8005a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005a9c:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8005aa0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005aa4:	f43f abb9 	beq.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005aa8:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8005aac:	f43f abb5 	beq.w	800521a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 8005ab0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005ab2:	4635      	mov	r5, r6
 8005ab4:	f7ff bbbc 	b.w	8005230 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ab8:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8005abc:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8005ac0:	f43f aab8 	beq.w	8005034 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005ac4:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8005ac8:	f43f aab4 	beq.w	8005034 <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 8005acc:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005ace:	4635      	mov	r5, r6
 8005ad0:	f7ff baba 	b.w	8005048 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ad4:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8005ad8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005adc:	f43f abef 	beq.w	80052be <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005ae0:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8005ae4:	f43f abeb 	beq.w	80052be <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 8005ae8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005aea:	4635      	mov	r5, r6
 8005aec:	f7ff bbf2 	b.w	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005af0:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8005af4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005af8:	f43f aac4 	beq.w	8005084 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8005afc:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8005b00:	f43f aac0 	beq.w	8005084 <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 8005b04:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005b06:	4635      	mov	r5, r6
 8005b08:	f7ff bac7 	b.w	800509a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005b0c:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8005b10:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8005b14:	f43f abaa 	beq.w	800526c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8005b18:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8005b1c:	f43f aba6 	beq.w	800526c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 8005b20:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005b22:	4635      	mov	r5, r6
 8005b24:	f7ff bbad 	b.w	8005282 <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 8005b28:	2501      	movs	r5, #1
 8005b2a:	e4e2      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b2c:	0691      	lsls	r1, r2, #26
 8005b2e:	d5b2      	bpl.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 8005b30:	2501      	movs	r5, #1
 8005b32:	e4f2      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 8005b34:	2501      	movs	r5, #1
 8005b36:	e4a9      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005b38:	2501      	movs	r5, #1
 8005b3a:	e4b8      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8005b3c:	2501      	movs	r5, #1
 8005b3e:	e4c7      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b40:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8005b44:	f43f aa4f 	beq.w	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8005b48:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8005b4c:	f43f aa4b 	beq.w	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 8005b50:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005b52:	4635      	mov	r5, r6
 8005b54:	f7ff ba51 	b.w	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b58:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8005b5c:	f43f a9fe 	beq.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005b60:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8005b64:	f43f a9fa 	beq.w	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 8005b68:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005b6a:	4635      	mov	r5, r6
 8005b6c:	f7ff ba01 	b.w	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b70:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8005b74:	f43f a96b 	beq.w	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 8005b78:	2601      	movs	r6, #1
 8005b7a:	f7ff b96f 	b.w	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8005b7e:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8005b82:	f43f a9c0 	beq.w	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b86:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8005b8a:	f43f a9bc 	beq.w	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 8005b8e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005b90:	4635      	mov	r5, r6
 8005b92:	f7ff b9c3 	b.w	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b96:	29c0      	cmp	r1, #192	@ 0xc0
 8005b98:	f43f a98b 	beq.w	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8005b9c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005ba0:	f43f a987 	beq.w	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 8005ba4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005ba6:	4635      	mov	r5, r6
 8005ba8:	f7ff b98d 	b.w	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 8005bac:	2930      	cmp	r1, #48	@ 0x30
 8005bae:	f43f a9f1 	beq.w	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 8005bb2:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005bb4:	4635      	mov	r5, r6
 8005bb6:	f7ff b9f7 	b.w	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 8005bba:	2503      	movs	r5, #3
      status = ret;
 8005bbc:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005bbe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005bc2:	f7ff ba95 	b.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005bc6:	6863      	ldr	r3, [r4, #4]
 8005bc8:	069a      	lsls	r2, r3, #26
 8005bca:	f57f af64 	bpl.w	8005a96 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005bce:	4605      	mov	r5, r0
 8005bd0:	e4a3      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bd2:	492b      	ldr	r1, [pc, #172]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005bd4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005bd6:	f001 0103 	and.w	r1, r1, #3
 8005bda:	2903      	cmp	r1, #3
 8005bdc:	f43f aa6b 	beq.w	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8005be0:	2101      	movs	r1, #1
 8005be2:	f104 0008 	add.w	r0, r4, #8
 8005be6:	f7ff f82b 	bl	8004c40 <RCCEx_PLL2_Config.part.0>
 8005bea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005bec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005bf0:	2d00      	cmp	r5, #0
 8005bf2:	f47f ad8f 	bne.w	8005714 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8005bf6:	e4bf      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 8005bf8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005bfa:	4635      	mov	r5, r6
 8005bfc:	f7ff baef 	b.w	80051de <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 8005c00:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005c02:	4635      	mov	r5, r6
 8005c04:	f7ff bac7 	b.w	8005196 <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 8005c08:	2601      	movs	r6, #1
 8005c0a:	f7ff bb79 	b.w	8005300 <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 8005c0e:	2601      	movs	r6, #1
 8005c10:	f7ff bb68 	b.w	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c14:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c18:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005c1c:	f7ff bb62 	b.w	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c20:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 8005c24:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c26:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005c2a:	f7ff bb69 	b.w	8005300 <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 8005c2e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005c30:	4635      	mov	r5, r6
 8005c32:	f7ff ba5a 	b.w	80050ea <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 8005c36:	f7fb fdc9 	bl	80017cc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c3a:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 8005c3e:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c40:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c44:	e004      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c46:	f7fb fdc1 	bl	80017cc <HAL_GetTick>
 8005c4a:	1bc0      	subs	r0, r0, r7
 8005c4c:	4548      	cmp	r0, r9
 8005c4e:	d810      	bhi.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c50:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8005c54:	079b      	lsls	r3, r3, #30
 8005c56:	d5f6      	bpl.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c58:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005c5c:	e4f0      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005c5e:	4808      	ldr	r0, [pc, #32]	@ (8005c80 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005c60:	4a08      	ldr	r2, [pc, #32]	@ (8005c84 <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 8005c62:	6901      	ldr	r1, [r0, #16]
 8005c64:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005c68:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	6102      	str	r2, [r0, #16]
 8005c70:	e4f1      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 8005c72:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c74:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005c78:	4635      	mov	r5, r6
 8005c7a:	f7ff ba39 	b.w	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8005c7e:	bf00      	nop
 8005c80:	58024400 	.word	0x58024400
 8005c84:	00ffffcf 	.word	0x00ffffcf

08005c88 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c88:	4a47      	ldr	r2, [pc, #284]	@ (8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8005c8a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c8c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c8e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c90:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8005c92:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c96:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c9a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8005c9c:	d05b      	beq.n	8005d56 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c9e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ca2:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ca6:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005caa:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005cae:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005cb2:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cb8:	ee06 1a90 	vmov	s13, r1
 8005cbc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005cc0:	d003      	beq.n	8005cca <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8005cc2:	2c02      	cmp	r4, #2
 8005cc4:	d06a      	beq.n	8005d9c <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8005cc6:	2c00      	cmp	r4, #0
 8005cc8:	d04a      	beq.n	8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cca:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005dac <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005cce:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005cd2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd8:	ee07 3a90 	vmov	s15, r3
 8005cdc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ce4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cec:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8005cf2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005cf6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005cf8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005cfc:	ee07 3a10 	vmov	s14, r3
 8005d00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005d04:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d06:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005d0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d0e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005d12:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005d16:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005d18:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005d1c:	ee07 3a10 	vmov	s14, r3
 8005d20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d24:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005d28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d2c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005d30:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d34:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005d36:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005d3a:	ee06 3a90 	vmov	s13, r3
 8005d3e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005d42:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005d46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005d4a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005d4e:	ee17 3a90 	vmov	r3, s15
 8005d52:	6083      	str	r3, [r0, #8]
}
 8005d54:	4770      	bx	lr
 8005d56:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d58:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d5c:	6083      	str	r3, [r0, #8]
}
 8005d5e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d60:	6813      	ldr	r3, [r2, #0]
 8005d62:	069b      	lsls	r3, r3, #26
 8005d64:	d51d      	bpl.n	8005da2 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d66:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d68:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005d6c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d6e:	4910      	ldr	r1, [pc, #64]	@ (8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8005d70:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d78:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d7a:	ee06 3a10 	vmov	s12, r3
 8005d7e:	ee05 1a90 	vmov	s11, r1
 8005d82:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005d86:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005d8a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005d8e:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005d92:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d9a:	e7a9      	b.n	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d9c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005db4 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8005da0:	e795      	b.n	8005cce <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005da2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005db8 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8005da6:	e792      	b.n	8005cce <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005da8:	58024400 	.word	0x58024400
 8005dac:	4a742400 	.word	0x4a742400
 8005db0:	03d09000 	.word	0x03d09000
 8005db4:	4bbebc20 	.word	0x4bbebc20
 8005db8:	4c742400 	.word	0x4c742400

08005dbc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dbc:	4a47      	ldr	r2, [pc, #284]	@ (8005edc <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8005dbe:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dc0:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005dc2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005dc4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8005dc6:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005dca:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005dce:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8005dd0:	d05b      	beq.n	8005e8a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005dd2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005dd6:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dda:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dde:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005de2:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005de6:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dec:	ee06 1a90 	vmov	s13, r1
 8005df0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005df4:	d003      	beq.n	8005dfe <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8005df6:	2c02      	cmp	r4, #2
 8005df8:	d06a      	beq.n	8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 8005dfa:	2c00      	cmp	r4, #0
 8005dfc:	d04a      	beq.n	8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dfe:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005e02:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005e06:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0c:	ee07 3a90 	vmov	s15, r3
 8005e10:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e18:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e20:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005e24:	4a2d      	ldr	r2, [pc, #180]	@ (8005edc <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8005e26:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005e2a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005e2c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005e30:	ee07 3a10 	vmov	s14, r3
 8005e34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005e38:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005e3a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005e3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e42:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005e46:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005e4a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005e4c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005e50:	ee07 3a10 	vmov	s14, r3
 8005e54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005e58:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005e5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e60:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005e64:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e68:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005e6a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005e6e:	ee06 3a90 	vmov	s13, r3
 8005e72:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005e76:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005e7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e7e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005e82:	ee17 3a90 	vmov	r3, s15
 8005e86:	6083      	str	r3, [r0, #8]
}
 8005e88:	4770      	bx	lr
 8005e8a:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e8c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e90:	6083      	str	r3, [r0, #8]
}
 8005e92:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e94:	6813      	ldr	r3, [r2, #0]
 8005e96:	069b      	lsls	r3, r3, #26
 8005e98:	d51d      	bpl.n	8005ed6 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e9a:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e9c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005ea0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ea2:	4910      	ldr	r1, [pc, #64]	@ (8005ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8005ea4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eac:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eae:	ee06 3a10 	vmov	s12, r3
 8005eb2:	ee05 1a90 	vmov	s11, r1
 8005eb6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005eba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005ebe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ec2:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005ec6:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ece:	e7a9      	b.n	8005e24 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ed0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8005ed4:	e795      	b.n	8005e02 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ed6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005eec <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8005eda:	e792      	b.n	8005e02 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	4a742400 	.word	0x4a742400
 8005ee4:	03d09000 	.word	0x03d09000
 8005ee8:	4bbebc20 	.word	0x4bbebc20
 8005eec:	4c742400 	.word	0x4c742400

08005ef0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef0:	4a47      	ldr	r2, [pc, #284]	@ (8006010 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8005ef2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef4:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005ef6:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005ef8:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 8005efa:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005efe:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f02:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8005f04:	d05b      	beq.n	8005fbe <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f06:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005f0a:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f0e:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f12:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f16:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005f1a:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f20:	ee06 1a90 	vmov	s13, r1
 8005f24:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005f28:	d04e      	beq.n	8005fc8 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8005f2a:	2c02      	cmp	r4, #2
 8005f2c:	d06d      	beq.n	800600a <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8005f2e:	2c00      	cmp	r4, #0
 8005f30:	d04d      	beq.n	8005fce <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f32:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8006014 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8005f36:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005f3a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f40:	ee07 3a90 	vmov	s15, r3
 8005f44:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f4c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f54:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005f58:	4a2d      	ldr	r2, [pc, #180]	@ (8006010 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8005f5a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005f5e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005f60:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005f64:	ee07 3a10 	vmov	s14, r3
 8005f68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005f6c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005f6e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005f72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f76:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005f7a:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005f7e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005f80:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005f84:	ee07 3a10 	vmov	s14, r3
 8005f88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005f8c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005f90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f94:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005f98:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005f9c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005f9e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005fa2:	ee06 3a90 	vmov	s13, r3
 8005fa6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005faa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005fae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005fb2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005fb6:	ee17 3a90 	vmov	r3, s15
 8005fba:	6083      	str	r3, [r0, #8]
}
 8005fbc:	4770      	bx	lr
 8005fbe:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005fc0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005fc4:	6083      	str	r3, [r0, #8]
}
 8005fc6:	4770      	bx	lr
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fc8:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8006018 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 8005fcc:	e7b3      	b.n	8005f36 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fce:	6813      	ldr	r3, [r2, #0]
 8005fd0:	069b      	lsls	r3, r3, #26
 8005fd2:	d5ae      	bpl.n	8005f32 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fd4:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fd6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005fda:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fdc:	490f      	ldr	r1, [pc, #60]	@ (800601c <HAL_RCCEx_GetPLL1ClockFreq+0x12c>)
 8005fde:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fe6:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fe8:	ee06 3a10 	vmov	s12, r3
 8005fec:	ee05 1a90 	vmov	s11, r1
 8005ff0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005ff4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005ff8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ffc:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8006000:	ee36 7a26 	vadd.f32	s14, s12, s13
 8006004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006008:	e7a6      	b.n	8005f58 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800600a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006020 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800600e:	e792      	b.n	8005f36 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8006010:	58024400 	.word	0x58024400
 8006014:	4c742400 	.word	0x4c742400
 8006018:	4a742400 	.word	0x4a742400
 800601c:	03d09000 	.word	0x03d09000
 8006020:	4bbebc20 	.word	0x4bbebc20

08006024 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006024:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8006028:	430b      	orrs	r3, r1
{
 800602a:	b500      	push	{lr}
 800602c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800602e:	d04c      	beq.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006030:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8006034:	430b      	orrs	r3, r1
 8006036:	d036      	beq.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006038:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800603c:	430b      	orrs	r3, r1
 800603e:	d06c      	beq.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006040:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8006044:	430b      	orrs	r3, r1
 8006046:	d04b      	beq.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006048:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 800604c:	430b      	orrs	r3, r1
 800604e:	f000 80b6 	beq.w	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006052:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8006056:	430b      	orrs	r3, r1
 8006058:	f000 80ec 	beq.w	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800605c:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8006060:	430b      	orrs	r3, r1
 8006062:	d069      	beq.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006064:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8006068:	430b      	orrs	r3, r1
 800606a:	f000 80d6 	beq.w	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800606e:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8006072:	430b      	orrs	r3, r1
 8006074:	f000 8109 	beq.w	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006078:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 800607c:	4308      	orrs	r0, r1
 800607e:	d120      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006080:	4a95      	ldr	r2, [pc, #596]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006082:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006084:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8006088:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800608c:	f000 80aa 	beq.w	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8006090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006094:	f000 8116 	beq.w	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8006098:	b99b      	cbnz	r3, 80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800609a:	6810      	ldr	r0, [r2, #0]
 800609c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80060a0:	d047      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 80060a2:	488e      	ldr	r0, [pc, #568]	@ (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
  return frequency;
 80060a4:	e045      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80060a6:	4a8c      	ldr	r2, [pc, #560]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060a8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80060aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 80060ae:	2b80      	cmp	r3, #128	@ 0x80
 80060b0:	f000 8093 	beq.w	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80060b4:	f240 808b 	bls.w	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80060b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80060ba:	d039      	beq.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80060bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060c0:	d05c      	beq.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
          frequency = 0;
 80060c2:	2000      	movs	r0, #0
}
 80060c4:	b005      	add	sp, #20
 80060c6:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80060ca:	4b83      	ldr	r3, [pc, #524]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ce:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d8f5      	bhi.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80060d6:	e8df f003 	tbb	[pc, r3]
 80060da:	3c68      	.short	0x3c68
 80060dc:	2b46      	.short	0x2b46
 80060de:	50          	.byte	0x50
 80060df:	00          	.byte	0x00
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80060e0:	4a7d      	ldr	r2, [pc, #500]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060e2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80060e4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 80060e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060ec:	d075      	beq.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80060ee:	d96e      	bls.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80060f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80060f4:	d01c      	beq.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80060f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060fa:	d1e2      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060fc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060fe:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006100:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006104:	0752      	lsls	r2, r2, #29
 8006106:	d541      	bpl.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d13f      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800610c:	4b72      	ldr	r3, [pc, #456]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800610e:	4874      	ldr	r0, [pc, #464]	@ (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006116:	40d8      	lsrs	r0, r3
 8006118:	e00b      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800611a:	4a6f      	ldr	r2, [pc, #444]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800611c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800611e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 8006122:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006126:	d058      	beq.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8006128:	d951      	bls.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800612a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800612e:	d15e      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006130:	486c      	ldr	r0, [pc, #432]	@ (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8006132:	b005      	add	sp, #20
 8006134:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006138:	4a67      	ldr	r2, [pc, #412]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800613a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800613c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8006140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006144:	f000 80df 	beq.w	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 8006148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800614c:	d0d6      	beq.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1b7      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006152:	4b61      	ldr	r3, [pc, #388]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006154:	6818      	ldr	r0, [r3, #0]
 8006156:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800615a:	d0ea      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800615c:	a801      	add	r0, sp, #4
 800615e:	f7ff fd93 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006162:	9801      	ldr	r0, [sp, #4]
 8006164:	e7e5      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006166:	4b5c      	ldr	r3, [pc, #368]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800616e:	d0e0      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006170:	a801      	add	r0, sp, #4
 8006172:	f7ff fe23 	bl	8005dbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006176:	9801      	ldr	r0, [sp, #4]
 8006178:	e7db      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800617a:	4a57      	ldr	r2, [pc, #348]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800617c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800617e:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006180:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006184:	0749      	lsls	r1, r1, #29
 8006186:	d501      	bpl.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d038      	beq.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800618c:	4a52      	ldr	r2, [pc, #328]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	05d0      	lsls	r0, r2, #23
 8006192:	d502      	bpl.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8006194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006198:	d067      	beq.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800619a:	4a4f      	ldr	r2, [pc, #316]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	0391      	lsls	r1, r2, #14
 80061a0:	d58f      	bpl.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80061a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061a6:	d18c      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80061a8:	e77b      	b.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061aa:	4b4b      	ldr	r3, [pc, #300]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80061b2:	d0be      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061b4:	a801      	add	r0, sp, #4
 80061b6:	f7ff fe9b 	bl	8005ef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061ba:	9802      	ldr	r0, [sp, #8]
 80061bc:	e7b9      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80061be:	4a46      	ldr	r2, [pc, #280]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061c0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80061c2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 80061c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ca:	d006      	beq.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80061cc:	d81d      	bhi.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80061ce:	b14b      	cbz	r3, 80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061d0:	6810      	ldr	r0, [r2, #0]
 80061d2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80061d6:	d0ac      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80061d8:	e7c0      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061da:	6810      	ldr	r0, [r2, #0]
 80061dc:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80061e0:	d0a7      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80061e2:	e7c5      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061e4:	6810      	ldr	r0, [r2, #0]
 80061e6:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80061ea:	d0a2      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80061ec:	e7e2      	b.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
    switch (saiclocksource)
 80061ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061f2:	d0c3      	beq.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80061f4:	e765      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061f6:	6810      	ldr	r0, [r2, #0]
 80061f8:	f010 0004 	ands.w	r0, r0, #4
 80061fc:	d099      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061fe:	6813      	ldr	r3, [r2, #0]
 8006200:	4837      	ldr	r0, [pc, #220]	@ (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006202:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006206:	40d8      	lsrs	r0, r3
 8006208:	e793      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800620a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800620e:	d08f      	beq.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006214:	f43f af72 	beq.w	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006218:	e753      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800621a:	4b2f      	ldr	r3, [pc, #188]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800621c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 800621e:	03d2      	lsls	r2, r2, #15
 8006220:	d5c4      	bpl.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006228:	d083      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800622a:	a801      	add	r0, sp, #4
 800622c:	f7ff fd2c 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006230:	9803      	ldr	r0, [sp, #12]
 8006232:	e77e      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006234:	4a28      	ldr	r2, [pc, #160]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006236:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8006238:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 800623c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006240:	d0d9      	beq.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8006242:	d814      	bhi.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006248:	d03c      	beq.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800624a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800624e:	d04f      	beq.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8006250:	2b00      	cmp	r3, #0
 8006252:	f47f af36 	bne.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
}
 8006256:	b005      	add	sp, #20
 8006258:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800625c:	f7fe bca8 	b.w	8004bb0 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006260:	6810      	ldr	r0, [r2, #0]
 8006262:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8006266:	f43f af64 	beq.w	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 800626a:	481f      	ldr	r0, [pc, #124]	@ (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800626c:	e761      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800626e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006272:	d0f5      	beq.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8006274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006278:	f47f af23 	bne.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800627c:	4b16      	ldr	r3, [pc, #88]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8006284:	f43f af55 	beq.w	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006288:	e70b      	b.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800628a:	4b13      	ldr	r3, [pc, #76]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800628c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8006292:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006296:	d04e      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8006298:	d83f      	bhi.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800629a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800629e:	d043      	beq.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80062a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a4:	d024      	beq.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f47f af0b 	bne.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80062ac:	f7fe fc40 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 80062b0:	4b09      	ldr	r3, [pc, #36]	@ (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062b2:	4a0e      	ldr	r2, [pc, #56]	@ (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80062ba:	5cd3      	ldrb	r3, [r2, r3]
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	40d8      	lsrs	r0, r3
        break;
 80062c2:	e736      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062c4:	6810      	ldr	r0, [r2, #0]
 80062c6:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80062ca:	f43f af32 	beq.w	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062ce:	a801      	add	r0, sp, #4
 80062d0:	f7ff fcda 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062d4:	9802      	ldr	r0, [sp, #8]
 80062d6:	e72c      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80062d8:	58024400 	.word	0x58024400
 80062dc:	017d7840 	.word	0x017d7840
 80062e0:	03d09000 	.word	0x03d09000
 80062e4:	00bb8000 	.word	0x00bb8000
 80062e8:	003d0900 	.word	0x003d0900
 80062ec:	0806b624 	.word	0x0806b624
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062f0:	4b1a      	ldr	r3, [pc, #104]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80062f8:	f43f af1b 	beq.w	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062fc:	a801      	add	r0, sp, #4
 80062fe:	f7ff fd5d 	bl	8005dbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006302:	9802      	ldr	r0, [sp, #8]
 8006304:	e715      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006306:	6810      	ldr	r0, [r2, #0]
 8006308:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800630c:	f43f af11 	beq.w	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006310:	a801      	add	r0, sp, #4
 8006312:	f7ff fd53 	bl	8005dbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006316:	9803      	ldr	r0, [sp, #12]
 8006318:	e70b      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800631a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800631e:	d016      	beq.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006320:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006324:	d0aa      	beq.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006326:	e6cc      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006328:	4b0c      	ldr	r3, [pc, #48]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8006330:	f43f aeff 	beq.w	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006334:	e7cb      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006336:	4b09      	ldr	r3, [pc, #36]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	f010 0004 	ands.w	r0, r0, #4
 800633e:	f43f aef8 	beq.w	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4806      	ldr	r0, [pc, #24]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8006346:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800634a:	40d8      	lsrs	r0, r3
 800634c:	e6f1      	b.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800634e:	4b03      	ldr	r3, [pc, #12]	@ (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8006356:	f43f aeec 	beq.w	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800635a:	e786      	b.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 800635c:	58024400 	.word	0x58024400
 8006360:	03d09000 	.word	0x03d09000

08006364 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006364:	2800      	cmp	r0, #0
 8006366:	f000 8095 	beq.w	8006494 <HAL_TIM_Base_Init+0x130>
{
 800636a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800636c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006370:	4604      	mov	r4, r0
 8006372:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8087 	beq.w	800648a <HAL_TIM_Base_Init+0x126>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800637c:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800637e:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006380:	4945      	ldr	r1, [pc, #276]	@ (8006498 <HAL_TIM_Base_Init+0x134>)
 8006382:	4d46      	ldr	r5, [pc, #280]	@ (800649c <HAL_TIM_Base_Init+0x138>)
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006388:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800638c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006390:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 8006394:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006396:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800639a:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800639c:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063a0:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a2:	ea4f 1151 	mov.w	r1, r1, lsr #5

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a6:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80063ac:	d01f      	beq.n	80063ee <HAL_TIM_Base_Init+0x8a>
 80063ae:	b9f1      	cbnz	r1, 80063ee <HAL_TIM_Base_Init+0x8a>
 80063b0:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 80064ac <HAL_TIM_Base_Init+0x148>
 80063b4:	4563      	cmp	r3, ip
 80063b6:	d050      	beq.n	800645a <HAL_TIM_Base_Init+0xf6>
 80063b8:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80063bc:	4563      	cmp	r3, ip
 80063be:	d04c      	beq.n	800645a <HAL_TIM_Base_Init+0xf6>
 80063c0:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80063c4:	4563      	cmp	r3, ip
 80063c6:	d012      	beq.n	80063ee <HAL_TIM_Base_Init+0x8a>
 80063c8:	f1be 0f00 	cmp.w	lr, #0
 80063cc:	d10f      	bne.n	80063ee <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ce:	4d34      	ldr	r5, [pc, #208]	@ (80064a0 <HAL_TIM_Base_Init+0x13c>)
 80063d0:	4934      	ldr	r1, [pc, #208]	@ (80064a4 <HAL_TIM_Base_Init+0x140>)
 80063d2:	428b      	cmp	r3, r1
 80063d4:	bf18      	it	ne
 80063d6:	42ab      	cmpne	r3, r5
 80063d8:	d043      	beq.n	8006462 <HAL_TIM_Base_Init+0xfe>
 80063da:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80063de:	428b      	cmp	r3, r1
 80063e0:	d03f      	beq.n	8006462 <HAL_TIM_Base_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e6:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063e8:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ea:	4310      	orrs	r0, r2

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063ec:	e014      	b.n	8006418 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 80063ee:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063f4:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 80063f8:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063fa:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063fc:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 80063fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006402:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006406:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800640a:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800640c:	b911      	cbnz	r1, 8006414 <HAL_TIM_Base_Init+0xb0>
 800640e:	f1be 0f00 	cmp.w	lr, #0
 8006412:	d02f      	beq.n	8006474 <HAL_TIM_Base_Init+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006414:	6962      	ldr	r2, [r4, #20]
 8006416:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006418:	6819      	ldr	r1, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800641a:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800641c:	f041 0104 	orr.w	r1, r1, #4
 8006420:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8006422:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006424:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8006426:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006428:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800642c:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8006430:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8006434:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 8006438:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 800643c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8006440:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006444:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8006448:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 800644c:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 8006450:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006454:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 8006458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800645e:	68a1      	ldr	r1, [r4, #8]
 8006460:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006462:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006464:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006468:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800646a:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800646c:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800646e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006472:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006474:	490c      	ldr	r1, [pc, #48]	@ (80064a8 <HAL_TIM_Base_Init+0x144>)
 8006476:	4a0a      	ldr	r2, [pc, #40]	@ (80064a0 <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006478:	4293      	cmp	r3, r2
 800647a:	bf18      	it	ne
 800647c:	428b      	cmpne	r3, r1
 800647e:	d0c9      	beq.n	8006414 <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006480:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006484:	4293      	cmp	r3, r2
 8006486:	d0c5      	beq.n	8006414 <HAL_TIM_Base_Init+0xb0>
 8006488:	e7c6      	b.n	8006418 <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 800648a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800648e:	f7fa fe9d 	bl	80011cc <HAL_TIM_Base_MspInit>
 8006492:	e773      	b.n	800637c <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8006494:	2001      	movs	r0, #1
}
 8006496:	4770      	bx	lr
 8006498:	40010000 	.word	0x40010000
 800649c:	40010400 	.word	0x40010400
 80064a0:	40014000 	.word	0x40014000
 80064a4:	40014400 	.word	0x40014400
 80064a8:	40014800 	.word	0x40014800
 80064ac:	40000400 	.word	0x40000400

080064b0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80064b0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d139      	bne.n	800652c <HAL_TIM_Base_Start+0x7c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b8:	6802      	ldr	r2, [r0, #0]
 80064ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006530 <HAL_TIM_Base_Start+0x80>)
 80064bc:	491d      	ldr	r1, [pc, #116]	@ (8006534 <HAL_TIM_Base_Start+0x84>)
 80064be:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80064c2:	bf18      	it	ne
 80064c4:	429a      	cmpne	r2, r3
{
 80064c6:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c8:	bf0c      	ite	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	2300      	movne	r3, #0
 80064ce:	4d1a      	ldr	r5, [pc, #104]	@ (8006538 <HAL_TIM_Base_Start+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d2:	42aa      	cmp	r2, r5
 80064d4:	bf08      	it	eq
 80064d6:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80064da:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064de:	4c17      	ldr	r4, [pc, #92]	@ (800653c <HAL_TIM_Base_Start+0x8c>)
 80064e0:	428a      	cmp	r2, r1
 80064e2:	bf08      	it	eq
 80064e4:	f043 0301 	orreq.w	r3, r3, #1
 80064e8:	4815      	ldr	r0, [pc, #84]	@ (8006540 <HAL_TIM_Base_Start+0x90>)
 80064ea:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80064ee:	42a2      	cmp	r2, r4
 80064f0:	bf08      	it	eq
 80064f2:	f043 0301 	orreq.w	r3, r3, #1
 80064f6:	4282      	cmp	r2, r0
 80064f8:	bf08      	it	eq
 80064fa:	f043 0301 	orreq.w	r3, r3, #1
 80064fe:	428a      	cmp	r2, r1
 8006500:	bf08      	it	eq
 8006502:	f043 0301 	orreq.w	r3, r3, #1
 8006506:	b913      	cbnz	r3, 800650e <HAL_TIM_Base_Start+0x5e>
 8006508:	4b0e      	ldr	r3, [pc, #56]	@ (8006544 <HAL_TIM_Base_Start+0x94>)
 800650a:	429a      	cmp	r2, r3
 800650c:	d107      	bne.n	800651e <HAL_TIM_Base_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800650e:	6891      	ldr	r1, [r2, #8]
 8006510:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <HAL_TIM_Base_Start+0x98>)
 8006512:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006514:	2b06      	cmp	r3, #6
 8006516:	d006      	beq.n	8006526 <HAL_TIM_Base_Start+0x76>
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651c:	d003      	beq.n	8006526 <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006526:	2000      	movs	r0, #0
}
 8006528:	bc30      	pop	{r4, r5}
 800652a:	4770      	bx	lr
    return HAL_ERROR;
 800652c:	2001      	movs	r0, #1
}
 800652e:	4770      	bx	lr
 8006530:	40010000 	.word	0x40010000
 8006534:	40000800 	.word	0x40000800
 8006538:	40000400 	.word	0x40000400
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40010400 	.word	0x40010400
 8006544:	40014000 	.word	0x40014000
 8006548:	00010007 	.word	0x00010007

0800654c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800654c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006550:	2a01      	cmp	r2, #1
 8006552:	d06d      	beq.n	8006630 <HAL_TIM_ConfigClockSource+0xe4>
  tmpsmcr = htim->Instance->SMCR;
 8006554:	6802      	ldr	r2, [r0, #0]
 8006556:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006558:	2001      	movs	r0, #1
{
 800655a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800655c:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 800655e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006562:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006566:	4c59      	ldr	r4, [pc, #356]	@ (80066cc <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 8006568:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800656a:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 800656c:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800656e:	680c      	ldr	r4, [r1, #0]
 8006570:	2c70      	cmp	r4, #112	@ 0x70
 8006572:	f000 8087 	beq.w	8006684 <HAL_TIM_ConfigClockSource+0x138>
 8006576:	d825      	bhi.n	80065c4 <HAL_TIM_ConfigClockSource+0x78>
 8006578:	2c50      	cmp	r4, #80	@ 0x50
 800657a:	d05b      	beq.n	8006634 <HAL_TIM_ConfigClockSource+0xe8>
 800657c:	d82b      	bhi.n	80065d6 <HAL_TIM_ConfigClockSource+0x8a>
 800657e:	2c40      	cmp	r4, #64	@ 0x40
 8006580:	f040 8090 	bne.w	80066a4 <HAL_TIM_ConfigClockSource+0x158>
                               sClockSourceConfig->ClockPolarity,
 8006584:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006586:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006588:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800658a:	6a10      	ldr	r0, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800658c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006590:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8006594:	430c      	orrs	r4, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006596:	494e      	ldr	r1, [pc, #312]	@ (80066d0 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006598:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800659a:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800659c:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065a0:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80065a4:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80065a6:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80065a8:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80065aa:	4001      	ands	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ac:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065b0:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80065b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80065b4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80065b6:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80065b8:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80065c0:	bc30      	pop	{r4, r5}
 80065c2:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80065c4:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80065c8:	d04c      	beq.n	8006664 <HAL_TIM_ConfigClockSource+0x118>
 80065ca:	d81f      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0xc0>
 80065cc:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 80065d0:	bf18      	it	ne
 80065d2:	2001      	movne	r0, #1
 80065d4:	e7ee      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x68>
 80065d6:	2c60      	cmp	r4, #96	@ 0x60
 80065d8:	d1ec      	bne.n	80065b4 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 80065da:	6a10      	ldr	r0, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 80065dc:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065de:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
                               sClockSourceConfig->ClockFilter);
 80065e2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 80065e4:	493a      	ldr	r1, [pc, #232]	@ (80066d0 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccer |= (TIM_ICPolarity << 4U);
 80065e6:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ea:	6a14      	ldr	r4, [r2, #32]
 80065ec:	f024 0410 	bic.w	r4, r4, #16
 80065f0:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f2:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065f4:	f424 4470 	bic.w	r4, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065f8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80065fc:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 80065fe:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006600:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006602:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006604:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006608:	6091      	str	r1, [r2, #8]
}
 800660a:	e7d2      	b.n	80065b2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800660c:	4931      	ldr	r1, [pc, #196]	@ (80066d4 <HAL_TIM_ConfigClockSource+0x188>)
 800660e:	428c      	cmp	r4, r1
 8006610:	d006      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0xd4>
 8006612:	d94f      	bls.n	80066b4 <HAL_TIM_ConfigClockSource+0x168>
 8006614:	4930      	ldr	r1, [pc, #192]	@ (80066d8 <HAL_TIM_ConfigClockSource+0x18c>)
 8006616:	428c      	cmp	r4, r1
 8006618:	d002      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0xd4>
 800661a:	3110      	adds	r1, #16
 800661c:	428c      	cmp	r4, r1
 800661e:	d1c9      	bne.n	80065b4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8006620:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006622:	492b      	ldr	r1, [pc, #172]	@ (80066d0 <HAL_TIM_ConfigClockSource+0x184>)
 8006624:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006626:	4321      	orrs	r1, r4
 8006628:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 800662c:	6091      	str	r1, [r2, #8]
}
 800662e:	e7c0      	b.n	80065b2 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8006630:	2002      	movs	r0, #2
}
 8006632:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8006634:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006636:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006638:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663a:	6a10      	ldr	r0, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800663c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006640:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8006644:	430c      	orrs	r4, r1
  tmpsmcr &= ~TIM_SMCR_TS;
 8006646:	4922      	ldr	r1, [pc, #136]	@ (80066d0 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006648:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800664a:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800664c:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006650:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006654:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006656:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006658:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800665a:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800665c:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8006660:	6091      	str	r1, [r2, #8]
}
 8006662:	e7a6      	b.n	80065b2 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006664:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006668:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800666a:	4328      	orrs	r0, r5
 800666c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800666e:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006672:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006676:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006678:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800667a:	6891      	ldr	r1, [r2, #8]
 800667c:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8006680:	6091      	str	r1, [r2, #8]
      break;
 8006682:	e796      	b.n	80065b2 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006684:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006688:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800668a:	4328      	orrs	r0, r5
 800668c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800668e:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006692:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006696:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8006698:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800669a:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669c:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80066a0:	6091      	str	r1, [r2, #8]
      break;
 80066a2:	e786      	b.n	80065b2 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80066a4:	d886      	bhi.n	80065b4 <HAL_TIM_ConfigClockSource+0x68>
 80066a6:	2c20      	cmp	r4, #32
 80066a8:	d0ba      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0xd4>
 80066aa:	d80a      	bhi.n	80066c2 <HAL_TIM_ConfigClockSource+0x176>
 80066ac:	f034 0110 	bics.w	r1, r4, #16
 80066b0:	d180      	bne.n	80065b4 <HAL_TIM_ConfigClockSource+0x68>
 80066b2:	e7b5      	b.n	8006620 <HAL_TIM_ConfigClockSource+0xd4>
 80066b4:	f024 0110 	bic.w	r1, r4, #16
 80066b8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80066bc:	f47f af7a 	bne.w	80065b4 <HAL_TIM_ConfigClockSource+0x68>
 80066c0:	e7ae      	b.n	8006620 <HAL_TIM_ConfigClockSource+0xd4>
 80066c2:	2c30      	cmp	r4, #48	@ 0x30
 80066c4:	d0ac      	beq.n	8006620 <HAL_TIM_ConfigClockSource+0xd4>
      status = HAL_ERROR;
 80066c6:	2001      	movs	r0, #1
 80066c8:	e774      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x68>
 80066ca:	bf00      	nop
 80066cc:	ffce0088 	.word	0xffce0088
 80066d0:	ffcfff8f 	.word	0xffcfff8f
 80066d4:	00100020 	.word	0x00100020
 80066d8:	00100030 	.word	0x00100030

080066dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066dc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d04b      	beq.n	800677c <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e4:	6803      	ldr	r3, [r0, #0]
 80066e6:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80066e8:	2002      	movs	r0, #2
{
 80066ea:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066ec:	4d24      	ldr	r5, [pc, #144]	@ (8006780 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80066ee:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066f2:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80066f4:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80066f6:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066f8:	d029      	beq.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80066fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80066fe:	42ab      	cmp	r3, r5
 8006700:	d025      	beq.n	800674e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006702:	4d20      	ldr	r5, [pc, #128]	@ (8006784 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8006704:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006708:	42ab      	cmp	r3, r5
 800670a:	bf18      	it	ne
 800670c:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8006710:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006714:	bf0c      	ite	eq
 8006716:	f04f 0c01 	moveq.w	ip, #1
 800671a:	f04f 0c00 	movne.w	ip, #0
 800671e:	42ab      	cmp	r3, r5
 8006720:	bf08      	it	eq
 8006722:	f04c 0c01 	orreq.w	ip, ip, #1
 8006726:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800672a:	42ab      	cmp	r3, r5
 800672c:	bf08      	it	eq
 800672e:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006732:	680d      	ldr	r5, [r1, #0]
 8006734:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006736:	4d14      	ldr	r5, [pc, #80]	@ (8006788 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8006738:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800673a:	42ab      	cmp	r3, r5
 800673c:	bf14      	ite	ne
 800673e:	4660      	movne	r0, ip
 8006740:	f04c 0001 	orreq.w	r0, ip, #1
 8006744:	b960      	cbnz	r0, 8006760 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006746:	4811      	ldr	r0, [pc, #68]	@ (800678c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006748:	4283      	cmp	r3, r0
 800674a:	d009      	beq.n	8006760 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800674c:	e00d      	b.n	800676a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800674e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006750:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006754:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006756:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006758:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800675c:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800675e:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006760:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006762:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006766:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006768:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800676a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800676c:	2101      	movs	r1, #1

  return HAL_OK;
 800676e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8006770:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006774:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8006778:	bc30      	pop	{r4, r5}
 800677a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800677c:	2002      	movs	r0, #2
}
 800677e:	4770      	bx	lr
 8006780:	40010000 	.word	0x40010000
 8006784:	40000400 	.word	0x40000400
 8006788:	40001800 	.word	0x40001800
 800678c:	40014000 	.word	0x40014000

08006790 <arm_fill_f32>:
 8006790:	b410      	push	{r4}
 8006792:	088c      	lsrs	r4, r1, #2
 8006794:	d010      	beq.n	80067b8 <arm_fill_f32+0x28>
 8006796:	f100 0310 	add.w	r3, r0, #16
 800679a:	4622      	mov	r2, r4
 800679c:	3a01      	subs	r2, #1
 800679e:	ed03 0a04 	vstr	s0, [r3, #-16]
 80067a2:	ed03 0a03 	vstr	s0, [r3, #-12]
 80067a6:	f103 0310 	add.w	r3, r3, #16
 80067aa:	ed03 0a06 	vstr	s0, [r3, #-24]	@ 0xffffffe8
 80067ae:	ed03 0a05 	vstr	s0, [r3, #-20]	@ 0xffffffec
 80067b2:	d1f3      	bne.n	800679c <arm_fill_f32+0xc>
 80067b4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80067b8:	f011 0103 	ands.w	r1, r1, #3
 80067bc:	d003      	beq.n	80067c6 <arm_fill_f32+0x36>
 80067be:	3901      	subs	r1, #1
 80067c0:	eca0 0a01 	vstmia	r0!, {s0}
 80067c4:	d1fb      	bne.n	80067be <arm_fill_f32+0x2e>
 80067c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <arm_copy_f32>:
 80067cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80067d4:	d01e      	beq.n	8006814 <arm_copy_f32+0x48>
 80067d6:	f100 0410 	add.w	r4, r0, #16
 80067da:	f101 0310 	add.w	r3, r1, #16
 80067de:	4645      	mov	r5, r8
 80067e0:	f854 cc10 	ldr.w	ip, [r4, #-16]
 80067e4:	3d01      	subs	r5, #1
 80067e6:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 80067ea:	f103 0310 	add.w	r3, r3, #16
 80067ee:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80067f2:	f104 0410 	add.w	r4, r4, #16
 80067f6:	f854 6c14 	ldr.w	r6, [r4, #-20]
 80067fa:	f843 cc20 	str.w	ip, [r3, #-32]
 80067fe:	f843 ec1c 	str.w	lr, [r3, #-28]
 8006802:	f843 7c18 	str.w	r7, [r3, #-24]
 8006806:	f843 6c14 	str.w	r6, [r3, #-20]
 800680a:	d1e9      	bne.n	80067e0 <arm_copy_f32+0x14>
 800680c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8006810:	4440      	add	r0, r8
 8006812:	4441      	add	r1, r8
 8006814:	f012 0203 	ands.w	r2, r2, #3
 8006818:	d005      	beq.n	8006826 <arm_copy_f32+0x5a>
 800681a:	f850 3b04 	ldr.w	r3, [r0], #4
 800681e:	3a01      	subs	r2, #1
 8006820:	f841 3b04 	str.w	r3, [r1], #4
 8006824:	d1f9      	bne.n	800681a <arm_copy_f32+0x4e>
 8006826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800682a:	bf00      	nop

0800682c <arm_rfft_fast_init_f32>:
 800682c:	084b      	lsrs	r3, r1, #1
 800682e:	2b80      	cmp	r3, #128	@ 0x80
 8006830:	b430      	push	{r4, r5}
 8006832:	8201      	strh	r1, [r0, #16]
 8006834:	8003      	strh	r3, [r0, #0]
 8006836:	d06f      	beq.n	8006918 <arm_rfft_fast_init_f32+0xec>
 8006838:	d916      	bls.n	8006868 <arm_rfft_fast_init_f32+0x3c>
 800683a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800683e:	d05e      	beq.n	80068fe <arm_rfft_fast_init_f32+0xd2>
 8006840:	d935      	bls.n	80068ae <arm_rfft_fast_init_f32+0x82>
 8006842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006846:	d025      	beq.n	8006894 <arm_rfft_fast_init_f32+0x68>
 8006848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800684c:	d112      	bne.n	8006874 <arm_rfft_fast_init_f32+0x48>
 800684e:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 8006852:	4c37      	ldr	r4, [pc, #220]	@ (8006930 <arm_rfft_fast_init_f32+0x104>)
 8006854:	4937      	ldr	r1, [pc, #220]	@ (8006934 <arm_rfft_fast_init_f32+0x108>)
 8006856:	2300      	movs	r3, #0
 8006858:	4a37      	ldr	r2, [pc, #220]	@ (8006938 <arm_rfft_fast_init_f32+0x10c>)
 800685a:	8185      	strh	r5, [r0, #12]
 800685c:	6084      	str	r4, [r0, #8]
 800685e:	6041      	str	r1, [r0, #4]
 8006860:	6142      	str	r2, [r0, #20]
 8006862:	b258      	sxtb	r0, r3
 8006864:	bc30      	pop	{r4, r5}
 8006866:	4770      	bx	lr
 8006868:	2b20      	cmp	r3, #32
 800686a:	d030      	beq.n	80068ce <arm_rfft_fast_init_f32+0xa2>
 800686c:	2b40      	cmp	r3, #64	@ 0x40
 800686e:	d005      	beq.n	800687c <arm_rfft_fast_init_f32+0x50>
 8006870:	2b10      	cmp	r3, #16
 8006872:	d038      	beq.n	80068e6 <arm_rfft_fast_init_f32+0xba>
 8006874:	23ff      	movs	r3, #255	@ 0xff
 8006876:	bc30      	pop	{r4, r5}
 8006878:	b258      	sxtb	r0, r3
 800687a:	4770      	bx	lr
 800687c:	2538      	movs	r5, #56	@ 0x38
 800687e:	4c2f      	ldr	r4, [pc, #188]	@ (800693c <arm_rfft_fast_init_f32+0x110>)
 8006880:	492f      	ldr	r1, [pc, #188]	@ (8006940 <arm_rfft_fast_init_f32+0x114>)
 8006882:	2300      	movs	r3, #0
 8006884:	4a2f      	ldr	r2, [pc, #188]	@ (8006944 <arm_rfft_fast_init_f32+0x118>)
 8006886:	8185      	strh	r5, [r0, #12]
 8006888:	6084      	str	r4, [r0, #8]
 800688a:	6041      	str	r1, [r0, #4]
 800688c:	6142      	str	r2, [r0, #20]
 800688e:	b258      	sxtb	r0, r3
 8006890:	bc30      	pop	{r4, r5}
 8006892:	4770      	bx	lr
 8006894:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 8006898:	4c2b      	ldr	r4, [pc, #172]	@ (8006948 <arm_rfft_fast_init_f32+0x11c>)
 800689a:	492c      	ldr	r1, [pc, #176]	@ (800694c <arm_rfft_fast_init_f32+0x120>)
 800689c:	2300      	movs	r3, #0
 800689e:	4a2c      	ldr	r2, [pc, #176]	@ (8006950 <arm_rfft_fast_init_f32+0x124>)
 80068a0:	8185      	strh	r5, [r0, #12]
 80068a2:	6084      	str	r4, [r0, #8]
 80068a4:	6041      	str	r1, [r0, #4]
 80068a6:	6142      	str	r2, [r0, #20]
 80068a8:	b258      	sxtb	r0, r3
 80068aa:	bc30      	pop	{r4, r5}
 80068ac:	4770      	bx	lr
 80068ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068b2:	d1df      	bne.n	8006874 <arm_rfft_fast_init_f32+0x48>
 80068b4:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 80068b8:	4c26      	ldr	r4, [pc, #152]	@ (8006954 <arm_rfft_fast_init_f32+0x128>)
 80068ba:	4927      	ldr	r1, [pc, #156]	@ (8006958 <arm_rfft_fast_init_f32+0x12c>)
 80068bc:	2300      	movs	r3, #0
 80068be:	4a27      	ldr	r2, [pc, #156]	@ (800695c <arm_rfft_fast_init_f32+0x130>)
 80068c0:	8185      	strh	r5, [r0, #12]
 80068c2:	6084      	str	r4, [r0, #8]
 80068c4:	6041      	str	r1, [r0, #4]
 80068c6:	6142      	str	r2, [r0, #20]
 80068c8:	b258      	sxtb	r0, r3
 80068ca:	bc30      	pop	{r4, r5}
 80068cc:	4770      	bx	lr
 80068ce:	2530      	movs	r5, #48	@ 0x30
 80068d0:	4c23      	ldr	r4, [pc, #140]	@ (8006960 <arm_rfft_fast_init_f32+0x134>)
 80068d2:	4924      	ldr	r1, [pc, #144]	@ (8006964 <arm_rfft_fast_init_f32+0x138>)
 80068d4:	2300      	movs	r3, #0
 80068d6:	4a24      	ldr	r2, [pc, #144]	@ (8006968 <arm_rfft_fast_init_f32+0x13c>)
 80068d8:	8185      	strh	r5, [r0, #12]
 80068da:	6084      	str	r4, [r0, #8]
 80068dc:	6041      	str	r1, [r0, #4]
 80068de:	6142      	str	r2, [r0, #20]
 80068e0:	b258      	sxtb	r0, r3
 80068e2:	bc30      	pop	{r4, r5}
 80068e4:	4770      	bx	lr
 80068e6:	2514      	movs	r5, #20
 80068e8:	4c20      	ldr	r4, [pc, #128]	@ (800696c <arm_rfft_fast_init_f32+0x140>)
 80068ea:	4921      	ldr	r1, [pc, #132]	@ (8006970 <arm_rfft_fast_init_f32+0x144>)
 80068ec:	2300      	movs	r3, #0
 80068ee:	4a21      	ldr	r2, [pc, #132]	@ (8006974 <arm_rfft_fast_init_f32+0x148>)
 80068f0:	8185      	strh	r5, [r0, #12]
 80068f2:	6084      	str	r4, [r0, #8]
 80068f4:	6041      	str	r1, [r0, #4]
 80068f6:	6142      	str	r2, [r0, #20]
 80068f8:	b258      	sxtb	r0, r3
 80068fa:	bc30      	pop	{r4, r5}
 80068fc:	4770      	bx	lr
 80068fe:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 8006902:	4c1d      	ldr	r4, [pc, #116]	@ (8006978 <arm_rfft_fast_init_f32+0x14c>)
 8006904:	491d      	ldr	r1, [pc, #116]	@ (800697c <arm_rfft_fast_init_f32+0x150>)
 8006906:	2300      	movs	r3, #0
 8006908:	4a1d      	ldr	r2, [pc, #116]	@ (8006980 <arm_rfft_fast_init_f32+0x154>)
 800690a:	8185      	strh	r5, [r0, #12]
 800690c:	6084      	str	r4, [r0, #8]
 800690e:	6041      	str	r1, [r0, #4]
 8006910:	6142      	str	r2, [r0, #20]
 8006912:	b258      	sxtb	r0, r3
 8006914:	bc30      	pop	{r4, r5}
 8006916:	4770      	bx	lr
 8006918:	25d0      	movs	r5, #208	@ 0xd0
 800691a:	4c1a      	ldr	r4, [pc, #104]	@ (8006984 <arm_rfft_fast_init_f32+0x158>)
 800691c:	491a      	ldr	r1, [pc, #104]	@ (8006988 <arm_rfft_fast_init_f32+0x15c>)
 800691e:	2300      	movs	r3, #0
 8006920:	4a1a      	ldr	r2, [pc, #104]	@ (800698c <arm_rfft_fast_init_f32+0x160>)
 8006922:	8185      	strh	r5, [r0, #12]
 8006924:	6084      	str	r4, [r0, #8]
 8006926:	6041      	str	r1, [r0, #4]
 8006928:	6142      	str	r2, [r0, #20]
 800692a:	b258      	sxtb	r0, r3
 800692c:	bc30      	pop	{r4, r5}
 800692e:	4770      	bx	lr
 8006930:	0807a444 	.word	0x0807a444
 8006934:	0806b63c 	.word	0x0806b63c
 8006938:	080717ac 	.word	0x080717ac
 800693c:	0806f73c 	.word	0x0806f73c
 8006940:	0807c204 	.word	0x0807c204
 8006944:	0807e6f4 	.word	0x0807e6f4
 8006948:	0807812c 	.word	0x0807812c
 800694c:	0807602c 	.word	0x0807602c
 8006950:	0806f7ac 	.word	0x0806f7ac
 8006954:	0807e384 	.word	0x0807e384
 8006958:	080757ac 	.word	0x080757ac
 800695c:	0807c404 	.word	0x0807c404
 8006960:	08078fe4 	.word	0x08078fe4
 8006964:	0807802c 	.word	0x0807802c
 8006968:	0806f63c 	.word	0x0806f63c
 800696c:	08078f3c 	.word	0x08078f3c
 8006970:	08075fac 	.word	0x08075fac
 8006974:	08078f64 	.word	0x08078f64
 8006978:	0807cc04 	.word	0x0807cc04
 800697c:	08079444 	.word	0x08079444
 8006980:	0807cf84 	.word	0x0807cf84
 8006984:	0807e8f4 	.word	0x0807e8f4
 8006988:	08079044 	.word	0x08079044
 800698c:	0807df84 	.word	0x0807df84

08006990 <arm_rfft_fast_f32>:
 8006990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006994:	8a05      	ldrh	r5, [r0, #16]
 8006996:	4606      	mov	r6, r0
 8006998:	4690      	mov	r8, r2
 800699a:	460c      	mov	r4, r1
 800699c:	086d      	lsrs	r5, r5, #1
 800699e:	8005      	strh	r5, [r0, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d15e      	bne.n	8006a62 <arm_rfft_fast_f32+0xd2>
 80069a4:	461a      	mov	r2, r3
 80069a6:	2301      	movs	r3, #1
 80069a8:	f000 fbe0 	bl	800716c <arm_cfft_f32>
 80069ac:	edd4 7a00 	vldr	s15, [r4]
 80069b0:	ed94 7a01 	vldr	s14, [r4, #4]
 80069b4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80069b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80069bc:	8837      	ldrh	r7, [r6, #0]
 80069be:	ee37 7a07 	vadd.f32	s14, s14, s14
 80069c2:	6975      	ldr	r5, [r6, #20]
 80069c4:	3f01      	subs	r7, #1
 80069c6:	eef0 3a46 	vmov.f32	s7, s12
 80069ca:	3510      	adds	r5, #16
 80069cc:	f108 0610 	add.w	r6, r8, #16
 80069d0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80069d4:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 80069d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069dc:	f104 0310 	add.w	r3, r4, #16
 80069e0:	3808      	subs	r0, #8
 80069e2:	ee26 7a86 	vmul.f32	s14, s13, s12
 80069e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80069ea:	ed88 7a00 	vstr	s14, [r8]
 80069ee:	edc8 7a01 	vstr	s15, [r8, #4]
 80069f2:	edd0 6a02 	vldr	s13, [r0, #8]
 80069f6:	3f01      	subs	r7, #1
 80069f8:	ed13 5a02 	vldr	s10, [r3, #-8]
 80069fc:	f1a0 0008 	sub.w	r0, r0, #8
 8006a00:	ed13 7a01 	vldr	s14, [r3, #-4]
 8006a04:	f105 0508 	add.w	r5, r5, #8
 8006a08:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8006a0c:	ed15 6a04 	vldr	s12, [r5, #-16]
 8006a10:	edd0 5a05 	vldr	s11, [r0, #20]
 8006a14:	ee36 5a85 	vadd.f32	s10, s13, s10
 8006a18:	ed55 6a03 	vldr	s13, [r5, #-12]
 8006a1c:	f103 0308 	add.w	r3, r3, #8
 8006a20:	ee35 4a87 	vadd.f32	s8, s11, s14
 8006a24:	f106 0608 	add.w	r6, r6, #8
 8006a28:	ee66 4a27 	vmul.f32	s9, s12, s15
 8006a2c:	ee77 5a65 	vsub.f32	s11, s14, s11
 8006a30:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8006a34:	ee34 5a85 	vadd.f32	s10, s9, s10
 8006a38:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006a3c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8006a40:	ee77 7a25 	vadd.f32	s15, s14, s11
 8006a44:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006a48:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006a4c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006a50:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006a54:	ed46 6a04 	vstr	s13, [r6, #-16]
 8006a58:	ed46 7a03 	vstr	s15, [r6, #-12]
 8006a5c:	d1c9      	bne.n	80069f2 <arm_rfft_fast_f32+0x62>
 8006a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a62:	edd1 7a00 	vldr	s15, [r1]
 8006a66:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8006a6a:	edd1 6a01 	vldr	s13, [r1, #4]
 8006a6e:	1e68      	subs	r0, r5, #1
 8006a70:	6975      	ldr	r5, [r6, #20]
 8006a72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006a76:	00c1      	lsls	r1, r0, #3
 8006a78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a7c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006a80:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006a84:	ed82 7a00 	vstr	s14, [r2]
 8006a88:	edc2 7a01 	vstr	s15, [r2, #4]
 8006a8c:	b3e0      	cbz	r0, 8006b08 <arm_rfft_fast_f32+0x178>
 8006a8e:	3908      	subs	r1, #8
 8006a90:	f104 0210 	add.w	r2, r4, #16
 8006a94:	3510      	adds	r5, #16
 8006a96:	440c      	add	r4, r1
 8006a98:	f108 0110 	add.w	r1, r8, #16
 8006a9c:	ed94 7a02 	vldr	s14, [r4, #8]
 8006aa0:	3801      	subs	r0, #1
 8006aa2:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006aa6:	f1a4 0408 	sub.w	r4, r4, #8
 8006aaa:	ed15 6a02 	vldr	s12, [r5, #-8]
 8006aae:	f102 0208 	add.w	r2, r2, #8
 8006ab2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8006ab6:	ed94 4a05 	vldr	s8, [r4, #20]
 8006aba:	ed12 5a03 	vldr	s10, [r2, #-12]
 8006abe:	ee77 6a26 	vadd.f32	s13, s14, s13
 8006ac2:	ed55 5a01 	vldr	s11, [r5, #-4]
 8006ac6:	f101 0108 	add.w	r1, r1, #8
 8006aca:	ee26 3a27 	vmul.f32	s6, s12, s15
 8006ace:	f105 0508 	add.w	r5, r5, #8
 8006ad2:	ee74 4a05 	vadd.f32	s9, s8, s10
 8006ad6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8006ada:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006ade:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006ae2:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006ae6:	ee77 7a05 	vadd.f32	s15, s14, s10
 8006aea:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8006aee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006af2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8006af6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006afa:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006afe:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006b02:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006b06:	d1c9      	bne.n	8006a9c <arm_rfft_fast_f32+0x10c>
 8006b08:	4630      	mov	r0, r6
 8006b0a:	4641      	mov	r1, r8
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b14:	f000 bb2a 	b.w	800716c <arm_cfft_f32>

08006b18 <arm_cfft_radix8by2_f32>:
 8006b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1c:	ed2d 8b06 	vpush	{d8-d10}
 8006b20:	f8b0 e000 	ldrh.w	lr, [r0]
 8006b24:	4607      	mov	r7, r0
 8006b26:	6842      	ldr	r2, [r0, #4]
 8006b28:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8006b2c:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8006b30:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8006b34:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8006b38:	f000 80af 	beq.w	8006c9a <arm_cfft_radix8by2_f32+0x182>
 8006b3c:	3310      	adds	r3, #16
 8006b3e:	3210      	adds	r2, #16
 8006b40:	f101 0610 	add.w	r6, r1, #16
 8006b44:	f108 0510 	add.w	r5, r8, #16
 8006b48:	18cc      	adds	r4, r1, r3
 8006b4a:	4443      	add	r3, r8
 8006b4c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8006b50:	f1be 0e01 	subs.w	lr, lr, #1
 8006b54:	ed56 4a04 	vldr	s9, [r6, #-16]
 8006b58:	f104 0410 	add.w	r4, r4, #16
 8006b5c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8006b60:	f106 0610 	add.w	r6, r6, #16
 8006b64:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8006b68:	ed53 0a04 	vldr	s1, [r3, #-16]
 8006b6c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8006b70:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006b74:	ed13 3a02 	vldr	s6, [r3, #-8]
 8006b78:	f102 0210 	add.w	r2, r2, #16
 8006b7c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8006b80:	f103 0310 	add.w	r3, r3, #16
 8006b84:	ed55 2a01 	vldr	s5, [r5, #-4]
 8006b88:	f105 0510 	add.w	r5, r5, #16
 8006b8c:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 8006b90:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 8006b94:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8006b98:	ee33 8a83 	vadd.f32	s16, s7, s6
 8006b9c:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 8006ba0:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 8006ba4:	ee34 0a06 	vadd.f32	s0, s8, s12
 8006ba8:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 8006bac:	ee76 aa87 	vadd.f32	s21, s13, s14
 8006bb0:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 8006bb4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006bb8:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 8006bbc:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8006bc0:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 8006bc4:	ee71 8a05 	vadd.f32	s17, s2, s10
 8006bc8:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8006bcc:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 8006bd0:	ee72 9a22 	vadd.f32	s19, s4, s5
 8006bd4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006bd8:	ee35 5a41 	vsub.f32	s10, s10, s2
 8006bdc:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 8006be0:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 8006be4:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006be8:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 8006bec:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8006bf0:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 8006bf4:	ee72 7a62 	vsub.f32	s15, s4, s5
 8006bf8:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 8006bfc:	ee73 2a63 	vsub.f32	s5, s6, s7
 8006c00:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 8006c04:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8006c08:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8006c0c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8006c10:	ee27 2a26 	vmul.f32	s4, s14, s13
 8006c14:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8006c18:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8006c1c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006c20:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006c24:	ee65 6a26 	vmul.f32	s13, s10, s13
 8006c28:	ee25 5a04 	vmul.f32	s10, s10, s8
 8006c2c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006c30:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8006c34:	ee33 4a02 	vadd.f32	s8, s6, s4
 8006c38:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8006c3c:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 8006c40:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 8006c44:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8006c48:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8006c4c:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 8006c50:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8006c54:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8006c58:	ee27 4a87 	vmul.f32	s8, s15, s14
 8006c5c:	ee61 5a87 	vmul.f32	s11, s3, s14
 8006c60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c64:	ee22 5a87 	vmul.f32	s10, s5, s14
 8006c68:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006c6c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8006c70:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8006c74:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006c78:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006c7c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006c80:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006c84:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 8006c88:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 8006c8c:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 8006c90:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8006c94:	f47f af5a 	bne.w	8006b4c <arm_cfft_radix8by2_f32+0x34>
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	fa1f f48c 	uxth.w	r4, ip
 8006c9e:	4608      	mov	r0, r1
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	f000 fcbe 	bl	8007624 <arm_radix8_butterfly_f32>
 8006ca8:	4640      	mov	r0, r8
 8006caa:	4621      	mov	r1, r4
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	2302      	movs	r3, #2
 8006cb0:	ecbd 8b06 	vpop	{d8-d10}
 8006cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb8:	f000 bcb4 	b.w	8007624 <arm_radix8_butterfly_f32>

08006cbc <arm_cfft_radix8by4_f32>:
 8006cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc0:	ed2d 8b06 	vpush	{d8-d10}
 8006cc4:	8804      	ldrh	r4, [r0, #0]
 8006cc6:	b08f      	sub	sp, #60	@ 0x3c
 8006cc8:	ed91 6a00 	vldr	s12, [r1]
 8006ccc:	460a      	mov	r2, r1
 8006cce:	0864      	lsrs	r4, r4, #1
 8006cd0:	ed91 7a01 	vldr	s14, [r1, #4]
 8006cd4:	9101      	str	r1, [sp, #4]
 8006cd6:	00a3      	lsls	r3, r4, #2
 8006cd8:	9104      	str	r1, [sp, #16]
 8006cda:	0864      	lsrs	r4, r4, #1
 8006cdc:	6841      	ldr	r1, [r0, #4]
 8006cde:	900c      	str	r0, [sp, #48]	@ 0x30
 8006ce0:	4625      	mov	r5, r4
 8006ce2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ce4:	f101 0408 	add.w	r4, r1, #8
 8006ce8:	f101 0610 	add.w	r6, r1, #16
 8006cec:	9406      	str	r4, [sp, #24]
 8006cee:	18d4      	adds	r4, r2, r3
 8006cf0:	1eaa      	subs	r2, r5, #2
 8006cf2:	f101 0518 	add.w	r5, r1, #24
 8006cf6:	18e0      	adds	r0, r4, r3
 8006cf8:	ed94 4a00 	vldr	s8, [r4]
 8006cfc:	edd4 3a01 	vldr	s7, [r4, #4]
 8006d00:	46a6      	mov	lr, r4
 8006d02:	edd0 6a00 	vldr	s13, [r0]
 8006d06:	18c7      	adds	r7, r0, r3
 8006d08:	edd0 7a01 	vldr	s15, [r0, #4]
 8006d0c:	46a0      	mov	r8, r4
 8006d0e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8006d12:	edd7 4a00 	vldr	s9, [r7]
 8006d16:	9402      	str	r4, [sp, #8]
 8006d18:	4604      	mov	r4, r0
 8006d1a:	9507      	str	r5, [sp, #28]
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	ee75 2a84 	vadd.f32	s5, s11, s8
 8006d22:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d24:	9801      	ldr	r0, [sp, #4]
 8006d26:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006d2a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006d2e:	ed97 5a01 	vldr	s10, [r7, #4]
 8006d32:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006d36:	46bc      	mov	ip, r7
 8006d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d3c:	9605      	str	r6, [sp, #20]
 8006d3e:	ee36 7a63 	vsub.f32	s14, s12, s7
 8006d42:	9703      	str	r7, [sp, #12]
 8006d44:	ee12 9a90 	vmov	r9, s5
 8006d48:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8006d4c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8006d50:	1f3e      	subs	r6, r7, #4
 8006d52:	f840 9b08 	str.w	r9, [r0], #8
 8006d56:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8006d5a:	edde 2a01 	vldr	s5, [lr, #4]
 8006d5e:	ee77 3ac4 	vsub.f32	s7, s15, s8
 8006d62:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006d66:	ed9c 4a01 	vldr	s8, [ip, #4]
 8006d6a:	ee36 6a22 	vadd.f32	s12, s12, s5
 8006d6e:	9001      	str	r0, [sp, #4]
 8006d70:	ee37 7a45 	vsub.f32	s14, s14, s10
 8006d74:	9804      	ldr	r0, [sp, #16]
 8006d76:	ee75 6a26 	vadd.f32	s13, s10, s13
 8006d7a:	f1ae 0704 	sub.w	r7, lr, #4
 8006d7e:	ee36 6a04 	vadd.f32	s12, s12, s8
 8006d82:	ee33 4a45 	vsub.f32	s8, s6, s10
 8006d86:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8006d8a:	ee33 5aa4 	vadd.f32	s10, s7, s9
 8006d8e:	ed80 6a01 	vstr	s12, [r0, #4]
 8006d92:	ee14 9a10 	vmov	r9, s8
 8006d96:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006d9a:	f848 9b08 	str.w	r9, [r8], #8
 8006d9e:	ed8e 5a01 	vstr	s10, [lr, #4]
 8006da2:	ee15 ea90 	vmov	lr, s11
 8006da6:	f844 eb08 	str.w	lr, [r4], #8
 8006daa:	ee16 ea90 	vmov	lr, s13
 8006dae:	9408      	str	r4, [sp, #32]
 8006db0:	462c      	mov	r4, r5
 8006db2:	ed85 7a01 	vstr	s14, [r5, #4]
 8006db6:	9d03      	ldr	r5, [sp, #12]
 8006db8:	f84c eb08 	str.w	lr, [ip], #8
 8006dbc:	edc5 7a01 	vstr	s15, [r5, #4]
 8006dc0:	0855      	lsrs	r5, r2, #1
 8006dc2:	9509      	str	r5, [sp, #36]	@ 0x24
 8006dc4:	f000 8130 	beq.w	8007028 <arm_cfft_radix8by4_f32+0x36c>
 8006dc8:	9804      	ldr	r0, [sp, #16]
 8006dca:	3b08      	subs	r3, #8
 8006dcc:	46ab      	mov	fp, r5
 8006dce:	f1a4 020c 	sub.w	r2, r4, #12
 8006dd2:	f100 0510 	add.w	r5, r0, #16
 8006dd6:	f101 0920 	add.w	r9, r1, #32
 8006dda:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8006dde:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006de2:	4433      	add	r3, r6
 8006de4:	3410      	adds	r4, #16
 8006de6:	4660      	mov	r0, ip
 8006de8:	4641      	mov	r1, r8
 8006dea:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8006dee:	ed54 6a02 	vldr	s13, [r4, #-8]
 8006df2:	f1bb 0b01 	subs.w	fp, fp, #1
 8006df6:	ed55 5a02 	vldr	s11, [r5, #-8]
 8006dfa:	f10a 0a08 	add.w	sl, sl, #8
 8006dfe:	edd1 7a00 	vldr	s15, [r1]
 8006e02:	f105 0508 	add.w	r5, r5, #8
 8006e06:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8006e0a:	edd0 2a00 	vldr	s5, [r0]
 8006e0e:	ed14 7a01 	vldr	s14, [r4, #-4]
 8006e12:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8006e16:	ed55 6a03 	vldr	s13, [r5, #-12]
 8006e1a:	f1a2 0208 	sub.w	r2, r2, #8
 8006e1e:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8006e22:	ed90 2a01 	vldr	s4, [r0, #4]
 8006e26:	ee36 5a87 	vadd.f32	s10, s13, s14
 8006e2a:	ed91 6a01 	vldr	s12, [r1, #4]
 8006e2e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006e32:	f109 0910 	add.w	r9, r9, #16
 8006e36:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8006e3a:	f104 0408 	add.w	r4, r4, #8
 8006e3e:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8006e42:	f10e 0e18 	add.w	lr, lr, #24
 8006e46:	ee37 3a67 	vsub.f32	s6, s14, s15
 8006e4a:	f1a3 0308 	sub.w	r3, r3, #8
 8006e4e:	ed45 6a04 	vstr	s13, [r5, #-16]
 8006e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e56:	edd1 6a01 	vldr	s13, [r1, #4]
 8006e5a:	ee76 1a25 	vadd.f32	s3, s12, s11
 8006e5e:	edd0 4a01 	vldr	s9, [r0, #4]
 8006e62:	ee33 3a22 	vadd.f32	s6, s6, s5
 8006e66:	ee75 6a26 	vadd.f32	s13, s10, s13
 8006e6a:	ee35 5a46 	vsub.f32	s10, s10, s12
 8006e6e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006e72:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006e76:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8006e7a:	ee35 5a42 	vsub.f32	s10, s10, s4
 8006e7e:	ed45 6a03 	vstr	s13, [r5, #-12]
 8006e82:	ee32 2a06 	vadd.f32	s4, s4, s12
 8006e86:	edd6 7a00 	vldr	s15, [r6]
 8006e8a:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8006e8e:	ed97 1a00 	vldr	s2, [r7]
 8006e92:	ee77 2a62 	vsub.f32	s5, s14, s5
 8006e96:	ed92 8a04 	vldr	s16, [r2, #16]
 8006e9a:	ee71 8a27 	vadd.f32	s17, s2, s15
 8006e9e:	ed93 aa04 	vldr	s20, [r3, #16]
 8006ea2:	ed16 7a01 	vldr	s14, [r6, #-4]
 8006ea6:	ee71 7a67 	vsub.f32	s15, s2, s15
 8006eaa:	ed57 0a01 	vldr	s1, [r7, #-4]
 8006eae:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8006eb2:	ee38 6a88 	vadd.f32	s12, s17, s16
 8006eb6:	edd3 9a03 	vldr	s19, [r3, #12]
 8006eba:	ee30 0a87 	vadd.f32	s0, s1, s14
 8006ebe:	ed92 9a03 	vldr	s18, [r2, #12]
 8006ec2:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8006ec6:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8006eca:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8006ece:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8006ed2:	ee16 ca10 	vmov	ip, s12
 8006ed6:	ee30 6a49 	vsub.f32	s12, s0, s18
 8006eda:	ee71 4a07 	vadd.f32	s9, s2, s14
 8006ede:	f847 c908 	str.w	ip, [r7], #-8
 8006ee2:	ee34 4a29 	vadd.f32	s8, s8, s19
 8006ee6:	edd2 8a03 	vldr	s17, [r2, #12]
 8006eea:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8006eee:	ed93 8a03 	vldr	s16, [r3, #12]
 8006ef2:	ee71 0a47 	vsub.f32	s1, s2, s14
 8006ef6:	ee30 0a28 	vadd.f32	s0, s0, s17
 8006efa:	ee39 1a67 	vsub.f32	s2, s18, s15
 8006efe:	ee36 6a69 	vsub.f32	s12, s12, s19
 8006f02:	ee30 0a08 	vadd.f32	s0, s0, s16
 8006f06:	ee75 5aca 	vsub.f32	s11, s11, s20
 8006f0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8006f0e:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8006f12:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8006f16:	ee21 8a80 	vmul.f32	s16, s3, s0
 8006f1a:	ee23 7a26 	vmul.f32	s14, s6, s13
 8006f1e:	ee64 7a26 	vmul.f32	s15, s8, s13
 8006f22:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8006f26:	ee24 4a00 	vmul.f32	s8, s8, s0
 8006f2a:	ee23 3a00 	vmul.f32	s6, s6, s0
 8006f2e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8006f32:	ee24 0a80 	vmul.f32	s0, s9, s0
 8006f36:	ee38 7a07 	vadd.f32	s14, s16, s14
 8006f3a:	ee76 6a84 	vadd.f32	s13, s13, s8
 8006f3e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006f42:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006f46:	ee17 ca10 	vmov	ip, s14
 8006f4a:	f841 cb08 	str.w	ip, [r1], #8
 8006f4e:	ed01 3a01 	vstr	s6, [r1, #-4]
 8006f52:	ed82 0a04 	vstr	s0, [r2, #16]
 8006f56:	edc2 6a03 	vstr	s13, [r2, #12]
 8006f5a:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 8006f5e:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 8006f62:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8006f66:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8006f6a:	ee65 4a27 	vmul.f32	s9, s10, s15
 8006f6e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8006f72:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8006f76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006f7a:	ee25 5a26 	vmul.f32	s10, s10, s13
 8006f7e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8006f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f86:	ee34 6a24 	vadd.f32	s12, s8, s9
 8006f8a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8006f8e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006f92:	ee17 ca90 	vmov	ip, s15
 8006f96:	ed04 6a04 	vstr	s12, [r4, #-16]
 8006f9a:	ed04 5a03 	vstr	s10, [r4, #-12]
 8006f9e:	f846 c908 	str.w	ip, [r6], #-8
 8006fa2:	edc6 6a01 	vstr	s13, [r6, #4]
 8006fa6:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 8006faa:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 8006fae:	ee62 5a27 	vmul.f32	s11, s4, s15
 8006fb2:	ee22 6a87 	vmul.f32	s12, s5, s14
 8006fb6:	ee22 2a07 	vmul.f32	s4, s4, s14
 8006fba:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8006fbe:	ee61 6a07 	vmul.f32	s13, s2, s14
 8006fc2:	ee20 7a87 	vmul.f32	s14, s1, s14
 8006fc6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006fca:	ee61 7a27 	vmul.f32	s15, s2, s15
 8006fce:	ee35 6a86 	vadd.f32	s12, s11, s12
 8006fd2:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8006fd6:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8006fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fde:	ee16 ca10 	vmov	ip, s12
 8006fe2:	f840 cb08 	str.w	ip, [r0], #8
 8006fe6:	ed40 2a01 	vstr	s5, [r0, #-4]
 8006fea:	edc3 0a04 	vstr	s1, [r3, #16]
 8006fee:	edc3 7a03 	vstr	s15, [r3, #12]
 8006ff2:	f47f aefc 	bne.w	8006dee <arm_cfft_radix8by4_f32+0x132>
 8006ff6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ff8:	9805      	ldr	r0, [sp, #20]
 8006ffa:	00cb      	lsls	r3, r1, #3
 8006ffc:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8007000:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007004:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007008:	4498      	add	r8, r3
 800700a:	449c      	add	ip, r3
 800700c:	9105      	str	r1, [sp, #20]
 800700e:	9901      	ldr	r1, [sp, #4]
 8007010:	4419      	add	r1, r3
 8007012:	9101      	str	r1, [sp, #4]
 8007014:	9906      	ldr	r1, [sp, #24]
 8007016:	4419      	add	r1, r3
 8007018:	9106      	str	r1, [sp, #24]
 800701a:	9908      	ldr	r1, [sp, #32]
 800701c:	4419      	add	r1, r3
 800701e:	9b07      	ldr	r3, [sp, #28]
 8007020:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007024:	9108      	str	r1, [sp, #32]
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	9a01      	ldr	r2, [sp, #4]
 800702a:	2304      	movs	r3, #4
 800702c:	9e08      	ldr	r6, [sp, #32]
 800702e:	edd2 6a00 	vldr	s13, [r2]
 8007032:	ed96 4a00 	vldr	s8, [r6]
 8007036:	edd8 7a00 	vldr	s15, [r8]
 800703a:	ee36 6a84 	vadd.f32	s12, s13, s8
 800703e:	eddc 2a00 	vldr	s5, [ip]
 8007042:	ed96 7a01 	vldr	s14, [r6, #4]
 8007046:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800704a:	edd2 6a01 	vldr	s13, [r2, #4]
 800704e:	ee76 4a27 	vadd.f32	s9, s12, s15
 8007052:	ed98 2a01 	vldr	s4, [r8, #4]
 8007056:	ee76 5a87 	vadd.f32	s11, s13, s14
 800705a:	ed9c 5a01 	vldr	s10, [ip, #4]
 800705e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007062:	9d05      	ldr	r5, [sp, #20]
 8007064:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8007068:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800706c:	ee72 3a04 	vadd.f32	s7, s4, s8
 8007070:	9804      	ldr	r0, [sp, #16]
 8007072:	ee77 4a67 	vsub.f32	s9, s14, s15
 8007076:	4621      	mov	r1, r4
 8007078:	edc2 6a00 	vstr	s13, [r2]
 800707c:	ee76 6a67 	vsub.f32	s13, s12, s15
 8007080:	ed98 3a01 	vldr	s6, [r8, #4]
 8007084:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8007088:	eddc 1a01 	vldr	s3, [ip, #4]
 800708c:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8007090:	ee35 3a83 	vadd.f32	s6, s11, s6
 8007094:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007098:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800709c:	ee73 5a21 	vadd.f32	s11, s6, s3
 80070a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070a4:	ee36 6a45 	vsub.f32	s12, s12, s10
 80070a8:	edc2 5a01 	vstr	s11, [r2, #4]
 80070ac:	ee35 5a04 	vadd.f32	s10, s10, s8
 80070b0:	9a06      	ldr	r2, [sp, #24]
 80070b2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80070b6:	edd2 7a00 	vldr	s15, [r2]
 80070ba:	edd2 5a01 	vldr	s11, [r2, #4]
 80070be:	ee23 4aa7 	vmul.f32	s8, s7, s15
 80070c2:	ee63 3aa5 	vmul.f32	s7, s7, s11
 80070c6:	ee64 5aa5 	vmul.f32	s11, s9, s11
 80070ca:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80070ce:	ee77 7a62 	vsub.f32	s15, s14, s5
 80070d2:	ee74 5a25 	vadd.f32	s11, s8, s11
 80070d6:	ee74 4ae3 	vsub.f32	s9, s9, s7
 80070da:	edc8 5a00 	vstr	s11, [r8]
 80070de:	edc8 4a01 	vstr	s9, [r8, #4]
 80070e2:	edd5 4a01 	vldr	s9, [r5, #4]
 80070e6:	ed95 7a00 	vldr	s14, [r5]
 80070ea:	9d07      	ldr	r5, [sp, #28]
 80070ec:	ee66 5a87 	vmul.f32	s11, s13, s14
 80070f0:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80070f4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80070f8:	ee26 6a24 	vmul.f32	s12, s12, s9
 80070fc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007100:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007104:	edc6 6a01 	vstr	s13, [r6, #4]
 8007108:	ed86 6a00 	vstr	s12, [r6]
 800710c:	ed95 6a01 	vldr	s12, [r5, #4]
 8007110:	ed95 7a00 	vldr	s14, [r5]
 8007114:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007116:	ee65 6a07 	vmul.f32	s13, s10, s14
 800711a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800711e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8007122:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007126:	ee37 5a45 	vsub.f32	s10, s14, s10
 800712a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8007132:	edcc 7a00 	vstr	s15, [ip]
 8007136:	6872      	ldr	r2, [r6, #4]
 8007138:	f000 fa74 	bl	8007624 <arm_radix8_butterfly_f32>
 800713c:	9802      	ldr	r0, [sp, #8]
 800713e:	4621      	mov	r1, r4
 8007140:	6872      	ldr	r2, [r6, #4]
 8007142:	2304      	movs	r3, #4
 8007144:	f000 fa6e 	bl	8007624 <arm_radix8_butterfly_f32>
 8007148:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800714a:	4621      	mov	r1, r4
 800714c:	6872      	ldr	r2, [r6, #4]
 800714e:	2304      	movs	r3, #4
 8007150:	f000 fa68 	bl	8007624 <arm_radix8_butterfly_f32>
 8007154:	9803      	ldr	r0, [sp, #12]
 8007156:	4621      	mov	r1, r4
 8007158:	6872      	ldr	r2, [r6, #4]
 800715a:	2304      	movs	r3, #4
 800715c:	b00f      	add	sp, #60	@ 0x3c
 800715e:	ecbd 8b06 	vpop	{d8-d10}
 8007162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007166:	f000 ba5d 	b.w	8007624 <arm_radix8_butterfly_f32>
 800716a:	bf00      	nop

0800716c <arm_cfft_f32>:
 800716c:	2a01      	cmp	r2, #1
 800716e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007172:	4606      	mov	r6, r0
 8007174:	4617      	mov	r7, r2
 8007176:	460c      	mov	r4, r1
 8007178:	4698      	mov	r8, r3
 800717a:	8805      	ldrh	r5, [r0, #0]
 800717c:	d053      	beq.n	8007226 <arm_cfft_f32+0xba>
 800717e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8007182:	d04b      	beq.n	800721c <arm_cfft_f32+0xb0>
 8007184:	d916      	bls.n	80071b4 <arm_cfft_f32+0x48>
 8007186:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800718a:	d01a      	beq.n	80071c2 <arm_cfft_f32+0x56>
 800718c:	d95a      	bls.n	8007244 <arm_cfft_f32+0xd8>
 800718e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8007192:	d043      	beq.n	800721c <arm_cfft_f32+0xb0>
 8007194:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8007198:	d105      	bne.n	80071a6 <arm_cfft_f32+0x3a>
 800719a:	4620      	mov	r0, r4
 800719c:	4629      	mov	r1, r5
 800719e:	6872      	ldr	r2, [r6, #4]
 80071a0:	2301      	movs	r3, #1
 80071a2:	f000 fa3f 	bl	8007624 <arm_radix8_butterfly_f32>
 80071a6:	f1b8 0f00 	cmp.w	r8, #0
 80071aa:	d111      	bne.n	80071d0 <arm_cfft_f32+0x64>
 80071ac:	2f01      	cmp	r7, #1
 80071ae:	d016      	beq.n	80071de <arm_cfft_f32+0x72>
 80071b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b4:	2d20      	cmp	r5, #32
 80071b6:	d031      	beq.n	800721c <arm_cfft_f32+0xb0>
 80071b8:	d948      	bls.n	800724c <arm_cfft_f32+0xe0>
 80071ba:	2d40      	cmp	r5, #64	@ 0x40
 80071bc:	d0ed      	beq.n	800719a <arm_cfft_f32+0x2e>
 80071be:	2d80      	cmp	r5, #128	@ 0x80
 80071c0:	d1f1      	bne.n	80071a6 <arm_cfft_f32+0x3a>
 80071c2:	4630      	mov	r0, r6
 80071c4:	4621      	mov	r1, r4
 80071c6:	f7ff fca7 	bl	8006b18 <arm_cfft_radix8by2_f32>
 80071ca:	f1b8 0f00 	cmp.w	r8, #0
 80071ce:	d0ed      	beq.n	80071ac <arm_cfft_f32+0x40>
 80071d0:	4620      	mov	r0, r4
 80071d2:	89b1      	ldrh	r1, [r6, #12]
 80071d4:	68b2      	ldr	r2, [r6, #8]
 80071d6:	f7f9 f87f 	bl	80002d8 <arm_bitreversal_32>
 80071da:	2f01      	cmp	r7, #1
 80071dc:	d1e8      	bne.n	80071b0 <arm_cfft_f32+0x44>
 80071de:	ee07 5a90 	vmov	s15, r5
 80071e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80071ea:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	d0de      	beq.n	80071b0 <arm_cfft_f32+0x44>
 80071f2:	f104 0108 	add.w	r1, r4, #8
 80071f6:	2300      	movs	r3, #0
 80071f8:	ed11 7a02 	vldr	s14, [r1, #-8]
 80071fc:	3301      	adds	r3, #1
 80071fe:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007202:	3108      	adds	r1, #8
 8007204:	429d      	cmp	r5, r3
 8007206:	ee27 7a26 	vmul.f32	s14, s14, s13
 800720a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800720e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007212:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007216:	d1ef      	bne.n	80071f8 <arm_cfft_f32+0x8c>
 8007218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800721c:	4630      	mov	r0, r6
 800721e:	4621      	mov	r1, r4
 8007220:	f7ff fd4c 	bl	8006cbc <arm_cfft_radix8by4_f32>
 8007224:	e7bf      	b.n	80071a6 <arm_cfft_f32+0x3a>
 8007226:	b1a5      	cbz	r5, 8007252 <arm_cfft_f32+0xe6>
 8007228:	f101 030c 	add.w	r3, r1, #12
 800722c:	2200      	movs	r2, #0
 800722e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007232:	3201      	adds	r2, #1
 8007234:	3308      	adds	r3, #8
 8007236:	eef1 7a67 	vneg.f32	s15, s15
 800723a:	4295      	cmp	r5, r2
 800723c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8007240:	d1f5      	bne.n	800722e <arm_cfft_f32+0xc2>
 8007242:	e79c      	b.n	800717e <arm_cfft_f32+0x12>
 8007244:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8007248:	d0a7      	beq.n	800719a <arm_cfft_f32+0x2e>
 800724a:	e7ac      	b.n	80071a6 <arm_cfft_f32+0x3a>
 800724c:	2d10      	cmp	r5, #16
 800724e:	d0b8      	beq.n	80071c2 <arm_cfft_f32+0x56>
 8007250:	e7a9      	b.n	80071a6 <arm_cfft_f32+0x3a>
 8007252:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8007256:	d896      	bhi.n	8007186 <arm_cfft_f32+0x1a>
 8007258:	e7ac      	b.n	80071b4 <arm_cfft_f32+0x48>
 800725a:	bf00      	nop

0800725c <arm_fir_init_f32>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	9e06      	ldr	r6, [sp, #24]
 8007260:	f06f 4440 	mvn.w	r4, #3221225472	@ 0xc0000000
 8007264:	460f      	mov	r7, r1
 8007266:	6082      	str	r2, [r0, #8]
 8007268:	4434      	add	r4, r6
 800726a:	4605      	mov	r5, r0
 800726c:	461e      	mov	r6, r3
 800726e:	8007      	strh	r7, [r0, #0]
 8007270:	19e2      	adds	r2, r4, r7
 8007272:	2100      	movs	r1, #0
 8007274:	4618      	mov	r0, r3
 8007276:	0092      	lsls	r2, r2, #2
 8007278:	f000 fcb4 	bl	8007be4 <memset>
 800727c:	606e      	str	r6, [r5, #4]
 800727e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007280 <arm_biquad_cascade_df1_init_f32>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4604      	mov	r4, r0
 8007284:	4608      	mov	r0, r1
 8007286:	461d      	mov	r5, r3
 8007288:	2100      	movs	r1, #0
 800728a:	60a2      	str	r2, [r4, #8]
 800728c:	0102      	lsls	r2, r0, #4
 800728e:	6020      	str	r0, [r4, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fca7 	bl	8007be4 <memset>
 8007296:	6065      	str	r5, [r4, #4]
 8007298:	bd38      	pop	{r3, r4, r5, pc}
 800729a:	bf00      	nop

0800729c <arm_biquad_cascade_df1_f32>:
 800729c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80072a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072a4:	4696      	mov	lr, r2
 80072a6:	6886      	ldr	r6, [r0, #8]
 80072a8:	6845      	ldr	r5, [r0, #4]
 80072aa:	ea4f 180c 	mov.w	r8, ip, lsl #4
 80072ae:	f003 0203 	and.w	r2, r3, #3
 80072b2:	3614      	adds	r6, #20
 80072b4:	3510      	adds	r5, #16
 80072b6:	6807      	ldr	r7, [r0, #0]
 80072b8:	eb0e 0908 	add.w	r9, lr, r8
 80072bc:	ed56 3a05 	vldr	s7, [r6, #-20]	@ 0xffffffec
 80072c0:	ed16 3a04 	vldr	s6, [r6, #-16]
 80072c4:	ed56 2a03 	vldr	s5, [r6, #-12]
 80072c8:	ed16 2a02 	vldr	s4, [r6, #-8]
 80072cc:	ed56 1a01 	vldr	s3, [r6, #-4]
 80072d0:	ed15 1a04 	vldr	s2, [r5, #-16]
 80072d4:	ed55 0a03 	vldr	s1, [r5, #-12]
 80072d8:	ed55 7a02 	vldr	s15, [r5, #-8]
 80072dc:	ed15 6a01 	vldr	s12, [r5, #-4]
 80072e0:	f1bc 0f00 	cmp.w	ip, #0
 80072e4:	f000 80a3 	beq.w	800742e <arm_biquad_cascade_df1_f32+0x192>
 80072e8:	f101 0010 	add.w	r0, r1, #16
 80072ec:	f10e 0310 	add.w	r3, lr, #16
 80072f0:	4664      	mov	r4, ip
 80072f2:	ed10 4a04 	vldr	s8, [r0, #-16]
 80072f6:	ee23 7a01 	vmul.f32	s14, s6, s2
 80072fa:	ee62 0aa0 	vmul.f32	s1, s5, s1
 80072fe:	3c01      	subs	r4, #1
 8007300:	ee23 5a84 	vmul.f32	s10, s7, s8
 8007304:	f100 0010 	add.w	r0, r0, #16
 8007308:	ee22 0a27 	vmul.f32	s0, s4, s15
 800730c:	f103 0310 	add.w	r3, r3, #16
 8007310:	ee21 6a86 	vmul.f32	s12, s3, s12
 8007314:	ee75 4a07 	vadd.f32	s9, s10, s14
 8007318:	ee61 6aa7 	vmul.f32	s13, s3, s15
 800731c:	ee63 5a04 	vmul.f32	s11, s6, s8
 8007320:	ee34 7aa0 	vadd.f32	s14, s9, s1
 8007324:	ee22 1a81 	vmul.f32	s2, s5, s2
 8007328:	ee22 4a84 	vmul.f32	s8, s5, s8
 800732c:	ee37 7a00 	vadd.f32	s14, s14, s0
 8007330:	ee37 6a06 	vadd.f32	s12, s14, s12
 8007334:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 8007338:	ee22 7a06 	vmul.f32	s14, s4, s12
 800733c:	ed50 7a07 	vldr	s15, [r0, #-28]	@ 0xffffffe4
 8007340:	ee21 6a86 	vmul.f32	s12, s3, s12
 8007344:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8007348:	ee23 0a27 	vmul.f32	s0, s6, s15
 800734c:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8007350:	ee35 5a25 	vadd.f32	s10, s10, s11
 8007354:	ee75 5a01 	vadd.f32	s11, s10, s2
 8007358:	ee75 5a87 	vadd.f32	s11, s11, s14
 800735c:	ee75 6aa6 	vadd.f32	s13, s11, s13
 8007360:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8007364:	ee62 7a26 	vmul.f32	s15, s4, s13
 8007368:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 800736c:	ee61 5aa6 	vmul.f32	s11, s3, s13
 8007370:	ee23 5aa0 	vmul.f32	s10, s7, s1
 8007374:	ee23 7a20 	vmul.f32	s14, s6, s1
 8007378:	ee35 5a00 	vadd.f32	s10, s10, s0
 800737c:	ee75 6a04 	vadd.f32	s13, s10, s8
 8007380:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007384:	ee36 6a86 	vadd.f32	s12, s13, s12
 8007388:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800738c:	ee62 7a06 	vmul.f32	s15, s4, s12
 8007390:	ed10 1a05 	vldr	s2, [r0, #-20]	@ 0xffffffec
 8007394:	ee63 6a81 	vmul.f32	s13, s7, s2
 8007398:	ee36 7a87 	vadd.f32	s14, s13, s14
 800739c:	ee37 7a24 	vadd.f32	s14, s14, s9
 80073a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80073a8:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 80073ac:	d1a1      	bne.n	80072f2 <arm_biquad_cascade_df1_f32+0x56>
 80073ae:	4441      	add	r1, r8
 80073b0:	4648      	mov	r0, r9
 80073b2:	b39a      	cbz	r2, 800741c <arm_biquad_cascade_df1_f32+0x180>
 80073b4:	4613      	mov	r3, r2
 80073b6:	e003      	b.n	80073c0 <arm_biquad_cascade_df1_f32+0x124>
 80073b8:	eef0 7a45 	vmov.f32	s15, s10
 80073bc:	eeb0 1a47 	vmov.f32	s2, s14
 80073c0:	ecb1 7a01 	vldmia	r1!, {s14}
 80073c4:	ee63 4a01 	vmul.f32	s9, s6, s2
 80073c8:	ee62 5aa0 	vmul.f32	s11, s5, s1
 80073cc:	3b01      	subs	r3, #1
 80073ce:	ee23 4a87 	vmul.f32	s8, s7, s14
 80073d2:	ee22 5a27 	vmul.f32	s10, s4, s15
 80073d6:	ee61 6a86 	vmul.f32	s13, s3, s12
 80073da:	ee74 4a24 	vadd.f32	s9, s8, s9
 80073de:	eef0 0a41 	vmov.f32	s1, s2
 80073e2:	eeb0 6a67 	vmov.f32	s12, s15
 80073e6:	ee74 4aa5 	vadd.f32	s9, s9, s11
 80073ea:	ee34 5a85 	vadd.f32	s10, s9, s10
 80073ee:	ee35 5a26 	vadd.f32	s10, s10, s13
 80073f2:	eca0 5a01 	vstmia	r0!, {s10}
 80073f6:	d1df      	bne.n	80073b8 <arm_biquad_cascade_df1_f32+0x11c>
 80073f8:	3f01      	subs	r7, #1
 80073fa:	ed05 7a04 	vstr	s14, [r5, #-16]
 80073fe:	ed05 1a03 	vstr	s2, [r5, #-12]
 8007402:	f106 0614 	add.w	r6, r6, #20
 8007406:	ed05 5a02 	vstr	s10, [r5, #-8]
 800740a:	4671      	mov	r1, lr
 800740c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007410:	f105 0510 	add.w	r5, r5, #16
 8007414:	f47f af52 	bne.w	80072bc <arm_biquad_cascade_df1_f32+0x20>
 8007418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800741c:	eeb0 5a67 	vmov.f32	s10, s15
 8007420:	eeb0 7a41 	vmov.f32	s14, s2
 8007424:	eef0 7a46 	vmov.f32	s15, s12
 8007428:	eeb0 1a60 	vmov.f32	s2, s1
 800742c:	e7e4      	b.n	80073f8 <arm_biquad_cascade_df1_f32+0x15c>
 800742e:	4670      	mov	r0, lr
 8007430:	e7bf      	b.n	80073b2 <arm_biquad_cascade_df1_f32+0x116>
 8007432:	bf00      	nop

08007434 <arm_scale_f32>:
 8007434:	b470      	push	{r4, r5, r6}
 8007436:	0896      	lsrs	r6, r2, #2
 8007438:	d025      	beq.n	8007486 <arm_scale_f32+0x52>
 800743a:	f100 0410 	add.w	r4, r0, #16
 800743e:	f101 0310 	add.w	r3, r1, #16
 8007442:	4635      	mov	r5, r6
 8007444:	ed14 6a04 	vldr	s12, [r4, #-16]
 8007448:	3d01      	subs	r5, #1
 800744a:	ed54 6a03 	vldr	s13, [r4, #-12]
 800744e:	f103 0310 	add.w	r3, r3, #16
 8007452:	ed14 7a02 	vldr	s14, [r4, #-8]
 8007456:	ee26 6a00 	vmul.f32	s12, s12, s0
 800745a:	ed54 7a01 	vldr	s15, [r4, #-4]
 800745e:	ee66 6a80 	vmul.f32	s13, s13, s0
 8007462:	ee27 7a00 	vmul.f32	s14, s14, s0
 8007466:	f104 0410 	add.w	r4, r4, #16
 800746a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800746e:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 8007472:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8007476:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 800747a:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800747e:	d1e1      	bne.n	8007444 <arm_scale_f32+0x10>
 8007480:	0136      	lsls	r6, r6, #4
 8007482:	4430      	add	r0, r6
 8007484:	4431      	add	r1, r6
 8007486:	f012 0203 	ands.w	r2, r2, #3
 800748a:	d007      	beq.n	800749c <arm_scale_f32+0x68>
 800748c:	ecf0 7a01 	vldmia	r0!, {s15}
 8007490:	3a01      	subs	r2, #1
 8007492:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007496:	ece1 7a01 	vstmia	r1!, {s15}
 800749a:	d1f7      	bne.n	800748c <arm_scale_f32+0x58>
 800749c:	bc70      	pop	{r4, r5, r6}
 800749e:	4770      	bx	lr

080074a0 <arm_offset_f32>:
 80074a0:	b470      	push	{r4, r5, r6}
 80074a2:	0896      	lsrs	r6, r2, #2
 80074a4:	d025      	beq.n	80074f2 <arm_offset_f32+0x52>
 80074a6:	f100 0410 	add.w	r4, r0, #16
 80074aa:	f101 0310 	add.w	r3, r1, #16
 80074ae:	4635      	mov	r5, r6
 80074b0:	ed14 6a04 	vldr	s12, [r4, #-16]
 80074b4:	3d01      	subs	r5, #1
 80074b6:	ed54 6a03 	vldr	s13, [r4, #-12]
 80074ba:	f103 0310 	add.w	r3, r3, #16
 80074be:	ed14 7a02 	vldr	s14, [r4, #-8]
 80074c2:	ee36 6a00 	vadd.f32	s12, s12, s0
 80074c6:	ed54 7a01 	vldr	s15, [r4, #-4]
 80074ca:	ee76 6a80 	vadd.f32	s13, s13, s0
 80074ce:	ee37 7a00 	vadd.f32	s14, s14, s0
 80074d2:	f104 0410 	add.w	r4, r4, #16
 80074d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80074da:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 80074de:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 80074e2:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 80074e6:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 80074ea:	d1e1      	bne.n	80074b0 <arm_offset_f32+0x10>
 80074ec:	0136      	lsls	r6, r6, #4
 80074ee:	4430      	add	r0, r6
 80074f0:	4431      	add	r1, r6
 80074f2:	f012 0203 	ands.w	r2, r2, #3
 80074f6:	d007      	beq.n	8007508 <arm_offset_f32+0x68>
 80074f8:	ecf0 7a01 	vldmia	r0!, {s15}
 80074fc:	3a01      	subs	r2, #1
 80074fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007502:	ece1 7a01 	vstmia	r1!, {s15}
 8007506:	d1f7      	bne.n	80074f8 <arm_offset_f32+0x58>
 8007508:	bc70      	pop	{r4, r5, r6}
 800750a:	4770      	bx	lr

0800750c <arm_mult_f32>:
 800750c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800750e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8007512:	d033      	beq.n	800757c <arm_mult_f32+0x70>
 8007514:	f100 0610 	add.w	r6, r0, #16
 8007518:	f101 0510 	add.w	r5, r1, #16
 800751c:	f102 0410 	add.w	r4, r2, #16
 8007520:	4677      	mov	r7, lr
 8007522:	ed16 7a04 	vldr	s14, [r6, #-16]
 8007526:	3f01      	subs	r7, #1
 8007528:	ed15 6a04 	vldr	s12, [r5, #-16]
 800752c:	f106 0610 	add.w	r6, r6, #16
 8007530:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8007534:	f105 0510 	add.w	r5, r5, #16
 8007538:	ee27 6a06 	vmul.f32	s12, s14, s12
 800753c:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 8007540:	ed16 7a07 	vldr	s14, [r6, #-28]	@ 0xffffffe4
 8007544:	f104 0410 	add.w	r4, r4, #16
 8007548:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 800754c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007550:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8007554:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 8007558:	ee27 7a25 	vmul.f32	s14, s14, s11
 800755c:	ed15 6a05 	vldr	s12, [r5, #-20]	@ 0xffffffec
 8007560:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 8007564:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007568:	ed04 7a07 	vstr	s14, [r4, #-28]	@ 0xffffffe4
 800756c:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8007570:	d1d7      	bne.n	8007522 <arm_mult_f32+0x16>
 8007572:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007576:	4420      	add	r0, r4
 8007578:	4421      	add	r1, r4
 800757a:	4422      	add	r2, r4
 800757c:	f013 0303 	ands.w	r3, r3, #3
 8007580:	d009      	beq.n	8007596 <arm_mult_f32+0x8a>
 8007582:	ecf0 7a01 	vldmia	r0!, {s15}
 8007586:	3b01      	subs	r3, #1
 8007588:	ecb1 7a01 	vldmia	r1!, {s14}
 800758c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007590:	ece2 7a01 	vstmia	r2!, {s15}
 8007594:	d1f5      	bne.n	8007582 <arm_mult_f32+0x76>
 8007596:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007598 <arm_add_f32>:
 8007598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800759a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800759e:	d033      	beq.n	8007608 <arm_add_f32+0x70>
 80075a0:	f100 0610 	add.w	r6, r0, #16
 80075a4:	f101 0510 	add.w	r5, r1, #16
 80075a8:	f102 0410 	add.w	r4, r2, #16
 80075ac:	4677      	mov	r7, lr
 80075ae:	ed16 7a03 	vldr	s14, [r6, #-12]
 80075b2:	3f01      	subs	r7, #1
 80075b4:	ed56 7a02 	vldr	s15, [r6, #-8]
 80075b8:	f105 0510 	add.w	r5, r5, #16
 80075bc:	ed15 6a07 	vldr	s12, [r5, #-28]	@ 0xffffffe4
 80075c0:	f106 0610 	add.w	r6, r6, #16
 80075c4:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 80075c8:	f104 0410 	add.w	r4, r4, #16
 80075cc:	ed15 5a05 	vldr	s10, [r5, #-20]	@ 0xffffffec
 80075d0:	ee37 6a06 	vadd.f32	s12, s14, s12
 80075d4:	ed55 5a08 	vldr	s11, [r5, #-32]	@ 0xffffffe0
 80075d8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80075dc:	ed16 7a05 	vldr	s14, [r6, #-20]	@ 0xffffffec
 80075e0:	ed56 7a08 	vldr	s15, [r6, #-32]	@ 0xffffffe0
 80075e4:	ee37 7a05 	vadd.f32	s14, s14, s10
 80075e8:	ed04 6a07 	vstr	s12, [r4, #-28]	@ 0xffffffe4
 80075ec:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80075f0:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 80075f4:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 80075f8:	ed44 7a08 	vstr	s15, [r4, #-32]	@ 0xffffffe0
 80075fc:	d1d7      	bne.n	80075ae <arm_add_f32+0x16>
 80075fe:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8007602:	4420      	add	r0, r4
 8007604:	4421      	add	r1, r4
 8007606:	4422      	add	r2, r4
 8007608:	f013 0303 	ands.w	r3, r3, #3
 800760c:	d009      	beq.n	8007622 <arm_add_f32+0x8a>
 800760e:	ecf0 7a01 	vldmia	r0!, {s15}
 8007612:	3b01      	subs	r3, #1
 8007614:	ecb1 7a01 	vldmia	r1!, {s14}
 8007618:	ee77 7a87 	vadd.f32	s15, s15, s14
 800761c:	ece2 7a01 	vstmia	r2!, {s15}
 8007620:	d1f5      	bne.n	800760e <arm_add_f32+0x76>
 8007622:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007624 <arm_radix8_butterfly_f32>:
 8007624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007628:	469e      	mov	lr, r3
 800762a:	1d03      	adds	r3, r0, #4
 800762c:	4683      	mov	fp, r0
 800762e:	468a      	mov	sl, r1
 8007630:	4688      	mov	r8, r1
 8007632:	469c      	mov	ip, r3
 8007634:	ed2d 8b10 	vpush	{d8-d15}
 8007638:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 800794c <arm_radix8_butterfly_f32+0x328>
 800763c:	b09f      	sub	sp, #124	@ 0x7c
 800763e:	921c      	str	r2, [sp, #112]	@ 0x70
 8007640:	931d      	str	r3, [sp, #116]	@ 0x74
 8007642:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8007646:	f04f 0900 	mov.w	r9, #0
 800764a:	461a      	mov	r2, r3
 800764c:	930e      	str	r3, [sp, #56]	@ 0x38
 800764e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007652:	0051      	lsls	r1, r2, #1
 8007654:	4608      	mov	r0, r1
 8007656:	9103      	str	r1, [sp, #12]
 8007658:	00d1      	lsls	r1, r2, #3
 800765a:	1885      	adds	r5, r0, r2
 800765c:	0110      	lsls	r0, r2, #4
 800765e:	eb0b 0601 	add.w	r6, fp, r1
 8007662:	9101      	str	r1, [sp, #4]
 8007664:	18ac      	adds	r4, r5, r2
 8007666:	9002      	str	r0, [sp, #8]
 8007668:	1877      	adds	r7, r6, r1
 800766a:	4611      	mov	r1, r2
 800766c:	4422      	add	r2, r4
 800766e:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8007672:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8007676:	1850      	adds	r0, r2, r1
 8007678:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800767c:	4401      	add	r1, r0
 800767e:	3204      	adds	r2, #4
 8007680:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8007684:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8007688:	3104      	adds	r1, #4
 800768a:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800768e:	44c1      	add	r9, r8
 8007690:	edd4 6a00 	vldr	s13, [r4]
 8007694:	ed97 6a00 	vldr	s12, [r7]
 8007698:	45ca      	cmp	sl, r9
 800769a:	edd0 7a00 	vldr	s15, [r0]
 800769e:	ee37 5a66 	vsub.f32	s10, s14, s13
 80076a2:	edd6 5a00 	vldr	s11, [r6]
 80076a6:	ee37 2a26 	vadd.f32	s4, s14, s13
 80076aa:	ee76 2a67 	vsub.f32	s5, s12, s15
 80076ae:	edd5 6a00 	vldr	s13, [r5]
 80076b2:	ed12 7a01 	vldr	s14, [r2, #-4]
 80076b6:	ee76 4a27 	vadd.f32	s9, s12, s15
 80076ba:	ed11 6a01 	vldr	s12, [r1, #-4]
 80076be:	ee75 1a87 	vadd.f32	s3, s11, s14
 80076c2:	ee36 4a86 	vadd.f32	s8, s13, s12
 80076c6:	ee72 7a24 	vadd.f32	s15, s4, s9
 80076ca:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80076ce:	ee76 5ac6 	vsub.f32	s11, s13, s12
 80076d2:	ee31 6a84 	vadd.f32	s12, s3, s8
 80076d6:	ee32 2a64 	vsub.f32	s4, s4, s9
 80076da:	ee77 6a65 	vsub.f32	s13, s14, s11
 80076de:	ee77 4a86 	vadd.f32	s9, s15, s12
 80076e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80076e6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80076ea:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80076ee:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80076f2:	edc4 7a00 	vstr	s15, [r4]
 80076f6:	ee66 6a89 	vmul.f32	s13, s13, s18
 80076fa:	edd6 5a01 	vldr	s11, [r6, #4]
 80076fe:	ee27 6a09 	vmul.f32	s12, s14, s18
 8007702:	edd5 3a01 	vldr	s7, [r5, #4]
 8007706:	ed92 4a00 	vldr	s8, [r2]
 800770a:	ee35 1a26 	vadd.f32	s2, s10, s13
 800770e:	edd1 4a00 	vldr	s9, [r1]
 8007712:	ee75 6a66 	vsub.f32	s13, s10, s13
 8007716:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800771a:	ed94 0a01 	vldr	s0, [r4, #4]
 800771e:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8007722:	ed9c 7a00 	vldr	s14, [ip]
 8007726:	edd0 0a01 	vldr	s1, [r0, #4]
 800772a:	ee35 4a84 	vadd.f32	s8, s11, s8
 800772e:	ed97 5a01 	vldr	s10, [r7, #4]
 8007732:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8007736:	ee73 5a27 	vadd.f32	s11, s6, s15
 800773a:	ee77 3a00 	vadd.f32	s7, s14, s0
 800773e:	ee33 3a67 	vsub.f32	s6, s6, s15
 8007742:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007746:	ee35 0a20 	vadd.f32	s0, s10, s1
 800774a:	ee63 7a09 	vmul.f32	s15, s6, s18
 800774e:	ee35 5a60 	vsub.f32	s10, s10, s1
 8007752:	ee33 3a80 	vadd.f32	s6, s7, s0
 8007756:	ee74 0a24 	vadd.f32	s1, s8, s9
 800775a:	ee65 5a89 	vmul.f32	s11, s11, s18
 800775e:	ee74 4a64 	vsub.f32	s9, s8, s9
 8007762:	ee33 4ac0 	vsub.f32	s8, s7, s0
 8007766:	ee75 3a25 	vadd.f32	s7, s10, s11
 800776a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800776e:	ee37 5a27 	vadd.f32	s10, s14, s15
 8007772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007776:	ee32 7a86 	vadd.f32	s14, s5, s12
 800777a:	ee32 6ac6 	vsub.f32	s12, s5, s12
 800777e:	ee73 2a20 	vadd.f32	s5, s6, s1
 8007782:	ee33 3a60 	vsub.f32	s6, s6, s1
 8007786:	ee72 0a24 	vadd.f32	s1, s4, s9
 800778a:	edcc 2a00 	vstr	s5, [ip]
 800778e:	ee72 4a64 	vsub.f32	s9, s4, s9
 8007792:	ed84 3a01 	vstr	s6, [r4, #4]
 8007796:	ee74 2a61 	vsub.f32	s5, s8, s3
 800779a:	ee31 3a23 	vadd.f32	s6, s2, s7
 800779e:	edc7 0a00 	vstr	s1, [r7]
 80077a2:	ee31 1a63 	vsub.f32	s2, s2, s7
 80077a6:	edc0 4a00 	vstr	s9, [r0]
 80077aa:	ee76 3aa5 	vadd.f32	s7, s13, s11
 80077ae:	edc7 2a01 	vstr	s5, [r7, #4]
 80077b2:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80077b6:	441c      	add	r4, r3
 80077b8:	ee75 5a47 	vsub.f32	s11, s10, s14
 80077bc:	449c      	add	ip, r3
 80077be:	ee35 5a07 	vadd.f32	s10, s10, s14
 80077c2:	441f      	add	r7, r3
 80077c4:	ee37 7ac6 	vsub.f32	s14, s15, s12
 80077c8:	ee34 4a21 	vadd.f32	s8, s8, s3
 80077cc:	ee77 7a86 	vadd.f32	s15, s15, s12
 80077d0:	ed80 4a01 	vstr	s8, [r0, #4]
 80077d4:	4418      	add	r0, r3
 80077d6:	ed86 3a00 	vstr	s6, [r6]
 80077da:	ed01 1a01 	vstr	s2, [r1, #-4]
 80077de:	ed42 3a01 	vstr	s7, [r2, #-4]
 80077e2:	edc5 6a00 	vstr	s13, [r5]
 80077e6:	edc6 5a01 	vstr	s11, [r6, #4]
 80077ea:	441e      	add	r6, r3
 80077ec:	ed81 5a00 	vstr	s10, [r1]
 80077f0:	4419      	add	r1, r3
 80077f2:	ed82 7a00 	vstr	s14, [r2]
 80077f6:	441a      	add	r2, r3
 80077f8:	edc5 7a01 	vstr	s15, [r5, #4]
 80077fc:	441d      	add	r5, r3
 80077fe:	f63f af44 	bhi.w	800768a <arm_radix8_butterfly_f32+0x66>
 8007802:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8007804:	2f07      	cmp	r7, #7
 8007806:	f240 81e8 	bls.w	8007bda <arm_radix8_butterfly_f32+0x5b6>
 800780a:	9903      	ldr	r1, [sp, #12]
 800780c:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8007810:	9e01      	ldr	r6, [sp, #4]
 8007812:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8007816:	19ca      	adds	r2, r1, r7
 8007818:	1c4c      	adds	r4, r1, #1
 800781a:	eb05 010e 	add.w	r1, r5, lr
 800781e:	00ed      	lsls	r5, r5, #3
 8007820:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8007824:	3608      	adds	r6, #8
 8007826:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007828:	eb01 050e 	add.w	r5, r1, lr
 800782c:	00c9      	lsls	r1, r1, #3
 800782e:	443c      	add	r4, r7
 8007830:	9618      	str	r6, [sp, #96]	@ 0x60
 8007832:	00ee      	lsls	r6, r5, #3
 8007834:	460f      	mov	r7, r1
 8007836:	9114      	str	r1, [sp, #80]	@ 0x50
 8007838:	9902      	ldr	r1, [sp, #8]
 800783a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800783e:	9611      	str	r6, [sp, #68]	@ 0x44
 8007840:	00c0      	lsls	r0, r0, #3
 8007842:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007844:	3108      	adds	r1, #8
 8007846:	3404      	adds	r4, #4
 8007848:	f04f 0901 	mov.w	r9, #1
 800784c:	9119      	str	r1, [sp, #100]	@ 0x64
 800784e:	eb05 010e 	add.w	r1, r5, lr
 8007852:	4635      	mov	r5, r6
 8007854:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	443d      	add	r5, r7
 800785a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800785c:	9507      	str	r5, [sp, #28]
 800785e:	eb01 050e 	add.w	r5, r1, lr
 8007862:	00c9      	lsls	r1, r1, #3
 8007864:	19f7      	adds	r7, r6, r7
 8007866:	00ed      	lsls	r5, r5, #3
 8007868:	9110      	str	r1, [sp, #64]	@ 0x40
 800786a:	00d1      	lsls	r1, r2, #3
 800786c:	970a      	str	r7, [sp, #40]	@ 0x28
 800786e:	462f      	mov	r7, r5
 8007870:	9515      	str	r5, [sp, #84]	@ 0x54
 8007872:	0112      	lsls	r2, r2, #4
 8007874:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8007876:	19f4      	adds	r4, r6, r7
 8007878:	320c      	adds	r2, #12
 800787a:	3108      	adds	r1, #8
 800787c:	1975      	adds	r5, r6, r5
 800787e:	9408      	str	r4, [sp, #32]
 8007880:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007882:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8007886:	9509      	str	r5, [sp, #36]	@ 0x24
 8007888:	f100 020c 	add.w	r2, r0, #12
 800788c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800788e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8007890:	1975      	adds	r5, r6, r5
 8007892:	9216      	str	r2, [sp, #88]	@ 0x58
 8007894:	1932      	adds	r2, r6, r4
 8007896:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007898:	9505      	str	r5, [sp, #20]
 800789a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 800789e:	0179      	lsls	r1, r7, #5
 80078a0:	9204      	str	r2, [sp, #16]
 80078a2:	1972      	adds	r2, r6, r5
 80078a4:	9412      	str	r4, [sp, #72]	@ 0x48
 80078a6:	9513      	str	r5, [sp, #76]	@ 0x4c
 80078a8:	9206      	str	r2, [sp, #24]
 80078aa:	f101 0208 	add.w	r2, r1, #8
 80078ae:	921a      	str	r2, [sp, #104]	@ 0x68
 80078b0:	2200      	movs	r2, #0
 80078b2:	f102 0108 	add.w	r1, r2, #8
 80078b6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80078b8:	46cc      	mov	ip, r9
 80078ba:	460f      	mov	r7, r1
 80078bc:	910c      	str	r1, [sp, #48]	@ 0x30
 80078be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078c0:	eb0b 0e07 	add.w	lr, fp, r7
 80078c4:	9f04      	ldr	r7, [sp, #16]
 80078c6:	188e      	adds	r6, r1, r2
 80078c8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80078ca:	edd7 fa00 	vldr	s31, [r7]
 80078ce:	9f06      	ldr	r7, [sp, #24]
 80078d0:	188d      	adds	r5, r1, r2
 80078d2:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80078d4:	445e      	add	r6, fp
 80078d6:	ed97 fa00 	vldr	s30, [r7]
 80078da:	445d      	add	r5, fp
 80078dc:	9f05      	ldr	r7, [sp, #20]
 80078de:	188c      	adds	r4, r1, r2
 80078e0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80078e2:	edd7 ea00 	vldr	s29, [r7]
 80078e6:	445c      	add	r4, fp
 80078e8:	9f07      	ldr	r7, [sp, #28]
 80078ea:	1888      	adds	r0, r1, r2
 80078ec:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80078ee:	ed97 ea00 	vldr	s28, [r7]
 80078f2:	4458      	add	r0, fp
 80078f4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80078f6:	4411      	add	r1, r2
 80078f8:	441a      	add	r2, r3
 80078fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078fc:	edd7 da00 	vldr	s27, [r7]
 8007900:	4459      	add	r1, fp
 8007902:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007904:	445a      	add	r2, fp
 8007906:	930d      	str	r3, [sp, #52]	@ 0x34
 8007908:	ed97 da00 	vldr	s26, [r7]
 800790c:	9f08      	ldr	r7, [sp, #32]
 800790e:	edd7 ca00 	vldr	s25, [r7]
 8007912:	9f04      	ldr	r7, [sp, #16]
 8007914:	ed97 ca01 	vldr	s24, [r7, #4]
 8007918:	9f06      	ldr	r7, [sp, #24]
 800791a:	edd7 ba01 	vldr	s23, [r7, #4]
 800791e:	9f05      	ldr	r7, [sp, #20]
 8007920:	ed97 ba01 	vldr	s22, [r7, #4]
 8007924:	9f07      	ldr	r7, [sp, #28]
 8007926:	edd7 aa01 	vldr	s21, [r7, #4]
 800792a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800792c:	ed97 aa01 	vldr	s20, [r7, #4]
 8007930:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007932:	9b01      	ldr	r3, [sp, #4]
 8007934:	edd7 7a01 	vldr	s15, [r7, #4]
 8007938:	9f08      	ldr	r7, [sp, #32]
 800793a:	edcd 7a02 	vstr	s15, [sp, #8]
 800793e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007942:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8007944:	edcd 7a03 	vstr	s15, [sp, #12]
 8007948:	e002      	b.n	8007950 <arm_radix8_butterfly_f32+0x32c>
 800794a:	bf00      	nop
 800794c:	3f3504f3 	.word	0x3f3504f3
 8007950:	ed90 2a00 	vldr	s4, [r0]
 8007954:	44c4      	add	ip, r8
 8007956:	ed96 7a00 	vldr	s14, [r6]
 800795a:	ed94 8a00 	vldr	s16, [r4]
 800795e:	45e2      	cmp	sl, ip
 8007960:	ed52 7a01 	vldr	s15, [r2, #-4]
 8007964:	ed95 5a00 	vldr	s10, [r5]
 8007968:	ed51 5a01 	vldr	s11, [r1, #-4]
 800796c:	ee38 6a27 	vadd.f32	s12, s16, s15
 8007970:	ed9e 1a00 	vldr	s2, [lr]
 8007974:	ee78 2a67 	vsub.f32	s5, s16, s15
 8007978:	ed17 4a01 	vldr	s8, [r7, #-4]
 800797c:	ee75 3a25 	vadd.f32	s7, s10, s11
 8007980:	ee31 3a07 	vadd.f32	s6, s2, s14
 8007984:	edde 4a01 	vldr	s9, [lr, #4]
 8007988:	ee72 6a04 	vadd.f32	s13, s4, s8
 800798c:	ee75 5a65 	vsub.f32	s11, s10, s11
 8007990:	ee73 1a06 	vadd.f32	s3, s6, s12
 8007994:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8007998:	ee32 4a44 	vsub.f32	s8, s4, s8
 800799c:	ee31 1a47 	vsub.f32	s2, s2, s14
 80079a0:	ee31 7a85 	vadd.f32	s14, s3, s10
 80079a4:	ee75 7a84 	vadd.f32	s15, s11, s8
 80079a8:	ee33 3a46 	vsub.f32	s6, s6, s12
 80079ac:	ed8e 7a00 	vstr	s14, [lr]
 80079b0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80079b4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80079b8:	ed90 2a01 	vldr	s4, [r0, #4]
 80079bc:	ed95 7a01 	vldr	s14, [r5, #4]
 80079c0:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80079c4:	ed91 6a00 	vldr	s12, [r1]
 80079c8:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80079cc:	edd7 8a00 	vldr	s17, [r7]
 80079d0:	ee32 8ae7 	vsub.f32	s16, s5, s15
 80079d4:	ee72 5aa7 	vadd.f32	s11, s5, s15
 80079d8:	edd2 0a00 	vldr	s1, [r2]
 80079dc:	ee72 6a68 	vsub.f32	s13, s4, s17
 80079e0:	edd6 7a01 	vldr	s15, [r6, #4]
 80079e4:	ee77 2a46 	vsub.f32	s5, s14, s12
 80079e8:	ee37 0a06 	vadd.f32	s0, s14, s12
 80079ec:	ed94 7a01 	vldr	s14, [r4, #4]
 80079f0:	ee32 6a28 	vadd.f32	s12, s4, s17
 80079f4:	ee72 9ae6 	vsub.f32	s19, s5, s13
 80079f8:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80079fc:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8007a00:	ee77 6a20 	vadd.f32	s13, s14, s1
 8007a04:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8007a08:	ee37 7a60 	vsub.f32	s14, s14, s1
 8007a0c:	ee24 4a09 	vmul.f32	s8, s8, s18
 8007a10:	ee70 0a06 	vadd.f32	s1, s0, s12
 8007a14:	ee69 7a89 	vmul.f32	s15, s19, s18
 8007a18:	ee62 2a89 	vmul.f32	s5, s5, s18
 8007a1c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8007a20:	ee32 0a26 	vadd.f32	s0, s4, s13
 8007a24:	ee72 6a66 	vsub.f32	s13, s4, s13
 8007a28:	ee77 8a62 	vsub.f32	s17, s14, s5
 8007a2c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8007a30:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8007a34:	ee77 4a22 	vadd.f32	s9, s14, s5
 8007a38:	ee71 2a04 	vadd.f32	s5, s2, s8
 8007a3c:	ee31 7a44 	vsub.f32	s14, s2, s8
 8007a40:	ee30 1a60 	vsub.f32	s2, s0, s1
 8007a44:	ee73 1a06 	vadd.f32	s3, s6, s12
 8007a48:	ee33 6a46 	vsub.f32	s12, s6, s12
 8007a4c:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8007a50:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8007a54:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8007a58:	ee77 7a88 	vadd.f32	s15, s15, s16
 8007a5c:	ee72 3a65 	vsub.f32	s7, s4, s11
 8007a60:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8007a64:	ee72 5a25 	vadd.f32	s11, s4, s11
 8007a68:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8007a6c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8007a70:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8007a74:	ee77 2a28 	vadd.f32	s5, s14, s17
 8007a78:	ee37 7a68 	vsub.f32	s14, s14, s17
 8007a7c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8007a80:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8007a84:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8007a88:	ee70 0a20 	vadd.f32	s1, s0, s1
 8007a8c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8007a90:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8007a94:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8007a98:	edce 0a01 	vstr	s1, [lr, #4]
 8007a9c:	ee38 8a88 	vadd.f32	s16, s17, s16
 8007aa0:	449e      	add	lr, r3
 8007aa2:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8007aa6:	ee31 5a45 	vsub.f32	s10, s2, s10
 8007aaa:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8007aae:	ed86 8a00 	vstr	s16, [r6]
 8007ab2:	ee39 0a80 	vadd.f32	s0, s19, s0
 8007ab6:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007aba:	ed86 5a01 	vstr	s10, [r6, #4]
 8007abe:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8007ac2:	edcd 3a01 	vstr	s7, [sp, #4]
 8007ac6:	ed9d 5a03 	vldr	s10, [sp, #12]
 8007aca:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8007ace:	eddd 3a02 	vldr	s7, [sp, #8]
 8007ad2:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8007ad6:	ed84 0a00 	vstr	s0, [r4]
 8007ada:	ee65 4a24 	vmul.f32	s9, s10, s9
 8007ade:	ed84 3a01 	vstr	s6, [r4, #4]
 8007ae2:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8007ae6:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007aea:	eddd 3a01 	vldr	s7, [sp, #4]
 8007aee:	ee25 5a25 	vmul.f32	s10, s10, s11
 8007af2:	441e      	add	r6, r3
 8007af4:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8007af8:	441c      	add	r4, r3
 8007afa:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8007afe:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8007b02:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8007b06:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8007b0a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8007b0e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8007b12:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8007b16:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8007b1a:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8007b1e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8007b22:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8007b26:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8007b2a:	ee38 8a01 	vadd.f32	s16, s16, s2
 8007b2e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8007b32:	ee39 5a85 	vadd.f32	s10, s19, s10
 8007b36:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8007b3a:	ed02 8a01 	vstr	s16, [r2, #-4]
 8007b3e:	ee30 0a21 	vadd.f32	s0, s0, s3
 8007b42:	ed82 6a00 	vstr	s12, [r2]
 8007b46:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007b4a:	edc5 0a00 	vstr	s1, [r5]
 8007b4e:	ee33 3a28 	vadd.f32	s6, s6, s17
 8007b52:	edc5 3a01 	vstr	s7, [r5, #4]
 8007b56:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007b5a:	ed07 5a01 	vstr	s10, [r7, #-4]
 8007b5e:	edc7 4a00 	vstr	s9, [r7]
 8007b62:	441d      	add	r5, r3
 8007b64:	ed01 0a01 	vstr	s0, [r1, #-4]
 8007b68:	441a      	add	r2, r3
 8007b6a:	edc1 2a00 	vstr	s5, [r1]
 8007b6e:	441f      	add	r7, r3
 8007b70:	ed80 3a00 	vstr	s6, [r0]
 8007b74:	4419      	add	r1, r3
 8007b76:	ed80 7a01 	vstr	s14, [r0, #4]
 8007b7a:	4418      	add	r0, r3
 8007b7c:	f63f aee8 	bhi.w	8007950 <arm_radix8_butterfly_f32+0x32c>
 8007b80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007b82:	f109 0901 	add.w	r9, r9, #1
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	9b04      	ldr	r3, [sp, #16]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	9b06      	ldr	r3, [sp, #24]
 8007b92:	4413      	add	r3, r2
 8007b94:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007b96:	9306      	str	r3, [sp, #24]
 8007b98:	9b05      	ldr	r3, [sp, #20]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007b9e:	9305      	str	r3, [sp, #20]
 8007ba0:	9b07      	ldr	r3, [sp, #28]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ba6:	9307      	str	r3, [sp, #28]
 8007ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007baa:	4413      	add	r3, r2
 8007bac:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb2:	4413      	add	r3, r2
 8007bb4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb8:	9b08      	ldr	r3, [sp, #32]
 8007bba:	4413      	add	r3, r2
 8007bbc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007bbe:	9308      	str	r3, [sp, #32]
 8007bc0:	3208      	adds	r2, #8
 8007bc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bc4:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007bc6:	4599      	cmp	r9, r3
 8007bc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007bca:	f47f ae72 	bne.w	80078b2 <arm_radix8_butterfly_f32+0x28e>
 8007bce:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 8007bd2:	46c8      	mov	r8, r9
 8007bd4:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 8007bd8:	e533      	b.n	8007642 <arm_radix8_butterfly_f32+0x1e>
 8007bda:	b01f      	add	sp, #124	@ 0x7c
 8007bdc:	ecbd 8b10 	vpop	{d8-d15}
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007be4 <memset>:
 8007be4:	4402      	add	r2, r0
 8007be6:	4603      	mov	r3, r0
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d100      	bne.n	8007bee <memset+0xa>
 8007bec:	4770      	bx	lr
 8007bee:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf2:	e7f9      	b.n	8007be8 <memset+0x4>

08007bf4 <__errno>:
 8007bf4:	4b01      	ldr	r3, [pc, #4]	@ (8007bfc <__errno+0x8>)
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	2400007c 	.word	0x2400007c

08007c00 <__libc_init_array>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	4d0d      	ldr	r5, [pc, #52]	@ (8007c38 <__libc_init_array+0x38>)
 8007c04:	4c0d      	ldr	r4, [pc, #52]	@ (8007c3c <__libc_init_array+0x3c>)
 8007c06:	1b64      	subs	r4, r4, r5
 8007c08:	10a4      	asrs	r4, r4, #2
 8007c0a:	2600      	movs	r6, #0
 8007c0c:	42a6      	cmp	r6, r4
 8007c0e:	d109      	bne.n	8007c24 <__libc_init_array+0x24>
 8007c10:	4d0b      	ldr	r5, [pc, #44]	@ (8007c40 <__libc_init_array+0x40>)
 8007c12:	4c0c      	ldr	r4, [pc, #48]	@ (8007c44 <__libc_init_array+0x44>)
 8007c14:	f000 f9d2 	bl	8007fbc <_init>
 8007c18:	1b64      	subs	r4, r4, r5
 8007c1a:	10a4      	asrs	r4, r4, #2
 8007c1c:	2600      	movs	r6, #0
 8007c1e:	42a6      	cmp	r6, r4
 8007c20:	d105      	bne.n	8007c2e <__libc_init_array+0x2e>
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c28:	4798      	blx	r3
 8007c2a:	3601      	adds	r6, #1
 8007c2c:	e7ee      	b.n	8007c0c <__libc_init_array+0xc>
 8007c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c32:	4798      	blx	r3
 8007c34:	3601      	adds	r6, #1
 8007c36:	e7f2      	b.n	8007c1e <__libc_init_array+0x1e>
 8007c38:	0807eaa0 	.word	0x0807eaa0
 8007c3c:	0807eaa0 	.word	0x0807eaa0
 8007c40:	0807eaa0 	.word	0x0807eaa0
 8007c44:	0807eaa4 	.word	0x0807eaa4

08007c48 <tanhf>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	ee10 5a10 	vmov	r5, s0
 8007c4e:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007c52:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007c56:	ed2d 8b02 	vpush	{d8}
 8007c5a:	eef0 7a40 	vmov.f32	s15, s0
 8007c5e:	d30f      	bcc.n	8007c80 <tanhf+0x38>
 8007c60:	4b2a      	ldr	r3, [pc, #168]	@ (8007d0c <tanhf+0xc4>)
 8007c62:	edd3 6a00 	vldr	s13, [r3]
 8007c66:	ed93 7a00 	vldr	s14, [r3]
 8007c6a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8007c6e:	2d00      	cmp	r5, #0
 8007c70:	bfac      	ite	ge
 8007c72:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8007c76:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8007c7a:	ecbd 8b02 	vpop	{d8}
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	4a23      	ldr	r2, [pc, #140]	@ (8007d10 <tanhf+0xc8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d839      	bhi.n	8007cfa <tanhf+0xb2>
 8007c86:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 8007c8a:	d207      	bcs.n	8007c9c <tanhf+0x54>
 8007c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8007d0c <tanhf+0xc4>)
 8007c8e:	ed93 0a00 	vldr	s0, [r3]
 8007c92:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c96:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c9a:	e7ee      	b.n	8007c7a <tanhf+0x32>
 8007c9c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8007ca0:	4c1c      	ldr	r4, [pc, #112]	@ (8007d14 <tanhf+0xcc>)
 8007ca2:	d319      	bcc.n	8007cd8 <tanhf+0x90>
 8007ca4:	f000 f982 	bl	8007fac <fabsf>
 8007ca8:	edd4 7a00 	vldr	s15, [r4]
 8007cac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007cb0:	f000 f834 	bl	8007d1c <expm1f>
 8007cb4:	4b15      	ldr	r3, [pc, #84]	@ (8007d0c <tanhf+0xc4>)
 8007cb6:	edd3 7a00 	vldr	s15, [r3]
 8007cba:	ed94 6a00 	vldr	s12, [r4]
 8007cbe:	ed94 7a00 	vldr	s14, [r4]
 8007cc2:	ee37 7a00 	vadd.f32	s14, s14, s0
 8007cc6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8007cca:	ee37 0ae6 	vsub.f32	s0, s15, s13
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	bfb8      	it	lt
 8007cd2:	eeb1 0a40 	vneglt.f32	s0, s0
 8007cd6:	e7d0      	b.n	8007c7a <tanhf+0x32>
 8007cd8:	ed94 8a00 	vldr	s16, [r4]
 8007cdc:	f000 f966 	bl	8007fac <fabsf>
 8007ce0:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8007ce4:	f000 f81a 	bl	8007d1c <expm1f>
 8007ce8:	edd4 7a00 	vldr	s15, [r4]
 8007cec:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007cf0:	eeb1 7a40 	vneg.f32	s14, s0
 8007cf4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007cf8:	e7e9      	b.n	8007cce <tanhf+0x86>
 8007cfa:	4b04      	ldr	r3, [pc, #16]	@ (8007d0c <tanhf+0xc4>)
 8007cfc:	ed93 0a00 	vldr	s0, [r3]
 8007d00:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <tanhf+0xd0>)
 8007d02:	edd3 7a00 	vldr	s15, [r3]
 8007d06:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007d0a:	e7e0      	b.n	8007cce <tanhf+0x86>
 8007d0c:	0807ea9c 	.word	0x0807ea9c
 8007d10:	41afffff 	.word	0x41afffff
 8007d14:	0807ea98 	.word	0x0807ea98
 8007d18:	0807ea94 	.word	0x0807ea94

08007d1c <expm1f>:
 8007d1c:	ee10 3a10 	vmov	r3, s0
 8007d20:	4a83      	ldr	r2, [pc, #524]	@ (8007f30 <expm1f+0x214>)
 8007d22:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 8007d26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d91e      	bls.n	8007d6c <expm1f+0x50>
 8007d2e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007d32:	d902      	bls.n	8007d3a <expm1f+0x1e>
 8007d34:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d38:	4770      	bx	lr
 8007d3a:	d105      	bne.n	8007d48 <expm1f+0x2c>
 8007d3c:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8007d40:	2800      	cmp	r0, #0
 8007d42:	fe00 0a27 	vseleq.f32	s0, s0, s15
 8007d46:	4770      	bx	lr
 8007d48:	b920      	cbnz	r0, 8007d54 <expm1f+0x38>
 8007d4a:	4a7a      	ldr	r2, [pc, #488]	@ (8007f34 <expm1f+0x218>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d963      	bls.n	8007e18 <expm1f+0xfc>
 8007d50:	f000 b926 	b.w	8007fa0 <__math_oflowf>
 8007d54:	eddf 7a78 	vldr	s15, [pc, #480]	@ 8007f38 <expm1f+0x21c>
 8007d58:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007d5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d64:	d551      	bpl.n	8007e0a <expm1f+0xee>
 8007d66:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8007d6a:	4770      	bx	lr
 8007d6c:	4a73      	ldr	r2, [pc, #460]	@ (8007f3c <expm1f+0x220>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d972      	bls.n	8007e58 <expm1f+0x13c>
 8007d72:	4a73      	ldr	r2, [pc, #460]	@ (8007f40 <expm1f+0x224>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d868      	bhi.n	8007e4a <expm1f+0x12e>
 8007d78:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8007f44 <expm1f+0x228>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d13d      	bne.n	8007dfc <expm1f+0xe0>
 8007d80:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007d84:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007f48 <expm1f+0x22c>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	ee37 0a66 	vsub.f32	s0, s14, s13
 8007d8e:	ee77 7a40 	vsub.f32	s15, s14, s0
 8007d92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d96:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8007d9a:	ee20 4a25 	vmul.f32	s8, s0, s11
 8007d9e:	ed9f 6a6b 	vldr	s12, [pc, #428]	@ 8007f4c <expm1f+0x230>
 8007da2:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8007f50 <expm1f+0x234>
 8007da6:	ed9f 5a6b 	vldr	s10, [pc, #428]	@ 8007f54 <expm1f+0x238>
 8007daa:	ee20 7a04 	vmul.f32	s14, s0, s8
 8007dae:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 8007db2:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007db6:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 8007f58 <expm1f+0x23c>
 8007dba:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007dbe:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8007f5c <expm1f+0x240>
 8007dc2:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007dc6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007dca:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007dce:	eef0 6a46 	vmov.f32	s13, s12
 8007dd2:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007dd6:	eee4 4a66 	vfms.f32	s9, s8, s13
 8007dda:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 8007dde:	eea0 4a64 	vfms.f32	s8, s0, s9
 8007de2:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8007de6:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8007dea:	ee66 6a87 	vmul.f32	s13, s13, s14
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d140      	bne.n	8007e74 <expm1f+0x158>
 8007df2:	ee90 7a26 	vfnms.f32	s14, s0, s13
 8007df6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007dfa:	4770      	bx	lr
 8007dfc:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007e00:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8007f60 <expm1f+0x244>
 8007e04:	f04f 33ff 	mov.w	r3, #4294967295
 8007e08:	e7bf      	b.n	8007d8a <expm1f+0x6e>
 8007e0a:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8007f64 <expm1f+0x248>
 8007e0e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8007e12:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 8007e16:	e005      	b.n	8007e24 <expm1f+0x108>
 8007e18:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8007f64 <expm1f+0x248>
 8007e1c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8007e20:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007e24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e28:	eeb0 7a40 	vmov.f32	s14, s0
 8007e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007e34:	ee17 3a90 	vmov	r3, s15
 8007e38:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8007f44 <expm1f+0x228>
 8007e3c:	eea6 7ae7 	vfms.f32	s14, s13, s15
 8007e40:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8007f48 <expm1f+0x22c>
 8007e44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007e48:	e79f      	b.n	8007d8a <expm1f+0x6e>
 8007e4a:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8007f64 <expm1f+0x248>
 8007e4e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d0e4      	beq.n	8007e20 <expm1f+0x104>
 8007e56:	e7dc      	b.n	8007e12 <expm1f+0xf6>
 8007e58:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 8007e5c:	d208      	bcs.n	8007e70 <expm1f+0x154>
 8007e5e:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8007f68 <expm1f+0x24c>
 8007e62:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007e66:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8007e6a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007e6e:	4770      	bx	lr
 8007e70:	2300      	movs	r3, #0
 8007e72:	e790      	b.n	8007d96 <expm1f+0x7a>
 8007e74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8007e7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e82:	d106      	bne.n	8007e92 <expm1f+0x176>
 8007e84:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007e88:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 8007e8c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8007e90:	4770      	bx	lr
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d118      	bne.n	8007ec8 <expm1f+0x1ac>
 8007e96:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 8007e9a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea2:	bf5b      	ittet	pl
 8007ea4:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8007ea8:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 8007eac:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8007eb0:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8007eb4:	bf43      	ittte	mi
 8007eb6:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 8007eba:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 8007ebe:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8007ec2:	eeb0 0a46 	vmovpl.f32	s0, s12
 8007ec6:	4770      	bx	lr
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	2a39      	cmp	r2, #57	@ 0x39
 8007ecc:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8007ed0:	d90b      	bls.n	8007eea <expm1f+0x1ce>
 8007ed2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007ed6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007eda:	ee17 3a90 	vmov	r3, s15
 8007ede:	4419      	add	r1, r3
 8007ee0:	ee07 1a90 	vmov	s15, r1
 8007ee4:	ee37 0ac6 	vsub.f32	s0, s15, s12
 8007ee8:	4770      	bx	lr
 8007eea:	2b16      	cmp	r3, #22
 8007eec:	dc11      	bgt.n	8007f12 <expm1f+0x1f6>
 8007eee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ef2:	fa42 f303 	asr.w	r3, r2, r3
 8007ef6:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 8007efa:	ee07 3a10 	vmov	s14, r3
 8007efe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f06:	ee17 3a90 	vmov	r3, s15
 8007f0a:	440b      	add	r3, r1
 8007f0c:	ee00 3a10 	vmov	s0, r3
 8007f10:	4770      	bx	lr
 8007f12:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8007f16:	05db      	lsls	r3, r3, #23
 8007f18:	ee07 3a10 	vmov	s14, r3
 8007f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f20:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007f24:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007f28:	ee17 3a90 	vmov	r3, s15
 8007f2c:	e7ed      	b.n	8007f0a <expm1f+0x1ee>
 8007f2e:	bf00      	nop
 8007f30:	4195b843 	.word	0x4195b843
 8007f34:	42b17217 	.word	0x42b17217
 8007f38:	0da24260 	.word	0x0da24260
 8007f3c:	3eb17218 	.word	0x3eb17218
 8007f40:	3f851591 	.word	0x3f851591
 8007f44:	3f317180 	.word	0x3f317180
 8007f48:	3717f7d1 	.word	0x3717f7d1
 8007f4c:	b457edbb 	.word	0xb457edbb
 8007f50:	36867e54 	.word	0x36867e54
 8007f54:	bd088889 	.word	0xbd088889
 8007f58:	b8a670cd 	.word	0xb8a670cd
 8007f5c:	3ad00d01 	.word	0x3ad00d01
 8007f60:	b717f7d1 	.word	0xb717f7d1
 8007f64:	3fb8aa3b 	.word	0x3fb8aa3b
 8007f68:	7149f2ca 	.word	0x7149f2ca

08007f6c <with_errnof>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	ed2d 8b02 	vpush	{d8}
 8007f72:	eeb0 8a40 	vmov.f32	s16, s0
 8007f76:	4604      	mov	r4, r0
 8007f78:	f7ff fe3c 	bl	8007bf4 <__errno>
 8007f7c:	eeb0 0a48 	vmov.f32	s0, s16
 8007f80:	ecbd 8b02 	vpop	{d8}
 8007f84:	6004      	str	r4, [r0, #0]
 8007f86:	bd10      	pop	{r4, pc}

08007f88 <xflowf>:
 8007f88:	b130      	cbz	r0, 8007f98 <xflowf+0x10>
 8007f8a:	eef1 7a40 	vneg.f32	s15, s0
 8007f8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007f92:	2022      	movs	r0, #34	@ 0x22
 8007f94:	f7ff bfea 	b.w	8007f6c <with_errnof>
 8007f98:	eef0 7a40 	vmov.f32	s15, s0
 8007f9c:	e7f7      	b.n	8007f8e <xflowf+0x6>
	...

08007fa0 <__math_oflowf>:
 8007fa0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007fa8 <__math_oflowf+0x8>
 8007fa4:	f7ff bff0 	b.w	8007f88 <xflowf>
 8007fa8:	70000000 	.word	0x70000000

08007fac <fabsf>:
 8007fac:	ee10 3a10 	vmov	r3, s0
 8007fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fb4:	ee00 3a10 	vmov	s0, r3
 8007fb8:	4770      	bx	lr
	...

08007fbc <_init>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr

08007fc8 <_fini>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	bf00      	nop
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr
