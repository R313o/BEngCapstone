
STM32H743-DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f20  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013538  080071c0  080071c0  000081c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a6f8  0801a6f8  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a700  0801a700  0001b700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a704  0801a704  0001b704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0801a708  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcm_bss     00000000  20000000  20000000  0001c06c  2**0
                  CONTENTS
  8 .dtcm_data    00000000  20000000  20000000  0001c06c  2**0
                  CONTENTS
  9 .bss          0001136c  2400006c  2400006c  0001c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240113d8  240113d8  0001c06c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020aaa  00000000  00000000  0001c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c17  00000000  00000000  0003cb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000f7cc  00000000  00000000  0004075b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  0004ff28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c44  00000000  00000000  000510e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000046dc  00000000  00000000  00052d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022b5c  00000000  00000000  00057400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001769d3  00000000  00000000  00079f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  001f092f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039a4  00000000  00000000  001f09e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  001f4388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000008e8  00000000  00000000  001f43fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000040  00000000  00000000  001f4ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080071a8 	.word	0x080071a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	080071a8 	.word	0x080071a8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <HAL_ADC_ConvHalfCpltCallback>:
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000380:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000382:	f003 021f 	and.w	r2, r3, #31
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000386:	f3bf 8f4f 	dsb	sy
 800038a:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800038e:	480a      	ldr	r0, [pc, #40]	@ (80003b8 <HAL_ADC_ConvHalfCpltCallback+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8000390:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000392:	f8c0 325c 	str.w	r3, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000396:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000398:	1aca      	subs	r2, r1, r3
 800039a:	2a00      	cmp	r2, #0
 800039c:	dcf9      	bgt.n	8000392 <HAL_ADC_ConvHalfCpltCallback+0x12>
 800039e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003a2:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[0â€¦BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)adcInput,
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcHalfComplete(&apipe, adcInput);
 80003a6:	4805      	ldr	r0, [pc, #20]	@ (80003bc <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80003a8:	4902      	ldr	r1, [pc, #8]	@ (80003b4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80003aa:	6943      	ldr	r3, [r0, #20]
 80003ac:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 80003b0:	4718      	bx	r3
 80003b2:	bf00      	nop
 80003b4:	2400108c 	.word	0x2400108c
 80003b8:	e000ed00 	.word	0xe000ed00
 80003bc:	240110a4 	.word	0x240110a4

080003c0 <HAL_ADC_ConvCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80003c0:	490d      	ldr	r1, [pc, #52]	@ (80003f8 <HAL_ADC_ConvCpltCallback+0x38>)
 80003c2:	f001 021f 	and.w	r2, r1, #31
 80003c6:	f502 6300 	add.w	r3, r2, #2048	@ 0x800
  __ASM volatile ("dsb 0xF":::"memory");
 80003ca:	f3bf 8f4f 	dsb	sy
 80003ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003d2:	480a      	ldr	r0, [pc, #40]	@ (80003fc <HAL_ADC_ConvCpltCallback+0x3c>)
 80003d4:	4411      	add	r1, r2
 80003d6:	1aca      	subs	r2, r1, r3
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80003d8:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 80003da:	2b00      	cmp	r3, #0
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80003dc:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
      } while ( op_size > 0 );
 80003e0:	dcf9      	bgt.n	80003d6 <HAL_ADC_ConvCpltCallback+0x16>
 80003e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003e6:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[BUFFER_SIZEâ€¦2*BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)&adcInput[BUFFER_SIZE],
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcComplete(&apipe, adcInput);
 80003ea:	4805      	ldr	r0, [pc, #20]	@ (8000400 <HAL_ADC_ConvCpltCallback+0x40>)
 80003ec:	4905      	ldr	r1, [pc, #20]	@ (8000404 <HAL_ADC_ConvCpltCallback+0x44>)
 80003ee:	6983      	ldr	r3, [r0, #24]
 80003f0:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 80003f4:	4718      	bx	r3
 80003f6:	bf00      	nop
 80003f8:	2400188c 	.word	0x2400188c
 80003fc:	e000ed00 	.word	0xe000ed00
 8000400:	240110a4 	.word	0x240110a4
 8000404:	2400108c 	.word	0x2400108c

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b530      	push	{r4, r5, lr}
 800040a:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040c:	224c      	movs	r2, #76	@ 0x4c
 800040e:	2100      	movs	r1, #0
 8000410:	a80a      	add	r0, sp, #40	@ 0x28
 8000412:	f006 f9f5 	bl	8006800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000416:	2220      	movs	r2, #32
 8000418:	2100      	movs	r1, #0
 800041a:	a802      	add	r0, sp, #8
 800041c:	f006 f9f0 	bl	8006800 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000420:	2002      	movs	r0, #2
 8000422:	f003 fa7b 	bl	800391c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000426:	4a24      	ldr	r2, [pc, #144]	@ (80004b8 <SystemClock_Config+0xb0>)
 8000428:	2100      	movs	r1, #0
 800042a:	4b24      	ldr	r3, [pc, #144]	@ (80004bc <SystemClock_Config+0xb4>)
 800042c:	9101      	str	r1, [sp, #4]
 800042e:	6990      	ldr	r0, [r2, #24]
 8000430:	f440 4440 	orr.w	r4, r0, #49152	@ 0xc000
 8000434:	6194      	str	r4, [r2, #24]
 8000436:	6995      	ldr	r5, [r2, #24]
 8000438:	f405 4140 	and.w	r1, r5, #49152	@ 0xc000
 800043c:	9101      	str	r1, [sp, #4]
 800043e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000440:	f040 0401 	orr.w	r4, r0, #1
 8000444:	62dc      	str	r4, [r3, #44]	@ 0x2c
 8000446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000448:	f003 0501 	and.w	r5, r3, #1
 800044c:	9501      	str	r5, [sp, #4]
 800044e:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000450:	6991      	ldr	r1, [r2, #24]
 8000452:	048b      	lsls	r3, r1, #18
 8000454:	d5fc      	bpl.n	8000450 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000456:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000458:	250c      	movs	r5, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800045a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800045c:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLN = 60;
 800045e:	213c      	movs	r1, #60	@ 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000460:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000462:	951a      	str	r5, [sp, #104]	@ 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000464:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000466:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046a:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046c:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800046e:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000470:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000472:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000474:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000478:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 60;
 800047c:	e9cd 5115 	strd	r5, r1, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000480:	f003 fae2 	bl	8003a48 <HAL_RCC_OscConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	b108      	cbz	r0, 800048c <SystemClock_Config+0x84>
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048a:	e7fe      	b.n	800048a <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	223f      	movs	r2, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800048e:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000490:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000494:	2508      	movs	r5, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000496:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000498:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800049a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800049c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049e:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004a0:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004a2:	e9cd 5405 	strd	r5, r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004a6:	e9cd 4c07 	strd	r4, ip, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004aa:	f003 fe49 	bl	8004140 <HAL_RCC_ClockConfig>
 80004ae:	b108      	cbz	r0, 80004b4 <SystemClock_Config+0xac>
 80004b0:	b672      	cpsid	i
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <SystemClock_Config+0xaa>
}
 80004b4:	b01f      	add	sp, #124	@ 0x7c
 80004b6:	bd30      	pop	{r4, r5, pc}
 80004b8:	58024800 	.word	0x58024800
 80004bc:	58000400 	.word	0x58000400

080004c0 <PeriphCommonClock_Config>:
{
 80004c0:	b500      	push	{lr}
 80004c2:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004c4:	22b8      	movs	r2, #184	@ 0xb8
 80004c6:	2100      	movs	r1, #0
 80004c8:	a802      	add	r0, sp, #8
 80004ca:	f006 f999 	bl	8006800 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80004ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80004d2:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004d4:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80004d6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004da:	f004 f8c3 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 80004de:	b108      	cbz	r0, 80004e4 <PeriphCommonClock_Config+0x24>
 80004e0:	b672      	cpsid	i
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <PeriphCommonClock_Config+0x22>
}
 80004e4:	b031      	add	sp, #196	@ 0xc4
 80004e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80004ea:	bf00      	nop

080004ec <main>:
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004ec:	2400      	movs	r4, #0
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004ee:	2601      	movs	r6, #1
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004f0:	f240 1501 	movw	r5, #257	@ 0x101
{
 80004f4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80004f8:	b093      	sub	sp, #76	@ 0x4c
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004fa:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 80004fe:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
    HAL_MPU_Disable();
 8000502:	f001 fd43 	bl	8001f8c <HAL_MPU_Disable>
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000506:	f248 731f 	movw	r3, #34591	@ 0x871f
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800050a:	a809      	add	r0, sp, #36	@ 0x24
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800050c:	950c      	str	r5, [sp, #48]	@ 0x30
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800050e:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000512:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000516:	f001 fd57 	bl	8001fc8 <HAL_MPU_ConfigRegion>
    MPU_InitStruct.BaseAddress = 0xC0000000;
 800051a:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
    MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800051e:	4a73      	ldr	r2, [pc, #460]	@ (80006ec <main+0x200>)
 8000520:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000524:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
    MPU_InitStruct.BaseAddress = 0xC0000000;
 8000528:	900a      	str	r0, [sp, #40]	@ 0x28
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800052a:	a809      	add	r0, sp, #36	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4d70      	ldr	r5, [pc, #448]	@ (80006f0 <main+0x204>)
    MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800052e:	e9cd 210b 	strd	r2, r1, [sp, #44]	@ 0x2c
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000532:	f001 fd49 	bl	8001fc8 <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000536:	2004      	movs	r0, #4
 8000538:	f001 fd36 	bl	8001fa8 <HAL_MPU_Enable>
  HAL_Init();
 800053c:	f000 fd3c 	bl	8000fb8 <HAL_Init>
  SystemClock_Config();
 8000540:	f7ff ff62 	bl	8000408 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000544:	f7ff ffbc 	bl	80004c0 <PeriphCommonClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	f8d5 70e0 	ldr.w	r7, [r5, #224]	@ 0xe0
 800054c:	4337      	orrs	r7, r6
 800054e:	f8c5 70e0 	str.w	r7, [r5, #224]	@ 0xe0
 8000552:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000556:	4033      	ands	r3, r6
 8000558:	9304      	str	r3, [sp, #16]
 800055a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055c:	f8d5 00e0 	ldr.w	r0, [r5, #224]	@ 0xe0
 8000560:	f040 0204 	orr.w	r2, r0, #4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000564:	4863      	ldr	r0, [pc, #396]	@ (80006f4 <main+0x208>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	f8c5 20e0 	str.w	r2, [r5, #224]	@ 0xe0
 800056a:	f8d5 10e0 	ldr.w	r1, [r5, #224]	@ 0xe0
 800056e:	f001 0704 	and.w	r7, r1, #4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000572:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000574:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 8000576:	2708      	movs	r7, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000578:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 800057a:	9709      	str	r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800057c:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000584:	f002 ffc0 	bl	8003508 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);   // set high
 8000588:	4639      	mov	r1, r7
 800058a:	4632      	mov	r2, r6
 800058c:	4859      	ldr	r0, [pc, #356]	@ (80006f4 <main+0x208>)
 800058e:	f003 f9c1 	bl	8003914 <HAL_GPIO_WritePin>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000592:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000596:	4622      	mov	r2, r4
 8000598:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800059c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 80005a2:	f8d5 50d8 	ldr.w	r5, [r5, #216]	@ 0xd8
 80005a6:	4035      	ands	r5, r6
 80005a8:	9503      	str	r5, [sp, #12]
 80005aa:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005ac:	f001 fc8e 	bl	8001ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005b0:	200b      	movs	r0, #11
  hadc1.Instance = ADC1;
 80005b2:	4d51      	ldr	r5, [pc, #324]	@ (80006f8 <main+0x20c>)
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005b4:	f001 fcc6 	bl	8001f44 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005b8:	4622      	mov	r2, r4
 80005ba:	4621      	mov	r1, r4
 80005bc:	200c      	movs	r0, #12
 80005be:	f001 fc85 	bl	8001ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005c2:	200c      	movs	r0, #12
 80005c4:	f001 fcbe 	bl	8001f44 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005cc:	f44f 619c 	mov.w	r1, #1248	@ 0x4e0
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80005d0:	2303      	movs	r3, #3
  ADC_MultiModeTypeDef multimode = {0};
 80005d2:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d4:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	940f      	str	r4, [sp, #60]	@ 0x3c
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005d8:	612f      	str	r7, [r5, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005da:	f44f 6780 	mov.w	r7, #1024	@ 0x400
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005de:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e0:	772c      	strb	r4, [r5, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 80005e2:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.NbrOfConversion = 1;
 80005e6:	61ae      	str	r6, [r5, #24]
  hadc1.Init.Oversampling.Ratio = 1;
 80005e8:	63ee      	str	r6, [r5, #60]	@ 0x3c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80005ea:	62eb      	str	r3, [r5, #44]	@ 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ec:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 80005f0:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80005f4:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  ADC_MultiModeTypeDef multimode = {0};
 80005f8:	e9cd 4407 	strd	r4, r4, [sp, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fc:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000600:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000604:	4c3d      	ldr	r4, [pc, #244]	@ (80006fc <main+0x210>)
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000606:	e9c5 1709 	strd	r1, r7, [r5, #36]	@ 0x24
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060a:	e9c5 4200 	strd	r4, r2, [r5]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060e:	f001 fa81 	bl	8001b14 <HAL_ADC_Init>
 8000612:	b108      	cbz	r0, 8000618 <main+0x12c>
 8000614:	b672      	cpsid	i
  while (1)
 8000616:	e7fe      	b.n	8000616 <main+0x12a>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000618:	9006      	str	r0, [sp, #24]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800061a:	a906      	add	r1, sp, #24
 800061c:	4628      	mov	r0, r5
 800061e:	f001 fbe1 	bl	8001de4 <HAL_ADCEx_MultiModeConfigChannel>
 8000622:	4604      	mov	r4, r0
 8000624:	b108      	cbz	r0, 800062a <main+0x13e>
 8000626:	b672      	cpsid	i
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0x13c>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800062c:	2206      	movs	r2, #6
 800062e:	4d34      	ldr	r5, [pc, #208]	@ (8000700 <main+0x214>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000630:	2705      	movs	r7, #5
 8000632:	f240 78ff 	movw	r8, #2047	@ 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000636:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	a909      	add	r1, sp, #36	@ 0x24
  sConfig.Offset = 0;
 800063a:	940e      	str	r4, [sp, #56]	@ 0x38
  sConfig.OffsetSignedSaturation = DISABLE;
 800063c:	f88d 403d 	strb.w	r4, [sp, #61]	@ 0x3d
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000640:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000642:	e9cd 5209 	strd	r5, r2, [sp, #36]	@ 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000646:	e9cd 780b 	strd	r7, r8, [sp, #44]	@ 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	f000 fe87 	bl	800135c <HAL_ADC_ConfigChannel>
 800064e:	b108      	cbz	r0, 8000654 <main+0x168>
 8000650:	b672      	cpsid	i
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x166>
  htim8.Instance = TIM8;
 8000654:	4c2b      	ldr	r4, [pc, #172]	@ (8000704 <main+0x218>)
  htim8.Init.Prescaler = 50-1;
 8000656:	2531      	movs	r5, #49	@ 0x31
 8000658:	492b      	ldr	r1, [pc, #172]	@ (8000708 <main+0x21c>)
  htim8.Init.Period = 100-1;
 800065a:	2263      	movs	r2, #99	@ 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	9008      	str	r0, [sp, #32]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	60a0      	str	r0, [r4, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000660:	61a0      	str	r0, [r4, #24]
  htim8.Init.Period = 100-1;
 8000662:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000664:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8000668:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066c:	e9cd 0006 	strd	r0, r0, [sp, #24]
  htim8.Init.RepetitionCounter = 0;
 8000670:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000674:	4620      	mov	r0, r4
  htim8.Init.Prescaler = 50-1;
 8000676:	e9c4 1500 	strd	r1, r5, [r4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800067a:	f005 faa5 	bl	8005bc8 <HAL_TIM_Base_Init>
 800067e:	b108      	cbz	r0, 8000684 <main+0x198>
 8000680:	b672      	cpsid	i
  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0x196>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000684:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000688:	a909      	add	r1, sp, #36	@ 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068a:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800068c:	4620      	mov	r0, r4
 800068e:	f005 fb8f 	bl	8005db0 <HAL_TIM_ConfigClockSource>
 8000692:	4607      	mov	r7, r0
 8000694:	b108      	cbz	r0, 800069a <main+0x1ae>
 8000696:	b672      	cpsid	i
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x1ac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800069a:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800069c:	a906      	add	r1, sp, #24
 800069e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006a0:	9306      	str	r3, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a2:	e9cd 7707 	strd	r7, r7, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80006a6:	f005 fc4b 	bl	8005f40 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	4601      	mov	r1, r0
 80006ac:	b108      	cbz	r0, 80006b2 <main+0x1c6>
 80006ae:	b672      	cpsid	i
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x1c4>
  DAC_ChannelConfTypeDef sConfig = {0};
 80006b2:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 80006b4:	4c15      	ldr	r4, [pc, #84]	@ (800070c <main+0x220>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80006b6:	eb0d 0002 	add.w	r0, sp, r2
 80006ba:	f006 f8a1 	bl	8006800 <memset>
  hdac1.Instance = DAC1;
 80006be:	4914      	ldr	r1, [pc, #80]	@ (8000710 <main+0x224>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006c0:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 80006c2:	6021      	str	r1, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006c4:	f001 fcb0 	bl	8002028 <HAL_DAC_Init>
 80006c8:	4602      	mov	r2, r0
 80006ca:	b108      	cbz	r0, 80006d0 <main+0x1e4>
 80006cc:	b672      	cpsid	i
  while (1)
 80006ce:	e7fe      	b.n	80006ce <main+0x1e2>
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80006d0:	251e      	movs	r5, #30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006d2:	a909      	add	r1, sp, #36	@ 0x24
 80006d4:	4620      	mov	r0, r4
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006d6:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80006d8:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006dc:	e9cd 260b 	strd	r2, r6, [sp, #44]	@ 0x2c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006e0:	f001 fd86 	bl	80021f0 <HAL_DAC_ConfigChannel>
 80006e4:	b1b0      	cbz	r0, 8000714 <main+0x228>
 80006e6:	b672      	cpsid	i
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x1fc>
 80006ea:	bf00      	nop
 80006ec:	03010019 	.word	0x03010019
 80006f0:	58024400 	.word	0x58024400
 80006f4:	58020800 	.word	0x58020800
 80006f8:	24011220 	.word	0x24011220
 80006fc:	40022000 	.word	0x40022000
 8000700:	43210000 	.word	0x43210000
 8000704:	240110d0 	.word	0x240110d0
 8000708:	40010400 	.word	0x40010400
 800070c:	24011194 	.word	0x24011194
 8000710:	40007400 	.word	0x40007400
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000714:	4f7c      	ldr	r7, [pc, #496]	@ (8000908 <main+0x41c>)
 8000716:	697e      	ldr	r6, [r7, #20]
 8000718:	f416 3280 	ands.w	r2, r6, #65536	@ 0x10000
 800071c:	d124      	bne.n	8000768 <main+0x27c>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800071e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000722:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8000726:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800072e:	f3c0 344e 	ubfx	r4, r0, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000732:	f3c0 09c9 	ubfx	r9, r0, #3, #10
 8000736:	0166      	lsls	r6, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000738:	ea06 0103 	and.w	r1, r6, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800073c:	46ca      	mov	sl, r9
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800073e:	ea41 758a 	orr.w	r5, r1, sl, lsl #30
      } while (ways-- != 0U);
 8000742:	f1ba 0a01 	subs.w	sl, sl, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000746:	f8c7 5260 	str.w	r5, [r7, #608]	@ 0x260
      } while (ways-- != 0U);
 800074a:	d2f8      	bcs.n	800073e <main+0x252>
    } while(sets-- != 0U);
 800074c:	3e20      	subs	r6, #32
 800074e:	f116 0f20 	cmn.w	r6, #32
 8000752:	d1f1      	bne.n	8000738 <main+0x24c>
 8000754:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	f442 3080 	orr.w	r0, r2, #65536	@ 0x10000
 800075e:	6178      	str	r0, [r7, #20]
 8000760:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000764:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000768:	4f67      	ldr	r7, [pc, #412]	@ (8000908 <main+0x41c>)
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	f413 3400 	ands.w	r4, r3, #131072	@ 0x20000
 8000770:	d111      	bne.n	8000796 <main+0x2aa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000772:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000776:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800077a:	f8c7 4250 	str.w	r4, [r7, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800077e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000782:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000786:	6979      	ldr	r1, [r7, #20]
 8000788:	f441 3500 	orr.w	r5, r1, #131072	@ 0x20000
 800078c:	617d      	str	r5, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800078e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000792:	f3bf 8f6f 	isb	sy
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 8000796:	4e5c      	ldr	r6, [pc, #368]	@ (8000908 <main+0x41c>)
  DWT->CYCCNT  = 0;                                // clear counter
 8000798:	2400      	movs	r4, #0
 800079a:	4f5c      	ldr	r7, [pc, #368]	@ (800090c <main+0x420>)
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 800079c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 80007a0:	f8d6 20fc 	ldr.w	r2, [r6, #252]	@ 0xfc
 80007a4:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000944 <main+0x458>
 80007a8:	f042 7080 	orr.w	r0, r2, #16777216	@ 0x1000000
 80007ac:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800091c <main+0x430>
 80007b0:	f8df a194 	ldr.w	sl, [pc, #404]	@ 8000948 <main+0x45c>
 80007b4:	f5a8 4930 	sub.w	r9, r8, #45056	@ 0xb000
 80007b8:	f8c6 00fc 	str.w	r0, [r6, #252]	@ 0xfc
  DWT->CYCCNT  = 0;                                // clear counter
 80007bc:	607c      	str	r4, [r7, #4]
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 80007be:	683b      	ldr	r3, [r7, #0]
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80007c0:	4853      	ldr	r0, [pc, #332]	@ (8000910 <main+0x424>)
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 80007c2:	f043 0501 	orr.w	r5, r3, #1
 80007c6:	603d      	str	r5, [r7, #0]
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 80007c8:	f005 fc44 	bl	8006054 <arm_rfft_fast_init_f32>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80007cc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80007d0:	4621      	mov	r1, r4
 80007d2:	4850      	ldr	r0, [pc, #320]	@ (8000914 <main+0x428>)
 80007d4:	f001 faaa 	bl	8001d2c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcInput, BUFFER_SIZE*2);
 80007d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80007dc:	494e      	ldr	r1, [pc, #312]	@ (8000918 <main+0x42c>)
 80007de:	484d      	ldr	r0, [pc, #308]	@ (8000914 <main+0x428>)
 80007e0:	f001 f824 	bl	800182c <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 80007e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007e8:	4a4c      	ldr	r2, [pc, #304]	@ (800091c <main+0x430>)
 80007ea:	4621      	mov	r1, r4
 80007ec:	484c      	ldr	r0, [pc, #304]	@ (8000920 <main+0x434>)
 80007ee:	9400      	str	r4, [sp, #0]
 80007f0:	f001 fc30 	bl	8002054 <HAL_DAC_Start_DMA>
            printf("SDRAM Mismatch at index %lu: wrote %lu, read %lu\n", i, i, sdram[i]);
 80007f4:	4f4b      	ldr	r7, [pc, #300]	@ (8000924 <main+0x438>)
  HAL_TIM_Base_Start(&htim8);
 80007f6:	484c      	ldr	r0, [pc, #304]	@ (8000928 <main+0x43c>)
 80007f8:	f005 fa8c 	bl	8005d14 <HAL_TIM_Base_Start>
  pipeInit(&apipe);
 80007fc:	484b      	ldr	r0, [pc, #300]	@ (800092c <main+0x440>)
 80007fe:	f000 f975 	bl	8000aec <pipeInit>
    printf("Starting SDRAM Test...\n");
 8000802:	f04f 4640 	mov.w	r6, #3221225472	@ 0xc0000000
    for (uint32_t i = 0; i < SDRAM_WORD_COUNT; i++) {
 8000806:	2400      	movs	r4, #0
    printf("Starting SDRAM Test...\n");
 8000808:	4849      	ldr	r0, [pc, #292]	@ (8000930 <main+0x444>)
 800080a:	f005 ff19 	bl	8006640 <puts>
        sdram[i] = i;
 800080e:	46b4      	mov	ip, r6
    for (uint32_t i = 0; i < SDRAM_WORD_COUNT; i++) {
 8000810:	1c61      	adds	r1, r4, #1
 8000812:	1ca2      	adds	r2, r4, #2
 8000814:	1ce0      	adds	r0, r4, #3
        sdram[i] = i;
 8000816:	f84c 4b04 	str.w	r4, [ip], #4
    for (uint32_t i = 0; i < SDRAM_WORD_COUNT; i++) {
 800081a:	1d23      	adds	r3, r4, #4
        sdram[i] = i;
 800081c:	6071      	str	r1, [r6, #4]
    for (uint32_t i = 0; i < SDRAM_WORD_COUNT; i++) {
 800081e:	1d65      	adds	r5, r4, #5
        sdram[i] = i;
 8000820:	f8cc 2004 	str.w	r2, [ip, #4]
    for (uint32_t i = 0; i < SDRAM_WORD_COUNT; i++) {
 8000824:	1da1      	adds	r1, r4, #6
 8000826:	1de2      	adds	r2, r4, #7
 8000828:	3408      	adds	r4, #8
        sdram[i] = i;
 800082a:	60f0      	str	r0, [r6, #12]
    for (uint32_t i = 0; i < SDRAM_WORD_COUNT; i++) {
 800082c:	3620      	adds	r6, #32
 800082e:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
        sdram[i] = i;
 8000832:	f846 3c10 	str.w	r3, [r6, #-16]
 8000836:	f846 5c0c 	str.w	r5, [r6, #-12]
 800083a:	f846 1c08 	str.w	r1, [r6, #-8]
 800083e:	f846 2c04 	str.w	r2, [r6, #-4]
    for (uint32_t i = 0; i < SDRAM_WORD_COUNT; i++) {
 8000842:	d1e4      	bne.n	800080e <main+0x322>
    uint32_t errors = 0;
 8000844:	2600      	movs	r6, #0
 8000846:	f04f 4540 	mov.w	r5, #3221225472	@ 0xc0000000
    for (uint32_t i = 0; i < SDRAM_WORD_COUNT; i++) {
 800084a:	4634      	mov	r4, r6
        if (sdram[i] != i) {
 800084c:	682b      	ldr	r3, [r5, #0]
            printf("SDRAM Mismatch at index %lu: wrote %lu, read %lu\n", i, i, sdram[i]);
 800084e:	4622      	mov	r2, r4
 8000850:	4621      	mov	r1, r4
 8000852:	4638      	mov	r0, r7
        if (sdram[i] != i) {
 8000854:	429c      	cmp	r4, r3
 8000856:	d049      	beq.n	80008ec <main+0x400>
    for (uint32_t i = 0; i < SDRAM_WORD_COUNT; i++) {
 8000858:	3401      	adds	r4, #1
            printf("SDRAM Mismatch at index %lu: wrote %lu, read %lu\n", i, i, sdram[i]);
 800085a:	f005 fe89 	bl	8006570 <iprintf>
            errors++;
 800085e:	3601      	adds	r6, #1
    for (uint32_t i = 0; i < SDRAM_WORD_COUNT; i++) {
 8000860:	3504      	adds	r5, #4
 8000862:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 8000866:	d1f1      	bne.n	800084c <main+0x360>
    if (errors == 0) {
 8000868:	2e00      	cmp	r6, #0
 800086a:	d147      	bne.n	80008fc <main+0x410>
        printf("SDRAM Test PASSED âœ“\n");
 800086c:	4831      	ldr	r0, [pc, #196]	@ (8000934 <main+0x448>)
 800086e:	f005 fee7 	bl	8006640 <puts>
	  if (apipe.bufferReady)
 8000872:	f898 0010 	ldrb.w	r0, [r8, #16]
 8000876:	2800      	cmp	r0, #0
 8000878:	d03e      	beq.n	80008f8 <main+0x40c>
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800087a:	f00b 0e1f 	and.w	lr, fp, #31
		 apipe.updateDelayBuffer(&apipe);
 800087e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8000882:	482a      	ldr	r0, [pc, #168]	@ (800092c <main+0x440>)
 8000884:	f50e 5480 	add.w	r4, lr, #4096	@ 0x1000
 8000888:	4798      	blx	r3
		 apipe.loadProcess(&apipe);
 800088a:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800088e:	4827      	ldr	r0, [pc, #156]	@ (800092c <main+0x440>)
 8000890:	4788      	blx	r1
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000892:	2201      	movs	r2, #1
 8000894:	2108      	movs	r1, #8
 8000896:	4828      	ldr	r0, [pc, #160]	@ (8000938 <main+0x44c>)
 8000898:	f003 f83c 	bl	8003914 <HAL_GPIO_WritePin>
		 DWT->CYCCNT = 0;
 800089c:	4d1b      	ldr	r5, [pc, #108]	@ (800090c <main+0x420>)
 800089e:	2200      	movs	r2, #0
 80008a0:	4e1e      	ldr	r6, [pc, #120]	@ (800091c <main+0x430>)
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80008a2:	2108      	movs	r1, #8
		 DWT->CYCCNT = 0;
 80008a4:	606a      	str	r2, [r5, #4]
		 cycles = DWT->CYCCNT;
 80008a6:	6868      	ldr	r0, [r5, #4]
 80008a8:	f8ca 0000 	str.w	r0, [sl]
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80008ac:	4822      	ldr	r0, [pc, #136]	@ (8000938 <main+0x44c>)
 80008ae:	f003 f831 	bl	8003914 <HAL_GPIO_WritePin>
		 arm_copy_f32(apipe.processBuffer, apipe.outBuffer, BUFFER_SIZE);
 80008b2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80008b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008ba:	4820      	ldr	r0, [pc, #128]	@ (800093c <main+0x450>)
 80008bc:	f005 fb9a 	bl	8005ff4 <arm_copy_f32>
		 apipe.updateDACOutput(&apipe, dacOutput);
 80008c0:	481a      	ldr	r0, [pc, #104]	@ (800092c <main+0x440>)
 80008c2:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80008c6:	4631      	mov	r1, r6
 80008c8:	4790      	blx	r2
  __ASM volatile ("dsb 0xF":::"memory");
 80008ca:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <main+0x41c>)
 80008d0:	3c20      	subs	r4, #32
 80008d2:	f8c3 6268 	str.w	r6, [r3, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80008d6:	3620      	adds	r6, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80008d8:	2c00      	cmp	r4, #0
 80008da:	dcf9      	bgt.n	80008d0 <main+0x3e4>
 80008dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008e0:	f3bf 8f6f 	isb	sy
		 apipe.bufferReady = false;
 80008e4:	2600      	movs	r6, #0
 80008e6:	f888 6010 	strb.w	r6, [r8, #16]
 80008ea:	e78a      	b.n	8000802 <main+0x316>
    for (uint32_t i = 0; i < SDRAM_WORD_COUNT; i++) {
 80008ec:	3401      	adds	r4, #1
 80008ee:	3504      	adds	r5, #4
 80008f0:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 80008f4:	d1aa      	bne.n	800084c <main+0x360>
 80008f6:	e7b7      	b.n	8000868 <main+0x37c>
	      __WFI();
 80008f8:	bf30      	wfi
 80008fa:	e782      	b.n	8000802 <main+0x316>
        printf("SDRAM Test FAILED âœ— â€” Total errors: %lu\n", errors);
 80008fc:	4631      	mov	r1, r6
 80008fe:	4810      	ldr	r0, [pc, #64]	@ (8000940 <main+0x454>)
 8000900:	f005 fe36 	bl	8006570 <iprintf>
 8000904:	e7b5      	b.n	8000872 <main+0x386>
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00
 800090c:	e0001000 	.word	0xe0001000
 8000910:	2400208c 	.word	0x2400208c
 8000914:	24011220 	.word	0x24011220
 8000918:	2400108c 	.word	0x2400108c
 800091c:	2400008c 	.word	0x2400008c
 8000920:	24011194 	.word	0x24011194
 8000924:	080071d8 	.word	0x080071d8
 8000928:	240110d0 	.word	0x240110d0
 800092c:	240020a4 	.word	0x240020a4
 8000930:	080071c0 	.word	0x080071c0
 8000934:	0800720c 	.word	0x0800720c
 8000938:	58020800 	.word	0x58020800
 800093c:	240060ac 	.word	0x240060ac
 8000940:	08007224 	.word	0x08007224
 8000944:	240110a4 	.word	0x240110a4
 8000948:	24000088 	.word	0x24000088

0800094c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
  while (1)
 800094e:	e7fe      	b.n	800094e <Error_Handler+0x2>

08000950 <pipe_getDelayBuffer>:

float32_t *pipe_getDelayBuffer(pipe *self, uint16_t n)
{
    uint32_t offset = n * BUFFER_SIZE;

    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8000950:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
 8000954:	4a09      	ldr	r2, [pc, #36]	@ (800097c <pipe_getDelayBuffer+0x2c>)

    return &self->delayBuffer[index];
 8000956:	f241 4c02 	movw	ip, #5122	@ 0x1402
    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000960:	eba3 2181 	sub.w	r1, r3, r1, lsl #10
 8000964:	fba2 2301 	umull	r2, r3, r2, r1
 8000968:	0b5b      	lsrs	r3, r3, #13
 800096a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800096e:	eba1 21c3 	sub.w	r1, r1, r3, lsl #11
    return &self->delayBuffer[index];
 8000972:	448c      	add	ip, r1
}
 8000974:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	cccccccd 	.word	0xcccccccd

08000980 <pipe_loadProcess>:
    }
}

static void pipe_loadProcess(pipe *self)
{
	arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8000980:	f244 0108 	movw	r1, #16392	@ 0x4008
 8000984:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 8000988:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800098c:	4401      	add	r1, r0
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	f005 bb30 	b.w	8005ff4 <arm_copy_f32>

08000994 <pipe_updateDelayBuffer>:
{
 8000994:	b510      	push	{r4, lr}
    arm_copy_f32(self->inBuffer, &self->delayBuffer[self->delayIndex], BUFFER_SIZE);
 8000996:	f500 4470 	add.w	r4, r0, #61440	@ 0xf000
 800099a:	f241 4102 	movw	r1, #5122	@ 0x1402
 800099e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a2:	68e3      	ldr	r3, [r4, #12]
 80009a4:	4419      	add	r1, r3
 80009a6:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 80009aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	f005 fb20 	bl	8005ff4 <arm_copy_f32>
    self->delayIndex += BUFFER_SIZE;
 80009b4:	68e3      	ldr	r3, [r4, #12]
 80009b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
        self->delayIndex = 0;
 80009ba:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80009be:	bf28      	it	cs
 80009c0:	2300      	movcs	r3, #0
 80009c2:	60e3      	str	r3, [r4, #12]
}
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	bf00      	nop

080009c8 <pipe_updateDACOutput>:
{
 80009c8:	b570      	push	{r4, r5, r6, lr}
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 80009ca:	f500 4580 	add.w	r5, r0, #16384	@ 0x4000
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 80009ce:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
{
 80009d2:	460c      	mov	r4, r1
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 80009d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80009d8:	6869      	ldr	r1, [r5, #4]
 80009da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 80009de:	7a1e      	ldrb	r6, [r3, #8]
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 80009e0:	4608      	mov	r0, r1
 80009e2:	f005 fc1f 	bl	8006224 <arm_offset_f32>
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 80009e6:	6869      	ldr	r1, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 80009e8:	fab6 f686 	clz	r6, r6
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 80009ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009f0:	4608      	mov	r0, r1
 80009f2:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000a20 <pipe_updateDACOutput+0x58>
 80009f6:	f005 fbdf 	bl	80061b8 <arm_scale_f32>
 80009fa:	686a      	ldr	r2, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 80009fc:	0976      	lsrs	r6, r6, #5
    for (i = 0; i < BUFFER_SIZE; i++)
 80009fe:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8000a02:	eb04 21c6 	add.w	r1, r4, r6, lsl #11
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8000a06:	ecf2 7a01 	vldmia	r2!, {s15}
 8000a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    for (i = 0; i < BUFFER_SIZE; i++)
 8000a0e:	4290      	cmp	r0, r2
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8000a10:	ee17 3a90 	vmov	r3, s15
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	f821 3b02 	strh.w	r3, [r1], #2
    for (i = 0; i < BUFFER_SIZE; i++)
 8000a1a:	d1f4      	bne.n	8000a06 <pipe_updateDACOutput+0x3e>
}
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
 8000a1e:	bf00      	nop
 8000a20:	45000000 	.word	0x45000000

08000a24 <pipe_ADC_Complete>:
{
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
 8000a2a:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8000a2c:	f501 6c00 	add.w	ip, r1, #2048	@ 0x800
 8000a30:	f500 5e00 	add.w	lr, r0, #8192	@ 0x2000
 8000a34:	462a      	mov	r2, r5
        self->inBuffer2[i] = (float32_t)adcInput[BUFFER_SIZE + i];
 8000a36:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a44:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8000a48:	4572      	cmp	r2, lr
 8000a4a:	d1f4      	bne.n	8000a36 <pipe_ADC_Complete+0x12>
    arm_scale_f32(self->inBuffer2, ADC_BITS2VOLTS, self->inBuffer2, BUFFER_SIZE);
 8000a4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a50:	4629      	mov	r1, r5
 8000a52:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000a88 <pipe_ADC_Complete+0x64>
 8000a56:	4628      	mov	r0, r5
 8000a58:	f005 fbae 	bl	80061b8 <arm_scale_f32>
    arm_offset_f32(self->inBuffer2, -1.0f, self->inBuffer2, BUFFER_SIZE);
 8000a5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a60:	4629      	mov	r1, r5
 8000a62:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000a66:	4628      	mov	r0, r5
 8000a68:	f005 fbdc 	bl	8006224 <arm_offset_f32>
    self->inBuffer  = self->inBuffer2;
 8000a6c:	f504 4280 	add.w	r2, r4, #16384	@ 0x4000
    self->ppState   = 0;
 8000a70:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->outBuffer = self->outBuffer2;
 8000a74:	f504 5440 	add.w	r4, r4, #12288	@ 0x3000
    self->ppState   = 0;
 8000a78:	2100      	movs	r1, #0
    self->outBuffer = self->outBuffer2;
 8000a7a:	e9c2 5400 	strd	r5, r4, [r2]
    self->bufferReady = true;
 8000a7e:	2201      	movs	r2, #1
    self->ppState   = 0;
 8000a80:	7219      	strb	r1, [r3, #8]
    self->bufferReady = true;
 8000a82:	741a      	strb	r2, [r3, #16]
}
 8000a84:	bd38      	pop	{r3, r4, r5, pc}
 8000a86:	bf00      	nop
 8000a88:	38000000 	.word	0x38000000

08000a8c <pipe_ADC_HalfComplete>:
{
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	468c      	mov	ip, r1
 8000a90:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8000a92:	4602      	mov	r2, r0
 8000a94:	f500 5e80 	add.w	lr, r0, #4096	@ 0x1000
        self->inBuffer1[i] = (float32_t)adcInput[i];
 8000a98:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	ee07 3a90 	vmov	s15, r3
 8000aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aa6:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8000aaa:	4572      	cmp	r2, lr
 8000aac:	d1f4      	bne.n	8000a98 <pipe_ADC_HalfComplete+0xc>
    arm_scale_f32(self->inBuffer1, ADC_BITS2VOLTS, self->inBuffer1, BUFFER_SIZE);
 8000aae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ab2:	4621      	mov	r1, r4
 8000ab4:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000ae8 <pipe_ADC_HalfComplete+0x5c>
 8000ab8:	4620      	mov	r0, r4
 8000aba:	f005 fb7d 	bl	80061b8 <arm_scale_f32>
    arm_offset_f32(self->inBuffer1, -1.0f, self->inBuffer1, BUFFER_SIZE);
 8000abe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ac2:	4621      	mov	r1, r4
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000aca:	f005 fbab 	bl	8006224 <arm_offset_f32>
    self->ppState   = 1;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->inBuffer  = self->inBuffer1;
 8000ad4:	f504 4180 	add.w	r1, r4, #16384	@ 0x4000
    self->outBuffer = self->outBuffer1;
 8000ad8:	f504 5000 	add.w	r0, r4, #8192	@ 0x2000
 8000adc:	e9c1 4000 	strd	r4, r0, [r1]
    self->ppState   = 1;
 8000ae0:	721a      	strb	r2, [r3, #8]
    self->bufferReady = true;
 8000ae2:	741a      	strb	r2, [r3, #16]
}
 8000ae4:	bd10      	pop	{r4, pc}
 8000ae6:	bf00      	nop
 8000ae8:	38000000 	.word	0x38000000

08000aec <pipeInit>:
}

void pipeInit(pipe *self)
{
 8000aec:	4684      	mov	ip, r0
    self->delayIndex = 0;
    self->bufferReady = false;

    self->adcHalfComplete = pipe_ADC_HalfComplete;
    self->adcComplete     = pipe_ADC_Complete;
    self->updateDelayBuffer = pipe_updateDelayBuffer;
 8000aee:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <pipeInit+0x48>)
    self->ppState   = 0;
 8000af0:	2100      	movs	r1, #0
    self->inBuffer  = self->inBuffer2;
 8000af2:	f50c 4280 	add.w	r2, ip, #16384	@ 0x4000
    self->ppState   = 0;
 8000af6:	f50c 4370 	add.w	r3, ip, #61440	@ 0xf000
{
 8000afa:	b470      	push	{r4, r5, r6}
    self->inBuffer  = self->inBuffer2;
 8000afc:	f50c 5680 	add.w	r6, ip, #4096	@ 0x1000
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8000b00:	4d0d      	ldr	r5, [pc, #52]	@ (8000b38 <pipeInit+0x4c>)
    self->adcComplete     = pipe_ADC_Complete;
 8000b02:	4c0e      	ldr	r4, [pc, #56]	@ (8000b3c <pipeInit+0x50>)
    self->inBuffer  = self->inBuffer2;
 8000b04:	6016      	str	r6, [r2, #0]
    self->outBuffer = self->outBuffer2;
 8000b06:	f50c 5640 	add.w	r6, ip, #12288	@ 0x3000
 8000b0a:	6056      	str	r6, [r2, #4]
    self->updateDACOutput = pipe_updateDACOutput;
 8000b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b40 <pipeInit+0x54>)
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8000b0e:	615d      	str	r5, [r3, #20]
    self->ppState   = 0;
 8000b10:	7219      	strb	r1, [r3, #8]
    self->adcComplete     = pipe_ADC_Complete;
 8000b12:	619c      	str	r4, [r3, #24]
    self->delayIndex = 0;
 8000b14:	60d9      	str	r1, [r3, #12]
    self->bufferReady = false;
 8000b16:	7419      	strb	r1, [r3, #16]
    self->updateDACOutput = pipe_updateDACOutput;
 8000b18:	e9c3 0207 	strd	r0, r2, [r3, #28]
    self->getDelayBuffer = pipe_getDelayBuffer;
 8000b1c:	4809      	ldr	r0, [pc, #36]	@ (8000b44 <pipeInit+0x58>)
    self->loadProcess = pipe_loadProcess;
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <pipeInit+0x5c>)
 8000b20:	e9c3 0209 	strd	r0, r2, [r3, #36]	@ 0x24

    for(int i = 0; i < BUFFER_SIZE ; i++) {

    	self->processBuffer[i] = 0;
 8000b24:	f244 0008 	movw	r0, #16392	@ 0x4008
 8000b28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b2c:	4460      	add	r0, ip

    }

}
 8000b2e:	bc70      	pop	{r4, r5, r6}
    	self->processBuffer[i] = 0;
 8000b30:	f005 be66 	b.w	8006800 <memset>
 8000b34:	08000995 	.word	0x08000995
 8000b38:	08000a8d 	.word	0x08000a8d
 8000b3c:	08000a25 	.word	0x08000a25
 8000b40:	080009c9 	.word	0x080009c9
 8000b44:	08000951 	.word	0x08000951
 8000b48:	08000981 	.word	0x08000981

08000b4c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <HAL_MspInit+0x20>)
{
 8000b4e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b50:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000b54:	f042 0202 	orr.w	r2, r2, #2
 8000b58:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8000b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b68:	b002      	add	sp, #8
 8000b6a:	4770      	bx	lr
 8000b6c:	58024400 	.word	0x58024400

08000b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	2100      	movs	r1, #0
{
 8000b76:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	22c0      	movs	r2, #192	@ 0xc0
 8000b7a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	9106      	str	r1, [sp, #24]
 8000b7e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000b82:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b86:	f005 fe3b 	bl	8006800 <memset>
  if(hadc->Instance==ADC1)
 8000b8a:	4b31      	ldr	r3, [pc, #196]	@ (8000c50 <HAL_ADC_MspInit+0xe0>)
 8000b8c:	6822      	ldr	r2, [r4, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d001      	beq.n	8000b96 <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b92:	b038      	add	sp, #224	@ 0xe0
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000ba2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ba6:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba8:	f003 fd5c 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d148      	bne.n	8000c42 <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bb0:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA1_Stream0;
 8000bb6:	4d28      	ldr	r5, [pc, #160]	@ (8000c58 <HAL_ADC_MspInit+0xe8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000bb8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000bbc:	f042 0220 	orr.w	r2, r2, #32
 8000bc0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8000bc4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8000bc8:	f002 0220 	and.w	r2, r2, #32
 8000bcc:	9200      	str	r2, [sp, #0]
 8000bce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000bd4:	f042 0201 	orr.w	r2, r2, #1
 8000bd8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bdc:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bea:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	481b      	ldr	r0, [pc, #108]	@ (8000c5c <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f002 fc88 	bl	8003508 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8000bf8:	4a19      	ldr	r2, [pc, #100]	@ (8000c60 <HAL_ADC_MspInit+0xf0>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000bfa:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bfc:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bfe:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c00:	e885 004c 	stmia.w	r5, {r2, r3, r6}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c0c:	e9c5 6203 	strd	r6, r2, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c10:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c1a:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c22:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c24:	f001 fc9a 	bl	800255c <HAL_DMA_Init>
 8000c28:	b970      	cbnz	r0, 8000c48 <HAL_ADC_MspInit+0xd8>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c2e:	64e5      	str	r5, [r4, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c30:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c32:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c34:	f001 f94a 	bl	8001ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c38:	2012      	movs	r0, #18
 8000c3a:	f001 f983 	bl	8001f44 <HAL_NVIC_EnableIRQ>
}
 8000c3e:	b038      	add	sp, #224	@ 0xe0
 8000c40:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000c42:	f7ff fe83 	bl	800094c <Error_Handler>
 8000c46:	e7b3      	b.n	8000bb0 <HAL_ADC_MspInit+0x40>
      Error_Handler();
 8000c48:	f7ff fe80 	bl	800094c <Error_Handler>
 8000c4c:	e7ed      	b.n	8000c2a <HAL_ADC_MspInit+0xba>
 8000c4e:	bf00      	nop
 8000c50:	40022000 	.word	0x40022000
 8000c54:	58024400 	.word	0x58024400
 8000c58:	240111a8 	.word	0x240111a8
 8000c5c:	58020000 	.word	0x58020000
 8000c60:	40020010 	.word	0x40020010

08000c64 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8000c64:	4b2c      	ldr	r3, [pc, #176]	@ (8000d18 <HAL_DAC_MspInit+0xb4>)
 8000c66:	6802      	ldr	r2, [r0, #0]
{
 8000c68:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 8000c6a:	429a      	cmp	r2, r3
{
 8000c6c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f04f 0400 	mov.w	r4, #0
 8000c72:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000c76:	9404      	str	r4, [sp, #16]
 8000c78:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8000c7c:	d001      	beq.n	8000c82 <HAL_DAC_MspInit+0x1e>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000c7e:	b008      	add	sp, #32
 8000c80:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c82:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <HAL_DAC_MspInit+0xb8>)
 8000c84:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8000c88:	4e25      	ldr	r6, [pc, #148]	@ (8000d20 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c8a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000c8e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000c92:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000c96:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8000c9a:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8000c9e:	9200      	str	r2, [sp, #0]
 8000ca0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ca6:	f042 0201 	orr.w	r2, r2, #1
 8000caa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cae:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cba:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f002 fc20 	bl	8003508 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8000cc8:	4a17      	ldr	r2, [pc, #92]	@ (8000d28 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000cca:	2343      	movs	r3, #67	@ 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000ccc:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cce:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cd0:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cd2:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000cd4:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cd8:	2240      	movs	r2, #64	@ 0x40
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000cda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cde:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ce0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ce4:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cea:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf2:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000cf4:	f001 fc32 	bl	800255c <HAL_DMA_Init>
 8000cf8:	b958      	cbnz	r0, 8000d12 <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000cfc:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cfe:	2036      	movs	r0, #54	@ 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000d00:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d02:	4611      	mov	r1, r2
 8000d04:	f001 f8e2 	bl	8001ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d08:	2036      	movs	r0, #54	@ 0x36
 8000d0a:	f001 f91b 	bl	8001f44 <HAL_NVIC_EnableIRQ>
}
 8000d0e:	b008      	add	sp, #32
 8000d10:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000d12:	f7ff fe1b 	bl	800094c <Error_Handler>
 8000d16:	e7f0      	b.n	8000cfa <HAL_DAC_MspInit+0x96>
 8000d18:	40007400 	.word	0x40007400
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	2401111c 	.word	0x2401111c
 8000d24:	58020000 	.word	0x58020000
 8000d28:	40020028 	.word	0x40020028

08000d2c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_TIM_Base_MspInit+0x2c>)
 8000d2e:	6802      	ldr	r2, [r0, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d000      	beq.n	8000d36 <HAL_TIM_Base_MspInit+0xa>
 8000d34:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <HAL_TIM_Base_MspInit+0x30>)
{
 8000d38:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d3a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000d3e:	f042 0202 	orr.w	r2, r2, #2
 8000d42:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8000d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000d52:	b002      	add	sp, #8
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40010400 	.word	0x40010400
 8000d5c:	58024400 	.word	0x58024400

08000d60 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	e7fe      	b.n	8000d60 <NMI_Handler>
 8000d62:	bf00      	nop

08000d64 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <HardFault_Handler>
 8000d66:	bf00      	nop

08000d68 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler>
 8000d6a:	bf00      	nop

08000d6c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <BusFault_Handler>
 8000d6e:	bf00      	nop

08000d70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler>
 8000d72:	bf00      	nop

08000d74 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 b94a 	b.w	8001018 <HAL_IncTick>

08000d84 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d84:	4801      	ldr	r0, [pc, #4]	@ (8000d8c <DMA1_Stream0_IRQHandler+0x8>)
 8000d86:	f002 b9ad 	b.w	80030e4 <HAL_DMA_IRQHandler>
 8000d8a:	bf00      	nop
 8000d8c:	240111a8 	.word	0x240111a8

08000d90 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000d90:	4801      	ldr	r0, [pc, #4]	@ (8000d98 <DMA1_Stream1_IRQHandler+0x8>)
 8000d92:	f002 b9a7 	b.w	80030e4 <HAL_DMA_IRQHandler>
 8000d96:	bf00      	nop
 8000d98:	2401111c 	.word	0x2401111c

08000d9c <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d9c:	4801      	ldr	r0, [pc, #4]	@ (8000da4 <ADC_IRQHandler+0x8>)
 8000d9e:	f000 b95d 	b.w	800105c <HAL_ADC_IRQHandler>
 8000da2:	bf00      	nop
 8000da4:	24011220 	.word	0x24011220

08000da8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000da8:	4801      	ldr	r0, [pc, #4]	@ (8000db0 <TIM6_DAC_IRQHandler+0x8>)
 8000daa:	f001 b9ef 	b.w	800218c <HAL_DAC_IRQHandler>
 8000dae:	bf00      	nop
 8000db0:	24011194 	.word	0x24011194

08000db4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	1e16      	subs	r6, r2, #0
 8000db8:	dd07      	ble.n	8000dca <_read+0x16>
 8000dba:	460c      	mov	r4, r1
 8000dbc:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8000dbe:	f3af 8000 	nop.w
 8000dc2:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	d1f9      	bne.n	8000dbe <_read+0xa>
  }

  return len;
}
 8000dca:	4630      	mov	r0, r6
 8000dcc:	bd70      	pop	{r4, r5, r6, pc}
 8000dce:	bf00      	nop

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	1e16      	subs	r6, r2, #0
 8000dd4:	dd07      	ble.n	8000de6 <_write+0x16>
 8000dd6:	460c      	mov	r4, r1
 8000dd8:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8000dda:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000dde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	42a5      	cmp	r5, r4
 8000de4:	d1f9      	bne.n	8000dda <_write+0xa>
  }
  return len;
}
 8000de6:	4630      	mov	r0, r6
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
 8000dea:	bf00      	nop

08000dec <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000df4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8000df8:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000dfa:	604b      	str	r3, [r1, #4]
}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000e00:	2001      	movs	r0, #1
 8000e02:	4770      	bx	lr

08000e04 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000e04:	2000      	movs	r0, #0
 8000e06:	4770      	bx	lr

08000e08 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <_sbrk+0x38>)
{
 8000e0a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8000e0e:	6808      	ldr	r0, [r1, #0]
{
 8000e10:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e12:	4c0d      	ldr	r4, [pc, #52]	@ (8000e48 <_sbrk+0x40>)
 8000e14:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000e16:	b120      	cbz	r0, 8000e22 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e18:	4403      	add	r3, r0
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d807      	bhi.n	8000e2e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000e1e:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8000e20:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000e22:	4c0a      	ldr	r4, [pc, #40]	@ (8000e4c <_sbrk+0x44>)
 8000e24:	4620      	mov	r0, r4
 8000e26:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000e28:	4403      	add	r3, r0
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d9f7      	bls.n	8000e1e <_sbrk+0x16>
    errno = ENOMEM;
 8000e2e:	f005 fd45 	bl	80068bc <__errno>
 8000e32:	220c      	movs	r2, #12
 8000e34:	4603      	mov	r3, r0
    return (void *)-1;
 8000e36:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	bd10      	pop	{r4, pc}
 8000e3e:	bf00      	nop
 8000e40:	24011284 	.word	0x24011284
 8000e44:	24080000 	.word	0x24080000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	240113d8 	.word	0x240113d8

08000e50 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e50:	4927      	ldr	r1, [pc, #156]	@ (8000ef0 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e52:	4a28      	ldr	r2, [pc, #160]	@ (8000ef4 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e54:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8000e5c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e62:	6813      	ldr	r3, [r2, #0]
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	2b06      	cmp	r3, #6
 8000e6a:	d805      	bhi.n	8000e78 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e6c:	6813      	ldr	r3, [r2, #0]
 8000e6e:	f023 030f 	bic.w	r3, r3, #15
 8000e72:	f043 0307 	orr.w	r3, r3, #7
 8000e76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e7a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8000efc <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8000e7e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e80:	481c      	ldr	r0, [pc, #112]	@ (8000ef4 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8000e82:	f041 0101 	orr.w	r1, r1, #1
 8000e86:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000e88:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000e8a:	6819      	ldr	r1, [r3, #0]
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e90:	6803      	ldr	r3, [r0, #0]
 8000e92:	071b      	lsls	r3, r3, #28
 8000e94:	d505      	bpl.n	8000ea2 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e96:	6803      	ldr	r3, [r0, #0]
 8000e98:	f023 030f 	bic.w	r3, r3, #15
 8000e9c:	f043 0307 	orr.w	r3, r3, #7
 8000ea0:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <SystemInit+0xa8>)
 8000ea4:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ea6:	4916      	ldr	r1, [pc, #88]	@ (8000f00 <SystemInit+0xb0>)
  RCC->PLLCFGR = 0x01FF0000;
 8000ea8:	4816      	ldr	r0, [pc, #88]	@ (8000f04 <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 8000eaa:	4c17      	ldr	r4, [pc, #92]	@ (8000f08 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8000eac:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000eae:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000eb0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000eb2:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8000eb4:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000eb6:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eba:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ebc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ebe:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ec0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec2:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ec4:	4811      	ldr	r0, [pc, #68]	@ (8000f0c <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8000ec6:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8000eca:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8000ecc:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ece:	6803      	ldr	r3, [r0, #0]
 8000ed0:	f36f 030f 	bfc	r3, #0, #16
 8000ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ed8:	d203      	bcs.n	8000ee2 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <SystemInit+0xc0>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <SystemInit+0xc4>)
 8000ee4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eec:	601a      	str	r2, [r3, #0]
}
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00
 8000ef4:	52002000 	.word	0x52002000
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f00:	01010280 	.word	0x01010280
 8000f04:	01ff0000 	.word	0x01ff0000
 8000f08:	02020200 	.word	0x02020200
 8000f0c:	5c001000 	.word	0x5c001000
 8000f10:	51008000 	.word	0x51008000
 8000f14:	52004000 	.word	0x52004000

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f1c:	f7ff ff98 	bl	8000e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f22:	490d      	ldr	r1, [pc, #52]	@ (8000f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f24:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f38:	4c0a      	ldr	r4, [pc, #40]	@ (8000f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f46:	f005 fcbf 	bl	80068c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff facf 	bl	80004ec <main>
  bx  lr
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f58:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000f5c:	0801a708 	.word	0x0801a708
  ldr r2, =_sbss
 8000f60:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000f64:	240113d8 	.word	0x240113d8

08000f68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC3_IRQHandler>
	...

08000f6c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <HAL_InitTick+0x40>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b90b      	cbnz	r3, 8000f76 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000f72:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f74:	4770      	bx	lr
{
 8000f76:	b510      	push	{r4, lr}
 8000f78:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb0 <HAL_InitTick+0x44>)
 8000f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f84:	6810      	ldr	r0, [r2, #0]
 8000f86:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f8a:	f000 ffe9 	bl	8001f60 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	2c0f      	cmp	r4, #15
 8000f90:	d800      	bhi.n	8000f94 <HAL_InitTick+0x28>
 8000f92:	b108      	cbz	r0, 8000f98 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000f94:	2001      	movs	r0, #1
}
 8000f96:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f000 ff94 	bl	8001ecc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <HAL_InitTick+0x48>)
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	601c      	str	r4, [r3, #0]
}
 8000faa:	bd10      	pop	{r4, pc}
 8000fac:	24000008 	.word	0x24000008
 8000fb0:	24000004 	.word	0x24000004
 8000fb4:	2400000c 	.word	0x2400000c

08000fb8 <HAL_Init>:
{
 8000fb8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fba:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fbc:	4c12      	ldr	r4, [pc, #72]	@ (8001008 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbe:	f000 ff73 	bl	8001ea8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fc2:	f003 f82f 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <HAL_Init+0x54>)
 8000fc8:	4911      	ldr	r1, [pc, #68]	@ (8001010 <HAL_Init+0x58>)
 8000fca:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fcc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fce:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fd2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fd6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fd8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fda:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8000fde:	490d      	ldr	r1, [pc, #52]	@ (8001014 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fe0:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fe4:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fe6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8000fea:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fec:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fee:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff0:	f7ff ffbc 	bl	8000f6c <HAL_InitTick>
 8000ff4:	b110      	cbz	r0, 8000ffc <HAL_Init+0x44>
    return HAL_ERROR;
 8000ff6:	2401      	movs	r4, #1
}
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	4604      	mov	r4, r0
  HAL_MspInit();
 8000ffe:	f7ff fda5 	bl	8000b4c <HAL_MspInit>
}
 8001002:	4620      	mov	r0, r4
 8001004:	bd10      	pop	{r4, pc}
 8001006:	bf00      	nop
 8001008:	24000000 	.word	0x24000000
 800100c:	58024400 	.word	0x58024400
 8001010:	08007254 	.word	0x08007254
 8001014:	24000004 	.word	0x24000004

08001018 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001018:	4a03      	ldr	r2, [pc, #12]	@ (8001028 <HAL_IncTick+0x10>)
 800101a:	4b04      	ldr	r3, [pc, #16]	@ (800102c <HAL_IncTick+0x14>)
 800101c:	6811      	ldr	r1, [r2, #0]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	440b      	add	r3, r1
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	24011288 	.word	0x24011288
 800102c:	24000008 	.word	0x24000008

08001030 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001030:	4b01      	ldr	r3, [pc, #4]	@ (8001038 <HAL_GetTick+0x8>)
 8001032:	6818      	ldr	r0, [r3, #0]
}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	24011288 	.word	0x24011288

0800103c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800103c:	4b01      	ldr	r3, [pc, #4]	@ (8001044 <HAL_GetREVID+0x8>)
 800103e:	6818      	ldr	r0, [r3, #0]
}
 8001040:	0c00      	lsrs	r0, r0, #16
 8001042:	4770      	bx	lr
 8001044:	5c001000 	.word	0x5c001000

08001048 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001048:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800104a:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800104c:	f7ff f998 	bl	8000380 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001050:	bd08      	pop	{r3, pc}
 8001052:	bf00      	nop

08001054 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <HAL_ADC_IRQHandler>:
{
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800105e:	4a8e      	ldr	r2, [pc, #568]	@ (8001298 <HAL_ADC_IRQHandler+0x23c>)
{
 8001060:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001062:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001064:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001066:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001068:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800106a:	f000 8095 	beq.w	8001198 <HAL_ADC_IRQHandler+0x13c>
 800106e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001072:	4293      	cmp	r3, r2
 8001074:	f000 8090 	beq.w	8001198 <HAL_ADC_IRQHandler+0x13c>
 8001078:	4a88      	ldr	r2, [pc, #544]	@ (800129c <HAL_ADC_IRQHandler+0x240>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800107a:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800107c:	07a9      	lsls	r1, r5, #30
 800107e:	f007 071f 	and.w	r7, r7, #31
 8001082:	d502      	bpl.n	800108a <HAL_ADC_IRQHandler+0x2e>
 8001084:	07b2      	lsls	r2, r6, #30
 8001086:	f100 80aa 	bmi.w	80011de <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800108a:	0769      	lsls	r1, r5, #29
 800108c:	d579      	bpl.n	8001182 <HAL_ADC_IRQHandler+0x126>
 800108e:	0772      	lsls	r2, r6, #29
 8001090:	d577      	bpl.n	8001182 <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001092:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001094:	06d2      	lsls	r2, r2, #27
 8001096:	d403      	bmi.n	80010a0 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001098:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800109a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800109e:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80010a6:	d11c      	bne.n	80010e2 <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80010a8:	4a7d      	ldr	r2, [pc, #500]	@ (80012a0 <HAL_ADC_IRQHandler+0x244>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	f000 80e7 	beq.w	800127e <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80010b0:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80010b2:	0491      	lsls	r1, r2, #18
 80010b4:	d415      	bmi.n	80010e2 <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	0712      	lsls	r2, r2, #28
 80010ba:	d512      	bpl.n	80010e2 <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	0750      	lsls	r0, r2, #29
 80010c0:	f100 80f2 	bmi.w	80012a8 <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	f022 020c 	bic.w	r2, r2, #12
 80010ca:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010d2:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80010d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010d6:	04d9      	lsls	r1, r3, #19
 80010d8:	d403      	bmi.n	80010e2 <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80010e2:	4620      	mov	r0, r4
 80010e4:	f7ff f96c 	bl	80003c0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80010ee:	06aa      	lsls	r2, r5, #26
 80010f0:	d54d      	bpl.n	800118e <HAL_ADC_IRQHandler+0x132>
 80010f2:	06b0      	lsls	r0, r6, #26
 80010f4:	d54b      	bpl.n	800118e <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010f8:	06d0      	lsls	r0, r2, #27
 80010fa:	d403      	bmi.n	8001104 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80010fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001102:	6562      	str	r2, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001104:	4966      	ldr	r1, [pc, #408]	@ (80012a0 <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001106:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001108:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800110a:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800110c:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
 8001110:	d073      	beq.n	80011fa <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001112:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001114:	b9d2      	cbnz	r2, 800114c <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001116:	018a      	lsls	r2, r1, #6
 8001118:	f100 80a9 	bmi.w	800126e <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	0650      	lsls	r0, r2, #25
 8001120:	d514      	bpl.n	800114c <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001122:	0289      	lsls	r1, r1, #10
 8001124:	d412      	bmi.n	800114c <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	0712      	lsls	r2, r2, #28
 800112a:	f100 80c8 	bmi.w	80012be <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001134:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001136:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800113c:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800113e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001140:	05d8      	lsls	r0, r3, #23
 8001142:	d403      	bmi.n	800114c <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001144:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800114c:	4620      	mov	r0, r4
 800114e:	f000 fe3f 	bl	8001dd0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	2260      	movs	r2, #96	@ 0x60
 8001156:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001158:	0629      	lsls	r1, r5, #24
 800115a:	d501      	bpl.n	8001160 <HAL_ADC_IRQHandler+0x104>
 800115c:	0632      	lsls	r2, r6, #24
 800115e:	d45f      	bmi.n	8001220 <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001160:	05e8      	lsls	r0, r5, #23
 8001162:	d501      	bpl.n	8001168 <HAL_ADC_IRQHandler+0x10c>
 8001164:	05f1      	lsls	r1, r6, #23
 8001166:	d466      	bmi.n	8001236 <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001168:	05aa      	lsls	r2, r5, #22
 800116a:	d501      	bpl.n	8001170 <HAL_ADC_IRQHandler+0x114>
 800116c:	05b0      	lsls	r0, r6, #22
 800116e:	d44b      	bmi.n	8001208 <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001170:	06e9      	lsls	r1, r5, #27
 8001172:	d501      	bpl.n	8001178 <HAL_ADC_IRQHandler+0x11c>
 8001174:	06f2      	lsls	r2, r6, #27
 8001176:	d411      	bmi.n	800119c <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001178:	0569      	lsls	r1, r5, #21
 800117a:	d501      	bpl.n	8001180 <HAL_ADC_IRQHandler+0x124>
 800117c:	0572      	lsls	r2, r6, #21
 800117e:	d466      	bmi.n	800124e <HAL_ADC_IRQHandler+0x1f2>
}
 8001180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001182:	0728      	lsls	r0, r5, #28
 8001184:	d5b3      	bpl.n	80010ee <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001186:	0731      	lsls	r1, r6, #28
 8001188:	d483      	bmi.n	8001092 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800118a:	06aa      	lsls	r2, r5, #26
 800118c:	d4b1      	bmi.n	80010f2 <HAL_ADC_IRQHandler+0x96>
 800118e:	0669      	lsls	r1, r5, #25
 8001190:	d5e2      	bpl.n	8001158 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001192:	0672      	lsls	r2, r6, #25
 8001194:	d5e0      	bpl.n	8001158 <HAL_ADC_IRQHandler+0xfc>
 8001196:	e7ae      	b.n	80010f6 <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001198:	4a42      	ldr	r2, [pc, #264]	@ (80012a4 <HAL_ADC_IRQHandler+0x248>)
 800119a:	e76e      	b.n	800107a <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800119c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800119e:	b17a      	cbz	r2, 80011c0 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80011a0:	2f00      	cmp	r7, #0
 80011a2:	d075      	beq.n	8001290 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80011a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001298 <HAL_ADC_IRQHandler+0x23c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	f000 8087 	beq.w	80012ba <HAL_ADC_IRQHandler+0x25e>
 80011ac:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80011b0:	4293      	cmp	r3, r2
 80011b2:	f000 8082 	beq.w	80012ba <HAL_ADC_IRQHandler+0x25e>
 80011b6:	4a39      	ldr	r2, [pc, #228]	@ (800129c <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80011b8:	6892      	ldr	r2, [r2, #8]
 80011ba:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 80011be:	d00b      	beq.n	80011d8 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80011c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_ADC_ErrorCallback(hadc);
 80011c2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80011c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c8:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 80011d2:	f7ff ff41 	bl	8001058 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	2210      	movs	r2, #16
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e7cc      	b.n	8001178 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011de:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011e0:	06d8      	lsls	r0, r3, #27
 80011e2:	d403      	bmi.n	80011ec <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80011e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011ea:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80011ec:	4620      	mov	r0, r4
 80011ee:	f000 fdf7 	bl	8001de0 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	2202      	movs	r2, #2
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e747      	b.n	800108a <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011fa:	21c1      	movs	r1, #193	@ 0xc1
 80011fc:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80011fe:	07c9      	lsls	r1, r1, #31
 8001200:	d487      	bmi.n	8001112 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001202:	4925      	ldr	r1, [pc, #148]	@ (8001298 <HAL_ADC_IRQHandler+0x23c>)
 8001204:	68c9      	ldr	r1, [r1, #12]
 8001206:	e785      	b.n	8001114 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001208:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800120a:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800120c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001210:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001212:	f000 fde3 	bl	8001ddc <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e7a7      	b.n	8001170 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001220:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001222:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001228:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800122a:	f7ff ff13 	bl	8001054 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	2280      	movs	r2, #128	@ 0x80
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	e794      	b.n	8001160 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001236:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001238:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800123a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123e:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001240:	f000 fdca 	bl	8001dd8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	e78c      	b.n	8001168 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800124e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001250:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001254:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001256:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800125a:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800125c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800125e:	f042 0208 	orr.w	r2, r2, #8
 8001262:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001264:	6019      	str	r1, [r3, #0]
}
 8001266:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800126a:	f000 bdb3 	b.w	8001dd4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800126e:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001272:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001276:	4302      	orrs	r2, r0
 8001278:	f47f af68 	bne.w	800114c <HAL_ADC_IRQHandler+0xf0>
 800127c:	e74e      	b.n	800111c <HAL_ADC_IRQHandler+0xc0>
 800127e:	f240 2221 	movw	r2, #545	@ 0x221
 8001282:	40fa      	lsrs	r2, r7
 8001284:	07d0      	lsls	r0, r2, #31
 8001286:	f53f af13 	bmi.w	80010b0 <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800128a:	4a03      	ldr	r2, [pc, #12]	@ (8001298 <HAL_ADC_IRQHandler+0x23c>)
 800128c:	68d2      	ldr	r2, [r2, #12]
 800128e:	e710      	b.n	80010b2 <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	0790      	lsls	r0, r2, #30
 8001294:	d0a0      	beq.n	80011d8 <HAL_ADC_IRQHandler+0x17c>
 8001296:	e793      	b.n	80011c0 <HAL_ADC_IRQHandler+0x164>
 8001298:	40022000 	.word	0x40022000
 800129c:	58026300 	.word	0x58026300
 80012a0:	40022100 	.word	0x40022100
 80012a4:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80012b8:	e713      	b.n	80010e2 <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80012ba:	4a05      	ldr	r2, [pc, #20]	@ (80012d0 <HAL_ADC_IRQHandler+0x274>)
 80012bc:	e77c      	b.n	80011b8 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012c0:	f043 0310 	orr.w	r3, r3, #16
 80012c4:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80012ce:	e73d      	b.n	800114c <HAL_ADC_IRQHandler+0xf0>
 80012d0:	40022300 	.word	0x40022300

080012d4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012d4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80012d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80012d8:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
{
 80012de:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80012e0:	d11d      	bne.n	800131e <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80012e2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012e8:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80012ea:	680a      	ldr	r2, [r1, #0]
 80012ec:	f012 0f08 	tst.w	r2, #8
 80012f0:	68ca      	ldr	r2, [r1, #12]
 80012f2:	d01b      	beq.n	800132c <ADC_DMAConvCplt+0x58>
 80012f4:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80012f8:	d10d      	bne.n	8001316 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80012fa:	68ca      	ldr	r2, [r1, #12]
 80012fc:	0494      	lsls	r4, r2, #18
 80012fe:	d40a      	bmi.n	8001316 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001300:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001302:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001306:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001308:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800130a:	04d1      	lsls	r1, r2, #19
 800130c:	d403      	bmi.n	8001316 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800130e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001310:	f042 0201 	orr.w	r2, r2, #1
 8001314:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f852 	bl	80003c0 <HAL_ADC_ConvCpltCallback>
}
 800131c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800131e:	06d2      	lsls	r2, r2, #27
 8001320:	d40a      	bmi.n	8001338 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800132c:	0790      	lsls	r0, r2, #30
 800132e:	d0e7      	beq.n	8001300 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f845 	bl	80003c0 <HAL_ADC_ConvCpltCallback>
 8001336:	e7f1      	b.n	800131c <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe8d 	bl	8001058 <HAL_ADC_ErrorCallback>
}
 800133e:	bd10      	pop	{r4, pc}

08001340 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001340:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001342:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001344:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800134a:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800134c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001354:	f7ff fe80 	bl	8001058 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001358:	bd08      	pop	{r3, pc}
 800135a:	bf00      	nop

0800135c <HAL_ADC_ConfigChannel>:
{
 800135c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 800135e:	2200      	movs	r2, #0
{
 8001360:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8001362:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001364:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8001368:	2a01      	cmp	r2, #1
 800136a:	f000 80ef 	beq.w	800154c <HAL_ADC_ConfigChannel+0x1f0>
 800136e:	2401      	movs	r4, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001370:	6802      	ldr	r2, [r0, #0]
 8001372:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001374:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001378:	6890      	ldr	r0, [r2, #8]
 800137a:	0745      	lsls	r5, r0, #29
 800137c:	d509      	bpl.n	8001392 <HAL_ADC_ConfigChannel+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800137e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8001380:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001382:	f042 0220 	orr.w	r2, r2, #32
 8001386:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 800138e:	b002      	add	sp, #8
 8001390:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001392:	680d      	ldr	r5, [r1, #0]
 8001394:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001396:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800139a:	db0d      	blt.n	80013b8 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800139c:	f3c5 0613 	ubfx	r6, r5, #0, #20
 80013a0:	2e00      	cmp	r6, #0
 80013a2:	f000 80c1 	beq.w	8001528 <HAL_ADC_ConfigChannel+0x1cc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80013aa:	b115      	cbz	r5, 80013b2 <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80013ac:	fab5 f585 	clz	r5, r5
 80013b0:	40ac      	lsls	r4, r5
 80013b2:	69d5      	ldr	r5, [r2, #28]
 80013b4:	432c      	orrs	r4, r5
 80013b6:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80013b8:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 80013ba:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013be:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 80013c2:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013c6:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 80013c8:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013cc:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 80013d0:	fa0c fc04 	lsl.w	ip, ip, r4
 80013d4:	40a0      	lsls	r0, r4
 80013d6:	f85e 4005 	ldr.w	r4, [lr, r5]
 80013da:	ea24 0c0c 	bic.w	ip, r4, ip
 80013de:	ea4c 0000 	orr.w	r0, ip, r0
 80013e2:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013e6:	6890      	ldr	r0, [r2, #8]
 80013e8:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013ec:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013ee:	d101      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013f0:	0700      	lsls	r0, r0, #28
 80013f2:	d542      	bpl.n	800147a <HAL_ADC_ConfigChannel+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013f4:	6890      	ldr	r0, [r2, #8]
 80013f6:	07c6      	lsls	r6, r0, #31
 80013f8:	d43d      	bmi.n	8001476 <HAL_ADC_ConfigChannel+0x11a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80013fa:	68cd      	ldr	r5, [r1, #12]
 80013fc:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80013fe:	f005 0618 	and.w	r6, r5, #24
 8001402:	48a9      	ldr	r0, [pc, #676]	@ (80016a8 <HAL_ADC_ConfigChannel+0x34c>)
 8001404:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8001408:	40f0      	lsrs	r0, r6
 800140a:	f3c4 0613 	ubfx	r6, r4, #0, #20
 800140e:	4020      	ands	r0, r4
 8001410:	ea21 0106 	bic.w	r1, r1, r6
 8001414:	4301      	orrs	r1, r0
 8001416:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800141a:	49a4      	ldr	r1, [pc, #656]	@ (80016ac <HAL_ADC_ConfigChannel+0x350>)
 800141c:	428d      	cmp	r5, r1
 800141e:	f000 808a 	beq.w	8001536 <HAL_ADC_ConfigChannel+0x1da>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001422:	2c00      	cmp	r4, #0
 8001424:	da27      	bge.n	8001476 <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001426:	49a2      	ldr	r1, [pc, #648]	@ (80016b0 <HAL_ADC_ConfigChannel+0x354>)
 8001428:	428a      	cmp	r2, r1
 800142a:	f000 80bd 	beq.w	80015a8 <HAL_ADC_ConfigChannel+0x24c>
 800142e:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8001432:	428a      	cmp	r2, r1
 8001434:	f000 80b8 	beq.w	80015a8 <HAL_ADC_ConfigChannel+0x24c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001438:	489e      	ldr	r0, [pc, #632]	@ (80016b4 <HAL_ADC_ConfigChannel+0x358>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800143a:	499f      	ldr	r1, [pc, #636]	@ (80016b8 <HAL_ADC_ConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800143c:	6886      	ldr	r6, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800143e:	688d      	ldr	r5, [r1, #8]
 8001440:	07ed      	lsls	r5, r5, #31
 8001442:	d49c      	bmi.n	800137e <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001444:	4d9d      	ldr	r5, [pc, #628]	@ (80016bc <HAL_ADC_ConfigChannel+0x360>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001446:	f006 7ce0 	and.w	ip, r6, #29360128	@ 0x1c00000
 800144a:	42ac      	cmp	r4, r5
 800144c:	f000 8156 	beq.w	80016fc <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001450:	4d9b      	ldr	r5, [pc, #620]	@ (80016c0 <HAL_ADC_ConfigChannel+0x364>)
 8001452:	42ac      	cmp	r4, r5
 8001454:	f000 8118 	beq.w	8001688 <HAL_ADC_ConfigChannel+0x32c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001458:	4d9a      	ldr	r5, [pc, #616]	@ (80016c4 <HAL_ADC_ConfigChannel+0x368>)
 800145a:	42ac      	cmp	r4, r5
 800145c:	d10b      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 800145e:	0274      	lsls	r4, r6, #9
 8001460:	d409      	bmi.n	8001476 <HAL_ADC_ConfigChannel+0x11a>
 8001462:	428a      	cmp	r2, r1
 8001464:	d107      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001466:	6882      	ldr	r2, [r0, #8]
 8001468:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800146c:	ea42 020c 	orr.w	r2, r2, ip
 8001470:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001474:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001476:	2000      	movs	r0, #0
 8001478:	e786      	b.n	8001388 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800147a:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800147c:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 8001480:	f04f 0e07 	mov.w	lr, #7
 8001484:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001486:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8001488:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800148c:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001490:	fa0e fe04 	lsl.w	lr, lr, r4
 8001494:	fa06 f404 	lsl.w	r4, r6, r4
 8001498:	f85c 0005 	ldr.w	r0, [ip, r5]
 800149c:	ea20 000e 	bic.w	r0, r0, lr
 80014a0:	4320      	orrs	r0, r4
 80014a2:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80014a6:	4888      	ldr	r0, [pc, #544]	@ (80016c8 <HAL_ADC_ConfigChannel+0x36c>)
 80014a8:	694d      	ldr	r5, [r1, #20]
 80014aa:	6800      	ldr	r0, [r0, #0]
 80014ac:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 80014b0:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 80014b4:	68d0      	ldr	r0, [r2, #12]
 80014b6:	d039      	beq.n	800152c <HAL_ADC_ConfigChannel+0x1d0>
 80014b8:	f010 0f10 	tst.w	r0, #16
 80014bc:	68d0      	ldr	r0, [r2, #12]
 80014be:	d035      	beq.n	800152c <HAL_ADC_ConfigChannel+0x1d0>
 80014c0:	0840      	lsrs	r0, r0, #1
 80014c2:	f000 0008 	and.w	r0, r0, #8
 80014c6:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80014c8:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80014ca:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80014cc:	2e04      	cmp	r6, #4
 80014ce:	d040      	beq.n	8001552 <HAL_ADC_ConfigChannel+0x1f6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014d0:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 80014d4:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 80014d8:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 80014dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80014e0:	4320      	orrs	r0, r4
 80014e2:	4328      	orrs	r0, r5
 80014e4:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80014e8:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ea:	690d      	ldr	r5, [r1, #16]
 80014ec:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80014f0:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 80014f4:	fab4 f484 	clz	r4, r4
 80014f8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80014fc:	0964      	lsrs	r4, r4, #5
 80014fe:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 8001502:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001506:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001508:	690d      	ldr	r5, [r1, #16]
 800150a:	f1a0 0001 	sub.w	r0, r0, #1
 800150e:	6914      	ldr	r4, [r2, #16]
 8001510:	f005 051f 	and.w	r5, r5, #31
 8001514:	fab0 f080 	clz	r0, r0
 8001518:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 800151c:	0940      	lsrs	r0, r0, #5
 800151e:	02c0      	lsls	r0, r0, #11
 8001520:	40a8      	lsls	r0, r5
 8001522:	4320      	orrs	r0, r4
 8001524:	6110      	str	r0, [r2, #16]
}
 8001526:	e765      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001528:	4084      	lsls	r4, r0
 800152a:	e742      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800152c:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001530:	0040      	lsls	r0, r0, #1
 8001532:	4085      	lsls	r5, r0
 8001534:	e7c8      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x16c>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001536:	495e      	ldr	r1, [pc, #376]	@ (80016b0 <HAL_ADC_ConfigChannel+0x354>)
 8001538:	428a      	cmp	r2, r1
 800153a:	d07a      	beq.n	8001632 <HAL_ADC_ConfigChannel+0x2d6>
 800153c:	4963      	ldr	r1, [pc, #396]	@ (80016cc <HAL_ADC_ConfigChannel+0x370>)
 800153e:	428a      	cmp	r2, r1
 8001540:	d040      	beq.n	80015c4 <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001542:	69d1      	ldr	r1, [r2, #28]
 8001544:	f041 0101 	orr.w	r1, r1, #1
 8001548:	61d1      	str	r1, [r2, #28]
}
 800154a:	e76a      	b.n	8001422 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 800154c:	2002      	movs	r0, #2
}
 800154e:	b002      	add	sp, #8
 8001550:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001552:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8001554:	0684      	lsls	r4, r0, #26
 8001556:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 800155a:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 800155e:	d014      	beq.n	800158a <HAL_ADC_ConfigChannel+0x22e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001560:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001562:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001566:	4284      	cmp	r4, r0
 8001568:	d019      	beq.n	800159e <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800156a:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800156c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001570:	4284      	cmp	r4, r0
 8001572:	d00f      	beq.n	8001594 <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001574:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001576:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 800157a:	4284      	cmp	r4, r0
 800157c:	f47f af3a 	bne.w	80013f4 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001580:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001582:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001586:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8001588:	e734      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800158a:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 800158c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001590:	6610      	str	r0, [r2, #96]	@ 0x60
 8001592:	e7e5      	b.n	8001560 <HAL_ADC_ConfigChannel+0x204>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001594:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001596:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800159a:	6690      	str	r0, [r2, #104]	@ 0x68
 800159c:	e7ea      	b.n	8001574 <HAL_ADC_ConfigChannel+0x218>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800159e:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80015a0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80015a4:	6650      	str	r0, [r2, #100]	@ 0x64
 80015a6:	e7e0      	b.n	800156a <HAL_ADC_ConfigChannel+0x20e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a8:	4949      	ldr	r1, [pc, #292]	@ (80016d0 <HAL_ADC_ConfigChannel+0x374>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015aa:	4a41      	ldr	r2, [pc, #260]	@ (80016b0 <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015ac:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015ae:	6892      	ldr	r2, [r2, #8]
 80015b0:	f012 0f01 	tst.w	r2, #1
 80015b4:	4a45      	ldr	r2, [pc, #276]	@ (80016cc <HAL_ADC_ConfigChannel+0x370>)
 80015b6:	6892      	ldr	r2, [r2, #8]
 80015b8:	f47f aee1 	bne.w	800137e <HAL_ADC_ConfigChannel+0x22>
 80015bc:	07d2      	lsls	r2, r2, #31
 80015be:	f53f aede 	bmi.w	800137e <HAL_ADC_ConfigChannel+0x22>
 80015c2:	e758      	b.n	8001476 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80015c4:	4943      	ldr	r1, [pc, #268]	@ (80016d4 <HAL_ADC_ConfigChannel+0x378>)
 80015c6:	428c      	cmp	r4, r1
 80015c8:	d058      	beq.n	800167c <HAL_ADC_ConfigChannel+0x320>
 80015ca:	4943      	ldr	r1, [pc, #268]	@ (80016d8 <HAL_ADC_ConfigChannel+0x37c>)
 80015cc:	428c      	cmp	r4, r1
 80015ce:	d057      	beq.n	8001680 <HAL_ADC_ConfigChannel+0x324>
 80015d0:	4942      	ldr	r1, [pc, #264]	@ (80016dc <HAL_ADC_ConfigChannel+0x380>)
 80015d2:	428c      	cmp	r4, r1
 80015d4:	f000 80b5 	beq.w	8001742 <HAL_ADC_ConfigChannel+0x3e6>
 80015d8:	4941      	ldr	r1, [pc, #260]	@ (80016e0 <HAL_ADC_ConfigChannel+0x384>)
 80015da:	428c      	cmp	r4, r1
 80015dc:	f000 80b3 	beq.w	8001746 <HAL_ADC_ConfigChannel+0x3ea>
 80015e0:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 80015e4:	3110      	adds	r1, #16
 80015e6:	428c      	cmp	r4, r1
 80015e8:	f000 80af 	beq.w	800174a <HAL_ADC_ConfigChannel+0x3ee>
 80015ec:	493d      	ldr	r1, [pc, #244]	@ (80016e4 <HAL_ADC_ConfigChannel+0x388>)
 80015ee:	428c      	cmp	r4, r1
 80015f0:	f000 80ad 	beq.w	800174e <HAL_ADC_ConfigChannel+0x3f2>
 80015f4:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 80015f8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80015fc:	428c      	cmp	r4, r1
 80015fe:	f000 80a8 	beq.w	8001752 <HAL_ADC_ConfigChannel+0x3f6>
 8001602:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001606:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800160a:	428c      	cmp	r4, r1
 800160c:	f000 80a3 	beq.w	8001756 <HAL_ADC_ConfigChannel+0x3fa>
 8001610:	4935      	ldr	r1, [pc, #212]	@ (80016e8 <HAL_ADC_ConfigChannel+0x38c>)
 8001612:	428c      	cmp	r4, r1
 8001614:	d195      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x1e6>
 8001616:	4935      	ldr	r1, [pc, #212]	@ (80016ec <HAL_ADC_ConfigChannel+0x390>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 800161c:	2900      	cmp	r1, #0
 800161e:	d031      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 8001620:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f101 	lsl.w	r1, r0, r1
 800162a:	69d0      	ldr	r0, [r2, #28]
 800162c:	4301      	orrs	r1, r0
 800162e:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001630:	e721      	b.n	8001476 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001632:	4928      	ldr	r1, [pc, #160]	@ (80016d4 <HAL_ADC_ConfigChannel+0x378>)
 8001634:	428c      	cmp	r4, r1
 8001636:	d021      	beq.n	800167c <HAL_ADC_ConfigChannel+0x320>
 8001638:	4927      	ldr	r1, [pc, #156]	@ (80016d8 <HAL_ADC_ConfigChannel+0x37c>)
 800163a:	428c      	cmp	r4, r1
 800163c:	d020      	beq.n	8001680 <HAL_ADC_ConfigChannel+0x324>
 800163e:	4927      	ldr	r1, [pc, #156]	@ (80016dc <HAL_ADC_ConfigChannel+0x380>)
 8001640:	428c      	cmp	r4, r1
 8001642:	d07e      	beq.n	8001742 <HAL_ADC_ConfigChannel+0x3e6>
 8001644:	4926      	ldr	r1, [pc, #152]	@ (80016e0 <HAL_ADC_ConfigChannel+0x384>)
 8001646:	428c      	cmp	r4, r1
 8001648:	d07d      	beq.n	8001746 <HAL_ADC_ConfigChannel+0x3ea>
 800164a:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 800164e:	3110      	adds	r1, #16
 8001650:	428c      	cmp	r4, r1
 8001652:	d07a      	beq.n	800174a <HAL_ADC_ConfigChannel+0x3ee>
 8001654:	4923      	ldr	r1, [pc, #140]	@ (80016e4 <HAL_ADC_ConfigChannel+0x388>)
 8001656:	428c      	cmp	r4, r1
 8001658:	d079      	beq.n	800174e <HAL_ADC_ConfigChannel+0x3f2>
 800165a:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 800165e:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8001662:	428c      	cmp	r4, r1
 8001664:	d075      	beq.n	8001752 <HAL_ADC_ConfigChannel+0x3f6>
 8001666:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 800166a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800166e:	428c      	cmp	r4, r1
 8001670:	d071      	beq.n	8001756 <HAL_ADC_ConfigChannel+0x3fa>
 8001672:	491f      	ldr	r1, [pc, #124]	@ (80016f0 <HAL_ADC_ConfigChannel+0x394>)
 8001674:	428c      	cmp	r4, r1
 8001676:	d1cb      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x2b4>
 8001678:	491e      	ldr	r1, [pc, #120]	@ (80016f4 <HAL_ADC_ConfigChannel+0x398>)
 800167a:	e7cd      	b.n	8001618 <HAL_ADC_ConfigChannel+0x2bc>
 800167c:	2101      	movs	r1, #1
 800167e:	e7cb      	b.n	8001618 <HAL_ADC_ConfigChannel+0x2bc>
 8001680:	491d      	ldr	r1, [pc, #116]	@ (80016f8 <HAL_ADC_ConfigChannel+0x39c>)
 8001682:	e7c9      	b.n	8001618 <HAL_ADC_ConfigChannel+0x2bc>
 8001684:	2101      	movs	r1, #1
 8001686:	e7d0      	b.n	800162a <HAL_ADC_ConfigChannel+0x2ce>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001688:	01f5      	lsls	r5, r6, #7
 800168a:	f53f aef4 	bmi.w	8001476 <HAL_ADC_ConfigChannel+0x11a>
 800168e:	428a      	cmp	r2, r1
 8001690:	f47f aef1 	bne.w	8001476 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001694:	6882      	ldr	r2, [r0, #8]
 8001696:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800169a:	ea42 020c 	orr.w	r2, r2, ip
 800169e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80016a2:	6082      	str	r2, [r0, #8]
}
 80016a4:	e6e7      	b.n	8001476 <HAL_ADC_ConfigChannel+0x11a>
 80016a6:	bf00      	nop
 80016a8:	000fffff 	.word	0x000fffff
 80016ac:	47ff0000 	.word	0x47ff0000
 80016b0:	40022000 	.word	0x40022000
 80016b4:	58026300 	.word	0x58026300
 80016b8:	58026000 	.word	0x58026000
 80016bc:	cb840000 	.word	0xcb840000
 80016c0:	c7520000 	.word	0xc7520000
 80016c4:	cfb80000 	.word	0xcfb80000
 80016c8:	5c001000 	.word	0x5c001000
 80016cc:	40022100 	.word	0x40022100
 80016d0:	40022300 	.word	0x40022300
 80016d4:	04300002 	.word	0x04300002
 80016d8:	08600004 	.word	0x08600004
 80016dc:	0c900008 	.word	0x0c900008
 80016e0:	10c00010 	.word	0x10c00010
 80016e4:	2a000400 	.word	0x2a000400
 80016e8:	4b840000 	.word	0x4b840000
 80016ec:	4fb80000 	.word	0x4fb80000
 80016f0:	43210000 	.word	0x43210000
 80016f4:	47520000 	.word	0x47520000
 80016f8:	19200040 	.word	0x19200040
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016fc:	0236      	lsls	r6, r6, #8
 80016fe:	f53f aeba 	bmi.w	8001476 <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001702:	428a      	cmp	r2, r1
 8001704:	f47f aeb7 	bne.w	8001476 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001708:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800170a:	4914      	ldr	r1, [pc, #80]	@ (800175c <HAL_ADC_ConfigChannel+0x400>)
 800170c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001710:	ea42 020c 	orr.w	r2, r2, ip
 8001714:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001718:	6082      	str	r2, [r0, #8]
 800171a:	680a      	ldr	r2, [r1, #0]
 800171c:	4910      	ldr	r1, [pc, #64]	@ (8001760 <HAL_ADC_ConfigChannel+0x404>)
 800171e:	0992      	lsrs	r2, r2, #6
 8001720:	fba1 1202 	umull	r1, r2, r1, r2
 8001724:	0992      	lsrs	r2, r2, #6
 8001726:	3201      	adds	r2, #1
 8001728:	0052      	lsls	r2, r2, #1
 800172a:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 800172c:	9a01      	ldr	r2, [sp, #4]
 800172e:	2a00      	cmp	r2, #0
 8001730:	f43f aea1 	beq.w	8001476 <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 8001734:	9a01      	ldr	r2, [sp, #4]
 8001736:	3a01      	subs	r2, #1
 8001738:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 800173a:	9a01      	ldr	r2, [sp, #4]
 800173c:	2a00      	cmp	r2, #0
 800173e:	d1f9      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x3d8>
 8001740:	e699      	b.n	8001476 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001742:	4908      	ldr	r1, [pc, #32]	@ (8001764 <HAL_ADC_ConfigChannel+0x408>)
 8001744:	e768      	b.n	8001618 <HAL_ADC_ConfigChannel+0x2bc>
 8001746:	4908      	ldr	r1, [pc, #32]	@ (8001768 <HAL_ADC_ConfigChannel+0x40c>)
 8001748:	e766      	b.n	8001618 <HAL_ADC_ConfigChannel+0x2bc>
 800174a:	4908      	ldr	r1, [pc, #32]	@ (800176c <HAL_ADC_ConfigChannel+0x410>)
 800174c:	e764      	b.n	8001618 <HAL_ADC_ConfigChannel+0x2bc>
 800174e:	4908      	ldr	r1, [pc, #32]	@ (8001770 <HAL_ADC_ConfigChannel+0x414>)
 8001750:	e762      	b.n	8001618 <HAL_ADC_ConfigChannel+0x2bc>
 8001752:	4908      	ldr	r1, [pc, #32]	@ (8001774 <HAL_ADC_ConfigChannel+0x418>)
 8001754:	e760      	b.n	8001618 <HAL_ADC_ConfigChannel+0x2bc>
 8001756:	4908      	ldr	r1, [pc, #32]	@ (8001778 <HAL_ADC_ConfigChannel+0x41c>)
 8001758:	e75e      	b.n	8001618 <HAL_ADC_ConfigChannel+0x2bc>
 800175a:	bf00      	nop
 800175c:	24000004 	.word	0x24000004
 8001760:	053e2d63 	.word	0x053e2d63
 8001764:	1d500080 	.word	0x1d500080
 8001768:	21800100 	.word	0x21800100
 800176c:	25b00200 	.word	0x25b00200
 8001770:	2e300800 	.word	0x2e300800
 8001774:	32601000 	.word	0x32601000
 8001778:	36902000 	.word	0x36902000

0800177c <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800177c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	07d1      	lsls	r1, r2, #31
 8001782:	d501      	bpl.n	8001788 <ADC_Enable+0xc>
  return HAL_OK;
 8001784:	2000      	movs	r0, #0
}
 8001786:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001788:	6899      	ldr	r1, [r3, #8]
 800178a:	4a23      	ldr	r2, [pc, #140]	@ (8001818 <ADC_Enable+0x9c>)
 800178c:	4211      	tst	r1, r2
{
 800178e:	b570      	push	{r4, r5, r6, lr}
 8001790:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001792:	d12f      	bne.n	80017f4 <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 8001794:	6899      	ldr	r1, [r3, #8]
 8001796:	4a21      	ldr	r2, [pc, #132]	@ (800181c <ADC_Enable+0xa0>)
 8001798:	400a      	ands	r2, r1
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80017a0:	f7ff fc46 	bl	8001030 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 80017a8:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d02c      	beq.n	8001808 <ADC_Enable+0x8c>
 80017ae:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d028      	beq.n	8001808 <ADC_Enable+0x8c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017b6:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 80017ba:	f502 4284 	add.w	r2, r2, #16896	@ 0x4200
 80017be:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	07d2      	lsls	r2, r2, #31
 80017c4:	d414      	bmi.n	80017f0 <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 80017c6:	4e15      	ldr	r6, [pc, #84]	@ (800181c <ADC_Enable+0xa0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	07d0      	lsls	r0, r2, #31
 80017cc:	d404      	bmi.n	80017d8 <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	4032      	ands	r2, r6
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017d8:	f7ff fc2a 	bl	8001030 <HAL_GetTick>
 80017dc:	1b43      	subs	r3, r0, r5
 80017de:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017e0:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017e2:	d902      	bls.n	80017ea <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	07d1      	lsls	r1, r2, #31
 80017e8:	d504      	bpl.n	80017f4 <ADC_Enable+0x78>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	07d2      	lsls	r2, r2, #31
 80017ee:	d5eb      	bpl.n	80017c8 <ADC_Enable+0x4c>
  return HAL_OK;
 80017f0:	2000      	movs	r0, #0
}
 80017f2:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 80017f6:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8001806:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001808:	4a06      	ldr	r2, [pc, #24]	@ (8001824 <ADC_Enable+0xa8>)
 800180a:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800180c:	06d6      	lsls	r6, r2, #27
 800180e:	d0d7      	beq.n	80017c0 <ADC_Enable+0x44>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001810:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <ADC_Enable+0xac>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001812:	4293      	cmp	r3, r2
 8001814:	d1d4      	bne.n	80017c0 <ADC_Enable+0x44>
 8001816:	e7eb      	b.n	80017f0 <ADC_Enable+0x74>
 8001818:	8000003f 	.word	0x8000003f
 800181c:	7fffffc0 	.word	0x7fffffc0
 8001820:	40022000 	.word	0x40022000
 8001824:	40022300 	.word	0x40022300
 8001828:	40022100 	.word	0x40022100

0800182c <HAL_ADC_Start_DMA>:
{
 800182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001830:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <HAL_ADC_Start_DMA+0xf4>)
{
 8001832:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001834:	6800      	ldr	r0, [r0, #0]
{
 8001836:	460e      	mov	r6, r1
 8001838:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800183a:	4298      	cmp	r0, r3
 800183c:	d01c      	beq.n	8001878 <HAL_ADC_Start_DMA+0x4c>
 800183e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001842:	4298      	cmp	r0, r3
 8001844:	d018      	beq.n	8001878 <HAL_ADC_Start_DMA+0x4c>
 8001846:	4b37      	ldr	r3, [pc, #220]	@ (8001924 <HAL_ADC_Start_DMA+0xf8>)
 8001848:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800184a:	6885      	ldr	r5, [r0, #8]
 800184c:	f015 0504 	ands.w	r5, r5, #4
 8001850:	d118      	bne.n	8001884 <HAL_ADC_Start_DMA+0x58>
    __HAL_LOCK(hadc);
 8001852:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8001856:	2a01      	cmp	r2, #1
 8001858:	d014      	beq.n	8001884 <HAL_ADC_Start_DMA+0x58>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800185a:	f003 081f 	and.w	r8, r3, #31
 800185e:	f240 2321 	movw	r3, #545	@ 0x221
 8001862:	2001      	movs	r0, #1
 8001864:	fa23 f308 	lsr.w	r3, r3, r8
 8001868:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800186c:	4003      	ands	r3, r0
 800186e:	d10c      	bne.n	800188a <HAL_ADC_Start_DMA+0x5e>
      __HAL_UNLOCK(hadc);
 8001870:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8001874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001878:	4b2b      	ldr	r3, [pc, #172]	@ (8001928 <HAL_ADC_Start_DMA+0xfc>)
 800187a:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800187c:	6885      	ldr	r5, [r0, #8]
 800187e:	f015 0504 	ands.w	r5, r5, #4
 8001882:	d0e6      	beq.n	8001852 <HAL_ADC_Start_DMA+0x26>
    __HAL_LOCK(hadc);
 8001884:	2002      	movs	r0, #2
}
 8001886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff ff76 	bl	800177c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001890:	2800      	cmp	r0, #0
 8001892:	d140      	bne.n	8001916 <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 8001894:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001896:	4b25      	ldr	r3, [pc, #148]	@ (800192c <HAL_ADC_Start_DMA+0x100>)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001898:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800189a:	4013      	ands	r3, r2
 800189c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a0:	6563      	str	r3, [r4, #84]	@ 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018a2:	f1b8 0f00 	cmp.w	r8, #0
 80018a6:	d002      	beq.n	80018ae <HAL_ADC_Start_DMA+0x82>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018a8:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <HAL_ADC_Start_DMA+0x104>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018aa:	4299      	cmp	r1, r3
 80018ac:	d003      	beq.n	80018b6 <HAL_ADC_Start_DMA+0x8a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80018b4:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018b6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80018b8:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 80018bc:	d02e      	beq.n	800191c <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80018c0:	f023 0306 	bic.w	r3, r3, #6
 80018c4:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018c6:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018c8:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018ca:	4d1a      	ldr	r5, [pc, #104]	@ (8001934 <HAL_ADC_Start_DMA+0x108>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018cc:	463b      	mov	r3, r7
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80018ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80018d0:	3140      	adds	r1, #64	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018d2:	63c5      	str	r5, [r0, #60]	@ 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018d4:	4d18      	ldr	r5, [pc, #96]	@ (8001938 <HAL_ADC_Start_DMA+0x10c>)
 80018d6:	6405      	str	r5, [r0, #64]	@ 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018d8:	4d18      	ldr	r5, [pc, #96]	@ (800193c <HAL_ADC_Start_DMA+0x110>)
 80018da:	64c5      	str	r5, [r0, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018dc:	251c      	movs	r5, #28
 80018de:	f841 5c40 	str.w	r5, [r1, #-64]
        __HAL_UNLOCK(hadc);
 80018e2:	2500      	movs	r5, #0
 80018e4:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018e8:	f851 5c3c 	ldr.w	r5, [r1, #-60]
 80018ec:	f045 0510 	orr.w	r5, r5, #16
 80018f0:	f841 5c3c 	str.w	r5, [r1, #-60]
 80018f4:	f851 5c34 	ldr.w	r5, [r1, #-52]
 80018f8:	f025 0503 	bic.w	r5, r5, #3
 80018fc:	4335      	orrs	r5, r6
 80018fe:	f841 5c34 	str.w	r5, [r1, #-52]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001902:	f001 f8bb 	bl	8002a7c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001906:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001908:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <HAL_ADC_Start_DMA+0x114>)
 800190a:	6891      	ldr	r1, [r2, #8]
 800190c:	400b      	ands	r3, r1
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6093      	str	r3, [r2, #8]
}
 8001914:	e7b7      	b.n	8001886 <HAL_ADC_Start_DMA+0x5a>
        __HAL_UNLOCK(hadc);
 8001916:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 800191a:	e7b4      	b.n	8001886 <HAL_ADC_Start_DMA+0x5a>
          ADC_CLEAR_ERRORCODE(hadc);
 800191c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800191e:	e7d2      	b.n	80018c6 <HAL_ADC_Start_DMA+0x9a>
 8001920:	40022000 	.word	0x40022000
 8001924:	58026300 	.word	0x58026300
 8001928:	40022300 	.word	0x40022300
 800192c:	fffff0fe 	.word	0xfffff0fe
 8001930:	40022100 	.word	0x40022100
 8001934:	080012d5 	.word	0x080012d5
 8001938:	08001049 	.word	0x08001049
 800193c:	08001341 	.word	0x08001341
 8001940:	7fffffc0 	.word	0x7fffffc0

08001944 <ADC_Disable>:
{
 8001944:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001946:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	0795      	lsls	r5, r2, #30
 800194c:	d502      	bpl.n	8001954 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800194e:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8001950:	2000      	movs	r0, #0
}
 8001952:	bd38      	pop	{r3, r4, r5, pc}
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	07d4      	lsls	r4, r2, #31
 8001958:	d5fa      	bpl.n	8001950 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	4604      	mov	r4, r0
 800195e:	f002 020d 	and.w	r2, r2, #13
 8001962:	2a01      	cmp	r2, #1
 8001964:	d009      	beq.n	800197a <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001966:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001968:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196a:	f043 0310 	orr.w	r3, r3, #16
 800196e:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001970:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8001978:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800197a:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800197c:	2103      	movs	r1, #3
 800197e:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <ADC_Disable+0x70>)
 8001980:	4002      	ands	r2, r0
 8001982:	f042 0202 	orr.w	r2, r2, #2
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800198a:	f7ff fb51 	bl	8001030 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800198e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001990:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	07d9      	lsls	r1, r3, #31
 8001996:	d403      	bmi.n	80019a0 <ADC_Disable+0x5c>
 8001998:	e7da      	b.n	8001950 <ADC_Disable+0xc>
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	07db      	lsls	r3, r3, #31
 800199e:	d5d7      	bpl.n	8001950 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019a0:	f7ff fb46 	bl	8001030 <HAL_GetTick>
 80019a4:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80019a6:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019a8:	2802      	cmp	r0, #2
 80019aa:	d9f6      	bls.n	800199a <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	07d2      	lsls	r2, r2, #31
 80019b0:	d5f3      	bpl.n	800199a <ADC_Disable+0x56>
 80019b2:	e7d8      	b.n	8001966 <ADC_Disable+0x22>
 80019b4:	7fffffc0 	.word	0x7fffffc0

080019b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80019b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80019ba:	4a4f      	ldr	r2, [pc, #316]	@ (8001af8 <ADC_ConfigureBoostMode+0x140>)
{
 80019bc:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80019be:	6803      	ldr	r3, [r0, #0]
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d024      	beq.n	8001a0e <ADC_ConfigureBoostMode+0x56>
 80019c4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d020      	beq.n	8001a0e <ADC_ConfigureBoostMode+0x56>
 80019cc:	4b4b      	ldr	r3, [pc, #300]	@ (8001afc <ADC_ConfigureBoostMode+0x144>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80019d4:	d020      	beq.n	8001a18 <ADC_ConfigureBoostMode+0x60>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80019d6:	f002 fcdd 	bl	8004394 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80019da:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80019dc:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80019de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80019e2:	d06d      	beq.n	8001ac0 <ADC_ConfigureBoostMode+0x108>
 80019e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80019e8:	d072      	beq.n	8001ad0 <ADC_ConfigureBoostMode+0x118>
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ee:	d067      	beq.n	8001ac0 <ADC_ConfigureBoostMode+0x108>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80019f0:	f7ff fb24 	bl	800103c <HAL_GetREVID>
 80019f4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80019f8:	4298      	cmp	r0, r3
 80019fa:	d82d      	bhi.n	8001a58 <ADC_ConfigureBoostMode+0xa0>
  {
    if (freq > 20000000UL)
 80019fc:	4a40      	ldr	r2, [pc, #256]	@ (8001b00 <ADC_ConfigureBoostMode+0x148>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80019fe:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 8001a00:	4295      	cmp	r5, r2
 8001a02:	d947      	bls.n	8001a94 <ADC_ConfigureBoostMode+0xdc>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a0a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001a0c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b04 <ADC_ConfigureBoostMode+0x14c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8001a16:	d1de      	bne.n	80019d6 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001a18:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	f003 ff33 	bl	8005888 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001a22:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001a24:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8001a26:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001a2a:	d04d      	beq.n	8001ac8 <ADC_ConfigureBoostMode+0x110>
 8001a2c:	d825      	bhi.n	8001a7a <ADC_ConfigureBoostMode+0xc2>
 8001a2e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001a32:	d04b      	beq.n	8001acc <ADC_ConfigureBoostMode+0x114>
 8001a34:	d84e      	bhi.n	8001ad4 <ADC_ConfigureBoostMode+0x11c>
 8001a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a3a:	d008      	beq.n	8001a4e <ADC_ConfigureBoostMode+0x96>
 8001a3c:	d855      	bhi.n	8001aea <ADC_ConfigureBoostMode+0x132>
 8001a3e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001a42:	d004      	beq.n	8001a4e <ADC_ConfigureBoostMode+0x96>
 8001a44:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001a48:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001a4c:	d1d0      	bne.n	80019f0 <ADC_ConfigureBoostMode+0x38>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001a4e:	0c9b      	lsrs	r3, r3, #18
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8001a56:	e7cb      	b.n	80019f0 <ADC_ConfigureBoostMode+0x38>
    if (freq <= 6250000UL)
 8001a58:	4a2b      	ldr	r2, [pc, #172]	@ (8001b08 <ADC_ConfigureBoostMode+0x150>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001a5a:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 8001a5c:	4295      	cmp	r5, r2
 8001a5e:	d923      	bls.n	8001aa8 <ADC_ConfigureBoostMode+0xf0>
    else if (freq <= 12500000UL)
 8001a60:	4a2a      	ldr	r2, [pc, #168]	@ (8001b0c <ADC_ConfigureBoostMode+0x154>)
 8001a62:	4295      	cmp	r5, r2
 8001a64:	d925      	bls.n	8001ab2 <ADC_ConfigureBoostMode+0xfa>
    else if (freq <= 25000000UL)
 8001a66:	4a2a      	ldr	r2, [pc, #168]	@ (8001b10 <ADC_ConfigureBoostMode+0x158>)
 8001a68:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001a6a:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8001a6c:	d839      	bhi.n	8001ae2 <ADC_ConfigureBoostMode+0x12a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001a6e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a76:	609a      	str	r2, [r3, #8]
}
 8001a78:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8001a7a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001a7e:	d02e      	beq.n	8001ade <ADC_ConfigureBoostMode+0x126>
 8001a80:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001a84:	d1b4      	bne.n	80019f0 <ADC_ConfigureBoostMode+0x38>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001a86:	f7ff fad9 	bl	800103c <HAL_GetREVID>
 8001a8a:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001a8e:	4298      	cmp	r0, r3
 8001a90:	d805      	bhi.n	8001a9e <ADC_ConfigureBoostMode+0xe6>
 8001a92:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a9a:	609a      	str	r2, [r3, #8]
}
 8001a9c:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <ADC_ConfigureBoostMode+0x150>)
 8001aa0:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	d304      	bcc.n	8001ab2 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001aae:	609a      	str	r2, [r3, #8]
}
 8001ab0:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001ab8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001abc:	609a      	str	r2, [r3, #8]
}
 8001abe:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8001ac6:	e793      	b.n	80019f0 <ADC_ConfigureBoostMode+0x38>
        freq /= 64UL;
 8001ac8:	0985      	lsrs	r5, r0, #6
        break;
 8001aca:	e791      	b.n	80019f0 <ADC_ConfigureBoostMode+0x38>
        freq /= 16UL;
 8001acc:	0905      	lsrs	r5, r0, #4
        break;
 8001ace:	e78f      	b.n	80019f0 <ADC_ConfigureBoostMode+0x38>
        freq /= 4UL;
 8001ad0:	0885      	lsrs	r5, r0, #2
        break;
 8001ad2:	e78d      	b.n	80019f0 <ADC_ConfigureBoostMode+0x38>
    switch (hadc->Init.ClockPrescaler)
 8001ad4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ad8:	d18a      	bne.n	80019f0 <ADC_ConfigureBoostMode+0x38>
        freq /= 32UL;
 8001ada:	0945      	lsrs	r5, r0, #5
        break;
 8001adc:	e788      	b.n	80019f0 <ADC_ConfigureBoostMode+0x38>
        freq /= 128UL;
 8001ade:	09c5      	lsrs	r5, r0, #7
        break;
 8001ae0:	e786      	b.n	80019f0 <ADC_ConfigureBoostMode+0x38>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001ae2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001ae6:	609a      	str	r2, [r3, #8]
}
 8001ae8:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8001aea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001aee:	d0ae      	beq.n	8001a4e <ADC_ConfigureBoostMode+0x96>
 8001af0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001af4:	d0ab      	beq.n	8001a4e <ADC_ConfigureBoostMode+0x96>
 8001af6:	e77b      	b.n	80019f0 <ADC_ConfigureBoostMode+0x38>
 8001af8:	40022000 	.word	0x40022000
 8001afc:	58026300 	.word	0x58026300
 8001b00:	01312d00 	.word	0x01312d00
 8001b04:	40022300 	.word	0x40022300
 8001b08:	00bebc21 	.word	0x00bebc21
 8001b0c:	017d7841 	.word	0x017d7841
 8001b10:	02faf081 	.word	0x02faf081

08001b14 <HAL_ADC_Init>:
{
 8001b14:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8001b16:	2300      	movs	r3, #0
{
 8001b18:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8001b1a:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	f000 80a9 	beq.w	8001c74 <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b22:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8001b24:	4604      	mov	r4, r0
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	f000 80aa 	beq.w	8001c80 <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b2c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b2e:	6893      	ldr	r3, [r2, #8]
 8001b30:	009d      	lsls	r5, r3, #2
 8001b32:	d503      	bpl.n	8001b3c <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b34:	6891      	ldr	r1, [r2, #8]
 8001b36:	4b71      	ldr	r3, [pc, #452]	@ (8001cfc <HAL_ADC_Init+0x1e8>)
 8001b38:	400b      	ands	r3, r1
 8001b3a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b3c:	6893      	ldr	r3, [r2, #8]
 8001b3e:	00d8      	lsls	r0, r3, #3
 8001b40:	d416      	bmi.n	8001b70 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b42:	4b6f      	ldr	r3, [pc, #444]	@ (8001d00 <HAL_ADC_Init+0x1ec>)
 8001b44:	496f      	ldr	r1, [pc, #444]	@ (8001d04 <HAL_ADC_Init+0x1f0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001b48:	6890      	ldr	r0, [r2, #8]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	fba1 1303 	umull	r1, r3, r1, r3
 8001b50:	496d      	ldr	r1, [pc, #436]	@ (8001d08 <HAL_ADC_Init+0x1f4>)
 8001b52:	099b      	lsrs	r3, r3, #6
 8001b54:	4001      	ands	r1, r0
 8001b56:	3301      	adds	r3, #1
 8001b58:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001b5c:	6091      	str	r1, [r2, #8]
 8001b5e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001b60:	9b01      	ldr	r3, [sp, #4]
 8001b62:	b12b      	cbz	r3, 8001b70 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8001b64:	9b01      	ldr	r3, [sp, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001b6a:	9b01      	ldr	r3, [sp, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f9      	bne.n	8001b64 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b70:	6893      	ldr	r3, [r2, #8]
 8001b72:	00d9      	lsls	r1, r3, #3
 8001b74:	f100 8082 	bmi.w	8001c7c <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b78:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8001b7a:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7c:	f043 0310 	orr.w	r3, r3, #16
 8001b80:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001b84:	432b      	orrs	r3, r5
 8001b86:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b88:	6893      	ldr	r3, [r2, #8]
 8001b8a:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b8e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001b90:	d16c      	bne.n	8001c6c <HAL_ADC_Init+0x158>
 8001b92:	06db      	lsls	r3, r3, #27
 8001b94:	d46a      	bmi.n	8001c6c <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 8001b96:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001b98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ba2:	6893      	ldr	r3, [r2, #8]
 8001ba4:	07de      	lsls	r6, r3, #31
 8001ba6:	d40c      	bmi.n	8001bc2 <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ba8:	4b58      	ldr	r3, [pc, #352]	@ (8001d0c <HAL_ADC_Init+0x1f8>)
 8001baa:	429a      	cmp	r2, r3
 8001bac:	f000 8081 	beq.w	8001cb2 <HAL_ADC_Init+0x19e>
 8001bb0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d07c      	beq.n	8001cb2 <HAL_ADC_Init+0x19e>
 8001bb8:	4b55      	ldr	r3, [pc, #340]	@ (8001d10 <HAL_ADC_Init+0x1fc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	07d9      	lsls	r1, r3, #31
 8001bbe:	f140 808a 	bpl.w	8001cd6 <HAL_ADC_Init+0x1c2>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001bc2:	f7ff fa3b 	bl	800103c <HAL_GetREVID>
 8001bc6:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001bca:	68a1      	ldr	r1, [r4, #8]
 8001bcc:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bce:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001bd0:	d85c      	bhi.n	8001c8c <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bd2:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bd6:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bd8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001bda:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8001bde:	4302      	orrs	r2, r0
 8001be0:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d103      	bne.n	8001bee <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001be6:	6a23      	ldr	r3, [r4, #32]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001bf0:	b123      	cbz	r3, 8001bfc <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bf2:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001bf6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001bf8:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bfa:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	4945      	ldr	r1, [pc, #276]	@ (8001d14 <HAL_ADC_Init+0x200>)
 8001c00:	68d8      	ldr	r0, [r3, #12]
 8001c02:	4001      	ands	r1, r0
 8001c04:	4311      	orrs	r1, r2
 8001c06:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c0e:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c10:	d11c      	bne.n	8001c4c <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c12:	0712      	lsls	r2, r2, #28
 8001c14:	d41a      	bmi.n	8001c4c <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c16:	68d8      	ldr	r0, [r3, #12]
 8001c18:	4a3f      	ldr	r2, [pc, #252]	@ (8001d18 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c1a:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c1c:	4002      	ands	r2, r0
 8001c1e:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8001c22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001c24:	430a      	orrs	r2, r1
 8001c26:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001c28:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8001c2c:	2a01      	cmp	r2, #1
 8001c2e:	d054      	beq.n	8001cda <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c38:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8001c3a:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001c3e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8001c42:	430a      	orrs	r2, r1
 8001c44:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8001c46:	f7ff feb7 	bl	80019b8 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c4a:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c4c:	68e2      	ldr	r2, [r4, #12]
 8001c4e:	2a01      	cmp	r2, #1
 8001c50:	d027      	beq.n	8001ca2 <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c54:	f022 020f 	bic.w	r2, r2, #15
 8001c58:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c5a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 8001c5c:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c5e:	f023 0303 	bic.w	r3, r3, #3
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001c6e:	f043 0310 	orr.w	r3, r3, #16
 8001c72:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8001c74:	2501      	movs	r5, #1
}
 8001c76:	4628      	mov	r0, r5
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c7c:	2500      	movs	r5, #0
 8001c7e:	e783      	b.n	8001b88 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 8001c80:	f7fe ff76 	bl	8000b70 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001c84:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8001c86:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8001c8a:	e74f      	b.n	8001b2c <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c8c:	2910      	cmp	r1, #16
 8001c8e:	d1a0      	bne.n	8001bd2 <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c90:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c92:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c94:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001c98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	f042 021c 	orr.w	r2, r2, #28
 8001ca0:	e79f      	b.n	8001be2 <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ca2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ca4:	69a2      	ldr	r2, [r4, #24]
 8001ca6:	f021 010f 	bic.w	r1, r1, #15
 8001caa:	3a01      	subs	r2, #1
 8001cac:	430a      	orrs	r2, r1
 8001cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cb0:	e7d3      	b.n	8001c5a <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cb2:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <HAL_ADC_Init+0x1f8>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f013 0f01 	tst.w	r3, #1
 8001cba:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <HAL_ADC_Init+0x208>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	d180      	bne.n	8001bc2 <HAL_ADC_Init+0xae>
 8001cc0:	07d8      	lsls	r0, r3, #31
 8001cc2:	f53f af7e 	bmi.w	8001bc2 <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cc6:	4a16      	ldr	r2, [pc, #88]	@ (8001d20 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cc8:	6893      	ldr	r3, [r2, #8]
 8001cca:	6861      	ldr	r1, [r4, #4]
 8001ccc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	6093      	str	r3, [r2, #8]
}
 8001cd4:	e775      	b.n	8001bc2 <HAL_ADC_Init+0xae>
 8001cd6:	4a13      	ldr	r2, [pc, #76]	@ (8001d24 <HAL_ADC_Init+0x210>)
 8001cd8:	e7f6      	b.n	8001cc8 <HAL_ADC_Init+0x1b4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cda:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8001cde:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8001ce0:	3901      	subs	r1, #1
 8001ce2:	6918      	ldr	r0, [r3, #16]
 8001ce4:	4332      	orrs	r2, r6
 8001ce6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001cea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001cec:	430a      	orrs	r2, r1
 8001cee:	490e      	ldr	r1, [pc, #56]	@ (8001d28 <HAL_ADC_Init+0x214>)
 8001cf0:	4001      	ands	r1, r0
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
 8001cf8:	611a      	str	r2, [r3, #16]
 8001cfa:	e79d      	b.n	8001c38 <HAL_ADC_Init+0x124>
 8001cfc:	5fffffc0 	.word	0x5fffffc0
 8001d00:	24000004 	.word	0x24000004
 8001d04:	053e2d63 	.word	0x053e2d63
 8001d08:	6fffffc0 	.word	0x6fffffc0
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	58026000 	.word	0x58026000
 8001d14:	fff0c003 	.word	0xfff0c003
 8001d18:	ffffbffc 	.word	0xffffbffc
 8001d1c:	40022100 	.word	0x40022100
 8001d20:	40022300 	.word	0x40022300
 8001d24:	58026300 	.word	0x58026300
 8001d28:	fc00f81e 	.word	0xfc00f81e

08001d2c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001d2e:	2300      	movs	r3, #0
{
 8001d30:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001d32:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d34:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d040      	beq.n	8001dbe <HAL_ADCEx_Calibration_Start+0x92>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	4604      	mov	r4, r0
 8001d40:	460e      	mov	r6, r1
 8001d42:	4615      	mov	r5, r2
 8001d44:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001d48:	f7ff fdfc 	bl	8001944 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d4c:	b9e8      	cbnz	r0, 8001d8a <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4e:	6d67      	ldr	r7, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8001d50:	f005 4280 	and.w	r2, r5, #1073741824	@ 0x40000000
 8001d54:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_ADCEx_Calibration_Start+0x98>)
 8001d56:	f406 3180 	and.w	r1, r6, #65536	@ 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8001d5a:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8001d5c:	403b      	ands	r3, r7
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	6563      	str	r3, [r4, #84]	@ 0x54
 8001d64:	4b18      	ldr	r3, [pc, #96]	@ (8001dc8 <HAL_ADCEx_Calibration_Start+0x9c>)
 8001d66:	68ae      	ldr	r6, [r5, #8]
 8001d68:	4033      	ands	r3, r6
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001d72:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001d74:	68ab      	ldr	r3, [r5, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001d76:	4a15      	ldr	r2, [pc, #84]	@ (8001dcc <HAL_ADCEx_Calibration_Start+0xa0>)
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0f      	blt.n	8001d9c <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6563      	str	r3, [r4, #84]	@ 0x54
 8001d88:	e003      	b.n	8001d92 <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001d8c:	f043 0310 	orr.w	r3, r3, #16
 8001d90:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d92:	2300      	movs	r3, #0
 8001d94:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001d98:	b003      	add	sp, #12
 8001d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8001d9c:	9b01      	ldr	r3, [sp, #4]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001da2:	9b01      	ldr	r3, [sp, #4]
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d3e5      	bcc.n	8001d74 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8001da8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8001daa:	2200      	movs	r2, #0
        return HAL_ERROR;
 8001dac:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8001dae:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8001db2:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8001db6:	f043 0310 	orr.w	r3, r3, #16
 8001dba:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8001dbc:	e7ec      	b.n	8001d98 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 8001dbe:	2002      	movs	r0, #2
}
 8001dc0:	b003      	add	sp, #12
 8001dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc4:	ffffeefd 	.word	0xffffeefd
 8001dc8:	3ffeffc0 	.word	0x3ffeffc0
 8001dcc:	25c3f800 	.word	0x25c3f800

08001dd0 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop

08001dd4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop

08001dd8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop

08001de4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001de4:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8001de8:	2a01      	cmp	r2, #1
 8001dea:	d035      	beq.n	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8001dec:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001dee:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001df0:	2001      	movs	r0, #1
{
 8001df2:	b4f0      	push	{r4, r5, r6, r7}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001df4:	4d28      	ldr	r5, [pc, #160]	@ (8001e98 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
{
 8001df6:	b09a      	sub	sp, #104	@ 0x68
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001df8:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001dfa:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001dfc:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 8001dfe:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001e02:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e04:	d008      	beq.n	8001e18 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e06:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e0c:	f041 0120 	orr.w	r1, r1, #32
 8001e10:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001e12:	b01a      	add	sp, #104	@ 0x68
 8001e14:	bcf0      	pop	{r4, r5, r6, r7}
 8001e16:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e18:	4a20      	ldr	r2, [pc, #128]	@ (8001e9c <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8001e1a:	6890      	ldr	r0, [r2, #8]
 8001e1c:	0740      	lsls	r0, r0, #29
 8001e1e:	d50b      	bpl.n	8001e38 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8001e20:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8001e24:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8001e32:	b01a      	add	sp, #104	@ 0x68
 8001e34:	bcf0      	pop	{r4, r5, r6, r7}
 8001e36:	4770      	bx	lr
 8001e38:	68a0      	ldr	r0, [r4, #8]
 8001e3a:	0745      	lsls	r5, r0, #29
 8001e3c:	d4f1      	bmi.n	8001e22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e3e:	6808      	ldr	r0, [r1, #0]
 8001e40:	b9a0      	cbnz	r0, 8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001e42:	4917      	ldr	r1, [pc, #92]	@ (8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8001e44:	6888      	ldr	r0, [r1, #8]
 8001e46:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8001e4a:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e4c:	68a0      	ldr	r0, [r4, #8]
 8001e4e:	07c0      	lsls	r0, r0, #31
 8001e50:	d504      	bpl.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8001e52:	6892      	ldr	r2, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e54:	2000      	movs	r0, #0
 8001e56:	e7e9      	b.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8001e58:	2002      	movs	r0, #2
}
 8001e5a:	4770      	bx	lr
 8001e5c:	6892      	ldr	r2, [r2, #8]
 8001e5e:	07d5      	lsls	r5, r2, #31
 8001e60:	d4f8      	bmi.n	8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x70>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e62:	6888      	ldr	r0, [r1, #8]
 8001e64:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8001e66:	4002      	ands	r2, r0
 8001e68:	608a      	str	r2, [r1, #8]
 8001e6a:	e7f3      	b.n	8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x70>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001e6c:	4e0c      	ldr	r6, [pc, #48]	@ (8001ea0 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8001e6e:	684f      	ldr	r7, [r1, #4]
 8001e70:	68b5      	ldr	r5, [r6, #8]
 8001e72:	f425 4540 	bic.w	r5, r5, #49152	@ 0xc000
 8001e76:	433d      	orrs	r5, r7
 8001e78:	60b5      	str	r5, [r6, #8]
 8001e7a:	68a4      	ldr	r4, [r4, #8]
 8001e7c:	07e4      	lsls	r4, r4, #31
 8001e7e:	d4e8      	bmi.n	8001e52 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001e80:	6892      	ldr	r2, [r2, #8]
 8001e82:	07d7      	lsls	r7, r2, #31
 8001e84:	d4e6      	bmi.n	8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x70>
        MODIFY_REG(tmpADC_Common->CCR,
 8001e86:	688a      	ldr	r2, [r1, #8]
 8001e88:	68b4      	ldr	r4, [r6, #8]
 8001e8a:	4310      	orrs	r0, r2
 8001e8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8001e8e:	4022      	ands	r2, r4
 8001e90:	4310      	orrs	r0, r2
 8001e92:	60b0      	str	r0, [r6, #8]
 8001e94:	e7de      	b.n	8001e54 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40022100 	.word	0x40022100
 8001ea0:	40022300 	.word	0x40022300
 8001ea4:	fffff0e0 	.word	0xfffff0e0

08001ea8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4906      	ldr	r1, [pc, #24]	@ (8001ec4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eae:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb8:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001ebe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001ec0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00
 8001ec8:	05fa0000 	.word	0x05fa0000

08001ecc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <HAL_NVIC_SetPriority+0x6c>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ede:	f1be 0f04 	cmp.w	lr, #4
 8001ee2:	bf28      	it	cs
 8001ee4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee8:	f1bc 0f06 	cmp.w	ip, #6
 8001eec:	d91a      	bls.n	8001f24 <HAL_NVIC_SetPriority+0x58>
 8001eee:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef6:	fa03 f30c 	lsl.w	r3, r3, ip
 8001efa:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001f02:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	fa03 f30e 	lsl.w	r3, r3, lr
 8001f08:	ea21 0303 	bic.w	r3, r1, r3
 8001f0c:	fa03 f30c 	lsl.w	r3, r3, ip
 8001f10:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001f18:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	db06      	blt.n	8001f2a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1c:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <HAL_NVIC_SetPriority+0x70>)
 8001f1e:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f20:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f24:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	4694      	mov	ip, r2
 8001f28:	e7e9      	b.n	8001efe <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	f000 000f 	and.w	r0, r0, #15
 8001f2e:	4a04      	ldr	r2, [pc, #16]	@ (8001f40 <HAL_NVIC_SetPriority+0x74>)
 8001f30:	5413      	strb	r3, [r2, r0]
 8001f32:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00
 8001f3c:	e000e400 	.word	0xe000e400
 8001f40:	e000ed14 	.word	0xe000ed14

08001f44 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f44:	2800      	cmp	r0, #0
 8001f46:	db07      	blt.n	8001f58 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f000 011f 	and.w	r1, r0, #31
 8001f4e:	4a03      	ldr	r2, [pc, #12]	@ (8001f5c <HAL_NVIC_EnableIRQ+0x18>)
 8001f50:	0940      	lsrs	r0, r0, #5
 8001f52:	408b      	lsls	r3, r1
 8001f54:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f60:	1e43      	subs	r3, r0, #1
 8001f62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f66:	d301      	bcc.n	8001f6c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f68:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f6a:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6c:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f70:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	4905      	ldr	r1, [pc, #20]	@ (8001f88 <HAL_SYSTICK_Config+0x28>)
 8001f74:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f78:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f80:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8001f8c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f92:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f96:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f9a:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8001f9c:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_MPU_Enable+0x1c>)
 8001faa:	f040 0001 	orr.w	r0, r0, #1
 8001fae:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001fb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fb4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001fb8:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001fba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001fbe:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fc8:	4a16      	ldr	r2, [pc, #88]	@ (8002024 <HAL_MPU_ConfigRegion+0x5c>)
 8001fca:	7843      	ldrb	r3, [r0, #1]
 8001fcc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001fd0:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001fdc:	6843      	ldr	r3, [r0, #4]
 8001fde:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fe2:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fe4:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fe8:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fea:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fec:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ff0:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ff4:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ff6:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ff8:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ffc:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002000:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002004:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002006:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800200a:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800200e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002012:	7a01      	ldrb	r1, [r0, #8]
 8002014:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002018:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800201c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002028:	b188      	cbz	r0, 800204e <HAL_DAC_Init+0x26>
{
 800202a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800202c:	7903      	ldrb	r3, [r0, #4]
 800202e:	4604      	mov	r4, r0
 8002030:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002034:	b13b      	cbz	r3, 8002046 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002036:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002038:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800203a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800203c:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800203e:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002040:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002042:	7122      	strb	r2, [r4, #4]
}
 8002044:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8002046:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002048:	f7fe fe0c 	bl	8000c64 <HAL_DAC_MspInit>
 800204c:	e7f3      	b.n	8002036 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800204e:	2001      	movs	r0, #1
}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop

08002054 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002056:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002058:	2800      	cmp	r0, #0
 800205a:	d05e      	beq.n	800211a <HAL_DAC_Start_DMA+0xc6>
 800205c:	460e      	mov	r6, r1
 800205e:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002060:	7942      	ldrb	r2, [r0, #5]
 8002062:	4604      	mov	r4, r0
 8002064:	2a01      	cmp	r2, #1
 8002066:	d060      	beq.n	800212a <HAL_DAC_Start_DMA+0xd6>
 8002068:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800206a:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdac);
 800206c:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800206e:	2202      	movs	r2, #2
 8002070:	7102      	strb	r2, [r0, #4]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002072:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 8002074:	bb3e      	cbnz	r6, 80020c6 <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002076:	6880      	ldr	r0, [r0, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002078:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800207c:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 8002130 <HAL_DAC_Start_DMA+0xdc>
 8002080:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002084:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 8002134 <HAL_DAC_Start_DMA+0xe0>
 8002088:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800208c:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 8002138 <HAL_DAC_Start_DMA+0xe4>
 8002090:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002094:	602a      	str	r2, [r5, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002096:	2f00      	cmp	r7, #0
 8002098:	d044      	beq.n	8002124 <HAL_DAC_Start_DMA+0xd0>
 800209a:	2f04      	cmp	r7, #4
 800209c:	d137      	bne.n	800210e <HAL_DAC_Start_DMA+0xba>
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
        break;
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800209e:	f105 020c 	add.w	r2, r5, #12
  }

  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80020a2:	682f      	ldr	r7, [r5, #0]
 80020a4:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
 80020a8:	602f      	str	r7, [r5, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80020aa:	f000 fce7 	bl	8002a7c <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80020ae:	2300      	movs	r3, #0
 80020b0:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80020b2:	bb38      	cbnz	r0, 8002104 <HAL_DAC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80020b4:	6822      	ldr	r2, [r4, #0]
 80020b6:	f006 0110 	and.w	r1, r6, #16
 80020ba:	2301      	movs	r3, #1
 80020bc:	6814      	ldr	r4, [r2, #0]
 80020be:	408b      	lsls	r3, r1
 80020c0:	4323      	orrs	r3, r4
 80020c2:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 80020c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80020c6:	68c0      	ldr	r0, [r0, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80020c8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80020cc:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 800213c <HAL_DAC_Start_DMA+0xe8>
 80020d0:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80020d4:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8002140 <HAL_DAC_Start_DMA+0xec>
 80020d8:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80020dc:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8002144 <HAL_DAC_Start_DMA+0xf0>
 80020e0:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80020e4:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 80020e6:	b1d7      	cbz	r7, 800211e <HAL_DAC_Start_DMA+0xca>
 80020e8:	2f04      	cmp	r7, #4
 80020ea:	d113      	bne.n	8002114 <HAL_DAC_Start_DMA+0xc0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80020ec:	f105 0218 	add.w	r2, r5, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80020f0:	682f      	ldr	r7, [r5, #0]
 80020f2:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 80020f6:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80020f8:	f000 fcc0 	bl	8002a7c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 80020fc:	2300      	movs	r3, #0
 80020fe:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8002100:	2800      	cmp	r0, #0
 8002102:	d0d7      	beq.n	80020b4 <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002104:	6923      	ldr	r3, [r4, #16]
 8002106:	f043 0304 	orr.w	r3, r3, #4
 800210a:	6123      	str	r3, [r4, #16]
}
 800210c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800210e:	f105 0210 	add.w	r2, r5, #16
  if (Channel == DAC_CHANNEL_1)
 8002112:	e7c6      	b.n	80020a2 <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002114:	f105 021c 	add.w	r2, r5, #28
  if (Channel == DAC_CHANNEL_1)
 8002118:	e7ea      	b.n	80020f0 <HAL_DAC_Start_DMA+0x9c>
    return HAL_ERROR;
 800211a:	2001      	movs	r0, #1
}
 800211c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800211e:	f105 0214 	add.w	r2, r5, #20
  if (Channel == DAC_CHANNEL_1)
 8002122:	e7e5      	b.n	80020f0 <HAL_DAC_Start_DMA+0x9c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002124:	f105 0208 	add.w	r2, r5, #8
  if (Channel == DAC_CHANNEL_1)
 8002128:	e7bb      	b.n	80020a2 <HAL_DAC_Start_DMA+0x4e>
  __HAL_LOCK(hdac);
 800212a:	2002      	movs	r0, #2
}
 800212c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800212e:	bf00      	nop
 8002130:	0800214d 	.word	0x0800214d
 8002134:	08002161 	.word	0x08002161
 8002138:	08002171 	.word	0x08002171
 800213c:	08002349 	.word	0x08002349
 8002140:	0800235d 	.word	0x0800235d
 8002144:	0800236d 	.word	0x0800236d

08002148 <HAL_DAC_ConvCpltCallbackCh1>:
  * @brief  Conversion complete callback in non-blocking mode for Channel1
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800214c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800214e:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002150:	4620      	mov	r0, r4
 8002152:	f7ff fff9 	bl	8002148 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002156:	2301      	movs	r3, #1
 8002158:	7123      	strb	r3, [r4, #4]
}
 800215a:	bd10      	pop	{r4, pc}

0800215c <HAL_DAC_ConvHalfCpltCallbackCh1>:
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop

08002160 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002160:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002162:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002164:	f7ff fffa 	bl	800215c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002168:	bd08      	pop	{r3, pc}
 800216a:	bf00      	nop

0800216c <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop

08002170 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002170:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002172:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002174:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002176:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 800217e:	f7ff fff5 	bl	800216c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002182:	2301      	movs	r3, #1
 8002184:	7123      	strb	r3, [r4, #4]
}
 8002186:	bd10      	pop	{r4, pc}

08002188 <HAL_DAC_DMAUnderrunCallbackCh1>:
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <HAL_DAC_IRQHandler>:
  uint32_t itsource = hdac->Instance->CR;
 800218c:	6803      	ldr	r3, [r0, #0]
{
 800218e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = hdac->Instance->CR;
 8002190:	681d      	ldr	r5, [r3, #0]
{
 8002192:	4604      	mov	r4, r0
  uint32_t itflag   = hdac->Instance->SR;
 8002194:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8002196:	04aa      	lsls	r2, r5, #18
 8002198:	d501      	bpl.n	800219e <HAL_DAC_IRQHandler+0x12>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800219a:	04b1      	lsls	r1, r6, #18
 800219c:	d417      	bmi.n	80021ce <HAL_DAC_IRQHandler+0x42>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800219e:	00aa      	lsls	r2, r5, #2
 80021a0:	d501      	bpl.n	80021a6 <HAL_DAC_IRQHandler+0x1a>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80021a2:	00b3      	lsls	r3, r6, #2
 80021a4:	d400      	bmi.n	80021a8 <HAL_DAC_IRQHandler+0x1c>
}
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80021a8:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80021b0:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 80021b2:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80021b4:	6922      	ldr	r2, [r4, #16]
 80021b6:	f042 0202 	orr.w	r2, r2, #2
 80021ba:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80021bc:	6359      	str	r1, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
}
 80021c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80021c8:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80021ca:	f000 b8db 	b.w	8002384 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 80021ce:	2204      	movs	r2, #4
 80021d0:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80021d2:	6902      	ldr	r2, [r0, #16]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80021da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021de:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021e6:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80021e8:	f7ff ffce 	bl	8002188 <HAL_DAC_DMAUnderrunCallbackCh1>
 80021ec:	e7d7      	b.n	800219e <HAL_DAC_IRQHandler+0x12>
 80021ee:	bf00      	nop

080021f0 <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 80021f0:	2800      	cmp	r0, #0
 80021f2:	f000 8086 	beq.w	8002302 <HAL_DAC_ConfigChannel+0x112>
{
 80021f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021fa:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 80021fc:	2900      	cmp	r1, #0
 80021fe:	d04d      	beq.n	800229c <HAL_DAC_ConfigChannel+0xac>
  __HAL_LOCK(hdac);
 8002200:	7943      	ldrb	r3, [r0, #5]
 8002202:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002204:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8002206:	2b01      	cmp	r3, #1
 8002208:	d079      	beq.n	80022fe <HAL_DAC_ConfigChannel+0x10e>
 800220a:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800220c:	2904      	cmp	r1, #4
 800220e:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8002210:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002212:	f04f 0302 	mov.w	r3, #2
 8002216:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002218:	d043      	beq.n	80022a2 <HAL_DAC_ConfigChannel+0xb2>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800221a:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 800221e:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002220:	6928      	ldr	r0, [r5, #16]
 8002222:	2801      	cmp	r0, #1
 8002224:	d108      	bne.n	8002238 <HAL_DAC_ConfigChannel+0x48>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002226:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 8002228:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800222a:	4090      	lsls	r0, r2
 800222c:	ea26 0600 	bic.w	r6, r6, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002230:	6968      	ldr	r0, [r5, #20]
 8002232:	4090      	lsls	r0, r2
 8002234:	4330      	orrs	r0, r6
    hdac->Instance->CCR = tmpreg1;
 8002236:	6398      	str	r0, [r3, #56]	@ 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002238:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 800223a:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800223c:	4090      	lsls	r0, r2
 800223e:	ea26 0600 	bic.w	r6, r6, r0
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002242:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002246:	2801      	cmp	r0, #1
 8002248:	d055      	beq.n	80022f6 <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800224a:	2802      	cmp	r0, #2
 800224c:	d055      	beq.n	80022fa <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800224e:	fab7 f087 	clz	r0, r7
 8002252:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002254:	4339      	orrs	r1, r7
 8002256:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002258:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800225a:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800225e:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002260:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002262:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002264:	4331      	orrs	r1, r6
  hdac->State = HAL_DAC_STATE_READY;
 8002266:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 8002268:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002270:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002274:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002276:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8002278:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800227a:	ea21 0105 	bic.w	r1, r1, r5
  __HAL_UNLOCK(hdac);
 800227e:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002280:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002282:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 8002284:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002286:	fa00 f102 	lsl.w	r1, r0, r2
 800228a:	681a      	ldr	r2, [r3, #0]
  return status;
 800228c:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800228e:	ea22 0201 	bic.w	r2, r2, r1
 8002292:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002294:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8002296:	7165      	strb	r5, [r4, #5]
}
 8002298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800229c:	2001      	movs	r0, #1
}
 800229e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 80022a2:	f7fe fec5 	bl	8001030 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022a6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80022a8:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80022aa:	b9be      	cbnz	r6, 80022dc <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022ac:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8002340 <HAL_DAC_ConfigChannel+0x150>
 80022b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022b2:	ea12 0f08 	tst.w	r2, r8
 80022b6:	d026      	beq.n	8002306 <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022b8:	f7fe feba 	bl	8001030 <HAL_GetTick>
 80022bc:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022be:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022c0:	2801      	cmp	r0, #1
 80022c2:	d9f5      	bls.n	80022b0 <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022c6:	ea12 0f08 	tst.w	r2, r8
 80022ca:	d0f1      	beq.n	80022b0 <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022cc:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022ce:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 80022d0:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022d8:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 80022da:	e7dd      	b.n	8002298 <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022de:	2a00      	cmp	r2, #0
 80022e0:	da2a      	bge.n	8002338 <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022e2:	f7fe fea5 	bl	8001030 <HAL_GetTick>
 80022e6:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022e8:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022ea:	2801      	cmp	r0, #1
 80022ec:	d9f6      	bls.n	80022dc <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022f0:	2a00      	cmp	r2, #0
 80022f2:	daf3      	bge.n	80022dc <HAL_DAC_ConfigChannel+0xec>
 80022f4:	e7ea      	b.n	80022cc <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 80022f6:	2000      	movs	r0, #0
 80022f8:	e7ac      	b.n	8002254 <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 80022fa:	2001      	movs	r0, #1
 80022fc:	e7aa      	b.n	8002254 <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 80022fe:	2002      	movs	r0, #2
 8002300:	e7ca      	b.n	8002298 <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 8002302:	2001      	movs	r0, #1
}
 8002304:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002306:	69aa      	ldr	r2, [r5, #24]
 8002308:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800230a:	f006 0210 	and.w	r2, r6, #16
 800230e:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8002312:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002314:	4090      	lsls	r0, r2
 8002316:	ea21 0100 	bic.w	r1, r1, r0
 800231a:	69e8      	ldr	r0, [r5, #28]
 800231c:	4090      	lsls	r0, r2
 800231e:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002320:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002322:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002324:	4090      	lsls	r0, r2
 8002326:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002328:	ea21 0100 	bic.w	r1, r1, r0
 800232c:	6a28      	ldr	r0, [r5, #32]
 800232e:	4090      	lsls	r0, r2
 8002330:	4301      	orrs	r1, r0
 8002332:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002334:	6829      	ldr	r1, [r5, #0]
 8002336:	e773      	b.n	8002220 <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002338:	69aa      	ldr	r2, [r5, #24]
 800233a:	645a      	str	r2, [r3, #68]	@ 0x44
 800233c:	e7e5      	b.n	800230a <HAL_DAC_ConfigChannel+0x11a>
 800233e:	bf00      	nop
 8002340:	20008000 	.word	0x20008000

08002344 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop

08002348 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002348:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800234a:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800234c:	4620      	mov	r0, r4
 800234e:	f7ff fff9 	bl	8002344 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002352:	2301      	movs	r3, #1
 8002354:	7123      	strb	r3, [r4, #4]
}
 8002356:	bd10      	pop	{r4, pc}

08002358 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop

0800235c <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800235c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800235e:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002360:	f7ff fffa 	bl	8002358 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002364:	bd08      	pop	{r3, pc}
 8002366:	bf00      	nop

08002368 <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop

0800236c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800236c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800236e:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002370:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002372:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800237a:	f7ff fff5 	bl	8002368 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800237e:	2301      	movs	r3, #1
 8002380:	7123      	strb	r3, [r4, #4]
}
 8002382:	bd10      	pop	{r4, pc}

08002384 <HAL_DACEx_DMAUnderrunCallbackCh2>:
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop

08002388 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002388:	4936      	ldr	r1, [pc, #216]	@ (8002464 <DMA_CalcBaseAndBitshift+0xdc>)
{
 800238a:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800238c:	6803      	ldr	r3, [r0, #0]
 800238e:	428b      	cmp	r3, r1
 8002390:	d033      	beq.n	80023fa <DMA_CalcBaseAndBitshift+0x72>
 8002392:	3118      	adds	r1, #24
 8002394:	1a59      	subs	r1, r3, r1
 8002396:	fab1 f181 	clz	r1, r1
 800239a:	0949      	lsrs	r1, r1, #5
 800239c:	bb69      	cbnz	r1, 80023fa <DMA_CalcBaseAndBitshift+0x72>
 800239e:	4832      	ldr	r0, [pc, #200]	@ (8002468 <DMA_CalcBaseAndBitshift+0xe0>)
 80023a0:	4283      	cmp	r3, r0
 80023a2:	d03e      	beq.n	8002422 <DMA_CalcBaseAndBitshift+0x9a>
 80023a4:	3018      	adds	r0, #24
 80023a6:	4283      	cmp	r3, r0
 80023a8:	d03e      	beq.n	8002428 <DMA_CalcBaseAndBitshift+0xa0>
 80023aa:	3018      	adds	r0, #24
 80023ac:	4283      	cmp	r3, r0
 80023ae:	d034      	beq.n	800241a <DMA_CalcBaseAndBitshift+0x92>
 80023b0:	3018      	adds	r0, #24
 80023b2:	4283      	cmp	r3, r0
 80023b4:	d03b      	beq.n	800242e <DMA_CalcBaseAndBitshift+0xa6>
 80023b6:	3018      	adds	r0, #24
 80023b8:	4283      	cmp	r3, r0
 80023ba:	d03e      	beq.n	800243a <DMA_CalcBaseAndBitshift+0xb2>
 80023bc:	3018      	adds	r0, #24
 80023be:	4283      	cmp	r3, r0
 80023c0:	d02a      	beq.n	8002418 <DMA_CalcBaseAndBitshift+0x90>
 80023c2:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80023c6:	4283      	cmp	r3, r0
 80023c8:	d035      	beq.n	8002436 <DMA_CalcBaseAndBitshift+0xae>
 80023ca:	4928      	ldr	r1, [pc, #160]	@ (800246c <DMA_CalcBaseAndBitshift+0xe4>)
 80023cc:	428b      	cmp	r3, r1
 80023ce:	d031      	beq.n	8002434 <DMA_CalcBaseAndBitshift+0xac>
 80023d0:	3118      	adds	r1, #24
 80023d2:	428b      	cmp	r3, r1
 80023d4:	d034      	beq.n	8002440 <DMA_CalcBaseAndBitshift+0xb8>
 80023d6:	3118      	adds	r1, #24
 80023d8:	428b      	cmp	r3, r1
 80023da:	d034      	beq.n	8002446 <DMA_CalcBaseAndBitshift+0xbe>
 80023dc:	3118      	adds	r1, #24
 80023de:	428b      	cmp	r3, r1
 80023e0:	d034      	beq.n	800244c <DMA_CalcBaseAndBitshift+0xc4>
 80023e2:	3118      	adds	r1, #24
 80023e4:	428b      	cmp	r3, r1
 80023e6:	d034      	beq.n	8002452 <DMA_CalcBaseAndBitshift+0xca>
 80023e8:	3118      	adds	r1, #24
 80023ea:	428b      	cmp	r3, r1
 80023ec:	d034      	beq.n	8002458 <DMA_CalcBaseAndBitshift+0xd0>
 80023ee:	3118      	adds	r1, #24
 80023f0:	428b      	cmp	r3, r1
 80023f2:	d034      	beq.n	800245e <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80023f4:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 80023f8:	e011      	b.n	800241e <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	491c      	ldr	r1, [pc, #112]	@ (8002470 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80023fe:	481d      	ldr	r0, [pc, #116]	@ (8002474 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002400:	3b10      	subs	r3, #16
 8002402:	fba1 1303 	umull	r1, r3, r1, r3
{
 8002406:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002408:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800240a:	4c1b      	ldr	r4, [pc, #108]	@ (8002478 <DMA_CalcBaseAndBitshift+0xf0>)
 800240c:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 800240e:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002412:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 8002416:	4770      	bx	lr
 8002418:	2116      	movs	r1, #22
 800241a:	4818      	ldr	r0, [pc, #96]	@ (800247c <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800241c:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800241e:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8002420:	4770      	bx	lr
 8002422:	2110      	movs	r1, #16
 8002424:	4813      	ldr	r0, [pc, #76]	@ (8002474 <DMA_CalcBaseAndBitshift+0xec>)
 8002426:	e7f9      	b.n	800241c <DMA_CalcBaseAndBitshift+0x94>
 8002428:	2116      	movs	r1, #22
 800242a:	4812      	ldr	r0, [pc, #72]	@ (8002474 <DMA_CalcBaseAndBitshift+0xec>)
 800242c:	e7f6      	b.n	800241c <DMA_CalcBaseAndBitshift+0x94>
 800242e:	2106      	movs	r1, #6
 8002430:	4812      	ldr	r0, [pc, #72]	@ (800247c <DMA_CalcBaseAndBitshift+0xf4>)
 8002432:	e7f3      	b.n	800241c <DMA_CalcBaseAndBitshift+0x94>
 8002434:	2106      	movs	r1, #6
 8002436:	4812      	ldr	r0, [pc, #72]	@ (8002480 <DMA_CalcBaseAndBitshift+0xf8>)
 8002438:	e7f0      	b.n	800241c <DMA_CalcBaseAndBitshift+0x94>
 800243a:	2110      	movs	r1, #16
 800243c:	480f      	ldr	r0, [pc, #60]	@ (800247c <DMA_CalcBaseAndBitshift+0xf4>)
 800243e:	e7ed      	b.n	800241c <DMA_CalcBaseAndBitshift+0x94>
 8002440:	2110      	movs	r1, #16
 8002442:	480f      	ldr	r0, [pc, #60]	@ (8002480 <DMA_CalcBaseAndBitshift+0xf8>)
 8002444:	e7ea      	b.n	800241c <DMA_CalcBaseAndBitshift+0x94>
 8002446:	2116      	movs	r1, #22
 8002448:	480d      	ldr	r0, [pc, #52]	@ (8002480 <DMA_CalcBaseAndBitshift+0xf8>)
 800244a:	e7e7      	b.n	800241c <DMA_CalcBaseAndBitshift+0x94>
 800244c:	2100      	movs	r1, #0
 800244e:	480d      	ldr	r0, [pc, #52]	@ (8002484 <DMA_CalcBaseAndBitshift+0xfc>)
 8002450:	e7e4      	b.n	800241c <DMA_CalcBaseAndBitshift+0x94>
 8002452:	2106      	movs	r1, #6
 8002454:	480b      	ldr	r0, [pc, #44]	@ (8002484 <DMA_CalcBaseAndBitshift+0xfc>)
 8002456:	e7e1      	b.n	800241c <DMA_CalcBaseAndBitshift+0x94>
 8002458:	2110      	movs	r1, #16
 800245a:	480a      	ldr	r0, [pc, #40]	@ (8002484 <DMA_CalcBaseAndBitshift+0xfc>)
 800245c:	e7de      	b.n	800241c <DMA_CalcBaseAndBitshift+0x94>
 800245e:	2116      	movs	r1, #22
 8002460:	4808      	ldr	r0, [pc, #32]	@ (8002484 <DMA_CalcBaseAndBitshift+0xfc>)
 8002462:	e7db      	b.n	800241c <DMA_CalcBaseAndBitshift+0x94>
 8002464:	40020010 	.word	0x40020010
 8002468:	40020040 	.word	0x40020040
 800246c:	40020428 	.word	0x40020428
 8002470:	aaaaaaab 	.word	0xaaaaaaab
 8002474:	40020000 	.word	0x40020000
 8002478:	08007264 	.word	0x08007264
 800247c:	40020004 	.word	0x40020004
 8002480:	40020400 	.word	0x40020400
 8002484:	40020404 	.word	0x40020404

08002488 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002488:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800248a:	4b28      	ldr	r3, [pc, #160]	@ (800252c <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 800248c:	4928      	ldr	r1, [pc, #160]	@ (8002530 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
{
 800248e:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002490:	4d28      	ldr	r5, [pc, #160]	@ (8002534 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8002492:	4c29      	ldr	r4, [pc, #164]	@ (8002538 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8002494:	42aa      	cmp	r2, r5
 8002496:	bf18      	it	ne
 8002498:	429a      	cmpne	r2, r3
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	428a      	cmp	r2, r1
 80024a2:	bf08      	it	eq
 80024a4:	f043 0301 	orreq.w	r3, r3, #1
 80024a8:	3128      	adds	r1, #40	@ 0x28
 80024aa:	42a2      	cmp	r2, r4
 80024ac:	bf08      	it	eq
 80024ae:	f043 0301 	orreq.w	r3, r3, #1
 80024b2:	3428      	adds	r4, #40	@ 0x28
 80024b4:	428a      	cmp	r2, r1
 80024b6:	bf08      	it	eq
 80024b8:	f043 0301 	orreq.w	r3, r3, #1
 80024bc:	3128      	adds	r1, #40	@ 0x28
 80024be:	42a2      	cmp	r2, r4
 80024c0:	bf08      	it	eq
 80024c2:	f043 0301 	orreq.w	r3, r3, #1
 80024c6:	428a      	cmp	r2, r1
 80024c8:	bf08      	it	eq
 80024ca:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80024ce:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024d0:	b913      	cbnz	r3, 80024d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 80024d2:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d111      	bne.n	80024fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80024d8:	f1a1 0308 	sub.w	r3, r1, #8
 80024dc:	4c18      	ldr	r4, [pc, #96]	@ (8002540 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80024de:	4a19      	ldr	r2, [pc, #100]	@ (8002544 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80024e0:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80024e2:	fba4 4303 	umull	r4, r3, r4, r3
 80024e6:	4c18      	ldr	r4, [pc, #96]	@ (8002548 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 80024e8:	091d      	lsrs	r5, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80024ea:	eb02 1313 	add.w	r3, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80024ee:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80024f0:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80024f2:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80024f4:	e9c0 3418 	strd	r3, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80024f8:	bc30      	pop	{r4, r5}
 80024fa:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80024fc:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002500:	4912      	ldr	r1, [pc, #72]	@ (800254c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002502:	4c13      	ldr	r4, [pc, #76]	@ (8002550 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002504:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002506:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800250a:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800250c:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002510:	d908      	bls.n	8002524 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002512:	f003 041f 	and.w	r4, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002516:	4a0f      	ldr	r2, [pc, #60]	@ (8002554 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002518:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800251a:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800251c:	40a1      	lsls	r1, r4
 800251e:	4c0e      	ldr	r4, [pc, #56]	@ (8002558 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002520:	0093      	lsls	r3, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002522:	e7e6      	b.n	80024f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
      stream_number += 8U;
 8002524:	3308      	adds	r3, #8
 8002526:	461c      	mov	r4, r3
 8002528:	e7f5      	b.n	8002516 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
 800252a:	bf00      	nop
 800252c:	58025408 	.word	0x58025408
 8002530:	58025430 	.word	0x58025430
 8002534:	5802541c 	.word	0x5802541c
 8002538:	58025444 	.word	0x58025444
 800253c:	58025494 	.word	0x58025494
 8002540:	cccccccd 	.word	0xcccccccd
 8002544:	16009600 	.word	0x16009600
 8002548:	58025880 	.word	0x58025880
 800254c:	bffdfbf0 	.word	0xbffdfbf0
 8002550:	aaaaaaab 	.word	0xaaaaaaab
 8002554:	10008200 	.word	0x10008200
 8002558:	40020880 	.word	0x40020880

0800255c <HAL_DMA_Init>:
{
 800255c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002560:	4605      	mov	r5, r0
 8002562:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7fe fd64 	bl	8001030 <HAL_GetTick>
  if(hdma == NULL)
 8002568:	2d00      	cmp	r5, #0
 800256a:	f000 81a1 	beq.w	80028b0 <HAL_DMA_Init+0x354>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800256e:	682c      	ldr	r4, [r5, #0]
 8002570:	4606      	mov	r6, r0
 8002572:	4bac      	ldr	r3, [pc, #688]	@ (8002824 <HAL_DMA_Init+0x2c8>)
 8002574:	4aac      	ldr	r2, [pc, #688]	@ (8002828 <HAL_DMA_Init+0x2cc>)
 8002576:	4294      	cmp	r4, r2
 8002578:	bf18      	it	ne
 800257a:	429c      	cmpne	r4, r3
 800257c:	f102 0218 	add.w	r2, r2, #24
 8002580:	bf0c      	ite	eq
 8002582:	2301      	moveq	r3, #1
 8002584:	2300      	movne	r3, #0
 8002586:	4294      	cmp	r4, r2
 8002588:	bf08      	it	eq
 800258a:	f043 0301 	orreq.w	r3, r3, #1
 800258e:	3218      	adds	r2, #24
 8002590:	4294      	cmp	r4, r2
 8002592:	bf08      	it	eq
 8002594:	f043 0301 	orreq.w	r3, r3, #1
 8002598:	3218      	adds	r2, #24
 800259a:	4294      	cmp	r4, r2
 800259c:	bf08      	it	eq
 800259e:	f043 0301 	orreq.w	r3, r3, #1
 80025a2:	3218      	adds	r2, #24
 80025a4:	4294      	cmp	r4, r2
 80025a6:	bf08      	it	eq
 80025a8:	f043 0301 	orreq.w	r3, r3, #1
 80025ac:	3218      	adds	r2, #24
 80025ae:	4294      	cmp	r4, r2
 80025b0:	bf08      	it	eq
 80025b2:	f043 0301 	orreq.w	r3, r3, #1
 80025b6:	3218      	adds	r2, #24
 80025b8:	4294      	cmp	r4, r2
 80025ba:	bf08      	it	eq
 80025bc:	f043 0301 	orreq.w	r3, r3, #1
 80025c0:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80025c4:	4294      	cmp	r4, r2
 80025c6:	bf08      	it	eq
 80025c8:	f043 0301 	orreq.w	r3, r3, #1
 80025cc:	3218      	adds	r2, #24
 80025ce:	4294      	cmp	r4, r2
 80025d0:	bf08      	it	eq
 80025d2:	f043 0301 	orreq.w	r3, r3, #1
 80025d6:	3218      	adds	r2, #24
 80025d8:	4294      	cmp	r4, r2
 80025da:	bf08      	it	eq
 80025dc:	f043 0301 	orreq.w	r3, r3, #1
 80025e0:	3218      	adds	r2, #24
 80025e2:	4294      	cmp	r4, r2
 80025e4:	bf08      	it	eq
 80025e6:	f043 0301 	orreq.w	r3, r3, #1
 80025ea:	3218      	adds	r2, #24
 80025ec:	4294      	cmp	r4, r2
 80025ee:	bf08      	it	eq
 80025f0:	f043 0301 	orreq.w	r3, r3, #1
 80025f4:	3218      	adds	r2, #24
 80025f6:	4294      	cmp	r4, r2
 80025f8:	bf08      	it	eq
 80025fa:	f043 0301 	orreq.w	r3, r3, #1
 80025fe:	3218      	adds	r2, #24
 8002600:	4294      	cmp	r4, r2
 8002602:	bf08      	it	eq
 8002604:	f043 0301 	orreq.w	r3, r3, #1
 8002608:	b91b      	cbnz	r3, 8002612 <HAL_DMA_Init+0xb6>
 800260a:	4b88      	ldr	r3, [pc, #544]	@ (800282c <HAL_DMA_Init+0x2d0>)
 800260c:	429c      	cmp	r4, r3
 800260e:	f040 8196 	bne.w	800293e <HAL_DMA_Init+0x3e2>
    __HAL_UNLOCK(hdma);
 8002612:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002614:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8002616:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 800261a:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6023      	str	r3, [r4, #0]
 8002626:	e006      	b.n	8002636 <HAL_DMA_Init+0xda>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002628:	f7fe fd02 	bl	8001030 <HAL_GetTick>
 800262c:	1b80      	subs	r0, r0, r6
 800262e:	2805      	cmp	r0, #5
 8002630:	f200 8142 	bhi.w	80028b8 <HAL_DMA_Init+0x35c>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002634:	682c      	ldr	r4, [r5, #0]
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	07df      	lsls	r7, r3, #31
 800263a:	d4f5      	bmi.n	8002628 <HAL_DMA_Init+0xcc>
    registerValue |=  hdma->Init.Direction           |
 800263c:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002640:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8002642:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002644:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002646:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002648:	430b      	orrs	r3, r1
 800264a:	6969      	ldr	r1, [r5, #20]
 800264c:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264e:	69e9      	ldr	r1, [r5, #28]
 8002650:	4313      	orrs	r3, r2
 8002652:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002654:	4976      	ldr	r1, [pc, #472]	@ (8002830 <HAL_DMA_Init+0x2d4>)
 8002656:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8002658:	6a28      	ldr	r0, [r5, #32]
 800265a:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800265c:	4875      	ldr	r0, [pc, #468]	@ (8002834 <HAL_DMA_Init+0x2d8>)
    registerValue |=  hdma->Init.Direction           |
 800265e:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002660:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8002662:	2904      	cmp	r1, #4
 8002664:	f000 813d 	beq.w	80028e2 <HAL_DMA_Init+0x386>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002668:	6800      	ldr	r0, [r0, #0]
 800266a:	f36f 000f 	bfc	r0, #0, #16
 800266e:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8002672:	f080 80f1 	bcs.w	8002858 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002676:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002678:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800267a:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800267e:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002680:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002682:	4628      	mov	r0, r5
 8002684:	f7ff fe80 	bl	8002388 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002688:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800268a:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800268c:	496a      	ldr	r1, [pc, #424]	@ (8002838 <HAL_DMA_Init+0x2dc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800268e:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002692:	4f6a      	ldr	r7, [pc, #424]	@ (800283c <HAL_DMA_Init+0x2e0>)
 8002694:	1a61      	subs	r1, r4, r1
 8002696:	4e6a      	ldr	r6, [pc, #424]	@ (8002840 <HAL_DMA_Init+0x2e4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002698:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800269a:	4a6a      	ldr	r2, [pc, #424]	@ (8002844 <HAL_DMA_Init+0x2e8>)
 800269c:	fab1 f181 	clz	r1, r1
 80026a0:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026a2:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026a4:	eba4 0a02 	sub.w	sl, r4, r2
 80026a8:	4b67      	ldr	r3, [pc, #412]	@ (8002848 <HAL_DMA_Init+0x2ec>)
 80026aa:	0949      	lsrs	r1, r1, #5
 80026ac:	4a5e      	ldr	r2, [pc, #376]	@ (8002828 <HAL_DMA_Init+0x2cc>)
 80026ae:	faba fa8a 	clz	sl, sl
 80026b2:	eba4 0903 	sub.w	r9, r4, r3
 80026b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002824 <HAL_DMA_Init+0x2c8>)
 80026b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80026bc:	fab7 f787 	clz	r7, r7
 80026c0:	4294      	cmp	r4, r2
 80026c2:	bf18      	it	ne
 80026c4:	429c      	cmpne	r4, r3
 80026c6:	f102 0218 	add.w	r2, r2, #24
 80026ca:	fab9 f989 	clz	r9, r9
 80026ce:	eba4 0606 	sub.w	r6, r4, r6
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80026dc:	fab6 f686 	clz	r6, r6
 80026e0:	4294      	cmp	r4, r2
 80026e2:	bf08      	it	eq
 80026e4:	f043 0301 	orreq.w	r3, r3, #1
 80026e8:	3218      	adds	r2, #24
 80026ea:	097f      	lsrs	r7, r7, #5
 80026ec:	4294      	cmp	r4, r2
 80026ee:	bf08      	it	eq
 80026f0:	f043 0301 	orreq.w	r3, r3, #1
 80026f4:	3218      	adds	r2, #24
 80026f6:	0976      	lsrs	r6, r6, #5
 80026f8:	4294      	cmp	r4, r2
 80026fa:	bf08      	it	eq
 80026fc:	f043 0301 	orreq.w	r3, r3, #1
 8002700:	3218      	adds	r2, #24
 8002702:	4294      	cmp	r4, r2
 8002704:	bf08      	it	eq
 8002706:	f043 0301 	orreq.w	r3, r3, #1
 800270a:	3218      	adds	r2, #24
 800270c:	4294      	cmp	r4, r2
 800270e:	bf08      	it	eq
 8002710:	f043 0301 	orreq.w	r3, r3, #1
 8002714:	3218      	adds	r2, #24
 8002716:	4294      	cmp	r4, r2
 8002718:	bf08      	it	eq
 800271a:	f043 0301 	orreq.w	r3, r3, #1
 800271e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002722:	4294      	cmp	r4, r2
 8002724:	bf08      	it	eq
 8002726:	f043 0301 	orreq.w	r3, r3, #1
 800272a:	3218      	adds	r2, #24
 800272c:	4294      	cmp	r4, r2
 800272e:	bf08      	it	eq
 8002730:	f043 0301 	orreq.w	r3, r3, #1
 8002734:	3218      	adds	r2, #24
 8002736:	4294      	cmp	r4, r2
 8002738:	bf08      	it	eq
 800273a:	f043 0301 	orreq.w	r3, r3, #1
 800273e:	3218      	adds	r2, #24
 8002740:	4294      	cmp	r4, r2
 8002742:	bf08      	it	eq
 8002744:	f043 0301 	orreq.w	r3, r3, #1
 8002748:	3218      	adds	r2, #24
 800274a:	4294      	cmp	r4, r2
 800274c:	bf08      	it	eq
 800274e:	f043 0301 	orreq.w	r3, r3, #1
 8002752:	3218      	adds	r2, #24
 8002754:	4294      	cmp	r4, r2
 8002756:	bf08      	it	eq
 8002758:	f043 0301 	orreq.w	r3, r3, #1
 800275c:	3218      	adds	r2, #24
 800275e:	4294      	cmp	r4, r2
 8002760:	bf08      	it	eq
 8002762:	f043 0301 	orreq.w	r3, r3, #1
 8002766:	3218      	adds	r2, #24
 8002768:	4294      	cmp	r4, r2
 800276a:	bf08      	it	eq
 800276c:	f043 0301 	orreq.w	r3, r3, #1
 8002770:	4a36      	ldr	r2, [pc, #216]	@ (800284c <HAL_DMA_Init+0x2f0>)
 8002772:	ea4a 0303 	orr.w	r3, sl, r3
 8002776:	eba4 0802 	sub.w	r8, r4, r2
 800277a:	323c      	adds	r2, #60	@ 0x3c
 800277c:	430b      	orrs	r3, r1
 800277e:	fab8 f888 	clz	r8, r8
 8002782:	eba4 0b02 	sub.w	fp, r4, r2
 8002786:	3214      	adds	r2, #20
 8002788:	ea49 0303 	orr.w	r3, r9, r3
 800278c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002790:	fabb fb8b 	clz	fp, fp
 8002794:	1aa2      	subs	r2, r4, r2
 8002796:	ea48 0303 	orr.w	r3, r8, r3
 800279a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800279e:	fab2 f282 	clz	r2, r2
 80027a2:	433b      	orrs	r3, r7
 80027a4:	0952      	lsrs	r2, r2, #5
 80027a6:	4333      	orrs	r3, r6
 80027a8:	9201      	str	r2, [sp, #4]
 80027aa:	ea5b 0303 	orrs.w	r3, fp, r3
 80027ae:	d100      	bne.n	80027b2 <HAL_DMA_Init+0x256>
 80027b0:	b382      	cbz	r2, 8002814 <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027b2:	4628      	mov	r0, r5
 80027b4:	9100      	str	r1, [sp, #0]
 80027b6:	f7ff fe67 	bl	8002488 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027ba:	68ab      	ldr	r3, [r5, #8]
 80027bc:	9900      	ldr	r1, [sp, #0]
 80027be:	2b80      	cmp	r3, #128	@ 0x80
 80027c0:	f000 8083 	beq.w	80028ca <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027c4:	686a      	ldr	r2, [r5, #4]
 80027c6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80027c8:	b2d0      	uxtb	r0, r2
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027ca:	3a01      	subs	r2, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027cc:	e9d5 4c19 	ldrd	r4, ip, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027d0:	2a07      	cmp	r2, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027d2:	6018      	str	r0, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d4:	f8c4 c004 	str.w	ip, [r4, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027d8:	d87e      	bhi.n	80028d8 <HAL_DMA_Init+0x37c>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80027da:	ea4a 0a01 	orr.w	sl, sl, r1
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80027de:	1e44      	subs	r4, r0, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80027e0:	ea49 090a 	orr.w	r9, r9, sl
 80027e4:	ea48 0809 	orr.w	r8, r8, r9
 80027e8:	ea47 0708 	orr.w	r7, r7, r8
 80027ec:	433e      	orrs	r6, r7
 80027ee:	ea5b 0606 	orrs.w	r6, fp, r6
 80027f2:	d103      	bne.n	80027fc <HAL_DMA_Init+0x2a0>
 80027f4:	9b01      	ldr	r3, [sp, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 811d 	beq.w	8002a36 <HAL_DMA_Init+0x4da>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80027fc:	4a14      	ldr	r2, [pc, #80]	@ (8002850 <HAL_DMA_Init+0x2f4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80027fe:	4915      	ldr	r1, [pc, #84]	@ (8002854 <HAL_DMA_Init+0x2f8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002800:	4402      	add	r2, r0
 8002802:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002804:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002806:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002808:	40a3      	lsls	r3, r4
 800280a:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
 800280e:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002810:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002812:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002814:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002816:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002818:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800281a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 800281e:	b003      	add	sp, #12
 8002820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002824:	40020010 	.word	0x40020010
 8002828:	40020028 	.word	0x40020028
 800282c:	400204b8 	.word	0x400204b8
 8002830:	fe10803f 	.word	0xfe10803f
 8002834:	5c001000 	.word	0x5c001000
 8002838:	5802541c 	.word	0x5802541c
 800283c:	58025458 	.word	0x58025458
 8002840:	5802546c 	.word	0x5802546c
 8002844:	58025408 	.word	0x58025408
 8002848:	58025430 	.word	0x58025430
 800284c:	58025444 	.word	0x58025444
 8002850:	1600963f 	.word	0x1600963f
 8002854:	58025940 	.word	0x58025940
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002858:	6868      	ldr	r0, [r5, #4]
 800285a:	282e      	cmp	r0, #46	@ 0x2e
 800285c:	d932      	bls.n	80028c4 <HAL_DMA_Init+0x368>
 800285e:	383f      	subs	r0, #63	@ 0x3f
 8002860:	2813      	cmp	r0, #19
 8002862:	d806      	bhi.n	8002872 <HAL_DMA_Init+0x316>
 8002864:	4e7a      	ldr	r6, [pc, #488]	@ (8002a50 <HAL_DMA_Init+0x4f4>)
 8002866:	fa26 f000 	lsr.w	r0, r6, r0
 800286a:	07c0      	lsls	r0, r0, #31
 800286c:	d501      	bpl.n	8002872 <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 800286e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002872:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002874:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002876:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002878:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800287c:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002880:	f47f aefe 	bne.w	8002680 <HAL_DMA_Init+0x124>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002884:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8002886:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002888:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800288a:	2800      	cmp	r0, #0
 800288c:	f43f aef8 	beq.w	8002680 <HAL_DMA_Init+0x124>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002890:	2a00      	cmp	r2, #0
 8002892:	d138      	bne.n	8002906 <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 8002894:	2901      	cmp	r1, #1
 8002896:	d04d      	beq.n	8002934 <HAL_DMA_Init+0x3d8>
 8002898:	f031 0202 	bics.w	r2, r1, #2
 800289c:	f47f aef0 	bne.w	8002680 <HAL_DMA_Init+0x124>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028a0:	01c2      	lsls	r2, r0, #7
 80028a2:	f57f aeed 	bpl.w	8002680 <HAL_DMA_Init+0x124>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028a6:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 80028a8:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028aa:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80028ac:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 80028b0:	2001      	movs	r0, #1
}
 80028b2:	b003      	add	sp, #12
 80028b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028b8:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80028ba:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028bc:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80028be:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        return HAL_ERROR;
 80028c2:	e7f5      	b.n	80028b0 <HAL_DMA_Init+0x354>
 80028c4:	2828      	cmp	r0, #40	@ 0x28
 80028c6:	d9d4      	bls.n	8002872 <HAL_DMA_Init+0x316>
 80028c8:	e7d1      	b.n	800286e <HAL_DMA_Init+0x312>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028ca:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028cc:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 80028ce:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028d2:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028d4:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028d6:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028de:	676b      	str	r3, [r5, #116]	@ 0x74
 80028e0:	e798      	b.n	8002814 <HAL_DMA_Init+0x2b8>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80028e2:	6806      	ldr	r6, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e4:	e9d5 070b 	ldrd	r0, r7, [r5, #44]	@ 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80028e8:	f36f 060f 	bfc	r6, #0, #16
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028ec:	4307      	orrs	r7, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80028ee:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028f2:	ea43 0307 	orr.w	r3, r3, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80028f6:	d2af      	bcs.n	8002858 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80028f8:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80028fa:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028fc:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002900:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002904:	e7bf      	b.n	8002886 <HAL_DMA_Init+0x32a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002906:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 800290a:	d004      	beq.n	8002916 <HAL_DMA_Init+0x3ba>
    switch (hdma->Init.FIFOThreshold)
 800290c:	2902      	cmp	r1, #2
 800290e:	d9ca      	bls.n	80028a6 <HAL_DMA_Init+0x34a>
 8002910:	2903      	cmp	r1, #3
 8002912:	d0c5      	beq.n	80028a0 <HAL_DMA_Init+0x344>
 8002914:	e6b4      	b.n	8002680 <HAL_DMA_Init+0x124>
    switch (hdma->Init.FIFOThreshold)
 8002916:	2903      	cmp	r1, #3
 8002918:	f63f aeb2 	bhi.w	8002680 <HAL_DMA_Init+0x124>
 800291c:	a201      	add	r2, pc, #4	@ (adr r2, 8002924 <HAL_DMA_Init+0x3c8>)
 800291e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8002922:	bf00      	nop
 8002924:	080028a7 	.word	0x080028a7
 8002928:	080028a1 	.word	0x080028a1
 800292c:	080028a7 	.word	0x080028a7
 8002930:	08002935 	.word	0x08002935
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002934:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8002938:	f47f aea2 	bne.w	8002680 <HAL_DMA_Init+0x124>
 800293c:	e7b3      	b.n	80028a6 <HAL_DMA_Init+0x34a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800293e:	4a45      	ldr	r2, [pc, #276]	@ (8002a54 <HAL_DMA_Init+0x4f8>)
 8002940:	4945      	ldr	r1, [pc, #276]	@ (8002a58 <HAL_DMA_Init+0x4fc>)
 8002942:	4b46      	ldr	r3, [pc, #280]	@ (8002a5c <HAL_DMA_Init+0x500>)
 8002944:	eba4 0a02 	sub.w	sl, r4, r2
 8002948:	1a61      	subs	r1, r4, r1
 800294a:	4f45      	ldr	r7, [pc, #276]	@ (8002a60 <HAL_DMA_Init+0x504>)
 800294c:	eba4 0903 	sub.w	r9, r4, r3
 8002950:	faba fa8a 	clz	sl, sl
 8002954:	3314      	adds	r3, #20
 8002956:	fab1 f181 	clz	r1, r1
 800295a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800295e:	fab9 f989 	clz	r9, r9
 8002962:	eba4 0803 	sub.w	r8, r4, r3
 8002966:	0949      	lsrs	r1, r1, #5
 8002968:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800296c:	1be7      	subs	r7, r4, r7
 800296e:	fab8 f888 	clz	r8, r8
 8002972:	ea4a 0301 	orr.w	r3, sl, r1
 8002976:	4e3b      	ldr	r6, [pc, #236]	@ (8002a64 <HAL_DMA_Init+0x508>)
 8002978:	3278      	adds	r2, #120	@ 0x78
 800297a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800297e:	ea49 0303 	orr.w	r3, r9, r3
 8002982:	fab7 f787 	clz	r7, r7
 8002986:	1ba6      	subs	r6, r4, r6
 8002988:	eba4 0b02 	sub.w	fp, r4, r2
 800298c:	ea48 0303 	orr.w	r3, r8, r3
 8002990:	097f      	lsrs	r7, r7, #5
 8002992:	fab6 f686 	clz	r6, r6
 8002996:	3214      	adds	r2, #20
 8002998:	fabb fb8b 	clz	fp, fp
 800299c:	433b      	orrs	r3, r7
 800299e:	0976      	lsrs	r6, r6, #5
 80029a0:	1aa2      	subs	r2, r4, r2
 80029a2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80029a6:	4333      	orrs	r3, r6
 80029a8:	fab2 f282 	clz	r2, r2
 80029ac:	ea5b 0303 	orrs.w	r3, fp, r3
 80029b0:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80029b4:	9201      	str	r2, [sp, #4]
 80029b6:	d101      	bne.n	80029bc <HAL_DMA_Init+0x460>
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d043      	beq.n	8002a44 <HAL_DMA_Init+0x4e8>
    hdma->State = HAL_DMA_STATE_BUSY;
 80029bc:	2302      	movs	r3, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80029be:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8002a78 <HAL_DMA_Init+0x51c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c2:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80029c6:	2300      	movs	r3, #0
 80029c8:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029cc:	68ab      	ldr	r3, [r5, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80029ce:	6822      	ldr	r2, [r4, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029d0:	2b40      	cmp	r3, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80029d2:	ea02 0e0e 	and.w	lr, r2, lr
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029d6:	d033      	beq.n	8002a40 <HAL_DMA_Init+0x4e4>
 80029d8:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	0398      	lsls	r0, r3, #14
 80029e4:	9100      	str	r1, [sp, #0]
 80029e6:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80029ea:	ea43 0c02 	orr.w	ip, r3, r2
 80029ee:	696a      	ldr	r2, [r5, #20]
 80029f0:	69ab      	ldr	r3, [r5, #24]
 80029f2:	ea4c 0c02 	orr.w	ip, ip, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80029f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <HAL_DMA_Init+0x50c>)
 80029f8:	ea4c 0c03 	orr.w	ip, ip, r3
 80029fc:	69eb      	ldr	r3, [r5, #28]
 80029fe:	4422      	add	r2, r4
 8002a00:	ea4c 0c03 	orr.w	ip, ip, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002a04:	6a2b      	ldr	r3, [r5, #32]
 8002a06:	ea4e 1313 	orr.w	r3, lr, r3, lsr #4
 8002a0a:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a0e:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002a10:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <HAL_DMA_Init+0x510>)
 8002a12:	fba3 2302 	umull	r2, r3, r3, r2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002a16:	6020      	str	r0, [r4, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a18:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	65eb      	str	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a20:	f7ff fcb2 	bl	8002388 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a24:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a26:	4602      	mov	r2, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a28:	9900      	ldr	r1, [sp, #0]
 8002a2a:	f003 001f 	and.w	r0, r3, #31
 8002a2e:	2301      	movs	r3, #1
 8002a30:	4083      	lsls	r3, r0
 8002a32:	6053      	str	r3, [r2, #4]
 8002a34:	e6bd      	b.n	80027b2 <HAL_DMA_Init+0x256>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a36:	4a0e      	ldr	r2, [pc, #56]	@ (8002a70 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a38:	490e      	ldr	r1, [pc, #56]	@ (8002a74 <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a3a:	4402      	add	r2, r0
 8002a3c:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a3e:	e6e1      	b.n	8002804 <HAL_DMA_Init+0x2a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a40:	2010      	movs	r0, #16
 8002a42:	e7cf      	b.n	80029e4 <HAL_DMA_Init+0x488>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a44:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002a46:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a48:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002a4a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8002a4e:	e72f      	b.n	80028b0 <HAL_DMA_Init+0x354>
 8002a50:	000f030f 	.word	0x000f030f
 8002a54:	58025408 	.word	0x58025408
 8002a58:	5802541c 	.word	0x5802541c
 8002a5c:	58025430 	.word	0x58025430
 8002a60:	58025458 	.word	0x58025458
 8002a64:	5802546c 	.word	0x5802546c
 8002a68:	a7fdabf8 	.word	0xa7fdabf8
 8002a6c:	cccccccd 	.word	0xcccccccd
 8002a70:	1000823f 	.word	0x1000823f
 8002a74:	40020940 	.word	0x40020940
 8002a78:	fffe000f 	.word	0xfffe000f

08002a7c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	f000 8221 	beq.w	8002ec4 <HAL_DMA_Start_IT+0x448>
{
 8002a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hdma);
 8002a86:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8002a8a:	2c01      	cmp	r4, #1
 8002a8c:	f000 8217 	beq.w	8002ebe <HAL_DMA_Start_IT+0x442>
 8002a90:	2401      	movs	r4, #1
 8002a92:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a96:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8002a9a:	2c01      	cmp	r4, #1
 8002a9c:	d008      	beq.n	8002ab0 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002a9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 8002aa2:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002aa4:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8002aa6:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8002aaa:	2001      	movs	r0, #1
}
 8002aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab0:	2402      	movs	r4, #2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ab2:	4e69      	ldr	r6, [pc, #420]	@ (8002c58 <HAL_DMA_Start_IT+0x1dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ab4:	f8df e1a8 	ldr.w	lr, [pc, #424]	@ 8002c60 <HAL_DMA_Start_IT+0x1e4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab8:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abc:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8002abe:	4d67      	ldr	r5, [pc, #412]	@ (8002c5c <HAL_DMA_Start_IT+0x1e0>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac0:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8002ac2:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ac4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002c74 <HAL_DMA_Start_IT+0x1f8>
 8002ac8:	4574      	cmp	r4, lr
 8002aca:	bf18      	it	ne
 8002acc:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 8002ace:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8002c78 <HAL_DMA_Start_IT+0x1fc>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad2:	f8d0 a058 	ldr.w	sl, [r0, #88]	@ 0x58
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2601      	moveq	r6, #1
 8002ada:	2600      	movne	r6, #0
 8002adc:	4544      	cmp	r4, r8
 8002ade:	bf14      	ite	ne
 8002ae0:	46b1      	movne	r9, r6
 8002ae2:	f046 0901 	orreq.w	r9, r6, #1
    __HAL_DMA_DISABLE(hdma);
 8002ae6:	42ac      	cmp	r4, r5
 8002ae8:	bf18      	it	ne
 8002aea:	4564      	cmpne	r4, ip
 8002aec:	bf0c      	ite	eq
 8002aee:	2501      	moveq	r5, #1
 8002af0:	2500      	movne	r5, #0
 8002af2:	f040 80c3 	bne.w	8002c7c <HAL_DMA_Start_IT+0x200>
 8002af6:	f8d4 c000 	ldr.w	ip, [r4]
 8002afa:	f02c 0c01 	bic.w	ip, ip, #1
 8002afe:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002b02:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b06:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
 8002b0a:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002b0c:	f1bc 0f00 	cmp.w	ip, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b12:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8002b16:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b18:	b91d      	cbnz	r5, 8002b22 <HAL_DMA_Start_IT+0xa6>
 8002b1a:	f1b9 0f00 	cmp.w	r9, #0
 8002b1e:	f000 8130 	beq.w	8002d82 <HAL_DMA_Start_IT+0x306>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b22:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 8002b24:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 8002b28:	f007 081f 	and.w	r8, r7, #31
 8002b2c:	fa0e fe08 	lsl.w	lr, lr, r8
 8002b30:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b34:	6827      	ldr	r7, [r4, #0]
 8002b36:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 8002b3a:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8002b3c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b3e:	6883      	ldr	r3, [r0, #8]
 8002b40:	2b40      	cmp	r3, #64	@ 0x40
 8002b42:	f000 81c1 	beq.w	8002ec8 <HAL_DMA_Start_IT+0x44c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8002b46:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002b48:	60e2      	str	r2, [r4, #12]
      if(hdma->XferHalfCpltCallback != NULL)
 8002b4a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b4c:	2d00      	cmp	r5, #0
 8002b4e:	f040 81a1 	bne.w	8002e94 <HAL_DMA_Start_IT+0x418>
 8002b52:	4b43      	ldr	r3, [pc, #268]	@ (8002c60 <HAL_DMA_Start_IT+0x1e4>)
 8002b54:	429c      	cmp	r4, r3
 8002b56:	f000 81de 	beq.w	8002f16 <HAL_DMA_Start_IT+0x49a>
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	429c      	cmp	r4, r3
 8002b5e:	f000 81f6 	beq.w	8002f4e <HAL_DMA_Start_IT+0x4d2>
 8002b62:	f1b9 0f00 	cmp.w	r9, #0
 8002b66:	f040 81c7 	bne.w	8002ef8 <HAL_DMA_Start_IT+0x47c>
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c64 <HAL_DMA_Start_IT+0x1e8>)
 8002b6c:	429c      	cmp	r4, r3
 8002b6e:	f000 8201 	beq.w	8002f74 <HAL_DMA_Start_IT+0x4f8>
 8002b72:	4b3d      	ldr	r3, [pc, #244]	@ (8002c68 <HAL_DMA_Start_IT+0x1ec>)
 8002b74:	429c      	cmp	r4, r3
 8002b76:	f000 8209 	beq.w	8002f8c <HAL_DMA_Start_IT+0x510>
 8002b7a:	3318      	adds	r3, #24
 8002b7c:	429c      	cmp	r4, r3
 8002b7e:	f000 8223 	beq.w	8002fc8 <HAL_DMA_Start_IT+0x54c>
 8002b82:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8002b86:	429c      	cmp	r4, r3
 8002b88:	f000 8233 	beq.w	8002ff2 <HAL_DMA_Start_IT+0x576>
 8002b8c:	3318      	adds	r3, #24
 8002b8e:	429c      	cmp	r4, r3
 8002b90:	f000 8242 	beq.w	8003018 <HAL_DMA_Start_IT+0x59c>
 8002b94:	3318      	adds	r3, #24
 8002b96:	429c      	cmp	r4, r3
 8002b98:	f000 8249 	beq.w	800302e <HAL_DMA_Start_IT+0x5b2>
 8002b9c:	3318      	adds	r3, #24
 8002b9e:	429c      	cmp	r4, r3
 8002ba0:	f000 8250 	beq.w	8003044 <HAL_DMA_Start_IT+0x5c8>
 8002ba4:	3318      	adds	r3, #24
 8002ba6:	429c      	cmp	r4, r3
 8002ba8:	f000 8257 	beq.w	800305a <HAL_DMA_Start_IT+0x5de>
 8002bac:	3318      	adds	r3, #24
 8002bae:	429c      	cmp	r4, r3
 8002bb0:	f000 8267 	beq.w	8003082 <HAL_DMA_Start_IT+0x606>
 8002bb4:	3318      	adds	r3, #24
 8002bb6:	429c      	cmp	r4, r3
 8002bb8:	f000 8265 	beq.w	8003086 <HAL_DMA_Start_IT+0x60a>
 8002bbc:	3318      	adds	r3, #24
 8002bbe:	429c      	cmp	r4, r3
 8002bc0:	f000 8275 	beq.w	80030ae <HAL_DMA_Start_IT+0x632>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002bc4:	6823      	ldr	r3, [r4, #0]
 8002bc6:	f023 030e 	bic.w	r3, r3, #14
 8002bca:	f043 030a 	orr.w	r3, r3, #10
 8002bce:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002bd0:	b11a      	cbz	r2, 8002bda <HAL_DMA_Start_IT+0x15e>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	f043 0304 	orr.w	r3, r3, #4
 8002bd8:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bda:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <HAL_DMA_Start_IT+0x1f0>)
 8002bdc:	4a24      	ldr	r2, [pc, #144]	@ (8002c70 <HAL_DMA_Start_IT+0x1f4>)
 8002bde:	4294      	cmp	r4, r2
 8002be0:	bf18      	it	ne
 8002be2:	429c      	cmpne	r4, r3
 8002be4:	f102 0214 	add.w	r2, r2, #20
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	4294      	cmp	r4, r2
 8002bf0:	bf08      	it	eq
 8002bf2:	f043 0301 	orreq.w	r3, r3, #1
 8002bf6:	3214      	adds	r2, #20
 8002bf8:	4294      	cmp	r4, r2
 8002bfa:	bf08      	it	eq
 8002bfc:	f043 0301 	orreq.w	r3, r3, #1
 8002c00:	3214      	adds	r2, #20
 8002c02:	4294      	cmp	r4, r2
 8002c04:	bf08      	it	eq
 8002c06:	f043 0301 	orreq.w	r3, r3, #1
 8002c0a:	3214      	adds	r2, #20
 8002c0c:	4294      	cmp	r4, r2
 8002c0e:	bf08      	it	eq
 8002c10:	f043 0301 	orreq.w	r3, r3, #1
 8002c14:	3214      	adds	r2, #20
 8002c16:	4294      	cmp	r4, r2
 8002c18:	bf08      	it	eq
 8002c1a:	f043 0301 	orreq.w	r3, r3, #1
 8002c1e:	3214      	adds	r2, #20
 8002c20:	4294      	cmp	r4, r2
 8002c22:	bf08      	it	eq
 8002c24:	f043 0301 	orreq.w	r3, r3, #1
 8002c28:	b17b      	cbz	r3, 8002c4a <HAL_DMA_Start_IT+0x1ce>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c2a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002c2c:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	03d2      	lsls	r2, r2, #15
 8002c34:	f100 813e 	bmi.w	8002eb4 <HAL_DMA_Start_IT+0x438>
      if(hdma->DMAmuxRequestGen != 0U)
 8002c38:	f1bc 0f00 	cmp.w	ip, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_DMA_Start_IT+0x1ce>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c3e:	f8dc 3000 	ldr.w	r3, [ip]
 8002c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c46:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 8002c4a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6023      	str	r3, [r4, #0]
}
 8002c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c58:	40020070 	.word	0x40020070
 8002c5c:	40020028 	.word	0x40020028
 8002c60:	40020040 	.word	0x40020040
 8002c64:	40020088 	.word	0x40020088
 8002c68:	400200a0 	.word	0x400200a0
 8002c6c:	58025408 	.word	0x58025408
 8002c70:	5802541c 	.word	0x5802541c
 8002c74:	40020058 	.word	0x40020058
 8002c78:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8002c7c:	4574      	cmp	r4, lr
 8002c7e:	f000 8154 	beq.w	8002f2a <HAL_DMA_Start_IT+0x4ae>
 8002c82:	4544      	cmp	r4, r8
 8002c84:	f000 815a 	beq.w	8002f3c <HAL_DMA_Start_IT+0x4c0>
 8002c88:	f1b9 0f00 	cmp.w	r9, #0
 8002c8c:	f040 811f 	bne.w	8002ece <HAL_DMA_Start_IT+0x452>
 8002c90:	f8df c434 	ldr.w	ip, [pc, #1076]	@ 80030c8 <HAL_DMA_Start_IT+0x64c>
 8002c94:	4564      	cmp	r4, ip
 8002c96:	f000 8164 	beq.w	8002f62 <HAL_DMA_Start_IT+0x4e6>
 8002c9a:	f10c 0c18 	add.w	ip, ip, #24
 8002c9e:	4564      	cmp	r4, ip
 8002ca0:	f000 8180 	beq.w	8002fa4 <HAL_DMA_Start_IT+0x528>
 8002ca4:	f10c 0c18 	add.w	ip, ip, #24
 8002ca8:	4564      	cmp	r4, ip
 8002caa:	f000 8184 	beq.w	8002fb6 <HAL_DMA_Start_IT+0x53a>
 8002cae:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 8002cb2:	4564      	cmp	r4, ip
 8002cb4:	f000 8194 	beq.w	8002fe0 <HAL_DMA_Start_IT+0x564>
 8002cb8:	f10c 0c18 	add.w	ip, ip, #24
 8002cbc:	4564      	cmp	r4, ip
 8002cbe:	f000 81a2 	beq.w	8003006 <HAL_DMA_Start_IT+0x58a>
 8002cc2:	f10c 0c18 	add.w	ip, ip, #24
 8002cc6:	4564      	cmp	r4, ip
 8002cc8:	f000 81b3 	beq.w	8003032 <HAL_DMA_Start_IT+0x5b6>
 8002ccc:	f10c 0c18 	add.w	ip, ip, #24
 8002cd0:	4564      	cmp	r4, ip
 8002cd2:	f000 81b9 	beq.w	8003048 <HAL_DMA_Start_IT+0x5cc>
 8002cd6:	f10c 0c18 	add.w	ip, ip, #24
 8002cda:	4564      	cmp	r4, ip
 8002cdc:	f000 81bf 	beq.w	800305e <HAL_DMA_Start_IT+0x5e2>
 8002ce0:	f10c 0c18 	add.w	ip, ip, #24
 8002ce4:	4564      	cmp	r4, ip
 8002ce6:	f000 81c3 	beq.w	8003070 <HAL_DMA_Start_IT+0x5f4>
 8002cea:	f10c 0c18 	add.w	ip, ip, #24
 8002cee:	4564      	cmp	r4, ip
 8002cf0:	f000 81cb 	beq.w	800308a <HAL_DMA_Start_IT+0x60e>
 8002cf4:	f10c 0c18 	add.w	ip, ip, #24
 8002cf8:	4564      	cmp	r4, ip
 8002cfa:	f000 81cf 	beq.w	800309c <HAL_DMA_Start_IT+0x620>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cfe:	f8df c3cc 	ldr.w	ip, [pc, #972]	@ 80030cc <HAL_DMA_Start_IT+0x650>
 8002d02:	f8df e3cc 	ldr.w	lr, [pc, #972]	@ 80030d0 <HAL_DMA_Start_IT+0x654>
 8002d06:	4574      	cmp	r4, lr
 8002d08:	bf18      	it	ne
 8002d0a:	4564      	cmpne	r4, ip
 8002d0c:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
 8002d10:	bf0c      	ite	eq
 8002d12:	f04f 0c01 	moveq.w	ip, #1
 8002d16:	f04f 0c00 	movne.w	ip, #0
 8002d1a:	4574      	cmp	r4, lr
 8002d1c:	bf08      	it	eq
 8002d1e:	f04c 0c01 	orreq.w	ip, ip, #1
 8002d22:	f10e 0e14 	add.w	lr, lr, #20
 8002d26:	4574      	cmp	r4, lr
 8002d28:	bf08      	it	eq
 8002d2a:	f04c 0c01 	orreq.w	ip, ip, #1
 8002d2e:	f10e 0e14 	add.w	lr, lr, #20
 8002d32:	4574      	cmp	r4, lr
 8002d34:	bf08      	it	eq
 8002d36:	f04c 0c01 	orreq.w	ip, ip, #1
 8002d3a:	f10e 0e14 	add.w	lr, lr, #20
 8002d3e:	4574      	cmp	r4, lr
 8002d40:	bf08      	it	eq
 8002d42:	f04c 0c01 	orreq.w	ip, ip, #1
    __HAL_DMA_DISABLE(hdma);
 8002d46:	f8d4 e000 	ldr.w	lr, [r4]
 8002d4a:	f02e 0e01 	bic.w	lr, lr, #1
 8002d4e:	f8c4 e000 	str.w	lr, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d52:	f8df e380 	ldr.w	lr, [pc, #896]	@ 80030d4 <HAL_DMA_Start_IT+0x658>
 8002d56:	4574      	cmp	r4, lr
 8002d58:	bf08      	it	eq
 8002d5a:	f04c 0c01 	orreq.w	ip, ip, #1
 8002d5e:	f1bc 0f00 	cmp.w	ip, #0
 8002d62:	d103      	bne.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
 8002d64:	f8df c370 	ldr.w	ip, [pc, #880]	@ 80030d8 <HAL_DMA_Start_IT+0x65c>
 8002d68:	4564      	cmp	r4, ip
 8002d6a:	d14f      	bne.n	8002e0c <HAL_DMA_Start_IT+0x390>
    if(hdma->DMAmuxRequestGen != 0U)
 8002d6c:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d70:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8002d74:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002d76:	f1bc 0f00 	cmp.w	ip, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_DMA_Start_IT+0x306>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d7c:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8002d80:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d82:	f8df e344 	ldr.w	lr, [pc, #836]	@ 80030c8 <HAL_DMA_Start_IT+0x64c>
 8002d86:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 80030dc <HAL_DMA_Start_IT+0x660>
 8002d8a:	4544      	cmp	r4, r8
 8002d8c:	bf18      	it	ne
 8002d8e:	4574      	cmpne	r4, lr
 8002d90:	f108 0818 	add.w	r8, r8, #24
 8002d94:	bf0c      	ite	eq
 8002d96:	f04f 0e01 	moveq.w	lr, #1
 8002d9a:	f04f 0e00 	movne.w	lr, #0
 8002d9e:	4544      	cmp	r4, r8
 8002da0:	bf08      	it	eq
 8002da2:	f04e 0e01 	orreq.w	lr, lr, #1
 8002da6:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 8002daa:	4544      	cmp	r4, r8
 8002dac:	bf08      	it	eq
 8002dae:	f04e 0e01 	orreq.w	lr, lr, #1
 8002db2:	f108 0818 	add.w	r8, r8, #24
 8002db6:	4544      	cmp	r4, r8
 8002db8:	bf08      	it	eq
 8002dba:	f04e 0e01 	orreq.w	lr, lr, #1
 8002dbe:	f108 0818 	add.w	r8, r8, #24
 8002dc2:	4544      	cmp	r4, r8
 8002dc4:	bf08      	it	eq
 8002dc6:	f04e 0e01 	orreq.w	lr, lr, #1
 8002dca:	f108 0818 	add.w	r8, r8, #24
 8002dce:	4544      	cmp	r4, r8
 8002dd0:	bf08      	it	eq
 8002dd2:	f04e 0e01 	orreq.w	lr, lr, #1
 8002dd6:	f108 0818 	add.w	r8, r8, #24
 8002dda:	4544      	cmp	r4, r8
 8002ddc:	bf08      	it	eq
 8002dde:	f04e 0e01 	orreq.w	lr, lr, #1
 8002de2:	f108 0818 	add.w	r8, r8, #24
 8002de6:	4544      	cmp	r4, r8
 8002de8:	bf08      	it	eq
 8002dea:	f04e 0e01 	orreq.w	lr, lr, #1
 8002dee:	f108 0818 	add.w	r8, r8, #24
 8002df2:	4544      	cmp	r4, r8
 8002df4:	bf08      	it	eq
 8002df6:	f04e 0e01 	orreq.w	lr, lr, #1
 8002dfa:	f1be 0f00 	cmp.w	lr, #0
 8002dfe:	f47f ae90 	bne.w	8002b22 <HAL_DMA_Start_IT+0xa6>
 8002e02:	f8df e2dc 	ldr.w	lr, [pc, #732]	@ 80030e0 <HAL_DMA_Start_IT+0x664>
 8002e06:	4574      	cmp	r4, lr
 8002e08:	f43f ae8b 	beq.w	8002b22 <HAL_DMA_Start_IT+0xa6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e0c:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 80030d0 <HAL_DMA_Start_IT+0x654>
 8002e10:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 80030cc <HAL_DMA_Start_IT+0x650>
 8002e14:	4574      	cmp	r4, lr
 8002e16:	bf18      	it	ne
 8002e18:	4564      	cmpne	r4, ip
 8002e1a:	f10e 0e14 	add.w	lr, lr, #20
 8002e1e:	bf0c      	ite	eq
 8002e20:	f04f 0c01 	moveq.w	ip, #1
 8002e24:	f04f 0c00 	movne.w	ip, #0
 8002e28:	4574      	cmp	r4, lr
 8002e2a:	bf08      	it	eq
 8002e2c:	f04c 0c01 	orreq.w	ip, ip, #1
 8002e30:	f10e 0e14 	add.w	lr, lr, #20
 8002e34:	4574      	cmp	r4, lr
 8002e36:	bf08      	it	eq
 8002e38:	f04c 0c01 	orreq.w	ip, ip, #1
 8002e3c:	f10e 0e14 	add.w	lr, lr, #20
 8002e40:	4574      	cmp	r4, lr
 8002e42:	bf08      	it	eq
 8002e44:	f04c 0c01 	orreq.w	ip, ip, #1
 8002e48:	f10e 0e14 	add.w	lr, lr, #20
 8002e4c:	4574      	cmp	r4, lr
 8002e4e:	bf08      	it	eq
 8002e50:	f04c 0c01 	orreq.w	ip, ip, #1
 8002e54:	f10e 0e14 	add.w	lr, lr, #20
 8002e58:	4574      	cmp	r4, lr
 8002e5a:	bf08      	it	eq
 8002e5c:	f04c 0c01 	orreq.w	ip, ip, #1
 8002e60:	f1bc 0f00 	cmp.w	ip, #0
 8002e64:	d104      	bne.n	8002e70 <HAL_DMA_Start_IT+0x3f4>
 8002e66:	f8df c270 	ldr.w	ip, [pc, #624]	@ 80030d8 <HAL_DMA_Start_IT+0x65c>
 8002e6a:	4564      	cmp	r4, ip
 8002e6c:	f040 8125 	bne.w	80030ba <HAL_DMA_Start_IT+0x63e>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002e70:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 8002e72:	f04f 0c01 	mov.w	ip, #1
 8002e76:	f006 0e1f 	and.w	lr, r6, #31
 8002e7a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002e7e:	f8ca c004 	str.w	ip, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8002e82:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e84:	6883      	ldr	r3, [r0, #8]
 8002e86:	2b40      	cmp	r3, #64	@ 0x40
 8002e88:	f000 8113 	beq.w	80030b2 <HAL_DMA_Start_IT+0x636>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8002e8c:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002e8e:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e90:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002e92:	e65e      	b.n	8002b52 <HAL_DMA_Start_IT+0xd6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	f023 031e 	bic.w	r3, r3, #30
 8002e9a:	f043 0316 	orr.w	r3, r3, #22
 8002e9e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8002ea0:	b11a      	cbz	r2, 8002eaa <HAL_DMA_Start_IT+0x42e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002eaa:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	03d2      	lsls	r2, r2, #15
 8002eb0:	f57f aec2 	bpl.w	8002c38 <HAL_DMA_Start_IT+0x1bc>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e6bc      	b.n	8002c38 <HAL_DMA_Start_IT+0x1bc>
  __HAL_LOCK(hdma);
 8002ebe:	2002      	movs	r0, #2
}
 8002ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8002ec4:	2001      	movs	r0, #1
}
 8002ec6:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8002ec8:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8002eca:	60e1      	str	r1, [r4, #12]
 8002ecc:	e63d      	b.n	8002b4a <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 8002ece:	f8df e1f0 	ldr.w	lr, [pc, #496]	@ 80030c0 <HAL_DMA_Start_IT+0x644>
 8002ed2:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 8002ed6:	f02c 0c01 	bic.w	ip, ip, #1
 8002eda:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 8002ede:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ee2:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8002ee6:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8002ee8:	f1bc 0f00 	cmp.w	ip, #0
 8002eec:	f43f ae19 	beq.w	8002b22 <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ef0:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8002ef4:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ef6:	e614      	b.n	8002b22 <HAL_DMA_Start_IT+0xa6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ef8:	4971      	ldr	r1, [pc, #452]	@ (80030c0 <HAL_DMA_Start_IT+0x644>)
 8002efa:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8002efc:	f023 031e 	bic.w	r3, r3, #30
 8002f00:	f043 0316 	orr.w	r3, r3, #22
 8002f04:	670b      	str	r3, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8002f06:	2a00      	cmp	r2, #0
 8002f08:	f43f ae8f 	beq.w	8002c2a <HAL_DMA_Start_IT+0x1ae>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	f043 0308 	orr.w	r3, r3, #8
 8002f12:	6023      	str	r3, [r4, #0]
 8002f14:	e689      	b.n	8002c2a <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f16:	496a      	ldr	r1, [pc, #424]	@ (80030c0 <HAL_DMA_Start_IT+0x644>)
 8002f18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002f1a:	f023 031e 	bic.w	r3, r3, #30
 8002f1e:	f043 0316 	orr.w	r3, r3, #22
 8002f22:	640b      	str	r3, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8002f24:	2a00      	cmp	r2, #0
 8002f26:	d1f1      	bne.n	8002f0c <HAL_DMA_Start_IT+0x490>
 8002f28:	e67f      	b.n	8002c2a <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8002f2a:	f8df e194 	ldr.w	lr, [pc, #404]	@ 80030c0 <HAL_DMA_Start_IT+0x644>
 8002f2e:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 8002f32:	f02c 0c01 	bic.w	ip, ip, #1
 8002f36:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f3a:	e5e2      	b.n	8002b02 <HAL_DMA_Start_IT+0x86>
    __HAL_DMA_DISABLE(hdma);
 8002f3c:	f8df e180 	ldr.w	lr, [pc, #384]	@ 80030c0 <HAL_DMA_Start_IT+0x644>
 8002f40:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 8002f44:	f02c 0c01 	bic.w	ip, ip, #1
 8002f48:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f4c:	e7c7      	b.n	8002ede <HAL_DMA_Start_IT+0x462>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f4e:	495c      	ldr	r1, [pc, #368]	@ (80030c0 <HAL_DMA_Start_IT+0x644>)
 8002f50:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 8002f52:	f023 031e 	bic.w	r3, r3, #30
 8002f56:	f043 0316 	orr.w	r3, r3, #22
 8002f5a:	658b      	str	r3, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 8002f5c:	2a00      	cmp	r2, #0
 8002f5e:	d1d5      	bne.n	8002f0c <HAL_DMA_Start_IT+0x490>
 8002f60:	e663      	b.n	8002c2a <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8002f62:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 80030c0 <HAL_DMA_Start_IT+0x644>
 8002f66:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8002f6a:	f02c 0c01 	bic.w	ip, ip, #1
 8002f6e:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f72:	e6fb      	b.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f74:	4952      	ldr	r1, [pc, #328]	@ (80030c0 <HAL_DMA_Start_IT+0x644>)
 8002f76:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8002f7a:	f023 031e 	bic.w	r3, r3, #30
 8002f7e:	f043 0316 	orr.w	r3, r3, #22
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8002f86:	2a00      	cmp	r2, #0
 8002f88:	d1c0      	bne.n	8002f0c <HAL_DMA_Start_IT+0x490>
 8002f8a:	e64e      	b.n	8002c2a <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f8c:	494c      	ldr	r1, [pc, #304]	@ (80030c0 <HAL_DMA_Start_IT+0x644>)
 8002f8e:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
 8002f92:	f023 031e 	bic.w	r3, r3, #30
 8002f96:	f043 0316 	orr.w	r3, r3, #22
 8002f9a:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	d1b4      	bne.n	8002f0c <HAL_DMA_Start_IT+0x490>
 8002fa2:	e642      	b.n	8002c2a <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8002fa4:	f8df e118 	ldr.w	lr, [pc, #280]	@ 80030c0 <HAL_DMA_Start_IT+0x644>
 8002fa8:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 8002fac:	f02c 0c01 	bic.w	ip, ip, #1
 8002fb0:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fb4:	e6da      	b.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8002fb6:	f8df e108 	ldr.w	lr, [pc, #264]	@ 80030c0 <HAL_DMA_Start_IT+0x644>
 8002fba:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 8002fbe:	f02c 0c01 	bic.w	ip, ip, #1
 8002fc2:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fc6:	e6d1      	b.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002fc8:	493d      	ldr	r1, [pc, #244]	@ (80030c0 <HAL_DMA_Start_IT+0x644>)
 8002fca:	f8d1 30b8 	ldr.w	r3, [r1, #184]	@ 0xb8
 8002fce:	f023 031e 	bic.w	r3, r3, #30
 8002fd2:	f043 0316 	orr.w	r3, r3, #22
 8002fd6:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8002fda:	2a00      	cmp	r2, #0
 8002fdc:	d196      	bne.n	8002f0c <HAL_DMA_Start_IT+0x490>
 8002fde:	e624      	b.n	8002c2a <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8002fe0:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 80030c4 <HAL_DMA_Start_IT+0x648>
 8002fe4:	f8de c010 	ldr.w	ip, [lr, #16]
 8002fe8:	f02c 0c01 	bic.w	ip, ip, #1
 8002fec:	f8ce c010 	str.w	ip, [lr, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ff0:	e6bc      	b.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ff2:	4934      	ldr	r1, [pc, #208]	@ (80030c4 <HAL_DMA_Start_IT+0x648>)
 8002ff4:	690b      	ldr	r3, [r1, #16]
 8002ff6:	f023 031e 	bic.w	r3, r3, #30
 8002ffa:	f043 0316 	orr.w	r3, r3, #22
 8002ffe:	610b      	str	r3, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 8003000:	2a00      	cmp	r2, #0
 8003002:	d183      	bne.n	8002f0c <HAL_DMA_Start_IT+0x490>
 8003004:	e611      	b.n	8002c2a <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8003006:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 80030c4 <HAL_DMA_Start_IT+0x648>
 800300a:	f8de c028 	ldr.w	ip, [lr, #40]	@ 0x28
 800300e:	f02c 0c01 	bic.w	ip, ip, #1
 8003012:	f8ce c028 	str.w	ip, [lr, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003016:	e6a9      	b.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003018:	492a      	ldr	r1, [pc, #168]	@ (80030c4 <HAL_DMA_Start_IT+0x648>)
 800301a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800301c:	f023 031e 	bic.w	r3, r3, #30
 8003020:	f043 0316 	orr.w	r3, r3, #22
 8003024:	628b      	str	r3, [r1, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 8003026:	2a00      	cmp	r2, #0
 8003028:	f47f af70 	bne.w	8002f0c <HAL_DMA_Start_IT+0x490>
 800302c:	e5fd      	b.n	8002c2a <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800302e:	4925      	ldr	r1, [pc, #148]	@ (80030c4 <HAL_DMA_Start_IT+0x648>)
 8003030:	e772      	b.n	8002f18 <HAL_DMA_Start_IT+0x49c>
    __HAL_DMA_DISABLE(hdma);
 8003032:	f8df e090 	ldr.w	lr, [pc, #144]	@ 80030c4 <HAL_DMA_Start_IT+0x648>
 8003036:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 800303a:	f02c 0c01 	bic.w	ip, ip, #1
 800303e:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003042:	e693      	b.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003044:	491f      	ldr	r1, [pc, #124]	@ (80030c4 <HAL_DMA_Start_IT+0x648>)
 8003046:	e783      	b.n	8002f50 <HAL_DMA_Start_IT+0x4d4>
    __HAL_DMA_DISABLE(hdma);
 8003048:	f8df e078 	ldr.w	lr, [pc, #120]	@ 80030c4 <HAL_DMA_Start_IT+0x648>
 800304c:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 8003050:	f02c 0c01 	bic.w	ip, ip, #1
 8003054:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003058:	e688      	b.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800305a:	491a      	ldr	r1, [pc, #104]	@ (80030c4 <HAL_DMA_Start_IT+0x648>)
 800305c:	e74d      	b.n	8002efa <HAL_DMA_Start_IT+0x47e>
    __HAL_DMA_DISABLE(hdma);
 800305e:	f8df e064 	ldr.w	lr, [pc, #100]	@ 80030c4 <HAL_DMA_Start_IT+0x648>
 8003062:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 8003066:	f02c 0c01 	bic.w	ip, ip, #1
 800306a:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800306e:	e67d      	b.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8003070:	f8df e050 	ldr.w	lr, [pc, #80]	@ 80030c4 <HAL_DMA_Start_IT+0x648>
 8003074:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8003078:	f02c 0c01 	bic.w	ip, ip, #1
 800307c:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003080:	e674      	b.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003082:	4910      	ldr	r1, [pc, #64]	@ (80030c4 <HAL_DMA_Start_IT+0x648>)
 8003084:	e777      	b.n	8002f76 <HAL_DMA_Start_IT+0x4fa>
 8003086:	490f      	ldr	r1, [pc, #60]	@ (80030c4 <HAL_DMA_Start_IT+0x648>)
 8003088:	e781      	b.n	8002f8e <HAL_DMA_Start_IT+0x512>
    __HAL_DMA_DISABLE(hdma);
 800308a:	f8df e038 	ldr.w	lr, [pc, #56]	@ 80030c4 <HAL_DMA_Start_IT+0x648>
 800308e:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 8003092:	f02c 0c01 	bic.w	ip, ip, #1
 8003096:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800309a:	e667      	b.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 800309c:	f8df e024 	ldr.w	lr, [pc, #36]	@ 80030c4 <HAL_DMA_Start_IT+0x648>
 80030a0:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 80030a4:	f02c 0c01 	bic.w	ip, ip, #1
 80030a8:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030ac:	e65e      	b.n	8002d6c <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80030ae:	4905      	ldr	r1, [pc, #20]	@ (80030c4 <HAL_DMA_Start_IT+0x648>)
 80030b0:	e78b      	b.n	8002fca <HAL_DMA_Start_IT+0x54e>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80030b2:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80030b4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80030b6:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030b8:	e54b      	b.n	8002b52 <HAL_DMA_Start_IT+0xd6>
 80030ba:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80030bc:	e555      	b.n	8002b6a <HAL_DMA_Start_IT+0xee>
 80030be:	bf00      	nop
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40020088 	.word	0x40020088
 80030cc:	5802541c 	.word	0x5802541c
 80030d0:	58025408 	.word	0x58025408
 80030d4:	58025480 	.word	0x58025480
 80030d8:	58025494 	.word	0x58025494
 80030dc:	400200a0 	.word	0x400200a0
 80030e0:	400204b8 	.word	0x400204b8

080030e4 <HAL_DMA_IRQHandler>:
{
 80030e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80030e6:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80030e8:	4b94      	ldr	r3, [pc, #592]	@ (800333c <HAL_DMA_IRQHandler+0x258>)
{
 80030ea:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ec:	6d85      	ldr	r5, [r0, #88]	@ 0x58
{
 80030ee:	4607      	mov	r7, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80030f0:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0U;
 80030f2:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030f4:	4b92      	ldr	r3, [pc, #584]	@ (8003340 <HAL_DMA_IRQHandler+0x25c>)
 80030f6:	6802      	ldr	r2, [r0, #0]
 80030f8:	4892      	ldr	r0, [pc, #584]	@ (8003344 <HAL_DMA_IRQHandler+0x260>)
  tmpisr_dma  = regs_dma->ISR;
 80030fa:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030fc:	4282      	cmp	r2, r0
 80030fe:	bf18      	it	ne
 8003100:	429a      	cmpne	r2, r3
 8003102:	f100 0018 	add.w	r0, r0, #24
  tmpisr_bdma = regs_bdma->ISR;
 8003106:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003108:	bf0c      	ite	eq
 800310a:	2301      	moveq	r3, #1
 800310c:	2300      	movne	r3, #0
 800310e:	4282      	cmp	r2, r0
 8003110:	bf08      	it	eq
 8003112:	f043 0301 	orreq.w	r3, r3, #1
 8003116:	3018      	adds	r0, #24
 8003118:	4282      	cmp	r2, r0
 800311a:	bf08      	it	eq
 800311c:	f043 0301 	orreq.w	r3, r3, #1
 8003120:	3018      	adds	r0, #24
 8003122:	4282      	cmp	r2, r0
 8003124:	bf08      	it	eq
 8003126:	f043 0301 	orreq.w	r3, r3, #1
 800312a:	3018      	adds	r0, #24
 800312c:	4282      	cmp	r2, r0
 800312e:	bf08      	it	eq
 8003130:	f043 0301 	orreq.w	r3, r3, #1
 8003134:	3018      	adds	r0, #24
 8003136:	4282      	cmp	r2, r0
 8003138:	bf08      	it	eq
 800313a:	f043 0301 	orreq.w	r3, r3, #1
 800313e:	3018      	adds	r0, #24
 8003140:	4282      	cmp	r2, r0
 8003142:	bf08      	it	eq
 8003144:	f043 0301 	orreq.w	r3, r3, #1
 8003148:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 800314c:	4282      	cmp	r2, r0
 800314e:	bf08      	it	eq
 8003150:	f043 0301 	orreq.w	r3, r3, #1
 8003154:	3018      	adds	r0, #24
 8003156:	4282      	cmp	r2, r0
 8003158:	bf08      	it	eq
 800315a:	f043 0301 	orreq.w	r3, r3, #1
 800315e:	3018      	adds	r0, #24
 8003160:	4282      	cmp	r2, r0
 8003162:	bf08      	it	eq
 8003164:	f043 0301 	orreq.w	r3, r3, #1
 8003168:	3018      	adds	r0, #24
 800316a:	4282      	cmp	r2, r0
 800316c:	bf08      	it	eq
 800316e:	f043 0301 	orreq.w	r3, r3, #1
 8003172:	3018      	adds	r0, #24
 8003174:	4282      	cmp	r2, r0
 8003176:	bf08      	it	eq
 8003178:	f043 0301 	orreq.w	r3, r3, #1
 800317c:	3018      	adds	r0, #24
 800317e:	4282      	cmp	r2, r0
 8003180:	bf08      	it	eq
 8003182:	f043 0301 	orreq.w	r3, r3, #1
 8003186:	3018      	adds	r0, #24
 8003188:	4282      	cmp	r2, r0
 800318a:	bf08      	it	eq
 800318c:	f043 0301 	orreq.w	r3, r3, #1
 8003190:	b91b      	cbnz	r3, 800319a <HAL_DMA_IRQHandler+0xb6>
 8003192:	4b6d      	ldr	r3, [pc, #436]	@ (8003348 <HAL_DMA_IRQHandler+0x264>)
 8003194:	429a      	cmp	r2, r3
 8003196:	f040 812f 	bne.w	80033f8 <HAL_DMA_IRQHandler+0x314>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800319a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800319c:	2108      	movs	r1, #8
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	4099      	lsls	r1, r3
 80031a4:	4221      	tst	r1, r4
 80031a6:	d00b      	beq.n	80031c0 <HAL_DMA_IRQHandler+0xdc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80031a8:	6810      	ldr	r0, [r2, #0]
 80031aa:	0740      	lsls	r0, r0, #29
 80031ac:	d508      	bpl.n	80031c0 <HAL_DMA_IRQHandler+0xdc>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031ae:	6810      	ldr	r0, [r2, #0]
 80031b0:	f020 0004 	bic.w	r0, r0, #4
 80031b4:	6010      	str	r0, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031b6:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031ba:	f041 0101 	orr.w	r1, r1, #1
 80031be:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031c0:	fa24 f103 	lsr.w	r1, r4, r3
 80031c4:	07c8      	lsls	r0, r1, #31
 80031c6:	d509      	bpl.n	80031dc <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031c8:	6951      	ldr	r1, [r2, #20]
 80031ca:	0609      	lsls	r1, r1, #24
 80031cc:	d506      	bpl.n	80031dc <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031ce:	2101      	movs	r1, #1
 80031d0:	4099      	lsls	r1, r3
 80031d2:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031d6:	f041 0102 	orr.w	r1, r1, #2
 80031da:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031dc:	2104      	movs	r1, #4
 80031de:	4099      	lsls	r1, r3
 80031e0:	4221      	tst	r1, r4
 80031e2:	d007      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x110>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80031e4:	6810      	ldr	r0, [r2, #0]
 80031e6:	0780      	lsls	r0, r0, #30
 80031e8:	d504      	bpl.n	80031f4 <HAL_DMA_IRQHandler+0x110>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031ea:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031ee:	f041 0104 	orr.w	r1, r1, #4
 80031f2:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031f4:	2110      	movs	r1, #16
 80031f6:	4099      	lsls	r1, r3
 80031f8:	4221      	tst	r1, r4
 80031fa:	f000 80b0 	beq.w	800335e <HAL_DMA_IRQHandler+0x27a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031fe:	6810      	ldr	r0, [r2, #0]
 8003200:	0700      	lsls	r0, r0, #28
 8003202:	f140 80ac 	bpl.w	800335e <HAL_DMA_IRQHandler+0x27a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003206:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003208:	6811      	ldr	r1, [r2, #0]
 800320a:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800320e:	6811      	ldr	r1, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003210:	f040 809e 	bne.w	8003350 <HAL_DMA_IRQHandler+0x26c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003214:	05c9      	lsls	r1, r1, #23
 8003216:	d403      	bmi.n	8003220 <HAL_DMA_IRQHandler+0x13c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003218:	6811      	ldr	r1, [r2, #0]
 800321a:	f021 0108 	bic.w	r1, r1, #8
 800321e:	6011      	str	r1, [r2, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8003220:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003222:	2900      	cmp	r1, #0
 8003224:	f000 809b 	beq.w	800335e <HAL_DMA_IRQHandler+0x27a>
            hdma->XferHalfCpltCallback(hdma);
 8003228:	4638      	mov	r0, r7
 800322a:	4788      	blx	r1
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800322c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800322e:	2120      	movs	r1, #32
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	4099      	lsls	r1, r3
 8003236:	4221      	tst	r1, r4
 8003238:	d053      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	4840      	ldr	r0, [pc, #256]	@ (8003340 <HAL_DMA_IRQHandler+0x25c>)
 800323e:	4c41      	ldr	r4, [pc, #260]	@ (8003344 <HAL_DMA_IRQHandler+0x260>)
 8003240:	42a2      	cmp	r2, r4
 8003242:	bf18      	it	ne
 8003244:	4282      	cmpne	r2, r0
 8003246:	f104 0418 	add.w	r4, r4, #24
 800324a:	bf0c      	ite	eq
 800324c:	2001      	moveq	r0, #1
 800324e:	2000      	movne	r0, #0
 8003250:	42a2      	cmp	r2, r4
 8003252:	bf08      	it	eq
 8003254:	f040 0001 	orreq.w	r0, r0, #1
 8003258:	3418      	adds	r4, #24
 800325a:	42a2      	cmp	r2, r4
 800325c:	bf08      	it	eq
 800325e:	f040 0001 	orreq.w	r0, r0, #1
 8003262:	3418      	adds	r4, #24
 8003264:	42a2      	cmp	r2, r4
 8003266:	bf08      	it	eq
 8003268:	f040 0001 	orreq.w	r0, r0, #1
 800326c:	3418      	adds	r4, #24
 800326e:	42a2      	cmp	r2, r4
 8003270:	bf08      	it	eq
 8003272:	f040 0001 	orreq.w	r0, r0, #1
 8003276:	3418      	adds	r4, #24
 8003278:	42a2      	cmp	r2, r4
 800327a:	bf08      	it	eq
 800327c:	f040 0001 	orreq.w	r0, r0, #1
 8003280:	3418      	adds	r4, #24
 8003282:	42a2      	cmp	r2, r4
 8003284:	bf08      	it	eq
 8003286:	f040 0001 	orreq.w	r0, r0, #1
 800328a:	f504 7456 	add.w	r4, r4, #856	@ 0x358
 800328e:	42a2      	cmp	r2, r4
 8003290:	bf08      	it	eq
 8003292:	f040 0001 	orreq.w	r0, r0, #1
 8003296:	3418      	adds	r4, #24
 8003298:	42a2      	cmp	r2, r4
 800329a:	bf08      	it	eq
 800329c:	f040 0001 	orreq.w	r0, r0, #1
 80032a0:	3418      	adds	r4, #24
 80032a2:	42a2      	cmp	r2, r4
 80032a4:	bf08      	it	eq
 80032a6:	f040 0001 	orreq.w	r0, r0, #1
 80032aa:	3418      	adds	r4, #24
 80032ac:	42a2      	cmp	r2, r4
 80032ae:	bf08      	it	eq
 80032b0:	f040 0001 	orreq.w	r0, r0, #1
 80032b4:	3418      	adds	r4, #24
 80032b6:	42a2      	cmp	r2, r4
 80032b8:	bf08      	it	eq
 80032ba:	f040 0001 	orreq.w	r0, r0, #1
 80032be:	3418      	adds	r4, #24
 80032c0:	42a2      	cmp	r2, r4
 80032c2:	bf08      	it	eq
 80032c4:	f040 0001 	orreq.w	r0, r0, #1
 80032c8:	3418      	adds	r4, #24
 80032ca:	42a2      	cmp	r2, r4
 80032cc:	bf08      	it	eq
 80032ce:	f040 0001 	orreq.w	r0, r0, #1
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d147      	bne.n	8003366 <HAL_DMA_IRQHandler+0x282>
 80032d6:	481c      	ldr	r0, [pc, #112]	@ (8003348 <HAL_DMA_IRQHandler+0x264>)
 80032d8:	4282      	cmp	r2, r0
 80032da:	d044      	beq.n	8003366 <HAL_DMA_IRQHandler+0x282>
 80032dc:	6810      	ldr	r0, [r2, #0]
 80032de:	0780      	lsls	r0, r0, #30
 80032e0:	d444      	bmi.n	800336c <HAL_DMA_IRQHandler+0x288>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d070      	beq.n	80033ca <HAL_DMA_IRQHandler+0x2e6>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	07dc      	lsls	r4, r3, #31
 80032ec:	d51e      	bpl.n	800332c <HAL_DMA_IRQHandler+0x248>
        __HAL_DMA_DISABLE(hdma);
 80032ee:	683a      	ldr	r2, [r7, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80032f0:	2104      	movs	r1, #4
 80032f2:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 80032f6:	4915      	ldr	r1, [pc, #84]	@ (800334c <HAL_DMA_IRQHandler+0x268>)
        __HAL_DMA_DISABLE(hdma);
 80032f8:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032fa:	fba1 6106 	umull	r6, r1, r1, r6
        __HAL_DMA_DISABLE(hdma);
 80032fe:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8003302:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e002      	b.n	800330e <HAL_DMA_IRQHandler+0x22a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003308:	6813      	ldr	r3, [r2, #0]
 800330a:	07d8      	lsls	r0, r3, #31
 800330c:	d504      	bpl.n	8003318 <HAL_DMA_IRQHandler+0x234>
          if (++count > timeout)
 800330e:	9b01      	ldr	r3, [sp, #4]
 8003310:	3301      	adds	r3, #1
 8003312:	428b      	cmp	r3, r1
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	d9f7      	bls.n	8003308 <HAL_DMA_IRQHandler+0x224>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003318:	6813      	ldr	r3, [r2, #0]
 800331a:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800331c:	bf4c      	ite	mi
 800331e:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8003320:	2301      	movpl	r3, #1
 8003322:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003326:	2300      	movs	r3, #0
 8003328:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 800332c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d04b      	beq.n	80033ca <HAL_DMA_IRQHandler+0x2e6>
          hdma->XferCpltCallback(hdma);
 8003332:	4638      	mov	r0, r7
}
 8003334:	b003      	add	sp, #12
 8003336:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 800333a:	4718      	bx	r3
 800333c:	24000004 	.word	0x24000004
 8003340:	40020010 	.word	0x40020010
 8003344:	40020028 	.word	0x40020028
 8003348:	400204b8 	.word	0x400204b8
 800334c:	1b4e81b5 	.word	0x1b4e81b5
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003350:	0308      	lsls	r0, r1, #12
 8003352:	f57f af65 	bpl.w	8003220 <HAL_DMA_IRQHandler+0x13c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003356:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003358:	2900      	cmp	r1, #0
 800335a:	f47f af65 	bne.w	8003228 <HAL_DMA_IRQHandler+0x144>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800335e:	2120      	movs	r1, #32
 8003360:	4099      	lsls	r1, r3
 8003362:	420c      	tst	r4, r1
 8003364:	d0bd      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003366:	6810      	ldr	r0, [r2, #0]
 8003368:	06c4      	lsls	r4, r0, #27
 800336a:	d5ba      	bpl.n	80032e2 <HAL_DMA_IRQHandler+0x1fe>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800336c:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800336e:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8003372:	2904      	cmp	r1, #4
 8003374:	d00e      	beq.n	8003394 <HAL_DMA_IRQHandler+0x2b0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800337c:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800337e:	d026      	beq.n	80033ce <HAL_DMA_IRQHandler+0x2ea>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003380:	031d      	lsls	r5, r3, #12
 8003382:	d531      	bpl.n	80033e8 <HAL_DMA_IRQHandler+0x304>
          if(hdma->XferCpltCallback != NULL)
 8003384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0ab      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x1fe>
            hdma->XferCpltCallback(hdma);
 800338a:	4638      	mov	r0, r7
 800338c:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800338e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003390:	b1db      	cbz	r3, 80033ca <HAL_DMA_IRQHandler+0x2e6>
 8003392:	e7a9      	b.n	80032e8 <HAL_DMA_IRQHandler+0x204>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003394:	6811      	ldr	r1, [r2, #0]
 8003396:	f021 0116 	bic.w	r1, r1, #22
 800339a:	6011      	str	r1, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800339c:	6951      	ldr	r1, [r2, #20]
 800339e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80033a2:	6151      	str	r1, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033a6:	b319      	cbz	r1, 80033f0 <HAL_DMA_IRQHandler+0x30c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033a8:	6811      	ldr	r1, [r2, #0]
 80033aa:	f021 0108 	bic.w	r1, r1, #8
 80033ae:	6011      	str	r1, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033b0:	223f      	movs	r2, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80033b2:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
          __HAL_UNLOCK(hdma);
 80033b8:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033ba:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 80033bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 80033be:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80033c2:	f887 2034 	strb.w	r2, [r7, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1b3      	bne.n	8003332 <HAL_DMA_IRQHandler+0x24e>
}
 80033ca:	b003      	add	sp, #12
 80033cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033ce:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 80033d2:	d1d7      	bne.n	8003384 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80033d4:	6811      	ldr	r1, [r2, #0]
 80033d6:	f021 0110 	bic.w	r1, r1, #16
 80033da:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80033dc:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 80033de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80033e2:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 80033e6:	e7cd      	b.n	8003384 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1CpltCallback != NULL)
 80033e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1cd      	bne.n	800338a <HAL_DMA_IRQHandler+0x2a6>
 80033ee:	e778      	b.n	80032e2 <HAL_DMA_IRQHandler+0x1fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033f0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80033f2:	2900      	cmp	r1, #0
 80033f4:	d1d8      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x2c4>
 80033f6:	e7db      	b.n	80033b0 <HAL_DMA_IRQHandler+0x2cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80033f8:	4b40      	ldr	r3, [pc, #256]	@ (80034fc <HAL_DMA_IRQHandler+0x418>)
 80033fa:	4841      	ldr	r0, [pc, #260]	@ (8003500 <HAL_DMA_IRQHandler+0x41c>)
 80033fc:	4282      	cmp	r2, r0
 80033fe:	bf18      	it	ne
 8003400:	429a      	cmpne	r2, r3
 8003402:	f100 0014 	add.w	r0, r0, #20
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	4282      	cmp	r2, r0
 800340e:	bf08      	it	eq
 8003410:	f043 0301 	orreq.w	r3, r3, #1
 8003414:	3014      	adds	r0, #20
 8003416:	4282      	cmp	r2, r0
 8003418:	bf08      	it	eq
 800341a:	f043 0301 	orreq.w	r3, r3, #1
 800341e:	3014      	adds	r0, #20
 8003420:	4282      	cmp	r2, r0
 8003422:	bf08      	it	eq
 8003424:	f043 0301 	orreq.w	r3, r3, #1
 8003428:	3014      	adds	r0, #20
 800342a:	4282      	cmp	r2, r0
 800342c:	bf08      	it	eq
 800342e:	f043 0301 	orreq.w	r3, r3, #1
 8003432:	3014      	adds	r0, #20
 8003434:	4282      	cmp	r2, r0
 8003436:	bf08      	it	eq
 8003438:	f043 0301 	orreq.w	r3, r3, #1
 800343c:	b913      	cbnz	r3, 8003444 <HAL_DMA_IRQHandler+0x360>
 800343e:	4b31      	ldr	r3, [pc, #196]	@ (8003504 <HAL_DMA_IRQHandler+0x420>)
 8003440:	429a      	cmp	r2, r3
 8003442:	d1c2      	bne.n	80033ca <HAL_DMA_IRQHandler+0x2e6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003444:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003446:	2404      	movs	r4, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003448:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800344a:	f000 001f 	and.w	r0, r0, #31
 800344e:	4084      	lsls	r4, r0
 8003450:	420c      	tst	r4, r1
 8003452:	d00b      	beq.n	800346c <HAL_DMA_IRQHandler+0x388>
 8003454:	075e      	lsls	r6, r3, #29
 8003456:	d509      	bpl.n	800346c <HAL_DMA_IRQHandler+0x388>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003458:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800345a:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800345c:	d532      	bpl.n	80034c4 <HAL_DMA_IRQHandler+0x3e0>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800345e:	03da      	lsls	r2, r3, #15
 8003460:	d436      	bmi.n	80034d0 <HAL_DMA_IRQHandler+0x3ec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003464:	2b00      	cmp	r3, #0
 8003466:	f47f af64 	bne.w	8003332 <HAL_DMA_IRQHandler+0x24e>
 800346a:	e7ae      	b.n	80033ca <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800346c:	2402      	movs	r4, #2
 800346e:	4084      	lsls	r4, r0
 8003470:	420c      	tst	r4, r1
 8003472:	d00b      	beq.n	800348c <HAL_DMA_IRQHandler+0x3a8>
 8003474:	079e      	lsls	r6, r3, #30
 8003476:	d509      	bpl.n	800348c <HAL_DMA_IRQHandler+0x3a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003478:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800347a:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800347c:	d52d      	bpl.n	80034da <HAL_DMA_IRQHandler+0x3f6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800347e:	03da      	lsls	r2, r3, #15
 8003480:	d437      	bmi.n	80034f2 <HAL_DMA_IRQHandler+0x40e>
          if(hdma->XferM1CpltCallback != NULL)
 8003482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003484:	2b00      	cmp	r3, #0
 8003486:	f47f af54 	bne.w	8003332 <HAL_DMA_IRQHandler+0x24e>
 800348a:	e79e      	b.n	80033ca <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800348c:	2408      	movs	r4, #8
 800348e:	4084      	lsls	r4, r0
 8003490:	420c      	tst	r4, r1
 8003492:	d09a      	beq.n	80033ca <HAL_DMA_IRQHandler+0x2e6>
 8003494:	071b      	lsls	r3, r3, #28
 8003496:	d598      	bpl.n	80033ca <HAL_DMA_IRQHandler+0x2e6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003498:	6813      	ldr	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 800349a:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800349c:	f023 030e 	bic.w	r3, r3, #14
 80034a0:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034a2:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 80034a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80034a6:	fa03 f000 	lsl.w	r0, r3, r0
 80034aa:	6068      	str	r0, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034ac:	657b      	str	r3, [r7, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 80034ae:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80034b2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	d087      	beq.n	80033ca <HAL_DMA_IRQHandler+0x2e6>
        hdma->XferErrorCallback(hdma);
 80034ba:	4638      	mov	r0, r7
}
 80034bc:	b003      	add	sp, #12
 80034be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 80034c2:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034c4:	069b      	lsls	r3, r3, #26
 80034c6:	d403      	bmi.n	80034d0 <HAL_DMA_IRQHandler+0x3ec>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034c8:	6813      	ldr	r3, [r2, #0]
 80034ca:	f023 0304 	bic.w	r3, r3, #4
 80034ce:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80034d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f47f af2d 	bne.w	8003332 <HAL_DMA_IRQHandler+0x24e>
 80034d8:	e777      	b.n	80033ca <HAL_DMA_IRQHandler+0x2e6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034da:	f013 0320 	ands.w	r3, r3, #32
 80034de:	d108      	bne.n	80034f2 <HAL_DMA_IRQHandler+0x40e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034e0:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80034e2:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034e4:	f021 010a 	bic.w	r1, r1, #10
 80034e8:	6011      	str	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80034ea:	f887 0035 	strb.w	r0, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80034ee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80034f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f47f af1c 	bne.w	8003332 <HAL_DMA_IRQHandler+0x24e>
 80034fa:	e766      	b.n	80033ca <HAL_DMA_IRQHandler+0x2e6>
 80034fc:	58025408 	.word	0x58025408
 8003500:	5802541c 	.word	0x5802541c
 8003504:	58025494 	.word	0x58025494

08003508 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003508:	680b      	ldr	r3, [r1, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 81dc 	beq.w	80038c8 <HAL_GPIO_Init+0x3c0>
 8003510:	4ab4      	ldr	r2, [pc, #720]	@ (80037e4 <HAL_GPIO_Init+0x2dc>)
 8003512:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 8003514:	f04f 0200 	mov.w	r2, #0
{
 8003518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800351c:	f04f 0b01 	mov.w	fp, #1
{
 8003520:	b085      	sub	sp, #20
 8003522:	f000 8105 	beq.w	8003730 <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003526:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800352a:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800352c:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 8003530:	9b00      	ldr	r3, [sp, #0]
 8003532:	ea1c 0a03 	ands.w	sl, ip, r3
 8003536:	f000 814b 	beq.w	80037d0 <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800353a:	684d      	ldr	r5, [r1, #4]
 800353c:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800353e:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003540:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003544:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003548:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800354c:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800354e:	f1b8 0f01 	cmp.w	r8, #1
 8003552:	f240 815d 	bls.w	8003810 <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003556:	2f03      	cmp	r7, #3
 8003558:	f040 81cf 	bne.w	80038fa <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800355c:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8003560:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003562:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003566:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800356a:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 800356e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003570:	f000 812e 	beq.w	80037d0 <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003574:	4e9c      	ldr	r6, [pc, #624]	@ (80037e8 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003576:	f002 0703 	and.w	r7, r2, #3
 800357a:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357c:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003580:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003582:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003586:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800358a:	4b98      	ldr	r3, [pc, #608]	@ (80037ec <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358c:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8003590:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 8003594:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003598:	4298      	cmp	r0, r3
 800359a:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359e:	f004 0402 	and.w	r4, r4, #2
 80035a2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80035a6:	9403      	str	r4, [sp, #12]
 80035a8:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80035aa:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035ac:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035b0:	f000 8178 	beq.w	80038a4 <HAL_GPIO_Init+0x39c>
 80035b4:	4b8e      	ldr	r3, [pc, #568]	@ (80037f0 <HAL_GPIO_Init+0x2e8>)
 80035b6:	4298      	cmp	r0, r3
 80035b8:	f000 80de 	beq.w	8003778 <HAL_GPIO_Init+0x270>
 80035bc:	f8df c234 	ldr.w	ip, [pc, #564]	@ 80037f4 <HAL_GPIO_Init+0x2ec>
 80035c0:	4560      	cmp	r0, ip
 80035c2:	f000 817b 	beq.w	80038bc <HAL_GPIO_Init+0x3b4>
 80035c6:	f8df c230 	ldr.w	ip, [pc, #560]	@ 80037f8 <HAL_GPIO_Init+0x2f0>
 80035ca:	4560      	cmp	r0, ip
 80035cc:	f000 817d 	beq.w	80038ca <HAL_GPIO_Init+0x3c2>
 80035d0:	f8df c228 	ldr.w	ip, [pc, #552]	@ 80037fc <HAL_GPIO_Init+0x2f4>
 80035d4:	4560      	cmp	r0, ip
 80035d6:	f000 816b 	beq.w	80038b0 <HAL_GPIO_Init+0x3a8>
 80035da:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8003800 <HAL_GPIO_Init+0x2f8>
 80035de:	4560      	cmp	r0, ip
 80035e0:	f000 8179 	beq.w	80038d6 <HAL_GPIO_Init+0x3ce>
 80035e4:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 8003804 <HAL_GPIO_Init+0x2fc>
 80035e8:	4560      	cmp	r0, ip
 80035ea:	f000 817a 	beq.w	80038e2 <HAL_GPIO_Init+0x3da>
 80035ee:	f8df c218 	ldr.w	ip, [pc, #536]	@ 8003808 <HAL_GPIO_Init+0x300>
 80035f2:	4560      	cmp	r0, ip
 80035f4:	f000 817b 	beq.w	80038ee <HAL_GPIO_Init+0x3e6>
 80035f8:	f8df c210 	ldr.w	ip, [pc, #528]	@ 800380c <HAL_GPIO_Init+0x304>
 80035fc:	4560      	cmp	r0, ip
 80035fe:	bf0c      	ite	eq
 8003600:	f04f 0c09 	moveq.w	ip, #9
 8003604:	f04f 0c0a 	movne.w	ip, #10
 8003608:	fa0c f707 	lsl.w	r7, ip, r7
 800360c:	433c      	orrs	r4, r7
 800360e:	e0b8      	b.n	8003782 <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 8003610:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003614:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003616:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003618:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 800361c:	fa06 f807 	lsl.w	r8, r6, r7
 8003620:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003624:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003628:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 800362c:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003630:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003634:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003638:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 800363c:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 8003640:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003644:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003646:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800364a:	fa06 fe07 	lsl.w	lr, r6, r7
 800364e:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 8003652:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003656:	d117      	bne.n	8003688 <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003658:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800365c:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 800365e:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003662:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003666:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800366a:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 800366e:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003672:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003674:	260f      	movs	r6, #15
 8003676:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800367a:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800367c:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003680:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003684:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003688:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 800368a:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800368c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003690:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003694:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8003698:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800369a:	d045      	beq.n	8003728 <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369c:	4f52      	ldr	r7, [pc, #328]	@ (80037e8 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800369e:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a0:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 80036a4:	f044 0402 	orr.w	r4, r4, #2
 80036a8:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 80036ac:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 80036b0:	f022 0703 	bic.w	r7, r2, #3
 80036b4:	f004 0402 	and.w	r4, r4, #2
 80036b8:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 80036bc:	9403      	str	r4, [sp, #12]
 80036be:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80036c2:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036c4:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80036c8:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036cc:	00a4      	lsls	r4, r4, #2
 80036ce:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036d2:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036d4:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d8:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 80036da:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 80036de:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 80036e2:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036e4:	f100 80d2 	bmi.w	800388c <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 80036e8:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80036ea:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 80036ee:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 80036f0:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036f2:	02ae      	lsls	r6, r5, #10
 80036f4:	f100 80d3 	bmi.w	800389e <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 80036f8:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80036fa:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 80036fe:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003700:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003704:	03ae      	lsls	r6, r5, #14
 8003706:	f100 80c7 	bmi.w	8003898 <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 800370a:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800370c:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003710:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003712:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003716:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800371a:	f100 80ba 	bmi.w	8003892 <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 800371e:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003720:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8003724:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 8003728:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800372a:	fa33 f402 	lsrs.w	r4, r3, r2
 800372e:	d055      	beq.n	80037dc <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003730:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 8003734:	ea13 0c0e 	ands.w	ip, r3, lr
 8003738:	d0f6      	beq.n	8003728 <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800373a:	684d      	ldr	r5, [r1, #4]
 800373c:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800373e:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003740:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003744:	fa06 f807 	lsl.w	r8, r6, r7
 8003748:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800374c:	f104 38ff 	add.w	r8, r4, #4294967295
 8003750:	f1b8 0f01 	cmp.w	r8, #1
 8003754:	f67f af5c 	bls.w	8003610 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003758:	2c03      	cmp	r4, #3
 800375a:	d095      	beq.n	8003688 <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 800375c:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 80037e4 <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003760:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 8003762:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003766:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800376a:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800376e:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 8003772:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003776:	e787      	b.n	8003688 <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003778:	f04f 0c02 	mov.w	ip, #2
 800377c:	fa0c f707 	lsl.w	r7, ip, r7
 8003780:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003782:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003784:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8003786:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 800378a:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 800378e:	bf4c      	ite	mi
 8003790:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 8003794:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003796:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 8003798:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 800379c:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 80037a0:	bf54      	ite	pl
 80037a2:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80037a4:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037a8:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 80037aa:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80037ae:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 80037b2:	bf54      	ite	pl
 80037b4:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80037b6:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037ba:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80037bc:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80037c0:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 80037c4:	bf54      	ite	pl
 80037c6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80037c8:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 80037cc:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 80037d0:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80037d2:	9b00      	ldr	r3, [sp, #0]
 80037d4:	fa33 f402 	lsrs.w	r4, r3, r2
 80037d8:	f47f aea8 	bne.w	800352c <HAL_GPIO_Init+0x24>
  }
}
 80037dc:	b005      	add	sp, #20
 80037de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e2:	bf00      	nop
 80037e4:	58020000 	.word	0x58020000
 80037e8:	58024400 	.word	0x58024400
 80037ec:	58020400 	.word	0x58020400
 80037f0:	58020800 	.word	0x58020800
 80037f4:	58020c00 	.word	0x58020c00
 80037f8:	58021000 	.word	0x58021000
 80037fc:	58021400 	.word	0x58021400
 8003800:	58021800 	.word	0x58021800
 8003804:	58021c00 	.word	0x58021c00
 8003808:	58022000 	.word	0x58022000
 800380c:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 8003810:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003814:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003816:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003818:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800381c:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003820:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003822:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003826:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800382a:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 800382e:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003832:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003836:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800383a:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 800383e:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003842:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 8003846:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800384a:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800384e:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003852:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003856:	f47f ae81 	bne.w	800355c <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800385a:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800385e:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003860:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003864:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003868:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800386c:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8003870:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003874:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003876:	230f      	movs	r3, #15
 8003878:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800387c:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800387e:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003882:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003886:	f8c8 c020 	str.w	ip, [r8, #32]
 800388a:	e667      	b.n	800355c <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 800388c:	ea44 040c 	orr.w	r4, r4, ip
 8003890:	e72b      	b.n	80036ea <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 8003892:	ea44 040c 	orr.w	r4, r4, ip
 8003896:	e743      	b.n	8003720 <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 8003898:	ea4c 0404 	orr.w	r4, ip, r4
 800389c:	e736      	b.n	800370c <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 800389e:	ea44 040c 	orr.w	r4, r4, ip
 80038a2:	e72a      	b.n	80036fa <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038a4:	f04f 0c01 	mov.w	ip, #1
 80038a8:	fa0c f707 	lsl.w	r7, ip, r7
 80038ac:	433c      	orrs	r4, r7
 80038ae:	e768      	b.n	8003782 <HAL_GPIO_Init+0x27a>
 80038b0:	f04f 0c05 	mov.w	ip, #5
 80038b4:	fa0c f707 	lsl.w	r7, ip, r7
 80038b8:	433c      	orrs	r4, r7
 80038ba:	e762      	b.n	8003782 <HAL_GPIO_Init+0x27a>
 80038bc:	f04f 0c03 	mov.w	ip, #3
 80038c0:	fa0c f707 	lsl.w	r7, ip, r7
 80038c4:	433c      	orrs	r4, r7
 80038c6:	e75c      	b.n	8003782 <HAL_GPIO_Init+0x27a>
 80038c8:	4770      	bx	lr
 80038ca:	f04f 0c04 	mov.w	ip, #4
 80038ce:	fa0c f707 	lsl.w	r7, ip, r7
 80038d2:	433c      	orrs	r4, r7
 80038d4:	e755      	b.n	8003782 <HAL_GPIO_Init+0x27a>
 80038d6:	f04f 0c06 	mov.w	ip, #6
 80038da:	fa0c f707 	lsl.w	r7, ip, r7
 80038de:	433c      	orrs	r4, r7
 80038e0:	e74f      	b.n	8003782 <HAL_GPIO_Init+0x27a>
 80038e2:	f04f 0c07 	mov.w	ip, #7
 80038e6:	fa0c f707 	lsl.w	r7, ip, r7
 80038ea:	433c      	orrs	r4, r7
 80038ec:	e749      	b.n	8003782 <HAL_GPIO_Init+0x27a>
 80038ee:	f04f 0c08 	mov.w	ip, #8
 80038f2:	fa0c f707 	lsl.w	r7, ip, r7
 80038f6:	433c      	orrs	r4, r7
 80038f8:	e743      	b.n	8003782 <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 80038fa:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038fe:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003900:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003904:	fa03 fc04 	lsl.w	ip, r3, r4
 8003908:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800390c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003910:	e624      	b.n	800355c <HAL_GPIO_Init+0x54>
 8003912:	bf00      	nop

08003914 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003914:	b902      	cbnz	r2, 8003918 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003916:	0409      	lsls	r1, r1, #16
 8003918:	6181      	str	r1, [r0, #24]
  }
}
 800391a:	4770      	bx	lr

0800391c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800391c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800391e:	4c10      	ldr	r4, [pc, #64]	@ (8003960 <HAL_PWREx_ConfigSupply+0x44>)
 8003920:	68e3      	ldr	r3, [r4, #12]
 8003922:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003926:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003928:	d105      	bne.n	8003936 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	1a18      	subs	r0, r3, r0
 8003930:	bf18      	it	ne
 8003932:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003934:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003936:	f023 0307 	bic.w	r3, r3, #7
 800393a:	4303      	orrs	r3, r0
 800393c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 800393e:	f7fd fb77 	bl	8001030 <HAL_GetTick>
 8003942:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003944:	e005      	b.n	8003952 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003946:	f7fd fb73 	bl	8001030 <HAL_GetTick>
 800394a:	1b40      	subs	r0, r0, r5
 800394c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003950:	d804      	bhi.n	800395c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003952:	6863      	ldr	r3, [r4, #4]
 8003954:	049b      	lsls	r3, r3, #18
 8003956:	d5f6      	bpl.n	8003946 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8003958:	2000      	movs	r0, #0
}
 800395a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800395c:	2001      	movs	r0, #1
}
 800395e:	bd38      	pop	{r3, r4, r5, pc}
 8003960:	58024800 	.word	0x58024800

08003964 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003964:	4b33      	ldr	r3, [pc, #204]	@ (8003a34 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8003966:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003968:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800396a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800396c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800396e:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003972:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003974:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8003978:	d036      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800397a:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800397e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003982:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003986:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800398a:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 800398e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003994:	ee06 2a90 	vmov	s13, r2
 8003998:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800399c:	d002      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 800399e:	2902      	cmp	r1, #2
 80039a0:	d042      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 80039a2:	b319      	cbz	r1, 80039ec <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a4:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8003a38 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80039a8:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80039ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039be:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80039c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039c6:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80039ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003a34 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80039d2:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80039d4:	ee07 3a10 	vmov	s14, r3
 80039d8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80039dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80039e0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80039e4:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80039e8:	bc30      	pop	{r4, r5}
 80039ea:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	0692      	lsls	r2, r2, #26
 80039f0:	d51d      	bpl.n	8003a2e <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039f2:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039f4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039f8:	4a10      	ldr	r2, [pc, #64]	@ (8003a3c <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039fc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a04:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a06:	ee06 3a10 	vmov	s12, r3
 8003a0a:	ee05 2a90 	vmov	s11, r2
 8003a0e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003a12:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003a16:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003a1a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8003a1e:	ee36 7a26 	vadd.f32	s14, s12, s13
 8003a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a26:	e7d0      	b.n	80039ca <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a28:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003a40 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8003a2c:	e7bc      	b.n	80039a8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a2e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003a44 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8003a32:	e7b9      	b.n	80039a8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003a34:	58024400 	.word	0x58024400
 8003a38:	4a742400 	.word	0x4a742400
 8003a3c:	03d09000 	.word	0x03d09000
 8003a40:	4bbebc20 	.word	0x4bbebc20
 8003a44:	4c742400 	.word	0x4c742400

08003a48 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	f000 82e7 	beq.w	800401c <HAL_RCC_OscConfig+0x5d4>
{
 8003a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a50:	6803      	ldr	r3, [r0, #0]
 8003a52:	4604      	mov	r4, r0
 8003a54:	07d9      	lsls	r1, r3, #31
 8003a56:	d52e      	bpl.n	8003ab6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a58:	4997      	ldr	r1, [pc, #604]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a5c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a62:	2a10      	cmp	r2, #16
 8003a64:	f000 80ee 	beq.w	8003c44 <HAL_RCC_OscConfig+0x1fc>
 8003a68:	2a18      	cmp	r2, #24
 8003a6a:	f000 80e6 	beq.w	8003c3a <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a74:	f000 8111 	beq.w	8003c9a <HAL_RCC_OscConfig+0x252>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8167 	beq.w	8003d4c <HAL_RCC_OscConfig+0x304>
 8003a7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a82:	4b8d      	ldr	r3, [pc, #564]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f000 8288 	beq.w	8003f9a <HAL_RCC_OscConfig+0x552>
 8003a8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a98:	f7fd faca 	bl	8001030 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a9c:	4e86      	ldr	r6, [pc, #536]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003a9e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aa0:	e005      	b.n	8003aae <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa2:	f7fd fac5 	bl	8001030 <HAL_GetTick>
 8003aa6:	1b40      	subs	r0, r0, r5
 8003aa8:	2864      	cmp	r0, #100	@ 0x64
 8003aaa:	f200 814d 	bhi.w	8003d48 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aae:	6833      	ldr	r3, [r6, #0]
 8003ab0:	039b      	lsls	r3, r3, #14
 8003ab2:	d5f6      	bpl.n	8003aa2 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	079d      	lsls	r5, r3, #30
 8003ab8:	d470      	bmi.n	8003b9c <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003aba:	06d9      	lsls	r1, r3, #27
 8003abc:	d533      	bpl.n	8003b26 <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003abe:	4a7e      	ldr	r2, [pc, #504]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
 8003ac0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ac2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	f000 80cb 	beq.w	8003c64 <HAL_RCC_OscConfig+0x21c>
 8003ace:	2b18      	cmp	r3, #24
 8003ad0:	f000 80c3 	beq.w	8003c5a <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ad4:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8003ad6:	4d78      	ldr	r5, [pc, #480]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 816f 	beq.w	8003dbc <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 8003ade:	682b      	ldr	r3, [r5, #0]
 8003ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ae4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ae6:	f7fd faa3 	bl	8001030 <HAL_GetTick>
 8003aea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003aec:	e005      	b.n	8003afa <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003aee:	f7fd fa9f 	bl	8001030 <HAL_GetTick>
 8003af2:	1b80      	subs	r0, r0, r6
 8003af4:	2802      	cmp	r0, #2
 8003af6:	f200 8127 	bhi.w	8003d48 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003afa:	682b      	ldr	r3, [r5, #0]
 8003afc:	05db      	lsls	r3, r3, #23
 8003afe:	d5f6      	bpl.n	8003aee <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b00:	f7fd fa9c 	bl	800103c <HAL_GetREVID>
 8003b04:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003b08:	4298      	cmp	r0, r3
 8003b0a:	f200 8267 	bhi.w	8003fdc <HAL_RCC_OscConfig+0x594>
 8003b0e:	6a22      	ldr	r2, [r4, #32]
 8003b10:	686b      	ldr	r3, [r5, #4]
 8003b12:	2a20      	cmp	r2, #32
 8003b14:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b18:	bf0c      	ite	eq
 8003b1a:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8003b1e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003b22:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	071d      	lsls	r5, r3, #28
 8003b28:	d516      	bpl.n	8003b58 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b2a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003b2c:	4d62      	ldr	r5, [pc, #392]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 8122 	beq.w	8003d78 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 8003b34:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003b3c:	f7fd fa78 	bl	8001030 <HAL_GetTick>
 8003b40:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b42:	e005      	b.n	8003b50 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fd fa74 	bl	8001030 <HAL_GetTick>
 8003b48:	1b80      	subs	r0, r0, r6
 8003b4a:	2802      	cmp	r0, #2
 8003b4c:	f200 80fc 	bhi.w	8003d48 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b50:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003b52:	0798      	lsls	r0, r3, #30
 8003b54:	d5f6      	bpl.n	8003b44 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	069a      	lsls	r2, r3, #26
 8003b5a:	d516      	bpl.n	8003b8a <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b5c:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8003b5e:	4d56      	ldr	r5, [pc, #344]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 811a 	beq.w	8003d9a <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 8003b66:	682b      	ldr	r3, [r5, #0]
 8003b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b6c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003b6e:	f7fd fa5f 	bl	8001030 <HAL_GetTick>
 8003b72:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b74:	e005      	b.n	8003b82 <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b76:	f7fd fa5b 	bl	8001030 <HAL_GetTick>
 8003b7a:	1b80      	subs	r0, r0, r6
 8003b7c:	2802      	cmp	r0, #2
 8003b7e:	f200 80e3 	bhi.w	8003d48 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b82:	682b      	ldr	r3, [r5, #0]
 8003b84:	049f      	lsls	r7, r3, #18
 8003b86:	d5f6      	bpl.n	8003b76 <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	0759      	lsls	r1, r3, #29
 8003b8c:	f100 808b 	bmi.w	8003ca6 <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 80bf 	bne.w	8003d16 <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8003b98:	2000      	movs	r0, #0
}
 8003b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9c:	4a46      	ldr	r2, [pc, #280]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ba0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ba2:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8003ba6:	d12d      	bne.n	8003c04 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba8:	4b43      	ldr	r3, [pc, #268]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003baa:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	0759      	lsls	r1, r3, #29
 8003bb0:	d501      	bpl.n	8003bb6 <HAL_RCC_OscConfig+0x16e>
 8003bb2:	2a00      	cmp	r2, #0
 8003bb4:	d04f      	beq.n	8003c56 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bb6:	4d40      	ldr	r5, [pc, #256]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	f023 0319 	bic.w	r3, r3, #25
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003bc2:	f7fd fa35 	bl	8001030 <HAL_GetTick>
 8003bc6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bca:	f7fd fa31 	bl	8001030 <HAL_GetTick>
 8003bce:	1b80      	subs	r0, r0, r6
 8003bd0:	2802      	cmp	r0, #2
 8003bd2:	f200 80b9 	bhi.w	8003d48 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bd6:	682b      	ldr	r3, [r5, #0]
 8003bd8:	075b      	lsls	r3, r3, #29
 8003bda:	d5f6      	bpl.n	8003bca <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bdc:	f7fd fa2e 	bl	800103c <HAL_GetREVID>
 8003be0:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003be4:	4298      	cmp	r0, r3
 8003be6:	f200 8110 	bhi.w	8003e0a <HAL_RCC_OscConfig+0x3c2>
 8003bea:	6922      	ldr	r2, [r4, #16]
 8003bec:	686b      	ldr	r3, [r5, #4]
 8003bee:	2a40      	cmp	r2, #64	@ 0x40
 8003bf0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003bf4:	bf0c      	ite	eq
 8003bf6:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8003bfa:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003bfe:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	e75a      	b.n	8003aba <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c04:	2b18      	cmp	r3, #24
 8003c06:	f000 80fc 	beq.w	8003e02 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c0a:	4d2b      	ldr	r5, [pc, #172]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c0c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c0e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c10:	2a00      	cmp	r2, #0
 8003c12:	f000 80e5 	beq.w	8003de0 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c16:	f023 0319 	bic.w	r3, r3, #25
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c1e:	f7fd fa07 	bl	8001030 <HAL_GetTick>
 8003c22:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c24:	e005      	b.n	8003c32 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c26:	f7fd fa03 	bl	8001030 <HAL_GetTick>
 8003c2a:	1b80      	subs	r0, r0, r6
 8003c2c:	2802      	cmp	r0, #2
 8003c2e:	f200 808b 	bhi.w	8003d48 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c32:	682b      	ldr	r3, [r5, #0]
 8003c34:	075f      	lsls	r7, r3, #29
 8003c36:	d5f6      	bpl.n	8003c26 <HAL_RCC_OscConfig+0x1de>
 8003c38:	e7d0      	b.n	8003bdc <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c3a:	f001 0103 	and.w	r1, r1, #3
 8003c3e:	2902      	cmp	r1, #2
 8003c40:	f47f af15 	bne.w	8003a6e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	0392      	lsls	r2, r2, #14
 8003c4a:	f57f af34 	bpl.w	8003ab6 <HAL_RCC_OscConfig+0x6e>
 8003c4e:	6862      	ldr	r2, [r4, #4]
 8003c50:	2a00      	cmp	r2, #0
 8003c52:	f47f af30 	bne.w	8003ab6 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 8003c56:	2001      	movs	r0, #1
}
 8003c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c5a:	f002 0203 	and.w	r2, r2, #3
 8003c5e:	2a01      	cmp	r2, #1
 8003c60:	f47f af38 	bne.w	8003ad4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c64:	4b14      	ldr	r3, [pc, #80]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	05da      	lsls	r2, r3, #23
 8003c6a:	d502      	bpl.n	8003c72 <HAL_RCC_OscConfig+0x22a>
 8003c6c:	69e3      	ldr	r3, [r4, #28]
 8003c6e:	2b80      	cmp	r3, #128	@ 0x80
 8003c70:	d1f1      	bne.n	8003c56 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c72:	f7fd f9e3 	bl	800103c <HAL_GetREVID>
 8003c76:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003c7a:	4298      	cmp	r0, r3
 8003c7c:	f200 80ce 	bhi.w	8003e1c <HAL_RCC_OscConfig+0x3d4>
 8003c80:	6a22      	ldr	r2, [r4, #32]
 8003c82:	2a20      	cmp	r2, #32
 8003c84:	f000 81b9 	beq.w	8003ffa <HAL_RCC_OscConfig+0x5b2>
 8003c88:	490b      	ldr	r1, [pc, #44]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	684b      	ldr	r3, [r1, #4]
 8003c8c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c90:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003c94:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	e745      	b.n	8003b26 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9a:	4a07      	ldr	r2, [pc, #28]	@ (8003cb8 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	6813      	ldr	r3, [r2, #0]
 8003c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca4:	e6f8      	b.n	8003a98 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8003ca6:	4d05      	ldr	r5, [pc, #20]	@ (8003cbc <HAL_RCC_OscConfig+0x274>)
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cae:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003cb0:	f7fd f9be 	bl	8001030 <HAL_GetTick>
 8003cb4:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x282>
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc0:	f7fd f9b6 	bl	8001030 <HAL_GetTick>
 8003cc4:	1b80      	subs	r0, r0, r6
 8003cc6:	2864      	cmp	r0, #100	@ 0x64
 8003cc8:	d83e      	bhi.n	8003d48 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cca:	682b      	ldr	r3, [r5, #0]
 8003ccc:	05da      	lsls	r2, r3, #23
 8003cce:	d5f7      	bpl.n	8003cc0 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd0:	68a3      	ldr	r3, [r4, #8]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	f000 818b 	beq.w	8003fee <HAL_RCC_OscConfig+0x5a6>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8166 	beq.w	8003faa <HAL_RCC_OscConfig+0x562>
 8003cde:	2b05      	cmp	r3, #5
 8003ce0:	4b85      	ldr	r3, [pc, #532]	@ (8003ef8 <HAL_RCC_OscConfig+0x4b0>)
 8003ce2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ce4:	f000 8192 	beq.w	800400c <HAL_RCC_OscConfig+0x5c4>
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	671a      	str	r2, [r3, #112]	@ 0x70
 8003cee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cf0:	f022 0204 	bic.w	r2, r2, #4
 8003cf4:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003cf6:	f7fd f99b 	bl	8001030 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cfa:	4e7f      	ldr	r6, [pc, #508]	@ (8003ef8 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfc:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003d00:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d02:	e004      	b.n	8003d0e <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d04:	f7fd f994 	bl	8001030 <HAL_GetTick>
 8003d08:	1b40      	subs	r0, r0, r5
 8003d0a:	42b8      	cmp	r0, r7
 8003d0c:	d81c      	bhi.n	8003d48 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d0e:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003d10:	079b      	lsls	r3, r3, #30
 8003d12:	d5f7      	bpl.n	8003d04 <HAL_RCC_OscConfig+0x2bc>
 8003d14:	e73c      	b.n	8003b90 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d16:	4d78      	ldr	r5, [pc, #480]	@ (8003ef8 <HAL_RCC_OscConfig+0x4b0>)
 8003d18:	692a      	ldr	r2, [r5, #16]
 8003d1a:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8003d1e:	2a18      	cmp	r2, #24
 8003d20:	f000 80ee 	beq.w	8003f00 <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d24:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8003d26:	682b      	ldr	r3, [r5, #0]
 8003d28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d2c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d2e:	d07f      	beq.n	8003e30 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 8003d30:	f7fd f97e 	bl	8001030 <HAL_GetTick>
 8003d34:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d36:	682b      	ldr	r3, [r5, #0]
 8003d38:	019b      	lsls	r3, r3, #6
 8003d3a:	f57f af2d 	bpl.w	8003b98 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fd f977 	bl	8001030 <HAL_GetTick>
 8003d42:	1b00      	subs	r0, r0, r4
 8003d44:	2802      	cmp	r0, #2
 8003d46:	d9f6      	bls.n	8003d36 <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 8003d48:	2003      	movs	r0, #3
}
 8003d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4c:	4d6a      	ldr	r5, [pc, #424]	@ (8003ef8 <HAL_RCC_OscConfig+0x4b0>)
 8003d4e:	682b      	ldr	r3, [r5, #0]
 8003d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d54:	602b      	str	r3, [r5, #0]
 8003d56:	682b      	ldr	r3, [r5, #0]
 8003d58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003d5e:	f7fd f967 	bl	8001030 <HAL_GetTick>
 8003d62:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d64:	e004      	b.n	8003d70 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d66:	f7fd f963 	bl	8001030 <HAL_GetTick>
 8003d6a:	1b80      	subs	r0, r0, r6
 8003d6c:	2864      	cmp	r0, #100	@ 0x64
 8003d6e:	d8eb      	bhi.n	8003d48 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	039f      	lsls	r7, r3, #14
 8003d74:	d4f7      	bmi.n	8003d66 <HAL_RCC_OscConfig+0x31e>
 8003d76:	e69d      	b.n	8003ab4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8003d78:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003d80:	f7fd f956 	bl	8001030 <HAL_GetTick>
 8003d84:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d86:	e004      	b.n	8003d92 <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fd f952 	bl	8001030 <HAL_GetTick>
 8003d8c:	1b80      	subs	r0, r0, r6
 8003d8e:	2802      	cmp	r0, #2
 8003d90:	d8da      	bhi.n	8003d48 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d92:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003d94:	0799      	lsls	r1, r3, #30
 8003d96:	d4f7      	bmi.n	8003d88 <HAL_RCC_OscConfig+0x340>
 8003d98:	e6dd      	b.n	8003b56 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8003d9a:	682b      	ldr	r3, [r5, #0]
 8003d9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003da0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003da2:	f7fd f945 	bl	8001030 <HAL_GetTick>
 8003da6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003da8:	e004      	b.n	8003db4 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003daa:	f7fd f941 	bl	8001030 <HAL_GetTick>
 8003dae:	1b80      	subs	r0, r0, r6
 8003db0:	2802      	cmp	r0, #2
 8003db2:	d8c9      	bhi.n	8003d48 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	0498      	lsls	r0, r3, #18
 8003db8:	d4f7      	bmi.n	8003daa <HAL_RCC_OscConfig+0x362>
 8003dba:	e6e5      	b.n	8003b88 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003dc4:	f7fd f934 	bl	8001030 <HAL_GetTick>
 8003dc8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dca:	e004      	b.n	8003dd6 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dcc:	f7fd f930 	bl	8001030 <HAL_GetTick>
 8003dd0:	1b80      	subs	r0, r0, r6
 8003dd2:	2802      	cmp	r0, #2
 8003dd4:	d8b8      	bhi.n	8003d48 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dd6:	682b      	ldr	r3, [r5, #0]
 8003dd8:	05df      	lsls	r7, r3, #23
 8003dda:	d4f7      	bmi.n	8003dcc <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	e6a2      	b.n	8003b26 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003de6:	f7fd f923 	bl	8001030 <HAL_GetTick>
 8003dea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dec:	e004      	b.n	8003df8 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dee:	f7fd f91f 	bl	8001030 <HAL_GetTick>
 8003df2:	1b80      	subs	r0, r0, r6
 8003df4:	2802      	cmp	r0, #2
 8003df6:	d8a7      	bhi.n	8003d48 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	0758      	lsls	r0, r3, #29
 8003dfc:	d4f7      	bmi.n	8003dee <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	e65b      	b.n	8003aba <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e02:	0790      	lsls	r0, r2, #30
 8003e04:	f47f af01 	bne.w	8003c0a <HAL_RCC_OscConfig+0x1c2>
 8003e08:	e6ce      	b.n	8003ba8 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0a:	686b      	ldr	r3, [r5, #4]
 8003e0c:	6922      	ldr	r2, [r4, #16]
 8003e0e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003e12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003e16:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	e64e      	b.n	8003aba <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e1c:	4a36      	ldr	r2, [pc, #216]	@ (8003ef8 <HAL_RCC_OscConfig+0x4b0>)
 8003e1e:	6a21      	ldr	r1, [r4, #32]
 8003e20:	68d3      	ldr	r3, [r2, #12]
 8003e22:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003e26:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003e2a:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	e67a      	b.n	8003b26 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8003e30:	f7fd f8fe 	bl	8001030 <HAL_GetTick>
 8003e34:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e36:	e004      	b.n	8003e42 <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fd f8fa 	bl	8001030 <HAL_GetTick>
 8003e3c:	1b80      	subs	r0, r0, r6
 8003e3e:	2802      	cmp	r0, #2
 8003e40:	d882      	bhi.n	8003d48 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e42:	682b      	ldr	r3, [r5, #0]
 8003e44:	0199      	lsls	r1, r3, #6
 8003e46:	d4f7      	bmi.n	8003e38 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e48:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8003e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003efc <HAL_RCC_OscConfig+0x4b4>)
 8003e4c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003e4e:	400b      	ands	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003e54:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003e58:	62ab      	str	r3, [r5, #40]	@ 0x28
 8003e5a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003e5c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8003e60:	3901      	subs	r1, #1
 8003e62:	3b01      	subs	r3, #1
 8003e64:	3a01      	subs	r2, #1
 8003e66:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003e6a:	025b      	lsls	r3, r3, #9
 8003e6c:	0412      	lsls	r2, r2, #16
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003e74:	4313      	orrs	r3, r2
 8003e76:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	0612      	lsls	r2, r2, #24
 8003e7e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003e82:	4313      	orrs	r3, r2
 8003e84:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e86:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e8e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003e90:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003e92:	f36f 03cf 	bfc	r3, #3, #13
 8003e96:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e9a:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e9c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003e9e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003ea0:	f023 030c 	bic.w	r3, r3, #12
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ea8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003eaa:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003eac:	f023 0302 	bic.w	r3, r3, #2
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003eb4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eba:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ebc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003ebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ec2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ec4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003ec6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eca:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ecc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003edc:	f7fd f8a8 	bl	8001030 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ee0:	4d05      	ldr	r5, [pc, #20]	@ (8003ef8 <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 8003ee2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	019a      	lsls	r2, r3, #6
 8003ee8:	f53f ae56 	bmi.w	8003b98 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fd f8a0 	bl	8001030 <HAL_GetTick>
 8003ef0:	1b00      	subs	r0, r0, r4
 8003ef2:	2802      	cmp	r0, #2
 8003ef4:	d9f6      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x49c>
 8003ef6:	e727      	b.n	8003d48 <HAL_RCC_OscConfig+0x300>
 8003ef8:	58024400 	.word	0x58024400
 8003efc:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f00:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f02:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f04:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f06:	f43f aea6 	beq.w	8003c56 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003f10:	428b      	cmp	r3, r1
 8003f12:	f47f aea0 	bne.w	8003c56 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f16:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	f47f ae9a 	bne.w	8003c56 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003f24:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8003f28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	f47f ae93 	bne.w	8003c56 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f32:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8003f36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	f47f ae8c 	bne.w	8003c56 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003f40:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8003f44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	f47f ae85 	bne.w	8003c56 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003f4e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8003f52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f54:	4298      	cmp	r0, r3
 8003f56:	f47f ae7e 	bne.w	8003c56 <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f5a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f5c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f5e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f62:	429a      	cmp	r2, r3
 8003f64:	f43f ae18 	beq.w	8003b98 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f68:	4a2d      	ldr	r2, [pc, #180]	@ (8004020 <HAL_RCC_OscConfig+0x5d8>)
 8003f6a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8003f72:	f7fd f85d 	bl	8001030 <HAL_GetTick>
 8003f76:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f78:	f7fd f85a 	bl	8001030 <HAL_GetTick>
 8003f7c:	42a8      	cmp	r0, r5
 8003f7e:	d0fb      	beq.n	8003f78 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f80:	4a27      	ldr	r2, [pc, #156]	@ (8004020 <HAL_RCC_OscConfig+0x5d8>)
 8003f82:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003f84:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003f86:	f36f 03cf 	bfc	r3, #3, #13
 8003f8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003f8e:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f90:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f98:	e5fe      	b.n	8003b98 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003fa6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa8:	e576      	b.n	8003a98 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003faa:	4d1d      	ldr	r5, [pc, #116]	@ (8004020 <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fac:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	672b      	str	r3, [r5, #112]	@ 0x70
 8003fb8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003fba:	f023 0304 	bic.w	r3, r3, #4
 8003fbe:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003fc0:	f7fd f836 	bl	8001030 <HAL_GetTick>
 8003fc4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc8:	f7fd f832 	bl	8001030 <HAL_GetTick>
 8003fcc:	1b80      	subs	r0, r0, r6
 8003fce:	42b8      	cmp	r0, r7
 8003fd0:	f63f aeba 	bhi.w	8003d48 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fd4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003fd6:	0798      	lsls	r0, r3, #30
 8003fd8:	d4f6      	bmi.n	8003fc8 <HAL_RCC_OscConfig+0x580>
 8003fda:	e5d9      	b.n	8003b90 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fdc:	68eb      	ldr	r3, [r5, #12]
 8003fde:	6a22      	ldr	r2, [r4, #32]
 8003fe0:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003fe4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003fe8:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	e59b      	b.n	8003b26 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fee:	4a0c      	ldr	r2, [pc, #48]	@ (8004020 <HAL_RCC_OscConfig+0x5d8>)
 8003ff0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff8:	e67d      	b.n	8003cf6 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ffa:	4a09      	ldr	r2, [pc, #36]	@ (8004020 <HAL_RCC_OscConfig+0x5d8>)
 8003ffc:	6853      	ldr	r3, [r2, #4]
 8003ffe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004002:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004006:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	e58c      	b.n	8003b26 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800400c:	f042 0204 	orr.w	r2, r2, #4
 8004010:	671a      	str	r2, [r3, #112]	@ 0x70
 8004012:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004014:	f042 0201 	orr.w	r2, r2, #1
 8004018:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800401a:	e66c      	b.n	8003cf6 <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 800401c:	2001      	movs	r0, #1
}
 800401e:	4770      	bx	lr
 8004020:	58024400 	.word	0x58024400

08004024 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004024:	4a3f      	ldr	r2, [pc, #252]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x100>)
 8004026:	6913      	ldr	r3, [r2, #16]
 8004028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800402c:	2b10      	cmp	r3, #16
 800402e:	d04f      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0xac>
 8004030:	2b18      	cmp	r3, #24
 8004032:	d00a      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0x26>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d14d      	bne.n	80040d4 <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004038:	6813      	ldr	r3, [r2, #0]
 800403a:	0699      	lsls	r1, r3, #26
 800403c:	d54c      	bpl.n	80040d8 <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800403e:	6813      	ldr	r3, [r2, #0]
 8004040:	4839      	ldr	r0, [pc, #228]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x104>)
 8004042:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004046:	40d8      	lsrs	r0, r3
 8004048:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800404a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 800404c:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800404e:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004050:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8004052:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004056:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004058:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800405c:	d036      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800405e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004062:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004066:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800406a:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800406e:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 8004072:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004078:	ee06 3a90 	vmov	s13, r3
 800407c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8004080:	d002      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0x64>
 8004082:	2902      	cmp	r1, #2
 8004084:	d048      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0xf4>
 8004086:	b349      	cbz	r1, 80040dc <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004088:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800412c <HAL_RCC_GetSysClockFreq+0x108>
 800408c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004090:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004096:	ee07 3a10 	vmov	s14, r3
 800409a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800409e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80040a2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80040a6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80040aa:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80040ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x100>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80040b6:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80040c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c8:	ee17 0a90 	vmov	r0, s15
}
 80040cc:	bc30      	pop	{r4, r5}
 80040ce:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040d0:	4817      	ldr	r0, [pc, #92]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040d2:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 80040d4:	4817      	ldr	r0, [pc, #92]	@ (8004134 <HAL_RCC_GetSysClockFreq+0x110>)
 80040d6:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80040d8:	4813      	ldr	r0, [pc, #76]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x104>)
}
 80040da:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040dc:	6813      	ldr	r3, [r2, #0]
 80040de:	069b      	lsls	r3, r3, #26
 80040e0:	d51d      	bpl.n	800411e <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040e2:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040e8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040ea:	490f      	ldr	r1, [pc, #60]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x104>)
 80040ec:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040f4:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040f6:	ee06 3a10 	vmov	s12, r3
 80040fa:	ee05 1a90 	vmov	s11, r1
 80040fe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004102:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004106:	ee36 6a07 	vadd.f32	s12, s12, s14
 800410a:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800410e:	ee76 7a26 	vadd.f32	s15, s12, s13
 8004112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004116:	e7ca      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004118:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004138 <HAL_RCC_GetSysClockFreq+0x114>
 800411c:	e7b6      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800411e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800413c <HAL_RCC_GetSysClockFreq+0x118>
 8004122:	e7b3      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x68>
 8004124:	58024400 	.word	0x58024400
 8004128:	03d09000 	.word	0x03d09000
 800412c:	4a742400 	.word	0x4a742400
 8004130:	017d7840 	.word	0x017d7840
 8004134:	003d0900 	.word	0x003d0900
 8004138:	4bbebc20 	.word	0x4bbebc20
 800413c:	4c742400 	.word	0x4c742400

08004140 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004140:	2800      	cmp	r0, #0
 8004142:	f000 810e 	beq.w	8004362 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004146:	4a8d      	ldr	r2, [pc, #564]	@ (800437c <HAL_RCC_ClockConfig+0x23c>)
 8004148:	6813      	ldr	r3, [r2, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	428b      	cmp	r3, r1
{
 8004150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004154:	4604      	mov	r4, r0
 8004156:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	d20c      	bcs.n	8004174 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	6813      	ldr	r3, [r2, #0]
 800415c:	f023 030f 	bic.w	r3, r3, #15
 8004160:	430b      	orrs	r3, r1
 8004162:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004164:	6813      	ldr	r3, [r2, #0]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	428b      	cmp	r3, r1
 800416c:	d002      	beq.n	8004174 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800416e:	2001      	movs	r0, #1
}
 8004170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	0758      	lsls	r0, r3, #29
 8004178:	d50b      	bpl.n	8004192 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800417a:	4981      	ldr	r1, [pc, #516]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 800417c:	6920      	ldr	r0, [r4, #16]
 800417e:	698a      	ldr	r2, [r1, #24]
 8004180:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004184:	4290      	cmp	r0, r2
 8004186:	d904      	bls.n	8004192 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004188:	698a      	ldr	r2, [r1, #24]
 800418a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800418e:	4302      	orrs	r2, r0
 8004190:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004192:	0719      	lsls	r1, r3, #28
 8004194:	d50b      	bpl.n	80041ae <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004196:	497a      	ldr	r1, [pc, #488]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004198:	6960      	ldr	r0, [r4, #20]
 800419a:	69ca      	ldr	r2, [r1, #28]
 800419c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80041a0:	4290      	cmp	r0, r2
 80041a2:	d904      	bls.n	80041ae <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041a4:	69ca      	ldr	r2, [r1, #28]
 80041a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041aa:	4302      	orrs	r2, r0
 80041ac:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ae:	06da      	lsls	r2, r3, #27
 80041b0:	d50b      	bpl.n	80041ca <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041b2:	4973      	ldr	r1, [pc, #460]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 80041b4:	69a0      	ldr	r0, [r4, #24]
 80041b6:	69ca      	ldr	r2, [r1, #28]
 80041b8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80041bc:	4290      	cmp	r0, r2
 80041be:	d904      	bls.n	80041ca <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041c0:	69ca      	ldr	r2, [r1, #28]
 80041c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041c6:	4302      	orrs	r2, r0
 80041c8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ca:	069f      	lsls	r7, r3, #26
 80041cc:	d50b      	bpl.n	80041e6 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ce:	496c      	ldr	r1, [pc, #432]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 80041d0:	69e0      	ldr	r0, [r4, #28]
 80041d2:	6a0a      	ldr	r2, [r1, #32]
 80041d4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80041d8:	4290      	cmp	r0, r2
 80041da:	d904      	bls.n	80041e6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041dc:	6a0a      	ldr	r2, [r1, #32]
 80041de:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041e2:	4302      	orrs	r2, r0
 80041e4:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e6:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041e8:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	f140 80ab 	bpl.w	8004346 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041f0:	4e63      	ldr	r6, [pc, #396]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 80041f2:	68e0      	ldr	r0, [r4, #12]
 80041f4:	69b1      	ldr	r1, [r6, #24]
 80041f6:	f001 010f 	and.w	r1, r1, #15
 80041fa:	4288      	cmp	r0, r1
 80041fc:	d904      	bls.n	8004208 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041fe:	69b1      	ldr	r1, [r6, #24]
 8004200:	f021 010f 	bic.w	r1, r1, #15
 8004204:	4301      	orrs	r1, r0
 8004206:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004208:	2a00      	cmp	r2, #0
 800420a:	d030      	beq.n	800426e <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800420c:	4a5c      	ldr	r2, [pc, #368]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 800420e:	68a1      	ldr	r1, [r4, #8]
 8004210:	6993      	ldr	r3, [r2, #24]
 8004212:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004216:	430b      	orrs	r3, r1
 8004218:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800421c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421e:	2902      	cmp	r1, #2
 8004220:	f000 80a1 	beq.w	8004366 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004224:	2903      	cmp	r1, #3
 8004226:	f000 8098 	beq.w	800435a <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800422a:	2901      	cmp	r1, #1
 800422c:	f000 80a1 	beq.w	8004372 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004230:	075f      	lsls	r7, r3, #29
 8004232:	d59c      	bpl.n	800416e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004234:	4e52      	ldr	r6, [pc, #328]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004236:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800423a:	6933      	ldr	r3, [r6, #16]
 800423c:	f023 0307 	bic.w	r3, r3, #7
 8004240:	430b      	orrs	r3, r1
 8004242:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8004244:	f7fc fef4 	bl	8001030 <HAL_GetTick>
 8004248:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424a:	e005      	b.n	8004258 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424c:	f7fc fef0 	bl	8001030 <HAL_GetTick>
 8004250:	1bc0      	subs	r0, r0, r7
 8004252:	4540      	cmp	r0, r8
 8004254:	f200 808b 	bhi.w	800436e <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004258:	6933      	ldr	r3, [r6, #16]
 800425a:	6862      	ldr	r2, [r4, #4]
 800425c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004260:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8004264:	d1f2      	bne.n	800424c <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	079e      	lsls	r6, r3, #30
 800426a:	d506      	bpl.n	800427a <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800426c:	68e0      	ldr	r0, [r4, #12]
 800426e:	4944      	ldr	r1, [pc, #272]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004270:	698a      	ldr	r2, [r1, #24]
 8004272:	f002 020f 	and.w	r2, r2, #15
 8004276:	4290      	cmp	r0, r2
 8004278:	d369      	bcc.n	800434e <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800427a:	4940      	ldr	r1, [pc, #256]	@ (800437c <HAL_RCC_ClockConfig+0x23c>)
 800427c:	680a      	ldr	r2, [r1, #0]
 800427e:	f002 020f 	and.w	r2, r2, #15
 8004282:	42aa      	cmp	r2, r5
 8004284:	d90a      	bls.n	800429c <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	680a      	ldr	r2, [r1, #0]
 8004288:	f022 020f 	bic.w	r2, r2, #15
 800428c:	432a      	orrs	r2, r5
 800428e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004290:	680a      	ldr	r2, [r1, #0]
 8004292:	f002 020f 	and.w	r2, r2, #15
 8004296:	42aa      	cmp	r2, r5
 8004298:	f47f af69 	bne.w	800416e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800429c:	0758      	lsls	r0, r3, #29
 800429e:	d50b      	bpl.n	80042b8 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042a0:	4937      	ldr	r1, [pc, #220]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 80042a2:	6920      	ldr	r0, [r4, #16]
 80042a4:	698a      	ldr	r2, [r1, #24]
 80042a6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80042aa:	4290      	cmp	r0, r2
 80042ac:	d204      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042ae:	698a      	ldr	r2, [r1, #24]
 80042b0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80042b4:	4302      	orrs	r2, r0
 80042b6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b8:	0719      	lsls	r1, r3, #28
 80042ba:	d50b      	bpl.n	80042d4 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042bc:	4930      	ldr	r1, [pc, #192]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 80042be:	6960      	ldr	r0, [r4, #20]
 80042c0:	69ca      	ldr	r2, [r1, #28]
 80042c2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80042c6:	4290      	cmp	r0, r2
 80042c8:	d204      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042ca:	69ca      	ldr	r2, [r1, #28]
 80042cc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80042d0:	4302      	orrs	r2, r0
 80042d2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d4:	06da      	lsls	r2, r3, #27
 80042d6:	d50b      	bpl.n	80042f0 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042d8:	4929      	ldr	r1, [pc, #164]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 80042da:	69a0      	ldr	r0, [r4, #24]
 80042dc:	69ca      	ldr	r2, [r1, #28]
 80042de:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80042e2:	4290      	cmp	r0, r2
 80042e4:	d204      	bcs.n	80042f0 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042e6:	69ca      	ldr	r2, [r1, #28]
 80042e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042ec:	4302      	orrs	r2, r0
 80042ee:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042f0:	069b      	lsls	r3, r3, #26
 80042f2:	d50b      	bpl.n	800430c <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042f4:	4a22      	ldr	r2, [pc, #136]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 80042f6:	69e1      	ldr	r1, [r4, #28]
 80042f8:	6a13      	ldr	r3, [r2, #32]
 80042fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042fe:	4299      	cmp	r1, r3
 8004300:	d204      	bcs.n	800430c <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004302:	6a13      	ldr	r3, [r2, #32]
 8004304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004308:	430b      	orrs	r3, r1
 800430a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800430c:	f7ff fe8a 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8004310:	4a1b      	ldr	r2, [pc, #108]	@ (8004380 <HAL_RCC_ClockConfig+0x240>)
 8004312:	4603      	mov	r3, r0
 8004314:	481b      	ldr	r0, [pc, #108]	@ (8004384 <HAL_RCC_ClockConfig+0x244>)
 8004316:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004318:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800431a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800431e:	4d1a      	ldr	r5, [pc, #104]	@ (8004388 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004320:	f002 020f 	and.w	r2, r2, #15
 8004324:	4c19      	ldr	r4, [pc, #100]	@ (800438c <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004326:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004328:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800432a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800432e:	4818      	ldr	r0, [pc, #96]	@ (8004390 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004330:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004334:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8004336:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8004338:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800433a:	40d3      	lsrs	r3, r2
 800433c:	6023      	str	r3, [r4, #0]
}
 800433e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8004342:	f7fc be13 	b.w	8000f6c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004346:	2a00      	cmp	r2, #0
 8004348:	f47f af60 	bne.w	800420c <HAL_RCC_ClockConfig+0xcc>
 800434c:	e795      	b.n	800427a <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434e:	698a      	ldr	r2, [r1, #24]
 8004350:	f022 020f 	bic.w	r2, r2, #15
 8004354:	4302      	orrs	r2, r0
 8004356:	618a      	str	r2, [r1, #24]
 8004358:	e78f      	b.n	800427a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800435a:	019a      	lsls	r2, r3, #6
 800435c:	f53f af6a 	bmi.w	8004234 <HAL_RCC_ClockConfig+0xf4>
 8004360:	e705      	b.n	800416e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004362:	2001      	movs	r0, #1
}
 8004364:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004366:	0398      	lsls	r0, r3, #14
 8004368:	f53f af64 	bmi.w	8004234 <HAL_RCC_ClockConfig+0xf4>
 800436c:	e6ff      	b.n	800416e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800436e:	2003      	movs	r0, #3
 8004370:	e6fe      	b.n	8004170 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004372:	05db      	lsls	r3, r3, #23
 8004374:	f53f af5e 	bmi.w	8004234 <HAL_RCC_ClockConfig+0xf4>
 8004378:	e6f9      	b.n	800416e <HAL_RCC_ClockConfig+0x2e>
 800437a:	bf00      	nop
 800437c:	52002000 	.word	0x52002000
 8004380:	58024400 	.word	0x58024400
 8004384:	08007254 	.word	0x08007254
 8004388:	24000004 	.word	0x24000004
 800438c:	24000000 	.word	0x24000000
 8004390:	2400000c 	.word	0x2400000c

08004394 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004394:	4a18      	ldr	r2, [pc, #96]	@ (80043f8 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004396:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004398:	6913      	ldr	r3, [r2, #16]
 800439a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800439e:	2b10      	cmp	r3, #16
 80043a0:	d024      	beq.n	80043ec <HAL_RCC_GetHCLKFreq+0x58>
 80043a2:	2b18      	cmp	r3, #24
 80043a4:	d009      	beq.n	80043ba <HAL_RCC_GetHCLKFreq+0x26>
 80043a6:	bb1b      	cbnz	r3, 80043f0 <HAL_RCC_GetHCLKFreq+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a8:	6813      	ldr	r3, [r2, #0]
 80043aa:	069b      	lsls	r3, r3, #26
 80043ac:	d522      	bpl.n	80043f4 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <HAL_RCC_GetHCLKFreq+0x68>)
 80043b2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80043b6:	40d3      	lsrs	r3, r2
 80043b8:	e002      	b.n	80043c0 <HAL_RCC_GetHCLKFreq+0x2c>
 80043ba:	f7ff fad3 	bl	8003964 <HAL_RCC_GetSysClockFreq.part.0>
 80043be:	4603      	mov	r3, r0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043c0:	490d      	ldr	r1, [pc, #52]	@ (80043f8 <HAL_RCC_GetHCLKFreq+0x64>)
 80043c2:	480f      	ldr	r0, [pc, #60]	@ (8004400 <HAL_RCC_GetHCLKFreq+0x6c>)
 80043c4:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043c6:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043c8:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004404 <HAL_RCC_GetHCLKFreq+0x70>)
 80043ce:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004408 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043d4:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043d6:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043d8:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043dc:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80043e0:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043e2:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 80043e6:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043e8:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ec:	4b07      	ldr	r3, [pc, #28]	@ (800440c <HAL_RCC_GetHCLKFreq+0x78>)
 80043ee:	e7e7      	b.n	80043c0 <HAL_RCC_GetHCLKFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 80043f0:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <HAL_RCC_GetHCLKFreq+0x7c>)
 80043f2:	e7e5      	b.n	80043c0 <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80043f4:	4b01      	ldr	r3, [pc, #4]	@ (80043fc <HAL_RCC_GetHCLKFreq+0x68>)
 80043f6:	e7e3      	b.n	80043c0 <HAL_RCC_GetHCLKFreq+0x2c>
 80043f8:	58024400 	.word	0x58024400
 80043fc:	03d09000 	.word	0x03d09000
 8004400:	08007254 	.word	0x08007254
 8004404:	24000000 	.word	0x24000000
 8004408:	24000004 	.word	0x24000004
 800440c:	017d7840 	.word	0x017d7840
 8004410:	003d0900 	.word	0x003d0900

08004414 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004414:	4a1c      	ldr	r2, [pc, #112]	@ (8004488 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004416:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004418:	6913      	ldr	r3, [r2, #16]
 800441a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800441e:	2b10      	cmp	r3, #16
 8004420:	d02b      	beq.n	800447a <HAL_RCC_GetPCLK1Freq+0x66>
 8004422:	2b18      	cmp	r3, #24
 8004424:	d009      	beq.n	800443a <HAL_RCC_GetPCLK1Freq+0x26>
 8004426:	bb53      	cbnz	r3, 800447e <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	069b      	lsls	r3, r3, #26
 800442c:	d529      	bpl.n	8004482 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	4b16      	ldr	r3, [pc, #88]	@ (800448c <HAL_RCC_GetPCLK1Freq+0x78>)
 8004432:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004436:	40d3      	lsrs	r3, r2
 8004438:	e002      	b.n	8004440 <HAL_RCC_GetPCLK1Freq+0x2c>
 800443a:	f7ff fa93 	bl	8003964 <HAL_RCC_GetSysClockFreq.part.0>
 800443e:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004440:	4a11      	ldr	r2, [pc, #68]	@ (8004488 <HAL_RCC_GetPCLK1Freq+0x74>)
 8004442:	4913      	ldr	r1, [pc, #76]	@ (8004490 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8004444:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8004446:	4d13      	ldr	r5, [pc, #76]	@ (8004494 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004448:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800444c:	4c12      	ldr	r4, [pc, #72]	@ (8004498 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800444e:	5c08      	ldrb	r0, [r1, r0]
 8004450:	f000 001f 	and.w	r0, r0, #31
 8004454:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004456:	6990      	ldr	r0, [r2, #24]
 8004458:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800445c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800445e:	5c08      	ldrb	r0, [r1, r0]
 8004460:	f000 001f 	and.w	r0, r0, #31
 8004464:	40c3      	lsrs	r3, r0
 8004466:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004468:	69d2      	ldr	r2, [r2, #28]
 800446a:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800446e:	5c88      	ldrb	r0, [r1, r2]
 8004470:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004474:	fa23 f000 	lsr.w	r0, r3, r0
 8004478:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800447a:	4b08      	ldr	r3, [pc, #32]	@ (800449c <HAL_RCC_GetPCLK1Freq+0x88>)
 800447c:	e7e0      	b.n	8004440 <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 800447e:	4b08      	ldr	r3, [pc, #32]	@ (80044a0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8004480:	e7de      	b.n	8004440 <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004482:	4b02      	ldr	r3, [pc, #8]	@ (800448c <HAL_RCC_GetPCLK1Freq+0x78>)
 8004484:	e7dc      	b.n	8004440 <HAL_RCC_GetPCLK1Freq+0x2c>
 8004486:	bf00      	nop
 8004488:	58024400 	.word	0x58024400
 800448c:	03d09000 	.word	0x03d09000
 8004490:	08007254 	.word	0x08007254
 8004494:	24000004 	.word	0x24000004
 8004498:	24000000 	.word	0x24000000
 800449c:	017d7840 	.word	0x017d7840
 80044a0:	003d0900 	.word	0x003d0900

080044a4 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044a6:	4c36      	ldr	r4, [pc, #216]	@ (8004580 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80044a8:	4606      	mov	r6, r0
 80044aa:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044b2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b4:	f7fc fdbc 	bl	8001030 <HAL_GetTick>
 80044b8:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044ba:	e004      	b.n	80044c6 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044bc:	f7fc fdb8 	bl	8001030 <HAL_GetTick>
 80044c0:	1b40      	subs	r0, r0, r5
 80044c2:	2802      	cmp	r0, #2
 80044c4:	d856      	bhi.n	8004574 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	011a      	lsls	r2, r3, #4
 80044ca:	d4f7      	bmi.n	80044bc <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80044ce:	6832      	ldr	r2, [r6, #0]
 80044d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80044d4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80044d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044da:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80044de:	3b01      	subs	r3, #1
 80044e0:	3a01      	subs	r2, #1
 80044e2:	025b      	lsls	r3, r3, #9
 80044e4:	0412      	lsls	r2, r2, #16
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80044ec:	4313      	orrs	r3, r2
 80044ee:	6872      	ldr	r2, [r6, #4]
 80044f0:	3a01      	subs	r2, #1
 80044f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044f6:	4313      	orrs	r3, r2
 80044f8:	6932      	ldr	r2, [r6, #16]
 80044fa:	3a01      	subs	r2, #1
 80044fc:	0612      	lsls	r2, r2, #24
 80044fe:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004502:	4313      	orrs	r3, r2
 8004504:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004506:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004508:	6972      	ldr	r2, [r6, #20]
 800450a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800450e:	4313      	orrs	r3, r2
 8004510:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004512:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004514:	69b2      	ldr	r2, [r6, #24]
 8004516:	f023 0320 	bic.w	r3, r3, #32
 800451a:	4313      	orrs	r3, r2
 800451c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800451e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004520:	f023 0310 	bic.w	r3, r3, #16
 8004524:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004526:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004528:	69f2      	ldr	r2, [r6, #28]
 800452a:	f36f 03cf 	bfc	r3, #3, #13
 800452e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004532:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004534:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004536:	f043 0310 	orr.w	r3, r3, #16
 800453a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800453c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800453e:	b1df      	cbz	r7, 8004578 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004540:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004542:	bf0c      	ite	eq
 8004544:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004548:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800454c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800454e:	4c0c      	ldr	r4, [pc, #48]	@ (8004580 <RCCEx_PLL2_Config.part.0+0xdc>)
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004556:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004558:	f7fc fd6a 	bl	8001030 <HAL_GetTick>
 800455c:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800455e:	e004      	b.n	800456a <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004560:	f7fc fd66 	bl	8001030 <HAL_GetTick>
 8004564:	1b40      	subs	r0, r0, r5
 8004566:	2802      	cmp	r0, #2
 8004568:	d804      	bhi.n	8004574 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	d5f7      	bpl.n	8004560 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8004570:	2000      	movs	r0, #0
}
 8004572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004574:	2003      	movs	r0, #3
}
 8004576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004578:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800457c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800457e:	e7e6      	b.n	800454e <RCCEx_PLL2_Config.part.0+0xaa>
 8004580:	58024400 	.word	0x58024400

08004584 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004586:	4c36      	ldr	r4, [pc, #216]	@ (8004660 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004588:	4606      	mov	r6, r0
 800458a:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004592:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004594:	f7fc fd4c 	bl	8001030 <HAL_GetTick>
 8004598:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800459a:	e004      	b.n	80045a6 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800459c:	f7fc fd48 	bl	8001030 <HAL_GetTick>
 80045a0:	1b40      	subs	r0, r0, r5
 80045a2:	2802      	cmp	r0, #2
 80045a4:	d856      	bhi.n	8004654 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	009a      	lsls	r2, r3, #2
 80045aa:	d4f7      	bmi.n	800459c <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80045ae:	6832      	ldr	r2, [r6, #0]
 80045b0:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80045b4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80045b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045ba:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80045be:	3b01      	subs	r3, #1
 80045c0:	3a01      	subs	r2, #1
 80045c2:	025b      	lsls	r3, r3, #9
 80045c4:	0412      	lsls	r2, r2, #16
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80045cc:	4313      	orrs	r3, r2
 80045ce:	6872      	ldr	r2, [r6, #4]
 80045d0:	3a01      	subs	r2, #1
 80045d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d6:	4313      	orrs	r3, r2
 80045d8:	6932      	ldr	r2, [r6, #16]
 80045da:	3a01      	subs	r2, #1
 80045dc:	0612      	lsls	r2, r2, #24
 80045de:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80045e2:	4313      	orrs	r3, r2
 80045e4:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80045e8:	6972      	ldr	r2, [r6, #20]
 80045ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80045ee:	4313      	orrs	r3, r2
 80045f0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80045f4:	69b2      	ldr	r2, [r6, #24]
 80045f6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045fa:	4313      	orrs	r3, r2
 80045fc:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80045fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004604:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004606:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004608:	69f2      	ldr	r2, [r6, #28]
 800460a:	f36f 03cf 	bfc	r3, #3, #13
 800460e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004612:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004614:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800461c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800461e:	b1df      	cbz	r7, 8004658 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004620:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004622:	bf0c      	ite	eq
 8004624:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004628:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800462c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800462e:	4c0c      	ldr	r4, [pc, #48]	@ (8004660 <RCCEx_PLL3_Config.part.0+0xdc>)
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004636:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004638:	f7fc fcfa 	bl	8001030 <HAL_GetTick>
 800463c:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800463e:	e004      	b.n	800464a <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004640:	f7fc fcf6 	bl	8001030 <HAL_GetTick>
 8004644:	1b40      	subs	r0, r0, r5
 8004646:	2802      	cmp	r0, #2
 8004648:	d804      	bhi.n	8004654 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	d5f7      	bpl.n	8004640 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8004650:	2000      	movs	r0, #0
}
 8004652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004654:	2003      	movs	r0, #3
}
 8004656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004658:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800465c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800465e:	e7e6      	b.n	800462e <RCCEx_PLL3_Config.part.0+0xaa>
 8004660:	58024400 	.word	0x58024400

08004664 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004668:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800466c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800466e:	011d      	lsls	r5, r3, #4
 8004670:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8004674:	d524      	bpl.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004676:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004678:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800467c:	f000 85df 	beq.w	800523e <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8004680:	f200 86a8 	bhi.w	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004684:	2900      	cmp	r1, #0
 8004686:	f000 85f6 	beq.w	8005276 <HAL_RCCEx_PeriphCLKConfig+0xc12>
 800468a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800468e:	f040 86a5 	bne.w	80053dc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004692:	49a9      	ldr	r1, [pc, #676]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004694:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004696:	f001 0103 	and.w	r1, r1, #3
 800469a:	2903      	cmp	r1, #3
 800469c:	f000 869e 	beq.w	80053dc <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80046a0:	2102      	movs	r1, #2
 80046a2:	3008      	adds	r0, #8
 80046a4:	f7ff fefe 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 80046a8:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046aa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80046ae:	b93e      	cbnz	r6, 80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046b0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80046b2:	4da1      	ldr	r5, [pc, #644]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046b4:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046b6:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80046b8:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 80046bc:	4301      	orrs	r1, r0
 80046be:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046c0:	05d8      	lsls	r0, r3, #23
 80046c2:	d50a      	bpl.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 80046c4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80046c6:	2904      	cmp	r1, #4
 80046c8:	d806      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80046ca:	e8df f011 	tbh	[pc, r1, lsl #1]
 80046ce:	03ff      	.short	0x03ff
 80046d0:	0582056d 	.word	0x0582056d
 80046d4:	04040404 	.word	0x04040404
      status = ret;
 80046d8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80046da:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80046dc:	0599      	lsls	r1, r3, #22
 80046de:	d524      	bpl.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 80046e0:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80046e2:	2980      	cmp	r1, #128	@ 0x80
 80046e4:	f000 854b 	beq.w	800517e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80046e8:	f200 8687 	bhi.w	80053fa <HAL_RCCEx_PeriphCLKConfig+0xd96>
 80046ec:	2900      	cmp	r1, #0
 80046ee:	f000 85bb 	beq.w	8005268 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 80046f2:	2940      	cmp	r1, #64	@ 0x40
 80046f4:	f040 8688 	bne.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046f8:	498f      	ldr	r1, [pc, #572]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046fa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80046fc:	f001 0103 	and.w	r1, r1, #3
 8004700:	2903      	cmp	r1, #3
 8004702:	f000 8681 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8004706:	2100      	movs	r1, #0
 8004708:	f104 0008 	add.w	r0, r4, #8
 800470c:	f7ff feca 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8004710:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004712:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004716:	2d00      	cmp	r5, #0
 8004718:	f040 8543 	bne.w	80051a2 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800471c:	4f86      	ldr	r7, [pc, #536]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800471e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004720:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004722:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8004726:	4301      	orrs	r1, r0
 8004728:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800472a:	055f      	lsls	r7, r3, #21
 800472c:	d528      	bpl.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 800472e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8004732:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8004736:	f000 855c 	beq.w	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800473a:	f200 8652 	bhi.w	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 800473e:	2900      	cmp	r1, #0
 8004740:	f000 858b 	beq.w	800525a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004744:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004748:	f040 8653 	bne.w	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800474c:	497a      	ldr	r1, [pc, #488]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800474e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004750:	f001 0103 	and.w	r1, r1, #3
 8004754:	2903      	cmp	r1, #3
 8004756:	f000 864c 	beq.w	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800475a:	2100      	movs	r1, #0
 800475c:	f104 0008 	add.w	r0, r4, #8
 8004760:	f7ff fea0 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8004764:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004766:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800476a:	2d00      	cmp	r5, #0
 800476c:	f040 8553 	bne.w	8005216 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004770:	4f71      	ldr	r7, [pc, #452]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004772:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8004776:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004778:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 800477c:	4301      	orrs	r1, r0
 800477e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004780:	0518      	lsls	r0, r3, #20
 8004782:	d528      	bpl.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004784:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8004788:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800478c:	f000 8546 	beq.w	800521c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 8004790:	f200 8614 	bhi.w	80053bc <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8004794:	2900      	cmp	r1, #0
 8004796:	f000 84d6 	beq.w	8005146 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 800479a:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 800479e:	f040 8615 	bne.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047a2:	4965      	ldr	r1, [pc, #404]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047a4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80047a6:	f001 0103 	and.w	r1, r1, #3
 80047aa:	2903      	cmp	r1, #3
 80047ac:	f000 860e 	beq.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd68>
 80047b0:	2100      	movs	r1, #0
 80047b2:	f104 0008 	add.w	r0, r4, #8
 80047b6:	f7ff fe75 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 80047ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047bc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80047c0:	2d00      	cmp	r5, #0
 80047c2:	f040 84c8 	bne.w	8005156 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80047c6:	4f5c      	ldr	r7, [pc, #368]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047c8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80047cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80047ce:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 80047d2:	4301      	orrs	r1, r0
 80047d4:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047d6:	0199      	lsls	r1, r3, #6
 80047d8:	d518      	bpl.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 80047da:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80047dc:	2920      	cmp	r1, #32
 80047de:	f000 8434 	beq.w	800504a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 80047e2:	f200 8615 	bhi.w	8005410 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80047e6:	b139      	cbz	r1, 80047f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
 80047e8:	2910      	cmp	r1, #16
 80047ea:	f040 8614 	bne.w	8005416 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ee:	4852      	ldr	r0, [pc, #328]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047f0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80047f2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80047f6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	f040 83bf 	bne.w	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047fe:	4f4e      	ldr	r7, [pc, #312]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004800:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004802:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004804:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8004808:	4301      	orrs	r1, r0
 800480a:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800480c:	04df      	lsls	r7, r3, #19
 800480e:	d526      	bpl.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004810:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8004812:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8004816:	f000 84a1 	beq.w	800515c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 800481a:	f200 85c3 	bhi.w	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 800481e:	2900      	cmp	r1, #0
 8004820:	f000 8486 	beq.w	8005130 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004824:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004828:	f040 85c4 	bne.w	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800482c:	4942      	ldr	r1, [pc, #264]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800482e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004830:	f001 0103 	and.w	r1, r1, #3
 8004834:	2903      	cmp	r1, #3
 8004836:	f000 85bd 	beq.w	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 800483a:	2100      	movs	r1, #0
 800483c:	f104 0008 	add.w	r0, r4, #8
 8004840:	f7ff fe30 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8004844:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004846:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800484a:	2d00      	cmp	r5, #0
 800484c:	f040 8478 	bne.w	8005140 <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004850:	4f39      	ldr	r7, [pc, #228]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004852:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004854:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004856:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800485a:	4301      	orrs	r1, r0
 800485c:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800485e:	0498      	lsls	r0, r3, #18
 8004860:	d524      	bpl.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004862:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004864:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004868:	f000 8415 	beq.w	8005096 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800486c:	f200 8556 	bhi.w	800531c <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8004870:	b191      	cbz	r1, 8004898 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004872:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004876:	f040 855b 	bne.w	8005330 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800487a:	492f      	ldr	r1, [pc, #188]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800487c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800487e:	f001 0103 	and.w	r1, r1, #3
 8004882:	2903      	cmp	r1, #3
 8004884:	f000 8554 	beq.w	8005330 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004888:	2101      	movs	r1, #1
 800488a:	f104 0008 	add.w	r0, r4, #8
 800488e:	f7ff fe09 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8004892:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004894:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004898:	2d00      	cmp	r5, #0
 800489a:	f040 838f 	bne.w	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800489e:	4f26      	ldr	r7, [pc, #152]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048a0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80048a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80048a4:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80048a8:	4301      	orrs	r1, r0
 80048aa:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80048ac:	0459      	lsls	r1, r3, #17
 80048ae:	d526      	bpl.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 80048b0:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80048b4:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80048b8:	f000 8426 	beq.w	8005108 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80048bc:	f200 854a 	bhi.w	8005354 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 80048c0:	b191      	cbz	r1, 80048e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80048c2:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80048c6:	f040 854f 	bne.w	8005368 <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048ca:	491b      	ldr	r1, [pc, #108]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048cc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80048ce:	f001 0103 	and.w	r1, r1, #3
 80048d2:	2903      	cmp	r1, #3
 80048d4:	f000 8548 	beq.w	8005368 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 80048d8:	2101      	movs	r1, #1
 80048da:	f104 0008 	add.w	r0, r4, #8
 80048de:	f7ff fde1 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 80048e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048e4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80048e8:	2d00      	cmp	r5, #0
 80048ea:	f040 835b 	bne.w	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80048ee:	4f12      	ldr	r7, [pc, #72]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048f0:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 80048f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80048f6:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80048fa:	4301      	orrs	r1, r0
 80048fc:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048fe:	041f      	lsls	r7, r3, #16
 8004900:	d50d      	bpl.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 8004902:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8004904:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8004908:	f000 8260 	beq.w	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x768>
 800490c:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004910:	f000 8591 	beq.w	8005436 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004914:	2900      	cmp	r1, #0
 8004916:	f000 825e 	beq.w	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 800491a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800491c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800491e:	01d8      	lsls	r0, r3, #7
 8004920:	d515      	bpl.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 8004922:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004924:	2903      	cmp	r1, #3
 8004926:	f200 85b4 	bhi.w	8005492 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800492a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800492e:	000c      	.short	0x000c
 8004930:	03a10007 	.word	0x03a10007
 8004934:	000c      	.short	0x000c
 8004936:	bf00      	nop
 8004938:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493c:	4836      	ldr	r0, [pc, #216]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 800493e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004940:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004944:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004946:	2d00      	cmp	r5, #0
 8004948:	f000 831a 	beq.w	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 800494c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800494e:	0259      	lsls	r1, r3, #9
 8004950:	f100 827a 	bmi.w	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004954:	07df      	lsls	r7, r3, #31
 8004956:	d52f      	bpl.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004958:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800495a:	2928      	cmp	r1, #40	@ 0x28
 800495c:	d82a      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800495e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004962:	0257      	.short	0x0257
 8004964:	00290029 	.word	0x00290029
 8004968:	00290029 	.word	0x00290029
 800496c:	00290029 	.word	0x00290029
 8004970:	02480029 	.word	0x02480029
 8004974:	00290029 	.word	0x00290029
 8004978:	00290029 	.word	0x00290029
 800497c:	00290029 	.word	0x00290029
 8004980:	04b90029 	.word	0x04b90029
 8004984:	00290029 	.word	0x00290029
 8004988:	00290029 	.word	0x00290029
 800498c:	00290029 	.word	0x00290029
 8004990:	02570029 	.word	0x02570029
 8004994:	00290029 	.word	0x00290029
 8004998:	00290029 	.word	0x00290029
 800499c:	00290029 	.word	0x00290029
 80049a0:	02570029 	.word	0x02570029
 80049a4:	00290029 	.word	0x00290029
 80049a8:	00290029 	.word	0x00290029
 80049ac:	00290029 	.word	0x00290029
 80049b0:	02570029 	.word	0x02570029
      status = ret;
 80049b4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80049b6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049b8:	0798      	lsls	r0, r3, #30
 80049ba:	d51e      	bpl.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80049bc:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80049be:	2905      	cmp	r1, #5
 80049c0:	f200 8550 	bhi.w	8005464 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80049c4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80049c8:	00060015 	.word	0x00060015
 80049cc:	00150471 	.word	0x00150471
 80049d0:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049d4:	4910      	ldr	r1, [pc, #64]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80049d6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80049d8:	f001 0103 	and.w	r1, r1, #3
 80049dc:	2903      	cmp	r1, #3
 80049de:	f000 8541 	beq.w	8005464 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80049e2:	2101      	movs	r1, #1
 80049e4:	f104 0008 	add.w	r0, r4, #8
 80049e8:	f7ff fd5c 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 80049ec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80049f2:	2d00      	cmp	r5, #0
 80049f4:	f000 82cc 	beq.w	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 80049f8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049fa:	0759      	lsls	r1, r3, #29
 80049fc:	d521      	bpl.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80049fe:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8004a02:	2905      	cmp	r1, #5
 8004a04:	f200 852a 	bhi.w	800545c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004a08:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004a0c:	00080017 	.word	0x00080017
 8004a10:	0017043c 	.word	0x0017043c
 8004a14:	00170017 	.word	0x00170017
 8004a18:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a1c:	49ae      	ldr	r1, [pc, #696]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004a1e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004a20:	f001 0103 	and.w	r1, r1, #3
 8004a24:	2903      	cmp	r1, #3
 8004a26:	f000 8519 	beq.w	800545c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	f104 0008 	add.w	r0, r4, #8
 8004a30:	f7ff fd38 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8004a34:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a36:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004a3a:	2d00      	cmp	r5, #0
 8004a3c:	f000 82c2 	beq.w	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 8004a40:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a42:	069f      	lsls	r7, r3, #26
 8004a44:	d526      	bpl.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a46:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8004a4a:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004a4e:	f000 82c6 	beq.w	8004fde <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004a52:	f200 8455 	bhi.w	8005300 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004a56:	b191      	cbz	r1, 8004a7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a58:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8004a5c:	f040 845a 	bne.w	8005314 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a60:	499d      	ldr	r1, [pc, #628]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004a62:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004a64:	f001 0103 	and.w	r1, r1, #3
 8004a68:	2903      	cmp	r1, #3
 8004a6a:	f000 8453 	beq.w	8005314 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8004a6e:	2100      	movs	r1, #0
 8004a70:	f104 0008 	add.w	r0, r4, #8
 8004a74:	f7ff fd16 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8004a78:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a7a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004a7e:	2d00      	cmp	r5, #0
 8004a80:	f040 828e 	bne.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a84:	4f94      	ldr	r7, [pc, #592]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004a86:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8004a8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a8c:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8004a90:	4301      	orrs	r1, r0
 8004a92:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a94:	0658      	lsls	r0, r3, #25
 8004a96:	d526      	bpl.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004a98:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8004a9c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8004aa0:	f000 82af 	beq.w	8005002 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8004aa4:	f200 8464 	bhi.w	8005370 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004aa8:	b191      	cbz	r1, 8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8004aaa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004aae:	f040 8469 	bne.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ab2:	4989      	ldr	r1, [pc, #548]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004ab4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004ab6:	f001 0103 	and.w	r1, r1, #3
 8004aba:	2903      	cmp	r1, #3
 8004abc:	f000 8462 	beq.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	f104 0008 	add.w	r0, r4, #8
 8004ac6:	f7ff fced 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8004aca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004acc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004ad0:	2d00      	cmp	r5, #0
 8004ad2:	f040 8269 	bne.w	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ad6:	4f80      	ldr	r7, [pc, #512]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004ad8:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8004adc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004ade:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8004ae2:	4301      	orrs	r1, r0
 8004ae4:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ae6:	0619      	lsls	r1, r3, #24
 8004ae8:	d526      	bpl.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004aea:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8004aee:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8004af2:	f000 8298 	beq.w	8005026 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004af6:	f200 841f 	bhi.w	8005338 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8004afa:	b191      	cbz	r1, 8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004afc:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8004b00:	f040 8424 	bne.w	800534c <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b04:	4974      	ldr	r1, [pc, #464]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004b06:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004b08:	f001 0103 	and.w	r1, r1, #3
 8004b0c:	2903      	cmp	r1, #3
 8004b0e:	f000 841d 	beq.w	800534c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004b12:	2100      	movs	r1, #0
 8004b14:	f104 0008 	add.w	r0, r4, #8
 8004b18:	f7ff fcc4 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8004b1c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b1e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004b22:	2d00      	cmp	r5, #0
 8004b24:	f040 8244 	bne.w	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b28:	4f6b      	ldr	r7, [pc, #428]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004b2a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8004b2e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b30:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8004b34:	4301      	orrs	r1, r0
 8004b36:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b38:	071f      	lsls	r7, r3, #28
 8004b3a:	d50b      	bpl.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b3c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8004b40:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8004b44:	f000 81d4 	beq.w	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b48:	4f63      	ldr	r7, [pc, #396]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004b4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b4c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8004b50:	4301      	orrs	r1, r0
 8004b52:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b54:	06d8      	lsls	r0, r3, #27
 8004b56:	d50b      	bpl.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b58:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8004b5c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8004b60:	f000 81db 	beq.w	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b64:	4f5c      	ldr	r7, [pc, #368]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004b66:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004b68:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8004b6c:	4301      	orrs	r1, r0
 8004b6e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b70:	0319      	lsls	r1, r3, #12
 8004b72:	d524      	bpl.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 8004b74:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8004b78:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004b7c:	f000 82b1 	beq.w	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004b80:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004b84:	d010      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8004b86:	2900      	cmp	r1, #0
 8004b88:	f040 8130 	bne.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b8c:	4852      	ldr	r0, [pc, #328]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004b8e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8004b90:	f000 0003 	and.w	r0, r0, #3
 8004b94:	2803      	cmp	r0, #3
 8004b96:	f000 8129 	beq.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x788>
 8004b9a:	f104 0008 	add.w	r0, r4, #8
 8004b9e:	f7ff fc81 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8004ba2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ba4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004ba8:	2d00      	cmp	r5, #0
 8004baa:	f040 81ff 	bne.w	8004fac <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bae:	4f4a      	ldr	r7, [pc, #296]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004bb0:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8004bb4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004bb6:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8004bba:	4301      	orrs	r1, r0
 8004bbc:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bbe:	035f      	lsls	r7, r3, #13
 8004bc0:	d50f      	bpl.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 8004bc2:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8004bc6:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004bca:	f000 8277 	beq.w	80050bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8004bce:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8004bd2:	f000 812d 	beq.w	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8004bd6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004bda:	f000 8124 	beq.w	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 8004bde:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004be0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004be2:	03d8      	lsls	r0, r3, #15
 8004be4:	d520      	bpl.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004be6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004be8:	2900      	cmp	r1, #0
 8004bea:	f000 81aa 	beq.w	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8004bee:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004bf2:	f040 80e8 	bne.w	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bf6:	4938      	ldr	r1, [pc, #224]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004bf8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004bfa:	f001 0103 	and.w	r1, r1, #3
 8004bfe:	2903      	cmp	r1, #3
 8004c00:	f000 80e1 	beq.w	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8004c04:	2102      	movs	r1, #2
 8004c06:	f104 0008 	add.w	r0, r4, #8
 8004c0a:	f7ff fc4b 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8004c0e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c10:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004c14:	2d00      	cmp	r5, #0
 8004c16:	f040 819c 	bne.w	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c1a:	4f2f      	ldr	r7, [pc, #188]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004c1c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004c1e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004c20:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8004c24:	4301      	orrs	r1, r0
 8004c26:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c28:	0099      	lsls	r1, r3, #2
 8004c2a:	d50e      	bpl.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c2c:	492a      	ldr	r1, [pc, #168]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004c2e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004c30:	f001 0103 	and.w	r1, r1, #3
 8004c34:	2903      	cmp	r1, #3
 8004c36:	d007      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8004c38:	2102      	movs	r1, #2
 8004c3a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004c3e:	f7ff fca1 	bl	8004584 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c42:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c46:	b100      	cbz	r0, 8004c4a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 8004c48:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c4a:	039f      	lsls	r7, r3, #14
 8004c4c:	f100 80ab 	bmi.w	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 8004c50:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c52:	02d8      	lsls	r0, r3, #11
 8004c54:	d506      	bpl.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c56:	4820      	ldr	r0, [pc, #128]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004c58:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8004c5a:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8004c5c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004c60:	4331      	orrs	r1, r6
 8004c62:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c64:	00d9      	lsls	r1, r3, #3
 8004c66:	d507      	bpl.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c68:	481b      	ldr	r0, [pc, #108]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004c6a:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8004c6e:	6901      	ldr	r1, [r0, #16]
 8004c70:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004c74:	4331      	orrs	r1, r6
 8004c76:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c78:	029f      	lsls	r7, r3, #10
 8004c7a:	d506      	bpl.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c7c:	4816      	ldr	r0, [pc, #88]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004c7e:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8004c80:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8004c82:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8004c86:	4331      	orrs	r1, r6
 8004c88:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c8a:	005e      	lsls	r6, r3, #1
 8004c8c:	d509      	bpl.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c8e:	4912      	ldr	r1, [pc, #72]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004c90:	6908      	ldr	r0, [r1, #16]
 8004c92:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8004c96:	6108      	str	r0, [r1, #16]
 8004c98:	6908      	ldr	r0, [r1, #16]
 8004c9a:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 8004c9e:	4330      	orrs	r0, r6
 8004ca0:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	da06      	bge.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ca6:	480c      	ldr	r0, [pc, #48]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004ca8:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8004caa:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004cac:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8004cb0:	4331      	orrs	r1, r6
 8004cb2:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cb4:	0218      	lsls	r0, r3, #8
 8004cb6:	d507      	bpl.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cb8:	4907      	ldr	r1, [pc, #28]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004cba:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8004cbe:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8004cc0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004cc4:	4303      	orrs	r3, r0
 8004cc6:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004cc8:	07d1      	lsls	r1, r2, #31
 8004cca:	d511      	bpl.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ccc:	4b02      	ldr	r3, [pc, #8]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	e001      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004cd8:	58024400 	.word	0x58024400
 8004cdc:	f000 835c 	beq.w	8005398 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	f104 0008 	add.w	r0, r4, #8
 8004ce6:	f7ff fbdd 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004cea:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004cec:	b100      	cbz	r0, 8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004cee:	4605      	mov	r5, r0
 8004cf0:	0793      	lsls	r3, r2, #30
 8004cf2:	d50e      	bpl.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cf4:	4baf      	ldr	r3, [pc, #700]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	f000 834d 	beq.w	800539c <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8004d02:	2101      	movs	r1, #1
 8004d04:	f104 0008 	add.w	r0, r4, #8
 8004d08:	f7ff fbcc 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d0c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004d0e:	b100      	cbz	r0, 8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d10:	4605      	mov	r5, r0
 8004d12:	0757      	lsls	r7, r2, #29
 8004d14:	d50e      	bpl.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d16:	4ba7      	ldr	r3, [pc, #668]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	f000 833e 	beq.w	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8004d24:	2102      	movs	r1, #2
 8004d26:	f104 0008 	add.w	r0, r4, #8
 8004d2a:	f7ff fbbb 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d2e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004d30:	b100      	cbz	r0, 8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d32:	4605      	mov	r5, r0
 8004d34:	0716      	lsls	r6, r2, #28
 8004d36:	d50e      	bpl.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d38:	4b9e      	ldr	r3, [pc, #632]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	f000 8323 	beq.w	800538c <HAL_RCCEx_PeriphCLKConfig+0xd28>
 8004d46:	2100      	movs	r1, #0
 8004d48:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004d4c:	f7ff fc1a 	bl	8004584 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d50:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004d52:	b100      	cbz	r0, 8004d56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d54:	4605      	mov	r5, r0
 8004d56:	06d0      	lsls	r0, r2, #27
 8004d58:	d50f      	bpl.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d5a:	4b96      	ldr	r3, [pc, #600]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	f000 8314 	beq.w	8005390 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 8004d68:	2101      	movs	r1, #1
 8004d6a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004d6e:	f7ff fc09 	bl	8004584 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8004d72:	2800      	cmp	r0, #0
 8004d74:	f040 8359 	bne.w	800542a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d78:	6862      	ldr	r2, [r4, #4]
 8004d7a:	0693      	lsls	r3, r2, #26
 8004d7c:	d50e      	bpl.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d7e:	4b8d      	ldr	r3, [pc, #564]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	f000 82b7 	beq.w	80052fa <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004d92:	f7ff fbf7 	bl	8004584 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f040 82af 	bne.w	80052fa <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 8004d9c:	1e28      	subs	r0, r5, #0
 8004d9e:	bf18      	it	ne
 8004da0:	2001      	movne	r0, #1
}
 8004da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 8004da6:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8004daa:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004dae:	f000 80d2 	beq.w	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8004db2:	f240 8110 	bls.w	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004db6:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8004dba:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004dbe:	f000 80cf 	beq.w	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8004dc2:	2501      	movs	r5, #1
 8004dc4:	e745      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 8004dc6:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004dc8:	4635      	mov	r5, r6
 8004dca:	e72d      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dcc:	4879      	ldr	r0, [pc, #484]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004dce:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004dd0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004dd4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004dd6:	2d00      	cmp	r5, #0
 8004dd8:	f040 80ce 	bne.w	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ddc:	4f75      	ldr	r7, [pc, #468]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004dde:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004de0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004de2:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8004de6:	4301      	orrs	r1, r0
 8004de8:	6539      	str	r1, [r7, #80]	@ 0x50
 8004dea:	e598      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8004dec:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004dee:	4635      	mov	r5, r6
 8004df0:	e6e5      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004df2:	4970      	ldr	r1, [pc, #448]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004df4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004df6:	f001 0103 	and.w	r1, r1, #3
 8004dfa:	2903      	cmp	r1, #3
 8004dfc:	f43f adda 	beq.w	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004e00:	2101      	movs	r1, #1
 8004e02:	f104 0008 	add.w	r0, r4, #8
 8004e06:	f7ff fb4d 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8004e0a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e0c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004e10:	2d00      	cmp	r5, #0
 8004e12:	f040 80d5 	bne.w	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e16:	4f67      	ldr	r7, [pc, #412]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004e18:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8004e1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e1c:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8004e20:	4301      	orrs	r1, r0
 8004e22:	6579      	str	r1, [r7, #84]	@ 0x54
 8004e24:	e5c8      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e26:	4863      	ldr	r0, [pc, #396]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004e28:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004e2a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004e2e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004e30:	2d00      	cmp	r5, #0
 8004e32:	f040 809f 	bne.w	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e36:	4f5f      	ldr	r7, [pc, #380]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004e38:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8004e3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e3e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8004e42:	4301      	orrs	r1, r0
 8004e44:	6579      	str	r1, [r7, #84]	@ 0x54
 8004e46:	e6cc      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e48:	4f5b      	ldr	r7, [pc, #364]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e50:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004e52:	f7fc f8ed 	bl	8001030 <HAL_GetTick>
 8004e56:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e58:	e006      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5a:	f7fc f8e9 	bl	8001030 <HAL_GetTick>
 8004e5e:	eba0 0008 	sub.w	r0, r0, r8
 8004e62:	2864      	cmp	r0, #100	@ 0x64
 8004e64:	f200 82db 	bhi.w	800541e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	05da      	lsls	r2, r3, #23
 8004e6c:	d5f5      	bpl.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	f040 82d6 	bne.w	8005420 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004e74:	4a4f      	ldr	r2, [pc, #316]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004e76:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8004e7a:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004e7c:	4059      	eors	r1, r3
 8004e7e:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8004e82:	d00b      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e84:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e86:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e88:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e8c:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8004e90:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e92:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8004e94:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8004e98:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8004e9a:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ea0:	f000 82fb 	beq.w	800549a <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ea4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004ea8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8004eac:	f000 8309 	beq.w	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 8004eb0:	4940      	ldr	r1, [pc, #256]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004eb2:	690a      	ldr	r2, [r1, #16]
 8004eb4:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004eb8:	610a      	str	r2, [r1, #16]
 8004eba:	483e      	ldr	r0, [pc, #248]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004ebc:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8004ec0:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8004ec2:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ec4:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec8:	6701      	str	r1, [r0, #112]	@ 0x70
 8004eca:	e543      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ecc:	4839      	ldr	r0, [pc, #228]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004ece:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004ed0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004ed4:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004ed6:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8004ed8:	2d00      	cmp	r5, #0
 8004eda:	f040 8177 	bne.w	80051cc <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ede:	4f35      	ldr	r7, [pc, #212]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ee2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ee4:	f021 0107 	bic.w	r1, r1, #7
 8004ee8:	4301      	orrs	r1, r0
 8004eea:	6539      	str	r1, [r7, #80]	@ 0x50
 8004eec:	f7ff bbf6 	b.w	80046dc <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ef0:	4930      	ldr	r1, [pc, #192]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004ef2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004ef4:	f001 0103 	and.w	r1, r1, #3
 8004ef8:	2903      	cmp	r1, #3
 8004efa:	f000 82ba 	beq.w	8005472 <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 8004efe:	2102      	movs	r1, #2
 8004f00:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004f04:	f7ff fb3e 	bl	8004584 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	f000 82b5 	beq.w	8005478 <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f0e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 8004f12:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f14:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f18:	e616      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f1a:	4926      	ldr	r1, [pc, #152]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004f1c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004f1e:	f001 0103 	and.w	r1, r1, #3
 8004f22:	2903      	cmp	r1, #3
 8004f24:	f000 82a2 	beq.w	800546c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8004f28:	2102      	movs	r1, #2
 8004f2a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004f2e:	f7ff fb29 	bl	8004584 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f32:	2800      	cmp	r0, #0
 8004f34:	f040 82a6 	bne.w	8005484 <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f38:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f3c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004f40:	e610      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f42:	481c      	ldr	r0, [pc, #112]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004f44:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004f46:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004f4a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004f4c:	2d00      	cmp	r5, #0
 8004f4e:	f43f ae64 	beq.w	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 8004f52:	462e      	mov	r6, r5
 8004f54:	e668      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f56:	4f17      	ldr	r7, [pc, #92]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f5a:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8004f5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004f60:	2d00      	cmp	r5, #0
 8004f62:	f47f ae76 	bne.w	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f66:	4d13      	ldr	r5, [pc, #76]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004f68:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8004f6a:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8004f6e:	4301      	orrs	r1, r0
 8004f70:	6569      	str	r1, [r5, #84]	@ 0x54
 8004f72:	e66d      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 8004f74:	462e      	mov	r6, r5
 8004f76:	e634      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 8004f78:	462e      	mov	r6, r5
 8004f7a:	e4d0      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8004f7c:	462e      	mov	r6, r5
 8004f7e:	e445      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f80:	4f0c      	ldr	r7, [pc, #48]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004f82:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004f84:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004f86:	f021 0103 	bic.w	r1, r1, #3
 8004f8a:	4301      	orrs	r1, r0
 8004f8c:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8004f8e:	e4de      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f90:	4f08      	ldr	r7, [pc, #32]	@ (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8004f92:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8004f94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f96:	f021 0107 	bic.w	r1, r1, #7
 8004f9a:	4301      	orrs	r1, r0
 8004f9c:	6579      	str	r1, [r7, #84]	@ 0x54
 8004f9e:	e52c      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 8004fa0:	462e      	mov	r6, r5
 8004fa2:	e577      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 8004fa4:	462e      	mov	r6, r5
 8004fa6:	e4aa      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 8004fa8:	462e      	mov	r6, r5
 8004faa:	e59c      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 8004fac:	462e      	mov	r6, r5
 8004fae:	e606      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 8004fb0:	462e      	mov	r6, r5
 8004fb2:	e5c1      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004fb4:	58024400 	.word	0x58024400
 8004fb8:	58024800 	.word	0x58024800
      status = ret;
 8004fbc:	462e      	mov	r6, r5
 8004fbe:	e475      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 8004fc0:	462e      	mov	r6, r5
 8004fc2:	e4f9      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fc4:	4fc2      	ldr	r7, [pc, #776]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8004fc6:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8004fca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004fcc:	f021 0107 	bic.w	r1, r1, #7
 8004fd0:	4301      	orrs	r1, r0
 8004fd2:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004fd4:	e535      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 8004fd6:	2900      	cmp	r1, #0
 8004fd8:	f47f aef3 	bne.w	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8004fdc:	e7c0      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fde:	49bc      	ldr	r1, [pc, #752]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8004fe0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004fe2:	f001 0103 	and.w	r1, r1, #3
 8004fe6:	2903      	cmp	r1, #3
 8004fe8:	f000 8194 	beq.w	8005314 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8004fec:	2102      	movs	r1, #2
 8004fee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8004ff2:	f7ff fac7 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 8004ff6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004ff8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004ffc:	2d00      	cmp	r5, #0
 8004ffe:	d1cf      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8005000:	e540      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005002:	49b3      	ldr	r1, [pc, #716]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005004:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005006:	f001 0103 	and.w	r1, r1, #3
 800500a:	2903      	cmp	r1, #3
 800500c:	f000 81ba 	beq.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005010:	2102      	movs	r1, #2
 8005012:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005016:	f7ff fab5 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 800501a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800501c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005020:	2d00      	cmp	r5, #0
 8005022:	d1c1      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8005024:	e557      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005026:	49aa      	ldr	r1, [pc, #680]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005028:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800502a:	f001 0103 	and.w	r1, r1, #3
 800502e:	2903      	cmp	r1, #3
 8005030:	f000 818c 	beq.w	800534c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005034:	2102      	movs	r1, #2
 8005036:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800503a:	f7ff faa3 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 800503e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005040:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005044:	2d00      	cmp	r5, #0
 8005046:	d1b3      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8005048:	e56e      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800504a:	49a1      	ldr	r1, [pc, #644]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800504c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800504e:	f001 0103 	and.w	r1, r1, #3
 8005052:	2903      	cmp	r1, #3
 8005054:	f000 81df 	beq.w	8005416 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 8005058:	2102      	movs	r1, #2
 800505a:	f104 0008 	add.w	r0, r4, #8
 800505e:	f7ff fa21 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8005062:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005064:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005068:	2d00      	cmp	r5, #0
 800506a:	d187      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x918>
 800506c:	f7ff bbc7 	b.w	80047fe <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005070:	4997      	ldr	r1, [pc, #604]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005072:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005074:	f001 0103 	and.w	r1, r1, #3
 8005078:	2903      	cmp	r1, #3
 800507a:	f000 820a 	beq.w	8005492 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800507e:	2102      	movs	r1, #2
 8005080:	f104 0008 	add.w	r0, r4, #8
 8005084:	f7ff fa0e 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 8005088:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800508a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800508e:	2d00      	cmp	r5, #0
 8005090:	f47f ac5c 	bne.w	800494c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005094:	e774      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005096:	498e      	ldr	r1, [pc, #568]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005098:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800509a:	f001 0103 	and.w	r1, r1, #3
 800509e:	2903      	cmp	r1, #3
 80050a0:	f000 8146 	beq.w	8005330 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80050a4:	2101      	movs	r1, #1
 80050a6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80050aa:	f7ff fa6b 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 80050ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	d181      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x958>
 80050b8:	f7ff bbf1 	b.w	800489e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050bc:	4984      	ldr	r1, [pc, #528]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80050be:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80050c0:	f001 0103 	and.w	r1, r1, #3
 80050c4:	2903      	cmp	r1, #3
 80050c6:	f43f ad8a 	beq.w	8004bde <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80050ca:	2101      	movs	r1, #1
 80050cc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80050d0:	f7ff fa58 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 80050d4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80050d6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80050da:	2d00      	cmp	r5, #0
 80050dc:	f47f af4a 	bne.w	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80050e0:	e6a9      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050e2:	497b      	ldr	r1, [pc, #492]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80050e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80050e6:	f001 0103 	and.w	r1, r1, #3
 80050ea:	2903      	cmp	r1, #3
 80050ec:	f43f ae7e 	beq.w	8004dec <HAL_RCCEx_PeriphCLKConfig+0x788>
 80050f0:	2102      	movs	r1, #2
 80050f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80050f6:	f7ff fa45 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 80050fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005100:	2d00      	cmp	r5, #0
 8005102:	f47f af53 	bne.w	8004fac <HAL_RCCEx_PeriphCLKConfig+0x948>
 8005106:	e552      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005108:	4971      	ldr	r1, [pc, #452]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800510a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800510c:	f001 0103 	and.w	r1, r1, #3
 8005110:	2903      	cmp	r1, #3
 8005112:	f000 8129 	beq.w	8005368 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8005116:	2101      	movs	r1, #1
 8005118:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800511c:	f7ff fa32 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 8005120:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005122:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005126:	2d00      	cmp	r5, #0
 8005128:	f47f af3c 	bne.w	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x940>
 800512c:	f7ff bbdf 	b.w	80048ee <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005130:	4867      	ldr	r0, [pc, #412]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005132:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005134:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005138:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800513a:	2d00      	cmp	r5, #0
 800513c:	f43f ab88 	beq.w	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 8005140:	462e      	mov	r6, r5
 8005142:	f7ff bb8c 	b.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005146:	4862      	ldr	r0, [pc, #392]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005148:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800514a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800514e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005150:	2d00      	cmp	r5, #0
 8005152:	f43f ab38 	beq.w	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 8005156:	462e      	mov	r6, r5
 8005158:	f7ff bb3d 	b.w	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800515c:	495c      	ldr	r1, [pc, #368]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800515e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005160:	f001 0103 	and.w	r1, r1, #3
 8005164:	2903      	cmp	r1, #3
 8005166:	f000 8125 	beq.w	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 800516a:	2100      	movs	r1, #0
 800516c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005170:	f7ff fa08 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 8005174:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005176:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800517a:	f7ff bb66 	b.w	800484a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800517e:	4954      	ldr	r1, [pc, #336]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005180:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005182:	f001 0103 	and.w	r1, r1, #3
 8005186:	2903      	cmp	r1, #3
 8005188:	f000 813e 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 800518c:	2100      	movs	r1, #0
 800518e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005192:	f7ff f9f7 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 8005196:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005198:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800519c:	2d00      	cmp	r5, #0
 800519e:	f43f aabd 	beq.w	800471c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 80051a2:	462e      	mov	r6, r5
 80051a4:	f7ff bac1 	b.w	800472a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051a8:	4949      	ldr	r1, [pc, #292]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80051aa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80051ac:	f001 0103 	and.w	r1, r1, #3
 80051b0:	2903      	cmp	r1, #3
 80051b2:	f43f aa91 	beq.w	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80051b6:	2100      	movs	r1, #0
 80051b8:	f104 0008 	add.w	r0, r4, #8
 80051bc:	f7ff f972 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 80051c0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80051c2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80051c6:	2d00      	cmp	r5, #0
 80051c8:	f43f ae89 	beq.w	8004ede <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 80051cc:	462e      	mov	r6, r5
 80051ce:	f7ff ba85 	b.w	80046dc <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051d2:	493f      	ldr	r1, [pc, #252]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80051d4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80051d6:	f001 0103 	and.w	r1, r1, #3
 80051da:	2903      	cmp	r1, #3
 80051dc:	f43f aa7c 	beq.w	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80051e0:	2100      	movs	r1, #0
 80051e2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80051e6:	f7ff f9cd 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 80051ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80051ec:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80051f0:	e672      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051f2:	4937      	ldr	r1, [pc, #220]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80051f4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80051f6:	f001 0103 	and.w	r1, r1, #3
 80051fa:	2903      	cmp	r1, #3
 80051fc:	f000 80f9 	beq.w	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005200:	2100      	movs	r1, #0
 8005202:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005206:	f7ff f9bd 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 800520a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800520c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005210:	2d00      	cmp	r5, #0
 8005212:	f43f aaad 	beq.w	8004770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 8005216:	462e      	mov	r6, r5
 8005218:	f7ff bab2 	b.w	8004780 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800521c:	492c      	ldr	r1, [pc, #176]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800521e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005220:	f001 0103 	and.w	r1, r1, #3
 8005224:	2903      	cmp	r1, #3
 8005226:	f000 80d1 	beq.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd68>
 800522a:	2100      	movs	r1, #0
 800522c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005230:	f7ff f9a8 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 8005234:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005236:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800523a:	f7ff bac1 	b.w	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800523e:	4924      	ldr	r1, [pc, #144]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005240:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005242:	f001 0103 	and.w	r1, r1, #3
 8005246:	2903      	cmp	r1, #3
 8005248:	f000 80c8 	beq.w	80053dc <HAL_RCCEx_PeriphCLKConfig+0xd78>
 800524c:	2102      	movs	r1, #2
 800524e:	3028      	adds	r0, #40	@ 0x28
 8005250:	f7ff f998 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 8005254:	4606      	mov	r6, r0
        break;
 8005256:	f7ff ba28 	b.w	80046aa <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525a:	481d      	ldr	r0, [pc, #116]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800525c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800525e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005262:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8005264:	f7ff ba81 	b.w	800476a <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005268:	4819      	ldr	r0, [pc, #100]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800526a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800526c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005270:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8005272:	f7ff ba50 	b.w	8004716 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005276:	4d16      	ldr	r5, [pc, #88]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005278:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800527a:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800527e:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005280:	f7ff ba17 	b.w	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005284:	4912      	ldr	r1, [pc, #72]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005286:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005288:	f001 0103 	and.w	r1, r1, #3
 800528c:	2903      	cmp	r1, #3
 800528e:	f000 80e5 	beq.w	800545c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8005292:	2101      	movs	r1, #1
 8005294:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005298:	f7ff f974 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 800529c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800529e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052a2:	2d00      	cmp	r5, #0
 80052a4:	f47f abcc 	bne.w	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80052a8:	e68c      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052aa:	4909      	ldr	r1, [pc, #36]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80052ac:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80052ae:	f001 0103 	and.w	r1, r1, #3
 80052b2:	2903      	cmp	r1, #3
 80052b4:	f000 80d6 	beq.w	8005464 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 80052b8:	2101      	movs	r1, #1
 80052ba:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80052be:	f7ff f961 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 80052c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	f47f ab95 	bne.w	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80052ce:	e65f      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 80052d0:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052d4:	4983      	ldr	r1, [pc, #524]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 80052d6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80052d8:	f001 0103 	and.w	r1, r1, #3
 80052dc:	2903      	cmp	r1, #3
 80052de:	f43f ab69 	beq.w	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80052e2:	2101      	movs	r1, #1
 80052e4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80052e8:	f7ff f94c 	bl	8004584 <RCCEx_PLL3_Config.part.0>
 80052ec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	f47f ae64 	bne.w	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80052f8:	e58d      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 80052fa:	2001      	movs	r0, #1
}
 80052fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005300:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8005304:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005308:	f43f abb9 	beq.w	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800530c:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8005310:	f43f abb5 	beq.w	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 8005314:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005316:	4635      	mov	r5, r6
 8005318:	f7ff bbbc 	b.w	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 800531c:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8005320:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8005324:	f43f aab8 	beq.w	8004898 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005328:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 800532c:	f43f aab4 	beq.w	8004898 <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 8005330:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005332:	4635      	mov	r5, r6
 8005334:	f7ff baba 	b.w	80048ac <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005338:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 800533c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005340:	f43f abef 	beq.w	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005344:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8005348:	f43f abeb 	beq.w	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 800534c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800534e:	4635      	mov	r5, r6
 8005350:	f7ff bbf2 	b.w	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8005354:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8005358:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800535c:	f43f aac4 	beq.w	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8005360:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8005364:	f43f aac0 	beq.w	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 8005368:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800536a:	4635      	mov	r5, r6
 800536c:	f7ff bac7 	b.w	80048fe <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005370:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8005374:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8005378:	f43f abaa 	beq.w	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 800537c:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8005380:	f43f aba6 	beq.w	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 8005384:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005386:	4635      	mov	r5, r6
 8005388:	f7ff bbad 	b.w	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 800538c:	2501      	movs	r5, #1
 800538e:	e4e2      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005390:	0691      	lsls	r1, r2, #26
 8005392:	d5b2      	bpl.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 8005394:	2501      	movs	r5, #1
 8005396:	e4f2      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 8005398:	2501      	movs	r5, #1
 800539a:	e4a9      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800539c:	2501      	movs	r5, #1
 800539e:	e4b8      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80053a0:	2501      	movs	r5, #1
 80053a2:	e4c7      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 80053a4:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 80053a8:	f43f aa4f 	beq.w	800484a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 80053ac:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 80053b0:	f43f aa4b 	beq.w	800484a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 80053b4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80053b6:	4635      	mov	r5, r6
 80053b8:	f7ff ba51 	b.w	800485e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 80053bc:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80053c0:	f43f a9fe 	beq.w	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80053c4:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 80053c8:	f43f a9fa 	beq.w	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 80053cc:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80053ce:	4635      	mov	r5, r6
 80053d0:	f7ff ba01 	b.w	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80053d4:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 80053d8:	f43f a96b 	beq.w	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 80053dc:	2601      	movs	r6, #1
 80053de:	f7ff b96f 	b.w	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 80053e2:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 80053e6:	f43f a9c0 	beq.w	800476a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053ea:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80053ee:	f43f a9bc 	beq.w	800476a <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 80053f2:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80053f4:	4635      	mov	r5, r6
 80053f6:	f7ff b9c3 	b.w	8004780 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 80053fa:	29c0      	cmp	r1, #192	@ 0xc0
 80053fc:	f43f a98b 	beq.w	8004716 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8005400:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005404:	f43f a987 	beq.w	8004716 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 8005408:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800540a:	4635      	mov	r5, r6
 800540c:	f7ff b98d 	b.w	800472a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 8005410:	2930      	cmp	r1, #48	@ 0x30
 8005412:	f43f a9f1 	beq.w	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 8005416:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005418:	4635      	mov	r5, r6
 800541a:	f7ff b9f7 	b.w	800480c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 800541e:	2503      	movs	r5, #3
      status = ret;
 8005420:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005422:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005426:	f7ff ba95 	b.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800542a:	6863      	ldr	r3, [r4, #4]
 800542c:	069a      	lsls	r2, r3, #26
 800542e:	f57f af64 	bpl.w	80052fa <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005432:	4605      	mov	r5, r0
 8005434:	e4a3      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005436:	492b      	ldr	r1, [pc, #172]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005438:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800543a:	f001 0103 	and.w	r1, r1, #3
 800543e:	2903      	cmp	r1, #3
 8005440:	f43f aa6b 	beq.w	800491a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8005444:	2101      	movs	r1, #1
 8005446:	f104 0008 	add.w	r0, r4, #8
 800544a:	f7ff f82b 	bl	80044a4 <RCCEx_PLL2_Config.part.0>
 800544e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005450:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005454:	2d00      	cmp	r5, #0
 8005456:	f47f ad8f 	bne.w	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800545a:	e4bf      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 800545c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800545e:	4635      	mov	r5, r6
 8005460:	f7ff baef 	b.w	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 8005464:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005466:	4635      	mov	r5, r6
 8005468:	f7ff bac7 	b.w	80049fa <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 800546c:	2601      	movs	r6, #1
 800546e:	f7ff bb79 	b.w	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 8005472:	2601      	movs	r6, #1
 8005474:	f7ff bb68 	b.w	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005478:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800547c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005480:	f7ff bb62 	b.w	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005484:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 8005488:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800548a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800548e:	f7ff bb69 	b.w	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 8005492:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005494:	4635      	mov	r5, r6
 8005496:	f7ff ba5a 	b.w	800494e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 800549a:	f7fb fdc9 	bl	8001030 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800549e:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 80054e4 <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 80054a2:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a4:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054a8:	e004      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054aa:	f7fb fdc1 	bl	8001030 <HAL_GetTick>
 80054ae:	1bc0      	subs	r0, r0, r7
 80054b0:	4548      	cmp	r0, r9
 80054b2:	d810      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054b4:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80054b8:	079b      	lsls	r3, r3, #30
 80054ba:	d5f6      	bpl.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054bc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80054c0:	e4f0      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80054c2:	4808      	ldr	r0, [pc, #32]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 80054c4:	4a08      	ldr	r2, [pc, #32]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 80054c6:	6901      	ldr	r1, [r0, #16]
 80054c8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80054cc:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 80054d0:	430a      	orrs	r2, r1
 80054d2:	6102      	str	r2, [r0, #16]
 80054d4:	e4f1      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 80054d6:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054dc:	4635      	mov	r5, r6
 80054de:	f7ff ba39 	b.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80054e2:	bf00      	nop
 80054e4:	58024400 	.word	0x58024400
 80054e8:	00ffffcf 	.word	0x00ffffcf

080054ec <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054ec:	4a47      	ldr	r2, [pc, #284]	@ (800560c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 80054ee:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054f0:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80054f2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054f4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 80054f6:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80054fa:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80054fe:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8005500:	d05b      	beq.n	80055ba <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005502:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005506:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800550a:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800550e:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005512:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005516:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005518:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800551c:	ee06 1a90 	vmov	s13, r1
 8005520:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005524:	d003      	beq.n	800552e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8005526:	2c02      	cmp	r4, #2
 8005528:	d06a      	beq.n	8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 800552a:	2c00      	cmp	r4, #0
 800552c:	d04a      	beq.n	80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800552e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005532:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005536:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005548:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800554c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005550:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005554:	4a2d      	ldr	r2, [pc, #180]	@ (800560c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8005556:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800555a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800555c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005560:	ee07 3a10 	vmov	s14, r3
 8005564:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005568:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800556a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800556e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005572:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005576:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800557a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800557c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005580:	ee07 3a10 	vmov	s14, r3
 8005584:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005588:	ee37 7a06 	vadd.f32	s14, s14, s12
 800558c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005590:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005594:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005598:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800559a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800559e:	ee06 3a90 	vmov	s13, r3
 80055a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80055a6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80055aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80055ae:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80055b2:	ee17 3a90 	vmov	r3, s15
 80055b6:	6083      	str	r3, [r0, #8]
}
 80055b8:	4770      	bx	lr
 80055ba:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80055bc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80055c0:	6083      	str	r3, [r0, #8]
}
 80055c2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055c4:	6813      	ldr	r3, [r2, #0]
 80055c6:	069b      	lsls	r3, r3, #26
 80055c8:	d51d      	bpl.n	8005606 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055ca:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80055d0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055d2:	4910      	ldr	r1, [pc, #64]	@ (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 80055d4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055dc:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055de:	ee06 3a10 	vmov	s12, r3
 80055e2:	ee05 1a90 	vmov	s11, r1
 80055e6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80055ea:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80055ee:	ee36 6a27 	vadd.f32	s12, s12, s15
 80055f2:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80055f6:	ee36 7a26 	vadd.f32	s14, s12, s13
 80055fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055fe:	e7a9      	b.n	8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005600:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8005604:	e795      	b.n	8005532 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005606:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800561c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 800560a:	e792      	b.n	8005532 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800560c:	58024400 	.word	0x58024400
 8005610:	4a742400 	.word	0x4a742400
 8005614:	03d09000 	.word	0x03d09000
 8005618:	4bbebc20 	.word	0x4bbebc20
 800561c:	4c742400 	.word	0x4c742400

08005620 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005620:	4a47      	ldr	r2, [pc, #284]	@ (8005740 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8005622:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005624:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005626:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005628:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 800562a:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800562e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005632:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8005634:	d05b      	beq.n	80056ee <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005636:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800563a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800563e:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005642:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005646:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800564a:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800564c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005650:	ee06 1a90 	vmov	s13, r1
 8005654:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005658:	d003      	beq.n	8005662 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 800565a:	2c02      	cmp	r4, #2
 800565c:	d06a      	beq.n	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 800565e:	2c00      	cmp	r4, #0
 8005660:	d04a      	beq.n	80056f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005662:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005744 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005666:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800566a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800566c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800567c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005684:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005688:	4a2d      	ldr	r2, [pc, #180]	@ (8005740 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 800568a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800568e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005690:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005694:	ee07 3a10 	vmov	s14, r3
 8005698:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800569c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800569e:	ee37 7a06 	vadd.f32	s14, s14, s12
 80056a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80056a6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80056aa:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80056ae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80056b0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80056b4:	ee07 3a10 	vmov	s14, r3
 80056b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80056bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80056c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80056c4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80056c8:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80056cc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80056ce:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80056d2:	ee06 3a90 	vmov	s13, r3
 80056d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80056da:	ee76 6a86 	vadd.f32	s13, s13, s12
 80056de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80056e2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80056e6:	ee17 3a90 	vmov	r3, s15
 80056ea:	6083      	str	r3, [r0, #8]
}
 80056ec:	4770      	bx	lr
 80056ee:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056f0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80056f4:	6083      	str	r3, [r0, #8]
}
 80056f6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056f8:	6813      	ldr	r3, [r2, #0]
 80056fa:	069b      	lsls	r3, r3, #26
 80056fc:	d51d      	bpl.n	800573a <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056fe:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005700:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005704:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005706:	4910      	ldr	r1, [pc, #64]	@ (8005748 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8005708:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800570c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005710:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005712:	ee06 3a10 	vmov	s12, r3
 8005716:	ee05 1a90 	vmov	s11, r1
 800571a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800571e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005722:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005726:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800572a:	ee36 7a26 	vadd.f32	s14, s12, s13
 800572e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005732:	e7a9      	b.n	8005688 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005734:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800574c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8005738:	e795      	b.n	8005666 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800573a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005750 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 800573e:	e792      	b.n	8005666 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8005740:	58024400 	.word	0x58024400
 8005744:	4a742400 	.word	0x4a742400
 8005748:	03d09000 	.word	0x03d09000
 800574c:	4bbebc20 	.word	0x4bbebc20
 8005750:	4c742400 	.word	0x4c742400

08005754 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005754:	4a47      	ldr	r2, [pc, #284]	@ (8005874 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8005756:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005758:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800575a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800575c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 800575e:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005762:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005766:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8005768:	d05b      	beq.n	8005822 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800576a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800576e:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005772:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005776:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800577a:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800577e:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005780:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005784:	ee06 1a90 	vmov	s13, r1
 8005788:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800578c:	d04e      	beq.n	800582c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800578e:	2c02      	cmp	r4, #2
 8005790:	d06d      	beq.n	800586e <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8005792:	2c00      	cmp	r4, #0
 8005794:	d04d      	beq.n	8005832 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005796:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005878 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800579a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800579e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80057a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a4:	ee07 3a90 	vmov	s15, r3
 80057a8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80057ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057b0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80057b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80057bc:	4a2d      	ldr	r2, [pc, #180]	@ (8005874 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 80057be:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80057c2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80057c4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80057c8:	ee07 3a10 	vmov	s14, r3
 80057cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 80057d0:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80057d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80057d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80057da:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80057de:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80057e2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80057e4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80057e8:	ee07 3a10 	vmov	s14, r3
 80057ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80057f0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80057f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80057f8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80057fc:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005800:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005802:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005806:	ee06 3a90 	vmov	s13, r3
 800580a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800580e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005812:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005816:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800581a:	ee17 3a90 	vmov	r3, s15
 800581e:	6083      	str	r3, [r0, #8]
}
 8005820:	4770      	bx	lr
 8005822:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005824:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005828:	6083      	str	r3, [r0, #8]
}
 800582a:	4770      	bx	lr
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800582c:	eddf 7a13 	vldr	s15, [pc, #76]	@ 800587c <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 8005830:	e7b3      	b.n	800579a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005832:	6813      	ldr	r3, [r2, #0]
 8005834:	069b      	lsls	r3, r3, #26
 8005836:	d5ae      	bpl.n	8005796 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005838:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800583a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800583e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005840:	490f      	ldr	r1, [pc, #60]	@ (8005880 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>)
 8005842:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005846:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800584a:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800584c:	ee06 3a10 	vmov	s12, r3
 8005850:	ee05 1a90 	vmov	s11, r1
 8005854:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005858:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800585c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005860:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005864:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800586c:	e7a6      	b.n	80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800586e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005884 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8005872:	e792      	b.n	800579a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8005874:	58024400 	.word	0x58024400
 8005878:	4c742400 	.word	0x4c742400
 800587c:	4a742400 	.word	0x4a742400
 8005880:	03d09000 	.word	0x03d09000
 8005884:	4bbebc20 	.word	0x4bbebc20

08005888 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005888:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 800588c:	430b      	orrs	r3, r1
{
 800588e:	b500      	push	{lr}
 8005890:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005892:	d04c      	beq.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005894:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8005898:	430b      	orrs	r3, r1
 800589a:	d036      	beq.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800589c:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 80058a0:	430b      	orrs	r3, r1
 80058a2:	d06c      	beq.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80058a4:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 80058a8:	430b      	orrs	r3, r1
 80058aa:	d04b      	beq.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80058ac:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 80058b0:	430b      	orrs	r3, r1
 80058b2:	f000 80b6 	beq.w	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80058b6:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 80058ba:	430b      	orrs	r3, r1
 80058bc:	f000 80ec 	beq.w	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80058c0:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 80058c4:	430b      	orrs	r3, r1
 80058c6:	d069      	beq.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80058c8:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 80058cc:	430b      	orrs	r3, r1
 80058ce:	f000 80d6 	beq.w	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80058d2:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 80058d6:	430b      	orrs	r3, r1
 80058d8:	f000 8109 	beq.w	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x266>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80058dc:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 80058e0:	4308      	orrs	r0, r1
 80058e2:	d120      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80058e4:	4a95      	ldr	r2, [pc, #596]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058e6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80058e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 80058ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058f0:	f000 80aa 	beq.w	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 80058f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058f8:	f000 8116 	beq.w	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80058fc:	b99b      	cbnz	r3, 8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80058fe:	6810      	ldr	r0, [r2, #0]
 8005900:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005904:	d047      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8005906:	488e      	ldr	r0, [pc, #568]	@ (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
  return frequency;
 8005908:	e045      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800590a:	4a8c      	ldr	r2, [pc, #560]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800590c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800590e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 8005912:	2b80      	cmp	r3, #128	@ 0x80
 8005914:	f000 8093 	beq.w	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8005918:	f240 808b 	bls.w	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800591c:	2bc0      	cmp	r3, #192	@ 0xc0
 800591e:	d039      	beq.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005924:	d05c      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
          frequency = 0;
 8005926:	2000      	movs	r0, #0
}
 8005928:	b005      	add	sp, #20
 800592a:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800592e:	4b83      	ldr	r3, [pc, #524]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005932:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8005936:	2b04      	cmp	r3, #4
 8005938:	d8f5      	bhi.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800593a:	e8df f003 	tbb	[pc, r3]
 800593e:	3c68      	.short	0x3c68
 8005940:	2b46      	.short	0x2b46
 8005942:	50          	.byte	0x50
 8005943:	00          	.byte	0x00
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005944:	4a7d      	ldr	r2, [pc, #500]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005946:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005948:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 800594c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005950:	d075      	beq.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8005952:	d96e      	bls.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005954:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005958:	d01c      	beq.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800595a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800595e:	d1e2      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005960:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005962:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005964:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005968:	0752      	lsls	r2, r2, #29
 800596a:	d541      	bpl.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d13f      	bne.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005970:	4b72      	ldr	r3, [pc, #456]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005972:	4874      	ldr	r0, [pc, #464]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800597a:	40d8      	lsrs	r0, r3
 800597c:	e00b      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800597e:	4a6f      	ldr	r2, [pc, #444]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005980:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005982:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 8005986:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800598a:	d058      	beq.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 800598c:	d951      	bls.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800598e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005992:	d15e      	bne.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005994:	486c      	ldr	r0, [pc, #432]	@ (8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8005996:	b005      	add	sp, #20
 8005998:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800599c:	4a67      	ldr	r2, [pc, #412]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800599e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80059a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a8:	f000 80df 	beq.w	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 80059ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059b0:	d0d6      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1b7      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059b6:	4b61      	ldr	r3, [pc, #388]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80059be:	d0ea      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c0:	a801      	add	r0, sp, #4
 80059c2:	f7ff fd93 	bl	80054ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059c6:	9801      	ldr	r0, [sp, #4]
 80059c8:	e7e5      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059ca:	4b5c      	ldr	r3, [pc, #368]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80059d2:	d0e0      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059d4:	a801      	add	r0, sp, #4
 80059d6:	f7ff fe23 	bl	8005620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059da:	9801      	ldr	r0, [sp, #4]
 80059dc:	e7db      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059de:	4a57      	ldr	r2, [pc, #348]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059e0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059e2:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80059e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059e8:	0749      	lsls	r1, r1, #29
 80059ea:	d501      	bpl.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d038      	beq.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059f0:	4a52      	ldr	r2, [pc, #328]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	05d0      	lsls	r0, r2, #23
 80059f6:	d502      	bpl.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80059f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059fc:	d067      	beq.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059fe:	4a4f      	ldr	r2, [pc, #316]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a00:	6812      	ldr	r2, [r2, #0]
 8005a02:	0391      	lsls	r1, r2, #14
 8005a04:	d58f      	bpl.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8005a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a0a:	d18c      	bne.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8005a0c:	e77b      	b.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005a16:	d0be      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a18:	a801      	add	r0, sp, #4
 8005a1a:	f7ff fe9b 	bl	8005754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a1e:	9802      	ldr	r0, [sp, #8]
 8005a20:	e7b9      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005a22:	4a46      	ldr	r2, [pc, #280]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a24:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005a26:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8005a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a2e:	d006      	beq.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8005a30:	d81d      	bhi.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005a32:	b14b      	cbz	r3, 8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a34:	6810      	ldr	r0, [r2, #0]
 8005a36:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005a3a:	d0ac      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005a3c:	e7c0      	b.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a3e:	6810      	ldr	r0, [r2, #0]
 8005a40:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005a44:	d0a7      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005a46:	e7c5      	b.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a48:	6810      	ldr	r0, [r2, #0]
 8005a4a:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005a4e:	d0a2      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005a50:	e7e2      	b.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
    switch (saiclocksource)
 8005a52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a56:	d0c3      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8005a58:	e765      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a5a:	6810      	ldr	r0, [r2, #0]
 8005a5c:	f010 0004 	ands.w	r0, r0, #4
 8005a60:	d099      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a62:	6813      	ldr	r3, [r2, #0]
 8005a64:	4837      	ldr	r0, [pc, #220]	@ (8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005a66:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005a6a:	40d8      	lsrs	r0, r3
 8005a6c:	e793      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8005a6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a72:	d08f      	beq.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a78:	f43f af72 	beq.w	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005a7c:	e753      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8005a82:	03d2      	lsls	r2, r2, #15
 8005a84:	d5c4      	bpl.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005a8c:	d083      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a8e:	a801      	add	r0, sp, #4
 8005a90:	f7ff fd2c 	bl	80054ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005a94:	9803      	ldr	r0, [sp, #12]
 8005a96:	e77e      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005a98:	4a28      	ldr	r2, [pc, #160]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a9a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005a9c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8005aa0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005aa4:	d0d9      	beq.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8005aa6:	d814      	bhi.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aac:	d03c      	beq.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005aae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ab2:	d04f      	beq.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f47f af36 	bne.w	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
}
 8005aba:	b005      	add	sp, #20
 8005abc:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8005ac0:	f7fe bca8 	b.w	8004414 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ac4:	6810      	ldr	r0, [r2, #0]
 8005ac6:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8005aca:	f43f af64 	beq.w	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8005ace:	481f      	ldr	r0, [pc, #124]	@ (8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005ad0:	e761      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8005ad2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ad6:	d0f5      	beq.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8005ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005adc:	f47f af23 	bne.w	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ae0:	4b16      	ldr	r3, [pc, #88]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005ae8:	f43f af55 	beq.w	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005aec:	e70b      	b.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005aee:	4b13      	ldr	r3, [pc, #76]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8005af6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005afa:	d04e      	beq.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8005afc:	d83f      	bhi.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 8005afe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b02:	d043      	beq.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8005b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b08:	d024      	beq.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f47f af0b 	bne.w	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b10:	f7fe fc40 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 8005b14:	4b09      	ldr	r3, [pc, #36]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005b16:	4a0e      	ldr	r2, [pc, #56]	@ (8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005b1e:	5cd3      	ldrb	r3, [r2, r3]
 8005b20:	f003 031f 	and.w	r3, r3, #31
 8005b24:	40d8      	lsrs	r0, r3
        break;
 8005b26:	e736      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b28:	6810      	ldr	r0, [r2, #0]
 8005b2a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005b2e:	f43f af32 	beq.w	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b32:	a801      	add	r0, sp, #4
 8005b34:	f7ff fcda 	bl	80054ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b38:	9802      	ldr	r0, [sp, #8]
 8005b3a:	e72c      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	017d7840 	.word	0x017d7840
 8005b44:	03d09000 	.word	0x03d09000
 8005b48:	00bb8000 	.word	0x00bb8000
 8005b4c:	003d0900 	.word	0x003d0900
 8005b50:	08007254 	.word	0x08007254
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b54:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005b5c:	f43f af1b 	beq.w	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b60:	a801      	add	r0, sp, #4
 8005b62:	f7ff fd5d 	bl	8005620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b66:	9802      	ldr	r0, [sp, #8]
 8005b68:	e715      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b6a:	6810      	ldr	r0, [r2, #0]
 8005b6c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005b70:	f43f af11 	beq.w	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b74:	a801      	add	r0, sp, #4
 8005b76:	f7ff fd53 	bl	8005620 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005b7a:	9803      	ldr	r0, [sp, #12]
 8005b7c:	e70b      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b82:	d016      	beq.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b88:	d0aa      	beq.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005b8a:	e6cc      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005b94:	f43f aeff 	beq.w	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005b98:	e7cb      	b.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b9a:	4b09      	ldr	r3, [pc, #36]	@ (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	f010 0004 	ands.w	r0, r0, #4
 8005ba2:	f43f aef8 	beq.w	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4806      	ldr	r0, [pc, #24]	@ (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8005baa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005bae:	40d8      	lsrs	r0, r3
 8005bb0:	e6f1      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005bb2:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8005bba:	f43f aeec 	beq.w	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005bbe:	e786      	b.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	03d09000 	.word	0x03d09000

08005bc8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	f000 8095 	beq.w	8005cf8 <HAL_TIM_Base_Init+0x130>
{
 8005bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 8087 	beq.w	8005cee <HAL_TIM_Base_Init+0x126>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be0:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005be2:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be4:	4945      	ldr	r1, [pc, #276]	@ (8005cfc <HAL_TIM_Base_Init+0x134>)
 8005be6:	4d46      	ldr	r5, [pc, #280]	@ (8005d00 <HAL_TIM_Base_Init+0x138>)
 8005be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bec:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf4:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 8005bf8:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bfa:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bfe:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c00:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c04:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c06:	ea4f 1151 	mov.w	r1, r1, lsr #5

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c0a:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c0c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8005c10:	d01f      	beq.n	8005c52 <HAL_TIM_Base_Init+0x8a>
 8005c12:	b9f1      	cbnz	r1, 8005c52 <HAL_TIM_Base_Init+0x8a>
 8005c14:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 8005d10 <HAL_TIM_Base_Init+0x148>
 8005c18:	4563      	cmp	r3, ip
 8005c1a:	d050      	beq.n	8005cbe <HAL_TIM_Base_Init+0xf6>
 8005c1c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005c20:	4563      	cmp	r3, ip
 8005c22:	d04c      	beq.n	8005cbe <HAL_TIM_Base_Init+0xf6>
 8005c24:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005c28:	4563      	cmp	r3, ip
 8005c2a:	d012      	beq.n	8005c52 <HAL_TIM_Base_Init+0x8a>
 8005c2c:	f1be 0f00 	cmp.w	lr, #0
 8005c30:	d10f      	bne.n	8005c52 <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c32:	4d34      	ldr	r5, [pc, #208]	@ (8005d04 <HAL_TIM_Base_Init+0x13c>)
 8005c34:	4934      	ldr	r1, [pc, #208]	@ (8005d08 <HAL_TIM_Base_Init+0x140>)
 8005c36:	428b      	cmp	r3, r1
 8005c38:	bf18      	it	ne
 8005c3a:	42ab      	cmpne	r3, r5
 8005c3c:	d043      	beq.n	8005cc6 <HAL_TIM_Base_Init+0xfe>
 8005c3e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005c42:	428b      	cmp	r3, r1
 8005c44:	d03f      	beq.n	8005cc6 <HAL_TIM_Base_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c4a:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c4c:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c4e:	4310      	orrs	r0, r2

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c50:	e014      	b.n	8005c7c <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 8005c52:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c54:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c58:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8005c5c:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c5e:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c60:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c62:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c66:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c6e:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c70:	b911      	cbnz	r1, 8005c78 <HAL_TIM_Base_Init+0xb0>
 8005c72:	f1be 0f00 	cmp.w	lr, #0
 8005c76:	d02f      	beq.n	8005cd8 <HAL_TIM_Base_Init+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c78:	6962      	ldr	r2, [r4, #20]
 8005c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005c7c:	6819      	ldr	r1, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c7e:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005c80:	f041 0104 	orr.w	r1, r1, #4
 8005c84:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8005c86:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005c88:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8005c8a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c8c:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c90:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8005c94:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8005c98:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 8005c9c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 8005ca0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8005ca4:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca8:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 8005cac:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8005cb0:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 8005cb4:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 8005cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cbe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005cc2:	68a1      	ldr	r1, [r4, #8]
 8005cc4:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ccc:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cce:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005cd0:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cd6:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cd8:	490c      	ldr	r1, [pc, #48]	@ (8005d0c <HAL_TIM_Base_Init+0x144>)
 8005cda:	4a0a      	ldr	r2, [pc, #40]	@ (8005d04 <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	bf18      	it	ne
 8005ce0:	428b      	cmpne	r3, r1
 8005ce2:	d0c9      	beq.n	8005c78 <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ce4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d0c5      	beq.n	8005c78 <HAL_TIM_Base_Init+0xb0>
 8005cec:	e7c6      	b.n	8005c7c <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 8005cee:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005cf2:	f7fb f81b 	bl	8000d2c <HAL_TIM_Base_MspInit>
 8005cf6:	e773      	b.n	8005be0 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8005cf8:	2001      	movs	r0, #1
}
 8005cfa:	4770      	bx	lr
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40010400 	.word	0x40010400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40014400 	.word	0x40014400
 8005d0c:	40014800 	.word	0x40014800
 8005d10:	40000400 	.word	0x40000400

08005d14 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005d14:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d139      	bne.n	8005d90 <HAL_TIM_Base_Start+0x7c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1c:	6802      	ldr	r2, [r0, #0]
 8005d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005d94 <HAL_TIM_Base_Start+0x80>)
 8005d20:	491d      	ldr	r1, [pc, #116]	@ (8005d98 <HAL_TIM_Base_Start+0x84>)
 8005d22:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005d26:	bf18      	it	ne
 8005d28:	429a      	cmpne	r2, r3
{
 8005d2a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	4d1a      	ldr	r5, [pc, #104]	@ (8005d9c <HAL_TIM_Base_Start+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d36:	42aa      	cmp	r2, r5
 8005d38:	bf08      	it	eq
 8005d3a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3e:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d42:	4c17      	ldr	r4, [pc, #92]	@ (8005da0 <HAL_TIM_Base_Start+0x8c>)
 8005d44:	428a      	cmp	r2, r1
 8005d46:	bf08      	it	eq
 8005d48:	f043 0301 	orreq.w	r3, r3, #1
 8005d4c:	4815      	ldr	r0, [pc, #84]	@ (8005da4 <HAL_TIM_Base_Start+0x90>)
 8005d4e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8005d52:	42a2      	cmp	r2, r4
 8005d54:	bf08      	it	eq
 8005d56:	f043 0301 	orreq.w	r3, r3, #1
 8005d5a:	4282      	cmp	r2, r0
 8005d5c:	bf08      	it	eq
 8005d5e:	f043 0301 	orreq.w	r3, r3, #1
 8005d62:	428a      	cmp	r2, r1
 8005d64:	bf08      	it	eq
 8005d66:	f043 0301 	orreq.w	r3, r3, #1
 8005d6a:	b913      	cbnz	r3, 8005d72 <HAL_TIM_Base_Start+0x5e>
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8005da8 <HAL_TIM_Base_Start+0x94>)
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d107      	bne.n	8005d82 <HAL_TIM_Base_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d72:	6891      	ldr	r1, [r2, #8]
 8005d74:	4b0d      	ldr	r3, [pc, #52]	@ (8005dac <HAL_TIM_Base_Start+0x98>)
 8005d76:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d78:	2b06      	cmp	r3, #6
 8005d7a:	d006      	beq.n	8005d8a <HAL_TIM_Base_Start+0x76>
 8005d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d80:	d003      	beq.n	8005d8a <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 8005d82:	6813      	ldr	r3, [r2, #0]
 8005d84:	f043 0301 	orr.w	r3, r3, #1
 8005d88:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005d8a:	2000      	movs	r0, #0
}
 8005d8c:	bc30      	pop	{r4, r5}
 8005d8e:	4770      	bx	lr
    return HAL_ERROR;
 8005d90:	2001      	movs	r0, #1
}
 8005d92:	4770      	bx	lr
 8005d94:	40010000 	.word	0x40010000
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000c00 	.word	0x40000c00
 8005da4:	40010400 	.word	0x40010400
 8005da8:	40014000 	.word	0x40014000
 8005dac:	00010007 	.word	0x00010007

08005db0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005db0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005db4:	2a01      	cmp	r2, #1
 8005db6:	d06d      	beq.n	8005e94 <HAL_TIM_ConfigClockSource+0xe4>
  tmpsmcr = htim->Instance->SMCR;
 8005db8:	6802      	ldr	r2, [r0, #0]
 8005dba:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005dbc:	2001      	movs	r0, #1
{
 8005dbe:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8005dc2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc6:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dca:	4c59      	ldr	r4, [pc, #356]	@ (8005f30 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 8005dcc:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dce:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8005dd0:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005dd2:	680c      	ldr	r4, [r1, #0]
 8005dd4:	2c70      	cmp	r4, #112	@ 0x70
 8005dd6:	f000 8087 	beq.w	8005ee8 <HAL_TIM_ConfigClockSource+0x138>
 8005dda:	d825      	bhi.n	8005e28 <HAL_TIM_ConfigClockSource+0x78>
 8005ddc:	2c50      	cmp	r4, #80	@ 0x50
 8005dde:	d05b      	beq.n	8005e98 <HAL_TIM_ConfigClockSource+0xe8>
 8005de0:	d82b      	bhi.n	8005e3a <HAL_TIM_ConfigClockSource+0x8a>
 8005de2:	2c40      	cmp	r4, #64	@ 0x40
 8005de4:	f040 8090 	bne.w	8005f08 <HAL_TIM_ConfigClockSource+0x158>
                               sClockSourceConfig->ClockPolarity,
 8005de8:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005dea:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dec:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dee:	6a10      	ldr	r0, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005df0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df4:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8005df8:	430c      	orrs	r4, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dfa:	494e      	ldr	r1, [pc, #312]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dfc:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfe:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e00:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e04:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005e08:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8005e0a:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8005e0c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e0e:	4001      	ands	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e10:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e14:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005e16:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005e18:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8005e1a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005e24:	bc30      	pop	{r4, r5}
 8005e26:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005e28:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8005e2c:	d04c      	beq.n	8005ec8 <HAL_TIM_ConfigClockSource+0x118>
 8005e2e:	d81f      	bhi.n	8005e70 <HAL_TIM_ConfigClockSource+0xc0>
 8005e30:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 8005e34:	bf18      	it	ne
 8005e36:	2001      	movne	r0, #1
 8005e38:	e7ee      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x68>
 8005e3a:	2c60      	cmp	r4, #96	@ 0x60
 8005e3c:	d1ec      	bne.n	8005e18 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 8005e3e:	6a10      	ldr	r0, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8005e40:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e42:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
                               sClockSourceConfig->ClockFilter);
 8005e46:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e48:	493a      	ldr	r1, [pc, #232]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e4a:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e4e:	6a14      	ldr	r4, [r2, #32]
 8005e50:	f024 0410 	bic.w	r4, r4, #16
 8005e54:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e56:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e58:	f424 4470 	bic.w	r4, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e5c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005e60:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 8005e62:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8005e64:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e66:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e68:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005e6c:	6091      	str	r1, [r2, #8]
}
 8005e6e:	e7d2      	b.n	8005e16 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8005e70:	4931      	ldr	r1, [pc, #196]	@ (8005f38 <HAL_TIM_ConfigClockSource+0x188>)
 8005e72:	428c      	cmp	r4, r1
 8005e74:	d006      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0xd4>
 8005e76:	d94f      	bls.n	8005f18 <HAL_TIM_ConfigClockSource+0x168>
 8005e78:	4930      	ldr	r1, [pc, #192]	@ (8005f3c <HAL_TIM_ConfigClockSource+0x18c>)
 8005e7a:	428c      	cmp	r4, r1
 8005e7c:	d002      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0xd4>
 8005e7e:	3110      	adds	r1, #16
 8005e80:	428c      	cmp	r4, r1
 8005e82:	d1c9      	bne.n	8005e18 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8005e84:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e86:	492b      	ldr	r1, [pc, #172]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x184>)
 8005e88:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e8a:	4321      	orrs	r1, r4
 8005e8c:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8005e90:	6091      	str	r1, [r2, #8]
}
 8005e92:	e7c0      	b.n	8005e16 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8005e94:	2002      	movs	r0, #2
}
 8005e96:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8005e98:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005e9a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005e9c:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e9e:	6a10      	ldr	r0, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ea0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ea4:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8005ea8:	430c      	orrs	r4, r1
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eaa:	4922      	ldr	r1, [pc, #136]	@ (8005f34 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eac:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eae:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eb0:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eb4:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005eb8:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8005eba:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8005ebc:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ebe:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ec0:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8005ec4:	6091      	str	r1, [r2, #8]
}
 8005ec6:	e7a6      	b.n	8005e16 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ec8:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005ecc:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ece:	4328      	orrs	r0, r5
 8005ed0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed2:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ed6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8005eda:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005edc:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ede:	6891      	ldr	r1, [r2, #8]
 8005ee0:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8005ee4:	6091      	str	r1, [r2, #8]
      break;
 8005ee6:	e796      	b.n	8005e16 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ee8:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005eec:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eee:	4328      	orrs	r0, r5
 8005ef0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ef2:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ef6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8005efa:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8005efc:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005efe:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f00:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005f04:	6091      	str	r1, [r2, #8]
      break;
 8005f06:	e786      	b.n	8005e16 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8005f08:	d886      	bhi.n	8005e18 <HAL_TIM_ConfigClockSource+0x68>
 8005f0a:	2c20      	cmp	r4, #32
 8005f0c:	d0ba      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0xd4>
 8005f0e:	d80a      	bhi.n	8005f26 <HAL_TIM_ConfigClockSource+0x176>
 8005f10:	f034 0110 	bics.w	r1, r4, #16
 8005f14:	d180      	bne.n	8005e18 <HAL_TIM_ConfigClockSource+0x68>
 8005f16:	e7b5      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0xd4>
 8005f18:	f024 0110 	bic.w	r1, r4, #16
 8005f1c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005f20:	f47f af7a 	bne.w	8005e18 <HAL_TIM_ConfigClockSource+0x68>
 8005f24:	e7ae      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0xd4>
 8005f26:	2c30      	cmp	r4, #48	@ 0x30
 8005f28:	d0ac      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0xd4>
      status = HAL_ERROR;
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	e774      	b.n	8005e18 <HAL_TIM_ConfigClockSource+0x68>
 8005f2e:	bf00      	nop
 8005f30:	ffce0088 	.word	0xffce0088
 8005f34:	ffcfff8f 	.word	0xffcfff8f
 8005f38:	00100020 	.word	0x00100020
 8005f3c:	00100030 	.word	0x00100030

08005f40 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f40:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d04b      	beq.n	8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f48:	6803      	ldr	r3, [r0, #0]
 8005f4a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	2002      	movs	r0, #2
{
 8005f4e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f50:	4d24      	ldr	r5, [pc, #144]	@ (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005f52:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f56:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8005f58:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005f5a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f5c:	d029      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005f5e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005f62:	42ab      	cmp	r3, r5
 8005f64:	d025      	beq.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f66:	4d20      	ldr	r5, [pc, #128]	@ (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f68:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f6c:	42ab      	cmp	r3, r5
 8005f6e:	bf18      	it	ne
 8005f70:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8005f74:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005f78:	bf0c      	ite	eq
 8005f7a:	f04f 0c01 	moveq.w	ip, #1
 8005f7e:	f04f 0c00 	movne.w	ip, #0
 8005f82:	42ab      	cmp	r3, r5
 8005f84:	bf08      	it	eq
 8005f86:	f04c 0c01 	orreq.w	ip, ip, #1
 8005f8a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005f8e:	42ab      	cmp	r3, r5
 8005f90:	bf08      	it	eq
 8005f92:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f96:	680d      	ldr	r5, [r1, #0]
 8005f98:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9a:	4d14      	ldr	r5, [pc, #80]	@ (8005fec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8005f9c:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9e:	42ab      	cmp	r3, r5
 8005fa0:	bf14      	ite	ne
 8005fa2:	4660      	movne	r0, ip
 8005fa4:	f04c 0001 	orreq.w	r0, ip, #1
 8005fa8:	b960      	cbnz	r0, 8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005faa:	4811      	ldr	r0, [pc, #68]	@ (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005fac:	4283      	cmp	r3, r0
 8005fae:	d009      	beq.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8005fb0:	e00d      	b.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fb2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fb4:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fb8:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fba:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fbc:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fc0:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8005fc2:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fc4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fc6:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fca:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fcc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005fce:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005fd0:	2101      	movs	r1, #1

  return HAL_OK;
 8005fd2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8005fd4:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005fd8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8005fdc:	bc30      	pop	{r4, r5}
 8005fde:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005fe0:	2002      	movs	r0, #2
}
 8005fe2:	4770      	bx	lr
 8005fe4:	40010000 	.word	0x40010000
 8005fe8:	40000400 	.word	0x40000400
 8005fec:	40001800 	.word	0x40001800
 8005ff0:	40014000 	.word	0x40014000

08005ff4 <arm_copy_f32>:
 8005ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8005ffc:	d01e      	beq.n	800603c <arm_copy_f32+0x48>
 8005ffe:	f100 0410 	add.w	r4, r0, #16
 8006002:	f101 0310 	add.w	r3, r1, #16
 8006006:	4645      	mov	r5, r8
 8006008:	f854 cc10 	ldr.w	ip, [r4, #-16]
 800600c:	3d01      	subs	r5, #1
 800600e:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 8006012:	f103 0310 	add.w	r3, r3, #16
 8006016:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800601a:	f104 0410 	add.w	r4, r4, #16
 800601e:	f854 6c14 	ldr.w	r6, [r4, #-20]
 8006022:	f843 cc20 	str.w	ip, [r3, #-32]
 8006026:	f843 ec1c 	str.w	lr, [r3, #-28]
 800602a:	f843 7c18 	str.w	r7, [r3, #-24]
 800602e:	f843 6c14 	str.w	r6, [r3, #-20]
 8006032:	d1e9      	bne.n	8006008 <arm_copy_f32+0x14>
 8006034:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8006038:	4440      	add	r0, r8
 800603a:	4441      	add	r1, r8
 800603c:	f012 0203 	ands.w	r2, r2, #3
 8006040:	d005      	beq.n	800604e <arm_copy_f32+0x5a>
 8006042:	f850 3b04 	ldr.w	r3, [r0], #4
 8006046:	3a01      	subs	r2, #1
 8006048:	f841 3b04 	str.w	r3, [r1], #4
 800604c:	d1f9      	bne.n	8006042 <arm_copy_f32+0x4e>
 800604e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006052:	bf00      	nop

08006054 <arm_rfft_fast_init_f32>:
 8006054:	084b      	lsrs	r3, r1, #1
 8006056:	2b80      	cmp	r3, #128	@ 0x80
 8006058:	b430      	push	{r4, r5}
 800605a:	8201      	strh	r1, [r0, #16]
 800605c:	8003      	strh	r3, [r0, #0]
 800605e:	d06f      	beq.n	8006140 <arm_rfft_fast_init_f32+0xec>
 8006060:	d916      	bls.n	8006090 <arm_rfft_fast_init_f32+0x3c>
 8006062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006066:	d05e      	beq.n	8006126 <arm_rfft_fast_init_f32+0xd2>
 8006068:	d935      	bls.n	80060d6 <arm_rfft_fast_init_f32+0x82>
 800606a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800606e:	d025      	beq.n	80060bc <arm_rfft_fast_init_f32+0x68>
 8006070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006074:	d112      	bne.n	800609c <arm_rfft_fast_init_f32+0x48>
 8006076:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800607a:	4c37      	ldr	r4, [pc, #220]	@ (8006158 <arm_rfft_fast_init_f32+0x104>)
 800607c:	4937      	ldr	r1, [pc, #220]	@ (800615c <arm_rfft_fast_init_f32+0x108>)
 800607e:	2300      	movs	r3, #0
 8006080:	4a37      	ldr	r2, [pc, #220]	@ (8006160 <arm_rfft_fast_init_f32+0x10c>)
 8006082:	8185      	strh	r5, [r0, #12]
 8006084:	6084      	str	r4, [r0, #8]
 8006086:	6041      	str	r1, [r0, #4]
 8006088:	6142      	str	r2, [r0, #20]
 800608a:	b258      	sxtb	r0, r3
 800608c:	bc30      	pop	{r4, r5}
 800608e:	4770      	bx	lr
 8006090:	2b20      	cmp	r3, #32
 8006092:	d030      	beq.n	80060f6 <arm_rfft_fast_init_f32+0xa2>
 8006094:	2b40      	cmp	r3, #64	@ 0x40
 8006096:	d005      	beq.n	80060a4 <arm_rfft_fast_init_f32+0x50>
 8006098:	2b10      	cmp	r3, #16
 800609a:	d038      	beq.n	800610e <arm_rfft_fast_init_f32+0xba>
 800609c:	23ff      	movs	r3, #255	@ 0xff
 800609e:	bc30      	pop	{r4, r5}
 80060a0:	b258      	sxtb	r0, r3
 80060a2:	4770      	bx	lr
 80060a4:	2538      	movs	r5, #56	@ 0x38
 80060a6:	4c2f      	ldr	r4, [pc, #188]	@ (8006164 <arm_rfft_fast_init_f32+0x110>)
 80060a8:	492f      	ldr	r1, [pc, #188]	@ (8006168 <arm_rfft_fast_init_f32+0x114>)
 80060aa:	2300      	movs	r3, #0
 80060ac:	4a2f      	ldr	r2, [pc, #188]	@ (800616c <arm_rfft_fast_init_f32+0x118>)
 80060ae:	8185      	strh	r5, [r0, #12]
 80060b0:	6084      	str	r4, [r0, #8]
 80060b2:	6041      	str	r1, [r0, #4]
 80060b4:	6142      	str	r2, [r0, #20]
 80060b6:	b258      	sxtb	r0, r3
 80060b8:	bc30      	pop	{r4, r5}
 80060ba:	4770      	bx	lr
 80060bc:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 80060c0:	4c2b      	ldr	r4, [pc, #172]	@ (8006170 <arm_rfft_fast_init_f32+0x11c>)
 80060c2:	492c      	ldr	r1, [pc, #176]	@ (8006174 <arm_rfft_fast_init_f32+0x120>)
 80060c4:	2300      	movs	r3, #0
 80060c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006178 <arm_rfft_fast_init_f32+0x124>)
 80060c8:	8185      	strh	r5, [r0, #12]
 80060ca:	6084      	str	r4, [r0, #8]
 80060cc:	6041      	str	r1, [r0, #4]
 80060ce:	6142      	str	r2, [r0, #20]
 80060d0:	b258      	sxtb	r0, r3
 80060d2:	bc30      	pop	{r4, r5}
 80060d4:	4770      	bx	lr
 80060d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060da:	d1df      	bne.n	800609c <arm_rfft_fast_init_f32+0x48>
 80060dc:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 80060e0:	4c26      	ldr	r4, [pc, #152]	@ (800617c <arm_rfft_fast_init_f32+0x128>)
 80060e2:	4927      	ldr	r1, [pc, #156]	@ (8006180 <arm_rfft_fast_init_f32+0x12c>)
 80060e4:	2300      	movs	r3, #0
 80060e6:	4a27      	ldr	r2, [pc, #156]	@ (8006184 <arm_rfft_fast_init_f32+0x130>)
 80060e8:	8185      	strh	r5, [r0, #12]
 80060ea:	6084      	str	r4, [r0, #8]
 80060ec:	6041      	str	r1, [r0, #4]
 80060ee:	6142      	str	r2, [r0, #20]
 80060f0:	b258      	sxtb	r0, r3
 80060f2:	bc30      	pop	{r4, r5}
 80060f4:	4770      	bx	lr
 80060f6:	2530      	movs	r5, #48	@ 0x30
 80060f8:	4c23      	ldr	r4, [pc, #140]	@ (8006188 <arm_rfft_fast_init_f32+0x134>)
 80060fa:	4924      	ldr	r1, [pc, #144]	@ (800618c <arm_rfft_fast_init_f32+0x138>)
 80060fc:	2300      	movs	r3, #0
 80060fe:	4a24      	ldr	r2, [pc, #144]	@ (8006190 <arm_rfft_fast_init_f32+0x13c>)
 8006100:	8185      	strh	r5, [r0, #12]
 8006102:	6084      	str	r4, [r0, #8]
 8006104:	6041      	str	r1, [r0, #4]
 8006106:	6142      	str	r2, [r0, #20]
 8006108:	b258      	sxtb	r0, r3
 800610a:	bc30      	pop	{r4, r5}
 800610c:	4770      	bx	lr
 800610e:	2514      	movs	r5, #20
 8006110:	4c20      	ldr	r4, [pc, #128]	@ (8006194 <arm_rfft_fast_init_f32+0x140>)
 8006112:	4921      	ldr	r1, [pc, #132]	@ (8006198 <arm_rfft_fast_init_f32+0x144>)
 8006114:	2300      	movs	r3, #0
 8006116:	4a21      	ldr	r2, [pc, #132]	@ (800619c <arm_rfft_fast_init_f32+0x148>)
 8006118:	8185      	strh	r5, [r0, #12]
 800611a:	6084      	str	r4, [r0, #8]
 800611c:	6041      	str	r1, [r0, #4]
 800611e:	6142      	str	r2, [r0, #20]
 8006120:	b258      	sxtb	r0, r3
 8006122:	bc30      	pop	{r4, r5}
 8006124:	4770      	bx	lr
 8006126:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800612a:	4c1d      	ldr	r4, [pc, #116]	@ (80061a0 <arm_rfft_fast_init_f32+0x14c>)
 800612c:	491d      	ldr	r1, [pc, #116]	@ (80061a4 <arm_rfft_fast_init_f32+0x150>)
 800612e:	2300      	movs	r3, #0
 8006130:	4a1d      	ldr	r2, [pc, #116]	@ (80061a8 <arm_rfft_fast_init_f32+0x154>)
 8006132:	8185      	strh	r5, [r0, #12]
 8006134:	6084      	str	r4, [r0, #8]
 8006136:	6041      	str	r1, [r0, #4]
 8006138:	6142      	str	r2, [r0, #20]
 800613a:	b258      	sxtb	r0, r3
 800613c:	bc30      	pop	{r4, r5}
 800613e:	4770      	bx	lr
 8006140:	25d0      	movs	r5, #208	@ 0xd0
 8006142:	4c1a      	ldr	r4, [pc, #104]	@ (80061ac <arm_rfft_fast_init_f32+0x158>)
 8006144:	491a      	ldr	r1, [pc, #104]	@ (80061b0 <arm_rfft_fast_init_f32+0x15c>)
 8006146:	2300      	movs	r3, #0
 8006148:	4a1a      	ldr	r2, [pc, #104]	@ (80061b4 <arm_rfft_fast_init_f32+0x160>)
 800614a:	8185      	strh	r5, [r0, #12]
 800614c:	6084      	str	r4, [r0, #8]
 800614e:	6041      	str	r1, [r0, #4]
 8006150:	6142      	str	r2, [r0, #20]
 8006152:	b258      	sxtb	r0, r3
 8006154:	bc30      	pop	{r4, r5}
 8006156:	4770      	bx	lr
 8006158:	08016074 	.word	0x08016074
 800615c:	0800726c 	.word	0x0800726c
 8006160:	0800d3dc 	.word	0x0800d3dc
 8006164:	0800b36c 	.word	0x0800b36c
 8006168:	08017e34 	.word	0x08017e34
 800616c:	0801a324 	.word	0x0801a324
 8006170:	08013d5c 	.word	0x08013d5c
 8006174:	08011c5c 	.word	0x08011c5c
 8006178:	0800b3dc 	.word	0x0800b3dc
 800617c:	08019fb4 	.word	0x08019fb4
 8006180:	080113dc 	.word	0x080113dc
 8006184:	08018034 	.word	0x08018034
 8006188:	08014c14 	.word	0x08014c14
 800618c:	08013c5c 	.word	0x08013c5c
 8006190:	0800b26c 	.word	0x0800b26c
 8006194:	08014b6c 	.word	0x08014b6c
 8006198:	08011bdc 	.word	0x08011bdc
 800619c:	08014b94 	.word	0x08014b94
 80061a0:	08018834 	.word	0x08018834
 80061a4:	08015074 	.word	0x08015074
 80061a8:	08018bb4 	.word	0x08018bb4
 80061ac:	0801a524 	.word	0x0801a524
 80061b0:	08014c74 	.word	0x08014c74
 80061b4:	08019bb4 	.word	0x08019bb4

080061b8 <arm_scale_f32>:
 80061b8:	b470      	push	{r4, r5, r6}
 80061ba:	0896      	lsrs	r6, r2, #2
 80061bc:	d025      	beq.n	800620a <arm_scale_f32+0x52>
 80061be:	f100 0410 	add.w	r4, r0, #16
 80061c2:	f101 0310 	add.w	r3, r1, #16
 80061c6:	4635      	mov	r5, r6
 80061c8:	ed14 6a04 	vldr	s12, [r4, #-16]
 80061cc:	3d01      	subs	r5, #1
 80061ce:	ed54 6a03 	vldr	s13, [r4, #-12]
 80061d2:	f103 0310 	add.w	r3, r3, #16
 80061d6:	ed14 7a02 	vldr	s14, [r4, #-8]
 80061da:	ee26 6a00 	vmul.f32	s12, s12, s0
 80061de:	ed54 7a01 	vldr	s15, [r4, #-4]
 80061e2:	ee66 6a80 	vmul.f32	s13, s13, s0
 80061e6:	ee27 7a00 	vmul.f32	s14, s14, s0
 80061ea:	f104 0410 	add.w	r4, r4, #16
 80061ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80061f2:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 80061f6:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 80061fa:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 80061fe:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8006202:	d1e1      	bne.n	80061c8 <arm_scale_f32+0x10>
 8006204:	0136      	lsls	r6, r6, #4
 8006206:	4430      	add	r0, r6
 8006208:	4431      	add	r1, r6
 800620a:	f012 0203 	ands.w	r2, r2, #3
 800620e:	d007      	beq.n	8006220 <arm_scale_f32+0x68>
 8006210:	ecf0 7a01 	vldmia	r0!, {s15}
 8006214:	3a01      	subs	r2, #1
 8006216:	ee67 7a80 	vmul.f32	s15, s15, s0
 800621a:	ece1 7a01 	vstmia	r1!, {s15}
 800621e:	d1f7      	bne.n	8006210 <arm_scale_f32+0x58>
 8006220:	bc70      	pop	{r4, r5, r6}
 8006222:	4770      	bx	lr

08006224 <arm_offset_f32>:
 8006224:	b470      	push	{r4, r5, r6}
 8006226:	0896      	lsrs	r6, r2, #2
 8006228:	d025      	beq.n	8006276 <arm_offset_f32+0x52>
 800622a:	f100 0410 	add.w	r4, r0, #16
 800622e:	f101 0310 	add.w	r3, r1, #16
 8006232:	4635      	mov	r5, r6
 8006234:	ed14 6a04 	vldr	s12, [r4, #-16]
 8006238:	3d01      	subs	r5, #1
 800623a:	ed54 6a03 	vldr	s13, [r4, #-12]
 800623e:	f103 0310 	add.w	r3, r3, #16
 8006242:	ed14 7a02 	vldr	s14, [r4, #-8]
 8006246:	ee36 6a00 	vadd.f32	s12, s12, s0
 800624a:	ed54 7a01 	vldr	s15, [r4, #-4]
 800624e:	ee76 6a80 	vadd.f32	s13, s13, s0
 8006252:	ee37 7a00 	vadd.f32	s14, s14, s0
 8006256:	f104 0410 	add.w	r4, r4, #16
 800625a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800625e:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 8006262:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8006266:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 800626a:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800626e:	d1e1      	bne.n	8006234 <arm_offset_f32+0x10>
 8006270:	0136      	lsls	r6, r6, #4
 8006272:	4430      	add	r0, r6
 8006274:	4431      	add	r1, r6
 8006276:	f012 0203 	ands.w	r2, r2, #3
 800627a:	d007      	beq.n	800628c <arm_offset_f32+0x68>
 800627c:	ecf0 7a01 	vldmia	r0!, {s15}
 8006280:	3a01      	subs	r2, #1
 8006282:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006286:	ece1 7a01 	vstmia	r1!, {s15}
 800628a:	d1f7      	bne.n	800627c <arm_offset_f32+0x58>
 800628c:	bc70      	pop	{r4, r5, r6}
 800628e:	4770      	bx	lr

08006290 <sbrk_aligned>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	4e0f      	ldr	r6, [pc, #60]	@ (80062d0 <sbrk_aligned+0x40>)
 8006294:	460c      	mov	r4, r1
 8006296:	6831      	ldr	r1, [r6, #0]
 8006298:	4605      	mov	r5, r0
 800629a:	b911      	cbnz	r1, 80062a2 <sbrk_aligned+0x12>
 800629c:	f000 faec 	bl	8006878 <_sbrk_r>
 80062a0:	6030      	str	r0, [r6, #0]
 80062a2:	4621      	mov	r1, r4
 80062a4:	4628      	mov	r0, r5
 80062a6:	f000 fae7 	bl	8006878 <_sbrk_r>
 80062aa:	1c43      	adds	r3, r0, #1
 80062ac:	d103      	bne.n	80062b6 <sbrk_aligned+0x26>
 80062ae:	f04f 34ff 	mov.w	r4, #4294967295
 80062b2:	4620      	mov	r0, r4
 80062b4:	bd70      	pop	{r4, r5, r6, pc}
 80062b6:	1cc4      	adds	r4, r0, #3
 80062b8:	f024 0403 	bic.w	r4, r4, #3
 80062bc:	42a0      	cmp	r0, r4
 80062be:	d0f8      	beq.n	80062b2 <sbrk_aligned+0x22>
 80062c0:	1a21      	subs	r1, r4, r0
 80062c2:	4628      	mov	r0, r5
 80062c4:	f000 fad8 	bl	8006878 <_sbrk_r>
 80062c8:	3001      	adds	r0, #1
 80062ca:	d1f2      	bne.n	80062b2 <sbrk_aligned+0x22>
 80062cc:	e7ef      	b.n	80062ae <sbrk_aligned+0x1e>
 80062ce:	bf00      	nop
 80062d0:	2401128c 	.word	0x2401128c

080062d4 <_malloc_r>:
 80062d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d8:	1ccd      	adds	r5, r1, #3
 80062da:	f025 0503 	bic.w	r5, r5, #3
 80062de:	3508      	adds	r5, #8
 80062e0:	2d0c      	cmp	r5, #12
 80062e2:	bf38      	it	cc
 80062e4:	250c      	movcc	r5, #12
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	4606      	mov	r6, r0
 80062ea:	db01      	blt.n	80062f0 <_malloc_r+0x1c>
 80062ec:	42a9      	cmp	r1, r5
 80062ee:	d904      	bls.n	80062fa <_malloc_r+0x26>
 80062f0:	230c      	movs	r3, #12
 80062f2:	6033      	str	r3, [r6, #0]
 80062f4:	2000      	movs	r0, #0
 80062f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063d0 <_malloc_r+0xfc>
 80062fe:	f000 f869 	bl	80063d4 <__malloc_lock>
 8006302:	f8d8 3000 	ldr.w	r3, [r8]
 8006306:	461c      	mov	r4, r3
 8006308:	bb44      	cbnz	r4, 800635c <_malloc_r+0x88>
 800630a:	4629      	mov	r1, r5
 800630c:	4630      	mov	r0, r6
 800630e:	f7ff ffbf 	bl	8006290 <sbrk_aligned>
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	4604      	mov	r4, r0
 8006316:	d158      	bne.n	80063ca <_malloc_r+0xf6>
 8006318:	f8d8 4000 	ldr.w	r4, [r8]
 800631c:	4627      	mov	r7, r4
 800631e:	2f00      	cmp	r7, #0
 8006320:	d143      	bne.n	80063aa <_malloc_r+0xd6>
 8006322:	2c00      	cmp	r4, #0
 8006324:	d04b      	beq.n	80063be <_malloc_r+0xea>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	4639      	mov	r1, r7
 800632a:	4630      	mov	r0, r6
 800632c:	eb04 0903 	add.w	r9, r4, r3
 8006330:	f000 faa2 	bl	8006878 <_sbrk_r>
 8006334:	4581      	cmp	r9, r0
 8006336:	d142      	bne.n	80063be <_malloc_r+0xea>
 8006338:	6821      	ldr	r1, [r4, #0]
 800633a:	1a6d      	subs	r5, r5, r1
 800633c:	4629      	mov	r1, r5
 800633e:	4630      	mov	r0, r6
 8006340:	f7ff ffa6 	bl	8006290 <sbrk_aligned>
 8006344:	3001      	adds	r0, #1
 8006346:	d03a      	beq.n	80063be <_malloc_r+0xea>
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	442b      	add	r3, r5
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	f8d8 3000 	ldr.w	r3, [r8]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	bb62      	cbnz	r2, 80063b0 <_malloc_r+0xdc>
 8006356:	f8c8 7000 	str.w	r7, [r8]
 800635a:	e00f      	b.n	800637c <_malloc_r+0xa8>
 800635c:	6822      	ldr	r2, [r4, #0]
 800635e:	1b52      	subs	r2, r2, r5
 8006360:	d420      	bmi.n	80063a4 <_malloc_r+0xd0>
 8006362:	2a0b      	cmp	r2, #11
 8006364:	d917      	bls.n	8006396 <_malloc_r+0xc2>
 8006366:	1961      	adds	r1, r4, r5
 8006368:	42a3      	cmp	r3, r4
 800636a:	6025      	str	r5, [r4, #0]
 800636c:	bf18      	it	ne
 800636e:	6059      	strne	r1, [r3, #4]
 8006370:	6863      	ldr	r3, [r4, #4]
 8006372:	bf08      	it	eq
 8006374:	f8c8 1000 	streq.w	r1, [r8]
 8006378:	5162      	str	r2, [r4, r5]
 800637a:	604b      	str	r3, [r1, #4]
 800637c:	4630      	mov	r0, r6
 800637e:	f000 f82f 	bl	80063e0 <__malloc_unlock>
 8006382:	f104 000b 	add.w	r0, r4, #11
 8006386:	1d23      	adds	r3, r4, #4
 8006388:	f020 0007 	bic.w	r0, r0, #7
 800638c:	1ac2      	subs	r2, r0, r3
 800638e:	bf1c      	itt	ne
 8006390:	1a1b      	subne	r3, r3, r0
 8006392:	50a3      	strne	r3, [r4, r2]
 8006394:	e7af      	b.n	80062f6 <_malloc_r+0x22>
 8006396:	6862      	ldr	r2, [r4, #4]
 8006398:	42a3      	cmp	r3, r4
 800639a:	bf0c      	ite	eq
 800639c:	f8c8 2000 	streq.w	r2, [r8]
 80063a0:	605a      	strne	r2, [r3, #4]
 80063a2:	e7eb      	b.n	800637c <_malloc_r+0xa8>
 80063a4:	4623      	mov	r3, r4
 80063a6:	6864      	ldr	r4, [r4, #4]
 80063a8:	e7ae      	b.n	8006308 <_malloc_r+0x34>
 80063aa:	463c      	mov	r4, r7
 80063ac:	687f      	ldr	r7, [r7, #4]
 80063ae:	e7b6      	b.n	800631e <_malloc_r+0x4a>
 80063b0:	461a      	mov	r2, r3
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	42a3      	cmp	r3, r4
 80063b6:	d1fb      	bne.n	80063b0 <_malloc_r+0xdc>
 80063b8:	2300      	movs	r3, #0
 80063ba:	6053      	str	r3, [r2, #4]
 80063bc:	e7de      	b.n	800637c <_malloc_r+0xa8>
 80063be:	230c      	movs	r3, #12
 80063c0:	6033      	str	r3, [r6, #0]
 80063c2:	4630      	mov	r0, r6
 80063c4:	f000 f80c 	bl	80063e0 <__malloc_unlock>
 80063c8:	e794      	b.n	80062f4 <_malloc_r+0x20>
 80063ca:	6005      	str	r5, [r0, #0]
 80063cc:	e7d6      	b.n	800637c <_malloc_r+0xa8>
 80063ce:	bf00      	nop
 80063d0:	24011290 	.word	0x24011290

080063d4 <__malloc_lock>:
 80063d4:	4801      	ldr	r0, [pc, #4]	@ (80063dc <__malloc_lock+0x8>)
 80063d6:	f000 ba9c 	b.w	8006912 <__retarget_lock_acquire_recursive>
 80063da:	bf00      	nop
 80063dc:	240113d4 	.word	0x240113d4

080063e0 <__malloc_unlock>:
 80063e0:	4801      	ldr	r0, [pc, #4]	@ (80063e8 <__malloc_unlock+0x8>)
 80063e2:	f000 ba97 	b.w	8006914 <__retarget_lock_release_recursive>
 80063e6:	bf00      	nop
 80063e8:	240113d4 	.word	0x240113d4

080063ec <std>:
 80063ec:	2300      	movs	r3, #0
 80063ee:	b510      	push	{r4, lr}
 80063f0:	4604      	mov	r4, r0
 80063f2:	e9c0 3300 	strd	r3, r3, [r0]
 80063f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063fa:	6083      	str	r3, [r0, #8]
 80063fc:	8181      	strh	r1, [r0, #12]
 80063fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006400:	81c2      	strh	r2, [r0, #14]
 8006402:	6183      	str	r3, [r0, #24]
 8006404:	4619      	mov	r1, r3
 8006406:	2208      	movs	r2, #8
 8006408:	305c      	adds	r0, #92	@ 0x5c
 800640a:	f000 f9f9 	bl	8006800 <memset>
 800640e:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <std+0x58>)
 8006410:	6263      	str	r3, [r4, #36]	@ 0x24
 8006412:	4b0d      	ldr	r3, [pc, #52]	@ (8006448 <std+0x5c>)
 8006414:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006416:	4b0d      	ldr	r3, [pc, #52]	@ (800644c <std+0x60>)
 8006418:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800641a:	4b0d      	ldr	r3, [pc, #52]	@ (8006450 <std+0x64>)
 800641c:	6323      	str	r3, [r4, #48]	@ 0x30
 800641e:	4b0d      	ldr	r3, [pc, #52]	@ (8006454 <std+0x68>)
 8006420:	6224      	str	r4, [r4, #32]
 8006422:	429c      	cmp	r4, r3
 8006424:	d006      	beq.n	8006434 <std+0x48>
 8006426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800642a:	4294      	cmp	r4, r2
 800642c:	d002      	beq.n	8006434 <std+0x48>
 800642e:	33d0      	adds	r3, #208	@ 0xd0
 8006430:	429c      	cmp	r4, r3
 8006432:	d105      	bne.n	8006440 <std+0x54>
 8006434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643c:	f000 ba68 	b.w	8006910 <__retarget_lock_init_recursive>
 8006440:	bd10      	pop	{r4, pc}
 8006442:	bf00      	nop
 8006444:	08006651 	.word	0x08006651
 8006448:	08006673 	.word	0x08006673
 800644c:	080066ab 	.word	0x080066ab
 8006450:	080066cf 	.word	0x080066cf
 8006454:	24011294 	.word	0x24011294

08006458 <stdio_exit_handler>:
 8006458:	4a02      	ldr	r2, [pc, #8]	@ (8006464 <stdio_exit_handler+0xc>)
 800645a:	4903      	ldr	r1, [pc, #12]	@ (8006468 <stdio_exit_handler+0x10>)
 800645c:	4803      	ldr	r0, [pc, #12]	@ (800646c <stdio_exit_handler+0x14>)
 800645e:	f000 b869 	b.w	8006534 <_fwalk_sglue>
 8006462:	bf00      	nop
 8006464:	24000010 	.word	0x24000010
 8006468:	08007051 	.word	0x08007051
 800646c:	24000020 	.word	0x24000020

08006470 <cleanup_stdio>:
 8006470:	6841      	ldr	r1, [r0, #4]
 8006472:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <cleanup_stdio+0x34>)
 8006474:	4299      	cmp	r1, r3
 8006476:	b510      	push	{r4, lr}
 8006478:	4604      	mov	r4, r0
 800647a:	d001      	beq.n	8006480 <cleanup_stdio+0x10>
 800647c:	f000 fde8 	bl	8007050 <_fflush_r>
 8006480:	68a1      	ldr	r1, [r4, #8]
 8006482:	4b09      	ldr	r3, [pc, #36]	@ (80064a8 <cleanup_stdio+0x38>)
 8006484:	4299      	cmp	r1, r3
 8006486:	d002      	beq.n	800648e <cleanup_stdio+0x1e>
 8006488:	4620      	mov	r0, r4
 800648a:	f000 fde1 	bl	8007050 <_fflush_r>
 800648e:	68e1      	ldr	r1, [r4, #12]
 8006490:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <cleanup_stdio+0x3c>)
 8006492:	4299      	cmp	r1, r3
 8006494:	d004      	beq.n	80064a0 <cleanup_stdio+0x30>
 8006496:	4620      	mov	r0, r4
 8006498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800649c:	f000 bdd8 	b.w	8007050 <_fflush_r>
 80064a0:	bd10      	pop	{r4, pc}
 80064a2:	bf00      	nop
 80064a4:	24011294 	.word	0x24011294
 80064a8:	240112fc 	.word	0x240112fc
 80064ac:	24011364 	.word	0x24011364

080064b0 <global_stdio_init.part.0>:
 80064b0:	b510      	push	{r4, lr}
 80064b2:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <global_stdio_init.part.0+0x30>)
 80064b4:	4c0b      	ldr	r4, [pc, #44]	@ (80064e4 <global_stdio_init.part.0+0x34>)
 80064b6:	4a0c      	ldr	r2, [pc, #48]	@ (80064e8 <global_stdio_init.part.0+0x38>)
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	4620      	mov	r0, r4
 80064bc:	2200      	movs	r2, #0
 80064be:	2104      	movs	r1, #4
 80064c0:	f7ff ff94 	bl	80063ec <std>
 80064c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064c8:	2201      	movs	r2, #1
 80064ca:	2109      	movs	r1, #9
 80064cc:	f7ff ff8e 	bl	80063ec <std>
 80064d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064d4:	2202      	movs	r2, #2
 80064d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064da:	2112      	movs	r1, #18
 80064dc:	f7ff bf86 	b.w	80063ec <std>
 80064e0:	240113cc 	.word	0x240113cc
 80064e4:	24011294 	.word	0x24011294
 80064e8:	08006459 	.word	0x08006459

080064ec <__sfp_lock_acquire>:
 80064ec:	4801      	ldr	r0, [pc, #4]	@ (80064f4 <__sfp_lock_acquire+0x8>)
 80064ee:	f000 ba10 	b.w	8006912 <__retarget_lock_acquire_recursive>
 80064f2:	bf00      	nop
 80064f4:	240113d5 	.word	0x240113d5

080064f8 <__sfp_lock_release>:
 80064f8:	4801      	ldr	r0, [pc, #4]	@ (8006500 <__sfp_lock_release+0x8>)
 80064fa:	f000 ba0b 	b.w	8006914 <__retarget_lock_release_recursive>
 80064fe:	bf00      	nop
 8006500:	240113d5 	.word	0x240113d5

08006504 <__sinit>:
 8006504:	b510      	push	{r4, lr}
 8006506:	4604      	mov	r4, r0
 8006508:	f7ff fff0 	bl	80064ec <__sfp_lock_acquire>
 800650c:	6a23      	ldr	r3, [r4, #32]
 800650e:	b11b      	cbz	r3, 8006518 <__sinit+0x14>
 8006510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006514:	f7ff bff0 	b.w	80064f8 <__sfp_lock_release>
 8006518:	4b04      	ldr	r3, [pc, #16]	@ (800652c <__sinit+0x28>)
 800651a:	6223      	str	r3, [r4, #32]
 800651c:	4b04      	ldr	r3, [pc, #16]	@ (8006530 <__sinit+0x2c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1f5      	bne.n	8006510 <__sinit+0xc>
 8006524:	f7ff ffc4 	bl	80064b0 <global_stdio_init.part.0>
 8006528:	e7f2      	b.n	8006510 <__sinit+0xc>
 800652a:	bf00      	nop
 800652c:	08006471 	.word	0x08006471
 8006530:	240113cc 	.word	0x240113cc

08006534 <_fwalk_sglue>:
 8006534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006538:	4607      	mov	r7, r0
 800653a:	4688      	mov	r8, r1
 800653c:	4614      	mov	r4, r2
 800653e:	2600      	movs	r6, #0
 8006540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006544:	f1b9 0901 	subs.w	r9, r9, #1
 8006548:	d505      	bpl.n	8006556 <_fwalk_sglue+0x22>
 800654a:	6824      	ldr	r4, [r4, #0]
 800654c:	2c00      	cmp	r4, #0
 800654e:	d1f7      	bne.n	8006540 <_fwalk_sglue+0xc>
 8006550:	4630      	mov	r0, r6
 8006552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006556:	89ab      	ldrh	r3, [r5, #12]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d907      	bls.n	800656c <_fwalk_sglue+0x38>
 800655c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006560:	3301      	adds	r3, #1
 8006562:	d003      	beq.n	800656c <_fwalk_sglue+0x38>
 8006564:	4629      	mov	r1, r5
 8006566:	4638      	mov	r0, r7
 8006568:	47c0      	blx	r8
 800656a:	4306      	orrs	r6, r0
 800656c:	3568      	adds	r5, #104	@ 0x68
 800656e:	e7e9      	b.n	8006544 <_fwalk_sglue+0x10>

08006570 <iprintf>:
 8006570:	b40f      	push	{r0, r1, r2, r3}
 8006572:	b507      	push	{r0, r1, r2, lr}
 8006574:	4906      	ldr	r1, [pc, #24]	@ (8006590 <iprintf+0x20>)
 8006576:	ab04      	add	r3, sp, #16
 8006578:	6808      	ldr	r0, [r1, #0]
 800657a:	f853 2b04 	ldr.w	r2, [r3], #4
 800657e:	6881      	ldr	r1, [r0, #8]
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	f000 fa3d 	bl	8006a00 <_vfiprintf_r>
 8006586:	b003      	add	sp, #12
 8006588:	f85d eb04 	ldr.w	lr, [sp], #4
 800658c:	b004      	add	sp, #16
 800658e:	4770      	bx	lr
 8006590:	2400001c 	.word	0x2400001c

08006594 <_puts_r>:
 8006594:	6a03      	ldr	r3, [r0, #32]
 8006596:	b570      	push	{r4, r5, r6, lr}
 8006598:	6884      	ldr	r4, [r0, #8]
 800659a:	4605      	mov	r5, r0
 800659c:	460e      	mov	r6, r1
 800659e:	b90b      	cbnz	r3, 80065a4 <_puts_r+0x10>
 80065a0:	f7ff ffb0 	bl	8006504 <__sinit>
 80065a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065a6:	07db      	lsls	r3, r3, #31
 80065a8:	d405      	bmi.n	80065b6 <_puts_r+0x22>
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	0598      	lsls	r0, r3, #22
 80065ae:	d402      	bmi.n	80065b6 <_puts_r+0x22>
 80065b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065b2:	f000 f9ae 	bl	8006912 <__retarget_lock_acquire_recursive>
 80065b6:	89a3      	ldrh	r3, [r4, #12]
 80065b8:	0719      	lsls	r1, r3, #28
 80065ba:	d502      	bpl.n	80065c2 <_puts_r+0x2e>
 80065bc:	6923      	ldr	r3, [r4, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d135      	bne.n	800662e <_puts_r+0x9a>
 80065c2:	4621      	mov	r1, r4
 80065c4:	4628      	mov	r0, r5
 80065c6:	f000 f8c5 	bl	8006754 <__swsetup_r>
 80065ca:	b380      	cbz	r0, 800662e <_puts_r+0x9a>
 80065cc:	f04f 35ff 	mov.w	r5, #4294967295
 80065d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065d2:	07da      	lsls	r2, r3, #31
 80065d4:	d405      	bmi.n	80065e2 <_puts_r+0x4e>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	059b      	lsls	r3, r3, #22
 80065da:	d402      	bmi.n	80065e2 <_puts_r+0x4e>
 80065dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065de:	f000 f999 	bl	8006914 <__retarget_lock_release_recursive>
 80065e2:	4628      	mov	r0, r5
 80065e4:	bd70      	pop	{r4, r5, r6, pc}
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	da04      	bge.n	80065f4 <_puts_r+0x60>
 80065ea:	69a2      	ldr	r2, [r4, #24]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	dc17      	bgt.n	8006620 <_puts_r+0x8c>
 80065f0:	290a      	cmp	r1, #10
 80065f2:	d015      	beq.n	8006620 <_puts_r+0x8c>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	6022      	str	r2, [r4, #0]
 80065fa:	7019      	strb	r1, [r3, #0]
 80065fc:	68a3      	ldr	r3, [r4, #8]
 80065fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006602:	3b01      	subs	r3, #1
 8006604:	60a3      	str	r3, [r4, #8]
 8006606:	2900      	cmp	r1, #0
 8006608:	d1ed      	bne.n	80065e6 <_puts_r+0x52>
 800660a:	2b00      	cmp	r3, #0
 800660c:	da11      	bge.n	8006632 <_puts_r+0x9e>
 800660e:	4622      	mov	r2, r4
 8006610:	210a      	movs	r1, #10
 8006612:	4628      	mov	r0, r5
 8006614:	f000 f85f 	bl	80066d6 <__swbuf_r>
 8006618:	3001      	adds	r0, #1
 800661a:	d0d7      	beq.n	80065cc <_puts_r+0x38>
 800661c:	250a      	movs	r5, #10
 800661e:	e7d7      	b.n	80065d0 <_puts_r+0x3c>
 8006620:	4622      	mov	r2, r4
 8006622:	4628      	mov	r0, r5
 8006624:	f000 f857 	bl	80066d6 <__swbuf_r>
 8006628:	3001      	adds	r0, #1
 800662a:	d1e7      	bne.n	80065fc <_puts_r+0x68>
 800662c:	e7ce      	b.n	80065cc <_puts_r+0x38>
 800662e:	3e01      	subs	r6, #1
 8006630:	e7e4      	b.n	80065fc <_puts_r+0x68>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	6022      	str	r2, [r4, #0]
 8006638:	220a      	movs	r2, #10
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	e7ee      	b.n	800661c <_puts_r+0x88>
	...

08006640 <puts>:
 8006640:	4b02      	ldr	r3, [pc, #8]	@ (800664c <puts+0xc>)
 8006642:	4601      	mov	r1, r0
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	f7ff bfa5 	b.w	8006594 <_puts_r>
 800664a:	bf00      	nop
 800664c:	2400001c 	.word	0x2400001c

08006650 <__sread>:
 8006650:	b510      	push	{r4, lr}
 8006652:	460c      	mov	r4, r1
 8006654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006658:	f000 f8fc 	bl	8006854 <_read_r>
 800665c:	2800      	cmp	r0, #0
 800665e:	bfab      	itete	ge
 8006660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006662:	89a3      	ldrhlt	r3, [r4, #12]
 8006664:	181b      	addge	r3, r3, r0
 8006666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800666a:	bfac      	ite	ge
 800666c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800666e:	81a3      	strhlt	r3, [r4, #12]
 8006670:	bd10      	pop	{r4, pc}

08006672 <__swrite>:
 8006672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006676:	461f      	mov	r7, r3
 8006678:	898b      	ldrh	r3, [r1, #12]
 800667a:	05db      	lsls	r3, r3, #23
 800667c:	4605      	mov	r5, r0
 800667e:	460c      	mov	r4, r1
 8006680:	4616      	mov	r6, r2
 8006682:	d505      	bpl.n	8006690 <__swrite+0x1e>
 8006684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006688:	2302      	movs	r3, #2
 800668a:	2200      	movs	r2, #0
 800668c:	f000 f8d0 	bl	8006830 <_lseek_r>
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800669a:	81a3      	strh	r3, [r4, #12]
 800669c:	4632      	mov	r2, r6
 800669e:	463b      	mov	r3, r7
 80066a0:	4628      	mov	r0, r5
 80066a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066a6:	f000 b8f7 	b.w	8006898 <_write_r>

080066aa <__sseek>:
 80066aa:	b510      	push	{r4, lr}
 80066ac:	460c      	mov	r4, r1
 80066ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b2:	f000 f8bd 	bl	8006830 <_lseek_r>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	bf15      	itete	ne
 80066bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066c6:	81a3      	strheq	r3, [r4, #12]
 80066c8:	bf18      	it	ne
 80066ca:	81a3      	strhne	r3, [r4, #12]
 80066cc:	bd10      	pop	{r4, pc}

080066ce <__sclose>:
 80066ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d2:	f000 b89d 	b.w	8006810 <_close_r>

080066d6 <__swbuf_r>:
 80066d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d8:	460e      	mov	r6, r1
 80066da:	4614      	mov	r4, r2
 80066dc:	4605      	mov	r5, r0
 80066de:	b118      	cbz	r0, 80066e8 <__swbuf_r+0x12>
 80066e0:	6a03      	ldr	r3, [r0, #32]
 80066e2:	b90b      	cbnz	r3, 80066e8 <__swbuf_r+0x12>
 80066e4:	f7ff ff0e 	bl	8006504 <__sinit>
 80066e8:	69a3      	ldr	r3, [r4, #24]
 80066ea:	60a3      	str	r3, [r4, #8]
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	071a      	lsls	r2, r3, #28
 80066f0:	d501      	bpl.n	80066f6 <__swbuf_r+0x20>
 80066f2:	6923      	ldr	r3, [r4, #16]
 80066f4:	b943      	cbnz	r3, 8006708 <__swbuf_r+0x32>
 80066f6:	4621      	mov	r1, r4
 80066f8:	4628      	mov	r0, r5
 80066fa:	f000 f82b 	bl	8006754 <__swsetup_r>
 80066fe:	b118      	cbz	r0, 8006708 <__swbuf_r+0x32>
 8006700:	f04f 37ff 	mov.w	r7, #4294967295
 8006704:	4638      	mov	r0, r7
 8006706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	6922      	ldr	r2, [r4, #16]
 800670c:	1a98      	subs	r0, r3, r2
 800670e:	6963      	ldr	r3, [r4, #20]
 8006710:	b2f6      	uxtb	r6, r6
 8006712:	4283      	cmp	r3, r0
 8006714:	4637      	mov	r7, r6
 8006716:	dc05      	bgt.n	8006724 <__swbuf_r+0x4e>
 8006718:	4621      	mov	r1, r4
 800671a:	4628      	mov	r0, r5
 800671c:	f000 fc98 	bl	8007050 <_fflush_r>
 8006720:	2800      	cmp	r0, #0
 8006722:	d1ed      	bne.n	8006700 <__swbuf_r+0x2a>
 8006724:	68a3      	ldr	r3, [r4, #8]
 8006726:	3b01      	subs	r3, #1
 8006728:	60a3      	str	r3, [r4, #8]
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	6022      	str	r2, [r4, #0]
 8006730:	701e      	strb	r6, [r3, #0]
 8006732:	6962      	ldr	r2, [r4, #20]
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	429a      	cmp	r2, r3
 8006738:	d004      	beq.n	8006744 <__swbuf_r+0x6e>
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	07db      	lsls	r3, r3, #31
 800673e:	d5e1      	bpl.n	8006704 <__swbuf_r+0x2e>
 8006740:	2e0a      	cmp	r6, #10
 8006742:	d1df      	bne.n	8006704 <__swbuf_r+0x2e>
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f000 fc82 	bl	8007050 <_fflush_r>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0d9      	beq.n	8006704 <__swbuf_r+0x2e>
 8006750:	e7d6      	b.n	8006700 <__swbuf_r+0x2a>
	...

08006754 <__swsetup_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4b29      	ldr	r3, [pc, #164]	@ (80067fc <__swsetup_r+0xa8>)
 8006758:	4605      	mov	r5, r0
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	460c      	mov	r4, r1
 800675e:	b118      	cbz	r0, 8006768 <__swsetup_r+0x14>
 8006760:	6a03      	ldr	r3, [r0, #32]
 8006762:	b90b      	cbnz	r3, 8006768 <__swsetup_r+0x14>
 8006764:	f7ff fece 	bl	8006504 <__sinit>
 8006768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800676c:	0719      	lsls	r1, r3, #28
 800676e:	d422      	bmi.n	80067b6 <__swsetup_r+0x62>
 8006770:	06da      	lsls	r2, r3, #27
 8006772:	d407      	bmi.n	8006784 <__swsetup_r+0x30>
 8006774:	2209      	movs	r2, #9
 8006776:	602a      	str	r2, [r5, #0]
 8006778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800677c:	81a3      	strh	r3, [r4, #12]
 800677e:	f04f 30ff 	mov.w	r0, #4294967295
 8006782:	e033      	b.n	80067ec <__swsetup_r+0x98>
 8006784:	0758      	lsls	r0, r3, #29
 8006786:	d512      	bpl.n	80067ae <__swsetup_r+0x5a>
 8006788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800678a:	b141      	cbz	r1, 800679e <__swsetup_r+0x4a>
 800678c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006790:	4299      	cmp	r1, r3
 8006792:	d002      	beq.n	800679a <__swsetup_r+0x46>
 8006794:	4628      	mov	r0, r5
 8006796:	f000 f8bf 	bl	8006918 <_free_r>
 800679a:	2300      	movs	r3, #0
 800679c:	6363      	str	r3, [r4, #52]	@ 0x34
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	2300      	movs	r3, #0
 80067a8:	6063      	str	r3, [r4, #4]
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	f043 0308 	orr.w	r3, r3, #8
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	b94b      	cbnz	r3, 80067ce <__swsetup_r+0x7a>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067c4:	d003      	beq.n	80067ce <__swsetup_r+0x7a>
 80067c6:	4621      	mov	r1, r4
 80067c8:	4628      	mov	r0, r5
 80067ca:	f000 fc8f 	bl	80070ec <__smakebuf_r>
 80067ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d2:	f013 0201 	ands.w	r2, r3, #1
 80067d6:	d00a      	beq.n	80067ee <__swsetup_r+0x9a>
 80067d8:	2200      	movs	r2, #0
 80067da:	60a2      	str	r2, [r4, #8]
 80067dc:	6962      	ldr	r2, [r4, #20]
 80067de:	4252      	negs	r2, r2
 80067e0:	61a2      	str	r2, [r4, #24]
 80067e2:	6922      	ldr	r2, [r4, #16]
 80067e4:	b942      	cbnz	r2, 80067f8 <__swsetup_r+0xa4>
 80067e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067ea:	d1c5      	bne.n	8006778 <__swsetup_r+0x24>
 80067ec:	bd38      	pop	{r3, r4, r5, pc}
 80067ee:	0799      	lsls	r1, r3, #30
 80067f0:	bf58      	it	pl
 80067f2:	6962      	ldrpl	r2, [r4, #20]
 80067f4:	60a2      	str	r2, [r4, #8]
 80067f6:	e7f4      	b.n	80067e2 <__swsetup_r+0x8e>
 80067f8:	2000      	movs	r0, #0
 80067fa:	e7f7      	b.n	80067ec <__swsetup_r+0x98>
 80067fc:	2400001c 	.word	0x2400001c

08006800 <memset>:
 8006800:	4402      	add	r2, r0
 8006802:	4603      	mov	r3, r0
 8006804:	4293      	cmp	r3, r2
 8006806:	d100      	bne.n	800680a <memset+0xa>
 8006808:	4770      	bx	lr
 800680a:	f803 1b01 	strb.w	r1, [r3], #1
 800680e:	e7f9      	b.n	8006804 <memset+0x4>

08006810 <_close_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4d06      	ldr	r5, [pc, #24]	@ (800682c <_close_r+0x1c>)
 8006814:	2300      	movs	r3, #0
 8006816:	4604      	mov	r4, r0
 8006818:	4608      	mov	r0, r1
 800681a:	602b      	str	r3, [r5, #0]
 800681c:	f7fa fae6 	bl	8000dec <_close>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_close_r+0x1a>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_close_r+0x1a>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	240113d0 	.word	0x240113d0

08006830 <_lseek_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d07      	ldr	r5, [pc, #28]	@ (8006850 <_lseek_r+0x20>)
 8006834:	4604      	mov	r4, r0
 8006836:	4608      	mov	r0, r1
 8006838:	4611      	mov	r1, r2
 800683a:	2200      	movs	r2, #0
 800683c:	602a      	str	r2, [r5, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	f7fa fae0 	bl	8000e04 <_lseek>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_lseek_r+0x1e>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_lseek_r+0x1e>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	240113d0 	.word	0x240113d0

08006854 <_read_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4d07      	ldr	r5, [pc, #28]	@ (8006874 <_read_r+0x20>)
 8006858:	4604      	mov	r4, r0
 800685a:	4608      	mov	r0, r1
 800685c:	4611      	mov	r1, r2
 800685e:	2200      	movs	r2, #0
 8006860:	602a      	str	r2, [r5, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	f7fa faa6 	bl	8000db4 <_read>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d102      	bne.n	8006872 <_read_r+0x1e>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	b103      	cbz	r3, 8006872 <_read_r+0x1e>
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	bd38      	pop	{r3, r4, r5, pc}
 8006874:	240113d0 	.word	0x240113d0

08006878 <_sbrk_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4d06      	ldr	r5, [pc, #24]	@ (8006894 <_sbrk_r+0x1c>)
 800687c:	2300      	movs	r3, #0
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	f7fa fac0 	bl	8000e08 <_sbrk>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_sbrk_r+0x1a>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_sbrk_r+0x1a>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	240113d0 	.word	0x240113d0

08006898 <_write_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4d07      	ldr	r5, [pc, #28]	@ (80068b8 <_write_r+0x20>)
 800689c:	4604      	mov	r4, r0
 800689e:	4608      	mov	r0, r1
 80068a0:	4611      	mov	r1, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	602a      	str	r2, [r5, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f7fa fa92 	bl	8000dd0 <_write>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d102      	bne.n	80068b6 <_write_r+0x1e>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	b103      	cbz	r3, 80068b6 <_write_r+0x1e>
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	240113d0 	.word	0x240113d0

080068bc <__errno>:
 80068bc:	4b01      	ldr	r3, [pc, #4]	@ (80068c4 <__errno+0x8>)
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	2400001c 	.word	0x2400001c

080068c8 <__libc_init_array>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006900 <__libc_init_array+0x38>)
 80068cc:	4c0d      	ldr	r4, [pc, #52]	@ (8006904 <__libc_init_array+0x3c>)
 80068ce:	1b64      	subs	r4, r4, r5
 80068d0:	10a4      	asrs	r4, r4, #2
 80068d2:	2600      	movs	r6, #0
 80068d4:	42a6      	cmp	r6, r4
 80068d6:	d109      	bne.n	80068ec <__libc_init_array+0x24>
 80068d8:	4d0b      	ldr	r5, [pc, #44]	@ (8006908 <__libc_init_array+0x40>)
 80068da:	4c0c      	ldr	r4, [pc, #48]	@ (800690c <__libc_init_array+0x44>)
 80068dc:	f000 fc64 	bl	80071a8 <_init>
 80068e0:	1b64      	subs	r4, r4, r5
 80068e2:	10a4      	asrs	r4, r4, #2
 80068e4:	2600      	movs	r6, #0
 80068e6:	42a6      	cmp	r6, r4
 80068e8:	d105      	bne.n	80068f6 <__libc_init_array+0x2e>
 80068ea:	bd70      	pop	{r4, r5, r6, pc}
 80068ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f0:	4798      	blx	r3
 80068f2:	3601      	adds	r6, #1
 80068f4:	e7ee      	b.n	80068d4 <__libc_init_array+0xc>
 80068f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068fa:	4798      	blx	r3
 80068fc:	3601      	adds	r6, #1
 80068fe:	e7f2      	b.n	80068e6 <__libc_init_array+0x1e>
 8006900:	0801a700 	.word	0x0801a700
 8006904:	0801a700 	.word	0x0801a700
 8006908:	0801a700 	.word	0x0801a700
 800690c:	0801a704 	.word	0x0801a704

08006910 <__retarget_lock_init_recursive>:
 8006910:	4770      	bx	lr

08006912 <__retarget_lock_acquire_recursive>:
 8006912:	4770      	bx	lr

08006914 <__retarget_lock_release_recursive>:
 8006914:	4770      	bx	lr
	...

08006918 <_free_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4605      	mov	r5, r0
 800691c:	2900      	cmp	r1, #0
 800691e:	d041      	beq.n	80069a4 <_free_r+0x8c>
 8006920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006924:	1f0c      	subs	r4, r1, #4
 8006926:	2b00      	cmp	r3, #0
 8006928:	bfb8      	it	lt
 800692a:	18e4      	addlt	r4, r4, r3
 800692c:	f7ff fd52 	bl	80063d4 <__malloc_lock>
 8006930:	4a1d      	ldr	r2, [pc, #116]	@ (80069a8 <_free_r+0x90>)
 8006932:	6813      	ldr	r3, [r2, #0]
 8006934:	b933      	cbnz	r3, 8006944 <_free_r+0x2c>
 8006936:	6063      	str	r3, [r4, #4]
 8006938:	6014      	str	r4, [r2, #0]
 800693a:	4628      	mov	r0, r5
 800693c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006940:	f7ff bd4e 	b.w	80063e0 <__malloc_unlock>
 8006944:	42a3      	cmp	r3, r4
 8006946:	d908      	bls.n	800695a <_free_r+0x42>
 8006948:	6820      	ldr	r0, [r4, #0]
 800694a:	1821      	adds	r1, r4, r0
 800694c:	428b      	cmp	r3, r1
 800694e:	bf01      	itttt	eq
 8006950:	6819      	ldreq	r1, [r3, #0]
 8006952:	685b      	ldreq	r3, [r3, #4]
 8006954:	1809      	addeq	r1, r1, r0
 8006956:	6021      	streq	r1, [r4, #0]
 8006958:	e7ed      	b.n	8006936 <_free_r+0x1e>
 800695a:	461a      	mov	r2, r3
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	b10b      	cbz	r3, 8006964 <_free_r+0x4c>
 8006960:	42a3      	cmp	r3, r4
 8006962:	d9fa      	bls.n	800695a <_free_r+0x42>
 8006964:	6811      	ldr	r1, [r2, #0]
 8006966:	1850      	adds	r0, r2, r1
 8006968:	42a0      	cmp	r0, r4
 800696a:	d10b      	bne.n	8006984 <_free_r+0x6c>
 800696c:	6820      	ldr	r0, [r4, #0]
 800696e:	4401      	add	r1, r0
 8006970:	1850      	adds	r0, r2, r1
 8006972:	4283      	cmp	r3, r0
 8006974:	6011      	str	r1, [r2, #0]
 8006976:	d1e0      	bne.n	800693a <_free_r+0x22>
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	6053      	str	r3, [r2, #4]
 800697e:	4408      	add	r0, r1
 8006980:	6010      	str	r0, [r2, #0]
 8006982:	e7da      	b.n	800693a <_free_r+0x22>
 8006984:	d902      	bls.n	800698c <_free_r+0x74>
 8006986:	230c      	movs	r3, #12
 8006988:	602b      	str	r3, [r5, #0]
 800698a:	e7d6      	b.n	800693a <_free_r+0x22>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	1821      	adds	r1, r4, r0
 8006990:	428b      	cmp	r3, r1
 8006992:	bf04      	itt	eq
 8006994:	6819      	ldreq	r1, [r3, #0]
 8006996:	685b      	ldreq	r3, [r3, #4]
 8006998:	6063      	str	r3, [r4, #4]
 800699a:	bf04      	itt	eq
 800699c:	1809      	addeq	r1, r1, r0
 800699e:	6021      	streq	r1, [r4, #0]
 80069a0:	6054      	str	r4, [r2, #4]
 80069a2:	e7ca      	b.n	800693a <_free_r+0x22>
 80069a4:	bd38      	pop	{r3, r4, r5, pc}
 80069a6:	bf00      	nop
 80069a8:	24011290 	.word	0x24011290

080069ac <__sfputc_r>:
 80069ac:	6893      	ldr	r3, [r2, #8]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	b410      	push	{r4}
 80069b4:	6093      	str	r3, [r2, #8]
 80069b6:	da08      	bge.n	80069ca <__sfputc_r+0x1e>
 80069b8:	6994      	ldr	r4, [r2, #24]
 80069ba:	42a3      	cmp	r3, r4
 80069bc:	db01      	blt.n	80069c2 <__sfputc_r+0x16>
 80069be:	290a      	cmp	r1, #10
 80069c0:	d103      	bne.n	80069ca <__sfputc_r+0x1e>
 80069c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c6:	f7ff be86 	b.w	80066d6 <__swbuf_r>
 80069ca:	6813      	ldr	r3, [r2, #0]
 80069cc:	1c58      	adds	r0, r3, #1
 80069ce:	6010      	str	r0, [r2, #0]
 80069d0:	7019      	strb	r1, [r3, #0]
 80069d2:	4608      	mov	r0, r1
 80069d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069d8:	4770      	bx	lr

080069da <__sfputs_r>:
 80069da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069dc:	4606      	mov	r6, r0
 80069de:	460f      	mov	r7, r1
 80069e0:	4614      	mov	r4, r2
 80069e2:	18d5      	adds	r5, r2, r3
 80069e4:	42ac      	cmp	r4, r5
 80069e6:	d101      	bne.n	80069ec <__sfputs_r+0x12>
 80069e8:	2000      	movs	r0, #0
 80069ea:	e007      	b.n	80069fc <__sfputs_r+0x22>
 80069ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f0:	463a      	mov	r2, r7
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7ff ffda 	bl	80069ac <__sfputc_r>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d1f3      	bne.n	80069e4 <__sfputs_r+0xa>
 80069fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a00 <_vfiprintf_r>:
 8006a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	460d      	mov	r5, r1
 8006a06:	b09d      	sub	sp, #116	@ 0x74
 8006a08:	4614      	mov	r4, r2
 8006a0a:	4698      	mov	r8, r3
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	b118      	cbz	r0, 8006a18 <_vfiprintf_r+0x18>
 8006a10:	6a03      	ldr	r3, [r0, #32]
 8006a12:	b90b      	cbnz	r3, 8006a18 <_vfiprintf_r+0x18>
 8006a14:	f7ff fd76 	bl	8006504 <__sinit>
 8006a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a1a:	07d9      	lsls	r1, r3, #31
 8006a1c:	d405      	bmi.n	8006a2a <_vfiprintf_r+0x2a>
 8006a1e:	89ab      	ldrh	r3, [r5, #12]
 8006a20:	059a      	lsls	r2, r3, #22
 8006a22:	d402      	bmi.n	8006a2a <_vfiprintf_r+0x2a>
 8006a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a26:	f7ff ff74 	bl	8006912 <__retarget_lock_acquire_recursive>
 8006a2a:	89ab      	ldrh	r3, [r5, #12]
 8006a2c:	071b      	lsls	r3, r3, #28
 8006a2e:	d501      	bpl.n	8006a34 <_vfiprintf_r+0x34>
 8006a30:	692b      	ldr	r3, [r5, #16]
 8006a32:	b99b      	cbnz	r3, 8006a5c <_vfiprintf_r+0x5c>
 8006a34:	4629      	mov	r1, r5
 8006a36:	4630      	mov	r0, r6
 8006a38:	f7ff fe8c 	bl	8006754 <__swsetup_r>
 8006a3c:	b170      	cbz	r0, 8006a5c <_vfiprintf_r+0x5c>
 8006a3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a40:	07dc      	lsls	r4, r3, #31
 8006a42:	d504      	bpl.n	8006a4e <_vfiprintf_r+0x4e>
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	b01d      	add	sp, #116	@ 0x74
 8006a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	0598      	lsls	r0, r3, #22
 8006a52:	d4f7      	bmi.n	8006a44 <_vfiprintf_r+0x44>
 8006a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a56:	f7ff ff5d 	bl	8006914 <__retarget_lock_release_recursive>
 8006a5a:	e7f3      	b.n	8006a44 <_vfiprintf_r+0x44>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a60:	2320      	movs	r3, #32
 8006a62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a6a:	2330      	movs	r3, #48	@ 0x30
 8006a6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006c1c <_vfiprintf_r+0x21c>
 8006a70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a74:	f04f 0901 	mov.w	r9, #1
 8006a78:	4623      	mov	r3, r4
 8006a7a:	469a      	mov	sl, r3
 8006a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a80:	b10a      	cbz	r2, 8006a86 <_vfiprintf_r+0x86>
 8006a82:	2a25      	cmp	r2, #37	@ 0x25
 8006a84:	d1f9      	bne.n	8006a7a <_vfiprintf_r+0x7a>
 8006a86:	ebba 0b04 	subs.w	fp, sl, r4
 8006a8a:	d00b      	beq.n	8006aa4 <_vfiprintf_r+0xa4>
 8006a8c:	465b      	mov	r3, fp
 8006a8e:	4622      	mov	r2, r4
 8006a90:	4629      	mov	r1, r5
 8006a92:	4630      	mov	r0, r6
 8006a94:	f7ff ffa1 	bl	80069da <__sfputs_r>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f000 80a7 	beq.w	8006bec <_vfiprintf_r+0x1ec>
 8006a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006aa0:	445a      	add	r2, fp
 8006aa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 809f 	beq.w	8006bec <_vfiprintf_r+0x1ec>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ab8:	f10a 0a01 	add.w	sl, sl, #1
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	9307      	str	r3, [sp, #28]
 8006ac0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ac4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ac6:	4654      	mov	r4, sl
 8006ac8:	2205      	movs	r2, #5
 8006aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ace:	4853      	ldr	r0, [pc, #332]	@ (8006c1c <_vfiprintf_r+0x21c>)
 8006ad0:	f7f9 fc06 	bl	80002e0 <memchr>
 8006ad4:	9a04      	ldr	r2, [sp, #16]
 8006ad6:	b9d8      	cbnz	r0, 8006b10 <_vfiprintf_r+0x110>
 8006ad8:	06d1      	lsls	r1, r2, #27
 8006ada:	bf44      	itt	mi
 8006adc:	2320      	movmi	r3, #32
 8006ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ae2:	0713      	lsls	r3, r2, #28
 8006ae4:	bf44      	itt	mi
 8006ae6:	232b      	movmi	r3, #43	@ 0x2b
 8006ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006aec:	f89a 3000 	ldrb.w	r3, [sl]
 8006af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006af2:	d015      	beq.n	8006b20 <_vfiprintf_r+0x120>
 8006af4:	9a07      	ldr	r2, [sp, #28]
 8006af6:	4654      	mov	r4, sl
 8006af8:	2000      	movs	r0, #0
 8006afa:	f04f 0c0a 	mov.w	ip, #10
 8006afe:	4621      	mov	r1, r4
 8006b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b04:	3b30      	subs	r3, #48	@ 0x30
 8006b06:	2b09      	cmp	r3, #9
 8006b08:	d94b      	bls.n	8006ba2 <_vfiprintf_r+0x1a2>
 8006b0a:	b1b0      	cbz	r0, 8006b3a <_vfiprintf_r+0x13a>
 8006b0c:	9207      	str	r2, [sp, #28]
 8006b0e:	e014      	b.n	8006b3a <_vfiprintf_r+0x13a>
 8006b10:	eba0 0308 	sub.w	r3, r0, r8
 8006b14:	fa09 f303 	lsl.w	r3, r9, r3
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	46a2      	mov	sl, r4
 8006b1e:	e7d2      	b.n	8006ac6 <_vfiprintf_r+0xc6>
 8006b20:	9b03      	ldr	r3, [sp, #12]
 8006b22:	1d19      	adds	r1, r3, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	9103      	str	r1, [sp, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bfbb      	ittet	lt
 8006b2c:	425b      	neglt	r3, r3
 8006b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b32:	9307      	strge	r3, [sp, #28]
 8006b34:	9307      	strlt	r3, [sp, #28]
 8006b36:	bfb8      	it	lt
 8006b38:	9204      	strlt	r2, [sp, #16]
 8006b3a:	7823      	ldrb	r3, [r4, #0]
 8006b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b3e:	d10a      	bne.n	8006b56 <_vfiprintf_r+0x156>
 8006b40:	7863      	ldrb	r3, [r4, #1]
 8006b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b44:	d132      	bne.n	8006bac <_vfiprintf_r+0x1ac>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	1d1a      	adds	r2, r3, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	9203      	str	r2, [sp, #12]
 8006b4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b52:	3402      	adds	r4, #2
 8006b54:	9305      	str	r3, [sp, #20]
 8006b56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c2c <_vfiprintf_r+0x22c>
 8006b5a:	7821      	ldrb	r1, [r4, #0]
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	4650      	mov	r0, sl
 8006b60:	f7f9 fbbe 	bl	80002e0 <memchr>
 8006b64:	b138      	cbz	r0, 8006b76 <_vfiprintf_r+0x176>
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	eba0 000a 	sub.w	r0, r0, sl
 8006b6c:	2240      	movs	r2, #64	@ 0x40
 8006b6e:	4082      	lsls	r2, r0
 8006b70:	4313      	orrs	r3, r2
 8006b72:	3401      	adds	r4, #1
 8006b74:	9304      	str	r3, [sp, #16]
 8006b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7a:	4829      	ldr	r0, [pc, #164]	@ (8006c20 <_vfiprintf_r+0x220>)
 8006b7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b80:	2206      	movs	r2, #6
 8006b82:	f7f9 fbad 	bl	80002e0 <memchr>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d03f      	beq.n	8006c0a <_vfiprintf_r+0x20a>
 8006b8a:	4b26      	ldr	r3, [pc, #152]	@ (8006c24 <_vfiprintf_r+0x224>)
 8006b8c:	bb1b      	cbnz	r3, 8006bd6 <_vfiprintf_r+0x1d6>
 8006b8e:	9b03      	ldr	r3, [sp, #12]
 8006b90:	3307      	adds	r3, #7
 8006b92:	f023 0307 	bic.w	r3, r3, #7
 8006b96:	3308      	adds	r3, #8
 8006b98:	9303      	str	r3, [sp, #12]
 8006b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b9c:	443b      	add	r3, r7
 8006b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ba0:	e76a      	b.n	8006a78 <_vfiprintf_r+0x78>
 8006ba2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	2001      	movs	r0, #1
 8006baa:	e7a8      	b.n	8006afe <_vfiprintf_r+0xfe>
 8006bac:	2300      	movs	r3, #0
 8006bae:	3401      	adds	r4, #1
 8006bb0:	9305      	str	r3, [sp, #20]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	f04f 0c0a 	mov.w	ip, #10
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bbe:	3a30      	subs	r2, #48	@ 0x30
 8006bc0:	2a09      	cmp	r2, #9
 8006bc2:	d903      	bls.n	8006bcc <_vfiprintf_r+0x1cc>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0c6      	beq.n	8006b56 <_vfiprintf_r+0x156>
 8006bc8:	9105      	str	r1, [sp, #20]
 8006bca:	e7c4      	b.n	8006b56 <_vfiprintf_r+0x156>
 8006bcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e7f0      	b.n	8006bb8 <_vfiprintf_r+0x1b8>
 8006bd6:	ab03      	add	r3, sp, #12
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	462a      	mov	r2, r5
 8006bdc:	4b12      	ldr	r3, [pc, #72]	@ (8006c28 <_vfiprintf_r+0x228>)
 8006bde:	a904      	add	r1, sp, #16
 8006be0:	4630      	mov	r0, r6
 8006be2:	f3af 8000 	nop.w
 8006be6:	4607      	mov	r7, r0
 8006be8:	1c78      	adds	r0, r7, #1
 8006bea:	d1d6      	bne.n	8006b9a <_vfiprintf_r+0x19a>
 8006bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bee:	07d9      	lsls	r1, r3, #31
 8006bf0:	d405      	bmi.n	8006bfe <_vfiprintf_r+0x1fe>
 8006bf2:	89ab      	ldrh	r3, [r5, #12]
 8006bf4:	059a      	lsls	r2, r3, #22
 8006bf6:	d402      	bmi.n	8006bfe <_vfiprintf_r+0x1fe>
 8006bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bfa:	f7ff fe8b 	bl	8006914 <__retarget_lock_release_recursive>
 8006bfe:	89ab      	ldrh	r3, [r5, #12]
 8006c00:	065b      	lsls	r3, r3, #25
 8006c02:	f53f af1f 	bmi.w	8006a44 <_vfiprintf_r+0x44>
 8006c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c08:	e71e      	b.n	8006a48 <_vfiprintf_r+0x48>
 8006c0a:	ab03      	add	r3, sp, #12
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	462a      	mov	r2, r5
 8006c10:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <_vfiprintf_r+0x228>)
 8006c12:	a904      	add	r1, sp, #16
 8006c14:	4630      	mov	r0, r6
 8006c16:	f000 f879 	bl	8006d0c <_printf_i>
 8006c1a:	e7e4      	b.n	8006be6 <_vfiprintf_r+0x1e6>
 8006c1c:	0801a6c4 	.word	0x0801a6c4
 8006c20:	0801a6ce 	.word	0x0801a6ce
 8006c24:	00000000 	.word	0x00000000
 8006c28:	080069db 	.word	0x080069db
 8006c2c:	0801a6ca 	.word	0x0801a6ca

08006c30 <_printf_common>:
 8006c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c34:	4616      	mov	r6, r2
 8006c36:	4698      	mov	r8, r3
 8006c38:	688a      	ldr	r2, [r1, #8]
 8006c3a:	690b      	ldr	r3, [r1, #16]
 8006c3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c40:	4293      	cmp	r3, r2
 8006c42:	bfb8      	it	lt
 8006c44:	4613      	movlt	r3, r2
 8006c46:	6033      	str	r3, [r6, #0]
 8006c48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c4c:	4607      	mov	r7, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	b10a      	cbz	r2, 8006c56 <_printf_common+0x26>
 8006c52:	3301      	adds	r3, #1
 8006c54:	6033      	str	r3, [r6, #0]
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	0699      	lsls	r1, r3, #26
 8006c5a:	bf42      	ittt	mi
 8006c5c:	6833      	ldrmi	r3, [r6, #0]
 8006c5e:	3302      	addmi	r3, #2
 8006c60:	6033      	strmi	r3, [r6, #0]
 8006c62:	6825      	ldr	r5, [r4, #0]
 8006c64:	f015 0506 	ands.w	r5, r5, #6
 8006c68:	d106      	bne.n	8006c78 <_printf_common+0x48>
 8006c6a:	f104 0a19 	add.w	sl, r4, #25
 8006c6e:	68e3      	ldr	r3, [r4, #12]
 8006c70:	6832      	ldr	r2, [r6, #0]
 8006c72:	1a9b      	subs	r3, r3, r2
 8006c74:	42ab      	cmp	r3, r5
 8006c76:	dc26      	bgt.n	8006cc6 <_printf_common+0x96>
 8006c78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c7c:	6822      	ldr	r2, [r4, #0]
 8006c7e:	3b00      	subs	r3, #0
 8006c80:	bf18      	it	ne
 8006c82:	2301      	movne	r3, #1
 8006c84:	0692      	lsls	r2, r2, #26
 8006c86:	d42b      	bmi.n	8006ce0 <_printf_common+0xb0>
 8006c88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c8c:	4641      	mov	r1, r8
 8006c8e:	4638      	mov	r0, r7
 8006c90:	47c8      	blx	r9
 8006c92:	3001      	adds	r0, #1
 8006c94:	d01e      	beq.n	8006cd4 <_printf_common+0xa4>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	6922      	ldr	r2, [r4, #16]
 8006c9a:	f003 0306 	and.w	r3, r3, #6
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	bf02      	ittt	eq
 8006ca2:	68e5      	ldreq	r5, [r4, #12]
 8006ca4:	6833      	ldreq	r3, [r6, #0]
 8006ca6:	1aed      	subeq	r5, r5, r3
 8006ca8:	68a3      	ldr	r3, [r4, #8]
 8006caa:	bf0c      	ite	eq
 8006cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cb0:	2500      	movne	r5, #0
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	bfc4      	itt	gt
 8006cb6:	1a9b      	subgt	r3, r3, r2
 8006cb8:	18ed      	addgt	r5, r5, r3
 8006cba:	2600      	movs	r6, #0
 8006cbc:	341a      	adds	r4, #26
 8006cbe:	42b5      	cmp	r5, r6
 8006cc0:	d11a      	bne.n	8006cf8 <_printf_common+0xc8>
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	e008      	b.n	8006cd8 <_printf_common+0xa8>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	4652      	mov	r2, sl
 8006cca:	4641      	mov	r1, r8
 8006ccc:	4638      	mov	r0, r7
 8006cce:	47c8      	blx	r9
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d103      	bne.n	8006cdc <_printf_common+0xac>
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cdc:	3501      	adds	r5, #1
 8006cde:	e7c6      	b.n	8006c6e <_printf_common+0x3e>
 8006ce0:	18e1      	adds	r1, r4, r3
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	2030      	movs	r0, #48	@ 0x30
 8006ce6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cea:	4422      	add	r2, r4
 8006cec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006cf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006cf4:	3302      	adds	r3, #2
 8006cf6:	e7c7      	b.n	8006c88 <_printf_common+0x58>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	4622      	mov	r2, r4
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	4638      	mov	r0, r7
 8006d00:	47c8      	blx	r9
 8006d02:	3001      	adds	r0, #1
 8006d04:	d0e6      	beq.n	8006cd4 <_printf_common+0xa4>
 8006d06:	3601      	adds	r6, #1
 8006d08:	e7d9      	b.n	8006cbe <_printf_common+0x8e>
	...

08006d0c <_printf_i>:
 8006d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d10:	7e0f      	ldrb	r7, [r1, #24]
 8006d12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d14:	2f78      	cmp	r7, #120	@ 0x78
 8006d16:	4691      	mov	r9, r2
 8006d18:	4680      	mov	r8, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	469a      	mov	sl, r3
 8006d1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d22:	d807      	bhi.n	8006d34 <_printf_i+0x28>
 8006d24:	2f62      	cmp	r7, #98	@ 0x62
 8006d26:	d80a      	bhi.n	8006d3e <_printf_i+0x32>
 8006d28:	2f00      	cmp	r7, #0
 8006d2a:	f000 80d1 	beq.w	8006ed0 <_printf_i+0x1c4>
 8006d2e:	2f58      	cmp	r7, #88	@ 0x58
 8006d30:	f000 80b8 	beq.w	8006ea4 <_printf_i+0x198>
 8006d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d3c:	e03a      	b.n	8006db4 <_printf_i+0xa8>
 8006d3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d42:	2b15      	cmp	r3, #21
 8006d44:	d8f6      	bhi.n	8006d34 <_printf_i+0x28>
 8006d46:	a101      	add	r1, pc, #4	@ (adr r1, 8006d4c <_printf_i+0x40>)
 8006d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d4c:	08006da5 	.word	0x08006da5
 8006d50:	08006db9 	.word	0x08006db9
 8006d54:	08006d35 	.word	0x08006d35
 8006d58:	08006d35 	.word	0x08006d35
 8006d5c:	08006d35 	.word	0x08006d35
 8006d60:	08006d35 	.word	0x08006d35
 8006d64:	08006db9 	.word	0x08006db9
 8006d68:	08006d35 	.word	0x08006d35
 8006d6c:	08006d35 	.word	0x08006d35
 8006d70:	08006d35 	.word	0x08006d35
 8006d74:	08006d35 	.word	0x08006d35
 8006d78:	08006eb7 	.word	0x08006eb7
 8006d7c:	08006de3 	.word	0x08006de3
 8006d80:	08006e71 	.word	0x08006e71
 8006d84:	08006d35 	.word	0x08006d35
 8006d88:	08006d35 	.word	0x08006d35
 8006d8c:	08006ed9 	.word	0x08006ed9
 8006d90:	08006d35 	.word	0x08006d35
 8006d94:	08006de3 	.word	0x08006de3
 8006d98:	08006d35 	.word	0x08006d35
 8006d9c:	08006d35 	.word	0x08006d35
 8006da0:	08006e79 	.word	0x08006e79
 8006da4:	6833      	ldr	r3, [r6, #0]
 8006da6:	1d1a      	adds	r2, r3, #4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6032      	str	r2, [r6, #0]
 8006dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006db0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006db4:	2301      	movs	r3, #1
 8006db6:	e09c      	b.n	8006ef2 <_printf_i+0x1e6>
 8006db8:	6833      	ldr	r3, [r6, #0]
 8006dba:	6820      	ldr	r0, [r4, #0]
 8006dbc:	1d19      	adds	r1, r3, #4
 8006dbe:	6031      	str	r1, [r6, #0]
 8006dc0:	0606      	lsls	r6, r0, #24
 8006dc2:	d501      	bpl.n	8006dc8 <_printf_i+0xbc>
 8006dc4:	681d      	ldr	r5, [r3, #0]
 8006dc6:	e003      	b.n	8006dd0 <_printf_i+0xc4>
 8006dc8:	0645      	lsls	r5, r0, #25
 8006dca:	d5fb      	bpl.n	8006dc4 <_printf_i+0xb8>
 8006dcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dd0:	2d00      	cmp	r5, #0
 8006dd2:	da03      	bge.n	8006ddc <_printf_i+0xd0>
 8006dd4:	232d      	movs	r3, #45	@ 0x2d
 8006dd6:	426d      	negs	r5, r5
 8006dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ddc:	4858      	ldr	r0, [pc, #352]	@ (8006f40 <_printf_i+0x234>)
 8006dde:	230a      	movs	r3, #10
 8006de0:	e011      	b.n	8006e06 <_printf_i+0xfa>
 8006de2:	6821      	ldr	r1, [r4, #0]
 8006de4:	6833      	ldr	r3, [r6, #0]
 8006de6:	0608      	lsls	r0, r1, #24
 8006de8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006dec:	d402      	bmi.n	8006df4 <_printf_i+0xe8>
 8006dee:	0649      	lsls	r1, r1, #25
 8006df0:	bf48      	it	mi
 8006df2:	b2ad      	uxthmi	r5, r5
 8006df4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006df6:	4852      	ldr	r0, [pc, #328]	@ (8006f40 <_printf_i+0x234>)
 8006df8:	6033      	str	r3, [r6, #0]
 8006dfa:	bf14      	ite	ne
 8006dfc:	230a      	movne	r3, #10
 8006dfe:	2308      	moveq	r3, #8
 8006e00:	2100      	movs	r1, #0
 8006e02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e06:	6866      	ldr	r6, [r4, #4]
 8006e08:	60a6      	str	r6, [r4, #8]
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	db05      	blt.n	8006e1a <_printf_i+0x10e>
 8006e0e:	6821      	ldr	r1, [r4, #0]
 8006e10:	432e      	orrs	r6, r5
 8006e12:	f021 0104 	bic.w	r1, r1, #4
 8006e16:	6021      	str	r1, [r4, #0]
 8006e18:	d04b      	beq.n	8006eb2 <_printf_i+0x1a6>
 8006e1a:	4616      	mov	r6, r2
 8006e1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e20:	fb03 5711 	mls	r7, r3, r1, r5
 8006e24:	5dc7      	ldrb	r7, [r0, r7]
 8006e26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e2a:	462f      	mov	r7, r5
 8006e2c:	42bb      	cmp	r3, r7
 8006e2e:	460d      	mov	r5, r1
 8006e30:	d9f4      	bls.n	8006e1c <_printf_i+0x110>
 8006e32:	2b08      	cmp	r3, #8
 8006e34:	d10b      	bne.n	8006e4e <_printf_i+0x142>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	07df      	lsls	r7, r3, #31
 8006e3a:	d508      	bpl.n	8006e4e <_printf_i+0x142>
 8006e3c:	6923      	ldr	r3, [r4, #16]
 8006e3e:	6861      	ldr	r1, [r4, #4]
 8006e40:	4299      	cmp	r1, r3
 8006e42:	bfde      	ittt	le
 8006e44:	2330      	movle	r3, #48	@ 0x30
 8006e46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e4e:	1b92      	subs	r2, r2, r6
 8006e50:	6122      	str	r2, [r4, #16]
 8006e52:	f8cd a000 	str.w	sl, [sp]
 8006e56:	464b      	mov	r3, r9
 8006e58:	aa03      	add	r2, sp, #12
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	f7ff fee7 	bl	8006c30 <_printf_common>
 8006e62:	3001      	adds	r0, #1
 8006e64:	d14a      	bne.n	8006efc <_printf_i+0x1f0>
 8006e66:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6a:	b004      	add	sp, #16
 8006e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	f043 0320 	orr.w	r3, r3, #32
 8006e76:	6023      	str	r3, [r4, #0]
 8006e78:	4832      	ldr	r0, [pc, #200]	@ (8006f44 <_printf_i+0x238>)
 8006e7a:	2778      	movs	r7, #120	@ 0x78
 8006e7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	6831      	ldr	r1, [r6, #0]
 8006e84:	061f      	lsls	r7, r3, #24
 8006e86:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e8a:	d402      	bmi.n	8006e92 <_printf_i+0x186>
 8006e8c:	065f      	lsls	r7, r3, #25
 8006e8e:	bf48      	it	mi
 8006e90:	b2ad      	uxthmi	r5, r5
 8006e92:	6031      	str	r1, [r6, #0]
 8006e94:	07d9      	lsls	r1, r3, #31
 8006e96:	bf44      	itt	mi
 8006e98:	f043 0320 	orrmi.w	r3, r3, #32
 8006e9c:	6023      	strmi	r3, [r4, #0]
 8006e9e:	b11d      	cbz	r5, 8006ea8 <_printf_i+0x19c>
 8006ea0:	2310      	movs	r3, #16
 8006ea2:	e7ad      	b.n	8006e00 <_printf_i+0xf4>
 8006ea4:	4826      	ldr	r0, [pc, #152]	@ (8006f40 <_printf_i+0x234>)
 8006ea6:	e7e9      	b.n	8006e7c <_printf_i+0x170>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	f023 0320 	bic.w	r3, r3, #32
 8006eae:	6023      	str	r3, [r4, #0]
 8006eb0:	e7f6      	b.n	8006ea0 <_printf_i+0x194>
 8006eb2:	4616      	mov	r6, r2
 8006eb4:	e7bd      	b.n	8006e32 <_printf_i+0x126>
 8006eb6:	6833      	ldr	r3, [r6, #0]
 8006eb8:	6825      	ldr	r5, [r4, #0]
 8006eba:	6961      	ldr	r1, [r4, #20]
 8006ebc:	1d18      	adds	r0, r3, #4
 8006ebe:	6030      	str	r0, [r6, #0]
 8006ec0:	062e      	lsls	r6, r5, #24
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	d501      	bpl.n	8006eca <_printf_i+0x1be>
 8006ec6:	6019      	str	r1, [r3, #0]
 8006ec8:	e002      	b.n	8006ed0 <_printf_i+0x1c4>
 8006eca:	0668      	lsls	r0, r5, #25
 8006ecc:	d5fb      	bpl.n	8006ec6 <_printf_i+0x1ba>
 8006ece:	8019      	strh	r1, [r3, #0]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6123      	str	r3, [r4, #16]
 8006ed4:	4616      	mov	r6, r2
 8006ed6:	e7bc      	b.n	8006e52 <_printf_i+0x146>
 8006ed8:	6833      	ldr	r3, [r6, #0]
 8006eda:	1d1a      	adds	r2, r3, #4
 8006edc:	6032      	str	r2, [r6, #0]
 8006ede:	681e      	ldr	r6, [r3, #0]
 8006ee0:	6862      	ldr	r2, [r4, #4]
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f7f9 f9fb 	bl	80002e0 <memchr>
 8006eea:	b108      	cbz	r0, 8006ef0 <_printf_i+0x1e4>
 8006eec:	1b80      	subs	r0, r0, r6
 8006eee:	6060      	str	r0, [r4, #4]
 8006ef0:	6863      	ldr	r3, [r4, #4]
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006efa:	e7aa      	b.n	8006e52 <_printf_i+0x146>
 8006efc:	6923      	ldr	r3, [r4, #16]
 8006efe:	4632      	mov	r2, r6
 8006f00:	4649      	mov	r1, r9
 8006f02:	4640      	mov	r0, r8
 8006f04:	47d0      	blx	sl
 8006f06:	3001      	adds	r0, #1
 8006f08:	d0ad      	beq.n	8006e66 <_printf_i+0x15a>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	079b      	lsls	r3, r3, #30
 8006f0e:	d413      	bmi.n	8006f38 <_printf_i+0x22c>
 8006f10:	68e0      	ldr	r0, [r4, #12]
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	4298      	cmp	r0, r3
 8006f16:	bfb8      	it	lt
 8006f18:	4618      	movlt	r0, r3
 8006f1a:	e7a6      	b.n	8006e6a <_printf_i+0x15e>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4632      	mov	r2, r6
 8006f20:	4649      	mov	r1, r9
 8006f22:	4640      	mov	r0, r8
 8006f24:	47d0      	blx	sl
 8006f26:	3001      	adds	r0, #1
 8006f28:	d09d      	beq.n	8006e66 <_printf_i+0x15a>
 8006f2a:	3501      	adds	r5, #1
 8006f2c:	68e3      	ldr	r3, [r4, #12]
 8006f2e:	9903      	ldr	r1, [sp, #12]
 8006f30:	1a5b      	subs	r3, r3, r1
 8006f32:	42ab      	cmp	r3, r5
 8006f34:	dcf2      	bgt.n	8006f1c <_printf_i+0x210>
 8006f36:	e7eb      	b.n	8006f10 <_printf_i+0x204>
 8006f38:	2500      	movs	r5, #0
 8006f3a:	f104 0619 	add.w	r6, r4, #25
 8006f3e:	e7f5      	b.n	8006f2c <_printf_i+0x220>
 8006f40:	0801a6d5 	.word	0x0801a6d5
 8006f44:	0801a6e6 	.word	0x0801a6e6

08006f48 <__sflush_r>:
 8006f48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f50:	0716      	lsls	r6, r2, #28
 8006f52:	4605      	mov	r5, r0
 8006f54:	460c      	mov	r4, r1
 8006f56:	d454      	bmi.n	8007002 <__sflush_r+0xba>
 8006f58:	684b      	ldr	r3, [r1, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	dc02      	bgt.n	8006f64 <__sflush_r+0x1c>
 8006f5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	dd48      	ble.n	8006ff6 <__sflush_r+0xae>
 8006f64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f66:	2e00      	cmp	r6, #0
 8006f68:	d045      	beq.n	8006ff6 <__sflush_r+0xae>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f70:	682f      	ldr	r7, [r5, #0]
 8006f72:	6a21      	ldr	r1, [r4, #32]
 8006f74:	602b      	str	r3, [r5, #0]
 8006f76:	d030      	beq.n	8006fda <__sflush_r+0x92>
 8006f78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	0759      	lsls	r1, r3, #29
 8006f7e:	d505      	bpl.n	8006f8c <__sflush_r+0x44>
 8006f80:	6863      	ldr	r3, [r4, #4]
 8006f82:	1ad2      	subs	r2, r2, r3
 8006f84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f86:	b10b      	cbz	r3, 8006f8c <__sflush_r+0x44>
 8006f88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f90:	6a21      	ldr	r1, [r4, #32]
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b0      	blx	r6
 8006f96:	1c43      	adds	r3, r0, #1
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	d106      	bne.n	8006faa <__sflush_r+0x62>
 8006f9c:	6829      	ldr	r1, [r5, #0]
 8006f9e:	291d      	cmp	r1, #29
 8006fa0:	d82b      	bhi.n	8006ffa <__sflush_r+0xb2>
 8006fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800704c <__sflush_r+0x104>)
 8006fa4:	40ca      	lsrs	r2, r1
 8006fa6:	07d6      	lsls	r6, r2, #31
 8006fa8:	d527      	bpl.n	8006ffa <__sflush_r+0xb2>
 8006faa:	2200      	movs	r2, #0
 8006fac:	6062      	str	r2, [r4, #4]
 8006fae:	04d9      	lsls	r1, r3, #19
 8006fb0:	6922      	ldr	r2, [r4, #16]
 8006fb2:	6022      	str	r2, [r4, #0]
 8006fb4:	d504      	bpl.n	8006fc0 <__sflush_r+0x78>
 8006fb6:	1c42      	adds	r2, r0, #1
 8006fb8:	d101      	bne.n	8006fbe <__sflush_r+0x76>
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	b903      	cbnz	r3, 8006fc0 <__sflush_r+0x78>
 8006fbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fc2:	602f      	str	r7, [r5, #0]
 8006fc4:	b1b9      	cbz	r1, 8006ff6 <__sflush_r+0xae>
 8006fc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fca:	4299      	cmp	r1, r3
 8006fcc:	d002      	beq.n	8006fd4 <__sflush_r+0x8c>
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7ff fca2 	bl	8006918 <_free_r>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fd8:	e00d      	b.n	8006ff6 <__sflush_r+0xae>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b0      	blx	r6
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	1c50      	adds	r0, r2, #1
 8006fe4:	d1c9      	bne.n	8006f7a <__sflush_r+0x32>
 8006fe6:	682b      	ldr	r3, [r5, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0c6      	beq.n	8006f7a <__sflush_r+0x32>
 8006fec:	2b1d      	cmp	r3, #29
 8006fee:	d001      	beq.n	8006ff4 <__sflush_r+0xac>
 8006ff0:	2b16      	cmp	r3, #22
 8006ff2:	d11e      	bne.n	8007032 <__sflush_r+0xea>
 8006ff4:	602f      	str	r7, [r5, #0]
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e022      	b.n	8007040 <__sflush_r+0xf8>
 8006ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ffe:	b21b      	sxth	r3, r3
 8007000:	e01b      	b.n	800703a <__sflush_r+0xf2>
 8007002:	690f      	ldr	r7, [r1, #16]
 8007004:	2f00      	cmp	r7, #0
 8007006:	d0f6      	beq.n	8006ff6 <__sflush_r+0xae>
 8007008:	0793      	lsls	r3, r2, #30
 800700a:	680e      	ldr	r6, [r1, #0]
 800700c:	bf08      	it	eq
 800700e:	694b      	ldreq	r3, [r1, #20]
 8007010:	600f      	str	r7, [r1, #0]
 8007012:	bf18      	it	ne
 8007014:	2300      	movne	r3, #0
 8007016:	eba6 0807 	sub.w	r8, r6, r7
 800701a:	608b      	str	r3, [r1, #8]
 800701c:	f1b8 0f00 	cmp.w	r8, #0
 8007020:	dde9      	ble.n	8006ff6 <__sflush_r+0xae>
 8007022:	6a21      	ldr	r1, [r4, #32]
 8007024:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007026:	4643      	mov	r3, r8
 8007028:	463a      	mov	r2, r7
 800702a:	4628      	mov	r0, r5
 800702c:	47b0      	blx	r6
 800702e:	2800      	cmp	r0, #0
 8007030:	dc08      	bgt.n	8007044 <__sflush_r+0xfc>
 8007032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800703a:	81a3      	strh	r3, [r4, #12]
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007044:	4407      	add	r7, r0
 8007046:	eba8 0800 	sub.w	r8, r8, r0
 800704a:	e7e7      	b.n	800701c <__sflush_r+0xd4>
 800704c:	20400001 	.word	0x20400001

08007050 <_fflush_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	690b      	ldr	r3, [r1, #16]
 8007054:	4605      	mov	r5, r0
 8007056:	460c      	mov	r4, r1
 8007058:	b913      	cbnz	r3, 8007060 <_fflush_r+0x10>
 800705a:	2500      	movs	r5, #0
 800705c:	4628      	mov	r0, r5
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	b118      	cbz	r0, 800706a <_fflush_r+0x1a>
 8007062:	6a03      	ldr	r3, [r0, #32]
 8007064:	b90b      	cbnz	r3, 800706a <_fflush_r+0x1a>
 8007066:	f7ff fa4d 	bl	8006504 <__sinit>
 800706a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f3      	beq.n	800705a <_fflush_r+0xa>
 8007072:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007074:	07d0      	lsls	r0, r2, #31
 8007076:	d404      	bmi.n	8007082 <_fflush_r+0x32>
 8007078:	0599      	lsls	r1, r3, #22
 800707a:	d402      	bmi.n	8007082 <_fflush_r+0x32>
 800707c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800707e:	f7ff fc48 	bl	8006912 <__retarget_lock_acquire_recursive>
 8007082:	4628      	mov	r0, r5
 8007084:	4621      	mov	r1, r4
 8007086:	f7ff ff5f 	bl	8006f48 <__sflush_r>
 800708a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800708c:	07da      	lsls	r2, r3, #31
 800708e:	4605      	mov	r5, r0
 8007090:	d4e4      	bmi.n	800705c <_fflush_r+0xc>
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	059b      	lsls	r3, r3, #22
 8007096:	d4e1      	bmi.n	800705c <_fflush_r+0xc>
 8007098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800709a:	f7ff fc3b 	bl	8006914 <__retarget_lock_release_recursive>
 800709e:	e7dd      	b.n	800705c <_fflush_r+0xc>

080070a0 <__swhatbuf_r>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	460c      	mov	r4, r1
 80070a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a8:	2900      	cmp	r1, #0
 80070aa:	b096      	sub	sp, #88	@ 0x58
 80070ac:	4615      	mov	r5, r2
 80070ae:	461e      	mov	r6, r3
 80070b0:	da0d      	bge.n	80070ce <__swhatbuf_r+0x2e>
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80070b8:	f04f 0100 	mov.w	r1, #0
 80070bc:	bf14      	ite	ne
 80070be:	2340      	movne	r3, #64	@ 0x40
 80070c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80070c4:	2000      	movs	r0, #0
 80070c6:	6031      	str	r1, [r6, #0]
 80070c8:	602b      	str	r3, [r5, #0]
 80070ca:	b016      	add	sp, #88	@ 0x58
 80070cc:	bd70      	pop	{r4, r5, r6, pc}
 80070ce:	466a      	mov	r2, sp
 80070d0:	f000 f848 	bl	8007164 <_fstat_r>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	dbec      	blt.n	80070b2 <__swhatbuf_r+0x12>
 80070d8:	9901      	ldr	r1, [sp, #4]
 80070da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80070de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80070e2:	4259      	negs	r1, r3
 80070e4:	4159      	adcs	r1, r3
 80070e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070ea:	e7eb      	b.n	80070c4 <__swhatbuf_r+0x24>

080070ec <__smakebuf_r>:
 80070ec:	898b      	ldrh	r3, [r1, #12]
 80070ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070f0:	079d      	lsls	r5, r3, #30
 80070f2:	4606      	mov	r6, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	d507      	bpl.n	8007108 <__smakebuf_r+0x1c>
 80070f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	6123      	str	r3, [r4, #16]
 8007100:	2301      	movs	r3, #1
 8007102:	6163      	str	r3, [r4, #20]
 8007104:	b003      	add	sp, #12
 8007106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007108:	ab01      	add	r3, sp, #4
 800710a:	466a      	mov	r2, sp
 800710c:	f7ff ffc8 	bl	80070a0 <__swhatbuf_r>
 8007110:	9f00      	ldr	r7, [sp, #0]
 8007112:	4605      	mov	r5, r0
 8007114:	4639      	mov	r1, r7
 8007116:	4630      	mov	r0, r6
 8007118:	f7ff f8dc 	bl	80062d4 <_malloc_r>
 800711c:	b948      	cbnz	r0, 8007132 <__smakebuf_r+0x46>
 800711e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007122:	059a      	lsls	r2, r3, #22
 8007124:	d4ee      	bmi.n	8007104 <__smakebuf_r+0x18>
 8007126:	f023 0303 	bic.w	r3, r3, #3
 800712a:	f043 0302 	orr.w	r3, r3, #2
 800712e:	81a3      	strh	r3, [r4, #12]
 8007130:	e7e2      	b.n	80070f8 <__smakebuf_r+0xc>
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	6020      	str	r0, [r4, #0]
 8007136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	9b01      	ldr	r3, [sp, #4]
 800713e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007142:	b15b      	cbz	r3, 800715c <__smakebuf_r+0x70>
 8007144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007148:	4630      	mov	r0, r6
 800714a:	f000 f81d 	bl	8007188 <_isatty_r>
 800714e:	b128      	cbz	r0, 800715c <__smakebuf_r+0x70>
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	f023 0303 	bic.w	r3, r3, #3
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	81a3      	strh	r3, [r4, #12]
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	431d      	orrs	r5, r3
 8007160:	81a5      	strh	r5, [r4, #12]
 8007162:	e7cf      	b.n	8007104 <__smakebuf_r+0x18>

08007164 <_fstat_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d07      	ldr	r5, [pc, #28]	@ (8007184 <_fstat_r+0x20>)
 8007168:	2300      	movs	r3, #0
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	4611      	mov	r1, r2
 8007170:	602b      	str	r3, [r5, #0]
 8007172:	f7f9 fe3f 	bl	8000df4 <_fstat>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	d102      	bne.n	8007180 <_fstat_r+0x1c>
 800717a:	682b      	ldr	r3, [r5, #0]
 800717c:	b103      	cbz	r3, 8007180 <_fstat_r+0x1c>
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	bd38      	pop	{r3, r4, r5, pc}
 8007182:	bf00      	nop
 8007184:	240113d0 	.word	0x240113d0

08007188 <_isatty_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4d06      	ldr	r5, [pc, #24]	@ (80071a4 <_isatty_r+0x1c>)
 800718c:	2300      	movs	r3, #0
 800718e:	4604      	mov	r4, r0
 8007190:	4608      	mov	r0, r1
 8007192:	602b      	str	r3, [r5, #0]
 8007194:	f7f9 fe34 	bl	8000e00 <_isatty>
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d102      	bne.n	80071a2 <_isatty_r+0x1a>
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	b103      	cbz	r3, 80071a2 <_isatty_r+0x1a>
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
 80071a4:	240113d0 	.word	0x240113d0

080071a8 <_init>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr

080071b4 <_fini>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr
