
STM32H743-DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c984  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000778c8  0800cc40  0800cc40  0000dc40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08084508  08084508  00085508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08084510  08084510  00085510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08084514  08084514  00085514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08084518  00086000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcm_bss     00011020  20000000  20000000  00087000  2**5
                  ALLOC
  8 .dtcm_data    00000000  20011020  20011020  00086088  2**0
                  CONTENTS
  9 .bss          0006f6c4  24000088  24000088  00086088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2406f74c  2406f74c  00086088  2**0
                  ALLOC
 11 .ramd2        00028004  30000000  30000000  00087000  2**2
                  ALLOC
 12 .ramd3        0000e1b0  38000000  38000000  00087000  2**2
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00086088  2**0
                  CONTENTS, READONLY
 14 .debug_info   00035a51  00000000  00000000  000860b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006efd  00000000  00000000  000bbb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00018184  00000000  00000000  000c2a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a80  00000000  00000000  000dab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002d25  00000000  00000000  000dc608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ebd8  00000000  00000000  000df32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003aa59  00000000  00000000  0011df05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00183beb  00000000  00000000  0015895e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000b3  00000000  00000000  002dc549  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00005668  00000000  00000000  002dc5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006e  00000000  00000000  002e1c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    000041c4  00000000  00000000  002e1cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 000000e0  00000000  00000000  002e5e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cc0c 	.word	0x0800cc0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800cc0c 	.word	0x0800cc0c

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <memchr>:
 80003a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003a4:	2a10      	cmp	r2, #16
 80003a6:	db2b      	blt.n	8000400 <memchr+0x60>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	d008      	beq.n	80003c0 <memchr+0x20>
 80003ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003b2:	3a01      	subs	r2, #1
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d02d      	beq.n	8000414 <memchr+0x74>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	b342      	cbz	r2, 8000410 <memchr+0x70>
 80003be:	d1f6      	bne.n	80003ae <memchr+0xe>
 80003c0:	b4f0      	push	{r4, r5, r6, r7}
 80003c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ca:	f022 0407 	bic.w	r4, r2, #7
 80003ce:	f07f 0700 	mvns.w	r7, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003d8:	3c08      	subs	r4, #8
 80003da:	ea85 0501 	eor.w	r5, r5, r1
 80003de:	ea86 0601 	eor.w	r6, r6, r1
 80003e2:	fa85 f547 	uadd8	r5, r5, r7
 80003e6:	faa3 f587 	sel	r5, r3, r7
 80003ea:	fa86 f647 	uadd8	r6, r6, r7
 80003ee:	faa5 f687 	sel	r6, r5, r7
 80003f2:	b98e      	cbnz	r6, 8000418 <memchr+0x78>
 80003f4:	d1ee      	bne.n	80003d4 <memchr+0x34>
 80003f6:	bcf0      	pop	{r4, r5, r6, r7}
 80003f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003fc:	f002 0207 	and.w	r2, r2, #7
 8000400:	b132      	cbz	r2, 8000410 <memchr+0x70>
 8000402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000406:	3a01      	subs	r2, #1
 8000408:	ea83 0301 	eor.w	r3, r3, r1
 800040c:	b113      	cbz	r3, 8000414 <memchr+0x74>
 800040e:	d1f8      	bne.n	8000402 <memchr+0x62>
 8000410:	2000      	movs	r0, #0
 8000412:	4770      	bx	lr
 8000414:	3801      	subs	r0, #1
 8000416:	4770      	bx	lr
 8000418:	2d00      	cmp	r5, #0
 800041a:	bf06      	itte	eq
 800041c:	4635      	moveq	r5, r6
 800041e:	3803      	subeq	r0, #3
 8000420:	3807      	subne	r0, #7
 8000422:	f015 0f01 	tst.w	r5, #1
 8000426:	d107      	bne.n	8000438 <memchr+0x98>
 8000428:	3001      	adds	r0, #1
 800042a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800042e:	bf02      	ittt	eq
 8000430:	3001      	addeq	r0, #1
 8000432:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000436:	3001      	addeq	r0, #1
 8000438:	bcf0      	pop	{r4, r5, r6, r7}
 800043a:	3801      	subs	r0, #1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	@ 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__aeabi_uldivmod>:
 80007b8:	b953      	cbnz	r3, 80007d0 <__aeabi_uldivmod+0x18>
 80007ba:	b94a      	cbnz	r2, 80007d0 <__aeabi_uldivmod+0x18>
 80007bc:	2900      	cmp	r1, #0
 80007be:	bf08      	it	eq
 80007c0:	2800      	cmpeq	r0, #0
 80007c2:	bf1c      	itt	ne
 80007c4:	f04f 31ff 	movne.w	r1, #4294967295
 80007c8:	f04f 30ff 	movne.w	r0, #4294967295
 80007cc:	f000 b988 	b.w	8000ae0 <__aeabi_idiv0>
 80007d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007d8:	f000 f806 	bl	80007e8 <__udivmoddi4>
 80007dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007e4:	b004      	add	sp, #16
 80007e6:	4770      	bx	lr

080007e8 <__udivmoddi4>:
 80007e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ec:	9d08      	ldr	r5, [sp, #32]
 80007ee:	468e      	mov	lr, r1
 80007f0:	4604      	mov	r4, r0
 80007f2:	4688      	mov	r8, r1
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d14a      	bne.n	800088e <__udivmoddi4+0xa6>
 80007f8:	428a      	cmp	r2, r1
 80007fa:	4617      	mov	r7, r2
 80007fc:	d962      	bls.n	80008c4 <__udivmoddi4+0xdc>
 80007fe:	fab2 f682 	clz	r6, r2
 8000802:	b14e      	cbz	r6, 8000818 <__udivmoddi4+0x30>
 8000804:	f1c6 0320 	rsb	r3, r6, #32
 8000808:	fa01 f806 	lsl.w	r8, r1, r6
 800080c:	fa20 f303 	lsr.w	r3, r0, r3
 8000810:	40b7      	lsls	r7, r6
 8000812:	ea43 0808 	orr.w	r8, r3, r8
 8000816:	40b4      	lsls	r4, r6
 8000818:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800081c:	fa1f fc87 	uxth.w	ip, r7
 8000820:	fbb8 f1fe 	udiv	r1, r8, lr
 8000824:	0c23      	lsrs	r3, r4, #16
 8000826:	fb0e 8811 	mls	r8, lr, r1, r8
 800082a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800082e:	fb01 f20c 	mul.w	r2, r1, ip
 8000832:	429a      	cmp	r2, r3
 8000834:	d909      	bls.n	800084a <__udivmoddi4+0x62>
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	f101 30ff 	add.w	r0, r1, #4294967295
 800083c:	f080 80ea 	bcs.w	8000a14 <__udivmoddi4+0x22c>
 8000840:	429a      	cmp	r2, r3
 8000842:	f240 80e7 	bls.w	8000a14 <__udivmoddi4+0x22c>
 8000846:	3902      	subs	r1, #2
 8000848:	443b      	add	r3, r7
 800084a:	1a9a      	subs	r2, r3, r2
 800084c:	b2a3      	uxth	r3, r4
 800084e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000852:	fb0e 2210 	mls	r2, lr, r0, r2
 8000856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800085a:	fb00 fc0c 	mul.w	ip, r0, ip
 800085e:	459c      	cmp	ip, r3
 8000860:	d909      	bls.n	8000876 <__udivmoddi4+0x8e>
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	f100 32ff 	add.w	r2, r0, #4294967295
 8000868:	f080 80d6 	bcs.w	8000a18 <__udivmoddi4+0x230>
 800086c:	459c      	cmp	ip, r3
 800086e:	f240 80d3 	bls.w	8000a18 <__udivmoddi4+0x230>
 8000872:	443b      	add	r3, r7
 8000874:	3802      	subs	r0, #2
 8000876:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800087a:	eba3 030c 	sub.w	r3, r3, ip
 800087e:	2100      	movs	r1, #0
 8000880:	b11d      	cbz	r5, 800088a <__udivmoddi4+0xa2>
 8000882:	40f3      	lsrs	r3, r6
 8000884:	2200      	movs	r2, #0
 8000886:	e9c5 3200 	strd	r3, r2, [r5]
 800088a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800088e:	428b      	cmp	r3, r1
 8000890:	d905      	bls.n	800089e <__udivmoddi4+0xb6>
 8000892:	b10d      	cbz	r5, 8000898 <__udivmoddi4+0xb0>
 8000894:	e9c5 0100 	strd	r0, r1, [r5]
 8000898:	2100      	movs	r1, #0
 800089a:	4608      	mov	r0, r1
 800089c:	e7f5      	b.n	800088a <__udivmoddi4+0xa2>
 800089e:	fab3 f183 	clz	r1, r3
 80008a2:	2900      	cmp	r1, #0
 80008a4:	d146      	bne.n	8000934 <__udivmoddi4+0x14c>
 80008a6:	4573      	cmp	r3, lr
 80008a8:	d302      	bcc.n	80008b0 <__udivmoddi4+0xc8>
 80008aa:	4282      	cmp	r2, r0
 80008ac:	f200 8105 	bhi.w	8000aba <__udivmoddi4+0x2d2>
 80008b0:	1a84      	subs	r4, r0, r2
 80008b2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008b6:	2001      	movs	r0, #1
 80008b8:	4690      	mov	r8, r2
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d0e5      	beq.n	800088a <__udivmoddi4+0xa2>
 80008be:	e9c5 4800 	strd	r4, r8, [r5]
 80008c2:	e7e2      	b.n	800088a <__udivmoddi4+0xa2>
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	f000 8090 	beq.w	80009ea <__udivmoddi4+0x202>
 80008ca:	fab2 f682 	clz	r6, r2
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	f040 80a4 	bne.w	8000a1c <__udivmoddi4+0x234>
 80008d4:	1a8a      	subs	r2, r1, r2
 80008d6:	0c03      	lsrs	r3, r0, #16
 80008d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008dc:	b280      	uxth	r0, r0
 80008de:	b2bc      	uxth	r4, r7
 80008e0:	2101      	movs	r1, #1
 80008e2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008e6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ee:	fb04 f20c 	mul.w	r2, r4, ip
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x11e>
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008fc:	d202      	bcs.n	8000904 <__udivmoddi4+0x11c>
 80008fe:	429a      	cmp	r2, r3
 8000900:	f200 80e0 	bhi.w	8000ac4 <__udivmoddi4+0x2dc>
 8000904:	46c4      	mov	ip, r8
 8000906:	1a9b      	subs	r3, r3, r2
 8000908:	fbb3 f2fe 	udiv	r2, r3, lr
 800090c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000910:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000914:	fb02 f404 	mul.w	r4, r2, r4
 8000918:	429c      	cmp	r4, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x144>
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x142>
 8000924:	429c      	cmp	r4, r3
 8000926:	f200 80ca 	bhi.w	8000abe <__udivmoddi4+0x2d6>
 800092a:	4602      	mov	r2, r0
 800092c:	1b1b      	subs	r3, r3, r4
 800092e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000932:	e7a5      	b.n	8000880 <__udivmoddi4+0x98>
 8000934:	f1c1 0620 	rsb	r6, r1, #32
 8000938:	408b      	lsls	r3, r1
 800093a:	fa22 f706 	lsr.w	r7, r2, r6
 800093e:	431f      	orrs	r7, r3
 8000940:	fa0e f401 	lsl.w	r4, lr, r1
 8000944:	fa20 f306 	lsr.w	r3, r0, r6
 8000948:	fa2e fe06 	lsr.w	lr, lr, r6
 800094c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000950:	4323      	orrs	r3, r4
 8000952:	fa00 f801 	lsl.w	r8, r0, r1
 8000956:	fa1f fc87 	uxth.w	ip, r7
 800095a:	fbbe f0f9 	udiv	r0, lr, r9
 800095e:	0c1c      	lsrs	r4, r3, #16
 8000960:	fb09 ee10 	mls	lr, r9, r0, lr
 8000964:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000968:	fb00 fe0c 	mul.w	lr, r0, ip
 800096c:	45a6      	cmp	lr, r4
 800096e:	fa02 f201 	lsl.w	r2, r2, r1
 8000972:	d909      	bls.n	8000988 <__udivmoddi4+0x1a0>
 8000974:	193c      	adds	r4, r7, r4
 8000976:	f100 3aff 	add.w	sl, r0, #4294967295
 800097a:	f080 809c 	bcs.w	8000ab6 <__udivmoddi4+0x2ce>
 800097e:	45a6      	cmp	lr, r4
 8000980:	f240 8099 	bls.w	8000ab6 <__udivmoddi4+0x2ce>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	eba4 040e 	sub.w	r4, r4, lr
 800098c:	fa1f fe83 	uxth.w	lr, r3
 8000990:	fbb4 f3f9 	udiv	r3, r4, r9
 8000994:	fb09 4413 	mls	r4, r9, r3, r4
 8000998:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800099c:	fb03 fc0c 	mul.w	ip, r3, ip
 80009a0:	45a4      	cmp	ip, r4
 80009a2:	d908      	bls.n	80009b6 <__udivmoddi4+0x1ce>
 80009a4:	193c      	adds	r4, r7, r4
 80009a6:	f103 3eff 	add.w	lr, r3, #4294967295
 80009aa:	f080 8082 	bcs.w	8000ab2 <__udivmoddi4+0x2ca>
 80009ae:	45a4      	cmp	ip, r4
 80009b0:	d97f      	bls.n	8000ab2 <__udivmoddi4+0x2ca>
 80009b2:	3b02      	subs	r3, #2
 80009b4:	443c      	add	r4, r7
 80009b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009ba:	eba4 040c 	sub.w	r4, r4, ip
 80009be:	fba0 ec02 	umull	lr, ip, r0, r2
 80009c2:	4564      	cmp	r4, ip
 80009c4:	4673      	mov	r3, lr
 80009c6:	46e1      	mov	r9, ip
 80009c8:	d362      	bcc.n	8000a90 <__udivmoddi4+0x2a8>
 80009ca:	d05f      	beq.n	8000a8c <__udivmoddi4+0x2a4>
 80009cc:	b15d      	cbz	r5, 80009e6 <__udivmoddi4+0x1fe>
 80009ce:	ebb8 0203 	subs.w	r2, r8, r3
 80009d2:	eb64 0409 	sbc.w	r4, r4, r9
 80009d6:	fa04 f606 	lsl.w	r6, r4, r6
 80009da:	fa22 f301 	lsr.w	r3, r2, r1
 80009de:	431e      	orrs	r6, r3
 80009e0:	40cc      	lsrs	r4, r1
 80009e2:	e9c5 6400 	strd	r6, r4, [r5]
 80009e6:	2100      	movs	r1, #0
 80009e8:	e74f      	b.n	800088a <__udivmoddi4+0xa2>
 80009ea:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ee:	0c01      	lsrs	r1, r0, #16
 80009f0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009f4:	b280      	uxth	r0, r0
 80009f6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009fa:	463b      	mov	r3, r7
 80009fc:	4638      	mov	r0, r7
 80009fe:	463c      	mov	r4, r7
 8000a00:	46b8      	mov	r8, r7
 8000a02:	46be      	mov	lr, r7
 8000a04:	2620      	movs	r6, #32
 8000a06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a0a:	eba2 0208 	sub.w	r2, r2, r8
 8000a0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a12:	e766      	b.n	80008e2 <__udivmoddi4+0xfa>
 8000a14:	4601      	mov	r1, r0
 8000a16:	e718      	b.n	800084a <__udivmoddi4+0x62>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	e72c      	b.n	8000876 <__udivmoddi4+0x8e>
 8000a1c:	f1c6 0220 	rsb	r2, r6, #32
 8000a20:	fa2e f302 	lsr.w	r3, lr, r2
 8000a24:	40b7      	lsls	r7, r6
 8000a26:	40b1      	lsls	r1, r6
 8000a28:	fa20 f202 	lsr.w	r2, r0, r2
 8000a2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a30:	430a      	orrs	r2, r1
 8000a32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a36:	b2bc      	uxth	r4, r7
 8000a38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a3c:	0c11      	lsrs	r1, r2, #16
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb08 f904 	mul.w	r9, r8, r4
 8000a46:	40b0      	lsls	r0, r6
 8000a48:	4589      	cmp	r9, r1
 8000a4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a4e:	b280      	uxth	r0, r0
 8000a50:	d93e      	bls.n	8000ad0 <__udivmoddi4+0x2e8>
 8000a52:	1879      	adds	r1, r7, r1
 8000a54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a58:	d201      	bcs.n	8000a5e <__udivmoddi4+0x276>
 8000a5a:	4589      	cmp	r9, r1
 8000a5c:	d81f      	bhi.n	8000a9e <__udivmoddi4+0x2b6>
 8000a5e:	eba1 0109 	sub.w	r1, r1, r9
 8000a62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a66:	fb09 f804 	mul.w	r8, r9, r4
 8000a6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a74:	4542      	cmp	r2, r8
 8000a76:	d229      	bcs.n	8000acc <__udivmoddi4+0x2e4>
 8000a78:	18ba      	adds	r2, r7, r2
 8000a7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a7e:	d2c4      	bcs.n	8000a0a <__udivmoddi4+0x222>
 8000a80:	4542      	cmp	r2, r8
 8000a82:	d2c2      	bcs.n	8000a0a <__udivmoddi4+0x222>
 8000a84:	f1a9 0102 	sub.w	r1, r9, #2
 8000a88:	443a      	add	r2, r7
 8000a8a:	e7be      	b.n	8000a0a <__udivmoddi4+0x222>
 8000a8c:	45f0      	cmp	r8, lr
 8000a8e:	d29d      	bcs.n	80009cc <__udivmoddi4+0x1e4>
 8000a90:	ebbe 0302 	subs.w	r3, lr, r2
 8000a94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a98:	3801      	subs	r0, #1
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	e796      	b.n	80009cc <__udivmoddi4+0x1e4>
 8000a9e:	eba7 0909 	sub.w	r9, r7, r9
 8000aa2:	4449      	add	r1, r9
 8000aa4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000aa8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aac:	fb09 f804 	mul.w	r8, r9, r4
 8000ab0:	e7db      	b.n	8000a6a <__udivmoddi4+0x282>
 8000ab2:	4673      	mov	r3, lr
 8000ab4:	e77f      	b.n	80009b6 <__udivmoddi4+0x1ce>
 8000ab6:	4650      	mov	r0, sl
 8000ab8:	e766      	b.n	8000988 <__udivmoddi4+0x1a0>
 8000aba:	4608      	mov	r0, r1
 8000abc:	e6fd      	b.n	80008ba <__udivmoddi4+0xd2>
 8000abe:	443b      	add	r3, r7
 8000ac0:	3a02      	subs	r2, #2
 8000ac2:	e733      	b.n	800092c <__udivmoddi4+0x144>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	443b      	add	r3, r7
 8000aca:	e71c      	b.n	8000906 <__udivmoddi4+0x11e>
 8000acc:	4649      	mov	r1, r9
 8000ace:	e79c      	b.n	8000a0a <__udivmoddi4+0x222>
 8000ad0:	eba1 0109 	sub.w	r1, r1, r9
 8000ad4:	46c4      	mov	ip, r8
 8000ad6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ada:	fb09 f804 	mul.w	r8, r9, r4
 8000ade:	e7c4      	b.n	8000a6a <__udivmoddi4+0x282>

08000ae0 <__aeabi_idiv0>:
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <cabinet_simulation_f32_process>:
 *
 * @param self Generic FX handler containing allocated state and FIR pointers.
 * @param p    Audio pipeline context.
 */
static void cabinet_simulation_f32_process(FX_HANDLER_t *self, pipe *p)
{
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	460c      	mov	r4, r1
    // self->states[2]: pointer to FIR filter handler
    // self->states[1]: pointer to overlap/state buffer
    partitioned_fir_convolution_fft(
 8000ae8:	e9d0 2104 	ldrd	r2, r1, [r0, #16]
 8000aec:	4620      	mov	r0, r4
        p,
        (fir_t *)self->states[2],
        (float32_t *)self->states[1]
    );

    arm_scale_f32(p->processBuffer, 1.0f/5.2f, p->processBuffer, BUFFER_SIZE);
 8000aee:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
    partitioned_fir_convolution_fft(
 8000af2:	f001 ff19 	bl	8002928 <partitioned_fir_convolution_fft>
    arm_scale_f32(p->processBuffer, 1.0f/5.2f, p->processBuffer, BUFFER_SIZE);
 8000af6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000afa:	68a1      	ldr	r1, [r4, #8]
 8000afc:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8000b0c <cabinet_simulation_f32_process+0x28>
 8000b00:	4608      	mov	r0, r1
}
 8000b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    arm_scale_f32(p->processBuffer, 1.0f/5.2f, p->processBuffer, BUFFER_SIZE);
 8000b06:	f00a b929 	b.w	800ad5c <arm_scale_f32>
 8000b0a:	bf00      	nop
 8000b0c:	3e44ec4f 	.word	0x3e44ec4f

08000b10 <fx_cabinet_clean>:
    fx->clean =   fx_cabinet_clean;
}


void fx_cabinet_clean(FX_HANDLER_t *fx)
{
 8000b10:	b538      	push	{r3, r4, r5, lr}
 8000b12:	4604      	mov	r4, r0

	fir_OD_M212_VINT_DYN_201_P05_00_f32_clean((fir_t *)fx->states[2]);
 8000b14:	6940      	ldr	r0, [r0, #20]
 8000b16:	f000 fca9 	bl	800146c <fir_OD_M212_VINT_DYN_201_P05_00_f32_clean>
    self->fir1  = NULL;
 8000b1a:	2500      	movs	r5, #0
    cabinet_simulation_clean_f32((cabinet_simulation_f32*)fx->states[3]);
 8000b1c:	69a3      	ldr	r3, [r4, #24]

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 8000b1e:	2220      	movs	r2, #32
 8000b20:	4629      	mov	r1, r5
 8000b22:	f104 000c 	add.w	r0, r4, #12
    self->fir1  = NULL;
 8000b26:	e9c3 550c 	strd	r5, r5, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000b2a:	f00a ff22 	bl	800b972 <memset>

    fx->process = NULL;
 8000b2e:	6065      	str	r5, [r4, #4]

}
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
 8000b32:	bf00      	nop

08000b34 <fx_cabinet_init>:
{
 8000b34:	b538      	push	{r3, r4, r5, lr}
 8000b36:	4604      	mov	r4, r0
    fx->num_params = 0;
 8000b38:	2300      	movs	r3, #0
    fx->states[0] = _static_mem_alloc(
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	f242 0008 	movw	r0, #8200	@ 0x2008
    fx->num_params = 0;
 8000b40:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    fx->states[0] = _static_mem_alloc(
 8000b44:	f000 fd8c 	bl	8001660 <_static_mem_alloc_ram_d2>
 8000b48:	4603      	mov	r3, r0
    fx->states[1] = _dctm_static_mem_alloc(
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    fx->states[0] = _static_mem_alloc(
 8000b50:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _dctm_static_mem_alloc(
 8000b52:	f000 fd4f 	bl	80015f4 <_dctm_static_mem_alloc>
 8000b56:	4603      	mov	r3, r0
    fx->states[2] = _static_mem_alloc(
 8000b58:	2104      	movs	r1, #4
 8000b5a:	2014      	movs	r0, #20
    fx->states[1] = _dctm_static_mem_alloc(
 8000b5c:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8000b5e:	f000 fd7f 	bl	8001660 <_static_mem_alloc_ram_d2>
 8000b62:	4603      	mov	r3, r0
    fx->states[3] = _static_mem_alloc(
 8000b64:	2104      	movs	r1, #4
 8000b66:	2038      	movs	r0, #56	@ 0x38
    fx->states[2] = _static_mem_alloc(
 8000b68:	6163      	str	r3, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 8000b6a:	f000 fd79 	bl	8001660 <_static_mem_alloc_ram_d2>
    	if(fx->states[i] == NULL){
 8000b6e:	68e1      	ldr	r1, [r4, #12]
    fx->states[3] = _static_mem_alloc(
 8000b70:	61a0      	str	r0, [r4, #24]
    	if(fx->states[i] == NULL){
 8000b72:	b189      	cbz	r1, 8000b98 <fx_cabinet_init+0x64>
 8000b74:	6922      	ldr	r2, [r4, #16]
 8000b76:	b17a      	cbz	r2, 8000b98 <fx_cabinet_init+0x64>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	6960      	ldr	r0, [r4, #20]
 8000b7c:	b168      	cbz	r0, 8000b9a <fx_cabinet_init+0x66>
 8000b7e:	b163      	cbz	r3, 8000b9a <fx_cabinet_init+0x66>
    fir_OD_M212_VINT_DYN_201_P05_00_f32_init(
 8000b80:	f000 fc60 	bl	8001444 <fir_OD_M212_VINT_DYN_201_P05_00_f32_init>
        (cabinet_simulation_f32 *)fx->states[3],
 8000b84:	69a3      	ldr	r3, [r4, #24]
    fx->process = cabinet_simulation_f32_process;
 8000b86:	490c      	ldr	r1, [pc, #48]	@ (8000bb8 <fx_cabinet_init+0x84>)
        (fir_t *)fx->states[2]
 8000b88:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    self->fir1  = fir;
 8000b8c:	635a      	str	r2, [r3, #52]	@ 0x34
    fx->clean =   fx_cabinet_clean;
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000bbc <fx_cabinet_init+0x88>)
    self->fir1  = fir;
 8000b90:	6318      	str	r0, [r3, #48]	@ 0x30
    fx->clean =   fx_cabinet_clean;
 8000b92:	e9c4 1201 	strd	r1, r2, [r4, #4]
}
 8000b96:	bd38      	pop	{r3, r4, r5, pc}
 8000b98:	6960      	ldr	r0, [r4, #20]
	fir_OD_M212_VINT_DYN_201_P05_00_f32_clean((fir_t *)fx->states[2]);
 8000b9a:	f000 fc67 	bl	800146c <fir_OD_M212_VINT_DYN_201_P05_00_f32_clean>
    self->fir1  = NULL;
 8000b9e:	2500      	movs	r5, #0
    cabinet_simulation_clean_f32((cabinet_simulation_f32*)fx->states[3]);
 8000ba0:	69a3      	ldr	r3, [r4, #24]
    	fx->states[i] = NULL;
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	4629      	mov	r1, r5
 8000ba6:	f104 000c 	add.w	r0, r4, #12
    self->state = NULL;
 8000baa:	e9c3 550c 	strd	r5, r5, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000bae:	f00a fee0 	bl	800b972 <memset>
    fx->process = NULL;
 8000bb2:	6065      	str	r5, [r4, #4]
}
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
 8000bb6:	bf00      	nop
 8000bb8:	08000ae5 	.word	0x08000ae5
 8000bbc:	08000b11 	.word	0x08000b11

08000bc0 <fx_chorus_clean>:
    fx->process = chorus_f32_process;
    fx->clean  = fx_chorus_clean;

}

void fx_chorus_clean(FX_HANDLER_t *fx){
 8000bc0:	b538      	push	{r3, r4, r5, lr}
    self->state = NULL;
 8000bc2:	2500      	movs	r5, #0

	chorus_f32_clean((chorus_f32 *)fx->states[2]);
 8000bc4:	6943      	ldr	r3, [r0, #20]
void fx_chorus_clean(FX_HANDLER_t *fx){
 8000bc6:	4604      	mov	r4, r0

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 8000bc8:	2220      	movs	r2, #32
 8000bca:	4629      	mov	r1, r5
 8000bcc:	300c      	adds	r0, #12
    self->state = NULL;
 8000bce:	e9c3 550c 	strd	r5, r5, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000bd2:	f00a fece 	bl	800b972 <memset>

    fx->process = NULL;
 8000bd6:	6065      	str	r5, [r4, #4]
}
 8000bd8:	bd38      	pop	{r3, r4, r5, pc}
 8000bda:	bf00      	nop
 8000bdc:	0000      	movs	r0, r0
	...

08000be0 <chorus_f32_process>:
static void chorus_f32_process(FX_HANDLER_t *fx, pipe *p){
 8000be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float32_t *inDelayed = fx->states[1];
 8000be4:	e9d0 a804 	ldrd	sl, r8, [r0, #16]
static void chorus_f32_process(FX_HANDLER_t *fx, pipe *p){
 8000be8:	ed2d 8b0a 	vpush	{d8-d12}
	c->params->wetness = c->params->params[0];
 8000bec:	f8d8 9034 	ldr.w	r9, [r8, #52]	@ 0x34
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000bf0:	eeb7 ca00 	vmov.f32	s24, #112	@ 0x3f800000  1.0
        float32_t input = p->processBuffer[n];
 8000bf4:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
        float32_t mod = sinf(2.0f * M_PI * c->params->rate * c->t);
 8000bf8:	ed98 7a0e 	vldr	s14, [r8, #56]	@ 0x38
	c->params->depth = c->params->params[1];
 8000bfc:	edd9 ba05 	vldr	s23, [r9, #20]
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000c00:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000c04:	edd9 7a03 	vldr	s15, [r9, #12]
 8000c08:	688e      	ldr	r6, [r1, #8]
 8000c0a:	eeb8 9a67 	vcvt.f32.u32	s18, s15
	c->params->wetness = c->params->params[0];
 8000c0e:	edd9 aa04 	vldr	s21, [r9, #16]
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000c12:	ee7b 7a8c 	vadd.f32	s15, s23, s24
	c->params->rate = c->params->params[2];
 8000c16:	ed99 0a06 	vldr	s0, [r9, #24]
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000c1a:	eddf 9a41 	vldr	s19, [pc, #260]	@ 8000d20 <chorus_f32_process+0x140>
 8000c1e:	f506 5780 	add.w	r7, r6, #4096	@ 0x1000
 8000c22:	f8d8 4040 	ldr.w	r4, [r8, #64]	@ 0x40
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000c26:	ee67 7a89 	vmul.f32	s15, s15, s18
	c->params->wetness = c->params->params[0];
 8000c2a:	edc9 aa00 	vstr	s21, [r9]
	c->params->depth = c->params->params[1];
 8000c2e:	edc9 ba01 	vstr	s23, [r9, #4]
	c->params->rate = c->params->params[2];
 8000c32:	ed89 0a02 	vstr	s0, [r9, #8]
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000c36:	fefa 7a67 	vrintp.f32	s15, s15
 8000c3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
        float32_t mod = sinf(2.0f * M_PI * c->params->rate * c->t);
 8000c3e:	ed9f 8b36 	vldr	d8, [pc, #216]	@ 8000d18 <chorus_f32_process+0x138>
    uint32_t size2 = (uint32_t)(ceilf((float32_t)c->params->baseDelay * (1.0f + c->params->depth)) * 2);
 8000c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c46:	ee17 5a90 	vmov	r5, s15
    uint32_t bufferSize = (size1 > size2) ? size1 : size2;
 8000c4a:	f5b5 5fa0 	cmp.w	r5, #5120	@ 0x1400
 8000c4e:	bf38      	it	cc
 8000c50:	f44f 55a0 	movcc.w	r5, #5120	@ 0x1400
	float32_t *outDelayed = &inDelayed[bufferSize];
 8000c54:	eb0a 0b85 	add.w	fp, sl, r5, lsl #2
    for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000c58:	e005      	b.n	8000c66 <chorus_f32_process+0x86>
        float32_t mod = sinf(2.0f * M_PI * c->params->rate * c->t);
 8000c5a:	ed99 0a02 	vldr	s0, [r9, #8]
        uint32_t currentDelay = (uint32_t)(roundf(c->params->baseDelay * (1.0f + c->params->depth * mod)));
 8000c5e:	edd9 ba01 	vldr	s23, [r9, #4]
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000c62:	edd9 aa00 	vldr	s21, [r9]
        float32_t mod = sinf(2.0f * M_PI * c->params->rate * c->t);
 8000c66:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        float32_t input = p->processBuffer[n];
 8000c6a:	ecb6 ba01 	vldmia	r6!, {s22}
        float32_t mod = sinf(2.0f * M_PI * c->params->rate * c->t);
 8000c6e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000c72:	ee20 0b07 	vmul.f64	d0, d0, d7
 8000c76:	ee20 0b08 	vmul.f64	d0, d0, d8
 8000c7a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8000c7e:	f00b fef7 	bl	800ca70 <sinf>
        uint32_t currentDelay = (uint32_t)(roundf(c->params->baseDelay * (1.0f + c->params->depth * mod)));
 8000c82:	eef0 7a4c 	vmov.f32	s15, s24
            readPtr = (c->writePtr + bufferSize - currentDelay) % bufferSize;
 8000c86:	1929      	adds	r1, r5, r4
            readPtr = c->writePtr;  // Clamp if delay is too high
 8000c88:	4622      	mov	r2, r4
        uint32_t currentDelay = (uint32_t)(roundf(c->params->baseDelay * (1.0f + c->params->depth * mod)));
 8000c8a:	eee0 7a2b 	vfma.f32	s15, s0, s23
 8000c8e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8000c92:	fef8 7a67 	vrinta.f32	s15, s15
 8000c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c9a:	ee17 3a90 	vmov	r3, s15
        if (currentDelay >= bufferSize) {
 8000c9e:	429d      	cmp	r5, r3
            readPtr = (c->writePtr + bufferSize - currentDelay) % bufferSize;
 8000ca0:	eba1 0103 	sub.w	r1, r1, r3
        if (currentDelay >= bufferSize) {
 8000ca4:	d903      	bls.n	8000cae <chorus_f32_process+0xce>
            readPtr = (c->writePtr + bufferSize - currentDelay) % bufferSize;
 8000ca6:	fbb1 f2f5 	udiv	r2, r1, r5
 8000caa:	fb05 1212 	mls	r2, r5, r2, r1
        float32_t delayedInput = inDelayed[readPtr];
 8000cae:	eb0a 0382 	add.w	r3, sl, r2, lsl #2
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000cb2:	ee3c 7a6a 	vsub.f32	s14, s24, s21
        float32_t delayedOutput = outDelayed[readPtr];
 8000cb6:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
    for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000cba:	42b7      	cmp	r7, r6
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000cbc:	edd3 7a00 	vldr	s15, [r3]
        inDelayed[c->writePtr] = input;
 8000cc0:	eb0a 0184 	add.w	r1, sl, r4, lsl #2
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000cc4:	edd2 6a00 	vldr	s13, [r2]
        outDelayed[c->writePtr] = output;
 8000cc8:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000ccc:	ee67 7aa9 	vmul.f32	s15, s15, s19
        c->writePtr = (c->writePtr + 1) % bufferSize;
 8000cd0:	f104 0401 	add.w	r4, r4, #1
        inDelayed[c->writePtr] = input;
 8000cd4:	ed81 ba00 	vstr	s22, [r1]
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000cd8:	eee6 7a8a 	vfma.f32	s15, s13, s20
        c->writePtr = (c->writePtr + 1) % bufferSize;
 8000cdc:	fbb4 f2f5 	udiv	r2, r4, r5
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000ce0:	ee67 7aaa 	vmul.f32	s15, s15, s21
        c->writePtr = (c->writePtr + 1) % bufferSize;
 8000ce4:	fb05 4412 	mls	r4, r5, r2, r4
        float32_t output = (1.0f - c->params->wetness) * input + c->params->wetness * (G_fb * delayedOutput + (G_ff - G_fb) * delayedInput);
 8000ce8:	eee7 7a0b 	vfma.f32	s15, s14, s22
        outDelayed[c->writePtr] = output;
 8000cec:	edc3 7a00 	vstr	s15, [r3]
        p->processBuffer[n] = output;
 8000cf0:	ed46 7a01 	vstr	s15, [r6, #-4]
        c->t += c->dt;
 8000cf4:	ed98 7a0e 	vldr	s14, [r8, #56]	@ 0x38
 8000cf8:	edd8 7a0f 	vldr	s15, [r8, #60]	@ 0x3c
 8000cfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d00:	ed88 7a0e 	vstr	s14, [r8, #56]	@ 0x38
    for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000d04:	d1a9      	bne.n	8000c5a <chorus_f32_process+0x7a>
}
 8000d06:	ecbd 8b0a 	vpop	{d8-d12}
 8000d0a:	f8c8 4040 	str.w	r4, [r8, #64]	@ 0x40
 8000d0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d12:	bf00      	nop
 8000d14:	f3af 8000 	nop.w
 8000d18:	54442d18 	.word	0x54442d18
 8000d1c:	401921fb 	.word	0x401921fb
 8000d20:	3e99999a 	.word	0x3e99999a

08000d24 <fx_chorus_init>:
void fx_chorus_init(FX_HANDLER_t *fx){
 8000d24:	b538      	push	{r3, r4, r5, lr}
 8000d26:	4604      	mov	r4, r0
	fx->num_params = 3; // 3 params for a chorus effect
 8000d28:	2303      	movs	r3, #3
    fx->states[0] = _dctm_static_mem_alloc(
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	201c      	movs	r0, #28
	fx->num_params = 3; // 3 params for a chorus effect
 8000d2e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    fx->states[0] = _dctm_static_mem_alloc(
 8000d32:	f000 fc5f 	bl	80015f4 <_dctm_static_mem_alloc>
 8000d36:	4605      	mov	r5, r0
 8000d38:	60e0      	str	r0, [r4, #12]
  	if(fx->states[0] == NULL){
 8000d3a:	b348      	cbz	r0, 8000d90 <fx_chorus_init+0x6c>
	c->depth 	   = 0.01  ;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dbc <fx_chorus_init+0x98>)
	c->rate        = 2.0  ;
 8000d3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
    c->wetness     = 0.8  ;
 8000d42:	491f      	ldr	r1, [pc, #124]	@ (8000dc0 <fx_chorus_init+0x9c>)
	c->depth 	   = 0.01  ;
 8000d44:	6043      	str	r3, [r0, #4]
	c->baseDelay   = 1000 ;
 8000d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
    c->wetness     = 0.8  ;
 8000d4a:	6001      	str	r1, [r0, #0]
	fx->states[1] = _static_mem_alloc(
 8000d4c:	2104      	movs	r1, #4
	c->rate        = 2.0  ;
 8000d4e:	6082      	str	r2, [r0, #8]
	c->baseDelay   = 1000 ;
 8000d50:	60c3      	str	r3, [r0, #12]
	fx->states[1] = _static_mem_alloc(
 8000d52:	f44f 4020 	mov.w	r0, #40960	@ 0xa000
 8000d56:	f000 fc83 	bl	8001660 <_static_mem_alloc_ram_d2>
 8000d5a:	4603      	mov	r3, r0
    fx->states[2] = _dctm_static_mem_alloc(
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	2044      	movs	r0, #68	@ 0x44
	fx->states[1] = _static_mem_alloc(
 8000d60:	6123      	str	r3, [r4, #16]
    fx->states[2] = _dctm_static_mem_alloc(
 8000d62:	f000 fc47 	bl	80015f4 <_dctm_static_mem_alloc>
    	if(fx->states[i] == NULL){
 8000d66:	68e3      	ldr	r3, [r4, #12]
    fx->states[2] = _dctm_static_mem_alloc(
 8000d68:	6160      	str	r0, [r4, #20]
    	if(fx->states[i] == NULL){
 8000d6a:	b1eb      	cbz	r3, 8000da8 <fx_chorus_init+0x84>
 8000d6c:	6922      	ldr	r2, [r4, #16]
 8000d6e:	b1da      	cbz	r2, 8000da8 <fx_chorus_init+0x84>
 8000d70:	fab0 f380 	clz	r3, r0
 8000d74:	095b      	lsrs	r3, r3, #5
 8000d76:	b1b8      	cbz	r0, 8000da8 <fx_chorus_init+0x84>
    self->t = 0.0f;
 8000d78:	2100      	movs	r1, #0
    self->state = state;
 8000d7a:	6302      	str	r2, [r0, #48]	@ 0x30
    self->writePtr = 0;
 8000d7c:	6403      	str	r3, [r0, #64]	@ 0x40
    self->t = 0.0f;
 8000d7e:	6381      	str	r1, [r0, #56]	@ 0x38
    fx->process = chorus_f32_process;
 8000d80:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <fx_chorus_init+0xa0>)
    fx->clean  = fx_chorus_clean;
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <fx_chorus_init+0xa4>)
    self->dt = 1.0f / 48000.0f ; // sample rate !magic # for now.
 8000d84:	4911      	ldr	r1, [pc, #68]	@ (8000dcc <fx_chorus_init+0xa8>)
    self->params = p;
 8000d86:	6345      	str	r5, [r0, #52]	@ 0x34
    self->dt = 1.0f / 48000.0f ; // sample rate !magic # for now.
 8000d88:	63c1      	str	r1, [r0, #60]	@ 0x3c
    fx->clean  = fx_chorus_clean;
 8000d8a:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
 8000d8e:	bd38      	pop	{r3, r4, r5, pc}
	chorus_f32_clean((chorus_f32 *)fx->states[2]);
 8000d90:	6963      	ldr	r3, [r4, #20]
    	fx->states[i] = NULL;
 8000d92:	4601      	mov	r1, r0
 8000d94:	2220      	movs	r2, #32
    self->state = NULL;
 8000d96:	e9c3 000c 	strd	r0, r0, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000d9a:	f104 000c 	add.w	r0, r4, #12
 8000d9e:	f00a fde8 	bl	800b972 <memset>
    fx->process = NULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	6063      	str	r3, [r4, #4]
}
 8000da6:	bd38      	pop	{r3, r4, r5, pc}
    self->state = NULL;
 8000da8:	2100      	movs	r1, #0
    	fx->states[i] = NULL;
 8000daa:	2220      	movs	r2, #32
    self->state = NULL;
 8000dac:	e9c0 110c 	strd	r1, r1, [r0, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000db0:	f104 000c 	add.w	r0, r4, #12
 8000db4:	f00a fddd 	bl	800b972 <memset>
 8000db8:	e7f3      	b.n	8000da2 <fx_chorus_init+0x7e>
 8000dba:	bf00      	nop
 8000dbc:	3c23d70a 	.word	0x3c23d70a
 8000dc0:	3f4ccccd 	.word	0x3f4ccccd
 8000dc4:	08000be1 	.word	0x08000be1
 8000dc8:	08000bc1 	.word	0x08000bc1
 8000dcc:	37aec33e 	.word	0x37aec33e

08000dd0 <convolution_reverb_f32_process>:
 */
static void convolution_reverb_f32_process(
    FX_HANDLER_t *self,
    pipe         *p
)
{
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	460c      	mov	r4, r1
    // self->states[2]: FIR handler pointer
    // self->states[1]: overlap/state buffer pointer
    partitioned_fir_convolution_fft(
 8000dd4:	e9d0 2104 	ldrd	r2, r1, [r0, #16]
 8000dd8:	4620      	mov	r0, r4
        p,
        (fir_t     *)self->states[2],
        (float32_t *)self->states[1]
    );

    arm_scale_f32(p->processBuffer, 1.0f/2, p->processBuffer, BUFFER_SIZE);
 8000dda:	f504 4480 	add.w	r4, r4, #16384	@ 0x4000
    partitioned_fir_convolution_fft(
 8000dde:	f001 fda3 	bl	8002928 <partitioned_fir_convolution_fft>
    arm_scale_f32(p->processBuffer, 1.0f/2, p->processBuffer, BUFFER_SIZE);
 8000de2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8000de6:	68a1      	ldr	r1, [r4, #8]
 8000de8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dec:	4608      	mov	r0, r1
}
 8000dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    arm_scale_f32(p->processBuffer, 1.0f/2, p->processBuffer, BUFFER_SIZE);
 8000df2:	f009 bfb3 	b.w	800ad5c <arm_scale_f32>
 8000df6:	bf00      	nop

08000df8 <fx_reverb_init>:
 * convolution_reverb instance, then initializes and assigns the processing callback.
 *
 * @param fx Pointer to FX_HANDLER_t to configure for reverb effect.
 */
void fx_reverb_init(FX_HANDLER_t *fx)
{
 8000df8:	b538      	push	{r3, r4, r5, lr}
 8000dfa:	4604      	mov	r4, r0

	fx->num_params = 0;
 8000dfc:	2300      	movs	r3, #0

    // Allocate FFT-domain memory for reverb: numSegments * FFT_SIZE + space for Handlers
    fx->states[0] = _static_mem_alloc(
 8000dfe:	2104      	movs	r1, #4
 8000e00:	481d      	ldr	r0, [pc, #116]	@ (8000e78 <fx_reverb_init+0x80>)
	fx->num_params = 0;
 8000e02:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    fx->states[0] = _static_mem_alloc(
 8000e06:	f000 fc0f 	bl	8001628 <_static_mem_alloc>
 8000e0a:	4603      	mov	r3, r0
        (NUMSEGMENTS_EMT * FFT_SIZE + 2 * NUMSEGMENTS_EMT) * sizeof(float),
        _Alignof(float)
    );

    // Allocate DTCM state buffer for overlap (BUFFER_SIZE floats)
    fx->states[1] = _dctm_static_mem_alloc(
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    fx->states[0] = _static_mem_alloc(
 8000e12:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _dctm_static_mem_alloc(
 8000e14:	f000 fbee 	bl	80015f4 <_dctm_static_mem_alloc>
 8000e18:	4603      	mov	r3, r0
        BUFFER_SIZE * sizeof(float),
        _Alignof(float)
    );

    // Allocate FIR filter handler
    fx->states[2] = _static_mem_alloc(
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	2014      	movs	r0, #20
    fx->states[1] = _dctm_static_mem_alloc(
 8000e1e:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8000e20:	f000 fc02 	bl	8001628 <_static_mem_alloc>
 8000e24:	4603      	mov	r3, r0
        sizeof(fir_t),
        _Alignof(fir_t)
    );

    // Allocate convolution reverb simulation instance
    fx->states[3] = _static_mem_alloc(
 8000e26:	2104      	movs	r1, #4
 8000e28:	2038      	movs	r0, #56	@ 0x38
    fx->states[2] = _static_mem_alloc(
 8000e2a:	6163      	str	r3, [r4, #20]
    fx->states[3] = _static_mem_alloc(
 8000e2c:	f000 fbfc 	bl	8001628 <_static_mem_alloc>
    );


    // return if mem allocation fails
    for(int i = 0 ; i < 4 ; ++i){
    	if(fx->states[i] == NULL){
 8000e30:	68e1      	ldr	r1, [r4, #12]
    fx->states[3] = _static_mem_alloc(
 8000e32:	61a0      	str	r0, [r4, #24]
    	if(fx->states[i] == NULL){
 8000e34:	b189      	cbz	r1, 8000e5a <fx_reverb_init+0x62>
 8000e36:	6922      	ldr	r2, [r4, #16]
 8000e38:	b17a      	cbz	r2, 8000e5a <fx_reverb_init+0x62>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6960      	ldr	r0, [r4, #20]
 8000e3e:	b168      	cbz	r0, 8000e5c <fx_reverb_init+0x64>
 8000e40:	b163      	cbz	r3, 8000e5c <fx_reverb_init+0x64>
    	}
    }


    // Initialize FIR handler with FFT memory
    fir_emt_140_dark_3_f32_init(
 8000e42:	f000 fb19 	bl	8001478 <fir_emt_140_dark_3_f32_init>
        (float *)fx->states[0]
    );

    // Initialize reverb simulation with state buffer and FIR handler
    convolution_reverb_f32_init(
        (convolution_reverb_f32 *)fx->states[3],
 8000e46:	69a3      	ldr	r3, [r4, #24]
        (float32_t *)fx->states[1],
        (fir_t *)fx->states[2]
    );

    // Set processing callback for convolution reverb
    fx->process = convolution_reverb_f32_process;
 8000e48:	490c      	ldr	r1, [pc, #48]	@ (8000e7c <fx_reverb_init+0x84>)
        (fir_t *)fx->states[2]
 8000e4a:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    self->fir1  = fir;
 8000e4e:	635a      	str	r2, [r3, #52]	@ 0x34
    fx->clean =   fx_cabinet_clean;
 8000e50:	4a0b      	ldr	r2, [pc, #44]	@ (8000e80 <fx_reverb_init+0x88>)
    self->fir1  = fir;
 8000e52:	6318      	str	r0, [r3, #48]	@ 0x30
    fx->clean =   fx_cabinet_clean;
 8000e54:	e9c4 1201 	strd	r1, r2, [r4, #4]
}
 8000e58:	bd38      	pop	{r3, r4, r5, pc}
 8000e5a:	6960      	ldr	r0, [r4, #20]


void fx_reverb_clean(FX_HANDLER_t *fx)
{

    fir_emt_140_dark_3_f32_clean((fir_t *)fx->states[2]);
 8000e5c:	f000 fb30 	bl	80014c0 <fir_emt_140_dark_3_f32_clean>
   self->state = NULL;
 8000e60:	2500      	movs	r5, #0
    convolution_reverb_f32_clean((convolution_reverb_f32*)fx->states[3]);
 8000e62:	69a3      	ldr	r3, [r4, #24]

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 8000e64:	2220      	movs	r2, #32
 8000e66:	4629      	mov	r1, r5
 8000e68:	f104 000c 	add.w	r0, r4, #12
   self->fir1  = NULL;
 8000e6c:	e9c3 550c 	strd	r5, r5, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000e70:	f00a fd7f 	bl	800b972 <memset>

    fx->process = NULL;
 8000e74:	6065      	str	r5, [r4, #4]
}
 8000e76:	bd38      	pop	{r3, r4, r5, pc}
 8000e78:	0005c170 	.word	0x0005c170
 8000e7c:	08000dd1 	.word	0x08000dd1
 8000e80:	08000b11 	.word	0x08000b11

08000e84 <fx_reverb_clean>:
{
 8000e84:	b538      	push	{r3, r4, r5, lr}
 8000e86:	4604      	mov	r4, r0
    fir_emt_140_dark_3_f32_clean((fir_t *)fx->states[2]);
 8000e88:	6940      	ldr	r0, [r0, #20]
 8000e8a:	f000 fb19 	bl	80014c0 <fir_emt_140_dark_3_f32_clean>
   self->fir1  = NULL;
 8000e8e:	2500      	movs	r5, #0
    convolution_reverb_f32_clean((convolution_reverb_f32*)fx->states[3]);
 8000e90:	69a3      	ldr	r3, [r4, #24]
    	fx->states[i] = NULL;
 8000e92:	2220      	movs	r2, #32
 8000e94:	4629      	mov	r1, r5
 8000e96:	f104 000c 	add.w	r0, r4, #12
   self->fir1  = NULL;
 8000e9a:	e9c3 550c 	strd	r5, r5, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000e9e:	f00a fd68 	bl	800b972 <memset>
    fx->process = NULL;
 8000ea2:	6065      	str	r5, [r4, #4]

}
 8000ea4:	bd38      	pop	{r3, r4, r5, pc}
 8000ea6:	bf00      	nop

08000ea8 <fx_null_process>:

static void fx_null_process(FX_HANDLER_t *fx, pipe *p){

	// empty process

}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <fx_null_clean>:

static void fx_null_clean(FX_HANDLER_t *fx) {

	// empty clean
}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <fx_null_init>:
 * @brief empty initialize
 * @param fx Pointer to an FX_HANDLER_t to initialize
 */
void fx_null_init(FX_HANDLER_t *fx) {

	fx->process = fx_null_process;
 8000eb0:	4a02      	ldr	r2, [pc, #8]	@ (8000ebc <fx_null_init+0xc>)
	fx->clean = fx_null_clean;
 8000eb2:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <fx_null_init+0x10>)
 8000eb4:	e9c0 2301 	strd	r2, r3, [r0, #4]
}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	08000ea9 	.word	0x08000ea9
 8000ec0:	08000ead 	.word	0x08000ead

08000ec4 <fx_phaser_clean>:

	return p->params;

}

void fx_phaser_clean(FX_HANDLER_t *fx){
 8000ec4:	b538      	push	{r3, r4, r5, lr}
	self->state = NULL;
 8000ec6:	2500      	movs	r5, #0

	phaser_f32_clean((phaser_f32 *)fx->states[2]);
 8000ec8:	6943      	ldr	r3, [r0, #20]
void fx_phaser_clean(FX_HANDLER_t *fx){
 8000eca:	4604      	mov	r4, r0

    for(int i = 0; i < 8; i++)
    	fx->states[i] = NULL;
 8000ecc:	2220      	movs	r2, #32
 8000ece:	4629      	mov	r1, r5
 8000ed0:	300c      	adds	r0, #12
	self->state = NULL;
 8000ed2:	e9c3 550c 	strd	r5, r5, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8000ed6:	f00a fd4c 	bl	800b972 <memset>

    fx->process = NULL;
 8000eda:	6065      	str	r5, [r4, #4]
}
 8000edc:	bd38      	pop	{r3, r4, r5, pc}
 8000ede:	bf00      	nop

08000ee0 <phaser_f32_process>:
static void phaser_f32_process(FX_HANDLER_t *fx, pipe *pipe){
 8000ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float32_t *inDelayed = fx->states[1];
 8000ee4:	e9d0 9604 	ldrd	r9, r6, [r0, #16]
		float32_t input = pipe->processBuffer[n];
 8000ee8:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
	float32_t *outDelayed = &inDelayed[p->params->stages];
 8000eec:	f8d6 a034 	ldr.w	sl, [r6, #52]	@ 0x34
 8000ef0:	688d      	ldr	r5, [r1, #8]
		float32_t lfo = sinf(2.0f * M_PI * p->params->rate * p->t);
 8000ef2:	ed96 7a0e 	vldr	s14, [r6, #56]	@ 0x38
 8000ef6:	f505 5880 	add.w	r8, r5, #4096	@ 0x1000
static void phaser_f32_process(FX_HANDLER_t *fx, pipe *pipe){
 8000efa:	ed2d 8b04 	vpush	{d8-d9}
	float32_t *outDelayed = &inDelayed[p->params->stages];
 8000efe:	f89a 700c 	ldrb.w	r7, [sl, #12]
		float32_t lfo = sinf(2.0f * M_PI * p->params->rate * p->t);
 8000f02:	ed9f 8b23 	vldr	d8, [pc, #140]	@ 8000f90 <phaser_f32_process+0xb0>
 8000f06:	eb09 0487 	add.w	r4, r9, r7, lsl #2
 8000f0a:	ed9a 0a02 	vldr	s0, [sl, #8]
 8000f0e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
		float32_t input = pipe->processBuffer[n];
 8000f12:	ecb5 9a01 	vldmia	r5!, {s18}
		float32_t lfo = sinf(2.0f * M_PI * p->params->rate * p->t);
 8000f16:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000f1a:	ee20 0b08 	vmul.f64	d0, d0, d8
 8000f1e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8000f22:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8000f26:	f00b fda3 	bl	800ca70 <sinf>
		float32_t G = p->params->depth * lfo;
 8000f2a:	edda 7a01 	vldr	s15, [sl, #4]
 8000f2e:	ee20 0a27 	vmul.f32	s0, s0, s15
		for (uint8_t stage = 0; stage <  p->params->stages ; stage++) {
 8000f32:	b34f      	cbz	r7, 8000f88 <phaser_f32_process+0xa8>
 8000f34:	eef1 5a40 	vneg.f32	s11, s0
 8000f38:	4622      	mov	r2, r4
		float32_t filtered = input;
 8000f3a:	eef0 7a49 	vmov.f32	s15, s18
		for (uint8_t stage = 0; stage <  p->params->stages ; stage++) {
 8000f3e:	464b      	mov	r3, r9
			float32_t y = inDelayed[stage] - G * x + G * outDelayed[stage];
 8000f40:	ed93 7a00 	vldr	s14, [r3]
 8000f44:	edd2 6a00 	vldr	s13, [r2]
 8000f48:	eea7 7aa5 	vfma.f32	s14, s15, s11
			inDelayed[stage] = x;
 8000f4c:	ece3 7a01 	vstmia	r3!, {s15}
		for (uint8_t stage = 0; stage <  p->params->stages ; stage++) {
 8000f50:	429c      	cmp	r4, r3
			float32_t y = inDelayed[stage] - G * x + G * outDelayed[stage];
 8000f52:	eef0 7a47 	vmov.f32	s15, s14
 8000f56:	eee6 7a80 	vfma.f32	s15, s13, s0
			outDelayed[stage] = y;
 8000f5a:	ece2 7a01 	vstmia	r2!, {s15}
		for (uint8_t stage = 0; stage <  p->params->stages ; stage++) {
 8000f5e:	d1ef      	bne.n	8000f40 <phaser_f32_process+0x60>
		pipe->processBuffer[n] = dry +  p->params->wetness * filtered;
 8000f60:	ed9a 7a00 	vldr	s14, [sl]
	for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000f64:	45a8      	cmp	r8, r5
		pipe->processBuffer[n] = dry +  p->params->wetness * filtered;
 8000f66:	eea7 9a27 	vfma.f32	s18, s14, s15
 8000f6a:	ed05 9a01 	vstr	s18, [r5, #-4]
		p->t += p->dt;
 8000f6e:	ed96 7a0e 	vldr	s14, [r6, #56]	@ 0x38
 8000f72:	edd6 7a0f 	vldr	s15, [r6, #60]	@ 0x3c
 8000f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f7a:	ed86 7a0e 	vstr	s14, [r6, #56]	@ 0x38
	for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000f7e:	d1c4      	bne.n	8000f0a <phaser_f32_process+0x2a>
}
 8000f80:	ecbd 8b04 	vpop	{d8-d9}
 8000f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		float32_t filtered = input;
 8000f88:	eef0 7a49 	vmov.f32	s15, s18
 8000f8c:	e7e8      	b.n	8000f60 <phaser_f32_process+0x80>
 8000f8e:	bf00      	nop
 8000f90:	54442d18 	.word	0x54442d18
 8000f94:	401921fb 	.word	0x401921fb

08000f98 <fx_phaser_init>:
void fx_phaser_init(FX_HANDLER_t *fx){
 8000f98:	b538      	push	{r3, r4, r5, lr}
 8000f9a:	4604      	mov	r4, r0
	fx->num_params = 3; // 3 params for a chorus effect
 8000f9c:	2303      	movs	r3, #3
    fx->states[0] = _dctm_static_mem_alloc(
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	201c      	movs	r0, #28
	fx->num_params = 3; // 3 params for a chorus effect
 8000fa2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    fx->states[0] = _dctm_static_mem_alloc(
 8000fa6:	f000 fb25 	bl	80015f4 <_dctm_static_mem_alloc>
 8000faa:	4605      	mov	r5, r0
 8000fac:	60e0      	str	r0, [r4, #12]
   	if(fx->states[0] == NULL){
 8000fae:	b320      	cbz	r0, 8000ffa <fx_phaser_init+0x62>
    p->wetness  = 0.5 ;
 8000fb0:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
	p->rate     = 1.5 ;
 8000fb4:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
	p->depth 	= 0.1 ;
 8000fb8:	491a      	ldr	r1, [pc, #104]	@ (8001024 <fx_phaser_init+0x8c>)
    p->wetness  = 0.5 ;
 8000fba:	6003      	str	r3, [r0, #0]
    p->stages   = 15   ;
 8000fbc:	230f      	movs	r3, #15
	p->depth 	= 0.1 ;
 8000fbe:	6041      	str	r1, [r0, #4]
	fx->states[1] = _static_mem_alloc(
 8000fc0:	2104      	movs	r1, #4
	p->rate     = 1.5 ;
 8000fc2:	6082      	str	r2, [r0, #8]
	fx->states[1] = _static_mem_alloc(
 8000fc4:	2078      	movs	r0, #120	@ 0x78
    p->stages   = 15   ;
 8000fc6:	732b      	strb	r3, [r5, #12]
	fx->states[1] = _static_mem_alloc(
 8000fc8:	f000 fb4a 	bl	8001660 <_static_mem_alloc_ram_d2>
 8000fcc:	4603      	mov	r3, r0
    fx->states[2] = _dctm_static_mem_alloc(
 8000fce:	2104      	movs	r1, #4
 8000fd0:	2040      	movs	r0, #64	@ 0x40
	fx->states[1] = _static_mem_alloc(
 8000fd2:	6123      	str	r3, [r4, #16]
    fx->states[2] = _dctm_static_mem_alloc(
 8000fd4:	f000 fb0e 	bl	80015f4 <_dctm_static_mem_alloc>
    	if(fx->states[i] == NULL){
 8000fd8:	68e3      	ldr	r3, [r4, #12]
    fx->states[2] = _dctm_static_mem_alloc(
 8000fda:	6160      	str	r0, [r4, #20]
    	if(fx->states[i] == NULL){
 8000fdc:	b1cb      	cbz	r3, 8001012 <fx_phaser_init+0x7a>
 8000fde:	6923      	ldr	r3, [r4, #16]
 8000fe0:	b1bb      	cbz	r3, 8001012 <fx_phaser_init+0x7a>
 8000fe2:	b1b0      	cbz	r0, 8001012 <fx_phaser_init+0x7a>
    self->t = 0.0f;
 8000fe4:	2100      	movs	r1, #0
    fx->process = phaser_f32_process;
 8000fe6:	4a10      	ldr	r2, [pc, #64]	@ (8001028 <fx_phaser_init+0x90>)
    self->params = p;
 8000fe8:	e9c0 350c 	strd	r3, r5, [r0, #48]	@ 0x30
    self->dt = 1.0f / 48000.0f ; // sample rate !magic # for now.
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <fx_phaser_init+0x94>)
    self->t = 0.0f;
 8000fee:	6381      	str	r1, [r0, #56]	@ 0x38
    self->dt = 1.0f / 48000.0f ; // sample rate !magic # for now.
 8000ff0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    fx->clean =   fx_phaser_clean;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <fx_phaser_init+0x98>)
 8000ff4:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
 8000ff8:	bd38      	pop	{r3, r4, r5, pc}
	phaser_f32_clean((phaser_f32 *)fx->states[2]);
 8000ffa:	6963      	ldr	r3, [r4, #20]
    	fx->states[i] = NULL;
 8000ffc:	4601      	mov	r1, r0
 8000ffe:	2220      	movs	r2, #32
	self->state = NULL;
 8001000:	e9c3 000c 	strd	r0, r0, [r3, #48]	@ 0x30
    	fx->states[i] = NULL;
 8001004:	f104 000c 	add.w	r0, r4, #12
 8001008:	f00a fcb3 	bl	800b972 <memset>
    fx->process = NULL;
 800100c:	2300      	movs	r3, #0
 800100e:	6063      	str	r3, [r4, #4]
}
 8001010:	bd38      	pop	{r3, r4, r5, pc}
	self->state = NULL;
 8001012:	2100      	movs	r1, #0
    	fx->states[i] = NULL;
 8001014:	2220      	movs	r2, #32
	self->state = NULL;
 8001016:	e9c0 110c 	strd	r1, r1, [r0, #48]	@ 0x30
    	fx->states[i] = NULL;
 800101a:	f104 000c 	add.w	r0, r4, #12
 800101e:	f00a fca8 	bl	800b972 <memset>
 8001022:	e7f3      	b.n	800100c <fx_phaser_init+0x74>
 8001024:	3dcccccd 	.word	0x3dcccccd
 8001028:	08000ee1 	.word	0x08000ee1
 800102c:	37aec33e 	.word	0x37aec33e
 8001030:	08000ec5 	.word	0x08000ec5

08001034 <supro_simulation_f32_process>:

/**
 * @brief Main FX chain processing: reverb → preamp → reverb → poweramp → reverb.
 */
static void supro_simulation_f32_process(FX_HANDLER_t *fx, pipe *p)
{
 8001034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float32_t *overlap = (float32_t *)fx->states[0];
    fir_t     *firs    = (fir_t *)fx->states[2];

    // 1) Dry signal attenuation
    arm_scale_f32(p->processBuffer, 0.05f, p->processBuffer, BUFFER_SIZE);
 8001038:	f501 4b80 	add.w	fp, r1, #16384	@ 0x4000
    fir_t     *firs    = (fir_t *)fx->states[2];
 800103c:	6943      	ldr	r3, [r0, #20]
{
 800103e:	460c      	mov	r4, r1
    float32_t *overlap = (float32_t *)fx->states[0];
 8001040:	68c5      	ldr	r5, [r0, #12]
    fir_t     *firs    = (fir_t *)fx->states[2];
 8001042:	461e      	mov	r6, r3
    arm_scale_f32(p->processBuffer, 0.05f, p->processBuffer, BUFFER_SIZE);
 8001044:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 80012a8 <supro_simulation_f32_process+0x274>
{
 8001048:	4682      	mov	sl, r0
    arm_scale_f32(p->processBuffer, 0.05f, p->processBuffer, BUFFER_SIZE);
 800104a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
{
 800104e:	ed2d 8b0a 	vpush	{d8-d12}
 8001052:	b085      	sub	sp, #20
 8001054:	9103      	str	r1, [sp, #12]
    arm_scale_f32(p->processBuffer, 0.05f, p->processBuffer, BUFFER_SIZE);
 8001056:	f8db 1008 	ldr.w	r1, [fp, #8]
    fir_t     *firs    = (fir_t *)fx->states[2];
 800105a:	9301      	str	r3, [sp, #4]
    arm_scale_f32(p->processBuffer, 0.05f, p->processBuffer, BUFFER_SIZE);
 800105c:	4608      	mov	r0, r1
    float32_t *overlap = (float32_t *)fx->states[0];
 800105e:	9500      	str	r5, [sp, #0]
    arm_scale_f32(p->processBuffer, 0.05f, p->processBuffer, BUFFER_SIZE);
 8001060:	f009 fe7c 	bl	800ad5c <arm_scale_f32>

    // 2) First convolution reverb
    partitioned_fir_convolution_fft(p, &firs[0], &overlap[0]);
 8001064:	462a      	mov	r2, r5
 8001066:	4631      	mov	r1, r6
 8001068:	4620      	mov	r0, r4
 800106a:	f001 fc5d 	bl	8002928 <partitioned_fir_convolution_fft>

    // 3) Preamp shaping
    supro_preamp_f32(fx, p);
 800106e:	f8db 3008 	ldr.w	r3, [fp, #8]
    float32_t        gWet   = a[SUPRO_P_BLEND_IDX];
    float32_t        bias   = a[SUPRO_P_BIAS_IDX];

    // Envelope detection: squared → lowpass → sqrt(2·env)
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5], scratch, env, BUFFER_SIZE);
 8001072:	4e8e      	ldr	r6, [pc, #568]	@ (80012ac <supro_simulation_f32_process+0x278>)
 8001074:	4619      	mov	r1, r3
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
 8001076:	4a8e      	ldr	r2, [pc, #568]	@ (80012b0 <supro_simulation_f32_process+0x27c>)
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800107e:	4608      	mov	r0, r1
 8001080:	f506 5580 	add.w	r5, r6, #4096	@ 0x1000
 8001084:	f009 fed6 	bl	800ae34 <arm_mult_f32>
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5], scratch, env, BUFFER_SIZE);
 8001088:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800108c:	4988      	ldr	r1, [pc, #544]	@ (80012b0 <supro_simulation_f32_process+0x27c>)
 800108e:	4632      	mov	r2, r6
 8001090:	f8da 0020 	ldr.w	r0, [sl, #32]
 8001094:	f009 fd96 	bl	800abc4 <arm_biquad_cascade_df1_f32>
    arm_scale_f32(env, 2.0f, env, BUFFER_SIZE);
 8001098:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800109c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a0:	4631      	mov	r1, r6
 80010a2:	4630      	mov	r0, r6
 80010a4:	f009 fe5a 	bl	800ad5c <arm_scale_f32>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] = sqrtf(fmaxf(env[i], 0.0f));
 80010a8:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80012b4 <supro_simulation_f32_process+0x280>
    arm_scale_f32(env, 2.0f, env, BUFFER_SIZE);
 80010ac:	4633      	mov	r3, r6
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] = sqrtf(fmaxf(env[i], 0.0f));
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80010b6:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80010ba:	eca3 7a01 	vstmia	r3!, {s14}
 80010be:	429d      	cmp	r5, r3
 80010c0:	d1f5      	bne.n	80010ae <supro_simulation_f32_process+0x7a>

    // Polynomial distortion via Horner's method
    arm_scale_f32(x, gPre, scratch, BUFFER_SIZE);
 80010c2:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 80012b8 <supro_simulation_f32_process+0x284>
 80010c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ca:	4979      	ldr	r1, [pc, #484]	@ (80012b0 <supro_simulation_f32_process+0x27c>)
 80010cc:	9802      	ldr	r0, [sp, #8]
 80010ce:	f009 fe45 	bl	800ad5c <arm_scale_f32>
    arm_scale_f32(env, bias, env, BUFFER_SIZE);
 80010d2:	4976      	ldr	r1, [pc, #472]	@ (80012ac <supro_simulation_f32_process+0x278>)
 80010d4:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 80012bc <supro_simulation_f32_process+0x288>
 80010d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010dc:	4608      	mov	r0, r1
 80010de:	4c78      	ldr	r4, [pc, #480]	@ (80012c0 <supro_simulation_f32_process+0x28c>)
 80010e0:	f009 fe3c 	bl	800ad5c <arm_scale_f32>
    arm_add_f32(scratch, env, scratch, BUFFER_SIZE);
 80010e4:	4a72      	ldr	r2, [pc, #456]	@ (80012b0 <supro_simulation_f32_process+0x27c>)
 80010e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ea:	4970      	ldr	r1, [pc, #448]	@ (80012ac <supro_simulation_f32_process+0x278>)
 80010ec:	4610      	mov	r0, r2
    uint32_t K = SUPRO_NUM_A_VALS;
    arm_scale_f32(scratch, a[K-1], env, BUFFER_SIZE);
    for (int k = K-2; k >= 0; --k) {
        arm_mult_f32(scratch, env, env, BUFFER_SIZE);
 80010ee:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 80012ac <supro_simulation_f32_process+0x278>
 80010f2:	f8df 81bc 	ldr.w	r8, [pc, #444]	@ 80012b0 <supro_simulation_f32_process+0x27c>
 80010f6:	f1a4 079c 	sub.w	r7, r4, #156	@ 0x9c
    arm_add_f32(scratch, env, scratch, BUFFER_SIZE);
 80010fa:	f009 fee1 	bl	800aec0 <arm_add_f32>
    arm_scale_f32(scratch, a[K-1], env, BUFFER_SIZE);
 80010fe:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 80012c4 <supro_simulation_f32_process+0x290>
 8001102:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001106:	4969      	ldr	r1, [pc, #420]	@ (80012ac <supro_simulation_f32_process+0x278>)
 8001108:	4869      	ldr	r0, [pc, #420]	@ (80012b0 <supro_simulation_f32_process+0x27c>)
 800110a:	f009 fe27 	bl	800ad5c <arm_scale_f32>
        arm_mult_f32(scratch, env, env, BUFFER_SIZE);
 800110e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001112:	464a      	mov	r2, r9
 8001114:	4965      	ldr	r1, [pc, #404]	@ (80012ac <supro_simulation_f32_process+0x278>)
 8001116:	4640      	mov	r0, r8
 8001118:	f009 fe8c 	bl	800ae34 <arm_mult_f32>
        for (uint32_t i = 0; i < BUFFER_SIZE; ++i) env[i] += a[k];
 800111c:	ed34 7a01 	vldmdb	r4!, {s14}
 8001120:	4633      	mov	r3, r6
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ee77 7a87 	vadd.f32	s15, s15, s14
 800112a:	ece3 7a01 	vstmia	r3!, {s15}
 800112e:	429d      	cmp	r5, r3
 8001130:	d1f7      	bne.n	8001122 <supro_simulation_f32_process+0xee>
    for (int k = K-2; k >= 0; --k) {
 8001132:	42bc      	cmp	r4, r7
 8001134:	d1eb      	bne.n	800110e <supro_simulation_f32_process+0xda>
    }

    // Wet/dry mix and postgain
    arm_scale_f32(env, gWet, env, BUFFER_SIZE);
 8001136:	495d      	ldr	r1, [pc, #372]	@ (80012ac <supro_simulation_f32_process+0x278>)
 8001138:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800113c:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80012c8 <supro_simulation_f32_process+0x294>
 8001140:	4608      	mov	r0, r1
 8001142:	4d62      	ldr	r5, [pc, #392]	@ (80012cc <supro_simulation_f32_process+0x298>)
 8001144:	f009 fe0a 	bl	800ad5c <arm_scale_f32>
    arm_scale_f32(scratch, 1 - gWet, scratch, BUFFER_SIZE);
 8001148:	4959      	ldr	r1, [pc, #356]	@ (80012b0 <supro_simulation_f32_process+0x27c>)
 800114a:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 80012d0 <supro_simulation_f32_process+0x29c>
 800114e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001152:	4608      	mov	r0, r1
 8001154:	f505 5680 	add.w	r6, r5, #4096	@ 0x1000
 8001158:	f009 fe00 	bl	800ad5c <arm_scale_f32>
    arm_add_f32(env, scratch, scratch, BUFFER_SIZE);
 800115c:	4a54      	ldr	r2, [pc, #336]	@ (80012b0 <supro_simulation_f32_process+0x27c>)
 800115e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001162:	4852      	ldr	r0, [pc, #328]	@ (80012ac <supro_simulation_f32_process+0x278>)
 8001164:	4611      	mov	r1, r2
 8001166:	f009 feab 	bl	800aec0 <arm_add_f32>
    arm_scale_f32(scratch, gPost, x, BUFFER_SIZE);
 800116a:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 80012d4 <supro_simulation_f32_process+0x2a0>
 800116e:	9902      	ldr	r1, [sp, #8]
 8001170:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001174:	484e      	ldr	r0, [pc, #312]	@ (80012b0 <supro_simulation_f32_process+0x27c>)
 8001176:	f009 fdf1 	bl	800ad5c <arm_scale_f32>
    partitioned_fir_convolution_fft(p, &firs[1], &overlap[BUFFER_SIZE]);
 800117a:	9b00      	ldr	r3, [sp, #0]
 800117c:	9803      	ldr	r0, [sp, #12]
 800117e:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8001182:	9b01      	ldr	r3, [sp, #4]
 8001184:	f103 0114 	add.w	r1, r3, #20
 8001188:	f001 fbce 	bl	8002928 <partitioned_fir_convolution_fft>
    supro_poweramp_f32(fx, p);
 800118c:	f8db 4008 	ldr.w	r4, [fp, #8]

    float32_t *x       = p->processBuffer;
    float32_t *scratch = pow_scratch;

    // Envelope detection
    arm_mult_f32(x, x, scratch, BUFFER_SIZE);
 8001190:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001194:	4a4d      	ldr	r2, [pc, #308]	@ (80012cc <supro_simulation_f32_process+0x298>)
 8001196:	4621      	mov	r1, r4
 8001198:	4620      	mov	r0, r4
 800119a:	f009 fe4b 	bl	800ae34 <arm_mult_f32>
    arm_biquad_cascade_df1_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[6], scratch, scratch, BUFFER_SIZE);
 800119e:	4a4b      	ldr	r2, [pc, #300]	@ (80012cc <supro_simulation_f32_process+0x298>)
 80011a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011a4:	f8da 0024 	ldr.w	r0, [sl, #36]	@ 0x24
 80011a8:	4611      	mov	r1, r2
 80011aa:	f009 fd0b 	bl	800abc4 <arm_biquad_cascade_df1_f32>
    arm_scale_f32(scratch, 2.0f, scratch, BUFFER_SIZE);
 80011ae:	4947      	ldr	r1, [pc, #284]	@ (80012cc <supro_simulation_f32_process+0x298>)
 80011b0:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80011b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011b8:	4608      	mov	r0, r1
 80011ba:	f009 fdcf 	bl	800ad5c <arm_scale_f32>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) scratch[i] = sqrtf(fmaxf(scratch[i], 0.0f));
 80011be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80012b4 <supro_simulation_f32_process+0x280>
    arm_scale_f32(scratch, 2.0f, scratch, BUFFER_SIZE);
 80011c2:	462b      	mov	r3, r5
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) scratch[i] = sqrtf(fmaxf(scratch[i], 0.0f));
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80011cc:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80011d0:	eca3 7a01 	vstmia	r3!, {s14}
 80011d4:	42b3      	cmp	r3, r6
 80011d6:	d1f5      	bne.n	80011c4 <supro_simulation_f32_process+0x190>
    float32_t coeffP  = (tanh_kP*tanh_kP - 1.0f) / gP;

    // Nonlinearity per sample
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
        float32_t env   = scratch[i];
        float32_t xBias = x[i] - gBias * env;
 80011d8:	eddf 9a38 	vldr	s19, [pc, #224]	@ 80012bc <supro_simulation_f32_process+0x288>
        float32_t xPre  = gPre * xBias;
 80011dc:	ed9f 9a3e 	vldr	s18, [pc, #248]	@ 80012d8 <supro_simulation_f32_process+0x2a4>
        float32_t m;
        if (xPre > kP) {
 80011e0:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 80012dc <supro_simulation_f32_process+0x2a8>
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
        } else if (xPre >= -kN) {
 80011e4:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 80012e0 <supro_simulation_f32_process+0x2ac>
            m = tanhf(xPre);
        } else {
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 80011e8:	eddf aa3e 	vldr	s21, [pc, #248]	@ 80012e4 <supro_simulation_f32_process+0x2b0>
 80011ec:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 80012e8 <supro_simulation_f32_process+0x2b4>
 80011f0:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 80012ec <supro_simulation_f32_process+0x2b8>
 80011f4:	eddf ba3e 	vldr	s23, [pc, #248]	@ 80012f0 <supro_simulation_f32_process+0x2bc>
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 80011f8:	ed9f 8a3e 	vldr	s16, [pc, #248]	@ 80012f4 <supro_simulation_f32_process+0x2c0>
 80011fc:	e00f      	b.n	800121e <supro_simulation_f32_process+0x1ea>
 80011fe:	f00b fa7b 	bl	800c6f8 <tanhf>
 8001202:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80012f8 <supro_simulation_f32_process+0x2c4>
 8001206:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 80012fc <supro_simulation_f32_process+0x2c8>
 800120a:	eee0 7a07 	vfma.f32	s15, s0, s14
        }
        x[i] = gPost * m;
 800120e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001300 <supro_simulation_f32_process+0x2cc>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 8001212:	42b5      	cmp	r5, r6
        x[i] = gPost * m;
 8001214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001218:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 800121c:	d027      	beq.n	800126e <supro_simulation_f32_process+0x23a>
        float32_t env   = scratch[i];
 800121e:	ecb5 7a01 	vldmia	r5!, {s14}
        float32_t xBias = x[i] - gBias * env;
 8001222:	ecf4 7a01 	vldmia	r4!, {s15}
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 8001226:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8001304 <supro_simulation_f32_process+0x2d0>
        float32_t xBias = x[i] - gBias * env;
 800122a:	eee7 7a69 	vfms.f32	s15, s14, s19
        if (xPre > kP) {
 800122e:	eef4 7ae8 	vcmpe.f32	s15, s17
        float32_t xPre  = gPre * xBias;
 8001232:	ee27 7a89 	vmul.f32	s14, s15, s18
        if (xPre > kP) {
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            m = tanh_kP - coeffP * tanhf(gP * xPre - kP);
 800123a:	eea7 0a48 	vfms.f32	s0, s14, s16
        if (xPre > kP) {
 800123e:	dcde      	bgt.n	80011fe <supro_simulation_f32_process+0x1ca>
        } else if (xPre >= -kN) {
 8001240:	eef4 7acb 	vcmpe.f32	s15, s22
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 8001244:	eeb0 0a4a 	vmov.f32	s0, s20
        } else if (xPre >= -kN) {
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 800124c:	eea7 0a2a 	vfma.f32	s0, s14, s21
        } else if (xPre >= -kN) {
 8001250:	db23      	blt.n	800129a <supro_simulation_f32_process+0x266>
            m = tanhf(xPre);
 8001252:	eeb0 0a47 	vmov.f32	s0, s14
 8001256:	f00b fa4f 	bl	800c6f8 <tanhf>
 800125a:	eef0 7a40 	vmov.f32	s15, s0
        x[i] = gPost * m;
 800125e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001300 <supro_simulation_f32_process+0x2cc>
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 8001262:	42b5      	cmp	r5, r6
        x[i] = gPost * m;
 8001264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001268:	ed44 7a01 	vstr	s15, [r4, #-4]
    for (uint32_t i = 0; i < BUFFER_SIZE; ++i) {
 800126c:	d1d7      	bne.n	800121e <supro_simulation_f32_process+0x1ea>
    partitioned_fir_convolution_fft(p, &firs[2], &overlap[2 * BUFFER_SIZE]);
 800126e:	9b00      	ldr	r3, [sp, #0]
 8001270:	9901      	ldr	r1, [sp, #4]
 8001272:	f503 5200 	add.w	r2, r3, #8192	@ 0x2000
 8001276:	9803      	ldr	r0, [sp, #12]
 8001278:	3128      	adds	r1, #40	@ 0x28
 800127a:	f001 fb55 	bl	8002928 <partitioned_fir_convolution_fft>
    arm_scale_f32(p->processBuffer, 0.005f * 1/13, p->processBuffer, BUFFER_SIZE);
 800127e:	f8db 1008 	ldr.w	r1, [fp, #8]
 8001282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001286:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001308 <supro_simulation_f32_process+0x2d4>
 800128a:	4608      	mov	r0, r1
}
 800128c:	b005      	add	sp, #20
 800128e:	ecbd 8b0a 	vpop	{d8-d12}
 8001292:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_scale_f32(p->processBuffer, 0.005f * 1/13, p->processBuffer, BUFFER_SIZE);
 8001296:	f009 bd61 	b.w	800ad5c <arm_scale_f32>
            m = -tanh_kN - coeffN * tanhf(gN * xPre + kN);
 800129a:	f00b fa2d 	bl	800c6f8 <tanhf>
 800129e:	eef0 7a6b 	vmov.f32	s15, s23
 80012a2:	eee0 7a4c 	vfms.f32	s15, s0, s24
 80012a6:	e7b2      	b.n	800120e <supro_simulation_f32_process+0x1da>
 80012a8:	3d4ccccd 	.word	0x3d4ccccd
 80012ac:	240010a4 	.word	0x240010a4
 80012b0:	240020a4 	.word	0x240020a4
 80012b4:	00000000 	.word	0x00000000
 80012b8:	3f710983 	.word	0x3f710983
 80012bc:	3f186130 	.word	0x3f186130
 80012c0:	0800ccf0 	.word	0x0800ccf0
 80012c4:	d267d638 	.word	0xd267d638
 80012c8:	3f0d61b4 	.word	0x3f0d61b4
 80012cc:	240000a4 	.word	0x240000a4
 80012d0:	3ee53c98 	.word	0x3ee53c98
 80012d4:	3f7db881 	.word	0x3f7db881
 80012d8:	3f8e9370 	.word	0x3f8e9370
 80012dc:	3f64018b 	.word	0x3f64018b
 80012e0:	bf655493 	.word	0xbf655493
 80012e4:	3f7fa057 	.word	0x3f7fa057
 80012e8:	3f7f71fb 	.word	0x3f7f71fb
 80012ec:	bed80d82 	.word	0xbed80d82
 80012f0:	bf42bc17 	.word	0xbf42bc17
 80012f4:	3f806a2a 	.word	0x3f806a2a
 80012f8:	bed8ee5b 	.word	0xbed8ee5b
 80012fc:	3f421c45 	.word	0x3f421c45
 8001300:	40d6c29a 	.word	0x40d6c29a
 8001304:	3f7df857 	.word	0x3f7df857
 8001308:	39c9a634 	.word	0x39c9a634

0800130c <fx_supro_init>:
{
 800130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130e:	4604      	mov	r4, r0
	fx->num_params = 0;
 8001310:	2300      	movs	r3, #0
    fx->states[0] = _dctm_static_mem_alloc(
 8001312:	2104      	movs	r1, #4
 8001314:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
	fx->num_params = 0;
 8001318:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    fx->states[0] = _dctm_static_mem_alloc(
 800131c:	f000 f96a 	bl	80015f4 <_dctm_static_mem_alloc>
 8001320:	4603      	mov	r3, r0
    fx->states[1] = _static_mem_alloc(
 8001322:	2104      	movs	r1, #4
 8001324:	f246 0018 	movw	r0, #24600	@ 0x6018
    fx->states[0] = _dctm_static_mem_alloc(
 8001328:	60e3      	str	r3, [r4, #12]
    fx->states[1] = _static_mem_alloc(
 800132a:	f000 f999 	bl	8001660 <_static_mem_alloc_ram_d2>
 800132e:	4603      	mov	r3, r0
    fx->states[2] = _static_mem_alloc(
 8001330:	2104      	movs	r1, #4
 8001332:	203c      	movs	r0, #60	@ 0x3c
    fx->states[1] = _static_mem_alloc(
 8001334:	6123      	str	r3, [r4, #16]
    fx->states[2] = _static_mem_alloc(
 8001336:	f000 f993 	bl	8001660 <_static_mem_alloc_ram_d2>
    	if(fx->states[i] == NULL){
 800133a:	68e2      	ldr	r2, [r4, #12]
    fx->states[2] = _static_mem_alloc(
 800133c:	4603      	mov	r3, r0
 800133e:	6160      	str	r0, [r4, #20]
    	if(fx->states[i] == NULL){
 8001340:	2a00      	cmp	r2, #0
 8001342:	d06d      	beq.n	8001420 <fx_supro_init+0x114>
 8001344:	6925      	ldr	r5, [r4, #16]
        fir_h2_f32_init(&firs[1], &fftBuf[1 * BUFFER_OFFSET]);
 8001346:	f100 0714 	add.w	r7, r0, #20
        fir_h3_f32_init(&firs[2], &fftBuf[2 * BUFFER_OFFSET]);
 800134a:	f100 0628 	add.w	r6, r0, #40	@ 0x28
    	if(fx->states[i] == NULL){
 800134e:	2d00      	cmp	r5, #0
 8001350:	d06a      	beq.n	8001428 <fx_supro_init+0x11c>
 8001352:	2800      	cmp	r0, #0
 8001354:	d068      	beq.n	8001428 <fx_supro_init+0x11c>
        fir_h1_f32_init(&firs[0], &fftBuf[0 * BUFFER_OFFSET]);
 8001356:	4629      	mov	r1, r5
 8001358:	f000 f8d2 	bl	8001500 <fir_h1_f32_init>
        fir_h2_f32_init(&firs[1], &fftBuf[1 * BUFFER_OFFSET]);
 800135c:	f242 0108 	movw	r1, #8200	@ 0x2008
 8001360:	4638      	mov	r0, r7
 8001362:	4429      	add	r1, r5
 8001364:	f000 f8e6 	bl	8001534 <fir_h2_f32_init>
        fir_h3_f32_init(&firs[2], &fftBuf[2 * BUFFER_OFFSET]);
 8001368:	f244 0110 	movw	r1, #16400	@ 0x4010
 800136c:	4630      	mov	r0, r6
 800136e:	4429      	add	r1, r5
 8001370:	f000 f8fa 	bl	8001568 <fir_h3_f32_init>
    fx->states[3] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 8001374:	2104      	movs	r1, #4
 8001376:	2010      	movs	r0, #16
 8001378:	f000 f93c 	bl	80015f4 <_dctm_static_mem_alloc>
 800137c:	4603      	mov	r3, r0
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 800137e:	2104      	movs	r1, #4
 8001380:	2010      	movs	r0, #16
    fx->states[3] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 8001382:	61a3      	str	r3, [r4, #24]
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 8001384:	f000 f936 	bl	80015f4 <_dctm_static_mem_alloc>
 8001388:	4603      	mov	r3, r0
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 800138a:	2104      	movs	r1, #4
 800138c:	200c      	movs	r0, #12
    fx->states[4] = _dctm_static_mem_alloc(LP_STAGES * 4 * sizeof(float32_t), _Alignof(float32_t));
 800138e:	61e3      	str	r3, [r4, #28]
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8001390:	f000 f966 	bl	8001660 <_static_mem_alloc_ram_d2>
 8001394:	4603      	mov	r3, r0
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 8001396:	2104      	movs	r1, #4
 8001398:	200c      	movs	r0, #12
    fx->states[5] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 800139a:	6223      	str	r3, [r4, #32]
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 800139c:	f000 f960 	bl	8001660 <_static_mem_alloc_ram_d2>
    	if(fx->states[i] == NULL){
 80013a0:	69a3      	ldr	r3, [r4, #24]
    fx->states[6] = _static_mem_alloc(sizeof(arm_biquad_casd_df1_inst_f32), _Alignof(arm_biquad_casd_df1_inst_f32));
 80013a2:	4602      	mov	r2, r0
 80013a4:	6260      	str	r0, [r4, #36]	@ 0x24
    	if(fx->states[i] == NULL){
 80013a6:	b30b      	cbz	r3, 80013ec <fx_supro_init+0xe0>
 80013a8:	69e1      	ldr	r1, [r4, #28]
 80013aa:	b1f9      	cbz	r1, 80013ec <fx_supro_init+0xe0>
 80013ac:	6a20      	ldr	r0, [r4, #32]
 80013ae:	b1e8      	cbz	r0, 80013ec <fx_supro_init+0xe0>
 80013b0:	b1e2      	cbz	r2, 80013ec <fx_supro_init+0xe0>
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[5],
 80013b2:	4a21      	ldr	r2, [pc, #132]	@ (8001438 <fx_supro_init+0x12c>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	f009 fbf7 	bl	800aba8 <arm_biquad_cascade_df1_init_f32>
    arm_biquad_cascade_df1_init_f32((arm_biquad_casd_df1_inst_f32 *)fx->states[6],
 80013ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <fx_supro_init+0x12c>)
 80013bc:	69e3      	ldr	r3, [r4, #28]
 80013be:	2101      	movs	r1, #1
 80013c0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80013c2:	f009 fbf1 	bl	800aba8 <arm_biquad_cascade_df1_init_f32>
    fx->states[7] = _static_mem_alloc(sizeof(supro_simulation_f32), _Alignof(supro_simulation_f32));
 80013c6:	2104      	movs	r1, #4
 80013c8:	2040      	movs	r0, #64	@ 0x40
 80013ca:	f000 f949 	bl	8001660 <_static_mem_alloc_ram_d2>
        fir_t     *firs      = (fir_t *)fx->states[2];
 80013ce:	6963      	ldr	r3, [r4, #20]
        float32_t *dtcmState = (float32_t *)fx->states[0];
 80013d0:	68e1      	ldr	r1, [r4, #12]
        supro_simulation_init_f32((supro_simulation_f32 *)fx->states[7],
 80013d2:	f103 0214 	add.w	r2, r3, #20
    fx->states[7] = _static_mem_alloc(sizeof(supro_simulation_f32), _Alignof(supro_simulation_f32));
 80013d6:	62a0      	str	r0, [r4, #40]	@ 0x28
    self->fir1  = fir1;
 80013d8:	6303      	str	r3, [r0, #48]	@ 0x30
        supro_simulation_init_f32((supro_simulation_f32 *)fx->states[7],
 80013da:	3328      	adds	r3, #40	@ 0x28
    self->fir2  = fir2;
 80013dc:	6342      	str	r2, [r0, #52]	@ 0x34
    fx->process = supro_simulation_f32_process;
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <fx_supro_init+0x130>)
    self->fir3  = fir3;
 80013e0:	e9c0 310e 	strd	r3, r1, [r0, #56]	@ 0x38
    fx->clean = fx_reverb_clean;
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <fx_supro_init+0x134>)
 80013e6:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
 80013ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fir_t     *firs   = (fir_t *)fx->states[2];
 80013ec:	6965      	ldr	r5, [r4, #20]
	fir_h1_f32_init_clean((fir_t *)&firs[0]);
 80013ee:	4628      	mov	r0, r5
 80013f0:	f000 f89a 	bl	8001528 <fir_h1_f32_init_clean>
	fir_h2_f32_init_clean((fir_t *)&firs[1]);
 80013f4:	f105 0014 	add.w	r0, r5, #20
 80013f8:	f000 f8b0 	bl	800155c <fir_h2_f32_init_clean>
	fir_h3_f32_init_clean((fir_t *)&firs[2]);
 80013fc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8001400:	f000 f8c6 	bl	8001590 <fir_h3_f32_init_clean>
	supro_simulation_clean_f32((supro_simulation_f32*)fx->states[7]);
 8001404:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    self->fir1  = NULL;
 8001406:	2100      	movs	r1, #0
    	fx->states[i] = NULL;
 8001408:	2220      	movs	r2, #32
 800140a:	f104 000c 	add.w	r0, r4, #12
    self->fir1  = NULL;
 800140e:	e9c3 110c 	strd	r1, r1, [r3, #48]	@ 0x30
 8001412:	e9c3 110e 	strd	r1, r1, [r3, #56]	@ 0x38
    	fx->states[i] = NULL;
 8001416:	f00a faac 	bl	800b972 <memset>
    fx->process = NULL;
 800141a:	2300      	movs	r3, #0
 800141c:	6063      	str	r3, [r4, #4]
}
 800141e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001420:	f100 0714 	add.w	r7, r0, #20
 8001424:	f100 0628 	add.w	r6, r0, #40	@ 0x28
	fir_h1_f32_init_clean((fir_t *)&firs[0]);
 8001428:	4618      	mov	r0, r3
 800142a:	f000 f87d 	bl	8001528 <fir_h1_f32_init_clean>
	fir_h2_f32_init_clean((fir_t *)&firs[1]);
 800142e:	4638      	mov	r0, r7
 8001430:	f000 f894 	bl	800155c <fir_h2_f32_init_clean>
	fir_h3_f32_init_clean((fir_t *)&firs[2]);
 8001434:	4630      	mov	r0, r6
 8001436:	e7e3      	b.n	8001400 <fx_supro_init+0xf4>
 8001438:	0800cc40 	.word	0x0800cc40
 800143c:	08001035 	.word	0x08001035
 8001440:	08000e85 	.word	0x08000e85

08001444 <fir_OD_M212_VINT_DYN_201_P05_00_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + OD_M212_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + OD_M212_SCRATCH_FLOATS + OD_M212_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 8001444:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 8001448:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 800144c:	440a      	add	r2, r1
void fir_OD_M212_VINT_DYN_201_P05_00_f32_init(fir_t *self, float *state){
 800144e:	b430      	push	{r4, r5}
    self->numSegments  = OD_M212_SEGMENTS;
    self->curr_fftidx  = 0;
 8001450:	2400      	movs	r4, #0
    self->numSegments  = OD_M212_SEGMENTS;
 8001452:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8001454:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < OD_M212_SEGMENTS; ++i) {
        IR_TABLE [i] = &_CAB_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8001458:	4a03      	ldr	r2, [pc, #12]	@ (8001468 <fir_OD_M212_VINT_DYN_201_P05_00_f32_init+0x24>)
    self->numSegments  = OD_M212_SEGMENTS;
 800145a:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 800145c:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8001460:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_CAB_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8001462:	e9c3 2100 	strd	r2, r1, [r3]
}
 8001466:	4770      	bx	lr
 8001468:	0800cd40 	.word	0x0800cd40

0800146c <fir_OD_M212_VINT_DYN_201_P05_00_f32_clean>:

void fir_OD_M212_VINT_DYN_201_P05_00_f32_clean(fir_t *self){

    for (uint32_t i = 0; i < OD_M212_SEGMENTS; ++i) {
    	self->ir_ffts [i]   = NULL;
 800146c:	2300      	movs	r3, #0
    	self->prev_ffts [i] = NULL;
 800146e:	e9d0 1200 	ldrd	r1, r2, [r0]
    	self->ir_ffts [i]   = NULL;
 8001472:	600b      	str	r3, [r1, #0]
    	self->prev_ffts [i] = NULL;
 8001474:	6013      	str	r3, [r2, #0]
    }

}
 8001476:	4770      	bx	lr

08001478 <fir_emt_140_dark_3_f32_init>:
#include "impulse_responses.h"
#include "stdio.h"


void fir_emt_140_dark_3_f32_init(fir_t *self, float *state){
 8001478:	b470      	push	{r4, r5, r6}
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + EMT_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + EMT_SCRATCH_FLOATS + EMT_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 800147a:	4c0e      	ldr	r4, [pc, #56]	@ (80014b4 <fir_emt_140_dark_3_f32_init+0x3c>)
    self->numSegments  = EMT_SEGMENTS;
    self->curr_fftidx  = 0;
 800147c:	2500      	movs	r5, #0
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <fir_emt_140_dark_3_f32_init+0x40>)
    self->ir_ffts      = IR_TABLE;
 8001480:	f501 26b8 	add.w	r6, r1, #376832	@ 0x5c000
    self->prev_ffts    = PREV_TABLE;
 8001484:	440c      	add	r4, r1
 8001486:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <fir_emt_140_dark_3_f32_init+0x44>)
 8001488:	f503 2cb8 	add.w	ip, r3, #376832	@ 0x5c000
    self->ir_ffts      = IR_TABLE;
 800148c:	6006      	str	r6, [r0, #0]
    self->prev_ffts    = PREV_TABLE;
 800148e:	6044      	str	r4, [r0, #4]
    self->numSegments  = EMT_SEGMENTS;
 8001490:	440a      	add	r2, r1
 8001492:	242e      	movs	r4, #46	@ 0x2e
    self->curr_fftidx  = 0;
 8001494:	e9c0 5502 	strd	r5, r5, [r0, #8]
    self->numSegments  = EMT_SEGMENTS;
 8001498:	6104      	str	r4, [r0, #16]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
        IR_TABLE [i] = &_EMT_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 800149a:	f842 3f04 	str.w	r3, [r2, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 800149e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
 80014a2:	f8c2 10b8 	str.w	r1, [r2, #184]	@ 0xb8
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 80014a6:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80014aa:	4563      	cmp	r3, ip
 80014ac:	d1f5      	bne.n	800149a <fir_emt_140_dark_3_f32_init+0x22>
    }

}
 80014ae:	bc70      	pop	{r4, r5, r6}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	0005c0b8 	.word	0x0005c0b8
 80014b8:	0800ed40 	.word	0x0800ed40
 80014bc:	0005bffc 	.word	0x0005bffc

080014c0 <fir_emt_140_dark_3_f32_clean>:


void fir_emt_140_dark_3_f32_clean(fir_t *self)
{
 80014c0:	4603      	mov	r3, r0
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
    	self->ir_ffts [i]   = NULL;
 80014c2:	6800      	ldr	r0, [r0, #0]
{
 80014c4:	b510      	push	{r4, lr}
    	self->prev_ffts [i] = NULL;
 80014c6:	685c      	ldr	r4, [r3, #4]
 80014c8:	f100 03b7 	add.w	r3, r0, #183	@ 0xb7
 80014cc:	1b1b      	subs	r3, r3, r4
 80014ce:	f5b3 7fb7 	cmp.w	r3, #366	@ 0x16e
 80014d2:	d90a      	bls.n	80014ea <fir_emt_140_dark_3_f32_clean+0x2a>
    	self->ir_ffts [i]   = NULL;
 80014d4:	22b8      	movs	r2, #184	@ 0xb8
 80014d6:	2100      	movs	r1, #0
 80014d8:	f00a fa4b 	bl	800b972 <memset>
    	self->prev_ffts [i] = NULL;
 80014dc:	4620      	mov	r0, r4
 80014de:	22b8      	movs	r2, #184	@ 0xb8
 80014e0:	2100      	movs	r1, #0
    }
}
 80014e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	self->prev_ffts [i] = NULL;
 80014e6:	f00a ba44 	b.w	800b972 <memset>
 80014ea:	1f03      	subs	r3, r0, #4
 80014ec:	1f22      	subs	r2, r4, #4
 80014ee:	30b4      	adds	r0, #180	@ 0xb4
    	self->ir_ffts [i]   = NULL;
 80014f0:	2100      	movs	r1, #0
 80014f2:	f843 1f04 	str.w	r1, [r3, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 80014f6:	4283      	cmp	r3, r0
    	self->prev_ffts [i] = NULL;
 80014f8:	f842 1f04 	str.w	r1, [r2, #4]!
    for (uint32_t i = 0; i < EMT_SEGMENTS; ++i) {
 80014fc:	d1f9      	bne.n	80014f2 <fir_emt_140_dark_3_f32_clean+0x32>
}
 80014fe:	bd10      	pop	{r4, pc}

08001500 <fir_h1_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H1_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H1_SCRATCH_FLOATS + H1_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 8001500:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 8001504:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 8001508:	440a      	add	r2, r1
void fir_h1_f32_init(fir_t *self, float *state){
 800150a:	b430      	push	{r4, r5}
    self->numSegments  = H1_SEGMENTS;
    self->curr_fftidx  = 0;
 800150c:	2400      	movs	r4, #0
    self->numSegments  = H1_SEGMENTS;
 800150e:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8001510:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H1_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H1_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8001514:	4a03      	ldr	r2, [pc, #12]	@ (8001524 <fir_h1_f32_init+0x24>)
    self->numSegments  = H1_SEGMENTS;
 8001516:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 8001518:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 800151c:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H1_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 800151e:	e9c3 2100 	strd	r2, r1, [r3]
}
 8001522:	4770      	bx	lr
 8001524:	0806ad40 	.word	0x0806ad40

08001528 <fir_h1_f32_init_clean>:

void fir_h1_f32_init_clean(fir_t *self)
{

    for (uint32_t i = 0; i < H1_SEGMENTS; ++i) {
    	self->ir_ffts [i]   = NULL;
 8001528:	2300      	movs	r3, #0
    	self->prev_ffts [i] = NULL;
 800152a:	e9d0 1200 	ldrd	r1, r2, [r0]
    	self->ir_ffts [i]   = NULL;
 800152e:	600b      	str	r3, [r1, #0]
    	self->prev_ffts [i] = NULL;
 8001530:	6013      	str	r3, [r2, #0]
    }

}
 8001532:	4770      	bx	lr

08001534 <fir_h2_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H2_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H2_SCRATCH_FLOATS + H2_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 8001534:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 8001538:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 800153c:	440a      	add	r2, r1
void fir_h2_f32_init(fir_t *self, float *state){
 800153e:	b430      	push	{r4, r5}
    self->numSegments  = H2_SEGMENTS;
    self->curr_fftidx  = 0;
 8001540:	2400      	movs	r4, #0
    self->numSegments  = H2_SEGMENTS;
 8001542:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8001544:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H2_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H2_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8001548:	4a03      	ldr	r2, [pc, #12]	@ (8001558 <fir_h2_f32_init+0x24>)
    self->numSegments  = H2_SEGMENTS;
 800154a:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 800154c:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8001550:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H2_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8001552:	e9c3 2100 	strd	r2, r1, [r3]
}
 8001556:	4770      	bx	lr
 8001558:	0806cd40 	.word	0x0806cd40

0800155c <fir_h2_f32_init_clean>:

void fir_h2_f32_init_clean(fir_t *self)
{

    for (uint32_t i = 0; i < H2_SEGMENTS; ++i) {
    	self->ir_ffts [i]   = NULL;
 800155c:	2300      	movs	r3, #0
    	self->prev_ffts [i] = NULL;
 800155e:	e9d0 1200 	ldrd	r1, r2, [r0]
    	self->ir_ffts [i]   = NULL;
 8001562:	600b      	str	r3, [r1, #0]
    	self->prev_ffts [i] = NULL;
 8001564:	6013      	str	r3, [r2, #0]
    }

}
 8001566:	4770      	bx	lr

08001568 <fir_h3_f32_init>:
#define SCRATCH      (state)
#define IR_TABLE     ((const float **)(state + H3_SCRATCH_FLOATS))
#define PREV_TABLE   ((float       **)(state + H3_SCRATCH_FLOATS + H3_SEGMENTS))

    self->ir_ffts      = IR_TABLE;
    self->prev_ffts    = PREV_TABLE;
 8001568:	f242 0204 	movw	r2, #8196	@ 0x2004
    self->ir_ffts      = IR_TABLE;
 800156c:	f501 5300 	add.w	r3, r1, #8192	@ 0x2000
    self->prev_ffts    = PREV_TABLE;
 8001570:	440a      	add	r2, r1
void fir_h3_f32_init(fir_t *self, float *state){
 8001572:	b430      	push	{r4, r5}
    self->numSegments  = H3_SEGMENTS;
    self->curr_fftidx  = 0;
 8001574:	2400      	movs	r4, #0
    self->numSegments  = H3_SEGMENTS;
 8001576:	2501      	movs	r5, #1
    self->ir_ffts      = IR_TABLE;
 8001578:	e9c0 3200 	strd	r3, r2, [r0]
    self->prev_fftidx  = 0;

    for (uint32_t i = 0; i < H3_SEGMENTS; ++i) {
        IR_TABLE [i] = &_H3_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 800157c:	4a03      	ldr	r2, [pc, #12]	@ (800158c <fir_h3_f32_init+0x24>)
    self->numSegments  = H3_SEGMENTS;
 800157e:	6105      	str	r5, [r0, #16]
    self->curr_fftidx  = 0;
 8001580:	e9c0 4402 	strd	r4, r4, [r0, #8]
        PREV_TABLE[i] = &SCRATCH      [i * FFT_SIZE];   /* overlap buf*/
    }

}
 8001584:	bc30      	pop	{r4, r5}
        IR_TABLE [i] = &_H3_IR_FFT_ALL[i * FFT_SIZE];  /* spectrums  */
 8001586:	e9c3 2100 	strd	r2, r1, [r3]
}
 800158a:	4770      	bx	lr
 800158c:	0806ed40 	.word	0x0806ed40

08001590 <fir_h3_f32_init_clean>:

void fir_h3_f32_init_clean(fir_t *self)
{

    for (uint32_t i = 0; i < H3_SEGMENTS; ++i) {
    	self->ir_ffts [i]   = NULL;
 8001590:	2300      	movs	r3, #0
    	self->prev_ffts [i] = NULL;
 8001592:	e9d0 1200 	ldrd	r1, r2, [r0]
    	self->ir_ffts [i]   = NULL;
 8001596:	600b      	str	r3, [r1, #0]
    	self->prev_ffts [i] = NULL;
 8001598:	6013      	str	r3, [r2, #0]
    }

}
 800159a:	4770      	bx	lr

0800159c <dctm_pool_init>:
 * Clears the dtcm_static_pool to zero and resets the head pointer.
 * Must be called once at system startup before any DTCM allocations.
 */
void dctm_pool_init()
{
    dtcm_pool_head = 0u;
 800159c:	2100      	movs	r1, #0
 800159e:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <dctm_pool_init+0x10>)
    memset(dtcm_static_pool, 0, DTCM_STATIC_POOL_SIZE);
 80015a0:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <dctm_pool_init+0x14>)
    dtcm_pool_head = 0u;
 80015a6:	6019      	str	r1, [r3, #0]
    memset(dtcm_static_pool, 0, DTCM_STATIC_POOL_SIZE);
 80015a8:	f00a b9e3 	b.w	800b972 <memset>
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000020 	.word	0x20000020

080015b4 <static_pool_init>:
 *
 * Clears the static_pool to zero and resets the head pointer.
 * Must be called once at system startup before any SRAM allocations.
 */
void static_pool_init()
{
 80015b4:	b510      	push	{r4, lr}
    pool_head = 0u;
 80015b6:	2400      	movs	r4, #0
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <static_pool_init+0x24>)
    memset(static_pool, 0, STATIC_POOL_SIZE);
 80015ba:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <static_pool_init+0x28>)
 80015bc:	4621      	mov	r1, r4
 80015be:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <static_pool_init+0x2c>)
    pool_head = 0u;
 80015c0:	601c      	str	r4, [r3, #0]
    memset(static_pool, 0, STATIC_POOL_SIZE);
 80015c2:	f00a f9d6 	bl	800b972 <memset>

    pool_head_ram_d2 = 0u;
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <static_pool_init+0x30>)
    memset(static_pool_ram_d2, 0, STATIC_POOL_SIZE_RAM_D2);
 80015c8:	4621      	mov	r1, r4
 80015ca:	4a07      	ldr	r2, [pc, #28]	@ (80015e8 <static_pool_init+0x34>)
    pool_head_ram_d2 = 0u;
 80015cc:	601c      	str	r4, [r3, #0]
    memset(static_pool_ram_d2, 0, STATIC_POOL_SIZE_RAM_D2);
 80015ce:	4807      	ldr	r0, [pc, #28]	@ (80015ec <static_pool_init+0x38>)
}
 80015d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset(static_pool_ram_d2, 0, STATIC_POOL_SIZE_RAM_D2);
 80015d4:	f00a b9cd 	b.w	800b972 <memset>
 80015d8:	240030a8 	.word	0x240030a8
 80015dc:	00068004 	.word	0x00068004
 80015e0:	240030ac 	.word	0x240030ac
 80015e4:	240030a4 	.word	0x240030a4
 80015e8:	00028004 	.word	0x00028004
 80015ec:	30000000 	.word	0x30000000

080015f0 <_memory_alloc_error_handler>:
 * Enters an infinite loop to halt execution; suitable
 * for catching in the debugger or watchdog reset.
 */
__weak void _memory_alloc_error_handler()
{
    while (1) {
 80015f0:	e7fe      	b.n	80015f0 <_memory_alloc_error_handler>
 80015f2:	bf00      	nop

080015f4 <_dctm_static_mem_alloc>:
{
 80015f4:	b570      	push	{r4, r5, r6, lr}
    size_t off = align_up(dtcm_pool_head, align);
 80015f6:	4e0a      	ldr	r6, [pc, #40]	@ (8001620 <_dctm_static_mem_alloc+0x2c>)
    return (x + (align - 1u)) & ~(align - 1u);
 80015f8:	424b      	negs	r3, r1
 80015fa:	6834      	ldr	r4, [r6, #0]
 80015fc:	3c01      	subs	r4, #1
 80015fe:	440c      	add	r4, r1
 8001600:	401c      	ands	r4, r3
    if (off + size > DTCM_STATIC_POOL_SIZE) {
 8001602:	1905      	adds	r5, r0, r4
 8001604:	f5b5 4f70 	cmp.w	r5, #61440	@ 0xf000
 8001608:	d803      	bhi.n	8001612 <_dctm_static_mem_alloc+0x1e>
    return &dtcm_static_pool[off];
 800160a:	4806      	ldr	r0, [pc, #24]	@ (8001624 <_dctm_static_mem_alloc+0x30>)
    dtcm_pool_head = off + size;
 800160c:	6035      	str	r5, [r6, #0]
}
 800160e:	4420      	add	r0, r4
 8001610:	bd70      	pop	{r4, r5, r6, pc}
        _memory_alloc_error_handler();
 8001612:	f7ff ffed 	bl	80015f0 <_memory_alloc_error_handler>
    return &dtcm_static_pool[off];
 8001616:	4803      	ldr	r0, [pc, #12]	@ (8001624 <_dctm_static_mem_alloc+0x30>)
    dtcm_pool_head = off + size;
 8001618:	6035      	str	r5, [r6, #0]
}
 800161a:	4420      	add	r0, r4
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	bf00      	nop
 8001620:	20000000 	.word	0x20000000
 8001624:	20000020 	.word	0x20000020

08001628 <_static_mem_alloc>:
{
 8001628:	b570      	push	{r4, r5, r6, lr}
    size_t off = align_up(pool_head, align);
 800162a:	4e0a      	ldr	r6, [pc, #40]	@ (8001654 <_static_mem_alloc+0x2c>)
    return (x + (align - 1u)) & ~(align - 1u);
 800162c:	424b      	negs	r3, r1
 800162e:	6834      	ldr	r4, [r6, #0]
 8001630:	3c01      	subs	r4, #1
 8001632:	440c      	add	r4, r1
 8001634:	401c      	ands	r4, r3
    if (off + size > STATIC_POOL_SIZE) {
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <_static_mem_alloc+0x30>)
 8001638:	1905      	adds	r5, r0, r4
 800163a:	429d      	cmp	r5, r3
 800163c:	d803      	bhi.n	8001646 <_static_mem_alloc+0x1e>
    return &static_pool[off];
 800163e:	4807      	ldr	r0, [pc, #28]	@ (800165c <_static_mem_alloc+0x34>)
    pool_head = off + size;
 8001640:	6035      	str	r5, [r6, #0]
}
 8001642:	4420      	add	r0, r4
 8001644:	bd70      	pop	{r4, r5, r6, pc}
        _memory_alloc_error_handler();
 8001646:	f7ff ffd3 	bl	80015f0 <_memory_alloc_error_handler>
    return &static_pool[off];
 800164a:	4804      	ldr	r0, [pc, #16]	@ (800165c <_static_mem_alloc+0x34>)
    pool_head = off + size;
 800164c:	6035      	str	r5, [r6, #0]
}
 800164e:	4420      	add	r0, r4
 8001650:	bd70      	pop	{r4, r5, r6, pc}
 8001652:	bf00      	nop
 8001654:	240030a8 	.word	0x240030a8
 8001658:	00068004 	.word	0x00068004
 800165c:	240030ac 	.word	0x240030ac

08001660 <_static_mem_alloc_ram_d2>:
{
 8001660:	b570      	push	{r4, r5, r6, lr}
    size_t off = align_up(pool_head_ram_d2, align);
 8001662:	4e0a      	ldr	r6, [pc, #40]	@ (800168c <_static_mem_alloc_ram_d2+0x2c>)
    return (x + (align - 1u)) & ~(align - 1u);
 8001664:	424b      	negs	r3, r1
 8001666:	6834      	ldr	r4, [r6, #0]
 8001668:	3c01      	subs	r4, #1
 800166a:	440c      	add	r4, r1
 800166c:	401c      	ands	r4, r3
    if (off + size > STATIC_POOL_SIZE_RAM_D2) {
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <_static_mem_alloc_ram_d2+0x30>)
 8001670:	1905      	adds	r5, r0, r4
 8001672:	429d      	cmp	r5, r3
 8001674:	d803      	bhi.n	800167e <_static_mem_alloc_ram_d2+0x1e>
    return &static_pool_ram_d2[off];
 8001676:	4807      	ldr	r0, [pc, #28]	@ (8001694 <_static_mem_alloc_ram_d2+0x34>)
    pool_head_ram_d2 = off + size;
 8001678:	6035      	str	r5, [r6, #0]
}
 800167a:	4420      	add	r0, r4
 800167c:	bd70      	pop	{r4, r5, r6, pc}
        _memory_alloc_error_handler();
 800167e:	f7ff ffb7 	bl	80015f0 <_memory_alloc_error_handler>
    return &static_pool_ram_d2[off];
 8001682:	4804      	ldr	r0, [pc, #16]	@ (8001694 <_static_mem_alloc_ram_d2+0x34>)
    pool_head_ram_d2 = off + size;
 8001684:	6035      	str	r5, [r6, #0]
}
 8001686:	4420      	add	r0, r4
 8001688:	bd70      	pop	{r4, r5, r6, pc}
 800168a:	bf00      	nop
 800168c:	240030a4 	.word	0x240030a4
 8001690:	00028004 	.word	0x00028004
 8001694:	30000000 	.word	0x30000000

08001698 <readUART>:
#include <ctype.h>

/* Example implementation: splits node definitions on ';' */
void readUART(dataLink* link, char c)
{
    if (c == '\n' || c == '\r') {
 8001698:	290a      	cmp	r1, #10
{
 800169a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800169e:	4605      	mov	r5, r0
 80016a0:	b085      	sub	sp, #20
        link->commandBuffer[link->commandIndex] = '\0';
 80016a2:	f890 30db 	ldrb.w	r3, [r0, #219]	@ 0xdb
    if (c == '\n' || c == '\r') {
 80016a6:	d00c      	beq.n	80016c2 <readUART+0x2a>
 80016a8:	290d      	cmp	r1, #13
 80016aa:	d00a      	beq.n	80016c2 <readUART+0x2a>
            }
        }
        return;
    }

    if (link->commandIndex < sizeof(link->commandBuffer) - 1)
 80016ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80016ae:	d805      	bhi.n	80016bc <readUART+0x24>
    {
        link->commandBuffer[link->commandIndex++] = c;
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	4403      	add	r3, r0
 80016b4:	f880 20db 	strb.w	r2, [r0, #219]	@ 0xdb
 80016b8:	f883 105b 	strb.w	r1, [r3, #91]	@ 0x5b
    }

    //link->needsRefresh = 1;
}
 80016bc:	b005      	add	sp, #20
 80016be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset(params, 255, sizeof params);   /* all 255, not just first */
 80016c2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
        link->commandBuffer[link->commandIndex] = '\0';
 80016c6:	2100      	movs	r1, #0
 80016c8:	442b      	add	r3, r5
        while ((token = strtok_r(rest, ";", &rest))) {
 80016ca:	f8df 823c 	ldr.w	r8, [pc, #572]	@ 8001908 <readUART+0x270>
        char* rest = link->commandBuffer;
 80016ce:	f105 005b 	add.w	r0, r5, #91	@ 0x5b
        memset(params, 255, sizeof params);   /* all 255, not just first */
 80016d2:	f8ad 2000 	strh.w	r2, [sp]
        link->commandBuffer[link->commandIndex] = '\0';
 80016d6:	f883 105b 	strb.w	r1, [r3, #91]	@ 0x5b
        uint8_t effectId = 5;
 80016da:	f04f 0905 	mov.w	r9, #5
        memset(inputs, 255, sizeof inputs);
 80016de:	f8ad 2004 	strh.w	r2, [sp, #4]
        uint8_t nodeId = 255;
 80016e2:	27ff      	movs	r7, #255	@ 0xff
        link->commandIndex = 0;
 80016e4:	f885 10db 	strb.w	r1, [r5, #219]	@ 0xdb
        while ((token = strtok_r(rest, ";", &rest))) {
 80016e8:	4641      	mov	r1, r8
        memset(inputs, 255, sizeof inputs);
 80016ea:	f88d 2006 	strb.w	r2, [sp, #6]
        memset(params, 255, sizeof params);   /* all 255, not just first */
 80016ee:	f88d 2002 	strb.w	r2, [sp, #2]
        while ((token = strtok_r(rest, ";", &rest))) {
 80016f2:	aa02      	add	r2, sp, #8
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 80016f4:	4e7c      	ldr	r6, [pc, #496]	@ (80018e8 <readUART+0x250>)
        char* rest = link->commandBuffer;
 80016f6:	9002      	str	r0, [sp, #8]
        while ((token = strtok_r(rest, ";", &rest))) {
 80016f8:	f00a f96b 	bl	800b9d2 <strtok_r>
 80016fc:	b1f8      	cbz	r0, 800173e <readUART+0xa6>
            if (token[0] == 'N')
 80016fe:	7803      	ldrb	r3, [r0, #0]
 8001700:	3b45      	subs	r3, #69	@ 0x45
 8001702:	2b0f      	cmp	r3, #15
 8001704:	d814      	bhi.n	8001730 <readUART+0x98>
 8001706:	e8df f003 	tbb	[pc, r3]
 800170a:	13ae      	.short	0x13ae
 800170c:	137f1313 	.word	0x137f1313
 8001710:	08131313 	.word	0x08131313
 8001714:	13135613 	.word	0x13135613
 8001718:	5113      	.short	0x5113
            	if(atoi(&token[1]) == 0)
 800171a:	1c44      	adds	r4, r0, #1
 800171c:	4620      	mov	r0, r4
 800171e:	f009 fef5 	bl	800b50c <atoi>
 8001722:	2800      	cmp	r0, #0
 8001724:	f000 80a6 	beq.w	8001874 <readUART+0x1dc>
                nodeId = atoi(&token[1]);
 8001728:	4620      	mov	r0, r4
 800172a:	f009 feef 	bl	800b50c <atoi>
 800172e:	b2c7      	uxtb	r7, r0
        while ((token = strtok_r(rest, ";", &rest))) {
 8001730:	9802      	ldr	r0, [sp, #8]
 8001732:	aa02      	add	r2, sp, #8
 8001734:	4641      	mov	r1, r8
 8001736:	f00a f94c 	bl	800b9d2 <strtok_r>
 800173a:	2800      	cmp	r0, #0
 800173c:	d1df      	bne.n	80016fe <readUART+0x66>
        if (nodeId < MAX_NODES)
 800173e:	2f09      	cmp	r7, #9
 8001740:	d8bc      	bhi.n	80016bc <readUART+0x24>
            	n->params[i] = params[i];
 8001742:	4604      	mov	r4, r0
 8001744:	f89d 1000 	ldrb.w	r1, [sp]
 8001748:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
            	n->inputs[i] = inputs[i];
 800174c:	f89d 3004 	ldrb.w	r3, [sp, #4]
            	n->params[i] = params[i];
 8001750:	f361 0407 	bfi	r4, r1, #0, #8
 8001754:	f89d 1001 	ldrb.w	r1, [sp, #1]
            n->nodeId = nodeId;
 8001758:	54af      	strb	r7, [r5, r2]
            n->effectId = effectId;
 800175a:	442a      	add	r2, r5
            	n->params[i] = params[i];
 800175c:	f361 240f 	bfi	r4, r1, #8, #8
 8001760:	f89d 1002 	ldrb.w	r1, [sp, #2]
            	n->inputs[i] = inputs[i];
 8001764:	f89d 0005 	ldrb.w	r0, [sp, #5]
            	n->params[i] = params[i];
 8001768:	f361 4417 	bfi	r4, r1, #16, #8
 800176c:	00f9      	lsls	r1, r7, #3
            	n->inputs[i] = inputs[i];
 800176e:	71d0      	strb	r0, [r2, #7]
            	n->params[i] = params[i];
 8001770:	f363 641f 	bfi	r4, r3, #24, #8
            	if (inputs[i] != 255) inputCount++;
 8001774:	3bff      	subs	r3, #255	@ 0xff
            	n->inputs[i] = inputs[i];
 8001776:	4439      	add	r1, r7
            n->effectId = effectId;
 8001778:	f882 9001 	strb.w	r9, [r2, #1]
            	if (inputs[i] != 255) inputCount++;
 800177c:	bf18      	it	ne
 800177e:	2301      	movne	r3, #1
 8001780:	28ff      	cmp	r0, #255	@ 0xff
            	n->inputs[i] = inputs[i];
 8001782:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8001786:	4429      	add	r1, r5
            	if (inputs[i] != 255) inputCount++;
 8001788:	bf18      	it	ne
 800178a:	3301      	addne	r3, #1
            	n->params[i] = params[i];
 800178c:	f8c2 4003 	str.w	r4, [r2, #3]
            	if (inputs[i] != 255) inputCount++;
 8001790:	28ff      	cmp	r0, #255	@ 0xff
            	n->inputs[i] = inputs[i];
 8001792:	7208      	strb	r0, [r1, #8]
            	if (inputs[i] != 255) inputCount++;
 8001794:	d001      	beq.n	800179a <readUART+0x102>
 8001796:	3301      	adds	r3, #1
 8001798:	b2db      	uxtb	r3, r3
            n->numInputs = inputCount;
 800179a:	7093      	strb	r3, [r2, #2]
            if (nodeId >= link->nodeCount)
 800179c:	f895 305a 	ldrb.w	r3, [r5, #90]	@ 0x5a
 80017a0:	42bb      	cmp	r3, r7
 80017a2:	d88b      	bhi.n	80016bc <readUART+0x24>
            	link->nodeCount = nodeId + 1;
 80017a4:	3701      	adds	r7, #1
 80017a6:	f885 705a 	strb.w	r7, [r5, #90]	@ 0x5a
        return;
 80017aa:	e787      	b.n	80016bc <readUART+0x24>
        		link->needsRefresh = 1;
 80017ac:	2301      	movs	r3, #1
        while ((token = strtok_r(rest, ";", &rest))) {
 80017ae:	9802      	ldr	r0, [sp, #8]
        		link->needsRefresh = 1;
 80017b0:	f885 30e6 	strb.w	r3, [r5, #230]	@ 0xe6
 80017b4:	e7bd      	b.n	8001732 <readUART+0x9a>
                while (*p && i < NUM_PARAMETERS)
 80017b6:	7843      	ldrb	r3, [r0, #1]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0b9      	beq.n	8001730 <readUART+0x98>
                char* p = &token[1];
 80017bc:	1c44      	adds	r4, r0, #1
 80017be:	46eb      	mov	fp, sp
                uint8_t i = 0;
 80017c0:	f04f 0a00 	mov.w	sl, #0
                    params[i++] = atoi(p);
 80017c4:	4620      	mov	r0, r4
 80017c6:	f10a 0a01 	add.w	sl, sl, #1
 80017ca:	f009 fe9f 	bl	800b50c <atoi>
 80017ce:	f88b 0000 	strb.w	r0, [fp]
                    while (*p && *p != ',') p++;
 80017d2:	7823      	ldrb	r3, [r4, #0]
                    params[i++] = atoi(p);
 80017d4:	fa5f fa8a 	uxtb.w	sl, sl
                    while (*p && *p != ',') p++;
 80017d8:	1e1a      	subs	r2, r3, #0
 80017da:	bf18      	it	ne
 80017dc:	2201      	movne	r2, #1
 80017de:	2b2c      	cmp	r3, #44	@ 0x2c
 80017e0:	d008      	beq.n	80017f4 <readUART+0x15c>
 80017e2:	2a00      	cmp	r2, #0
 80017e4:	d076      	beq.n	80018d4 <readUART+0x23c>
 80017e6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80017ea:	1e1a      	subs	r2, r3, #0
 80017ec:	bf18      	it	ne
 80017ee:	2201      	movne	r2, #1
 80017f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80017f2:	d1f6      	bne.n	80017e2 <readUART+0x14a>
                while (*p && i < NUM_PARAMETERS)
 80017f4:	7863      	ldrb	r3, [r4, #1]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d09a      	beq.n	8001730 <readUART+0x98>
 80017fa:	f1ba 0f03 	cmp.w	sl, #3
 80017fe:	d097      	beq.n	8001730 <readUART+0x98>
                    	p++;
 8001800:	3401      	adds	r4, #1
 8001802:	f10b 0b01 	add.w	fp, fp, #1
 8001806:	e7dd      	b.n	80017c4 <readUART+0x12c>
                char* p = &token[1];
 8001808:	1c44      	adds	r4, r0, #1
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 800180a:	f04f 0a00 	mov.w	sl, #0
                char* p = &token[1];
 800180e:	9403      	str	r4, [sp, #12]
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 8001810:	7823      	ldrb	r3, [r4, #0]
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 8001812:	220a      	movs	r2, #10
 8001814:	a903      	add	r1, sp, #12
 8001816:	4620      	mov	r0, r4
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 8001818:	2b00      	cmp	r3, #0
 800181a:	d089      	beq.n	8001730 <readUART+0x98>
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 800181c:	5cf3      	ldrb	r3, [r6, r3]
 800181e:	075b      	lsls	r3, r3, #29
 8001820:	d40b      	bmi.n	800183a <readUART+0x1a2>
 8001822:	3401      	adds	r4, #1
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 8001824:	220a      	movs	r2, #10
 8001826:	a903      	add	r1, sp, #12
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 8001828:	9403      	str	r4, [sp, #12]
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 800182a:	4620      	mov	r0, r4
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 800182c:	7823      	ldrb	r3, [r4, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f43f af7e 	beq.w	8001730 <readUART+0x98>
					if (!isdigit((unsigned char)*p)) { p++; continue; }
 8001834:	5cf3      	ldrb	r3, [r6, r3]
 8001836:	075b      	lsls	r3, r3, #29
 8001838:	d5f3      	bpl.n	8001822 <readUART+0x18a>
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 800183a:	f009 ff8b 	bl	800b754 <strtoul>
 800183e:	f10a 0310 	add.w	r3, sl, #16
					if (*p == ',') p++;
 8001842:	9c03      	ldr	r4, [sp, #12]
					inputs[i++] = (uint8_t) strtoul(p, &p, 10);
 8001844:	eb0d 0203 	add.w	r2, sp, r3
 8001848:	f10a 0301 	add.w	r3, sl, #1
 800184c:	f802 0c0c 	strb.w	r0, [r2, #-12]
 8001850:	b2db      	uxtb	r3, r3
					if (*p == ',') p++;
 8001852:	7822      	ldrb	r2, [r4, #0]
 8001854:	469a      	mov	sl, r3
 8001856:	2a2c      	cmp	r2, #44	@ 0x2c
 8001858:	d101      	bne.n	800185e <readUART+0x1c6>
 800185a:	3401      	adds	r4, #1
 800185c:	9403      	str	r4, [sp, #12]
                for (uint8_t i = 0; i < MAX_INPUTS && *p; )
 800185e:	2b03      	cmp	r3, #3
 8001860:	d1d6      	bne.n	8001810 <readUART+0x178>
        while ((token = strtok_r(rest, ";", &rest))) {
 8001862:	9802      	ldr	r0, [sp, #8]
 8001864:	e765      	b.n	8001732 <readUART+0x9a>
                effectId = atoi(&token[1]);
 8001866:	3001      	adds	r0, #1
 8001868:	f009 fe50 	bl	800b50c <atoi>
 800186c:	fa5f f980 	uxtb.w	r9, r0
        while ((token = strtok_r(rest, ";", &rest))) {
 8001870:	9802      	ldr	r0, [sp, #8]
 8001872:	e75e      	b.n	8001732 <readUART+0x9a>
    link->needsRefresh = 0;

    for (int i = 0; i < MAX_NODES; i++)
    {

        link->nodes[i].nodeId = 255;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
    link->nodeCount = 0;
 8001878:	f885 005a 	strb.w	r0, [r5, #90]	@ 0x5a
        link->nodes[i].nodeId = 255;
 800187c:	606b      	str	r3, [r5, #4]
 800187e:	60eb      	str	r3, [r5, #12]
 8001880:	61ab      	str	r3, [r5, #24]
 8001882:	622b      	str	r3, [r5, #32]
 8001884:	62ab      	str	r3, [r5, #40]	@ 0x28
 8001886:	632b      	str	r3, [r5, #48]	@ 0x30
 8001888:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800188a:	646b      	str	r3, [r5, #68]	@ 0x44
 800188c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800188e:	656b      	str	r3, [r5, #84]	@ 0x54
            link->nodes[i].params[j] = 255;
        }

        for (int j = 0; j < MAX_INPUTS; j++)
        {
            link->nodes[i].inputs[j] = 255;
 8001890:	f8a5 3058 	strh.w	r3, [r5, #88]	@ 0x58
        link->nodes[i].nodeId = 255;
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <readUART+0x254>)
 8001896:	602b      	str	r3, [r5, #0]
 8001898:	626b      	str	r3, [r5, #36]	@ 0x24
 800189a:	64ab      	str	r3, [r5, #72]	@ 0x48
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <readUART+0x258>)
 800189e:	60ab      	str	r3, [r5, #8]
 80018a0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80018a2:	652b      	str	r3, [r5, #80]	@ 0x50
 80018a4:	f06f 437a 	mvn.w	r3, #4194304000	@ 0xfa000000
 80018a8:	612b      	str	r3, [r5, #16]
 80018aa:	636b      	str	r3, [r5, #52]	@ 0x34
 80018ac:	f06f 03ff 	mvn.w	r3, #255	@ 0xff
 80018b0:	616b      	str	r3, [r5, #20]
 80018b2:	63ab      	str	r3, [r5, #56]	@ 0x38
 80018b4:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <readUART+0x25c>)
 80018b6:	61eb      	str	r3, [r5, #28]
 80018b8:	642b      	str	r3, [r5, #64]	@ 0x40
    link->readUART = readUART;
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <readUART+0x260>)
 80018bc:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    link->commandIndex = 0;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <readUART+0x264>)
 80018c2:	f8c5 30db 	str.w	r3, [r5, #219]	@ 0xdb
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <readUART+0x268>)
 80018c8:	f8c5 30df 	str.w	r3, [r5, #223]	@ 0xdf
 80018cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <readUART+0x26c>)
 80018ce:	f8c5 30e3 	str.w	r3, [r5, #227]	@ 0xe3
    for (int i = 0; i < MAX_NODES; i++)
 80018d2:	e729      	b.n	8001728 <readUART+0x90>
                    if (*p == ',')
 80018d4:	2b2c      	cmp	r3, #44	@ 0x2c
 80018d6:	d08d      	beq.n	80017f4 <readUART+0x15c>
                while (*p && i < NUM_PARAMETERS)
 80018d8:	f1ba 0f03 	cmp.w	sl, #3
 80018dc:	f43f af28 	beq.w	8001730 <readUART+0x98>
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d18e      	bne.n	8001802 <readUART+0x16a>
 80018e4:	e724      	b.n	8001730 <readUART+0x98>
 80018e6:	bf00      	nop
 80018e8:	080842bb 	.word	0x080842bb
 80018ec:	ff0005ff 	.word	0xff0005ff
 80018f0:	0005ffff 	.word	0x0005ffff
 80018f4:	ffff0005 	.word	0xffff0005
 80018f8:	08001699 	.word	0x08001699
 80018fc:	02010000 	.word	0x02010000
 8001900:	06050403 	.word	0x06050403
 8001904:	00090807 	.word	0x00090807
 8001908:	08070d40 	.word	0x08070d40

0800190c <topoSort>:
{
 800190c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t indeg[MAX_NODES] = {0};
 800190e:	2600      	movs	r6, #0
{
 8001910:	b0a3      	sub	sp, #140	@ 0x8c
 8001912:	4604      	mov	r4, r0
    uint8_t adj[MAX_NODES][MAX_NODES] = {0};
 8001914:	2264      	movs	r2, #100	@ 0x64
 8001916:	a809      	add	r0, sp, #36	@ 0x24
 8001918:	4631      	mov	r1, r6
    uint8_t indeg[MAX_NODES] = {0};
 800191a:	f8ad 6008 	strh.w	r6, [sp, #8]
 800191e:	e9cd 6600 	strd	r6, r6, [sp]
    uint8_t adj[MAX_NODES][MAX_NODES] = {0};
 8001922:	f00a f826 	bl	800b972 <memset>
    for (uint8_t i = 0; i < link->nodeCount; ++i) {
 8001926:	f894 005a 	ldrb.w	r0, [r4, #90]	@ 0x5a
    uint8_t adjCnt[MAX_NODES] = {0};
 800192a:	f8ad 6014 	strh.w	r6, [sp, #20]
 800192e:	e9cd 6603 	strd	r6, r6, [sp, #12]
    for (uint8_t i = 0; i < link->nodeCount; ++i) {
 8001932:	2800      	cmp	r0, #0
 8001934:	f000 828f 	beq.w	8001e56 <topoSort+0x54a>
 8001938:	4622      	mov	r2, r4
 800193a:	466d      	mov	r5, sp
 800193c:	4633      	mov	r3, r6
        for (uint8_t j = 0; j < n->numInputs; ++j) {
 800193e:	7896      	ldrb	r6, [r2, #2]
 8001940:	fa5f fc83 	uxtb.w	ip, r3
 8001944:	2e00      	cmp	r6, #0
 8001946:	d04e      	beq.n	80019e6 <topoSort+0xda>
            uint8_t src = n->inputs[j];
 8001948:	7991      	ldrb	r1, [r2, #6]
            if (src != 254 && src != 255 && src < link->nodeCount) {
 800194a:	4288      	cmp	r0, r1
 800194c:	d915      	bls.n	800197a <topoSort+0x6e>
 800194e:	29fd      	cmp	r1, #253	@ 0xfd
 8001950:	d813      	bhi.n	800197a <topoSort+0x6e>
                indeg[i]++;
 8001952:	782f      	ldrb	r7, [r5, #0]
 8001954:	3701      	adds	r7, #1
 8001956:	702f      	strb	r7, [r5, #0]
                adj[src][adjCnt[src]++] = i;
 8001958:	f101 0788 	add.w	r7, r1, #136	@ 0x88
 800195c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001960:	eb0d 0e07 	add.w	lr, sp, r7
 8001964:	af22      	add	r7, sp, #136	@ 0x88
 8001966:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 800196a:	f81e 7c7c 	ldrb.w	r7, [lr, #-124]
 800196e:	4439      	add	r1, r7
 8001970:	3701      	adds	r7, #1
 8001972:	f801 cc64 	strb.w	ip, [r1, #-100]
 8001976:	f80e 7c7c 	strb.w	r7, [lr, #-124]
        for (uint8_t j = 0; j < n->numInputs; ++j) {
 800197a:	2e01      	cmp	r6, #1
 800197c:	d033      	beq.n	80019e6 <topoSort+0xda>
            uint8_t src = n->inputs[j];
 800197e:	79d1      	ldrb	r1, [r2, #7]
            if (src != 254 && src != 255 && src < link->nodeCount) {
 8001980:	4288      	cmp	r0, r1
 8001982:	d915      	bls.n	80019b0 <topoSort+0xa4>
 8001984:	29fd      	cmp	r1, #253	@ 0xfd
 8001986:	d813      	bhi.n	80019b0 <topoSort+0xa4>
                indeg[i]++;
 8001988:	782f      	ldrb	r7, [r5, #0]
 800198a:	3701      	adds	r7, #1
 800198c:	702f      	strb	r7, [r5, #0]
                adj[src][adjCnt[src]++] = i;
 800198e:	f101 0788 	add.w	r7, r1, #136	@ 0x88
 8001992:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001996:	eb0d 0e07 	add.w	lr, sp, r7
 800199a:	af22      	add	r7, sp, #136	@ 0x88
 800199c:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 80019a0:	f81e 7c7c 	ldrb.w	r7, [lr, #-124]
 80019a4:	4439      	add	r1, r7
 80019a6:	3701      	adds	r7, #1
 80019a8:	f801 cc64 	strb.w	ip, [r1, #-100]
 80019ac:	f80e 7c7c 	strb.w	r7, [lr, #-124]
        for (uint8_t j = 0; j < n->numInputs; ++j) {
 80019b0:	2e02      	cmp	r6, #2
 80019b2:	d018      	beq.n	80019e6 <topoSort+0xda>
            uint8_t src = n->inputs[j];
 80019b4:	7a11      	ldrb	r1, [r2, #8]
            if (src != 254 && src != 255 && src < link->nodeCount) {
 80019b6:	4281      	cmp	r1, r0
 80019b8:	d215      	bcs.n	80019e6 <topoSort+0xda>
 80019ba:	29fd      	cmp	r1, #253	@ 0xfd
 80019bc:	d813      	bhi.n	80019e6 <topoSort+0xda>
                indeg[i]++;
 80019be:	782e      	ldrb	r6, [r5, #0]
 80019c0:	3601      	adds	r6, #1
 80019c2:	702e      	strb	r6, [r5, #0]
                adj[src][adjCnt[src]++] = i;
 80019c4:	f101 0688 	add.w	r6, r1, #136	@ 0x88
 80019c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80019cc:	eb0d 0706 	add.w	r7, sp, r6
 80019d0:	ae22      	add	r6, sp, #136	@ 0x88
 80019d2:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 80019d6:	f817 6c7c 	ldrb.w	r6, [r7, #-124]
 80019da:	4431      	add	r1, r6
 80019dc:	3601      	adds	r6, #1
 80019de:	f801 cc64 	strb.w	ip, [r1, #-100]
 80019e2:	f807 6c7c 	strb.w	r6, [r7, #-124]
    for (uint8_t i = 0; i < link->nodeCount; ++i) {
 80019e6:	3301      	adds	r3, #1
 80019e8:	3209      	adds	r2, #9
 80019ea:	3501      	adds	r5, #1
 80019ec:	4283      	cmp	r3, r0
 80019ee:	d1a6      	bne.n	800193e <topoSort+0x32>
        if (indeg[i] == 0) Q[t++] = i;
 80019f0:	f89d 2000 	ldrb.w	r2, [sp]
 80019f4:	2a00      	cmp	r2, #0
 80019f6:	f040 817f 	bne.w	8001cf8 <topoSort+0x3ec>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 80019fa:	2b01      	cmp	r3, #1
        if (indeg[i] == 0) Q[t++] = i;
 80019fc:	f88d 2018 	strb.w	r2, [sp, #24]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001a00:	f000 8232 	beq.w	8001e68 <topoSort+0x55c>
        if (indeg[i] == 0) Q[t++] = i;
 8001a04:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	f040 8189 	bne.w	8001d20 <topoSort+0x414>
 8001a0e:	2201      	movs	r2, #1
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001a10:	2b02      	cmp	r3, #2
        if (indeg[i] == 0) Q[t++] = i;
 8001a12:	f88d 2019 	strb.w	r2, [sp, #25]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001a16:	d046      	beq.n	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001a18:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	f000 8221 	beq.w	8001e64 <topoSort+0x558>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	f000 8222 	beq.w	8001e6c <topoSort+0x560>
        if (indeg[i] == 0) Q[t++] = i;
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8197 	beq.w	8001d62 <topoSort+0x456>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001a34:	2804      	cmp	r0, #4
 8001a36:	f000 820a 	beq.w	8001e4e <topoSort+0x542>
        if (indeg[i] == 0) Q[t++] = i;
 8001a3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 81b9 	beq.w	8001db6 <topoSort+0x4aa>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001a44:	2805      	cmp	r0, #5
 8001a46:	f000 8202 	beq.w	8001e4e <topoSort+0x542>
        if (indeg[i] == 0) Q[t++] = i;
 8001a4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 819d 	beq.w	8001d8e <topoSort+0x482>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001a54:	2806      	cmp	r0, #6
 8001a56:	f000 81fa 	beq.w	8001e4e <topoSort+0x542>
        if (indeg[i] == 0) Q[t++] = i;
 8001a5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 81c0 	beq.w	8001de4 <topoSort+0x4d8>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001a64:	2807      	cmp	r0, #7
 8001a66:	f000 81f2 	beq.w	8001e4e <topoSort+0x542>
        if (indeg[i] == 0) Q[t++] = i;
 8001a6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 81cb 	beq.w	8001e0a <topoSort+0x4fe>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001a74:	2808      	cmp	r0, #8
 8001a76:	f000 81ea 	beq.w	8001e4e <topoSort+0x542>
        if (indeg[i] == 0) Q[t++] = i;
 8001a7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 81d5 	beq.w	8001e2e <topoSort+0x522>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001a84:	280a      	cmp	r0, #10
 8001a86:	4613      	mov	r3, r2
 8001a88:	f040 81e2 	bne.w	8001e50 <topoSort+0x544>
        if (indeg[i] == 0) Q[t++] = i;
 8001a8c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	f040 81dd 	bne.w	8001e50 <topoSort+0x544>
 8001a96:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	2109      	movs	r1, #9
 8001a9e:	446a      	add	r2, sp
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f802 1c70 	strb.w	r1, [r2, #-112]
    while (h < t) {
 8001aa6:	ad06      	add	r5, sp, #24
 8001aa8:	34db      	adds	r4, #219	@ 0xdb
    uint8_t Q[MAX_NODES], h = 0, t = 0, out = 0;
 8001aaa:	f04f 0e00 	mov.w	lr, #0
        uint8_t curr = Q[h++];
 8001aae:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001ab2:	f10e 0e01 	add.w	lr, lr, #1
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001ab6:	f102 0188 	add.w	r1, r2, #136	@ 0x88
        uint8_t curr = Q[h++];
 8001aba:	fa5f fe8e 	uxtb.w	lr, lr
        link->processOrder[out++] = curr;
 8001abe:	f804 2f01 	strb.w	r2, [r4, #1]!
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001ac2:	4469      	add	r1, sp
 8001ac4:	f811 1c7c 	ldrb.w	r1, [r1, #-124]
 8001ac8:	2900      	cmp	r1, #0
 8001aca:	f000 810f 	beq.w	8001cec <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001ace:	ae22      	add	r6, sp, #136	@ 0x88
 8001ad0:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8001ad4:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8001ad8:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001adc:	f810 7c64 	ldrb.w	r7, [r0, #-100]
            if (--indeg[child] == 0)
 8001ae0:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001ae4:	eb0d 0600 	add.w	r6, sp, r0
 8001ae8:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001aec:	3801      	subs	r0, #1
 8001aee:	b2c0      	uxtb	r0, r0
 8001af0:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001af4:	b930      	cbnz	r0, 8001b04 <topoSort+0x1f8>
                Q[t++] = child;
 8001af6:	1c5e      	adds	r6, r3, #1
 8001af8:	3388      	adds	r3, #136	@ 0x88
 8001afa:	eb0d 0003 	add.w	r0, sp, r3
 8001afe:	b2f3      	uxtb	r3, r6
 8001b00:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001b04:	2901      	cmp	r1, #1
 8001b06:	f000 80f1 	beq.w	8001cec <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001b0a:	ae22      	add	r6, sp, #136	@ 0x88
 8001b0c:	eb0c 0002 	add.w	r0, ip, r2
 8001b10:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001b14:	f810 7c63 	ldrb.w	r7, [r0, #-99]
            if (--indeg[child] == 0)
 8001b18:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001b1c:	eb0d 0600 	add.w	r6, sp, r0
 8001b20:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001b24:	3801      	subs	r0, #1
 8001b26:	b2c0      	uxtb	r0, r0
 8001b28:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001b2c:	b930      	cbnz	r0, 8001b3c <topoSort+0x230>
                Q[t++] = child;
 8001b2e:	1c5e      	adds	r6, r3, #1
 8001b30:	3388      	adds	r3, #136	@ 0x88
 8001b32:	eb0d 0003 	add.w	r0, sp, r3
 8001b36:	b2f3      	uxtb	r3, r6
 8001b38:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001b3c:	2902      	cmp	r1, #2
 8001b3e:	f000 80d5 	beq.w	8001cec <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001b42:	ae22      	add	r6, sp, #136	@ 0x88
 8001b44:	eb0c 0002 	add.w	r0, ip, r2
 8001b48:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001b4c:	f810 7c62 	ldrb.w	r7, [r0, #-98]
            if (--indeg[child] == 0)
 8001b50:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001b54:	eb0d 0600 	add.w	r6, sp, r0
 8001b58:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001b5c:	3801      	subs	r0, #1
 8001b5e:	b2c0      	uxtb	r0, r0
 8001b60:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001b64:	b930      	cbnz	r0, 8001b74 <topoSort+0x268>
                Q[t++] = child;
 8001b66:	1c5e      	adds	r6, r3, #1
 8001b68:	3388      	adds	r3, #136	@ 0x88
 8001b6a:	eb0d 0003 	add.w	r0, sp, r3
 8001b6e:	b2f3      	uxtb	r3, r6
 8001b70:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001b74:	2903      	cmp	r1, #3
 8001b76:	f000 80b9 	beq.w	8001cec <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001b7a:	ae22      	add	r6, sp, #136	@ 0x88
 8001b7c:	eb0c 0002 	add.w	r0, ip, r2
 8001b80:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001b84:	f810 7c61 	ldrb.w	r7, [r0, #-97]
            if (--indeg[child] == 0)
 8001b88:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001b8c:	eb0d 0600 	add.w	r6, sp, r0
 8001b90:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001b94:	3801      	subs	r0, #1
 8001b96:	b2c0      	uxtb	r0, r0
 8001b98:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001b9c:	b930      	cbnz	r0, 8001bac <topoSort+0x2a0>
                Q[t++] = child;
 8001b9e:	1c5e      	adds	r6, r3, #1
 8001ba0:	3388      	adds	r3, #136	@ 0x88
 8001ba2:	eb0d 0003 	add.w	r0, sp, r3
 8001ba6:	b2f3      	uxtb	r3, r6
 8001ba8:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001bac:	2904      	cmp	r1, #4
 8001bae:	f000 809d 	beq.w	8001cec <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001bb2:	ae22      	add	r6, sp, #136	@ 0x88
 8001bb4:	eb0c 0002 	add.w	r0, ip, r2
 8001bb8:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001bbc:	f810 7c60 	ldrb.w	r7, [r0, #-96]
            if (--indeg[child] == 0)
 8001bc0:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001bc4:	eb0d 0600 	add.w	r6, sp, r0
 8001bc8:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001bcc:	3801      	subs	r0, #1
 8001bce:	b2c0      	uxtb	r0, r0
 8001bd0:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001bd4:	b930      	cbnz	r0, 8001be4 <topoSort+0x2d8>
                Q[t++] = child;
 8001bd6:	1c5e      	adds	r6, r3, #1
 8001bd8:	3388      	adds	r3, #136	@ 0x88
 8001bda:	eb0d 0003 	add.w	r0, sp, r3
 8001bde:	b2f3      	uxtb	r3, r6
 8001be0:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001be4:	2905      	cmp	r1, #5
 8001be6:	f000 8081 	beq.w	8001cec <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001bea:	ae22      	add	r6, sp, #136	@ 0x88
 8001bec:	eb0c 0002 	add.w	r0, ip, r2
 8001bf0:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001bf4:	f810 7c5f 	ldrb.w	r7, [r0, #-95]
            if (--indeg[child] == 0)
 8001bf8:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001bfc:	eb0d 0600 	add.w	r6, sp, r0
 8001c00:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001c04:	3801      	subs	r0, #1
 8001c06:	b2c0      	uxtb	r0, r0
 8001c08:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001c0c:	b930      	cbnz	r0, 8001c1c <topoSort+0x310>
                Q[t++] = child;
 8001c0e:	1c5e      	adds	r6, r3, #1
 8001c10:	3388      	adds	r3, #136	@ 0x88
 8001c12:	eb0d 0003 	add.w	r0, sp, r3
 8001c16:	b2f3      	uxtb	r3, r6
 8001c18:	f800 7c70 	strb.w	r7, [r0, #-112]
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001c1c:	2906      	cmp	r1, #6
 8001c1e:	d065      	beq.n	8001cec <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001c20:	ae22      	add	r6, sp, #136	@ 0x88
 8001c22:	eb0c 0002 	add.w	r0, ip, r2
 8001c26:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001c2a:	f810 7c5e 	ldrb.w	r7, [r0, #-94]
            if (--indeg[child] == 0)
 8001c2e:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001c32:	eb0d 0600 	add.w	r6, sp, r0
 8001c36:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001c3a:	3801      	subs	r0, #1
 8001c3c:	b2c0      	uxtb	r0, r0
 8001c3e:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001c42:	b928      	cbnz	r0, 8001c50 <topoSort+0x344>
                Q[t++] = child;
 8001c44:	1c58      	adds	r0, r3, #1
 8001c46:	3388      	adds	r3, #136	@ 0x88
 8001c48:	446b      	add	r3, sp
 8001c4a:	f803 7c70 	strb.w	r7, [r3, #-112]
 8001c4e:	b2c3      	uxtb	r3, r0
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001c50:	2907      	cmp	r1, #7
 8001c52:	d04b      	beq.n	8001cec <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001c54:	ae22      	add	r6, sp, #136	@ 0x88
 8001c56:	eb0c 0002 	add.w	r0, ip, r2
 8001c5a:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001c5e:	f810 7c5d 	ldrb.w	r7, [r0, #-93]
            if (--indeg[child] == 0)
 8001c62:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001c66:	eb0d 0600 	add.w	r6, sp, r0
 8001c6a:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001c6e:	3801      	subs	r0, #1
 8001c70:	b2c0      	uxtb	r0, r0
 8001c72:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001c76:	b928      	cbnz	r0, 8001c84 <topoSort+0x378>
                Q[t++] = child;
 8001c78:	1c58      	adds	r0, r3, #1
 8001c7a:	3388      	adds	r3, #136	@ 0x88
 8001c7c:	446b      	add	r3, sp
 8001c7e:	f803 7c70 	strb.w	r7, [r3, #-112]
 8001c82:	b2c3      	uxtb	r3, r0
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001c84:	2908      	cmp	r1, #8
 8001c86:	d031      	beq.n	8001cec <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001c88:	ae22      	add	r6, sp, #136	@ 0x88
 8001c8a:	eb0c 0002 	add.w	r0, ip, r2
 8001c8e:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 8001c92:	f810 7c5c 	ldrb.w	r7, [r0, #-92]
            if (--indeg[child] == 0)
 8001c96:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001c9a:	eb0d 0600 	add.w	r6, sp, r0
 8001c9e:	f816 0c88 	ldrb.w	r0, [r6, #-136]
 8001ca2:	3801      	subs	r0, #1
 8001ca4:	b2c0      	uxtb	r0, r0
 8001ca6:	f806 0c88 	strb.w	r0, [r6, #-136]
 8001caa:	b928      	cbnz	r0, 8001cb8 <topoSort+0x3ac>
                Q[t++] = child;
 8001cac:	1c58      	adds	r0, r3, #1
 8001cae:	3388      	adds	r3, #136	@ 0x88
 8001cb0:	446b      	add	r3, sp
 8001cb2:	f803 7c70 	strb.w	r7, [r3, #-112]
 8001cb6:	b2c3      	uxtb	r3, r0
        for (uint8_t k = 0; k < adjCnt[curr]; ++k) {
 8001cb8:	2909      	cmp	r1, #9
 8001cba:	d017      	beq.n	8001cec <topoSort+0x3e0>
            uint8_t child = adj[curr][k];
 8001cbc:	4494      	add	ip, r2
 8001cbe:	aa22      	add	r2, sp, #136	@ 0x88
 8001cc0:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8001cc4:	f81c 0c5b 	ldrb.w	r0, [ip, #-91]
            if (--indeg[child] == 0)
 8001cc8:	f100 0288 	add.w	r2, r0, #136	@ 0x88
 8001ccc:	eb0d 0102 	add.w	r1, sp, r2
 8001cd0:	f811 2c88 	ldrb.w	r2, [r1, #-136]
 8001cd4:	3a01      	subs	r2, #1
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f801 2c88 	strb.w	r2, [r1, #-136]
 8001cdc:	b932      	cbnz	r2, 8001cec <topoSort+0x3e0>
                Q[t++] = child;
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	3388      	adds	r3, #136	@ 0x88
 8001ce2:	eb0d 0203 	add.w	r2, sp, r3
 8001ce6:	b2cb      	uxtb	r3, r1
 8001ce8:	f802 0c70 	strb.w	r0, [r2, #-112]
    while (h < t) {
 8001cec:	459e      	cmp	lr, r3
 8001cee:	f4ff aede 	bcc.w	8001aae <topoSort+0x1a2>
    return out;
 8001cf2:	4670      	mov	r0, lr
}
 8001cf4:	b023      	add	sp, #140	@ 0x8c
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001cf8:	2801      	cmp	r0, #1
 8001cfa:	f000 80ac 	beq.w	8001e56 <topoSort+0x54a>
        if (indeg[i] == 0) Q[t++] = i;
 8001cfe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001d02:	b153      	cbz	r3, 8001d1a <topoSort+0x40e>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d04:	2802      	cmp	r0, #2
 8001d06:	f000 80a6 	beq.w	8001e56 <topoSort+0x54a>
        if (indeg[i] == 0) Q[t++] = i;
 8001d0a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001d0e:	b173      	cbz	r3, 8001d2e <topoSort+0x422>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d10:	2803      	cmp	r0, #3
 8001d12:	f000 80a0 	beq.w	8001e56 <topoSort+0x54a>
    uint8_t Q[MAX_NODES], h = 0, t = 0, out = 0;
 8001d16:	2200      	movs	r2, #0
 8001d18:	e687      	b.n	8001a2a <topoSort+0x11e>
        if (indeg[i] == 0) Q[t++] = i;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f88d 3018 	strb.w	r3, [sp, #24]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d20:	2802      	cmp	r0, #2
 8001d22:	f240 80a1 	bls.w	8001e68 <topoSort+0x55c>
        if (indeg[i] == 0) Q[t++] = i;
 8001d26:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001d2a:	b98b      	cbnz	r3, 8001d50 <topoSort+0x444>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	3388      	adds	r3, #136	@ 0x88
 8001d32:	2102      	movs	r1, #2
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d34:	2803      	cmp	r0, #3
        if (indeg[i] == 0) Q[t++] = i;
 8001d36:	446b      	add	r3, sp
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f803 1c70 	strb.w	r1, [r3, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d3e:	d905      	bls.n	8001d4c <topoSort+0x440>
        if (indeg[i] == 0) Q[t++] = i;
 8001d40:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001d44:	b16b      	cbz	r3, 8001d62 <topoSort+0x456>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d46:	2804      	cmp	r0, #4
 8001d48:	f47f ae77 	bne.w	8001a3a <topoSort+0x12e>
        if (indeg[i] == 0) Q[t++] = i;
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	e6aa      	b.n	8001aa6 <topoSort+0x19a>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d50:	2803      	cmp	r0, #3
 8001d52:	f000 8089 	beq.w	8001e68 <topoSort+0x55c>
        if (indeg[i] == 0) Q[t++] = i;
 8001d56:	f89d 3003 	ldrb.w	r3, [sp, #3]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d5a:	2201      	movs	r2, #1
        if (indeg[i] == 0) Q[t++] = i;
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f47f ae69 	bne.w	8001a34 <topoSort+0x128>
 8001d62:	1c53      	adds	r3, r2, #1
 8001d64:	3288      	adds	r2, #136	@ 0x88
 8001d66:	2103      	movs	r1, #3
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d68:	2804      	cmp	r0, #4
        if (indeg[i] == 0) Q[t++] = i;
 8001d6a:	446a      	add	r2, sp
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d72:	f67f ae98 	bls.w	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001d76:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001d7a:	b1da      	cbz	r2, 8001db4 <topoSort+0x4a8>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d7c:	2805      	cmp	r0, #5
 8001d7e:	f43f ae92 	beq.w	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001d82:	461a      	mov	r2, r3
 8001d84:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f47f ae63 	bne.w	8001a54 <topoSort+0x148>
 8001d8e:	1c53      	adds	r3, r2, #1
 8001d90:	3288      	adds	r2, #136	@ 0x88
 8001d92:	2105      	movs	r1, #5
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d94:	2806      	cmp	r0, #6
        if (indeg[i] == 0) Q[t++] = i;
 8001d96:	446a      	add	r2, sp
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001d9e:	f67f ae82 	bls.w	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001da2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001da6:	2a00      	cmp	r2, #0
 8001da8:	d05a      	beq.n	8001e60 <topoSort+0x554>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001daa:	2807      	cmp	r0, #7
 8001dac:	f43f ae7b 	beq.w	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001db0:	461a      	mov	r2, r3
 8001db2:	e65a      	b.n	8001a6a <topoSort+0x15e>
 8001db4:	461a      	mov	r2, r3
 8001db6:	1c53      	adds	r3, r2, #1
 8001db8:	3288      	adds	r2, #136	@ 0x88
 8001dba:	2104      	movs	r1, #4
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001dbc:	2805      	cmp	r0, #5
        if (indeg[i] == 0) Q[t++] = i;
 8001dbe:	446a      	add	r2, sp
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001dc6:	f67f ae6e 	bls.w	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001dca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001dce:	2a00      	cmp	r2, #0
 8001dd0:	d044      	beq.n	8001e5c <topoSort+0x550>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001dd2:	2806      	cmp	r0, #6
 8001dd4:	f43f ae67 	beq.w	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f47f ae40 	bne.w	8001a64 <topoSort+0x158>
 8001de4:	1c53      	adds	r3, r2, #1
 8001de6:	3288      	adds	r2, #136	@ 0x88
 8001de8:	2106      	movs	r1, #6
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001dea:	2807      	cmp	r0, #7
        if (indeg[i] == 0) Q[t++] = i;
 8001dec:	446a      	add	r2, sp
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001df4:	f67f ae57 	bls.w	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001df8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001dfc:	b122      	cbz	r2, 8001e08 <topoSort+0x4fc>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001dfe:	2808      	cmp	r0, #8
 8001e00:	f43f ae51 	beq.w	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001e04:	461a      	mov	r2, r3
 8001e06:	e638      	b.n	8001a7a <topoSort+0x16e>
 8001e08:	461a      	mov	r2, r3
 8001e0a:	1c53      	adds	r3, r2, #1
 8001e0c:	3288      	adds	r2, #136	@ 0x88
 8001e0e:	2107      	movs	r1, #7
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001e10:	2808      	cmp	r0, #8
        if (indeg[i] == 0) Q[t++] = i;
 8001e12:	446a      	add	r2, sp
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001e1a:	f67f ae44 	bls.w	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001e1e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001e22:	b11a      	cbz	r2, 8001e2c <topoSort+0x520>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001e24:	280a      	cmp	r0, #10
 8001e26:	f43f ae31 	beq.w	8001a8c <topoSort+0x180>
 8001e2a:	e63c      	b.n	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	1c53      	adds	r3, r2, #1
 8001e30:	3288      	adds	r2, #136	@ 0x88
 8001e32:	2108      	movs	r1, #8
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001e34:	280a      	cmp	r0, #10
        if (indeg[i] == 0) Q[t++] = i;
 8001e36:	446a      	add	r2, sp
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f802 1c70 	strb.w	r1, [r2, #-112]
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001e3e:	f47f ae32 	bne.w	8001aa6 <topoSort+0x19a>
        if (indeg[i] == 0) Q[t++] = i;
 8001e42:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	f43f ae25 	beq.w	8001a96 <topoSort+0x18a>
 8001e4c:	e62b      	b.n	8001aa6 <topoSort+0x19a>
    for (uint8_t i = 0; i < link->nodeCount; ++i)
 8001e4e:	4613      	mov	r3, r2
    while (h < t) {
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f47f ae28 	bne.w	8001aa6 <topoSort+0x19a>
                Q[t++] = child;
 8001e56:	2000      	movs	r0, #0
}
 8001e58:	b023      	add	sp, #140	@ 0x8c
 8001e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (indeg[i] == 0) Q[t++] = i;
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	e796      	b.n	8001d8e <topoSort+0x482>
 8001e60:	461a      	mov	r2, r3
 8001e62:	e7bf      	b.n	8001de4 <topoSort+0x4d8>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e762      	b.n	8001d2e <topoSort+0x422>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e61c      	b.n	8001aa6 <topoSort+0x19a>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e61a      	b.n	8001aa6 <topoSort+0x19a>

08001e70 <initDataLink>:
        link->nodes[i].nodeId = 255;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	4919      	ldr	r1, [pc, #100]	@ (8001edc <initDataLink+0x6c>)
 8001e76:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee0 <initDataLink+0x70>)
    link->nodeCount = 0;
 8001e78:	f04f 0c00 	mov.w	ip, #0
{
 8001e7c:	b410      	push	{r4}
        link->nodes[i].nodeId = 255;
 8001e7e:	f06f 447a 	mvn.w	r4, #4194304000	@ 0xfa000000
 8001e82:	6183      	str	r3, [r0, #24]
 8001e84:	6303      	str	r3, [r0, #48]	@ 0x30
 8001e86:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8001e88:	6543      	str	r3, [r0, #84]	@ 0x54
            link->nodes[i].inputs[j] = 255;
 8001e8a:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58
        link->nodes[i].nodeId = 255;
 8001e8e:	6104      	str	r4, [r0, #16]
 8001e90:	6344      	str	r4, [r0, #52]	@ 0x34
    link->readUART = readUART;
 8001e92:	4c14      	ldr	r4, [pc, #80]	@ (8001ee4 <initDataLink+0x74>)
    link->nodeCount = 0;
 8001e94:	f880 c05a 	strb.w	ip, [r0, #90]	@ 0x5a
    link->readUART = readUART;
 8001e98:	f8c0 40e8 	str.w	r4, [r0, #232]	@ 0xe8
        }

    }
}
 8001e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
        link->nodes[i].nodeId = 255;
 8001ea0:	e9c0 1300 	strd	r1, r3, [r0]
 8001ea4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8001ea8:	e9c0 3108 	strd	r3, r1, [r0, #32]
 8001eac:	e9c0 320a 	strd	r3, r2, [r0, #40]	@ 0x28
 8001eb0:	e9c0 3111 	strd	r3, r1, [r0, #68]	@ 0x44
 8001eb4:	e9c0 3213 	strd	r3, r2, [r0, #76]	@ 0x4c
 8001eb8:	f06f 02ff 	mvn.w	r2, #255	@ 0xff
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <initDataLink+0x78>)
    link->commandIndex = 0;
 8001ebe:	490b      	ldr	r1, [pc, #44]	@ (8001eec <initDataLink+0x7c>)
        link->nodes[i].nodeId = 255;
 8001ec0:	6142      	str	r2, [r0, #20]
 8001ec2:	61c3      	str	r3, [r0, #28]
 8001ec4:	6382      	str	r2, [r0, #56]	@ 0x38
 8001ec6:	6403      	str	r3, [r0, #64]	@ 0x40
    link->commandIndex = 0;
 8001ec8:	4a09      	ldr	r2, [pc, #36]	@ (8001ef0 <initDataLink+0x80>)
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <initDataLink+0x84>)
 8001ecc:	f8c0 10db 	str.w	r1, [r0, #219]	@ 0xdb
 8001ed0:	f8c0 20df 	str.w	r2, [r0, #223]	@ 0xdf
 8001ed4:	f8c0 30e3 	str.w	r3, [r0, #227]	@ 0xe3
}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	ff0005ff 	.word	0xff0005ff
 8001ee0:	0005ffff 	.word	0x0005ffff
 8001ee4:	08001699 	.word	0x08001699
 8001ee8:	ffff0005 	.word	0xffff0005
 8001eec:	02010000 	.word	0x02010000
 8001ef0:	06050403 	.word	0x06050403
 8001ef4:	00090807 	.word	0x00090807

08001ef8 <HAL_ADC_ConvHalfCpltCallback>:
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001efa:	f003 021f 	and.w	r2, r3, #31
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001efe:	f3bf 8f4f 	dsb	sy
 8001f02:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001f06:	480a      	ldr	r0, [pc, #40]	@ (8001f30 <HAL_ADC_ConvHalfCpltCallback+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8001f08:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001f0a:	f8c0 325c 	str.w	r3, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001f0e:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8001f10:	1aca      	subs	r2, r1, r3
 8001f12:	2a00      	cmp	r2, #0
 8001f14:	dcf9      	bgt.n	8001f0a <HAL_ADC_ConvHalfCpltCallback+0x12>
 8001f16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f1a:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[0…BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)adcInput,
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcHalfComplete(&apipe, adcInput);
 8001f1e:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001f20:	4902      	ldr	r1, [pc, #8]	@ (8001f2c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001f22:	6983      	ldr	r3, [r0, #24]
 8001f24:	f5a0 4060 	sub.w	r0, r0, #57344	@ 0xe000
 8001f28:	4718      	bx	r3
 8001f2a:	bf00      	nop
 8001f2c:	2406c0b0 	.word	0x2406c0b0
 8001f30:	e000ed00 	.word	0xe000ed00
 8001f34:	3800e17c 	.word	0x3800e17c

08001f38 <HAL_ADC_ConvCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8001f38:	490d      	ldr	r1, [pc, #52]	@ (8001f70 <HAL_ADC_ConvCpltCallback+0x38>)
 8001f3a:	f001 021f 	and.w	r2, r1, #31
 8001f3e:	f502 6300 	add.w	r3, r2, #2048	@ 0x800
  __ASM volatile ("dsb 0xF":::"memory");
 8001f42:	f3bf 8f4f 	dsb	sy
 8001f46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001f4a:	480a      	ldr	r0, [pc, #40]	@ (8001f74 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001f4c:	4411      	add	r1, r2
 8001f4e:	1aca      	subs	r2, r1, r3
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001f50:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 8001f52:	2b00      	cmp	r3, #0
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001f54:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
      } while ( op_size > 0 );
 8001f58:	dcf9      	bgt.n	8001f4e <HAL_ADC_ConvCpltCallback+0x16>
 8001f5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f5e:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[BUFFER_SIZE…2*BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)&adcInput[BUFFER_SIZE],
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcComplete(&apipe, adcInput);
 8001f62:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <HAL_ADC_ConvCpltCallback+0x40>)
 8001f64:	4905      	ldr	r1, [pc, #20]	@ (8001f7c <HAL_ADC_ConvCpltCallback+0x44>)
 8001f66:	69c3      	ldr	r3, [r0, #28]
 8001f68:	f5a0 4060 	sub.w	r0, r0, #57344	@ 0xe000
 8001f6c:	4718      	bx	r3
 8001f6e:	bf00      	nop
 8001f70:	2406c8b0 	.word	0x2406c8b0
 8001f74:	e000ed00 	.word	0xe000ed00
 8001f78:	3800e17c 	.word	0x3800e17c
 8001f7c:	2406c0b0 	.word	0x2406c0b0

08001f80 <HAL_UART_RxCpltCallback>:
volatile unsigned long now = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

	if (huart == &huart2)
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x48>)
 8001f82:	4283      	cmp	r3, r0
 8001f84:	d000      	beq.n	8001f88 <HAL_UART_RxCpltCallback+0x8>
 8001f86:	4770      	bx	lr
	{
		char received = rxRecieve[0];
 8001f88:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <HAL_UART_RxCpltCallback+0x4c>)

		link.readUART(&link, received);
 8001f8a:	4811      	ldr	r0, [pc, #68]	@ (8001fd0 <HAL_UART_RxCpltCallback+0x50>)
{
 8001f8c:	b510      	push	{r4, lr}
		char received = rxRecieve[0];
 8001f8e:	781c      	ldrb	r4, [r3, #0]
		link.readUART(&link, received);
 8001f90:	f8d0 30e8 	ldr.w	r3, [r0, #232]	@ 0xe8
 8001f94:	4621      	mov	r1, r4
 8001f96:	4798      	blx	r3

		UARTrxBuffer[uartRxIndex++] = received;
 8001f98:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <HAL_UART_RxCpltCallback+0x54>)
 8001f9a:	490f      	ldr	r1, [pc, #60]	@ (8001fd8 <HAL_UART_RxCpltCallback+0x58>)
 8001f9c:	7810      	ldrb	r0, [r2, #0]
 8001f9e:	1c43      	adds	r3, r0, #1
 8001fa0:	540c      	strb	r4, [r1, r0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	7013      	strb	r3, [r2, #0]

		if (uartRxIndex >= UART_BUFFER_SIZE)
 8001fa6:	061b      	lsls	r3, r3, #24
 8001fa8:	d40a      	bmi.n	8001fc0 <HAL_UART_RxCpltCallback+0x40>
		{
			uartRxIndex = 0;
		}

		testCounter++;
 8001faa:	4c0c      	ldr	r4, [pc, #48]	@ (8001fdc <HAL_UART_RxCpltCallback+0x5c>)

		HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 8001fac:	2201      	movs	r2, #1
 8001fae:	4907      	ldr	r1, [pc, #28]	@ (8001fcc <HAL_UART_RxCpltCallback+0x4c>)
		testCounter++;
 8001fb0:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 8001fb2:	4805      	ldr	r0, [pc, #20]	@ (8001fc8 <HAL_UART_RxCpltCallback+0x48>)
		testCounter++;
 8001fb4:	4413      	add	r3, r2
 8001fb6:	6023      	str	r3, [r4, #0]
	}
}
 8001fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 8001fbc:	f006 be9a 	b.w	8008cf4 <HAL_UART_Receive_IT>
			uartRxIndex = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	7013      	strb	r3, [r2, #0]
 8001fc4:	e7f1      	b.n	8001faa <HAL_UART_RxCpltCallback+0x2a>
 8001fc6:	bf00      	nop
 8001fc8:	2406d318 	.word	0x2406d318
 8001fcc:	38000080 	.word	0x38000080
 8001fd0:	38000090 	.word	0x38000090
 8001fd4:	2406d0d4 	.word	0x2406d0d4
 8001fd8:	38000000 	.word	0x38000000
 8001fdc:	2406d0d8 	.word	0x2406d0d8

08001fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe0:	b530      	push	{r4, r5, lr}
 8001fe2:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe4:	224c      	movs	r2, #76	@ 0x4c
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	a80a      	add	r0, sp, #40	@ 0x28
 8001fea:	f009 fcc2 	bl	800b972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fee:	2220      	movs	r2, #32
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	a802      	add	r0, sp, #8
 8001ff4:	f009 fcbd 	bl	800b972 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f004 fa8b 	bl	8006514 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001ffe:	4a26      	ldr	r2, [pc, #152]	@ (8002098 <SystemClock_Config+0xb8>)
 8002000:	2100      	movs	r1, #0
 8002002:	4b26      	ldr	r3, [pc, #152]	@ (800209c <SystemClock_Config+0xbc>)
 8002004:	9101      	str	r1, [sp, #4]
 8002006:	6991      	ldr	r1, [r2, #24]
 8002008:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800200c:	6191      	str	r1, [r2, #24]
 800200e:	6991      	ldr	r1, [r2, #24]
 8002010:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 8002014:	9101      	str	r1, [sp, #4]
 8002016:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002018:	f041 0101 	orr.w	r1, r1, #1
 800201c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800201e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002028:	6993      	ldr	r3, [r2, #24]
 800202a:	0499      	lsls	r1, r3, #18
 800202c:	d5fc      	bpl.n	8002028 <SystemClock_Config+0x48>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800202e:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002030:	2200      	movs	r2, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002032:	2003      	movs	r0, #3
 8002034:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002038:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800203a:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800203c:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800203e:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002040:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002042:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002044:	951a      	str	r5, [sp, #104]	@ 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002046:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLR = 2;
 800204a:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800204e:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002050:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002052:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002054:	910d      	str	r1, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002056:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800205a:	2205      	movs	r2, #5
 800205c:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002060:	f004 faee 	bl	8006640 <HAL_RCC_OscConfig>
 8002064:	4603      	mov	r3, r0
 8002066:	b108      	cbz	r0, 800206c <SystemClock_Config+0x8c>
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800206a:	e7fe      	b.n	800206a <SystemClock_Config+0x8a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800206c:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800206e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002070:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002074:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002076:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002078:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800207a:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800207c:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800207e:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002080:	e9cd 5405 	strd	r5, r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002084:	e9cd 4307 	strd	r4, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002088:	f004 fe56 	bl	8006d38 <HAL_RCC_ClockConfig>
 800208c:	b108      	cbz	r0, 8002092 <SystemClock_Config+0xb2>
 800208e:	b672      	cpsid	i
  while (1)
 8002090:	e7fe      	b.n	8002090 <SystemClock_Config+0xb0>
}
 8002092:	b01f      	add	sp, #124	@ 0x7c
 8002094:	bd30      	pop	{r4, r5, pc}
 8002096:	bf00      	nop
 8002098:	58024800 	.word	0x58024800
 800209c:	58000400 	.word	0x58000400

080020a0 <PeriphCommonClock_Config>:
{
 80020a0:	b500      	push	{lr}
 80020a2:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a4:	22b8      	movs	r2, #184	@ 0xb8
 80020a6:	2100      	movs	r1, #0
 80020a8:	a802      	add	r0, sp, #8
 80020aa:	f009 fc62 	bl	800b972 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80020ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80020b2:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b4:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80020b6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ba:	f005 f917 	bl	80072ec <HAL_RCCEx_PeriphCLKConfig>
 80020be:	b108      	cbz	r0, 80020c4 <PeriphCommonClock_Config+0x24>
 80020c0:	b672      	cpsid	i
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <PeriphCommonClock_Config+0x22>
}
 80020c4:	b031      	add	sp, #196	@ 0xc4
 80020c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80020ca:	bf00      	nop
 80020cc:	0000      	movs	r0, r0
	...

080020d0 <main>:
{
 80020d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020d4:	2400      	movs	r4, #0
{
 80020d6:	ed2d 8b04 	vpush	{d8-d9}
 80020da:	b099      	sub	sp, #100	@ 0x64
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020dc:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 80020e0:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  HAL_MPU_Disable();
 80020e4:	f002 face 	bl	8004684 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80020e8:	f248 721f 	movw	r2, #34591	@ 0x871f
 80020ec:	f240 1301 	movw	r3, #257	@ 0x101
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020f0:	2101      	movs	r1, #1
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80020f2:	a80f      	add	r0, sp, #60	@ 0x3c
  MPU_InitStruct.BaseAddress = 0x0;
 80020f4:	9410      	str	r4, [sp, #64]	@ 0x40
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020f6:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80020fa:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80020fe:	f002 fadf 	bl	80046c0 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002102:	2004      	movs	r0, #4
 8002104:	f002 facc 	bl	80046a0 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002108:	4ab1      	ldr	r2, [pc, #708]	@ (80023d0 <main+0x300>)
 800210a:	6953      	ldr	r3, [r2, #20]
 800210c:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8002110:	d111      	bne.n	8002136 <main+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
 8002112:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002116:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800211a:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800211e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002122:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002126:	6953      	ldr	r3, [r2, #20]
 8002128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800212c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800212e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002132:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002136:	48a6      	ldr	r0, [pc, #664]	@ (80023d0 <main+0x300>)
 8002138:	6943      	ldr	r3, [r0, #20]
 800213a:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 800213e:	d124      	bne.n	800218a <main+0xba>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002140:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002144:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002148:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800214c:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002150:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002154:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8002158:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800215a:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800215e:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002160:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8002164:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002166:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	d1f8      	bne.n	8002160 <main+0x90>
    } while(sets-- != 0U);
 800216e:	3c20      	subs	r4, #32
 8002170:	f114 0f20 	cmn.w	r4, #32
 8002174:	d1f1      	bne.n	800215a <main+0x8a>
 8002176:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800217a:	6943      	ldr	r3, [r0, #20]
 800217c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002180:	6143      	str	r3, [r0, #20]
 8002182:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002186:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800218a:	4d92      	ldr	r5, [pc, #584]	@ (80023d4 <main+0x304>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	2400      	movs	r4, #0
  HAL_Init();
 800218e:	f001 fa8f 	bl	80036b0 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002192:	2601      	movs	r6, #1
  SystemClock_Config();
 8002194:	f7ff ff24 	bl	8001fe0 <SystemClock_Config>
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002198:	f44f 679c 	mov.w	r7, #1248	@ 0x4e0
  PeriphCommonClock_Config();
 800219c:	f7ff ff80 	bl	80020a0 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	9413      	str	r4, [sp, #76]	@ 0x4c
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80021a2:	4622      	mov	r2, r4
 80021a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021a8:	488b      	ldr	r0, [pc, #556]	@ (80023d8 <main+0x308>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021aa:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 80021ae:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80021b6:	f043 0304 	orr.w	r3, r3, #4
 80021ba:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80021be:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	9305      	str	r3, [sp, #20]
 80021c8:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ca:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80021ce:	f043 0320 	orr.w	r3, r3, #32
 80021d2:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80021d6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	9306      	str	r3, [sp, #24]
 80021e0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021e2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80021e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021ea:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80021ee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80021f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f6:	9307      	str	r3, [sp, #28]
 80021f8:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8002206:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	9308      	str	r3, [sp, #32]
 8002210:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002212:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8002216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800221a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800221e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8002222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002226:	9309      	str	r3, [sp, #36]	@ 0x24
 8002228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800222a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8002236:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002242:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8002246:	f043 0308 	orr.w	r3, r3, #8
 800224a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800224e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002258:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800225a:	f004 f957 	bl	800650c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 800225e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002262:	a90f      	add	r1, sp, #60	@ 0x3c
 8002264:	485c      	ldr	r0, [pc, #368]	@ (80023d8 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pin = LED_Pin;
 8002268:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226c:	9610      	str	r6, [sp, #64]	@ 0x40
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800226e:	f003 ff47 	bl	8006100 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002272:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002276:	4622      	mov	r2, r4
 8002278:	4621      	mov	r1, r4
 800227a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800227c:	4333      	orrs	r3, r6
 800227e:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8002282:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  hadc1.Instance = ADC1;
 8002286:	4d55      	ldr	r5, [pc, #340]	@ (80023dc <main+0x30c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002288:	4033      	ands	r3, r6
 800228a:	9304      	str	r3, [sp, #16]
 800228c:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800228e:	f002 f999 	bl	80045c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002292:	200b      	movs	r0, #11
 8002294:	f002 f9d2 	bl	800463c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002298:	4622      	mov	r2, r4
 800229a:	4621      	mov	r1, r4
 800229c:	200c      	movs	r0, #12
 800229e:	f002 f991 	bl	80045c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80022a2:	200c      	movs	r0, #12
 80022a4:	f002 f9ca 	bl	800463c <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 80022a8:	4b4d      	ldr	r3, [pc, #308]	@ (80023e0 <main+0x310>)
  ADC_MultiModeTypeDef multimode = {0};
 80022aa:	940c      	str	r4, [sp, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022ac:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 80022ae:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80022b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  ADC_ChannelConfTypeDef sConfig = {0};
 80022b4:	9415      	str	r4, [sp, #84]	@ 0x54
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80022b6:	606b      	str	r3, [r5, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80022b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022bc:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022be:	772c      	strb	r4, [r5, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 80022c0:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.NbrOfConversion = 1;
 80022c4:	61ae      	str	r6, [r5, #24]
  hadc1.Init.Oversampling.Ratio = 1;
 80022c6:	63ee      	str	r6, [r5, #60]	@ 0x3c
  ADC_ChannelConfTypeDef sConfig = {0};
 80022c8:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 80022cc:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
 80022d0:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022d4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80022d8:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  ADC_MultiModeTypeDef multimode = {0};
 80022dc:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80022e0:	e9c5 7309 	strd	r7, r3, [r5, #36]	@ 0x24
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80022e4:	2408      	movs	r4, #8
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80022e6:	2703      	movs	r7, #3
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80022e8:	612c      	str	r4, [r5, #16]
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80022ea:	62ef      	str	r7, [r5, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022ec:	f001 ff8e 	bl	800420c <HAL_ADC_Init>
 80022f0:	b108      	cbz	r0, 80022f6 <main+0x226>
  __ASM volatile ("cpsid i" : : : "memory");
 80022f2:	b672      	cpsid	i
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <main+0x224>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80022f6:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80022f8:	a90c      	add	r1, sp, #48	@ 0x30
 80022fa:	4628      	mov	r0, r5
 80022fc:	f002 f8ee 	bl	80044dc <HAL_ADCEx_MultiModeConfigChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	b108      	cbz	r0, 8002308 <main+0x238>
 8002304:	b672      	cpsid	i
  while (1)
 8002306:	e7fe      	b.n	8002306 <main+0x236>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002308:	4936      	ldr	r1, [pc, #216]	@ (80023e4 <main+0x314>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800230a:	4628      	mov	r0, r5
  sConfig.Offset = 0;
 800230c:	9314      	str	r3, [sp, #80]	@ 0x50
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800230e:	2505      	movs	r5, #5
  sConfig.OffsetSignedSaturation = DISABLE;
 8002310:	f88d 3055 	strb.w	r3, [sp, #85]	@ 0x55
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002314:	2306      	movs	r3, #6
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002316:	f04f 0804 	mov.w	r8, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800231a:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800231e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002322:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002324:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002328:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800232c:	f001 fb92 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8002330:	b108      	cbz	r0, 8002336 <main+0x266>
 8002332:	b672      	cpsid	i
  while (1)
 8002334:	e7fe      	b.n	8002334 <main+0x264>
  htim8.Instance = TIM8;
 8002336:	4d2c      	ldr	r5, [pc, #176]	@ (80023e8 <main+0x318>)
  htim8.Init.Prescaler = 50-1;
 8002338:	2331      	movs	r3, #49	@ 0x31
 800233a:	4a2c      	ldr	r2, [pc, #176]	@ (80023ec <main+0x31c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233c:	900e      	str	r0, [sp, #56]	@ 0x38
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233e:	60a8      	str	r0, [r5, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002340:	61a8      	str	r0, [r5, #24]
  htim8.Init.Prescaler = 50-1;
 8002342:	e9c5 2300 	strd	r2, r3, [r5]
  htim8.Init.Period = 100-1;
 8002346:	2363      	movs	r3, #99	@ 0x63
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002348:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 800234c:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002350:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  htim8.Init.RepetitionCounter = 0;
 8002354:	e9c5 0004 	strd	r0, r0, [r5, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002358:	4628      	mov	r0, r5
  htim8.Init.Period = 100-1;
 800235a:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800235c:	f006 fab4 	bl	80088c8 <HAL_TIM_Base_Init>
 8002360:	b108      	cbz	r0, 8002366 <main+0x296>
 8002362:	b672      	cpsid	i
  while (1)
 8002364:	e7fe      	b.n	8002364 <main+0x294>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002366:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800236a:	a90f      	add	r1, sp, #60	@ 0x3c
 800236c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236e:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002372:	f006 fb9d 	bl	8008ab0 <HAL_TIM_ConfigClockSource>
 8002376:	4603      	mov	r3, r0
 8002378:	b108      	cbz	r0, 800237e <main+0x2ae>
 800237a:	b672      	cpsid	i
  while (1)
 800237c:	e7fe      	b.n	800237c <main+0x2ac>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237e:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002382:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002384:	a90c      	add	r1, sp, #48	@ 0x30
 8002386:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002388:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800238a:	f006 fc59 	bl	8008c40 <HAL_TIMEx_MasterConfigSynchronization>
 800238e:	4601      	mov	r1, r0
 8002390:	b108      	cbz	r0, 8002396 <main+0x2c6>
 8002392:	b672      	cpsid	i
  while (1)
 8002394:	e7fe      	b.n	8002394 <main+0x2c4>
  DAC_ChannelConfTypeDef sConfig = {0};
 8002396:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 8002398:	4d15      	ldr	r5, [pc, #84]	@ (80023f0 <main+0x320>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800239a:	a80f      	add	r0, sp, #60	@ 0x3c
 800239c:	f009 fae9 	bl	800b972 <memset>
  hdac1.Instance = DAC1;
 80023a0:	4b14      	ldr	r3, [pc, #80]	@ (80023f4 <main+0x324>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80023a2:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 80023a4:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80023a6:	f002 f9bb 	bl	8004720 <HAL_DAC_Init>
 80023aa:	4602      	mov	r2, r0
 80023ac:	b108      	cbz	r0, 80023b2 <main+0x2e2>
 80023ae:	b672      	cpsid	i
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <main+0x2e0>
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80023b2:	231e      	movs	r3, #30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80023b4:	4628      	mov	r0, r5
 80023b6:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80023b8:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80023ba:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80023bc:	9213      	str	r2, [sp, #76]	@ 0x4c
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80023be:	e9cd 2611 	strd	r2, r6, [sp, #68]	@ 0x44
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80023c2:	f002 fa91 	bl	80048e8 <HAL_DAC_ConfigChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	b1b0      	cbz	r0, 80023f8 <main+0x328>
 80023ca:	b672      	cpsid	i
  while (1)
 80023cc:	e7fe      	b.n	80023cc <main+0x2fc>
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00
 80023d4:	58024400 	.word	0x58024400
 80023d8:	58020800 	.word	0x58020800
 80023dc:	2406d590 	.word	0x2406d590
 80023e0:	40022000 	.word	0x40022000
 80023e4:	43210000 	.word	0x43210000
 80023e8:	2406d440 	.word	0x2406d440
 80023ec:	40010400 	.word	0x40010400
 80023f0:	2406d504 	.word	0x2406d504
 80023f4:	40007400 	.word	0x40007400
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80023f8:	483c      	ldr	r0, [pc, #240]	@ (80024ec <main+0x41c>)
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80023fa:	2210      	movs	r2, #16
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80023fc:	a90f      	add	r1, sp, #60	@ 0x3c
  SdramTiming.SelfRefreshTime = 4;
 80023fe:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002402:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002404:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002406:	2240      	movs	r2, #64	@ 0x40
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8002408:	60c4      	str	r4, [r0, #12]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800240a:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800240e:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002410:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  SdramTiming.WriteRecoveryTime = 3;
 8002414:	9713      	str	r7, [sp, #76]	@ 0x4c
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8002416:	6284      	str	r4, [r0, #40]	@ 0x28
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002418:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800241c:	6182      	str	r2, [r0, #24]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800241e:	e9c0 3601 	strd	r3, r6, [r0, #4]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002422:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002426:	6203      	str	r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
 8002428:	2302      	movs	r3, #2
 800242a:	930f      	str	r3, [sp, #60]	@ 0x3c
  SdramTiming.RCDDelay = 2;
 800242c:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002430:	2307      	movs	r3, #7
 8002432:	9310      	str	r3, [sp, #64]	@ 0x40
  SdramTiming.RowCycleDelay = 7;
 8002434:	9312      	str	r3, [sp, #72]	@ 0x48
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002436:	4b2e      	ldr	r3, [pc, #184]	@ (80024f0 <main+0x420>)
 8002438:	6003      	str	r3, [r0, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800243a:	f006 fa1b 	bl	8008874 <HAL_SDRAM_Init>
 800243e:	4603      	mov	r3, r0
 8002440:	b108      	cbz	r0, 8002446 <main+0x376>
 8002442:	b672      	cpsid	i
  while (1)
 8002444:	e7fe      	b.n	8002444 <main+0x374>
  huart1.Instance = USART1;
 8002446:	482b      	ldr	r0, [pc, #172]	@ (80024f4 <main+0x424>)
  huart1.Init.BaudRate = 115200;
 8002448:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Instance = USART1;
 800244c:	4c2a      	ldr	r4, [pc, #168]	@ (80024f8 <main+0x428>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 800244e:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8002450:	6004      	str	r4, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002452:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002456:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800245e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002462:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002466:	f007 fce9 	bl	8009e3c <HAL_UART_Init>
 800246a:	b108      	cbz	r0, 8002470 <main+0x3a0>
 800246c:	b672      	cpsid	i
  while (1)
 800246e:	e7fe      	b.n	800246e <main+0x39e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002470:	2100      	movs	r1, #0
 8002472:	4820      	ldr	r0, [pc, #128]	@ (80024f4 <main+0x424>)
 8002474:	f007 fd3a 	bl	8009eec <HAL_UARTEx_SetTxFifoThreshold>
 8002478:	4601      	mov	r1, r0
 800247a:	b108      	cbz	r0, 8002480 <main+0x3b0>
 800247c:	b672      	cpsid	i
  while (1)
 800247e:	e7fe      	b.n	800247e <main+0x3ae>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002480:	481c      	ldr	r0, [pc, #112]	@ (80024f4 <main+0x424>)
 8002482:	f007 fd75 	bl	8009f70 <HAL_UARTEx_SetRxFifoThreshold>
 8002486:	b108      	cbz	r0, 800248c <main+0x3bc>
 8002488:	b672      	cpsid	i
  while (1)
 800248a:	e7fe      	b.n	800248a <main+0x3ba>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800248c:	4819      	ldr	r0, [pc, #100]	@ (80024f4 <main+0x424>)
 800248e:	f007 fd0f 	bl	8009eb0 <HAL_UARTEx_DisableFifoMode>
 8002492:	4603      	mov	r3, r0
 8002494:	b108      	cbz	r0, 800249a <main+0x3ca>
 8002496:	b672      	cpsid	i
  while (1)
 8002498:	e7fe      	b.n	8002498 <main+0x3c8>
  huart2.Instance = USART2;
 800249a:	4c18      	ldr	r4, [pc, #96]	@ (80024fc <main+0x42c>)
  huart2.Init.BaudRate = 115200;
 800249c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart2.Instance = USART2;
 80024a0:	4817      	ldr	r0, [pc, #92]	@ (8002500 <main+0x430>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024a2:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80024a4:	e884 000b 	stmia.w	r4, {r0, r1, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024a8:	4620      	mov	r0, r4
  huart2.Init.Parity = UART_PARITY_NONE;
 80024aa:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ae:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024b2:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b6:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024ba:	f007 fcbf 	bl	8009e3c <HAL_UART_Init>
 80024be:	4601      	mov	r1, r0
 80024c0:	b108      	cbz	r0, 80024c6 <main+0x3f6>
 80024c2:	b672      	cpsid	i
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <main+0x3f4>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c6:	4620      	mov	r0, r4
 80024c8:	f007 fd10 	bl	8009eec <HAL_UARTEx_SetTxFifoThreshold>
 80024cc:	4601      	mov	r1, r0
 80024ce:	b108      	cbz	r0, 80024d4 <main+0x404>
 80024d0:	b672      	cpsid	i
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <main+0x402>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d4:	4620      	mov	r0, r4
 80024d6:	f007 fd4b 	bl	8009f70 <HAL_UARTEx_SetRxFifoThreshold>
 80024da:	b108      	cbz	r0, 80024e0 <main+0x410>
 80024dc:	b672      	cpsid	i
  while (1)
 80024de:	e7fe      	b.n	80024de <main+0x40e>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80024e0:	4620      	mov	r0, r4
 80024e2:	f007 fce5 	bl	8009eb0 <HAL_UARTEx_DisableFifoMode>
 80024e6:	b168      	cbz	r0, 8002504 <main+0x434>
 80024e8:	b672      	cpsid	i
  while (1)
 80024ea:	e7fe      	b.n	80024ea <main+0x41a>
 80024ec:	2406d2e4 	.word	0x2406d2e4
 80024f0:	52004140 	.word	0x52004140
 80024f4:	2406d3ac 	.word	0x2406d3ac
 80024f8:	40011000 	.word	0x40011000
 80024fc:	2406d318 	.word	0x2406d318
 8002500:	40004400 	.word	0x40004400
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002504:	4bca      	ldr	r3, [pc, #808]	@ (8002830 <main+0x760>)
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	f412 3280 	ands.w	r2, r2, #65536	@ 0x10000
 800250c:	d123      	bne.n	8002556 <main+0x486>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800250e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002512:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002516:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800251a:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800251e:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002522:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8002526:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002528:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800252c:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800252e:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
      } while (ways-- != 0U);
 8002532:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002534:	f8c3 6260 	str.w	r6, [r3, #608]	@ 0x260
      } while (ways-- != 0U);
 8002538:	d2f9      	bcs.n	800252e <main+0x45e>
    } while(sets-- != 0U);
 800253a:	3a20      	subs	r2, #32
 800253c:	f112 0f20 	cmn.w	r2, #32
 8002540:	d1f2      	bne.n	8002528 <main+0x458>
 8002542:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800254c:	615a      	str	r2, [r3, #20]
 800254e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002552:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002556:	4bb6      	ldr	r3, [pc, #728]	@ (8002830 <main+0x760>)
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800255e:	d111      	bne.n	8002584 <main+0x4b4>
  __ASM volatile ("dsb 0xF":::"memory");
 8002560:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002564:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002568:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800256c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002570:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800257a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800257c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002580:	f3bf 8f6f 	isb	sy
  dctm_pool_init();
 8002584:	f7ff f80a 	bl	800159c <dctm_pool_init>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 8002588:	2400      	movs	r4, #0
  static_pool_init();
 800258a:	f7ff f813 	bl	80015b4 <static_pool_init>
  initDataLink(&link);
 800258e:	48a9      	ldr	r0, [pc, #676]	@ (8002834 <main+0x764>)
 8002590:	f7ff fc6e 	bl	8001e70 <initDataLink>
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 8002594:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002598:	48a7      	ldr	r0, [pc, #668]	@ (8002838 <main+0x768>)
 800259a:	f007 fded 	bl	800a178 <arm_rfft_fast_init_f32>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800259e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80025a2:	2100      	movs	r1, #0
 80025a4:	48a5      	ldr	r0, [pc, #660]	@ (800283c <main+0x76c>)
 80025a6:	f001 ff3d 	bl	8004424 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcInput, BUFFER_SIZE*2);
 80025aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025ae:	49a4      	ldr	r1, [pc, #656]	@ (8002840 <main+0x770>)
 80025b0:	48a2      	ldr	r0, [pc, #648]	@ (800283c <main+0x76c>)
 80025b2:	f001 fcb7 	bl	8003f24 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 80025b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025ba:	4aa2      	ldr	r2, [pc, #648]	@ (8002844 <main+0x774>)
 80025bc:	4621      	mov	r1, r4
 80025be:	48a2      	ldr	r0, [pc, #648]	@ (8002848 <main+0x778>)
 80025c0:	9400      	str	r4, [sp, #0]
 80025c2:	f002 f8c3 	bl	800474c <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 80025c6:	48a1      	ldr	r0, [pc, #644]	@ (800284c <main+0x77c>)
 80025c8:	f006 fa24 	bl	8008a14 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart2, rxRecieve, 1);
 80025cc:	2201      	movs	r2, #1
 80025ce:	49a0      	ldr	r1, [pc, #640]	@ (8002850 <main+0x780>)
 80025d0:	48a0      	ldr	r0, [pc, #640]	@ (8002854 <main+0x784>)
 80025d2:	f006 fb8f 	bl	8008cf4 <HAL_UART_Receive_IT>
  nodes[0] = &fx_handle_0;
 80025d6:	4da0      	ldr	r5, [pc, #640]	@ (8002858 <main+0x788>)
 80025d8:	4aa0      	ldr	r2, [pc, #640]	@ (800285c <main+0x78c>)
  nodes[1] = &fx_handle_1;
 80025da:	4ba1      	ldr	r3, [pc, #644]	@ (8002860 <main+0x790>)
  nodes[2] = &fx_handle_2;
 80025dc:	49a1      	ldr	r1, [pc, #644]	@ (8002864 <main+0x794>)
  nodes[1] = &fx_handle_1;
 80025de:	e9c5 2300 	strd	r2, r3, [r5]
  nodes[3] = &fx_handle_3;
 80025e2:	4ba1      	ldr	r3, [pc, #644]	@ (8002868 <main+0x798>)
  nodes[4] = &fx_handle_4;
 80025e4:	4aa1      	ldr	r2, [pc, #644]	@ (800286c <main+0x79c>)
  nodes[3] = &fx_handle_3;
 80025e6:	e9c5 1302 	strd	r1, r3, [r5, #8]
  nodes[5] = &fx_handle_5;
 80025ea:	4ba1      	ldr	r3, [pc, #644]	@ (8002870 <main+0x7a0>)
  nodes[6] = &fx_handle_6;
 80025ec:	49a1      	ldr	r1, [pc, #644]	@ (8002874 <main+0x7a4>)
  nodes[5] = &fx_handle_5;
 80025ee:	e9c5 2304 	strd	r2, r3, [r5, #16]
  nodes[7] = &fx_handle_7;
 80025f2:	4ba1      	ldr	r3, [pc, #644]	@ (8002878 <main+0x7a8>)
  nodes[8] = &fx_handle_8;
 80025f4:	4aa1      	ldr	r2, [pc, #644]	@ (800287c <main+0x7ac>)
  nodes[7] = &fx_handle_7;
 80025f6:	e9c5 1306 	strd	r1, r3, [r5, #24]
  nodes[9] = &fx_handle_9;
 80025fa:	4ba1      	ldr	r3, [pc, #644]	@ (8002880 <main+0x7b0>)
 80025fc:	e9c5 2308 	strd	r2, r3, [r5, #32]
  srand(HAL_GetTick());  // seed the PRNG
 8002600:	f001 f892 	bl	8003728 <HAL_GetTick>
 8002604:	f008 ff86 	bl	800b514 <srand>
  pipeInit(&apipe);
 8002608:	489e      	ldr	r0, [pc, #632]	@ (8002884 <main+0x7b4>)
 800260a:	f000 fc97 	bl	8002f3c <pipeInit>
	  nodes[i]->type = FX_NULL;
 800260e:	2205      	movs	r2, #5
  pipeInit(&apipe);
 8002610:	4629      	mov	r1, r5
 8002612:	462b      	mov	r3, r5
  for (int i = 0 ; i< MAX_NODES ; ++i)
 8002614:	3401      	adds	r4, #1
	  nodes[i]->type = FX_NULL;
 8002616:	f853 0b04 	ldr.w	r0, [r3], #4
  for (int i = 0 ; i< MAX_NODES ; ++i)
 800261a:	2c0a      	cmp	r4, #10
	  nodes[i]->type = FX_NULL;
 800261c:	7002      	strb	r2, [r0, #0]
  for (int i = 0 ; i< MAX_NODES ; ++i)
 800261e:	d1f9      	bne.n	8002614 <main+0x544>
  nodes[0]->type = FX_SUPRO;
 8002620:	680b      	ldr	r3, [r1, #0]
 8002622:	2002      	movs	r0, #2
  nodes[1]->type = FX_CABINET;
 8002624:	2201      	movs	r2, #1
  for (int i = 0 ; i< MAX_NODES ; ++i) { // i < MAX_NODES
 8002626:	2400      	movs	r4, #0
  nodes[0]->type = FX_SUPRO;
 8002628:	7018      	strb	r0, [r3, #0]
  nodes[1]->type = FX_CABINET;
 800262a:	684b      	ldr	r3, [r1, #4]
 800262c:	498a      	ldr	r1, [pc, #552]	@ (8002858 <main+0x788>)
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	460e      	mov	r6, r1
 8002632:	460f      	mov	r7, r1
		 fx_init[nodes[i]->type](nodes[i]);
 8002634:	f856 0b04 	ldr.w	r0, [r6], #4
  for (int i = 0 ; i< MAX_NODES ; ++i) { // i < MAX_NODES
 8002638:	3401      	adds	r4, #1
		 fx_init[nodes[i]->type](nodes[i]);
 800263a:	4a93      	ldr	r2, [pc, #588]	@ (8002888 <main+0x7b8>)
 800263c:	7803      	ldrb	r3, [r0, #0]
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	4798      	blx	r3
  for (int i = 0 ; i< MAX_NODES ; ++i) { // i < MAX_NODES
 8002644:	2c0a      	cmp	r4, #10
 8002646:	d1f5      	bne.n	8002634 <main+0x564>
  link.nodeCount = 2;
 8002648:	4c7a      	ldr	r4, [pc, #488]	@ (8002834 <main+0x764>)
 800264a:	2302      	movs	r3, #2
 800264c:	4e8f      	ldr	r6, [pc, #572]	@ (800288c <main+0x7bc>)
 800264e:	46ba      	mov	sl, r7
 8002650:	f884 305a 	strb.w	r3, [r4, #90]	@ 0x5a
  link.nodes[3].inputs[0] = 2;
 8002654:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  link.nodes[4].nodeId = 4;
 8002658:	f240 5304 	movw	r3, #1284	@ 0x504
 800265c:	f5a6 4920 	sub.w	r9, r6, #40960	@ 0xa000
 8002660:	f8df 8248 	ldr.w	r8, [pc, #584]	@ 80028ac <main+0x7dc>
 8002664:	84a3      	strh	r3, [r4, #36]	@ 0x24
  link.processOrder[4] = 4;
 8002666:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
  link.nodes[0].numInputs = 1;
 800266a:	2301      	movs	r3, #1
 800266c:	70a3      	strb	r3, [r4, #2]
  link.nodes[1].numInputs = 1;
 800266e:	72e3      	strb	r3, [r4, #11]
  link.nodes[2].numInputs = 1;
 8002670:	7523      	strb	r3, [r4, #20]
  link.nodes[2].inputs[0] = 1;
 8002672:	7623      	strb	r3, [r4, #24]
  link.nodes[3].numInputs = 1;
 8002674:	7763      	strb	r3, [r4, #29]
  link.nodes[4].numInputs = 1;
 8002676:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
  link.nodes[5].numInputs = 1;
 800267a:	f884 302f 	strb.w	r3, [r4, #47]	@ 0x2f
  link.nodes[1].inputs[0] = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	73e3      	strb	r3, [r4, #15]
  link.needsRefresh = 0;
 8002682:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
  link.nodes[0].nodeId = 0;
 8002686:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800268a:	8023      	strh	r3, [r4, #0]
  link.nodes[0].inputs[0] = 254;
 800268c:	23fe      	movs	r3, #254	@ 0xfe
 800268e:	71a3      	strb	r3, [r4, #6]
  link.nodes[1].nodeId = 1;
 8002690:	f240 1301 	movw	r3, #257	@ 0x101
 8002694:	f8a4 3009 	strh.w	r3, [r4, #9]
  link.nodes[2].nodeId = 2;
 8002698:	f240 5302 	movw	r3, #1282	@ 0x502
 800269c:	8263      	strh	r3, [r4, #18]
  link.nodes[3].nodeId = 3;
 800269e:	f240 5303 	movw	r3, #1283	@ 0x503
 80026a2:	f8a4 301b 	strh.w	r3, [r4, #27]
  link.nodes[4].inputs[0] = 3;
 80026a6:	2303      	movs	r3, #3
 80026a8:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  link.nodes[5].nodeId = 5;
 80026ac:	f240 5305 	movw	r3, #1285	@ 0x505
 80026b0:	f8a4 302d 	strh.w	r3, [r4, #45]	@ 0x2d
  link.nodes[5].inputs[0] = 4;
 80026b4:	2304      	movs	r3, #4
                if (apipe.inBuffer[i] >= 0.999 || apipe.inBuffer[i] <= -0.999) {
 80026b6:	ed9f 9b5a 	vldr	d9, [pc, #360]	@ 8002820 <main+0x750>
 80026ba:	ed9f 8b5b 	vldr	d8, [pc, #364]	@ 8002828 <main+0x758>
  link.nodes[5].inputs[0] = 4;
 80026be:	f884 3033 	strb.w	r3, [r4, #51]	@ 0x33
  link.processOrder[0] = 0;
 80026c2:	4b73      	ldr	r3, [pc, #460]	@ (8002890 <main+0x7c0>)
 80026c4:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
	  if (apipe.bufferReady)
 80026c8:	7d73      	ldrb	r3, [r6, #21]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80fd 	beq.w	80028ca <main+0x7fa>
 80026d0:	2700      	movs	r7, #0
                        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED ON
 80026d2:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 80028a4 <main+0x7d4>
            sum_of_squares += apipe.inBuffer[i] * apipe.inBuffer[i];
 80026d6:	f8d9 3000 	ldr.w	r3, [r9]
 80026da:	edd8 7a00 	vldr	s15, [r8]
 80026de:	443b      	add	r3, r7
 80026e0:	ed93 7a00 	vldr	s14, [r3]
 80026e4:	eee7 7a07 	vfma.f32	s15, s14, s14
 80026e8:	edc8 7a00 	vstr	s15, [r8]
                if (apipe.inBuffer[i] >= 0.999 || apipe.inBuffer[i] <= -0.999) {
 80026ec:	ed93 7a00 	vldr	s14, [r3]
 80026f0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80026f4:	eeb4 7bc9 	vcmpe.f64	d7, d9
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	da04      	bge.n	8002708 <main+0x638>
 80026fe:	eeb4 7b48 	vcmp.f64	d7, d8
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	d812      	bhi.n	800272e <main+0x65e>
                    if (!clipLedActive) {              // LED currently OFF
 8002708:	4b62      	ldr	r3, [pc, #392]	@ (8002894 <main+0x7c4>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002710:	b96b      	cbnz	r3, 800272e <main+0x65e>
                        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // LED ON
 8002712:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002716:	4658      	mov	r0, fp
 8002718:	f003 fef8 	bl	800650c <HAL_GPIO_WritePin>
                        clipLedActive   = true;
 800271c:	2301      	movs	r3, #1
 800271e:	4a5d      	ldr	r2, [pc, #372]	@ (8002894 <main+0x7c4>)
 8002720:	7013      	strb	r3, [r2, #0]
                        clipLedDeadline = HAL_GetTick() + 1000UL;  // now + 1000 ms
 8002722:	f001 f801 	bl	8003728 <HAL_GetTick>
 8002726:	4b5c      	ldr	r3, [pc, #368]	@ (8002898 <main+0x7c8>)
 8002728:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 800272c:	6018      	str	r0, [r3, #0]
         for (int i = 0; i < BUFFER_SIZE; i++) {
 800272e:	3704      	adds	r7, #4
 8002730:	f5b7 5f80 	cmp.w	r7, #4096	@ 0x1000
 8002734:	d1cf      	bne.n	80026d6 <main+0x606>
         if (( sum_of_squares / BUFFER_SIZE) < noise_thresh){
 8002736:	edd8 7a00 	vldr	s15, [r8]
 800273a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800289c <main+0x7cc>
 800273e:	4b58      	ldr	r3, [pc, #352]	@ (80028a0 <main+0x7d0>)
 8002740:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002744:	ed93 7a00 	vldr	s14, [r3]
 8002748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	f100 80bd 	bmi.w	80028ce <main+0x7fe>
         apipe.loadProcess(&apipe);
 8002754:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8002756:	484b      	ldr	r0, [pc, #300]	@ (8002884 <main+0x7b4>)
 8002758:	4798      	blx	r3
         sum_of_squares = 0;
 800275a:	2300      	movs	r3, #0
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800275c:	2200      	movs	r2, #0
 800275e:	2108      	movs	r1, #8
 8002760:	4850      	ldr	r0, [pc, #320]	@ (80028a4 <main+0x7d4>)
         sum_of_squares = 0;
 8002762:	f8c8 3000 	str.w	r3, [r8]
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002766:	f003 fed1 	bl	800650c <HAL_GPIO_WritePin>
		if(!link.needsRefresh)
 800276a:	f894 70e6 	ldrb.w	r7, [r4, #230]	@ 0xe6
 800276e:	2f00      	cmp	r7, #0
 8002770:	f000 80b6 	beq.w	80028e0 <main+0x810>
		 apipe.updateDACOutput(&apipe, dacOutput);
 8002774:	4f33      	ldr	r7, [pc, #204]	@ (8002844 <main+0x774>)
		 arm_copy_f32(apipe.processBuffer, apipe.outBuffer, BUFFER_SIZE);
 8002776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800277a:	e9d9 1001 	ldrd	r1, r0, [r9, #4]
 800277e:	f007 fccb 	bl	800a118 <arm_copy_f32>
		 apipe.updateDACOutput(&apipe, dacOutput);
 8002782:	6a33      	ldr	r3, [r6, #32]
 8002784:	483f      	ldr	r0, [pc, #252]	@ (8002884 <main+0x7b4>)
 8002786:	4639      	mov	r1, r7
 8002788:	4798      	blx	r3
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800278a:	f007 021f 	and.w	r2, r7, #31
 800278e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
  __ASM volatile ("dsb 0xF":::"memory");
 8002792:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002796:	4926      	ldr	r1, [pc, #152]	@ (8002830 <main+0x760>)
 8002798:	3a20      	subs	r2, #32
 800279a:	f8c1 7268 	str.w	r7, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800279e:	3720      	adds	r7, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80027a0:	2a00      	cmp	r2, #0
 80027a2:	dcf9      	bgt.n	8002798 <main+0x6c8>
 80027a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80027a8:	f3bf 8f6f 	isb	sy
		 if (link.needsRefresh == 1)
 80027ac:	f894 30e6 	ldrb.w	r3, [r4, #230]	@ 0xe6
		 apipe.bufferReady = false;
 80027b0:	2700      	movs	r7, #0
		 if (link.needsRefresh == 1)
 80027b2:	2b01      	cmp	r3, #1
		 apipe.bufferReady = false;
 80027b4:	7577      	strb	r7, [r6, #21]
		 if (link.needsRefresh == 1)
 80027b6:	d187      	bne.n	80026c8 <main+0x5f8>
			 topoSort(&link, order);
 80027b8:	46ab      	mov	fp, r5
 80027ba:	493b      	ldr	r1, [pc, #236]	@ (80028a8 <main+0x7d8>)
 80027bc:	481d      	ldr	r0, [pc, #116]	@ (8002834 <main+0x764>)
			 link.needsRefresh = 0;
 80027be:	f884 70e6 	strb.w	r7, [r4, #230]	@ 0xe6
			 topoSort(&link, order);
 80027c2:	f7ff f8a3 	bl	800190c <topoSort>
				 nodes[i]->clean(nodes[i]);
 80027c6:	f85b 0b04 	ldr.w	r0, [fp], #4
			 for (int i = 0 ; i< 6 ; i++)
 80027ca:	3701      	adds	r7, #1
				 nodes[i]->clean(nodes[i]);
 80027cc:	6883      	ldr	r3, [r0, #8]
 80027ce:	4798      	blx	r3
			 for (int i = 0 ; i< 6 ; i++)
 80027d0:	2f06      	cmp	r7, #6
 80027d2:	d1f8      	bne.n	80027c6 <main+0x6f6>
			 dctm_pool_init();
 80027d4:	f7fe fee2 	bl	800159c <dctm_pool_init>
			 static_pool_init();
 80027d8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8002834 <main+0x764>
 80027dc:	f7fe feea 	bl	80015b4 <static_pool_init>
			 for (int i = 0 ; i < 6  ; i++)
 80027e0:	2700      	movs	r7, #0
 80027e2:	f8cd a00c 	str.w	sl, [sp, #12]
 80027e6:	46aa      	mov	sl, r5
				 nodes[i]->type = link.nodes[i].effectId;
 80027e8:	f89b 2001 	ldrb.w	r2, [fp, #1]
			 for (int i = 0 ; i < 6  ; i++)
 80027ec:	3701      	adds	r7, #1
				 nodes[i]->type = link.nodes[i].effectId;
 80027ee:	f85a 0b04 	ldr.w	r0, [sl], #4
			 for (int i = 0 ; i < 6  ; i++)
 80027f2:	f10b 0b09 	add.w	fp, fp, #9
				 fx_init[nodes[i]->type](nodes[i]);
 80027f6:	4b24      	ldr	r3, [pc, #144]	@ (8002888 <main+0x7b8>)
				 nodes[i]->type = link.nodes[i].effectId;
 80027f8:	7002      	strb	r2, [r0, #0]
				 fx_init[nodes[i]->type](nodes[i]);
 80027fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027fe:	4790      	blx	r2
			 for (int i = 0 ; i < 6  ; i++)
 8002800:	2f06      	cmp	r7, #6
 8002802:	d1f1      	bne.n	80027e8 <main+0x718>
		        if (clipLedActive && (int32_t)(HAL_GetTick() - clipLedDeadline) >= 0) {
 8002804:	4f23      	ldr	r7, [pc, #140]	@ (8002894 <main+0x7c4>)
 8002806:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800280a:	783b      	ldrb	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	f43f af5b 	beq.w	80026c8 <main+0x5f8>
 8002812:	f000 ff89 	bl	8003728 <HAL_GetTick>
 8002816:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <main+0x7c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	e049      	b.n	80028b0 <main+0x7e0>
 800281c:	f3af 8000 	nop.w
 8002820:	d916872b 	.word	0xd916872b
 8002824:	3feff7ce 	.word	0x3feff7ce
 8002828:	d916872b 	.word	0xd916872b
 800282c:	bfeff7ce 	.word	0xbfeff7ce
 8002830:	e000ed00 	.word	0xe000ed00
 8002834:	38000090 	.word	0x38000090
 8002838:	2406d0bc 	.word	0x2406d0bc
 800283c:	2406d590 	.word	0x2406d590
 8002840:	2406c0b0 	.word	0x2406c0b0
 8002844:	2406b0b0 	.word	0x2406b0b0
 8002848:	2406d504 	.word	0x2406d504
 800284c:	2406d440 	.word	0x2406d440
 8002850:	38000080 	.word	0x38000080
 8002854:	2406d318 	.word	0x2406d318
 8002858:	2406d0dc 	.word	0x2406d0dc
 800285c:	2406d2b4 	.word	0x2406d2b4
 8002860:	2406d284 	.word	0x2406d284
 8002864:	2406d254 	.word	0x2406d254
 8002868:	2406d224 	.word	0x2406d224
 800286c:	2406d1f4 	.word	0x2406d1f4
 8002870:	2406d1c4 	.word	0x2406d1c4
 8002874:	2406d194 	.word	0x2406d194
 8002878:	2406d164 	.word	0x2406d164
 800287c:	2406d134 	.word	0x2406d134
 8002880:	2406d104 	.word	0x2406d104
 8002884:	3800017c 	.word	0x3800017c
 8002888:	24000004 	.word	0x24000004
 800288c:	3800e17c 	.word	0x3800e17c
 8002890:	03020100 	.word	0x03020100
 8002894:	2406d0b0 	.word	0x2406d0b0
 8002898:	2406d0b4 	.word	0x2406d0b4
 800289c:	3a800000 	.word	0x3a800000
 80028a0:	24000000 	.word	0x24000000
 80028a4:	58020800 	.word	0x58020800
 80028a8:	38000084 	.word	0x38000084
 80028ac:	2406d0b8 	.word	0x2406d0b8
 80028b0:	1ac3      	subs	r3, r0, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f6ff af08 	blt.w	80026c8 <main+0x5f8>
		            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);   // LED OFF
 80028b8:	2201      	movs	r2, #1
 80028ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028be:	4815      	ldr	r0, [pc, #84]	@ (8002914 <main+0x844>)
 80028c0:	f003 fe24 	bl	800650c <HAL_GPIO_WritePin>
		            clipLedActive = false;
 80028c4:	2300      	movs	r3, #0
 80028c6:	703b      	strb	r3, [r7, #0]
 80028c8:	e6fe      	b.n	80026c8 <main+0x5f8>
	      __WFI();
 80028ca:	bf30      	wfi
 80028cc:	e6fc      	b.n	80026c8 <main+0x5f8>
             arm_fill_f32(0.0f, apipe.inBuffer, BUFFER_SIZE);
 80028ce:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8002918 <main+0x848>
 80028d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80028d6:	f8d9 0000 	ldr.w	r0, [r9]
 80028da:	f007 fbff 	bl	800a0dc <arm_fill_f32>
 80028de:	e739      	b.n	8002754 <main+0x684>
 80028e0:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8002920 <main+0x850>
			 for (int i = 0 ; i < link.nodeCount ; i++) // i < MAX_NODES
 80028e4:	f894 305a 	ldrb.w	r3, [r4, #90]	@ 0x5a
 80028e8:	42bb      	cmp	r3, r7
 80028ea:	f77f af43 	ble.w	8002774 <main+0x6a4>
				apipe.primeProcess(&apipe, link.nodes[link.processOrder[i]].inputs[0], link.processOrder[i]);
 80028ee:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
			 for (int i = 0 ; i < link.nodeCount ; i++) // i < MAX_NODES
 80028f2:	3701      	adds	r7, #1
				apipe.primeProcess(&apipe, link.nodes[link.processOrder[i]].inputs[0], link.processOrder[i]);
 80028f4:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80028f6:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
 80028fa:	4808      	ldr	r0, [pc, #32]	@ (800291c <main+0x84c>)
 80028fc:	4421      	add	r1, r4
 80028fe:	7989      	ldrb	r1, [r1, #6]
 8002900:	4798      	blx	r3
				nodes[link.processOrder[i]]->process(nodes[link.processOrder[i]], &apipe);
 8002902:	f89b 3000 	ldrb.w	r3, [fp]
 8002906:	4905      	ldr	r1, [pc, #20]	@ (800291c <main+0x84c>)
 8002908:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800290c:	6843      	ldr	r3, [r0, #4]
 800290e:	4798      	blx	r3
			 for (int i = 0 ; i < link.nodeCount ; i++) // i < MAX_NODES
 8002910:	e7e8      	b.n	80028e4 <main+0x814>
 8002912:	bf00      	nop
 8002914:	58020800 	.word	0x58020800
 8002918:	00000000 	.word	0x00000000
 800291c:	3800017c 	.word	0x3800017c
 8002920:	3800016b 	.word	0x3800016b

08002924 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002924:	b672      	cpsid	i
  while (1)
 8002926:	e7fe      	b.n	8002926 <Error_Handler+0x2>

08002928 <partitioned_fir_convolution_fft>:
__attribute__((section(".dtcm"), aligned(32))) float zeropad[FFT_SIZE];
float fftOut[FFT_SIZE];


void partitioned_fir_convolution_fft(pipe *pipe, fir_t *fir, float* overlap_state_buf )
{
 8002928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	float *zeropaddedinput = zeropad;
	float *overlap         = overlap_state_buf;

    // prepare input
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 800292c:	f500 4480 	add.w	r4, r0, #16384	@ 0x4000
{
 8002930:	b08b      	sub	sp, #44	@ 0x2c
 8002932:	4613      	mov	r3, r2
 8002934:	460d      	mov	r5, r1
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 8002936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800293a:	4934      	ldr	r1, [pc, #208]	@ (8002a0c <partitioned_fir_convolution_fft+0xe4>)
 800293c:	68a0      	ldr	r0, [r4, #8]
{
 800293e:	9307      	str	r3, [sp, #28]
    arm_copy_f32(pipe->processBuffer, zeropaddedinput, BUFFER_SIZE);
 8002940:	f007 fbea 	bl	800a118 <arm_copy_f32>
    arm_fill_f32(0.0f, &zeropaddedinput[BUFFER_SIZE], BUFFER_SIZE);
 8002944:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8002a10 <partitioned_fir_convolution_fft+0xe8>
 8002948:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800294c:	4831      	ldr	r0, [pc, #196]	@ (8002a14 <partitioned_fir_convolution_fft+0xec>)
 800294e:	f007 fbc5 	bl	800a0dc <arm_fill_f32>

    // forward FFT
    arm_rfft_fast_f32(&fft, zeropaddedinput, fftOut, 0);
 8002952:	2300      	movs	r3, #0
 8002954:	4a30      	ldr	r2, [pc, #192]	@ (8002a18 <partitioned_fir_convolution_fft+0xf0>)
 8002956:	492d      	ldr	r1, [pc, #180]	@ (8002a0c <partitioned_fir_convolution_fft+0xe4>)
 8002958:	4830      	ldr	r0, [pc, #192]	@ (8002a1c <partitioned_fir_convolution_fft+0xf4>)
 800295a:	f007 fcbf 	bl	800a2dc <arm_rfft_fast_f32>

    // save index and spectrum
    fir->prev_fftidx = fir->curr_fftidx;
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 800295e:	482e      	ldr	r0, [pc, #184]	@ (8002a18 <partitioned_fir_convolution_fft+0xf0>)
 8002960:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8002964:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002968:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    fir->prev_fftidx = fir->curr_fftidx;
 800296c:	60eb      	str	r3, [r5, #12]
    arm_copy_f32(fftOut, fir->prev_ffts[fir->curr_fftidx], FFT_SIZE);
 800296e:	f007 fbd3 	bl	800a118 <arm_copy_f32>

    arm_fill_f32(0.0f, fftOut, FFT_SIZE);              /* clear accumulator */
 8002972:	4829      	ldr	r0, [pc, #164]	@ (8002a18 <partitioned_fir_convolution_fft+0xf0>)
 8002974:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002978:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8002a10 <partitioned_fir_convolution_fft+0xe8>
 800297c:	f007 fbae 	bl	800a0dc <arm_fill_f32>

    const uint32_t segs = fir->numSegments;
 8002980:	692b      	ldr	r3, [r5, #16]
 8002982:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8002a18 <partitioned_fir_convolution_fft+0xf0>
    uint32_t i = 0;
 8002986:	f04f 0c00 	mov.w	ip, #0
    const uint32_t segs = fir->numSegments;
 800298a:	9303      	str	r3, [sp, #12]
    uint32_t idx = fir->prev_fftidx;

    // partitioned convolution with pointer arithmetic
    do {
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 800298c:	686b      	ldr	r3, [r5, #4]
 800298e:	f50e 50ff 	add.w	r0, lr, #8160	@ 0x1fe0
		}
		if (idx-- == 0) {
			idx = segs - 1;
		}

    } while (idx != fir->curr_fftidx);
 8002992:	68aa      	ldr	r2, [r5, #8]
 8002994:	f50e 5700 	add.w	r7, lr, #8192	@ 0x2000
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 8002998:	9305      	str	r3, [sp, #20]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 800299a:	682b      	ldr	r3, [r5, #0]
    } while (idx != fir->curr_fftidx);
 800299c:	9204      	str	r2, [sp, #16]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 800299e:	9306      	str	r3, [sp, #24]
 80029a0:	f50e 5380 	add.w	r3, lr, #4096	@ 0x1000
    uint32_t idx = fir->prev_fftidx;
 80029a4:	68ee      	ldr	r6, [r5, #12]
                     float accR = __builtin_fmaf(xr, hr,
 80029a6:	f603 72f8 	addw	r2, r3, #4088	@ 0xff8
 80029aa:	f603 7be8 	addw	fp, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 80029ae:	f603 7aec 	addw	sl, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 80029b2:	f503 697f 	add.w	r9, r3, #4080	@ 0xff0
                     float accI = __builtin_fmaf(xr, hi,
 80029b6:	f603 78f4 	addw	r8, r3, #4084	@ 0xff4
 80029ba:	f603 73fc 	addw	r3, r3, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 80029be:	9201      	str	r2, [sp, #4]
                     float accI = __builtin_fmaf(xr, hi,
 80029c0:	9302      	str	r3, [sp, #8]
 80029c2:	e9cd 5408 	strd	r5, r4, [sp, #32]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 80029c6:	9b05      	ldr	r3, [sp, #20]
                 yPtr[0] += xPtr[0] * hPtr[0];
 80029c8:	ed9e 7a00 	vldr	s14, [lr]
        const float32_t *restrict xPtr = fir->prev_ffts[idx];
 80029cc:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 80029d0:	9b06      	ldr	r3, [sp, #24]
                 yPtr[1] += xPtr[1] * hPtr[1];
 80029d2:	edde 7a01 	vldr	s15, [lr, #4]
 80029d6:	f105 0158 	add.w	r1, r5, #88	@ 0x58
        const float32_t *restrict hPtr = fir->ir_ffts[i];
 80029da:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
                 yPtr[0] += xPtr[0] * hPtr[0];
 80029de:	ed95 5a00 	vldr	s10, [r5]
 80029e2:	edd4 5a00 	vldr	s11, [r4]
 80029e6:	f104 0258 	add.w	r2, r4, #88	@ 0x58
                 yPtr[1] += xPtr[1] * hPtr[1];
 80029ea:	ed95 6a01 	vldr	s12, [r5, #4]
 80029ee:	edd4 6a01 	vldr	s13, [r4, #4]
                 yPtr[0] += xPtr[0] * hPtr[0];
 80029f2:	eea5 7a25 	vfma.f32	s14, s10, s11
                 yPtr[1] += xPtr[1] * hPtr[1];
 80029f6:	eee6 7a26 	vfma.f32	s15, s12, s13
                 yPtr[0] += xPtr[0] * hPtr[0];
 80029fa:	ed8e 7a00 	vstr	s14, [lr]
                 yPtr[1] += xPtr[1] * hPtr[1];
 80029fe:	edce 7a01 	vstr	s15, [lr, #4]
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8002a02:	f8df e014 	ldr.w	lr, [pc, #20]	@ 8002a18 <partitioned_fir_convolution_fft+0xf0>
 8002a06:	4673      	mov	r3, lr
 8002a08:	e00a      	b.n	8002a20 <partitioned_fir_convolution_fft+0xf8>
 8002a0a:	bf00      	nop
 8002a0c:	2000f020 	.word	0x2000f020
 8002a10:	00000000 	.word	0x00000000
 8002a14:	20010020 	.word	0x20010020
 8002a18:	2406d5f4 	.word	0x2406d5f4
 8002a1c:	2406d0bc 	.word	0x2406d0bc
                         float xr = *xPtr++; float xi = *xPtr++;
 8002a20:	ed51 7a13 	vldr	s15, [r1, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8002a24:	3350      	adds	r3, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 8002a26:	ed52 2a14 	vldr	s5, [r2, #-80]	@ 0xffffffb0
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8002a2a:	3150      	adds	r1, #80	@ 0x50
                         float hr = *hPtr++; float hi = *hPtr++;
 8002a2c:	ed52 3a13 	vldr	s7, [r2, #-76]	@ 0xffffffb4
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8002a30:	3250      	adds	r2, #80	@ 0x50
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002a32:	ed13 4a12 	vldr	s8, [r3, #-72]	@ 0xffffffb8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002a36:	ed53 4a11 	vldr	s9, [r3, #-68]	@ 0xffffffbc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002a3a:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float xr = *xPtr++; float xi = *xPtr++;
 8002a3e:	ed11 3a28 	vldr	s6, [r1, #-160]	@ 0xffffff60
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002a42:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002a46:	ed13 5a10 	vldr	s10, [r3, #-64]	@ 0xffffffc0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002a4a:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002a4e:	ed53 6a0e 	vldr	s13, [r3, #-56]	@ 0xffffffc8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002a52:	ed13 6a0d 	vldr	s12, [r3, #-52]	@ 0xffffffcc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002a56:	ed13 7a0c 	vldr	s14, [r3, #-48]	@ 0xffffffd0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002a5a:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002a5e:	ed53 7a0b 	vldr	s15, [r3, #-44]	@ 0xffffffd4
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002a62:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 8002a66:	ed03 4a12 	vstr	s8, [r3, #-72]	@ 0xffffffb8
                         *(yPtr+1) = accI;
 8002a6a:	ed43 4a11 	vstr	s9, [r3, #-68]	@ 0xffffffbc
                         float hr = *hPtr++; float hi = *hPtr++;
 8002a6e:	ed52 3a26 	vldr	s7, [r2, #-152]	@ 0xffffff68
 8002a72:	ed52 4a25 	vldr	s9, [r2, #-148]	@ 0xffffff6c
                         float xr = *xPtr++; float xi = *xPtr++;
 8002a76:	ed11 3a25 	vldr	s6, [r1, #-148]	@ 0xffffff6c
 8002a7a:	ed11 4a26 	vldr	s8, [r1, #-152]	@ 0xffffff68
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002a7e:	eea3 5a64 	vfms.f32	s10, s6, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002a82:	eee3 5a23 	vfma.f32	s11, s6, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002a86:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002a8a:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *yPtr     = accR;
 8002a8e:	ed03 5a10 	vstr	s10, [r3, #-64]	@ 0xffffffc0
                         *(yPtr+1) = accI;
 8002a92:	ed43 5a0f 	vstr	s11, [r3, #-60]	@ 0xffffffc4
                         float xr = *xPtr++; float xi = *xPtr++;
 8002a96:	ed11 4a23 	vldr	s8, [r1, #-140]	@ 0xffffff74
                         float hr = *hPtr++; float hi = *hPtr++;
 8002a9a:	ed52 5a24 	vldr	s11, [r2, #-144]	@ 0xffffff70
 8002a9e:	ed52 4a23 	vldr	s9, [r2, #-140]	@ 0xffffff74
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002aa2:	eea4 6a25 	vfma.f32	s12, s8, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8002aa6:	ed11 5a24 	vldr	s10, [r1, #-144]	@ 0xffffff70
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002aaa:	eee4 6a64 	vfms.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002aae:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002ab2:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *(yPtr+1) = accI;
 8002ab6:	ed03 6a0d 	vstr	s12, [r3, #-52]	@ 0xffffffcc
                         *yPtr     = accR;
 8002aba:	ed43 6a0e 	vstr	s13, [r3, #-56]	@ 0xffffffc8
                         float xr = *xPtr++; float xi = *xPtr++;
 8002abe:	ed11 5a21 	vldr	s10, [r1, #-132]	@ 0xffffff7c
                         float hr = *hPtr++; float hi = *hPtr++;
 8002ac2:	ed52 5a22 	vldr	s11, [r2, #-136]	@ 0xffffff78
 8002ac6:	ed52 6a21 	vldr	s13, [r2, #-132]	@ 0xffffff7c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002aca:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8002ace:	ed11 6a22 	vldr	s12, [r1, #-136]	@ 0xffffff78
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002ad2:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002ad6:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002ada:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8002ade:	ed43 7a0b 	vstr	s15, [r3, #-44]	@ 0xffffffd4
                         *yPtr     = accR;
 8002ae2:	ed03 7a0c 	vstr	s14, [r3, #-48]	@ 0xffffffd0
                         float xr = *xPtr++; float xi = *xPtr++;
 8002ae6:	ed11 3a20 	vldr	s6, [r1, #-128]	@ 0xffffff80
 8002aea:	ed51 7a1f 	vldr	s15, [r1, #-124]	@ 0xffffff84
                         float hr = *hPtr++; float hi = *hPtr++;
 8002aee:	ed52 3a1f 	vldr	s7, [r2, #-124]	@ 0xffffff84
 8002af2:	ed52 2a20 	vldr	s5, [r2, #-128]	@ 0xffffff80
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002af6:	ed13 4a0a 	vldr	s8, [r3, #-40]	@ 0xffffffd8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002afa:	ed53 4a09 	vldr	s9, [r3, #-36]	@ 0xffffffdc
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002afe:	eea7 4ae3 	vfms.f32	s8, s15, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002b02:	ed53 5a08 	vldr	s11, [r3, #-32]	@ 0xffffffe0
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002b06:	eee7 4aa2 	vfma.f32	s9, s15, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002b0a:	ed13 5a07 	vldr	s10, [r3, #-28]	@ 0xffffffe4
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002b0e:	ed13 6a06 	vldr	s12, [r3, #-24]	@ 0xffffffe8
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002b12:	ed53 6a05 	vldr	s13, [r3, #-20]	@ 0xffffffec
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002b16:	ed53 7a04 	vldr	s15, [r3, #-16]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002b1a:	ed13 7a03 	vldr	s14, [r3, #-12]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002b1e:	eea3 4a22 	vfma.f32	s8, s6, s5
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002b22:	eee3 4a23 	vfma.f32	s9, s6, s7
                         *yPtr     = accR;
 8002b26:	ed03 4a0a 	vstr	s8, [r3, #-40]	@ 0xffffffd8
                         *(yPtr+1) = accI;
 8002b2a:	ed43 4a09 	vstr	s9, [r3, #-36]	@ 0xffffffdc
                         float hr = *hPtr++; float hi = *hPtr++;
 8002b2e:	ed52 4a1e 	vldr	s9, [r2, #-120]	@ 0xffffff88
                         float xr = *xPtr++; float xi = *xPtr++;
 8002b32:	ed11 3a1d 	vldr	s6, [r1, #-116]	@ 0xffffff8c
                         float hr = *hPtr++; float hi = *hPtr++;
 8002b36:	ed52 3a1d 	vldr	s7, [r2, #-116]	@ 0xffffff8c
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002b3a:	eea3 5a24 	vfma.f32	s10, s6, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 8002b3e:	ed11 4a1e 	vldr	s8, [r1, #-120]	@ 0xffffff88
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002b42:	eee3 5a63 	vfms.f32	s11, s6, s7
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002b46:	eea4 5a23 	vfma.f32	s10, s8, s7
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002b4a:	eee4 5a24 	vfma.f32	s11, s8, s9
                         *(yPtr+1) = accI;
 8002b4e:	ed03 5a07 	vstr	s10, [r3, #-28]	@ 0xffffffe4
                         *yPtr     = accR;
 8002b52:	ed43 5a08 	vstr	s11, [r3, #-32]	@ 0xffffffe0
                         float xr = *xPtr++; float xi = *xPtr++;
 8002b56:	ed11 4a1b 	vldr	s8, [r1, #-108]	@ 0xffffff94
                         float hr = *hPtr++; float hi = *hPtr++;
 8002b5a:	ed52 4a1c 	vldr	s9, [r2, #-112]	@ 0xffffff90
 8002b5e:	ed52 5a1b 	vldr	s11, [r2, #-108]	@ 0xffffff94
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002b62:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float xr = *xPtr++; float xi = *xPtr++;
 8002b66:	ed11 5a1c 	vldr	s10, [r1, #-112]	@ 0xffffff90
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002b6a:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002b6e:	eee5 6a25 	vfma.f32	s13, s10, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002b72:	eea5 6a24 	vfma.f32	s12, s10, s9
                         *(yPtr+1) = accI;
 8002b76:	ed43 6a05 	vstr	s13, [r3, #-20]	@ 0xffffffec
                         *yPtr     = accR;
 8002b7a:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
                         float hr = *hPtr++; float hi = *hPtr++;
 8002b7e:	ed52 6a1a 	vldr	s13, [r2, #-104]	@ 0xffffff98
 8002b82:	ed52 5a19 	vldr	s11, [r2, #-100]	@ 0xffffff9c
                         float xr = *xPtr++; float xi = *xPtr++;
 8002b86:	ed11 5a19 	vldr	s10, [r1, #-100]	@ 0xffffff9c
 8002b8a:	ed11 6a1a 	vldr	s12, [r1, #-104]	@ 0xffffff98
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002b8e:	eea5 7a26 	vfma.f32	s14, s10, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002b92:	eee5 7a65 	vfms.f32	s15, s10, s11
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002b96:	eea6 7a25 	vfma.f32	s14, s12, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002b9a:	eee6 7a26 	vfma.f32	s15, s12, s13
                         *(yPtr+1) = accI;
 8002b9e:	ed03 7a03 	vstr	s14, [r3, #-12]
                         *yPtr     = accR;
 8002ba2:	ed43 7a04 	vstr	s15, [r3, #-16]
                         float xr = *xPtr++; float xi = *xPtr++;
 8002ba6:	ed11 5a18 	vldr	s10, [r1, #-96]	@ 0xffffffa0
                         float hr = *hPtr++; float hi = *hPtr++;
 8002baa:	ed52 5a17 	vldr	s11, [r2, #-92]	@ 0xffffffa4
                         float xr = *xPtr++; float xi = *xPtr++;
 8002bae:	ed11 4a17 	vldr	s8, [r1, #-92]	@ 0xffffffa4
                         float hr = *hPtr++; float hi = *hPtr++;
 8002bb2:	ed52 4a18 	vldr	s9, [r2, #-96]	@ 0xffffffa0
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002bb6:	ed13 6a02 	vldr	s12, [r3, #-8]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002bba:	ed53 6a01 	vldr	s13, [r3, #-4]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002bbe:	eea4 6a65 	vfms.f32	s12, s8, s11
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002bc2:	ed93 7a00 	vldr	s14, [r3]
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002bc6:	eee4 6a24 	vfma.f32	s13, s8, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002bca:	edd3 7a01 	vldr	s15, [r3, #4]
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002bce:	eea5 6a24 	vfma.f32	s12, s10, s9
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002bd2:	eee5 6a25 	vfma.f32	s13, s10, s11
                         *yPtr     = accR;
 8002bd6:	ed03 6a02 	vstr	s12, [r3, #-8]
                         *(yPtr+1) = accI;
 8002bda:	ed43 6a01 	vstr	s13, [r3, #-4]
                         float xr = *xPtr++; float xi = *xPtr++;
 8002bde:	ed11 5a15 	vldr	s10, [r1, #-84]	@ 0xffffffac
                         float hr = *hPtr++; float hi = *hPtr++;
 8002be2:	ed52 5a16 	vldr	s11, [r2, #-88]	@ 0xffffffa8
 8002be6:	ed52 6a15 	vldr	s13, [r2, #-84]	@ 0xffffffac
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002bea:	eee5 7a25 	vfma.f32	s15, s10, s11
                         float xr = *xPtr++; float xi = *xPtr++;
 8002bee:	ed11 6a16 	vldr	s12, [r1, #-88]	@ 0xffffffa8
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002bf2:	eea5 7a66 	vfms.f32	s14, s10, s13
                         float accI = __builtin_fmaf(xr, hi, __builtin_fmaf(xi, hr, *(yPtr+1)));
 8002bf6:	eee6 7a26 	vfma.f32	s15, s12, s13
                         float accR = __builtin_fmaf(xr, hr, __builtin_fmaf(-xi, hi, *yPtr));
 8002bfa:	eea6 7a25 	vfma.f32	s14, s12, s11
                         *(yPtr+1) = accI;
 8002bfe:	edc3 7a01 	vstr	s15, [r3, #4]
                         *yPtr     = accR;
 8002c02:	ed83 7a00 	vstr	s14, [r3]
                 for (uint32_t u = FFT_SIZE / 20;  u--;  ) {
 8002c06:	4283      	cmp	r3, r0
 8002c08:	f47f af0a 	bne.w	8002a20 <partitioned_fir_convolution_fft+0xf8>
                     float accR = __builtin_fmaf(xr, hr,
 8002c0c:	9b01      	ldr	r3, [sp, #4]
		if (++i >= segs) {
 8002c0e:	f10c 0c01 	add.w	ip, ip, #1
                     float accI = __builtin_fmaf(xr, hi,
 8002c12:	9a02      	ldr	r2, [sp, #8]
                     float accR = __builtin_fmaf(xr, hr,
 8002c14:	ed93 7a00 	vldr	s14, [r3]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002c18:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
                     float accI = __builtin_fmaf(xr, hi,
 8002c1c:	edd2 7a00 	vldr	s15, [r2]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002c20:	f505 5500 	add.w	r5, r5, #8192	@ 0x2000
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002c24:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8002c28:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
                     float accR = __builtin_fmaf(xr, hr,
 8002c2c:	ed97 5a00 	vldr	s10, [r7]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002c30:	ed95 2a01 	vldr	s4, [r5, #4]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002c34:	edd4 2a01 	vldr	s5, [r4, #4]
			i = 0;
 8002c38:	9903      	ldr	r1, [sp, #12]
                     float accR = __builtin_fmaf(xr, hr,
 8002c3a:	eea2 5a62 	vfms.f32	s10, s4, s5
                     float accI = __builtin_fmaf(xr, hi,
 8002c3e:	edd7 5a01 	vldr	s11, [r7, #4]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002c42:	ed95 3a00 	vldr	s6, [r5]
			i = 0;
 8002c46:	4561      	cmp	r1, ip
 8002c48:	bf98      	it	ls
 8002c4a:	f04f 0c00 	movls.w	ip, #0
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002c4e:	edd4 3a00 	vldr	s7, [r4]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002c52:	f603 71ec 	addw	r1, r3, #4076	@ 0xfec
                     float accR = __builtin_fmaf(xr, hr,
 8002c56:	ed9b 4a00 	vldr	s8, [fp]
                     float accI = __builtin_fmaf(xr, hi,
 8002c5a:	eee2 5a23 	vfma.f32	s11, s4, s7
 8002c5e:	edda 4a00 	vldr	s9, [sl]
                     float accR = __builtin_fmaf(xr, hr,
 8002c62:	ed99 6a00 	vldr	s12, [r9]
 8002c66:	eea3 5a23 	vfma.f32	s10, s6, s7
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002c6a:	edd1 3a00 	vldr	s7, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002c6e:	f602 71e8 	addw	r1, r2, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8002c72:	edd8 6a00 	vldr	s13, [r8]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002c76:	edd1 0a00 	vldr	s1, [r1]
 8002c7a:	f602 71ec 	addw	r1, r2, #4076	@ 0xfec
                     float accI = __builtin_fmaf(xr, hi,
 8002c7e:	eee3 5a22 	vfma.f32	s11, s6, s5
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002c82:	edd1 1a00 	vldr	s3, [r1]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002c86:	f603 71f4 	addw	r1, r3, #4084	@ 0xff4
                     float accI = __builtin_fmaf(xr, hi,
 8002c8a:	eee3 4aa0 	vfma.f32	s9, s7, s1
                     float accR = __builtin_fmaf(xr, hr,
 8002c8e:	eea3 4ae1 	vfms.f32	s8, s7, s3
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002c92:	edd1 3a00 	vldr	s7, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002c96:	f502 617f 	add.w	r1, r2, #4080	@ 0xff0
 8002c9a:	ed91 2a00 	vldr	s4, [r1]
 8002c9e:	f602 71f4 	addw	r1, r2, #4084	@ 0xff4
 8002ca2:	edd1 2a00 	vldr	s5, [r1]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002ca6:	f603 71fc 	addw	r1, r3, #4092	@ 0xffc
                     float accI = __builtin_fmaf(xr, hi,
 8002caa:	eee3 6a82 	vfma.f32	s13, s7, s4
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002cae:	ed91 1a00 	vldr	s2, [r1]
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002cb2:	f602 71f8 	addw	r1, r2, #4088	@ 0xff8
 8002cb6:	f602 72fc 	addw	r2, r2, #4092	@ 0xffc
                     float accR = __builtin_fmaf(xr, hr,
 8002cba:	eea3 6ae2 	vfms.f32	s12, s7, s5
                     float hr = *hPtr++;  float hi = *hPtr++;
 8002cbe:	ed91 3a00 	vldr	s6, [r1]
 8002cc2:	edd2 3a00 	vldr	s7, [r2]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002cc6:	f603 72e8 	addw	r2, r3, #4072	@ 0xfe8
                     float accI = __builtin_fmaf(xr, hi,
 8002cca:	eee1 7a03 	vfma.f32	s15, s2, s6
                     float accR = __builtin_fmaf(xr, hr,
 8002cce:	eea1 7a63 	vfms.f32	s14, s2, s7
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002cd2:	ed92 1a00 	vldr	s2, [r2]
 8002cd6:	f503 627f 	add.w	r2, r3, #4080	@ 0xff0
 8002cda:	f603 73f8 	addw	r3, r3, #4088	@ 0xff8
                     float accR = __builtin_fmaf(xr, hr,
 8002cde:	eea1 4a20 	vfma.f32	s8, s2, s1
                     float accI = __builtin_fmaf(xr, hi,
 8002ce2:	eee1 4a21 	vfma.f32	s9, s2, s3
                     *yPtr     = accR;
 8002ce6:	ed8b 4a00 	vstr	s8, [fp]
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002cea:	ed92 4a00 	vldr	s8, [r2]
                     *(yPtr+1) = accI;
 8002cee:	edca 4a00 	vstr	s9, [sl]
                     float accR = __builtin_fmaf(xr, hr,
 8002cf2:	eea4 6a02 	vfma.f32	s12, s8, s4
                     float xr = *xPtr++;  float xi = *xPtr++;
 8002cf6:	edd3 4a00 	vldr	s9, [r3]
                     float accI = __builtin_fmaf(xr, hi,
 8002cfa:	eee4 6a22 	vfma.f32	s13, s8, s5
                     *yPtr     = accR;
 8002cfe:	ed87 5a00 	vstr	s10, [r7]
                     float accR = __builtin_fmaf(xr, hr,
 8002d02:	eea4 7a83 	vfma.f32	s14, s9, s6
                     *(yPtr+1) = accI;
 8002d06:	edc7 5a01 	vstr	s11, [r7, #4]
                     float accI = __builtin_fmaf(xr, hi,
 8002d0a:	eee4 7aa3 	vfma.f32	s15, s9, s7
                     *yPtr     = accR;
 8002d0e:	ed89 6a00 	vstr	s12, [r9]
                     *(yPtr+1) = accI;
 8002d12:	edc8 6a00 	vstr	s13, [r8]
                     *yPtr     = accR;
 8002d16:	9b01      	ldr	r3, [sp, #4]
                     *(yPtr+1) = accI;
 8002d18:	9a02      	ldr	r2, [sp, #8]
                     *yPtr     = accR;
 8002d1a:	ed83 7a00 	vstr	s14, [r3]
                     *(yPtr+1) = accI;
 8002d1e:	edc2 7a00 	vstr	s15, [r2]
		if (idx-- == 0) {
 8002d22:	b39e      	cbz	r6, 8002d8c <partitioned_fir_convolution_fft+0x464>
 8002d24:	3e01      	subs	r6, #1
    } while (idx != fir->curr_fftidx);
 8002d26:	9b04      	ldr	r3, [sp, #16]
 8002d28:	42b3      	cmp	r3, r6
 8002d2a:	f47f ae4c 	bne.w	80029c6 <partitioned_fir_convolution_fft+0x9e>

    // advance write index
    if (++fir->curr_fftidx >= segs) {
        fir->curr_fftidx = 0;
 8002d2e:	9e03      	ldr	r6, [sp, #12]
    if (++fir->curr_fftidx >= segs) {
 8002d30:	3301      	adds	r3, #1
    }

    // inverse FFT
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8002d32:	4a18      	ldr	r2, [pc, #96]	@ (8002d94 <partitioned_fir_convolution_fft+0x46c>)
        fir->curr_fftidx = 0;
 8002d34:	42b3      	cmp	r3, r6
 8002d36:	bf28      	it	cs
 8002d38:	2300      	movcs	r3, #0
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8002d3a:	4917      	ldr	r1, [pc, #92]	@ (8002d98 <partitioned_fir_convolution_fft+0x470>)
 8002d3c:	4817      	ldr	r0, [pc, #92]	@ (8002d9c <partitioned_fir_convolution_fft+0x474>)
    if (++fir->curr_fftidx >= segs) {
 8002d3e:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8002d42:	60ab      	str	r3, [r5, #8]
    arm_rfft_fast_f32(&fft, fftOut, zeropaddedinput, 1);
 8002d44:	2301      	movs	r3, #1
 8002d46:	f007 fac9 	bl	800a2dc <arm_rfft_fast_f32>

    // overlap-add and scaling
    const float32_t invN = 1.0f / (float32_t)segs;
 8002d4a:	ee07 6a90 	vmov	s15, r6
 8002d4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d52:	4a10      	ldr	r2, [pc, #64]	@ (8002d94 <partitioned_fir_convolution_fft+0x46c>)
 8002d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d58:	9b07      	ldr	r3, [sp, #28]
 8002d5a:	f502 5180 	add.w	r1, r2, #4096	@ 0x1000
 8002d5e:	68a0      	ldr	r0, [r4, #8]
 8002d60:	eec7 6a27 	vdiv.f32	s13, s14, s15
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8002d64:	460d      	mov	r5, r1
        float32_t s = zeropaddedinput[k]            * invN;
 8002d66:	ecf2 7a01 	vldmia	r2!, {s15}
        float32_t o = overlap[k]                    * invN;
 8002d6a:	ed93 7a00 	vldr	s14, [r3]
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8002d6e:	4295      	cmp	r5, r2
        pipe->processBuffer[k] = s + o;
 8002d70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d78:	ece0 7a01 	vstmia	r0!, {s15}
        overlap[k]             = zeropaddedinput[BUFFER_SIZE + k];
 8002d7c:	f851 4b04 	ldr.w	r4, [r1], #4
 8002d80:	f843 4b04 	str.w	r4, [r3], #4
    for (uint32_t k = 0;  k < BUFFER_SIZE;  ++k) {
 8002d84:	d1ef      	bne.n	8002d66 <partitioned_fir_convolution_fft+0x43e>
    }

}
 8002d86:	b00b      	add	sp, #44	@ 0x2c
 8002d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			idx = segs - 1;
 8002d8c:	9b03      	ldr	r3, [sp, #12]
 8002d8e:	1e5e      	subs	r6, r3, #1
 8002d90:	e7c9      	b.n	8002d26 <partitioned_fir_convolution_fft+0x3fe>
 8002d92:	bf00      	nop
 8002d94:	2000f020 	.word	0x2000f020
 8002d98:	2406d5f4 	.word	0x2406d5f4
 8002d9c:	2406d0bc 	.word	0x2406d0bc

08002da0 <pipe_getNodeBuffer>:

    return &self->delayBuffer[index];
}*/

float32_t *pipe_getNodeBuffer(pipe *self, uint16_t n)
{
 8002da0:	4603      	mov	r3, r0
    return self->nodeBuffer[n];
}
 8002da2:	f244 000c 	movw	r0, #16396	@ 0x400c
    return self->nodeBuffer[n];
 8002da6:	eb03 3301 	add.w	r3, r3, r1, lsl #12
}
 8002daa:	4418      	add	r0, r3
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop

08002db0 <pipe_setIO>:
	arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
}

static void pipe_setIO(pipe *self, uint16_t sourceBuffer, uint16_t destinationBuffer)
{
	self->fxSrcBuff = self->nodeBuffer[sourceBuffer];
 8002db0:	f244 030c 	movw	r3, #16396	@ 0x400c
 8002db4:	eb03 3101 	add.w	r1, r3, r1, lsl #12
	self->fxDstBuff = self->nodeBuffer[destinationBuffer];
 8002db8:	eb03 3302 	add.w	r3, r3, r2, lsl #12
	self->fxSrcBuff = self->nodeBuffer[sourceBuffer];
 8002dbc:	f500 4260 	add.w	r2, r0, #57344	@ 0xe000
 8002dc0:	4401      	add	r1, r0
	self->fxDstBuff = self->nodeBuffer[destinationBuffer];
 8002dc2:	4418      	add	r0, r3
 8002dc4:	e9c2 1003 	strd	r1, r0, [r2, #12]
}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop

08002dcc <pipe_primeProcess>:

static void pipe_primeProcess(pipe *self, uint16_t sourceBuffer, uint16_t workingBuffer)
{
	self->processBuffer = self->nodeBuffer[workingBuffer];
 8002dcc:	f244 0c0c 	movw	ip, #16396	@ 0x400c
{
 8002dd0:	460b      	mov	r3, r1
	self->processBuffer = self->nodeBuffer[workingBuffer];
 8002dd2:	eb0c 3202 	add.w	r2, ip, r2, lsl #12
	if (sourceBuffer <= MAX_NODES)
 8002dd6:	2b0a      	cmp	r3, #10
{
 8002dd8:	b500      	push	{lr}
	self->processBuffer = self->nodeBuffer[workingBuffer];
 8002dda:	eb00 0102 	add.w	r1, r0, r2
 8002dde:	f500 4e80 	add.w	lr, r0, #16384	@ 0x4000
 8002de2:	f8ce 1008 	str.w	r1, [lr, #8]
	if (sourceBuffer <= MAX_NODES)
 8002de6:	d808      	bhi.n	8002dfa <pipe_primeProcess+0x2e>
	{
		arm_copy_f32(self->nodeBuffer[sourceBuffer], self->processBuffer, BUFFER_SIZE);
 8002de8:	eb0c 3c03 	add.w	ip, ip, r3, lsl #12
 8002dec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
	}
	else
	{
		arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
	}
}
 8002df0:	f85d eb04 	ldr.w	lr, [sp], #4
		arm_copy_f32(self->nodeBuffer[sourceBuffer], self->processBuffer, BUFFER_SIZE);
 8002df4:	4460      	add	r0, ip
 8002df6:	f007 b98f 	b.w	800a118 <arm_copy_f32>
		arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8002dfa:	f8de 0000 	ldr.w	r0, [lr]
 8002dfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
}
 8002e02:	f85d eb04 	ldr.w	lr, [sp], #4
		arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8002e06:	f007 b987 	b.w	800a118 <arm_copy_f32>
 8002e0a:	bf00      	nop

08002e0c <pipe_loadProcess>:
	arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8002e0c:	f500 4080 	add.w	r0, r0, #16384	@ 0x4000
 8002e10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e14:	6881      	ldr	r1, [r0, #8]
 8002e16:	6800      	ldr	r0, [r0, #0]
 8002e18:	f007 b97e 	b.w	800a118 <arm_copy_f32>

08002e1c <pipe_updateDACOutput>:
{
 8002e1c:	b570      	push	{r4, r5, r6, lr}
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8002e1e:	f500 4580 	add.w	r5, r0, #16384	@ 0x4000
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8002e22:	f500 4360 	add.w	r3, r0, #57344	@ 0xe000
{
 8002e26:	460c      	mov	r4, r1
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8002e28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e2c:	6869      	ldr	r1, [r5, #4]
 8002e2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8002e32:	7d1e      	ldrb	r6, [r3, #20]
    arm_offset_f32(self->outBuffer, 1.0f, self->outBuffer, BUFFER_SIZE);
 8002e34:	4608      	mov	r0, r1
 8002e36:	f007 ffc7 	bl	800adc8 <arm_offset_f32>
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8002e3a:	6869      	ldr	r1, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8002e3c:	fab6 f686 	clz	r6, r6
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8002e40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e44:	4608      	mov	r0, r1
 8002e46:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8002e74 <pipe_updateDACOutput+0x58>
 8002e4a:	f007 ff87 	bl	800ad5c <arm_scale_f32>
 8002e4e:	686a      	ldr	r2, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8002e50:	0976      	lsrs	r6, r6, #5
    for (i = 0; i < BUFFER_SIZE; i++)
 8002e52:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8002e56:	eb04 21c6 	add.w	r1, r4, r6, lsl #11
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8002e5a:	ecf2 7a01 	vldmia	r2!, {s15}
 8002e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    for (i = 0; i < BUFFER_SIZE; i++)
 8002e62:	4290      	cmp	r0, r2
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8002e64:	ee17 3a90 	vmov	r3, s15
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f821 3b02 	strh.w	r3, [r1], #2
    for (i = 0; i < BUFFER_SIZE; i++)
 8002e6e:	d1f4      	bne.n	8002e5a <pipe_updateDACOutput+0x3e>
}
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
 8002e72:	bf00      	nop
 8002e74:	45000000 	.word	0x45000000

08002e78 <pipe_ADC_Complete>:
{
 8002e78:	b538      	push	{r3, r4, r5, lr}
 8002e7a:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
 8002e7e:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8002e80:	f501 6c00 	add.w	ip, r1, #2048	@ 0x800
 8002e84:	f500 5e00 	add.w	lr, r0, #8192	@ 0x2000
 8002e88:	462a      	mov	r2, r5
        self->inBuffer2[i] = (float32_t)adcInput[BUFFER_SIZE + i];
 8002e8a:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e98:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8002e9c:	4572      	cmp	r2, lr
 8002e9e:	d1f4      	bne.n	8002e8a <pipe_ADC_Complete+0x12>
    arm_scale_f32(self->inBuffer2, ADC_BITS2VOLTS, self->inBuffer2, BUFFER_SIZE);
 8002ea0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002ed8 <pipe_ADC_Complete+0x60>
 8002eaa:	4628      	mov	r0, r5
 8002eac:	f007 ff56 	bl	800ad5c <arm_scale_f32>
    arm_offset_f32(self->inBuffer2, -1.0f, self->inBuffer2, BUFFER_SIZE);
 8002eb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f007 ff84 	bl	800adc8 <arm_offset_f32>
    self->inBuffer  = self->inBuffer2;
 8002ec0:	f504 4380 	add.w	r3, r4, #16384	@ 0x4000
    self->outBuffer = self->outBuffer2;
 8002ec4:	f504 5140 	add.w	r1, r4, #12288	@ 0x3000
    self->ppState   = 0;
 8002ec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ecc:	f504 4460 	add.w	r4, r4, #57344	@ 0xe000
    self->outBuffer = self->outBuffer2;
 8002ed0:	e9c3 5100 	strd	r5, r1, [r3]
    self->ppState   = 0;
 8002ed4:	82a2      	strh	r2, [r4, #20]
}
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
 8002ed8:	38000000 	.word	0x38000000

08002edc <pipe_ADC_HalfComplete>:
{
 8002edc:	b510      	push	{r4, lr}
 8002ede:	468c      	mov	ip, r1
 8002ee0:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	f500 5e80 	add.w	lr, r0, #4096	@ 0x1000
        self->inBuffer1[i] = (float32_t)adcInput[i];
 8002ee8:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef6:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8002efa:	4572      	cmp	r2, lr
 8002efc:	d1f4      	bne.n	8002ee8 <pipe_ADC_HalfComplete+0xc>
    arm_scale_f32(self->inBuffer1, ADC_BITS2VOLTS, self->inBuffer1, BUFFER_SIZE);
 8002efe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f02:	4621      	mov	r1, r4
 8002f04:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002f38 <pipe_ADC_HalfComplete+0x5c>
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f007 ff27 	bl	800ad5c <arm_scale_f32>
    arm_offset_f32(self->inBuffer1, -1.0f, self->inBuffer1, BUFFER_SIZE);
 8002f0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f12:	4621      	mov	r1, r4
 8002f14:	4620      	mov	r0, r4
 8002f16:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002f1a:	f007 ff55 	bl	800adc8 <arm_offset_f32>
    self->ppState   = 1;
 8002f1e:	f240 1101 	movw	r1, #257	@ 0x101
    self->inBuffer  = self->inBuffer1;
 8002f22:	f504 4380 	add.w	r3, r4, #16384	@ 0x4000
    self->outBuffer = self->outBuffer1;
 8002f26:	f504 5000 	add.w	r0, r4, #8192	@ 0x2000
    self->ppState   = 1;
 8002f2a:	f504 4260 	add.w	r2, r4, #57344	@ 0xe000
    self->outBuffer = self->outBuffer1;
 8002f2e:	e9c3 4000 	strd	r4, r0, [r3]
    self->ppState   = 1;
 8002f32:	8291      	strh	r1, [r2, #20]
}
 8002f34:	bd10      	pop	{r4, pc}
 8002f36:	bf00      	nop
 8002f38:	38000000 	.word	0x38000000

08002f3c <pipeInit>:

void pipeInit(pipe *self)
{
 8002f3c:	4603      	mov	r3, r0
    self->inBuffer  = self->inBuffer2;
    self->outBuffer = self->outBuffer2;
    self->processBuffer = self->nodeBuffer[0];
 8002f3e:	f244 000c 	movw	r0, #16396	@ 0x400c
    self->ppState   = 0;
 8002f42:	2100      	movs	r1, #0
 8002f44:	f503 4260 	add.w	r2, r3, #57344	@ 0xe000
    self->inBuffer  = self->inBuffer2;
 8002f48:	f503 4c80 	add.w	ip, r3, #16384	@ 0x4000
    self->processBuffer = self->nodeBuffer[0];
 8002f4c:	4418      	add	r0, r3
{
 8002f4e:	b470      	push	{r4, r5, r6}
    self->inBuffer  = self->inBuffer2;
 8002f50:	f503 5680 	add.w	r6, r3, #4096	@ 0x1000
    self->outBuffer = self->outBuffer2;
 8002f54:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
    //self->delayIndex = 0;
    self->bufferReady = false;

    self->adcHalfComplete = pipe_ADC_HalfComplete;
    self->adcComplete     = pipe_ADC_Complete;
 8002f58:	4c0c      	ldr	r4, [pc, #48]	@ (8002f8c <pipeInit+0x50>)
    self->outBuffer = self->outBuffer2;
 8002f5a:	f8cc 3004 	str.w	r3, [ip, #4]
    //self->updateDelayBuffer = pipe_updateDelayBuffer;
    self->updateDACOutput = pipe_updateDACOutput;
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <pipeInit+0x54>)
    self->inBuffer  = self->inBuffer2;
 8002f60:	f8cc 6000 	str.w	r6, [ip]
    self->processBuffer = self->nodeBuffer[0];
 8002f64:	f8cc 0008 	str.w	r0, [ip, #8]
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8002f68:	4d0a      	ldr	r5, [pc, #40]	@ (8002f94 <pipeInit+0x58>)
    self->ppState   = 0;
 8002f6a:	8291      	strh	r1, [r2, #20]
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8002f6c:	6195      	str	r5, [r2, #24]
    self->updateDACOutput = pipe_updateDACOutput;
 8002f6e:	e9c2 4307 	strd	r4, r3, [r2, #28]
    //self->getDelayBuffer = pipe_getDelayBuffer;
    self->loadProcess = pipe_loadProcess;
 8002f72:	4c09      	ldr	r4, [pc, #36]	@ (8002f98 <pipeInit+0x5c>)
    self->getNodeBuffer = pipe_getNodeBuffer;
 8002f74:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <pipeInit+0x60>)
 8002f76:	e9c2 4309 	strd	r4, r3, [r2, #36]	@ 0x24
    self->setIO = pipe_setIO;
 8002f7a:	4c09      	ldr	r4, [pc, #36]	@ (8002fa0 <pipeInit+0x64>)
    self->primeProcess = pipe_primeProcess;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <pipeInit+0x68>)
 8002f7e:	e9c2 340b 	strd	r3, r4, [r2, #44]	@ 0x2c

    for(int i = 0; i < BUFFER_SIZE ; i++) {

    	self->processBuffer[i] = 0;
 8002f82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000

    }

}
 8002f86:	bc70      	pop	{r4, r5, r6}
    	self->processBuffer[i] = 0;
 8002f88:	f008 bcf3 	b.w	800b972 <memset>
 8002f8c:	08002e79 	.word	0x08002e79
 8002f90:	08002e1d 	.word	0x08002e1d
 8002f94:	08002edd 	.word	0x08002edd
 8002f98:	08002e0d 	.word	0x08002e0d
 8002f9c:	08002da1 	.word	0x08002da1
 8002fa0:	08002db1 	.word	0x08002db1
 8002fa4:	08002dcd 	.word	0x08002dcd

08002fa8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa8:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <HAL_MspInit+0x20>)
{
 8002faa:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fac:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8002fb0:	f042 0202 	orr.w	r2, r2, #2
 8002fb4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc4:	b002      	add	sp, #8
 8002fc6:	4770      	bx	lr
 8002fc8:	58024400 	.word	0x58024400

08002fcc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	2100      	movs	r1, #0
{
 8002fd2:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fd4:	22c0      	movs	r2, #192	@ 0xc0
 8002fd6:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	9106      	str	r1, [sp, #24]
 8002fda:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002fde:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fe2:	f008 fcc6 	bl	800b972 <memset>
  if(hadc->Instance==ADC1)
 8002fe6:	4b31      	ldr	r3, [pc, #196]	@ (80030ac <HAL_ADC_MspInit+0xe0>)
 8002fe8:	6822      	ldr	r2, [r4, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d001      	beq.n	8002ff2 <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002fee:	b038      	add	sp, #224	@ 0xe0
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff8:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ffa:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8002ffe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003002:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003004:	f004 f972 	bl	80072ec <HAL_RCCEx_PeriphCLKConfig>
 8003008:	2800      	cmp	r0, #0
 800300a:	d148      	bne.n	800309e <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_ADC12_CLK_ENABLE();
 800300c:	4b28      	ldr	r3, [pc, #160]	@ (80030b0 <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA1_Stream0;
 8003012:	4d28      	ldr	r5, [pc, #160]	@ (80030b4 <HAL_ADC_MspInit+0xe8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003014:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003018:	f042 0220 	orr.w	r2, r2, #32
 800301c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8003020:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8003024:	f002 0220 	and.w	r2, r2, #32
 8003028:	9200      	str	r2, [sp, #0]
 800302a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800302c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003038:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003046:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003048:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304a:	481b      	ldr	r0, [pc, #108]	@ (80030b8 <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800304c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003050:	f003 f856 	bl	8006100 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8003054:	4a19      	ldr	r2, [pc, #100]	@ (80030bc <HAL_ADC_MspInit+0xf0>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003056:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003058:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800305a:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800305c:	e885 004c 	stmia.w	r5, {r2, r3, r6}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003060:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003064:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003068:	e9c5 6203 	strd	r6, r2, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800306c:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800306e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003072:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003076:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800307a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800307e:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003080:	f001 fde8 	bl	8004c54 <HAL_DMA_Init>
 8003084:	b970      	cbnz	r0, 80030a4 <HAL_ADC_MspInit+0xd8>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800308a:	64e5      	str	r5, [r4, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800308c:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800308e:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003090:	f001 fa98 	bl	80045c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003094:	2012      	movs	r0, #18
 8003096:	f001 fad1 	bl	800463c <HAL_NVIC_EnableIRQ>
}
 800309a:	b038      	add	sp, #224	@ 0xe0
 800309c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800309e:	f7ff fc41 	bl	8002924 <Error_Handler>
 80030a2:	e7b3      	b.n	800300c <HAL_ADC_MspInit+0x40>
      Error_Handler();
 80030a4:	f7ff fc3e 	bl	8002924 <Error_Handler>
 80030a8:	e7ed      	b.n	8003086 <HAL_ADC_MspInit+0xba>
 80030aa:	bf00      	nop
 80030ac:	40022000 	.word	0x40022000
 80030b0:	58024400 	.word	0x58024400
 80030b4:	2406d518 	.word	0x2406d518
 80030b8:	58020000 	.word	0x58020000
 80030bc:	40020010 	.word	0x40020010

080030c0 <HAL_DAC_MspInit>:
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80030c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003174 <HAL_DAC_MspInit+0xb4>)
 80030c2:	6802      	ldr	r2, [r0, #0]
{
 80030c4:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 80030c6:	429a      	cmp	r2, r3
{
 80030c8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ca:	f04f 0400 	mov.w	r4, #0
 80030ce:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80030d2:	9404      	str	r4, [sp, #16]
 80030d4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 80030d8:	d001      	beq.n	80030de <HAL_DAC_MspInit+0x1e>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 80030da:	b008      	add	sp, #32
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 80030de:	4b26      	ldr	r3, [pc, #152]	@ (8003178 <HAL_DAC_MspInit+0xb8>)
 80030e0:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e2:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80030e4:	4e25      	ldr	r6, [pc, #148]	@ (800317c <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 80030e6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80030ea:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80030ee:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80030f2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80030f6:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80030fa:	9200      	str	r2, [sp, #0]
 80030fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800310a:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003116:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003118:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	4819      	ldr	r0, [pc, #100]	@ (8003180 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800311c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f002 ffee 	bl	8006100 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8003124:	4a17      	ldr	r2, [pc, #92]	@ (8003184 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003126:	2343      	movs	r3, #67	@ 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003128:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800312a:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800312c:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312e:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8003130:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003134:	2240      	movs	r2, #64	@ 0x40
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800313a:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800313c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003140:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003146:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800314a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800314e:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003150:	f001 fd80 	bl	8004c54 <HAL_DMA_Init>
 8003154:	b958      	cbnz	r0, 800316e <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003158:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800315a:	2036      	movs	r0, #54	@ 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800315c:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800315e:	4611      	mov	r1, r2
 8003160:	f001 fa30 	bl	80045c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003164:	2036      	movs	r0, #54	@ 0x36
 8003166:	f001 fa69 	bl	800463c <HAL_NVIC_EnableIRQ>
}
 800316a:	b008      	add	sp, #32
 800316c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800316e:	f7ff fbd9 	bl	8002924 <Error_Handler>
 8003172:	e7f0      	b.n	8003156 <HAL_DAC_MspInit+0x96>
 8003174:	40007400 	.word	0x40007400
 8003178:	58024400 	.word	0x58024400
 800317c:	2406d48c 	.word	0x2406d48c
 8003180:	58020000 	.word	0x58020000
 8003184:	40020028 	.word	0x40020028

08003188 <HAL_TIM_Base_MspInit>:
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 8003188:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <HAL_TIM_Base_MspInit+0x2c>)
 800318a:	6802      	ldr	r2, [r0, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d000      	beq.n	8003192 <HAL_TIM_Base_MspInit+0xa>
 8003190:	4770      	bx	lr
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003192:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HAL_TIM_Base_MspInit+0x30>)
{
 8003194:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003196:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800319a:	f042 0202 	orr.w	r2, r2, #2
 800319e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80031a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 80031ae:	b002      	add	sp, #8
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40010400 	.word	0x40010400
 80031b8:	58024400 	.word	0x58024400

080031bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031bc:	b5d0      	push	{r4, r6, r7, lr}
 80031be:	b0bc      	sub	sp, #240	@ 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	2100      	movs	r1, #0
{
 80031c2:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031c4:	22c0      	movs	r2, #192	@ 0xc0
 80031c6:	a80c      	add	r0, sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	910a      	str	r1, [sp, #40]	@ 0x28
 80031ca:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80031ce:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031d2:	f008 fbce 	bl	800b972 <memset>
  if(huart->Instance==USART1)
 80031d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003310 <HAL_UART_MspInit+0x154>)
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80031de:	4a4d      	ldr	r2, [pc, #308]	@ (8003314 <HAL_UART_MspInit+0x158>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d03d      	beq.n	8003260 <HAL_UART_MspInit+0xa4>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80031e4:	b03c      	add	sp, #240	@ 0xf0
 80031e6:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031e8:	2201      	movs	r2, #1
 80031ea:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ec:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031f2:	f004 f87b 	bl	80072ec <HAL_RCCEx_PeriphCLKConfig>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	f040 8083 	bne.w	8003302 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART1_CLK_ENABLE();
 80031fc:	4b46      	ldr	r3, [pc, #280]	@ (8003318 <HAL_UART_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031fe:	f44f 66c0 	mov.w	r6, #1536	@ 0x600
 8003202:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003204:	2407      	movs	r4, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8003206:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	a906      	add	r1, sp, #24
 800320c:	4843      	ldr	r0, [pc, #268]	@ (800331c <HAL_UART_MspInit+0x160>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800320e:	f042 0210 	orr.w	r2, r2, #16
 8003212:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8003216:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800321a:	f002 0210 	and.w	r2, r2, #16
 800321e:	9201      	str	r2, [sp, #4]
 8003220:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003222:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800322e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003232:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003234:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003238:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800323c:	2600      	movs	r6, #0
 800323e:	2700      	movs	r7, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003240:	9302      	str	r3, [sp, #8]
 8003242:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003244:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003248:	f002 ff5a 	bl	8006100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800324c:	2200      	movs	r2, #0
 800324e:	2025      	movs	r0, #37	@ 0x25
 8003250:	4611      	mov	r1, r2
 8003252:	f001 f9b7 	bl	80045c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003256:	2025      	movs	r0, #37	@ 0x25
 8003258:	f001 f9f0 	bl	800463c <HAL_NVIC_EnableIRQ>
}
 800325c:	b03c      	add	sp, #240	@ 0xf0
 800325e:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003260:	2202      	movs	r2, #2
 8003262:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003264:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003266:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800326a:	f004 f83f 	bl	80072ec <HAL_RCCEx_PeriphCLKConfig>
 800326e:	2800      	cmp	r0, #0
 8003270:	d14a      	bne.n	8003308 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003272:	4b29      	ldr	r3, [pc, #164]	@ (8003318 <HAL_UART_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003274:	2004      	movs	r0, #4
 8003276:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003278:	2407      	movs	r4, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 800327a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800327e:	2600      	movs	r6, #0
 8003280:	2702      	movs	r7, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 8003282:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003286:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800328a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800328e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003292:	9203      	str	r2, [sp, #12]
 8003294:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80032a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80032a6:	f002 0201 	and.w	r2, r2, #1
 80032aa:	9204      	str	r2, [sp, #16]
 80032ac:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80032b2:	f042 0208 	orr.w	r2, r2, #8
 80032b6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80032ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032be:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c0:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	a906      	add	r1, sp, #24
 80032cc:	4813      	ldr	r0, [pc, #76]	@ (800331c <HAL_UART_MspInit+0x160>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ce:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032d0:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d4:	f002 ff14 	bl	8006100 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032d8:	2302      	movs	r3, #2
 80032da:	2240      	movs	r2, #64	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032dc:	a906      	add	r1, sp, #24
 80032de:	4810      	ldr	r0, [pc, #64]	@ (8003320 <HAL_UART_MspInit+0x164>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032e0:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80032e6:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ea:	f002 ff09 	bl	8006100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2026      	movs	r0, #38	@ 0x26
 80032f2:	4611      	mov	r1, r2
 80032f4:	f001 f966 	bl	80045c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032f8:	2026      	movs	r0, #38	@ 0x26
 80032fa:	f001 f99f 	bl	800463c <HAL_NVIC_EnableIRQ>
}
 80032fe:	b03c      	add	sp, #240	@ 0xf0
 8003300:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8003302:	f7ff fb0f 	bl	8002924 <Error_Handler>
 8003306:	e779      	b.n	80031fc <HAL_UART_MspInit+0x40>
      Error_Handler();
 8003308:	f7ff fb0c 	bl	8002924 <Error_Handler>
 800330c:	e7b1      	b.n	8003272 <HAL_UART_MspInit+0xb6>
 800330e:	bf00      	nop
 8003310:	40011000 	.word	0x40011000
 8003314:	40004400 	.word	0x40004400
 8003318:	58024400 	.word	0x58024400
 800331c:	58020000 	.word	0x58020000
 8003320:	58020c00 	.word	0x58020c00

08003324 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8003324:	4836      	ldr	r0, [pc, #216]	@ (8003400 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003326:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003328:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 800332a:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800332c:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800332e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003332:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003336:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8003338:	b109      	cbz	r1, 800333e <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800333a:	b038      	add	sp, #224	@ 0xe0
 800333c:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 800333e:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003340:	22b8      	movs	r2, #184	@ 0xb8
  FMC_Initialized = 1;
 8003342:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003344:	a80a      	add	r0, sp, #40	@ 0x28
 8003346:	f008 fb14 	bl	800b972 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800334a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800334e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003350:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003352:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003356:	f003 ffc9 	bl	80072ec <HAL_RCCEx_PeriphCLKConfig>
 800335a:	2800      	cmp	r0, #0
 800335c:	d14c      	bne.n	80033f8 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 800335e:	4b29      	ldr	r3, [pc, #164]	@ (8003404 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003360:	f64f 003f 	movw	r0, #63551	@ 0xf83f
 8003364:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003366:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8003368:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800336c:	2600      	movs	r6, #0
 800336e:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8003370:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003374:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8003378:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800337c:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 800337e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003382:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003386:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003388:	a902      	add	r1, sp, #8
 800338a:	481f      	ldr	r0, [pc, #124]	@ (8003408 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800338c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800338e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003392:	f002 feb5 	bl	8006100 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8003396:	222c      	movs	r2, #44	@ 0x2c
 8003398:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800339a:	a902      	add	r1, sp, #8
 800339c:	481b      	ldr	r0, [pc, #108]	@ (800340c <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800339e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 80033a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80033a8:	f002 feaa 	bl	8006100 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80033ac:	f248 1237 	movw	r2, #33079	@ 0x8137
 80033b0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033b2:	a902      	add	r1, sp, #8
 80033b4:	4816      	ldr	r0, [pc, #88]	@ (8003410 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033b6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80033b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033c0:	f002 fe9e 	bl	8006100 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80033c4:	f64f 7283 	movw	r2, #65411	@ 0xff83
 80033c8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033ca:	a902      	add	r1, sp, #8
 80033cc:	4811      	ldr	r0, [pc, #68]	@ (8003414 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033ce:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80033d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033d8:	f002 fe92 	bl	8006100 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80033dc:	f24c 7203 	movw	r2, #50947	@ 0xc703
 80033e0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033e2:	a902      	add	r1, sp, #8
 80033e4:	480c      	ldr	r0, [pc, #48]	@ (8003418 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033e6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80033e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80033ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f0:	f002 fe86 	bl	8006100 <HAL_GPIO_Init>
}
 80033f4:	b038      	add	sp, #224	@ 0xe0
 80033f6:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 80033f8:	f7ff fa94 	bl	8002924 <Error_Handler>
 80033fc:	e7af      	b.n	800335e <HAL_SDRAM_MspInit+0x3a>
 80033fe:	bf00      	nop
 8003400:	2406f5f4 	.word	0x2406f5f4
 8003404:	58024400 	.word	0x58024400
 8003408:	58021400 	.word	0x58021400
 800340c:	58021c00 	.word	0x58021c00
 8003410:	58021800 	.word	0x58021800
 8003414:	58021000 	.word	0x58021000
 8003418:	58020c00 	.word	0x58020c00

0800341c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800341c:	e7fe      	b.n	800341c <NMI_Handler>
 800341e:	bf00      	nop

08003420 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003420:	e7fe      	b.n	8003420 <HardFault_Handler>
 8003422:	bf00      	nop

08003424 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003424:	e7fe      	b.n	8003424 <MemManage_Handler>
 8003426:	bf00      	nop

08003428 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003428:	e7fe      	b.n	8003428 <BusFault_Handler>
 800342a:	bf00      	nop

0800342c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800342c:	e7fe      	b.n	800342c <UsageFault_Handler>
 800342e:	bf00      	nop

08003430 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop

08003434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop

08003438 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800343c:	f000 b968 	b.w	8003710 <HAL_IncTick>

08003440 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003440:	4801      	ldr	r0, [pc, #4]	@ (8003448 <DMA1_Stream0_IRQHandler+0x8>)
 8003442:	f002 bc4b 	b.w	8005cdc <HAL_DMA_IRQHandler>
 8003446:	bf00      	nop
 8003448:	2406d518 	.word	0x2406d518

0800344c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800344c:	4801      	ldr	r0, [pc, #4]	@ (8003454 <DMA1_Stream1_IRQHandler+0x8>)
 800344e:	f002 bc45 	b.w	8005cdc <HAL_DMA_IRQHandler>
 8003452:	bf00      	nop
 8003454:	2406d48c 	.word	0x2406d48c

08003458 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003458:	4801      	ldr	r0, [pc, #4]	@ (8003460 <ADC_IRQHandler+0x8>)
 800345a:	f000 b97b 	b.w	8003754 <HAL_ADC_IRQHandler>
 800345e:	bf00      	nop
 8003460:	2406d590 	.word	0x2406d590

08003464 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003464:	4801      	ldr	r0, [pc, #4]	@ (800346c <USART1_IRQHandler+0x8>)
 8003466:	f005 bd1b 	b.w	8008ea0 <HAL_UART_IRQHandler>
 800346a:	bf00      	nop
 800346c:	2406d3ac 	.word	0x2406d3ac

08003470 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003470:	4801      	ldr	r0, [pc, #4]	@ (8003478 <USART2_IRQHandler+0x8>)
 8003472:	f005 bd15 	b.w	8008ea0 <HAL_UART_IRQHandler>
 8003476:	bf00      	nop
 8003478:	2406d318 	.word	0x2406d318

0800347c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800347c:	4801      	ldr	r0, [pc, #4]	@ (8003484 <TIM6_DAC_IRQHandler+0x8>)
 800347e:	f001 ba01 	b.w	8004884 <HAL_DAC_IRQHandler>
 8003482:	bf00      	nop
 8003484:	2406d504 	.word	0x2406d504

08003488 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003488:	2001      	movs	r0, #1
 800348a:	4770      	bx	lr

0800348c <_kill>:

int _kill(int pid, int sig)
{
 800348c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800348e:	f008 fae9 	bl	800ba64 <__errno>
 8003492:	2216      	movs	r2, #22
 8003494:	4603      	mov	r3, r0
  return -1;
}
 8003496:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 800349a:	601a      	str	r2, [r3, #0]
}
 800349c:	bd08      	pop	{r3, pc}
 800349e:	bf00      	nop

080034a0 <_exit>:

void _exit (int status)
{
 80034a0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80034a2:	f008 fadf 	bl	800ba64 <__errno>
 80034a6:	2316      	movs	r3, #22
 80034a8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80034aa:	e7fe      	b.n	80034aa <_exit+0xa>

080034ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ac:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ae:	1e16      	subs	r6, r2, #0
 80034b0:	dd07      	ble.n	80034c2 <_read+0x16>
 80034b2:	460c      	mov	r4, r1
 80034b4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80034b6:	f3af 8000 	nop.w
 80034ba:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034be:	42a5      	cmp	r5, r4
 80034c0:	d1f9      	bne.n	80034b6 <_read+0xa>
  }

  return len;
}
 80034c2:	4630      	mov	r0, r6
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	bf00      	nop

080034c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034c8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ca:	1e16      	subs	r6, r2, #0
 80034cc:	dd07      	ble.n	80034de <_write+0x16>
 80034ce:	460c      	mov	r4, r1
 80034d0:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80034d2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80034d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034da:	42a5      	cmp	r5, r4
 80034dc:	d1f9      	bne.n	80034d2 <_write+0xa>
  }
  return len;
}
 80034de:	4630      	mov	r0, r6
 80034e0:	bd70      	pop	{r4, r5, r6, pc}
 80034e2:	bf00      	nop

080034e4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop

080034ec <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80034ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80034f0:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80034f2:	604b      	str	r3, [r1, #4]
}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop

080034f8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80034f8:	2001      	movs	r0, #1
 80034fa:	4770      	bx	lr

080034fc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80034fc:	2000      	movs	r0, #0
 80034fe:	4770      	bx	lr

08003500 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003500:	490d      	ldr	r1, [pc, #52]	@ (8003538 <_sbrk+0x38>)
{
 8003502:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003504:	4a0d      	ldr	r2, [pc, #52]	@ (800353c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8003506:	6808      	ldr	r0, [r1, #0]
{
 8003508:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800350a:	4c0d      	ldr	r4, [pc, #52]	@ (8003540 <_sbrk+0x40>)
 800350c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800350e:	b120      	cbz	r0, 800351a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003510:	4403      	add	r3, r0
 8003512:	4293      	cmp	r3, r2
 8003514:	d807      	bhi.n	8003526 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003516:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8003518:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800351a:	4c0a      	ldr	r4, [pc, #40]	@ (8003544 <_sbrk+0x44>)
 800351c:	4620      	mov	r0, r4
 800351e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003520:	4403      	add	r3, r0
 8003522:	4293      	cmp	r3, r2
 8003524:	d9f7      	bls.n	8003516 <_sbrk+0x16>
    errno = ENOMEM;
 8003526:	f008 fa9d 	bl	800ba64 <__errno>
 800352a:	220c      	movs	r2, #12
 800352c:	4603      	mov	r3, r0
    return (void *)-1;
 800352e:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8003532:	601a      	str	r2, [r3, #0]
}
 8003534:	bd10      	pop	{r4, pc}
 8003536:	bf00      	nop
 8003538:	2406f5f8 	.word	0x2406f5f8
 800353c:	24080000 	.word	0x24080000
 8003540:	00000400 	.word	0x00000400
 8003544:	2406f750 	.word	0x2406f750

08003548 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003548:	4927      	ldr	r1, [pc, #156]	@ (80035e8 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800354a:	4a28      	ldr	r2, [pc, #160]	@ (80035ec <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800354c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8003550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8003554:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	2b06      	cmp	r3, #6
 8003562:	d805      	bhi.n	8003570 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003564:	6813      	ldr	r3, [r2, #0]
 8003566:	f023 030f 	bic.w	r3, r3, #15
 800356a:	f043 0307 	orr.w	r3, r3, #7
 800356e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003570:	4b1f      	ldr	r3, [pc, #124]	@ (80035f0 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003572:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003574:	4a1f      	ldr	r2, [pc, #124]	@ (80035f4 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8003576:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003578:	481c      	ldr	r0, [pc, #112]	@ (80035ec <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800357a:	f041 0101 	orr.w	r1, r1, #1
 800357e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003580:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003582:	6819      	ldr	r1, [r3, #0]
 8003584:	400a      	ands	r2, r1
 8003586:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003588:	6803      	ldr	r3, [r0, #0]
 800358a:	071b      	lsls	r3, r3, #28
 800358c:	d505      	bpl.n	800359a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800358e:	6803      	ldr	r3, [r0, #0]
 8003590:	f023 030f 	bic.w	r3, r3, #15
 8003594:	f043 0307 	orr.w	r3, r3, #7
 8003598:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800359a:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <SystemInit+0xa8>)
 800359c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800359e:	4916      	ldr	r1, [pc, #88]	@ (80035f8 <SystemInit+0xb0>)
  RCC->PLLCFGR = 0x01FF0000;
 80035a0:	4816      	ldr	r0, [pc, #88]	@ (80035fc <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 80035a2:	4c17      	ldr	r4, [pc, #92]	@ (8003600 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 80035a4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80035a6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80035a8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80035aa:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80035ac:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80035ae:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80035b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80035b2:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80035b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80035b6:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80035b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035ba:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80035bc:	4811      	ldr	r0, [pc, #68]	@ (8003604 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 80035be:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80035c2:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 80035c4:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80035c6:	6803      	ldr	r3, [r0, #0]
 80035c8:	f36f 030f 	bfc	r3, #0, #16
 80035cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035d0:	d203      	bcs.n	80035da <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80035d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <SystemInit+0xc0>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80035da:	4b0c      	ldr	r3, [pc, #48]	@ (800360c <SystemInit+0xc4>)
 80035dc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80035e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80035e4:	601a      	str	r2, [r3, #0]
}
 80035e6:	4770      	bx	lr
 80035e8:	e000ed00 	.word	0xe000ed00
 80035ec:	52002000 	.word	0x52002000
 80035f0:	58024400 	.word	0x58024400
 80035f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80035f8:	01010280 	.word	0x01010280
 80035fc:	01ff0000 	.word	0x01ff0000
 8003600:	02020200 	.word	0x02020200
 8003604:	5c001000 	.word	0x5c001000
 8003608:	51008000 	.word	0x51008000
 800360c:	52004000 	.word	0x52004000

08003610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003610:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003648 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003614:	f7ff ff98 	bl	8003548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003618:	480c      	ldr	r0, [pc, #48]	@ (800364c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800361a:	490d      	ldr	r1, [pc, #52]	@ (8003650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800361c:	4a0d      	ldr	r2, [pc, #52]	@ (8003654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800361e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003620:	e002      	b.n	8003628 <LoopCopyDataInit>

08003622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003626:	3304      	adds	r3, #4

08003628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800362a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800362c:	d3f9      	bcc.n	8003622 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800362e:	4a0a      	ldr	r2, [pc, #40]	@ (8003658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003630:	4c0a      	ldr	r4, [pc, #40]	@ (800365c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003634:	e001      	b.n	800363a <LoopFillZerobss>

08003636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003638:	3204      	adds	r2, #4

0800363a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800363a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800363c:	d3fb      	bcc.n	8003636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800363e:	f008 fa17 	bl	800ba70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003642:	f7fe fd45 	bl	80020d0 <main>
  bx  lr
 8003646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003648:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800364c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003650:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8003654:	08084518 	.word	0x08084518
  ldr r2, =_sbss
 8003658:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800365c:	2406f74c 	.word	0x2406f74c

08003660 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003660:	e7fe      	b.n	8003660 <ADC3_IRQHandler>
	...

08003664 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003664:	4b0f      	ldr	r3, [pc, #60]	@ (80036a4 <HAL_InitTick+0x40>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	b90b      	cbnz	r3, 800366e <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800366a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800366c:	4770      	bx	lr
{
 800366e:	b510      	push	{r4, lr}
 8003670:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003672:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003676:	4a0c      	ldr	r2, [pc, #48]	@ (80036a8 <HAL_InitTick+0x44>)
 8003678:	fbb0 f3f3 	udiv	r3, r0, r3
 800367c:	6810      	ldr	r0, [r2, #0]
 800367e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003682:	f000 ffe9 	bl	8004658 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003686:	2c0f      	cmp	r4, #15
 8003688:	d800      	bhi.n	800368c <HAL_InitTick+0x28>
 800368a:	b108      	cbz	r0, 8003690 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800368c:	2001      	movs	r0, #1
}
 800368e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003690:	2200      	movs	r2, #0
 8003692:	4621      	mov	r1, r4
 8003694:	f04f 30ff 	mov.w	r0, #4294967295
 8003698:	f000 ff94 	bl	80045c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800369c:	4b03      	ldr	r3, [pc, #12]	@ (80036ac <HAL_InitTick+0x48>)
 800369e:	2000      	movs	r0, #0
 80036a0:	601c      	str	r4, [r3, #0]
}
 80036a2:	bd10      	pop	{r4, pc}
 80036a4:	24000024 	.word	0x24000024
 80036a8:	24000020 	.word	0x24000020
 80036ac:	24000028 	.word	0x24000028

080036b0 <HAL_Init>:
{
 80036b0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b2:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036b4:	4c12      	ldr	r4, [pc, #72]	@ (8003700 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b6:	f000 ff73 	bl	80045a0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036ba:	f003 faaf 	bl	8006c1c <HAL_RCC_GetSysClockFreq>
 80036be:	4b11      	ldr	r3, [pc, #68]	@ (8003704 <HAL_Init+0x54>)
 80036c0:	4911      	ldr	r1, [pc, #68]	@ (8003708 <HAL_Init+0x58>)
 80036c2:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036c4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036c6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036ca:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036ce:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036d0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036d2:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 80036d6:	490d      	ldr	r1, [pc, #52]	@ (800370c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036d8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036dc:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036de:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80036e2:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036e4:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036e6:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036e8:	f7ff ffbc 	bl	8003664 <HAL_InitTick>
 80036ec:	b110      	cbz	r0, 80036f4 <HAL_Init+0x44>
    return HAL_ERROR;
 80036ee:	2401      	movs	r4, #1
}
 80036f0:	4620      	mov	r0, r4
 80036f2:	bd10      	pop	{r4, pc}
 80036f4:	4604      	mov	r4, r0
  HAL_MspInit();
 80036f6:	f7ff fc57 	bl	8002fa8 <HAL_MspInit>
}
 80036fa:	4620      	mov	r0, r4
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	bf00      	nop
 8003700:	2400001c 	.word	0x2400001c
 8003704:	58024400 	.word	0x58024400
 8003708:	08070d44 	.word	0x08070d44
 800370c:	24000020 	.word	0x24000020

08003710 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003710:	4a03      	ldr	r2, [pc, #12]	@ (8003720 <HAL_IncTick+0x10>)
 8003712:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <HAL_IncTick+0x14>)
 8003714:	6811      	ldr	r1, [r2, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	440b      	add	r3, r1
 800371a:	6013      	str	r3, [r2, #0]
}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	2406f5fc 	.word	0x2406f5fc
 8003724:	24000024 	.word	0x24000024

08003728 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003728:	4b01      	ldr	r3, [pc, #4]	@ (8003730 <HAL_GetTick+0x8>)
 800372a:	6818      	ldr	r0, [r3, #0]
}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	2406f5fc 	.word	0x2406f5fc

08003734 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003734:	4b01      	ldr	r3, [pc, #4]	@ (800373c <HAL_GetREVID+0x8>)
 8003736:	6818      	ldr	r0, [r3, #0]
}
 8003738:	0c00      	lsrs	r0, r0, #16
 800373a:	4770      	bx	lr
 800373c:	5c001000 	.word	0x5c001000

08003740 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003740:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8003742:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003744:	f7fe fbd8 	bl	8001ef8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003748:	bd08      	pop	{r3, pc}
 800374a:	bf00      	nop

0800374c <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop

08003750 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <HAL_ADC_IRQHandler>:
{
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003756:	4a8e      	ldr	r2, [pc, #568]	@ (8003990 <HAL_ADC_IRQHandler+0x23c>)
{
 8003758:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800375a:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800375c:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 800375e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003760:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003762:	f000 8095 	beq.w	8003890 <HAL_ADC_IRQHandler+0x13c>
 8003766:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800376a:	4293      	cmp	r3, r2
 800376c:	f000 8090 	beq.w	8003890 <HAL_ADC_IRQHandler+0x13c>
 8003770:	4a88      	ldr	r2, [pc, #544]	@ (8003994 <HAL_ADC_IRQHandler+0x240>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003772:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003774:	07a9      	lsls	r1, r5, #30
 8003776:	f007 071f 	and.w	r7, r7, #31
 800377a:	d502      	bpl.n	8003782 <HAL_ADC_IRQHandler+0x2e>
 800377c:	07b2      	lsls	r2, r6, #30
 800377e:	f100 80aa 	bmi.w	80038d6 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003782:	0769      	lsls	r1, r5, #29
 8003784:	d579      	bpl.n	800387a <HAL_ADC_IRQHandler+0x126>
 8003786:	0772      	lsls	r2, r6, #29
 8003788:	d577      	bpl.n	800387a <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800378a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800378c:	06d2      	lsls	r2, r2, #27
 800378e:	d403      	bmi.n	8003798 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003790:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003796:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800379e:	d11c      	bne.n	80037da <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037a0:	4a7d      	ldr	r2, [pc, #500]	@ (8003998 <HAL_ADC_IRQHandler+0x244>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	f000 80e7 	beq.w	8003976 <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037a8:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80037aa:	0491      	lsls	r1, r2, #18
 80037ac:	d415      	bmi.n	80037da <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	0712      	lsls	r2, r2, #28
 80037b2:	d512      	bpl.n	80037da <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	0750      	lsls	r0, r2, #29
 80037b8:	f100 80f2 	bmi.w	80039a0 <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	f022 020c 	bic.w	r2, r2, #12
 80037c2:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80037c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037ca:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80037ce:	04d9      	lsls	r1, r3, #19
 80037d0:	d403      	bmi.n	80037da <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80037da:	4620      	mov	r0, r4
 80037dc:	f7fe fbac 	bl	8001f38 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	220c      	movs	r2, #12
 80037e4:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80037e6:	06aa      	lsls	r2, r5, #26
 80037e8:	d54d      	bpl.n	8003886 <HAL_ADC_IRQHandler+0x132>
 80037ea:	06b0      	lsls	r0, r6, #26
 80037ec:	d54b      	bpl.n	8003886 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037f0:	06d0      	lsls	r0, r2, #27
 80037f2:	d403      	bmi.n	80037fc <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80037f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037fa:	6562      	str	r2, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037fc:	4966      	ldr	r1, [pc, #408]	@ (8003998 <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80037fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003800:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003802:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003804:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
 8003808:	d073      	beq.n	80038f2 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800380a:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800380c:	b9d2      	cbnz	r2, 8003844 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800380e:	018a      	lsls	r2, r1, #6
 8003810:	f100 80a9 	bmi.w	8003966 <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	0650      	lsls	r0, r2, #25
 8003818:	d514      	bpl.n	8003844 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800381a:	0289      	lsls	r1, r1, #10
 800381c:	d412      	bmi.n	8003844 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	0712      	lsls	r2, r2, #28
 8003822:	f100 80c8 	bmi.w	80039b6 <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800382c:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800382e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003834:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003836:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003838:	05d8      	lsls	r0, r3, #23
 800383a:	d403      	bmi.n	8003844 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800383c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003844:	4620      	mov	r0, r4
 8003846:	f000 fe3f 	bl	80044c8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	2260      	movs	r2, #96	@ 0x60
 800384e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003850:	0629      	lsls	r1, r5, #24
 8003852:	d501      	bpl.n	8003858 <HAL_ADC_IRQHandler+0x104>
 8003854:	0632      	lsls	r2, r6, #24
 8003856:	d45f      	bmi.n	8003918 <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003858:	05e8      	lsls	r0, r5, #23
 800385a:	d501      	bpl.n	8003860 <HAL_ADC_IRQHandler+0x10c>
 800385c:	05f1      	lsls	r1, r6, #23
 800385e:	d466      	bmi.n	800392e <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003860:	05aa      	lsls	r2, r5, #22
 8003862:	d501      	bpl.n	8003868 <HAL_ADC_IRQHandler+0x114>
 8003864:	05b0      	lsls	r0, r6, #22
 8003866:	d44b      	bmi.n	8003900 <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003868:	06e9      	lsls	r1, r5, #27
 800386a:	d501      	bpl.n	8003870 <HAL_ADC_IRQHandler+0x11c>
 800386c:	06f2      	lsls	r2, r6, #27
 800386e:	d411      	bmi.n	8003894 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003870:	0569      	lsls	r1, r5, #21
 8003872:	d501      	bpl.n	8003878 <HAL_ADC_IRQHandler+0x124>
 8003874:	0572      	lsls	r2, r6, #21
 8003876:	d466      	bmi.n	8003946 <HAL_ADC_IRQHandler+0x1f2>
}
 8003878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800387a:	0728      	lsls	r0, r5, #28
 800387c:	d5b3      	bpl.n	80037e6 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800387e:	0731      	lsls	r1, r6, #28
 8003880:	d483      	bmi.n	800378a <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003882:	06aa      	lsls	r2, r5, #26
 8003884:	d4b1      	bmi.n	80037ea <HAL_ADC_IRQHandler+0x96>
 8003886:	0669      	lsls	r1, r5, #25
 8003888:	d5e2      	bpl.n	8003850 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800388a:	0672      	lsls	r2, r6, #25
 800388c:	d5e0      	bpl.n	8003850 <HAL_ADC_IRQHandler+0xfc>
 800388e:	e7ae      	b.n	80037ee <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003890:	4a42      	ldr	r2, [pc, #264]	@ (800399c <HAL_ADC_IRQHandler+0x248>)
 8003892:	e76e      	b.n	8003772 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003894:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003896:	b17a      	cbz	r2, 80038b8 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003898:	2f00      	cmp	r7, #0
 800389a:	d075      	beq.n	8003988 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800389c:	4a3c      	ldr	r2, [pc, #240]	@ (8003990 <HAL_ADC_IRQHandler+0x23c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	f000 8087 	beq.w	80039b2 <HAL_ADC_IRQHandler+0x25e>
 80038a4:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80038a8:	4293      	cmp	r3, r2
 80038aa:	f000 8082 	beq.w	80039b2 <HAL_ADC_IRQHandler+0x25e>
 80038ae:	4a39      	ldr	r2, [pc, #228]	@ (8003994 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80038b0:	6892      	ldr	r2, [r2, #8]
 80038b2:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 80038b6:	d00b      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_ADC_ErrorCallback(hadc);
 80038ba:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038c0:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 80038ca:	f7ff ff41 	bl	8003750 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	2210      	movs	r2, #16
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e7cc      	b.n	8003870 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80038d8:	06d8      	lsls	r0, r3, #27
 80038da:	d403      	bmi.n	80038e4 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80038dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80038de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80038e2:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80038e4:	4620      	mov	r0, r4
 80038e6:	f000 fdf7 	bl	80044d8 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	2202      	movs	r2, #2
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e747      	b.n	8003782 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038f2:	21c1      	movs	r1, #193	@ 0xc1
 80038f4:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80038f6:	07c9      	lsls	r1, r1, #31
 80038f8:	d487      	bmi.n	800380a <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038fa:	4925      	ldr	r1, [pc, #148]	@ (8003990 <HAL_ADC_IRQHandler+0x23c>)
 80038fc:	68c9      	ldr	r1, [r1, #12]
 80038fe:	e785      	b.n	800380c <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003900:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003902:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003908:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800390a:	f000 fde3 	bl	80044d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e7a7      	b.n	8003868 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003918:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800391a:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800391c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003920:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003922:	f7ff ff13 	bl	800374c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	2280      	movs	r2, #128	@ 0x80
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e794      	b.n	8003858 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800392e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003930:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003936:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003938:	f000 fdca 	bl	80044d0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e78c      	b.n	8003860 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003946:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003948:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800394c:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800394e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003952:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003954:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003956:	f042 0208 	orr.w	r2, r2, #8
 800395a:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800395c:	6019      	str	r1, [r3, #0]
}
 800395e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003962:	f000 bdb3 	b.w	80044cc <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003966:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800396a:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800396e:	4302      	orrs	r2, r0
 8003970:	f47f af68 	bne.w	8003844 <HAL_ADC_IRQHandler+0xf0>
 8003974:	e74e      	b.n	8003814 <HAL_ADC_IRQHandler+0xc0>
 8003976:	f240 2221 	movw	r2, #545	@ 0x221
 800397a:	40fa      	lsrs	r2, r7
 800397c:	07d0      	lsls	r0, r2, #31
 800397e:	f53f af13 	bmi.w	80037a8 <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003982:	4a03      	ldr	r2, [pc, #12]	@ (8003990 <HAL_ADC_IRQHandler+0x23c>)
 8003984:	68d2      	ldr	r2, [r2, #12]
 8003986:	e710      	b.n	80037aa <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	0790      	lsls	r0, r2, #30
 800398c:	d0a0      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x17c>
 800398e:	e793      	b.n	80038b8 <HAL_ADC_IRQHandler+0x164>
 8003990:	40022000 	.word	0x40022000
 8003994:	58026300 	.word	0x58026300
 8003998:	40022100 	.word	0x40022100
 800399c:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039a2:	f043 0310 	orr.w	r3, r3, #16
 80039a6:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	65a3      	str	r3, [r4, #88]	@ 0x58
 80039b0:	e713      	b.n	80037da <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80039b2:	4a05      	ldr	r2, [pc, #20]	@ (80039c8 <HAL_ADC_IRQHandler+0x274>)
 80039b4:	e77c      	b.n	80038b0 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80039b8:	f043 0310 	orr.w	r3, r3, #16
 80039bc:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80039c6:	e73d      	b.n	8003844 <HAL_ADC_IRQHandler+0xf0>
 80039c8:	40022300 	.word	0x40022300

080039cc <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039cc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80039ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039d0:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
{
 80039d6:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80039d8:	d11d      	bne.n	8003a16 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80039da:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e0:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80039e2:	680a      	ldr	r2, [r1, #0]
 80039e4:	f012 0f08 	tst.w	r2, #8
 80039e8:	68ca      	ldr	r2, [r1, #12]
 80039ea:	d01b      	beq.n	8003a24 <ADC_DMAConvCplt+0x58>
 80039ec:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80039f0:	d10d      	bne.n	8003a0e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80039f2:	68ca      	ldr	r2, [r1, #12]
 80039f4:	0494      	lsls	r4, r2, #18
 80039f6:	d40a      	bmi.n	8003a0e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039fe:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a02:	04d1      	lsls	r1, r2, #19
 8003a04:	d403      	bmi.n	8003a0e <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a06:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fa92 	bl	8001f38 <HAL_ADC_ConvCpltCallback>
}
 8003a14:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a16:	06d2      	lsls	r2, r2, #27
 8003a18:	d40a      	bmi.n	8003a30 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003a24:	0790      	lsls	r0, r2, #30
 8003a26:	d0e7      	beq.n	80039f8 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fe fa85 	bl	8001f38 <HAL_ADC_ConvCpltCallback>
 8003a2e:	e7f1      	b.n	8003a14 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fe8d 	bl	8003750 <HAL_ADC_ErrorCallback>
}
 8003a36:	bd10      	pop	{r4, pc}

08003a38 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a38:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8003a3a:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a3c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a42:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a44:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003a46:	f043 0304 	orr.w	r3, r3, #4
 8003a4a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a4c:	f7ff fe80 	bl	8003750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a50:	bd08      	pop	{r3, pc}
 8003a52:	bf00      	nop

08003a54 <HAL_ADC_ConfigChannel>:
{
 8003a54:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8003a56:	2200      	movs	r2, #0
{
 8003a58:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003a5a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003a5c:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8003a60:	2a01      	cmp	r2, #1
 8003a62:	f000 80ef 	beq.w	8003c44 <HAL_ADC_ConfigChannel+0x1f0>
 8003a66:	2401      	movs	r4, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a68:	6802      	ldr	r2, [r0, #0]
 8003a6a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003a6c:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a70:	6890      	ldr	r0, [r2, #8]
 8003a72:	0745      	lsls	r5, r0, #29
 8003a74:	d509      	bpl.n	8003a8a <HAL_ADC_ConfigChannel+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8003a78:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a7a:	f042 0220 	orr.w	r2, r2, #32
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8003a86:	b002      	add	sp, #8
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003a8a:	680d      	ldr	r5, [r1, #0]
 8003a8c:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a8e:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003a92:	db0d      	blt.n	8003ab0 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a94:	f3c5 0613 	ubfx	r6, r5, #0, #20
 8003a98:	2e00      	cmp	r6, #0
 8003a9a:	f000 80c1 	beq.w	8003c20 <HAL_ADC_ConfigChannel+0x1cc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003aa2:	b115      	cbz	r5, 8003aaa <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003aa4:	fab5 f585 	clz	r5, r5
 8003aa8:	40ac      	lsls	r4, r5
 8003aaa:	69d5      	ldr	r5, [r2, #28]
 8003aac:	432c      	orrs	r4, r5
 8003aae:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ab0:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8003ab2:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ab6:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8003aba:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003abe:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8003ac0:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ac4:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 8003ac8:	fa0c fc04 	lsl.w	ip, ip, r4
 8003acc:	40a0      	lsls	r0, r4
 8003ace:	f85e 4005 	ldr.w	r4, [lr, r5]
 8003ad2:	ea24 0c0c 	bic.w	ip, r4, ip
 8003ad6:	ea4c 0000 	orr.w	r0, ip, r0
 8003ada:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ade:	6890      	ldr	r0, [r2, #8]
 8003ae0:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ae4:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ae6:	d101      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ae8:	0700      	lsls	r0, r0, #28
 8003aea:	d542      	bpl.n	8003b72 <HAL_ADC_ConfigChannel+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003aec:	6890      	ldr	r0, [r2, #8]
 8003aee:	07c6      	lsls	r6, r0, #31
 8003af0:	d43d      	bmi.n	8003b6e <HAL_ADC_ConfigChannel+0x11a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003af2:	68cd      	ldr	r5, [r1, #12]
 8003af4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8003af6:	f005 0618 	and.w	r6, r5, #24
 8003afa:	48a9      	ldr	r0, [pc, #676]	@ (8003da0 <HAL_ADC_ConfigChannel+0x34c>)
 8003afc:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8003b00:	40f0      	lsrs	r0, r6
 8003b02:	f3c4 0613 	ubfx	r6, r4, #0, #20
 8003b06:	4020      	ands	r0, r4
 8003b08:	ea21 0106 	bic.w	r1, r1, r6
 8003b0c:	4301      	orrs	r1, r0
 8003b0e:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b12:	49a4      	ldr	r1, [pc, #656]	@ (8003da4 <HAL_ADC_ConfigChannel+0x350>)
 8003b14:	428d      	cmp	r5, r1
 8003b16:	f000 808a 	beq.w	8003c2e <HAL_ADC_ConfigChannel+0x1da>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b1a:	2c00      	cmp	r4, #0
 8003b1c:	da27      	bge.n	8003b6e <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b1e:	49a2      	ldr	r1, [pc, #648]	@ (8003da8 <HAL_ADC_ConfigChannel+0x354>)
 8003b20:	428a      	cmp	r2, r1
 8003b22:	f000 80bd 	beq.w	8003ca0 <HAL_ADC_ConfigChannel+0x24c>
 8003b26:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8003b2a:	428a      	cmp	r2, r1
 8003b2c:	f000 80b8 	beq.w	8003ca0 <HAL_ADC_ConfigChannel+0x24c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b30:	489e      	ldr	r0, [pc, #632]	@ (8003dac <HAL_ADC_ConfigChannel+0x358>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b32:	499f      	ldr	r1, [pc, #636]	@ (8003db0 <HAL_ADC_ConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b34:	6886      	ldr	r6, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b36:	688d      	ldr	r5, [r1, #8]
 8003b38:	07ed      	lsls	r5, r5, #31
 8003b3a:	d49c      	bmi.n	8003a76 <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b3c:	4d9d      	ldr	r5, [pc, #628]	@ (8003db4 <HAL_ADC_ConfigChannel+0x360>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b3e:	f006 7ce0 	and.w	ip, r6, #29360128	@ 0x1c00000
 8003b42:	42ac      	cmp	r4, r5
 8003b44:	f000 8156 	beq.w	8003df4 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b48:	4d9b      	ldr	r5, [pc, #620]	@ (8003db8 <HAL_ADC_ConfigChannel+0x364>)
 8003b4a:	42ac      	cmp	r4, r5
 8003b4c:	f000 8118 	beq.w	8003d80 <HAL_ADC_ConfigChannel+0x32c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b50:	4d9a      	ldr	r5, [pc, #616]	@ (8003dbc <HAL_ADC_ConfigChannel+0x368>)
 8003b52:	42ac      	cmp	r4, r5
 8003b54:	d10b      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b56:	0274      	lsls	r4, r6, #9
 8003b58:	d409      	bmi.n	8003b6e <HAL_ADC_ConfigChannel+0x11a>
 8003b5a:	428a      	cmp	r2, r1
 8003b5c:	d107      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b5e:	6882      	ldr	r2, [r0, #8]
 8003b60:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003b64:	ea42 020c 	orr.w	r2, r2, ip
 8003b68:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003b6c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e786      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b72:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b74:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 8003b78:	f04f 0e07 	mov.w	lr, #7
 8003b7c:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b7e:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8003b80:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b84:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003b88:	fa0e fe04 	lsl.w	lr, lr, r4
 8003b8c:	fa06 f404 	lsl.w	r4, r6, r4
 8003b90:	f85c 0005 	ldr.w	r0, [ip, r5]
 8003b94:	ea20 000e 	bic.w	r0, r0, lr
 8003b98:	4320      	orrs	r0, r4
 8003b9a:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b9e:	4888      	ldr	r0, [pc, #544]	@ (8003dc0 <HAL_ADC_ConfigChannel+0x36c>)
 8003ba0:	694d      	ldr	r5, [r1, #20]
 8003ba2:	6800      	ldr	r0, [r0, #0]
 8003ba4:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 8003ba8:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8003bac:	68d0      	ldr	r0, [r2, #12]
 8003bae:	d039      	beq.n	8003c24 <HAL_ADC_ConfigChannel+0x1d0>
 8003bb0:	f010 0f10 	tst.w	r0, #16
 8003bb4:	68d0      	ldr	r0, [r2, #12]
 8003bb6:	d035      	beq.n	8003c24 <HAL_ADC_ConfigChannel+0x1d0>
 8003bb8:	0840      	lsrs	r0, r0, #1
 8003bba:	f000 0008 	and.w	r0, r0, #8
 8003bbe:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bc0:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bc2:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bc4:	2e04      	cmp	r6, #4
 8003bc6:	d040      	beq.n	8003c4a <HAL_ADC_ConfigChannel+0x1f6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bc8:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8003bcc:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8003bd0:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 8003bd4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8003bd8:	4320      	orrs	r0, r4
 8003bda:	4328      	orrs	r0, r5
 8003bdc:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003be0:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003be2:	690d      	ldr	r5, [r1, #16]
 8003be4:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003be8:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 8003bec:	fab4 f484 	clz	r4, r4
 8003bf0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003bf4:	0964      	lsrs	r4, r4, #5
 8003bf6:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 8003bfa:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003bfe:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c00:	690d      	ldr	r5, [r1, #16]
 8003c02:	f1a0 0001 	sub.w	r0, r0, #1
 8003c06:	6914      	ldr	r4, [r2, #16]
 8003c08:	f005 051f 	and.w	r5, r5, #31
 8003c0c:	fab0 f080 	clz	r0, r0
 8003c10:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 8003c14:	0940      	lsrs	r0, r0, #5
 8003c16:	02c0      	lsls	r0, r0, #11
 8003c18:	40a8      	lsls	r0, r5
 8003c1a:	4320      	orrs	r0, r4
 8003c1c:	6110      	str	r0, [r2, #16]
}
 8003c1e:	e765      	b.n	8003aec <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003c20:	4084      	lsls	r4, r0
 8003c22:	e742      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c24:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8003c28:	0040      	lsls	r0, r0, #1
 8003c2a:	4085      	lsls	r5, r0
 8003c2c:	e7c8      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x16c>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003c2e:	495e      	ldr	r1, [pc, #376]	@ (8003da8 <HAL_ADC_ConfigChannel+0x354>)
 8003c30:	428a      	cmp	r2, r1
 8003c32:	d07a      	beq.n	8003d2a <HAL_ADC_ConfigChannel+0x2d6>
 8003c34:	4963      	ldr	r1, [pc, #396]	@ (8003dc4 <HAL_ADC_ConfigChannel+0x370>)
 8003c36:	428a      	cmp	r2, r1
 8003c38:	d040      	beq.n	8003cbc <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003c3a:	69d1      	ldr	r1, [r2, #28]
 8003c3c:	f041 0101 	orr.w	r1, r1, #1
 8003c40:	61d1      	str	r1, [r2, #28]
}
 8003c42:	e76a      	b.n	8003b1a <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8003c44:	2002      	movs	r0, #2
}
 8003c46:	b002      	add	sp, #8
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c4a:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8003c4c:	0684      	lsls	r4, r0, #26
 8003c4e:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8003c52:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8003c56:	d014      	beq.n	8003c82 <HAL_ADC_ConfigChannel+0x22e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c58:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8003c5a:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003c5e:	4284      	cmp	r4, r0
 8003c60:	d019      	beq.n	8003c96 <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c62:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8003c64:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003c68:	4284      	cmp	r4, r0
 8003c6a:	d00f      	beq.n	8003c8c <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c6c:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8003c6e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003c72:	4284      	cmp	r4, r0
 8003c74:	f47f af3a 	bne.w	8003aec <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003c78:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8003c7a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003c7e:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8003c80:	e734      	b.n	8003aec <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003c82:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8003c84:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003c88:	6610      	str	r0, [r2, #96]	@ 0x60
 8003c8a:	e7e5      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x204>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003c8c:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8003c8e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003c92:	6690      	str	r0, [r2, #104]	@ 0x68
 8003c94:	e7ea      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x218>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003c96:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8003c98:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003c9c:	6650      	str	r0, [r2, #100]	@ 0x64
 8003c9e:	e7e0      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x20e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ca0:	4949      	ldr	r1, [pc, #292]	@ (8003dc8 <HAL_ADC_ConfigChannel+0x374>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca2:	4a41      	ldr	r2, [pc, #260]	@ (8003da8 <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ca4:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca6:	6892      	ldr	r2, [r2, #8]
 8003ca8:	f012 0f01 	tst.w	r2, #1
 8003cac:	4a45      	ldr	r2, [pc, #276]	@ (8003dc4 <HAL_ADC_ConfigChannel+0x370>)
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	f47f aee1 	bne.w	8003a76 <HAL_ADC_ConfigChannel+0x22>
 8003cb4:	07d2      	lsls	r2, r2, #31
 8003cb6:	f53f aede 	bmi.w	8003a76 <HAL_ADC_ConfigChannel+0x22>
 8003cba:	e758      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003cbc:	4943      	ldr	r1, [pc, #268]	@ (8003dcc <HAL_ADC_ConfigChannel+0x378>)
 8003cbe:	428c      	cmp	r4, r1
 8003cc0:	d058      	beq.n	8003d74 <HAL_ADC_ConfigChannel+0x320>
 8003cc2:	4943      	ldr	r1, [pc, #268]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x37c>)
 8003cc4:	428c      	cmp	r4, r1
 8003cc6:	d057      	beq.n	8003d78 <HAL_ADC_ConfigChannel+0x324>
 8003cc8:	4942      	ldr	r1, [pc, #264]	@ (8003dd4 <HAL_ADC_ConfigChannel+0x380>)
 8003cca:	428c      	cmp	r4, r1
 8003ccc:	f000 80b5 	beq.w	8003e3a <HAL_ADC_ConfigChannel+0x3e6>
 8003cd0:	4941      	ldr	r1, [pc, #260]	@ (8003dd8 <HAL_ADC_ConfigChannel+0x384>)
 8003cd2:	428c      	cmp	r4, r1
 8003cd4:	f000 80b3 	beq.w	8003e3e <HAL_ADC_ConfigChannel+0x3ea>
 8003cd8:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8003cdc:	3110      	adds	r1, #16
 8003cde:	428c      	cmp	r4, r1
 8003ce0:	f000 80af 	beq.w	8003e42 <HAL_ADC_ConfigChannel+0x3ee>
 8003ce4:	493d      	ldr	r1, [pc, #244]	@ (8003ddc <HAL_ADC_ConfigChannel+0x388>)
 8003ce6:	428c      	cmp	r4, r1
 8003ce8:	f000 80ad 	beq.w	8003e46 <HAL_ADC_ConfigChannel+0x3f2>
 8003cec:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8003cf0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8003cf4:	428c      	cmp	r4, r1
 8003cf6:	f000 80a8 	beq.w	8003e4a <HAL_ADC_ConfigChannel+0x3f6>
 8003cfa:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8003cfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d02:	428c      	cmp	r4, r1
 8003d04:	f000 80a3 	beq.w	8003e4e <HAL_ADC_ConfigChannel+0x3fa>
 8003d08:	4935      	ldr	r1, [pc, #212]	@ (8003de0 <HAL_ADC_ConfigChannel+0x38c>)
 8003d0a:	428c      	cmp	r4, r1
 8003d0c:	d195      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x1e6>
 8003d0e:	4935      	ldr	r1, [pc, #212]	@ (8003de4 <HAL_ADC_ConfigChannel+0x390>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8003d14:	2900      	cmp	r1, #0
 8003d16:	d031      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 8003d18:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	fa00 f101 	lsl.w	r1, r0, r1
 8003d22:	69d0      	ldr	r0, [r2, #28]
 8003d24:	4301      	orrs	r1, r0
 8003d26:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d28:	e721      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003d2a:	4928      	ldr	r1, [pc, #160]	@ (8003dcc <HAL_ADC_ConfigChannel+0x378>)
 8003d2c:	428c      	cmp	r4, r1
 8003d2e:	d021      	beq.n	8003d74 <HAL_ADC_ConfigChannel+0x320>
 8003d30:	4927      	ldr	r1, [pc, #156]	@ (8003dd0 <HAL_ADC_ConfigChannel+0x37c>)
 8003d32:	428c      	cmp	r4, r1
 8003d34:	d020      	beq.n	8003d78 <HAL_ADC_ConfigChannel+0x324>
 8003d36:	4927      	ldr	r1, [pc, #156]	@ (8003dd4 <HAL_ADC_ConfigChannel+0x380>)
 8003d38:	428c      	cmp	r4, r1
 8003d3a:	d07e      	beq.n	8003e3a <HAL_ADC_ConfigChannel+0x3e6>
 8003d3c:	4926      	ldr	r1, [pc, #152]	@ (8003dd8 <HAL_ADC_ConfigChannel+0x384>)
 8003d3e:	428c      	cmp	r4, r1
 8003d40:	d07d      	beq.n	8003e3e <HAL_ADC_ConfigChannel+0x3ea>
 8003d42:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8003d46:	3110      	adds	r1, #16
 8003d48:	428c      	cmp	r4, r1
 8003d4a:	d07a      	beq.n	8003e42 <HAL_ADC_ConfigChannel+0x3ee>
 8003d4c:	4923      	ldr	r1, [pc, #140]	@ (8003ddc <HAL_ADC_ConfigChannel+0x388>)
 8003d4e:	428c      	cmp	r4, r1
 8003d50:	d079      	beq.n	8003e46 <HAL_ADC_ConfigChannel+0x3f2>
 8003d52:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8003d56:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8003d5a:	428c      	cmp	r4, r1
 8003d5c:	d075      	beq.n	8003e4a <HAL_ADC_ConfigChannel+0x3f6>
 8003d5e:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8003d62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d66:	428c      	cmp	r4, r1
 8003d68:	d071      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x3fa>
 8003d6a:	491f      	ldr	r1, [pc, #124]	@ (8003de8 <HAL_ADC_ConfigChannel+0x394>)
 8003d6c:	428c      	cmp	r4, r1
 8003d6e:	d1cb      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x2b4>
 8003d70:	491e      	ldr	r1, [pc, #120]	@ (8003dec <HAL_ADC_ConfigChannel+0x398>)
 8003d72:	e7cd      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x2bc>
 8003d74:	2101      	movs	r1, #1
 8003d76:	e7cb      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x2bc>
 8003d78:	491d      	ldr	r1, [pc, #116]	@ (8003df0 <HAL_ADC_ConfigChannel+0x39c>)
 8003d7a:	e7c9      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x2bc>
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	e7d0      	b.n	8003d22 <HAL_ADC_ConfigChannel+0x2ce>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d80:	01f5      	lsls	r5, r6, #7
 8003d82:	f53f aef4 	bmi.w	8003b6e <HAL_ADC_ConfigChannel+0x11a>
 8003d86:	428a      	cmp	r2, r1
 8003d88:	f47f aef1 	bne.w	8003b6e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d8c:	6882      	ldr	r2, [r0, #8]
 8003d8e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003d92:	ea42 020c 	orr.w	r2, r2, ip
 8003d96:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003d9a:	6082      	str	r2, [r0, #8]
}
 8003d9c:	e6e7      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x11a>
 8003d9e:	bf00      	nop
 8003da0:	000fffff 	.word	0x000fffff
 8003da4:	47ff0000 	.word	0x47ff0000
 8003da8:	40022000 	.word	0x40022000
 8003dac:	58026300 	.word	0x58026300
 8003db0:	58026000 	.word	0x58026000
 8003db4:	cb840000 	.word	0xcb840000
 8003db8:	c7520000 	.word	0xc7520000
 8003dbc:	cfb80000 	.word	0xcfb80000
 8003dc0:	5c001000 	.word	0x5c001000
 8003dc4:	40022100 	.word	0x40022100
 8003dc8:	40022300 	.word	0x40022300
 8003dcc:	04300002 	.word	0x04300002
 8003dd0:	08600004 	.word	0x08600004
 8003dd4:	0c900008 	.word	0x0c900008
 8003dd8:	10c00010 	.word	0x10c00010
 8003ddc:	2a000400 	.word	0x2a000400
 8003de0:	4b840000 	.word	0x4b840000
 8003de4:	4fb80000 	.word	0x4fb80000
 8003de8:	43210000 	.word	0x43210000
 8003dec:	47520000 	.word	0x47520000
 8003df0:	19200040 	.word	0x19200040
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003df4:	0236      	lsls	r6, r6, #8
 8003df6:	f53f aeba 	bmi.w	8003b6e <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dfa:	428a      	cmp	r2, r1
 8003dfc:	f47f aeb7 	bne.w	8003b6e <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003e00:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e02:	4914      	ldr	r1, [pc, #80]	@ (8003e54 <HAL_ADC_ConfigChannel+0x400>)
 8003e04:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003e08:	ea42 020c 	orr.w	r2, r2, ip
 8003e0c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003e10:	6082      	str	r2, [r0, #8]
 8003e12:	680a      	ldr	r2, [r1, #0]
 8003e14:	4910      	ldr	r1, [pc, #64]	@ (8003e58 <HAL_ADC_ConfigChannel+0x404>)
 8003e16:	0992      	lsrs	r2, r2, #6
 8003e18:	fba1 1202 	umull	r1, r2, r1, r2
 8003e1c:	0992      	lsrs	r2, r2, #6
 8003e1e:	3201      	adds	r2, #1
 8003e20:	0052      	lsls	r2, r2, #1
 8003e22:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003e24:	9a01      	ldr	r2, [sp, #4]
 8003e26:	2a00      	cmp	r2, #0
 8003e28:	f43f aea1 	beq.w	8003b6e <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 8003e2c:	9a01      	ldr	r2, [sp, #4]
 8003e2e:	3a01      	subs	r2, #1
 8003e30:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8003e32:	9a01      	ldr	r2, [sp, #4]
 8003e34:	2a00      	cmp	r2, #0
 8003e36:	d1f9      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x3d8>
 8003e38:	e699      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003e3a:	4908      	ldr	r1, [pc, #32]	@ (8003e5c <HAL_ADC_ConfigChannel+0x408>)
 8003e3c:	e768      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x2bc>
 8003e3e:	4908      	ldr	r1, [pc, #32]	@ (8003e60 <HAL_ADC_ConfigChannel+0x40c>)
 8003e40:	e766      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x2bc>
 8003e42:	4908      	ldr	r1, [pc, #32]	@ (8003e64 <HAL_ADC_ConfigChannel+0x410>)
 8003e44:	e764      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x2bc>
 8003e46:	4908      	ldr	r1, [pc, #32]	@ (8003e68 <HAL_ADC_ConfigChannel+0x414>)
 8003e48:	e762      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x2bc>
 8003e4a:	4908      	ldr	r1, [pc, #32]	@ (8003e6c <HAL_ADC_ConfigChannel+0x418>)
 8003e4c:	e760      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x2bc>
 8003e4e:	4908      	ldr	r1, [pc, #32]	@ (8003e70 <HAL_ADC_ConfigChannel+0x41c>)
 8003e50:	e75e      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x2bc>
 8003e52:	bf00      	nop
 8003e54:	24000020 	.word	0x24000020
 8003e58:	053e2d63 	.word	0x053e2d63
 8003e5c:	1d500080 	.word	0x1d500080
 8003e60:	21800100 	.word	0x21800100
 8003e64:	25b00200 	.word	0x25b00200
 8003e68:	2e300800 	.word	0x2e300800
 8003e6c:	32601000 	.word	0x32601000
 8003e70:	36902000 	.word	0x36902000

08003e74 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e74:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	07d1      	lsls	r1, r2, #31
 8003e7a:	d501      	bpl.n	8003e80 <ADC_Enable+0xc>
  return HAL_OK;
 8003e7c:	2000      	movs	r0, #0
}
 8003e7e:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e80:	6899      	ldr	r1, [r3, #8]
 8003e82:	4a23      	ldr	r2, [pc, #140]	@ (8003f10 <ADC_Enable+0x9c>)
 8003e84:	4211      	tst	r1, r2
{
 8003e86:	b570      	push	{r4, r5, r6, lr}
 8003e88:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e8a:	d12f      	bne.n	8003eec <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 8003e8c:	6899      	ldr	r1, [r3, #8]
 8003e8e:	4a21      	ldr	r2, [pc, #132]	@ (8003f14 <ADC_Enable+0xa0>)
 8003e90:	400a      	ands	r2, r1
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003e98:	f7ff fc46 	bl	8003728 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003f18 <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 8003ea0:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d02c      	beq.n	8003f00 <ADC_Enable+0x8c>
 8003ea6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d028      	beq.n	8003f00 <ADC_Enable+0x8c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003eae:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 8003eb2:	f502 4284 	add.w	r2, r2, #16896	@ 0x4200
 8003eb6:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	07d2      	lsls	r2, r2, #31
 8003ebc:	d414      	bmi.n	8003ee8 <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 8003ebe:	4e15      	ldr	r6, [pc, #84]	@ (8003f14 <ADC_Enable+0xa0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	07d0      	lsls	r0, r2, #31
 8003ec4:	d404      	bmi.n	8003ed0 <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	4032      	ands	r2, r6
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ed0:	f7ff fc2a 	bl	8003728 <HAL_GetTick>
 8003ed4:	1b43      	subs	r3, r0, r5
 8003ed6:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ed8:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003eda:	d902      	bls.n	8003ee2 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	07d1      	lsls	r1, r2, #31
 8003ee0:	d504      	bpl.n	8003eec <ADC_Enable+0x78>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	07d2      	lsls	r2, r2, #31
 8003ee6:	d5eb      	bpl.n	8003ec0 <ADC_Enable+0x4c>
  return HAL_OK;
 8003ee8:	2000      	movs	r0, #0
}
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8003eee:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef0:	f043 0310 	orr.w	r3, r3, #16
 8003ef4:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f00:	4a06      	ldr	r2, [pc, #24]	@ (8003f1c <ADC_Enable+0xa8>)
 8003f02:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f04:	06d6      	lsls	r6, r2, #27
 8003f06:	d0d7      	beq.n	8003eb8 <ADC_Enable+0x44>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f08:	4a05      	ldr	r2, [pc, #20]	@ (8003f20 <ADC_Enable+0xac>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d1d4      	bne.n	8003eb8 <ADC_Enable+0x44>
 8003f0e:	e7eb      	b.n	8003ee8 <ADC_Enable+0x74>
 8003f10:	8000003f 	.word	0x8000003f
 8003f14:	7fffffc0 	.word	0x7fffffc0
 8003f18:	40022000 	.word	0x40022000
 8003f1c:	40022300 	.word	0x40022300
 8003f20:	40022100 	.word	0x40022100

08003f24 <HAL_ADC_Start_DMA>:
{
 8003f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f28:	4b3b      	ldr	r3, [pc, #236]	@ (8004018 <HAL_ADC_Start_DMA+0xf4>)
{
 8003f2a:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f2c:	6800      	ldr	r0, [r0, #0]
{
 8003f2e:	460e      	mov	r6, r1
 8003f30:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f32:	4298      	cmp	r0, r3
 8003f34:	d01c      	beq.n	8003f70 <HAL_ADC_Start_DMA+0x4c>
 8003f36:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003f3a:	4298      	cmp	r0, r3
 8003f3c:	d018      	beq.n	8003f70 <HAL_ADC_Start_DMA+0x4c>
 8003f3e:	4b37      	ldr	r3, [pc, #220]	@ (800401c <HAL_ADC_Start_DMA+0xf8>)
 8003f40:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f42:	6885      	ldr	r5, [r0, #8]
 8003f44:	f015 0504 	ands.w	r5, r5, #4
 8003f48:	d118      	bne.n	8003f7c <HAL_ADC_Start_DMA+0x58>
    __HAL_LOCK(hadc);
 8003f4a:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8003f4e:	2a01      	cmp	r2, #1
 8003f50:	d014      	beq.n	8003f7c <HAL_ADC_Start_DMA+0x58>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f52:	f003 081f 	and.w	r8, r3, #31
 8003f56:	f240 2321 	movw	r3, #545	@ 0x221
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	fa23 f308 	lsr.w	r3, r3, r8
 8003f60:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f64:	4003      	ands	r3, r0
 8003f66:	d10c      	bne.n	8003f82 <HAL_ADC_Start_DMA+0x5e>
      __HAL_UNLOCK(hadc);
 8003f68:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8003f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f70:	4b2b      	ldr	r3, [pc, #172]	@ (8004020 <HAL_ADC_Start_DMA+0xfc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f74:	6885      	ldr	r5, [r0, #8]
 8003f76:	f015 0504 	ands.w	r5, r5, #4
 8003f7a:	d0e6      	beq.n	8003f4a <HAL_ADC_Start_DMA+0x26>
    __HAL_LOCK(hadc);
 8003f7c:	2002      	movs	r0, #2
}
 8003f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7ff ff76 	bl	8003e74 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d140      	bne.n	800400e <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 8003f8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f8e:	4b25      	ldr	r3, [pc, #148]	@ (8004024 <HAL_ADC_Start_DMA+0x100>)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f90:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8003f92:	4013      	ands	r3, r2
 8003f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f98:	6563      	str	r3, [r4, #84]	@ 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f9a:	f1b8 0f00 	cmp.w	r8, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_ADC_Start_DMA+0x82>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fa0:	4b21      	ldr	r3, [pc, #132]	@ (8004028 <HAL_ADC_Start_DMA+0x104>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fa2:	4299      	cmp	r1, r3
 8003fa4:	d003      	beq.n	8003fae <HAL_ADC_Start_DMA+0x8a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fa6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003fa8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003fac:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003fae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003fb0:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8003fb4:	d02e      	beq.n	8004014 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003fb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fb8:	f023 0306 	bic.w	r3, r3, #6
 8003fbc:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fbe:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fc0:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fc2:	4d1a      	ldr	r5, [pc, #104]	@ (800402c <HAL_ADC_Start_DMA+0x108>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fc4:	463b      	mov	r3, r7
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003fc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003fc8:	3140      	adds	r1, #64	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fca:	63c5      	str	r5, [r0, #60]	@ 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fcc:	4d18      	ldr	r5, [pc, #96]	@ (8004030 <HAL_ADC_Start_DMA+0x10c>)
 8003fce:	6405      	str	r5, [r0, #64]	@ 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fd0:	4d18      	ldr	r5, [pc, #96]	@ (8004034 <HAL_ADC_Start_DMA+0x110>)
 8003fd2:	64c5      	str	r5, [r0, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003fd4:	251c      	movs	r5, #28
 8003fd6:	f841 5c40 	str.w	r5, [r1, #-64]
        __HAL_UNLOCK(hadc);
 8003fda:	2500      	movs	r5, #0
 8003fdc:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fe0:	f851 5c3c 	ldr.w	r5, [r1, #-60]
 8003fe4:	f045 0510 	orr.w	r5, r5, #16
 8003fe8:	f841 5c3c 	str.w	r5, [r1, #-60]
 8003fec:	f851 5c34 	ldr.w	r5, [r1, #-52]
 8003ff0:	f025 0503 	bic.w	r5, r5, #3
 8003ff4:	4335      	orrs	r5, r6
 8003ff6:	f841 5c34 	str.w	r5, [r1, #-52]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ffa:	f001 f8bb 	bl	8005174 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ffe:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004000:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <HAL_ADC_Start_DMA+0x114>)
 8004002:	6891      	ldr	r1, [r2, #8]
 8004004:	400b      	ands	r3, r1
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6093      	str	r3, [r2, #8]
}
 800400c:	e7b7      	b.n	8003f7e <HAL_ADC_Start_DMA+0x5a>
        __HAL_UNLOCK(hadc);
 800400e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8004012:	e7b4      	b.n	8003f7e <HAL_ADC_Start_DMA+0x5a>
          ADC_CLEAR_ERRORCODE(hadc);
 8004014:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004016:	e7d2      	b.n	8003fbe <HAL_ADC_Start_DMA+0x9a>
 8004018:	40022000 	.word	0x40022000
 800401c:	58026300 	.word	0x58026300
 8004020:	40022300 	.word	0x40022300
 8004024:	fffff0fe 	.word	0xfffff0fe
 8004028:	40022100 	.word	0x40022100
 800402c:	080039cd 	.word	0x080039cd
 8004030:	08003741 	.word	0x08003741
 8004034:	08003a39 	.word	0x08003a39
 8004038:	7fffffc0 	.word	0x7fffffc0

0800403c <ADC_Disable>:
{
 800403c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800403e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	0795      	lsls	r5, r2, #30
 8004044:	d502      	bpl.n	800404c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004046:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8004048:	2000      	movs	r0, #0
}
 800404a:	bd38      	pop	{r3, r4, r5, pc}
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	07d4      	lsls	r4, r2, #31
 8004050:	d5fa      	bpl.n	8004048 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	4604      	mov	r4, r0
 8004056:	f002 020d 	and.w	r2, r2, #13
 800405a:	2a01      	cmp	r2, #1
 800405c:	d009      	beq.n	8004072 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800405e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8004060:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004062:	f043 0310 	orr.w	r3, r3, #16
 8004066:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004068:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8004070:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8004072:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004074:	2103      	movs	r1, #3
 8004076:	4a0d      	ldr	r2, [pc, #52]	@ (80040ac <ADC_Disable+0x70>)
 8004078:	4002      	ands	r2, r0
 800407a:	f042 0202 	orr.w	r2, r2, #2
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8004082:	f7ff fb51 	bl	8003728 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004086:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8004088:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	07d9      	lsls	r1, r3, #31
 800408e:	d403      	bmi.n	8004098 <ADC_Disable+0x5c>
 8004090:	e7da      	b.n	8004048 <ADC_Disable+0xc>
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	07db      	lsls	r3, r3, #31
 8004096:	d5d7      	bpl.n	8004048 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004098:	f7ff fb46 	bl	8003728 <HAL_GetTick>
 800409c:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800409e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040a0:	2802      	cmp	r0, #2
 80040a2:	d9f6      	bls.n	8004092 <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	07d2      	lsls	r2, r2, #31
 80040a8:	d5f3      	bpl.n	8004092 <ADC_Disable+0x56>
 80040aa:	e7d8      	b.n	800405e <ADC_Disable+0x22>
 80040ac:	7fffffc0 	.word	0x7fffffc0

080040b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80040b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80040b2:	4a4f      	ldr	r2, [pc, #316]	@ (80041f0 <ADC_ConfigureBoostMode+0x140>)
{
 80040b4:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80040b6:	6803      	ldr	r3, [r0, #0]
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d024      	beq.n	8004106 <ADC_ConfigureBoostMode+0x56>
 80040bc:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d020      	beq.n	8004106 <ADC_ConfigureBoostMode+0x56>
 80040c4:	4b4b      	ldr	r3, [pc, #300]	@ (80041f4 <ADC_ConfigureBoostMode+0x144>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80040cc:	d020      	beq.n	8004110 <ADC_ConfigureBoostMode+0x60>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80040ce:	f002 ff5d 	bl	8006f8c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 80040d2:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 80040d4:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 80040d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040da:	d06d      	beq.n	80041b8 <ADC_ConfigureBoostMode+0x108>
 80040dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040e0:	d072      	beq.n	80041c8 <ADC_ConfigureBoostMode+0x118>
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e6:	d067      	beq.n	80041b8 <ADC_ConfigureBoostMode+0x108>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80040e8:	f7ff fb24 	bl	8003734 <HAL_GetREVID>
 80040ec:	f241 0303 	movw	r3, #4099	@ 0x1003
 80040f0:	4298      	cmp	r0, r3
 80040f2:	d82d      	bhi.n	8004150 <ADC_ConfigureBoostMode+0xa0>
  {
    if (freq > 20000000UL)
 80040f4:	4a40      	ldr	r2, [pc, #256]	@ (80041f8 <ADC_ConfigureBoostMode+0x148>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80040f6:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 80040f8:	4295      	cmp	r5, r2
 80040fa:	d947      	bls.n	800418c <ADC_ConfigureBoostMode+0xdc>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004102:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004104:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004106:	4b3d      	ldr	r3, [pc, #244]	@ (80041fc <ADC_ConfigureBoostMode+0x14c>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 800410e:	d1de      	bne.n	80040ce <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004110:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004114:	2100      	movs	r1, #0
 8004116:	f004 fa0d 	bl	8008534 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 800411a:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800411c:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 800411e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004122:	d04d      	beq.n	80041c0 <ADC_ConfigureBoostMode+0x110>
 8004124:	d825      	bhi.n	8004172 <ADC_ConfigureBoostMode+0xc2>
 8004126:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800412a:	d04b      	beq.n	80041c4 <ADC_ConfigureBoostMode+0x114>
 800412c:	d84e      	bhi.n	80041cc <ADC_ConfigureBoostMode+0x11c>
 800412e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004132:	d008      	beq.n	8004146 <ADC_ConfigureBoostMode+0x96>
 8004134:	d855      	bhi.n	80041e2 <ADC_ConfigureBoostMode+0x132>
 8004136:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800413a:	d004      	beq.n	8004146 <ADC_ConfigureBoostMode+0x96>
 800413c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004140:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8004144:	d1d0      	bne.n	80040e8 <ADC_ConfigureBoostMode+0x38>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004146:	0c9b      	lsrs	r3, r3, #18
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 800414e:	e7cb      	b.n	80040e8 <ADC_ConfigureBoostMode+0x38>
    if (freq <= 6250000UL)
 8004150:	4a2b      	ldr	r2, [pc, #172]	@ (8004200 <ADC_ConfigureBoostMode+0x150>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004152:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 8004154:	4295      	cmp	r5, r2
 8004156:	d923      	bls.n	80041a0 <ADC_ConfigureBoostMode+0xf0>
    else if (freq <= 12500000UL)
 8004158:	4a2a      	ldr	r2, [pc, #168]	@ (8004204 <ADC_ConfigureBoostMode+0x154>)
 800415a:	4295      	cmp	r5, r2
 800415c:	d925      	bls.n	80041aa <ADC_ConfigureBoostMode+0xfa>
    else if (freq <= 25000000UL)
 800415e:	4a2a      	ldr	r2, [pc, #168]	@ (8004208 <ADC_ConfigureBoostMode+0x158>)
 8004160:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004162:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8004164:	d839      	bhi.n	80041da <ADC_ConfigureBoostMode+0x12a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004166:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800416a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8004172:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004176:	d02e      	beq.n	80041d6 <ADC_ConfigureBoostMode+0x126>
 8004178:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800417c:	d1b4      	bne.n	80040e8 <ADC_ConfigureBoostMode+0x38>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800417e:	f7ff fad9 	bl	8003734 <HAL_GetREVID>
 8004182:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004186:	4298      	cmp	r0, r3
 8004188:	d805      	bhi.n	8004196 <ADC_ConfigureBoostMode+0xe6>
 800418a:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004192:	609a      	str	r2, [r3, #8]
}
 8004194:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8004196:	4b1a      	ldr	r3, [pc, #104]	@ (8004200 <ADC_ConfigureBoostMode+0x150>)
 8004198:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	d304      	bcc.n	80041aa <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80041a6:	609a      	str	r2, [r3, #8]
}
 80041a8:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80041b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041b4:	609a      	str	r2, [r3, #8]
}
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 80041be:	e793      	b.n	80040e8 <ADC_ConfigureBoostMode+0x38>
        freq /= 64UL;
 80041c0:	0985      	lsrs	r5, r0, #6
        break;
 80041c2:	e791      	b.n	80040e8 <ADC_ConfigureBoostMode+0x38>
        freq /= 16UL;
 80041c4:	0905      	lsrs	r5, r0, #4
        break;
 80041c6:	e78f      	b.n	80040e8 <ADC_ConfigureBoostMode+0x38>
        freq /= 4UL;
 80041c8:	0885      	lsrs	r5, r0, #2
        break;
 80041ca:	e78d      	b.n	80040e8 <ADC_ConfigureBoostMode+0x38>
    switch (hadc->Init.ClockPrescaler)
 80041cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041d0:	d18a      	bne.n	80040e8 <ADC_ConfigureBoostMode+0x38>
        freq /= 32UL;
 80041d2:	0945      	lsrs	r5, r0, #5
        break;
 80041d4:	e788      	b.n	80040e8 <ADC_ConfigureBoostMode+0x38>
        freq /= 128UL;
 80041d6:	09c5      	lsrs	r5, r0, #7
        break;
 80041d8:	e786      	b.n	80040e8 <ADC_ConfigureBoostMode+0x38>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80041da:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 80041e2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80041e6:	d0ae      	beq.n	8004146 <ADC_ConfigureBoostMode+0x96>
 80041e8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80041ec:	d0ab      	beq.n	8004146 <ADC_ConfigureBoostMode+0x96>
 80041ee:	e77b      	b.n	80040e8 <ADC_ConfigureBoostMode+0x38>
 80041f0:	40022000 	.word	0x40022000
 80041f4:	58026300 	.word	0x58026300
 80041f8:	01312d00 	.word	0x01312d00
 80041fc:	40022300 	.word	0x40022300
 8004200:	00bebc21 	.word	0x00bebc21
 8004204:	017d7841 	.word	0x017d7841
 8004208:	02faf081 	.word	0x02faf081

0800420c <HAL_ADC_Init>:
{
 800420c:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 800420e:	2300      	movs	r3, #0
{
 8004210:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8004212:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8004214:	2800      	cmp	r0, #0
 8004216:	f000 80a9 	beq.w	800436c <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800421a:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800421c:	4604      	mov	r4, r0
 800421e:	2d00      	cmp	r5, #0
 8004220:	f000 80aa 	beq.w	8004378 <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004224:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004226:	6893      	ldr	r3, [r2, #8]
 8004228:	009d      	lsls	r5, r3, #2
 800422a:	d503      	bpl.n	8004234 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800422c:	6891      	ldr	r1, [r2, #8]
 800422e:	4b71      	ldr	r3, [pc, #452]	@ (80043f4 <HAL_ADC_Init+0x1e8>)
 8004230:	400b      	ands	r3, r1
 8004232:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004234:	6893      	ldr	r3, [r2, #8]
 8004236:	00d8      	lsls	r0, r3, #3
 8004238:	d416      	bmi.n	8004268 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800423a:	4b6f      	ldr	r3, [pc, #444]	@ (80043f8 <HAL_ADC_Init+0x1ec>)
 800423c:	496f      	ldr	r1, [pc, #444]	@ (80043fc <HAL_ADC_Init+0x1f0>)
 800423e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004240:	6890      	ldr	r0, [r2, #8]
 8004242:	099b      	lsrs	r3, r3, #6
 8004244:	fba1 1303 	umull	r1, r3, r1, r3
 8004248:	496d      	ldr	r1, [pc, #436]	@ (8004400 <HAL_ADC_Init+0x1f4>)
 800424a:	099b      	lsrs	r3, r3, #6
 800424c:	4001      	ands	r1, r0
 800424e:	3301      	adds	r3, #1
 8004250:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8004254:	6091      	str	r1, [r2, #8]
 8004256:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004258:	9b01      	ldr	r3, [sp, #4]
 800425a:	b12b      	cbz	r3, 8004268 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 800425c:	9b01      	ldr	r3, [sp, #4]
 800425e:	3b01      	subs	r3, #1
 8004260:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004262:	9b01      	ldr	r3, [sp, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f9      	bne.n	800425c <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004268:	6893      	ldr	r3, [r2, #8]
 800426a:	00d9      	lsls	r1, r3, #3
 800426c:	f100 8082 	bmi.w	8004374 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004270:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8004272:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004274:	f043 0310 	orr.w	r3, r3, #16
 8004278:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800427a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800427c:	432b      	orrs	r3, r5
 800427e:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004280:	6893      	ldr	r3, [r2, #8]
 8004282:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004286:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004288:	d16c      	bne.n	8004364 <HAL_ADC_Init+0x158>
 800428a:	06db      	lsls	r3, r3, #27
 800428c:	d46a      	bmi.n	8004364 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 800428e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004290:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800429a:	6893      	ldr	r3, [r2, #8]
 800429c:	07de      	lsls	r6, r3, #31
 800429e:	d40c      	bmi.n	80042ba <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042a0:	4b58      	ldr	r3, [pc, #352]	@ (8004404 <HAL_ADC_Init+0x1f8>)
 80042a2:	429a      	cmp	r2, r3
 80042a4:	f000 8081 	beq.w	80043aa <HAL_ADC_Init+0x19e>
 80042a8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d07c      	beq.n	80043aa <HAL_ADC_Init+0x19e>
 80042b0:	4b55      	ldr	r3, [pc, #340]	@ (8004408 <HAL_ADC_Init+0x1fc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	07d9      	lsls	r1, r3, #31
 80042b6:	f140 808a 	bpl.w	80043ce <HAL_ADC_Init+0x1c2>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80042ba:	f7ff fa3b 	bl	8003734 <HAL_GetREVID>
 80042be:	f241 0303 	movw	r3, #4099	@ 0x1003
 80042c2:	68a1      	ldr	r1, [r4, #8]
 80042c4:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042c6:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80042c8:	d85c      	bhi.n	8004384 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042ca:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042ce:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042d0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80042d2:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80042d6:	4302      	orrs	r2, r0
 80042d8:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d103      	bne.n	80042e6 <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042de:	6a23      	ldr	r3, [r4, #32]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80042e8:	b123      	cbz	r3, 80042f4 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042ea:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80042ee:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80042f0:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042f2:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	4945      	ldr	r1, [pc, #276]	@ (800440c <HAL_ADC_Init+0x200>)
 80042f8:	68d8      	ldr	r0, [r3, #12]
 80042fa:	4001      	ands	r1, r0
 80042fc:	4311      	orrs	r1, r2
 80042fe:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004306:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004308:	d11c      	bne.n	8004344 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800430a:	0712      	lsls	r2, r2, #28
 800430c:	d41a      	bmi.n	8004344 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800430e:	68d8      	ldr	r0, [r3, #12]
 8004310:	4a3f      	ldr	r2, [pc, #252]	@ (8004410 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004312:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004314:	4002      	ands	r2, r0
 8004316:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800431a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800431c:	430a      	orrs	r2, r1
 800431e:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8004320:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8004324:	2a01      	cmp	r2, #1
 8004326:	d054      	beq.n	80043d2 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	f022 0201 	bic.w	r2, r2, #1
 800432e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004330:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8004332:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004336:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800433a:	430a      	orrs	r2, r1
 800433c:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800433e:	f7ff feb7 	bl	80040b0 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004342:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004344:	68e2      	ldr	r2, [r4, #12]
 8004346:	2a01      	cmp	r2, #1
 8004348:	d027      	beq.n	800439a <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800434a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800434c:	f022 020f 	bic.w	r2, r2, #15
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004352:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 8004354:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8004360:	b002      	add	sp, #8
 8004362:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004364:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004366:	f043 0310 	orr.w	r3, r3, #16
 800436a:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 800436c:	2501      	movs	r5, #1
}
 800436e:	4628      	mov	r0, r5
 8004370:	b002      	add	sp, #8
 8004372:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004374:	2500      	movs	r5, #0
 8004376:	e783      	b.n	8004280 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 8004378:	f7fe fe28 	bl	8002fcc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800437c:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800437e:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8004382:	e74f      	b.n	8004224 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004384:	2910      	cmp	r1, #16
 8004386:	d1a0      	bne.n	80042ca <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004388:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800438a:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800438c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004390:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004392:	430a      	orrs	r2, r1
 8004394:	f042 021c 	orr.w	r2, r2, #28
 8004398:	e79f      	b.n	80042da <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800439a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800439c:	69a2      	ldr	r2, [r4, #24]
 800439e:	f021 010f 	bic.w	r1, r1, #15
 80043a2:	3a01      	subs	r2, #1
 80043a4:	430a      	orrs	r2, r1
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80043a8:	e7d3      	b.n	8004352 <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043aa:	4b16      	ldr	r3, [pc, #88]	@ (8004404 <HAL_ADC_Init+0x1f8>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f013 0f01 	tst.w	r3, #1
 80043b2:	4b18      	ldr	r3, [pc, #96]	@ (8004414 <HAL_ADC_Init+0x208>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	d180      	bne.n	80042ba <HAL_ADC_Init+0xae>
 80043b8:	07d8      	lsls	r0, r3, #31
 80043ba:	f53f af7e 	bmi.w	80042ba <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043be:	4a16      	ldr	r2, [pc, #88]	@ (8004418 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80043c0:	6893      	ldr	r3, [r2, #8]
 80043c2:	6861      	ldr	r1, [r4, #4]
 80043c4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6093      	str	r3, [r2, #8]
}
 80043cc:	e775      	b.n	80042ba <HAL_ADC_Init+0xae>
 80043ce:	4a13      	ldr	r2, [pc, #76]	@ (800441c <HAL_ADC_Init+0x210>)
 80043d0:	e7f6      	b.n	80043c0 <HAL_ADC_Init+0x1b4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80043d2:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 80043d6:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 80043d8:	3901      	subs	r1, #1
 80043da:	6918      	ldr	r0, [r3, #16]
 80043dc:	4332      	orrs	r2, r6
 80043de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80043e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80043e4:	430a      	orrs	r2, r1
 80043e6:	490e      	ldr	r1, [pc, #56]	@ (8004420 <HAL_ADC_Init+0x214>)
 80043e8:	4001      	ands	r1, r0
 80043ea:	430a      	orrs	r2, r1
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	611a      	str	r2, [r3, #16]
 80043f2:	e79d      	b.n	8004330 <HAL_ADC_Init+0x124>
 80043f4:	5fffffc0 	.word	0x5fffffc0
 80043f8:	24000020 	.word	0x24000020
 80043fc:	053e2d63 	.word	0x053e2d63
 8004400:	6fffffc0 	.word	0x6fffffc0
 8004404:	40022000 	.word	0x40022000
 8004408:	58026000 	.word	0x58026000
 800440c:	fff0c003 	.word	0xfff0c003
 8004410:	ffffbffc 	.word	0xffffbffc
 8004414:	40022100 	.word	0x40022100
 8004418:	40022300 	.word	0x40022300
 800441c:	58026300 	.word	0x58026300
 8004420:	fc00f81e 	.word	0xfc00f81e

08004424 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004424:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004426:	2300      	movs	r3, #0
{
 8004428:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800442a:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800442c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8004430:	2b01      	cmp	r3, #1
 8004432:	d040      	beq.n	80044b6 <HAL_ADCEx_Calibration_Start+0x92>
 8004434:	2301      	movs	r3, #1
 8004436:	4604      	mov	r4, r0
 8004438:	460e      	mov	r6, r1
 800443a:	4615      	mov	r5, r2
 800443c:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004440:	f7ff fdfc 	bl	800403c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004444:	b9e8      	cbnz	r0, 8004482 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004446:	6d67      	ldr	r7, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8004448:	f005 4280 	and.w	r2, r5, #1073741824	@ 0x40000000
 800444c:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <HAL_ADCEx_Calibration_Start+0x98>)
 800444e:	f406 3180 	and.w	r1, r6, #65536	@ 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004452:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8004454:	403b      	ands	r3, r7
 8004456:	f043 0302 	orr.w	r3, r3, #2
 800445a:	6563      	str	r3, [r4, #84]	@ 0x54
 800445c:	4b18      	ldr	r3, [pc, #96]	@ (80044c0 <HAL_ADCEx_Calibration_Start+0x9c>)
 800445e:	68ae      	ldr	r6, [r5, #8]
 8004460:	4033      	ands	r3, r6
 8004462:	4313      	orrs	r3, r2
 8004464:	430b      	orrs	r3, r1
 8004466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800446a:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800446c:	68ab      	ldr	r3, [r5, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800446e:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <HAL_ADCEx_Calibration_Start+0xa0>)
 8004470:	2b00      	cmp	r3, #0
 8004472:	db0f      	blt.n	8004494 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004474:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	6563      	str	r3, [r4, #84]	@ 0x54
 8004480:	e003      	b.n	800448a <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004482:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004484:	f043 0310 	orr.w	r3, r3, #16
 8004488:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800448a:	2300      	movs	r3, #0
 800448c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8004490:	b003      	add	sp, #12
 8004492:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 8004494:	9b01      	ldr	r3, [sp, #4]
 8004496:	3301      	adds	r3, #1
 8004498:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800449a:	9b01      	ldr	r3, [sp, #4]
 800449c:	4293      	cmp	r3, r2
 800449e:	d3e5      	bcc.n	800446c <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80044a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 80044a2:	2200      	movs	r2, #0
        return HAL_ERROR;
 80044a4:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80044a6:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 80044aa:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        ADC_STATE_CLR_SET(hadc->State,
 80044ae:	f043 0310 	orr.w	r3, r3, #16
 80044b2:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 80044b4:	e7ec      	b.n	8004490 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 80044b6:	2002      	movs	r0, #2
}
 80044b8:	b003      	add	sp, #12
 80044ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044bc:	ffffeefd 	.word	0xffffeefd
 80044c0:	3ffeffc0 	.word	0x3ffeffc0
 80044c4:	25c3f800 	.word	0x25c3f800

080044c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop

080044cc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop

080044d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop

080044d8 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop

080044dc <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044dc:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 80044e0:	2a01      	cmp	r2, #1
 80044e2:	d035      	beq.n	8004550 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 80044e4:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80044e6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80044e8:	2001      	movs	r0, #1
{
 80044ea:	b4f0      	push	{r4, r5, r6, r7}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044ec:	4d28      	ldr	r5, [pc, #160]	@ (8004590 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
{
 80044ee:	b09a      	sub	sp, #104	@ 0x68
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044f0:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80044f2:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044f4:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 80044f6:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80044fa:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044fc:	d008      	beq.n	8004510 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044fe:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004500:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004504:	f041 0120 	orr.w	r1, r1, #32
 8004508:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800450a:	b01a      	add	sp, #104	@ 0x68
 800450c:	bcf0      	pop	{r4, r5, r6, r7}
 800450e:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004510:	4a20      	ldr	r2, [pc, #128]	@ (8004594 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004512:	6890      	ldr	r0, [r2, #8]
 8004514:	0740      	lsls	r0, r0, #29
 8004516:	d50b      	bpl.n	8004530 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8004518:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800451a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800451c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800451e:	f042 0220 	orr.w	r2, r2, #32
 8004522:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 800452a:	b01a      	add	sp, #104	@ 0x68
 800452c:	bcf0      	pop	{r4, r5, r6, r7}
 800452e:	4770      	bx	lr
 8004530:	68a0      	ldr	r0, [r4, #8]
 8004532:	0745      	lsls	r5, r0, #29
 8004534:	d4f1      	bmi.n	800451a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004536:	6808      	ldr	r0, [r1, #0]
 8004538:	b9a0      	cbnz	r0, 8004564 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800453a:	4917      	ldr	r1, [pc, #92]	@ (8004598 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 800453c:	6888      	ldr	r0, [r1, #8]
 800453e:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8004542:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004544:	68a0      	ldr	r0, [r4, #8]
 8004546:	07c0      	lsls	r0, r0, #31
 8004548:	d504      	bpl.n	8004554 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800454a:	6892      	ldr	r2, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800454c:	2000      	movs	r0, #0
 800454e:	e7e9      	b.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8004550:	2002      	movs	r0, #2
}
 8004552:	4770      	bx	lr
 8004554:	6892      	ldr	r2, [r2, #8]
 8004556:	07d5      	lsls	r5, r2, #31
 8004558:	d4f8      	bmi.n	800454c <HAL_ADCEx_MultiModeConfigChannel+0x70>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800455a:	6888      	ldr	r0, [r1, #8]
 800455c:	4a0f      	ldr	r2, [pc, #60]	@ (800459c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800455e:	4002      	ands	r2, r0
 8004560:	608a      	str	r2, [r1, #8]
 8004562:	e7f3      	b.n	800454c <HAL_ADCEx_MultiModeConfigChannel+0x70>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004564:	4e0c      	ldr	r6, [pc, #48]	@ (8004598 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8004566:	684f      	ldr	r7, [r1, #4]
 8004568:	68b5      	ldr	r5, [r6, #8]
 800456a:	f425 4540 	bic.w	r5, r5, #49152	@ 0xc000
 800456e:	433d      	orrs	r5, r7
 8004570:	60b5      	str	r5, [r6, #8]
 8004572:	68a4      	ldr	r4, [r4, #8]
 8004574:	07e4      	lsls	r4, r4, #31
 8004576:	d4e8      	bmi.n	800454a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004578:	6892      	ldr	r2, [r2, #8]
 800457a:	07d7      	lsls	r7, r2, #31
 800457c:	d4e6      	bmi.n	800454c <HAL_ADCEx_MultiModeConfigChannel+0x70>
        MODIFY_REG(tmpADC_Common->CCR,
 800457e:	688a      	ldr	r2, [r1, #8]
 8004580:	68b4      	ldr	r4, [r6, #8]
 8004582:	4310      	orrs	r0, r2
 8004584:	4a05      	ldr	r2, [pc, #20]	@ (800459c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8004586:	4022      	ands	r2, r4
 8004588:	4310      	orrs	r0, r2
 800458a:	60b0      	str	r0, [r6, #8]
 800458c:	e7de      	b.n	800454c <HAL_ADCEx_MultiModeConfigChannel+0x70>
 800458e:	bf00      	nop
 8004590:	40022000 	.word	0x40022000
 8004594:	40022100 	.word	0x40022100
 8004598:	40022300 	.word	0x40022300
 800459c:	fffff0e0 	.word	0xfffff0e0

080045a0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a0:	4906      	ldr	r1, [pc, #24]	@ (80045bc <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045a2:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045a6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045aa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045ac:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045b0:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b4:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80045b6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80045b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80045ba:	4770      	bx	lr
 80045bc:	e000ed00 	.word	0xe000ed00
 80045c0:	05fa0000 	.word	0x05fa0000

080045c4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004630 <HAL_NVIC_SetPriority+0x6c>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045cc:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045ce:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045d2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d6:	f1be 0f04 	cmp.w	lr, #4
 80045da:	bf28      	it	cs
 80045dc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e0:	f1bc 0f06 	cmp.w	ip, #6
 80045e4:	d91a      	bls.n	800461c <HAL_NVIC_SetPriority+0x58>
 80045e6:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ea:	f04f 33ff 	mov.w	r3, #4294967295
 80045ee:	fa03 f30c 	lsl.w	r3, r3, ip
 80045f2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80045fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045fc:	fa03 f30e 	lsl.w	r3, r3, lr
 8004600:	ea21 0303 	bic.w	r3, r1, r3
 8004604:	fa03 f30c 	lsl.w	r3, r3, ip
 8004608:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004610:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004612:	db06      	blt.n	8004622 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004614:	4a07      	ldr	r2, [pc, #28]	@ (8004634 <HAL_NVIC_SetPriority+0x70>)
 8004616:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004618:	f85d fb04 	ldr.w	pc, [sp], #4
 800461c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800461e:	4694      	mov	ip, r2
 8004620:	e7e9      	b.n	80045f6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004622:	f000 000f 	and.w	r0, r0, #15
 8004626:	4a04      	ldr	r2, [pc, #16]	@ (8004638 <HAL_NVIC_SetPriority+0x74>)
 8004628:	5413      	strb	r3, [r2, r0]
 800462a:	f85d fb04 	ldr.w	pc, [sp], #4
 800462e:	bf00      	nop
 8004630:	e000ed00 	.word	0xe000ed00
 8004634:	e000e400 	.word	0xe000e400
 8004638:	e000ed14 	.word	0xe000ed14

0800463c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800463c:	2800      	cmp	r0, #0
 800463e:	db07      	blt.n	8004650 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004640:	2301      	movs	r3, #1
 8004642:	f000 011f 	and.w	r1, r0, #31
 8004646:	4a03      	ldr	r2, [pc, #12]	@ (8004654 <HAL_NVIC_EnableIRQ+0x18>)
 8004648:	0940      	lsrs	r0, r0, #5
 800464a:	408b      	lsls	r3, r1
 800464c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	e000e100 	.word	0xe000e100

08004658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004658:	1e43      	subs	r3, r0, #1
 800465a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800465e:	d301      	bcc.n	8004664 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004660:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004662:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004664:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004668:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466a:	4905      	ldr	r1, [pc, #20]	@ (8004680 <HAL_SYSTICK_Config+0x28>)
 800466c:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004670:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004672:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004674:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004678:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800467a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	e000ed00 	.word	0xe000ed00

08004684 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004684:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004688:	4b04      	ldr	r3, [pc, #16]	@ (800469c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800468a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800468c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800468e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004692:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8004694:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80046a0:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <HAL_MPU_Enable+0x1c>)
 80046a2:	f040 0001 	orr.w	r0, r0, #1
 80046a6:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80046aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ac:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046b0:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80046b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80046b6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80046ba:	4770      	bx	lr
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80046c0:	4a16      	ldr	r2, [pc, #88]	@ (800471c <HAL_MPU_ConfigRegion+0x5c>)
 80046c2:	7843      	ldrb	r3, [r0, #1]
 80046c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80046c8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80046d4:	6843      	ldr	r3, [r0, #4]
 80046d6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80046da:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046dc:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80046e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80046e2:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046e4:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80046e8:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046ec:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80046ee:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046f0:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80046f4:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046f8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80046fc:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046fe:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004702:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004706:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800470a:	7a01      	ldrb	r1, [r0, #8]
 800470c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8004710:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004714:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004720:	b188      	cbz	r0, 8004746 <HAL_DAC_Init+0x26>
{
 8004722:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004724:	7903      	ldrb	r3, [r0, #4]
 8004726:	4604      	mov	r4, r0
 8004728:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800472c:	b13b      	cbz	r3, 800473e <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800472e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004730:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004732:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004734:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8004736:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004738:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800473a:	7122      	strb	r2, [r4, #4]
}
 800473c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800473e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004740:	f7fe fcbe 	bl	80030c0 <HAL_DAC_MspInit>
 8004744:	e7f3      	b.n	800472e <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8004746:	2001      	movs	r0, #1
}
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop

0800474c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004750:	2800      	cmp	r0, #0
 8004752:	d05e      	beq.n	8004812 <HAL_DAC_Start_DMA+0xc6>
 8004754:	460e      	mov	r6, r1
 8004756:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004758:	7942      	ldrb	r2, [r0, #5]
 800475a:	4604      	mov	r4, r0
 800475c:	2a01      	cmp	r2, #1
 800475e:	d060      	beq.n	8004822 <HAL_DAC_Start_DMA+0xd6>
 8004760:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004762:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdac);
 8004764:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8004766:	2202      	movs	r2, #2
 8004768:	7102      	strb	r2, [r0, #4]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800476a:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 800476c:	bb3e      	cbnz	r6, 80047be <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800476e:	6880      	ldr	r0, [r0, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004770:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004774:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 8004828 <HAL_DAC_Start_DMA+0xdc>
 8004778:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800477c:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 800482c <HAL_DAC_Start_DMA+0xe0>
 8004780:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004784:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 8004830 <HAL_DAC_Start_DMA+0xe4>
 8004788:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800478c:	602a      	str	r2, [r5, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800478e:	2f00      	cmp	r7, #0
 8004790:	d044      	beq.n	800481c <HAL_DAC_Start_DMA+0xd0>
 8004792:	2f04      	cmp	r7, #4
 8004794:	d137      	bne.n	8004806 <HAL_DAC_Start_DMA+0xba>
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
        break;
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004796:	f105 020c 	add.w	r2, r5, #12
  }

  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800479a:	682f      	ldr	r7, [r5, #0]
 800479c:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
 80047a0:	602f      	str	r7, [r5, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80047a2:	f000 fce7 	bl	8005174 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80047a6:	2300      	movs	r3, #0
 80047a8:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80047aa:	bb38      	cbnz	r0, 80047fc <HAL_DAC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	f006 0110 	and.w	r1, r6, #16
 80047b2:	2301      	movs	r3, #1
 80047b4:	6814      	ldr	r4, [r2, #0]
 80047b6:	408b      	lsls	r3, r1
 80047b8:	4323      	orrs	r3, r4
 80047ba:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 80047bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80047be:	68c0      	ldr	r0, [r0, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80047c0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80047c4:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8004834 <HAL_DAC_Start_DMA+0xe8>
 80047c8:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80047cc:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8004838 <HAL_DAC_Start_DMA+0xec>
 80047d0:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80047d4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800483c <HAL_DAC_Start_DMA+0xf0>
 80047d8:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80047dc:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 80047de:	b1d7      	cbz	r7, 8004816 <HAL_DAC_Start_DMA+0xca>
 80047e0:	2f04      	cmp	r7, #4
 80047e2:	d113      	bne.n	800480c <HAL_DAC_Start_DMA+0xc0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80047e4:	f105 0218 	add.w	r2, r5, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80047e8:	682f      	ldr	r7, [r5, #0]
 80047ea:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 80047ee:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80047f0:	f000 fcc0 	bl	8005174 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 80047f4:	2300      	movs	r3, #0
 80047f6:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d0d7      	beq.n	80047ac <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80047fc:	6923      	ldr	r3, [r4, #16]
 80047fe:	f043 0304 	orr.w	r3, r3, #4
 8004802:	6123      	str	r3, [r4, #16]
}
 8004804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004806:	f105 0210 	add.w	r2, r5, #16
  if (Channel == DAC_CHANNEL_1)
 800480a:	e7c6      	b.n	800479a <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800480c:	f105 021c 	add.w	r2, r5, #28
  if (Channel == DAC_CHANNEL_1)
 8004810:	e7ea      	b.n	80047e8 <HAL_DAC_Start_DMA+0x9c>
    return HAL_ERROR;
 8004812:	2001      	movs	r0, #1
}
 8004814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004816:	f105 0214 	add.w	r2, r5, #20
  if (Channel == DAC_CHANNEL_1)
 800481a:	e7e5      	b.n	80047e8 <HAL_DAC_Start_DMA+0x9c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800481c:	f105 0208 	add.w	r2, r5, #8
  if (Channel == DAC_CHANNEL_1)
 8004820:	e7bb      	b.n	800479a <HAL_DAC_Start_DMA+0x4e>
  __HAL_LOCK(hdac);
 8004822:	2002      	movs	r0, #2
}
 8004824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004826:	bf00      	nop
 8004828:	08004845 	.word	0x08004845
 800482c:	08004859 	.word	0x08004859
 8004830:	08004869 	.word	0x08004869
 8004834:	08004a41 	.word	0x08004a41
 8004838:	08004a55 	.word	0x08004a55
 800483c:	08004a65 	.word	0x08004a65

08004840 <HAL_DAC_ConvCpltCallbackCh1>:
  * @brief  Conversion complete callback in non-blocking mode for Channel1
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop

08004844 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004844:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004846:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004848:	4620      	mov	r0, r4
 800484a:	f7ff fff9 	bl	8004840 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800484e:	2301      	movs	r3, #1
 8004850:	7123      	strb	r3, [r4, #4]
}
 8004852:	bd10      	pop	{r4, pc}

08004854 <HAL_DAC_ConvHalfCpltCallbackCh1>:
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop

08004858 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004858:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800485a:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800485c:	f7ff fffa 	bl	8004854 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004860:	bd08      	pop	{r3, pc}
 8004862:	bf00      	nop

08004864 <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop

08004868 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004868:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800486a:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800486c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800486e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004870:	f043 0304 	orr.w	r3, r3, #4
 8004874:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004876:	f7ff fff5 	bl	8004864 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800487a:	2301      	movs	r3, #1
 800487c:	7123      	strb	r3, [r4, #4]
}
 800487e:	bd10      	pop	{r4, pc}

08004880 <HAL_DAC_DMAUnderrunCallbackCh1>:
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop

08004884 <HAL_DAC_IRQHandler>:
  uint32_t itsource = hdac->Instance->CR;
 8004884:	6803      	ldr	r3, [r0, #0]
{
 8004886:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = hdac->Instance->CR;
 8004888:	681d      	ldr	r5, [r3, #0]
{
 800488a:	4604      	mov	r4, r0
  uint32_t itflag   = hdac->Instance->SR;
 800488c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800488e:	04aa      	lsls	r2, r5, #18
 8004890:	d501      	bpl.n	8004896 <HAL_DAC_IRQHandler+0x12>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004892:	04b1      	lsls	r1, r6, #18
 8004894:	d417      	bmi.n	80048c6 <HAL_DAC_IRQHandler+0x42>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004896:	00aa      	lsls	r2, r5, #2
 8004898:	d501      	bpl.n	800489e <HAL_DAC_IRQHandler+0x1a>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800489a:	00b3      	lsls	r3, r6, #2
 800489c:	d400      	bmi.n	80048a0 <HAL_DAC_IRQHandler+0x1c>
}
 800489e:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80048a0:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80048a8:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 80048aa:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80048ac:	6922      	ldr	r2, [r4, #16]
 80048ae:	f042 0202 	orr.w	r2, r2, #2
 80048b2:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80048b4:	6359      	str	r1, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
}
 80048bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80048c0:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80048c2:	f000 b8db 	b.w	8004a7c <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 80048c6:	2204      	movs	r2, #4
 80048c8:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80048ca:	6902      	ldr	r2, [r0, #16]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80048d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048d6:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048de:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80048e0:	f7ff ffce 	bl	8004880 <HAL_DAC_DMAUnderrunCallbackCh1>
 80048e4:	e7d7      	b.n	8004896 <HAL_DAC_IRQHandler+0x12>
 80048e6:	bf00      	nop

080048e8 <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 80048e8:	2800      	cmp	r0, #0
 80048ea:	f000 8086 	beq.w	80049fa <HAL_DAC_ConfigChannel+0x112>
{
 80048ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f2:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 80048f4:	2900      	cmp	r1, #0
 80048f6:	d04d      	beq.n	8004994 <HAL_DAC_ConfigChannel+0xac>
  __HAL_LOCK(hdac);
 80048f8:	7943      	ldrb	r3, [r0, #5]
 80048fa:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80048fc:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d079      	beq.n	80049f6 <HAL_DAC_ConfigChannel+0x10e>
 8004902:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004904:	2904      	cmp	r1, #4
 8004906:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 8004908:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800490a:	f04f 0302 	mov.w	r3, #2
 800490e:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004910:	d043      	beq.n	800499a <HAL_DAC_ConfigChannel+0xb2>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004912:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 8004916:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004918:	6928      	ldr	r0, [r5, #16]
 800491a:	2801      	cmp	r0, #1
 800491c:	d108      	bne.n	8004930 <HAL_DAC_ConfigChannel+0x48>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800491e:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 8004920:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004922:	4090      	lsls	r0, r2
 8004924:	ea26 0600 	bic.w	r6, r6, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004928:	6968      	ldr	r0, [r5, #20]
 800492a:	4090      	lsls	r0, r2
 800492c:	4330      	orrs	r0, r6
    hdac->Instance->CCR = tmpreg1;
 800492e:	6398      	str	r0, [r3, #56]	@ 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004930:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 8004932:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004934:	4090      	lsls	r0, r2
 8004936:	ea26 0600 	bic.w	r6, r6, r0
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800493a:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800493e:	2801      	cmp	r0, #1
 8004940:	d055      	beq.n	80049ee <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004942:	2802      	cmp	r0, #2
 8004944:	d055      	beq.n	80049f2 <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004946:	fab7 f087 	clz	r0, r7
 800494a:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800494c:	4339      	orrs	r1, r7
 800494e:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004950:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004952:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004956:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004958:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800495a:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800495c:	4331      	orrs	r1, r6
  hdac->State = HAL_DAC_STATE_READY;
 800495e:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 8004960:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004968:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800496c:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800496e:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 8004970:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004972:	ea21 0105 	bic.w	r1, r1, r5
  __HAL_UNLOCK(hdac);
 8004976:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004978:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800497a:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 800497c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800497e:	fa00 f102 	lsl.w	r1, r0, r2
 8004982:	681a      	ldr	r2, [r3, #0]
  return status;
 8004984:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004986:	ea22 0201 	bic.w	r2, r2, r1
 800498a:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800498c:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 800498e:	7165      	strb	r5, [r4, #5]
}
 8004990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004994:	2001      	movs	r0, #1
}
 8004996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 800499a:	f7fe fec5 	bl	8003728 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800499e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80049a0:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80049a2:	b9be      	cbnz	r6, 80049d4 <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80049a4:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8004a38 <HAL_DAC_ConfigChannel+0x150>
 80049a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049aa:	ea12 0f08 	tst.w	r2, r8
 80049ae:	d026      	beq.n	80049fe <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80049b0:	f7fe feba 	bl	8003728 <HAL_GetTick>
 80049b4:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80049b6:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80049b8:	2801      	cmp	r0, #1
 80049ba:	d9f5      	bls.n	80049a8 <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80049bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049be:	ea12 0f08 	tst.w	r2, r8
 80049c2:	d0f1      	beq.n	80049a8 <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80049c4:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80049c6:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 80049c8:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80049ca:	f043 0308 	orr.w	r3, r3, #8
 80049ce:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80049d0:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 80049d2:	e7dd      	b.n	8004990 <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80049d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049d6:	2a00      	cmp	r2, #0
 80049d8:	da2a      	bge.n	8004a30 <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80049da:	f7fe fea5 	bl	8003728 <HAL_GetTick>
 80049de:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80049e0:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80049e2:	2801      	cmp	r0, #1
 80049e4:	d9f6      	bls.n	80049d4 <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80049e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049e8:	2a00      	cmp	r2, #0
 80049ea:	daf3      	bge.n	80049d4 <HAL_DAC_ConfigChannel+0xec>
 80049ec:	e7ea      	b.n	80049c4 <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 80049ee:	2000      	movs	r0, #0
 80049f0:	e7ac      	b.n	800494c <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 80049f2:	2001      	movs	r0, #1
 80049f4:	e7aa      	b.n	800494c <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 80049f6:	2002      	movs	r0, #2
 80049f8:	e7ca      	b.n	8004990 <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 80049fa:	2001      	movs	r0, #1
}
 80049fc:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80049fe:	69aa      	ldr	r2, [r5, #24]
 8004a00:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004a02:	f006 0210 	and.w	r2, r6, #16
 8004a06:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8004a0a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8004a0c:	4090      	lsls	r0, r2
 8004a0e:	ea21 0100 	bic.w	r1, r1, r0
 8004a12:	69e8      	ldr	r0, [r5, #28]
 8004a14:	4090      	lsls	r0, r2
 8004a16:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004a18:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004a1a:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004a1c:	4090      	lsls	r0, r2
 8004a1e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004a20:	ea21 0100 	bic.w	r1, r1, r0
 8004a24:	6a28      	ldr	r0, [r5, #32]
 8004a26:	4090      	lsls	r0, r2
 8004a28:	4301      	orrs	r1, r0
 8004a2a:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004a2c:	6829      	ldr	r1, [r5, #0]
 8004a2e:	e773      	b.n	8004918 <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004a30:	69aa      	ldr	r2, [r5, #24]
 8004a32:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a34:	e7e5      	b.n	8004a02 <HAL_DAC_ConfigChannel+0x11a>
 8004a36:	bf00      	nop
 8004a38:	20008000 	.word	0x20008000

08004a3c <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop

08004a40 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004a40:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a42:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7ff fff9 	bl	8004a3c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	7123      	strb	r3, [r4, #4]
}
 8004a4e:	bd10      	pop	{r4, pc}

08004a50 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop

08004a54 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004a54:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8004a56:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004a58:	f7ff fffa 	bl	8004a50 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004a5c:	bd08      	pop	{r3, pc}
 8004a5e:	bf00      	nop

08004a60 <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop

08004a64 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004a64:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a66:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a68:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004a6a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a6c:	f043 0304 	orr.w	r3, r3, #4
 8004a70:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004a72:	f7ff fff5 	bl	8004a60 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a76:	2301      	movs	r3, #1
 8004a78:	7123      	strb	r3, [r4, #4]
}
 8004a7a:	bd10      	pop	{r4, pc}

08004a7c <HAL_DACEx_DMAUnderrunCallbackCh2>:
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop

08004a80 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a80:	4936      	ldr	r1, [pc, #216]	@ (8004b5c <DMA_CalcBaseAndBitshift+0xdc>)
{
 8004a82:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a84:	6803      	ldr	r3, [r0, #0]
 8004a86:	428b      	cmp	r3, r1
 8004a88:	d033      	beq.n	8004af2 <DMA_CalcBaseAndBitshift+0x72>
 8004a8a:	3118      	adds	r1, #24
 8004a8c:	1a59      	subs	r1, r3, r1
 8004a8e:	fab1 f181 	clz	r1, r1
 8004a92:	0949      	lsrs	r1, r1, #5
 8004a94:	bb69      	cbnz	r1, 8004af2 <DMA_CalcBaseAndBitshift+0x72>
 8004a96:	4832      	ldr	r0, [pc, #200]	@ (8004b60 <DMA_CalcBaseAndBitshift+0xe0>)
 8004a98:	4283      	cmp	r3, r0
 8004a9a:	d03e      	beq.n	8004b1a <DMA_CalcBaseAndBitshift+0x9a>
 8004a9c:	3018      	adds	r0, #24
 8004a9e:	4283      	cmp	r3, r0
 8004aa0:	d03e      	beq.n	8004b20 <DMA_CalcBaseAndBitshift+0xa0>
 8004aa2:	3018      	adds	r0, #24
 8004aa4:	4283      	cmp	r3, r0
 8004aa6:	d034      	beq.n	8004b12 <DMA_CalcBaseAndBitshift+0x92>
 8004aa8:	3018      	adds	r0, #24
 8004aaa:	4283      	cmp	r3, r0
 8004aac:	d03b      	beq.n	8004b26 <DMA_CalcBaseAndBitshift+0xa6>
 8004aae:	3018      	adds	r0, #24
 8004ab0:	4283      	cmp	r3, r0
 8004ab2:	d03e      	beq.n	8004b32 <DMA_CalcBaseAndBitshift+0xb2>
 8004ab4:	3018      	adds	r0, #24
 8004ab6:	4283      	cmp	r3, r0
 8004ab8:	d02a      	beq.n	8004b10 <DMA_CalcBaseAndBitshift+0x90>
 8004aba:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8004abe:	4283      	cmp	r3, r0
 8004ac0:	d035      	beq.n	8004b2e <DMA_CalcBaseAndBitshift+0xae>
 8004ac2:	4928      	ldr	r1, [pc, #160]	@ (8004b64 <DMA_CalcBaseAndBitshift+0xe4>)
 8004ac4:	428b      	cmp	r3, r1
 8004ac6:	d031      	beq.n	8004b2c <DMA_CalcBaseAndBitshift+0xac>
 8004ac8:	3118      	adds	r1, #24
 8004aca:	428b      	cmp	r3, r1
 8004acc:	d034      	beq.n	8004b38 <DMA_CalcBaseAndBitshift+0xb8>
 8004ace:	3118      	adds	r1, #24
 8004ad0:	428b      	cmp	r3, r1
 8004ad2:	d034      	beq.n	8004b3e <DMA_CalcBaseAndBitshift+0xbe>
 8004ad4:	3118      	adds	r1, #24
 8004ad6:	428b      	cmp	r3, r1
 8004ad8:	d034      	beq.n	8004b44 <DMA_CalcBaseAndBitshift+0xc4>
 8004ada:	3118      	adds	r1, #24
 8004adc:	428b      	cmp	r3, r1
 8004ade:	d034      	beq.n	8004b4a <DMA_CalcBaseAndBitshift+0xca>
 8004ae0:	3118      	adds	r1, #24
 8004ae2:	428b      	cmp	r3, r1
 8004ae4:	d034      	beq.n	8004b50 <DMA_CalcBaseAndBitshift+0xd0>
 8004ae6:	3118      	adds	r1, #24
 8004ae8:	428b      	cmp	r3, r1
 8004aea:	d034      	beq.n	8004b56 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004aec:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8004af0:	e011      	b.n	8004b16 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	491c      	ldr	r1, [pc, #112]	@ (8004b68 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004af6:	481d      	ldr	r0, [pc, #116]	@ (8004b6c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004af8:	3b10      	subs	r3, #16
 8004afa:	fba1 1303 	umull	r1, r3, r1, r3
{
 8004afe:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b00:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b02:	4c1b      	ldr	r4, [pc, #108]	@ (8004b70 <DMA_CalcBaseAndBitshift+0xf0>)
 8004b04:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8004b06:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b0a:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 8004b0e:	4770      	bx	lr
 8004b10:	2116      	movs	r1, #22
 8004b12:	4818      	ldr	r0, [pc, #96]	@ (8004b74 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b14:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b16:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8004b18:	4770      	bx	lr
 8004b1a:	2110      	movs	r1, #16
 8004b1c:	4813      	ldr	r0, [pc, #76]	@ (8004b6c <DMA_CalcBaseAndBitshift+0xec>)
 8004b1e:	e7f9      	b.n	8004b14 <DMA_CalcBaseAndBitshift+0x94>
 8004b20:	2116      	movs	r1, #22
 8004b22:	4812      	ldr	r0, [pc, #72]	@ (8004b6c <DMA_CalcBaseAndBitshift+0xec>)
 8004b24:	e7f6      	b.n	8004b14 <DMA_CalcBaseAndBitshift+0x94>
 8004b26:	2106      	movs	r1, #6
 8004b28:	4812      	ldr	r0, [pc, #72]	@ (8004b74 <DMA_CalcBaseAndBitshift+0xf4>)
 8004b2a:	e7f3      	b.n	8004b14 <DMA_CalcBaseAndBitshift+0x94>
 8004b2c:	2106      	movs	r1, #6
 8004b2e:	4812      	ldr	r0, [pc, #72]	@ (8004b78 <DMA_CalcBaseAndBitshift+0xf8>)
 8004b30:	e7f0      	b.n	8004b14 <DMA_CalcBaseAndBitshift+0x94>
 8004b32:	2110      	movs	r1, #16
 8004b34:	480f      	ldr	r0, [pc, #60]	@ (8004b74 <DMA_CalcBaseAndBitshift+0xf4>)
 8004b36:	e7ed      	b.n	8004b14 <DMA_CalcBaseAndBitshift+0x94>
 8004b38:	2110      	movs	r1, #16
 8004b3a:	480f      	ldr	r0, [pc, #60]	@ (8004b78 <DMA_CalcBaseAndBitshift+0xf8>)
 8004b3c:	e7ea      	b.n	8004b14 <DMA_CalcBaseAndBitshift+0x94>
 8004b3e:	2116      	movs	r1, #22
 8004b40:	480d      	ldr	r0, [pc, #52]	@ (8004b78 <DMA_CalcBaseAndBitshift+0xf8>)
 8004b42:	e7e7      	b.n	8004b14 <DMA_CalcBaseAndBitshift+0x94>
 8004b44:	2100      	movs	r1, #0
 8004b46:	480d      	ldr	r0, [pc, #52]	@ (8004b7c <DMA_CalcBaseAndBitshift+0xfc>)
 8004b48:	e7e4      	b.n	8004b14 <DMA_CalcBaseAndBitshift+0x94>
 8004b4a:	2106      	movs	r1, #6
 8004b4c:	480b      	ldr	r0, [pc, #44]	@ (8004b7c <DMA_CalcBaseAndBitshift+0xfc>)
 8004b4e:	e7e1      	b.n	8004b14 <DMA_CalcBaseAndBitshift+0x94>
 8004b50:	2110      	movs	r1, #16
 8004b52:	480a      	ldr	r0, [pc, #40]	@ (8004b7c <DMA_CalcBaseAndBitshift+0xfc>)
 8004b54:	e7de      	b.n	8004b14 <DMA_CalcBaseAndBitshift+0x94>
 8004b56:	2116      	movs	r1, #22
 8004b58:	4808      	ldr	r0, [pc, #32]	@ (8004b7c <DMA_CalcBaseAndBitshift+0xfc>)
 8004b5a:	e7db      	b.n	8004b14 <DMA_CalcBaseAndBitshift+0x94>
 8004b5c:	40020010 	.word	0x40020010
 8004b60:	40020040 	.word	0x40020040
 8004b64:	40020428 	.word	0x40020428
 8004b68:	aaaaaaab 	.word	0xaaaaaaab
 8004b6c:	40020000 	.word	0x40020000
 8004b70:	08070d54 	.word	0x08070d54
 8004b74:	40020004 	.word	0x40020004
 8004b78:	40020400 	.word	0x40020400
 8004b7c:	40020404 	.word	0x40020404

08004b80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b80:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b82:	4b28      	ldr	r3, [pc, #160]	@ (8004c24 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8004b84:	4928      	ldr	r1, [pc, #160]	@ (8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
{
 8004b86:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b88:	4d28      	ldr	r5, [pc, #160]	@ (8004c2c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8004b8a:	4c29      	ldr	r4, [pc, #164]	@ (8004c30 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8004b8c:	42aa      	cmp	r2, r5
 8004b8e:	bf18      	it	ne
 8004b90:	429a      	cmpne	r2, r3
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	428a      	cmp	r2, r1
 8004b9a:	bf08      	it	eq
 8004b9c:	f043 0301 	orreq.w	r3, r3, #1
 8004ba0:	3128      	adds	r1, #40	@ 0x28
 8004ba2:	42a2      	cmp	r2, r4
 8004ba4:	bf08      	it	eq
 8004ba6:	f043 0301 	orreq.w	r3, r3, #1
 8004baa:	3428      	adds	r4, #40	@ 0x28
 8004bac:	428a      	cmp	r2, r1
 8004bae:	bf08      	it	eq
 8004bb0:	f043 0301 	orreq.w	r3, r3, #1
 8004bb4:	3128      	adds	r1, #40	@ 0x28
 8004bb6:	42a2      	cmp	r2, r4
 8004bb8:	bf08      	it	eq
 8004bba:	f043 0301 	orreq.w	r3, r3, #1
 8004bbe:	428a      	cmp	r2, r1
 8004bc0:	bf08      	it	eq
 8004bc2:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bc6:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bc8:	b913      	cbnz	r3, 8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8004bca:	4b1a      	ldr	r3, [pc, #104]	@ (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d111      	bne.n	8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004bd0:	f1a1 0308 	sub.w	r3, r1, #8
 8004bd4:	4c18      	ldr	r4, [pc, #96]	@ (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004bd6:	4a19      	ldr	r2, [pc, #100]	@ (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bd8:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004bda:	fba4 4303 	umull	r4, r3, r4, r3
 8004bde:	4c18      	ldr	r4, [pc, #96]	@ (8004c40 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8004be0:	091d      	lsrs	r5, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004be2:	eb02 1313 	add.w	r3, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004be6:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004be8:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bea:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004bec:	e9c0 3418 	strd	r3, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004bf0:	bc30      	pop	{r4, r5}
 8004bf2:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bf4:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004bf8:	4912      	ldr	r1, [pc, #72]	@ (8004c44 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bfa:	4c13      	ldr	r4, [pc, #76]	@ (8004c48 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004bfc:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bfe:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c02:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c04:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c08:	d908      	bls.n	8004c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c0a:	f003 041f 	and.w	r4, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8004c4c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c10:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c12:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c14:	40a1      	lsls	r1, r4
 8004c16:	4c0e      	ldr	r4, [pc, #56]	@ (8004c50 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c18:	0093      	lsls	r3, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c1a:	e7e6      	b.n	8004bea <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
      stream_number += 8U;
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	461c      	mov	r4, r3
 8004c20:	e7f5      	b.n	8004c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
 8004c22:	bf00      	nop
 8004c24:	58025408 	.word	0x58025408
 8004c28:	58025430 	.word	0x58025430
 8004c2c:	5802541c 	.word	0x5802541c
 8004c30:	58025444 	.word	0x58025444
 8004c34:	58025494 	.word	0x58025494
 8004c38:	cccccccd 	.word	0xcccccccd
 8004c3c:	16009600 	.word	0x16009600
 8004c40:	58025880 	.word	0x58025880
 8004c44:	bffdfbf0 	.word	0xbffdfbf0
 8004c48:	aaaaaaab 	.word	0xaaaaaaab
 8004c4c:	10008200 	.word	0x10008200
 8004c50:	40020880 	.word	0x40020880

08004c54 <HAL_DMA_Init>:
{
 8004c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c58:	4605      	mov	r5, r0
 8004c5a:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8004c5c:	f7fe fd64 	bl	8003728 <HAL_GetTick>
  if(hdma == NULL)
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	f000 81a1 	beq.w	8004fa8 <HAL_DMA_Init+0x354>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c66:	682c      	ldr	r4, [r5, #0]
 8004c68:	4606      	mov	r6, r0
 8004c6a:	4bac      	ldr	r3, [pc, #688]	@ (8004f1c <HAL_DMA_Init+0x2c8>)
 8004c6c:	4aac      	ldr	r2, [pc, #688]	@ (8004f20 <HAL_DMA_Init+0x2cc>)
 8004c6e:	4294      	cmp	r4, r2
 8004c70:	bf18      	it	ne
 8004c72:	429c      	cmpne	r4, r3
 8004c74:	f102 0218 	add.w	r2, r2, #24
 8004c78:	bf0c      	ite	eq
 8004c7a:	2301      	moveq	r3, #1
 8004c7c:	2300      	movne	r3, #0
 8004c7e:	4294      	cmp	r4, r2
 8004c80:	bf08      	it	eq
 8004c82:	f043 0301 	orreq.w	r3, r3, #1
 8004c86:	3218      	adds	r2, #24
 8004c88:	4294      	cmp	r4, r2
 8004c8a:	bf08      	it	eq
 8004c8c:	f043 0301 	orreq.w	r3, r3, #1
 8004c90:	3218      	adds	r2, #24
 8004c92:	4294      	cmp	r4, r2
 8004c94:	bf08      	it	eq
 8004c96:	f043 0301 	orreq.w	r3, r3, #1
 8004c9a:	3218      	adds	r2, #24
 8004c9c:	4294      	cmp	r4, r2
 8004c9e:	bf08      	it	eq
 8004ca0:	f043 0301 	orreq.w	r3, r3, #1
 8004ca4:	3218      	adds	r2, #24
 8004ca6:	4294      	cmp	r4, r2
 8004ca8:	bf08      	it	eq
 8004caa:	f043 0301 	orreq.w	r3, r3, #1
 8004cae:	3218      	adds	r2, #24
 8004cb0:	4294      	cmp	r4, r2
 8004cb2:	bf08      	it	eq
 8004cb4:	f043 0301 	orreq.w	r3, r3, #1
 8004cb8:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004cbc:	4294      	cmp	r4, r2
 8004cbe:	bf08      	it	eq
 8004cc0:	f043 0301 	orreq.w	r3, r3, #1
 8004cc4:	3218      	adds	r2, #24
 8004cc6:	4294      	cmp	r4, r2
 8004cc8:	bf08      	it	eq
 8004cca:	f043 0301 	orreq.w	r3, r3, #1
 8004cce:	3218      	adds	r2, #24
 8004cd0:	4294      	cmp	r4, r2
 8004cd2:	bf08      	it	eq
 8004cd4:	f043 0301 	orreq.w	r3, r3, #1
 8004cd8:	3218      	adds	r2, #24
 8004cda:	4294      	cmp	r4, r2
 8004cdc:	bf08      	it	eq
 8004cde:	f043 0301 	orreq.w	r3, r3, #1
 8004ce2:	3218      	adds	r2, #24
 8004ce4:	4294      	cmp	r4, r2
 8004ce6:	bf08      	it	eq
 8004ce8:	f043 0301 	orreq.w	r3, r3, #1
 8004cec:	3218      	adds	r2, #24
 8004cee:	4294      	cmp	r4, r2
 8004cf0:	bf08      	it	eq
 8004cf2:	f043 0301 	orreq.w	r3, r3, #1
 8004cf6:	3218      	adds	r2, #24
 8004cf8:	4294      	cmp	r4, r2
 8004cfa:	bf08      	it	eq
 8004cfc:	f043 0301 	orreq.w	r3, r3, #1
 8004d00:	b91b      	cbnz	r3, 8004d0a <HAL_DMA_Init+0xb6>
 8004d02:	4b88      	ldr	r3, [pc, #544]	@ (8004f24 <HAL_DMA_Init+0x2d0>)
 8004d04:	429c      	cmp	r4, r3
 8004d06:	f040 8196 	bne.w	8005036 <HAL_DMA_Init+0x3e2>
    __HAL_UNLOCK(hdma);
 8004d0a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d0c:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8004d0e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d12:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	e006      	b.n	8004d2e <HAL_DMA_Init+0xda>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d20:	f7fe fd02 	bl	8003728 <HAL_GetTick>
 8004d24:	1b80      	subs	r0, r0, r6
 8004d26:	2805      	cmp	r0, #5
 8004d28:	f200 8142 	bhi.w	8004fb0 <HAL_DMA_Init+0x35c>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d2c:	682c      	ldr	r4, [r5, #0]
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	07df      	lsls	r7, r3, #31
 8004d32:	d4f5      	bmi.n	8004d20 <HAL_DMA_Init+0xcc>
    registerValue |=  hdma->Init.Direction           |
 8004d34:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d38:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8004d3a:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d3c:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004d3e:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6969      	ldr	r1, [r5, #20]
 8004d44:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d46:	69e9      	ldr	r1, [r5, #28]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d4c:	4976      	ldr	r1, [pc, #472]	@ (8004f28 <HAL_DMA_Init+0x2d4>)
 8004d4e:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d50:	6a28      	ldr	r0, [r5, #32]
 8004d52:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d54:	4875      	ldr	r0, [pc, #468]	@ (8004f2c <HAL_DMA_Init+0x2d8>)
    registerValue |=  hdma->Init.Direction           |
 8004d56:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d58:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8004d5a:	2904      	cmp	r1, #4
 8004d5c:	f000 813d 	beq.w	8004fda <HAL_DMA_Init+0x386>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d60:	6800      	ldr	r0, [r0, #0]
 8004d62:	f36f 000f 	bfc	r0, #0, #16
 8004d66:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8004d6a:	f080 80f1 	bcs.w	8004f50 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d6e:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004d70:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d72:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8004d76:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d78:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f7ff fe80 	bl	8004a80 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d80:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8004d82:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d84:	496a      	ldr	r1, [pc, #424]	@ (8004f30 <HAL_DMA_Init+0x2dc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d86:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d8a:	4f6a      	ldr	r7, [pc, #424]	@ (8004f34 <HAL_DMA_Init+0x2e0>)
 8004d8c:	1a61      	subs	r1, r4, r1
 8004d8e:	4e6a      	ldr	r6, [pc, #424]	@ (8004f38 <HAL_DMA_Init+0x2e4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d90:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d92:	4a6a      	ldr	r2, [pc, #424]	@ (8004f3c <HAL_DMA_Init+0x2e8>)
 8004d94:	fab1 f181 	clz	r1, r1
 8004d98:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d9a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d9c:	eba4 0a02 	sub.w	sl, r4, r2
 8004da0:	4b67      	ldr	r3, [pc, #412]	@ (8004f40 <HAL_DMA_Init+0x2ec>)
 8004da2:	0949      	lsrs	r1, r1, #5
 8004da4:	4a5e      	ldr	r2, [pc, #376]	@ (8004f20 <HAL_DMA_Init+0x2cc>)
 8004da6:	faba fa8a 	clz	sl, sl
 8004daa:	eba4 0903 	sub.w	r9, r4, r3
 8004dae:	4b5b      	ldr	r3, [pc, #364]	@ (8004f1c <HAL_DMA_Init+0x2c8>)
 8004db0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8004db4:	fab7 f787 	clz	r7, r7
 8004db8:	4294      	cmp	r4, r2
 8004dba:	bf18      	it	ne
 8004dbc:	429c      	cmpne	r4, r3
 8004dbe:	f102 0218 	add.w	r2, r2, #24
 8004dc2:	fab9 f989 	clz	r9, r9
 8004dc6:	eba4 0606 	sub.w	r6, r4, r6
 8004dca:	bf0c      	ite	eq
 8004dcc:	2301      	moveq	r3, #1
 8004dce:	2300      	movne	r3, #0
 8004dd0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8004dd4:	fab6 f686 	clz	r6, r6
 8004dd8:	4294      	cmp	r4, r2
 8004dda:	bf08      	it	eq
 8004ddc:	f043 0301 	orreq.w	r3, r3, #1
 8004de0:	3218      	adds	r2, #24
 8004de2:	097f      	lsrs	r7, r7, #5
 8004de4:	4294      	cmp	r4, r2
 8004de6:	bf08      	it	eq
 8004de8:	f043 0301 	orreq.w	r3, r3, #1
 8004dec:	3218      	adds	r2, #24
 8004dee:	0976      	lsrs	r6, r6, #5
 8004df0:	4294      	cmp	r4, r2
 8004df2:	bf08      	it	eq
 8004df4:	f043 0301 	orreq.w	r3, r3, #1
 8004df8:	3218      	adds	r2, #24
 8004dfa:	4294      	cmp	r4, r2
 8004dfc:	bf08      	it	eq
 8004dfe:	f043 0301 	orreq.w	r3, r3, #1
 8004e02:	3218      	adds	r2, #24
 8004e04:	4294      	cmp	r4, r2
 8004e06:	bf08      	it	eq
 8004e08:	f043 0301 	orreq.w	r3, r3, #1
 8004e0c:	3218      	adds	r2, #24
 8004e0e:	4294      	cmp	r4, r2
 8004e10:	bf08      	it	eq
 8004e12:	f043 0301 	orreq.w	r3, r3, #1
 8004e16:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8004e1a:	4294      	cmp	r4, r2
 8004e1c:	bf08      	it	eq
 8004e1e:	f043 0301 	orreq.w	r3, r3, #1
 8004e22:	3218      	adds	r2, #24
 8004e24:	4294      	cmp	r4, r2
 8004e26:	bf08      	it	eq
 8004e28:	f043 0301 	orreq.w	r3, r3, #1
 8004e2c:	3218      	adds	r2, #24
 8004e2e:	4294      	cmp	r4, r2
 8004e30:	bf08      	it	eq
 8004e32:	f043 0301 	orreq.w	r3, r3, #1
 8004e36:	3218      	adds	r2, #24
 8004e38:	4294      	cmp	r4, r2
 8004e3a:	bf08      	it	eq
 8004e3c:	f043 0301 	orreq.w	r3, r3, #1
 8004e40:	3218      	adds	r2, #24
 8004e42:	4294      	cmp	r4, r2
 8004e44:	bf08      	it	eq
 8004e46:	f043 0301 	orreq.w	r3, r3, #1
 8004e4a:	3218      	adds	r2, #24
 8004e4c:	4294      	cmp	r4, r2
 8004e4e:	bf08      	it	eq
 8004e50:	f043 0301 	orreq.w	r3, r3, #1
 8004e54:	3218      	adds	r2, #24
 8004e56:	4294      	cmp	r4, r2
 8004e58:	bf08      	it	eq
 8004e5a:	f043 0301 	orreq.w	r3, r3, #1
 8004e5e:	3218      	adds	r2, #24
 8004e60:	4294      	cmp	r4, r2
 8004e62:	bf08      	it	eq
 8004e64:	f043 0301 	orreq.w	r3, r3, #1
 8004e68:	4a36      	ldr	r2, [pc, #216]	@ (8004f44 <HAL_DMA_Init+0x2f0>)
 8004e6a:	ea4a 0303 	orr.w	r3, sl, r3
 8004e6e:	eba4 0802 	sub.w	r8, r4, r2
 8004e72:	323c      	adds	r2, #60	@ 0x3c
 8004e74:	430b      	orrs	r3, r1
 8004e76:	fab8 f888 	clz	r8, r8
 8004e7a:	eba4 0b02 	sub.w	fp, r4, r2
 8004e7e:	3214      	adds	r2, #20
 8004e80:	ea49 0303 	orr.w	r3, r9, r3
 8004e84:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004e88:	fabb fb8b 	clz	fp, fp
 8004e8c:	1aa2      	subs	r2, r4, r2
 8004e8e:	ea48 0303 	orr.w	r3, r8, r3
 8004e92:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8004e96:	fab2 f282 	clz	r2, r2
 8004e9a:	433b      	orrs	r3, r7
 8004e9c:	0952      	lsrs	r2, r2, #5
 8004e9e:	4333      	orrs	r3, r6
 8004ea0:	9201      	str	r2, [sp, #4]
 8004ea2:	ea5b 0303 	orrs.w	r3, fp, r3
 8004ea6:	d100      	bne.n	8004eaa <HAL_DMA_Init+0x256>
 8004ea8:	b382      	cbz	r2, 8004f0c <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004eaa:	4628      	mov	r0, r5
 8004eac:	9100      	str	r1, [sp, #0]
 8004eae:	f7ff fe67 	bl	8004b80 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004eb2:	68ab      	ldr	r3, [r5, #8]
 8004eb4:	9900      	ldr	r1, [sp, #0]
 8004eb6:	2b80      	cmp	r3, #128	@ 0x80
 8004eb8:	f000 8083 	beq.w	8004fc2 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ebc:	686a      	ldr	r2, [r5, #4]
 8004ebe:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8004ec0:	b2d0      	uxtb	r0, r2
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ec2:	3a01      	subs	r2, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ec4:	e9d5 4c19 	ldrd	r4, ip, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ec8:	2a07      	cmp	r2, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004eca:	6018      	str	r0, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ecc:	f8c4 c004 	str.w	ip, [r4, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ed0:	d87e      	bhi.n	8004fd0 <HAL_DMA_Init+0x37c>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ed2:	ea4a 0a01 	orr.w	sl, sl, r1
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ed6:	1e44      	subs	r4, r0, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ed8:	ea49 090a 	orr.w	r9, r9, sl
 8004edc:	ea48 0809 	orr.w	r8, r8, r9
 8004ee0:	ea47 0708 	orr.w	r7, r7, r8
 8004ee4:	433e      	orrs	r6, r7
 8004ee6:	ea5b 0606 	orrs.w	r6, fp, r6
 8004eea:	d103      	bne.n	8004ef4 <HAL_DMA_Init+0x2a0>
 8004eec:	9b01      	ldr	r3, [sp, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 811d 	beq.w	800512e <HAL_DMA_Init+0x4da>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ef4:	4a14      	ldr	r2, [pc, #80]	@ (8004f48 <HAL_DMA_Init+0x2f4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ef6:	4915      	ldr	r1, [pc, #84]	@ (8004f4c <HAL_DMA_Init+0x2f8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ef8:	4402      	add	r2, r0
 8004efa:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004efc:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004efe:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f00:	40a3      	lsls	r3, r4
 8004f02:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
 8004f06:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f08:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f0a:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f0c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004f0e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f10:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004f12:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 8004f16:	b003      	add	sp, #12
 8004f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1c:	40020010 	.word	0x40020010
 8004f20:	40020028 	.word	0x40020028
 8004f24:	400204b8 	.word	0x400204b8
 8004f28:	fe10803f 	.word	0xfe10803f
 8004f2c:	5c001000 	.word	0x5c001000
 8004f30:	5802541c 	.word	0x5802541c
 8004f34:	58025458 	.word	0x58025458
 8004f38:	5802546c 	.word	0x5802546c
 8004f3c:	58025408 	.word	0x58025408
 8004f40:	58025430 	.word	0x58025430
 8004f44:	58025444 	.word	0x58025444
 8004f48:	1600963f 	.word	0x1600963f
 8004f4c:	58025940 	.word	0x58025940
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f50:	6868      	ldr	r0, [r5, #4]
 8004f52:	282e      	cmp	r0, #46	@ 0x2e
 8004f54:	d932      	bls.n	8004fbc <HAL_DMA_Init+0x368>
 8004f56:	383f      	subs	r0, #63	@ 0x3f
 8004f58:	2813      	cmp	r0, #19
 8004f5a:	d806      	bhi.n	8004f6a <HAL_DMA_Init+0x316>
 8004f5c:	4e7a      	ldr	r6, [pc, #488]	@ (8005148 <HAL_DMA_Init+0x4f4>)
 8004f5e:	fa26 f000 	lsr.w	r0, r6, r0
 8004f62:	07c0      	lsls	r0, r0, #31
 8004f64:	d501      	bpl.n	8004f6a <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 8004f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f6a:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f6c:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f6e:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f70:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8004f74:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f78:	f47f aefe 	bne.w	8004d78 <HAL_DMA_Init+0x124>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f7c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8004f7e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8004f80:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f82:	2800      	cmp	r0, #0
 8004f84:	f43f aef8 	beq.w	8004d78 <HAL_DMA_Init+0x124>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f88:	2a00      	cmp	r2, #0
 8004f8a:	d138      	bne.n	8004ffe <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 8004f8c:	2901      	cmp	r1, #1
 8004f8e:	d04d      	beq.n	800502c <HAL_DMA_Init+0x3d8>
 8004f90:	f031 0202 	bics.w	r2, r1, #2
 8004f94:	f47f aef0 	bne.w	8004d78 <HAL_DMA_Init+0x124>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f98:	01c2      	lsls	r2, r0, #7
 8004f9a:	f57f aeed 	bpl.w	8004d78 <HAL_DMA_Init+0x124>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f9e:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8004fa0:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fa2:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004fa4:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8004fa8:	2001      	movs	r0, #1
}
 8004faa:	b003      	add	sp, #12
 8004fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fb0:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004fb2:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fb4:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004fb6:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        return HAL_ERROR;
 8004fba:	e7f5      	b.n	8004fa8 <HAL_DMA_Init+0x354>
 8004fbc:	2828      	cmp	r0, #40	@ 0x28
 8004fbe:	d9d4      	bls.n	8004f6a <HAL_DMA_Init+0x316>
 8004fc0:	e7d1      	b.n	8004f66 <HAL_DMA_Init+0x312>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fc2:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fc4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8004fc6:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fca:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fcc:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fce:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004fd6:	676b      	str	r3, [r5, #116]	@ 0x74
 8004fd8:	e798      	b.n	8004f0c <HAL_DMA_Init+0x2b8>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004fda:	6806      	ldr	r6, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fdc:	e9d5 070b 	ldrd	r0, r7, [r5, #44]	@ 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004fe0:	f36f 060f 	bfc	r6, #0, #16
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fe4:	4307      	orrs	r7, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004fe6:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fea:	ea43 0307 	orr.w	r3, r3, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004fee:	d2af      	bcs.n	8004f50 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ff0:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ff2:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ff4:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8004ff8:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ffc:	e7bf      	b.n	8004f7e <HAL_DMA_Init+0x32a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ffe:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005002:	d004      	beq.n	800500e <HAL_DMA_Init+0x3ba>
    switch (hdma->Init.FIFOThreshold)
 8005004:	2902      	cmp	r1, #2
 8005006:	d9ca      	bls.n	8004f9e <HAL_DMA_Init+0x34a>
 8005008:	2903      	cmp	r1, #3
 800500a:	d0c5      	beq.n	8004f98 <HAL_DMA_Init+0x344>
 800500c:	e6b4      	b.n	8004d78 <HAL_DMA_Init+0x124>
    switch (hdma->Init.FIFOThreshold)
 800500e:	2903      	cmp	r1, #3
 8005010:	f63f aeb2 	bhi.w	8004d78 <HAL_DMA_Init+0x124>
 8005014:	a201      	add	r2, pc, #4	@ (adr r2, 800501c <HAL_DMA_Init+0x3c8>)
 8005016:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800501a:	bf00      	nop
 800501c:	08004f9f 	.word	0x08004f9f
 8005020:	08004f99 	.word	0x08004f99
 8005024:	08004f9f 	.word	0x08004f9f
 8005028:	0800502d 	.word	0x0800502d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800502c:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8005030:	f47f aea2 	bne.w	8004d78 <HAL_DMA_Init+0x124>
 8005034:	e7b3      	b.n	8004f9e <HAL_DMA_Init+0x34a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005036:	4a45      	ldr	r2, [pc, #276]	@ (800514c <HAL_DMA_Init+0x4f8>)
 8005038:	4945      	ldr	r1, [pc, #276]	@ (8005150 <HAL_DMA_Init+0x4fc>)
 800503a:	4b46      	ldr	r3, [pc, #280]	@ (8005154 <HAL_DMA_Init+0x500>)
 800503c:	eba4 0a02 	sub.w	sl, r4, r2
 8005040:	1a61      	subs	r1, r4, r1
 8005042:	4f45      	ldr	r7, [pc, #276]	@ (8005158 <HAL_DMA_Init+0x504>)
 8005044:	eba4 0903 	sub.w	r9, r4, r3
 8005048:	faba fa8a 	clz	sl, sl
 800504c:	3314      	adds	r3, #20
 800504e:	fab1 f181 	clz	r1, r1
 8005052:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8005056:	fab9 f989 	clz	r9, r9
 800505a:	eba4 0803 	sub.w	r8, r4, r3
 800505e:	0949      	lsrs	r1, r1, #5
 8005060:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8005064:	1be7      	subs	r7, r4, r7
 8005066:	fab8 f888 	clz	r8, r8
 800506a:	ea4a 0301 	orr.w	r3, sl, r1
 800506e:	4e3b      	ldr	r6, [pc, #236]	@ (800515c <HAL_DMA_Init+0x508>)
 8005070:	3278      	adds	r2, #120	@ 0x78
 8005072:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8005076:	ea49 0303 	orr.w	r3, r9, r3
 800507a:	fab7 f787 	clz	r7, r7
 800507e:	1ba6      	subs	r6, r4, r6
 8005080:	eba4 0b02 	sub.w	fp, r4, r2
 8005084:	ea48 0303 	orr.w	r3, r8, r3
 8005088:	097f      	lsrs	r7, r7, #5
 800508a:	fab6 f686 	clz	r6, r6
 800508e:	3214      	adds	r2, #20
 8005090:	fabb fb8b 	clz	fp, fp
 8005094:	433b      	orrs	r3, r7
 8005096:	0976      	lsrs	r6, r6, #5
 8005098:	1aa2      	subs	r2, r4, r2
 800509a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800509e:	4333      	orrs	r3, r6
 80050a0:	fab2 f282 	clz	r2, r2
 80050a4:	ea5b 0303 	orrs.w	r3, fp, r3
 80050a8:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80050ac:	9201      	str	r2, [sp, #4]
 80050ae:	d101      	bne.n	80050b4 <HAL_DMA_Init+0x460>
 80050b0:	2a00      	cmp	r2, #0
 80050b2:	d043      	beq.n	800513c <HAL_DMA_Init+0x4e8>
    hdma->State = HAL_DMA_STATE_BUSY;
 80050b4:	2302      	movs	r3, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050b6:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8005170 <HAL_DMA_Init+0x51c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80050ba:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80050be:	2300      	movs	r3, #0
 80050c0:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050c4:	68ab      	ldr	r3, [r5, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050c6:	6822      	ldr	r2, [r4, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050c8:	2b40      	cmp	r3, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050ca:	ea02 0e0e 	and.w	lr, r2, lr
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050ce:	d033      	beq.n	8005138 <HAL_DMA_Init+0x4e4>
 80050d0:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 80050d4:	fab3 f383 	clz	r3, r3
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	0398      	lsls	r0, r3, #14
 80050dc:	9100      	str	r1, [sp, #0]
 80050de:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80050e2:	ea43 0c02 	orr.w	ip, r3, r2
 80050e6:	696a      	ldr	r2, [r5, #20]
 80050e8:	69ab      	ldr	r3, [r5, #24]
 80050ea:	ea4c 0c02 	orr.w	ip, ip, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80050ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005160 <HAL_DMA_Init+0x50c>)
 80050f0:	ea4c 0c03 	orr.w	ip, ip, r3
 80050f4:	69eb      	ldr	r3, [r5, #28]
 80050f6:	4422      	add	r2, r4
 80050f8:	ea4c 0c03 	orr.w	ip, ip, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80050fc:	6a2b      	ldr	r3, [r5, #32]
 80050fe:	ea4e 1313 	orr.w	r3, lr, r3, lsr #4
 8005102:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005106:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005108:	4b16      	ldr	r3, [pc, #88]	@ (8005164 <HAL_DMA_Init+0x510>)
 800510a:	fba3 2302 	umull	r2, r3, r3, r2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800510e:	6020      	str	r0, [r4, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005110:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	65eb      	str	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005118:	f7ff fcb2 	bl	8004a80 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800511c:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800511e:	4602      	mov	r2, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005120:	9900      	ldr	r1, [sp, #0]
 8005122:	f003 001f 	and.w	r0, r3, #31
 8005126:	2301      	movs	r3, #1
 8005128:	4083      	lsls	r3, r0
 800512a:	6053      	str	r3, [r2, #4]
 800512c:	e6bd      	b.n	8004eaa <HAL_DMA_Init+0x256>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800512e:	4a0e      	ldr	r2, [pc, #56]	@ (8005168 <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005130:	490e      	ldr	r1, [pc, #56]	@ (800516c <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005132:	4402      	add	r2, r0
 8005134:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005136:	e6e1      	b.n	8004efc <HAL_DMA_Init+0x2a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005138:	2010      	movs	r0, #16
 800513a:	e7cf      	b.n	80050dc <HAL_DMA_Init+0x488>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800513c:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800513e:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005140:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005142:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8005146:	e72f      	b.n	8004fa8 <HAL_DMA_Init+0x354>
 8005148:	000f030f 	.word	0x000f030f
 800514c:	58025408 	.word	0x58025408
 8005150:	5802541c 	.word	0x5802541c
 8005154:	58025430 	.word	0x58025430
 8005158:	58025458 	.word	0x58025458
 800515c:	5802546c 	.word	0x5802546c
 8005160:	a7fdabf8 	.word	0xa7fdabf8
 8005164:	cccccccd 	.word	0xcccccccd
 8005168:	1000823f 	.word	0x1000823f
 800516c:	40020940 	.word	0x40020940
 8005170:	fffe000f 	.word	0xfffe000f

08005174 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8005174:	2800      	cmp	r0, #0
 8005176:	f000 8221 	beq.w	80055bc <HAL_DMA_Start_IT+0x448>
{
 800517a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hdma);
 800517e:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8005182:	2c01      	cmp	r4, #1
 8005184:	f000 8217 	beq.w	80055b6 <HAL_DMA_Start_IT+0x442>
 8005188:	2401      	movs	r4, #1
 800518a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800518e:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8005192:	2c01      	cmp	r4, #1
 8005194:	d008      	beq.n	80051a8 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005196:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 800519a:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800519c:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800519e:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 80051a2:	2001      	movs	r0, #1
}
 80051a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80051a8:	2402      	movs	r4, #2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051aa:	4e69      	ldr	r6, [pc, #420]	@ (8005350 <HAL_DMA_Start_IT+0x1dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051ac:	f8df e1a8 	ldr.w	lr, [pc, #424]	@ 8005358 <HAL_DMA_Start_IT+0x1e4>
    hdma->State = HAL_DMA_STATE_BUSY;
 80051b0:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051b4:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 80051b6:	4d67      	ldr	r5, [pc, #412]	@ (8005354 <HAL_DMA_Start_IT+0x1e0>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051b8:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 80051ba:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800536c <HAL_DMA_Start_IT+0x1f8>
 80051c0:	4574      	cmp	r4, lr
 80051c2:	bf18      	it	ne
 80051c4:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 80051c6:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8005370 <HAL_DMA_Start_IT+0x1fc>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051ca:	f8d0 a058 	ldr.w	sl, [r0, #88]	@ 0x58
 80051ce:	bf0c      	ite	eq
 80051d0:	2601      	moveq	r6, #1
 80051d2:	2600      	movne	r6, #0
 80051d4:	4544      	cmp	r4, r8
 80051d6:	bf14      	ite	ne
 80051d8:	46b1      	movne	r9, r6
 80051da:	f046 0901 	orreq.w	r9, r6, #1
    __HAL_DMA_DISABLE(hdma);
 80051de:	42ac      	cmp	r4, r5
 80051e0:	bf18      	it	ne
 80051e2:	4564      	cmpne	r4, ip
 80051e4:	bf0c      	ite	eq
 80051e6:	2501      	moveq	r5, #1
 80051e8:	2500      	movne	r5, #0
 80051ea:	f040 80c3 	bne.w	8005374 <HAL_DMA_Start_IT+0x200>
 80051ee:	f8d4 c000 	ldr.w	ip, [r4]
 80051f2:	f02c 0c01 	bic.w	ip, ip, #1
 80051f6:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 80051fa:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051fe:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
 8005202:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8005204:	f1bc 0f00 	cmp.w	ip, #0
 8005208:	d007      	beq.n	800521a <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800520a:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 800520e:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005210:	b91d      	cbnz	r5, 800521a <HAL_DMA_Start_IT+0xa6>
 8005212:	f1b9 0f00 	cmp.w	r9, #0
 8005216:	f000 8130 	beq.w	800547a <HAL_DMA_Start_IT+0x306>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800521a:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 800521c:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 8005220:	f007 081f 	and.w	r8, r7, #31
 8005224:	fa0e fe08 	lsl.w	lr, lr, r8
 8005228:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800522c:	6827      	ldr	r7, [r4, #0]
 800522e:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 8005232:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005234:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005236:	6883      	ldr	r3, [r0, #8]
 8005238:	2b40      	cmp	r3, #64	@ 0x40
 800523a:	f000 81c1 	beq.w	80055c0 <HAL_DMA_Start_IT+0x44c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800523e:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005240:	60e2      	str	r2, [r4, #12]
      if(hdma->XferHalfCpltCallback != NULL)
 8005242:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005244:	2d00      	cmp	r5, #0
 8005246:	f040 81a1 	bne.w	800558c <HAL_DMA_Start_IT+0x418>
 800524a:	4b43      	ldr	r3, [pc, #268]	@ (8005358 <HAL_DMA_Start_IT+0x1e4>)
 800524c:	429c      	cmp	r4, r3
 800524e:	f000 81de 	beq.w	800560e <HAL_DMA_Start_IT+0x49a>
 8005252:	3318      	adds	r3, #24
 8005254:	429c      	cmp	r4, r3
 8005256:	f000 81f6 	beq.w	8005646 <HAL_DMA_Start_IT+0x4d2>
 800525a:	f1b9 0f00 	cmp.w	r9, #0
 800525e:	f040 81c7 	bne.w	80055f0 <HAL_DMA_Start_IT+0x47c>
 8005262:	4b3e      	ldr	r3, [pc, #248]	@ (800535c <HAL_DMA_Start_IT+0x1e8>)
 8005264:	429c      	cmp	r4, r3
 8005266:	f000 8201 	beq.w	800566c <HAL_DMA_Start_IT+0x4f8>
 800526a:	4b3d      	ldr	r3, [pc, #244]	@ (8005360 <HAL_DMA_Start_IT+0x1ec>)
 800526c:	429c      	cmp	r4, r3
 800526e:	f000 8209 	beq.w	8005684 <HAL_DMA_Start_IT+0x510>
 8005272:	3318      	adds	r3, #24
 8005274:	429c      	cmp	r4, r3
 8005276:	f000 8223 	beq.w	80056c0 <HAL_DMA_Start_IT+0x54c>
 800527a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800527e:	429c      	cmp	r4, r3
 8005280:	f000 8233 	beq.w	80056ea <HAL_DMA_Start_IT+0x576>
 8005284:	3318      	adds	r3, #24
 8005286:	429c      	cmp	r4, r3
 8005288:	f000 8242 	beq.w	8005710 <HAL_DMA_Start_IT+0x59c>
 800528c:	3318      	adds	r3, #24
 800528e:	429c      	cmp	r4, r3
 8005290:	f000 8249 	beq.w	8005726 <HAL_DMA_Start_IT+0x5b2>
 8005294:	3318      	adds	r3, #24
 8005296:	429c      	cmp	r4, r3
 8005298:	f000 8250 	beq.w	800573c <HAL_DMA_Start_IT+0x5c8>
 800529c:	3318      	adds	r3, #24
 800529e:	429c      	cmp	r4, r3
 80052a0:	f000 8257 	beq.w	8005752 <HAL_DMA_Start_IT+0x5de>
 80052a4:	3318      	adds	r3, #24
 80052a6:	429c      	cmp	r4, r3
 80052a8:	f000 8267 	beq.w	800577a <HAL_DMA_Start_IT+0x606>
 80052ac:	3318      	adds	r3, #24
 80052ae:	429c      	cmp	r4, r3
 80052b0:	f000 8265 	beq.w	800577e <HAL_DMA_Start_IT+0x60a>
 80052b4:	3318      	adds	r3, #24
 80052b6:	429c      	cmp	r4, r3
 80052b8:	f000 8275 	beq.w	80057a6 <HAL_DMA_Start_IT+0x632>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	f023 030e 	bic.w	r3, r3, #14
 80052c2:	f043 030a 	orr.w	r3, r3, #10
 80052c6:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80052c8:	b11a      	cbz	r2, 80052d2 <HAL_DMA_Start_IT+0x15e>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	f043 0304 	orr.w	r3, r3, #4
 80052d0:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052d2:	4b24      	ldr	r3, [pc, #144]	@ (8005364 <HAL_DMA_Start_IT+0x1f0>)
 80052d4:	4a24      	ldr	r2, [pc, #144]	@ (8005368 <HAL_DMA_Start_IT+0x1f4>)
 80052d6:	4294      	cmp	r4, r2
 80052d8:	bf18      	it	ne
 80052da:	429c      	cmpne	r4, r3
 80052dc:	f102 0214 	add.w	r2, r2, #20
 80052e0:	bf0c      	ite	eq
 80052e2:	2301      	moveq	r3, #1
 80052e4:	2300      	movne	r3, #0
 80052e6:	4294      	cmp	r4, r2
 80052e8:	bf08      	it	eq
 80052ea:	f043 0301 	orreq.w	r3, r3, #1
 80052ee:	3214      	adds	r2, #20
 80052f0:	4294      	cmp	r4, r2
 80052f2:	bf08      	it	eq
 80052f4:	f043 0301 	orreq.w	r3, r3, #1
 80052f8:	3214      	adds	r2, #20
 80052fa:	4294      	cmp	r4, r2
 80052fc:	bf08      	it	eq
 80052fe:	f043 0301 	orreq.w	r3, r3, #1
 8005302:	3214      	adds	r2, #20
 8005304:	4294      	cmp	r4, r2
 8005306:	bf08      	it	eq
 8005308:	f043 0301 	orreq.w	r3, r3, #1
 800530c:	3214      	adds	r2, #20
 800530e:	4294      	cmp	r4, r2
 8005310:	bf08      	it	eq
 8005312:	f043 0301 	orreq.w	r3, r3, #1
 8005316:	3214      	adds	r2, #20
 8005318:	4294      	cmp	r4, r2
 800531a:	bf08      	it	eq
 800531c:	f043 0301 	orreq.w	r3, r3, #1
 8005320:	b17b      	cbz	r3, 8005342 <HAL_DMA_Start_IT+0x1ce>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005322:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005324:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	03d2      	lsls	r2, r2, #15
 800532c:	f100 813e 	bmi.w	80055ac <HAL_DMA_Start_IT+0x438>
      if(hdma->DMAmuxRequestGen != 0U)
 8005330:	f1bc 0f00 	cmp.w	ip, #0
 8005334:	d005      	beq.n	8005342 <HAL_DMA_Start_IT+0x1ce>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005336:	f8dc 3000 	ldr.w	r3, [ip]
 800533a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800533e:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 8005342:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005344:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6023      	str	r3, [r4, #0]
}
 800534c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005350:	40020070 	.word	0x40020070
 8005354:	40020028 	.word	0x40020028
 8005358:	40020040 	.word	0x40020040
 800535c:	40020088 	.word	0x40020088
 8005360:	400200a0 	.word	0x400200a0
 8005364:	58025408 	.word	0x58025408
 8005368:	5802541c 	.word	0x5802541c
 800536c:	40020058 	.word	0x40020058
 8005370:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8005374:	4574      	cmp	r4, lr
 8005376:	f000 8154 	beq.w	8005622 <HAL_DMA_Start_IT+0x4ae>
 800537a:	4544      	cmp	r4, r8
 800537c:	f000 815a 	beq.w	8005634 <HAL_DMA_Start_IT+0x4c0>
 8005380:	f1b9 0f00 	cmp.w	r9, #0
 8005384:	f040 811f 	bne.w	80055c6 <HAL_DMA_Start_IT+0x452>
 8005388:	f8df c434 	ldr.w	ip, [pc, #1076]	@ 80057c0 <HAL_DMA_Start_IT+0x64c>
 800538c:	4564      	cmp	r4, ip
 800538e:	f000 8164 	beq.w	800565a <HAL_DMA_Start_IT+0x4e6>
 8005392:	f10c 0c18 	add.w	ip, ip, #24
 8005396:	4564      	cmp	r4, ip
 8005398:	f000 8180 	beq.w	800569c <HAL_DMA_Start_IT+0x528>
 800539c:	f10c 0c18 	add.w	ip, ip, #24
 80053a0:	4564      	cmp	r4, ip
 80053a2:	f000 8184 	beq.w	80056ae <HAL_DMA_Start_IT+0x53a>
 80053a6:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 80053aa:	4564      	cmp	r4, ip
 80053ac:	f000 8194 	beq.w	80056d8 <HAL_DMA_Start_IT+0x564>
 80053b0:	f10c 0c18 	add.w	ip, ip, #24
 80053b4:	4564      	cmp	r4, ip
 80053b6:	f000 81a2 	beq.w	80056fe <HAL_DMA_Start_IT+0x58a>
 80053ba:	f10c 0c18 	add.w	ip, ip, #24
 80053be:	4564      	cmp	r4, ip
 80053c0:	f000 81b3 	beq.w	800572a <HAL_DMA_Start_IT+0x5b6>
 80053c4:	f10c 0c18 	add.w	ip, ip, #24
 80053c8:	4564      	cmp	r4, ip
 80053ca:	f000 81b9 	beq.w	8005740 <HAL_DMA_Start_IT+0x5cc>
 80053ce:	f10c 0c18 	add.w	ip, ip, #24
 80053d2:	4564      	cmp	r4, ip
 80053d4:	f000 81bf 	beq.w	8005756 <HAL_DMA_Start_IT+0x5e2>
 80053d8:	f10c 0c18 	add.w	ip, ip, #24
 80053dc:	4564      	cmp	r4, ip
 80053de:	f000 81c3 	beq.w	8005768 <HAL_DMA_Start_IT+0x5f4>
 80053e2:	f10c 0c18 	add.w	ip, ip, #24
 80053e6:	4564      	cmp	r4, ip
 80053e8:	f000 81cb 	beq.w	8005782 <HAL_DMA_Start_IT+0x60e>
 80053ec:	f10c 0c18 	add.w	ip, ip, #24
 80053f0:	4564      	cmp	r4, ip
 80053f2:	f000 81cf 	beq.w	8005794 <HAL_DMA_Start_IT+0x620>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053f6:	f8df c3cc 	ldr.w	ip, [pc, #972]	@ 80057c4 <HAL_DMA_Start_IT+0x650>
 80053fa:	f8df e3cc 	ldr.w	lr, [pc, #972]	@ 80057c8 <HAL_DMA_Start_IT+0x654>
 80053fe:	4574      	cmp	r4, lr
 8005400:	bf18      	it	ne
 8005402:	4564      	cmpne	r4, ip
 8005404:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
 8005408:	bf0c      	ite	eq
 800540a:	f04f 0c01 	moveq.w	ip, #1
 800540e:	f04f 0c00 	movne.w	ip, #0
 8005412:	4574      	cmp	r4, lr
 8005414:	bf08      	it	eq
 8005416:	f04c 0c01 	orreq.w	ip, ip, #1
 800541a:	f10e 0e14 	add.w	lr, lr, #20
 800541e:	4574      	cmp	r4, lr
 8005420:	bf08      	it	eq
 8005422:	f04c 0c01 	orreq.w	ip, ip, #1
 8005426:	f10e 0e14 	add.w	lr, lr, #20
 800542a:	4574      	cmp	r4, lr
 800542c:	bf08      	it	eq
 800542e:	f04c 0c01 	orreq.w	ip, ip, #1
 8005432:	f10e 0e14 	add.w	lr, lr, #20
 8005436:	4574      	cmp	r4, lr
 8005438:	bf08      	it	eq
 800543a:	f04c 0c01 	orreq.w	ip, ip, #1
    __HAL_DMA_DISABLE(hdma);
 800543e:	f8d4 e000 	ldr.w	lr, [r4]
 8005442:	f02e 0e01 	bic.w	lr, lr, #1
 8005446:	f8c4 e000 	str.w	lr, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800544a:	f8df e380 	ldr.w	lr, [pc, #896]	@ 80057cc <HAL_DMA_Start_IT+0x658>
 800544e:	4574      	cmp	r4, lr
 8005450:	bf08      	it	eq
 8005452:	f04c 0c01 	orreq.w	ip, ip, #1
 8005456:	f1bc 0f00 	cmp.w	ip, #0
 800545a:	d103      	bne.n	8005464 <HAL_DMA_Start_IT+0x2f0>
 800545c:	f8df c370 	ldr.w	ip, [pc, #880]	@ 80057d0 <HAL_DMA_Start_IT+0x65c>
 8005460:	4564      	cmp	r4, ip
 8005462:	d14f      	bne.n	8005504 <HAL_DMA_Start_IT+0x390>
    if(hdma->DMAmuxRequestGen != 0U)
 8005464:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005468:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 800546c:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800546e:	f1bc 0f00 	cmp.w	ip, #0
 8005472:	d002      	beq.n	800547a <HAL_DMA_Start_IT+0x306>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005474:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8005478:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800547a:	f8df e344 	ldr.w	lr, [pc, #836]	@ 80057c0 <HAL_DMA_Start_IT+0x64c>
 800547e:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 80057d4 <HAL_DMA_Start_IT+0x660>
 8005482:	4544      	cmp	r4, r8
 8005484:	bf18      	it	ne
 8005486:	4574      	cmpne	r4, lr
 8005488:	f108 0818 	add.w	r8, r8, #24
 800548c:	bf0c      	ite	eq
 800548e:	f04f 0e01 	moveq.w	lr, #1
 8005492:	f04f 0e00 	movne.w	lr, #0
 8005496:	4544      	cmp	r4, r8
 8005498:	bf08      	it	eq
 800549a:	f04e 0e01 	orreq.w	lr, lr, #1
 800549e:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 80054a2:	4544      	cmp	r4, r8
 80054a4:	bf08      	it	eq
 80054a6:	f04e 0e01 	orreq.w	lr, lr, #1
 80054aa:	f108 0818 	add.w	r8, r8, #24
 80054ae:	4544      	cmp	r4, r8
 80054b0:	bf08      	it	eq
 80054b2:	f04e 0e01 	orreq.w	lr, lr, #1
 80054b6:	f108 0818 	add.w	r8, r8, #24
 80054ba:	4544      	cmp	r4, r8
 80054bc:	bf08      	it	eq
 80054be:	f04e 0e01 	orreq.w	lr, lr, #1
 80054c2:	f108 0818 	add.w	r8, r8, #24
 80054c6:	4544      	cmp	r4, r8
 80054c8:	bf08      	it	eq
 80054ca:	f04e 0e01 	orreq.w	lr, lr, #1
 80054ce:	f108 0818 	add.w	r8, r8, #24
 80054d2:	4544      	cmp	r4, r8
 80054d4:	bf08      	it	eq
 80054d6:	f04e 0e01 	orreq.w	lr, lr, #1
 80054da:	f108 0818 	add.w	r8, r8, #24
 80054de:	4544      	cmp	r4, r8
 80054e0:	bf08      	it	eq
 80054e2:	f04e 0e01 	orreq.w	lr, lr, #1
 80054e6:	f108 0818 	add.w	r8, r8, #24
 80054ea:	4544      	cmp	r4, r8
 80054ec:	bf08      	it	eq
 80054ee:	f04e 0e01 	orreq.w	lr, lr, #1
 80054f2:	f1be 0f00 	cmp.w	lr, #0
 80054f6:	f47f ae90 	bne.w	800521a <HAL_DMA_Start_IT+0xa6>
 80054fa:	f8df e2dc 	ldr.w	lr, [pc, #732]	@ 80057d8 <HAL_DMA_Start_IT+0x664>
 80054fe:	4574      	cmp	r4, lr
 8005500:	f43f ae8b 	beq.w	800521a <HAL_DMA_Start_IT+0xa6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005504:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 80057c8 <HAL_DMA_Start_IT+0x654>
 8005508:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 80057c4 <HAL_DMA_Start_IT+0x650>
 800550c:	4574      	cmp	r4, lr
 800550e:	bf18      	it	ne
 8005510:	4564      	cmpne	r4, ip
 8005512:	f10e 0e14 	add.w	lr, lr, #20
 8005516:	bf0c      	ite	eq
 8005518:	f04f 0c01 	moveq.w	ip, #1
 800551c:	f04f 0c00 	movne.w	ip, #0
 8005520:	4574      	cmp	r4, lr
 8005522:	bf08      	it	eq
 8005524:	f04c 0c01 	orreq.w	ip, ip, #1
 8005528:	f10e 0e14 	add.w	lr, lr, #20
 800552c:	4574      	cmp	r4, lr
 800552e:	bf08      	it	eq
 8005530:	f04c 0c01 	orreq.w	ip, ip, #1
 8005534:	f10e 0e14 	add.w	lr, lr, #20
 8005538:	4574      	cmp	r4, lr
 800553a:	bf08      	it	eq
 800553c:	f04c 0c01 	orreq.w	ip, ip, #1
 8005540:	f10e 0e14 	add.w	lr, lr, #20
 8005544:	4574      	cmp	r4, lr
 8005546:	bf08      	it	eq
 8005548:	f04c 0c01 	orreq.w	ip, ip, #1
 800554c:	f10e 0e14 	add.w	lr, lr, #20
 8005550:	4574      	cmp	r4, lr
 8005552:	bf08      	it	eq
 8005554:	f04c 0c01 	orreq.w	ip, ip, #1
 8005558:	f1bc 0f00 	cmp.w	ip, #0
 800555c:	d104      	bne.n	8005568 <HAL_DMA_Start_IT+0x3f4>
 800555e:	f8df c270 	ldr.w	ip, [pc, #624]	@ 80057d0 <HAL_DMA_Start_IT+0x65c>
 8005562:	4564      	cmp	r4, ip
 8005564:	f040 8125 	bne.w	80057b2 <HAL_DMA_Start_IT+0x63e>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005568:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 800556a:	f04f 0c01 	mov.w	ip, #1
 800556e:	f006 0e1f 	and.w	lr, r6, #31
 8005572:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005576:	f8ca c004 	str.w	ip, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800557a:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800557c:	6883      	ldr	r3, [r0, #8]
 800557e:	2b40      	cmp	r3, #64	@ 0x40
 8005580:	f000 8113 	beq.w	80057aa <HAL_DMA_Start_IT+0x636>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005584:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005586:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005588:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800558a:	e65e      	b.n	800524a <HAL_DMA_Start_IT+0xd6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	f023 031e 	bic.w	r3, r3, #30
 8005592:	f043 0316 	orr.w	r3, r3, #22
 8005596:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005598:	b11a      	cbz	r2, 80055a2 <HAL_DMA_Start_IT+0x42e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	f043 0308 	orr.w	r3, r3, #8
 80055a0:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055a2:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	03d2      	lsls	r2, r2, #15
 80055a8:	f57f aec2 	bpl.w	8005330 <HAL_DMA_Start_IT+0x1bc>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	e6bc      	b.n	8005330 <HAL_DMA_Start_IT+0x1bc>
  __HAL_LOCK(hdma);
 80055b6:	2002      	movs	r0, #2
}
 80055b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 80055bc:	2001      	movs	r0, #1
}
 80055be:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80055c0:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80055c2:	60e1      	str	r1, [r4, #12]
 80055c4:	e63d      	b.n	8005242 <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 80055c6:	f8df e1f0 	ldr.w	lr, [pc, #496]	@ 80057b8 <HAL_DMA_Start_IT+0x644>
 80055ca:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 80055ce:	f02c 0c01 	bic.w	ip, ip, #1
 80055d2:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 80055d6:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055da:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 80055de:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80055e0:	f1bc 0f00 	cmp.w	ip, #0
 80055e4:	f43f ae19 	beq.w	800521a <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055e8:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 80055ec:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055ee:	e614      	b.n	800521a <HAL_DMA_Start_IT+0xa6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055f0:	4971      	ldr	r1, [pc, #452]	@ (80057b8 <HAL_DMA_Start_IT+0x644>)
 80055f2:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 80055f4:	f023 031e 	bic.w	r3, r3, #30
 80055f8:	f043 0316 	orr.w	r3, r3, #22
 80055fc:	670b      	str	r3, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 80055fe:	2a00      	cmp	r2, #0
 8005600:	f43f ae8f 	beq.w	8005322 <HAL_DMA_Start_IT+0x1ae>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	f043 0308 	orr.w	r3, r3, #8
 800560a:	6023      	str	r3, [r4, #0]
 800560c:	e689      	b.n	8005322 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800560e:	496a      	ldr	r1, [pc, #424]	@ (80057b8 <HAL_DMA_Start_IT+0x644>)
 8005610:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005612:	f023 031e 	bic.w	r3, r3, #30
 8005616:	f043 0316 	orr.w	r3, r3, #22
 800561a:	640b      	str	r3, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 800561c:	2a00      	cmp	r2, #0
 800561e:	d1f1      	bne.n	8005604 <HAL_DMA_Start_IT+0x490>
 8005620:	e67f      	b.n	8005322 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8005622:	f8df e194 	ldr.w	lr, [pc, #404]	@ 80057b8 <HAL_DMA_Start_IT+0x644>
 8005626:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 800562a:	f02c 0c01 	bic.w	ip, ip, #1
 800562e:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005632:	e5e2      	b.n	80051fa <HAL_DMA_Start_IT+0x86>
    __HAL_DMA_DISABLE(hdma);
 8005634:	f8df e180 	ldr.w	lr, [pc, #384]	@ 80057b8 <HAL_DMA_Start_IT+0x644>
 8005638:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 800563c:	f02c 0c01 	bic.w	ip, ip, #1
 8005640:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005644:	e7c7      	b.n	80055d6 <HAL_DMA_Start_IT+0x462>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005646:	495c      	ldr	r1, [pc, #368]	@ (80057b8 <HAL_DMA_Start_IT+0x644>)
 8005648:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 800564a:	f023 031e 	bic.w	r3, r3, #30
 800564e:	f043 0316 	orr.w	r3, r3, #22
 8005652:	658b      	str	r3, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 8005654:	2a00      	cmp	r2, #0
 8005656:	d1d5      	bne.n	8005604 <HAL_DMA_Start_IT+0x490>
 8005658:	e663      	b.n	8005322 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 800565a:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 80057b8 <HAL_DMA_Start_IT+0x644>
 800565e:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8005662:	f02c 0c01 	bic.w	ip, ip, #1
 8005666:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800566a:	e6fb      	b.n	8005464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800566c:	4952      	ldr	r1, [pc, #328]	@ (80057b8 <HAL_DMA_Start_IT+0x644>)
 800566e:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8005672:	f023 031e 	bic.w	r3, r3, #30
 8005676:	f043 0316 	orr.w	r3, r3, #22
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 800567e:	2a00      	cmp	r2, #0
 8005680:	d1c0      	bne.n	8005604 <HAL_DMA_Start_IT+0x490>
 8005682:	e64e      	b.n	8005322 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005684:	494c      	ldr	r1, [pc, #304]	@ (80057b8 <HAL_DMA_Start_IT+0x644>)
 8005686:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
 800568a:	f023 031e 	bic.w	r3, r3, #30
 800568e:	f043 0316 	orr.w	r3, r3, #22
 8005692:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8005696:	2a00      	cmp	r2, #0
 8005698:	d1b4      	bne.n	8005604 <HAL_DMA_Start_IT+0x490>
 800569a:	e642      	b.n	8005322 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 800569c:	f8df e118 	ldr.w	lr, [pc, #280]	@ 80057b8 <HAL_DMA_Start_IT+0x644>
 80056a0:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 80056a4:	f02c 0c01 	bic.w	ip, ip, #1
 80056a8:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056ac:	e6da      	b.n	8005464 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 80056ae:	f8df e108 	ldr.w	lr, [pc, #264]	@ 80057b8 <HAL_DMA_Start_IT+0x644>
 80056b2:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 80056b6:	f02c 0c01 	bic.w	ip, ip, #1
 80056ba:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056be:	e6d1      	b.n	8005464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80056c0:	493d      	ldr	r1, [pc, #244]	@ (80057b8 <HAL_DMA_Start_IT+0x644>)
 80056c2:	f8d1 30b8 	ldr.w	r3, [r1, #184]	@ 0xb8
 80056c6:	f023 031e 	bic.w	r3, r3, #30
 80056ca:	f043 0316 	orr.w	r3, r3, #22
 80056ce:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	d196      	bne.n	8005604 <HAL_DMA_Start_IT+0x490>
 80056d6:	e624      	b.n	8005322 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80056d8:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 80057bc <HAL_DMA_Start_IT+0x648>
 80056dc:	f8de c010 	ldr.w	ip, [lr, #16]
 80056e0:	f02c 0c01 	bic.w	ip, ip, #1
 80056e4:	f8ce c010 	str.w	ip, [lr, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056e8:	e6bc      	b.n	8005464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80056ea:	4934      	ldr	r1, [pc, #208]	@ (80057bc <HAL_DMA_Start_IT+0x648>)
 80056ec:	690b      	ldr	r3, [r1, #16]
 80056ee:	f023 031e 	bic.w	r3, r3, #30
 80056f2:	f043 0316 	orr.w	r3, r3, #22
 80056f6:	610b      	str	r3, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 80056f8:	2a00      	cmp	r2, #0
 80056fa:	d183      	bne.n	8005604 <HAL_DMA_Start_IT+0x490>
 80056fc:	e611      	b.n	8005322 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80056fe:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 80057bc <HAL_DMA_Start_IT+0x648>
 8005702:	f8de c028 	ldr.w	ip, [lr, #40]	@ 0x28
 8005706:	f02c 0c01 	bic.w	ip, ip, #1
 800570a:	f8ce c028 	str.w	ip, [lr, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800570e:	e6a9      	b.n	8005464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005710:	492a      	ldr	r1, [pc, #168]	@ (80057bc <HAL_DMA_Start_IT+0x648>)
 8005712:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8005714:	f023 031e 	bic.w	r3, r3, #30
 8005718:	f043 0316 	orr.w	r3, r3, #22
 800571c:	628b      	str	r3, [r1, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 800571e:	2a00      	cmp	r2, #0
 8005720:	f47f af70 	bne.w	8005604 <HAL_DMA_Start_IT+0x490>
 8005724:	e5fd      	b.n	8005322 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005726:	4925      	ldr	r1, [pc, #148]	@ (80057bc <HAL_DMA_Start_IT+0x648>)
 8005728:	e772      	b.n	8005610 <HAL_DMA_Start_IT+0x49c>
    __HAL_DMA_DISABLE(hdma);
 800572a:	f8df e090 	ldr.w	lr, [pc, #144]	@ 80057bc <HAL_DMA_Start_IT+0x648>
 800572e:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 8005732:	f02c 0c01 	bic.w	ip, ip, #1
 8005736:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800573a:	e693      	b.n	8005464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800573c:	491f      	ldr	r1, [pc, #124]	@ (80057bc <HAL_DMA_Start_IT+0x648>)
 800573e:	e783      	b.n	8005648 <HAL_DMA_Start_IT+0x4d4>
    __HAL_DMA_DISABLE(hdma);
 8005740:	f8df e078 	ldr.w	lr, [pc, #120]	@ 80057bc <HAL_DMA_Start_IT+0x648>
 8005744:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 8005748:	f02c 0c01 	bic.w	ip, ip, #1
 800574c:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005750:	e688      	b.n	8005464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005752:	491a      	ldr	r1, [pc, #104]	@ (80057bc <HAL_DMA_Start_IT+0x648>)
 8005754:	e74d      	b.n	80055f2 <HAL_DMA_Start_IT+0x47e>
    __HAL_DMA_DISABLE(hdma);
 8005756:	f8df e064 	ldr.w	lr, [pc, #100]	@ 80057bc <HAL_DMA_Start_IT+0x648>
 800575a:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 800575e:	f02c 0c01 	bic.w	ip, ip, #1
 8005762:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005766:	e67d      	b.n	8005464 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8005768:	f8df e050 	ldr.w	lr, [pc, #80]	@ 80057bc <HAL_DMA_Start_IT+0x648>
 800576c:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 8005770:	f02c 0c01 	bic.w	ip, ip, #1
 8005774:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005778:	e674      	b.n	8005464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800577a:	4910      	ldr	r1, [pc, #64]	@ (80057bc <HAL_DMA_Start_IT+0x648>)
 800577c:	e777      	b.n	800566e <HAL_DMA_Start_IT+0x4fa>
 800577e:	490f      	ldr	r1, [pc, #60]	@ (80057bc <HAL_DMA_Start_IT+0x648>)
 8005780:	e781      	b.n	8005686 <HAL_DMA_Start_IT+0x512>
    __HAL_DMA_DISABLE(hdma);
 8005782:	f8df e038 	ldr.w	lr, [pc, #56]	@ 80057bc <HAL_DMA_Start_IT+0x648>
 8005786:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 800578a:	f02c 0c01 	bic.w	ip, ip, #1
 800578e:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005792:	e667      	b.n	8005464 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8005794:	f8df e024 	ldr.w	lr, [pc, #36]	@ 80057bc <HAL_DMA_Start_IT+0x648>
 8005798:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 800579c:	f02c 0c01 	bic.w	ip, ip, #1
 80057a0:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057a4:	e65e      	b.n	8005464 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80057a6:	4905      	ldr	r1, [pc, #20]	@ (80057bc <HAL_DMA_Start_IT+0x648>)
 80057a8:	e78b      	b.n	80056c2 <HAL_DMA_Start_IT+0x54e>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80057aa:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80057ac:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80057ae:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057b0:	e54b      	b.n	800524a <HAL_DMA_Start_IT+0xd6>
 80057b2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80057b4:	e555      	b.n	8005262 <HAL_DMA_Start_IT+0xee>
 80057b6:	bf00      	nop
 80057b8:	40020000 	.word	0x40020000
 80057bc:	40020400 	.word	0x40020400
 80057c0:	40020088 	.word	0x40020088
 80057c4:	5802541c 	.word	0x5802541c
 80057c8:	58025408 	.word	0x58025408
 80057cc:	58025480 	.word	0x58025480
 80057d0:	58025494 	.word	0x58025494
 80057d4:	400200a0 	.word	0x400200a0
 80057d8:	400204b8 	.word	0x400204b8

080057dc <HAL_DMA_Abort>:
{
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80057e0:	f7fd ffa2 	bl	8003728 <HAL_GetTick>
  if(hdma == NULL)
 80057e4:	2c00      	cmp	r4, #0
 80057e6:	d06d      	beq.n	80058c4 <HAL_DMA_Abort+0xe8>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057e8:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d164      	bne.n	80058ba <HAL_DMA_Abort+0xde>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057f0:	6825      	ldr	r5, [r4, #0]
 80057f2:	4606      	mov	r6, r0
 80057f4:	4bad      	ldr	r3, [pc, #692]	@ (8005aac <HAL_DMA_Abort+0x2d0>)
 80057f6:	429d      	cmp	r5, r3
 80057f8:	d066      	beq.n	80058c8 <HAL_DMA_Abort+0xec>
 80057fa:	3318      	adds	r3, #24
 80057fc:	429d      	cmp	r5, r3
 80057fe:	d063      	beq.n	80058c8 <HAL_DMA_Abort+0xec>
 8005800:	3318      	adds	r3, #24
 8005802:	429d      	cmp	r5, r3
 8005804:	f000 80f3 	beq.w	80059ee <HAL_DMA_Abort+0x212>
 8005808:	3318      	adds	r3, #24
 800580a:	429d      	cmp	r5, r3
 800580c:	f000 811a 	beq.w	8005a44 <HAL_DMA_Abort+0x268>
 8005810:	3318      	adds	r3, #24
 8005812:	429d      	cmp	r5, r3
 8005814:	f000 8125 	beq.w	8005a62 <HAL_DMA_Abort+0x286>
 8005818:	3318      	adds	r3, #24
 800581a:	429d      	cmp	r5, r3
 800581c:	f000 80ff 	beq.w	8005a1e <HAL_DMA_Abort+0x242>
 8005820:	3318      	adds	r3, #24
 8005822:	429d      	cmp	r5, r3
 8005824:	f000 812e 	beq.w	8005a84 <HAL_DMA_Abort+0x2a8>
 8005828:	3318      	adds	r3, #24
 800582a:	429d      	cmp	r5, r3
 800582c:	f000 814a 	beq.w	8005ac4 <HAL_DMA_Abort+0x2e8>
 8005830:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005834:	429d      	cmp	r5, r3
 8005836:	f000 8158 	beq.w	8005aea <HAL_DMA_Abort+0x30e>
 800583a:	3318      	adds	r3, #24
 800583c:	429d      	cmp	r5, r3
 800583e:	f000 8163 	beq.w	8005b08 <HAL_DMA_Abort+0x32c>
 8005842:	3318      	adds	r3, #24
 8005844:	429d      	cmp	r5, r3
 8005846:	f000 816e 	beq.w	8005b26 <HAL_DMA_Abort+0x34a>
 800584a:	3318      	adds	r3, #24
 800584c:	429d      	cmp	r5, r3
 800584e:	f000 816c 	beq.w	8005b2a <HAL_DMA_Abort+0x34e>
 8005852:	3318      	adds	r3, #24
 8005854:	429d      	cmp	r5, r3
 8005856:	f000 816a 	beq.w	8005b2e <HAL_DMA_Abort+0x352>
 800585a:	3318      	adds	r3, #24
 800585c:	429d      	cmp	r5, r3
 800585e:	f000 8168 	beq.w	8005b32 <HAL_DMA_Abort+0x356>
 8005862:	3318      	adds	r3, #24
 8005864:	429d      	cmp	r5, r3
 8005866:	f000 8168 	beq.w	8005b3a <HAL_DMA_Abort+0x35e>
 800586a:	3318      	adds	r3, #24
 800586c:	429d      	cmp	r5, r3
 800586e:	f000 8162 	beq.w	8005b36 <HAL_DMA_Abort+0x35a>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005872:	682b      	ldr	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005874:	4a8e      	ldr	r2, [pc, #568]	@ (8005ab0 <HAL_DMA_Abort+0x2d4>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005876:	f023 030e 	bic.w	r3, r3, #14
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800587a:	4295      	cmp	r5, r2
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800587c:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800587e:	f000 80bf 	beq.w	8005a00 <HAL_DMA_Abort+0x224>
 8005882:	4b8c      	ldr	r3, [pc, #560]	@ (8005ab4 <HAL_DMA_Abort+0x2d8>)
 8005884:	429d      	cmp	r5, r3
 8005886:	f000 80bb 	beq.w	8005a00 <HAL_DMA_Abort+0x224>
 800588a:	3314      	adds	r3, #20
 800588c:	429d      	cmp	r5, r3
 800588e:	f000 80b7 	beq.w	8005a00 <HAL_DMA_Abort+0x224>
 8005892:	3314      	adds	r3, #20
 8005894:	429d      	cmp	r5, r3
 8005896:	f000 80b3 	beq.w	8005a00 <HAL_DMA_Abort+0x224>
 800589a:	3314      	adds	r3, #20
 800589c:	429d      	cmp	r5, r3
 800589e:	f000 80af 	beq.w	8005a00 <HAL_DMA_Abort+0x224>
 80058a2:	3314      	adds	r3, #20
 80058a4:	429d      	cmp	r5, r3
 80058a6:	f000 80ab 	beq.w	8005a00 <HAL_DMA_Abort+0x224>
 80058aa:	3314      	adds	r3, #20
 80058ac:	429d      	cmp	r5, r3
 80058ae:	f000 80a7 	beq.w	8005a00 <HAL_DMA_Abort+0x224>
 80058b2:	3314      	adds	r3, #20
 80058b4:	429d      	cmp	r5, r3
 80058b6:	d114      	bne.n	80058e2 <HAL_DMA_Abort+0x106>
 80058b8:	e0a2      	b.n	8005a00 <HAL_DMA_Abort+0x224>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058ba:	2280      	movs	r2, #128	@ 0x80
    __HAL_UNLOCK(hdma);
 80058bc:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058be:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80058c0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80058c4:	2001      	movs	r0, #1
}
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80058c8:	682b      	ldr	r3, [r5, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058ca:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80058cc:	f023 031e 	bic.w	r3, r3, #30
 80058d0:	602b      	str	r3, [r5, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80058d2:	696b      	ldr	r3, [r5, #20]
 80058d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058d8:	616b      	str	r3, [r5, #20]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058da:	6813      	ldr	r3, [r2, #0]
 80058dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058e0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80058e2:	682b      	ldr	r3, [r5, #0]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	602b      	str	r3, [r5, #0]
 80058ea:	e005      	b.n	80058f8 <HAL_DMA_Abort+0x11c>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058ec:	f7fd ff1c 	bl	8003728 <HAL_GetTick>
 80058f0:	1b83      	subs	r3, r0, r6
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	f200 808a 	bhi.w	8005a0c <HAL_DMA_Abort+0x230>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	07db      	lsls	r3, r3, #31
 80058fc:	d4f6      	bmi.n	80058ec <HAL_DMA_Abort+0x110>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	496a      	ldr	r1, [pc, #424]	@ (8005aac <HAL_DMA_Abort+0x2d0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005902:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005904:	428b      	cmp	r3, r1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005906:	6da0      	ldr	r0, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005908:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800590c:	d05e      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 800590e:	3118      	adds	r1, #24
 8005910:	428b      	cmp	r3, r1
 8005912:	d05b      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 8005914:	3118      	adds	r1, #24
 8005916:	428b      	cmp	r3, r1
 8005918:	d058      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 800591a:	3118      	adds	r1, #24
 800591c:	428b      	cmp	r3, r1
 800591e:	d055      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 8005920:	3118      	adds	r1, #24
 8005922:	428b      	cmp	r3, r1
 8005924:	d052      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 8005926:	3118      	adds	r1, #24
 8005928:	428b      	cmp	r3, r1
 800592a:	d04f      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 800592c:	3118      	adds	r1, #24
 800592e:	428b      	cmp	r3, r1
 8005930:	d04c      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 8005932:	3118      	adds	r1, #24
 8005934:	428b      	cmp	r3, r1
 8005936:	d049      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 8005938:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800593c:	428b      	cmp	r3, r1
 800593e:	d045      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 8005940:	3118      	adds	r1, #24
 8005942:	428b      	cmp	r3, r1
 8005944:	d042      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 8005946:	3118      	adds	r1, #24
 8005948:	428b      	cmp	r3, r1
 800594a:	d03f      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 800594c:	3118      	adds	r1, #24
 800594e:	428b      	cmp	r3, r1
 8005950:	d03c      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 8005952:	3118      	adds	r1, #24
 8005954:	428b      	cmp	r3, r1
 8005956:	d039      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 8005958:	3118      	adds	r1, #24
 800595a:	428b      	cmp	r3, r1
 800595c:	d036      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 800595e:	3118      	adds	r1, #24
 8005960:	428b      	cmp	r3, r1
 8005962:	d033      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
 8005964:	3118      	adds	r1, #24
 8005966:	428b      	cmp	r3, r1
 8005968:	d030      	beq.n	80059cc <HAL_DMA_Abort+0x1f0>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800596a:	2101      	movs	r1, #1
 800596c:	4091      	lsls	r1, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800596e:	4a51      	ldr	r2, [pc, #324]	@ (8005ab4 <HAL_DMA_Abort+0x2d8>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005970:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005972:	484f      	ldr	r0, [pc, #316]	@ (8005ab0 <HAL_DMA_Abort+0x2d4>)
 8005974:	4950      	ldr	r1, [pc, #320]	@ (8005ab8 <HAL_DMA_Abort+0x2dc>)
 8005976:	4283      	cmp	r3, r0
 8005978:	bf18      	it	ne
 800597a:	4293      	cmpne	r3, r2
 800597c:	f100 003c 	add.w	r0, r0, #60	@ 0x3c
 8005980:	bf0c      	ite	eq
 8005982:	2201      	moveq	r2, #1
 8005984:	2200      	movne	r2, #0
 8005986:	428b      	cmp	r3, r1
 8005988:	bf08      	it	eq
 800598a:	f042 0201 	orreq.w	r2, r2, #1
 800598e:	3128      	adds	r1, #40	@ 0x28
 8005990:	4283      	cmp	r3, r0
 8005992:	bf08      	it	eq
 8005994:	f042 0201 	orreq.w	r2, r2, #1
 8005998:	3028      	adds	r0, #40	@ 0x28
 800599a:	428b      	cmp	r3, r1
 800599c:	bf08      	it	eq
 800599e:	f042 0201 	orreq.w	r2, r2, #1
 80059a2:	3128      	adds	r1, #40	@ 0x28
 80059a4:	4283      	cmp	r3, r0
 80059a6:	bf08      	it	eq
 80059a8:	f042 0201 	orreq.w	r2, r2, #1
 80059ac:	428b      	cmp	r3, r1
 80059ae:	bf08      	it	eq
 80059b0:	f042 0201 	orreq.w	r2, r2, #1
 80059b4:	b96a      	cbnz	r2, 80059d2 <HAL_DMA_Abort+0x1f6>
 80059b6:	4a41      	ldr	r2, [pc, #260]	@ (8005abc <HAL_DMA_Abort+0x2e0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00a      	beq.n	80059d2 <HAL_DMA_Abort+0x1f6>
    __HAL_UNLOCK(hdma);
 80059bc:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 80059be:	2201      	movs	r2, #1
  return HAL_OK;
 80059c0:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80059c2:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80059c6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 80059ca:	bd70      	pop	{r4, r5, r6, pc}
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059cc:	233f      	movs	r3, #63	@ 0x3f
 80059ce:	4093      	lsls	r3, r2
 80059d0:	6083      	str	r3, [r0, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 80059d2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059d4:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 80059d8:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0ee      	beq.n	80059bc <HAL_DMA_Abort+0x1e0>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059de:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059e0:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	@ 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059e8:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059ea:	6048      	str	r0, [r1, #4]
 80059ec:	e7e6      	b.n	80059bc <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80059ee:	4b34      	ldr	r3, [pc, #208]	@ (8005ac0 <HAL_DMA_Abort+0x2e4>)
 80059f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059f2:	f022 021e 	bic.w	r2, r2, #30
 80059f6:	641a      	str	r2, [r3, #64]	@ 0x40
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059fe:	655a      	str	r2, [r3, #84]	@ 0x54
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a00:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005a02:	6813      	ldr	r3, [r2, #0]
 8005a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a08:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005a0a:	e76a      	b.n	80058e2 <HAL_DMA_Abort+0x106>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a0c:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a0e:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8005a10:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a12:	6561      	str	r1, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hdma);
 8005a14:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a18:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        return HAL_ERROR;
 8005a1c:	e752      	b.n	80058c4 <HAL_DMA_Abort+0xe8>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005a1e:	4b28      	ldr	r3, [pc, #160]	@ (8005ac0 <HAL_DMA_Abort+0x2e4>)
 8005a20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005a24:	f022 021e 	bic.w	r2, r2, #30
 8005a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a2c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a38:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005a3a:	6813      	ldr	r3, [r2, #0]
 8005a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a40:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005a42:	e74e      	b.n	80058e2 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005a44:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac0 <HAL_DMA_Abort+0x2e4>)
 8005a46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a48:	f022 021e 	bic.w	r2, r2, #30
 8005a4c:	659a      	str	r2, [r3, #88]	@ 0x58
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a4e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005a50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a54:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a56:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005a58:	6813      	ldr	r3, [r2, #0]
 8005a5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a5e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005a60:	e73f      	b.n	80058e2 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005a62:	4b17      	ldr	r3, [pc, #92]	@ (8005ac0 <HAL_DMA_Abort+0x2e4>)
 8005a64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a66:	f022 021e 	bic.w	r2, r2, #30
 8005a6a:	671a      	str	r2, [r3, #112]	@ 0x70
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a6c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005a70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a78:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a80:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005a82:	e72e      	b.n	80058e2 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005a84:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac0 <HAL_DMA_Abort+0x2e4>)
 8005a86:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005a8a:	f022 021e 	bic.w	r2, r2, #30
 8005a8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a92:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8005a96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a9a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a9e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005aa0:	6813      	ldr	r3, [r2, #0]
 8005aa2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aa6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005aa8:	e71b      	b.n	80058e2 <HAL_DMA_Abort+0x106>
 8005aaa:	bf00      	nop
 8005aac:	40020010 	.word	0x40020010
 8005ab0:	58025408 	.word	0x58025408
 8005ab4:	5802541c 	.word	0x5802541c
 8005ab8:	58025430 	.word	0x58025430
 8005abc:	58025494 	.word	0x58025494
 8005ac0:	40020000 	.word	0x40020000
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8005b40 <HAL_DMA_Abort+0x364>)
 8005ac6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005aca:	f022 021e 	bic.w	r2, r2, #30
 8005ace:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ad2:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8005ad6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ada:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ade:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005ae0:	6813      	ldr	r3, [r2, #0]
 8005ae2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ae6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005ae8:	e6fb      	b.n	80058e2 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005aea:	4b16      	ldr	r3, [pc, #88]	@ (8005b44 <HAL_DMA_Abort+0x368>)
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	f022 021e 	bic.w	r2, r2, #30
 8005af2:	611a      	str	r2, [r3, #16]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005af6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005afa:	625a      	str	r2, [r3, #36]	@ 0x24
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005afc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005afe:	6813      	ldr	r3, [r2, #0]
 8005b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b04:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005b06:	e6ec      	b.n	80058e2 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005b08:	4b0e      	ldr	r3, [pc, #56]	@ (8005b44 <HAL_DMA_Abort+0x368>)
 8005b0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b0c:	f022 021e 	bic.w	r2, r2, #30
 8005b10:	629a      	str	r2, [r3, #40]	@ 0x28
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b18:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b1a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8005b1c:	6813      	ldr	r3, [r2, #0]
 8005b1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b22:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005b24:	e6dd      	b.n	80058e2 <HAL_DMA_Abort+0x106>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005b26:	4b07      	ldr	r3, [pc, #28]	@ (8005b44 <HAL_DMA_Abort+0x368>)
 8005b28:	e762      	b.n	80059f0 <HAL_DMA_Abort+0x214>
 8005b2a:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <HAL_DMA_Abort+0x368>)
 8005b2c:	e78b      	b.n	8005a46 <HAL_DMA_Abort+0x26a>
 8005b2e:	4b05      	ldr	r3, [pc, #20]	@ (8005b44 <HAL_DMA_Abort+0x368>)
 8005b30:	e798      	b.n	8005a64 <HAL_DMA_Abort+0x288>
 8005b32:	4b04      	ldr	r3, [pc, #16]	@ (8005b44 <HAL_DMA_Abort+0x368>)
 8005b34:	e774      	b.n	8005a20 <HAL_DMA_Abort+0x244>
 8005b36:	4b03      	ldr	r3, [pc, #12]	@ (8005b44 <HAL_DMA_Abort+0x368>)
 8005b38:	e7c5      	b.n	8005ac6 <HAL_DMA_Abort+0x2ea>
 8005b3a:	4b02      	ldr	r3, [pc, #8]	@ (8005b44 <HAL_DMA_Abort+0x368>)
 8005b3c:	e7a3      	b.n	8005a86 <HAL_DMA_Abort+0x2aa>
 8005b3e:	bf00      	nop
 8005b40:	40020000 	.word	0x40020000
 8005b44:	40020400 	.word	0x40020400

08005b48 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d062      	beq.n	8005c12 <HAL_DMA_Abort_IT+0xca>
{
 8005b4c:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b4e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d159      	bne.n	8005c0a <HAL_DMA_Abort_IT+0xc2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b56:	6802      	ldr	r2, [r0, #0]
 8005b58:	4b57      	ldr	r3, [pc, #348]	@ (8005cb8 <HAL_DMA_Abort_IT+0x170>)
 8005b5a:	4c58      	ldr	r4, [pc, #352]	@ (8005cbc <HAL_DMA_Abort_IT+0x174>)
 8005b5c:	4958      	ldr	r1, [pc, #352]	@ (8005cc0 <HAL_DMA_Abort_IT+0x178>)
 8005b5e:	42a2      	cmp	r2, r4
 8005b60:	bf18      	it	ne
 8005b62:	429a      	cmpne	r2, r3
 8005b64:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 8005b68:	bf0c      	ite	eq
 8005b6a:	2301      	moveq	r3, #1
 8005b6c:	2300      	movne	r3, #0
 8005b6e:	428a      	cmp	r2, r1
 8005b70:	bf08      	it	eq
 8005b72:	f043 0301 	orreq.w	r3, r3, #1
 8005b76:	3130      	adds	r1, #48	@ 0x30
 8005b78:	42a2      	cmp	r2, r4
 8005b7a:	bf08      	it	eq
 8005b7c:	f043 0301 	orreq.w	r3, r3, #1
 8005b80:	3430      	adds	r4, #48	@ 0x30
 8005b82:	428a      	cmp	r2, r1
 8005b84:	bf08      	it	eq
 8005b86:	f043 0301 	orreq.w	r3, r3, #1
 8005b8a:	3130      	adds	r1, #48	@ 0x30
 8005b8c:	42a2      	cmp	r2, r4
 8005b8e:	bf08      	it	eq
 8005b90:	f043 0301 	orreq.w	r3, r3, #1
 8005b94:	3430      	adds	r4, #48	@ 0x30
 8005b96:	428a      	cmp	r2, r1
 8005b98:	bf08      	it	eq
 8005b9a:	f043 0301 	orreq.w	r3, r3, #1
 8005b9e:	f501 715c 	add.w	r1, r1, #880	@ 0x370
 8005ba2:	42a2      	cmp	r2, r4
 8005ba4:	bf08      	it	eq
 8005ba6:	f043 0301 	orreq.w	r3, r3, #1
 8005baa:	f504 745c 	add.w	r4, r4, #880	@ 0x370
 8005bae:	428a      	cmp	r2, r1
 8005bb0:	bf08      	it	eq
 8005bb2:	f043 0301 	orreq.w	r3, r3, #1
 8005bb6:	3130      	adds	r1, #48	@ 0x30
 8005bb8:	42a2      	cmp	r2, r4
 8005bba:	bf08      	it	eq
 8005bbc:	f043 0301 	orreq.w	r3, r3, #1
 8005bc0:	3430      	adds	r4, #48	@ 0x30
 8005bc2:	428a      	cmp	r2, r1
 8005bc4:	bf08      	it	eq
 8005bc6:	f043 0301 	orreq.w	r3, r3, #1
 8005bca:	3130      	adds	r1, #48	@ 0x30
 8005bcc:	42a2      	cmp	r2, r4
 8005bce:	bf08      	it	eq
 8005bd0:	f043 0301 	orreq.w	r3, r3, #1
 8005bd4:	3430      	adds	r4, #48	@ 0x30
 8005bd6:	428a      	cmp	r2, r1
 8005bd8:	bf08      	it	eq
 8005bda:	f043 0301 	orreq.w	r3, r3, #1
 8005bde:	3130      	adds	r1, #48	@ 0x30
 8005be0:	42a2      	cmp	r2, r4
 8005be2:	bf08      	it	eq
 8005be4:	f043 0301 	orreq.w	r3, r3, #1
 8005be8:	428a      	cmp	r2, r1
 8005bea:	bf08      	it	eq
 8005bec:	f043 0301 	orreq.w	r3, r3, #1
 8005bf0:	b913      	cbnz	r3, 8005bf8 <HAL_DMA_Abort_IT+0xb0>
 8005bf2:	4b34      	ldr	r3, [pc, #208]	@ (8005cc4 <HAL_DMA_Abort_IT+0x17c>)
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d10e      	bne.n	8005c16 <HAL_DMA_Abort_IT+0xce>
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8005bfe:	6813      	ldr	r3, [r2, #0]
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005c06:	2000      	movs	r0, #0
}
 8005c08:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c0a:	2380      	movs	r3, #128	@ 0x80
 8005c0c:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8005c0e:	2001      	movs	r0, #1
}
 8005c10:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005c12:	2001      	movs	r0, #1
}
 8005c14:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c16:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc8 <HAL_DMA_Abort_IT+0x180>)
 8005c18:	4d2c      	ldr	r5, [pc, #176]	@ (8005ccc <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c1a:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c1c:	42aa      	cmp	r2, r5
 8005c1e:	bf18      	it	ne
 8005c20:	429a      	cmpne	r2, r3
 8005c22:	4c2b      	ldr	r4, [pc, #172]	@ (8005cd0 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c24:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c28:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 8005c2c:	bf0c      	ite	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	2300      	movne	r3, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c32:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c34:	42a2      	cmp	r2, r4
 8005c36:	bf08      	it	eq
 8005c38:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 8005c3c:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c3e:	3428      	adds	r4, #40	@ 0x28
 8005c40:	42aa      	cmp	r2, r5
 8005c42:	bf08      	it	eq
 8005c44:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 8005c48:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c4c:	42a2      	cmp	r2, r4
 8005c4e:	bf08      	it	eq
 8005c50:	f043 0301 	orreq.w	r3, r3, #1
 8005c54:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8005c56:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c58:	42a2      	cmp	r2, r4
 8005c5a:	bf08      	it	eq
 8005c5c:	f043 0301 	orreq.w	r3, r3, #1
 8005c60:	491c      	ldr	r1, [pc, #112]	@ (8005cd4 <HAL_DMA_Abort_IT+0x18c>)
 8005c62:	428a      	cmp	r2, r1
 8005c64:	bf08      	it	eq
 8005c66:	f043 0301 	orreq.w	r3, r3, #1
 8005c6a:	b913      	cbnz	r3, 8005c72 <HAL_DMA_Abort_IT+0x12a>
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd8 <HAL_DMA_Abort_IT+0x190>)
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d117      	bne.n	8005ca2 <HAL_DMA_Abort_IT+0x15a>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c72:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c74:	6d85      	ldr	r5, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c76:	e9d0 1417 	ldrd	r1, r4, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c7a:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c7c:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c84:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c86:	6022      	str	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c88:	606b      	str	r3, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005c8a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c8c:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 8005c90:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005c92:	b133      	cbz	r3, 8005ca2 <HAL_DMA_Abort_IT+0x15a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c94:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c96:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c9e:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ca0:	604c      	str	r4, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8005ca2:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8005ca4:	2200      	movs	r2, #0
      if(hdma->XferAbortCallback != NULL)
 8005ca6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8005ca8:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8005cac:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0a8      	beq.n	8005c06 <HAL_DMA_Abort_IT+0xbe>
        hdma->XferAbortCallback(hdma);
 8005cb4:	4798      	blx	r3
 8005cb6:	e7a6      	b.n	8005c06 <HAL_DMA_Abort_IT+0xbe>
 8005cb8:	40020010 	.word	0x40020010
 8005cbc:	40020028 	.word	0x40020028
 8005cc0:	40020040 	.word	0x40020040
 8005cc4:	400204b8 	.word	0x400204b8
 8005cc8:	5802541c 	.word	0x5802541c
 8005ccc:	58025408 	.word	0x58025408
 8005cd0:	58025430 	.word	0x58025430
 8005cd4:	58025480 	.word	0x58025480
 8005cd8:	58025494 	.word	0x58025494

08005cdc <HAL_DMA_IRQHandler>:
{
 8005cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8005cde:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ce0:	4b94      	ldr	r3, [pc, #592]	@ (8005f34 <HAL_DMA_IRQHandler+0x258>)
{
 8005ce2:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ce4:	6d85      	ldr	r5, [r0, #88]	@ 0x58
{
 8005ce6:	4607      	mov	r7, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ce8:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0U;
 8005cea:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005cec:	4b92      	ldr	r3, [pc, #584]	@ (8005f38 <HAL_DMA_IRQHandler+0x25c>)
 8005cee:	6802      	ldr	r2, [r0, #0]
 8005cf0:	4892      	ldr	r0, [pc, #584]	@ (8005f3c <HAL_DMA_IRQHandler+0x260>)
  tmpisr_dma  = regs_dma->ISR;
 8005cf2:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005cf4:	4282      	cmp	r2, r0
 8005cf6:	bf18      	it	ne
 8005cf8:	429a      	cmpne	r2, r3
 8005cfa:	f100 0018 	add.w	r0, r0, #24
  tmpisr_bdma = regs_bdma->ISR;
 8005cfe:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005d00:	bf0c      	ite	eq
 8005d02:	2301      	moveq	r3, #1
 8005d04:	2300      	movne	r3, #0
 8005d06:	4282      	cmp	r2, r0
 8005d08:	bf08      	it	eq
 8005d0a:	f043 0301 	orreq.w	r3, r3, #1
 8005d0e:	3018      	adds	r0, #24
 8005d10:	4282      	cmp	r2, r0
 8005d12:	bf08      	it	eq
 8005d14:	f043 0301 	orreq.w	r3, r3, #1
 8005d18:	3018      	adds	r0, #24
 8005d1a:	4282      	cmp	r2, r0
 8005d1c:	bf08      	it	eq
 8005d1e:	f043 0301 	orreq.w	r3, r3, #1
 8005d22:	3018      	adds	r0, #24
 8005d24:	4282      	cmp	r2, r0
 8005d26:	bf08      	it	eq
 8005d28:	f043 0301 	orreq.w	r3, r3, #1
 8005d2c:	3018      	adds	r0, #24
 8005d2e:	4282      	cmp	r2, r0
 8005d30:	bf08      	it	eq
 8005d32:	f043 0301 	orreq.w	r3, r3, #1
 8005d36:	3018      	adds	r0, #24
 8005d38:	4282      	cmp	r2, r0
 8005d3a:	bf08      	it	eq
 8005d3c:	f043 0301 	orreq.w	r3, r3, #1
 8005d40:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8005d44:	4282      	cmp	r2, r0
 8005d46:	bf08      	it	eq
 8005d48:	f043 0301 	orreq.w	r3, r3, #1
 8005d4c:	3018      	adds	r0, #24
 8005d4e:	4282      	cmp	r2, r0
 8005d50:	bf08      	it	eq
 8005d52:	f043 0301 	orreq.w	r3, r3, #1
 8005d56:	3018      	adds	r0, #24
 8005d58:	4282      	cmp	r2, r0
 8005d5a:	bf08      	it	eq
 8005d5c:	f043 0301 	orreq.w	r3, r3, #1
 8005d60:	3018      	adds	r0, #24
 8005d62:	4282      	cmp	r2, r0
 8005d64:	bf08      	it	eq
 8005d66:	f043 0301 	orreq.w	r3, r3, #1
 8005d6a:	3018      	adds	r0, #24
 8005d6c:	4282      	cmp	r2, r0
 8005d6e:	bf08      	it	eq
 8005d70:	f043 0301 	orreq.w	r3, r3, #1
 8005d74:	3018      	adds	r0, #24
 8005d76:	4282      	cmp	r2, r0
 8005d78:	bf08      	it	eq
 8005d7a:	f043 0301 	orreq.w	r3, r3, #1
 8005d7e:	3018      	adds	r0, #24
 8005d80:	4282      	cmp	r2, r0
 8005d82:	bf08      	it	eq
 8005d84:	f043 0301 	orreq.w	r3, r3, #1
 8005d88:	b91b      	cbnz	r3, 8005d92 <HAL_DMA_IRQHandler+0xb6>
 8005d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8005f40 <HAL_DMA_IRQHandler+0x264>)
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	f040 812f 	bne.w	8005ff0 <HAL_DMA_IRQHandler+0x314>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d94:	2108      	movs	r1, #8
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	4099      	lsls	r1, r3
 8005d9c:	4221      	tst	r1, r4
 8005d9e:	d00b      	beq.n	8005db8 <HAL_DMA_IRQHandler+0xdc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005da0:	6810      	ldr	r0, [r2, #0]
 8005da2:	0740      	lsls	r0, r0, #29
 8005da4:	d508      	bpl.n	8005db8 <HAL_DMA_IRQHandler+0xdc>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005da6:	6810      	ldr	r0, [r2, #0]
 8005da8:	f020 0004 	bic.w	r0, r0, #4
 8005dac:	6010      	str	r0, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dae:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005db0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005db2:	f041 0101 	orr.w	r1, r1, #1
 8005db6:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005db8:	fa24 f103 	lsr.w	r1, r4, r3
 8005dbc:	07c8      	lsls	r0, r1, #31
 8005dbe:	d509      	bpl.n	8005dd4 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005dc0:	6951      	ldr	r1, [r2, #20]
 8005dc2:	0609      	lsls	r1, r1, #24
 8005dc4:	d506      	bpl.n	8005dd4 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4099      	lsls	r1, r3
 8005dca:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dce:	f041 0102 	orr.w	r1, r1, #2
 8005dd2:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dd4:	2104      	movs	r1, #4
 8005dd6:	4099      	lsls	r1, r3
 8005dd8:	4221      	tst	r1, r4
 8005dda:	d007      	beq.n	8005dec <HAL_DMA_IRQHandler+0x110>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005ddc:	6810      	ldr	r0, [r2, #0]
 8005dde:	0780      	lsls	r0, r0, #30
 8005de0:	d504      	bpl.n	8005dec <HAL_DMA_IRQHandler+0x110>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005de2:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005de4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005de6:	f041 0104 	orr.w	r1, r1, #4
 8005dea:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dec:	2110      	movs	r1, #16
 8005dee:	4099      	lsls	r1, r3
 8005df0:	4221      	tst	r1, r4
 8005df2:	f000 80b0 	beq.w	8005f56 <HAL_DMA_IRQHandler+0x27a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005df6:	6810      	ldr	r0, [r2, #0]
 8005df8:	0700      	lsls	r0, r0, #28
 8005dfa:	f140 80ac 	bpl.w	8005f56 <HAL_DMA_IRQHandler+0x27a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dfe:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e00:	6811      	ldr	r1, [r2, #0]
 8005e02:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e06:	6811      	ldr	r1, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e08:	f040 809e 	bne.w	8005f48 <HAL_DMA_IRQHandler+0x26c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e0c:	05c9      	lsls	r1, r1, #23
 8005e0e:	d403      	bmi.n	8005e18 <HAL_DMA_IRQHandler+0x13c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e10:	6811      	ldr	r1, [r2, #0]
 8005e12:	f021 0108 	bic.w	r1, r1, #8
 8005e16:	6011      	str	r1, [r2, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8005e18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e1a:	2900      	cmp	r1, #0
 8005e1c:	f000 809b 	beq.w	8005f56 <HAL_DMA_IRQHandler+0x27a>
            hdma->XferHalfCpltCallback(hdma);
 8005e20:	4638      	mov	r0, r7
 8005e22:	4788      	blx	r1
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e26:	2120      	movs	r1, #32
 8005e28:	f003 031f 	and.w	r3, r3, #31
 8005e2c:	4099      	lsls	r1, r3
 8005e2e:	4221      	tst	r1, r4
 8005e30:	d053      	beq.n	8005eda <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	4840      	ldr	r0, [pc, #256]	@ (8005f38 <HAL_DMA_IRQHandler+0x25c>)
 8005e36:	4c41      	ldr	r4, [pc, #260]	@ (8005f3c <HAL_DMA_IRQHandler+0x260>)
 8005e38:	42a2      	cmp	r2, r4
 8005e3a:	bf18      	it	ne
 8005e3c:	4282      	cmpne	r2, r0
 8005e3e:	f104 0418 	add.w	r4, r4, #24
 8005e42:	bf0c      	ite	eq
 8005e44:	2001      	moveq	r0, #1
 8005e46:	2000      	movne	r0, #0
 8005e48:	42a2      	cmp	r2, r4
 8005e4a:	bf08      	it	eq
 8005e4c:	f040 0001 	orreq.w	r0, r0, #1
 8005e50:	3418      	adds	r4, #24
 8005e52:	42a2      	cmp	r2, r4
 8005e54:	bf08      	it	eq
 8005e56:	f040 0001 	orreq.w	r0, r0, #1
 8005e5a:	3418      	adds	r4, #24
 8005e5c:	42a2      	cmp	r2, r4
 8005e5e:	bf08      	it	eq
 8005e60:	f040 0001 	orreq.w	r0, r0, #1
 8005e64:	3418      	adds	r4, #24
 8005e66:	42a2      	cmp	r2, r4
 8005e68:	bf08      	it	eq
 8005e6a:	f040 0001 	orreq.w	r0, r0, #1
 8005e6e:	3418      	adds	r4, #24
 8005e70:	42a2      	cmp	r2, r4
 8005e72:	bf08      	it	eq
 8005e74:	f040 0001 	orreq.w	r0, r0, #1
 8005e78:	3418      	adds	r4, #24
 8005e7a:	42a2      	cmp	r2, r4
 8005e7c:	bf08      	it	eq
 8005e7e:	f040 0001 	orreq.w	r0, r0, #1
 8005e82:	f504 7456 	add.w	r4, r4, #856	@ 0x358
 8005e86:	42a2      	cmp	r2, r4
 8005e88:	bf08      	it	eq
 8005e8a:	f040 0001 	orreq.w	r0, r0, #1
 8005e8e:	3418      	adds	r4, #24
 8005e90:	42a2      	cmp	r2, r4
 8005e92:	bf08      	it	eq
 8005e94:	f040 0001 	orreq.w	r0, r0, #1
 8005e98:	3418      	adds	r4, #24
 8005e9a:	42a2      	cmp	r2, r4
 8005e9c:	bf08      	it	eq
 8005e9e:	f040 0001 	orreq.w	r0, r0, #1
 8005ea2:	3418      	adds	r4, #24
 8005ea4:	42a2      	cmp	r2, r4
 8005ea6:	bf08      	it	eq
 8005ea8:	f040 0001 	orreq.w	r0, r0, #1
 8005eac:	3418      	adds	r4, #24
 8005eae:	42a2      	cmp	r2, r4
 8005eb0:	bf08      	it	eq
 8005eb2:	f040 0001 	orreq.w	r0, r0, #1
 8005eb6:	3418      	adds	r4, #24
 8005eb8:	42a2      	cmp	r2, r4
 8005eba:	bf08      	it	eq
 8005ebc:	f040 0001 	orreq.w	r0, r0, #1
 8005ec0:	3418      	adds	r4, #24
 8005ec2:	42a2      	cmp	r2, r4
 8005ec4:	bf08      	it	eq
 8005ec6:	f040 0001 	orreq.w	r0, r0, #1
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d147      	bne.n	8005f5e <HAL_DMA_IRQHandler+0x282>
 8005ece:	481c      	ldr	r0, [pc, #112]	@ (8005f40 <HAL_DMA_IRQHandler+0x264>)
 8005ed0:	4282      	cmp	r2, r0
 8005ed2:	d044      	beq.n	8005f5e <HAL_DMA_IRQHandler+0x282>
 8005ed4:	6810      	ldr	r0, [r2, #0]
 8005ed6:	0780      	lsls	r0, r0, #30
 8005ed8:	d444      	bmi.n	8005f64 <HAL_DMA_IRQHandler+0x288>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d070      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x2e6>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ee2:	07dc      	lsls	r4, r3, #31
 8005ee4:	d51e      	bpl.n	8005f24 <HAL_DMA_IRQHandler+0x248>
        __HAL_DMA_DISABLE(hdma);
 8005ee6:	683a      	ldr	r2, [r7, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8005ee8:	2104      	movs	r1, #4
 8005eea:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8005eee:	4915      	ldr	r1, [pc, #84]	@ (8005f44 <HAL_DMA_IRQHandler+0x268>)
        __HAL_DMA_DISABLE(hdma);
 8005ef0:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ef2:	fba1 6106 	umull	r6, r1, r1, r6
        __HAL_DMA_DISABLE(hdma);
 8005ef6:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8005efa:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	e002      	b.n	8005f06 <HAL_DMA_IRQHandler+0x22a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f00:	6813      	ldr	r3, [r2, #0]
 8005f02:	07d8      	lsls	r0, r3, #31
 8005f04:	d504      	bpl.n	8005f10 <HAL_DMA_IRQHandler+0x234>
          if (++count > timeout)
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	428b      	cmp	r3, r1
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	d9f7      	bls.n	8005f00 <HAL_DMA_IRQHandler+0x224>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f10:	6813      	ldr	r3, [r2, #0]
 8005f12:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8005f14:	bf4c      	ite	mi
 8005f16:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8005f18:	2301      	movpl	r3, #1
 8005f1a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8005f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d04b      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x2e6>
          hdma->XferCpltCallback(hdma);
 8005f2a:	4638      	mov	r0, r7
}
 8005f2c:	b003      	add	sp, #12
 8005f2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 8005f32:	4718      	bx	r3
 8005f34:	24000020 	.word	0x24000020
 8005f38:	40020010 	.word	0x40020010
 8005f3c:	40020028 	.word	0x40020028
 8005f40:	400204b8 	.word	0x400204b8
 8005f44:	1b4e81b5 	.word	0x1b4e81b5
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f48:	0308      	lsls	r0, r1, #12
 8005f4a:	f57f af65 	bpl.w	8005e18 <HAL_DMA_IRQHandler+0x13c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005f4e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005f50:	2900      	cmp	r1, #0
 8005f52:	f47f af65 	bne.w	8005e20 <HAL_DMA_IRQHandler+0x144>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f56:	2120      	movs	r1, #32
 8005f58:	4099      	lsls	r1, r3
 8005f5a:	420c      	tst	r4, r1
 8005f5c:	d0bd      	beq.n	8005eda <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005f5e:	6810      	ldr	r0, [r2, #0]
 8005f60:	06c4      	lsls	r4, r0, #27
 8005f62:	d5ba      	bpl.n	8005eda <HAL_DMA_IRQHandler+0x1fe>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f64:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f66:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8005f6a:	2904      	cmp	r1, #4
 8005f6c:	d00e      	beq.n	8005f8c <HAL_DMA_IRQHandler+0x2b0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f6e:	6813      	ldr	r3, [r2, #0]
 8005f70:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f74:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f76:	d026      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x2ea>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f78:	031d      	lsls	r5, r3, #12
 8005f7a:	d531      	bpl.n	8005fe0 <HAL_DMA_IRQHandler+0x304>
          if(hdma->XferCpltCallback != NULL)
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0ab      	beq.n	8005eda <HAL_DMA_IRQHandler+0x1fe>
            hdma->XferCpltCallback(hdma);
 8005f82:	4638      	mov	r0, r7
 8005f84:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f88:	b1db      	cbz	r3, 8005fc2 <HAL_DMA_IRQHandler+0x2e6>
 8005f8a:	e7a9      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x204>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f8c:	6811      	ldr	r1, [r2, #0]
 8005f8e:	f021 0116 	bic.w	r1, r1, #22
 8005f92:	6011      	str	r1, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005f94:	6951      	ldr	r1, [r2, #20]
 8005f96:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005f9a:	6151      	str	r1, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f9e:	b319      	cbz	r1, 8005fe8 <HAL_DMA_IRQHandler+0x30c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005fa0:	6811      	ldr	r1, [r2, #0]
 8005fa2:	f021 0108 	bic.w	r1, r1, #8
 8005fa6:	6011      	str	r1, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fa8:	223f      	movs	r2, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8005faa:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
          __HAL_UNLOCK(hdma);
 8005fb0:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fb2:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8005fb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8005fb6:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005fba:	f887 2034 	strb.w	r2, [r7, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1b3      	bne.n	8005f2a <HAL_DMA_IRQHandler+0x24e>
}
 8005fc2:	b003      	add	sp, #12
 8005fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005fc6:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8005fca:	d1d7      	bne.n	8005f7c <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005fcc:	6811      	ldr	r1, [r2, #0]
 8005fce:	f021 0110 	bic.w	r1, r1, #16
 8005fd2:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005fd4:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8005fd6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005fda:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8005fde:	e7cd      	b.n	8005f7c <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1CpltCallback != NULL)
 8005fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1cd      	bne.n	8005f82 <HAL_DMA_IRQHandler+0x2a6>
 8005fe6:	e778      	b.n	8005eda <HAL_DMA_IRQHandler+0x1fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fe8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005fea:	2900      	cmp	r1, #0
 8005fec:	d1d8      	bne.n	8005fa0 <HAL_DMA_IRQHandler+0x2c4>
 8005fee:	e7db      	b.n	8005fa8 <HAL_DMA_IRQHandler+0x2cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005ff0:	4b40      	ldr	r3, [pc, #256]	@ (80060f4 <HAL_DMA_IRQHandler+0x418>)
 8005ff2:	4841      	ldr	r0, [pc, #260]	@ (80060f8 <HAL_DMA_IRQHandler+0x41c>)
 8005ff4:	4282      	cmp	r2, r0
 8005ff6:	bf18      	it	ne
 8005ff8:	429a      	cmpne	r2, r3
 8005ffa:	f100 0014 	add.w	r0, r0, #20
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	4282      	cmp	r2, r0
 8006006:	bf08      	it	eq
 8006008:	f043 0301 	orreq.w	r3, r3, #1
 800600c:	3014      	adds	r0, #20
 800600e:	4282      	cmp	r2, r0
 8006010:	bf08      	it	eq
 8006012:	f043 0301 	orreq.w	r3, r3, #1
 8006016:	3014      	adds	r0, #20
 8006018:	4282      	cmp	r2, r0
 800601a:	bf08      	it	eq
 800601c:	f043 0301 	orreq.w	r3, r3, #1
 8006020:	3014      	adds	r0, #20
 8006022:	4282      	cmp	r2, r0
 8006024:	bf08      	it	eq
 8006026:	f043 0301 	orreq.w	r3, r3, #1
 800602a:	3014      	adds	r0, #20
 800602c:	4282      	cmp	r2, r0
 800602e:	bf08      	it	eq
 8006030:	f043 0301 	orreq.w	r3, r3, #1
 8006034:	b913      	cbnz	r3, 800603c <HAL_DMA_IRQHandler+0x360>
 8006036:	4b31      	ldr	r3, [pc, #196]	@ (80060fc <HAL_DMA_IRQHandler+0x420>)
 8006038:	429a      	cmp	r2, r3
 800603a:	d1c2      	bne.n	8005fc2 <HAL_DMA_IRQHandler+0x2e6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800603c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800603e:	2404      	movs	r4, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006040:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006042:	f000 001f 	and.w	r0, r0, #31
 8006046:	4084      	lsls	r4, r0
 8006048:	420c      	tst	r4, r1
 800604a:	d00b      	beq.n	8006064 <HAL_DMA_IRQHandler+0x388>
 800604c:	075e      	lsls	r6, r3, #29
 800604e:	d509      	bpl.n	8006064 <HAL_DMA_IRQHandler+0x388>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006050:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006052:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006054:	d532      	bpl.n	80060bc <HAL_DMA_IRQHandler+0x3e0>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006056:	03da      	lsls	r2, r3, #15
 8006058:	d436      	bmi.n	80060c8 <HAL_DMA_IRQHandler+0x3ec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800605a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800605c:	2b00      	cmp	r3, #0
 800605e:	f47f af64 	bne.w	8005f2a <HAL_DMA_IRQHandler+0x24e>
 8006062:	e7ae      	b.n	8005fc2 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006064:	2402      	movs	r4, #2
 8006066:	4084      	lsls	r4, r0
 8006068:	420c      	tst	r4, r1
 800606a:	d00b      	beq.n	8006084 <HAL_DMA_IRQHandler+0x3a8>
 800606c:	079e      	lsls	r6, r3, #30
 800606e:	d509      	bpl.n	8006084 <HAL_DMA_IRQHandler+0x3a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006070:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006072:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006074:	d52d      	bpl.n	80060d2 <HAL_DMA_IRQHandler+0x3f6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006076:	03da      	lsls	r2, r3, #15
 8006078:	d437      	bmi.n	80060ea <HAL_DMA_IRQHandler+0x40e>
          if(hdma->XferM1CpltCallback != NULL)
 800607a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800607c:	2b00      	cmp	r3, #0
 800607e:	f47f af54 	bne.w	8005f2a <HAL_DMA_IRQHandler+0x24e>
 8006082:	e79e      	b.n	8005fc2 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006084:	2408      	movs	r4, #8
 8006086:	4084      	lsls	r4, r0
 8006088:	420c      	tst	r4, r1
 800608a:	d09a      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x2e6>
 800608c:	071b      	lsls	r3, r3, #28
 800608e:	d598      	bpl.n	8005fc2 <HAL_DMA_IRQHandler+0x2e6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006090:	6813      	ldr	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 8006092:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006094:	f023 030e 	bic.w	r3, r3, #14
 8006098:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800609a:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 800609c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800609e:	fa03 f000 	lsl.w	r0, r3, r0
 80060a2:	6068      	str	r0, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80060a4:	657b      	str	r3, [r7, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 80060a6:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80060aa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 80060ae:	2a00      	cmp	r2, #0
 80060b0:	d087      	beq.n	8005fc2 <HAL_DMA_IRQHandler+0x2e6>
        hdma->XferErrorCallback(hdma);
 80060b2:	4638      	mov	r0, r7
}
 80060b4:	b003      	add	sp, #12
 80060b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 80060ba:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060bc:	069b      	lsls	r3, r3, #26
 80060be:	d403      	bmi.n	80060c8 <HAL_DMA_IRQHandler+0x3ec>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060c0:	6813      	ldr	r3, [r2, #0]
 80060c2:	f023 0304 	bic.w	r3, r3, #4
 80060c6:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80060c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f47f af2d 	bne.w	8005f2a <HAL_DMA_IRQHandler+0x24e>
 80060d0:	e777      	b.n	8005fc2 <HAL_DMA_IRQHandler+0x2e6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060d2:	f013 0320 	ands.w	r3, r3, #32
 80060d6:	d108      	bne.n	80060ea <HAL_DMA_IRQHandler+0x40e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060d8:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80060da:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80060dc:	f021 010a 	bic.w	r1, r1, #10
 80060e0:	6011      	str	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80060e2:	f887 0035 	strb.w	r0, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80060e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80060ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f47f af1c 	bne.w	8005f2a <HAL_DMA_IRQHandler+0x24e>
 80060f2:	e766      	b.n	8005fc2 <HAL_DMA_IRQHandler+0x2e6>
 80060f4:	58025408 	.word	0x58025408
 80060f8:	5802541c 	.word	0x5802541c
 80060fc:	58025494 	.word	0x58025494

08006100 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006100:	680b      	ldr	r3, [r1, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 81dc 	beq.w	80064c0 <HAL_GPIO_Init+0x3c0>
 8006108:	4ab4      	ldr	r2, [pc, #720]	@ (80063dc <HAL_GPIO_Init+0x2dc>)
 800610a:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 800610c:	f04f 0200 	mov.w	r2, #0
{
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006114:	f04f 0b01 	mov.w	fp, #1
{
 8006118:	b085      	sub	sp, #20
 800611a:	f000 8105 	beq.w	8006328 <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800611e:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006122:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006124:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 8006128:	9b00      	ldr	r3, [sp, #0]
 800612a:	ea1c 0a03 	ands.w	sl, ip, r3
 800612e:	f000 814b 	beq.w	80063c8 <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006132:	684d      	ldr	r5, [r1, #4]
 8006134:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006136:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006138:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800613c:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006140:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006144:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006146:	f1b8 0f01 	cmp.w	r8, #1
 800614a:	f240 815d 	bls.w	8006408 <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800614e:	2f03      	cmp	r7, #3
 8006150:	f040 81cf 	bne.w	80064f2 <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006154:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8006158:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800615a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800615e:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006162:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 8006166:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006168:	f000 812e 	beq.w	80063c8 <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800616c:	4e9c      	ldr	r6, [pc, #624]	@ (80063e0 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800616e:	f002 0703 	and.w	r7, r2, #3
 8006172:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006174:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006178:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800617a:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800617e:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006182:	4b98      	ldr	r3, [pc, #608]	@ (80063e4 <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006184:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8006188:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 800618c:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006190:	4298      	cmp	r0, r3
 8006192:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006196:	f004 0402 	and.w	r4, r4, #2
 800619a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800619e:	9403      	str	r4, [sp, #12]
 80061a0:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80061a2:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061a4:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061a8:	f000 8178 	beq.w	800649c <HAL_GPIO_Init+0x39c>
 80061ac:	4b8e      	ldr	r3, [pc, #568]	@ (80063e8 <HAL_GPIO_Init+0x2e8>)
 80061ae:	4298      	cmp	r0, r3
 80061b0:	f000 80de 	beq.w	8006370 <HAL_GPIO_Init+0x270>
 80061b4:	f8df c234 	ldr.w	ip, [pc, #564]	@ 80063ec <HAL_GPIO_Init+0x2ec>
 80061b8:	4560      	cmp	r0, ip
 80061ba:	f000 817b 	beq.w	80064b4 <HAL_GPIO_Init+0x3b4>
 80061be:	f8df c230 	ldr.w	ip, [pc, #560]	@ 80063f0 <HAL_GPIO_Init+0x2f0>
 80061c2:	4560      	cmp	r0, ip
 80061c4:	f000 817d 	beq.w	80064c2 <HAL_GPIO_Init+0x3c2>
 80061c8:	f8df c228 	ldr.w	ip, [pc, #552]	@ 80063f4 <HAL_GPIO_Init+0x2f4>
 80061cc:	4560      	cmp	r0, ip
 80061ce:	f000 816b 	beq.w	80064a8 <HAL_GPIO_Init+0x3a8>
 80061d2:	f8df c224 	ldr.w	ip, [pc, #548]	@ 80063f8 <HAL_GPIO_Init+0x2f8>
 80061d6:	4560      	cmp	r0, ip
 80061d8:	f000 8179 	beq.w	80064ce <HAL_GPIO_Init+0x3ce>
 80061dc:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 80063fc <HAL_GPIO_Init+0x2fc>
 80061e0:	4560      	cmp	r0, ip
 80061e2:	f000 817a 	beq.w	80064da <HAL_GPIO_Init+0x3da>
 80061e6:	f8df c218 	ldr.w	ip, [pc, #536]	@ 8006400 <HAL_GPIO_Init+0x300>
 80061ea:	4560      	cmp	r0, ip
 80061ec:	f000 817b 	beq.w	80064e6 <HAL_GPIO_Init+0x3e6>
 80061f0:	f8df c210 	ldr.w	ip, [pc, #528]	@ 8006404 <HAL_GPIO_Init+0x304>
 80061f4:	4560      	cmp	r0, ip
 80061f6:	bf0c      	ite	eq
 80061f8:	f04f 0c09 	moveq.w	ip, #9
 80061fc:	f04f 0c0a 	movne.w	ip, #10
 8006200:	fa0c f707 	lsl.w	r7, ip, r7
 8006204:	433c      	orrs	r4, r7
 8006206:	e0b8      	b.n	800637a <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 8006208:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800620c:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800620e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006210:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006214:	fa06 f807 	lsl.w	r8, r6, r7
 8006218:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800621c:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006220:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8006224:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006228:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800622c:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006230:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 8006234:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 8006238:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800623c:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800623e:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006242:	fa06 fe07 	lsl.w	lr, r6, r7
 8006246:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 800624a:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800624e:	d117      	bne.n	8006280 <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006250:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006254:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8006256:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800625a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800625e:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006262:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8006266:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800626a:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800626c:	260f      	movs	r6, #15
 800626e:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006272:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006274:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006278:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 800627c:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006280:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8006282:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006284:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006288:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800628c:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8006290:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006292:	d045      	beq.n	8006320 <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006294:	4f52      	ldr	r7, [pc, #328]	@ (80063e0 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006296:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006298:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 800629c:	f044 0402 	orr.w	r4, r4, #2
 80062a0:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 80062a4:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 80062a8:	f022 0703 	bic.w	r7, r2, #3
 80062ac:	f004 0402 	and.w	r4, r4, #2
 80062b0:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 80062b4:	9403      	str	r4, [sp, #12]
 80062b6:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80062ba:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062bc:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80062c0:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062c4:	00a4      	lsls	r4, r4, #2
 80062c6:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062ca:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062cc:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062d0:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 80062d2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 80062d6:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 80062da:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062dc:	f100 80d2 	bmi.w	8006484 <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 80062e0:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80062e2:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 80062e6:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 80062e8:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062ea:	02ae      	lsls	r6, r5, #10
 80062ec:	f100 80d3 	bmi.w	8006496 <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 80062f0:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80062f2:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 80062f6:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80062f8:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062fc:	03ae      	lsls	r6, r5, #14
 80062fe:	f100 80c7 	bmi.w	8006490 <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 8006302:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006304:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006308:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800630a:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800630e:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006312:	f100 80ba 	bmi.w	800648a <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 8006316:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006318:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 800631c:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 8006320:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006322:	fa33 f402 	lsrs.w	r4, r3, r2
 8006326:	d055      	beq.n	80063d4 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006328:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 800632c:	ea13 0c0e 	ands.w	ip, r3, lr
 8006330:	d0f6      	beq.n	8006320 <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006332:	684d      	ldr	r5, [r1, #4]
 8006334:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006336:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006338:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800633c:	fa06 f807 	lsl.w	r8, r6, r7
 8006340:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006344:	f104 38ff 	add.w	r8, r4, #4294967295
 8006348:	f1b8 0f01 	cmp.w	r8, #1
 800634c:	f67f af5c 	bls.w	8006208 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006350:	2c03      	cmp	r4, #3
 8006352:	d095      	beq.n	8006280 <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 8006354:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 80063dc <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006358:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 800635a:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800635e:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006362:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006366:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 800636a:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800636e:	e787      	b.n	8006280 <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006370:	f04f 0c02 	mov.w	ip, #2
 8006374:	fa0c f707 	lsl.w	r7, ip, r7
 8006378:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800637a:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800637c:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 800637e:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8006382:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 8006386:	bf4c      	ite	mi
 8006388:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 800638c:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800638e:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 8006390:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 8006394:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8006398:	bf54      	ite	pl
 800639a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800639c:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063a0:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 80063a2:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80063a6:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 80063aa:	bf54      	ite	pl
 80063ac:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80063ae:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063b2:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80063b4:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80063b8:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 80063bc:	bf54      	ite	pl
 80063be:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80063c0:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 80063c4:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 80063c8:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063ca:	9b00      	ldr	r3, [sp, #0]
 80063cc:	fa33 f402 	lsrs.w	r4, r3, r2
 80063d0:	f47f aea8 	bne.w	8006124 <HAL_GPIO_Init+0x24>
  }
}
 80063d4:	b005      	add	sp, #20
 80063d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063da:	bf00      	nop
 80063dc:	58020000 	.word	0x58020000
 80063e0:	58024400 	.word	0x58024400
 80063e4:	58020400 	.word	0x58020400
 80063e8:	58020800 	.word	0x58020800
 80063ec:	58020c00 	.word	0x58020c00
 80063f0:	58021000 	.word	0x58021000
 80063f4:	58021400 	.word	0x58021400
 80063f8:	58021800 	.word	0x58021800
 80063fc:	58021c00 	.word	0x58021c00
 8006400:	58022000 	.word	0x58022000
 8006404:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 8006408:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800640c:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800640e:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006410:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006414:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006418:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800641a:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800641e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006422:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8006426:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800642a:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800642e:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006432:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8006436:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800643a:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 800643e:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006442:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006446:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800644a:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800644e:	f47f ae81 	bne.w	8006154 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006452:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006456:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8006458:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800645c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006460:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006464:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8006468:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800646c:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800646e:	230f      	movs	r3, #15
 8006470:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006474:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006476:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800647a:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 800647e:	f8c8 c020 	str.w	ip, [r8, #32]
 8006482:	e667      	b.n	8006154 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8006484:	ea44 040c 	orr.w	r4, r4, ip
 8006488:	e72b      	b.n	80062e2 <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 800648a:	ea44 040c 	orr.w	r4, r4, ip
 800648e:	e743      	b.n	8006318 <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 8006490:	ea4c 0404 	orr.w	r4, ip, r4
 8006494:	e736      	b.n	8006304 <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 8006496:	ea44 040c 	orr.w	r4, r4, ip
 800649a:	e72a      	b.n	80062f2 <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800649c:	f04f 0c01 	mov.w	ip, #1
 80064a0:	fa0c f707 	lsl.w	r7, ip, r7
 80064a4:	433c      	orrs	r4, r7
 80064a6:	e768      	b.n	800637a <HAL_GPIO_Init+0x27a>
 80064a8:	f04f 0c05 	mov.w	ip, #5
 80064ac:	fa0c f707 	lsl.w	r7, ip, r7
 80064b0:	433c      	orrs	r4, r7
 80064b2:	e762      	b.n	800637a <HAL_GPIO_Init+0x27a>
 80064b4:	f04f 0c03 	mov.w	ip, #3
 80064b8:	fa0c f707 	lsl.w	r7, ip, r7
 80064bc:	433c      	orrs	r4, r7
 80064be:	e75c      	b.n	800637a <HAL_GPIO_Init+0x27a>
 80064c0:	4770      	bx	lr
 80064c2:	f04f 0c04 	mov.w	ip, #4
 80064c6:	fa0c f707 	lsl.w	r7, ip, r7
 80064ca:	433c      	orrs	r4, r7
 80064cc:	e755      	b.n	800637a <HAL_GPIO_Init+0x27a>
 80064ce:	f04f 0c06 	mov.w	ip, #6
 80064d2:	fa0c f707 	lsl.w	r7, ip, r7
 80064d6:	433c      	orrs	r4, r7
 80064d8:	e74f      	b.n	800637a <HAL_GPIO_Init+0x27a>
 80064da:	f04f 0c07 	mov.w	ip, #7
 80064de:	fa0c f707 	lsl.w	r7, ip, r7
 80064e2:	433c      	orrs	r4, r7
 80064e4:	e749      	b.n	800637a <HAL_GPIO_Init+0x27a>
 80064e6:	f04f 0c08 	mov.w	ip, #8
 80064ea:	fa0c f707 	lsl.w	r7, ip, r7
 80064ee:	433c      	orrs	r4, r7
 80064f0:	e743      	b.n	800637a <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 80064f2:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064f6:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064f8:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064fc:	fa03 fc04 	lsl.w	ip, r3, r4
 8006500:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8006504:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006508:	e624      	b.n	8006154 <HAL_GPIO_Init+0x54>
 800650a:	bf00      	nop

0800650c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800650c:	b902      	cbnz	r2, 8006510 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800650e:	0409      	lsls	r1, r1, #16
 8006510:	6181      	str	r1, [r0, #24]
  }
}
 8006512:	4770      	bx	lr

08006514 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006514:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006516:	4c10      	ldr	r4, [pc, #64]	@ (8006558 <HAL_PWREx_ConfigSupply+0x44>)
 8006518:	68e3      	ldr	r3, [r4, #12]
 800651a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800651e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006520:	d105      	bne.n	800652e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	1a18      	subs	r0, r3, r0
 8006528:	bf18      	it	ne
 800652a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800652c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800652e:	f023 0307 	bic.w	r3, r3, #7
 8006532:	4303      	orrs	r3, r0
 8006534:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8006536:	f7fd f8f7 	bl	8003728 <HAL_GetTick>
 800653a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800653c:	e005      	b.n	800654a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800653e:	f7fd f8f3 	bl	8003728 <HAL_GetTick>
 8006542:	1b40      	subs	r0, r0, r5
 8006544:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006548:	d804      	bhi.n	8006554 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	049b      	lsls	r3, r3, #18
 800654e:	d5f6      	bpl.n	800653e <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8006550:	2000      	movs	r0, #0
}
 8006552:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006554:	2001      	movs	r0, #1
}
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	58024800 	.word	0x58024800

0800655c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800655c:	4b33      	ldr	r3, [pc, #204]	@ (800662c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800655e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006560:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006562:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006564:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8006566:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800656a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800656c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8006570:	d036      	beq.n	80065e0 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006572:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006576:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800657a:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800657e:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006582:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 8006586:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800658c:	ee06 2a90 	vmov	s13, r2
 8006590:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8006594:	d002      	beq.n	800659c <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8006596:	2902      	cmp	r1, #2
 8006598:	d042      	beq.n	8006620 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800659a:	b319      	cbz	r1, 80065e4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800659c:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8006630 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80065a0:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80065a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80065b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065b6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80065ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065be:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80065c2:	4b1a      	ldr	r3, [pc, #104]	@ (800662c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80065ca:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80065cc:	ee07 3a10 	vmov	s14, r3
 80065d0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80065d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80065d8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80065dc:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80065e0:	bc30      	pop	{r4, r5}
 80065e2:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	0692      	lsls	r2, r2, #26
 80065e8:	d51d      	bpl.n	8006626 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065ea:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065f0:	4a10      	ldr	r2, [pc, #64]	@ (8006634 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065f4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065fc:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065fe:	ee06 3a10 	vmov	s12, r3
 8006602:	ee05 2a90 	vmov	s11, r2
 8006606:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800660a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800660e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006612:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8006616:	ee36 7a26 	vadd.f32	s14, s12, s13
 800661a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800661e:	e7d0      	b.n	80065c2 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006620:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8006638 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8006624:	e7bc      	b.n	80065a0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006626:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800663c <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 800662a:	e7b9      	b.n	80065a0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800662c:	58024400 	.word	0x58024400
 8006630:	4a742400 	.word	0x4a742400
 8006634:	03d09000 	.word	0x03d09000
 8006638:	4bbebc20 	.word	0x4bbebc20
 800663c:	4c742400 	.word	0x4c742400

08006640 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8006640:	2800      	cmp	r0, #0
 8006642:	f000 82e7 	beq.w	8006c14 <HAL_RCC_OscConfig+0x5d4>
{
 8006646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006648:	6803      	ldr	r3, [r0, #0]
 800664a:	4604      	mov	r4, r0
 800664c:	07d9      	lsls	r1, r3, #31
 800664e:	d52e      	bpl.n	80066ae <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006650:	4997      	ldr	r1, [pc, #604]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
 8006652:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006654:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006656:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800665a:	2a10      	cmp	r2, #16
 800665c:	f000 80ee 	beq.w	800683c <HAL_RCC_OscConfig+0x1fc>
 8006660:	2a18      	cmp	r2, #24
 8006662:	f000 80e6 	beq.w	8006832 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006666:	6863      	ldr	r3, [r4, #4]
 8006668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800666c:	f000 8111 	beq.w	8006892 <HAL_RCC_OscConfig+0x252>
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8167 	beq.w	8006944 <HAL_RCC_OscConfig+0x304>
 8006676:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800667a:	4b8d      	ldr	r3, [pc, #564]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	f000 8288 	beq.w	8006b92 <HAL_RCC_OscConfig+0x552>
 8006682:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800668e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006690:	f7fd f84a 	bl	8003728 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006694:	4e86      	ldr	r6, [pc, #536]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8006696:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006698:	e005      	b.n	80066a6 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800669a:	f7fd f845 	bl	8003728 <HAL_GetTick>
 800669e:	1b40      	subs	r0, r0, r5
 80066a0:	2864      	cmp	r0, #100	@ 0x64
 80066a2:	f200 814d 	bhi.w	8006940 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066a6:	6833      	ldr	r3, [r6, #0]
 80066a8:	039b      	lsls	r3, r3, #14
 80066aa:	d5f6      	bpl.n	800669a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	079d      	lsls	r5, r3, #30
 80066b0:	d470      	bmi.n	8006794 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066b2:	06d9      	lsls	r1, r3, #27
 80066b4:	d533      	bpl.n	800671e <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066b6:	4a7e      	ldr	r2, [pc, #504]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
 80066b8:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066ba:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	f000 80cb 	beq.w	800685c <HAL_RCC_OscConfig+0x21c>
 80066c6:	2b18      	cmp	r3, #24
 80066c8:	f000 80c3 	beq.w	8006852 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066cc:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80066ce:	4d78      	ldr	r5, [pc, #480]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 816f 	beq.w	80069b4 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 80066d6:	682b      	ldr	r3, [r5, #0]
 80066d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80066de:	f7fd f823 	bl	8003728 <HAL_GetTick>
 80066e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066e4:	e005      	b.n	80066f2 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066e6:	f7fd f81f 	bl	8003728 <HAL_GetTick>
 80066ea:	1b80      	subs	r0, r0, r6
 80066ec:	2802      	cmp	r0, #2
 80066ee:	f200 8127 	bhi.w	8006940 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066f2:	682b      	ldr	r3, [r5, #0]
 80066f4:	05db      	lsls	r3, r3, #23
 80066f6:	d5f6      	bpl.n	80066e6 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066f8:	f7fd f81c 	bl	8003734 <HAL_GetREVID>
 80066fc:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006700:	4298      	cmp	r0, r3
 8006702:	f200 8267 	bhi.w	8006bd4 <HAL_RCC_OscConfig+0x594>
 8006706:	6a22      	ldr	r2, [r4, #32]
 8006708:	686b      	ldr	r3, [r5, #4]
 800670a:	2a20      	cmp	r2, #32
 800670c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006710:	bf0c      	ite	eq
 8006712:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8006716:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800671a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	071d      	lsls	r5, r3, #28
 8006720:	d516      	bpl.n	8006750 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006722:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8006724:	4d62      	ldr	r5, [pc, #392]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8122 	beq.w	8006970 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 800672c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800672e:	f043 0301 	orr.w	r3, r3, #1
 8006732:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8006734:	f7fc fff8 	bl	8003728 <HAL_GetTick>
 8006738:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800673a:	e005      	b.n	8006748 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800673c:	f7fc fff4 	bl	8003728 <HAL_GetTick>
 8006740:	1b80      	subs	r0, r0, r6
 8006742:	2802      	cmp	r0, #2
 8006744:	f200 80fc 	bhi.w	8006940 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006748:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800674a:	0798      	lsls	r0, r3, #30
 800674c:	d5f6      	bpl.n	800673c <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	069a      	lsls	r2, r3, #26
 8006752:	d516      	bpl.n	8006782 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006754:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8006756:	4d56      	ldr	r5, [pc, #344]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 811a 	beq.w	8006992 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 800675e:	682b      	ldr	r3, [r5, #0]
 8006760:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006764:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006766:	f7fc ffdf 	bl	8003728 <HAL_GetTick>
 800676a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800676c:	e005      	b.n	800677a <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800676e:	f7fc ffdb 	bl	8003728 <HAL_GetTick>
 8006772:	1b80      	subs	r0, r0, r6
 8006774:	2802      	cmp	r0, #2
 8006776:	f200 80e3 	bhi.w	8006940 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800677a:	682b      	ldr	r3, [r5, #0]
 800677c:	049f      	lsls	r7, r3, #18
 800677e:	d5f6      	bpl.n	800676e <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	0759      	lsls	r1, r3, #29
 8006784:	f100 808b 	bmi.w	800689e <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006788:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	f040 80bf 	bne.w	800690e <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8006790:	2000      	movs	r0, #0
}
 8006792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006794:	4a46      	ldr	r2, [pc, #280]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
 8006796:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006798:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800679a:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800679e:	d12d      	bne.n	80067fc <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067a0:	4b43      	ldr	r3, [pc, #268]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067a2:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	0759      	lsls	r1, r3, #29
 80067a8:	d501      	bpl.n	80067ae <HAL_RCC_OscConfig+0x16e>
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	d04f      	beq.n	800684e <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067ae:	4d40      	ldr	r5, [pc, #256]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	f023 0319 	bic.w	r3, r3, #25
 80067b6:	4313      	orrs	r3, r2
 80067b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80067ba:	f7fc ffb5 	bl	8003728 <HAL_GetTick>
 80067be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067c0:	e005      	b.n	80067ce <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067c2:	f7fc ffb1 	bl	8003728 <HAL_GetTick>
 80067c6:	1b80      	subs	r0, r0, r6
 80067c8:	2802      	cmp	r0, #2
 80067ca:	f200 80b9 	bhi.w	8006940 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067ce:	682b      	ldr	r3, [r5, #0]
 80067d0:	075b      	lsls	r3, r3, #29
 80067d2:	d5f6      	bpl.n	80067c2 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d4:	f7fc ffae 	bl	8003734 <HAL_GetREVID>
 80067d8:	f241 0303 	movw	r3, #4099	@ 0x1003
 80067dc:	4298      	cmp	r0, r3
 80067de:	f200 8110 	bhi.w	8006a02 <HAL_RCC_OscConfig+0x3c2>
 80067e2:	6922      	ldr	r2, [r4, #16]
 80067e4:	686b      	ldr	r3, [r5, #4]
 80067e6:	2a40      	cmp	r2, #64	@ 0x40
 80067e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80067ec:	bf0c      	ite	eq
 80067ee:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 80067f2:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80067f6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	e75a      	b.n	80066b2 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067fc:	2b18      	cmp	r3, #24
 80067fe:	f000 80fc 	beq.w	80069fa <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006802:	4d2b      	ldr	r5, [pc, #172]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006804:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006806:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006808:	2a00      	cmp	r2, #0
 800680a:	f000 80e5 	beq.w	80069d8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800680e:	f023 0319 	bic.w	r3, r3, #25
 8006812:	4313      	orrs	r3, r2
 8006814:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006816:	f7fc ff87 	bl	8003728 <HAL_GetTick>
 800681a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800681c:	e005      	b.n	800682a <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800681e:	f7fc ff83 	bl	8003728 <HAL_GetTick>
 8006822:	1b80      	subs	r0, r0, r6
 8006824:	2802      	cmp	r0, #2
 8006826:	f200 808b 	bhi.w	8006940 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800682a:	682b      	ldr	r3, [r5, #0]
 800682c:	075f      	lsls	r7, r3, #29
 800682e:	d5f6      	bpl.n	800681e <HAL_RCC_OscConfig+0x1de>
 8006830:	e7d0      	b.n	80067d4 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006832:	f001 0103 	and.w	r1, r1, #3
 8006836:	2902      	cmp	r1, #2
 8006838:	f47f af15 	bne.w	8006666 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800683c:	4a1c      	ldr	r2, [pc, #112]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
 800683e:	6812      	ldr	r2, [r2, #0]
 8006840:	0392      	lsls	r2, r2, #14
 8006842:	f57f af34 	bpl.w	80066ae <HAL_RCC_OscConfig+0x6e>
 8006846:	6862      	ldr	r2, [r4, #4]
 8006848:	2a00      	cmp	r2, #0
 800684a:	f47f af30 	bne.w	80066ae <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 800684e:	2001      	movs	r0, #1
}
 8006850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006852:	f002 0203 	and.w	r2, r2, #3
 8006856:	2a01      	cmp	r2, #1
 8006858:	f47f af38 	bne.w	80066cc <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800685c:	4b14      	ldr	r3, [pc, #80]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	05da      	lsls	r2, r3, #23
 8006862:	d502      	bpl.n	800686a <HAL_RCC_OscConfig+0x22a>
 8006864:	69e3      	ldr	r3, [r4, #28]
 8006866:	2b80      	cmp	r3, #128	@ 0x80
 8006868:	d1f1      	bne.n	800684e <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800686a:	f7fc ff63 	bl	8003734 <HAL_GetREVID>
 800686e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8006872:	4298      	cmp	r0, r3
 8006874:	f200 80ce 	bhi.w	8006a14 <HAL_RCC_OscConfig+0x3d4>
 8006878:	6a22      	ldr	r2, [r4, #32]
 800687a:	2a20      	cmp	r2, #32
 800687c:	f000 81b9 	beq.w	8006bf2 <HAL_RCC_OscConfig+0x5b2>
 8006880:	490b      	ldr	r1, [pc, #44]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
 8006882:	684b      	ldr	r3, [r1, #4]
 8006884:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006888:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800688c:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	e745      	b.n	800671e <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006892:	4a07      	ldr	r2, [pc, #28]	@ (80068b0 <HAL_RCC_OscConfig+0x270>)
 8006894:	6813      	ldr	r3, [r2, #0]
 8006896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800689a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800689c:	e6f8      	b.n	8006690 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800689e:	4d05      	ldr	r5, [pc, #20]	@ (80068b4 <HAL_RCC_OscConfig+0x274>)
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068a6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80068a8:	f7fc ff3e 	bl	8003728 <HAL_GetTick>
 80068ac:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ae:	e008      	b.n	80068c2 <HAL_RCC_OscConfig+0x282>
 80068b0:	58024400 	.word	0x58024400
 80068b4:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068b8:	f7fc ff36 	bl	8003728 <HAL_GetTick>
 80068bc:	1b80      	subs	r0, r0, r6
 80068be:	2864      	cmp	r0, #100	@ 0x64
 80068c0:	d83e      	bhi.n	8006940 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068c2:	682b      	ldr	r3, [r5, #0]
 80068c4:	05da      	lsls	r2, r3, #23
 80068c6:	d5f7      	bpl.n	80068b8 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c8:	68a3      	ldr	r3, [r4, #8]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	f000 818b 	beq.w	8006be6 <HAL_RCC_OscConfig+0x5a6>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 8166 	beq.w	8006ba2 <HAL_RCC_OscConfig+0x562>
 80068d6:	2b05      	cmp	r3, #5
 80068d8:	4b85      	ldr	r3, [pc, #532]	@ (8006af0 <HAL_RCC_OscConfig+0x4b0>)
 80068da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80068dc:	f000 8192 	beq.w	8006c04 <HAL_RCC_OscConfig+0x5c4>
 80068e0:	f022 0201 	bic.w	r2, r2, #1
 80068e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80068e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80068e8:	f022 0204 	bic.w	r2, r2, #4
 80068ec:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80068ee:	f7fc ff1b 	bl	8003728 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068f2:	4e7f      	ldr	r6, [pc, #508]	@ (8006af0 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f4:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80068f8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068fa:	e004      	b.n	8006906 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fc:	f7fc ff14 	bl	8003728 <HAL_GetTick>
 8006900:	1b40      	subs	r0, r0, r5
 8006902:	42b8      	cmp	r0, r7
 8006904:	d81c      	bhi.n	8006940 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006906:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8006908:	079b      	lsls	r3, r3, #30
 800690a:	d5f7      	bpl.n	80068fc <HAL_RCC_OscConfig+0x2bc>
 800690c:	e73c      	b.n	8006788 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800690e:	4d78      	ldr	r5, [pc, #480]	@ (8006af0 <HAL_RCC_OscConfig+0x4b0>)
 8006910:	692a      	ldr	r2, [r5, #16]
 8006912:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8006916:	2a18      	cmp	r2, #24
 8006918:	f000 80ee 	beq.w	8006af8 <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800691c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800691e:	682b      	ldr	r3, [r5, #0]
 8006920:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006924:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006926:	d07f      	beq.n	8006a28 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 8006928:	f7fc fefe 	bl	8003728 <HAL_GetTick>
 800692c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800692e:	682b      	ldr	r3, [r5, #0]
 8006930:	019b      	lsls	r3, r3, #6
 8006932:	f57f af2d 	bpl.w	8006790 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006936:	f7fc fef7 	bl	8003728 <HAL_GetTick>
 800693a:	1b00      	subs	r0, r0, r4
 800693c:	2802      	cmp	r0, #2
 800693e:	d9f6      	bls.n	800692e <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 8006940:	2003      	movs	r0, #3
}
 8006942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006944:	4d6a      	ldr	r5, [pc, #424]	@ (8006af0 <HAL_RCC_OscConfig+0x4b0>)
 8006946:	682b      	ldr	r3, [r5, #0]
 8006948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800694c:	602b      	str	r3, [r5, #0]
 800694e:	682b      	ldr	r3, [r5, #0]
 8006950:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006954:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006956:	f7fc fee7 	bl	8003728 <HAL_GetTick>
 800695a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800695c:	e004      	b.n	8006968 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800695e:	f7fc fee3 	bl	8003728 <HAL_GetTick>
 8006962:	1b80      	subs	r0, r0, r6
 8006964:	2864      	cmp	r0, #100	@ 0x64
 8006966:	d8eb      	bhi.n	8006940 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	039f      	lsls	r7, r3, #14
 800696c:	d4f7      	bmi.n	800695e <HAL_RCC_OscConfig+0x31e>
 800696e:	e69d      	b.n	80066ac <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8006970:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8006972:	f023 0301 	bic.w	r3, r3, #1
 8006976:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8006978:	f7fc fed6 	bl	8003728 <HAL_GetTick>
 800697c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800697e:	e004      	b.n	800698a <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006980:	f7fc fed2 	bl	8003728 <HAL_GetTick>
 8006984:	1b80      	subs	r0, r0, r6
 8006986:	2802      	cmp	r0, #2
 8006988:	d8da      	bhi.n	8006940 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800698a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800698c:	0799      	lsls	r1, r3, #30
 800698e:	d4f7      	bmi.n	8006980 <HAL_RCC_OscConfig+0x340>
 8006990:	e6dd      	b.n	800674e <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8006992:	682b      	ldr	r3, [r5, #0]
 8006994:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006998:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800699a:	f7fc fec5 	bl	8003728 <HAL_GetTick>
 800699e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069a0:	e004      	b.n	80069ac <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069a2:	f7fc fec1 	bl	8003728 <HAL_GetTick>
 80069a6:	1b80      	subs	r0, r0, r6
 80069a8:	2802      	cmp	r0, #2
 80069aa:	d8c9      	bhi.n	8006940 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	0498      	lsls	r0, r3, #18
 80069b0:	d4f7      	bmi.n	80069a2 <HAL_RCC_OscConfig+0x362>
 80069b2:	e6e5      	b.n	8006780 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80069bc:	f7fc feb4 	bl	8003728 <HAL_GetTick>
 80069c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069c2:	e004      	b.n	80069ce <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80069c4:	f7fc feb0 	bl	8003728 <HAL_GetTick>
 80069c8:	1b80      	subs	r0, r0, r6
 80069ca:	2802      	cmp	r0, #2
 80069cc:	d8b8      	bhi.n	8006940 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80069ce:	682b      	ldr	r3, [r5, #0]
 80069d0:	05df      	lsls	r7, r3, #23
 80069d2:	d4f7      	bmi.n	80069c4 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	e6a2      	b.n	800671e <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 80069d8:	f023 0301 	bic.w	r3, r3, #1
 80069dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80069de:	f7fc fea3 	bl	8003728 <HAL_GetTick>
 80069e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069e4:	e004      	b.n	80069f0 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069e6:	f7fc fe9f 	bl	8003728 <HAL_GetTick>
 80069ea:	1b80      	subs	r0, r0, r6
 80069ec:	2802      	cmp	r0, #2
 80069ee:	d8a7      	bhi.n	8006940 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	0758      	lsls	r0, r3, #29
 80069f4:	d4f7      	bmi.n	80069e6 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	e65b      	b.n	80066b2 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069fa:	0790      	lsls	r0, r2, #30
 80069fc:	f47f af01 	bne.w	8006802 <HAL_RCC_OscConfig+0x1c2>
 8006a00:	e6ce      	b.n	80067a0 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a02:	686b      	ldr	r3, [r5, #4]
 8006a04:	6922      	ldr	r2, [r4, #16]
 8006a06:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006a0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006a0e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	e64e      	b.n	80066b2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a14:	4a36      	ldr	r2, [pc, #216]	@ (8006af0 <HAL_RCC_OscConfig+0x4b0>)
 8006a16:	6a21      	ldr	r1, [r4, #32]
 8006a18:	68d3      	ldr	r3, [r2, #12]
 8006a1a:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8006a1e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006a22:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	e67a      	b.n	800671e <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8006a28:	f7fc fe7e 	bl	8003728 <HAL_GetTick>
 8006a2c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a2e:	e004      	b.n	8006a3a <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a30:	f7fc fe7a 	bl	8003728 <HAL_GetTick>
 8006a34:	1b80      	subs	r0, r0, r6
 8006a36:	2802      	cmp	r0, #2
 8006a38:	d882      	bhi.n	8006940 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a3a:	682b      	ldr	r3, [r5, #0]
 8006a3c:	0199      	lsls	r1, r3, #6
 8006a3e:	d4f7      	bmi.n	8006a30 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a40:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8006a42:	4b2c      	ldr	r3, [pc, #176]	@ (8006af4 <HAL_RCC_OscConfig+0x4b4>)
 8006a44:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006a46:	400b      	ands	r3, r1
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006a4c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006a50:	62ab      	str	r3, [r5, #40]	@ 0x28
 8006a52:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006a54:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8006a58:	3901      	subs	r1, #1
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	3a01      	subs	r2, #1
 8006a5e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006a62:	025b      	lsls	r3, r3, #9
 8006a64:	0412      	lsls	r2, r2, #16
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8006a70:	3a01      	subs	r2, #1
 8006a72:	430b      	orrs	r3, r1
 8006a74:	0612      	lsls	r2, r2, #24
 8006a76:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a7e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a86:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8006a88:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8006a8a:	f36f 03cf 	bfc	r3, #3, #13
 8006a8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006a92:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a94:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006a96:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006a98:	f023 030c 	bic.w	r3, r3, #12
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006aa0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006aa2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006aa4:	f023 0302 	bic.w	r3, r3, #2
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006aac:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aba:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006abc:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006abe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ac2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ac4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ad2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006ad4:	f7fc fe28 	bl	8003728 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ad8:	4d05      	ldr	r5, [pc, #20]	@ (8006af0 <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 8006ada:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	019a      	lsls	r2, r3, #6
 8006ae0:	f53f ae56 	bmi.w	8006790 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae4:	f7fc fe20 	bl	8003728 <HAL_GetTick>
 8006ae8:	1b00      	subs	r0, r0, r4
 8006aea:	2802      	cmp	r0, #2
 8006aec:	d9f6      	bls.n	8006adc <HAL_RCC_OscConfig+0x49c>
 8006aee:	e727      	b.n	8006940 <HAL_RCC_OscConfig+0x300>
 8006af0:	58024400 	.word	0x58024400
 8006af4:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af8:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006afa:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006afc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006afe:	f43f aea6 	beq.w	800684e <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b02:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b06:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006b08:	428b      	cmp	r3, r1
 8006b0a:	f47f aea0 	bne.w	800684e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b0e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b12:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006b14:	429a      	cmp	r2, r3
 8006b16:	f47f ae9a 	bne.w	800684e <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006b1c:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8006b20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b22:	429a      	cmp	r2, r3
 8006b24:	f47f ae93 	bne.w	800684e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b2a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8006b2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b30:	429a      	cmp	r2, r3
 8006b32:	f47f ae8c 	bne.w	800684e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b36:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b38:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8006b3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	f47f ae85 	bne.w	800684e <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006b46:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8006b4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b4c:	4298      	cmp	r0, r3
 8006b4e:	f47f ae7e 	bne.w	800684e <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006b52:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006b54:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006b56:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	f43f ae18 	beq.w	8006790 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b60:	4a2d      	ldr	r2, [pc, #180]	@ (8006c18 <HAL_RCC_OscConfig+0x5d8>)
 8006b62:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8006b6a:	f7fc fddd 	bl	8003728 <HAL_GetTick>
 8006b6e:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006b70:	f7fc fdda 	bl	8003728 <HAL_GetTick>
 8006b74:	42a8      	cmp	r0, r5
 8006b76:	d0fb      	beq.n	8006b70 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b78:	4a27      	ldr	r2, [pc, #156]	@ (8006c18 <HAL_RCC_OscConfig+0x5d8>)
 8006b7a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006b7c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8006b7e:	f36f 03cf 	bfc	r3, #3, #13
 8006b82:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b86:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8006b88:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
 8006b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b90:	e5fe      	b.n	8006790 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b92:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006b9e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ba0:	e576      	b.n	8006690 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ba2:	4d1d      	ldr	r5, [pc, #116]	@ (8006c18 <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ba4:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ba8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006baa:	f023 0301 	bic.w	r3, r3, #1
 8006bae:	672b      	str	r3, [r5, #112]	@ 0x70
 8006bb0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006bb2:	f023 0304 	bic.w	r3, r3, #4
 8006bb6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8006bb8:	f7fc fdb6 	bl	8003728 <HAL_GetTick>
 8006bbc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bbe:	e005      	b.n	8006bcc <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc0:	f7fc fdb2 	bl	8003728 <HAL_GetTick>
 8006bc4:	1b80      	subs	r0, r0, r6
 8006bc6:	42b8      	cmp	r0, r7
 8006bc8:	f63f aeba 	bhi.w	8006940 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bcc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006bce:	0798      	lsls	r0, r3, #30
 8006bd0:	d4f6      	bmi.n	8006bc0 <HAL_RCC_OscConfig+0x580>
 8006bd2:	e5d9      	b.n	8006788 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bd4:	68eb      	ldr	r3, [r5, #12]
 8006bd6:	6a22      	ldr	r2, [r4, #32]
 8006bd8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8006bdc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006be0:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	e59b      	b.n	800671e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006be6:	4a0c      	ldr	r2, [pc, #48]	@ (8006c18 <HAL_RCC_OscConfig+0x5d8>)
 8006be8:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8006bea:	f043 0301 	orr.w	r3, r3, #1
 8006bee:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bf0:	e67d      	b.n	80068ee <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bf2:	4a09      	ldr	r2, [pc, #36]	@ (8006c18 <HAL_RCC_OscConfig+0x5d8>)
 8006bf4:	6853      	ldr	r3, [r2, #4]
 8006bf6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006bfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bfe:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	e58c      	b.n	800671e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c04:	f042 0204 	orr.w	r2, r2, #4
 8006c08:	671a      	str	r2, [r3, #112]	@ 0x70
 8006c0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c0c:	f042 0201 	orr.w	r2, r2, #1
 8006c10:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c12:	e66c      	b.n	80068ee <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 8006c14:	2001      	movs	r0, #1
}
 8006c16:	4770      	bx	lr
 8006c18:	58024400 	.word	0x58024400

08006c1c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x100>)
 8006c1e:	6913      	ldr	r3, [r2, #16]
 8006c20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c24:	2b10      	cmp	r3, #16
 8006c26:	d04f      	beq.n	8006cc8 <HAL_RCC_GetSysClockFreq+0xac>
 8006c28:	2b18      	cmp	r3, #24
 8006c2a:	d00a      	beq.n	8006c42 <HAL_RCC_GetSysClockFreq+0x26>
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d14d      	bne.n	8006ccc <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c30:	6813      	ldr	r3, [r2, #0]
 8006c32:	0699      	lsls	r1, r3, #26
 8006c34:	d54c      	bpl.n	8006cd0 <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c36:	6813      	ldr	r3, [r2, #0]
 8006c38:	4839      	ldr	r0, [pc, #228]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8006c3a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006c3e:	40d8      	lsrs	r0, r3
 8006c40:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c42:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8006c44:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006c46:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c48:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8006c4a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c4e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006c50:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8006c54:	d036      	beq.n	8006cc4 <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c56:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c5a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c5e:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c62:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c66:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 8006c6a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c70:	ee06 3a90 	vmov	s13, r3
 8006c74:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8006c78:	d002      	beq.n	8006c80 <HAL_RCC_GetSysClockFreq+0x64>
 8006c7a:	2902      	cmp	r1, #2
 8006c7c:	d048      	beq.n	8006d10 <HAL_RCC_GetSysClockFreq+0xf4>
 8006c7e:	b349      	cbz	r1, 8006cd4 <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c80:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006d24 <HAL_RCC_GetSysClockFreq+0x108>
 8006c84:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8006c88:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a10 	vmov	s14, r3
 8006c92:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006c96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006c9a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006c9e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006ca2:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x100>)
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006caa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006cae:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006cb0:	ee07 3a90 	vmov	s15, r3
 8006cb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006cb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc0:	ee17 0a90 	vmov	r0, s15
}
 8006cc4:	bc30      	pop	{r4, r5}
 8006cc6:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cc8:	4817      	ldr	r0, [pc, #92]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006cca:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 8006ccc:	4817      	ldr	r0, [pc, #92]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8006cce:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006cd0:	4813      	ldr	r0, [pc, #76]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8006cd2:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cd4:	6813      	ldr	r3, [r2, #0]
 8006cd6:	069b      	lsls	r3, r3, #26
 8006cd8:	d51d      	bpl.n	8006d16 <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cda:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ce0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ce2:	490f      	ldr	r1, [pc, #60]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ce4:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cec:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cee:	ee06 3a10 	vmov	s12, r3
 8006cf2:	ee05 1a90 	vmov	s11, r1
 8006cf6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006cfa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006cfe:	ee36 6a07 	vadd.f32	s12, s12, s14
 8006d02:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8006d06:	ee76 7a26 	vadd.f32	s15, s12, s13
 8006d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d0e:	e7ca      	b.n	8006ca6 <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d10:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006d30 <HAL_RCC_GetSysClockFreq+0x114>
 8006d14:	e7b6      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d16:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006d34 <HAL_RCC_GetSysClockFreq+0x118>
 8006d1a:	e7b3      	b.n	8006c84 <HAL_RCC_GetSysClockFreq+0x68>
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	03d09000 	.word	0x03d09000
 8006d24:	4a742400 	.word	0x4a742400
 8006d28:	017d7840 	.word	0x017d7840
 8006d2c:	003d0900 	.word	0x003d0900
 8006d30:	4bbebc20 	.word	0x4bbebc20
 8006d34:	4c742400 	.word	0x4c742400

08006d38 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	f000 810e 	beq.w	8006f5a <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d3e:	4a8d      	ldr	r2, [pc, #564]	@ (8006f74 <HAL_RCC_ClockConfig+0x23c>)
 8006d40:	6813      	ldr	r3, [r2, #0]
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	428b      	cmp	r3, r1
{
 8006d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d50:	d20c      	bcs.n	8006d6c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d52:	6813      	ldr	r3, [r2, #0]
 8006d54:	f023 030f 	bic.w	r3, r3, #15
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d5c:	6813      	ldr	r3, [r2, #0]
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	428b      	cmp	r3, r1
 8006d64:	d002      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006d66:	2001      	movs	r0, #1
}
 8006d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	0758      	lsls	r0, r3, #29
 8006d70:	d50b      	bpl.n	8006d8a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d72:	4981      	ldr	r1, [pc, #516]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006d74:	6920      	ldr	r0, [r4, #16]
 8006d76:	698a      	ldr	r2, [r1, #24]
 8006d78:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006d7c:	4290      	cmp	r0, r2
 8006d7e:	d904      	bls.n	8006d8a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d80:	698a      	ldr	r2, [r1, #24]
 8006d82:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006d86:	4302      	orrs	r2, r0
 8006d88:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d8a:	0719      	lsls	r1, r3, #28
 8006d8c:	d50b      	bpl.n	8006da6 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d8e:	497a      	ldr	r1, [pc, #488]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006d90:	6960      	ldr	r0, [r4, #20]
 8006d92:	69ca      	ldr	r2, [r1, #28]
 8006d94:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006d98:	4290      	cmp	r0, r2
 8006d9a:	d904      	bls.n	8006da6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d9c:	69ca      	ldr	r2, [r1, #28]
 8006d9e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006da2:	4302      	orrs	r2, r0
 8006da4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006da6:	06da      	lsls	r2, r3, #27
 8006da8:	d50b      	bpl.n	8006dc2 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006daa:	4973      	ldr	r1, [pc, #460]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006dac:	69a0      	ldr	r0, [r4, #24]
 8006dae:	69ca      	ldr	r2, [r1, #28]
 8006db0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006db4:	4290      	cmp	r0, r2
 8006db6:	d904      	bls.n	8006dc2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006db8:	69ca      	ldr	r2, [r1, #28]
 8006dba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006dbe:	4302      	orrs	r2, r0
 8006dc0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dc2:	069f      	lsls	r7, r3, #26
 8006dc4:	d50b      	bpl.n	8006dde <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dc6:	496c      	ldr	r1, [pc, #432]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006dc8:	69e0      	ldr	r0, [r4, #28]
 8006dca:	6a0a      	ldr	r2, [r1, #32]
 8006dcc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006dd0:	4290      	cmp	r0, r2
 8006dd2:	d904      	bls.n	8006dde <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006dd4:	6a0a      	ldr	r2, [r1, #32]
 8006dd6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006dda:	4302      	orrs	r2, r0
 8006ddc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dde:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006de0:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006de4:	f140 80ab 	bpl.w	8006f3e <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006de8:	4e63      	ldr	r6, [pc, #396]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006dea:	68e0      	ldr	r0, [r4, #12]
 8006dec:	69b1      	ldr	r1, [r6, #24]
 8006dee:	f001 010f 	and.w	r1, r1, #15
 8006df2:	4288      	cmp	r0, r1
 8006df4:	d904      	bls.n	8006e00 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006df6:	69b1      	ldr	r1, [r6, #24]
 8006df8:	f021 010f 	bic.w	r1, r1, #15
 8006dfc:	4301      	orrs	r1, r0
 8006dfe:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	d030      	beq.n	8006e66 <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e04:	4a5c      	ldr	r2, [pc, #368]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006e06:	68a1      	ldr	r1, [r4, #8]
 8006e08:	6993      	ldr	r3, [r2, #24]
 8006e0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e12:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e14:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e16:	2902      	cmp	r1, #2
 8006e18:	f000 80a1 	beq.w	8006f5e <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e1c:	2903      	cmp	r1, #3
 8006e1e:	f000 8098 	beq.w	8006f52 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e22:	2901      	cmp	r1, #1
 8006e24:	f000 80a1 	beq.w	8006f6a <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e28:	075f      	lsls	r7, r3, #29
 8006e2a:	d59c      	bpl.n	8006d66 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e2c:	4e52      	ldr	r6, [pc, #328]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e2e:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e32:	6933      	ldr	r3, [r6, #16]
 8006e34:	f023 0307 	bic.w	r3, r3, #7
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8006e3c:	f7fc fc74 	bl	8003728 <HAL_GetTick>
 8006e40:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e42:	e005      	b.n	8006e50 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e44:	f7fc fc70 	bl	8003728 <HAL_GetTick>
 8006e48:	1bc0      	subs	r0, r0, r7
 8006e4a:	4540      	cmp	r0, r8
 8006e4c:	f200 808b 	bhi.w	8006f66 <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e50:	6933      	ldr	r3, [r6, #16]
 8006e52:	6862      	ldr	r2, [r4, #4]
 8006e54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e58:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006e5c:	d1f2      	bne.n	8006e44 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	079e      	lsls	r6, r3, #30
 8006e62:	d506      	bpl.n	8006e72 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e64:	68e0      	ldr	r0, [r4, #12]
 8006e66:	4944      	ldr	r1, [pc, #272]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006e68:	698a      	ldr	r2, [r1, #24]
 8006e6a:	f002 020f 	and.w	r2, r2, #15
 8006e6e:	4290      	cmp	r0, r2
 8006e70:	d369      	bcc.n	8006f46 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e72:	4940      	ldr	r1, [pc, #256]	@ (8006f74 <HAL_RCC_ClockConfig+0x23c>)
 8006e74:	680a      	ldr	r2, [r1, #0]
 8006e76:	f002 020f 	and.w	r2, r2, #15
 8006e7a:	42aa      	cmp	r2, r5
 8006e7c:	d90a      	bls.n	8006e94 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e7e:	680a      	ldr	r2, [r1, #0]
 8006e80:	f022 020f 	bic.w	r2, r2, #15
 8006e84:	432a      	orrs	r2, r5
 8006e86:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e88:	680a      	ldr	r2, [r1, #0]
 8006e8a:	f002 020f 	and.w	r2, r2, #15
 8006e8e:	42aa      	cmp	r2, r5
 8006e90:	f47f af69 	bne.w	8006d66 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e94:	0758      	lsls	r0, r3, #29
 8006e96:	d50b      	bpl.n	8006eb0 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e98:	4937      	ldr	r1, [pc, #220]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006e9a:	6920      	ldr	r0, [r4, #16]
 8006e9c:	698a      	ldr	r2, [r1, #24]
 8006e9e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006ea2:	4290      	cmp	r0, r2
 8006ea4:	d204      	bcs.n	8006eb0 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ea6:	698a      	ldr	r2, [r1, #24]
 8006ea8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006eac:	4302      	orrs	r2, r0
 8006eae:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eb0:	0719      	lsls	r1, r3, #28
 8006eb2:	d50b      	bpl.n	8006ecc <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006eb4:	4930      	ldr	r1, [pc, #192]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006eb6:	6960      	ldr	r0, [r4, #20]
 8006eb8:	69ca      	ldr	r2, [r1, #28]
 8006eba:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8006ebe:	4290      	cmp	r0, r2
 8006ec0:	d204      	bcs.n	8006ecc <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ec2:	69ca      	ldr	r2, [r1, #28]
 8006ec4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006ec8:	4302      	orrs	r2, r0
 8006eca:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ecc:	06da      	lsls	r2, r3, #27
 8006ece:	d50b      	bpl.n	8006ee8 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ed0:	4929      	ldr	r1, [pc, #164]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006ed2:	69a0      	ldr	r0, [r4, #24]
 8006ed4:	69ca      	ldr	r2, [r1, #28]
 8006ed6:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8006eda:	4290      	cmp	r0, r2
 8006edc:	d204      	bcs.n	8006ee8 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ede:	69ca      	ldr	r2, [r1, #28]
 8006ee0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ee4:	4302      	orrs	r2, r0
 8006ee6:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ee8:	069b      	lsls	r3, r3, #26
 8006eea:	d50b      	bpl.n	8006f04 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006eec:	4a22      	ldr	r2, [pc, #136]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006eee:	69e1      	ldr	r1, [r4, #28]
 8006ef0:	6a13      	ldr	r3, [r2, #32]
 8006ef2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ef6:	4299      	cmp	r1, r3
 8006ef8:	d204      	bcs.n	8006f04 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006efa:	6a13      	ldr	r3, [r2, #32]
 8006efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f04:	f7ff fe8a 	bl	8006c1c <HAL_RCC_GetSysClockFreq>
 8006f08:	4a1b      	ldr	r2, [pc, #108]	@ (8006f78 <HAL_RCC_ClockConfig+0x240>)
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	481b      	ldr	r0, [pc, #108]	@ (8006f7c <HAL_RCC_ClockConfig+0x244>)
 8006f0e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f10:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f12:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8006f16:	4d1a      	ldr	r5, [pc, #104]	@ (8006f80 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f18:	f002 020f 	and.w	r2, r2, #15
 8006f1c:	4c19      	ldr	r4, [pc, #100]	@ (8006f84 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f1e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f20:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f22:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8006f26:	4818      	ldr	r0, [pc, #96]	@ (8006f88 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f28:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f2c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8006f2e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8006f30:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f32:	40d3      	lsrs	r3, r2
 8006f34:	6023      	str	r3, [r4, #0]
}
 8006f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8006f3a:	f7fc bb93 	b.w	8003664 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	f47f af60 	bne.w	8006e04 <HAL_RCC_ClockConfig+0xcc>
 8006f44:	e795      	b.n	8006e72 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f46:	698a      	ldr	r2, [r1, #24]
 8006f48:	f022 020f 	bic.w	r2, r2, #15
 8006f4c:	4302      	orrs	r2, r0
 8006f4e:	618a      	str	r2, [r1, #24]
 8006f50:	e78f      	b.n	8006e72 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f52:	019a      	lsls	r2, r3, #6
 8006f54:	f53f af6a 	bmi.w	8006e2c <HAL_RCC_ClockConfig+0xf4>
 8006f58:	e705      	b.n	8006d66 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8006f5a:	2001      	movs	r0, #1
}
 8006f5c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f5e:	0398      	lsls	r0, r3, #14
 8006f60:	f53f af64 	bmi.w	8006e2c <HAL_RCC_ClockConfig+0xf4>
 8006f64:	e6ff      	b.n	8006d66 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8006f66:	2003      	movs	r0, #3
 8006f68:	e6fe      	b.n	8006d68 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f6a:	05db      	lsls	r3, r3, #23
 8006f6c:	f53f af5e 	bmi.w	8006e2c <HAL_RCC_ClockConfig+0xf4>
 8006f70:	e6f9      	b.n	8006d66 <HAL_RCC_ClockConfig+0x2e>
 8006f72:	bf00      	nop
 8006f74:	52002000 	.word	0x52002000
 8006f78:	58024400 	.word	0x58024400
 8006f7c:	08070d44 	.word	0x08070d44
 8006f80:	24000020 	.word	0x24000020
 8006f84:	2400001c 	.word	0x2400001c
 8006f88:	24000028 	.word	0x24000028

08006f8c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f8c:	4a18      	ldr	r2, [pc, #96]	@ (8006ff0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f8e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f90:	6913      	ldr	r3, [r2, #16]
 8006f92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d024      	beq.n	8006fe4 <HAL_RCC_GetHCLKFreq+0x58>
 8006f9a:	2b18      	cmp	r3, #24
 8006f9c:	d009      	beq.n	8006fb2 <HAL_RCC_GetHCLKFreq+0x26>
 8006f9e:	bb1b      	cbnz	r3, 8006fe8 <HAL_RCC_GetHCLKFreq+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa0:	6813      	ldr	r3, [r2, #0]
 8006fa2:	069b      	lsls	r3, r3, #26
 8006fa4:	d522      	bpl.n	8006fec <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	4b12      	ldr	r3, [pc, #72]	@ (8006ff4 <HAL_RCC_GetHCLKFreq+0x68>)
 8006faa:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006fae:	40d3      	lsrs	r3, r2
 8006fb0:	e002      	b.n	8006fb8 <HAL_RCC_GetHCLKFreq+0x2c>
 8006fb2:	f7ff fad3 	bl	800655c <HAL_RCC_GetSysClockFreq.part.0>
 8006fb6:	4603      	mov	r3, r0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fb8:	490d      	ldr	r1, [pc, #52]	@ (8006ff0 <HAL_RCC_GetHCLKFreq+0x64>)
 8006fba:	480f      	ldr	r0, [pc, #60]	@ (8006ff8 <HAL_RCC_GetHCLKFreq+0x6c>)
 8006fbc:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fbe:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fc0:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fc4:	4c0d      	ldr	r4, [pc, #52]	@ (8006ffc <HAL_RCC_GetHCLKFreq+0x70>)
 8006fc6:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fca:	4d0d      	ldr	r5, [pc, #52]	@ (8007000 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fcc:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fce:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fd0:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fd4:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fd8:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fda:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8006fde:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fe0:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fe4:	4b07      	ldr	r3, [pc, #28]	@ (8007004 <HAL_RCC_GetHCLKFreq+0x78>)
 8006fe6:	e7e7      	b.n	8006fb8 <HAL_RCC_GetHCLKFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8006fe8:	4b07      	ldr	r3, [pc, #28]	@ (8007008 <HAL_RCC_GetHCLKFreq+0x7c>)
 8006fea:	e7e5      	b.n	8006fb8 <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006fec:	4b01      	ldr	r3, [pc, #4]	@ (8006ff4 <HAL_RCC_GetHCLKFreq+0x68>)
 8006fee:	e7e3      	b.n	8006fb8 <HAL_RCC_GetHCLKFreq+0x2c>
 8006ff0:	58024400 	.word	0x58024400
 8006ff4:	03d09000 	.word	0x03d09000
 8006ff8:	08070d44 	.word	0x08070d44
 8006ffc:	2400001c 	.word	0x2400001c
 8007000:	24000020 	.word	0x24000020
 8007004:	017d7840 	.word	0x017d7840
 8007008:	003d0900 	.word	0x003d0900

0800700c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800700c:	4a1c      	ldr	r2, [pc, #112]	@ (8007080 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800700e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007010:	6913      	ldr	r3, [r2, #16]
 8007012:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007016:	2b10      	cmp	r3, #16
 8007018:	d02b      	beq.n	8007072 <HAL_RCC_GetPCLK1Freq+0x66>
 800701a:	2b18      	cmp	r3, #24
 800701c:	d009      	beq.n	8007032 <HAL_RCC_GetPCLK1Freq+0x26>
 800701e:	bb53      	cbnz	r3, 8007076 <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007020:	6813      	ldr	r3, [r2, #0]
 8007022:	069b      	lsls	r3, r3, #26
 8007024:	d529      	bpl.n	800707a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007026:	6812      	ldr	r2, [r2, #0]
 8007028:	4b16      	ldr	r3, [pc, #88]	@ (8007084 <HAL_RCC_GetPCLK1Freq+0x78>)
 800702a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800702e:	40d3      	lsrs	r3, r2
 8007030:	e002      	b.n	8007038 <HAL_RCC_GetPCLK1Freq+0x2c>
 8007032:	f7ff fa93 	bl	800655c <HAL_RCC_GetSysClockFreq.part.0>
 8007036:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007038:	4a11      	ldr	r2, [pc, #68]	@ (8007080 <HAL_RCC_GetPCLK1Freq+0x74>)
 800703a:	4913      	ldr	r1, [pc, #76]	@ (8007088 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800703c:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 800703e:	4d13      	ldr	r5, [pc, #76]	@ (800708c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007040:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007044:	4c12      	ldr	r4, [pc, #72]	@ (8007090 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007046:	5c08      	ldrb	r0, [r1, r0]
 8007048:	f000 001f 	and.w	r0, r0, #31
 800704c:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800704e:	6990      	ldr	r0, [r2, #24]
 8007050:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8007054:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007056:	5c08      	ldrb	r0, [r1, r0]
 8007058:	f000 001f 	and.w	r0, r0, #31
 800705c:	40c3      	lsrs	r3, r0
 800705e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007060:	69d2      	ldr	r2, [r2, #28]
 8007062:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007066:	5c88      	ldrb	r0, [r1, r2]
 8007068:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800706c:	fa23 f000 	lsr.w	r0, r3, r0
 8007070:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007072:	4b08      	ldr	r3, [pc, #32]	@ (8007094 <HAL_RCC_GetPCLK1Freq+0x88>)
 8007074:	e7e0      	b.n	8007038 <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 8007076:	4b08      	ldr	r3, [pc, #32]	@ (8007098 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8007078:	e7de      	b.n	8007038 <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800707a:	4b02      	ldr	r3, [pc, #8]	@ (8007084 <HAL_RCC_GetPCLK1Freq+0x78>)
 800707c:	e7dc      	b.n	8007038 <HAL_RCC_GetPCLK1Freq+0x2c>
 800707e:	bf00      	nop
 8007080:	58024400 	.word	0x58024400
 8007084:	03d09000 	.word	0x03d09000
 8007088:	08070d44 	.word	0x08070d44
 800708c:	24000020 	.word	0x24000020
 8007090:	2400001c 	.word	0x2400001c
 8007094:	017d7840 	.word	0x017d7840
 8007098:	003d0900 	.word	0x003d0900

0800709c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800709c:	4a1c      	ldr	r2, [pc, #112]	@ (8007110 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800709e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070a0:	6913      	ldr	r3, [r2, #16]
 80070a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070a6:	2b10      	cmp	r3, #16
 80070a8:	d02b      	beq.n	8007102 <HAL_RCC_GetPCLK2Freq+0x66>
 80070aa:	2b18      	cmp	r3, #24
 80070ac:	d009      	beq.n	80070c2 <HAL_RCC_GetPCLK2Freq+0x26>
 80070ae:	bb53      	cbnz	r3, 8007106 <HAL_RCC_GetPCLK2Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070b0:	6813      	ldr	r3, [r2, #0]
 80070b2:	069b      	lsls	r3, r3, #26
 80070b4:	d529      	bpl.n	800710a <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070b6:	6812      	ldr	r2, [r2, #0]
 80070b8:	4b16      	ldr	r3, [pc, #88]	@ (8007114 <HAL_RCC_GetPCLK2Freq+0x78>)
 80070ba:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80070be:	40d3      	lsrs	r3, r2
 80070c0:	e002      	b.n	80070c8 <HAL_RCC_GetPCLK2Freq+0x2c>
 80070c2:	f7ff fa4b 	bl	800655c <HAL_RCC_GetSysClockFreq.part.0>
 80070c6:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070c8:	4a11      	ldr	r2, [pc, #68]	@ (8007110 <HAL_RCC_GetPCLK2Freq+0x74>)
 80070ca:	4913      	ldr	r1, [pc, #76]	@ (8007118 <HAL_RCC_GetPCLK2Freq+0x7c>)
 80070cc:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 80070ce:	4d13      	ldr	r5, [pc, #76]	@ (800711c <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070d0:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070d4:	4c12      	ldr	r4, [pc, #72]	@ (8007120 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070d6:	5c08      	ldrb	r0, [r1, r0]
 80070d8:	f000 001f 	and.w	r0, r0, #31
 80070dc:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070de:	6990      	ldr	r0, [r2, #24]
 80070e0:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80070e4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070e6:	5c08      	ldrb	r0, [r1, r0]
 80070e8:	f000 001f 	and.w	r0, r0, #31
 80070ec:	40c3      	lsrs	r3, r0
 80070ee:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80070f0:	69d2      	ldr	r2, [r2, #28]
 80070f2:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80070f6:	5c88      	ldrb	r0, [r1, r2]
 80070f8:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80070fc:	fa23 f000 	lsr.w	r0, r3, r0
 8007100:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007102:	4b08      	ldr	r3, [pc, #32]	@ (8007124 <HAL_RCC_GetPCLK2Freq+0x88>)
 8007104:	e7e0      	b.n	80070c8 <HAL_RCC_GetPCLK2Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 8007106:	4b08      	ldr	r3, [pc, #32]	@ (8007128 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8007108:	e7de      	b.n	80070c8 <HAL_RCC_GetPCLK2Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800710a:	4b02      	ldr	r3, [pc, #8]	@ (8007114 <HAL_RCC_GetPCLK2Freq+0x78>)
 800710c:	e7dc      	b.n	80070c8 <HAL_RCC_GetPCLK2Freq+0x2c>
 800710e:	bf00      	nop
 8007110:	58024400 	.word	0x58024400
 8007114:	03d09000 	.word	0x03d09000
 8007118:	08070d44 	.word	0x08070d44
 800711c:	24000020 	.word	0x24000020
 8007120:	2400001c 	.word	0x2400001c
 8007124:	017d7840 	.word	0x017d7840
 8007128:	003d0900 	.word	0x003d0900

0800712c <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800712e:	4c36      	ldr	r4, [pc, #216]	@ (8007208 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8007130:	4606      	mov	r6, r0
 8007132:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800713a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800713c:	f7fc faf4 	bl	8003728 <HAL_GetTick>
 8007140:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007142:	e004      	b.n	800714e <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007144:	f7fc faf0 	bl	8003728 <HAL_GetTick>
 8007148:	1b40      	subs	r0, r0, r5
 800714a:	2802      	cmp	r0, #2
 800714c:	d856      	bhi.n	80071fc <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	011a      	lsls	r2, r3, #4
 8007152:	d4f7      	bmi.n	8007144 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007154:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007156:	6832      	ldr	r2, [r6, #0]
 8007158:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800715c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007162:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007166:	3b01      	subs	r3, #1
 8007168:	3a01      	subs	r2, #1
 800716a:	025b      	lsls	r3, r3, #9
 800716c:	0412      	lsls	r2, r2, #16
 800716e:	b29b      	uxth	r3, r3
 8007170:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007174:	4313      	orrs	r3, r2
 8007176:	6872      	ldr	r2, [r6, #4]
 8007178:	3a01      	subs	r2, #1
 800717a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800717e:	4313      	orrs	r3, r2
 8007180:	6932      	ldr	r2, [r6, #16]
 8007182:	3a01      	subs	r2, #1
 8007184:	0612      	lsls	r2, r2, #24
 8007186:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800718a:	4313      	orrs	r3, r2
 800718c:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800718e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007190:	6972      	ldr	r2, [r6, #20]
 8007192:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007196:	4313      	orrs	r3, r2
 8007198:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800719a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800719c:	69b2      	ldr	r2, [r6, #24]
 800719e:	f023 0320 	bic.w	r3, r3, #32
 80071a2:	4313      	orrs	r3, r2
 80071a4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80071a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80071a8:	f023 0310 	bic.w	r3, r3, #16
 80071ac:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071ae:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80071b0:	69f2      	ldr	r2, [r6, #28]
 80071b2:	f36f 03cf 	bfc	r3, #3, #13
 80071b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80071ba:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80071bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80071be:	f043 0310 	orr.w	r3, r3, #16
 80071c2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80071c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80071c6:	b1df      	cbz	r7, 8007200 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071c8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80071ca:	bf0c      	ite	eq
 80071cc:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80071d0:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 80071d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80071d6:	4c0c      	ldr	r4, [pc, #48]	@ (8007208 <RCCEx_PLL2_Config.part.0+0xdc>)
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071de:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071e0:	f7fc faa2 	bl	8003728 <HAL_GetTick>
 80071e4:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071e6:	e004      	b.n	80071f2 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071e8:	f7fc fa9e 	bl	8003728 <HAL_GetTick>
 80071ec:	1b40      	subs	r0, r0, r5
 80071ee:	2802      	cmp	r0, #2
 80071f0:	d804      	bhi.n	80071fc <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	d5f7      	bpl.n	80071e8 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 80071f8:	2000      	movs	r0, #0
}
 80071fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80071fc:	2003      	movs	r0, #3
}
 80071fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007200:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007204:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007206:	e7e6      	b.n	80071d6 <RCCEx_PLL2_Config.part.0+0xaa>
 8007208:	58024400 	.word	0x58024400

0800720c <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800720e:	4c36      	ldr	r4, [pc, #216]	@ (80072e8 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8007210:	4606      	mov	r6, r0
 8007212:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800721a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800721c:	f7fc fa84 	bl	8003728 <HAL_GetTick>
 8007220:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007222:	e004      	b.n	800722e <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007224:	f7fc fa80 	bl	8003728 <HAL_GetTick>
 8007228:	1b40      	subs	r0, r0, r5
 800722a:	2802      	cmp	r0, #2
 800722c:	d856      	bhi.n	80072dc <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	009a      	lsls	r2, r3, #2
 8007232:	d4f7      	bmi.n	8007224 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007234:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007236:	6832      	ldr	r2, [r6, #0]
 8007238:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800723c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8007240:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007242:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007246:	3b01      	subs	r3, #1
 8007248:	3a01      	subs	r2, #1
 800724a:	025b      	lsls	r3, r3, #9
 800724c:	0412      	lsls	r2, r2, #16
 800724e:	b29b      	uxth	r3, r3
 8007250:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007254:	4313      	orrs	r3, r2
 8007256:	6872      	ldr	r2, [r6, #4]
 8007258:	3a01      	subs	r2, #1
 800725a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800725e:	4313      	orrs	r3, r2
 8007260:	6932      	ldr	r2, [r6, #16]
 8007262:	3a01      	subs	r2, #1
 8007264:	0612      	lsls	r2, r2, #24
 8007266:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800726a:	4313      	orrs	r3, r2
 800726c:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800726e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007270:	6972      	ldr	r2, [r6, #20]
 8007272:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007276:	4313      	orrs	r3, r2
 8007278:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800727a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800727c:	69b2      	ldr	r2, [r6, #24]
 800727e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007282:	4313      	orrs	r3, r2
 8007284:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007286:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800728c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800728e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007290:	69f2      	ldr	r2, [r6, #28]
 8007292:	f36f 03cf 	bfc	r3, #3, #13
 8007296:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800729a:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800729c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800729e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072a2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072a4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80072a6:	b1df      	cbz	r7, 80072e0 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072a8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072aa:	bf0c      	ite	eq
 80072ac:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80072b0:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 80072b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80072b6:	4c0c      	ldr	r4, [pc, #48]	@ (80072e8 <RCCEx_PLL3_Config.part.0+0xdc>)
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072be:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c0:	f7fc fa32 	bl	8003728 <HAL_GetTick>
 80072c4:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072c6:	e004      	b.n	80072d2 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072c8:	f7fc fa2e 	bl	8003728 <HAL_GetTick>
 80072cc:	1b40      	subs	r0, r0, r5
 80072ce:	2802      	cmp	r0, #2
 80072d0:	d804      	bhi.n	80072dc <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	d5f7      	bpl.n	80072c8 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 80072d8:	2000      	movs	r0, #0
}
 80072da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80072dc:	2003      	movs	r0, #3
}
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80072e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072e6:	e7e6      	b.n	80072b6 <RCCEx_PLL3_Config.part.0+0xaa>
 80072e8:	58024400 	.word	0x58024400

080072ec <HAL_RCCEx_PeriphCLKConfig>:
{
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072f0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 80072f4:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072f6:	011d      	lsls	r5, r3, #4
 80072f8:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 80072fc:	d524      	bpl.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80072fe:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8007300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8007304:	f000 85df 	beq.w	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8007308:	f200 86a8 	bhi.w	800805c <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800730c:	2900      	cmp	r1, #0
 800730e:	f000 85f6 	beq.w	8007efe <HAL_RCCEx_PeriphCLKConfig+0xc12>
 8007312:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007316:	f040 86a5 	bne.w	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800731a:	49a9      	ldr	r1, [pc, #676]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800731c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800731e:	f001 0103 	and.w	r1, r1, #3
 8007322:	2903      	cmp	r1, #3
 8007324:	f000 869e 	beq.w	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8007328:	2102      	movs	r1, #2
 800732a:	3008      	adds	r0, #8
 800732c:	f7ff fefe 	bl	800712c <RCCEx_PLL2_Config.part.0>
 8007330:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007332:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007336:	b93e      	cbnz	r6, 8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007338:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800733a:	4da1      	ldr	r5, [pc, #644]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800733c:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800733e:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8007340:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8007344:	4301      	orrs	r1, r0
 8007346:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007348:	05d8      	lsls	r0, r3, #23
 800734a:	d50a      	bpl.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 800734c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800734e:	2904      	cmp	r1, #4
 8007350:	d806      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007352:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007356:	03ff      	.short	0x03ff
 8007358:	0582056d 	.word	0x0582056d
 800735c:	04040404 	.word	0x04040404
      status = ret;
 8007360:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007362:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007364:	0599      	lsls	r1, r3, #22
 8007366:	d524      	bpl.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8007368:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800736a:	2980      	cmp	r1, #128	@ 0x80
 800736c:	f000 854b 	beq.w	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007370:	f200 8687 	bhi.w	8008082 <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8007374:	2900      	cmp	r1, #0
 8007376:	f000 85bb 	beq.w	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 800737a:	2940      	cmp	r1, #64	@ 0x40
 800737c:	f040 8688 	bne.w	8008090 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007380:	498f      	ldr	r1, [pc, #572]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007382:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007384:	f001 0103 	and.w	r1, r1, #3
 8007388:	2903      	cmp	r1, #3
 800738a:	f000 8681 	beq.w	8008090 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 800738e:	2100      	movs	r1, #0
 8007390:	f104 0008 	add.w	r0, r4, #8
 8007394:	f7ff feca 	bl	800712c <RCCEx_PLL2_Config.part.0>
 8007398:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800739a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800739e:	2d00      	cmp	r5, #0
 80073a0:	f040 8543 	bne.w	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80073a4:	4f86      	ldr	r7, [pc, #536]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073a6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80073a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073aa:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 80073ae:	4301      	orrs	r1, r0
 80073b0:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80073b2:	055f      	lsls	r7, r3, #21
 80073b4:	d528      	bpl.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 80073b6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 80073ba:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80073be:	f000 855c 	beq.w	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80073c2:	f200 8652 	bhi.w	800806a <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 80073c6:	2900      	cmp	r1, #0
 80073c8:	f000 858b 	beq.w	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80073cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80073d0:	f040 8653 	bne.w	800807a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073d4:	497a      	ldr	r1, [pc, #488]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073d6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80073d8:	f001 0103 	and.w	r1, r1, #3
 80073dc:	2903      	cmp	r1, #3
 80073de:	f000 864c 	beq.w	800807a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80073e2:	2100      	movs	r1, #0
 80073e4:	f104 0008 	add.w	r0, r4, #8
 80073e8:	f7ff fea0 	bl	800712c <RCCEx_PLL2_Config.part.0>
 80073ec:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80073ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	f040 8553 	bne.w	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80073f8:	4f71      	ldr	r7, [pc, #452]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073fa:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 80073fe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007400:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8007404:	4301      	orrs	r1, r0
 8007406:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007408:	0518      	lsls	r0, r3, #20
 800740a:	d528      	bpl.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 800740c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8007410:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8007414:	f000 8546 	beq.w	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 8007418:	f200 8614 	bhi.w	8008044 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 800741c:	2900      	cmp	r1, #0
 800741e:	f000 84d6 	beq.w	8007dce <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8007422:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8007426:	f040 8615 	bne.w	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800742a:	4965      	ldr	r1, [pc, #404]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800742c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800742e:	f001 0103 	and.w	r1, r1, #3
 8007432:	2903      	cmp	r1, #3
 8007434:	f000 860e 	beq.w	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8007438:	2100      	movs	r1, #0
 800743a:	f104 0008 	add.w	r0, r4, #8
 800743e:	f7ff fe75 	bl	800712c <RCCEx_PLL2_Config.part.0>
 8007442:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007444:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007448:	2d00      	cmp	r5, #0
 800744a:	f040 84c8 	bne.w	8007dde <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800744e:	4f5c      	ldr	r7, [pc, #368]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007450:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8007454:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007456:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800745a:	4301      	orrs	r1, r0
 800745c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800745e:	0199      	lsls	r1, r3, #6
 8007460:	d518      	bpl.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 8007462:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8007464:	2920      	cmp	r1, #32
 8007466:	f000 8434 	beq.w	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 800746a:	f200 8615 	bhi.w	8008098 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 800746e:	b139      	cbz	r1, 8007480 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8007470:	2910      	cmp	r1, #16
 8007472:	f040 8614 	bne.w	800809e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007476:	4852      	ldr	r0, [pc, #328]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007478:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800747a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800747e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007480:	2d00      	cmp	r5, #0
 8007482:	f040 83bf 	bne.w	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007486:	4f4e      	ldr	r7, [pc, #312]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007488:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800748a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800748c:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8007490:	4301      	orrs	r1, r0
 8007492:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007494:	04df      	lsls	r7, r3, #19
 8007496:	d526      	bpl.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007498:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800749a:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800749e:	f000 84a1 	beq.w	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 80074a2:	f200 85c3 	bhi.w	800802c <HAL_RCCEx_PeriphCLKConfig+0xd40>
 80074a6:	2900      	cmp	r1, #0
 80074a8:	f000 8486 	beq.w	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80074ac:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80074b0:	f040 85c4 	bne.w	800803c <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074b4:	4942      	ldr	r1, [pc, #264]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074b6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80074b8:	f001 0103 	and.w	r1, r1, #3
 80074bc:	2903      	cmp	r1, #3
 80074be:	f000 85bd 	beq.w	800803c <HAL_RCCEx_PeriphCLKConfig+0xd50>
 80074c2:	2100      	movs	r1, #0
 80074c4:	f104 0008 	add.w	r0, r4, #8
 80074c8:	f7ff fe30 	bl	800712c <RCCEx_PLL2_Config.part.0>
 80074cc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80074ce:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80074d2:	2d00      	cmp	r5, #0
 80074d4:	f040 8478 	bne.w	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80074d8:	4f39      	ldr	r7, [pc, #228]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074da:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80074dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80074de:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80074e2:	4301      	orrs	r1, r0
 80074e4:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80074e6:	0498      	lsls	r0, r3, #18
 80074e8:	d524      	bpl.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 80074ea:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80074ec:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80074f0:	f000 8415 	beq.w	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80074f4:	f200 8556 	bhi.w	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 80074f8:	b191      	cbz	r1, 8007520 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80074fa:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80074fe:	f040 855b 	bne.w	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007502:	492f      	ldr	r1, [pc, #188]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007504:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007506:	f001 0103 	and.w	r1, r1, #3
 800750a:	2903      	cmp	r1, #3
 800750c:	f000 8554 	beq.w	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8007510:	2101      	movs	r1, #1
 8007512:	f104 0008 	add.w	r0, r4, #8
 8007516:	f7ff fe09 	bl	800712c <RCCEx_PLL2_Config.part.0>
 800751a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800751c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007520:	2d00      	cmp	r5, #0
 8007522:	f040 838f 	bne.w	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007526:	4f26      	ldr	r7, [pc, #152]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007528:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800752a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800752c:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8007530:	4301      	orrs	r1, r0
 8007532:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007534:	0459      	lsls	r1, r3, #17
 8007536:	d526      	bpl.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007538:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 800753c:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8007540:	f000 8426 	beq.w	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007544:	f200 854a 	bhi.w	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 8007548:	b191      	cbz	r1, 8007570 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800754a:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800754e:	f040 854f 	bne.w	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007552:	491b      	ldr	r1, [pc, #108]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007554:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007556:	f001 0103 	and.w	r1, r1, #3
 800755a:	2903      	cmp	r1, #3
 800755c:	f000 8548 	beq.w	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8007560:	2101      	movs	r1, #1
 8007562:	f104 0008 	add.w	r0, r4, #8
 8007566:	f7ff fde1 	bl	800712c <RCCEx_PLL2_Config.part.0>
 800756a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800756c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007570:	2d00      	cmp	r5, #0
 8007572:	f040 835b 	bne.w	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007576:	4f12      	ldr	r7, [pc, #72]	@ (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007578:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800757c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800757e:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8007582:	4301      	orrs	r1, r0
 8007584:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007586:	041f      	lsls	r7, r3, #16
 8007588:	d50d      	bpl.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 800758a:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800758c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8007590:	f000 8260 	beq.w	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8007594:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8007598:	f000 8591 	beq.w	80080be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800759c:	2900      	cmp	r1, #0
 800759e:	f000 825e 	beq.w	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 80075a2:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80075a4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80075a6:	01d8      	lsls	r0, r3, #7
 80075a8:	d515      	bpl.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 80075aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80075ac:	2903      	cmp	r1, #3
 80075ae:	f200 85b4 	bhi.w	800811a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80075b2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80075b6:	000c      	.short	0x000c
 80075b8:	03a10007 	.word	0x03a10007
 80075bc:	000c      	.short	0x000c
 80075be:	bf00      	nop
 80075c0:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c4:	4836      	ldr	r0, [pc, #216]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80075c6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80075c8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80075cc:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	f000 831a 	beq.w	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 80075d4:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075d6:	0259      	lsls	r1, r3, #9
 80075d8:	f100 827a 	bmi.w	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075dc:	07df      	lsls	r7, r3, #31
 80075de:	d52f      	bpl.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 80075e0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80075e2:	2928      	cmp	r1, #40	@ 0x28
 80075e4:	d82a      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x350>
 80075e6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80075ea:	0257      	.short	0x0257
 80075ec:	00290029 	.word	0x00290029
 80075f0:	00290029 	.word	0x00290029
 80075f4:	00290029 	.word	0x00290029
 80075f8:	02480029 	.word	0x02480029
 80075fc:	00290029 	.word	0x00290029
 8007600:	00290029 	.word	0x00290029
 8007604:	00290029 	.word	0x00290029
 8007608:	04b90029 	.word	0x04b90029
 800760c:	00290029 	.word	0x00290029
 8007610:	00290029 	.word	0x00290029
 8007614:	00290029 	.word	0x00290029
 8007618:	02570029 	.word	0x02570029
 800761c:	00290029 	.word	0x00290029
 8007620:	00290029 	.word	0x00290029
 8007624:	00290029 	.word	0x00290029
 8007628:	02570029 	.word	0x02570029
 800762c:	00290029 	.word	0x00290029
 8007630:	00290029 	.word	0x00290029
 8007634:	00290029 	.word	0x00290029
 8007638:	02570029 	.word	0x02570029
      status = ret;
 800763c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800763e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007640:	0798      	lsls	r0, r3, #30
 8007642:	d51e      	bpl.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007644:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8007646:	2905      	cmp	r1, #5
 8007648:	f200 8550 	bhi.w	80080ec <HAL_RCCEx_PeriphCLKConfig+0xe00>
 800764c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007650:	00060015 	.word	0x00060015
 8007654:	00150471 	.word	0x00150471
 8007658:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800765c:	4910      	ldr	r1, [pc, #64]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 800765e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007660:	f001 0103 	and.w	r1, r1, #3
 8007664:	2903      	cmp	r1, #3
 8007666:	f000 8541 	beq.w	80080ec <HAL_RCCEx_PeriphCLKConfig+0xe00>
 800766a:	2101      	movs	r1, #1
 800766c:	f104 0008 	add.w	r0, r4, #8
 8007670:	f7ff fd5c 	bl	800712c <RCCEx_PLL2_Config.part.0>
 8007674:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007676:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800767a:	2d00      	cmp	r5, #0
 800767c:	f000 82cc 	beq.w	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 8007680:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007682:	0759      	lsls	r1, r3, #29
 8007684:	d521      	bpl.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007686:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800768a:	2905      	cmp	r1, #5
 800768c:	f200 852a 	bhi.w	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8007690:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007694:	00080017 	.word	0x00080017
 8007698:	0017043c 	.word	0x0017043c
 800769c:	00170017 	.word	0x00170017
 80076a0:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076a4:	49ae      	ldr	r1, [pc, #696]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80076a6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80076a8:	f001 0103 	and.w	r1, r1, #3
 80076ac:	2903      	cmp	r1, #3
 80076ae:	f000 8519 	beq.w	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80076b2:	2101      	movs	r1, #1
 80076b4:	f104 0008 	add.w	r0, r4, #8
 80076b8:	f7ff fd38 	bl	800712c <RCCEx_PLL2_Config.part.0>
 80076bc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076be:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80076c2:	2d00      	cmp	r5, #0
 80076c4:	f000 82c2 	beq.w	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 80076c8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076ca:	069f      	lsls	r7, r3, #26
 80076cc:	d526      	bpl.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80076ce:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80076d2:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80076d6:	f000 82c6 	beq.w	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80076da:	f200 8455 	bhi.w	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80076de:	b191      	cbz	r1, 8007706 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80076e0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 80076e4:	f040 845a 	bne.w	8007f9c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076e8:	499d      	ldr	r1, [pc, #628]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80076ea:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80076ec:	f001 0103 	and.w	r1, r1, #3
 80076f0:	2903      	cmp	r1, #3
 80076f2:	f000 8453 	beq.w	8007f9c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 80076f6:	2100      	movs	r1, #0
 80076f8:	f104 0008 	add.w	r0, r4, #8
 80076fc:	f7ff fd16 	bl	800712c <RCCEx_PLL2_Config.part.0>
 8007700:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007702:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007706:	2d00      	cmp	r5, #0
 8007708:	f040 828e 	bne.w	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800770c:	4f94      	ldr	r7, [pc, #592]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800770e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007712:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007714:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8007718:	4301      	orrs	r1, r0
 800771a:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800771c:	0658      	lsls	r0, r3, #25
 800771e:	d526      	bpl.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007720:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8007724:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007728:	f000 82af 	beq.w	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800772c:	f200 8464 	bhi.w	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007730:	b191      	cbz	r1, 8007758 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8007732:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007736:	f040 8469 	bne.w	800800c <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800773a:	4989      	ldr	r1, [pc, #548]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800773c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800773e:	f001 0103 	and.w	r1, r1, #3
 8007742:	2903      	cmp	r1, #3
 8007744:	f000 8462 	beq.w	800800c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007748:	2100      	movs	r1, #0
 800774a:	f104 0008 	add.w	r0, r4, #8
 800774e:	f7ff fced 	bl	800712c <RCCEx_PLL2_Config.part.0>
 8007752:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007754:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007758:	2d00      	cmp	r5, #0
 800775a:	f040 8269 	bne.w	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800775e:	4f80      	ldr	r7, [pc, #512]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007760:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8007764:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007766:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 800776a:	4301      	orrs	r1, r0
 800776c:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800776e:	0619      	lsls	r1, r3, #24
 8007770:	d526      	bpl.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007772:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 8007776:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800777a:	f000 8298 	beq.w	8007cae <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800777e:	f200 841f 	bhi.w	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8007782:	b191      	cbz	r1, 80077aa <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8007784:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8007788:	f040 8424 	bne.w	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800778c:	4974      	ldr	r1, [pc, #464]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800778e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007790:	f001 0103 	and.w	r1, r1, #3
 8007794:	2903      	cmp	r1, #3
 8007796:	f000 841d 	beq.w	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800779a:	2100      	movs	r1, #0
 800779c:	f104 0008 	add.w	r0, r4, #8
 80077a0:	f7ff fcc4 	bl	800712c <RCCEx_PLL2_Config.part.0>
 80077a4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077a6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80077aa:	2d00      	cmp	r5, #0
 80077ac:	f040 8244 	bne.w	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80077b0:	4f6b      	ldr	r7, [pc, #428]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80077b2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 80077b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077b8:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80077bc:	4301      	orrs	r1, r0
 80077be:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077c0:	071f      	lsls	r7, r3, #28
 80077c2:	d50b      	bpl.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80077c4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80077c8:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80077cc:	f000 81d4 	beq.w	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077d0:	4f63      	ldr	r7, [pc, #396]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80077d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077d4:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80077d8:	4301      	orrs	r1, r0
 80077da:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077dc:	06d8      	lsls	r0, r3, #27
 80077de:	d50b      	bpl.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80077e0:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80077e4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80077e8:	f000 81db 	beq.w	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077ec:	4f5c      	ldr	r7, [pc, #368]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80077ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077f0:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 80077f4:	4301      	orrs	r1, r0
 80077f6:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077f8:	0319      	lsls	r1, r3, #12
 80077fa:	d524      	bpl.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 80077fc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8007800:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8007804:	f000 82b1 	beq.w	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007808:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800780c:	d010      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x544>
 800780e:	2900      	cmp	r1, #0
 8007810:	f040 8130 	bne.w	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007814:	4852      	ldr	r0, [pc, #328]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007816:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8007818:	f000 0003 	and.w	r0, r0, #3
 800781c:	2803      	cmp	r0, #3
 800781e:	f000 8129 	beq.w	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8007822:	f104 0008 	add.w	r0, r4, #8
 8007826:	f7ff fc81 	bl	800712c <RCCEx_PLL2_Config.part.0>
 800782a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800782c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007830:	2d00      	cmp	r5, #0
 8007832:	f040 81ff 	bne.w	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007836:	4f4a      	ldr	r7, [pc, #296]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007838:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 800783c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800783e:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8007842:	4301      	orrs	r1, r0
 8007844:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007846:	035f      	lsls	r7, r3, #13
 8007848:	d50f      	bpl.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 800784a:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800784e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8007852:	f000 8277 	beq.w	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8007856:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800785a:	f000 812d 	beq.w	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 800785e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8007862:	f000 8124 	beq.w	8007aae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 8007866:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007868:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800786a:	03d8      	lsls	r0, r3, #15
 800786c:	d520      	bpl.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 800786e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007870:	2900      	cmp	r1, #0
 8007872:	f000 81aa 	beq.w	8007bca <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8007876:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800787a:	f040 80e8 	bne.w	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800787e:	4938      	ldr	r1, [pc, #224]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007880:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007882:	f001 0103 	and.w	r1, r1, #3
 8007886:	2903      	cmp	r1, #3
 8007888:	f000 80e1 	beq.w	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x762>
 800788c:	2102      	movs	r1, #2
 800788e:	f104 0008 	add.w	r0, r4, #8
 8007892:	f7ff fc4b 	bl	800712c <RCCEx_PLL2_Config.part.0>
 8007896:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007898:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800789c:	2d00      	cmp	r5, #0
 800789e:	f040 819c 	bne.w	8007bda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078a2:	4f2f      	ldr	r7, [pc, #188]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80078a4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80078a6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80078a8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80078ac:	4301      	orrs	r1, r0
 80078ae:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078b0:	0099      	lsls	r1, r3, #2
 80078b2:	d50e      	bpl.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078b4:	492a      	ldr	r1, [pc, #168]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80078b6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80078b8:	f001 0103 	and.w	r1, r1, #3
 80078bc:	2903      	cmp	r1, #3
 80078be:	d007      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 80078c0:	2102      	movs	r1, #2
 80078c2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80078c6:	f7ff fca1 	bl	800720c <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078ca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078ce:	b100      	cbz	r0, 80078d2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 80078d0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078d2:	039f      	lsls	r7, r3, #14
 80078d4:	f100 80ab 	bmi.w	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 80078d8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078da:	02d8      	lsls	r0, r3, #11
 80078dc:	d506      	bpl.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078de:	4820      	ldr	r0, [pc, #128]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80078e0:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 80078e2:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80078e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80078e8:	4331      	orrs	r1, r6
 80078ea:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078ec:	00d9      	lsls	r1, r3, #3
 80078ee:	d507      	bpl.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80078f0:	481b      	ldr	r0, [pc, #108]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80078f2:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 80078f6:	6901      	ldr	r1, [r0, #16]
 80078f8:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80078fc:	4331      	orrs	r1, r6
 80078fe:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007900:	029f      	lsls	r7, r3, #10
 8007902:	d506      	bpl.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007904:	4816      	ldr	r0, [pc, #88]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007906:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8007908:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800790a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800790e:	4331      	orrs	r1, r6
 8007910:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007912:	005e      	lsls	r6, r3, #1
 8007914:	d509      	bpl.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007916:	4912      	ldr	r1, [pc, #72]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007918:	6908      	ldr	r0, [r1, #16]
 800791a:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800791e:	6108      	str	r0, [r1, #16]
 8007920:	6908      	ldr	r0, [r1, #16]
 8007922:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 8007926:	4330      	orrs	r0, r6
 8007928:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800792a:	2b00      	cmp	r3, #0
 800792c:	da06      	bge.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800792e:	480c      	ldr	r0, [pc, #48]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007930:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8007932:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007934:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8007938:	4331      	orrs	r1, r6
 800793a:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800793c:	0218      	lsls	r0, r3, #8
 800793e:	d507      	bpl.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007940:	4907      	ldr	r1, [pc, #28]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007942:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8007946:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8007948:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800794c:	4303      	orrs	r3, r0
 800794e:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007950:	07d1      	lsls	r1, r2, #31
 8007952:	d511      	bpl.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007954:	4b02      	ldr	r3, [pc, #8]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8007956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	2b03      	cmp	r3, #3
 800795e:	e001      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007960:	58024400 	.word	0x58024400
 8007964:	f000 835c 	beq.w	8008020 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8007968:	2100      	movs	r1, #0
 800796a:	f104 0008 	add.w	r0, r4, #8
 800796e:	f7ff fbdd 	bl	800712c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007972:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007974:	b100      	cbz	r0, 8007978 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007976:	4605      	mov	r5, r0
 8007978:	0793      	lsls	r3, r2, #30
 800797a:	d50e      	bpl.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800797c:	4baf      	ldr	r3, [pc, #700]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800797e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007980:	f003 0303 	and.w	r3, r3, #3
 8007984:	2b03      	cmp	r3, #3
 8007986:	f000 834d 	beq.w	8008024 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 800798a:	2101      	movs	r1, #1
 800798c:	f104 0008 	add.w	r0, r4, #8
 8007990:	f7ff fbcc 	bl	800712c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007994:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007996:	b100      	cbz	r0, 800799a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007998:	4605      	mov	r5, r0
 800799a:	0757      	lsls	r7, r2, #29
 800799c:	d50e      	bpl.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800799e:	4ba7      	ldr	r3, [pc, #668]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80079a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a2:	f003 0303 	and.w	r3, r3, #3
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	f000 833e 	beq.w	8008028 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80079ac:	2102      	movs	r1, #2
 80079ae:	f104 0008 	add.w	r0, r4, #8
 80079b2:	f7ff fbbb 	bl	800712c <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80079b6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80079b8:	b100      	cbz	r0, 80079bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80079ba:	4605      	mov	r5, r0
 80079bc:	0716      	lsls	r6, r2, #28
 80079be:	d50e      	bpl.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079c0:	4b9e      	ldr	r3, [pc, #632]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80079c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c4:	f003 0303 	and.w	r3, r3, #3
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	f000 8323 	beq.w	8008014 <HAL_RCCEx_PeriphCLKConfig+0xd28>
 80079ce:	2100      	movs	r1, #0
 80079d0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80079d4:	f7ff fc1a 	bl	800720c <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80079d8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80079da:	b100      	cbz	r0, 80079de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80079dc:	4605      	mov	r5, r0
 80079de:	06d0      	lsls	r0, r2, #27
 80079e0:	d50f      	bpl.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079e2:	4b96      	ldr	r3, [pc, #600]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	f000 8314 	beq.w	8008018 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 80079f0:	2101      	movs	r1, #1
 80079f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80079f6:	f7ff fc09 	bl	800720c <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f040 8359 	bne.w	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007a00:	6862      	ldr	r2, [r4, #4]
 8007a02:	0693      	lsls	r3, r2, #26
 8007a04:	d50e      	bpl.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a06:	4b8d      	ldr	r3, [pc, #564]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	f000 82b7 	beq.w	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007a14:	2102      	movs	r1, #2
 8007a16:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007a1a:	f7ff fbf7 	bl	800720c <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f040 82af 	bne.w	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 8007a24:	1e28      	subs	r0, r5, #0
 8007a26:	bf18      	it	ne
 8007a28:	2001      	movne	r0, #1
}
 8007a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 8007a2e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8007a32:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007a36:	f000 80d2 	beq.w	8007bde <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8007a3a:	f240 8110 	bls.w	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007a3e:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8007a42:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8007a46:	f000 80cf 	beq.w	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8007a4a:	2501      	movs	r5, #1
 8007a4c:	e745      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 8007a4e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007a50:	4635      	mov	r5, r6
 8007a52:	e72d      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a54:	4879      	ldr	r0, [pc, #484]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007a56:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007a58:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007a5c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007a5e:	2d00      	cmp	r5, #0
 8007a60:	f040 80ce 	bne.w	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a64:	4f75      	ldr	r7, [pc, #468]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007a66:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8007a68:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a6a:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8007a6e:	4301      	orrs	r1, r0
 8007a70:	6539      	str	r1, [r7, #80]	@ 0x50
 8007a72:	e598      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8007a74:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007a76:	4635      	mov	r5, r6
 8007a78:	e6e5      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a7a:	4970      	ldr	r1, [pc, #448]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007a7c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007a7e:	f001 0103 	and.w	r1, r1, #3
 8007a82:	2903      	cmp	r1, #3
 8007a84:	f43f adda 	beq.w	800763c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007a88:	2101      	movs	r1, #1
 8007a8a:	f104 0008 	add.w	r0, r4, #8
 8007a8e:	f7ff fb4d 	bl	800712c <RCCEx_PLL2_Config.part.0>
 8007a92:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a94:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007a98:	2d00      	cmp	r5, #0
 8007a9a:	f040 80d5 	bne.w	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a9e:	4f67      	ldr	r7, [pc, #412]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007aa0:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8007aa2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007aa4:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8007aa8:	4301      	orrs	r1, r0
 8007aaa:	6579      	str	r1, [r7, #84]	@ 0x54
 8007aac:	e5c8      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aae:	4863      	ldr	r0, [pc, #396]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007ab0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007ab2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007ab6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007ab8:	2d00      	cmp	r5, #0
 8007aba:	f040 809f 	bne.w	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007abe:	4f5f      	ldr	r7, [pc, #380]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007ac0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8007ac4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ac6:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8007aca:	4301      	orrs	r1, r0
 8007acc:	6579      	str	r1, [r7, #84]	@ 0x54
 8007ace:	e6cc      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ad0:	4f5b      	ldr	r7, [pc, #364]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ad8:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8007ada:	f7fb fe25 	bl	8003728 <HAL_GetTick>
 8007ade:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ae0:	e006      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ae2:	f7fb fe21 	bl	8003728 <HAL_GetTick>
 8007ae6:	eba0 0008 	sub.w	r0, r0, r8
 8007aea:	2864      	cmp	r0, #100	@ 0x64
 8007aec:	f200 82db 	bhi.w	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	05da      	lsls	r2, r3, #23
 8007af4:	d5f5      	bpl.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 8007af6:	2d00      	cmp	r5, #0
 8007af8:	f040 82d6 	bne.w	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007afc:	4a4f      	ldr	r2, [pc, #316]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007afe:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8007b02:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8007b04:	4059      	eors	r1, r3
 8007b06:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8007b0a:	d00b      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b0c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b0e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b10:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b14:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8007b18:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b1a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8007b1c:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8007b20:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8007b22:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b28:	f000 82fb 	beq.w	8008122 <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b2c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007b30:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8007b34:	f000 8309 	beq.w	800814a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 8007b38:	4940      	ldr	r1, [pc, #256]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007b3a:	690a      	ldr	r2, [r1, #16]
 8007b3c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8007b40:	610a      	str	r2, [r1, #16]
 8007b42:	483e      	ldr	r0, [pc, #248]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007b44:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8007b48:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8007b4a:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b4c:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b50:	6701      	str	r1, [r0, #112]	@ 0x70
 8007b52:	e543      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b54:	4839      	ldr	r0, [pc, #228]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007b56:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007b58:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007b5c:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007b5e:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8007b60:	2d00      	cmp	r5, #0
 8007b62:	f040 8177 	bne.w	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b66:	4f35      	ldr	r7, [pc, #212]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b6c:	f021 0107 	bic.w	r1, r1, #7
 8007b70:	4301      	orrs	r1, r0
 8007b72:	6539      	str	r1, [r7, #80]	@ 0x50
 8007b74:	f7ff bbf6 	b.w	8007364 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b78:	4930      	ldr	r1, [pc, #192]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007b7a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007b7c:	f001 0103 	and.w	r1, r1, #3
 8007b80:	2903      	cmp	r1, #3
 8007b82:	f000 82ba 	beq.w	80080fa <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 8007b86:	2102      	movs	r1, #2
 8007b88:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007b8c:	f7ff fb3e 	bl	800720c <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b90:	2800      	cmp	r0, #0
 8007b92:	f000 82b5 	beq.w	8008100 <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b96:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 8007b9a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b9c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ba0:	e616      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ba2:	4926      	ldr	r1, [pc, #152]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007ba4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007ba6:	f001 0103 	and.w	r1, r1, #3
 8007baa:	2903      	cmp	r1, #3
 8007bac:	f000 82a2 	beq.w	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8007bb0:	2102      	movs	r1, #2
 8007bb2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007bb6:	f7ff fb29 	bl	800720c <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	f040 82a6 	bne.w	800810c <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bc0:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bc4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007bc8:	e610      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bca:	481c      	ldr	r0, [pc, #112]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007bcc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007bce:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007bd2:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007bd4:	2d00      	cmp	r5, #0
 8007bd6:	f43f ae64 	beq.w	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 8007bda:	462e      	mov	r6, r5
 8007bdc:	e668      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bde:	4f17      	ldr	r7, [pc, #92]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007be0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007be2:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8007be6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	f47f ae76 	bne.w	80078da <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bee:	4d13      	ldr	r5, [pc, #76]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007bf0:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 8007bf2:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8007bf6:	4301      	orrs	r1, r0
 8007bf8:	6569      	str	r1, [r5, #84]	@ 0x54
 8007bfa:	e66d      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 8007bfc:	462e      	mov	r6, r5
 8007bfe:	e634      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 8007c00:	462e      	mov	r6, r5
 8007c02:	e4d0      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8007c04:	462e      	mov	r6, r5
 8007c06:	e445      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c08:	4f0c      	ldr	r7, [pc, #48]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007c0a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8007c0c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007c0e:	f021 0103 	bic.w	r1, r1, #3
 8007c12:	4301      	orrs	r1, r0
 8007c14:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8007c16:	e4de      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c18:	4f08      	ldr	r7, [pc, #32]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8007c1a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8007c1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c1e:	f021 0107 	bic.w	r1, r1, #7
 8007c22:	4301      	orrs	r1, r0
 8007c24:	6579      	str	r1, [r7, #84]	@ 0x54
 8007c26:	e52c      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 8007c28:	462e      	mov	r6, r5
 8007c2a:	e577      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 8007c2c:	462e      	mov	r6, r5
 8007c2e:	e4aa      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 8007c30:	462e      	mov	r6, r5
 8007c32:	e59c      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 8007c34:	462e      	mov	r6, r5
 8007c36:	e606      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 8007c38:	462e      	mov	r6, r5
 8007c3a:	e5c1      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007c3c:	58024400 	.word	0x58024400
 8007c40:	58024800 	.word	0x58024800
      status = ret;
 8007c44:	462e      	mov	r6, r5
 8007c46:	e475      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 8007c48:	462e      	mov	r6, r5
 8007c4a:	e4f9      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c4c:	4fc2      	ldr	r7, [pc, #776]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007c4e:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8007c52:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007c54:	f021 0107 	bic.w	r1, r1, #7
 8007c58:	4301      	orrs	r1, r0
 8007c5a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c5c:	e535      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 8007c5e:	2900      	cmp	r1, #0
 8007c60:	f47f aef3 	bne.w	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8007c64:	e7c0      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c66:	49bc      	ldr	r1, [pc, #752]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007c68:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007c6a:	f001 0103 	and.w	r1, r1, #3
 8007c6e:	2903      	cmp	r1, #3
 8007c70:	f000 8194 	beq.w	8007f9c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8007c74:	2102      	movs	r1, #2
 8007c76:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007c7a:	f7ff fac7 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007c7e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c80:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	d1cf      	bne.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8007c88:	e540      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c8a:	49b3      	ldr	r1, [pc, #716]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007c8c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007c8e:	f001 0103 	and.w	r1, r1, #3
 8007c92:	2903      	cmp	r1, #3
 8007c94:	f000 81ba 	beq.w	800800c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007c98:	2102      	movs	r1, #2
 8007c9a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007c9e:	f7ff fab5 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007ca2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ca4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	d1c1      	bne.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8007cac:	e557      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cae:	49aa      	ldr	r1, [pc, #680]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007cb0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007cb2:	f001 0103 	and.w	r1, r1, #3
 8007cb6:	2903      	cmp	r1, #3
 8007cb8:	f000 818c 	beq.w	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007cbc:	2102      	movs	r1, #2
 8007cbe:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007cc2:	f7ff faa3 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007cc6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007cc8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007ccc:	2d00      	cmp	r5, #0
 8007cce:	d1b3      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8007cd0:	e56e      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cd2:	49a1      	ldr	r1, [pc, #644]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007cd4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007cd6:	f001 0103 	and.w	r1, r1, #3
 8007cda:	2903      	cmp	r1, #3
 8007cdc:	f000 81df 	beq.w	800809e <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 8007ce0:	2102      	movs	r1, #2
 8007ce2:	f104 0008 	add.w	r0, r4, #8
 8007ce6:	f7ff fa21 	bl	800712c <RCCEx_PLL2_Config.part.0>
 8007cea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007cec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007cf0:	2d00      	cmp	r5, #0
 8007cf2:	d187      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8007cf4:	f7ff bbc7 	b.w	8007486 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cf8:	4997      	ldr	r1, [pc, #604]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007cfa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007cfc:	f001 0103 	and.w	r1, r1, #3
 8007d00:	2903      	cmp	r1, #3
 8007d02:	f000 820a 	beq.w	800811a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8007d06:	2102      	movs	r1, #2
 8007d08:	f104 0008 	add.w	r0, r4, #8
 8007d0c:	f7ff fa0e 	bl	800712c <RCCEx_PLL2_Config.part.0>
 8007d10:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d12:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007d16:	2d00      	cmp	r5, #0
 8007d18:	f47f ac5c 	bne.w	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007d1c:	e774      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d1e:	498e      	ldr	r1, [pc, #568]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007d20:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007d22:	f001 0103 	and.w	r1, r1, #3
 8007d26:	2903      	cmp	r1, #3
 8007d28:	f000 8146 	beq.w	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007d32:	f7ff fa6b 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007d36:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007d38:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007d3c:	2d00      	cmp	r5, #0
 8007d3e:	d181      	bne.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8007d40:	f7ff bbf1 	b.w	8007526 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d44:	4984      	ldr	r1, [pc, #528]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007d46:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007d48:	f001 0103 	and.w	r1, r1, #3
 8007d4c:	2903      	cmp	r1, #3
 8007d4e:	f43f ad8a 	beq.w	8007866 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8007d52:	2101      	movs	r1, #1
 8007d54:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007d58:	f7ff fa58 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007d5c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d5e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007d62:	2d00      	cmp	r5, #0
 8007d64:	f47f af4a 	bne.w	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007d68:	e6a9      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d6a:	497b      	ldr	r1, [pc, #492]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007d6c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007d6e:	f001 0103 	and.w	r1, r1, #3
 8007d72:	2903      	cmp	r1, #3
 8007d74:	f43f ae7e 	beq.w	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x788>
 8007d78:	2102      	movs	r1, #2
 8007d7a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007d7e:	f7ff fa45 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007d82:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d84:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007d88:	2d00      	cmp	r5, #0
 8007d8a:	f47f af53 	bne.w	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8007d8e:	e552      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d90:	4971      	ldr	r1, [pc, #452]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007d92:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007d94:	f001 0103 	and.w	r1, r1, #3
 8007d98:	2903      	cmp	r1, #3
 8007d9a:	f000 8129 	beq.w	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8007d9e:	2101      	movs	r1, #1
 8007da0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007da4:	f7ff fa32 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007da8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007daa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	f47f af3c 	bne.w	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x940>
 8007db4:	f7ff bbdf 	b.w	8007576 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db8:	4867      	ldr	r0, [pc, #412]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007dba:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007dbc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007dc0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007dc2:	2d00      	cmp	r5, #0
 8007dc4:	f43f ab88 	beq.w	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 8007dc8:	462e      	mov	r6, r5
 8007dca:	f7ff bb8c 	b.w	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dce:	4862      	ldr	r0, [pc, #392]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007dd0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007dd2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007dd6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	f43f ab38 	beq.w	800744e <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 8007dde:	462e      	mov	r6, r5
 8007de0:	f7ff bb3d 	b.w	800745e <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007de4:	495c      	ldr	r1, [pc, #368]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007de6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007de8:	f001 0103 	and.w	r1, r1, #3
 8007dec:	2903      	cmp	r1, #3
 8007dee:	f000 8125 	beq.w	800803c <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8007df2:	2100      	movs	r1, #0
 8007df4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007df8:	f7ff fa08 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007dfc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007dfe:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8007e02:	f7ff bb66 	b.w	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e06:	4954      	ldr	r1, [pc, #336]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007e08:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007e0a:	f001 0103 	and.w	r1, r1, #3
 8007e0e:	2903      	cmp	r1, #3
 8007e10:	f000 813e 	beq.w	8008090 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8007e14:	2100      	movs	r1, #0
 8007e16:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007e1a:	f7ff f9f7 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007e1e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e20:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007e24:	2d00      	cmp	r5, #0
 8007e26:	f43f aabd 	beq.w	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 8007e2a:	462e      	mov	r6, r5
 8007e2c:	f7ff bac1 	b.w	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e30:	4949      	ldr	r1, [pc, #292]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007e32:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007e34:	f001 0103 	and.w	r1, r1, #3
 8007e38:	2903      	cmp	r1, #3
 8007e3a:	f43f aa91 	beq.w	8007360 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007e3e:	2100      	movs	r1, #0
 8007e40:	f104 0008 	add.w	r0, r4, #8
 8007e44:	f7ff f972 	bl	800712c <RCCEx_PLL2_Config.part.0>
 8007e48:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e4a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007e4e:	2d00      	cmp	r5, #0
 8007e50:	f43f ae89 	beq.w	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 8007e54:	462e      	mov	r6, r5
 8007e56:	f7ff ba85 	b.w	8007364 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e5a:	493f      	ldr	r1, [pc, #252]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007e5c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007e5e:	f001 0103 	and.w	r1, r1, #3
 8007e62:	2903      	cmp	r1, #3
 8007e64:	f43f aa7c 	beq.w	8007360 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007e68:	2100      	movs	r1, #0
 8007e6a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007e6e:	f7ff f9cd 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007e72:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e74:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8007e78:	e672      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e7a:	4937      	ldr	r1, [pc, #220]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007e7c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007e7e:	f001 0103 	and.w	r1, r1, #3
 8007e82:	2903      	cmp	r1, #3
 8007e84:	f000 80f9 	beq.w	800807a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007e88:	2100      	movs	r1, #0
 8007e8a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007e8e:	f7ff f9bd 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007e92:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007e94:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007e98:	2d00      	cmp	r5, #0
 8007e9a:	f43f aaad 	beq.w	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 8007e9e:	462e      	mov	r6, r5
 8007ea0:	f7ff bab2 	b.w	8007408 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ea4:	492c      	ldr	r1, [pc, #176]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007ea6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007ea8:	f001 0103 	and.w	r1, r1, #3
 8007eac:	2903      	cmp	r1, #3
 8007eae:	f000 80d1 	beq.w	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007eb8:	f7ff f9a8 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007ebc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ebe:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8007ec2:	f7ff bac1 	b.w	8007448 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ec6:	4924      	ldr	r1, [pc, #144]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007ec8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007eca:	f001 0103 	and.w	r1, r1, #3
 8007ece:	2903      	cmp	r1, #3
 8007ed0:	f000 80c8 	beq.w	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8007ed4:	2102      	movs	r1, #2
 8007ed6:	3028      	adds	r0, #40	@ 0x28
 8007ed8:	f7ff f998 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007edc:	4606      	mov	r6, r0
        break;
 8007ede:	f7ff ba28 	b.w	8007332 <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee2:	481d      	ldr	r0, [pc, #116]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007ee4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007ee6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007eea:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8007eec:	f7ff ba81 	b.w	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef0:	4819      	ldr	r0, [pc, #100]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007ef2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007ef4:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8007ef8:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8007efa:	f7ff ba50 	b.w	800739e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007efe:	4d16      	ldr	r5, [pc, #88]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007f00:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8007f02:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8007f06:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8007f08:	f7ff ba17 	b.w	800733a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f0c:	4912      	ldr	r1, [pc, #72]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007f0e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007f10:	f001 0103 	and.w	r1, r1, #3
 8007f14:	2903      	cmp	r1, #3
 8007f16:	f000 80e5 	beq.w	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007f20:	f7ff f974 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007f24:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f26:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007f2a:	2d00      	cmp	r5, #0
 8007f2c:	f47f abcc 	bne.w	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8007f30:	e68c      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f32:	4909      	ldr	r1, [pc, #36]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8007f34:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007f36:	f001 0103 	and.w	r1, r1, #3
 8007f3a:	2903      	cmp	r1, #3
 8007f3c:	f000 80d6 	beq.w	80080ec <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8007f40:	2101      	movs	r1, #1
 8007f42:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007f46:	f7ff f961 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007f4a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f4c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	f47f ab95 	bne.w	8007680 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8007f56:	e65f      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x92c>
 8007f58:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f5c:	4983      	ldr	r1, [pc, #524]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8007f5e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8007f60:	f001 0103 	and.w	r1, r1, #3
 8007f64:	2903      	cmp	r1, #3
 8007f66:	f43f ab69 	beq.w	800763c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007f70:	f7ff f94c 	bl	800720c <RCCEx_PLL3_Config.part.0>
 8007f74:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f76:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8007f7a:	2d00      	cmp	r5, #0
 8007f7c:	f47f ae64 	bne.w	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007f80:	e58d      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 8007f82:	2001      	movs	r0, #1
}
 8007f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007f88:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8007f8c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007f90:	f43f abb9 	beq.w	8007706 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007f94:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8007f98:	f43f abb5 	beq.w	8007706 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 8007f9c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007f9e:	4635      	mov	r5, r6
 8007fa0:	f7ff bbbc 	b.w	800771c <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007fa4:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8007fa8:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8007fac:	f43f aab8 	beq.w	8007520 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007fb0:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8007fb4:	f43f aab4 	beq.w	8007520 <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 8007fb8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007fba:	4635      	mov	r5, r6
 8007fbc:	f7ff baba 	b.w	8007534 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007fc0:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8007fc4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007fc8:	f43f abef 	beq.w	80077aa <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8007fcc:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8007fd0:	f43f abeb 	beq.w	80077aa <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 8007fd4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007fd6:	4635      	mov	r5, r6
 8007fd8:	f7ff bbf2 	b.w	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007fdc:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8007fe0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007fe4:	f43f aac4 	beq.w	8007570 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8007fe8:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8007fec:	f43f aac0 	beq.w	8007570 <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 8007ff0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8007ff2:	4635      	mov	r5, r6
 8007ff4:	f7ff bac7 	b.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ff8:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8007ffc:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8008000:	f43f abaa 	beq.w	8007758 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8008004:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8008008:	f43f aba6 	beq.w	8007758 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 800800c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800800e:	4635      	mov	r5, r6
 8008010:	f7ff bbad 	b.w	800776e <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 8008014:	2501      	movs	r5, #1
 8008016:	e4e2      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008018:	0691      	lsls	r1, r2, #26
 800801a:	d5b2      	bpl.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 800801c:	2501      	movs	r5, #1
 800801e:	e4f2      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 8008020:	2501      	movs	r5, #1
 8008022:	e4a9      	b.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008024:	2501      	movs	r5, #1
 8008026:	e4b8      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8008028:	2501      	movs	r5, #1
 800802a:	e4c7      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 800802c:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8008030:	f43f aa4f 	beq.w	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8008034:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8008038:	f43f aa4b 	beq.w	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 800803c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800803e:	4635      	mov	r5, r6
 8008040:	f7ff ba51 	b.w	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 8008044:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8008048:	f43f a9fe 	beq.w	8007448 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800804c:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8008050:	f43f a9fa 	beq.w	8007448 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 8008054:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8008056:	4635      	mov	r5, r6
 8008058:	f7ff ba01 	b.w	800745e <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800805c:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8008060:	f43f a96b 	beq.w	800733a <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 8008064:	2601      	movs	r6, #1
 8008066:	f7ff b96f 	b.w	8007348 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 800806a:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 800806e:	f43f a9c0 	beq.w	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008072:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8008076:	f43f a9bc 	beq.w	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 800807a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800807c:	4635      	mov	r5, r6
 800807e:	f7ff b9c3 	b.w	8007408 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 8008082:	29c0      	cmp	r1, #192	@ 0xc0
 8008084:	f43f a98b 	beq.w	800739e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8008088:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800808c:	f43f a987 	beq.w	800739e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 8008090:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8008092:	4635      	mov	r5, r6
 8008094:	f7ff b98d 	b.w	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 8008098:	2930      	cmp	r1, #48	@ 0x30
 800809a:	f43f a9f1 	beq.w	8007480 <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 800809e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80080a0:	4635      	mov	r5, r6
 80080a2:	f7ff b9f7 	b.w	8007494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 80080a6:	2503      	movs	r5, #3
      status = ret;
 80080a8:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80080aa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80080ae:	f7ff ba95 	b.w	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080b2:	6863      	ldr	r3, [r4, #4]
 80080b4:	069a      	lsls	r2, r3, #26
 80080b6:	f57f af64 	bpl.w	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80080ba:	4605      	mov	r5, r0
 80080bc:	e4a3      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80080be:	492b      	ldr	r1, [pc, #172]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 80080c0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80080c2:	f001 0103 	and.w	r1, r1, #3
 80080c6:	2903      	cmp	r1, #3
 80080c8:	f43f aa6b 	beq.w	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80080cc:	2101      	movs	r1, #1
 80080ce:	f104 0008 	add.w	r0, r4, #8
 80080d2:	f7ff f82b 	bl	800712c <RCCEx_PLL2_Config.part.0>
 80080d6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80080d8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80080dc:	2d00      	cmp	r5, #0
 80080de:	f47f ad8f 	bne.w	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80080e2:	e4bf      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 80080e4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80080e6:	4635      	mov	r5, r6
 80080e8:	f7ff baef 	b.w	80076ca <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 80080ec:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80080ee:	4635      	mov	r5, r6
 80080f0:	f7ff bac7 	b.w	8007682 <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 80080f4:	2601      	movs	r6, #1
 80080f6:	f7ff bb79 	b.w	80077ec <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 80080fa:	2601      	movs	r6, #1
 80080fc:	f7ff bb68 	b.w	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008100:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008104:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008108:	f7ff bb62 	b.w	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800810c:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 8008110:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008112:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008116:	f7ff bb69 	b.w	80077ec <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 800811a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800811c:	4635      	mov	r5, r6
 800811e:	f7ff ba5a 	b.w	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 8008122:	f7fb fb01 	bl	8003728 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008126:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 800816c <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 800812a:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800812c:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008130:	e004      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008132:	f7fb faf9 	bl	8003728 <HAL_GetTick>
 8008136:	1bc0      	subs	r0, r0, r7
 8008138:	4548      	cmp	r0, r9
 800813a:	d810      	bhi.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800813c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8008140:	079b      	lsls	r3, r3, #30
 8008142:	d5f6      	bpl.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008144:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8008148:	e4f0      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x840>
 800814a:	4808      	ldr	r0, [pc, #32]	@ (800816c <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 800814c:	4a08      	ldr	r2, [pc, #32]	@ (8008170 <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 800814e:	6901      	ldr	r1, [r0, #16]
 8008150:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8008154:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8008158:	430a      	orrs	r2, r1
 800815a:	6102      	str	r2, [r0, #16]
 800815c:	e4f1      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 800815e:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008160:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008164:	4635      	mov	r5, r6
 8008166:	f7ff ba39 	b.w	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800816a:	bf00      	nop
 800816c:	58024400 	.word	0x58024400
 8008170:	00ffffcf 	.word	0x00ffffcf

08008174 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8008174:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008176:	f7fe ff09 	bl	8006f8c <HAL_RCC_GetHCLKFreq>
 800817a:	4b05      	ldr	r3, [pc, #20]	@ (8008190 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800817c:	4a05      	ldr	r2, [pc, #20]	@ (8008194 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008184:	5cd3      	ldrb	r3, [r2, r3]
 8008186:	f003 031f 	and.w	r3, r3, #31
}
 800818a:	40d8      	lsrs	r0, r3
 800818c:	bd08      	pop	{r3, pc}
 800818e:	bf00      	nop
 8008190:	58024400 	.word	0x58024400
 8008194:	08070d44 	.word	0x08070d44

08008198 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008198:	4a47      	ldr	r2, [pc, #284]	@ (80082b8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 800819a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800819c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800819e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081a0:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 80081a2:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80081a6:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80081aa:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 80081ac:	d05b      	beq.n	8008266 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80081ae:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081b2:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081b6:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081ba:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80081be:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80081c2:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081c8:	ee06 1a90 	vmov	s13, r1
 80081cc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80081d0:	d003      	beq.n	80081da <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 80081d2:	2c02      	cmp	r4, #2
 80081d4:	d06a      	beq.n	80082ac <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 80081d6:	2c00      	cmp	r4, #0
 80081d8:	d04a      	beq.n	8008270 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081da:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80082bc <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80081de:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80081e2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80081e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e8:	ee07 3a90 	vmov	s15, r3
 80081ec:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80081f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081f4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80081f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008200:	4a2d      	ldr	r2, [pc, #180]	@ (80082b8 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8008202:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8008206:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8008208:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800820c:	ee07 3a10 	vmov	s14, r3
 8008210:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8008214:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008216:	ee37 7a06 	vadd.f32	s14, s14, s12
 800821a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800821e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008222:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008226:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8008228:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800822c:	ee07 3a10 	vmov	s14, r3
 8008230:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008234:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008238:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800823c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008240:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008244:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8008246:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800824a:	ee06 3a90 	vmov	s13, r3
 800824e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008252:	ee76 6a86 	vadd.f32	s13, s13, s12
 8008256:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800825a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800825e:	ee17 3a90 	vmov	r3, s15
 8008262:	6083      	str	r3, [r0, #8]
}
 8008264:	4770      	bx	lr
 8008266:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008268:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800826c:	6083      	str	r3, [r0, #8]
}
 800826e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008270:	6813      	ldr	r3, [r2, #0]
 8008272:	069b      	lsls	r3, r3, #26
 8008274:	d51d      	bpl.n	80082b2 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008276:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008278:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800827c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800827e:	4910      	ldr	r1, [pc, #64]	@ (80082c0 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8008280:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008284:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008288:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800828a:	ee06 3a10 	vmov	s12, r3
 800828e:	ee05 1a90 	vmov	s11, r1
 8008292:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008296:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800829a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800829e:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80082a2:	ee36 7a26 	vadd.f32	s14, s12, s13
 80082a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082aa:	e7a9      	b.n	8008200 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082ac:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80082c4 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 80082b0:	e795      	b.n	80081de <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082b2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80082c8 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 80082b6:	e792      	b.n	80081de <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 80082b8:	58024400 	.word	0x58024400
 80082bc:	4a742400 	.word	0x4a742400
 80082c0:	03d09000 	.word	0x03d09000
 80082c4:	4bbebc20 	.word	0x4bbebc20
 80082c8:	4c742400 	.word	0x4c742400

080082cc <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082cc:	4a47      	ldr	r2, [pc, #284]	@ (80083ec <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 80082ce:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082d0:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80082d2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082d4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 80082d6:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80082da:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80082de:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 80082e0:	d05b      	beq.n	800839a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80082e2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80082e6:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082ea:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082ee:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80082f2:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 80082f6:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082fc:	ee06 1a90 	vmov	s13, r1
 8008300:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8008304:	d003      	beq.n	800830e <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8008306:	2c02      	cmp	r4, #2
 8008308:	d06a      	beq.n	80083e0 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 800830a:	2c00      	cmp	r4, #0
 800830c:	d04a      	beq.n	80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800830e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80083f0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8008312:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8008316:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8008318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831c:	ee07 3a90 	vmov	s15, r3
 8008320:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8008324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008328:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800832c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008330:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008334:	4a2d      	ldr	r2, [pc, #180]	@ (80083ec <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8008336:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800833a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800833c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008340:	ee07 3a10 	vmov	s14, r3
 8008344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8008348:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800834a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800834e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008352:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008356:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800835a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800835c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008360:	ee07 3a10 	vmov	s14, r3
 8008364:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008368:	ee37 7a06 	vadd.f32	s14, s14, s12
 800836c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008370:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008374:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008378:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800837a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800837e:	ee06 3a90 	vmov	s13, r3
 8008382:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008386:	ee76 6a86 	vadd.f32	s13, s13, s12
 800838a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800838e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8008392:	ee17 3a90 	vmov	r3, s15
 8008396:	6083      	str	r3, [r0, #8]
}
 8008398:	4770      	bx	lr
 800839a:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800839c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80083a0:	6083      	str	r3, [r0, #8]
}
 80083a2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083a4:	6813      	ldr	r3, [r2, #0]
 80083a6:	069b      	lsls	r3, r3, #26
 80083a8:	d51d      	bpl.n	80083e6 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083aa:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80083b0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083b2:	4910      	ldr	r1, [pc, #64]	@ (80083f4 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 80083b4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083bc:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083be:	ee06 3a10 	vmov	s12, r3
 80083c2:	ee05 1a90 	vmov	s11, r1
 80083c6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80083ca:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80083ce:	ee36 6a27 	vadd.f32	s12, s12, s15
 80083d2:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80083d6:	ee36 7a26 	vadd.f32	s14, s12, s13
 80083da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083de:	e7a9      	b.n	8008334 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083e0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80083f8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80083e4:	e795      	b.n	8008312 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083e6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80083fc <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 80083ea:	e792      	b.n	8008312 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80083ec:	58024400 	.word	0x58024400
 80083f0:	4a742400 	.word	0x4a742400
 80083f4:	03d09000 	.word	0x03d09000
 80083f8:	4bbebc20 	.word	0x4bbebc20
 80083fc:	4c742400 	.word	0x4c742400

08008400 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008400:	4a47      	ldr	r2, [pc, #284]	@ (8008520 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8008402:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008404:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008406:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008408:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 800840a:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800840e:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008412:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8008414:	d05b      	beq.n	80084ce <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008416:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800841a:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800841e:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008422:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008426:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 800842a:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800842c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008430:	ee06 1a90 	vmov	s13, r1
 8008434:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8008438:	d04e      	beq.n	80084d8 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 800843a:	2c02      	cmp	r4, #2
 800843c:	d06d      	beq.n	800851a <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 800843e:	2c00      	cmp	r4, #0
 8008440:	d04d      	beq.n	80084de <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008442:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8008524 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8008446:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800844a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800844c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008450:	ee07 3a90 	vmov	s15, r3
 8008454:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8008458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800845c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008464:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008468:	4a2d      	ldr	r2, [pc, #180]	@ (8008520 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 800846a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800846e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008470:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008474:	ee07 3a10 	vmov	s14, r3
 8008478:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800847c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800847e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008482:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008486:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800848a:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800848e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008490:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008494:	ee07 3a10 	vmov	s14, r3
 8008498:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800849c:	ee37 7a06 	vadd.f32	s14, s14, s12
 80084a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80084a4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80084a8:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80084ac:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80084ae:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80084b2:	ee06 3a90 	vmov	s13, r3
 80084b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80084ba:	ee76 6a86 	vadd.f32	s13, s13, s12
 80084be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80084c2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80084c6:	ee17 3a90 	vmov	r3, s15
 80084ca:	6083      	str	r3, [r0, #8]
}
 80084cc:	4770      	bx	lr
 80084ce:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80084d0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80084d4:	6083      	str	r3, [r0, #8]
}
 80084d6:	4770      	bx	lr
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084d8:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 80084dc:	e7b3      	b.n	8008446 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084de:	6813      	ldr	r3, [r2, #0]
 80084e0:	069b      	lsls	r3, r3, #26
 80084e2:	d5ae      	bpl.n	8008442 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084e4:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80084ea:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084ec:	490f      	ldr	r1, [pc, #60]	@ (800852c <HAL_RCCEx_GetPLL1ClockFreq+0x12c>)
 80084ee:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084f6:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084f8:	ee06 3a10 	vmov	s12, r3
 80084fc:	ee05 1a90 	vmov	s11, r1
 8008500:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008504:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008508:	ee36 6a27 	vadd.f32	s12, s12, s15
 800850c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8008510:	ee36 7a26 	vadd.f32	s14, s12, s13
 8008514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008518:	e7a6      	b.n	8008468 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800851a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8008530 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800851e:	e792      	b.n	8008446 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8008520:	58024400 	.word	0x58024400
 8008524:	4c742400 	.word	0x4c742400
 8008528:	4a742400 	.word	0x4a742400
 800852c:	03d09000 	.word	0x03d09000
 8008530:	4bbebc20 	.word	0x4bbebc20

08008534 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008534:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8008538:	430b      	orrs	r3, r1
{
 800853a:	b500      	push	{lr}
 800853c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800853e:	d04c      	beq.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008540:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8008544:	430b      	orrs	r3, r1
 8008546:	d036      	beq.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008548:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800854c:	430b      	orrs	r3, r1
 800854e:	d06c      	beq.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008550:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8008554:	430b      	orrs	r3, r1
 8008556:	d04b      	beq.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008558:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 800855c:	430b      	orrs	r3, r1
 800855e:	f000 80b6 	beq.w	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008562:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8008566:	430b      	orrs	r3, r1
 8008568:	f000 80ec 	beq.w	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800856c:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8008570:	430b      	orrs	r3, r1
 8008572:	d069      	beq.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008574:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8008578:	430b      	orrs	r3, r1
 800857a:	f000 80d6 	beq.w	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800857e:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8008582:	430b      	orrs	r3, r1
 8008584:	f000 8109 	beq.w	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008588:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 800858c:	4308      	orrs	r0, r1
 800858e:	d120      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008590:	4a95      	ldr	r2, [pc, #596]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008592:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008594:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8008598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800859c:	f000 80aa 	beq.w	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 80085a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085a4:	f000 8116 	beq.w	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80085a8:	b99b      	cbnz	r3, 80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085aa:	6810      	ldr	r0, [r2, #0]
 80085ac:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80085b0:	d047      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 80085b2:	488e      	ldr	r0, [pc, #568]	@ (80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
  return frequency;
 80085b4:	e045      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80085b6:	4a8c      	ldr	r2, [pc, #560]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80085b8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80085ba:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 80085be:	2b80      	cmp	r3, #128	@ 0x80
 80085c0:	f000 8093 	beq.w	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80085c4:	f240 808b 	bls.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80085c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80085ca:	d039      	beq.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80085cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085d0:	d05c      	beq.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
          frequency = 0;
 80085d2:	2000      	movs	r0, #0
}
 80085d4:	b005      	add	sp, #20
 80085d6:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80085da:	4b83      	ldr	r3, [pc, #524]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80085dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085de:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	d8f5      	bhi.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80085e6:	e8df f003 	tbb	[pc, r3]
 80085ea:	3c68      	.short	0x3c68
 80085ec:	2b46      	.short	0x2b46
 80085ee:	50          	.byte	0x50
 80085ef:	00          	.byte	0x00
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80085f0:	4a7d      	ldr	r2, [pc, #500]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80085f2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80085f4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 80085f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085fc:	d075      	beq.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80085fe:	d96e      	bls.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008600:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008604:	d01c      	beq.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008606:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800860a:	d1e2      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800860c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800860e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008610:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008614:	0752      	lsls	r2, r2, #29
 8008616:	d541      	bpl.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8008618:	2b00      	cmp	r3, #0
 800861a:	d13f      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800861c:	4b72      	ldr	r3, [pc, #456]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800861e:	4874      	ldr	r0, [pc, #464]	@ (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008626:	40d8      	lsrs	r0, r3
 8008628:	e00b      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800862a:	4a6f      	ldr	r2, [pc, #444]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800862c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800862e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 8008632:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008636:	d058      	beq.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8008638:	d951      	bls.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800863a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800863e:	d15e      	bne.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008640:	486c      	ldr	r0, [pc, #432]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8008642:	b005      	add	sp, #20
 8008644:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008648:	4a67      	ldr	r2, [pc, #412]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800864a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800864c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8008650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008654:	f000 80df 	beq.w	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 8008658:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800865c:	d0d6      	beq.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1b7      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008662:	4b61      	ldr	r3, [pc, #388]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008664:	6818      	ldr	r0, [r3, #0]
 8008666:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800866a:	d0ea      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800866c:	a801      	add	r0, sp, #4
 800866e:	f7ff fd93 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008672:	9801      	ldr	r0, [sp, #4]
 8008674:	e7e5      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008676:	4b5c      	ldr	r3, [pc, #368]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008678:	6818      	ldr	r0, [r3, #0]
 800867a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800867e:	d0e0      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008680:	a801      	add	r0, sp, #4
 8008682:	f7ff fe23 	bl	80082cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008686:	9801      	ldr	r0, [sp, #4]
 8008688:	e7db      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800868a:	4a57      	ldr	r2, [pc, #348]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800868c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800868e:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008690:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008694:	0749      	lsls	r1, r1, #29
 8008696:	d501      	bpl.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d038      	beq.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800869c:	4a52      	ldr	r2, [pc, #328]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800869e:	6812      	ldr	r2, [r2, #0]
 80086a0:	05d0      	lsls	r0, r2, #23
 80086a2:	d502      	bpl.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80086a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086a8:	d067      	beq.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086aa:	4a4f      	ldr	r2, [pc, #316]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	0391      	lsls	r1, r2, #14
 80086b0:	d58f      	bpl.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80086b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086b6:	d18c      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80086b8:	e77b      	b.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086ba:	4b4b      	ldr	r3, [pc, #300]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80086c2:	d0be      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086c4:	a801      	add	r0, sp, #4
 80086c6:	f7ff fe9b 	bl	8008400 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086ca:	9802      	ldr	r0, [sp, #8]
 80086cc:	e7b9      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80086ce:	4a46      	ldr	r2, [pc, #280]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80086d0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80086d2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 80086d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086da:	d006      	beq.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80086dc:	d81d      	bhi.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80086de:	b14b      	cbz	r3, 80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086e0:	6810      	ldr	r0, [r2, #0]
 80086e2:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80086e6:	d0ac      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80086e8:	e7c0      	b.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086ea:	6810      	ldr	r0, [r2, #0]
 80086ec:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80086f0:	d0a7      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80086f2:	e7c5      	b.n	8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086f4:	6810      	ldr	r0, [r2, #0]
 80086f6:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80086fa:	d0a2      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80086fc:	e7e2      	b.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
    switch (saiclocksource)
 80086fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008702:	d0c3      	beq.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8008704:	e765      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008706:	6810      	ldr	r0, [r2, #0]
 8008708:	f010 0004 	ands.w	r0, r0, #4
 800870c:	d099      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800870e:	6813      	ldr	r3, [r2, #0]
 8008710:	4837      	ldr	r0, [pc, #220]	@ (80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008712:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008716:	40d8      	lsrs	r0, r3
 8008718:	e793      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800871a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800871e:	d08f      	beq.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008720:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008724:	f43f af72 	beq.w	800860c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008728:	e753      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800872a:	4b2f      	ldr	r3, [pc, #188]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800872c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 800872e:	03d2      	lsls	r2, r2, #15
 8008730:	d5c4      	bpl.n	80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008732:	6818      	ldr	r0, [r3, #0]
 8008734:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008738:	d083      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800873a:	a801      	add	r0, sp, #4
 800873c:	f7ff fd2c 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008740:	9803      	ldr	r0, [sp, #12]
 8008742:	e77e      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008744:	4a28      	ldr	r2, [pc, #160]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008746:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8008748:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 800874c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008750:	d0d9      	beq.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8008752:	d814      	bhi.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8008754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008758:	d03c      	beq.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800875a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800875e:	d04f      	beq.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8008760:	2b00      	cmp	r3, #0
 8008762:	f47f af36 	bne.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
}
 8008766:	b005      	add	sp, #20
 8008768:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800876c:	f7fe bc4e 	b.w	800700c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008770:	6810      	ldr	r0, [r2, #0]
 8008772:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8008776:	f43f af64 	beq.w	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 800877a:	481f      	ldr	r0, [pc, #124]	@ (80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800877c:	e761      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800877e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008782:	d0f5      	beq.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8008784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008788:	f47f af23 	bne.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800878c:	4b16      	ldr	r3, [pc, #88]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8008794:	f43f af55 	beq.w	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008798:	e70b      	b.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800879a:	4b13      	ldr	r3, [pc, #76]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800879c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800879e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 80087a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80087a6:	d04e      	beq.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80087a8:	d83f      	bhi.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80087aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087ae:	d043      	beq.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80087b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087b4:	d024      	beq.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f47f af0b 	bne.w	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087bc:	f7fe fbe6 	bl	8006f8c <HAL_RCC_GetHCLKFreq>
 80087c0:	4b09      	ldr	r3, [pc, #36]	@ (80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80087c2:	4a0e      	ldr	r2, [pc, #56]	@ (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80087ca:	5cd3      	ldrb	r3, [r2, r3]
 80087cc:	f003 031f 	and.w	r3, r3, #31
 80087d0:	40d8      	lsrs	r0, r3
        break;
 80087d2:	e736      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087d4:	6810      	ldr	r0, [r2, #0]
 80087d6:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80087da:	f43f af32 	beq.w	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087de:	a801      	add	r0, sp, #4
 80087e0:	f7ff fcda 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087e4:	9802      	ldr	r0, [sp, #8]
 80087e6:	e72c      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80087e8:	58024400 	.word	0x58024400
 80087ec:	017d7840 	.word	0x017d7840
 80087f0:	03d09000 	.word	0x03d09000
 80087f4:	00bb8000 	.word	0x00bb8000
 80087f8:	003d0900 	.word	0x003d0900
 80087fc:	08070d44 	.word	0x08070d44
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008800:	4b1a      	ldr	r3, [pc, #104]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8008808:	f43f af1b 	beq.w	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800880c:	a801      	add	r0, sp, #4
 800880e:	f7ff fd5d 	bl	80082cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008812:	9802      	ldr	r0, [sp, #8]
 8008814:	e715      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008816:	6810      	ldr	r0, [r2, #0]
 8008818:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 800881c:	f43f af11 	beq.w	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008820:	a801      	add	r0, sp, #4
 8008822:	f7ff fd53 	bl	80082cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008826:	9803      	ldr	r0, [sp, #12]
 8008828:	e70b      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800882a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800882e:	d016      	beq.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008834:	d0aa      	beq.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8008836:	e6cc      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008838:	4b0c      	ldr	r3, [pc, #48]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8008840:	f43f aeff 	beq.w	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008844:	e7cb      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008846:	4b09      	ldr	r3, [pc, #36]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8008848:	6818      	ldr	r0, [r3, #0]
 800884a:	f010 0004 	ands.w	r0, r0, #4
 800884e:	f43f aef8 	beq.w	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4806      	ldr	r0, [pc, #24]	@ (8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8008856:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800885a:	40d8      	lsrs	r0, r3
 800885c:	e6f1      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800885e:	4b03      	ldr	r3, [pc, #12]	@ (800886c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8008866:	f43f aeec 	beq.w	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800886a:	e786      	b.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 800886c:	58024400 	.word	0x58024400
 8008870:	03d09000 	.word	0x03d09000

08008874 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008874:	b318      	cbz	r0, 80088be <HAL_SDRAM_Init+0x4a>
{
 8008876:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008878:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800887c:	4604      	mov	r4, r0
 800887e:	460d      	mov	r5, r1
 8008880:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008884:	b1b3      	cbz	r3, 80088b4 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008886:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008888:	2302      	movs	r3, #2
 800888a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800888e:	f851 0b04 	ldr.w	r0, [r1], #4
 8008892:	f001 fbaf 	bl	8009ff4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008896:	6862      	ldr	r2, [r4, #4]
 8008898:	4629      	mov	r1, r5
 800889a:	6820      	ldr	r0, [r4, #0]
 800889c:	f001 fbe0 	bl	800a060 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80088a0:	4a08      	ldr	r2, [pc, #32]	@ (80088c4 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80088a2:	2101      	movs	r1, #1

  return HAL_OK;
 80088a4:	2000      	movs	r0, #0
  __FMC_ENABLE();
 80088a6:	6813      	ldr	r3, [r2, #0]
 80088a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088ac:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 80088ae:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
}
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80088b4:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80088b8:	f7fa fd34 	bl	8003324 <HAL_SDRAM_MspInit>
 80088bc:	e7e3      	b.n	8008886 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 80088be:	2001      	movs	r0, #1
}
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	52004000 	.word	0x52004000

080088c8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f000 8095 	beq.w	80089f8 <HAL_TIM_Base_Init+0x130>
{
 80088ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088d0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80088d4:	4604      	mov	r4, r0
 80088d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 8087 	beq.w	80089ee <HAL_TIM_Base_Init+0x126>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088e0:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80088e2:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088e4:	4945      	ldr	r1, [pc, #276]	@ (80089fc <HAL_TIM_Base_Init+0x134>)
 80088e6:	4d46      	ldr	r5, [pc, #280]	@ (8008a00 <HAL_TIM_Base_Init+0x138>)
 80088e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ec:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80088f0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088f4:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 80088f8:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088fa:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088fe:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008900:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008904:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008906:	ea4f 1151 	mov.w	r1, r1, lsr #5

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800890a:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800890c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8008910:	d01f      	beq.n	8008952 <HAL_TIM_Base_Init+0x8a>
 8008912:	b9f1      	cbnz	r1, 8008952 <HAL_TIM_Base_Init+0x8a>
 8008914:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 8008a10 <HAL_TIM_Base_Init+0x148>
 8008918:	4563      	cmp	r3, ip
 800891a:	d050      	beq.n	80089be <HAL_TIM_Base_Init+0xf6>
 800891c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8008920:	4563      	cmp	r3, ip
 8008922:	d04c      	beq.n	80089be <HAL_TIM_Base_Init+0xf6>
 8008924:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8008928:	4563      	cmp	r3, ip
 800892a:	d012      	beq.n	8008952 <HAL_TIM_Base_Init+0x8a>
 800892c:	f1be 0f00 	cmp.w	lr, #0
 8008930:	d10f      	bne.n	8008952 <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008932:	4d34      	ldr	r5, [pc, #208]	@ (8008a04 <HAL_TIM_Base_Init+0x13c>)
 8008934:	4934      	ldr	r1, [pc, #208]	@ (8008a08 <HAL_TIM_Base_Init+0x140>)
 8008936:	428b      	cmp	r3, r1
 8008938:	bf18      	it	ne
 800893a:	42ab      	cmpne	r3, r5
 800893c:	d043      	beq.n	80089c6 <HAL_TIM_Base_Init+0xfe>
 800893e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008942:	428b      	cmp	r3, r1
 8008944:	d03f      	beq.n	80089c6 <HAL_TIM_Base_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008946:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800894a:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800894c:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800894e:	4310      	orrs	r0, r2

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008950:	e014      	b.n	800897c <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 8008952:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008954:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008958:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800895c:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 800895e:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008960:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 8008962:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008966:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800896a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800896e:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008970:	b911      	cbnz	r1, 8008978 <HAL_TIM_Base_Init+0xb0>
 8008972:	f1be 0f00 	cmp.w	lr, #0
 8008976:	d02f      	beq.n	80089d8 <HAL_TIM_Base_Init+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008978:	6962      	ldr	r2, [r4, #20]
 800897a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800897c:	6819      	ldr	r1, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800897e:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008980:	f041 0104 	orr.w	r1, r1, #4
 8008984:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 8008986:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008988:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800898a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800898c:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008990:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8008994:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 8008998:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 800899c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 80089a0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 80089a4:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089a8:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 80089ac:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 80089b0:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 80089b4:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80089b8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 80089bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089be:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80089c2:	68a1      	ldr	r1, [r4, #8]
 80089c4:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089c6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80089c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089cc:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ce:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80089d0:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089d6:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089d8:	490c      	ldr	r1, [pc, #48]	@ (8008a0c <HAL_TIM_Base_Init+0x144>)
 80089da:	4a0a      	ldr	r2, [pc, #40]	@ (8008a04 <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089dc:	4293      	cmp	r3, r2
 80089de:	bf18      	it	ne
 80089e0:	428b      	cmpne	r3, r1
 80089e2:	d0c9      	beq.n	8008978 <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d0c5      	beq.n	8008978 <HAL_TIM_Base_Init+0xb0>
 80089ec:	e7c6      	b.n	800897c <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 80089ee:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80089f2:	f7fa fbc9 	bl	8003188 <HAL_TIM_Base_MspInit>
 80089f6:	e773      	b.n	80088e0 <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 80089f8:	2001      	movs	r0, #1
}
 80089fa:	4770      	bx	lr
 80089fc:	40010000 	.word	0x40010000
 8008a00:	40010400 	.word	0x40010400
 8008a04:	40014000 	.word	0x40014000
 8008a08:	40014400 	.word	0x40014400
 8008a0c:	40014800 	.word	0x40014800
 8008a10:	40000400 	.word	0x40000400

08008a14 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008a14:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d139      	bne.n	8008a90 <HAL_TIM_Base_Start+0x7c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a1c:	6802      	ldr	r2, [r0, #0]
 8008a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8008a94 <HAL_TIM_Base_Start+0x80>)
 8008a20:	491d      	ldr	r1, [pc, #116]	@ (8008a98 <HAL_TIM_Base_Start+0x84>)
 8008a22:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8008a26:	bf18      	it	ne
 8008a28:	429a      	cmpne	r2, r3
{
 8008a2a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a2c:	bf0c      	ite	eq
 8008a2e:	2301      	moveq	r3, #1
 8008a30:	2300      	movne	r3, #0
 8008a32:	4d1a      	ldr	r5, [pc, #104]	@ (8008a9c <HAL_TIM_Base_Start+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008a34:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a36:	42aa      	cmp	r2, r5
 8008a38:	bf08      	it	eq
 8008a3a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008a3e:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a42:	4c17      	ldr	r4, [pc, #92]	@ (8008aa0 <HAL_TIM_Base_Start+0x8c>)
 8008a44:	428a      	cmp	r2, r1
 8008a46:	bf08      	it	eq
 8008a48:	f043 0301 	orreq.w	r3, r3, #1
 8008a4c:	4815      	ldr	r0, [pc, #84]	@ (8008aa4 <HAL_TIM_Base_Start+0x90>)
 8008a4e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8008a52:	42a2      	cmp	r2, r4
 8008a54:	bf08      	it	eq
 8008a56:	f043 0301 	orreq.w	r3, r3, #1
 8008a5a:	4282      	cmp	r2, r0
 8008a5c:	bf08      	it	eq
 8008a5e:	f043 0301 	orreq.w	r3, r3, #1
 8008a62:	428a      	cmp	r2, r1
 8008a64:	bf08      	it	eq
 8008a66:	f043 0301 	orreq.w	r3, r3, #1
 8008a6a:	b913      	cbnz	r3, 8008a72 <HAL_TIM_Base_Start+0x5e>
 8008a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa8 <HAL_TIM_Base_Start+0x94>)
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d107      	bne.n	8008a82 <HAL_TIM_Base_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a72:	6891      	ldr	r1, [r2, #8]
 8008a74:	4b0d      	ldr	r3, [pc, #52]	@ (8008aac <HAL_TIM_Base_Start+0x98>)
 8008a76:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a78:	2b06      	cmp	r3, #6
 8008a7a:	d006      	beq.n	8008a8a <HAL_TIM_Base_Start+0x76>
 8008a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a80:	d003      	beq.n	8008a8a <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 8008a82:	6813      	ldr	r3, [r2, #0]
 8008a84:	f043 0301 	orr.w	r3, r3, #1
 8008a88:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008a8a:	2000      	movs	r0, #0
}
 8008a8c:	bc30      	pop	{r4, r5}
 8008a8e:	4770      	bx	lr
    return HAL_ERROR;
 8008a90:	2001      	movs	r0, #1
}
 8008a92:	4770      	bx	lr
 8008a94:	40010000 	.word	0x40010000
 8008a98:	40000800 	.word	0x40000800
 8008a9c:	40000400 	.word	0x40000400
 8008aa0:	40000c00 	.word	0x40000c00
 8008aa4:	40010400 	.word	0x40010400
 8008aa8:	40014000 	.word	0x40014000
 8008aac:	00010007 	.word	0x00010007

08008ab0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8008ab0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8008ab4:	2a01      	cmp	r2, #1
 8008ab6:	d06d      	beq.n	8008b94 <HAL_TIM_ConfigClockSource+0xe4>
  tmpsmcr = htim->Instance->SMCR;
 8008ab8:	6802      	ldr	r2, [r0, #0]
 8008aba:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8008abc:	2001      	movs	r0, #1
{
 8008abe:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac0:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8008ac2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac6:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aca:	4c59      	ldr	r4, [pc, #356]	@ (8008c30 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 8008acc:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ace:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8008ad0:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008ad2:	680c      	ldr	r4, [r1, #0]
 8008ad4:	2c70      	cmp	r4, #112	@ 0x70
 8008ad6:	f000 8087 	beq.w	8008be8 <HAL_TIM_ConfigClockSource+0x138>
 8008ada:	d825      	bhi.n	8008b28 <HAL_TIM_ConfigClockSource+0x78>
 8008adc:	2c50      	cmp	r4, #80	@ 0x50
 8008ade:	d05b      	beq.n	8008b98 <HAL_TIM_ConfigClockSource+0xe8>
 8008ae0:	d82b      	bhi.n	8008b3a <HAL_TIM_ConfigClockSource+0x8a>
 8008ae2:	2c40      	cmp	r4, #64	@ 0x40
 8008ae4:	f040 8090 	bne.w	8008c08 <HAL_TIM_ConfigClockSource+0x158>
                               sClockSourceConfig->ClockPolarity,
 8008ae8:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008aea:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008aec:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aee:	6a10      	ldr	r0, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008af0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008af4:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8008af8:	430c      	orrs	r4, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008afa:	494e      	ldr	r1, [pc, #312]	@ (8008c34 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008afc:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008afe:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b00:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b04:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008b08:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8008b0a:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8008b0c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b0e:	4001      	ands	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b10:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b14:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008b16:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008b18:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8008b1a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8008b1c:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008b24:	bc30      	pop	{r4, r5}
 8008b26:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8008b28:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8008b2c:	d04c      	beq.n	8008bc8 <HAL_TIM_ConfigClockSource+0x118>
 8008b2e:	d81f      	bhi.n	8008b70 <HAL_TIM_ConfigClockSource+0xc0>
 8008b30:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 8008b34:	bf18      	it	ne
 8008b36:	2001      	movne	r0, #1
 8008b38:	e7ee      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x68>
 8008b3a:	2c60      	cmp	r4, #96	@ 0x60
 8008b3c:	d1ec      	bne.n	8008b18 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 8008b3e:	6a10      	ldr	r0, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8008b40:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b42:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
                               sClockSourceConfig->ClockFilter);
 8008b46:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b48:	493a      	ldr	r1, [pc, #232]	@ (8008c34 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b4a:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b4e:	6a14      	ldr	r4, [r2, #32]
 8008b50:	f024 0410 	bic.w	r4, r4, #16
 8008b54:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b56:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b58:	f424 4470 	bic.w	r4, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b5c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8008b60:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 8008b62:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8008b64:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b66:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b68:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8008b6c:	6091      	str	r1, [r2, #8]
}
 8008b6e:	e7d2      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8008b70:	4931      	ldr	r1, [pc, #196]	@ (8008c38 <HAL_TIM_ConfigClockSource+0x188>)
 8008b72:	428c      	cmp	r4, r1
 8008b74:	d006      	beq.n	8008b84 <HAL_TIM_ConfigClockSource+0xd4>
 8008b76:	d94f      	bls.n	8008c18 <HAL_TIM_ConfigClockSource+0x168>
 8008b78:	4930      	ldr	r1, [pc, #192]	@ (8008c3c <HAL_TIM_ConfigClockSource+0x18c>)
 8008b7a:	428c      	cmp	r4, r1
 8008b7c:	d002      	beq.n	8008b84 <HAL_TIM_ConfigClockSource+0xd4>
 8008b7e:	3110      	adds	r1, #16
 8008b80:	428c      	cmp	r4, r1
 8008b82:	d1c9      	bne.n	8008b18 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8008b84:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b86:	492b      	ldr	r1, [pc, #172]	@ (8008c34 <HAL_TIM_ConfigClockSource+0x184>)
 8008b88:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b8a:	4321      	orrs	r1, r4
 8008b8c:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8008b90:	6091      	str	r1, [r2, #8]
}
 8008b92:	e7c0      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8008b94:	2002      	movs	r0, #2
}
 8008b96:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8008b98:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008b9a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008b9c:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b9e:	6a10      	ldr	r0, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ba0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ba4:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8008ba8:	430c      	orrs	r4, r1
  tmpsmcr &= ~TIM_SMCR_TS;
 8008baa:	4922      	ldr	r1, [pc, #136]	@ (8008c34 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bac:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bae:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bb0:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bb4:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008bb8:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8008bba:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8008bbc:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bbe:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bc0:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8008bc4:	6091      	str	r1, [r2, #8]
}
 8008bc6:	e7a6      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bc8:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8008bcc:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bce:	4328      	orrs	r0, r5
 8008bd0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bd2:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bd6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8008bda:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bdc:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bde:	6891      	ldr	r1, [r2, #8]
 8008be0:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8008be4:	6091      	str	r1, [r2, #8]
      break;
 8008be6:	e796      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008be8:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8008bec:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bee:	4328      	orrs	r0, r5
 8008bf0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bf2:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bf6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8008bfa:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8008bfc:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8008bfe:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c00:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8008c04:	6091      	str	r1, [r2, #8]
      break;
 8008c06:	e786      	b.n	8008b16 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8008c08:	d886      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x68>
 8008c0a:	2c20      	cmp	r4, #32
 8008c0c:	d0ba      	beq.n	8008b84 <HAL_TIM_ConfigClockSource+0xd4>
 8008c0e:	d80a      	bhi.n	8008c26 <HAL_TIM_ConfigClockSource+0x176>
 8008c10:	f034 0110 	bics.w	r1, r4, #16
 8008c14:	d180      	bne.n	8008b18 <HAL_TIM_ConfigClockSource+0x68>
 8008c16:	e7b5      	b.n	8008b84 <HAL_TIM_ConfigClockSource+0xd4>
 8008c18:	f024 0110 	bic.w	r1, r4, #16
 8008c1c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008c20:	f47f af7a 	bne.w	8008b18 <HAL_TIM_ConfigClockSource+0x68>
 8008c24:	e7ae      	b.n	8008b84 <HAL_TIM_ConfigClockSource+0xd4>
 8008c26:	2c30      	cmp	r4, #48	@ 0x30
 8008c28:	d0ac      	beq.n	8008b84 <HAL_TIM_ConfigClockSource+0xd4>
      status = HAL_ERROR;
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	e774      	b.n	8008b18 <HAL_TIM_ConfigClockSource+0x68>
 8008c2e:	bf00      	nop
 8008c30:	ffce0088 	.word	0xffce0088
 8008c34:	ffcfff8f 	.word	0xffcfff8f
 8008c38:	00100020 	.word	0x00100020
 8008c3c:	00100030 	.word	0x00100030

08008c40 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c40:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d04b      	beq.n	8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c48:	6803      	ldr	r3, [r0, #0]
 8008c4a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8008c4c:	2002      	movs	r0, #2
{
 8008c4e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c50:	4d24      	ldr	r5, [pc, #144]	@ (8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008c52:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c56:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8008c58:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008c5a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c5c:	d029      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8008c5e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008c62:	42ab      	cmp	r3, r5
 8008c64:	d025      	beq.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c66:	4d20      	ldr	r5, [pc, #128]	@ (8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c68:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c6c:	42ab      	cmp	r3, r5
 8008c6e:	bf18      	it	ne
 8008c70:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8008c74:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008c78:	bf0c      	ite	eq
 8008c7a:	f04f 0c01 	moveq.w	ip, #1
 8008c7e:	f04f 0c00 	movne.w	ip, #0
 8008c82:	42ab      	cmp	r3, r5
 8008c84:	bf08      	it	eq
 8008c86:	f04c 0c01 	orreq.w	ip, ip, #1
 8008c8a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008c8e:	42ab      	cmp	r3, r5
 8008c90:	bf08      	it	eq
 8008c92:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c96:	680d      	ldr	r5, [r1, #0]
 8008c98:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c9a:	4d14      	ldr	r5, [pc, #80]	@ (8008cec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8008c9c:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c9e:	42ab      	cmp	r3, r5
 8008ca0:	bf14      	ite	ne
 8008ca2:	4660      	movne	r0, ip
 8008ca4:	f04c 0001 	orreq.w	r0, ip, #1
 8008ca8:	b960      	cbnz	r0, 8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008caa:	4811      	ldr	r0, [pc, #68]	@ (8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008cac:	4283      	cmp	r3, r0
 8008cae:	d009      	beq.n	8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8008cb0:	e00d      	b.n	8008cce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cb2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cb4:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cb8:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cba:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cbc:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cc0:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8008cc2:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cc4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cc6:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cca:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ccc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008cce:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008cd0:	2101      	movs	r1, #1

  return HAL_OK;
 8008cd2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8008cd4:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008cd8:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8008cdc:	bc30      	pop	{r4, r5}
 8008cde:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008ce0:	2002      	movs	r0, #2
}
 8008ce2:	4770      	bx	lr
 8008ce4:	40010000 	.word	0x40010000
 8008ce8:	40000400 	.word	0x40000400
 8008cec:	40001800 	.word	0x40001800
 8008cf0:	40014000 	.word	0x40014000

08008cf4 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cf4:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8008cf8:	2b20      	cmp	r3, #32
 8008cfa:	d15d      	bne.n	8008db8 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cfc:	2900      	cmp	r1, #0
 8008cfe:	d060      	beq.n	8008dc2 <HAL_UART_Receive_IT+0xce>
{
 8008d00:	b430      	push	{r4, r5}
    if ((pData == NULL) || (Size == 0U))
 8008d02:	fab2 f482 	clz	r4, r2
 8008d06:	0964      	lsrs	r4, r4, #5
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	d057      	beq.n	8008dbc <HAL_UART_Receive_IT+0xc8>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d0c:	6803      	ldr	r3, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0e:	66c4      	str	r4, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d10:	4c57      	ldr	r4, [pc, #348]	@ (8008e70 <HAL_UART_Receive_IT+0x17c>)
 8008d12:	42a3      	cmp	r3, r4
 8008d14:	d002      	beq.n	8008d1c <HAL_UART_Receive_IT+0x28>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d16:	685c      	ldr	r4, [r3, #4]
 8008d18:	0224      	lsls	r4, r4, #8
 8008d1a:	d43c      	bmi.n	8008d96 <HAL_UART_Receive_IT+0xa2>
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr  = pData;
 8008d1c:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;
 8008d1e:	2400      	movs	r4, #0

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008d20:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8008d22:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  UART_MASK_COMPUTATION(huart);
 8008d26:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
  huart->RxXferCount = Size;
 8008d2a:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008d2e:	6744      	str	r4, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8008d30:	d066      	beq.n	8008e00 <HAL_UART_Receive_IT+0x10c>
 8008d32:	2900      	cmp	r1, #0
 8008d34:	d147      	bne.n	8008dc6 <HAL_UART_Receive_IT+0xd2>
 8008d36:	6901      	ldr	r1, [r0, #16]
 8008d38:	2900      	cmp	r1, #0
 8008d3a:	bf0c      	ite	eq
 8008d3c:	24ff      	moveq	r4, #255	@ 0xff
 8008d3e:	247f      	movne	r4, #127	@ 0x7f

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d40:	2100      	movs	r1, #0
  UART_MASK_COMPUTATION(huart);
 8008d42:	f8a0 4060 	strh.w	r4, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d46:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d4a:	2122      	movs	r1, #34	@ 0x22
 8008d4c:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	f103 0108 	add.w	r1, r3, #8
 8008d54:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d58:	f041 0101 	orr.w	r1, r1, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	f103 0508 	add.w	r5, r3, #8
 8008d60:	e845 1400 	strex	r4, r1, [r5]
 8008d64:	2c00      	cmp	r4, #0
 8008d66:	d1f3      	bne.n	8008d50 <HAL_UART_Receive_IT+0x5c>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d68:	6e41      	ldr	r1, [r0, #100]	@ 0x64
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d6a:	6885      	ldr	r5, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d6c:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d70:	6904      	ldr	r4, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d72:	d04c      	beq.n	8008e0e <HAL_UART_Receive_IT+0x11a>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d74:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8008d78:	d02e      	beq.n	8008dd8 <HAL_UART_Receive_IT+0xe4>
 8008d7a:	4a3e      	ldr	r2, [pc, #248]	@ (8008e74 <HAL_UART_Receive_IT+0x180>)
 8008d7c:	6742      	str	r2, [r0, #116]	@ 0x74
    {
      huart->RxISR = UART_RxISR_8BIT;
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d7e:	b374      	cbz	r4, 8008dde <HAL_UART_Receive_IT+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d84:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	e843 2100 	strex	r1, r2, [r3]
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	d1f7      	bne.n	8008d80 <HAL_UART_Receive_IT+0x8c>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d90:	2000      	movs	r0, #0
}
 8008d92:	bc30      	pop	{r4, r5}
 8008d94:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d96:	e853 4f00 	ldrex	r4, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d9a:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9e:	e843 4500 	strex	r5, r4, [r3]
 8008da2:	2d00      	cmp	r5, #0
 8008da4:	d0ba      	beq.n	8008d1c <HAL_UART_Receive_IT+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da6:	e853 4f00 	ldrex	r4, [r3]
 8008daa:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	e843 4500 	strex	r5, r4, [r3]
 8008db2:	2d00      	cmp	r5, #0
 8008db4:	d1ef      	bne.n	8008d96 <HAL_UART_Receive_IT+0xa2>
 8008db6:	e7b1      	b.n	8008d1c <HAL_UART_Receive_IT+0x28>
    return HAL_BUSY;
 8008db8:	2002      	movs	r0, #2
 8008dba:	4770      	bx	lr
      return HAL_ERROR;
 8008dbc:	2001      	movs	r0, #1
}
 8008dbe:	bc30      	pop	{r4, r5}
 8008dc0:	4770      	bx	lr
      return HAL_ERROR;
 8008dc2:	2001      	movs	r0, #1
}
 8008dc4:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8008dc6:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8008dca:	d1b9      	bne.n	8008d40 <HAL_UART_Receive_IT+0x4c>
 8008dcc:	6901      	ldr	r1, [r0, #16]
 8008dce:	2900      	cmp	r1, #0
 8008dd0:	bf0c      	ite	eq
 8008dd2:	247f      	moveq	r4, #127	@ 0x7f
 8008dd4:	243f      	movne	r4, #63	@ 0x3f
 8008dd6:	e7b3      	b.n	8008d40 <HAL_UART_Receive_IT+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dd8:	bb84      	cbnz	r4, 8008e3c <HAL_UART_Receive_IT+0x148>
 8008dda:	4a27      	ldr	r2, [pc, #156]	@ (8008e78 <HAL_UART_Receive_IT+0x184>)
 8008ddc:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008de2:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	e843 2100 	strex	r1, r2, [r3]
 8008dea:	2900      	cmp	r1, #0
 8008dec:	d0d0      	beq.n	8008d90 <HAL_UART_Receive_IT+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	e853 2f00 	ldrex	r2, [r3]
 8008df2:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	e843 2100 	strex	r1, r2, [r3]
 8008dfa:	2900      	cmp	r1, #0
 8008dfc:	d1ef      	bne.n	8008dde <HAL_UART_Receive_IT+0xea>
 8008dfe:	e7c7      	b.n	8008d90 <HAL_UART_Receive_IT+0x9c>
  UART_MASK_COMPUTATION(huart);
 8008e00:	6901      	ldr	r1, [r0, #16]
 8008e02:	f240 14ff 	movw	r4, #511	@ 0x1ff
 8008e06:	2900      	cmp	r1, #0
 8008e08:	bf18      	it	ne
 8008e0a:	24ff      	movne	r4, #255	@ 0xff
 8008e0c:	e798      	b.n	8008d40 <HAL_UART_Receive_IT+0x4c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008e0e:	f8b0 1068 	ldrh.w	r1, [r0, #104]	@ 0x68
 8008e12:	4291      	cmp	r1, r2
 8008e14:	d8ae      	bhi.n	8008d74 <HAL_UART_Receive_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e16:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8008e1a:	d012      	beq.n	8008e42 <HAL_UART_Receive_IT+0x14e>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008e1c:	4a17      	ldr	r2, [pc, #92]	@ (8008e7c <HAL_UART_Receive_IT+0x188>)
 8008e1e:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e20:	b994      	cbnz	r4, 8008e48 <HAL_UART_Receive_IT+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	f103 0208 	add.w	r2, r3, #8
 8008e26:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e2a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	f103 0008 	add.w	r0, r3, #8
 8008e32:	e840 2100 	strex	r1, r2, [r0]
 8008e36:	2900      	cmp	r1, #0
 8008e38:	d1f3      	bne.n	8008e22 <HAL_UART_Receive_IT+0x12e>
 8008e3a:	e7a9      	b.n	8008d90 <HAL_UART_Receive_IT+0x9c>
 8008e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8008e74 <HAL_UART_Receive_IT+0x180>)
 8008e3e:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e40:	e79e      	b.n	8008d80 <HAL_UART_Receive_IT+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e42:	b194      	cbz	r4, 8008e6a <HAL_UART_Receive_IT+0x176>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008e44:	4a0d      	ldr	r2, [pc, #52]	@ (8008e7c <HAL_UART_Receive_IT+0x188>)
 8008e46:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e50:	e843 2100 	strex	r1, r2, [r3]
 8008e54:	2900      	cmp	r1, #0
 8008e56:	d0e4      	beq.n	8008e22 <HAL_UART_Receive_IT+0x12e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	e853 2f00 	ldrex	r2, [r3]
 8008e5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	e843 2100 	strex	r1, r2, [r3]
 8008e64:	2900      	cmp	r1, #0
 8008e66:	d1ef      	bne.n	8008e48 <HAL_UART_Receive_IT+0x154>
 8008e68:	e7db      	b.n	8008e22 <HAL_UART_Receive_IT+0x12e>
 8008e6a:	4a05      	ldr	r2, [pc, #20]	@ (8008e80 <HAL_UART_Receive_IT+0x18c>)
 8008e6c:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e6e:	e7d8      	b.n	8008e22 <HAL_UART_Receive_IT+0x12e>
 8008e70:	58000c00 	.word	0x58000c00
 8008e74:	0800932d 	.word	0x0800932d
 8008e78:	080092e5 	.word	0x080092e5
 8008e7c:	08009371 	.word	0x08009371
 8008e80:	08009599 	.word	0x08009599

08008e84 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop

08008e88 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop

08008e8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e8c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e8e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e96:	f7ff fff7 	bl	8008e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e9a:	bd08      	pop	{r3, pc}

08008e9c <HAL_UARTEx_RxEventCallback>:
}
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop

08008ea0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ea0:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ea2:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ea6:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8008ea8:	ea12 0f0c 	tst.w	r2, ip
{
 8008eac:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008eae:	681d      	ldr	r5, [r3, #0]
{
 8008eb0:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008eb2:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 8008eb4:	d145      	bne.n	8008f42 <HAL_UART_IRQHandler+0xa2>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008eb6:	0696      	lsls	r6, r2, #26
 8008eb8:	d507      	bpl.n	8008eca <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008eba:	f005 0c20 	and.w	ip, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ebe:	f001 5680 	and.w	r6, r1, #268435456	@ 0x10000000
 8008ec2:	ea5c 0c06 	orrs.w	ip, ip, r6
 8008ec6:	f040 812a 	bne.w	800911e <HAL_UART_IRQHandler+0x27e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eca:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8008ecc:	2801      	cmp	r0, #1
 8008ece:	f000 80cd 	beq.w	800906c <HAL_UART_IRQHandler+0x1cc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ed2:	02d0      	lsls	r0, r2, #11
 8008ed4:	d41d      	bmi.n	8008f12 <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ed6:	0610      	lsls	r0, r2, #24
 8008ed8:	d506      	bpl.n	8008ee8 <HAL_UART_IRQHandler+0x48>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008eda:	f401 0100 	and.w	r1, r1, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ede:	f005 0080 	and.w	r0, r5, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ee2:	4308      	orrs	r0, r1
 8008ee4:	f040 8122 	bne.w	800912c <HAL_UART_IRQHandler+0x28c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ee8:	0651      	lsls	r1, r2, #25
 8008eea:	d51c      	bpl.n	8008f26 <HAL_UART_IRQHandler+0x86>
 8008eec:	066e      	lsls	r6, r5, #25
 8008eee:	d51a      	bpl.n	8008f26 <HAL_UART_IRQHandler+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef8:	e843 2100 	strex	r1, r2, [r3]
 8008efc:	2900      	cmp	r1, #0
 8008efe:	d1f7      	bne.n	8008ef0 <HAL_UART_IRQHandler+0x50>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f00:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f02:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f04:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8008f06:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->TxISR = NULL;
 8008f0a:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8008f0c:	f7ff ffba 	bl	8008e84 <HAL_UART_TxCpltCallback>
}
 8008f10:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f12:	024e      	lsls	r6, r1, #9
 8008f14:	d5df      	bpl.n	8008ed6 <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008f1a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f1c:	621a      	str	r2, [r3, #32]
}
 8008f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008f22:	f000 bfbf 	b.w	8009ea4 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008f26:	0210      	lsls	r0, r2, #8
 8008f28:	d502      	bpl.n	8008f30 <HAL_UART_IRQHandler+0x90>
 8008f2a:	0069      	lsls	r1, r5, #1
 8008f2c:	f100 813d 	bmi.w	80091aa <HAL_UART_IRQHandler+0x30a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008f30:	01d3      	lsls	r3, r2, #7
 8008f32:	d5ed      	bpl.n	8008f10 <HAL_UART_IRQHandler+0x70>
 8008f34:	2d00      	cmp	r5, #0
 8008f36:	daeb      	bge.n	8008f10 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f38:	4620      	mov	r0, r4
}
 8008f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f3e:	f000 bfb3 	b.w	8009ea8 <HAL_UARTEx_RxFifoFullCallback>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f42:	48b9      	ldr	r0, [pc, #740]	@ (8009228 <HAL_UART_IRQHandler+0x388>)
 8008f44:	4008      	ands	r0, r1
 8008f46:	f040 8125 	bne.w	8009194 <HAL_UART_IRQHandler+0x2f4>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f4a:	4eb8      	ldr	r6, [pc, #736]	@ (800922c <HAL_UART_IRQHandler+0x38c>)
 8008f4c:	4235      	tst	r5, r6
 8008f4e:	d0bc      	beq.n	8008eca <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f50:	07d6      	lsls	r6, r2, #31
 8008f52:	d51a      	bpl.n	8008f8a <HAL_UART_IRQHandler+0xea>
 8008f54:	05ee      	lsls	r6, r5, #23
 8008f56:	f140 8103 	bpl.w	8009160 <HAL_UART_IRQHandler+0x2c0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f5a:	2601      	movs	r6, #1
 8008f5c:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f5e:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8008f62:	f046 0601 	orr.w	r6, r6, #1
 8008f66:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f6a:	0796      	lsls	r6, r2, #30
 8008f6c:	f140 80fb 	bpl.w	8009166 <HAL_UART_IRQHandler+0x2c6>
 8008f70:	07ce      	lsls	r6, r1, #31
 8008f72:	d50a      	bpl.n	8008f8a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f74:	2602      	movs	r6, #2
 8008f76:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f78:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8008f7c:	f046 0604 	orr.w	r6, r6, #4
 8008f80:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f84:	0756      	lsls	r6, r2, #29
 8008f86:	f100 80f4 	bmi.w	8009172 <HAL_UART_IRQHandler+0x2d2>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f8a:	0716      	lsls	r6, r2, #28
 8008f8c:	d50b      	bpl.n	8008fa6 <HAL_UART_IRQHandler+0x106>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f8e:	f005 0620 	and.w	r6, r5, #32
 8008f92:	4306      	orrs	r6, r0
 8008f94:	d007      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x106>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f96:	2008      	movs	r0, #8
 8008f98:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f9a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8008f9e:	f040 0008 	orr.w	r0, r0, #8
 8008fa2:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fa6:	0510      	lsls	r0, r2, #20
 8008fa8:	d50a      	bpl.n	8008fc0 <HAL_UART_IRQHandler+0x120>
 8008faa:	016e      	lsls	r6, r5, #5
 8008fac:	d508      	bpl.n	8008fc0 <HAL_UART_IRQHandler+0x120>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fae:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008fb2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008fb4:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8008fb8:	f040 0020 	orr.w	r0, r0, #32
 8008fbc:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fc0:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d0a3      	beq.n	8008f10 <HAL_UART_IRQHandler+0x70>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008fc8:	0690      	lsls	r0, r2, #26
 8008fca:	d506      	bpl.n	8008fda <HAL_UART_IRQHandler+0x13a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fcc:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fd0:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8008fd4:	430d      	orrs	r5, r1
 8008fd6:	f040 80d5 	bne.w	8009184 <HAL_UART_IRQHandler+0x2e4>
      errorcode = huart->ErrorCode;
 8008fda:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fde:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008fe0:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fe4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8008fe8:	ea52 0501 	orrs.w	r5, r2, r1
 8008fec:	f000 80e2 	beq.w	80091b4 <HAL_UART_IRQHandler+0x314>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ff4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	e843 2100 	strex	r1, r2, [r3]
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d1f7      	bne.n	8008ff0 <HAL_UART_IRQHandler+0x150>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009000:	488b      	ldr	r0, [pc, #556]	@ (8009230 <HAL_UART_IRQHandler+0x390>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009002:	f103 0208 	add.w	r2, r3, #8
 8009006:	e852 2f00 	ldrex	r2, [r2]
 800900a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	f103 0508 	add.w	r5, r3, #8
 8009010:	e845 2100 	strex	r1, r2, [r5]
 8009014:	2900      	cmp	r1, #0
 8009016:	d1f4      	bne.n	8009002 <HAL_UART_IRQHandler+0x162>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009018:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800901a:	2a01      	cmp	r2, #1
 800901c:	f000 808e 	beq.w	800913c <HAL_UART_IRQHandler+0x29c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009020:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009022:	2120      	movs	r1, #32
 8009024:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009028:	66e2      	str	r2, [r4, #108]	@ 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902a:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800902c:	6762      	str	r2, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902e:	064a      	lsls	r2, r1, #25
 8009030:	f140 80b7 	bpl.w	80091a2 <HAL_UART_IRQHandler+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	f103 0208 	add.w	r2, r3, #8
 8009038:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800903c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	f103 0008 	add.w	r0, r3, #8
 8009044:	e840 2100 	strex	r1, r2, [r0]
 8009048:	2900      	cmp	r1, #0
 800904a:	d1f3      	bne.n	8009034 <HAL_UART_IRQHandler+0x194>
          if (huart->hdmarx != NULL)
 800904c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8009050:	2800      	cmp	r0, #0
 8009052:	f000 80a6 	beq.w	80091a2 <HAL_UART_IRQHandler+0x302>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009056:	4b77      	ldr	r3, [pc, #476]	@ (8009234 <HAL_UART_IRQHandler+0x394>)
 8009058:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800905a:	f7fc fd75 	bl	8005b48 <HAL_DMA_Abort_IT>
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f af56 	beq.w	8008f10 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009064:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8009068:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800906a:	e05c      	b.n	8009126 <HAL_UART_IRQHandler+0x286>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800906c:	06d6      	lsls	r6, r2, #27
 800906e:	f57f af30 	bpl.w	8008ed2 <HAL_UART_IRQHandler+0x32>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009072:	06e8      	lsls	r0, r5, #27
 8009074:	f57f af2d 	bpl.w	8008ed2 <HAL_UART_IRQHandler+0x32>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009078:	2210      	movs	r2, #16
          && (nb_remaining_rx_data < huart->RxXferSize))
 800907a:	f8b4 505c 	ldrh.w	r5, [r4, #92]	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800907e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	0656      	lsls	r6, r2, #25
 8009084:	f140 809c 	bpl.w	80091c0 <HAL_UART_IRQHandler+0x320>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009088:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800908c:	6801      	ldr	r1, [r0, #0]
 800908e:	6849      	ldr	r1, [r1, #4]
 8009090:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8009092:	2900      	cmp	r1, #0
 8009094:	f000 80d0 	beq.w	8009238 <HAL_UART_IRQHandler+0x398>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009098:	42a9      	cmp	r1, r5
 800909a:	f080 80cd 	bcs.w	8009238 <HAL_UART_IRQHandler+0x398>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800909e:	69c2      	ldr	r2, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 80090a0:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090a4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80090a8:	d02f      	beq.n	800910a <HAL_UART_IRQHandler+0x26a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	e843 2100 	strex	r1, r2, [r3]
 80090b6:	2900      	cmp	r1, #0
 80090b8:	d1f7      	bne.n	80090aa <HAL_UART_IRQHandler+0x20a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	f103 0208 	add.w	r2, r3, #8
 80090be:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	f103 0508 	add.w	r5, r3, #8
 80090ca:	e845 2100 	strex	r1, r2, [r5]
 80090ce:	2900      	cmp	r1, #0
 80090d0:	d1f3      	bne.n	80090ba <HAL_UART_IRQHandler+0x21a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	f103 0208 	add.w	r2, r3, #8
 80090d6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	f103 0508 	add.w	r5, r3, #8
 80090e2:	e845 2100 	strex	r1, r2, [r5]
 80090e6:	2900      	cmp	r1, #0
 80090e8:	d1f3      	bne.n	80090d2 <HAL_UART_IRQHandler+0x232>
          huart->RxState = HAL_UART_STATE_READY;
 80090ea:	2220      	movs	r2, #32
 80090ec:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f0:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f2:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fa:	e843 2100 	strex	r1, r2, [r3]
 80090fe:	2900      	cmp	r1, #0
 8009100:	d1f7      	bne.n	80090f2 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009102:	f7fc fb6b 	bl	80057dc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009106:	f8b4 505c 	ldrh.w	r5, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800910a:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800910c:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800910e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009110:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 8009114:	1a69      	subs	r1, r5, r1
 8009116:	b289      	uxth	r1, r1
 8009118:	f7ff fec0 	bl	8008e9c <HAL_UARTEx_RxEventCallback>
}
 800911c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800911e:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8009120:	2b00      	cmp	r3, #0
 8009122:	f43f aef5 	beq.w	8008f10 <HAL_UART_IRQHandler+0x70>
}
 8009126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800912a:	4718      	bx	r3
    if (huart->TxISR != NULL)
 800912c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800912e:	2b00      	cmp	r3, #0
 8009130:	f43f aeee 	beq.w	8008f10 <HAL_UART_IRQHandler+0x70>
      huart->TxISR(huart);
 8009134:	4620      	mov	r0, r4
}
 8009136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800913a:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009140:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009144:	e843 2100 	strex	r1, r2, [r3]
 8009148:	2900      	cmp	r1, #0
 800914a:	f43f af69 	beq.w	8009020 <HAL_UART_IRQHandler+0x180>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	e853 2f00 	ldrex	r2, [r3]
 8009152:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	e843 2100 	strex	r1, r2, [r3]
 800915a:	2900      	cmp	r1, #0
 800915c:	d1ee      	bne.n	800913c <HAL_UART_IRQHandler+0x29c>
 800915e:	e75f      	b.n	8009020 <HAL_UART_IRQHandler+0x180>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009160:	0796      	lsls	r6, r2, #30
 8009162:	f53f af12 	bmi.w	8008f8a <HAL_UART_IRQHandler+0xea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009166:	0756      	lsls	r6, r2, #29
 8009168:	f57f af0f 	bpl.w	8008f8a <HAL_UART_IRQHandler+0xea>
 800916c:	07ce      	lsls	r6, r1, #31
 800916e:	f57f af0c 	bpl.w	8008f8a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009172:	2604      	movs	r6, #4
 8009174:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009176:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800917a:	f046 0602 	orr.w	r6, r6, #2
 800917e:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 8009182:	e702      	b.n	8008f8a <HAL_UART_IRQHandler+0xea>
        if (huart->RxISR != NULL)
 8009184:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8009186:	2a00      	cmp	r2, #0
 8009188:	f43f af27 	beq.w	8008fda <HAL_UART_IRQHandler+0x13a>
          huart->RxISR(huart);
 800918c:	4620      	mov	r0, r4
 800918e:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	e722      	b.n	8008fda <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009194:	07d6      	lsls	r6, r2, #31
 8009196:	f57f aee8 	bpl.w	8008f6a <HAL_UART_IRQHandler+0xca>
 800919a:	05ee      	lsls	r6, r5, #23
 800919c:	f57f aee5 	bpl.w	8008f6a <HAL_UART_IRQHandler+0xca>
 80091a0:	e6db      	b.n	8008f5a <HAL_UART_IRQHandler+0xba>
            HAL_UART_ErrorCallback(huart);
 80091a2:	4620      	mov	r0, r4
 80091a4:	f7ff fe70 	bl	8008e88 <HAL_UART_ErrorCallback>
}
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091aa:	4620      	mov	r0, r4
}
 80091ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091b0:	f000 be7c 	b.w	8009eac <HAL_UARTEx_TxFifoEmptyCallback>
        HAL_UART_ErrorCallback(huart);
 80091b4:	4620      	mov	r0, r4
 80091b6:	f7ff fe67 	bl	8008e88 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ba:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 80091be:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091c0:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 80091c4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091c8:	1a6d      	subs	r5, r5, r1
      if ((huart->RxXferCount > 0U)
 80091ca:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091cc:	b2a9      	uxth	r1, r5
          && (nb_rx_data > 0U))
 80091ce:	2900      	cmp	r1, #0
 80091d0:	f43f ae9e 	beq.w	8008f10 <HAL_UART_IRQHandler+0x70>
 80091d4:	2a00      	cmp	r2, #0
 80091d6:	f43f ae9b 	beq.w	8008f10 <HAL_UART_IRQHandler+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091da:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091de:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e2:	e843 2000 	strex	r0, r2, [r3]
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d1f7      	bne.n	80091da <HAL_UART_IRQHandler+0x33a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091ea:	4d11      	ldr	r5, [pc, #68]	@ (8009230 <HAL_UART_IRQHandler+0x390>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	f103 0208 	add.w	r2, r3, #8
 80091f0:	e852 2f00 	ldrex	r2, [r2]
 80091f4:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	f103 0608 	add.w	r6, r3, #8
 80091fa:	e846 2000 	strex	r0, r2, [r6]
 80091fe:	2800      	cmp	r0, #0
 8009200:	d1f4      	bne.n	80091ec <HAL_UART_IRQHandler+0x34c>
        huart->RxState = HAL_UART_STATE_READY;
 8009202:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8009204:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009206:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800920a:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009210:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	e843 2000 	strex	r0, r2, [r3]
 8009218:	2800      	cmp	r0, #0
 800921a:	d1f7      	bne.n	800920c <HAL_UART_IRQHandler+0x36c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800921c:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800921e:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009220:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009222:	f7ff fe3b 	bl	8008e9c <HAL_UARTEx_RxEventCallback>
}
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	10000001 	.word	0x10000001
 800922c:	04000120 	.word	0x04000120
 8009230:	effffffe 	.word	0xeffffffe
 8009234:	08008e8d 	.word	0x08008e8d
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009238:	42a9      	cmp	r1, r5
 800923a:	f47f ae69 	bne.w	8008f10 <HAL_UART_IRQHandler+0x70>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800923e:	69c3      	ldr	r3, [r0, #28]
 8009240:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009244:	d0ea      	beq.n	800921c <HAL_UART_IRQHandler+0x37c>
}
 8009246:	bd70      	pop	{r4, r5, r6, pc}

08009248 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8009248:	6803      	ldr	r3, [r0, #0]
 800924a:	b510      	push	{r4, lr}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009250:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	e843 2100 	strex	r1, r2, [r3]
 8009258:	2900      	cmp	r1, #0
 800925a:	d1f7      	bne.n	800924c <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	f103 0208 	add.w	r2, r3, #8
 8009260:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009264:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	f103 0408 	add.w	r4, r3, #8
 800926c:	e844 2100 	strex	r1, r2, [r4]
 8009270:	2900      	cmp	r1, #0
 8009272:	d1f3      	bne.n	800925c <UART_RxISR_16BIT.part.0+0x14>
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009274:	4a1a      	ldr	r2, [pc, #104]	@ (80092e0 <UART_RxISR_16BIT.part.0+0x98>)
      huart->RxState = HAL_UART_STATE_READY;
 8009276:	2420      	movs	r4, #32
      huart->RxISR = NULL;
 8009278:	6741      	str	r1, [r0, #116]	@ 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800927a:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
 800927c:	f8c0 408c 	str.w	r4, [r0, #140]	@ 0x8c
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009280:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009282:	d002      	beq.n	800928a <UART_RxISR_16BIT.part.0+0x42>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	0211      	lsls	r1, r2, #8
 8009288:	d416      	bmi.n	80092b8 <UART_RxISR_16BIT.part.0+0x70>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800928a:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800928c:	2a01      	cmp	r2, #1
 800928e:	d124      	bne.n	80092da <UART_RxISR_16BIT.part.0+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009290:	2200      	movs	r2, #0
 8009292:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009298:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	e843 2100 	strex	r1, r2, [r3]
 80092a0:	2900      	cmp	r1, #0
 80092a2:	d1f7      	bne.n	8009294 <UART_RxISR_16BIT.part.0+0x4c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092a4:	69da      	ldr	r2, [r3, #28]
 80092a6:	06d2      	lsls	r2, r2, #27
 80092a8:	d501      	bpl.n	80092ae <UART_RxISR_16BIT.part.0+0x66>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092aa:	2210      	movs	r2, #16
 80092ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092ae:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 80092b2:	f7ff fdf3 	bl	8008e9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092b6:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092bc:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c0:	e843 2100 	strex	r1, r2, [r3]
 80092c4:	2900      	cmp	r1, #0
 80092c6:	d0e0      	beq.n	800928a <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	e853 2f00 	ldrex	r2, [r3]
 80092cc:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d0:	e843 2100 	strex	r1, r2, [r3]
 80092d4:	2900      	cmp	r1, #0
 80092d6:	d1ef      	bne.n	80092b8 <UART_RxISR_16BIT.part.0+0x70>
 80092d8:	e7d7      	b.n	800928a <UART_RxISR_16BIT.part.0+0x42>
        HAL_UART_RxCpltCallback(huart);
 80092da:	f7f8 fe51 	bl	8001f80 <HAL_UART_RxCpltCallback>
}
 80092de:	bd10      	pop	{r4, pc}
 80092e0:	58000c00 	.word	0x58000c00

080092e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092e4:	b410      	push	{r4}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092e6:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 80092ea:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092ee:	2c22      	cmp	r4, #34	@ 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092f0:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092f2:	d006      	beq.n	8009302 <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092f4:	6993      	ldr	r3, [r2, #24]
 80092f6:	f043 0308 	orr.w	r3, r3, #8
 80092fa:	6193      	str	r3, [r2, #24]
  }
}
 80092fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009300:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009302:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8009304:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8009306:	4011      	ands	r1, r2
 8009308:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 800930c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr += 2U;
 8009310:	6584      	str	r4, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8009312:	3a01      	subs	r2, #1
 8009314:	b292      	uxth	r2, r2
 8009316:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 800931a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800931e:	b29b      	uxth	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1eb      	bne.n	80092fc <UART_RxISR_16BIT+0x18>
}
 8009324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009328:	f7ff bf8e 	b.w	8009248 <UART_RxISR_16BIT.part.0>

0800932c <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800932c:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 8009330:	f8b0 c060 	ldrh.w	ip, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009334:	2922      	cmp	r1, #34	@ 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009336:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009338:	d004      	beq.n	8009344 <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800933a:	6993      	ldr	r3, [r2, #24]
 800933c:	f043 0308 	orr.w	r3, r3, #8
 8009340:	6193      	str	r3, [r2, #24]
}
 8009342:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009344:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009346:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8009348:	ea02 020c 	and.w	r2, r2, ip
 800934c:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 800934e:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr++;
 8009352:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8009354:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 8009356:	3101      	adds	r1, #1
    huart->RxXferCount--;
 8009358:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 800935a:	6581      	str	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800935c:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8009360:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8009364:	b29b      	uxth	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1eb      	bne.n	8009342 <UART_RxISR_8BIT+0x16>
 800936a:	f7ff bf6d 	b.w	8009248 <UART_RxISR_16BIT.part.0>
 800936e:	bf00      	nop

08009370 <UART_RxISR_8BIT_FIFOEN>:
{
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009370:	6803      	ldr	r3, [r0, #0]
{
 8009372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009376:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009378:	6819      	ldr	r1, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800937a:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800937c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 8009380:	f8b0 9060 	ldrh.w	r9, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009384:	2a22      	cmp	r2, #34	@ 0x22
 8009386:	d005      	beq.n	8009394 <UART_RxISR_8BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009388:	699a      	ldr	r2, [r3, #24]
 800938a:	f042 0208 	orr.w	r2, r2, #8
 800938e:	619a      	str	r2, [r3, #24]
  }
}
 8009390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009394:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8009398:	4604      	mov	r4, r0
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800939a:	f401 7a80 	and.w	sl, r1, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800939e:	f007 0701 	and.w	r7, r7, #1
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 80d8 	beq.w	8009558 <UART_RxISR_8BIT_FIFOEN+0x1e8>
 80093a8:	2f00      	cmp	r7, #0
 80093aa:	f000 80a3 	beq.w	80094f4 <UART_RxISR_8BIT_FIFOEN+0x184>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ae:	2600      	movs	r6, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093b0:	2704      	movs	r7, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093b2:	f04f 0802 	mov.w	r8, #2
 80093b6:	e004      	b.n	80093c2 <UART_RxISR_8BIT_FIFOEN+0x52>
      if (huart->RxXferCount == 0U)
 80093b8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d03e      	beq.n	8009440 <UART_RxISR_8BIT_FIFOEN+0xd0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093c2:	06ab      	lsls	r3, r5, #26
 80093c4:	d573      	bpl.n	80094ae <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093c6:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80093c8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80093cc:	ea03 0309 	and.w	r3, r3, r9
 80093d0:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 80093d2:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093d6:	6823      	ldr	r3, [r4, #0]
      huart->RxXferCount--;
 80093d8:	3a01      	subs	r2, #1
      huart->pRxBuffPtr++;
 80093da:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80093dc:	b292      	uxth	r2, r2
      huart->pRxBuffPtr++;
 80093de:	3101      	adds	r1, #1
      huart->RxXferCount--;
 80093e0:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093e4:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 80093e6:	65a1      	str	r1, [r4, #88]	@ 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093e8:	0768      	lsls	r0, r5, #29
 80093ea:	d0e5      	beq.n	80093b8 <UART_RxISR_8BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093ec:	07e9      	lsls	r1, r5, #31
 80093ee:	d50a      	bpl.n	8009406 <UART_RxISR_8BIT_FIFOEN+0x96>
 80093f0:	f1ba 0f00 	cmp.w	sl, #0
 80093f4:	d007      	beq.n	8009406 <UART_RxISR_8BIT_FIFOEN+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093f6:	2201      	movs	r2, #1
 80093f8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093fa:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80093fe:	f042 0201 	orr.w	r2, r2, #1
 8009402:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009406:	07aa      	lsls	r2, r5, #30
 8009408:	d507      	bpl.n	800941a <UART_RxISR_8BIT_FIFOEN+0xaa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800940a:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800940e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8009412:	f042 0204 	orr.w	r2, r2, #4
 8009416:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800941a:	0768      	lsls	r0, r5, #29
 800941c:	d506      	bpl.n	800942c <UART_RxISR_8BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800941e:	621f      	str	r7, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009420:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009424:	f043 0302 	orr.w	r3, r3, #2
 8009428:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800942c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0c1      	beq.n	80093b8 <UART_RxISR_8BIT_FIFOEN+0x48>
          HAL_UART_ErrorCallback(huart);
 8009434:	4620      	mov	r0, r4
 8009436:	f7ff fd27 	bl	8008e88 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800943a:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 800943e:	e7bb      	b.n	80093b8 <UART_RxISR_8BIT_FIFOEN+0x48>
 8009440:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009446:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944a:	e843 2100 	strex	r1, r2, [r3]
 800944e:	2900      	cmp	r1, #0
 8009450:	d1f7      	bne.n	8009442 <UART_RxISR_8BIT_FIFOEN+0xd2>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009452:	484e      	ldr	r0, [pc, #312]	@ (800958c <UART_RxISR_8BIT_FIFOEN+0x21c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	f103 0208 	add.w	r2, r3, #8
 8009458:	e852 2f00 	ldrex	r2, [r2]
 800945c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	f103 0508 	add.w	r5, r3, #8
 8009462:	e845 2100 	strex	r1, r2, [r5]
 8009466:	2900      	cmp	r1, #0
 8009468:	d1f4      	bne.n	8009454 <UART_RxISR_8BIT_FIFOEN+0xe4>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800946a:	4a49      	ldr	r2, [pc, #292]	@ (8009590 <UART_RxISR_8BIT_FIFOEN+0x220>)
        huart->RxState = HAL_UART_STATE_READY;
 800946c:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 800946e:	6761      	str	r1, [r4, #116]	@ 0x74
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009470:	4293      	cmp	r3, r2
        huart->RxState = HAL_UART_STATE_READY;
 8009472:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009476:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009478:	d002      	beq.n	8009480 <UART_RxISR_8BIT_FIFOEN+0x110>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	0211      	lsls	r1, r2, #8
 800947e:	d46f      	bmi.n	8009560 <UART_RxISR_8BIT_FIFOEN+0x1f0>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009480:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009482:	2a01      	cmp	r2, #1
 8009484:	d17d      	bne.n	8009582 <UART_RxISR_8BIT_FIFOEN+0x212>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009486:	2200      	movs	r2, #0
 8009488:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800948e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	e843 2100 	strex	r1, r2, [r3]
 8009496:	2900      	cmp	r1, #0
 8009498:	d1f7      	bne.n	800948a <UART_RxISR_8BIT_FIFOEN+0x11a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800949a:	69da      	ldr	r2, [r3, #28]
 800949c:	06d2      	lsls	r2, r2, #27
 800949e:	d501      	bpl.n	80094a4 <UART_RxISR_8BIT_FIFOEN+0x134>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094a0:	2210      	movs	r2, #16
 80094a2:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094a4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80094a8:	4620      	mov	r0, r4
 80094aa:	f7ff fcf7 	bl	8008e9c <HAL_UARTEx_RxEventCallback>
    rxdatacount = huart->RxXferCount;
 80094ae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80094b2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f43f af6b 	beq.w	8009390 <UART_RxISR_8BIT_FIFOEN+0x20>
 80094ba:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 80094be:	429a      	cmp	r2, r3
 80094c0:	f67f af66 	bls.w	8009390 <UART_RxISR_8BIT_FIFOEN+0x20>
 80094c4:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	f103 0208 	add.w	r2, r3, #8
 80094ca:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80094ce:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	f103 0008 	add.w	r0, r3, #8
 80094d6:	e840 2100 	strex	r1, r2, [r0]
 80094da:	2900      	cmp	r1, #0
 80094dc:	d1f3      	bne.n	80094c6 <UART_RxISR_8BIT_FIFOEN+0x156>
      huart->RxISR = UART_RxISR_8BIT;
 80094de:	4a2d      	ldr	r2, [pc, #180]	@ (8009594 <UART_RxISR_8BIT_FIFOEN+0x224>)
 80094e0:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094e6:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	e843 2100 	strex	r1, r2, [r3]
 80094ee:	2900      	cmp	r1, #0
 80094f0:	d1f7      	bne.n	80094e2 <UART_RxISR_8BIT_FIFOEN+0x172>
 80094f2:	e74d      	b.n	8009390 <UART_RxISR_8BIT_FIFOEN+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094f4:	2601      	movs	r6, #1
 80094f6:	e004      	b.n	8009502 <UART_RxISR_8BIT_FIFOEN+0x192>
      if (huart->RxXferCount == 0U)
 80094f8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d09e      	beq.n	8009440 <UART_RxISR_8BIT_FIFOEN+0xd0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009502:	06a8      	lsls	r0, r5, #26
 8009504:	d5d3      	bpl.n	80094ae <UART_RxISR_8BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009506:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009508:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800950a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800950c:	ea03 0309 	and.w	r3, r3, r9
 8009510:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8009512:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr++;
 8009516:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8009518:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 800951a:	3201      	adds	r2, #1
      huart->RxXferCount--;
 800951c:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 800951e:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8009520:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009528:	0769      	lsls	r1, r5, #29
 800952a:	d0e5      	beq.n	80094f8 <UART_RxISR_8BIT_FIFOEN+0x188>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800952c:	07ea      	lsls	r2, r5, #31
 800952e:	d509      	bpl.n	8009544 <UART_RxISR_8BIT_FIFOEN+0x1d4>
 8009530:	f1ba 0f00 	cmp.w	sl, #0
 8009534:	d006      	beq.n	8009544 <UART_RxISR_8BIT_FIFOEN+0x1d4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009536:	621e      	str	r6, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009538:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800953c:	f043 0301 	orr.w	r3, r3, #1
 8009540:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009544:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0d5      	beq.n	80094f8 <UART_RxISR_8BIT_FIFOEN+0x188>
          HAL_UART_ErrorCallback(huart);
 800954c:	4620      	mov	r0, r4
 800954e:	f7ff fc9b 	bl	8008e88 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009552:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
 8009556:	e7cf      	b.n	80094f8 <UART_RxISR_8BIT_FIFOEN+0x188>
    rxdatacount = huart->RxXferCount;
 8009558:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
}
 800955c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009560:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009564:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009568:	e843 2100 	strex	r1, r2, [r3]
 800956c:	2900      	cmp	r1, #0
 800956e:	d087      	beq.n	8009480 <UART_RxISR_8BIT_FIFOEN+0x110>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	e853 2f00 	ldrex	r2, [r3]
 8009574:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	e843 2100 	strex	r1, r2, [r3]
 800957c:	2900      	cmp	r1, #0
 800957e:	d1ef      	bne.n	8009560 <UART_RxISR_8BIT_FIFOEN+0x1f0>
 8009580:	e77e      	b.n	8009480 <UART_RxISR_8BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 8009582:	4620      	mov	r0, r4
 8009584:	f7f8 fcfc 	bl	8001f80 <HAL_UART_RxCpltCallback>
 8009588:	e791      	b.n	80094ae <UART_RxISR_8BIT_FIFOEN+0x13e>
 800958a:	bf00      	nop
 800958c:	effffffe 	.word	0xeffffffe
 8009590:	58000c00 	.word	0x58000c00
 8009594:	0800932d 	.word	0x0800932d

08009598 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009598:	6803      	ldr	r3, [r0, #0]
{
 800959a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800959e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095a0:	6819      	ldr	r1, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095a2:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095a4:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
  uint16_t  uhMask = huart->Mask;
 80095a8:	f8b0 9060 	ldrh.w	r9, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095ac:	2a22      	cmp	r2, #34	@ 0x22
 80095ae:	d005      	beq.n	80095bc <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095b0:	699a      	ldr	r2, [r3, #24]
 80095b2:	f042 0208 	orr.w	r2, r2, #8
 80095b6:	619a      	str	r2, [r3, #24]
  }
}
 80095b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095bc:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 80095c0:	4604      	mov	r4, r0
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095c2:	f401 7a80 	and.w	sl, r1, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095c6:	f007 0701 	and.w	r7, r7, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 80d4 	beq.w	8009778 <UART_RxISR_16BIT_FIFOEN+0x1e0>
 80095d0:	2f00      	cmp	r7, #0
 80095d2:	f000 80a1 	beq.w	8009718 <UART_RxISR_16BIT_FIFOEN+0x180>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d6:	2600      	movs	r6, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095d8:	2704      	movs	r7, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095da:	f04f 0802 	mov.w	r8, #2
 80095de:	e004      	b.n	80095ea <UART_RxISR_16BIT_FIFOEN+0x52>
      if (huart->RxXferCount == 0U)
 80095e0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d03c      	beq.n	8009664 <UART_RxISR_16BIT_FIFOEN+0xcc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095ea:	06ab      	lsls	r3, r5, #26
 80095ec:	d571      	bpl.n	80096d2 <UART_RxISR_16BIT_FIFOEN+0x13a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095ee:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 80095f0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80095f4:	ea09 0202 	and.w	r2, r9, r2
 80095f8:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 80095fc:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr += 2U;
 8009600:	65a1      	str	r1, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8009602:	3a01      	subs	r2, #1
 8009604:	b292      	uxth	r2, r2
 8009606:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800960a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800960c:	0768      	lsls	r0, r5, #29
 800960e:	d0e7      	beq.n	80095e0 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009610:	07e9      	lsls	r1, r5, #31
 8009612:	d50a      	bpl.n	800962a <UART_RxISR_16BIT_FIFOEN+0x92>
 8009614:	f1ba 0f00 	cmp.w	sl, #0
 8009618:	d007      	beq.n	800962a <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800961a:	2201      	movs	r2, #1
 800961c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800961e:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8009622:	f042 0201 	orr.w	r2, r2, #1
 8009626:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800962a:	07aa      	lsls	r2, r5, #30
 800962c:	d507      	bpl.n	800963e <UART_RxISR_16BIT_FIFOEN+0xa6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800962e:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009632:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8009636:	f042 0204 	orr.w	r2, r2, #4
 800963a:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800963e:	0768      	lsls	r0, r5, #29
 8009640:	d506      	bpl.n	8009650 <UART_RxISR_16BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009642:	621f      	str	r7, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009644:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009648:	f043 0302 	orr.w	r3, r3, #2
 800964c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009650:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0c3      	beq.n	80095e0 <UART_RxISR_16BIT_FIFOEN+0x48>
          HAL_UART_ErrorCallback(huart);
 8009658:	4620      	mov	r0, r4
 800965a:	f7ff fc15 	bl	8008e88 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800965e:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
 8009662:	e7bd      	b.n	80095e0 <UART_RxISR_16BIT_FIFOEN+0x48>
 8009664:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009666:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800966a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966e:	e843 2100 	strex	r1, r2, [r3]
 8009672:	2900      	cmp	r1, #0
 8009674:	d1f7      	bne.n	8009666 <UART_RxISR_16BIT_FIFOEN+0xce>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009676:	484d      	ldr	r0, [pc, #308]	@ (80097ac <UART_RxISR_16BIT_FIFOEN+0x214>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009678:	f103 0208 	add.w	r2, r3, #8
 800967c:	e852 2f00 	ldrex	r2, [r2]
 8009680:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	f103 0508 	add.w	r5, r3, #8
 8009686:	e845 2100 	strex	r1, r2, [r5]
 800968a:	2900      	cmp	r1, #0
 800968c:	d1f4      	bne.n	8009678 <UART_RxISR_16BIT_FIFOEN+0xe0>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800968e:	4a48      	ldr	r2, [pc, #288]	@ (80097b0 <UART_RxISR_16BIT_FIFOEN+0x218>)
        huart->RxState = HAL_UART_STATE_READY;
 8009690:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 8009692:	6761      	str	r1, [r4, #116]	@ 0x74
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009694:	4293      	cmp	r3, r2
        huart->RxState = HAL_UART_STATE_READY;
 8009696:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800969a:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800969c:	d002      	beq.n	80096a4 <UART_RxISR_16BIT_FIFOEN+0x10c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	0211      	lsls	r1, r2, #8
 80096a2:	d46d      	bmi.n	8009780 <UART_RxISR_16BIT_FIFOEN+0x1e8>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80096a6:	2a01      	cmp	r2, #1
 80096a8:	d17b      	bne.n	80097a2 <UART_RxISR_16BIT_FIFOEN+0x20a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096aa:	2200      	movs	r2, #0
 80096ac:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	e843 2100 	strex	r1, r2, [r3]
 80096ba:	2900      	cmp	r1, #0
 80096bc:	d1f7      	bne.n	80096ae <UART_RxISR_16BIT_FIFOEN+0x116>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096be:	69da      	ldr	r2, [r3, #28]
 80096c0:	06d2      	lsls	r2, r2, #27
 80096c2:	d501      	bpl.n	80096c8 <UART_RxISR_16BIT_FIFOEN+0x130>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096c4:	2210      	movs	r2, #16
 80096c6:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096c8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80096cc:	4620      	mov	r0, r4
 80096ce:	f7ff fbe5 	bl	8008e9c <HAL_UARTEx_RxEventCallback>
    rxdatacount = huart->RxXferCount;
 80096d2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80096d6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f43f af6d 	beq.w	80095b8 <UART_RxISR_16BIT_FIFOEN+0x20>
 80096de:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 80096e2:	429a      	cmp	r2, r3
 80096e4:	f67f af68 	bls.w	80095b8 <UART_RxISR_16BIT_FIFOEN+0x20>
 80096e8:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	f103 0208 	add.w	r2, r3, #8
 80096ee:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096f2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	f103 0008 	add.w	r0, r3, #8
 80096fa:	e840 2100 	strex	r1, r2, [r0]
 80096fe:	2900      	cmp	r1, #0
 8009700:	d1f3      	bne.n	80096ea <UART_RxISR_16BIT_FIFOEN+0x152>
      huart->RxISR = UART_RxISR_16BIT;
 8009702:	4a2c      	ldr	r2, [pc, #176]	@ (80097b4 <UART_RxISR_16BIT_FIFOEN+0x21c>)
 8009704:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009706:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800970a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970e:	e843 2100 	strex	r1, r2, [r3]
 8009712:	2900      	cmp	r1, #0
 8009714:	d1f7      	bne.n	8009706 <UART_RxISR_16BIT_FIFOEN+0x16e>
 8009716:	e74f      	b.n	80095b8 <UART_RxISR_16BIT_FIFOEN+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009718:	2601      	movs	r6, #1
 800971a:	e004      	b.n	8009726 <UART_RxISR_16BIT_FIFOEN+0x18e>
      if (huart->RxXferCount == 0U)
 800971c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009720:	b29b      	uxth	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d09e      	beq.n	8009664 <UART_RxISR_16BIT_FIFOEN+0xcc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009726:	06a8      	lsls	r0, r5, #26
 8009728:	d5d3      	bpl.n	80096d2 <UART_RxISR_16BIT_FIFOEN+0x13a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800972a:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800972c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800972e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8009730:	ea09 0101 	and.w	r1, r9, r1
 8009734:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr += 2U;
 8009738:	65a2      	str	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800973a:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 800973e:	3a01      	subs	r2, #1
 8009740:	b292      	uxth	r2, r2
 8009742:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009746:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009748:	0769      	lsls	r1, r5, #29
 800974a:	d0e7      	beq.n	800971c <UART_RxISR_16BIT_FIFOEN+0x184>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800974c:	07ea      	lsls	r2, r5, #31
 800974e:	d509      	bpl.n	8009764 <UART_RxISR_16BIT_FIFOEN+0x1cc>
 8009750:	f1ba 0f00 	cmp.w	sl, #0
 8009754:	d006      	beq.n	8009764 <UART_RxISR_16BIT_FIFOEN+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009756:	621e      	str	r6, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009758:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800975c:	f043 0301 	orr.w	r3, r3, #1
 8009760:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009764:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8009768:	2b00      	cmp	r3, #0
 800976a:	d0d7      	beq.n	800971c <UART_RxISR_16BIT_FIFOEN+0x184>
          HAL_UART_ErrorCallback(huart);
 800976c:	4620      	mov	r0, r4
 800976e:	f7ff fb8b 	bl	8008e88 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009772:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
 8009776:	e7d1      	b.n	800971c <UART_RxISR_16BIT_FIFOEN+0x184>
    rxdatacount = huart->RxXferCount;
 8009778:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
}
 800977c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009784:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	e843 2100 	strex	r1, r2, [r3]
 800978c:	2900      	cmp	r1, #0
 800978e:	d089      	beq.n	80096a4 <UART_RxISR_16BIT_FIFOEN+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009790:	e853 2f00 	ldrex	r2, [r3]
 8009794:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	e843 2100 	strex	r1, r2, [r3]
 800979c:	2900      	cmp	r1, #0
 800979e:	d1ef      	bne.n	8009780 <UART_RxISR_16BIT_FIFOEN+0x1e8>
 80097a0:	e780      	b.n	80096a4 <UART_RxISR_16BIT_FIFOEN+0x10c>
          HAL_UART_RxCpltCallback(huart);
 80097a2:	4620      	mov	r0, r4
 80097a4:	f7f8 fbec 	bl	8001f80 <HAL_UART_RxCpltCallback>
 80097a8:	e793      	b.n	80096d2 <UART_RxISR_16BIT_FIFOEN+0x13a>
 80097aa:	bf00      	nop
 80097ac:	effffffe 	.word	0xeffffffe
 80097b0:	58000c00 	.word	0x58000c00
 80097b4:	080092e5 	.word	0x080092e5

080097b8 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097b8:	6901      	ldr	r1, [r0, #16]
 80097ba:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097bc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097be:	430a      	orrs	r2, r1
{
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097c4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097c6:	69c0      	ldr	r0, [r0, #28]
{
 80097c8:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097ca:	6961      	ldr	r1, [r4, #20]
 80097cc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097ce:	49a0      	ldr	r1, [pc, #640]	@ (8009a50 <UART_SetConfig+0x298>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097d0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097d2:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097d4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097d6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097d8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097da:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80097e2:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097e4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097e6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097e8:	4a9a      	ldr	r2, [pc, #616]	@ (8009a54 <UART_SetConfig+0x29c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	f000 8119 	beq.w	8009a22 <UART_SetConfig+0x26a>
    tmpreg |= huart->Init.OneBitSampling;
 80097f0:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097f2:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80097f4:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097f6:	4a98      	ldr	r2, [pc, #608]	@ (8009a58 <UART_SetConfig+0x2a0>)
 80097f8:	4032      	ands	r2, r6
 80097fa:	4311      	orrs	r1, r2
 80097fc:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009800:	f022 020f 	bic.w	r2, r2, #15
 8009804:	432a      	orrs	r2, r5
 8009806:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009808:	4a94      	ldr	r2, [pc, #592]	@ (8009a5c <UART_SetConfig+0x2a4>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d028      	beq.n	8009860 <UART_SetConfig+0xa8>
 800980e:	4a94      	ldr	r2, [pc, #592]	@ (8009a60 <UART_SetConfig+0x2a8>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d01a      	beq.n	800984a <UART_SetConfig+0x92>
 8009814:	4a93      	ldr	r2, [pc, #588]	@ (8009a64 <UART_SetConfig+0x2ac>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d017      	beq.n	800984a <UART_SetConfig+0x92>
 800981a:	4a93      	ldr	r2, [pc, #588]	@ (8009a68 <UART_SetConfig+0x2b0>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d014      	beq.n	800984a <UART_SetConfig+0x92>
 8009820:	4a92      	ldr	r2, [pc, #584]	@ (8009a6c <UART_SetConfig+0x2b4>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d011      	beq.n	800984a <UART_SetConfig+0x92>
 8009826:	4a92      	ldr	r2, [pc, #584]	@ (8009a70 <UART_SetConfig+0x2b8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d019      	beq.n	8009860 <UART_SetConfig+0xa8>
 800982c:	4a91      	ldr	r2, [pc, #580]	@ (8009a74 <UART_SetConfig+0x2bc>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d00b      	beq.n	800984a <UART_SetConfig+0x92>
 8009832:	4a91      	ldr	r2, [pc, #580]	@ (8009a78 <UART_SetConfig+0x2c0>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d008      	beq.n	800984a <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 8009838:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800983a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800983c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 8009840:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8009842:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8009844:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8009846:	b006      	add	sp, #24
 8009848:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800984a:	4b8c      	ldr	r3, [pc, #560]	@ (8009a7c <UART_SetConfig+0x2c4>)
 800984c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b05      	cmp	r3, #5
 8009854:	d8f0      	bhi.n	8009838 <UART_SetConfig+0x80>
 8009856:	e8df f003 	tbb	[pc, r3]
 800985a:	7e9e      	.short	0x7e9e
 800985c:	785f9189 	.word	0x785f9189
 8009860:	4b86      	ldr	r3, [pc, #536]	@ (8009a7c <UART_SetConfig+0x2c4>)
 8009862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009864:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009868:	2b28      	cmp	r3, #40	@ 0x28
 800986a:	d8e5      	bhi.n	8009838 <UART_SetConfig+0x80>
 800986c:	a201      	add	r2, pc, #4	@ (adr r2, 8009874 <UART_SetConfig+0xbc>)
 800986e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009872:	bf00      	nop
 8009874:	080099f1 	.word	0x080099f1
 8009878:	08009839 	.word	0x08009839
 800987c:	08009839 	.word	0x08009839
 8009880:	08009839 	.word	0x08009839
 8009884:	08009839 	.word	0x08009839
 8009888:	08009839 	.word	0x08009839
 800988c:	08009839 	.word	0x08009839
 8009890:	08009839 	.word	0x08009839
 8009894:	08009957 	.word	0x08009957
 8009898:	08009839 	.word	0x08009839
 800989c:	08009839 	.word	0x08009839
 80098a0:	08009839 	.word	0x08009839
 80098a4:	08009839 	.word	0x08009839
 80098a8:	08009839 	.word	0x08009839
 80098ac:	08009839 	.word	0x08009839
 80098b0:	08009839 	.word	0x08009839
 80098b4:	0800996d 	.word	0x0800996d
 80098b8:	08009839 	.word	0x08009839
 80098bc:	08009839 	.word	0x08009839
 80098c0:	08009839 	.word	0x08009839
 80098c4:	08009839 	.word	0x08009839
 80098c8:	08009839 	.word	0x08009839
 80098cc:	08009839 	.word	0x08009839
 80098d0:	08009839 	.word	0x08009839
 80098d4:	0800997d 	.word	0x0800997d
 80098d8:	08009839 	.word	0x08009839
 80098dc:	08009839 	.word	0x08009839
 80098e0:	08009839 	.word	0x08009839
 80098e4:	08009839 	.word	0x08009839
 80098e8:	08009839 	.word	0x08009839
 80098ec:	08009839 	.word	0x08009839
 80098f0:	08009839 	.word	0x08009839
 80098f4:	08009919 	.word	0x08009919
 80098f8:	08009839 	.word	0x08009839
 80098fc:	08009839 	.word	0x08009839
 8009900:	08009839 	.word	0x08009839
 8009904:	08009839 	.word	0x08009839
 8009908:	08009839 	.word	0x08009839
 800990c:	08009839 	.word	0x08009839
 8009910:	08009839 	.word	0x08009839
 8009914:	0800994b 	.word	0x0800994b
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009918:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 800991c:	4858      	ldr	r0, [pc, #352]	@ (8009a80 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800991e:	d047      	beq.n	80099b0 <UART_SetConfig+0x1f8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009920:	4a58      	ldr	r2, [pc, #352]	@ (8009a84 <UART_SetConfig+0x2cc>)
 8009922:	6863      	ldr	r3, [r4, #4]
 8009924:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009928:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800992c:	fbb0 f0f1 	udiv	r0, r0, r1
 8009930:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8009934:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009938:	f1a0 0310 	sub.w	r3, r0, #16
 800993c:	4293      	cmp	r3, r2
 800993e:	f63f af7b 	bhi.w	8009838 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 8009946:	2000      	movs	r0, #0
 8009948:	e777      	b.n	800983a <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800994a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800994e:	d02f      	beq.n	80099b0 <UART_SetConfig+0x1f8>
        pclk = (uint32_t) LSE_VALUE;
 8009950:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009954:	e7e4      	b.n	8009920 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009956:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800995a:	d022      	beq.n	80099a2 <UART_SetConfig+0x1ea>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800995c:	4668      	mov	r0, sp
 800995e:	f7fe fc1b 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009962:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8009964:	2800      	cmp	r0, #0
 8009966:	d0ee      	beq.n	8009946 <UART_SetConfig+0x18e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009968:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800996a:	e7d9      	b.n	8009920 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800996c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009970:	d04f      	beq.n	8009a12 <UART_SetConfig+0x25a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009972:	a803      	add	r0, sp, #12
 8009974:	f7fe fcaa 	bl	80082cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009978:	9804      	ldr	r0, [sp, #16]
        break;
 800997a:	e7f3      	b.n	8009964 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800997c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009980:	d03c      	beq.n	80099fc <UART_SetConfig+0x244>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009982:	4b3e      	ldr	r3, [pc, #248]	@ (8009a7c <UART_SetConfig+0x2c4>)
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	0691      	lsls	r1, r2, #26
 8009988:	d52d      	bpl.n	80099e6 <UART_SetConfig+0x22e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	483e      	ldr	r0, [pc, #248]	@ (8009a88 <UART_SetConfig+0x2d0>)
 800998e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009992:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8009994:	e7c4      	b.n	8009920 <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009996:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800999a:	d026      	beq.n	80099ea <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK1Freq();
 800999c:	f7fd fb36 	bl	800700c <HAL_RCC_GetPCLK1Freq>
        break;
 80099a0:	e7e0      	b.n	8009964 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099a2:	4668      	mov	r0, sp
 80099a4:	f7fe fbf8 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80099a8:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d0cb      	beq.n	8009946 <UART_SetConfig+0x18e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099ae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80099b0:	4b34      	ldr	r3, [pc, #208]	@ (8009a84 <UART_SetConfig+0x2cc>)
 80099b2:	6862      	ldr	r2, [r4, #4]
 80099b4:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80099b8:	0853      	lsrs	r3, r2, #1
 80099ba:	fbb0 f0f1 	udiv	r0, r0, r1
 80099be:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099c2:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099c6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099ca:	f1a3 0210 	sub.w	r2, r3, #16
 80099ce:	428a      	cmp	r2, r1
 80099d0:	f63f af32 	bhi.w	8009838 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099d4:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099d8:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80099dc:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099de:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80099e0:	4313      	orrs	r3, r2
 80099e2:	60cb      	str	r3, [r1, #12]
 80099e4:	e7af      	b.n	8009946 <UART_SetConfig+0x18e>
          pclk = (uint32_t) HSI_VALUE;
 80099e6:	4828      	ldr	r0, [pc, #160]	@ (8009a88 <UART_SetConfig+0x2d0>)
 80099e8:	e79a      	b.n	8009920 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80099ea:	f7fd fb0f 	bl	800700c <HAL_RCC_GetPCLK1Freq>
        break;
 80099ee:	e7dc      	b.n	80099aa <UART_SetConfig+0x1f2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099f0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80099f4:	d012      	beq.n	8009a1c <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetPCLK2Freq();
 80099f6:	f7fd fb51 	bl	800709c <HAL_RCC_GetPCLK2Freq>
        break;
 80099fa:	e7b3      	b.n	8009964 <UART_SetConfig+0x1ac>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099fc:	4b1f      	ldr	r3, [pc, #124]	@ (8009a7c <UART_SetConfig+0x2c4>)
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	0690      	lsls	r0, r2, #26
 8009a02:	f140 808b 	bpl.w	8009b1c <UART_SetConfig+0x364>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	481f      	ldr	r0, [pc, #124]	@ (8009a88 <UART_SetConfig+0x2d0>)
 8009a0a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009a0e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8009a10:	e7ce      	b.n	80099b0 <UART_SetConfig+0x1f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a12:	a803      	add	r0, sp, #12
 8009a14:	f7fe fc5a 	bl	80082cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a18:	9804      	ldr	r0, [sp, #16]
        break;
 8009a1a:	e7c6      	b.n	80099aa <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a1c:	f7fd fb3e 	bl	800709c <HAL_RCC_GetPCLK2Freq>
        break;
 8009a20:	e7c3      	b.n	80099aa <UART_SetConfig+0x1f2>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a22:	6898      	ldr	r0, [r3, #8]
 8009a24:	4a0c      	ldr	r2, [pc, #48]	@ (8009a58 <UART_SetConfig+0x2a0>)
 8009a26:	4002      	ands	r2, r0
 8009a28:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a2a:	4914      	ldr	r1, [pc, #80]	@ (8009a7c <UART_SetConfig+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a2c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a30:	f022 020f 	bic.w	r2, r2, #15
 8009a34:	432a      	orrs	r2, r5
 8009a36:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a38:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	2b05      	cmp	r3, #5
 8009a40:	f63f aefa 	bhi.w	8009838 <UART_SetConfig+0x80>
 8009a44:	e8df f003 	tbb	[pc, r3]
 8009a48:	224e575c 	.word	0x224e575c
 8009a4c:	5f62      	.short	0x5f62
 8009a4e:	bf00      	nop
 8009a50:	cfff69f3 	.word	0xcfff69f3
 8009a54:	58000c00 	.word	0x58000c00
 8009a58:	11fff4ff 	.word	0x11fff4ff
 8009a5c:	40011000 	.word	0x40011000
 8009a60:	40004400 	.word	0x40004400
 8009a64:	40004800 	.word	0x40004800
 8009a68:	40004c00 	.word	0x40004c00
 8009a6c:	40005000 	.word	0x40005000
 8009a70:	40011400 	.word	0x40011400
 8009a74:	40007800 	.word	0x40007800
 8009a78:	40007c00 	.word	0x40007c00
 8009a7c:	58024400 	.word	0x58024400
 8009a80:	003d0900 	.word	0x003d0900
 8009a84:	08070d5c 	.word	0x08070d5c
 8009a88:	03d09000 	.word	0x03d09000
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a8c:	4b24      	ldr	r3, [pc, #144]	@ (8009b20 <UART_SetConfig+0x368>)
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	0692      	lsls	r2, r2, #26
 8009a92:	d43d      	bmi.n	8009b10 <UART_SetConfig+0x358>
          pclk = (uint32_t) HSI_VALUE;
 8009a94:	4823      	ldr	r0, [pc, #140]	@ (8009b24 <UART_SetConfig+0x36c>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a96:	4b24      	ldr	r3, [pc, #144]	@ (8009b28 <UART_SetConfig+0x370>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a98:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a9a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a9e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009aa2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009aa6:	4299      	cmp	r1, r3
 8009aa8:	f63f aec6 	bhi.w	8009838 <UART_SetConfig+0x80>
 8009aac:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8009ab0:	f63f aec2 	bhi.w	8009838 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	f7f6 fe7e 	bl	80007b8 <__aeabi_uldivmod>
 8009abc:	4632      	mov	r2, r6
 8009abe:	0209      	lsls	r1, r1, #8
 8009ac0:	0203      	lsls	r3, r0, #8
 8009ac2:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009ac6:	0870      	lsrs	r0, r6, #1
 8009ac8:	1818      	adds	r0, r3, r0
 8009aca:	f04f 0300 	mov.w	r3, #0
 8009ace:	f141 0100 	adc.w	r1, r1, #0
 8009ad2:	f7f6 fe71 	bl	80007b8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ad6:	4b15      	ldr	r3, [pc, #84]	@ (8009b2c <UART_SetConfig+0x374>)
 8009ad8:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8009adc:	429a      	cmp	r2, r3
 8009ade:	f63f aeab 	bhi.w	8009838 <UART_SetConfig+0x80>
 8009ae2:	e72e      	b.n	8009942 <UART_SetConfig+0x18a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ae4:	a803      	add	r0, sp, #12
 8009ae6:	f7fe fbf1 	bl	80082cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009aea:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8009aec:	2800      	cmp	r0, #0
 8009aee:	f43f af2a 	beq.w	8009946 <UART_SetConfig+0x18e>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009af2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009af4:	e7cf      	b.n	8009a96 <UART_SetConfig+0x2de>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009af6:	4668      	mov	r0, sp
 8009af8:	f7fe fb4e 	bl	8008198 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009afc:	9801      	ldr	r0, [sp, #4]
        break;
 8009afe:	e7f5      	b.n	8009aec <UART_SetConfig+0x334>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b00:	f7fe fb38 	bl	8008174 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8009b04:	e7f2      	b.n	8009aec <UART_SetConfig+0x334>
        pclk = (uint32_t) LSE_VALUE;
 8009b06:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009b0a:	e7c4      	b.n	8009a96 <UART_SetConfig+0x2de>
        pclk = (uint32_t) CSI_VALUE;
 8009b0c:	4808      	ldr	r0, [pc, #32]	@ (8009b30 <UART_SetConfig+0x378>)
 8009b0e:	e7c2      	b.n	8009a96 <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4804      	ldr	r0, [pc, #16]	@ (8009b24 <UART_SetConfig+0x36c>)
 8009b14:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009b18:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8009b1a:	e7bc      	b.n	8009a96 <UART_SetConfig+0x2de>
          pclk = (uint32_t) HSI_VALUE;
 8009b1c:	4801      	ldr	r0, [pc, #4]	@ (8009b24 <UART_SetConfig+0x36c>)
 8009b1e:	e747      	b.n	80099b0 <UART_SetConfig+0x1f8>
 8009b20:	58024400 	.word	0x58024400
 8009b24:	03d09000 	.word	0x03d09000
 8009b28:	08070d5c 	.word	0x08070d5c
 8009b2c:	000ffcff 	.word	0x000ffcff
 8009b30:	003d0900 	.word	0x003d0900

08009b34 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b34:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009b36:	071a      	lsls	r2, r3, #28
{
 8009b38:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b3a:	d506      	bpl.n	8009b4a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b3c:	6801      	ldr	r1, [r0, #0]
 8009b3e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8009b40:	684a      	ldr	r2, [r1, #4]
 8009b42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009b46:	4322      	orrs	r2, r4
 8009b48:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b4a:	07dc      	lsls	r4, r3, #31
 8009b4c:	d506      	bpl.n	8009b5c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b4e:	6801      	ldr	r1, [r0, #0]
 8009b50:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8009b52:	684a      	ldr	r2, [r1, #4]
 8009b54:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009b58:	4322      	orrs	r2, r4
 8009b5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b5c:	0799      	lsls	r1, r3, #30
 8009b5e:	d506      	bpl.n	8009b6e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b60:	6801      	ldr	r1, [r0, #0]
 8009b62:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8009b64:	684a      	ldr	r2, [r1, #4]
 8009b66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009b6a:	4322      	orrs	r2, r4
 8009b6c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b6e:	075a      	lsls	r2, r3, #29
 8009b70:	d506      	bpl.n	8009b80 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b72:	6801      	ldr	r1, [r0, #0]
 8009b74:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8009b76:	684a      	ldr	r2, [r1, #4]
 8009b78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009b7c:	4322      	orrs	r2, r4
 8009b7e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b80:	06dc      	lsls	r4, r3, #27
 8009b82:	d506      	bpl.n	8009b92 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b84:	6801      	ldr	r1, [r0, #0]
 8009b86:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8009b88:	688a      	ldr	r2, [r1, #8]
 8009b8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009b8e:	4322      	orrs	r2, r4
 8009b90:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b92:	0699      	lsls	r1, r3, #26
 8009b94:	d506      	bpl.n	8009ba4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b96:	6801      	ldr	r1, [r0, #0]
 8009b98:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8009b9a:	688a      	ldr	r2, [r1, #8]
 8009b9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ba0:	4322      	orrs	r2, r4
 8009ba2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ba4:	065a      	lsls	r2, r3, #25
 8009ba6:	d50a      	bpl.n	8009bbe <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ba8:	6801      	ldr	r1, [r0, #0]
 8009baa:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8009bac:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bae:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bb2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8009bb6:	ea42 0204 	orr.w	r2, r2, r4
 8009bba:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bbc:	d00b      	beq.n	8009bd6 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bbe:	061b      	lsls	r3, r3, #24
 8009bc0:	d506      	bpl.n	8009bd0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bc2:	6802      	ldr	r2, [r0, #0]
 8009bc4:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8009bc6:	6853      	ldr	r3, [r2, #4]
 8009bc8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	6053      	str	r3, [r2, #4]
}
 8009bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bd4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bd6:	684a      	ldr	r2, [r1, #4]
 8009bd8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8009bda:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8009bde:	4322      	orrs	r2, r4
 8009be0:	604a      	str	r2, [r1, #4]
 8009be2:	e7ec      	b.n	8009bbe <UART_AdvFeatureConfig+0x8a>

08009be4 <UART_CheckIdleState>:
{
 8009be4:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be6:	2300      	movs	r3, #0
{
 8009be8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bea:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8009bee:	f7f9 fd9b 	bl	8003728 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bf2:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8009bf4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bf6:	6813      	ldr	r3, [r2, #0]
 8009bf8:	071b      	lsls	r3, r3, #28
 8009bfa:	d40f      	bmi.n	8009c1c <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bfc:	6813      	ldr	r3, [r2, #0]
 8009bfe:	0759      	lsls	r1, r3, #29
 8009c00:	d431      	bmi.n	8009c66 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c02:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009c04:	2220      	movs	r2, #32
  return HAL_OK;
 8009c06:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8009c08:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c0c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c10:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c12:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8009c14:	2300      	movs	r3, #0
 8009c16:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c1c:	69d3      	ldr	r3, [r2, #28]
 8009c1e:	0298      	lsls	r0, r3, #10
 8009c20:	d4ec      	bmi.n	8009bfc <UART_CheckIdleState+0x18>
 8009c22:	e00c      	b.n	8009c3e <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c24:	6819      	ldr	r1, [r3, #0]
 8009c26:	461a      	mov	r2, r3
 8009c28:	0749      	lsls	r1, r1, #29
 8009c2a:	d505      	bpl.n	8009c38 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c2c:	69d9      	ldr	r1, [r3, #28]
 8009c2e:	0708      	lsls	r0, r1, #28
 8009c30:	d44a      	bmi.n	8009cc8 <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c32:	69d9      	ldr	r1, [r3, #28]
 8009c34:	0509      	lsls	r1, r1, #20
 8009c36:	d475      	bmi.n	8009d24 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	0298      	lsls	r0, r3, #10
 8009c3c:	d4de      	bmi.n	8009bfc <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c3e:	f7f9 fd73 	bl	8003728 <HAL_GetTick>
 8009c42:	1b43      	subs	r3, r0, r5
 8009c44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c48:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c4a:	d3eb      	bcc.n	8009c24 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009c50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c54:	e843 2100 	strex	r1, r2, [r3]
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	d1f7      	bne.n	8009c4c <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8009c62:	2003      	movs	r0, #3
 8009c64:	e7d6      	b.n	8009c14 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c66:	69d3      	ldr	r3, [r2, #28]
 8009c68:	025b      	lsls	r3, r3, #9
 8009c6a:	d4ca      	bmi.n	8009c02 <UART_CheckIdleState+0x1e>
 8009c6c:	e00d      	b.n	8009c8a <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	0750      	lsls	r0, r2, #29
 8009c72:	d507      	bpl.n	8009c84 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c74:	69da      	ldr	r2, [r3, #28]
 8009c76:	0711      	lsls	r1, r2, #28
 8009c78:	f100 8082 	bmi.w	8009d80 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c7c:	69da      	ldr	r2, [r3, #28]
 8009c7e:	0512      	lsls	r2, r2, #20
 8009c80:	f100 80ac 	bmi.w	8009ddc <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	025b      	lsls	r3, r3, #9
 8009c88:	d4bb      	bmi.n	8009c02 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c8a:	f7f9 fd4d 	bl	8003728 <HAL_GetTick>
 8009c8e:	1b43      	subs	r3, r0, r5
 8009c90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	d3ea      	bcc.n	8009c6e <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c98:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c9c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca0:	e843 2100 	strex	r1, r2, [r3]
 8009ca4:	2900      	cmp	r1, #0
 8009ca6:	d1f7      	bne.n	8009c98 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca8:	f103 0208 	add.w	r2, r3, #8
 8009cac:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb4:	f103 0008 	add.w	r0, r3, #8
 8009cb8:	e840 2100 	strex	r1, r2, [r0]
 8009cbc:	2900      	cmp	r1, #0
 8009cbe:	d1f3      	bne.n	8009ca8 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8009cc0:	2320      	movs	r3, #32
 8009cc2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8009cc6:	e7cc      	b.n	8009c62 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cc8:	2208      	movs	r2, #8
 8009cca:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ccc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009cd0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd4:	e843 2100 	strex	r1, r2, [r3]
 8009cd8:	2900      	cmp	r1, #0
 8009cda:	d1f7      	bne.n	8009ccc <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cdc:	4856      	ldr	r0, [pc, #344]	@ (8009e38 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cde:	f103 0208 	add.w	r2, r3, #8
 8009ce2:	e852 2f00 	ldrex	r2, [r2]
 8009ce6:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	f103 0508 	add.w	r5, r3, #8
 8009cec:	e845 2100 	strex	r1, r2, [r5]
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	d1f4      	bne.n	8009cde <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009cf6:	2a01      	cmp	r2, #1
 8009cf8:	d00b      	beq.n	8009d12 <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cfa:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009cfc:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cfe:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8009d00:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009d04:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d06:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009d08:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d0c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8009d10:	e79c      	b.n	8009c4c <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d16:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1a:	e843 2100 	strex	r1, r2, [r3]
 8009d1e:	2900      	cmp	r1, #0
 8009d20:	d1f7      	bne.n	8009d12 <UART_CheckIdleState+0x12e>
 8009d22:	e7ea      	b.n	8009cfa <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d28:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d2e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	e843 2100 	strex	r1, r2, [r3]
 8009d36:	2900      	cmp	r1, #0
 8009d38:	d1f7      	bne.n	8009d2a <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d3a:	483f      	ldr	r0, [pc, #252]	@ (8009e38 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3c:	f103 0208 	add.w	r2, r3, #8
 8009d40:	e852 2f00 	ldrex	r2, [r2]
 8009d44:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d46:	f103 0508 	add.w	r5, r3, #8
 8009d4a:	e845 2100 	strex	r1, r2, [r5]
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	d1f4      	bne.n	8009d3c <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d52:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009d54:	2a01      	cmp	r2, #1
 8009d56:	d00a      	beq.n	8009d6e <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d58:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009d5a:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8009d5c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009d5e:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8009d62:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d66:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d68:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009d6c:	e76e      	b.n	8009c4c <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d72:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	e843 2100 	strex	r1, r2, [r3]
 8009d7a:	2900      	cmp	r1, #0
 8009d7c:	d1f7      	bne.n	8009d6e <UART_CheckIdleState+0x18a>
 8009d7e:	e7eb      	b.n	8009d58 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d80:	2208      	movs	r2, #8
 8009d82:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d84:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d88:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8c:	e843 2100 	strex	r1, r2, [r3]
 8009d90:	2900      	cmp	r1, #0
 8009d92:	d1f7      	bne.n	8009d84 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d94:	4828      	ldr	r0, [pc, #160]	@ (8009e38 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d96:	f103 0208 	add.w	r2, r3, #8
 8009d9a:	e852 2f00 	ldrex	r2, [r2]
 8009d9e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da0:	f103 0508 	add.w	r5, r3, #8
 8009da4:	e845 2100 	strex	r1, r2, [r5]
 8009da8:	2900      	cmp	r1, #0
 8009daa:	d1f4      	bne.n	8009d96 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dac:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009dae:	2a01      	cmp	r2, #1
 8009db0:	d00b      	beq.n	8009dca <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009db4:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009db6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8009db8:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009dbc:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dbe:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009dc0:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009dc4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8009dc8:	e766      	b.n	8009c98 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dce:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd2:	e843 2100 	strex	r1, r2, [r3]
 8009dd6:	2900      	cmp	r1, #0
 8009dd8:	d1f7      	bne.n	8009dca <UART_CheckIdleState+0x1e6>
 8009dda:	e7ea      	b.n	8009db2 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ddc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009de0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009de6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dea:	e843 2100 	strex	r1, r2, [r3]
 8009dee:	2900      	cmp	r1, #0
 8009df0:	d1f7      	bne.n	8009de2 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009df2:	4811      	ldr	r0, [pc, #68]	@ (8009e38 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df4:	f103 0208 	add.w	r2, r3, #8
 8009df8:	e852 2f00 	ldrex	r2, [r2]
 8009dfc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfe:	f103 0508 	add.w	r5, r3, #8
 8009e02:	e845 2100 	strex	r1, r2, [r5]
 8009e06:	2900      	cmp	r1, #0
 8009e08:	d1f4      	bne.n	8009df4 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e0a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009e0c:	2a01      	cmp	r2, #1
 8009e0e:	d00a      	beq.n	8009e26 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e10:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009e12:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8009e14:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009e16:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8009e1a:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e1e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e20:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009e24:	e738      	b.n	8009c98 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e26:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e2a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	e843 2100 	strex	r1, r2, [r3]
 8009e32:	2900      	cmp	r1, #0
 8009e34:	d1f7      	bne.n	8009e26 <UART_CheckIdleState+0x242>
 8009e36:	e7eb      	b.n	8009e10 <UART_CheckIdleState+0x22c>
 8009e38:	effffffe 	.word	0xeffffffe

08009e3c <HAL_UART_Init>:
  if (huart == NULL)
 8009e3c:	b380      	cbz	r0, 8009ea0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009e3e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8009e42:	b510      	push	{r4, lr}
 8009e44:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009e46:	b333      	cbz	r3, 8009e96 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8009e48:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009e4a:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e4c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8009e4e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8009e52:	6813      	ldr	r3, [r2, #0]
 8009e54:	f023 0301 	bic.w	r3, r3, #1
 8009e58:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e5a:	b9c1      	cbnz	r1, 8009e8e <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f7ff fcab 	bl	80097b8 <UART_SetConfig>
 8009e62:	2801      	cmp	r0, #1
 8009e64:	d011      	beq.n	8009e8a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e66:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8009e68:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e78:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	f042 0201 	orr.w	r2, r2, #1
}
 8009e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8009e84:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8009e86:	f7ff bead 	b.w	8009be4 <UART_CheckIdleState>
}
 8009e8a:	2001      	movs	r0, #1
 8009e8c:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f7ff fe50 	bl	8009b34 <UART_AdvFeatureConfig>
 8009e94:	e7e2      	b.n	8009e5c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8009e96:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8009e9a:	f7f9 f98f 	bl	80031bc <HAL_UART_MspInit>
 8009e9e:	e7d3      	b.n	8009e48 <HAL_UART_Init+0xc>
}
 8009ea0:	2001      	movs	r0, #1
 8009ea2:	4770      	bx	lr

08009ea4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop

08009ea8 <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop

08009eac <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop

08009eb0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eb0:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8009eb4:	2a01      	cmp	r2, #1
 8009eb6:	d017      	beq.n	8009ee8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eb8:	6802      	ldr	r2, [r0, #0]
 8009eba:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8009ebc:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ebe:	2100      	movs	r1, #0
{
 8009ec0:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8009ec2:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8009ec6:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ec8:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009eca:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ecc:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8009ed0:	f024 0401 	bic.w	r4, r4, #1
 8009ed4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ed6:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ed8:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8009eda:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009edc:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009ee0:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8009ee4:	bc30      	pop	{r4, r5}
 8009ee6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009ee8:	2002      	movs	r0, #2
}
 8009eea:	4770      	bx	lr

08009eec <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eec:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8009ef0:	2a01      	cmp	r2, #1
 8009ef2:	d037      	beq.n	8009f64 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ef4:	6802      	ldr	r2, [r0, #0]
 8009ef6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8009ef8:	2024      	movs	r0, #36	@ 0x24
{
 8009efa:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009efc:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f00:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f02:	6810      	ldr	r0, [r2, #0]
 8009f04:	f020 0001 	bic.w	r0, r0, #1
 8009f08:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f0a:	6890      	ldr	r0, [r2, #8]
 8009f0c:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8009f10:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f12:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f14:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f16:	b310      	cbz	r0, 8009f5e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f18:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f1a:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f1c:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f20:	4911      	ldr	r1, [pc, #68]	@ (8009f68 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f22:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f26:	4d11      	ldr	r5, [pc, #68]	@ (8009f6c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f28:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f2c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f30:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f34:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f36:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f3a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f3c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f40:	fbb1 f1f5 	udiv	r1, r1, r5
 8009f44:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8009f48:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f50:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8009f52:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009f54:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009f58:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8009f5c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009f5e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009f60:	4608      	mov	r0, r1
 8009f62:	e7ef      	b.n	8009f44 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009f64:	2002      	movs	r0, #2
}
 8009f66:	4770      	bx	lr
 8009f68:	08070d7c 	.word	0x08070d7c
 8009f6c:	08070d74 	.word	0x08070d74

08009f70 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009f70:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8009f74:	2a01      	cmp	r2, #1
 8009f76:	d037      	beq.n	8009fe8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f78:	6802      	ldr	r2, [r0, #0]
 8009f7a:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8009f7c:	2024      	movs	r0, #36	@ 0x24
{
 8009f7e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009f80:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f84:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009f86:	6810      	ldr	r0, [r2, #0]
 8009f88:	f020 0001 	bic.w	r0, r0, #1
 8009f8c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f8e:	6890      	ldr	r0, [r2, #8]
 8009f90:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8009f94:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f96:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f98:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f9a:	b310      	cbz	r0, 8009fe2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f9c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f9e:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fa0:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fa4:	4911      	ldr	r1, [pc, #68]	@ (8009fec <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fa6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8009faa:	4d11      	ldr	r5, [pc, #68]	@ (8009ff0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fac:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fb0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fb4:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fb8:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8009fba:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fbe:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fc0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fc4:	fbb1 f1f5 	udiv	r1, r1, r5
 8009fc8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8009fcc:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8009fce:	2100      	movs	r1, #0
 8009fd0:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fd4:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8009fd6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009fd8:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009fdc:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8009fe0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009fe2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	e7ef      	b.n	8009fc8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009fe8:	2002      	movs	r0, #2
}
 8009fea:	4770      	bx	lr
 8009fec:	08070d7c 	.word	0x08070d7c
 8009ff0:	08070d74 	.word	0x08070d74

08009ff4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8009ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009ff8:	e9d1 3e07 	ldrd	r3, lr, [r1, #28]
 8009ffc:	e9d1 8200 	ldrd	r8, r2, [r1]
 800a000:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
 800a002:	ea43 030e 	orr.w	r3, r3, lr
 800a006:	e9d1 c602 	ldrd	ip, r6, [r1, #8]
 800a00a:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800a00e:	6989      	ldr	r1, [r1, #24]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a010:	f1b8 0f00 	cmp.w	r8, #0
 800a014:	d10f      	bne.n	800a036 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a016:	433b      	orrs	r3, r7
 800a018:	4313      	orrs	r3, r2
 800a01a:	6802      	ldr	r2, [r0, #0]
 800a01c:	ea43 030c 	orr.w	r3, r3, ip
 800a020:	f36f 020e 	bfc	r2, #0, #15
 800a024:	4333      	orrs	r3, r6
 800a026:	432b      	orrs	r3, r5
 800a028:	4323      	orrs	r3, r4
 800a02a:	430b      	orrs	r3, r1
 800a02c:	4313      	orrs	r3, r2
 800a02e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800a030:	2000      	movs	r0, #0
 800a032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a036:	ea42 020c 	orr.w	r2, r2, ip
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a03a:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a03c:	4332      	orrs	r2, r6
 800a03e:	432a      	orrs	r2, r5
 800a040:	4322      	orrs	r2, r4
 800a042:	430a      	orrs	r2, r1
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a044:	6801      	ldr	r1, [r0, #0]
 800a046:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800a04a:	430b      	orrs	r3, r1
 800a04c:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a04e:	6843      	ldr	r3, [r0, #4]
 800a050:	f36f 030e 	bfc	r3, #0, #15
 800a054:	4313      	orrs	r3, r2
 800a056:	6043      	str	r3, [r0, #4]
}
 800a058:	2000      	movs	r0, #0
 800a05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a05e:	bf00      	nop

0800a060 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a060:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a062:	68cc      	ldr	r4, [r1, #12]
 800a064:	694b      	ldr	r3, [r1, #20]
 800a066:	3c01      	subs	r4, #1
 800a068:	688d      	ldr	r5, [r1, #8]
 800a06a:	698f      	ldr	r7, [r1, #24]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	ea4f 3e04 	mov.w	lr, r4, lsl #12
 800a072:	684c      	ldr	r4, [r1, #4]
 800a074:	680e      	ldr	r6, [r1, #0]
 800a076:	3d01      	subs	r5, #1
 800a078:	3c01      	subs	r4, #1
 800a07a:	051b      	lsls	r3, r3, #20
 800a07c:	022d      	lsls	r5, r5, #8
 800a07e:	3e01      	subs	r6, #1
 800a080:	ea4f 1c04 	mov.w	ip, r4, lsl #4
 800a084:	690c      	ldr	r4, [r1, #16]
 800a086:	1e79      	subs	r1, r7, #1
 800a088:	3c01      	subs	r4, #1
 800a08a:	0609      	lsls	r1, r1, #24
 800a08c:	0424      	lsls	r4, r4, #16
  if (Bank == FMC_SDRAM_BANK1)
 800a08e:	b972      	cbnz	r2, 800a0ae <FMC_SDRAM_Timing_Init+0x4e>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a090:	ea4e 0303 	orr.w	r3, lr, r3
 800a094:	6882      	ldr	r2, [r0, #8]
 800a096:	4333      	orrs	r3, r6
 800a098:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800a09c:	ea43 030c 	orr.w	r3, r3, ip
 800a0a0:	432b      	orrs	r3, r5
 800a0a2:	4323      	orrs	r3, r4
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a0ae:	ea4e 0e03 	orr.w	lr, lr, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a0b2:	ea4c 0305 	orr.w	r3, ip, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a0b6:	4a08      	ldr	r2, [pc, #32]	@ (800a0d8 <FMC_SDRAM_Timing_Init+0x78>)
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a0b8:	4333      	orrs	r3, r6
 800a0ba:	4323      	orrs	r3, r4
 800a0bc:	430b      	orrs	r3, r1
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a0be:	6881      	ldr	r1, [r0, #8]
 800a0c0:	400a      	ands	r2, r1
 800a0c2:	ea4e 0202 	orr.w	r2, lr, r2
 800a0c6:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a0c8:	68c2      	ldr	r2, [r0, #12]
 800a0ca:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60c3      	str	r3, [r0, #12]
}
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	ff0f0fff 	.word	0xff0f0fff

0800a0dc <arm_fill_f32>:
 800a0dc:	b410      	push	{r4}
 800a0de:	088c      	lsrs	r4, r1, #2
 800a0e0:	d010      	beq.n	800a104 <arm_fill_f32+0x28>
 800a0e2:	f100 0310 	add.w	r3, r0, #16
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	3a01      	subs	r2, #1
 800a0ea:	ed03 0a04 	vstr	s0, [r3, #-16]
 800a0ee:	ed03 0a03 	vstr	s0, [r3, #-12]
 800a0f2:	f103 0310 	add.w	r3, r3, #16
 800a0f6:	ed03 0a06 	vstr	s0, [r3, #-24]	@ 0xffffffe8
 800a0fa:	ed03 0a05 	vstr	s0, [r3, #-20]	@ 0xffffffec
 800a0fe:	d1f3      	bne.n	800a0e8 <arm_fill_f32+0xc>
 800a100:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800a104:	f011 0103 	ands.w	r1, r1, #3
 800a108:	d003      	beq.n	800a112 <arm_fill_f32+0x36>
 800a10a:	3901      	subs	r1, #1
 800a10c:	eca0 0a01 	vstmia	r0!, {s0}
 800a110:	d1fb      	bne.n	800a10a <arm_fill_f32+0x2e>
 800a112:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <arm_copy_f32>:
 800a118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800a120:	d01e      	beq.n	800a160 <arm_copy_f32+0x48>
 800a122:	f100 0410 	add.w	r4, r0, #16
 800a126:	f101 0310 	add.w	r3, r1, #16
 800a12a:	4645      	mov	r5, r8
 800a12c:	f854 cc10 	ldr.w	ip, [r4, #-16]
 800a130:	3d01      	subs	r5, #1
 800a132:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 800a136:	f103 0310 	add.w	r3, r3, #16
 800a13a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800a13e:	f104 0410 	add.w	r4, r4, #16
 800a142:	f854 6c14 	ldr.w	r6, [r4, #-20]
 800a146:	f843 cc20 	str.w	ip, [r3, #-32]
 800a14a:	f843 ec1c 	str.w	lr, [r3, #-28]
 800a14e:	f843 7c18 	str.w	r7, [r3, #-24]
 800a152:	f843 6c14 	str.w	r6, [r3, #-20]
 800a156:	d1e9      	bne.n	800a12c <arm_copy_f32+0x14>
 800a158:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800a15c:	4440      	add	r0, r8
 800a15e:	4441      	add	r1, r8
 800a160:	f012 0203 	ands.w	r2, r2, #3
 800a164:	d005      	beq.n	800a172 <arm_copy_f32+0x5a>
 800a166:	f850 3b04 	ldr.w	r3, [r0], #4
 800a16a:	3a01      	subs	r2, #1
 800a16c:	f841 3b04 	str.w	r3, [r1], #4
 800a170:	d1f9      	bne.n	800a166 <arm_copy_f32+0x4e>
 800a172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a176:	bf00      	nop

0800a178 <arm_rfft_fast_init_f32>:
 800a178:	084b      	lsrs	r3, r1, #1
 800a17a:	2b80      	cmp	r3, #128	@ 0x80
 800a17c:	b430      	push	{r4, r5}
 800a17e:	8201      	strh	r1, [r0, #16]
 800a180:	8003      	strh	r3, [r0, #0]
 800a182:	d06f      	beq.n	800a264 <arm_rfft_fast_init_f32+0xec>
 800a184:	d916      	bls.n	800a1b4 <arm_rfft_fast_init_f32+0x3c>
 800a186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a18a:	d05e      	beq.n	800a24a <arm_rfft_fast_init_f32+0xd2>
 800a18c:	d935      	bls.n	800a1fa <arm_rfft_fast_init_f32+0x82>
 800a18e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a192:	d025      	beq.n	800a1e0 <arm_rfft_fast_init_f32+0x68>
 800a194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a198:	d112      	bne.n	800a1c0 <arm_rfft_fast_init_f32+0x48>
 800a19a:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800a19e:	4c37      	ldr	r4, [pc, #220]	@ (800a27c <arm_rfft_fast_init_f32+0x104>)
 800a1a0:	4937      	ldr	r1, [pc, #220]	@ (800a280 <arm_rfft_fast_init_f32+0x108>)
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	4a37      	ldr	r2, [pc, #220]	@ (800a284 <arm_rfft_fast_init_f32+0x10c>)
 800a1a6:	8185      	strh	r5, [r0, #12]
 800a1a8:	6084      	str	r4, [r0, #8]
 800a1aa:	6041      	str	r1, [r0, #4]
 800a1ac:	6142      	str	r2, [r0, #20]
 800a1ae:	b258      	sxtb	r0, r3
 800a1b0:	bc30      	pop	{r4, r5}
 800a1b2:	4770      	bx	lr
 800a1b4:	2b20      	cmp	r3, #32
 800a1b6:	d030      	beq.n	800a21a <arm_rfft_fast_init_f32+0xa2>
 800a1b8:	2b40      	cmp	r3, #64	@ 0x40
 800a1ba:	d005      	beq.n	800a1c8 <arm_rfft_fast_init_f32+0x50>
 800a1bc:	2b10      	cmp	r3, #16
 800a1be:	d038      	beq.n	800a232 <arm_rfft_fast_init_f32+0xba>
 800a1c0:	23ff      	movs	r3, #255	@ 0xff
 800a1c2:	bc30      	pop	{r4, r5}
 800a1c4:	b258      	sxtb	r0, r3
 800a1c6:	4770      	bx	lr
 800a1c8:	2538      	movs	r5, #56	@ 0x38
 800a1ca:	4c2f      	ldr	r4, [pc, #188]	@ (800a288 <arm_rfft_fast_init_f32+0x110>)
 800a1cc:	492f      	ldr	r1, [pc, #188]	@ (800a28c <arm_rfft_fast_init_f32+0x114>)
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4a2f      	ldr	r2, [pc, #188]	@ (800a290 <arm_rfft_fast_init_f32+0x118>)
 800a1d2:	8185      	strh	r5, [r0, #12]
 800a1d4:	6084      	str	r4, [r0, #8]
 800a1d6:	6041      	str	r1, [r0, #4]
 800a1d8:	6142      	str	r2, [r0, #20]
 800a1da:	b258      	sxtb	r0, r3
 800a1dc:	bc30      	pop	{r4, r5}
 800a1de:	4770      	bx	lr
 800a1e0:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800a1e4:	4c2b      	ldr	r4, [pc, #172]	@ (800a294 <arm_rfft_fast_init_f32+0x11c>)
 800a1e6:	492c      	ldr	r1, [pc, #176]	@ (800a298 <arm_rfft_fast_init_f32+0x120>)
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	4a2c      	ldr	r2, [pc, #176]	@ (800a29c <arm_rfft_fast_init_f32+0x124>)
 800a1ec:	8185      	strh	r5, [r0, #12]
 800a1ee:	6084      	str	r4, [r0, #8]
 800a1f0:	6041      	str	r1, [r0, #4]
 800a1f2:	6142      	str	r2, [r0, #20]
 800a1f4:	b258      	sxtb	r0, r3
 800a1f6:	bc30      	pop	{r4, r5}
 800a1f8:	4770      	bx	lr
 800a1fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1fe:	d1df      	bne.n	800a1c0 <arm_rfft_fast_init_f32+0x48>
 800a200:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800a204:	4c26      	ldr	r4, [pc, #152]	@ (800a2a0 <arm_rfft_fast_init_f32+0x128>)
 800a206:	4927      	ldr	r1, [pc, #156]	@ (800a2a4 <arm_rfft_fast_init_f32+0x12c>)
 800a208:	2300      	movs	r3, #0
 800a20a:	4a27      	ldr	r2, [pc, #156]	@ (800a2a8 <arm_rfft_fast_init_f32+0x130>)
 800a20c:	8185      	strh	r5, [r0, #12]
 800a20e:	6084      	str	r4, [r0, #8]
 800a210:	6041      	str	r1, [r0, #4]
 800a212:	6142      	str	r2, [r0, #20]
 800a214:	b258      	sxtb	r0, r3
 800a216:	bc30      	pop	{r4, r5}
 800a218:	4770      	bx	lr
 800a21a:	2530      	movs	r5, #48	@ 0x30
 800a21c:	4c23      	ldr	r4, [pc, #140]	@ (800a2ac <arm_rfft_fast_init_f32+0x134>)
 800a21e:	4924      	ldr	r1, [pc, #144]	@ (800a2b0 <arm_rfft_fast_init_f32+0x138>)
 800a220:	2300      	movs	r3, #0
 800a222:	4a24      	ldr	r2, [pc, #144]	@ (800a2b4 <arm_rfft_fast_init_f32+0x13c>)
 800a224:	8185      	strh	r5, [r0, #12]
 800a226:	6084      	str	r4, [r0, #8]
 800a228:	6041      	str	r1, [r0, #4]
 800a22a:	6142      	str	r2, [r0, #20]
 800a22c:	b258      	sxtb	r0, r3
 800a22e:	bc30      	pop	{r4, r5}
 800a230:	4770      	bx	lr
 800a232:	2514      	movs	r5, #20
 800a234:	4c20      	ldr	r4, [pc, #128]	@ (800a2b8 <arm_rfft_fast_init_f32+0x140>)
 800a236:	4921      	ldr	r1, [pc, #132]	@ (800a2bc <arm_rfft_fast_init_f32+0x144>)
 800a238:	2300      	movs	r3, #0
 800a23a:	4a21      	ldr	r2, [pc, #132]	@ (800a2c0 <arm_rfft_fast_init_f32+0x148>)
 800a23c:	8185      	strh	r5, [r0, #12]
 800a23e:	6084      	str	r4, [r0, #8]
 800a240:	6041      	str	r1, [r0, #4]
 800a242:	6142      	str	r2, [r0, #20]
 800a244:	b258      	sxtb	r0, r3
 800a246:	bc30      	pop	{r4, r5}
 800a248:	4770      	bx	lr
 800a24a:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800a24e:	4c1d      	ldr	r4, [pc, #116]	@ (800a2c4 <arm_rfft_fast_init_f32+0x14c>)
 800a250:	491d      	ldr	r1, [pc, #116]	@ (800a2c8 <arm_rfft_fast_init_f32+0x150>)
 800a252:	2300      	movs	r3, #0
 800a254:	4a1d      	ldr	r2, [pc, #116]	@ (800a2cc <arm_rfft_fast_init_f32+0x154>)
 800a256:	8185      	strh	r5, [r0, #12]
 800a258:	6084      	str	r4, [r0, #8]
 800a25a:	6041      	str	r1, [r0, #4]
 800a25c:	6142      	str	r2, [r0, #20]
 800a25e:	b258      	sxtb	r0, r3
 800a260:	bc30      	pop	{r4, r5}
 800a262:	4770      	bx	lr
 800a264:	25d0      	movs	r5, #208	@ 0xd0
 800a266:	4c1a      	ldr	r4, [pc, #104]	@ (800a2d0 <arm_rfft_fast_init_f32+0x158>)
 800a268:	491a      	ldr	r1, [pc, #104]	@ (800a2d4 <arm_rfft_fast_init_f32+0x15c>)
 800a26a:	2300      	movs	r3, #0
 800a26c:	4a1a      	ldr	r2, [pc, #104]	@ (800a2d8 <arm_rfft_fast_init_f32+0x160>)
 800a26e:	8185      	strh	r5, [r0, #12]
 800a270:	6084      	str	r4, [r0, #8]
 800a272:	6041      	str	r1, [r0, #4]
 800a274:	6142      	str	r2, [r0, #20]
 800a276:	b258      	sxtb	r0, r3
 800a278:	bc30      	pop	{r4, r5}
 800a27a:	4770      	bx	lr
 800a27c:	0807fb8c 	.word	0x0807fb8c
 800a280:	08070d84 	.word	0x08070d84
 800a284:	08076ef4 	.word	0x08076ef4
 800a288:	08074e84 	.word	0x08074e84
 800a28c:	0808194c 	.word	0x0808194c
 800a290:	08083e3c 	.word	0x08083e3c
 800a294:	0807d874 	.word	0x0807d874
 800a298:	0807b774 	.word	0x0807b774
 800a29c:	08074ef4 	.word	0x08074ef4
 800a2a0:	08083acc 	.word	0x08083acc
 800a2a4:	0807aef4 	.word	0x0807aef4
 800a2a8:	08081b4c 	.word	0x08081b4c
 800a2ac:	0807e72c 	.word	0x0807e72c
 800a2b0:	0807d774 	.word	0x0807d774
 800a2b4:	08074d84 	.word	0x08074d84
 800a2b8:	0807e684 	.word	0x0807e684
 800a2bc:	0807b6f4 	.word	0x0807b6f4
 800a2c0:	0807e6ac 	.word	0x0807e6ac
 800a2c4:	0808234c 	.word	0x0808234c
 800a2c8:	0807eb8c 	.word	0x0807eb8c
 800a2cc:	080826cc 	.word	0x080826cc
 800a2d0:	0808403c 	.word	0x0808403c
 800a2d4:	0807e78c 	.word	0x0807e78c
 800a2d8:	080836cc 	.word	0x080836cc

0800a2dc <arm_rfft_fast_f32>:
 800a2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e0:	8a05      	ldrh	r5, [r0, #16]
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	4690      	mov	r8, r2
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	086d      	lsrs	r5, r5, #1
 800a2ea:	8005      	strh	r5, [r0, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d15e      	bne.n	800a3ae <arm_rfft_fast_f32+0xd2>
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	f000 fbe0 	bl	800aab8 <arm_cfft_f32>
 800a2f8:	edd4 7a00 	vldr	s15, [r4]
 800a2fc:	ed94 7a01 	vldr	s14, [r4, #4]
 800a300:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800a304:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a308:	8837      	ldrh	r7, [r6, #0]
 800a30a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a30e:	6975      	ldr	r5, [r6, #20]
 800a310:	3f01      	subs	r7, #1
 800a312:	eef0 3a46 	vmov.f32	s7, s12
 800a316:	3510      	adds	r5, #16
 800a318:	f108 0610 	add.w	r6, r8, #16
 800a31c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a320:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 800a324:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a328:	f104 0310 	add.w	r3, r4, #16
 800a32c:	3808      	subs	r0, #8
 800a32e:	ee26 7a86 	vmul.f32	s14, s13, s12
 800a332:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a336:	ed88 7a00 	vstr	s14, [r8]
 800a33a:	edc8 7a01 	vstr	s15, [r8, #4]
 800a33e:	edd0 6a02 	vldr	s13, [r0, #8]
 800a342:	3f01      	subs	r7, #1
 800a344:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a348:	f1a0 0008 	sub.w	r0, r0, #8
 800a34c:	ed13 7a01 	vldr	s14, [r3, #-4]
 800a350:	f105 0508 	add.w	r5, r5, #8
 800a354:	ee76 7ac5 	vsub.f32	s15, s13, s10
 800a358:	ed15 6a04 	vldr	s12, [r5, #-16]
 800a35c:	edd0 5a05 	vldr	s11, [r0, #20]
 800a360:	ee36 5a85 	vadd.f32	s10, s13, s10
 800a364:	ed55 6a03 	vldr	s13, [r5, #-12]
 800a368:	f103 0308 	add.w	r3, r3, #8
 800a36c:	ee35 4a87 	vadd.f32	s8, s11, s14
 800a370:	f106 0608 	add.w	r6, r6, #8
 800a374:	ee66 4a27 	vmul.f32	s9, s12, s15
 800a378:	ee77 5a65 	vsub.f32	s11, s14, s11
 800a37c:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800a380:	ee34 5a85 	vadd.f32	s10, s9, s10
 800a384:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a388:	ee66 6a84 	vmul.f32	s13, s13, s8
 800a38c:	ee77 7a25 	vadd.f32	s15, s14, s11
 800a390:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a394:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a398:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800a39c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a3a0:	ed46 6a04 	vstr	s13, [r6, #-16]
 800a3a4:	ed46 7a03 	vstr	s15, [r6, #-12]
 800a3a8:	d1c9      	bne.n	800a33e <arm_rfft_fast_f32+0x62>
 800a3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ae:	edd1 7a00 	vldr	s15, [r1]
 800a3b2:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800a3b6:	edd1 6a01 	vldr	s13, [r1, #4]
 800a3ba:	1e68      	subs	r0, r5, #1
 800a3bc:	6975      	ldr	r5, [r6, #20]
 800a3be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a3c2:	00c1      	lsls	r1, r0, #3
 800a3c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a3c8:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a3cc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a3d0:	ed82 7a00 	vstr	s14, [r2]
 800a3d4:	edc2 7a01 	vstr	s15, [r2, #4]
 800a3d8:	b3e0      	cbz	r0, 800a454 <arm_rfft_fast_f32+0x178>
 800a3da:	3908      	subs	r1, #8
 800a3dc:	f104 0210 	add.w	r2, r4, #16
 800a3e0:	3510      	adds	r5, #16
 800a3e2:	440c      	add	r4, r1
 800a3e4:	f108 0110 	add.w	r1, r8, #16
 800a3e8:	ed94 7a02 	vldr	s14, [r4, #8]
 800a3ec:	3801      	subs	r0, #1
 800a3ee:	ed52 6a02 	vldr	s13, [r2, #-8]
 800a3f2:	f1a4 0408 	sub.w	r4, r4, #8
 800a3f6:	ed15 6a02 	vldr	s12, [r5, #-8]
 800a3fa:	f102 0208 	add.w	r2, r2, #8
 800a3fe:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800a402:	ed94 4a05 	vldr	s8, [r4, #20]
 800a406:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a40a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800a40e:	ed55 5a01 	vldr	s11, [r5, #-4]
 800a412:	f101 0108 	add.w	r1, r1, #8
 800a416:	ee26 3a27 	vmul.f32	s6, s12, s15
 800a41a:	f105 0508 	add.w	r5, r5, #8
 800a41e:	ee74 4a05 	vadd.f32	s9, s8, s10
 800a422:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800a426:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a42a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a42e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a432:	ee77 7a05 	vadd.f32	s15, s14, s10
 800a436:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800a43a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a43e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800a442:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800a446:	ee27 7a23 	vmul.f32	s14, s14, s7
 800a44a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a44e:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a452:	d1c9      	bne.n	800a3e8 <arm_rfft_fast_f32+0x10c>
 800a454:	4630      	mov	r0, r6
 800a456:	4641      	mov	r1, r8
 800a458:	461a      	mov	r2, r3
 800a45a:	2301      	movs	r3, #1
 800a45c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a460:	f000 bb2a 	b.w	800aab8 <arm_cfft_f32>

0800a464 <arm_cfft_radix8by2_f32>:
 800a464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a468:	ed2d 8b06 	vpush	{d8-d10}
 800a46c:	f8b0 e000 	ldrh.w	lr, [r0]
 800a470:	4607      	mov	r7, r0
 800a472:	6842      	ldr	r2, [r0, #4]
 800a474:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800a478:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800a47c:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800a480:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800a484:	f000 80af 	beq.w	800a5e6 <arm_cfft_radix8by2_f32+0x182>
 800a488:	3310      	adds	r3, #16
 800a48a:	3210      	adds	r2, #16
 800a48c:	f101 0610 	add.w	r6, r1, #16
 800a490:	f108 0510 	add.w	r5, r8, #16
 800a494:	18cc      	adds	r4, r1, r3
 800a496:	4443      	add	r3, r8
 800a498:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a49c:	f1be 0e01 	subs.w	lr, lr, #1
 800a4a0:	ed56 4a04 	vldr	s9, [r6, #-16]
 800a4a4:	f104 0410 	add.w	r4, r4, #16
 800a4a8:	ed55 7a02 	vldr	s15, [r5, #-8]
 800a4ac:	f106 0610 	add.w	r6, r6, #16
 800a4b0:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800a4b4:	ed53 0a04 	vldr	s1, [r3, #-16]
 800a4b8:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a4bc:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a4c0:	ed13 3a02 	vldr	s6, [r3, #-8]
 800a4c4:	f102 0210 	add.w	r2, r2, #16
 800a4c8:	ed15 7a03 	vldr	s14, [r5, #-12]
 800a4cc:	f103 0310 	add.w	r3, r3, #16
 800a4d0:	ed55 2a01 	vldr	s5, [r5, #-4]
 800a4d4:	f105 0510 	add.w	r5, r5, #16
 800a4d8:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800a4dc:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800a4e0:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800a4e4:	ee33 8a83 	vadd.f32	s16, s7, s6
 800a4e8:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800a4ec:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800a4f0:	ee34 0a06 	vadd.f32	s0, s8, s12
 800a4f4:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800a4f8:	ee76 aa87 	vadd.f32	s21, s13, s14
 800a4fc:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800a500:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a504:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800a508:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800a50c:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800a510:	ee71 8a05 	vadd.f32	s17, s2, s10
 800a514:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800a518:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800a51c:	ee72 9a22 	vadd.f32	s19, s4, s5
 800a520:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a524:	ee35 5a41 	vsub.f32	s10, s10, s2
 800a528:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800a52c:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800a530:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a534:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 800a538:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800a53c:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800a540:	ee72 7a62 	vsub.f32	s15, s4, s5
 800a544:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 800a548:	ee73 2a63 	vsub.f32	s5, s6, s7
 800a54c:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800a550:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800a554:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800a558:	ee24 3a84 	vmul.f32	s6, s9, s8
 800a55c:	ee27 2a26 	vmul.f32	s4, s14, s13
 800a560:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800a564:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800a568:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a56c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a570:	ee65 6a26 	vmul.f32	s13, s10, s13
 800a574:	ee25 5a04 	vmul.f32	s10, s10, s8
 800a578:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a57c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a580:	ee33 4a02 	vadd.f32	s8, s6, s4
 800a584:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800a588:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800a58c:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800a590:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800a594:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800a598:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800a59c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800a5a0:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800a5a4:	ee27 4a87 	vmul.f32	s8, s15, s14
 800a5a8:	ee61 5a87 	vmul.f32	s11, s3, s14
 800a5ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a5b0:	ee22 5a87 	vmul.f32	s10, s5, s14
 800a5b4:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a5b8:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a5bc:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800a5c0:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a5c4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a5c8:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a5cc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a5d0:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800a5d4:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800a5d8:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800a5dc:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800a5e0:	f47f af5a 	bne.w	800a498 <arm_cfft_radix8by2_f32+0x34>
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	fa1f f48c 	uxth.w	r4, ip
 800a5ea:	4608      	mov	r0, r1
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	f000 fcac 	bl	800af4c <arm_radix8_butterfly_f32>
 800a5f4:	4640      	mov	r0, r8
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	ecbd 8b06 	vpop	{d8-d10}
 800a600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a604:	f000 bca2 	b.w	800af4c <arm_radix8_butterfly_f32>

0800a608 <arm_cfft_radix8by4_f32>:
 800a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	ed2d 8b06 	vpush	{d8-d10}
 800a610:	8804      	ldrh	r4, [r0, #0]
 800a612:	b08f      	sub	sp, #60	@ 0x3c
 800a614:	ed91 6a00 	vldr	s12, [r1]
 800a618:	460a      	mov	r2, r1
 800a61a:	0864      	lsrs	r4, r4, #1
 800a61c:	ed91 7a01 	vldr	s14, [r1, #4]
 800a620:	9101      	str	r1, [sp, #4]
 800a622:	00a3      	lsls	r3, r4, #2
 800a624:	9104      	str	r1, [sp, #16]
 800a626:	0864      	lsrs	r4, r4, #1
 800a628:	6841      	ldr	r1, [r0, #4]
 800a62a:	900c      	str	r0, [sp, #48]	@ 0x30
 800a62c:	4625      	mov	r5, r4
 800a62e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a630:	f101 0408 	add.w	r4, r1, #8
 800a634:	f101 0610 	add.w	r6, r1, #16
 800a638:	9406      	str	r4, [sp, #24]
 800a63a:	18d4      	adds	r4, r2, r3
 800a63c:	1eaa      	subs	r2, r5, #2
 800a63e:	f101 0518 	add.w	r5, r1, #24
 800a642:	18e0      	adds	r0, r4, r3
 800a644:	ed94 4a00 	vldr	s8, [r4]
 800a648:	edd4 3a01 	vldr	s7, [r4, #4]
 800a64c:	46a6      	mov	lr, r4
 800a64e:	edd0 6a00 	vldr	s13, [r0]
 800a652:	18c7      	adds	r7, r0, r3
 800a654:	edd0 7a01 	vldr	s15, [r0, #4]
 800a658:	46a0      	mov	r8, r4
 800a65a:	ee76 5a26 	vadd.f32	s11, s12, s13
 800a65e:	edd7 4a00 	vldr	s9, [r7]
 800a662:	9402      	str	r4, [sp, #8]
 800a664:	4604      	mov	r4, r0
 800a666:	9507      	str	r5, [sp, #28]
 800a668:	4605      	mov	r5, r0
 800a66a:	ee75 2a84 	vadd.f32	s5, s11, s8
 800a66e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a670:	9801      	ldr	r0, [sp, #4]
 800a672:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a676:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a67a:	ed97 5a01 	vldr	s10, [r7, #4]
 800a67e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a682:	46bc      	mov	ip, r7
 800a684:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a688:	9605      	str	r6, [sp, #20]
 800a68a:	ee36 7a63 	vsub.f32	s14, s12, s7
 800a68e:	9703      	str	r7, [sp, #12]
 800a690:	ee12 9a90 	vmov	r9, s5
 800a694:	ee33 3aa6 	vadd.f32	s6, s7, s13
 800a698:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800a69c:	1f3e      	subs	r6, r7, #4
 800a69e:	f840 9b08 	str.w	r9, [r0], #8
 800a6a2:	ee76 6ae3 	vsub.f32	s13, s13, s7
 800a6a6:	edde 2a01 	vldr	s5, [lr, #4]
 800a6aa:	ee77 3ac4 	vsub.f32	s7, s15, s8
 800a6ae:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a6b2:	ed9c 4a01 	vldr	s8, [ip, #4]
 800a6b6:	ee36 6a22 	vadd.f32	s12, s12, s5
 800a6ba:	9001      	str	r0, [sp, #4]
 800a6bc:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a6c0:	9804      	ldr	r0, [sp, #16]
 800a6c2:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a6c6:	f1ae 0704 	sub.w	r7, lr, #4
 800a6ca:	ee36 6a04 	vadd.f32	s12, s12, s8
 800a6ce:	ee33 4a45 	vsub.f32	s8, s6, s10
 800a6d2:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800a6d6:	ee33 5aa4 	vadd.f32	s10, s7, s9
 800a6da:	ed80 6a01 	vstr	s12, [r0, #4]
 800a6de:	ee14 9a10 	vmov	r9, s8
 800a6e2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a6e6:	f848 9b08 	str.w	r9, [r8], #8
 800a6ea:	ed8e 5a01 	vstr	s10, [lr, #4]
 800a6ee:	ee15 ea90 	vmov	lr, s11
 800a6f2:	f844 eb08 	str.w	lr, [r4], #8
 800a6f6:	ee16 ea90 	vmov	lr, s13
 800a6fa:	9408      	str	r4, [sp, #32]
 800a6fc:	462c      	mov	r4, r5
 800a6fe:	ed85 7a01 	vstr	s14, [r5, #4]
 800a702:	9d03      	ldr	r5, [sp, #12]
 800a704:	f84c eb08 	str.w	lr, [ip], #8
 800a708:	edc5 7a01 	vstr	s15, [r5, #4]
 800a70c:	0855      	lsrs	r5, r2, #1
 800a70e:	9509      	str	r5, [sp, #36]	@ 0x24
 800a710:	f000 8130 	beq.w	800a974 <arm_cfft_radix8by4_f32+0x36c>
 800a714:	9804      	ldr	r0, [sp, #16]
 800a716:	3b08      	subs	r3, #8
 800a718:	46ab      	mov	fp, r5
 800a71a:	f1a4 020c 	sub.w	r2, r4, #12
 800a71e:	f100 0510 	add.w	r5, r0, #16
 800a722:	f101 0920 	add.w	r9, r1, #32
 800a726:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800a72a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a72e:	4433      	add	r3, r6
 800a730:	3410      	adds	r4, #16
 800a732:	4660      	mov	r0, ip
 800a734:	4641      	mov	r1, r8
 800a736:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800a73a:	ed54 6a02 	vldr	s13, [r4, #-8]
 800a73e:	f1bb 0b01 	subs.w	fp, fp, #1
 800a742:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a746:	f10a 0a08 	add.w	sl, sl, #8
 800a74a:	edd1 7a00 	vldr	s15, [r1]
 800a74e:	f105 0508 	add.w	r5, r5, #8
 800a752:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800a756:	edd0 2a00 	vldr	s5, [r0]
 800a75a:	ed14 7a01 	vldr	s14, [r4, #-4]
 800a75e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800a762:	ed55 6a03 	vldr	s13, [r5, #-12]
 800a766:	f1a2 0208 	sub.w	r2, r2, #8
 800a76a:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800a76e:	ed90 2a01 	vldr	s4, [r0, #4]
 800a772:	ee36 5a87 	vadd.f32	s10, s13, s14
 800a776:	ed91 6a01 	vldr	s12, [r1, #4]
 800a77a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a77e:	f109 0910 	add.w	r9, r9, #16
 800a782:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800a786:	f104 0408 	add.w	r4, r4, #8
 800a78a:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800a78e:	f10e 0e18 	add.w	lr, lr, #24
 800a792:	ee37 3a67 	vsub.f32	s6, s14, s15
 800a796:	f1a3 0308 	sub.w	r3, r3, #8
 800a79a:	ed45 6a04 	vstr	s13, [r5, #-16]
 800a79e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a7a2:	edd1 6a01 	vldr	s13, [r1, #4]
 800a7a6:	ee76 1a25 	vadd.f32	s3, s12, s11
 800a7aa:	edd0 4a01 	vldr	s9, [r0, #4]
 800a7ae:	ee33 3a22 	vadd.f32	s6, s6, s5
 800a7b2:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a7b6:	ee35 5a46 	vsub.f32	s10, s10, s12
 800a7ba:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a7be:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a7c2:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800a7c6:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a7ca:	ed45 6a03 	vstr	s13, [r5, #-12]
 800a7ce:	ee32 2a06 	vadd.f32	s4, s4, s12
 800a7d2:	edd6 7a00 	vldr	s15, [r6]
 800a7d6:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800a7da:	ed97 1a00 	vldr	s2, [r7]
 800a7de:	ee77 2a62 	vsub.f32	s5, s14, s5
 800a7e2:	ed92 8a04 	vldr	s16, [r2, #16]
 800a7e6:	ee71 8a27 	vadd.f32	s17, s2, s15
 800a7ea:	ed93 aa04 	vldr	s20, [r3, #16]
 800a7ee:	ed16 7a01 	vldr	s14, [r6, #-4]
 800a7f2:	ee71 7a67 	vsub.f32	s15, s2, s15
 800a7f6:	ed57 0a01 	vldr	s1, [r7, #-4]
 800a7fa:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800a7fe:	ee38 6a88 	vadd.f32	s12, s17, s16
 800a802:	edd3 9a03 	vldr	s19, [r3, #12]
 800a806:	ee30 0a87 	vadd.f32	s0, s1, s14
 800a80a:	ed92 9a03 	vldr	s18, [r2, #12]
 800a80e:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800a812:	ee3a 6a06 	vadd.f32	s12, s20, s12
 800a816:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800a81a:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800a81e:	ee16 ca10 	vmov	ip, s12
 800a822:	ee30 6a49 	vsub.f32	s12, s0, s18
 800a826:	ee71 4a07 	vadd.f32	s9, s2, s14
 800a82a:	f847 c908 	str.w	ip, [r7], #-8
 800a82e:	ee34 4a29 	vadd.f32	s8, s8, s19
 800a832:	edd2 8a03 	vldr	s17, [r2, #12]
 800a836:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800a83a:	ed93 8a03 	vldr	s16, [r3, #12]
 800a83e:	ee71 0a47 	vsub.f32	s1, s2, s14
 800a842:	ee30 0a28 	vadd.f32	s0, s0, s17
 800a846:	ee39 1a67 	vsub.f32	s2, s18, s15
 800a84a:	ee36 6a69 	vsub.f32	s12, s12, s19
 800a84e:	ee30 0a08 	vadd.f32	s0, s0, s16
 800a852:	ee75 5aca 	vsub.f32	s11, s11, s20
 800a856:	ed87 0a01 	vstr	s0, [r7, #4]
 800a85a:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800a85e:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800a862:	ee21 8a80 	vmul.f32	s16, s3, s0
 800a866:	ee23 7a26 	vmul.f32	s14, s6, s13
 800a86a:	ee64 7a26 	vmul.f32	s15, s8, s13
 800a86e:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800a872:	ee24 4a00 	vmul.f32	s8, s8, s0
 800a876:	ee23 3a00 	vmul.f32	s6, s6, s0
 800a87a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a87e:	ee24 0a80 	vmul.f32	s0, s9, s0
 800a882:	ee38 7a07 	vadd.f32	s14, s16, s14
 800a886:	ee76 6a84 	vadd.f32	s13, s13, s8
 800a88a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a88e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a892:	ee17 ca10 	vmov	ip, s14
 800a896:	f841 cb08 	str.w	ip, [r1], #8
 800a89a:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a89e:	ed82 0a04 	vstr	s0, [r2, #16]
 800a8a2:	edc2 6a03 	vstr	s13, [r2, #12]
 800a8a6:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 800a8aa:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 800a8ae:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800a8b2:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800a8b6:	ee65 4a27 	vmul.f32	s9, s10, s15
 800a8ba:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800a8be:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800a8c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a8c6:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a8ca:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a8ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8d2:	ee34 6a24 	vadd.f32	s12, s8, s9
 800a8d6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800a8da:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a8de:	ee17 ca90 	vmov	ip, s15
 800a8e2:	ed04 6a04 	vstr	s12, [r4, #-16]
 800a8e6:	ed04 5a03 	vstr	s10, [r4, #-12]
 800a8ea:	f846 c908 	str.w	ip, [r6], #-8
 800a8ee:	edc6 6a01 	vstr	s13, [r6, #4]
 800a8f2:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 800a8f6:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 800a8fa:	ee62 5a27 	vmul.f32	s11, s4, s15
 800a8fe:	ee22 6a87 	vmul.f32	s12, s5, s14
 800a902:	ee22 2a07 	vmul.f32	s4, s4, s14
 800a906:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800a90a:	ee61 6a07 	vmul.f32	s13, s2, s14
 800a90e:	ee20 7a87 	vmul.f32	s14, s1, s14
 800a912:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a916:	ee61 7a27 	vmul.f32	s15, s2, s15
 800a91a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a91e:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800a922:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800a926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a92a:	ee16 ca10 	vmov	ip, s12
 800a92e:	f840 cb08 	str.w	ip, [r0], #8
 800a932:	ed40 2a01 	vstr	s5, [r0, #-4]
 800a936:	edc3 0a04 	vstr	s1, [r3, #16]
 800a93a:	edc3 7a03 	vstr	s15, [r3, #12]
 800a93e:	f47f aefc 	bne.w	800a73a <arm_cfft_radix8by4_f32+0x132>
 800a942:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a944:	9805      	ldr	r0, [sp, #20]
 800a946:	00cb      	lsls	r3, r1, #3
 800a948:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800a94c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a950:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a954:	4498      	add	r8, r3
 800a956:	449c      	add	ip, r3
 800a958:	9105      	str	r1, [sp, #20]
 800a95a:	9901      	ldr	r1, [sp, #4]
 800a95c:	4419      	add	r1, r3
 800a95e:	9101      	str	r1, [sp, #4]
 800a960:	9906      	ldr	r1, [sp, #24]
 800a962:	4419      	add	r1, r3
 800a964:	9106      	str	r1, [sp, #24]
 800a966:	9908      	ldr	r1, [sp, #32]
 800a968:	4419      	add	r1, r3
 800a96a:	9b07      	ldr	r3, [sp, #28]
 800a96c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a970:	9108      	str	r1, [sp, #32]
 800a972:	9307      	str	r3, [sp, #28]
 800a974:	9a01      	ldr	r2, [sp, #4]
 800a976:	2304      	movs	r3, #4
 800a978:	9e08      	ldr	r6, [sp, #32]
 800a97a:	edd2 6a00 	vldr	s13, [r2]
 800a97e:	ed96 4a00 	vldr	s8, [r6]
 800a982:	edd8 7a00 	vldr	s15, [r8]
 800a986:	ee36 6a84 	vadd.f32	s12, s13, s8
 800a98a:	eddc 2a00 	vldr	s5, [ip]
 800a98e:	ed96 7a01 	vldr	s14, [r6, #4]
 800a992:	ee36 4ac4 	vsub.f32	s8, s13, s8
 800a996:	edd2 6a01 	vldr	s13, [r2, #4]
 800a99a:	ee76 4a27 	vadd.f32	s9, s12, s15
 800a99e:	ed98 2a01 	vldr	s4, [r8, #4]
 800a9a2:	ee76 5a87 	vadd.f32	s11, s13, s14
 800a9a6:	ed9c 5a01 	vldr	s10, [ip, #4]
 800a9aa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a9ae:	9d05      	ldr	r5, [sp, #20]
 800a9b0:	ee72 6aa4 	vadd.f32	s13, s5, s9
 800a9b4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800a9b8:	ee72 3a04 	vadd.f32	s7, s4, s8
 800a9bc:	9804      	ldr	r0, [sp, #16]
 800a9be:	ee77 4a67 	vsub.f32	s9, s14, s15
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	edc2 6a00 	vstr	s13, [r2]
 800a9c8:	ee76 6a67 	vsub.f32	s13, s12, s15
 800a9cc:	ed98 3a01 	vldr	s6, [r8, #4]
 800a9d0:	ee35 6ac2 	vsub.f32	s12, s11, s4
 800a9d4:	eddc 1a01 	vldr	s3, [ip, #4]
 800a9d8:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800a9dc:	ee35 3a83 	vadd.f32	s6, s11, s6
 800a9e0:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a9e4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a9e8:	ee73 5a21 	vadd.f32	s11, s6, s3
 800a9ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a9f0:	ee36 6a45 	vsub.f32	s12, s12, s10
 800a9f4:	edc2 5a01 	vstr	s11, [r2, #4]
 800a9f8:	ee35 5a04 	vadd.f32	s10, s10, s8
 800a9fc:	9a06      	ldr	r2, [sp, #24]
 800a9fe:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800aa02:	edd2 7a00 	vldr	s15, [r2]
 800aa06:	edd2 5a01 	vldr	s11, [r2, #4]
 800aa0a:	ee23 4aa7 	vmul.f32	s8, s7, s15
 800aa0e:	ee63 3aa5 	vmul.f32	s7, s7, s11
 800aa12:	ee64 5aa5 	vmul.f32	s11, s9, s11
 800aa16:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800aa1a:	ee77 7a62 	vsub.f32	s15, s14, s5
 800aa1e:	ee74 5a25 	vadd.f32	s11, s8, s11
 800aa22:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800aa26:	edc8 5a00 	vstr	s11, [r8]
 800aa2a:	edc8 4a01 	vstr	s9, [r8, #4]
 800aa2e:	edd5 4a01 	vldr	s9, [r5, #4]
 800aa32:	ed95 7a00 	vldr	s14, [r5]
 800aa36:	9d07      	ldr	r5, [sp, #28]
 800aa38:	ee66 5a87 	vmul.f32	s11, s13, s14
 800aa3c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800aa40:	ee26 7a07 	vmul.f32	s14, s12, s14
 800aa44:	ee26 6a24 	vmul.f32	s12, s12, s9
 800aa48:	ee77 6a66 	vsub.f32	s13, s14, s13
 800aa4c:	ee35 6a86 	vadd.f32	s12, s11, s12
 800aa50:	edc6 6a01 	vstr	s13, [r6, #4]
 800aa54:	ed86 6a00 	vstr	s12, [r6]
 800aa58:	ed95 6a01 	vldr	s12, [r5, #4]
 800aa5c:	ed95 7a00 	vldr	s14, [r5]
 800aa60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa62:	ee65 6a07 	vmul.f32	s13, s10, s14
 800aa66:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aa6a:	ee25 5a06 	vmul.f32	s10, s10, s12
 800aa6e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800aa72:	ee37 5a45 	vsub.f32	s10, s14, s10
 800aa76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa7a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800aa7e:	edcc 7a00 	vstr	s15, [ip]
 800aa82:	6872      	ldr	r2, [r6, #4]
 800aa84:	f000 fa62 	bl	800af4c <arm_radix8_butterfly_f32>
 800aa88:	9802      	ldr	r0, [sp, #8]
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	6872      	ldr	r2, [r6, #4]
 800aa8e:	2304      	movs	r3, #4
 800aa90:	f000 fa5c 	bl	800af4c <arm_radix8_butterfly_f32>
 800aa94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa96:	4621      	mov	r1, r4
 800aa98:	6872      	ldr	r2, [r6, #4]
 800aa9a:	2304      	movs	r3, #4
 800aa9c:	f000 fa56 	bl	800af4c <arm_radix8_butterfly_f32>
 800aaa0:	9803      	ldr	r0, [sp, #12]
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	6872      	ldr	r2, [r6, #4]
 800aaa6:	2304      	movs	r3, #4
 800aaa8:	b00f      	add	sp, #60	@ 0x3c
 800aaaa:	ecbd 8b06 	vpop	{d8-d10}
 800aaae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab2:	f000 ba4b 	b.w	800af4c <arm_radix8_butterfly_f32>
 800aab6:	bf00      	nop

0800aab8 <arm_cfft_f32>:
 800aab8:	2a01      	cmp	r2, #1
 800aaba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aabe:	4606      	mov	r6, r0
 800aac0:	4617      	mov	r7, r2
 800aac2:	460c      	mov	r4, r1
 800aac4:	4698      	mov	r8, r3
 800aac6:	8805      	ldrh	r5, [r0, #0]
 800aac8:	d053      	beq.n	800ab72 <arm_cfft_f32+0xba>
 800aaca:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800aace:	d04b      	beq.n	800ab68 <arm_cfft_f32+0xb0>
 800aad0:	d916      	bls.n	800ab00 <arm_cfft_f32+0x48>
 800aad2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800aad6:	d01a      	beq.n	800ab0e <arm_cfft_f32+0x56>
 800aad8:	d95a      	bls.n	800ab90 <arm_cfft_f32+0xd8>
 800aada:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800aade:	d043      	beq.n	800ab68 <arm_cfft_f32+0xb0>
 800aae0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800aae4:	d105      	bne.n	800aaf2 <arm_cfft_f32+0x3a>
 800aae6:	4620      	mov	r0, r4
 800aae8:	4629      	mov	r1, r5
 800aaea:	6872      	ldr	r2, [r6, #4]
 800aaec:	2301      	movs	r3, #1
 800aaee:	f000 fa2d 	bl	800af4c <arm_radix8_butterfly_f32>
 800aaf2:	f1b8 0f00 	cmp.w	r8, #0
 800aaf6:	d111      	bne.n	800ab1c <arm_cfft_f32+0x64>
 800aaf8:	2f01      	cmp	r7, #1
 800aafa:	d016      	beq.n	800ab2a <arm_cfft_f32+0x72>
 800aafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab00:	2d20      	cmp	r5, #32
 800ab02:	d031      	beq.n	800ab68 <arm_cfft_f32+0xb0>
 800ab04:	d948      	bls.n	800ab98 <arm_cfft_f32+0xe0>
 800ab06:	2d40      	cmp	r5, #64	@ 0x40
 800ab08:	d0ed      	beq.n	800aae6 <arm_cfft_f32+0x2e>
 800ab0a:	2d80      	cmp	r5, #128	@ 0x80
 800ab0c:	d1f1      	bne.n	800aaf2 <arm_cfft_f32+0x3a>
 800ab0e:	4630      	mov	r0, r6
 800ab10:	4621      	mov	r1, r4
 800ab12:	f7ff fca7 	bl	800a464 <arm_cfft_radix8by2_f32>
 800ab16:	f1b8 0f00 	cmp.w	r8, #0
 800ab1a:	d0ed      	beq.n	800aaf8 <arm_cfft_f32+0x40>
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	89b1      	ldrh	r1, [r6, #12]
 800ab20:	68b2      	ldr	r2, [r6, #8]
 800ab22:	f7f5 fbdd 	bl	80002e0 <arm_bitreversal_32>
 800ab26:	2f01      	cmp	r7, #1
 800ab28:	d1e8      	bne.n	800aafc <arm_cfft_f32+0x44>
 800ab2a:	ee07 5a90 	vmov	s15, r5
 800ab2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab32:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ab36:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800ab3a:	2d00      	cmp	r5, #0
 800ab3c:	d0de      	beq.n	800aafc <arm_cfft_f32+0x44>
 800ab3e:	f104 0108 	add.w	r1, r4, #8
 800ab42:	2300      	movs	r3, #0
 800ab44:	ed11 7a02 	vldr	s14, [r1, #-8]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ab4e:	3108      	adds	r1, #8
 800ab50:	429d      	cmp	r5, r3
 800ab52:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ab56:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ab5a:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ab5e:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ab62:	d1ef      	bne.n	800ab44 <arm_cfft_f32+0x8c>
 800ab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	f7ff fd4c 	bl	800a608 <arm_cfft_radix8by4_f32>
 800ab70:	e7bf      	b.n	800aaf2 <arm_cfft_f32+0x3a>
 800ab72:	b1a5      	cbz	r5, 800ab9e <arm_cfft_f32+0xe6>
 800ab74:	f101 030c 	add.w	r3, r1, #12
 800ab78:	2200      	movs	r2, #0
 800ab7a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ab7e:	3201      	adds	r2, #1
 800ab80:	3308      	adds	r3, #8
 800ab82:	eef1 7a67 	vneg.f32	s15, s15
 800ab86:	4295      	cmp	r5, r2
 800ab88:	ed43 7a04 	vstr	s15, [r3, #-16]
 800ab8c:	d1f5      	bne.n	800ab7a <arm_cfft_f32+0xc2>
 800ab8e:	e79c      	b.n	800aaca <arm_cfft_f32+0x12>
 800ab90:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800ab94:	d0a7      	beq.n	800aae6 <arm_cfft_f32+0x2e>
 800ab96:	e7ac      	b.n	800aaf2 <arm_cfft_f32+0x3a>
 800ab98:	2d10      	cmp	r5, #16
 800ab9a:	d0b8      	beq.n	800ab0e <arm_cfft_f32+0x56>
 800ab9c:	e7a9      	b.n	800aaf2 <arm_cfft_f32+0x3a>
 800ab9e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800aba2:	d896      	bhi.n	800aad2 <arm_cfft_f32+0x1a>
 800aba4:	e7ac      	b.n	800ab00 <arm_cfft_f32+0x48>
 800aba6:	bf00      	nop

0800aba8 <arm_biquad_cascade_df1_init_f32>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	461d      	mov	r5, r3
 800abb0:	2100      	movs	r1, #0
 800abb2:	60a2      	str	r2, [r4, #8]
 800abb4:	0102      	lsls	r2, r0, #4
 800abb6:	6020      	str	r0, [r4, #0]
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 feda 	bl	800b972 <memset>
 800abbe:	6065      	str	r5, [r4, #4]
 800abc0:	bd38      	pop	{r3, r4, r5, pc}
 800abc2:	bf00      	nop

0800abc4 <arm_biquad_cascade_df1_f32>:
 800abc4:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800abc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abcc:	4696      	mov	lr, r2
 800abce:	6886      	ldr	r6, [r0, #8]
 800abd0:	6845      	ldr	r5, [r0, #4]
 800abd2:	ea4f 180c 	mov.w	r8, ip, lsl #4
 800abd6:	f003 0203 	and.w	r2, r3, #3
 800abda:	3614      	adds	r6, #20
 800abdc:	3510      	adds	r5, #16
 800abde:	6807      	ldr	r7, [r0, #0]
 800abe0:	eb0e 0908 	add.w	r9, lr, r8
 800abe4:	ed56 3a05 	vldr	s7, [r6, #-20]	@ 0xffffffec
 800abe8:	ed16 3a04 	vldr	s6, [r6, #-16]
 800abec:	ed56 2a03 	vldr	s5, [r6, #-12]
 800abf0:	ed16 2a02 	vldr	s4, [r6, #-8]
 800abf4:	ed56 1a01 	vldr	s3, [r6, #-4]
 800abf8:	ed15 1a04 	vldr	s2, [r5, #-16]
 800abfc:	ed55 0a03 	vldr	s1, [r5, #-12]
 800ac00:	ed55 7a02 	vldr	s15, [r5, #-8]
 800ac04:	ed15 6a01 	vldr	s12, [r5, #-4]
 800ac08:	f1bc 0f00 	cmp.w	ip, #0
 800ac0c:	f000 80a3 	beq.w	800ad56 <arm_biquad_cascade_df1_f32+0x192>
 800ac10:	f101 0010 	add.w	r0, r1, #16
 800ac14:	f10e 0310 	add.w	r3, lr, #16
 800ac18:	4664      	mov	r4, ip
 800ac1a:	ed10 4a04 	vldr	s8, [r0, #-16]
 800ac1e:	ee23 7a01 	vmul.f32	s14, s6, s2
 800ac22:	ee62 0aa0 	vmul.f32	s1, s5, s1
 800ac26:	3c01      	subs	r4, #1
 800ac28:	ee23 5a84 	vmul.f32	s10, s7, s8
 800ac2c:	f100 0010 	add.w	r0, r0, #16
 800ac30:	ee22 0a27 	vmul.f32	s0, s4, s15
 800ac34:	f103 0310 	add.w	r3, r3, #16
 800ac38:	ee21 6a86 	vmul.f32	s12, s3, s12
 800ac3c:	ee75 4a07 	vadd.f32	s9, s10, s14
 800ac40:	ee61 6aa7 	vmul.f32	s13, s3, s15
 800ac44:	ee63 5a04 	vmul.f32	s11, s6, s8
 800ac48:	ee34 7aa0 	vadd.f32	s14, s9, s1
 800ac4c:	ee22 1a81 	vmul.f32	s2, s5, s2
 800ac50:	ee22 4a84 	vmul.f32	s8, s5, s8
 800ac54:	ee37 7a00 	vadd.f32	s14, s14, s0
 800ac58:	ee37 6a06 	vadd.f32	s12, s14, s12
 800ac5c:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 800ac60:	ee22 7a06 	vmul.f32	s14, s4, s12
 800ac64:	ed50 7a07 	vldr	s15, [r0, #-28]	@ 0xffffffe4
 800ac68:	ee21 6a86 	vmul.f32	s12, s3, s12
 800ac6c:	ee23 5aa7 	vmul.f32	s10, s7, s15
 800ac70:	ee23 0a27 	vmul.f32	s0, s6, s15
 800ac74:	ee62 4aa7 	vmul.f32	s9, s5, s15
 800ac78:	ee35 5a25 	vadd.f32	s10, s10, s11
 800ac7c:	ee75 5a01 	vadd.f32	s11, s10, s2
 800ac80:	ee75 5a87 	vadd.f32	s11, s11, s14
 800ac84:	ee75 6aa6 	vadd.f32	s13, s11, s13
 800ac88:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800ac8c:	ee62 7a26 	vmul.f32	s15, s4, s13
 800ac90:	ed50 0a06 	vldr	s1, [r0, #-24]	@ 0xffffffe8
 800ac94:	ee61 5aa6 	vmul.f32	s11, s3, s13
 800ac98:	ee23 5aa0 	vmul.f32	s10, s7, s1
 800ac9c:	ee23 7a20 	vmul.f32	s14, s6, s1
 800aca0:	ee35 5a00 	vadd.f32	s10, s10, s0
 800aca4:	ee75 6a04 	vadd.f32	s13, s10, s8
 800aca8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800acac:	ee36 6a86 	vadd.f32	s12, s13, s12
 800acb0:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800acb4:	ee62 7a06 	vmul.f32	s15, s4, s12
 800acb8:	ed10 1a05 	vldr	s2, [r0, #-20]	@ 0xffffffec
 800acbc:	ee63 6a81 	vmul.f32	s13, s7, s2
 800acc0:	ee36 7a87 	vadd.f32	s14, s13, s14
 800acc4:	ee37 7a24 	vadd.f32	s14, s14, s9
 800acc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800accc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800acd0:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800acd4:	d1a1      	bne.n	800ac1a <arm_biquad_cascade_df1_f32+0x56>
 800acd6:	4441      	add	r1, r8
 800acd8:	4648      	mov	r0, r9
 800acda:	b39a      	cbz	r2, 800ad44 <arm_biquad_cascade_df1_f32+0x180>
 800acdc:	4613      	mov	r3, r2
 800acde:	e003      	b.n	800ace8 <arm_biquad_cascade_df1_f32+0x124>
 800ace0:	eef0 7a45 	vmov.f32	s15, s10
 800ace4:	eeb0 1a47 	vmov.f32	s2, s14
 800ace8:	ecb1 7a01 	vldmia	r1!, {s14}
 800acec:	ee63 4a01 	vmul.f32	s9, s6, s2
 800acf0:	ee62 5aa0 	vmul.f32	s11, s5, s1
 800acf4:	3b01      	subs	r3, #1
 800acf6:	ee23 4a87 	vmul.f32	s8, s7, s14
 800acfa:	ee22 5a27 	vmul.f32	s10, s4, s15
 800acfe:	ee61 6a86 	vmul.f32	s13, s3, s12
 800ad02:	ee74 4a24 	vadd.f32	s9, s8, s9
 800ad06:	eef0 0a41 	vmov.f32	s1, s2
 800ad0a:	eeb0 6a67 	vmov.f32	s12, s15
 800ad0e:	ee74 4aa5 	vadd.f32	s9, s9, s11
 800ad12:	ee34 5a85 	vadd.f32	s10, s9, s10
 800ad16:	ee35 5a26 	vadd.f32	s10, s10, s13
 800ad1a:	eca0 5a01 	vstmia	r0!, {s10}
 800ad1e:	d1df      	bne.n	800ace0 <arm_biquad_cascade_df1_f32+0x11c>
 800ad20:	3f01      	subs	r7, #1
 800ad22:	ed05 7a04 	vstr	s14, [r5, #-16]
 800ad26:	ed05 1a03 	vstr	s2, [r5, #-12]
 800ad2a:	f106 0614 	add.w	r6, r6, #20
 800ad2e:	ed05 5a02 	vstr	s10, [r5, #-8]
 800ad32:	4671      	mov	r1, lr
 800ad34:	ed45 7a01 	vstr	s15, [r5, #-4]
 800ad38:	f105 0510 	add.w	r5, r5, #16
 800ad3c:	f47f af52 	bne.w	800abe4 <arm_biquad_cascade_df1_f32+0x20>
 800ad40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad44:	eeb0 5a67 	vmov.f32	s10, s15
 800ad48:	eeb0 7a41 	vmov.f32	s14, s2
 800ad4c:	eef0 7a46 	vmov.f32	s15, s12
 800ad50:	eeb0 1a60 	vmov.f32	s2, s1
 800ad54:	e7e4      	b.n	800ad20 <arm_biquad_cascade_df1_f32+0x15c>
 800ad56:	4670      	mov	r0, lr
 800ad58:	e7bf      	b.n	800acda <arm_biquad_cascade_df1_f32+0x116>
 800ad5a:	bf00      	nop

0800ad5c <arm_scale_f32>:
 800ad5c:	b470      	push	{r4, r5, r6}
 800ad5e:	0896      	lsrs	r6, r2, #2
 800ad60:	d025      	beq.n	800adae <arm_scale_f32+0x52>
 800ad62:	f100 0410 	add.w	r4, r0, #16
 800ad66:	f101 0310 	add.w	r3, r1, #16
 800ad6a:	4635      	mov	r5, r6
 800ad6c:	ed14 6a04 	vldr	s12, [r4, #-16]
 800ad70:	3d01      	subs	r5, #1
 800ad72:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ad76:	f103 0310 	add.w	r3, r3, #16
 800ad7a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800ad7e:	ee26 6a00 	vmul.f32	s12, s12, s0
 800ad82:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ad86:	ee66 6a80 	vmul.f32	s13, s13, s0
 800ad8a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800ad8e:	f104 0410 	add.w	r4, r4, #16
 800ad92:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ad96:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 800ad9a:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800ad9e:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 800ada2:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800ada6:	d1e1      	bne.n	800ad6c <arm_scale_f32+0x10>
 800ada8:	0136      	lsls	r6, r6, #4
 800adaa:	4430      	add	r0, r6
 800adac:	4431      	add	r1, r6
 800adae:	f012 0203 	ands.w	r2, r2, #3
 800adb2:	d007      	beq.n	800adc4 <arm_scale_f32+0x68>
 800adb4:	ecf0 7a01 	vldmia	r0!, {s15}
 800adb8:	3a01      	subs	r2, #1
 800adba:	ee67 7a80 	vmul.f32	s15, s15, s0
 800adbe:	ece1 7a01 	vstmia	r1!, {s15}
 800adc2:	d1f7      	bne.n	800adb4 <arm_scale_f32+0x58>
 800adc4:	bc70      	pop	{r4, r5, r6}
 800adc6:	4770      	bx	lr

0800adc8 <arm_offset_f32>:
 800adc8:	b470      	push	{r4, r5, r6}
 800adca:	0896      	lsrs	r6, r2, #2
 800adcc:	d025      	beq.n	800ae1a <arm_offset_f32+0x52>
 800adce:	f100 0410 	add.w	r4, r0, #16
 800add2:	f101 0310 	add.w	r3, r1, #16
 800add6:	4635      	mov	r5, r6
 800add8:	ed14 6a04 	vldr	s12, [r4, #-16]
 800addc:	3d01      	subs	r5, #1
 800adde:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ade2:	f103 0310 	add.w	r3, r3, #16
 800ade6:	ed14 7a02 	vldr	s14, [r4, #-8]
 800adea:	ee36 6a00 	vadd.f32	s12, s12, s0
 800adee:	ed54 7a01 	vldr	s15, [r4, #-4]
 800adf2:	ee76 6a80 	vadd.f32	s13, s13, s0
 800adf6:	ee37 7a00 	vadd.f32	s14, s14, s0
 800adfa:	f104 0410 	add.w	r4, r4, #16
 800adfe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ae02:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 800ae06:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800ae0a:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 800ae0e:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800ae12:	d1e1      	bne.n	800add8 <arm_offset_f32+0x10>
 800ae14:	0136      	lsls	r6, r6, #4
 800ae16:	4430      	add	r0, r6
 800ae18:	4431      	add	r1, r6
 800ae1a:	f012 0203 	ands.w	r2, r2, #3
 800ae1e:	d007      	beq.n	800ae30 <arm_offset_f32+0x68>
 800ae20:	ecf0 7a01 	vldmia	r0!, {s15}
 800ae24:	3a01      	subs	r2, #1
 800ae26:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ae2a:	ece1 7a01 	vstmia	r1!, {s15}
 800ae2e:	d1f7      	bne.n	800ae20 <arm_offset_f32+0x58>
 800ae30:	bc70      	pop	{r4, r5, r6}
 800ae32:	4770      	bx	lr

0800ae34 <arm_mult_f32>:
 800ae34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae36:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800ae3a:	d033      	beq.n	800aea4 <arm_mult_f32+0x70>
 800ae3c:	f100 0610 	add.w	r6, r0, #16
 800ae40:	f101 0510 	add.w	r5, r1, #16
 800ae44:	f102 0410 	add.w	r4, r2, #16
 800ae48:	4677      	mov	r7, lr
 800ae4a:	ed16 7a04 	vldr	s14, [r6, #-16]
 800ae4e:	3f01      	subs	r7, #1
 800ae50:	ed15 6a04 	vldr	s12, [r5, #-16]
 800ae54:	f106 0610 	add.w	r6, r6, #16
 800ae58:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 800ae5c:	f105 0510 	add.w	r5, r5, #16
 800ae60:	ee27 6a06 	vmul.f32	s12, s14, s12
 800ae64:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 800ae68:	ed16 7a07 	vldr	s14, [r6, #-28]	@ 0xffffffe4
 800ae6c:	f104 0410 	add.w	r4, r4, #16
 800ae70:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 800ae74:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ae78:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 800ae7c:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 800ae80:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ae84:	ed15 6a05 	vldr	s12, [r5, #-20]	@ 0xffffffec
 800ae88:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 800ae8c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ae90:	ed04 7a07 	vstr	s14, [r4, #-28]	@ 0xffffffe4
 800ae94:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 800ae98:	d1d7      	bne.n	800ae4a <arm_mult_f32+0x16>
 800ae9a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800ae9e:	4420      	add	r0, r4
 800aea0:	4421      	add	r1, r4
 800aea2:	4422      	add	r2, r4
 800aea4:	f013 0303 	ands.w	r3, r3, #3
 800aea8:	d009      	beq.n	800aebe <arm_mult_f32+0x8a>
 800aeaa:	ecf0 7a01 	vldmia	r0!, {s15}
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	ecb1 7a01 	vldmia	r1!, {s14}
 800aeb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aeb8:	ece2 7a01 	vstmia	r2!, {s15}
 800aebc:	d1f5      	bne.n	800aeaa <arm_mult_f32+0x76>
 800aebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aec0 <arm_add_f32>:
 800aec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aec2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800aec6:	d033      	beq.n	800af30 <arm_add_f32+0x70>
 800aec8:	f100 0610 	add.w	r6, r0, #16
 800aecc:	f101 0510 	add.w	r5, r1, #16
 800aed0:	f102 0410 	add.w	r4, r2, #16
 800aed4:	4677      	mov	r7, lr
 800aed6:	ed16 7a03 	vldr	s14, [r6, #-12]
 800aeda:	3f01      	subs	r7, #1
 800aedc:	ed56 7a02 	vldr	s15, [r6, #-8]
 800aee0:	f105 0510 	add.w	r5, r5, #16
 800aee4:	ed15 6a07 	vldr	s12, [r5, #-28]	@ 0xffffffe4
 800aee8:	f106 0610 	add.w	r6, r6, #16
 800aeec:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 800aef0:	f104 0410 	add.w	r4, r4, #16
 800aef4:	ed15 5a05 	vldr	s10, [r5, #-20]	@ 0xffffffec
 800aef8:	ee37 6a06 	vadd.f32	s12, s14, s12
 800aefc:	ed55 5a08 	vldr	s11, [r5, #-32]	@ 0xffffffe0
 800af00:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800af04:	ed16 7a05 	vldr	s14, [r6, #-20]	@ 0xffffffec
 800af08:	ed56 7a08 	vldr	s15, [r6, #-32]	@ 0xffffffe0
 800af0c:	ee37 7a05 	vadd.f32	s14, s14, s10
 800af10:	ed04 6a07 	vstr	s12, [r4, #-28]	@ 0xffffffe4
 800af14:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800af18:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 800af1c:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 800af20:	ed44 7a08 	vstr	s15, [r4, #-32]	@ 0xffffffe0
 800af24:	d1d7      	bne.n	800aed6 <arm_add_f32+0x16>
 800af26:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800af2a:	4420      	add	r0, r4
 800af2c:	4421      	add	r1, r4
 800af2e:	4422      	add	r2, r4
 800af30:	f013 0303 	ands.w	r3, r3, #3
 800af34:	d009      	beq.n	800af4a <arm_add_f32+0x8a>
 800af36:	ecf0 7a01 	vldmia	r0!, {s15}
 800af3a:	3b01      	subs	r3, #1
 800af3c:	ecb1 7a01 	vldmia	r1!, {s14}
 800af40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af44:	ece2 7a01 	vstmia	r2!, {s15}
 800af48:	d1f5      	bne.n	800af36 <arm_add_f32+0x76>
 800af4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af4c <arm_radix8_butterfly_f32>:
 800af4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af50:	469e      	mov	lr, r3
 800af52:	1d03      	adds	r3, r0, #4
 800af54:	4683      	mov	fp, r0
 800af56:	468a      	mov	sl, r1
 800af58:	4688      	mov	r8, r1
 800af5a:	469c      	mov	ip, r3
 800af5c:	ed2d 8b10 	vpush	{d8-d15}
 800af60:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 800b274 <arm_radix8_butterfly_f32+0x328>
 800af64:	b09f      	sub	sp, #124	@ 0x7c
 800af66:	921c      	str	r2, [sp, #112]	@ 0x70
 800af68:	931d      	str	r3, [sp, #116]	@ 0x74
 800af6a:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 800af6e:	f04f 0900 	mov.w	r9, #0
 800af72:	461a      	mov	r2, r3
 800af74:	930e      	str	r3, [sp, #56]	@ 0x38
 800af76:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800af7a:	0051      	lsls	r1, r2, #1
 800af7c:	4608      	mov	r0, r1
 800af7e:	9103      	str	r1, [sp, #12]
 800af80:	00d1      	lsls	r1, r2, #3
 800af82:	1885      	adds	r5, r0, r2
 800af84:	0110      	lsls	r0, r2, #4
 800af86:	eb0b 0601 	add.w	r6, fp, r1
 800af8a:	9101      	str	r1, [sp, #4]
 800af8c:	18ac      	adds	r4, r5, r2
 800af8e:	9002      	str	r0, [sp, #8]
 800af90:	1877      	adds	r7, r6, r1
 800af92:	4611      	mov	r1, r2
 800af94:	4422      	add	r2, r4
 800af96:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800af9a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800af9e:	1850      	adds	r0, r2, r1
 800afa0:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 800afa4:	4401      	add	r1, r0
 800afa6:	3204      	adds	r2, #4
 800afa8:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 800afac:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 800afb0:	3104      	adds	r1, #4
 800afb2:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800afb6:	44c1      	add	r9, r8
 800afb8:	edd4 6a00 	vldr	s13, [r4]
 800afbc:	ed97 6a00 	vldr	s12, [r7]
 800afc0:	45ca      	cmp	sl, r9
 800afc2:	edd0 7a00 	vldr	s15, [r0]
 800afc6:	ee37 5a66 	vsub.f32	s10, s14, s13
 800afca:	edd6 5a00 	vldr	s11, [r6]
 800afce:	ee37 2a26 	vadd.f32	s4, s14, s13
 800afd2:	ee76 2a67 	vsub.f32	s5, s12, s15
 800afd6:	edd5 6a00 	vldr	s13, [r5]
 800afda:	ed12 7a01 	vldr	s14, [r2, #-4]
 800afde:	ee76 4a27 	vadd.f32	s9, s12, s15
 800afe2:	ed11 6a01 	vldr	s12, [r1, #-4]
 800afe6:	ee75 1a87 	vadd.f32	s3, s11, s14
 800afea:	ee36 4a86 	vadd.f32	s8, s13, s12
 800afee:	ee72 7a24 	vadd.f32	s15, s4, s9
 800aff2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800aff6:	ee76 5ac6 	vsub.f32	s11, s13, s12
 800affa:	ee31 6a84 	vadd.f32	s12, s3, s8
 800affe:	ee32 2a64 	vsub.f32	s4, s4, s9
 800b002:	ee77 6a65 	vsub.f32	s13, s14, s11
 800b006:	ee77 4a86 	vadd.f32	s9, s15, s12
 800b00a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b00e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b012:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800b016:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800b01a:	edc4 7a00 	vstr	s15, [r4]
 800b01e:	ee66 6a89 	vmul.f32	s13, s13, s18
 800b022:	edd6 5a01 	vldr	s11, [r6, #4]
 800b026:	ee27 6a09 	vmul.f32	s12, s14, s18
 800b02a:	edd5 3a01 	vldr	s7, [r5, #4]
 800b02e:	ed92 4a00 	vldr	s8, [r2]
 800b032:	ee35 1a26 	vadd.f32	s2, s10, s13
 800b036:	edd1 4a00 	vldr	s9, [r1]
 800b03a:	ee75 6a66 	vsub.f32	s13, s10, s13
 800b03e:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800b042:	ed94 0a01 	vldr	s0, [r4, #4]
 800b046:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800b04a:	ed9c 7a00 	vldr	s14, [ip]
 800b04e:	edd0 0a01 	vldr	s1, [r0, #4]
 800b052:	ee35 4a84 	vadd.f32	s8, s11, s8
 800b056:	ed97 5a01 	vldr	s10, [r7, #4]
 800b05a:	ee73 4aa4 	vadd.f32	s9, s7, s9
 800b05e:	ee73 5a27 	vadd.f32	s11, s6, s15
 800b062:	ee77 3a00 	vadd.f32	s7, s14, s0
 800b066:	ee33 3a67 	vsub.f32	s6, s6, s15
 800b06a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800b06e:	ee35 0a20 	vadd.f32	s0, s10, s1
 800b072:	ee63 7a09 	vmul.f32	s15, s6, s18
 800b076:	ee35 5a60 	vsub.f32	s10, s10, s1
 800b07a:	ee33 3a80 	vadd.f32	s6, s7, s0
 800b07e:	ee74 0a24 	vadd.f32	s1, s8, s9
 800b082:	ee65 5a89 	vmul.f32	s11, s11, s18
 800b086:	ee74 4a64 	vsub.f32	s9, s8, s9
 800b08a:	ee33 4ac0 	vsub.f32	s8, s7, s0
 800b08e:	ee75 3a25 	vadd.f32	s7, s10, s11
 800b092:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b096:	ee37 5a27 	vadd.f32	s10, s14, s15
 800b09a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b09e:	ee32 7a86 	vadd.f32	s14, s5, s12
 800b0a2:	ee32 6ac6 	vsub.f32	s12, s5, s12
 800b0a6:	ee73 2a20 	vadd.f32	s5, s6, s1
 800b0aa:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b0ae:	ee72 0a24 	vadd.f32	s1, s4, s9
 800b0b2:	edcc 2a00 	vstr	s5, [ip]
 800b0b6:	ee72 4a64 	vsub.f32	s9, s4, s9
 800b0ba:	ed84 3a01 	vstr	s6, [r4, #4]
 800b0be:	ee74 2a61 	vsub.f32	s5, s8, s3
 800b0c2:	ee31 3a23 	vadd.f32	s6, s2, s7
 800b0c6:	edc7 0a00 	vstr	s1, [r7]
 800b0ca:	ee31 1a63 	vsub.f32	s2, s2, s7
 800b0ce:	edc0 4a00 	vstr	s9, [r0]
 800b0d2:	ee76 3aa5 	vadd.f32	s7, s13, s11
 800b0d6:	edc7 2a01 	vstr	s5, [r7, #4]
 800b0da:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800b0de:	441c      	add	r4, r3
 800b0e0:	ee75 5a47 	vsub.f32	s11, s10, s14
 800b0e4:	449c      	add	ip, r3
 800b0e6:	ee35 5a07 	vadd.f32	s10, s10, s14
 800b0ea:	441f      	add	r7, r3
 800b0ec:	ee37 7ac6 	vsub.f32	s14, s15, s12
 800b0f0:	ee34 4a21 	vadd.f32	s8, s8, s3
 800b0f4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b0f8:	ed80 4a01 	vstr	s8, [r0, #4]
 800b0fc:	4418      	add	r0, r3
 800b0fe:	ed86 3a00 	vstr	s6, [r6]
 800b102:	ed01 1a01 	vstr	s2, [r1, #-4]
 800b106:	ed42 3a01 	vstr	s7, [r2, #-4]
 800b10a:	edc5 6a00 	vstr	s13, [r5]
 800b10e:	edc6 5a01 	vstr	s11, [r6, #4]
 800b112:	441e      	add	r6, r3
 800b114:	ed81 5a00 	vstr	s10, [r1]
 800b118:	4419      	add	r1, r3
 800b11a:	ed82 7a00 	vstr	s14, [r2]
 800b11e:	441a      	add	r2, r3
 800b120:	edc5 7a01 	vstr	s15, [r5, #4]
 800b124:	441d      	add	r5, r3
 800b126:	f63f af44 	bhi.w	800afb2 <arm_radix8_butterfly_f32+0x66>
 800b12a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800b12c:	2f07      	cmp	r7, #7
 800b12e:	f240 81e8 	bls.w	800b502 <arm_radix8_butterfly_f32+0x5b6>
 800b132:	9903      	ldr	r1, [sp, #12]
 800b134:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 800b138:	9e01      	ldr	r6, [sp, #4]
 800b13a:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 800b13e:	19ca      	adds	r2, r1, r7
 800b140:	1c4c      	adds	r4, r1, #1
 800b142:	eb05 010e 	add.w	r1, r5, lr
 800b146:	00ed      	lsls	r5, r5, #3
 800b148:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800b14c:	3608      	adds	r6, #8
 800b14e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b150:	eb01 050e 	add.w	r5, r1, lr
 800b154:	00c9      	lsls	r1, r1, #3
 800b156:	443c      	add	r4, r7
 800b158:	9618      	str	r6, [sp, #96]	@ 0x60
 800b15a:	00ee      	lsls	r6, r5, #3
 800b15c:	460f      	mov	r7, r1
 800b15e:	9114      	str	r1, [sp, #80]	@ 0x50
 800b160:	9902      	ldr	r1, [sp, #8]
 800b162:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800b166:	9611      	str	r6, [sp, #68]	@ 0x44
 800b168:	00c0      	lsls	r0, r0, #3
 800b16a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b16c:	3108      	adds	r1, #8
 800b16e:	3404      	adds	r4, #4
 800b170:	f04f 0901 	mov.w	r9, #1
 800b174:	9119      	str	r1, [sp, #100]	@ 0x64
 800b176:	eb05 010e 	add.w	r1, r5, lr
 800b17a:	4635      	mov	r5, r6
 800b17c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b17e:	9301      	str	r3, [sp, #4]
 800b180:	443d      	add	r5, r7
 800b182:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800b184:	9507      	str	r5, [sp, #28]
 800b186:	eb01 050e 	add.w	r5, r1, lr
 800b18a:	00c9      	lsls	r1, r1, #3
 800b18c:	19f7      	adds	r7, r6, r7
 800b18e:	00ed      	lsls	r5, r5, #3
 800b190:	9110      	str	r1, [sp, #64]	@ 0x40
 800b192:	00d1      	lsls	r1, r2, #3
 800b194:	970a      	str	r7, [sp, #40]	@ 0x28
 800b196:	462f      	mov	r7, r5
 800b198:	9515      	str	r5, [sp, #84]	@ 0x54
 800b19a:	0112      	lsls	r2, r2, #4
 800b19c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b19e:	19f4      	adds	r4, r6, r7
 800b1a0:	320c      	adds	r2, #12
 800b1a2:	3108      	adds	r1, #8
 800b1a4:	1975      	adds	r5, r6, r5
 800b1a6:	9408      	str	r4, [sp, #32]
 800b1a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b1aa:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800b1ae:	9509      	str	r5, [sp, #36]	@ 0x24
 800b1b0:	f100 020c 	add.w	r2, r0, #12
 800b1b4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800b1b6:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800b1b8:	1975      	adds	r5, r6, r5
 800b1ba:	9216      	str	r2, [sp, #88]	@ 0x58
 800b1bc:	1932      	adds	r2, r6, r4
 800b1be:	911b      	str	r1, [sp, #108]	@ 0x6c
 800b1c0:	9505      	str	r5, [sp, #20]
 800b1c2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 800b1c6:	0179      	lsls	r1, r7, #5
 800b1c8:	9204      	str	r2, [sp, #16]
 800b1ca:	1972      	adds	r2, r6, r5
 800b1cc:	9412      	str	r4, [sp, #72]	@ 0x48
 800b1ce:	9513      	str	r5, [sp, #76]	@ 0x4c
 800b1d0:	9206      	str	r2, [sp, #24]
 800b1d2:	f101 0208 	add.w	r2, r1, #8
 800b1d6:	921a      	str	r2, [sp, #104]	@ 0x68
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f102 0108 	add.w	r1, r2, #8
 800b1de:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b1e0:	46cc      	mov	ip, r9
 800b1e2:	460f      	mov	r7, r1
 800b1e4:	910c      	str	r1, [sp, #48]	@ 0x30
 800b1e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1e8:	eb0b 0e07 	add.w	lr, fp, r7
 800b1ec:	9f04      	ldr	r7, [sp, #16]
 800b1ee:	188e      	adds	r6, r1, r2
 800b1f0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b1f2:	edd7 fa00 	vldr	s31, [r7]
 800b1f6:	9f06      	ldr	r7, [sp, #24]
 800b1f8:	188d      	adds	r5, r1, r2
 800b1fa:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800b1fc:	445e      	add	r6, fp
 800b1fe:	ed97 fa00 	vldr	s30, [r7]
 800b202:	445d      	add	r5, fp
 800b204:	9f05      	ldr	r7, [sp, #20]
 800b206:	188c      	adds	r4, r1, r2
 800b208:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b20a:	edd7 ea00 	vldr	s29, [r7]
 800b20e:	445c      	add	r4, fp
 800b210:	9f07      	ldr	r7, [sp, #28]
 800b212:	1888      	adds	r0, r1, r2
 800b214:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800b216:	ed97 ea00 	vldr	s28, [r7]
 800b21a:	4458      	add	r0, fp
 800b21c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800b21e:	4411      	add	r1, r2
 800b220:	441a      	add	r2, r3
 800b222:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b224:	edd7 da00 	vldr	s27, [r7]
 800b228:	4459      	add	r1, fp
 800b22a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800b22c:	445a      	add	r2, fp
 800b22e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b230:	ed97 da00 	vldr	s26, [r7]
 800b234:	9f08      	ldr	r7, [sp, #32]
 800b236:	edd7 ca00 	vldr	s25, [r7]
 800b23a:	9f04      	ldr	r7, [sp, #16]
 800b23c:	ed97 ca01 	vldr	s24, [r7, #4]
 800b240:	9f06      	ldr	r7, [sp, #24]
 800b242:	edd7 ba01 	vldr	s23, [r7, #4]
 800b246:	9f05      	ldr	r7, [sp, #20]
 800b248:	ed97 ba01 	vldr	s22, [r7, #4]
 800b24c:	9f07      	ldr	r7, [sp, #28]
 800b24e:	edd7 aa01 	vldr	s21, [r7, #4]
 800b252:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800b254:	ed97 aa01 	vldr	s20, [r7, #4]
 800b258:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800b25a:	9b01      	ldr	r3, [sp, #4]
 800b25c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b260:	9f08      	ldr	r7, [sp, #32]
 800b262:	edcd 7a02 	vstr	s15, [sp, #8]
 800b266:	edd7 7a01 	vldr	s15, [r7, #4]
 800b26a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800b26c:	edcd 7a03 	vstr	s15, [sp, #12]
 800b270:	e002      	b.n	800b278 <arm_radix8_butterfly_f32+0x32c>
 800b272:	bf00      	nop
 800b274:	3f3504f3 	.word	0x3f3504f3
 800b278:	ed90 2a00 	vldr	s4, [r0]
 800b27c:	44c4      	add	ip, r8
 800b27e:	ed96 7a00 	vldr	s14, [r6]
 800b282:	ed94 8a00 	vldr	s16, [r4]
 800b286:	45e2      	cmp	sl, ip
 800b288:	ed52 7a01 	vldr	s15, [r2, #-4]
 800b28c:	ed95 5a00 	vldr	s10, [r5]
 800b290:	ed51 5a01 	vldr	s11, [r1, #-4]
 800b294:	ee38 6a27 	vadd.f32	s12, s16, s15
 800b298:	ed9e 1a00 	vldr	s2, [lr]
 800b29c:	ee78 2a67 	vsub.f32	s5, s16, s15
 800b2a0:	ed17 4a01 	vldr	s8, [r7, #-4]
 800b2a4:	ee75 3a25 	vadd.f32	s7, s10, s11
 800b2a8:	ee31 3a07 	vadd.f32	s6, s2, s14
 800b2ac:	edde 4a01 	vldr	s9, [lr, #4]
 800b2b0:	ee72 6a04 	vadd.f32	s13, s4, s8
 800b2b4:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b2b8:	ee73 1a06 	vadd.f32	s3, s6, s12
 800b2bc:	ee33 5aa6 	vadd.f32	s10, s7, s13
 800b2c0:	ee32 4a44 	vsub.f32	s8, s4, s8
 800b2c4:	ee31 1a47 	vsub.f32	s2, s2, s14
 800b2c8:	ee31 7a85 	vadd.f32	s14, s3, s10
 800b2cc:	ee75 7a84 	vadd.f32	s15, s11, s8
 800b2d0:	ee33 3a46 	vsub.f32	s6, s6, s12
 800b2d4:	ed8e 7a00 	vstr	s14, [lr]
 800b2d8:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800b2dc:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b2e0:	ed90 2a01 	vldr	s4, [r0, #4]
 800b2e4:	ed95 7a01 	vldr	s14, [r5, #4]
 800b2e8:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800b2ec:	ed91 6a00 	vldr	s12, [r1]
 800b2f0:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800b2f4:	edd7 8a00 	vldr	s17, [r7]
 800b2f8:	ee32 8ae7 	vsub.f32	s16, s5, s15
 800b2fc:	ee72 5aa7 	vadd.f32	s11, s5, s15
 800b300:	edd2 0a00 	vldr	s1, [r2]
 800b304:	ee72 6a68 	vsub.f32	s13, s4, s17
 800b308:	edd6 7a01 	vldr	s15, [r6, #4]
 800b30c:	ee77 2a46 	vsub.f32	s5, s14, s12
 800b310:	ee37 0a06 	vadd.f32	s0, s14, s12
 800b314:	ed94 7a01 	vldr	s14, [r4, #4]
 800b318:	ee32 6a28 	vadd.f32	s12, s4, s17
 800b31c:	ee72 9ae6 	vsub.f32	s19, s5, s13
 800b320:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800b324:	ee72 2aa6 	vadd.f32	s5, s5, s13
 800b328:	ee77 6a20 	vadd.f32	s13, s14, s1
 800b32c:	ee74 4ae7 	vsub.f32	s9, s9, s15
 800b330:	ee37 7a60 	vsub.f32	s14, s14, s1
 800b334:	ee24 4a09 	vmul.f32	s8, s8, s18
 800b338:	ee70 0a06 	vadd.f32	s1, s0, s12
 800b33c:	ee69 7a89 	vmul.f32	s15, s19, s18
 800b340:	ee62 2a89 	vmul.f32	s5, s5, s18
 800b344:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b348:	ee32 0a26 	vadd.f32	s0, s4, s13
 800b34c:	ee72 6a66 	vsub.f32	s13, s4, s13
 800b350:	ee77 8a62 	vsub.f32	s17, s14, s5
 800b354:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800b358:	ee74 7ae7 	vsub.f32	s15, s9, s15
 800b35c:	ee77 4a22 	vadd.f32	s9, s14, s5
 800b360:	ee71 2a04 	vadd.f32	s5, s2, s8
 800b364:	ee31 7a44 	vsub.f32	s14, s2, s8
 800b368:	ee30 1a60 	vsub.f32	s2, s0, s1
 800b36c:	ee73 1a06 	vadd.f32	s3, s6, s12
 800b370:	ee33 6a46 	vsub.f32	s12, s6, s12
 800b374:	ee36 3ae3 	vsub.f32	s6, s13, s7
 800b378:	ee37 4ac8 	vsub.f32	s8, s15, s16
 800b37c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b380:	ee77 7a88 	vadd.f32	s15, s15, s16
 800b384:	ee72 3a65 	vsub.f32	s7, s4, s11
 800b388:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800b38c:	ee72 5a25 	vadd.f32	s11, s4, s11
 800b390:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800b394:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800b398:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800b39c:	ee77 2a28 	vadd.f32	s5, s14, s17
 800b3a0:	ee37 7a68 	vsub.f32	s14, s14, s17
 800b3a4:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800b3a8:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800b3ac:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800b3b0:	ee70 0a20 	vadd.f32	s1, s0, s1
 800b3b4:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800b3b8:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800b3bc:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800b3c0:	edce 0a01 	vstr	s1, [lr, #4]
 800b3c4:	ee38 8a88 	vadd.f32	s16, s17, s16
 800b3c8:	449e      	add	lr, r3
 800b3ca:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800b3ce:	ee31 5a45 	vsub.f32	s10, s2, s10
 800b3d2:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800b3d6:	ed86 8a00 	vstr	s16, [r6]
 800b3da:	ee39 0a80 	vadd.f32	s0, s19, s0
 800b3de:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b3e2:	ed86 5a01 	vstr	s10, [r6, #4]
 800b3e6:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800b3ea:	edcd 3a01 	vstr	s7, [sp, #4]
 800b3ee:	ed9d 5a03 	vldr	s10, [sp, #12]
 800b3f2:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800b3f6:	eddd 3a02 	vldr	s7, [sp, #8]
 800b3fa:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800b3fe:	ed84 0a00 	vstr	s0, [r4]
 800b402:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b406:	ed84 3a01 	vstr	s6, [r4, #4]
 800b40a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800b40e:	ee23 6a86 	vmul.f32	s12, s7, s12
 800b412:	eddd 3a01 	vldr	s7, [sp, #4]
 800b416:	ee25 5a25 	vmul.f32	s10, s10, s11
 800b41a:	441e      	add	r6, r3
 800b41c:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800b420:	441c      	add	r4, r3
 800b422:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800b426:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b42a:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800b42e:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800b432:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800b436:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800b43a:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800b43e:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800b442:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800b446:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800b44a:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800b44e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800b452:	ee38 8a01 	vadd.f32	s16, s16, s2
 800b456:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800b45a:	ee39 5a85 	vadd.f32	s10, s19, s10
 800b45e:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800b462:	ed02 8a01 	vstr	s16, [r2, #-4]
 800b466:	ee30 0a21 	vadd.f32	s0, s0, s3
 800b46a:	ed82 6a00 	vstr	s12, [r2]
 800b46e:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b472:	edc5 0a00 	vstr	s1, [r5]
 800b476:	ee33 3a28 	vadd.f32	s6, s6, s17
 800b47a:	edc5 3a01 	vstr	s7, [r5, #4]
 800b47e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b482:	ed07 5a01 	vstr	s10, [r7, #-4]
 800b486:	edc7 4a00 	vstr	s9, [r7]
 800b48a:	441d      	add	r5, r3
 800b48c:	ed01 0a01 	vstr	s0, [r1, #-4]
 800b490:	441a      	add	r2, r3
 800b492:	edc1 2a00 	vstr	s5, [r1]
 800b496:	441f      	add	r7, r3
 800b498:	ed80 3a00 	vstr	s6, [r0]
 800b49c:	4419      	add	r1, r3
 800b49e:	ed80 7a01 	vstr	s14, [r0, #4]
 800b4a2:	4418      	add	r0, r3
 800b4a4:	f63f aee8 	bhi.w	800b278 <arm_radix8_butterfly_f32+0x32c>
 800b4a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b4aa:	f109 0901 	add.w	r9, r9, #1
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	9b04      	ldr	r3, [sp, #16]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b4b6:	9304      	str	r3, [sp, #16]
 800b4b8:	9b06      	ldr	r3, [sp, #24]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b4be:	9306      	str	r3, [sp, #24]
 800b4c0:	9b05      	ldr	r3, [sp, #20]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b4c6:	9305      	str	r3, [sp, #20]
 800b4c8:	9b07      	ldr	r3, [sp, #28]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b4ce:	9307      	str	r3, [sp, #28]
 800b4d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4d2:	4413      	add	r3, r2
 800b4d4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b4d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4da:	4413      	add	r3, r2
 800b4dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b4de:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4e0:	9b08      	ldr	r3, [sp, #32]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b4e6:	9308      	str	r3, [sp, #32]
 800b4e8:	3208      	adds	r2, #8
 800b4ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4ec:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b4ee:	4599      	cmp	r9, r3
 800b4f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b4f2:	f47f ae72 	bne.w	800b1da <arm_radix8_butterfly_f32+0x28e>
 800b4f6:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 800b4fa:	46c8      	mov	r8, r9
 800b4fc:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 800b500:	e533      	b.n	800af6a <arm_radix8_butterfly_f32+0x1e>
 800b502:	b01f      	add	sp, #124	@ 0x7c
 800b504:	ecbd 8b10 	vpop	{d8-d15}
 800b508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b50c <atoi>:
 800b50c:	220a      	movs	r2, #10
 800b50e:	2100      	movs	r1, #0
 800b510:	f000 b8a8 	b.w	800b664 <strtol>

0800b514 <srand>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	4b10      	ldr	r3, [pc, #64]	@ (800b558 <srand+0x44>)
 800b518:	681d      	ldr	r5, [r3, #0]
 800b51a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b51c:	4604      	mov	r4, r0
 800b51e:	b9b3      	cbnz	r3, 800b54e <srand+0x3a>
 800b520:	2018      	movs	r0, #24
 800b522:	f000 fb35 	bl	800bb90 <malloc>
 800b526:	4602      	mov	r2, r0
 800b528:	6328      	str	r0, [r5, #48]	@ 0x30
 800b52a:	b920      	cbnz	r0, 800b536 <srand+0x22>
 800b52c:	4b0b      	ldr	r3, [pc, #44]	@ (800b55c <srand+0x48>)
 800b52e:	480c      	ldr	r0, [pc, #48]	@ (800b560 <srand+0x4c>)
 800b530:	2146      	movs	r1, #70	@ 0x46
 800b532:	f000 fac5 	bl	800bac0 <__assert_func>
 800b536:	490b      	ldr	r1, [pc, #44]	@ (800b564 <srand+0x50>)
 800b538:	4b0b      	ldr	r3, [pc, #44]	@ (800b568 <srand+0x54>)
 800b53a:	e9c0 1300 	strd	r1, r3, [r0]
 800b53e:	4b0b      	ldr	r3, [pc, #44]	@ (800b56c <srand+0x58>)
 800b540:	6083      	str	r3, [r0, #8]
 800b542:	230b      	movs	r3, #11
 800b544:	8183      	strh	r3, [r0, #12]
 800b546:	2100      	movs	r1, #0
 800b548:	2001      	movs	r0, #1
 800b54a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b54e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800b550:	2200      	movs	r2, #0
 800b552:	611c      	str	r4, [r3, #16]
 800b554:	615a      	str	r2, [r3, #20]
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	24000038 	.word	0x24000038
 800b55c:	080841dc 	.word	0x080841dc
 800b560:	080841f3 	.word	0x080841f3
 800b564:	abcd330e 	.word	0xabcd330e
 800b568:	e66d1234 	.word	0xe66d1234
 800b56c:	0005deec 	.word	0x0005deec

0800b570 <_strtol_l.isra.0>:
 800b570:	2b24      	cmp	r3, #36	@ 0x24
 800b572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b576:	4686      	mov	lr, r0
 800b578:	4690      	mov	r8, r2
 800b57a:	d801      	bhi.n	800b580 <_strtol_l.isra.0+0x10>
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d106      	bne.n	800b58e <_strtol_l.isra.0+0x1e>
 800b580:	f000 fa70 	bl	800ba64 <__errno>
 800b584:	2316      	movs	r3, #22
 800b586:	6003      	str	r3, [r0, #0]
 800b588:	2000      	movs	r0, #0
 800b58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b58e:	4834      	ldr	r0, [pc, #208]	@ (800b660 <_strtol_l.isra.0+0xf0>)
 800b590:	460d      	mov	r5, r1
 800b592:	462a      	mov	r2, r5
 800b594:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b598:	5d06      	ldrb	r6, [r0, r4]
 800b59a:	f016 0608 	ands.w	r6, r6, #8
 800b59e:	d1f8      	bne.n	800b592 <_strtol_l.isra.0+0x22>
 800b5a0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b5a2:	d110      	bne.n	800b5c6 <_strtol_l.isra.0+0x56>
 800b5a4:	782c      	ldrb	r4, [r5, #0]
 800b5a6:	2601      	movs	r6, #1
 800b5a8:	1c95      	adds	r5, r2, #2
 800b5aa:	f033 0210 	bics.w	r2, r3, #16
 800b5ae:	d115      	bne.n	800b5dc <_strtol_l.isra.0+0x6c>
 800b5b0:	2c30      	cmp	r4, #48	@ 0x30
 800b5b2:	d10d      	bne.n	800b5d0 <_strtol_l.isra.0+0x60>
 800b5b4:	782a      	ldrb	r2, [r5, #0]
 800b5b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b5ba:	2a58      	cmp	r2, #88	@ 0x58
 800b5bc:	d108      	bne.n	800b5d0 <_strtol_l.isra.0+0x60>
 800b5be:	786c      	ldrb	r4, [r5, #1]
 800b5c0:	3502      	adds	r5, #2
 800b5c2:	2310      	movs	r3, #16
 800b5c4:	e00a      	b.n	800b5dc <_strtol_l.isra.0+0x6c>
 800b5c6:	2c2b      	cmp	r4, #43	@ 0x2b
 800b5c8:	bf04      	itt	eq
 800b5ca:	782c      	ldrbeq	r4, [r5, #0]
 800b5cc:	1c95      	addeq	r5, r2, #2
 800b5ce:	e7ec      	b.n	800b5aa <_strtol_l.isra.0+0x3a>
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1f6      	bne.n	800b5c2 <_strtol_l.isra.0+0x52>
 800b5d4:	2c30      	cmp	r4, #48	@ 0x30
 800b5d6:	bf14      	ite	ne
 800b5d8:	230a      	movne	r3, #10
 800b5da:	2308      	moveq	r3, #8
 800b5dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b5e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	fbbc f9f3 	udiv	r9, ip, r3
 800b5ea:	4610      	mov	r0, r2
 800b5ec:	fb03 ca19 	mls	sl, r3, r9, ip
 800b5f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b5f4:	2f09      	cmp	r7, #9
 800b5f6:	d80f      	bhi.n	800b618 <_strtol_l.isra.0+0xa8>
 800b5f8:	463c      	mov	r4, r7
 800b5fa:	42a3      	cmp	r3, r4
 800b5fc:	dd1b      	ble.n	800b636 <_strtol_l.isra.0+0xc6>
 800b5fe:	1c57      	adds	r7, r2, #1
 800b600:	d007      	beq.n	800b612 <_strtol_l.isra.0+0xa2>
 800b602:	4581      	cmp	r9, r0
 800b604:	d314      	bcc.n	800b630 <_strtol_l.isra.0+0xc0>
 800b606:	d101      	bne.n	800b60c <_strtol_l.isra.0+0x9c>
 800b608:	45a2      	cmp	sl, r4
 800b60a:	db11      	blt.n	800b630 <_strtol_l.isra.0+0xc0>
 800b60c:	fb00 4003 	mla	r0, r0, r3, r4
 800b610:	2201      	movs	r2, #1
 800b612:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b616:	e7eb      	b.n	800b5f0 <_strtol_l.isra.0+0x80>
 800b618:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b61c:	2f19      	cmp	r7, #25
 800b61e:	d801      	bhi.n	800b624 <_strtol_l.isra.0+0xb4>
 800b620:	3c37      	subs	r4, #55	@ 0x37
 800b622:	e7ea      	b.n	800b5fa <_strtol_l.isra.0+0x8a>
 800b624:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b628:	2f19      	cmp	r7, #25
 800b62a:	d804      	bhi.n	800b636 <_strtol_l.isra.0+0xc6>
 800b62c:	3c57      	subs	r4, #87	@ 0x57
 800b62e:	e7e4      	b.n	800b5fa <_strtol_l.isra.0+0x8a>
 800b630:	f04f 32ff 	mov.w	r2, #4294967295
 800b634:	e7ed      	b.n	800b612 <_strtol_l.isra.0+0xa2>
 800b636:	1c53      	adds	r3, r2, #1
 800b638:	d108      	bne.n	800b64c <_strtol_l.isra.0+0xdc>
 800b63a:	2322      	movs	r3, #34	@ 0x22
 800b63c:	f8ce 3000 	str.w	r3, [lr]
 800b640:	4660      	mov	r0, ip
 800b642:	f1b8 0f00 	cmp.w	r8, #0
 800b646:	d0a0      	beq.n	800b58a <_strtol_l.isra.0+0x1a>
 800b648:	1e69      	subs	r1, r5, #1
 800b64a:	e006      	b.n	800b65a <_strtol_l.isra.0+0xea>
 800b64c:	b106      	cbz	r6, 800b650 <_strtol_l.isra.0+0xe0>
 800b64e:	4240      	negs	r0, r0
 800b650:	f1b8 0f00 	cmp.w	r8, #0
 800b654:	d099      	beq.n	800b58a <_strtol_l.isra.0+0x1a>
 800b656:	2a00      	cmp	r2, #0
 800b658:	d1f6      	bne.n	800b648 <_strtol_l.isra.0+0xd8>
 800b65a:	f8c8 1000 	str.w	r1, [r8]
 800b65e:	e794      	b.n	800b58a <_strtol_l.isra.0+0x1a>
 800b660:	080842bb 	.word	0x080842bb

0800b664 <strtol>:
 800b664:	4613      	mov	r3, r2
 800b666:	460a      	mov	r2, r1
 800b668:	4601      	mov	r1, r0
 800b66a:	4802      	ldr	r0, [pc, #8]	@ (800b674 <strtol+0x10>)
 800b66c:	6800      	ldr	r0, [r0, #0]
 800b66e:	f7ff bf7f 	b.w	800b570 <_strtol_l.isra.0>
 800b672:	bf00      	nop
 800b674:	24000038 	.word	0x24000038

0800b678 <_strtoul_l.isra.0>:
 800b678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b67c:	4e34      	ldr	r6, [pc, #208]	@ (800b750 <_strtoul_l.isra.0+0xd8>)
 800b67e:	4686      	mov	lr, r0
 800b680:	460d      	mov	r5, r1
 800b682:	4628      	mov	r0, r5
 800b684:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b688:	5d37      	ldrb	r7, [r6, r4]
 800b68a:	f017 0708 	ands.w	r7, r7, #8
 800b68e:	d1f8      	bne.n	800b682 <_strtoul_l.isra.0+0xa>
 800b690:	2c2d      	cmp	r4, #45	@ 0x2d
 800b692:	d110      	bne.n	800b6b6 <_strtoul_l.isra.0+0x3e>
 800b694:	782c      	ldrb	r4, [r5, #0]
 800b696:	2701      	movs	r7, #1
 800b698:	1c85      	adds	r5, r0, #2
 800b69a:	f033 0010 	bics.w	r0, r3, #16
 800b69e:	d115      	bne.n	800b6cc <_strtoul_l.isra.0+0x54>
 800b6a0:	2c30      	cmp	r4, #48	@ 0x30
 800b6a2:	d10d      	bne.n	800b6c0 <_strtoul_l.isra.0+0x48>
 800b6a4:	7828      	ldrb	r0, [r5, #0]
 800b6a6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b6aa:	2858      	cmp	r0, #88	@ 0x58
 800b6ac:	d108      	bne.n	800b6c0 <_strtoul_l.isra.0+0x48>
 800b6ae:	786c      	ldrb	r4, [r5, #1]
 800b6b0:	3502      	adds	r5, #2
 800b6b2:	2310      	movs	r3, #16
 800b6b4:	e00a      	b.n	800b6cc <_strtoul_l.isra.0+0x54>
 800b6b6:	2c2b      	cmp	r4, #43	@ 0x2b
 800b6b8:	bf04      	itt	eq
 800b6ba:	782c      	ldrbeq	r4, [r5, #0]
 800b6bc:	1c85      	addeq	r5, r0, #2
 800b6be:	e7ec      	b.n	800b69a <_strtoul_l.isra.0+0x22>
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1f6      	bne.n	800b6b2 <_strtoul_l.isra.0+0x3a>
 800b6c4:	2c30      	cmp	r4, #48	@ 0x30
 800b6c6:	bf14      	ite	ne
 800b6c8:	230a      	movne	r3, #10
 800b6ca:	2308      	moveq	r3, #8
 800b6cc:	f04f 38ff 	mov.w	r8, #4294967295
 800b6d0:	2600      	movs	r6, #0
 800b6d2:	fbb8 f8f3 	udiv	r8, r8, r3
 800b6d6:	fb03 f908 	mul.w	r9, r3, r8
 800b6da:	ea6f 0909 	mvn.w	r9, r9
 800b6de:	4630      	mov	r0, r6
 800b6e0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b6e4:	f1bc 0f09 	cmp.w	ip, #9
 800b6e8:	d810      	bhi.n	800b70c <_strtoul_l.isra.0+0x94>
 800b6ea:	4664      	mov	r4, ip
 800b6ec:	42a3      	cmp	r3, r4
 800b6ee:	dd1e      	ble.n	800b72e <_strtoul_l.isra.0+0xb6>
 800b6f0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b6f4:	d007      	beq.n	800b706 <_strtoul_l.isra.0+0x8e>
 800b6f6:	4580      	cmp	r8, r0
 800b6f8:	d316      	bcc.n	800b728 <_strtoul_l.isra.0+0xb0>
 800b6fa:	d101      	bne.n	800b700 <_strtoul_l.isra.0+0x88>
 800b6fc:	45a1      	cmp	r9, r4
 800b6fe:	db13      	blt.n	800b728 <_strtoul_l.isra.0+0xb0>
 800b700:	fb00 4003 	mla	r0, r0, r3, r4
 800b704:	2601      	movs	r6, #1
 800b706:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b70a:	e7e9      	b.n	800b6e0 <_strtoul_l.isra.0+0x68>
 800b70c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b710:	f1bc 0f19 	cmp.w	ip, #25
 800b714:	d801      	bhi.n	800b71a <_strtoul_l.isra.0+0xa2>
 800b716:	3c37      	subs	r4, #55	@ 0x37
 800b718:	e7e8      	b.n	800b6ec <_strtoul_l.isra.0+0x74>
 800b71a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b71e:	f1bc 0f19 	cmp.w	ip, #25
 800b722:	d804      	bhi.n	800b72e <_strtoul_l.isra.0+0xb6>
 800b724:	3c57      	subs	r4, #87	@ 0x57
 800b726:	e7e1      	b.n	800b6ec <_strtoul_l.isra.0+0x74>
 800b728:	f04f 36ff 	mov.w	r6, #4294967295
 800b72c:	e7eb      	b.n	800b706 <_strtoul_l.isra.0+0x8e>
 800b72e:	1c73      	adds	r3, r6, #1
 800b730:	d106      	bne.n	800b740 <_strtoul_l.isra.0+0xc8>
 800b732:	2322      	movs	r3, #34	@ 0x22
 800b734:	f8ce 3000 	str.w	r3, [lr]
 800b738:	4630      	mov	r0, r6
 800b73a:	b932      	cbnz	r2, 800b74a <_strtoul_l.isra.0+0xd2>
 800b73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b740:	b107      	cbz	r7, 800b744 <_strtoul_l.isra.0+0xcc>
 800b742:	4240      	negs	r0, r0
 800b744:	2a00      	cmp	r2, #0
 800b746:	d0f9      	beq.n	800b73c <_strtoul_l.isra.0+0xc4>
 800b748:	b106      	cbz	r6, 800b74c <_strtoul_l.isra.0+0xd4>
 800b74a:	1e69      	subs	r1, r5, #1
 800b74c:	6011      	str	r1, [r2, #0]
 800b74e:	e7f5      	b.n	800b73c <_strtoul_l.isra.0+0xc4>
 800b750:	080842bb 	.word	0x080842bb

0800b754 <strtoul>:
 800b754:	4613      	mov	r3, r2
 800b756:	460a      	mov	r2, r1
 800b758:	4601      	mov	r1, r0
 800b75a:	4802      	ldr	r0, [pc, #8]	@ (800b764 <strtoul+0x10>)
 800b75c:	6800      	ldr	r0, [r0, #0]
 800b75e:	f7ff bf8b 	b.w	800b678 <_strtoul_l.isra.0>
 800b762:	bf00      	nop
 800b764:	24000038 	.word	0x24000038

0800b768 <std>:
 800b768:	2300      	movs	r3, #0
 800b76a:	b510      	push	{r4, lr}
 800b76c:	4604      	mov	r4, r0
 800b76e:	e9c0 3300 	strd	r3, r3, [r0]
 800b772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b776:	6083      	str	r3, [r0, #8]
 800b778:	8181      	strh	r1, [r0, #12]
 800b77a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b77c:	81c2      	strh	r2, [r0, #14]
 800b77e:	6183      	str	r3, [r0, #24]
 800b780:	4619      	mov	r1, r3
 800b782:	2208      	movs	r2, #8
 800b784:	305c      	adds	r0, #92	@ 0x5c
 800b786:	f000 f8f4 	bl	800b972 <memset>
 800b78a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c0 <std+0x58>)
 800b78c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b78e:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c4 <std+0x5c>)
 800b790:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b792:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c8 <std+0x60>)
 800b794:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b796:	4b0d      	ldr	r3, [pc, #52]	@ (800b7cc <std+0x64>)
 800b798:	6323      	str	r3, [r4, #48]	@ 0x30
 800b79a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d0 <std+0x68>)
 800b79c:	6224      	str	r4, [r4, #32]
 800b79e:	429c      	cmp	r4, r3
 800b7a0:	d006      	beq.n	800b7b0 <std+0x48>
 800b7a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7a6:	4294      	cmp	r4, r2
 800b7a8:	d002      	beq.n	800b7b0 <std+0x48>
 800b7aa:	33d0      	adds	r3, #208	@ 0xd0
 800b7ac:	429c      	cmp	r4, r3
 800b7ae:	d105      	bne.n	800b7bc <std+0x54>
 800b7b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7b8:	f000 b97e 	b.w	800bab8 <__retarget_lock_init_recursive>
 800b7bc:	bd10      	pop	{r4, pc}
 800b7be:	bf00      	nop
 800b7c0:	0800b8ed 	.word	0x0800b8ed
 800b7c4:	0800b90f 	.word	0x0800b90f
 800b7c8:	0800b947 	.word	0x0800b947
 800b7cc:	0800b96b 	.word	0x0800b96b
 800b7d0:	2406f600 	.word	0x2406f600

0800b7d4 <stdio_exit_handler>:
 800b7d4:	4a02      	ldr	r2, [pc, #8]	@ (800b7e0 <stdio_exit_handler+0xc>)
 800b7d6:	4903      	ldr	r1, [pc, #12]	@ (800b7e4 <stdio_exit_handler+0x10>)
 800b7d8:	4803      	ldr	r0, [pc, #12]	@ (800b7e8 <stdio_exit_handler+0x14>)
 800b7da:	f000 b869 	b.w	800b8b0 <_fwalk_sglue>
 800b7de:	bf00      	nop
 800b7e0:	2400002c 	.word	0x2400002c
 800b7e4:	0800be05 	.word	0x0800be05
 800b7e8:	2400003c 	.word	0x2400003c

0800b7ec <cleanup_stdio>:
 800b7ec:	6841      	ldr	r1, [r0, #4]
 800b7ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b820 <cleanup_stdio+0x34>)
 800b7f0:	4299      	cmp	r1, r3
 800b7f2:	b510      	push	{r4, lr}
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	d001      	beq.n	800b7fc <cleanup_stdio+0x10>
 800b7f8:	f000 fb04 	bl	800be04 <_fflush_r>
 800b7fc:	68a1      	ldr	r1, [r4, #8]
 800b7fe:	4b09      	ldr	r3, [pc, #36]	@ (800b824 <cleanup_stdio+0x38>)
 800b800:	4299      	cmp	r1, r3
 800b802:	d002      	beq.n	800b80a <cleanup_stdio+0x1e>
 800b804:	4620      	mov	r0, r4
 800b806:	f000 fafd 	bl	800be04 <_fflush_r>
 800b80a:	68e1      	ldr	r1, [r4, #12]
 800b80c:	4b06      	ldr	r3, [pc, #24]	@ (800b828 <cleanup_stdio+0x3c>)
 800b80e:	4299      	cmp	r1, r3
 800b810:	d004      	beq.n	800b81c <cleanup_stdio+0x30>
 800b812:	4620      	mov	r0, r4
 800b814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b818:	f000 baf4 	b.w	800be04 <_fflush_r>
 800b81c:	bd10      	pop	{r4, pc}
 800b81e:	bf00      	nop
 800b820:	2406f600 	.word	0x2406f600
 800b824:	2406f668 	.word	0x2406f668
 800b828:	2406f6d0 	.word	0x2406f6d0

0800b82c <global_stdio_init.part.0>:
 800b82c:	b510      	push	{r4, lr}
 800b82e:	4b0b      	ldr	r3, [pc, #44]	@ (800b85c <global_stdio_init.part.0+0x30>)
 800b830:	4c0b      	ldr	r4, [pc, #44]	@ (800b860 <global_stdio_init.part.0+0x34>)
 800b832:	4a0c      	ldr	r2, [pc, #48]	@ (800b864 <global_stdio_init.part.0+0x38>)
 800b834:	601a      	str	r2, [r3, #0]
 800b836:	4620      	mov	r0, r4
 800b838:	2200      	movs	r2, #0
 800b83a:	2104      	movs	r1, #4
 800b83c:	f7ff ff94 	bl	800b768 <std>
 800b840:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b844:	2201      	movs	r2, #1
 800b846:	2109      	movs	r1, #9
 800b848:	f7ff ff8e 	bl	800b768 <std>
 800b84c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b850:	2202      	movs	r2, #2
 800b852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b856:	2112      	movs	r1, #18
 800b858:	f7ff bf86 	b.w	800b768 <std>
 800b85c:	2406f738 	.word	0x2406f738
 800b860:	2406f600 	.word	0x2406f600
 800b864:	0800b7d5 	.word	0x0800b7d5

0800b868 <__sfp_lock_acquire>:
 800b868:	4801      	ldr	r0, [pc, #4]	@ (800b870 <__sfp_lock_acquire+0x8>)
 800b86a:	f000 b926 	b.w	800baba <__retarget_lock_acquire_recursive>
 800b86e:	bf00      	nop
 800b870:	2406f741 	.word	0x2406f741

0800b874 <__sfp_lock_release>:
 800b874:	4801      	ldr	r0, [pc, #4]	@ (800b87c <__sfp_lock_release+0x8>)
 800b876:	f000 b921 	b.w	800babc <__retarget_lock_release_recursive>
 800b87a:	bf00      	nop
 800b87c:	2406f741 	.word	0x2406f741

0800b880 <__sinit>:
 800b880:	b510      	push	{r4, lr}
 800b882:	4604      	mov	r4, r0
 800b884:	f7ff fff0 	bl	800b868 <__sfp_lock_acquire>
 800b888:	6a23      	ldr	r3, [r4, #32]
 800b88a:	b11b      	cbz	r3, 800b894 <__sinit+0x14>
 800b88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b890:	f7ff bff0 	b.w	800b874 <__sfp_lock_release>
 800b894:	4b04      	ldr	r3, [pc, #16]	@ (800b8a8 <__sinit+0x28>)
 800b896:	6223      	str	r3, [r4, #32]
 800b898:	4b04      	ldr	r3, [pc, #16]	@ (800b8ac <__sinit+0x2c>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1f5      	bne.n	800b88c <__sinit+0xc>
 800b8a0:	f7ff ffc4 	bl	800b82c <global_stdio_init.part.0>
 800b8a4:	e7f2      	b.n	800b88c <__sinit+0xc>
 800b8a6:	bf00      	nop
 800b8a8:	0800b7ed 	.word	0x0800b7ed
 800b8ac:	2406f738 	.word	0x2406f738

0800b8b0 <_fwalk_sglue>:
 800b8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b4:	4607      	mov	r7, r0
 800b8b6:	4688      	mov	r8, r1
 800b8b8:	4614      	mov	r4, r2
 800b8ba:	2600      	movs	r6, #0
 800b8bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8c0:	f1b9 0901 	subs.w	r9, r9, #1
 800b8c4:	d505      	bpl.n	800b8d2 <_fwalk_sglue+0x22>
 800b8c6:	6824      	ldr	r4, [r4, #0]
 800b8c8:	2c00      	cmp	r4, #0
 800b8ca:	d1f7      	bne.n	800b8bc <_fwalk_sglue+0xc>
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8d2:	89ab      	ldrh	r3, [r5, #12]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d907      	bls.n	800b8e8 <_fwalk_sglue+0x38>
 800b8d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	d003      	beq.n	800b8e8 <_fwalk_sglue+0x38>
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	47c0      	blx	r8
 800b8e6:	4306      	orrs	r6, r0
 800b8e8:	3568      	adds	r5, #104	@ 0x68
 800b8ea:	e7e9      	b.n	800b8c0 <_fwalk_sglue+0x10>

0800b8ec <__sread>:
 800b8ec:	b510      	push	{r4, lr}
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8f4:	f000 f892 	bl	800ba1c <_read_r>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	bfab      	itete	ge
 800b8fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b8fe:	89a3      	ldrhlt	r3, [r4, #12]
 800b900:	181b      	addge	r3, r3, r0
 800b902:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b906:	bfac      	ite	ge
 800b908:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b90a:	81a3      	strhlt	r3, [r4, #12]
 800b90c:	bd10      	pop	{r4, pc}

0800b90e <__swrite>:
 800b90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b912:	461f      	mov	r7, r3
 800b914:	898b      	ldrh	r3, [r1, #12]
 800b916:	05db      	lsls	r3, r3, #23
 800b918:	4605      	mov	r5, r0
 800b91a:	460c      	mov	r4, r1
 800b91c:	4616      	mov	r6, r2
 800b91e:	d505      	bpl.n	800b92c <__swrite+0x1e>
 800b920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b924:	2302      	movs	r3, #2
 800b926:	2200      	movs	r2, #0
 800b928:	f000 f866 	bl	800b9f8 <_lseek_r>
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b936:	81a3      	strh	r3, [r4, #12]
 800b938:	4632      	mov	r2, r6
 800b93a:	463b      	mov	r3, r7
 800b93c:	4628      	mov	r0, r5
 800b93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b942:	f000 b87d 	b.w	800ba40 <_write_r>

0800b946 <__sseek>:
 800b946:	b510      	push	{r4, lr}
 800b948:	460c      	mov	r4, r1
 800b94a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b94e:	f000 f853 	bl	800b9f8 <_lseek_r>
 800b952:	1c43      	adds	r3, r0, #1
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	bf15      	itete	ne
 800b958:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b95a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b95e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b962:	81a3      	strheq	r3, [r4, #12]
 800b964:	bf18      	it	ne
 800b966:	81a3      	strhne	r3, [r4, #12]
 800b968:	bd10      	pop	{r4, pc}

0800b96a <__sclose>:
 800b96a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b96e:	f000 b833 	b.w	800b9d8 <_close_r>

0800b972 <memset>:
 800b972:	4402      	add	r2, r0
 800b974:	4603      	mov	r3, r0
 800b976:	4293      	cmp	r3, r2
 800b978:	d100      	bne.n	800b97c <memset+0xa>
 800b97a:	4770      	bx	lr
 800b97c:	f803 1b01 	strb.w	r1, [r3], #1
 800b980:	e7f9      	b.n	800b976 <memset+0x4>

0800b982 <__strtok_r>:
 800b982:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b984:	4604      	mov	r4, r0
 800b986:	b908      	cbnz	r0, 800b98c <__strtok_r+0xa>
 800b988:	6814      	ldr	r4, [r2, #0]
 800b98a:	b144      	cbz	r4, 800b99e <__strtok_r+0x1c>
 800b98c:	4620      	mov	r0, r4
 800b98e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b992:	460f      	mov	r7, r1
 800b994:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b998:	b91e      	cbnz	r6, 800b9a2 <__strtok_r+0x20>
 800b99a:	b965      	cbnz	r5, 800b9b6 <__strtok_r+0x34>
 800b99c:	6015      	str	r5, [r2, #0]
 800b99e:	2000      	movs	r0, #0
 800b9a0:	e005      	b.n	800b9ae <__strtok_r+0x2c>
 800b9a2:	42b5      	cmp	r5, r6
 800b9a4:	d1f6      	bne.n	800b994 <__strtok_r+0x12>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1f0      	bne.n	800b98c <__strtok_r+0xa>
 800b9aa:	6014      	str	r4, [r2, #0]
 800b9ac:	7003      	strb	r3, [r0, #0]
 800b9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b0:	461c      	mov	r4, r3
 800b9b2:	e00c      	b.n	800b9ce <__strtok_r+0x4c>
 800b9b4:	b91d      	cbnz	r5, 800b9be <__strtok_r+0x3c>
 800b9b6:	4627      	mov	r7, r4
 800b9b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9bc:	460e      	mov	r6, r1
 800b9be:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b9c2:	42ab      	cmp	r3, r5
 800b9c4:	d1f6      	bne.n	800b9b4 <__strtok_r+0x32>
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d0f2      	beq.n	800b9b0 <__strtok_r+0x2e>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	703b      	strb	r3, [r7, #0]
 800b9ce:	6014      	str	r4, [r2, #0]
 800b9d0:	e7ed      	b.n	800b9ae <__strtok_r+0x2c>

0800b9d2 <strtok_r>:
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	f7ff bfd5 	b.w	800b982 <__strtok_r>

0800b9d8 <_close_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4d06      	ldr	r5, [pc, #24]	@ (800b9f4 <_close_r+0x1c>)
 800b9dc:	2300      	movs	r3, #0
 800b9de:	4604      	mov	r4, r0
 800b9e0:	4608      	mov	r0, r1
 800b9e2:	602b      	str	r3, [r5, #0]
 800b9e4:	f7f7 fd7e 	bl	80034e4 <_close>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_close_r+0x1a>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_close_r+0x1a>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	2406f73c 	.word	0x2406f73c

0800b9f8 <_lseek_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4d07      	ldr	r5, [pc, #28]	@ (800ba18 <_lseek_r+0x20>)
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	4608      	mov	r0, r1
 800ba00:	4611      	mov	r1, r2
 800ba02:	2200      	movs	r2, #0
 800ba04:	602a      	str	r2, [r5, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	f7f7 fd78 	bl	80034fc <_lseek>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d102      	bne.n	800ba16 <_lseek_r+0x1e>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	b103      	cbz	r3, 800ba16 <_lseek_r+0x1e>
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	2406f73c 	.word	0x2406f73c

0800ba1c <_read_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4d07      	ldr	r5, [pc, #28]	@ (800ba3c <_read_r+0x20>)
 800ba20:	4604      	mov	r4, r0
 800ba22:	4608      	mov	r0, r1
 800ba24:	4611      	mov	r1, r2
 800ba26:	2200      	movs	r2, #0
 800ba28:	602a      	str	r2, [r5, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f7f7 fd3e 	bl	80034ac <_read>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_read_r+0x1e>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_read_r+0x1e>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	2406f73c 	.word	0x2406f73c

0800ba40 <_write_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d07      	ldr	r5, [pc, #28]	@ (800ba60 <_write_r+0x20>)
 800ba44:	4604      	mov	r4, r0
 800ba46:	4608      	mov	r0, r1
 800ba48:	4611      	mov	r1, r2
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	602a      	str	r2, [r5, #0]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	f7f7 fd3a 	bl	80034c8 <_write>
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	d102      	bne.n	800ba5e <_write_r+0x1e>
 800ba58:	682b      	ldr	r3, [r5, #0]
 800ba5a:	b103      	cbz	r3, 800ba5e <_write_r+0x1e>
 800ba5c:	6023      	str	r3, [r4, #0]
 800ba5e:	bd38      	pop	{r3, r4, r5, pc}
 800ba60:	2406f73c 	.word	0x2406f73c

0800ba64 <__errno>:
 800ba64:	4b01      	ldr	r3, [pc, #4]	@ (800ba6c <__errno+0x8>)
 800ba66:	6818      	ldr	r0, [r3, #0]
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	24000038 	.word	0x24000038

0800ba70 <__libc_init_array>:
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	4d0d      	ldr	r5, [pc, #52]	@ (800baa8 <__libc_init_array+0x38>)
 800ba74:	4c0d      	ldr	r4, [pc, #52]	@ (800baac <__libc_init_array+0x3c>)
 800ba76:	1b64      	subs	r4, r4, r5
 800ba78:	10a4      	asrs	r4, r4, #2
 800ba7a:	2600      	movs	r6, #0
 800ba7c:	42a6      	cmp	r6, r4
 800ba7e:	d109      	bne.n	800ba94 <__libc_init_array+0x24>
 800ba80:	4d0b      	ldr	r5, [pc, #44]	@ (800bab0 <__libc_init_array+0x40>)
 800ba82:	4c0c      	ldr	r4, [pc, #48]	@ (800bab4 <__libc_init_array+0x44>)
 800ba84:	f001 f8c2 	bl	800cc0c <_init>
 800ba88:	1b64      	subs	r4, r4, r5
 800ba8a:	10a4      	asrs	r4, r4, #2
 800ba8c:	2600      	movs	r6, #0
 800ba8e:	42a6      	cmp	r6, r4
 800ba90:	d105      	bne.n	800ba9e <__libc_init_array+0x2e>
 800ba92:	bd70      	pop	{r4, r5, r6, pc}
 800ba94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba98:	4798      	blx	r3
 800ba9a:	3601      	adds	r6, #1
 800ba9c:	e7ee      	b.n	800ba7c <__libc_init_array+0xc>
 800ba9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa2:	4798      	blx	r3
 800baa4:	3601      	adds	r6, #1
 800baa6:	e7f2      	b.n	800ba8e <__libc_init_array+0x1e>
 800baa8:	08084510 	.word	0x08084510
 800baac:	08084510 	.word	0x08084510
 800bab0:	08084510 	.word	0x08084510
 800bab4:	08084514 	.word	0x08084514

0800bab8 <__retarget_lock_init_recursive>:
 800bab8:	4770      	bx	lr

0800baba <__retarget_lock_acquire_recursive>:
 800baba:	4770      	bx	lr

0800babc <__retarget_lock_release_recursive>:
 800babc:	4770      	bx	lr
	...

0800bac0 <__assert_func>:
 800bac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bac2:	4614      	mov	r4, r2
 800bac4:	461a      	mov	r2, r3
 800bac6:	4b09      	ldr	r3, [pc, #36]	@ (800baec <__assert_func+0x2c>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4605      	mov	r5, r0
 800bacc:	68d8      	ldr	r0, [r3, #12]
 800bace:	b14c      	cbz	r4, 800bae4 <__assert_func+0x24>
 800bad0:	4b07      	ldr	r3, [pc, #28]	@ (800baf0 <__assert_func+0x30>)
 800bad2:	9100      	str	r1, [sp, #0]
 800bad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bad8:	4906      	ldr	r1, [pc, #24]	@ (800baf4 <__assert_func+0x34>)
 800bada:	462b      	mov	r3, r5
 800badc:	f000 f9ba 	bl	800be54 <fiprintf>
 800bae0:	f000 f9da 	bl	800be98 <abort>
 800bae4:	4b04      	ldr	r3, [pc, #16]	@ (800baf8 <__assert_func+0x38>)
 800bae6:	461c      	mov	r4, r3
 800bae8:	e7f3      	b.n	800bad2 <__assert_func+0x12>
 800baea:	bf00      	nop
 800baec:	24000038 	.word	0x24000038
 800baf0:	0808424b 	.word	0x0808424b
 800baf4:	08084258 	.word	0x08084258
 800baf8:	08084286 	.word	0x08084286

0800bafc <_free_r>:
 800bafc:	b538      	push	{r3, r4, r5, lr}
 800bafe:	4605      	mov	r5, r0
 800bb00:	2900      	cmp	r1, #0
 800bb02:	d041      	beq.n	800bb88 <_free_r+0x8c>
 800bb04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb08:	1f0c      	subs	r4, r1, #4
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	bfb8      	it	lt
 800bb0e:	18e4      	addlt	r4, r4, r3
 800bb10:	f000 f8e8 	bl	800bce4 <__malloc_lock>
 800bb14:	4a1d      	ldr	r2, [pc, #116]	@ (800bb8c <_free_r+0x90>)
 800bb16:	6813      	ldr	r3, [r2, #0]
 800bb18:	b933      	cbnz	r3, 800bb28 <_free_r+0x2c>
 800bb1a:	6063      	str	r3, [r4, #4]
 800bb1c:	6014      	str	r4, [r2, #0]
 800bb1e:	4628      	mov	r0, r5
 800bb20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb24:	f000 b8e4 	b.w	800bcf0 <__malloc_unlock>
 800bb28:	42a3      	cmp	r3, r4
 800bb2a:	d908      	bls.n	800bb3e <_free_r+0x42>
 800bb2c:	6820      	ldr	r0, [r4, #0]
 800bb2e:	1821      	adds	r1, r4, r0
 800bb30:	428b      	cmp	r3, r1
 800bb32:	bf01      	itttt	eq
 800bb34:	6819      	ldreq	r1, [r3, #0]
 800bb36:	685b      	ldreq	r3, [r3, #4]
 800bb38:	1809      	addeq	r1, r1, r0
 800bb3a:	6021      	streq	r1, [r4, #0]
 800bb3c:	e7ed      	b.n	800bb1a <_free_r+0x1e>
 800bb3e:	461a      	mov	r2, r3
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	b10b      	cbz	r3, 800bb48 <_free_r+0x4c>
 800bb44:	42a3      	cmp	r3, r4
 800bb46:	d9fa      	bls.n	800bb3e <_free_r+0x42>
 800bb48:	6811      	ldr	r1, [r2, #0]
 800bb4a:	1850      	adds	r0, r2, r1
 800bb4c:	42a0      	cmp	r0, r4
 800bb4e:	d10b      	bne.n	800bb68 <_free_r+0x6c>
 800bb50:	6820      	ldr	r0, [r4, #0]
 800bb52:	4401      	add	r1, r0
 800bb54:	1850      	adds	r0, r2, r1
 800bb56:	4283      	cmp	r3, r0
 800bb58:	6011      	str	r1, [r2, #0]
 800bb5a:	d1e0      	bne.n	800bb1e <_free_r+0x22>
 800bb5c:	6818      	ldr	r0, [r3, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	6053      	str	r3, [r2, #4]
 800bb62:	4408      	add	r0, r1
 800bb64:	6010      	str	r0, [r2, #0]
 800bb66:	e7da      	b.n	800bb1e <_free_r+0x22>
 800bb68:	d902      	bls.n	800bb70 <_free_r+0x74>
 800bb6a:	230c      	movs	r3, #12
 800bb6c:	602b      	str	r3, [r5, #0]
 800bb6e:	e7d6      	b.n	800bb1e <_free_r+0x22>
 800bb70:	6820      	ldr	r0, [r4, #0]
 800bb72:	1821      	adds	r1, r4, r0
 800bb74:	428b      	cmp	r3, r1
 800bb76:	bf04      	itt	eq
 800bb78:	6819      	ldreq	r1, [r3, #0]
 800bb7a:	685b      	ldreq	r3, [r3, #4]
 800bb7c:	6063      	str	r3, [r4, #4]
 800bb7e:	bf04      	itt	eq
 800bb80:	1809      	addeq	r1, r1, r0
 800bb82:	6021      	streq	r1, [r4, #0]
 800bb84:	6054      	str	r4, [r2, #4]
 800bb86:	e7ca      	b.n	800bb1e <_free_r+0x22>
 800bb88:	bd38      	pop	{r3, r4, r5, pc}
 800bb8a:	bf00      	nop
 800bb8c:	2406f748 	.word	0x2406f748

0800bb90 <malloc>:
 800bb90:	4b02      	ldr	r3, [pc, #8]	@ (800bb9c <malloc+0xc>)
 800bb92:	4601      	mov	r1, r0
 800bb94:	6818      	ldr	r0, [r3, #0]
 800bb96:	f000 b825 	b.w	800bbe4 <_malloc_r>
 800bb9a:	bf00      	nop
 800bb9c:	24000038 	.word	0x24000038

0800bba0 <sbrk_aligned>:
 800bba0:	b570      	push	{r4, r5, r6, lr}
 800bba2:	4e0f      	ldr	r6, [pc, #60]	@ (800bbe0 <sbrk_aligned+0x40>)
 800bba4:	460c      	mov	r4, r1
 800bba6:	6831      	ldr	r1, [r6, #0]
 800bba8:	4605      	mov	r5, r0
 800bbaa:	b911      	cbnz	r1, 800bbb2 <sbrk_aligned+0x12>
 800bbac:	f000 f964 	bl	800be78 <_sbrk_r>
 800bbb0:	6030      	str	r0, [r6, #0]
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	f000 f95f 	bl	800be78 <_sbrk_r>
 800bbba:	1c43      	adds	r3, r0, #1
 800bbbc:	d103      	bne.n	800bbc6 <sbrk_aligned+0x26>
 800bbbe:	f04f 34ff 	mov.w	r4, #4294967295
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	bd70      	pop	{r4, r5, r6, pc}
 800bbc6:	1cc4      	adds	r4, r0, #3
 800bbc8:	f024 0403 	bic.w	r4, r4, #3
 800bbcc:	42a0      	cmp	r0, r4
 800bbce:	d0f8      	beq.n	800bbc2 <sbrk_aligned+0x22>
 800bbd0:	1a21      	subs	r1, r4, r0
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f000 f950 	bl	800be78 <_sbrk_r>
 800bbd8:	3001      	adds	r0, #1
 800bbda:	d1f2      	bne.n	800bbc2 <sbrk_aligned+0x22>
 800bbdc:	e7ef      	b.n	800bbbe <sbrk_aligned+0x1e>
 800bbde:	bf00      	nop
 800bbe0:	2406f744 	.word	0x2406f744

0800bbe4 <_malloc_r>:
 800bbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbe8:	1ccd      	adds	r5, r1, #3
 800bbea:	f025 0503 	bic.w	r5, r5, #3
 800bbee:	3508      	adds	r5, #8
 800bbf0:	2d0c      	cmp	r5, #12
 800bbf2:	bf38      	it	cc
 800bbf4:	250c      	movcc	r5, #12
 800bbf6:	2d00      	cmp	r5, #0
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	db01      	blt.n	800bc00 <_malloc_r+0x1c>
 800bbfc:	42a9      	cmp	r1, r5
 800bbfe:	d904      	bls.n	800bc0a <_malloc_r+0x26>
 800bc00:	230c      	movs	r3, #12
 800bc02:	6033      	str	r3, [r6, #0]
 800bc04:	2000      	movs	r0, #0
 800bc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bce0 <_malloc_r+0xfc>
 800bc0e:	f000 f869 	bl	800bce4 <__malloc_lock>
 800bc12:	f8d8 3000 	ldr.w	r3, [r8]
 800bc16:	461c      	mov	r4, r3
 800bc18:	bb44      	cbnz	r4, 800bc6c <_malloc_r+0x88>
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7ff ffbf 	bl	800bba0 <sbrk_aligned>
 800bc22:	1c43      	adds	r3, r0, #1
 800bc24:	4604      	mov	r4, r0
 800bc26:	d158      	bne.n	800bcda <_malloc_r+0xf6>
 800bc28:	f8d8 4000 	ldr.w	r4, [r8]
 800bc2c:	4627      	mov	r7, r4
 800bc2e:	2f00      	cmp	r7, #0
 800bc30:	d143      	bne.n	800bcba <_malloc_r+0xd6>
 800bc32:	2c00      	cmp	r4, #0
 800bc34:	d04b      	beq.n	800bcce <_malloc_r+0xea>
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	4639      	mov	r1, r7
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	eb04 0903 	add.w	r9, r4, r3
 800bc40:	f000 f91a 	bl	800be78 <_sbrk_r>
 800bc44:	4581      	cmp	r9, r0
 800bc46:	d142      	bne.n	800bcce <_malloc_r+0xea>
 800bc48:	6821      	ldr	r1, [r4, #0]
 800bc4a:	1a6d      	subs	r5, r5, r1
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	4630      	mov	r0, r6
 800bc50:	f7ff ffa6 	bl	800bba0 <sbrk_aligned>
 800bc54:	3001      	adds	r0, #1
 800bc56:	d03a      	beq.n	800bcce <_malloc_r+0xea>
 800bc58:	6823      	ldr	r3, [r4, #0]
 800bc5a:	442b      	add	r3, r5
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc62:	685a      	ldr	r2, [r3, #4]
 800bc64:	bb62      	cbnz	r2, 800bcc0 <_malloc_r+0xdc>
 800bc66:	f8c8 7000 	str.w	r7, [r8]
 800bc6a:	e00f      	b.n	800bc8c <_malloc_r+0xa8>
 800bc6c:	6822      	ldr	r2, [r4, #0]
 800bc6e:	1b52      	subs	r2, r2, r5
 800bc70:	d420      	bmi.n	800bcb4 <_malloc_r+0xd0>
 800bc72:	2a0b      	cmp	r2, #11
 800bc74:	d917      	bls.n	800bca6 <_malloc_r+0xc2>
 800bc76:	1961      	adds	r1, r4, r5
 800bc78:	42a3      	cmp	r3, r4
 800bc7a:	6025      	str	r5, [r4, #0]
 800bc7c:	bf18      	it	ne
 800bc7e:	6059      	strne	r1, [r3, #4]
 800bc80:	6863      	ldr	r3, [r4, #4]
 800bc82:	bf08      	it	eq
 800bc84:	f8c8 1000 	streq.w	r1, [r8]
 800bc88:	5162      	str	r2, [r4, r5]
 800bc8a:	604b      	str	r3, [r1, #4]
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	f000 f82f 	bl	800bcf0 <__malloc_unlock>
 800bc92:	f104 000b 	add.w	r0, r4, #11
 800bc96:	1d23      	adds	r3, r4, #4
 800bc98:	f020 0007 	bic.w	r0, r0, #7
 800bc9c:	1ac2      	subs	r2, r0, r3
 800bc9e:	bf1c      	itt	ne
 800bca0:	1a1b      	subne	r3, r3, r0
 800bca2:	50a3      	strne	r3, [r4, r2]
 800bca4:	e7af      	b.n	800bc06 <_malloc_r+0x22>
 800bca6:	6862      	ldr	r2, [r4, #4]
 800bca8:	42a3      	cmp	r3, r4
 800bcaa:	bf0c      	ite	eq
 800bcac:	f8c8 2000 	streq.w	r2, [r8]
 800bcb0:	605a      	strne	r2, [r3, #4]
 800bcb2:	e7eb      	b.n	800bc8c <_malloc_r+0xa8>
 800bcb4:	4623      	mov	r3, r4
 800bcb6:	6864      	ldr	r4, [r4, #4]
 800bcb8:	e7ae      	b.n	800bc18 <_malloc_r+0x34>
 800bcba:	463c      	mov	r4, r7
 800bcbc:	687f      	ldr	r7, [r7, #4]
 800bcbe:	e7b6      	b.n	800bc2e <_malloc_r+0x4a>
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	42a3      	cmp	r3, r4
 800bcc6:	d1fb      	bne.n	800bcc0 <_malloc_r+0xdc>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	6053      	str	r3, [r2, #4]
 800bccc:	e7de      	b.n	800bc8c <_malloc_r+0xa8>
 800bcce:	230c      	movs	r3, #12
 800bcd0:	6033      	str	r3, [r6, #0]
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f000 f80c 	bl	800bcf0 <__malloc_unlock>
 800bcd8:	e794      	b.n	800bc04 <_malloc_r+0x20>
 800bcda:	6005      	str	r5, [r0, #0]
 800bcdc:	e7d6      	b.n	800bc8c <_malloc_r+0xa8>
 800bcde:	bf00      	nop
 800bce0:	2406f748 	.word	0x2406f748

0800bce4 <__malloc_lock>:
 800bce4:	4801      	ldr	r0, [pc, #4]	@ (800bcec <__malloc_lock+0x8>)
 800bce6:	f7ff bee8 	b.w	800baba <__retarget_lock_acquire_recursive>
 800bcea:	bf00      	nop
 800bcec:	2406f740 	.word	0x2406f740

0800bcf0 <__malloc_unlock>:
 800bcf0:	4801      	ldr	r0, [pc, #4]	@ (800bcf8 <__malloc_unlock+0x8>)
 800bcf2:	f7ff bee3 	b.w	800babc <__retarget_lock_release_recursive>
 800bcf6:	bf00      	nop
 800bcf8:	2406f740 	.word	0x2406f740

0800bcfc <__sflush_r>:
 800bcfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd04:	0716      	lsls	r6, r2, #28
 800bd06:	4605      	mov	r5, r0
 800bd08:	460c      	mov	r4, r1
 800bd0a:	d454      	bmi.n	800bdb6 <__sflush_r+0xba>
 800bd0c:	684b      	ldr	r3, [r1, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	dc02      	bgt.n	800bd18 <__sflush_r+0x1c>
 800bd12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dd48      	ble.n	800bdaa <__sflush_r+0xae>
 800bd18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd1a:	2e00      	cmp	r6, #0
 800bd1c:	d045      	beq.n	800bdaa <__sflush_r+0xae>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd24:	682f      	ldr	r7, [r5, #0]
 800bd26:	6a21      	ldr	r1, [r4, #32]
 800bd28:	602b      	str	r3, [r5, #0]
 800bd2a:	d030      	beq.n	800bd8e <__sflush_r+0x92>
 800bd2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd2e:	89a3      	ldrh	r3, [r4, #12]
 800bd30:	0759      	lsls	r1, r3, #29
 800bd32:	d505      	bpl.n	800bd40 <__sflush_r+0x44>
 800bd34:	6863      	ldr	r3, [r4, #4]
 800bd36:	1ad2      	subs	r2, r2, r3
 800bd38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd3a:	b10b      	cbz	r3, 800bd40 <__sflush_r+0x44>
 800bd3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd3e:	1ad2      	subs	r2, r2, r3
 800bd40:	2300      	movs	r3, #0
 800bd42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd44:	6a21      	ldr	r1, [r4, #32]
 800bd46:	4628      	mov	r0, r5
 800bd48:	47b0      	blx	r6
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	d106      	bne.n	800bd5e <__sflush_r+0x62>
 800bd50:	6829      	ldr	r1, [r5, #0]
 800bd52:	291d      	cmp	r1, #29
 800bd54:	d82b      	bhi.n	800bdae <__sflush_r+0xb2>
 800bd56:	4a2a      	ldr	r2, [pc, #168]	@ (800be00 <__sflush_r+0x104>)
 800bd58:	40ca      	lsrs	r2, r1
 800bd5a:	07d6      	lsls	r6, r2, #31
 800bd5c:	d527      	bpl.n	800bdae <__sflush_r+0xb2>
 800bd5e:	2200      	movs	r2, #0
 800bd60:	6062      	str	r2, [r4, #4]
 800bd62:	04d9      	lsls	r1, r3, #19
 800bd64:	6922      	ldr	r2, [r4, #16]
 800bd66:	6022      	str	r2, [r4, #0]
 800bd68:	d504      	bpl.n	800bd74 <__sflush_r+0x78>
 800bd6a:	1c42      	adds	r2, r0, #1
 800bd6c:	d101      	bne.n	800bd72 <__sflush_r+0x76>
 800bd6e:	682b      	ldr	r3, [r5, #0]
 800bd70:	b903      	cbnz	r3, 800bd74 <__sflush_r+0x78>
 800bd72:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd76:	602f      	str	r7, [r5, #0]
 800bd78:	b1b9      	cbz	r1, 800bdaa <__sflush_r+0xae>
 800bd7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd7e:	4299      	cmp	r1, r3
 800bd80:	d002      	beq.n	800bd88 <__sflush_r+0x8c>
 800bd82:	4628      	mov	r0, r5
 800bd84:	f7ff feba 	bl	800bafc <_free_r>
 800bd88:	2300      	movs	r3, #0
 800bd8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd8c:	e00d      	b.n	800bdaa <__sflush_r+0xae>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	4628      	mov	r0, r5
 800bd92:	47b0      	blx	r6
 800bd94:	4602      	mov	r2, r0
 800bd96:	1c50      	adds	r0, r2, #1
 800bd98:	d1c9      	bne.n	800bd2e <__sflush_r+0x32>
 800bd9a:	682b      	ldr	r3, [r5, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d0c6      	beq.n	800bd2e <__sflush_r+0x32>
 800bda0:	2b1d      	cmp	r3, #29
 800bda2:	d001      	beq.n	800bda8 <__sflush_r+0xac>
 800bda4:	2b16      	cmp	r3, #22
 800bda6:	d11e      	bne.n	800bde6 <__sflush_r+0xea>
 800bda8:	602f      	str	r7, [r5, #0]
 800bdaa:	2000      	movs	r0, #0
 800bdac:	e022      	b.n	800bdf4 <__sflush_r+0xf8>
 800bdae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdb2:	b21b      	sxth	r3, r3
 800bdb4:	e01b      	b.n	800bdee <__sflush_r+0xf2>
 800bdb6:	690f      	ldr	r7, [r1, #16]
 800bdb8:	2f00      	cmp	r7, #0
 800bdba:	d0f6      	beq.n	800bdaa <__sflush_r+0xae>
 800bdbc:	0793      	lsls	r3, r2, #30
 800bdbe:	680e      	ldr	r6, [r1, #0]
 800bdc0:	bf08      	it	eq
 800bdc2:	694b      	ldreq	r3, [r1, #20]
 800bdc4:	600f      	str	r7, [r1, #0]
 800bdc6:	bf18      	it	ne
 800bdc8:	2300      	movne	r3, #0
 800bdca:	eba6 0807 	sub.w	r8, r6, r7
 800bdce:	608b      	str	r3, [r1, #8]
 800bdd0:	f1b8 0f00 	cmp.w	r8, #0
 800bdd4:	dde9      	ble.n	800bdaa <__sflush_r+0xae>
 800bdd6:	6a21      	ldr	r1, [r4, #32]
 800bdd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bdda:	4643      	mov	r3, r8
 800bddc:	463a      	mov	r2, r7
 800bdde:	4628      	mov	r0, r5
 800bde0:	47b0      	blx	r6
 800bde2:	2800      	cmp	r0, #0
 800bde4:	dc08      	bgt.n	800bdf8 <__sflush_r+0xfc>
 800bde6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdee:	81a3      	strh	r3, [r4, #12]
 800bdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf8:	4407      	add	r7, r0
 800bdfa:	eba8 0800 	sub.w	r8, r8, r0
 800bdfe:	e7e7      	b.n	800bdd0 <__sflush_r+0xd4>
 800be00:	20400001 	.word	0x20400001

0800be04 <_fflush_r>:
 800be04:	b538      	push	{r3, r4, r5, lr}
 800be06:	690b      	ldr	r3, [r1, #16]
 800be08:	4605      	mov	r5, r0
 800be0a:	460c      	mov	r4, r1
 800be0c:	b913      	cbnz	r3, 800be14 <_fflush_r+0x10>
 800be0e:	2500      	movs	r5, #0
 800be10:	4628      	mov	r0, r5
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	b118      	cbz	r0, 800be1e <_fflush_r+0x1a>
 800be16:	6a03      	ldr	r3, [r0, #32]
 800be18:	b90b      	cbnz	r3, 800be1e <_fflush_r+0x1a>
 800be1a:	f7ff fd31 	bl	800b880 <__sinit>
 800be1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d0f3      	beq.n	800be0e <_fflush_r+0xa>
 800be26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be28:	07d0      	lsls	r0, r2, #31
 800be2a:	d404      	bmi.n	800be36 <_fflush_r+0x32>
 800be2c:	0599      	lsls	r1, r3, #22
 800be2e:	d402      	bmi.n	800be36 <_fflush_r+0x32>
 800be30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be32:	f7ff fe42 	bl	800baba <__retarget_lock_acquire_recursive>
 800be36:	4628      	mov	r0, r5
 800be38:	4621      	mov	r1, r4
 800be3a:	f7ff ff5f 	bl	800bcfc <__sflush_r>
 800be3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be40:	07da      	lsls	r2, r3, #31
 800be42:	4605      	mov	r5, r0
 800be44:	d4e4      	bmi.n	800be10 <_fflush_r+0xc>
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	059b      	lsls	r3, r3, #22
 800be4a:	d4e1      	bmi.n	800be10 <_fflush_r+0xc>
 800be4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be4e:	f7ff fe35 	bl	800babc <__retarget_lock_release_recursive>
 800be52:	e7dd      	b.n	800be10 <_fflush_r+0xc>

0800be54 <fiprintf>:
 800be54:	b40e      	push	{r1, r2, r3}
 800be56:	b503      	push	{r0, r1, lr}
 800be58:	4601      	mov	r1, r0
 800be5a:	ab03      	add	r3, sp, #12
 800be5c:	4805      	ldr	r0, [pc, #20]	@ (800be74 <fiprintf+0x20>)
 800be5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be62:	6800      	ldr	r0, [r0, #0]
 800be64:	9301      	str	r3, [sp, #4]
 800be66:	f000 f847 	bl	800bef8 <_vfiprintf_r>
 800be6a:	b002      	add	sp, #8
 800be6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be70:	b003      	add	sp, #12
 800be72:	4770      	bx	lr
 800be74:	24000038 	.word	0x24000038

0800be78 <_sbrk_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4d06      	ldr	r5, [pc, #24]	@ (800be94 <_sbrk_r+0x1c>)
 800be7c:	2300      	movs	r3, #0
 800be7e:	4604      	mov	r4, r0
 800be80:	4608      	mov	r0, r1
 800be82:	602b      	str	r3, [r5, #0]
 800be84:	f7f7 fb3c 	bl	8003500 <_sbrk>
 800be88:	1c43      	adds	r3, r0, #1
 800be8a:	d102      	bne.n	800be92 <_sbrk_r+0x1a>
 800be8c:	682b      	ldr	r3, [r5, #0]
 800be8e:	b103      	cbz	r3, 800be92 <_sbrk_r+0x1a>
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	bd38      	pop	{r3, r4, r5, pc}
 800be94:	2406f73c 	.word	0x2406f73c

0800be98 <abort>:
 800be98:	b508      	push	{r3, lr}
 800be9a:	2006      	movs	r0, #6
 800be9c:	f000 fb8c 	bl	800c5b8 <raise>
 800bea0:	2001      	movs	r0, #1
 800bea2:	f7f7 fafd 	bl	80034a0 <_exit>

0800bea6 <__sfputc_r>:
 800bea6:	6893      	ldr	r3, [r2, #8]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	b410      	push	{r4}
 800beae:	6093      	str	r3, [r2, #8]
 800beb0:	da08      	bge.n	800bec4 <__sfputc_r+0x1e>
 800beb2:	6994      	ldr	r4, [r2, #24]
 800beb4:	42a3      	cmp	r3, r4
 800beb6:	db01      	blt.n	800bebc <__sfputc_r+0x16>
 800beb8:	290a      	cmp	r1, #10
 800beba:	d103      	bne.n	800bec4 <__sfputc_r+0x1e>
 800bebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bec0:	f000 babe 	b.w	800c440 <__swbuf_r>
 800bec4:	6813      	ldr	r3, [r2, #0]
 800bec6:	1c58      	adds	r0, r3, #1
 800bec8:	6010      	str	r0, [r2, #0]
 800beca:	7019      	strb	r1, [r3, #0]
 800becc:	4608      	mov	r0, r1
 800bece:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <__sfputs_r>:
 800bed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed6:	4606      	mov	r6, r0
 800bed8:	460f      	mov	r7, r1
 800beda:	4614      	mov	r4, r2
 800bedc:	18d5      	adds	r5, r2, r3
 800bede:	42ac      	cmp	r4, r5
 800bee0:	d101      	bne.n	800bee6 <__sfputs_r+0x12>
 800bee2:	2000      	movs	r0, #0
 800bee4:	e007      	b.n	800bef6 <__sfputs_r+0x22>
 800bee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beea:	463a      	mov	r2, r7
 800beec:	4630      	mov	r0, r6
 800beee:	f7ff ffda 	bl	800bea6 <__sfputc_r>
 800bef2:	1c43      	adds	r3, r0, #1
 800bef4:	d1f3      	bne.n	800bede <__sfputs_r+0xa>
 800bef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bef8 <_vfiprintf_r>:
 800bef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befc:	460d      	mov	r5, r1
 800befe:	b09d      	sub	sp, #116	@ 0x74
 800bf00:	4614      	mov	r4, r2
 800bf02:	4698      	mov	r8, r3
 800bf04:	4606      	mov	r6, r0
 800bf06:	b118      	cbz	r0, 800bf10 <_vfiprintf_r+0x18>
 800bf08:	6a03      	ldr	r3, [r0, #32]
 800bf0a:	b90b      	cbnz	r3, 800bf10 <_vfiprintf_r+0x18>
 800bf0c:	f7ff fcb8 	bl	800b880 <__sinit>
 800bf10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf12:	07d9      	lsls	r1, r3, #31
 800bf14:	d405      	bmi.n	800bf22 <_vfiprintf_r+0x2a>
 800bf16:	89ab      	ldrh	r3, [r5, #12]
 800bf18:	059a      	lsls	r2, r3, #22
 800bf1a:	d402      	bmi.n	800bf22 <_vfiprintf_r+0x2a>
 800bf1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf1e:	f7ff fdcc 	bl	800baba <__retarget_lock_acquire_recursive>
 800bf22:	89ab      	ldrh	r3, [r5, #12]
 800bf24:	071b      	lsls	r3, r3, #28
 800bf26:	d501      	bpl.n	800bf2c <_vfiprintf_r+0x34>
 800bf28:	692b      	ldr	r3, [r5, #16]
 800bf2a:	b99b      	cbnz	r3, 800bf54 <_vfiprintf_r+0x5c>
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f000 fac4 	bl	800c4bc <__swsetup_r>
 800bf34:	b170      	cbz	r0, 800bf54 <_vfiprintf_r+0x5c>
 800bf36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf38:	07dc      	lsls	r4, r3, #31
 800bf3a:	d504      	bpl.n	800bf46 <_vfiprintf_r+0x4e>
 800bf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf40:	b01d      	add	sp, #116	@ 0x74
 800bf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf46:	89ab      	ldrh	r3, [r5, #12]
 800bf48:	0598      	lsls	r0, r3, #22
 800bf4a:	d4f7      	bmi.n	800bf3c <_vfiprintf_r+0x44>
 800bf4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf4e:	f7ff fdb5 	bl	800babc <__retarget_lock_release_recursive>
 800bf52:	e7f3      	b.n	800bf3c <_vfiprintf_r+0x44>
 800bf54:	2300      	movs	r3, #0
 800bf56:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf58:	2320      	movs	r3, #32
 800bf5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf62:	2330      	movs	r3, #48	@ 0x30
 800bf64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c114 <_vfiprintf_r+0x21c>
 800bf68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf6c:	f04f 0901 	mov.w	r9, #1
 800bf70:	4623      	mov	r3, r4
 800bf72:	469a      	mov	sl, r3
 800bf74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf78:	b10a      	cbz	r2, 800bf7e <_vfiprintf_r+0x86>
 800bf7a:	2a25      	cmp	r2, #37	@ 0x25
 800bf7c:	d1f9      	bne.n	800bf72 <_vfiprintf_r+0x7a>
 800bf7e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf82:	d00b      	beq.n	800bf9c <_vfiprintf_r+0xa4>
 800bf84:	465b      	mov	r3, fp
 800bf86:	4622      	mov	r2, r4
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7ff ffa2 	bl	800bed4 <__sfputs_r>
 800bf90:	3001      	adds	r0, #1
 800bf92:	f000 80a7 	beq.w	800c0e4 <_vfiprintf_r+0x1ec>
 800bf96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf98:	445a      	add	r2, fp
 800bf9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf9c:	f89a 3000 	ldrb.w	r3, [sl]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f000 809f 	beq.w	800c0e4 <_vfiprintf_r+0x1ec>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfb0:	f10a 0a01 	add.w	sl, sl, #1
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	9307      	str	r3, [sp, #28]
 800bfb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bfbc:	931a      	str	r3, [sp, #104]	@ 0x68
 800bfbe:	4654      	mov	r4, sl
 800bfc0:	2205      	movs	r2, #5
 800bfc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc6:	4853      	ldr	r0, [pc, #332]	@ (800c114 <_vfiprintf_r+0x21c>)
 800bfc8:	f7f4 f9ea 	bl	80003a0 <memchr>
 800bfcc:	9a04      	ldr	r2, [sp, #16]
 800bfce:	b9d8      	cbnz	r0, 800c008 <_vfiprintf_r+0x110>
 800bfd0:	06d1      	lsls	r1, r2, #27
 800bfd2:	bf44      	itt	mi
 800bfd4:	2320      	movmi	r3, #32
 800bfd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfda:	0713      	lsls	r3, r2, #28
 800bfdc:	bf44      	itt	mi
 800bfde:	232b      	movmi	r3, #43	@ 0x2b
 800bfe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfe4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfea:	d015      	beq.n	800c018 <_vfiprintf_r+0x120>
 800bfec:	9a07      	ldr	r2, [sp, #28]
 800bfee:	4654      	mov	r4, sl
 800bff0:	2000      	movs	r0, #0
 800bff2:	f04f 0c0a 	mov.w	ip, #10
 800bff6:	4621      	mov	r1, r4
 800bff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bffc:	3b30      	subs	r3, #48	@ 0x30
 800bffe:	2b09      	cmp	r3, #9
 800c000:	d94b      	bls.n	800c09a <_vfiprintf_r+0x1a2>
 800c002:	b1b0      	cbz	r0, 800c032 <_vfiprintf_r+0x13a>
 800c004:	9207      	str	r2, [sp, #28]
 800c006:	e014      	b.n	800c032 <_vfiprintf_r+0x13a>
 800c008:	eba0 0308 	sub.w	r3, r0, r8
 800c00c:	fa09 f303 	lsl.w	r3, r9, r3
 800c010:	4313      	orrs	r3, r2
 800c012:	9304      	str	r3, [sp, #16]
 800c014:	46a2      	mov	sl, r4
 800c016:	e7d2      	b.n	800bfbe <_vfiprintf_r+0xc6>
 800c018:	9b03      	ldr	r3, [sp, #12]
 800c01a:	1d19      	adds	r1, r3, #4
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	9103      	str	r1, [sp, #12]
 800c020:	2b00      	cmp	r3, #0
 800c022:	bfbb      	ittet	lt
 800c024:	425b      	neglt	r3, r3
 800c026:	f042 0202 	orrlt.w	r2, r2, #2
 800c02a:	9307      	strge	r3, [sp, #28]
 800c02c:	9307      	strlt	r3, [sp, #28]
 800c02e:	bfb8      	it	lt
 800c030:	9204      	strlt	r2, [sp, #16]
 800c032:	7823      	ldrb	r3, [r4, #0]
 800c034:	2b2e      	cmp	r3, #46	@ 0x2e
 800c036:	d10a      	bne.n	800c04e <_vfiprintf_r+0x156>
 800c038:	7863      	ldrb	r3, [r4, #1]
 800c03a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c03c:	d132      	bne.n	800c0a4 <_vfiprintf_r+0x1ac>
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	1d1a      	adds	r2, r3, #4
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	9203      	str	r2, [sp, #12]
 800c046:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c04a:	3402      	adds	r4, #2
 800c04c:	9305      	str	r3, [sp, #20]
 800c04e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c124 <_vfiprintf_r+0x22c>
 800c052:	7821      	ldrb	r1, [r4, #0]
 800c054:	2203      	movs	r2, #3
 800c056:	4650      	mov	r0, sl
 800c058:	f7f4 f9a2 	bl	80003a0 <memchr>
 800c05c:	b138      	cbz	r0, 800c06e <_vfiprintf_r+0x176>
 800c05e:	9b04      	ldr	r3, [sp, #16]
 800c060:	eba0 000a 	sub.w	r0, r0, sl
 800c064:	2240      	movs	r2, #64	@ 0x40
 800c066:	4082      	lsls	r2, r0
 800c068:	4313      	orrs	r3, r2
 800c06a:	3401      	adds	r4, #1
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c072:	4829      	ldr	r0, [pc, #164]	@ (800c118 <_vfiprintf_r+0x220>)
 800c074:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c078:	2206      	movs	r2, #6
 800c07a:	f7f4 f991 	bl	80003a0 <memchr>
 800c07e:	2800      	cmp	r0, #0
 800c080:	d03f      	beq.n	800c102 <_vfiprintf_r+0x20a>
 800c082:	4b26      	ldr	r3, [pc, #152]	@ (800c11c <_vfiprintf_r+0x224>)
 800c084:	bb1b      	cbnz	r3, 800c0ce <_vfiprintf_r+0x1d6>
 800c086:	9b03      	ldr	r3, [sp, #12]
 800c088:	3307      	adds	r3, #7
 800c08a:	f023 0307 	bic.w	r3, r3, #7
 800c08e:	3308      	adds	r3, #8
 800c090:	9303      	str	r3, [sp, #12]
 800c092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c094:	443b      	add	r3, r7
 800c096:	9309      	str	r3, [sp, #36]	@ 0x24
 800c098:	e76a      	b.n	800bf70 <_vfiprintf_r+0x78>
 800c09a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c09e:	460c      	mov	r4, r1
 800c0a0:	2001      	movs	r0, #1
 800c0a2:	e7a8      	b.n	800bff6 <_vfiprintf_r+0xfe>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	3401      	adds	r4, #1
 800c0a8:	9305      	str	r3, [sp, #20]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	f04f 0c0a 	mov.w	ip, #10
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0b6:	3a30      	subs	r2, #48	@ 0x30
 800c0b8:	2a09      	cmp	r2, #9
 800c0ba:	d903      	bls.n	800c0c4 <_vfiprintf_r+0x1cc>
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d0c6      	beq.n	800c04e <_vfiprintf_r+0x156>
 800c0c0:	9105      	str	r1, [sp, #20]
 800c0c2:	e7c4      	b.n	800c04e <_vfiprintf_r+0x156>
 800c0c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e7f0      	b.n	800c0b0 <_vfiprintf_r+0x1b8>
 800c0ce:	ab03      	add	r3, sp, #12
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	462a      	mov	r2, r5
 800c0d4:	4b12      	ldr	r3, [pc, #72]	@ (800c120 <_vfiprintf_r+0x228>)
 800c0d6:	a904      	add	r1, sp, #16
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f3af 8000 	nop.w
 800c0de:	4607      	mov	r7, r0
 800c0e0:	1c78      	adds	r0, r7, #1
 800c0e2:	d1d6      	bne.n	800c092 <_vfiprintf_r+0x19a>
 800c0e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0e6:	07d9      	lsls	r1, r3, #31
 800c0e8:	d405      	bmi.n	800c0f6 <_vfiprintf_r+0x1fe>
 800c0ea:	89ab      	ldrh	r3, [r5, #12]
 800c0ec:	059a      	lsls	r2, r3, #22
 800c0ee:	d402      	bmi.n	800c0f6 <_vfiprintf_r+0x1fe>
 800c0f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0f2:	f7ff fce3 	bl	800babc <__retarget_lock_release_recursive>
 800c0f6:	89ab      	ldrh	r3, [r5, #12]
 800c0f8:	065b      	lsls	r3, r3, #25
 800c0fa:	f53f af1f 	bmi.w	800bf3c <_vfiprintf_r+0x44>
 800c0fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c100:	e71e      	b.n	800bf40 <_vfiprintf_r+0x48>
 800c102:	ab03      	add	r3, sp, #12
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	462a      	mov	r2, r5
 800c108:	4b05      	ldr	r3, [pc, #20]	@ (800c120 <_vfiprintf_r+0x228>)
 800c10a:	a904      	add	r1, sp, #16
 800c10c:	4630      	mov	r0, r6
 800c10e:	f000 f879 	bl	800c204 <_printf_i>
 800c112:	e7e4      	b.n	800c0de <_vfiprintf_r+0x1e6>
 800c114:	08084287 	.word	0x08084287
 800c118:	08084291 	.word	0x08084291
 800c11c:	00000000 	.word	0x00000000
 800c120:	0800bed5 	.word	0x0800bed5
 800c124:	0808428d 	.word	0x0808428d

0800c128 <_printf_common>:
 800c128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c12c:	4616      	mov	r6, r2
 800c12e:	4698      	mov	r8, r3
 800c130:	688a      	ldr	r2, [r1, #8]
 800c132:	690b      	ldr	r3, [r1, #16]
 800c134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c138:	4293      	cmp	r3, r2
 800c13a:	bfb8      	it	lt
 800c13c:	4613      	movlt	r3, r2
 800c13e:	6033      	str	r3, [r6, #0]
 800c140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c144:	4607      	mov	r7, r0
 800c146:	460c      	mov	r4, r1
 800c148:	b10a      	cbz	r2, 800c14e <_printf_common+0x26>
 800c14a:	3301      	adds	r3, #1
 800c14c:	6033      	str	r3, [r6, #0]
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	0699      	lsls	r1, r3, #26
 800c152:	bf42      	ittt	mi
 800c154:	6833      	ldrmi	r3, [r6, #0]
 800c156:	3302      	addmi	r3, #2
 800c158:	6033      	strmi	r3, [r6, #0]
 800c15a:	6825      	ldr	r5, [r4, #0]
 800c15c:	f015 0506 	ands.w	r5, r5, #6
 800c160:	d106      	bne.n	800c170 <_printf_common+0x48>
 800c162:	f104 0a19 	add.w	sl, r4, #25
 800c166:	68e3      	ldr	r3, [r4, #12]
 800c168:	6832      	ldr	r2, [r6, #0]
 800c16a:	1a9b      	subs	r3, r3, r2
 800c16c:	42ab      	cmp	r3, r5
 800c16e:	dc26      	bgt.n	800c1be <_printf_common+0x96>
 800c170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c174:	6822      	ldr	r2, [r4, #0]
 800c176:	3b00      	subs	r3, #0
 800c178:	bf18      	it	ne
 800c17a:	2301      	movne	r3, #1
 800c17c:	0692      	lsls	r2, r2, #26
 800c17e:	d42b      	bmi.n	800c1d8 <_printf_common+0xb0>
 800c180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c184:	4641      	mov	r1, r8
 800c186:	4638      	mov	r0, r7
 800c188:	47c8      	blx	r9
 800c18a:	3001      	adds	r0, #1
 800c18c:	d01e      	beq.n	800c1cc <_printf_common+0xa4>
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	6922      	ldr	r2, [r4, #16]
 800c192:	f003 0306 	and.w	r3, r3, #6
 800c196:	2b04      	cmp	r3, #4
 800c198:	bf02      	ittt	eq
 800c19a:	68e5      	ldreq	r5, [r4, #12]
 800c19c:	6833      	ldreq	r3, [r6, #0]
 800c19e:	1aed      	subeq	r5, r5, r3
 800c1a0:	68a3      	ldr	r3, [r4, #8]
 800c1a2:	bf0c      	ite	eq
 800c1a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1a8:	2500      	movne	r5, #0
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	bfc4      	itt	gt
 800c1ae:	1a9b      	subgt	r3, r3, r2
 800c1b0:	18ed      	addgt	r5, r5, r3
 800c1b2:	2600      	movs	r6, #0
 800c1b4:	341a      	adds	r4, #26
 800c1b6:	42b5      	cmp	r5, r6
 800c1b8:	d11a      	bne.n	800c1f0 <_printf_common+0xc8>
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	e008      	b.n	800c1d0 <_printf_common+0xa8>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	4652      	mov	r2, sl
 800c1c2:	4641      	mov	r1, r8
 800c1c4:	4638      	mov	r0, r7
 800c1c6:	47c8      	blx	r9
 800c1c8:	3001      	adds	r0, #1
 800c1ca:	d103      	bne.n	800c1d4 <_printf_common+0xac>
 800c1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d4:	3501      	adds	r5, #1
 800c1d6:	e7c6      	b.n	800c166 <_printf_common+0x3e>
 800c1d8:	18e1      	adds	r1, r4, r3
 800c1da:	1c5a      	adds	r2, r3, #1
 800c1dc:	2030      	movs	r0, #48	@ 0x30
 800c1de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c1e2:	4422      	add	r2, r4
 800c1e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c1e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c1ec:	3302      	adds	r3, #2
 800c1ee:	e7c7      	b.n	800c180 <_printf_common+0x58>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	4622      	mov	r2, r4
 800c1f4:	4641      	mov	r1, r8
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	47c8      	blx	r9
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	d0e6      	beq.n	800c1cc <_printf_common+0xa4>
 800c1fe:	3601      	adds	r6, #1
 800c200:	e7d9      	b.n	800c1b6 <_printf_common+0x8e>
	...

0800c204 <_printf_i>:
 800c204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c208:	7e0f      	ldrb	r7, [r1, #24]
 800c20a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c20c:	2f78      	cmp	r7, #120	@ 0x78
 800c20e:	4691      	mov	r9, r2
 800c210:	4680      	mov	r8, r0
 800c212:	460c      	mov	r4, r1
 800c214:	469a      	mov	sl, r3
 800c216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c21a:	d807      	bhi.n	800c22c <_printf_i+0x28>
 800c21c:	2f62      	cmp	r7, #98	@ 0x62
 800c21e:	d80a      	bhi.n	800c236 <_printf_i+0x32>
 800c220:	2f00      	cmp	r7, #0
 800c222:	f000 80d1 	beq.w	800c3c8 <_printf_i+0x1c4>
 800c226:	2f58      	cmp	r7, #88	@ 0x58
 800c228:	f000 80b8 	beq.w	800c39c <_printf_i+0x198>
 800c22c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c234:	e03a      	b.n	800c2ac <_printf_i+0xa8>
 800c236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c23a:	2b15      	cmp	r3, #21
 800c23c:	d8f6      	bhi.n	800c22c <_printf_i+0x28>
 800c23e:	a101      	add	r1, pc, #4	@ (adr r1, 800c244 <_printf_i+0x40>)
 800c240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c244:	0800c29d 	.word	0x0800c29d
 800c248:	0800c2b1 	.word	0x0800c2b1
 800c24c:	0800c22d 	.word	0x0800c22d
 800c250:	0800c22d 	.word	0x0800c22d
 800c254:	0800c22d 	.word	0x0800c22d
 800c258:	0800c22d 	.word	0x0800c22d
 800c25c:	0800c2b1 	.word	0x0800c2b1
 800c260:	0800c22d 	.word	0x0800c22d
 800c264:	0800c22d 	.word	0x0800c22d
 800c268:	0800c22d 	.word	0x0800c22d
 800c26c:	0800c22d 	.word	0x0800c22d
 800c270:	0800c3af 	.word	0x0800c3af
 800c274:	0800c2db 	.word	0x0800c2db
 800c278:	0800c369 	.word	0x0800c369
 800c27c:	0800c22d 	.word	0x0800c22d
 800c280:	0800c22d 	.word	0x0800c22d
 800c284:	0800c3d1 	.word	0x0800c3d1
 800c288:	0800c22d 	.word	0x0800c22d
 800c28c:	0800c2db 	.word	0x0800c2db
 800c290:	0800c22d 	.word	0x0800c22d
 800c294:	0800c22d 	.word	0x0800c22d
 800c298:	0800c371 	.word	0x0800c371
 800c29c:	6833      	ldr	r3, [r6, #0]
 800c29e:	1d1a      	adds	r2, r3, #4
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6032      	str	r2, [r6, #0]
 800c2a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e09c      	b.n	800c3ea <_printf_i+0x1e6>
 800c2b0:	6833      	ldr	r3, [r6, #0]
 800c2b2:	6820      	ldr	r0, [r4, #0]
 800c2b4:	1d19      	adds	r1, r3, #4
 800c2b6:	6031      	str	r1, [r6, #0]
 800c2b8:	0606      	lsls	r6, r0, #24
 800c2ba:	d501      	bpl.n	800c2c0 <_printf_i+0xbc>
 800c2bc:	681d      	ldr	r5, [r3, #0]
 800c2be:	e003      	b.n	800c2c8 <_printf_i+0xc4>
 800c2c0:	0645      	lsls	r5, r0, #25
 800c2c2:	d5fb      	bpl.n	800c2bc <_printf_i+0xb8>
 800c2c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c2c8:	2d00      	cmp	r5, #0
 800c2ca:	da03      	bge.n	800c2d4 <_printf_i+0xd0>
 800c2cc:	232d      	movs	r3, #45	@ 0x2d
 800c2ce:	426d      	negs	r5, r5
 800c2d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2d4:	4858      	ldr	r0, [pc, #352]	@ (800c438 <_printf_i+0x234>)
 800c2d6:	230a      	movs	r3, #10
 800c2d8:	e011      	b.n	800c2fe <_printf_i+0xfa>
 800c2da:	6821      	ldr	r1, [r4, #0]
 800c2dc:	6833      	ldr	r3, [r6, #0]
 800c2de:	0608      	lsls	r0, r1, #24
 800c2e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c2e4:	d402      	bmi.n	800c2ec <_printf_i+0xe8>
 800c2e6:	0649      	lsls	r1, r1, #25
 800c2e8:	bf48      	it	mi
 800c2ea:	b2ad      	uxthmi	r5, r5
 800c2ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800c2ee:	4852      	ldr	r0, [pc, #328]	@ (800c438 <_printf_i+0x234>)
 800c2f0:	6033      	str	r3, [r6, #0]
 800c2f2:	bf14      	ite	ne
 800c2f4:	230a      	movne	r3, #10
 800c2f6:	2308      	moveq	r3, #8
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c2fe:	6866      	ldr	r6, [r4, #4]
 800c300:	60a6      	str	r6, [r4, #8]
 800c302:	2e00      	cmp	r6, #0
 800c304:	db05      	blt.n	800c312 <_printf_i+0x10e>
 800c306:	6821      	ldr	r1, [r4, #0]
 800c308:	432e      	orrs	r6, r5
 800c30a:	f021 0104 	bic.w	r1, r1, #4
 800c30e:	6021      	str	r1, [r4, #0]
 800c310:	d04b      	beq.n	800c3aa <_printf_i+0x1a6>
 800c312:	4616      	mov	r6, r2
 800c314:	fbb5 f1f3 	udiv	r1, r5, r3
 800c318:	fb03 5711 	mls	r7, r3, r1, r5
 800c31c:	5dc7      	ldrb	r7, [r0, r7]
 800c31e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c322:	462f      	mov	r7, r5
 800c324:	42bb      	cmp	r3, r7
 800c326:	460d      	mov	r5, r1
 800c328:	d9f4      	bls.n	800c314 <_printf_i+0x110>
 800c32a:	2b08      	cmp	r3, #8
 800c32c:	d10b      	bne.n	800c346 <_printf_i+0x142>
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	07df      	lsls	r7, r3, #31
 800c332:	d508      	bpl.n	800c346 <_printf_i+0x142>
 800c334:	6923      	ldr	r3, [r4, #16]
 800c336:	6861      	ldr	r1, [r4, #4]
 800c338:	4299      	cmp	r1, r3
 800c33a:	bfde      	ittt	le
 800c33c:	2330      	movle	r3, #48	@ 0x30
 800c33e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c342:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c346:	1b92      	subs	r2, r2, r6
 800c348:	6122      	str	r2, [r4, #16]
 800c34a:	f8cd a000 	str.w	sl, [sp]
 800c34e:	464b      	mov	r3, r9
 800c350:	aa03      	add	r2, sp, #12
 800c352:	4621      	mov	r1, r4
 800c354:	4640      	mov	r0, r8
 800c356:	f7ff fee7 	bl	800c128 <_printf_common>
 800c35a:	3001      	adds	r0, #1
 800c35c:	d14a      	bne.n	800c3f4 <_printf_i+0x1f0>
 800c35e:	f04f 30ff 	mov.w	r0, #4294967295
 800c362:	b004      	add	sp, #16
 800c364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c368:	6823      	ldr	r3, [r4, #0]
 800c36a:	f043 0320 	orr.w	r3, r3, #32
 800c36e:	6023      	str	r3, [r4, #0]
 800c370:	4832      	ldr	r0, [pc, #200]	@ (800c43c <_printf_i+0x238>)
 800c372:	2778      	movs	r7, #120	@ 0x78
 800c374:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c378:	6823      	ldr	r3, [r4, #0]
 800c37a:	6831      	ldr	r1, [r6, #0]
 800c37c:	061f      	lsls	r7, r3, #24
 800c37e:	f851 5b04 	ldr.w	r5, [r1], #4
 800c382:	d402      	bmi.n	800c38a <_printf_i+0x186>
 800c384:	065f      	lsls	r7, r3, #25
 800c386:	bf48      	it	mi
 800c388:	b2ad      	uxthmi	r5, r5
 800c38a:	6031      	str	r1, [r6, #0]
 800c38c:	07d9      	lsls	r1, r3, #31
 800c38e:	bf44      	itt	mi
 800c390:	f043 0320 	orrmi.w	r3, r3, #32
 800c394:	6023      	strmi	r3, [r4, #0]
 800c396:	b11d      	cbz	r5, 800c3a0 <_printf_i+0x19c>
 800c398:	2310      	movs	r3, #16
 800c39a:	e7ad      	b.n	800c2f8 <_printf_i+0xf4>
 800c39c:	4826      	ldr	r0, [pc, #152]	@ (800c438 <_printf_i+0x234>)
 800c39e:	e7e9      	b.n	800c374 <_printf_i+0x170>
 800c3a0:	6823      	ldr	r3, [r4, #0]
 800c3a2:	f023 0320 	bic.w	r3, r3, #32
 800c3a6:	6023      	str	r3, [r4, #0]
 800c3a8:	e7f6      	b.n	800c398 <_printf_i+0x194>
 800c3aa:	4616      	mov	r6, r2
 800c3ac:	e7bd      	b.n	800c32a <_printf_i+0x126>
 800c3ae:	6833      	ldr	r3, [r6, #0]
 800c3b0:	6825      	ldr	r5, [r4, #0]
 800c3b2:	6961      	ldr	r1, [r4, #20]
 800c3b4:	1d18      	adds	r0, r3, #4
 800c3b6:	6030      	str	r0, [r6, #0]
 800c3b8:	062e      	lsls	r6, r5, #24
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	d501      	bpl.n	800c3c2 <_printf_i+0x1be>
 800c3be:	6019      	str	r1, [r3, #0]
 800c3c0:	e002      	b.n	800c3c8 <_printf_i+0x1c4>
 800c3c2:	0668      	lsls	r0, r5, #25
 800c3c4:	d5fb      	bpl.n	800c3be <_printf_i+0x1ba>
 800c3c6:	8019      	strh	r1, [r3, #0]
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	6123      	str	r3, [r4, #16]
 800c3cc:	4616      	mov	r6, r2
 800c3ce:	e7bc      	b.n	800c34a <_printf_i+0x146>
 800c3d0:	6833      	ldr	r3, [r6, #0]
 800c3d2:	1d1a      	adds	r2, r3, #4
 800c3d4:	6032      	str	r2, [r6, #0]
 800c3d6:	681e      	ldr	r6, [r3, #0]
 800c3d8:	6862      	ldr	r2, [r4, #4]
 800c3da:	2100      	movs	r1, #0
 800c3dc:	4630      	mov	r0, r6
 800c3de:	f7f3 ffdf 	bl	80003a0 <memchr>
 800c3e2:	b108      	cbz	r0, 800c3e8 <_printf_i+0x1e4>
 800c3e4:	1b80      	subs	r0, r0, r6
 800c3e6:	6060      	str	r0, [r4, #4]
 800c3e8:	6863      	ldr	r3, [r4, #4]
 800c3ea:	6123      	str	r3, [r4, #16]
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3f2:	e7aa      	b.n	800c34a <_printf_i+0x146>
 800c3f4:	6923      	ldr	r3, [r4, #16]
 800c3f6:	4632      	mov	r2, r6
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	4640      	mov	r0, r8
 800c3fc:	47d0      	blx	sl
 800c3fe:	3001      	adds	r0, #1
 800c400:	d0ad      	beq.n	800c35e <_printf_i+0x15a>
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	079b      	lsls	r3, r3, #30
 800c406:	d413      	bmi.n	800c430 <_printf_i+0x22c>
 800c408:	68e0      	ldr	r0, [r4, #12]
 800c40a:	9b03      	ldr	r3, [sp, #12]
 800c40c:	4298      	cmp	r0, r3
 800c40e:	bfb8      	it	lt
 800c410:	4618      	movlt	r0, r3
 800c412:	e7a6      	b.n	800c362 <_printf_i+0x15e>
 800c414:	2301      	movs	r3, #1
 800c416:	4632      	mov	r2, r6
 800c418:	4649      	mov	r1, r9
 800c41a:	4640      	mov	r0, r8
 800c41c:	47d0      	blx	sl
 800c41e:	3001      	adds	r0, #1
 800c420:	d09d      	beq.n	800c35e <_printf_i+0x15a>
 800c422:	3501      	adds	r5, #1
 800c424:	68e3      	ldr	r3, [r4, #12]
 800c426:	9903      	ldr	r1, [sp, #12]
 800c428:	1a5b      	subs	r3, r3, r1
 800c42a:	42ab      	cmp	r3, r5
 800c42c:	dcf2      	bgt.n	800c414 <_printf_i+0x210>
 800c42e:	e7eb      	b.n	800c408 <_printf_i+0x204>
 800c430:	2500      	movs	r5, #0
 800c432:	f104 0619 	add.w	r6, r4, #25
 800c436:	e7f5      	b.n	800c424 <_printf_i+0x220>
 800c438:	08084298 	.word	0x08084298
 800c43c:	080842a9 	.word	0x080842a9

0800c440 <__swbuf_r>:
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	460e      	mov	r6, r1
 800c444:	4614      	mov	r4, r2
 800c446:	4605      	mov	r5, r0
 800c448:	b118      	cbz	r0, 800c452 <__swbuf_r+0x12>
 800c44a:	6a03      	ldr	r3, [r0, #32]
 800c44c:	b90b      	cbnz	r3, 800c452 <__swbuf_r+0x12>
 800c44e:	f7ff fa17 	bl	800b880 <__sinit>
 800c452:	69a3      	ldr	r3, [r4, #24]
 800c454:	60a3      	str	r3, [r4, #8]
 800c456:	89a3      	ldrh	r3, [r4, #12]
 800c458:	071a      	lsls	r2, r3, #28
 800c45a:	d501      	bpl.n	800c460 <__swbuf_r+0x20>
 800c45c:	6923      	ldr	r3, [r4, #16]
 800c45e:	b943      	cbnz	r3, 800c472 <__swbuf_r+0x32>
 800c460:	4621      	mov	r1, r4
 800c462:	4628      	mov	r0, r5
 800c464:	f000 f82a 	bl	800c4bc <__swsetup_r>
 800c468:	b118      	cbz	r0, 800c472 <__swbuf_r+0x32>
 800c46a:	f04f 37ff 	mov.w	r7, #4294967295
 800c46e:	4638      	mov	r0, r7
 800c470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	6922      	ldr	r2, [r4, #16]
 800c476:	1a98      	subs	r0, r3, r2
 800c478:	6963      	ldr	r3, [r4, #20]
 800c47a:	b2f6      	uxtb	r6, r6
 800c47c:	4283      	cmp	r3, r0
 800c47e:	4637      	mov	r7, r6
 800c480:	dc05      	bgt.n	800c48e <__swbuf_r+0x4e>
 800c482:	4621      	mov	r1, r4
 800c484:	4628      	mov	r0, r5
 800c486:	f7ff fcbd 	bl	800be04 <_fflush_r>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	d1ed      	bne.n	800c46a <__swbuf_r+0x2a>
 800c48e:	68a3      	ldr	r3, [r4, #8]
 800c490:	3b01      	subs	r3, #1
 800c492:	60a3      	str	r3, [r4, #8]
 800c494:	6823      	ldr	r3, [r4, #0]
 800c496:	1c5a      	adds	r2, r3, #1
 800c498:	6022      	str	r2, [r4, #0]
 800c49a:	701e      	strb	r6, [r3, #0]
 800c49c:	6962      	ldr	r2, [r4, #20]
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d004      	beq.n	800c4ae <__swbuf_r+0x6e>
 800c4a4:	89a3      	ldrh	r3, [r4, #12]
 800c4a6:	07db      	lsls	r3, r3, #31
 800c4a8:	d5e1      	bpl.n	800c46e <__swbuf_r+0x2e>
 800c4aa:	2e0a      	cmp	r6, #10
 800c4ac:	d1df      	bne.n	800c46e <__swbuf_r+0x2e>
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	f7ff fca7 	bl	800be04 <_fflush_r>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	d0d9      	beq.n	800c46e <__swbuf_r+0x2e>
 800c4ba:	e7d6      	b.n	800c46a <__swbuf_r+0x2a>

0800c4bc <__swsetup_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4b29      	ldr	r3, [pc, #164]	@ (800c564 <__swsetup_r+0xa8>)
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	6818      	ldr	r0, [r3, #0]
 800c4c4:	460c      	mov	r4, r1
 800c4c6:	b118      	cbz	r0, 800c4d0 <__swsetup_r+0x14>
 800c4c8:	6a03      	ldr	r3, [r0, #32]
 800c4ca:	b90b      	cbnz	r3, 800c4d0 <__swsetup_r+0x14>
 800c4cc:	f7ff f9d8 	bl	800b880 <__sinit>
 800c4d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d4:	0719      	lsls	r1, r3, #28
 800c4d6:	d422      	bmi.n	800c51e <__swsetup_r+0x62>
 800c4d8:	06da      	lsls	r2, r3, #27
 800c4da:	d407      	bmi.n	800c4ec <__swsetup_r+0x30>
 800c4dc:	2209      	movs	r2, #9
 800c4de:	602a      	str	r2, [r5, #0]
 800c4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4e4:	81a3      	strh	r3, [r4, #12]
 800c4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ea:	e033      	b.n	800c554 <__swsetup_r+0x98>
 800c4ec:	0758      	lsls	r0, r3, #29
 800c4ee:	d512      	bpl.n	800c516 <__swsetup_r+0x5a>
 800c4f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4f2:	b141      	cbz	r1, 800c506 <__swsetup_r+0x4a>
 800c4f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4f8:	4299      	cmp	r1, r3
 800c4fa:	d002      	beq.n	800c502 <__swsetup_r+0x46>
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f7ff fafd 	bl	800bafc <_free_r>
 800c502:	2300      	movs	r3, #0
 800c504:	6363      	str	r3, [r4, #52]	@ 0x34
 800c506:	89a3      	ldrh	r3, [r4, #12]
 800c508:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c50c:	81a3      	strh	r3, [r4, #12]
 800c50e:	2300      	movs	r3, #0
 800c510:	6063      	str	r3, [r4, #4]
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	89a3      	ldrh	r3, [r4, #12]
 800c518:	f043 0308 	orr.w	r3, r3, #8
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	6923      	ldr	r3, [r4, #16]
 800c520:	b94b      	cbnz	r3, 800c536 <__swsetup_r+0x7a>
 800c522:	89a3      	ldrh	r3, [r4, #12]
 800c524:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c52c:	d003      	beq.n	800c536 <__swsetup_r+0x7a>
 800c52e:	4621      	mov	r1, r4
 800c530:	4628      	mov	r0, r5
 800c532:	f000 f883 	bl	800c63c <__smakebuf_r>
 800c536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c53a:	f013 0201 	ands.w	r2, r3, #1
 800c53e:	d00a      	beq.n	800c556 <__swsetup_r+0x9a>
 800c540:	2200      	movs	r2, #0
 800c542:	60a2      	str	r2, [r4, #8]
 800c544:	6962      	ldr	r2, [r4, #20]
 800c546:	4252      	negs	r2, r2
 800c548:	61a2      	str	r2, [r4, #24]
 800c54a:	6922      	ldr	r2, [r4, #16]
 800c54c:	b942      	cbnz	r2, 800c560 <__swsetup_r+0xa4>
 800c54e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c552:	d1c5      	bne.n	800c4e0 <__swsetup_r+0x24>
 800c554:	bd38      	pop	{r3, r4, r5, pc}
 800c556:	0799      	lsls	r1, r3, #30
 800c558:	bf58      	it	pl
 800c55a:	6962      	ldrpl	r2, [r4, #20]
 800c55c:	60a2      	str	r2, [r4, #8]
 800c55e:	e7f4      	b.n	800c54a <__swsetup_r+0x8e>
 800c560:	2000      	movs	r0, #0
 800c562:	e7f7      	b.n	800c554 <__swsetup_r+0x98>
 800c564:	24000038 	.word	0x24000038

0800c568 <_raise_r>:
 800c568:	291f      	cmp	r1, #31
 800c56a:	b538      	push	{r3, r4, r5, lr}
 800c56c:	4605      	mov	r5, r0
 800c56e:	460c      	mov	r4, r1
 800c570:	d904      	bls.n	800c57c <_raise_r+0x14>
 800c572:	2316      	movs	r3, #22
 800c574:	6003      	str	r3, [r0, #0]
 800c576:	f04f 30ff 	mov.w	r0, #4294967295
 800c57a:	bd38      	pop	{r3, r4, r5, pc}
 800c57c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c57e:	b112      	cbz	r2, 800c586 <_raise_r+0x1e>
 800c580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c584:	b94b      	cbnz	r3, 800c59a <_raise_r+0x32>
 800c586:	4628      	mov	r0, r5
 800c588:	f000 f830 	bl	800c5ec <_getpid_r>
 800c58c:	4622      	mov	r2, r4
 800c58e:	4601      	mov	r1, r0
 800c590:	4628      	mov	r0, r5
 800c592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c596:	f000 b817 	b.w	800c5c8 <_kill_r>
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d00a      	beq.n	800c5b4 <_raise_r+0x4c>
 800c59e:	1c59      	adds	r1, r3, #1
 800c5a0:	d103      	bne.n	800c5aa <_raise_r+0x42>
 800c5a2:	2316      	movs	r3, #22
 800c5a4:	6003      	str	r3, [r0, #0]
 800c5a6:	2001      	movs	r0, #1
 800c5a8:	e7e7      	b.n	800c57a <_raise_r+0x12>
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	4798      	blx	r3
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	e7e0      	b.n	800c57a <_raise_r+0x12>

0800c5b8 <raise>:
 800c5b8:	4b02      	ldr	r3, [pc, #8]	@ (800c5c4 <raise+0xc>)
 800c5ba:	4601      	mov	r1, r0
 800c5bc:	6818      	ldr	r0, [r3, #0]
 800c5be:	f7ff bfd3 	b.w	800c568 <_raise_r>
 800c5c2:	bf00      	nop
 800c5c4:	24000038 	.word	0x24000038

0800c5c8 <_kill_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4d07      	ldr	r5, [pc, #28]	@ (800c5e8 <_kill_r+0x20>)
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	4611      	mov	r1, r2
 800c5d4:	602b      	str	r3, [r5, #0]
 800c5d6:	f7f6 ff59 	bl	800348c <_kill>
 800c5da:	1c43      	adds	r3, r0, #1
 800c5dc:	d102      	bne.n	800c5e4 <_kill_r+0x1c>
 800c5de:	682b      	ldr	r3, [r5, #0]
 800c5e0:	b103      	cbz	r3, 800c5e4 <_kill_r+0x1c>
 800c5e2:	6023      	str	r3, [r4, #0]
 800c5e4:	bd38      	pop	{r3, r4, r5, pc}
 800c5e6:	bf00      	nop
 800c5e8:	2406f73c 	.word	0x2406f73c

0800c5ec <_getpid_r>:
 800c5ec:	f7f6 bf4c 	b.w	8003488 <_getpid>

0800c5f0 <__swhatbuf_r>:
 800c5f0:	b570      	push	{r4, r5, r6, lr}
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f8:	2900      	cmp	r1, #0
 800c5fa:	b096      	sub	sp, #88	@ 0x58
 800c5fc:	4615      	mov	r5, r2
 800c5fe:	461e      	mov	r6, r3
 800c600:	da0d      	bge.n	800c61e <__swhatbuf_r+0x2e>
 800c602:	89a3      	ldrh	r3, [r4, #12]
 800c604:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c608:	f04f 0100 	mov.w	r1, #0
 800c60c:	bf14      	ite	ne
 800c60e:	2340      	movne	r3, #64	@ 0x40
 800c610:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c614:	2000      	movs	r0, #0
 800c616:	6031      	str	r1, [r6, #0]
 800c618:	602b      	str	r3, [r5, #0]
 800c61a:	b016      	add	sp, #88	@ 0x58
 800c61c:	bd70      	pop	{r4, r5, r6, pc}
 800c61e:	466a      	mov	r2, sp
 800c620:	f000 f848 	bl	800c6b4 <_fstat_r>
 800c624:	2800      	cmp	r0, #0
 800c626:	dbec      	blt.n	800c602 <__swhatbuf_r+0x12>
 800c628:	9901      	ldr	r1, [sp, #4]
 800c62a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c62e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c632:	4259      	negs	r1, r3
 800c634:	4159      	adcs	r1, r3
 800c636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c63a:	e7eb      	b.n	800c614 <__swhatbuf_r+0x24>

0800c63c <__smakebuf_r>:
 800c63c:	898b      	ldrh	r3, [r1, #12]
 800c63e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c640:	079d      	lsls	r5, r3, #30
 800c642:	4606      	mov	r6, r0
 800c644:	460c      	mov	r4, r1
 800c646:	d507      	bpl.n	800c658 <__smakebuf_r+0x1c>
 800c648:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c64c:	6023      	str	r3, [r4, #0]
 800c64e:	6123      	str	r3, [r4, #16]
 800c650:	2301      	movs	r3, #1
 800c652:	6163      	str	r3, [r4, #20]
 800c654:	b003      	add	sp, #12
 800c656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c658:	ab01      	add	r3, sp, #4
 800c65a:	466a      	mov	r2, sp
 800c65c:	f7ff ffc8 	bl	800c5f0 <__swhatbuf_r>
 800c660:	9f00      	ldr	r7, [sp, #0]
 800c662:	4605      	mov	r5, r0
 800c664:	4639      	mov	r1, r7
 800c666:	4630      	mov	r0, r6
 800c668:	f7ff fabc 	bl	800bbe4 <_malloc_r>
 800c66c:	b948      	cbnz	r0, 800c682 <__smakebuf_r+0x46>
 800c66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c672:	059a      	lsls	r2, r3, #22
 800c674:	d4ee      	bmi.n	800c654 <__smakebuf_r+0x18>
 800c676:	f023 0303 	bic.w	r3, r3, #3
 800c67a:	f043 0302 	orr.w	r3, r3, #2
 800c67e:	81a3      	strh	r3, [r4, #12]
 800c680:	e7e2      	b.n	800c648 <__smakebuf_r+0xc>
 800c682:	89a3      	ldrh	r3, [r4, #12]
 800c684:	6020      	str	r0, [r4, #0]
 800c686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c68a:	81a3      	strh	r3, [r4, #12]
 800c68c:	9b01      	ldr	r3, [sp, #4]
 800c68e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c692:	b15b      	cbz	r3, 800c6ac <__smakebuf_r+0x70>
 800c694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c698:	4630      	mov	r0, r6
 800c69a:	f000 f81d 	bl	800c6d8 <_isatty_r>
 800c69e:	b128      	cbz	r0, 800c6ac <__smakebuf_r+0x70>
 800c6a0:	89a3      	ldrh	r3, [r4, #12]
 800c6a2:	f023 0303 	bic.w	r3, r3, #3
 800c6a6:	f043 0301 	orr.w	r3, r3, #1
 800c6aa:	81a3      	strh	r3, [r4, #12]
 800c6ac:	89a3      	ldrh	r3, [r4, #12]
 800c6ae:	431d      	orrs	r5, r3
 800c6b0:	81a5      	strh	r5, [r4, #12]
 800c6b2:	e7cf      	b.n	800c654 <__smakebuf_r+0x18>

0800c6b4 <_fstat_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	4d07      	ldr	r5, [pc, #28]	@ (800c6d4 <_fstat_r+0x20>)
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	4608      	mov	r0, r1
 800c6be:	4611      	mov	r1, r2
 800c6c0:	602b      	str	r3, [r5, #0]
 800c6c2:	f7f6 ff13 	bl	80034ec <_fstat>
 800c6c6:	1c43      	adds	r3, r0, #1
 800c6c8:	d102      	bne.n	800c6d0 <_fstat_r+0x1c>
 800c6ca:	682b      	ldr	r3, [r5, #0]
 800c6cc:	b103      	cbz	r3, 800c6d0 <_fstat_r+0x1c>
 800c6ce:	6023      	str	r3, [r4, #0]
 800c6d0:	bd38      	pop	{r3, r4, r5, pc}
 800c6d2:	bf00      	nop
 800c6d4:	2406f73c 	.word	0x2406f73c

0800c6d8 <_isatty_r>:
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	4d06      	ldr	r5, [pc, #24]	@ (800c6f4 <_isatty_r+0x1c>)
 800c6dc:	2300      	movs	r3, #0
 800c6de:	4604      	mov	r4, r0
 800c6e0:	4608      	mov	r0, r1
 800c6e2:	602b      	str	r3, [r5, #0]
 800c6e4:	f7f6 ff08 	bl	80034f8 <_isatty>
 800c6e8:	1c43      	adds	r3, r0, #1
 800c6ea:	d102      	bne.n	800c6f2 <_isatty_r+0x1a>
 800c6ec:	682b      	ldr	r3, [r5, #0]
 800c6ee:	b103      	cbz	r3, 800c6f2 <_isatty_r+0x1a>
 800c6f0:	6023      	str	r3, [r4, #0]
 800c6f2:	bd38      	pop	{r3, r4, r5, pc}
 800c6f4:	2406f73c 	.word	0x2406f73c

0800c6f8 <tanhf>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	ee10 5a10 	vmov	r5, s0
 800c6fe:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c702:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c706:	ed2d 8b02 	vpush	{d8}
 800c70a:	eef0 7a40 	vmov.f32	s15, s0
 800c70e:	d30f      	bcc.n	800c730 <tanhf+0x38>
 800c710:	4b2a      	ldr	r3, [pc, #168]	@ (800c7bc <tanhf+0xc4>)
 800c712:	edd3 6a00 	vldr	s13, [r3]
 800c716:	ed93 7a00 	vldr	s14, [r3]
 800c71a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800c71e:	2d00      	cmp	r5, #0
 800c720:	bfac      	ite	ge
 800c722:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800c726:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800c72a:	ecbd 8b02 	vpop	{d8}
 800c72e:	bd38      	pop	{r3, r4, r5, pc}
 800c730:	4a23      	ldr	r2, [pc, #140]	@ (800c7c0 <tanhf+0xc8>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d839      	bhi.n	800c7aa <tanhf+0xb2>
 800c736:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 800c73a:	d207      	bcs.n	800c74c <tanhf+0x54>
 800c73c:	4b1f      	ldr	r3, [pc, #124]	@ (800c7bc <tanhf+0xc4>)
 800c73e:	ed93 0a00 	vldr	s0, [r3]
 800c742:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c746:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c74a:	e7ee      	b.n	800c72a <tanhf+0x32>
 800c74c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800c750:	4c1c      	ldr	r4, [pc, #112]	@ (800c7c4 <tanhf+0xcc>)
 800c752:	d319      	bcc.n	800c788 <tanhf+0x90>
 800c754:	f000 fa53 	bl	800cbfe <fabsf>
 800c758:	edd4 7a00 	vldr	s15, [r4]
 800c75c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c760:	f000 f834 	bl	800c7cc <expm1f>
 800c764:	4b15      	ldr	r3, [pc, #84]	@ (800c7bc <tanhf+0xc4>)
 800c766:	edd3 7a00 	vldr	s15, [r3]
 800c76a:	ed94 6a00 	vldr	s12, [r4]
 800c76e:	ed94 7a00 	vldr	s14, [r4]
 800c772:	ee37 7a00 	vadd.f32	s14, s14, s0
 800c776:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800c77a:	ee37 0ae6 	vsub.f32	s0, s15, s13
 800c77e:	2d00      	cmp	r5, #0
 800c780:	bfb8      	it	lt
 800c782:	eeb1 0a40 	vneglt.f32	s0, s0
 800c786:	e7d0      	b.n	800c72a <tanhf+0x32>
 800c788:	ed94 8a00 	vldr	s16, [r4]
 800c78c:	f000 fa37 	bl	800cbfe <fabsf>
 800c790:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800c794:	f000 f81a 	bl	800c7cc <expm1f>
 800c798:	edd4 7a00 	vldr	s15, [r4]
 800c79c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c7a0:	eeb1 7a40 	vneg.f32	s14, s0
 800c7a4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c7a8:	e7e9      	b.n	800c77e <tanhf+0x86>
 800c7aa:	4b04      	ldr	r3, [pc, #16]	@ (800c7bc <tanhf+0xc4>)
 800c7ac:	ed93 0a00 	vldr	s0, [r3]
 800c7b0:	4b05      	ldr	r3, [pc, #20]	@ (800c7c8 <tanhf+0xd0>)
 800c7b2:	edd3 7a00 	vldr	s15, [r3]
 800c7b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c7ba:	e7e0      	b.n	800c77e <tanhf+0x86>
 800c7bc:	080843c4 	.word	0x080843c4
 800c7c0:	41afffff 	.word	0x41afffff
 800c7c4:	080843c0 	.word	0x080843c0
 800c7c8:	080843bc 	.word	0x080843bc

0800c7cc <expm1f>:
 800c7cc:	ee10 3a10 	vmov	r3, s0
 800c7d0:	4a83      	ldr	r2, [pc, #524]	@ (800c9e0 <expm1f+0x214>)
 800c7d2:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 800c7d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d91e      	bls.n	800c81c <expm1f+0x50>
 800c7de:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c7e2:	d902      	bls.n	800c7ea <expm1f+0x1e>
 800c7e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7e8:	4770      	bx	lr
 800c7ea:	d105      	bne.n	800c7f8 <expm1f+0x2c>
 800c7ec:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	fe00 0a27 	vseleq.f32	s0, s0, s15
 800c7f6:	4770      	bx	lr
 800c7f8:	b920      	cbnz	r0, 800c804 <expm1f+0x38>
 800c7fa:	4a7a      	ldr	r2, [pc, #488]	@ (800c9e4 <expm1f+0x218>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d963      	bls.n	800c8c8 <expm1f+0xfc>
 800c800:	f000 b9e8 	b.w	800cbd4 <__math_oflowf>
 800c804:	eddf 7a78 	vldr	s15, [pc, #480]	@ 800c9e8 <expm1f+0x21c>
 800c808:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c80c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c814:	d551      	bpl.n	800c8ba <expm1f+0xee>
 800c816:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800c81a:	4770      	bx	lr
 800c81c:	4a73      	ldr	r2, [pc, #460]	@ (800c9ec <expm1f+0x220>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d972      	bls.n	800c908 <expm1f+0x13c>
 800c822:	4a73      	ldr	r2, [pc, #460]	@ (800c9f0 <expm1f+0x224>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d868      	bhi.n	800c8fa <expm1f+0x12e>
 800c828:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800c9f4 <expm1f+0x228>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d13d      	bne.n	800c8ac <expm1f+0xe0>
 800c830:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c834:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800c9f8 <expm1f+0x22c>
 800c838:	2301      	movs	r3, #1
 800c83a:	ee37 0a66 	vsub.f32	s0, s14, s13
 800c83e:	ee77 7a40 	vsub.f32	s15, s14, s0
 800c842:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c846:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800c84a:	ee20 4a25 	vmul.f32	s8, s0, s11
 800c84e:	ed9f 6a6b 	vldr	s12, [pc, #428]	@ 800c9fc <expm1f+0x230>
 800c852:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 800ca00 <expm1f+0x234>
 800c856:	ed9f 5a6b 	vldr	s10, [pc, #428]	@ 800ca04 <expm1f+0x238>
 800c85a:	ee20 7a04 	vmul.f32	s14, s0, s8
 800c85e:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 800c862:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c866:	ed9f 6a68 	vldr	s12, [pc, #416]	@ 800ca08 <expm1f+0x23c>
 800c86a:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c86e:	eddf 6a67 	vldr	s13, [pc, #412]	@ 800ca0c <expm1f+0x240>
 800c872:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c876:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800c87a:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c87e:	eef0 6a46 	vmov.f32	s13, s12
 800c882:	eee5 6a07 	vfma.f32	s13, s10, s14
 800c886:	eee4 4a66 	vfms.f32	s9, s8, s13
 800c88a:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 800c88e:	eea0 4a64 	vfms.f32	s8, s0, s9
 800c892:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800c896:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800c89a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d140      	bne.n	800c924 <expm1f+0x158>
 800c8a2:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800c8a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c8aa:	4770      	bx	lr
 800c8ac:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c8b0:	eddf 6a57 	vldr	s13, [pc, #348]	@ 800ca10 <expm1f+0x244>
 800c8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b8:	e7bf      	b.n	800c83a <expm1f+0x6e>
 800c8ba:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800ca14 <expm1f+0x248>
 800c8be:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c8c2:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800c8c6:	e005      	b.n	800c8d4 <expm1f+0x108>
 800c8c8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800ca14 <expm1f+0x248>
 800c8cc:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c8d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c8d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8d8:	eeb0 7a40 	vmov.f32	s14, s0
 800c8dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c8e4:	ee17 3a90 	vmov	r3, s15
 800c8e8:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800c9f4 <expm1f+0x228>
 800c8ec:	eea6 7ae7 	vfms.f32	s14, s13, s15
 800c8f0:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800c9f8 <expm1f+0x22c>
 800c8f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c8f8:	e79f      	b.n	800c83a <expm1f+0x6e>
 800c8fa:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800ca14 <expm1f+0x248>
 800c8fe:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c902:	2800      	cmp	r0, #0
 800c904:	d0e4      	beq.n	800c8d0 <expm1f+0x104>
 800c906:	e7dc      	b.n	800c8c2 <expm1f+0xf6>
 800c908:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 800c90c:	d208      	bcs.n	800c920 <expm1f+0x154>
 800c90e:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800ca18 <expm1f+0x24c>
 800c912:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c916:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800c91a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c91e:	4770      	bx	lr
 800c920:	2300      	movs	r3, #0
 800c922:	e790      	b.n	800c846 <expm1f+0x7a>
 800c924:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800c92e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c932:	d106      	bne.n	800c942 <expm1f+0x176>
 800c934:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c938:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 800c93c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800c940:	4770      	bx	lr
 800c942:	2b01      	cmp	r3, #1
 800c944:	d118      	bne.n	800c978 <expm1f+0x1ac>
 800c946:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 800c94a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c952:	bf5b      	ittet	pl
 800c954:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800c958:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 800c95c:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 800c960:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800c964:	bf43      	ittte	mi
 800c966:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 800c96a:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 800c96e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800c972:	eeb0 0a46 	vmovpl.f32	s0, s12
 800c976:	4770      	bx	lr
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	2a39      	cmp	r2, #57	@ 0x39
 800c97c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800c980:	d90b      	bls.n	800c99a <expm1f+0x1ce>
 800c982:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c986:	ee76 7a67 	vsub.f32	s15, s12, s15
 800c98a:	ee17 3a90 	vmov	r3, s15
 800c98e:	4419      	add	r1, r3
 800c990:	ee07 1a90 	vmov	s15, r1
 800c994:	ee37 0ac6 	vsub.f32	s0, s15, s12
 800c998:	4770      	bx	lr
 800c99a:	2b16      	cmp	r3, #22
 800c99c:	dc11      	bgt.n	800c9c2 <expm1f+0x1f6>
 800c99e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c9a2:	fa42 f303 	asr.w	r3, r2, r3
 800c9a6:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 800c9aa:	ee07 3a10 	vmov	s14, r3
 800c9ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c9b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9b6:	ee17 3a90 	vmov	r3, s15
 800c9ba:	440b      	add	r3, r1
 800c9bc:	ee00 3a10 	vmov	s0, r3
 800c9c0:	4770      	bx	lr
 800c9c2:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800c9c6:	05db      	lsls	r3, r3, #23
 800c9c8:	ee07 3a10 	vmov	s14, r3
 800c9cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9d0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c9d4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c9d8:	ee17 3a90 	vmov	r3, s15
 800c9dc:	e7ed      	b.n	800c9ba <expm1f+0x1ee>
 800c9de:	bf00      	nop
 800c9e0:	4195b843 	.word	0x4195b843
 800c9e4:	42b17217 	.word	0x42b17217
 800c9e8:	0da24260 	.word	0x0da24260
 800c9ec:	3eb17218 	.word	0x3eb17218
 800c9f0:	3f851591 	.word	0x3f851591
 800c9f4:	3f317180 	.word	0x3f317180
 800c9f8:	3717f7d1 	.word	0x3717f7d1
 800c9fc:	b457edbb 	.word	0xb457edbb
 800ca00:	36867e54 	.word	0x36867e54
 800ca04:	bd088889 	.word	0xbd088889
 800ca08:	b8a670cd 	.word	0xb8a670cd
 800ca0c:	3ad00d01 	.word	0x3ad00d01
 800ca10:	b717f7d1 	.word	0xb717f7d1
 800ca14:	3fb8aa3b 	.word	0x3fb8aa3b
 800ca18:	7149f2ca 	.word	0x7149f2ca

0800ca1c <sinf_poly>:
 800ca1c:	07cb      	lsls	r3, r1, #31
 800ca1e:	d412      	bmi.n	800ca46 <sinf_poly+0x2a>
 800ca20:	ee21 5b00 	vmul.f64	d5, d1, d0
 800ca24:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800ca28:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800ca2c:	eea6 7b01 	vfma.f64	d7, d6, d1
 800ca30:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800ca34:	ee21 1b05 	vmul.f64	d1, d1, d5
 800ca38:	eea6 0b05 	vfma.f64	d0, d6, d5
 800ca3c:	eea7 0b01 	vfma.f64	d0, d7, d1
 800ca40:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ca44:	4770      	bx	lr
 800ca46:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800ca4a:	ee21 5b01 	vmul.f64	d5, d1, d1
 800ca4e:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800ca52:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800ca56:	eea1 7b06 	vfma.f64	d7, d1, d6
 800ca5a:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800ca5e:	eea1 0b06 	vfma.f64	d0, d1, d6
 800ca62:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800ca66:	ee21 1b05 	vmul.f64	d1, d1, d5
 800ca6a:	eea5 0b06 	vfma.f64	d0, d5, d6
 800ca6e:	e7e5      	b.n	800ca3c <sinf_poly+0x20>

0800ca70 <sinf>:
 800ca70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca72:	ee10 4a10 	vmov	r4, s0
 800ca76:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800ca7a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800ca7e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800ca82:	eef0 7a40 	vmov.f32	s15, s0
 800ca86:	d218      	bcs.n	800caba <sinf+0x4a>
 800ca88:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ca8c:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800ca90:	d20a      	bcs.n	800caa8 <sinf+0x38>
 800ca92:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800ca96:	d103      	bne.n	800caa0 <sinf+0x30>
 800ca98:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800ca9c:	ed8d 1a01 	vstr	s2, [sp, #4]
 800caa0:	eeb0 0a67 	vmov.f32	s0, s15
 800caa4:	b003      	add	sp, #12
 800caa6:	bd30      	pop	{r4, r5, pc}
 800caa8:	483b      	ldr	r0, [pc, #236]	@ (800cb98 <sinf+0x128>)
 800caaa:	eeb0 0b46 	vmov.f64	d0, d6
 800caae:	2100      	movs	r1, #0
 800cab0:	b003      	add	sp, #12
 800cab2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cab6:	f7ff bfb1 	b.w	800ca1c <sinf_poly>
 800caba:	f240 422e 	movw	r2, #1070	@ 0x42e
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d824      	bhi.n	800cb0c <sinf+0x9c>
 800cac2:	4b35      	ldr	r3, [pc, #212]	@ (800cb98 <sinf+0x128>)
 800cac4:	ed93 7b08 	vldr	d7, [r3, #32]
 800cac8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cacc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800cad0:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800cad4:	ee17 1a90 	vmov	r1, s15
 800cad8:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800cadc:	1609      	asrs	r1, r1, #24
 800cade:	ee07 1a90 	vmov	s15, r1
 800cae2:	f001 0203 	and.w	r2, r1, #3
 800cae6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800caea:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800caee:	ed92 0b00 	vldr	d0, [r2]
 800caf2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800caf6:	f011 0f02 	tst.w	r1, #2
 800cafa:	eea5 6b47 	vfms.f64	d6, d5, d7
 800cafe:	bf08      	it	eq
 800cb00:	4618      	moveq	r0, r3
 800cb02:	ee26 1b06 	vmul.f64	d1, d6, d6
 800cb06:	ee20 0b06 	vmul.f64	d0, d0, d6
 800cb0a:	e7d1      	b.n	800cab0 <sinf+0x40>
 800cb0c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800cb10:	d237      	bcs.n	800cb82 <sinf+0x112>
 800cb12:	4922      	ldr	r1, [pc, #136]	@ (800cb9c <sinf+0x12c>)
 800cb14:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800cb18:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800cb1c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800cb20:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800cb24:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800cb28:	6a10      	ldr	r0, [r2, #32]
 800cb2a:	6912      	ldr	r2, [r2, #16]
 800cb2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cb30:	40ab      	lsls	r3, r5
 800cb32:	fba0 5003 	umull	r5, r0, r0, r3
 800cb36:	4359      	muls	r1, r3
 800cb38:	fbe3 0102 	umlal	r0, r1, r3, r2
 800cb3c:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800cb40:	0f9d      	lsrs	r5, r3, #30
 800cb42:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800cb46:	1ac9      	subs	r1, r1, r3
 800cb48:	f7f3 fe08 	bl	800075c <__aeabi_l2d>
 800cb4c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800cb50:	4b11      	ldr	r3, [pc, #68]	@ (800cb98 <sinf+0x128>)
 800cb52:	f004 0203 	and.w	r2, r4, #3
 800cb56:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800cb5a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 800cb90 <sinf+0x120>
 800cb5e:	ed92 0b00 	vldr	d0, [r2]
 800cb62:	ec41 0b17 	vmov	d7, r0, r1
 800cb66:	f014 0f02 	tst.w	r4, #2
 800cb6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb6e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800cb72:	4629      	mov	r1, r5
 800cb74:	bf08      	it	eq
 800cb76:	4618      	moveq	r0, r3
 800cb78:	ee27 1b07 	vmul.f64	d1, d7, d7
 800cb7c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cb80:	e796      	b.n	800cab0 <sinf+0x40>
 800cb82:	b003      	add	sp, #12
 800cb84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb88:	f000 b82a 	b.w	800cbe0 <__math_invalidf>
 800cb8c:	f3af 8000 	nop.w
 800cb90:	54442d18 	.word	0x54442d18
 800cb94:	3c1921fb 	.word	0x3c1921fb
 800cb98:	08084428 	.word	0x08084428
 800cb9c:	080843c8 	.word	0x080843c8

0800cba0 <with_errnof>:
 800cba0:	b510      	push	{r4, lr}
 800cba2:	ed2d 8b02 	vpush	{d8}
 800cba6:	eeb0 8a40 	vmov.f32	s16, s0
 800cbaa:	4604      	mov	r4, r0
 800cbac:	f7fe ff5a 	bl	800ba64 <__errno>
 800cbb0:	eeb0 0a48 	vmov.f32	s0, s16
 800cbb4:	ecbd 8b02 	vpop	{d8}
 800cbb8:	6004      	str	r4, [r0, #0]
 800cbba:	bd10      	pop	{r4, pc}

0800cbbc <xflowf>:
 800cbbc:	b130      	cbz	r0, 800cbcc <xflowf+0x10>
 800cbbe:	eef1 7a40 	vneg.f32	s15, s0
 800cbc2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cbc6:	2022      	movs	r0, #34	@ 0x22
 800cbc8:	f7ff bfea 	b.w	800cba0 <with_errnof>
 800cbcc:	eef0 7a40 	vmov.f32	s15, s0
 800cbd0:	e7f7      	b.n	800cbc2 <xflowf+0x6>
	...

0800cbd4 <__math_oflowf>:
 800cbd4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cbdc <__math_oflowf+0x8>
 800cbd8:	f7ff bff0 	b.w	800cbbc <xflowf>
 800cbdc:	70000000 	.word	0x70000000

0800cbe0 <__math_invalidf>:
 800cbe0:	eef0 7a40 	vmov.f32	s15, s0
 800cbe4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cbe8:	eef4 7a67 	vcmp.f32	s15, s15
 800cbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800cbf4:	d602      	bvs.n	800cbfc <__math_invalidf+0x1c>
 800cbf6:	2021      	movs	r0, #33	@ 0x21
 800cbf8:	f7ff bfd2 	b.w	800cba0 <with_errnof>
 800cbfc:	4770      	bx	lr

0800cbfe <fabsf>:
 800cbfe:	ee10 3a10 	vmov	r3, s0
 800cc02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc06:	ee00 3a10 	vmov	s0, r3
 800cc0a:	4770      	bx	lr

0800cc0c <_init>:
 800cc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0e:	bf00      	nop
 800cc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc12:	bc08      	pop	{r3}
 800cc14:	469e      	mov	lr, r3
 800cc16:	4770      	bx	lr

0800cc18 <_fini>:
 800cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1a:	bf00      	nop
 800cc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc1e:	bc08      	pop	{r3}
 800cc20:	469e      	mov	lr, r3
 800cc22:	4770      	bx	lr
