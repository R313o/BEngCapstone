
STM32H743-DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068dc  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006f5b0  08006b80  08006b80  00007b80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08076130  08076130  00077130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08076134  08076134  00077134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000200  24000000  08076138  00078000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .dtcm_bss     00000000  20000000  20000000  00078200  2**0
                  CONTENTS
  7 .dtcm_data    00000000  20000000  20000000  00078200  2**0
                  CONTENTS
  8 .bss          0006d3d0  24000200  24000200  00078200  2**5
                  ALLOC
  9 ._user_heap_stack 00000600  2406d5d0  2406d5d0  00078200  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00078200  2**0
                  CONTENTS, READONLY
 11 .debug_info   00021c22  00000000  00000000  0007822e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000405c  00000000  00000000  00099e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000f8a8  00000000  00000000  0009deac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  000ad758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c37  00000000  00000000  000ae8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a49f  00000000  00000000  000b0517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024906  00000000  00000000  000ea9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00174cdf  00000000  00000000  0010f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00283f9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000366c  00000000  00000000  00284050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  002876bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000723  00000000  00000000  0028772e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000030  00000000  00000000  00287e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000200 	.word	0x24000200
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006b5c 	.word	0x08006b5c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000204 	.word	0x24000204
 80002d4:	08006b5c 	.word	0x08006b5c

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	@ 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <chorusInit>:
 *      Author: spencer
 */

#include "chorus.h"

void chorusInit(chorus *c, uint32_t baseDelay, float32_t wetness, float32_t depth, float32_t rate, uint32_t frameLength, uint32_t sampleRate) {
 8000650:	b538      	push	{r3, r4, r5, lr}
 8000652:	ed2d 8b02 	vpush	{d8}
    c->baseDelay = baseDelay;
    c->wetness = wetness;
    c->depth = depth;
    c->rate = rate;
    c->G_fb = 0.5f;
    c->G_ff = 1.0f;
 8000656:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0

    // Compute a suitable delay buffer size:
    uint32_t size1 = frameLength * 5;
    uint32_t size2 = (uint32_t)(ceilf((float32_t)baseDelay * (1.0f + depth)) * 2);
 800065a:	ee07 1a90 	vmov	s15, r1
void chorusInit(chorus *c, uint32_t baseDelay, float32_t wetness, float32_t depth, float32_t rate, uint32_t frameLength, uint32_t sampleRate) {
 800065e:	4694      	mov	ip, r2
    uint32_t size1 = frameLength * 5;
 8000660:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    uint32_t size2 = (uint32_t)(ceilf((float32_t)baseDelay * (1.0f + depth)) * 2);
 8000664:	eef8 7a67 	vcvt.f32.u32	s15, s15
void chorusInit(chorus *c, uint32_t baseDelay, float32_t wetness, float32_t depth, float32_t rate, uint32_t frameLength, uint32_t sampleRate) {
 8000668:	ee08 3a10 	vmov	s16, r3
    uint32_t size2 = (uint32_t)(ceilf((float32_t)baseDelay * (1.0f + depth)) * 2);
 800066c:	ee30 7aa8 	vadd.f32	s14, s1, s17
    c->bufferSize = (size1 > size2) ? size1 : size2;
    if (c->bufferSize < frameLength) {
 8000670:	4562      	cmp	r2, ip
    c->G_fb = 0.5f;
 8000672:	f04f 557c 	mov.w	r5, #1056964608	@ 0x3f000000
void chorusInit(chorus *c, uint32_t baseDelay, float32_t wetness, float32_t depth, float32_t rate, uint32_t frameLength, uint32_t sampleRate) {
 8000676:	4604      	mov	r4, r0
    if (c->bufferSize < frameLength) {
 8000678:	bf38      	it	cc
 800067a:	4662      	movcc	r2, ip
    c->baseDelay = baseDelay;
 800067c:	6001      	str	r1, [r0, #0]
    uint32_t size2 = (uint32_t)(ceilf((float32_t)baseDelay * (1.0f + depth)) * 2);
 800067e:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->G_fb = 0.5f;
 8000682:	6105      	str	r5, [r0, #16]
    c->wetness = wetness;
 8000684:	ed80 0a01 	vstr	s0, [r0, #4]
        c->bufferSize = frameLength;
    }

    // Allocate the delay buffers (mono processing)
    c->inDelayed = (float32_t *)malloc(c->bufferSize * sizeof(float32_t));
 8000688:	2101      	movs	r1, #1
    c->depth = depth;
 800068a:	edc0 0a02 	vstr	s1, [r0, #8]
        c->outDelayed[i] = 0.0f;
    }

    c->writePtr = 0;
    c->t = 0.0f;
    c->dt = 1.0f / (float32_t)sampleRate;
 800068e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    uint32_t size2 = (uint32_t)(ceilf((float32_t)baseDelay * (1.0f + depth)) * 2);
 8000692:	fefa 7a67 	vrintp.f32	s15, s15
 8000696:	ee77 7aa7 	vadd.f32	s15, s15, s15
    c->rate = rate;
 800069a:	ed80 1a03 	vstr	s2, [r0, #12]
    c->G_ff = 1.0f;
 800069e:	edc0 8a05 	vstr	s17, [r0, #20]
    uint32_t size2 = (uint32_t)(ceilf((float32_t)baseDelay * (1.0f + depth)) * 2);
 80006a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    if (c->bufferSize < frameLength) {
 80006a6:	ee17 3a90 	vmov	r3, s15
 80006aa:	4293      	cmp	r3, r2
 80006ac:	bf38      	it	cc
 80006ae:	4613      	movcc	r3, r2
    c->inDelayed = (float32_t *)malloc(c->bufferSize * sizeof(float32_t));
 80006b0:	009d      	lsls	r5, r3, #2
 80006b2:	6183      	str	r3, [r0, #24]
 80006b4:	4628      	mov	r0, r5
 80006b6:	f006 f85b 	bl	8006770 <calloc>
 80006ba:	4603      	mov	r3, r0
    c->outDelayed = (float32_t *)malloc(c->bufferSize * sizeof(float32_t));
 80006bc:	2101      	movs	r1, #1
 80006be:	4628      	mov	r0, r5
    c->inDelayed = (float32_t *)malloc(c->bufferSize * sizeof(float32_t));
 80006c0:	61e3      	str	r3, [r4, #28]
    c->outDelayed = (float32_t *)malloc(c->bufferSize * sizeof(float32_t));
 80006c2:	f006 f855 	bl	8006770 <calloc>
    c->dt = 1.0f / (float32_t)sampleRate;
 80006c6:	eec8 7a88 	vdiv.f32	s15, s17, s16
    c->writePtr = 0;
 80006ca:	2200      	movs	r2, #0
    c->t = 0.0f;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80006d0:	ecbd 8b02 	vpop	{d8}
    c->writePtr = 0;
 80006d4:	e9c4 0208 	strd	r0, r2, [r4, #32]
    c->dt = 1.0f / (float32_t)sampleRate;
 80006d8:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
}
 80006dc:	bd38      	pop	{r3, r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <chorusApply>:
    for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
        float32_t input = p->processBuffer[n];

        // Compute current delay (in samples) with modulation via an LFO.
        float32_t mod = sinf(2.0f * M_PI * c->rate * c->t);
        uint32_t currentDelay = (uint32_t)(roundf(c->baseDelay * (1.0f + c->depth * mod)));
 80006e0:	edd0 7a00 	vldr	s15, [r0]
        float32_t mod = sinf(2.0f * M_PI * c->rate * c->t);
 80006e4:	ed90 7a0a 	vldr	s14, [r0, #40]	@ 0x28
void chorusApply(chorus *c, pipe *p) {
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	f244 0808 	movw	r8, #16392	@ 0x4008
 80006f0:	f245 0608 	movw	r6, #20488	@ 0x5008
 80006f4:	4605      	mov	r5, r0

        // Compute the read pointer in the circular delay buffer.
        uint32_t readPtr;
        if (currentDelay >= c->bufferSize) {
 80006f6:	6987      	ldr	r7, [r0, #24]
 80006f8:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 80006fa:	4488      	add	r8, r1
        } else {
            readPtr = (c->writePtr + c->bufferSize - currentDelay) % c->bufferSize;
        }

        // Compute output sample using a mix of dry and delayed signals.
        float32_t delayedInput = c->inDelayed[readPtr];
 80006fc:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8000700:	440e      	add	r6, r1
        float32_t delayedOutput = c->outDelayed[readPtr];
 8000702:	f8d0 9020 	ldr.w	r9, [r0, #32]
void chorusApply(chorus *c, pipe *p) {
 8000706:	ed2d 8b06 	vpush	{d8-d10}
        float32_t mod = sinf(2.0f * M_PI * c->rate * c->t);
 800070a:	ed9f 8b33 	vldr	d8, [pc, #204]	@ 80007d8 <chorusApply+0xf8>
        uint32_t currentDelay = (uint32_t)(roundf(c->baseDelay * (1.0f + c->depth * mod)));
 800070e:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 8000712:	eeb8 9a67 	vcvt.f32.u32	s18, s15
        float32_t mod = sinf(2.0f * M_PI * c->rate * c->t);
 8000716:	ed95 0a03 	vldr	s0, [r5, #12]
 800071a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        float32_t input = p->processBuffer[n];
 800071e:	ecf8 9a01 	vldmia	r8!, {s19}
        float32_t mod = sinf(2.0f * M_PI * c->rate * c->t);
 8000722:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000726:	ee20 0b08 	vmul.f64	d0, d0, d8
 800072a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800072e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8000732:	f006 f95d 	bl	80069f0 <sinf>
        uint32_t currentDelay = (uint32_t)(roundf(c->baseDelay * (1.0f + c->depth * mod)));
 8000736:	eef0 7a4a 	vmov.f32	s15, s20
 800073a:	ed95 7a02 	vldr	s14, [r5, #8]
            readPtr = (c->writePtr + c->bufferSize - currentDelay) % c->bufferSize;
 800073e:	1939      	adds	r1, r7, r4
            readPtr = c->writePtr;  // Clamp if delay is too high
 8000740:	4622      	mov	r2, r4
        uint32_t currentDelay = (uint32_t)(roundf(c->baseDelay * (1.0f + c->depth * mod)));
 8000742:	eee7 7a00 	vfma.f32	s15, s14, s0
 8000746:	ee69 7a27 	vmul.f32	s15, s18, s15
 800074a:	fef8 7a67 	vrinta.f32	s15, s15
 800074e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000752:	ee17 3a90 	vmov	r3, s15
        if (currentDelay >= c->bufferSize) {
 8000756:	429f      	cmp	r7, r3
            readPtr = (c->writePtr + c->bufferSize - currentDelay) % c->bufferSize;
 8000758:	eba1 0103 	sub.w	r1, r1, r3
        if (currentDelay >= c->bufferSize) {
 800075c:	d903      	bls.n	8000766 <chorusApply+0x86>
            readPtr = (c->writePtr + c->bufferSize - currentDelay) % c->bufferSize;
 800075e:	fbb1 f2f7 	udiv	r2, r1, r7
 8000762:	fb07 1212 	mls	r2, r7, r2, r1
        float32_t output = (1.0f - c->wetness) * input + c->wetness * (c->G_fb * delayedOutput + (c->G_ff - c->G_fb) * delayedInput);
 8000766:	edd5 6a04 	vldr	s13, [r5, #16]
        float32_t delayedInput = c->inDelayed[readPtr];
 800076a:	eb0a 0382 	add.w	r3, sl, r2, lsl #2
        float32_t output = (1.0f - c->wetness) * input + c->wetness * (c->G_fb * delayedOutput + (c->G_ff - c->G_fb) * delayedInput);
 800076e:	ed95 7a05 	vldr	s14, [r5, #20]
        float32_t delayedOutput = c->outDelayed[readPtr];
 8000772:	eb09 0282 	add.w	r2, r9, r2, lsl #2
        float32_t output = (1.0f - c->wetness) * input + c->wetness * (c->G_fb * delayedOutput + (c->G_ff - c->G_fb) * delayedInput);
 8000776:	ed93 5a00 	vldr	s10, [r3]

        // Update delay buffers at the current write pointer.
        c->inDelayed[c->writePtr] = input;
        c->outDelayed[c->writePtr] = output;
 800077a:	eb09 0384 	add.w	r3, r9, r4, lsl #2
        float32_t output = (1.0f - c->wetness) * input + c->wetness * (c->G_fb * delayedOutput + (c->G_ff - c->G_fb) * delayedInput);
 800077e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000782:	edd2 5a00 	vldr	s11, [r2]
 8000786:	edd5 7a01 	vldr	s15, [r5, #4]
        c->inDelayed[c->writePtr] = input;
 800078a:	eb0a 0284 	add.w	r2, sl, r4, lsl #2

        // Write the processed sample back into the processBuffer.
        p->processBuffer[n] = output;

        // Advance the circular buffer pointer.
        c->writePtr = (c->writePtr + 1) % c->bufferSize;
 800078e:	3401      	adds	r4, #1
    for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000790:	4546      	cmp	r6, r8
        float32_t output = (1.0f - c->wetness) * input + c->wetness * (c->G_fb * delayedOutput + (c->G_ff - c->G_fb) * delayedInput);
 8000792:	ee27 7a05 	vmul.f32	s14, s14, s10
        c->inDelayed[c->writePtr] = input;
 8000796:	edc2 9a00 	vstr	s19, [r2]
        float32_t output = (1.0f - c->wetness) * input + c->wetness * (c->G_fb * delayedOutput + (c->G_ff - c->G_fb) * delayedInput);
 800079a:	ee3a 6a67 	vsub.f32	s12, s20, s15
 800079e:	eea6 7aa5 	vfma.f32	s14, s13, s11
        c->writePtr = (c->writePtr + 1) % c->bufferSize;
 80007a2:	fbb4 f2f7 	udiv	r2, r4, r7
        float32_t output = (1.0f - c->wetness) * input + c->wetness * (c->G_fb * delayedOutput + (c->G_ff - c->G_fb) * delayedInput);
 80007a6:	ee67 7a87 	vmul.f32	s15, s15, s14
        c->writePtr = (c->writePtr + 1) % c->bufferSize;
 80007aa:	fb07 4412 	mls	r4, r7, r2, r4
        float32_t output = (1.0f - c->wetness) * input + c->wetness * (c->G_fb * delayedOutput + (c->G_ff - c->G_fb) * delayedInput);
 80007ae:	eee6 7a29 	vfma.f32	s15, s12, s19
        c->outDelayed[c->writePtr] = output;
 80007b2:	edc3 7a00 	vstr	s15, [r3]
        p->processBuffer[n] = output;
 80007b6:	ed48 7a01 	vstr	s15, [r8, #-4]
        // Advance time by dt.
        c->t += c->dt;
 80007ba:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80007be:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80007c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80007c6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
    for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 80007ca:	d1a4      	bne.n	8000716 <chorusApply+0x36>
    }
}
 80007cc:	ecbd 8b06 	vpop	{d8-d10}
 80007d0:	626c      	str	r4, [r5, #36]	@ 0x24
 80007d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d6:	bf00      	nop
 80007d8:	54442d18 	.word	0x54442d18
 80007dc:	401921fb 	.word	0x401921fb

080007e0 <defaultProcess>:
#include "effect.h"
#include "pipe.h"  // Needed for definition of pipe and BUFFER_SIZE

// Default processing function: applies the gain to each sample in the pipe's processBuffer.
static void defaultProcess(effect *self, pipe *p) {
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 80007e0:	f244 0308 	movw	r3, #16392	@ 0x4008
 80007e4:	f245 0208 	movw	r2, #20488	@ 0x5008
        p->processBuffer[i] *= self->gain;
 80007e8:	ed90 7a00 	vldr	s14, [r0]
 80007ec:	440b      	add	r3, r1
 80007ee:	440a      	add	r2, r1
 80007f0:	edd3 7a00 	vldr	s15, [r3]
 80007f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007f8:	ece3 7a01 	vstmia	r3!, {s15}
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d1f7      	bne.n	80007f0 <defaultProcess+0x10>
    }
}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop

08000804 <effectInit>:

void effectInit(effect *self, float32_t gain) {
    self->gain = gain;
    self->process = defaultProcess;
 8000804:	4b02      	ldr	r3, [pc, #8]	@ (8000810 <effectInit+0xc>)
    self->gain = gain;
 8000806:	ed80 0a00 	vstr	s0, [r0]
    self->process = defaultProcess;
 800080a:	6043      	str	r3, [r0, #4]
}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	080007e1 	.word	0x080007e1

08000814 <HAL_ADC_ConvHalfCpltCallback>:
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000816:	f003 021f 	and.w	r2, r3, #31
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800081a:	f3bf 8f4f 	dsb	sy
 800081e:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000822:	480a      	ldr	r0, [pc, #40]	@ (800084c <HAL_ADC_ConvHalfCpltCallback+0x38>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8000824:	4411      	add	r1, r2
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000826:	f8c0 325c 	str.w	r3, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800082a:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 800082c:	1aca      	subs	r2, r1, r3
 800082e:	2a00      	cmp	r2, #0
 8000830:	dcf9      	bgt.n	8000826 <HAL_ADC_ConvHalfCpltCallback+0x12>
 8000832:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000836:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[0…BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)adcInput,
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcHalfComplete(&apipe, adcInput);
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 800083c:	4902      	ldr	r1, [pc, #8]	@ (8000848 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800083e:	6943      	ldr	r3, [r0, #20]
 8000840:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 8000844:	4718      	bx	r3
 8000846:	bf00      	nop
 8000848:	24001224 	.word	0x24001224
 800084c:	e000ed00 	.word	0xe000ed00
 8000850:	240112a0 	.word	0x240112a0

08000854 <HAL_ADC_ConvCpltCallback>:
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000854:	490d      	ldr	r1, [pc, #52]	@ (800088c <HAL_ADC_ConvCpltCallback+0x38>)
 8000856:	f001 021f 	and.w	r2, r1, #31
 800085a:	f502 6300 	add.w	r3, r2, #2048	@ 0x800
  __ASM volatile ("dsb 0xF":::"memory");
 800085e:	f3bf 8f4f 	dsb	sy
 8000862:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000866:	480a      	ldr	r0, [pc, #40]	@ (8000890 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000868:	4411      	add	r1, r2
 800086a:	1aca      	subs	r2, r1, r3
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800086c:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
 800086e:	2b00      	cmp	r3, #0
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000870:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
      } while ( op_size > 0 );
 8000874:	dcf9      	bgt.n	800086a <HAL_ADC_ConvCpltCallback+0x16>
 8000876:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800087a:	f3bf 8f6f 	isb	sy
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
    // DMA has written into adcInput[BUFFER_SIZE…2*BUFFER_SIZE-1]
    SCB_InvalidateDCache_by_Addr((uint32_t*)&adcInput[BUFFER_SIZE],
                                 BUFFER_SIZE * sizeof(adcInput[0]));
    apipe.adcComplete(&apipe, adcInput);
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <HAL_ADC_ConvCpltCallback+0x40>)
 8000880:	4905      	ldr	r1, [pc, #20]	@ (8000898 <HAL_ADC_ConvCpltCallback+0x44>)
 8000882:	6983      	ldr	r3, [r0, #24]
 8000884:	f5a0 4070 	sub.w	r0, r0, #61440	@ 0xf000
 8000888:	4718      	bx	r3
 800088a:	bf00      	nop
 800088c:	24001a24 	.word	0x24001a24
 8000890:	e000ed00 	.word	0xe000ed00
 8000894:	240112a0 	.word	0x240112a0
 8000898:	24001224 	.word	0x24001224

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a0:	224c      	movs	r2, #76	@ 0x4c
 80008a2:	2100      	movs	r1, #0
 80008a4:	a80a      	add	r0, sp, #40	@ 0x28
 80008a6:	f006 f835 	bl	8006914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008aa:	2220      	movs	r2, #32
 80008ac:	2100      	movs	r1, #0
 80008ae:	a802      	add	r0, sp, #8
 80008b0:	f006 f830 	bl	8006914 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008b4:	2002      	movs	r0, #2
 80008b6:	f003 fad7 	bl	8003e68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008ba:	4a24      	ldr	r2, [pc, #144]	@ (800094c <SystemClock_Config+0xb0>)
 80008bc:	2100      	movs	r1, #0
 80008be:	4b24      	ldr	r3, [pc, #144]	@ (8000950 <SystemClock_Config+0xb4>)
 80008c0:	9101      	str	r1, [sp, #4]
 80008c2:	6990      	ldr	r0, [r2, #24]
 80008c4:	f440 4440 	orr.w	r4, r0, #49152	@ 0xc000
 80008c8:	6194      	str	r4, [r2, #24]
 80008ca:	6995      	ldr	r5, [r2, #24]
 80008cc:	f405 4140 	and.w	r1, r5, #49152	@ 0xc000
 80008d0:	9101      	str	r1, [sp, #4]
 80008d2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80008d4:	f040 0401 	orr.w	r4, r0, #1
 80008d8:	62dc      	str	r4, [r3, #44]	@ 0x2c
 80008da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008dc:	f003 0501 	and.w	r5, r3, #1
 80008e0:	9501      	str	r5, [sp, #4]
 80008e2:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008e4:	6991      	ldr	r1, [r2, #24]
 80008e6:	048b      	lsls	r3, r1, #18
 80008e8:	d5fc      	bpl.n	80008e4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ea:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ec:	250c      	movs	r5, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ee:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f0:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008f2:	213c      	movs	r1, #60	@ 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008f4:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008f6:	951a      	str	r5, [sp, #104]	@ 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008f8:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008fa:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fe:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000900:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000902:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000904:	9214      	str	r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000906:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000908:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800090c:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000910:	e9cd 5115 	strd	r5, r1, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f003 fb3e 	bl	8003f94 <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	b108      	cbz	r0, 8000920 <SystemClock_Config+0x84>
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091e:	e7fe      	b.n	800091e <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	223f      	movs	r2, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000922:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000924:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000928:	2508      	movs	r5, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092c:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800092e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000934:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000936:	e9cd 5405 	strd	r5, r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800093a:	e9cd 4c07 	strd	r4, ip, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800093e:	f003 fea5 	bl	800468c <HAL_RCC_ClockConfig>
 8000942:	b108      	cbz	r0, 8000948 <SystemClock_Config+0xac>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <SystemClock_Config+0xaa>
}
 8000948:	b01f      	add	sp, #124	@ 0x7c
 800094a:	bd30      	pop	{r4, r5, pc}
 800094c:	58024800 	.word	0x58024800
 8000950:	58000400 	.word	0x58000400

08000954 <PeriphCommonClock_Config>:
{
 8000954:	b500      	push	{lr}
 8000956:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000958:	22b8      	movs	r2, #184	@ 0xb8
 800095a:	2100      	movs	r1, #0
 800095c:	a802      	add	r0, sp, #8
 800095e:	f005 ffd9 	bl	8006914 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000962:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000966:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000968:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800096a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096e:	f004 f91f 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000972:	b108      	cbz	r0, 8000978 <PeriphCommonClock_Config+0x24>
 8000974:	b672      	cpsid	i
  while (1)
 8000976:	e7fe      	b.n	8000976 <PeriphCommonClock_Config+0x22>
}
 8000978:	b031      	add	sp, #196	@ 0xc4
 800097a:	f85d fb04 	ldr.w	pc, [sp], #4
 800097e:	bf00      	nop

08000980 <main>:
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000980:	2400      	movs	r4, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000982:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	4d77      	ldr	r5, [pc, #476]	@ (8000b64 <main+0x1e4>)
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000986:	f44f 6880 	mov.w	r8, #1024	@ 0x400
{
 800098a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800098e:	b093      	sub	sp, #76	@ 0x4c
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000990:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8000994:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_MPU_Disable();
 8000998:	f001 fd9e 	bl	80024d8 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800099c:	f248 721f 	movw	r2, #34591	@ 0x871f
 80009a0:	f240 1301 	movw	r3, #257	@ 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009a4:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009a6:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80009ac:	e9cd 420a 	strd	r4, r2, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009b0:	f001 fdb0 	bl	8002514 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009b4:	2004      	movs	r0, #4
 80009b6:	f001 fd9d 	bl	80024f4 <HAL_MPU_Enable>
  HAL_Init();
 80009ba:	f000 fda3 	bl	8001504 <HAL_Init>
  SystemClock_Config();
 80009be:	f7ff ff6d 	bl	800089c <SystemClock_Config>
  PeriphCommonClock_Config();
 80009c2:	f7ff ffc7 	bl	8000954 <PeriphCommonClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	f8d5 00e0 	ldr.w	r0, [r5, #224]	@ 0xe0
 80009ca:	4330      	orrs	r0, r6
 80009cc:	f8c5 00e0 	str.w	r0, [r5, #224]	@ 0xe0
 80009d0:	f8d5 10e0 	ldr.w	r1, [r5, #224]	@ 0xe0
 80009d4:	4031      	ands	r1, r6
 80009d6:	9104      	str	r1, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	f8d5 70e0 	ldr.w	r7, [r5, #224]	@ 0xe0
 80009e0:	f047 0204 	orr.w	r2, r7, #4
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 80009e4:	2708      	movs	r7, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	f8c5 20e0 	str.w	r2, [r5, #224]	@ 0xe0
 80009ea:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  GPIO_InitStruct.Pin   = GPIO_PIN_3;
 80009ee:	9709      	str	r7, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f0:	f003 0004 	and.w	r0, r3, #4
 80009f4:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f6:	485c      	ldr	r0, [pc, #368]	@ (8000b68 <main+0x1e8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f8:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80009fa:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f003 f827 	bl	8003a54 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);   // set high
 8000a06:	4639      	mov	r1, r7
 8000a08:	4632      	mov	r2, r6
 8000a0a:	4857      	ldr	r0, [pc, #348]	@ (8000b68 <main+0x1e8>)
 8000a0c:	f003 fa28 	bl	8003e60 <HAL_GPIO_WritePin>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a10:	f8d5 10d8 	ldr.w	r1, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a14:	4622      	mov	r2, r4
 8000a16:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a18:	4331      	orrs	r1, r6
 8000a1a:	f8c5 10d8 	str.w	r1, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a1e:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a20:	f8d5 50d8 	ldr.w	r5, [r5, #216]	@ 0xd8
 8000a24:	4035      	ands	r5, r6
 8000a26:	9503      	str	r5, [sp, #12]
 8000a28:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a2a:	f001 fcf5 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a2e:	200b      	movs	r0, #11
  hadc1.Instance = ADC1;
 8000a30:	4d4e      	ldr	r5, [pc, #312]	@ (8000b6c <main+0x1ec>)
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a32:	f001 fd2d 	bl	8002490 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a36:	4622      	mov	r2, r4
 8000a38:	4621      	mov	r1, r4
 8000a3a:	200c      	movs	r0, #12
 8000a3c:	f001 fcec 	bl	8002418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a40:	200c      	movs	r0, #12
 8000a42:	f001 fd25 	bl	8002490 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a46:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a4a:	2303      	movs	r3, #3
  ADC_MultiModeTypeDef multimode = {0};
 8000a4c:	9406      	str	r4, [sp, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4e:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a50:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a52:	612f      	str	r7, [r5, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a54:	f44f 679c 	mov.w	r7, #1248	@ 0x4e0
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a58:	82ac      	strh	r4, [r5, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a5a:	772c      	strb	r4, [r5, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 8000a5c:	f885 4038 	strb.w	r4, [r5, #56]	@ 0x38
  hadc1.Init.NbrOfConversion = 1;
 8000a60:	61ae      	str	r6, [r5, #24]
  hadc1.Init.Oversampling.Ratio = 1;
 8000a62:	63ee      	str	r6, [r5, #60]	@ 0x3c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a64:	62eb      	str	r3, [r5, #44]	@ 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8000a6a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8000a6e:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  ADC_MultiModeTypeDef multimode = {0};
 8000a72:	e9cd 4407 	strd	r4, r4, [sp, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a76:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a7a:	e9c5 440c 	strd	r4, r4, [r5, #48]	@ 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a7e:	4c3c      	ldr	r4, [pc, #240]	@ (8000b70 <main+0x1f0>)
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a80:	e9c5 7809 	strd	r7, r8, [r5, #36]	@ 0x24
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a84:	e9c5 4200 	strd	r4, r2, [r5]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a88:	f001 faea 	bl	8002060 <HAL_ADC_Init>
 8000a8c:	b108      	cbz	r0, 8000a92 <main+0x112>
 8000a8e:	b672      	cpsid	i
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <main+0x110>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a92:	a906      	add	r1, sp, #24
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a94:	9006      	str	r0, [sp, #24]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a96:	4628      	mov	r0, r5
 8000a98:	f001 fc4a 	bl	8002330 <HAL_ADCEx_MultiModeConfigChannel>
 8000a9c:	4601      	mov	r1, r0
 8000a9e:	b108      	cbz	r0, 8000aa4 <main+0x124>
 8000aa0:	b672      	cpsid	i
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <main+0x122>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa4:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa6:	2406      	movs	r4, #6
 8000aa8:	4d32      	ldr	r5, [pc, #200]	@ (8000b74 <main+0x1f4>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aaa:	2205      	movs	r2, #5
 8000aac:	f240 77ff 	movw	r7, #2047	@ 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab0:	2304      	movs	r3, #4
  sConfig.Offset = 0;
 8000ab2:	910e      	str	r1, [sp, #56]	@ 0x38
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ab4:	f88d 103d 	strb.w	r1, [sp, #61]	@ 0x3d
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	a909      	add	r1, sp, #36	@ 0x24
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aba:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000abc:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ac0:	e9cd 270b 	strd	r2, r7, [sp, #44]	@ 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	f000 fef0 	bl	80018a8 <HAL_ADC_ConfigChannel>
 8000ac8:	b108      	cbz	r0, 8000ace <main+0x14e>
 8000aca:	b672      	cpsid	i
  while (1)
 8000acc:	e7fe      	b.n	8000acc <main+0x14c>
  htim8.Instance = TIM8;
 8000ace:	4d2a      	ldr	r5, [pc, #168]	@ (8000b78 <main+0x1f8>)
  htim8.Init.Prescaler = 50-1;
 8000ad0:	2431      	movs	r4, #49	@ 0x31
 8000ad2:	492a      	ldr	r1, [pc, #168]	@ (8000b7c <main+0x1fc>)
  htim8.Init.Period = 100-1;
 8000ad4:	2263      	movs	r2, #99	@ 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad6:	9008      	str	r0, [sp, #32]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	60a8      	str	r0, [r5, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ada:	61a8      	str	r0, [r5, #24]
  htim8.Init.Period = 100-1;
 8000adc:	60ea      	str	r2, [r5, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8000ae2:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae6:	e9cd 0006 	strd	r0, r0, [sp, #24]
  htim8.Init.RepetitionCounter = 0;
 8000aea:	e9c5 0004 	strd	r0, r0, [r5, #16]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000aee:	4628      	mov	r0, r5
  htim8.Init.Prescaler = 50-1;
 8000af0:	e9c5 1400 	strd	r1, r4, [r5]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000af4:	f005 fb0e 	bl	8006114 <HAL_TIM_Base_Init>
 8000af8:	b108      	cbz	r0, 8000afe <main+0x17e>
 8000afa:	b672      	cpsid	i
  while (1)
 8000afc:	e7fe      	b.n	8000afc <main+0x17c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afe:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b02:	a909      	add	r1, sp, #36	@ 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b04:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b06:	4628      	mov	r0, r5
 8000b08:	f005 fbf8 	bl	80062fc <HAL_TIM_ConfigClockSource>
 8000b0c:	4607      	mov	r7, r0
 8000b0e:	b108      	cbz	r0, 8000b14 <main+0x194>
 8000b10:	b672      	cpsid	i
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <main+0x192>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b14:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b16:	a906      	add	r1, sp, #24
 8000b18:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b1a:	9306      	str	r3, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	e9cd 7707 	strd	r7, r7, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b20:	f005 fcb4 	bl	800648c <HAL_TIMEx_MasterConfigSynchronization>
 8000b24:	4601      	mov	r1, r0
 8000b26:	b108      	cbz	r0, 8000b2c <main+0x1ac>
 8000b28:	b672      	cpsid	i
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <main+0x1aa>
  DAC_ChannelConfTypeDef sConfig = {0};
 8000b2c:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 8000b2e:	4d14      	ldr	r5, [pc, #80]	@ (8000b80 <main+0x200>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000b30:	eb0d 0002 	add.w	r0, sp, r2
 8000b34:	f005 feee 	bl	8006914 <memset>
  hdac1.Instance = DAC1;
 8000b38:	4912      	ldr	r1, [pc, #72]	@ (8000b84 <main+0x204>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b3a:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 8000b3c:	6029      	str	r1, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b3e:	f001 fd19 	bl	8002574 <HAL_DAC_Init>
 8000b42:	4602      	mov	r2, r0
 8000b44:	b108      	cbz	r0, 8000b4a <main+0x1ca>
 8000b46:	b672      	cpsid	i
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <main+0x1c8>
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000b4a:	241e      	movs	r4, #30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b4c:	a909      	add	r1, sp, #36	@ 0x24
 8000b4e:	4628      	mov	r0, r5
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b50:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000b52:	e9cd 2409 	strd	r2, r4, [sp, #36]	@ 0x24
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b56:	e9cd 260b 	strd	r2, r6, [sp, #44]	@ 0x2c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b5a:	f001 fdef 	bl	800273c <HAL_DAC_ConfigChannel>
 8000b5e:	b198      	cbz	r0, 8000b88 <main+0x208>
 8000b60:	b672      	cpsid	i
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <main+0x1e2>
 8000b64:	58024400 	.word	0x58024400
 8000b68:	58020800 	.word	0x58020800
 8000b6c:	2401141c 	.word	0x2401141c
 8000b70:	40022000 	.word	0x40022000
 8000b74:	43210000 	.word	0x43210000
 8000b78:	240112cc 	.word	0x240112cc
 8000b7c:	40010400 	.word	0x40010400
 8000b80:	24011390 	.word	0x24011390
 8000b84:	40007400 	.word	0x40007400
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b88:	4f76      	ldr	r7, [pc, #472]	@ (8000d64 <main+0x3e4>)
 8000b8a:	697e      	ldr	r6, [r7, #20]
 8000b8c:	f416 3280 	ands.w	r2, r6, #65536	@ 0x10000
 8000b90:	d124      	bne.n	8000bdc <main+0x25c>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b92:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b96:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8000b9a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b9e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ba2:	f3c0 354e 	ubfx	r5, r0, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ba6:	f3c0 09c9 	ubfx	r9, r0, #3, #10
 8000baa:	016e      	lsls	r6, r5, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bac:	ea06 0103 	and.w	r1, r6, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bb0:	46ca      	mov	sl, r9
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bb2:	ea41 748a 	orr.w	r4, r1, sl, lsl #30
      } while (ways-- != 0U);
 8000bb6:	f1ba 0a01 	subs.w	sl, sl, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bba:	f8c7 4260 	str.w	r4, [r7, #608]	@ 0x260
      } while (ways-- != 0U);
 8000bbe:	d2f8      	bcs.n	8000bb2 <main+0x232>
    } while(sets-- != 0U);
 8000bc0:	3e20      	subs	r6, #32
 8000bc2:	f116 0f20 	cmn.w	r6, #32
 8000bc6:	d1f1      	bne.n	8000bac <main+0x22c>
 8000bc8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	f442 3080 	orr.w	r0, r2, #65536	@ 0x10000
 8000bd2:	6178      	str	r0, [r7, #20]
 8000bd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bd8:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bdc:	4f61      	ldr	r7, [pc, #388]	@ (8000d64 <main+0x3e4>)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f413 3500 	ands.w	r5, r3, #131072	@ 0x20000
 8000be4:	d111      	bne.n	8000c0a <main+0x28a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000be6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bea:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000bee:	f8c7 5250 	str.w	r5, [r7, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000bf2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bf6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000bfa:	6979      	ldr	r1, [r7, #20]
 8000bfc:	f441 3400 	orr.w	r4, r1, #131072	@ 0x20000
 8000c00:	617c      	str	r4, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c06:	f3bf 8f6f 	isb	sy
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 8000c0a:	4e56      	ldr	r6, [pc, #344]	@ (8000d64 <main+0x3e4>)
  DWT->CYCCNT  = 0;                                // clear counter
 8000c0c:	2500      	movs	r5, #0
 8000c0e:	4f56      	ldr	r7, [pc, #344]	@ (8000d68 <main+0x3e8>)
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 8000c10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 8000c14:	f8d6 20fc 	ldr.w	r2, [r6, #252]	@ 0xfc
  chorusInit(&myChorus, delay, wetness, depth, 0.05f, BUFFER_SIZE, 48000);
 8000c18:	f8df a194 	ldr.w	sl, [pc, #404]	@ 8000db0 <main+0x430>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 8000c1c:	f042 7080 	orr.w	r0, r2, #16777216	@ 0x1000000
  chorusInit(&myChorus, delay, wetness, depth, 0.05f, BUFFER_SIZE, 48000);
 8000c20:	f8df 9190 	ldr.w	r9, [pc, #400]	@ 8000db4 <main+0x434>
 8000c24:	f8df b190 	ldr.w	fp, [pc, #400]	@ 8000db8 <main+0x438>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // turn on trace
 8000c28:	f8c6 00fc 	str.w	r0, [r6, #252]	@ 0xfc
  DWT->CYCCNT  = 0;                                // clear counter
 8000c2c:	607d      	str	r5, [r7, #4]
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 8000c2e:	683b      	ldr	r3, [r7, #0]
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 8000c30:	484e      	ldr	r0, [pc, #312]	@ (8000d6c <main+0x3ec>)
  DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;          // start counter
 8000c32:	f043 0401 	orr.w	r4, r3, #1
 8000c36:	4e4e      	ldr	r6, [pc, #312]	@ (8000d70 <main+0x3f0>)
 8000c38:	603c      	str	r4, [r7, #0]
		 apipe.updateDelayBuffer(&apipe);
 8000c3a:	f5a6 4870 	sub.w	r8, r6, #61440	@ 0xf000
  arm_rfft_fast_init_f32(&fft, FFT_SIZE);
 8000c3e:	f005 fcaf 	bl	80065a0 <arm_rfft_fast_init_f32>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000c42:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000c46:	4629      	mov	r1, r5
 8000c48:	484a      	ldr	r0, [pc, #296]	@ (8000d74 <main+0x3f4>)
 8000c4a:	f001 fb15 	bl	8002278 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcInput, BUFFER_SIZE*2);
 8000c4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c52:	4949      	ldr	r1, [pc, #292]	@ (8000d78 <main+0x3f8>)
 8000c54:	4847      	ldr	r0, [pc, #284]	@ (8000d74 <main+0x3f4>)
 8000c56:	f001 f88f 	bl	8001d78 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacOutput, BUFFER_SIZE*2, DAC_ALIGN_12B_R);
 8000c5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c5e:	4a47      	ldr	r2, [pc, #284]	@ (8000d7c <main+0x3fc>)
 8000c60:	4629      	mov	r1, r5
 8000c62:	4847      	ldr	r0, [pc, #284]	@ (8000d80 <main+0x400>)
 8000c64:	9500      	str	r5, [sp, #0]
 8000c66:	f001 fc9b 	bl	80025a0 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 8000c6a:	4846      	ldr	r0, [pc, #280]	@ (8000d84 <main+0x404>)
 8000c6c:	f005 faf8 	bl	8006260 <HAL_TIM_Base_Start>
  pipeInit(&apipe);
 8000c70:	4845      	ldr	r0, [pc, #276]	@ (8000d88 <main+0x408>)
 8000c72:	f000 f9eb 	bl	800104c <pipeInit>
  effectInit(&myEffect, 2.0f);
 8000c76:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000c7a:	4844      	ldr	r0, [pc, #272]	@ (8000d8c <main+0x40c>)
 8000c7c:	f7ff fdc2 	bl	8000804 <effectInit>
  chorusInit(&myChorus, delay, wetness, depth, 0.05f, BUFFER_SIZE, 48000);
 8000c80:	f8db 1000 	ldr.w	r1, [fp]
 8000c84:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8000d90 <main+0x410>
 8000c88:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8000c8c:	ed9a 0a00 	vldr	s0, [sl]
 8000c90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c94:	edd9 0a00 	vldr	s1, [r9]
 8000c98:	483e      	ldr	r0, [pc, #248]	@ (8000d94 <main+0x414>)
 8000c9a:	f7ff fcd9 	bl	8000650 <chorusInit>
  phaserInit(&myPhaser, wetness, depth, rate, 15, BUFFER_SIZE, 48000);
 8000c9e:	493e      	ldr	r1, [pc, #248]	@ (8000d98 <main+0x418>)
 8000ca0:	ed9a 0a00 	vldr	s0, [sl]
 8000ca4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8000ca8:	edd9 0a00 	vldr	s1, [r9]
 8000cac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cb0:	ed91 1a00 	vldr	s2, [r1]
 8000cb4:	210f      	movs	r1, #15
 8000cb6:	4839      	ldr	r0, [pc, #228]	@ (8000d9c <main+0x41c>)
 8000cb8:	f000 f882 	bl	8000dc0 <phaserInit>
	  if (apipe.bufferReady)
 8000cbc:	7c35      	ldrb	r5, [r6, #16]
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d04e      	beq.n	8000d60 <main+0x3e0>
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000cc2:	4d2e      	ldr	r5, [pc, #184]	@ (8000d7c <main+0x3fc>)
		 apipe.updateDelayBuffer(&apipe);
 8000cc4:	4640      	mov	r0, r8
 8000cc6:	69f2      	ldr	r2, [r6, #28]
 8000cc8:	f005 0c1f 	and.w	ip, r5, #31
 8000ccc:	f50c 5480 	add.w	r4, ip, #4096	@ 0x1000
 8000cd0:	4790      	blx	r2
		 apipe.loadProcess(&apipe);
 8000cd2:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	4798      	blx	r3
		 myChorus.wetness = wetness;
 8000cd8:	f8da 2000 	ldr.w	r2, [sl]
		 myPhaser.wetness = 1;
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	@ (8000d9c <main+0x41c>)
 8000cde:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
		 myChorus.wetness = wetness;
 8000ce2:	492c      	ldr	r1, [pc, #176]	@ (8000d94 <main+0x414>)
		 myPhaser.wetness = 1;
 8000ce4:	6058      	str	r0, [r3, #4]
		 myChorus.wetness = wetness;
 8000ce6:	604a      	str	r2, [r1, #4]
		 myChorus.depth = depth;
 8000ce8:	f8d9 0000 	ldr.w	r0, [r9]
		 myChorus.baseDelay = delay;
 8000cec:	f8db 2000 	ldr.w	r2, [fp]
		 myChorus.depth = depth;
 8000cf0:	6088      	str	r0, [r1, #8]
		 myChorus.baseDelay = delay;
 8000cf2:	600a      	str	r2, [r1, #0]
		 myPhaser.stages = 15;
 8000cf4:	220f      	movs	r2, #15
		 myPhaser.depth = depth;
 8000cf6:	f8d9 1000 	ldr.w	r1, [r9]
		 myPhaser.baseDelay = delay;
 8000cfa:	f8db 0000 	ldr.w	r0, [fp]
		 myPhaser.depth = depth;
 8000cfe:	6099      	str	r1, [r3, #8]
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000d00:	2108      	movs	r1, #8
		 myPhaser.baseDelay = delay;
 8000d02:	6018      	str	r0, [r3, #0]
		 myPhaser.stages = 15;
 8000d04:	741a      	strb	r2, [r3, #16]
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000d06:	2201      	movs	r2, #1
 8000d08:	4825      	ldr	r0, [pc, #148]	@ (8000da0 <main+0x420>)
 8000d0a:	f003 f8a9 	bl	8003e60 <HAL_GPIO_WritePin>
		 DWT->CYCCNT = 0;
 8000d0e:	2300      	movs	r3, #0
		 supro_sim.process(&apipe);
 8000d10:	4924      	ldr	r1, [pc, #144]	@ (8000da4 <main+0x424>)
 8000d12:	4640      	mov	r0, r8
		 DWT->CYCCNT = 0;
 8000d14:	607b      	str	r3, [r7, #4]
		 supro_sim.process(&apipe);
 8000d16:	68ca      	ldr	r2, [r1, #12]
 8000d18:	4790      	blx	r2
		 cycles = DWT->CYCCNT;
 8000d1a:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <main+0x428>)
 8000d1c:	6878      	ldr	r0, [r7, #4]
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2108      	movs	r1, #8
		 cycles = DWT->CYCCNT;
 8000d22:	6018      	str	r0, [r3, #0]
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8000d24:	481e      	ldr	r0, [pc, #120]	@ (8000da0 <main+0x420>)
 8000d26:	f003 f89b 	bl	8003e60 <HAL_GPIO_WritePin>
		 arm_copy_f32(apipe.processBuffer, apipe.outBuffer, BUFFER_SIZE);
 8000d2a:	4820      	ldr	r0, [pc, #128]	@ (8000dac <main+0x42c>)
 8000d2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d30:	6841      	ldr	r1, [r0, #4]
 8000d32:	3008      	adds	r0, #8
 8000d34:	f005 fc04 	bl	8006540 <arm_copy_f32>
		 apipe.updateDACOutput(&apipe, dacOutput);
 8000d38:	6a32      	ldr	r2, [r6, #32]
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	4790      	blx	r2
  __ASM volatile ("dsb 0xF":::"memory");
 8000d40:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000d44:	4907      	ldr	r1, [pc, #28]	@ (8000d64 <main+0x3e4>)
 8000d46:	3c20      	subs	r4, #32
 8000d48:	f8c1 5268 	str.w	r5, [r1, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000d4c:	3520      	adds	r5, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8000d4e:	2c00      	cmp	r4, #0
 8000d50:	dcf9      	bgt.n	8000d46 <main+0x3c6>
 8000d52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d56:	f3bf 8f6f 	isb	sy
		 apipe.bufferReady = false;
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	7435      	strb	r5, [r6, #16]
 8000d5e:	e7ad      	b.n	8000cbc <main+0x33c>
	      __WFI();
 8000d60:	bf30      	wfi
 8000d62:	e7ab      	b.n	8000cbc <main+0x33c>
 8000d64:	e000ed00 	.word	0xe000ed00
 8000d68:	e0001000 	.word	0xe0001000
 8000d6c:	24002224 	.word	0x24002224
 8000d70:	240112a0 	.word	0x240112a0
 8000d74:	2401141c 	.word	0x2401141c
 8000d78:	24001224 	.word	0x24001224
 8000d7c:	24000224 	.word	0x24000224
 8000d80:	24011390 	.word	0x24011390
 8000d84:	240112cc 	.word	0x240112cc
 8000d88:	240022a0 	.word	0x240022a0
 8000d8c:	24002298 	.word	0x24002298
 8000d90:	3d4ccccd 	.word	0x3d4ccccd
 8000d94:	24002268 	.word	0x24002268
 8000d98:	24000000 	.word	0x24000000
 8000d9c:	2400223c 	.word	0x2400223c
 8000da0:	58020800 	.word	0x58020800
 8000da4:	24000014 	.word	0x24000014
 8000da8:	2400021c 	.word	0x2400021c
 8000dac:	240062a0 	.word	0x240062a0
 8000db0:	2400000c 	.word	0x2400000c
 8000db4:	24000008 	.word	0x24000008
 8000db8:	24000010 	.word	0x24000010

08000dbc <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <Error_Handler+0x2>

08000dc0 <phaserInit>:
 *      Author: Federico
 */

#include "phaser.h"

void phaserInit(phaser *p, float32_t wetness, float32_t depth, float32_t rate, uint8_t stages, uint32_t frameLength, uint32_t sampleRate) {
 8000dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dc4:	4604      	mov	r4, r0
    p->depth = depth;
    p->rate = rate;
    p->stages = stages;

    // Allocate delay buffers for each stage
    p->inDelayed = (float32_t *)malloc(stages * sizeof(float32_t));
 8000dc6:	ea4f 0881 	mov.w	r8, r1, lsl #2
void phaserInit(phaser *p, float32_t wetness, float32_t depth, float32_t rate, uint8_t stages, uint32_t frameLength, uint32_t sampleRate) {
 8000dca:	460d      	mov	r5, r1
 8000dcc:	ed2d 8b02 	vpush	{d8}
    p->wetness = wetness;
 8000dd0:	ed80 0a01 	vstr	s0, [r0, #4]
void phaserInit(phaser *p, float32_t wetness, float32_t depth, float32_t rate, uint8_t stages, uint32_t frameLength, uint32_t sampleRate) {
 8000dd4:	ee08 3a10 	vmov	s16, r3
    p->depth = depth;
 8000dd8:	edc0 0a02 	vstr	s1, [r0, #8]
    p->rate = rate;
 8000ddc:	ed80 1a03 	vstr	s2, [r0, #12]
    p->inDelayed = (float32_t *)malloc(stages * sizeof(float32_t));
 8000de0:	4640      	mov	r0, r8
    p->stages = stages;
 8000de2:	7421      	strb	r1, [r4, #16]
    p->inDelayed = (float32_t *)malloc(stages * sizeof(float32_t));
 8000de4:	f005 fce0 	bl	80067a8 <malloc>
 8000de8:	61a0      	str	r0, [r4, #24]
 8000dea:	4607      	mov	r7, r0
    p->outDelayed = (float32_t *)malloc(stages * sizeof(float32_t));
 8000dec:	4640      	mov	r0, r8
 8000dee:	f005 fcdb 	bl	80067a8 <malloc>
 8000df2:	61e0      	str	r0, [r4, #28]

    // Initialize buffers to zero
    for (uint8_t i = 0; i < stages; i++) {
 8000df4:	b155      	cbz	r5, 8000e0c <phaserInit+0x4c>
 8000df6:	4606      	mov	r6, r0
        p->inDelayed[i] = 0.0f;
 8000df8:	4642      	mov	r2, r8
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	f005 fd89 	bl	8006914 <memset>
        p->outDelayed[i] = 0.0f;
 8000e02:	4642      	mov	r2, r8
 8000e04:	2100      	movs	r1, #0
 8000e06:	4630      	mov	r0, r6
 8000e08:	f005 fd84 	bl	8006914 <memset>
    }

    // Initialize LFO time
    p->t = 0.0f;
    p->dt = 1.0f / (float32_t)sampleRate;
 8000e0c:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    p->t = 0.0f;
 8000e10:	2300      	movs	r3, #0
    p->dt = 1.0f / (float32_t)sampleRate;
 8000e12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    p->t = 0.0f;
 8000e16:	6263      	str	r3, [r4, #36]	@ 0x24
    p->dt = 1.0f / (float32_t)sampleRate;
 8000e18:	eec7 7a08 	vdiv.f32	s15, s14, s16
}
 8000e1c:	ecbd 8b02 	vpop	{d8}
    p->dt = 1.0f / (float32_t)sampleRate;
 8000e20:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
}
 8000e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000e28 <phaserApply>:


void phaserApply(phaser *p, pipe *pipe) {
 8000e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e2c:	f244 0508 	movw	r5, #16392	@ 0x4008
 8000e30:	f245 0608 	movw	r6, #20488	@ 0x5008

        float32_t dry = input;
        float32_t filtered = input;

        // Process through all-pass filter stages
        for (uint8_t stage = 0; stage < p->stages; stage++) {
 8000e34:	7c07      	ldrb	r7, [r0, #16]
void phaserApply(phaser *p, pipe *pipe) {
 8000e36:	4604      	mov	r4, r0
 8000e38:	440d      	add	r5, r1
 8000e3a:	440e      	add	r6, r1
 8000e3c:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8000e40:	ed2d 8b04 	vpush	{d8-d9}
        float32_t lfo = sinf(2.0f * M_PI * p->rate * p->t);
 8000e44:	ed9f 8b24 	vldr	d8, [pc, #144]	@ 8000ed8 <phaserApply+0xb0>
 8000e48:	edd0 9a09 	vldr	s19, [r0, #36]	@ 0x24
 8000e4c:	ed94 0a03 	vldr	s0, [r4, #12]
 8000e50:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
        float32_t input = pipe->processBuffer[n];
 8000e54:	ecb5 9a01 	vldmia	r5!, {s18}
        float32_t lfo = sinf(2.0f * M_PI * p->rate * p->t);
 8000e58:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8000e5c:	ee20 0b08 	vmul.f64	d0, d0, d8
 8000e60:	ee20 0b07 	vmul.f64	d0, d0, d7
 8000e64:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8000e68:	f005 fdc2 	bl	80069f0 <sinf>
        float32_t G = p->depth * lfo;
 8000e6c:	edd4 7a02 	vldr	s15, [r4, #8]
 8000e70:	ee20 0a27 	vmul.f32	s0, s0, s15
        for (uint8_t stage = 0; stage < p->stages; stage++) {
 8000e74:	b35f      	cbz	r7, 8000ece <phaserApply+0xa6>
 8000e76:	69a3      	ldr	r3, [r4, #24]
 8000e78:	eef1 5a40 	vneg.f32	s11, s0
        float32_t filtered = input;
 8000e7c:	eef0 7a49 	vmov.f32	s15, s18
 8000e80:	69e2      	ldr	r2, [r4, #28]
 8000e82:	eb08 0103 	add.w	r1, r8, r3
            float32_t x = filtered;
            float32_t y = p->inDelayed[stage] - G * x + G * p->outDelayed[stage];
 8000e86:	ed93 7a00 	vldr	s14, [r3]
 8000e8a:	edd2 6a00 	vldr	s13, [r2]
 8000e8e:	eea7 7aa5 	vfma.f32	s14, s15, s11

            // Update delay buffers
            p->inDelayed[stage] = x;
 8000e92:	ece3 7a01 	vstmia	r3!, {s15}
        for (uint8_t stage = 0; stage < p->stages; stage++) {
 8000e96:	4299      	cmp	r1, r3
            float32_t y = p->inDelayed[stage] - G * x + G * p->outDelayed[stage];
 8000e98:	eef0 7a47 	vmov.f32	s15, s14
 8000e9c:	eee6 7a80 	vfma.f32	s15, s13, s0
            p->outDelayed[stage] = y;
 8000ea0:	ece2 7a01 	vstmia	r2!, {s15}
        for (uint8_t stage = 0; stage < p->stages; stage++) {
 8000ea4:	d1ef      	bne.n	8000e86 <phaserApply+0x5e>

        // Mix dry and wet signal
        pipe->processBuffer[n] = dry + p->wetness * filtered;

        // Advance LFO time
        p->t += p->dt;
 8000ea6:	edd4 9a09 	vldr	s19, [r4, #36]	@ 0x24
        pipe->processBuffer[n] = dry + p->wetness * filtered;
 8000eaa:	ed94 7a01 	vldr	s14, [r4, #4]
    for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000eae:	42ae      	cmp	r6, r5
        pipe->processBuffer[n] = dry + p->wetness * filtered;
 8000eb0:	eea7 9a27 	vfma.f32	s18, s14, s15
 8000eb4:	ed05 9a01 	vstr	s18, [r5, #-4]
        p->t += p->dt;
 8000eb8:	edd4 7a0a 	vldr	s15, [r4, #40]	@ 0x28
 8000ebc:	ee79 9aa7 	vadd.f32	s19, s19, s15
 8000ec0:	edc4 9a09 	vstr	s19, [r4, #36]	@ 0x24
    for (uint32_t n = 0; n < BUFFER_SIZE; n++) {
 8000ec4:	d1c2      	bne.n	8000e4c <phaserApply+0x24>
    }
}
 8000ec6:	ecbd 8b04 	vpop	{d8-d9}
 8000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        float32_t filtered = input;
 8000ece:	eef0 7a49 	vmov.f32	s15, s18
 8000ed2:	e7ea      	b.n	8000eaa <phaserApply+0x82>
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	54442d18 	.word	0x54442d18
 8000edc:	401921fb 	.word	0x401921fb

08000ee0 <pipe_getDelayBuffer>:

float32_t *pipe_getDelayBuffer(pipe *self, uint16_t n)
{
    uint32_t offset = n * BUFFER_SIZE;

    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8000ee0:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
 8000ee4:	4a09      	ldr	r2, [pc, #36]	@ (8000f0c <pipe_getDelayBuffer+0x2c>)

    return &self->delayBuffer[index];
 8000ee6:	f241 4c02 	movw	ip, #5122	@ 0x1402
    uint32_t index = (self->delayIndex + DELAY_BUFFER_SIZE - offset) % DELAY_BUFFER_SIZE;
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000ef0:	eba3 2181 	sub.w	r1, r3, r1, lsl #10
 8000ef4:	fba2 2301 	umull	r2, r3, r2, r1
 8000ef8:	0b5b      	lsrs	r3, r3, #13
 8000efa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000efe:	eba1 21c3 	sub.w	r1, r1, r3, lsl #11
    return &self->delayBuffer[index];
 8000f02:	448c      	add	ip, r1
}
 8000f04:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	cccccccd 	.word	0xcccccccd

08000f10 <pipe_loadProcess>:
    }
}

static void pipe_loadProcess(pipe *self)
{
	arm_copy_f32(self->inBuffer, self->processBuffer, BUFFER_SIZE);
 8000f10:	f244 0108 	movw	r1, #16392	@ 0x4008
 8000f14:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 8000f18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1c:	4401      	add	r1, r0
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	f005 bb0e 	b.w	8006540 <arm_copy_f32>

08000f24 <pipe_updateDelayBuffer>:
{
 8000f24:	b510      	push	{r4, lr}
    arm_copy_f32(self->inBuffer, &self->delayBuffer[self->delayIndex], BUFFER_SIZE);
 8000f26:	f500 4470 	add.w	r4, r0, #61440	@ 0xf000
 8000f2a:	f241 4102 	movw	r1, #5122	@ 0x1402
 8000f2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f32:	68e3      	ldr	r3, [r4, #12]
 8000f34:	4419      	add	r1, r3
 8000f36:	f500 4380 	add.w	r3, r0, #16384	@ 0x4000
 8000f3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	f005 fafe 	bl	8006540 <arm_copy_f32>
    self->delayIndex += BUFFER_SIZE;
 8000f44:	68e3      	ldr	r3, [r4, #12]
 8000f46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
        self->delayIndex = 0;
 8000f4a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8000f4e:	bf28      	it	cs
 8000f50:	2300      	movcs	r3, #0
 8000f52:	60e3      	str	r3, [r4, #12]
}
 8000f54:	bd10      	pop	{r4, pc}
 8000f56:	bf00      	nop

08000f58 <pipe_updateDACOutput>:
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000f58:	f500 4370 	add.w	r3, r0, #61440	@ 0xf000
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8000f5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f60:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000fa0 <pipe_updateDACOutput+0x48>
{
 8000f64:	b570      	push	{r4, r5, r6, lr}
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8000f66:	f500 4580 	add.w	r5, r0, #16384	@ 0x4000
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000f6a:	7a1e      	ldrb	r6, [r3, #8]
{
 8000f6c:	460c      	mov	r4, r1
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8000f6e:	6869      	ldr	r1, [r5, #4]
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000f70:	fab6 f686 	clz	r6, r6
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8000f74:	4608      	mov	r0, r1
    uint8_t half = (self->ppState == 0) ? 1 : 0;
 8000f76:	0976      	lsrs	r6, r6, #5
    arm_scale_f32(self->outBuffer, DAC_VOLTS2BITS, self->outBuffer, BUFFER_SIZE);
 8000f78:	f005 fbc4 	bl	8006704 <arm_scale_f32>
    for (i = 0; i < BUFFER_SIZE; i++)
 8000f7c:	686a      	ldr	r2, [r5, #4]
 8000f7e:	eb04 21c6 	add.w	r1, r4, r6, lsl #11
 8000f82:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8000f86:	ecf2 7a01 	vldmia	r2!, {s15}
 8000f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    for (i = 0; i < BUFFER_SIZE; i++)
 8000f8e:	4290      	cmp	r0, r2
        dacBuffer[BUFFER_SIZE * half + i] = (uint16_t)self->outBuffer[i];
 8000f90:	ee17 3a90 	vmov	r3, s15
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	f821 3b02 	strh.w	r3, [r1], #2
    for (i = 0; i < BUFFER_SIZE; i++)
 8000f9a:	d1f4      	bne.n	8000f86 <pipe_updateDACOutput+0x2e>
}
 8000f9c:	bd70      	pop	{r4, r5, r6, pc}
 8000f9e:	bf00      	nop
 8000fa0:	449b26ca 	.word	0x449b26ca

08000fa4 <pipe_ADC_Complete>:
{
 8000fa4:	b538      	push	{r3, r4, r5, lr}
 8000fa6:	f500 5580 	add.w	r5, r0, #4096	@ 0x1000
 8000faa:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8000fac:	f501 6c00 	add.w	ip, r1, #2048	@ 0x800
 8000fb0:	f500 5e00 	add.w	lr, r0, #8192	@ 0x2000
 8000fb4:	462a      	mov	r2, r5
        self->inBuffer2[i] = (float32_t)adcInput[BUFFER_SIZE + i];
 8000fb6:	f83c 3b02 	ldrh.w	r3, [ip], #2
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc4:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 8000fc8:	4572      	cmp	r2, lr
 8000fca:	d1f4      	bne.n	8000fb6 <pipe_ADC_Complete+0x12>
    arm_scale_f32(self->inBuffer2, ADC_BITS2VOLTS, self->inBuffer2, BUFFER_SIZE);
 8000fcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000ff8 <pipe_ADC_Complete+0x54>
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	f005 fb94 	bl	8006704 <arm_scale_f32>
    self->inBuffer  = self->inBuffer2;
 8000fdc:	f504 4280 	add.w	r2, r4, #16384	@ 0x4000
    self->ppState   = 0;
 8000fe0:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->outBuffer = self->outBuffer2;
 8000fe4:	f504 5440 	add.w	r4, r4, #12288	@ 0x3000
    self->ppState   = 0;
 8000fe8:	2100      	movs	r1, #0
    self->outBuffer = self->outBuffer2;
 8000fea:	e9c2 5400 	strd	r5, r4, [r2]
    self->bufferReady = true;
 8000fee:	2201      	movs	r2, #1
    self->ppState   = 0;
 8000ff0:	7219      	strb	r1, [r3, #8]
    self->bufferReady = true;
 8000ff2:	741a      	strb	r2, [r3, #16]
}
 8000ff4:	bd38      	pop	{r3, r4, r5, pc}
 8000ff6:	bf00      	nop
 8000ff8:	38533333 	.word	0x38533333

08000ffc <pipe_ADC_HalfComplete>:
{
 8000ffc:	b510      	push	{r4, lr}
 8000ffe:	468c      	mov	ip, r1
 8001000:	4604      	mov	r4, r0
    for (i = 0; i < BUFFER_SIZE; i++)
 8001002:	4602      	mov	r2, r0
 8001004:	f500 5e80 	add.w	lr, r0, #4096	@ 0x1000
        self->inBuffer1[i] = (float32_t)adcInput[i];
 8001008:	f83c 3b02 	ldrh.w	r3, [ip], #2
 800100c:	b29b      	uxth	r3, r3
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001016:	ece2 7a01 	vstmia	r2!, {s15}
    for (i = 0; i < BUFFER_SIZE; i++)
 800101a:	4572      	cmp	r2, lr
 800101c:	d1f4      	bne.n	8001008 <pipe_ADC_HalfComplete+0xc>
    arm_scale_f32(self->inBuffer1, ADC_BITS2VOLTS, self->inBuffer1, BUFFER_SIZE);
 800101e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001022:	4621      	mov	r1, r4
 8001024:	4620      	mov	r0, r4
 8001026:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001048 <pipe_ADC_HalfComplete+0x4c>
 800102a:	f005 fb6b 	bl	8006704 <arm_scale_f32>
    self->ppState   = 1;
 800102e:	2201      	movs	r2, #1
 8001030:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
    self->inBuffer  = self->inBuffer1;
 8001034:	f504 4180 	add.w	r1, r4, #16384	@ 0x4000
    self->outBuffer = self->outBuffer1;
 8001038:	f504 5000 	add.w	r0, r4, #8192	@ 0x2000
 800103c:	e9c1 4000 	strd	r4, r0, [r1]
    self->ppState   = 1;
 8001040:	721a      	strb	r2, [r3, #8]
    self->bufferReady = true;
 8001042:	741a      	strb	r2, [r3, #16]
}
 8001044:	bd10      	pop	{r4, pc}
 8001046:	bf00      	nop
 8001048:	38533333 	.word	0x38533333

0800104c <pipeInit>:
}

void pipeInit(pipe *self)
{
 800104c:	4684      	mov	ip, r0
    self->delayIndex = 0;
    self->bufferReady = false;

    self->adcHalfComplete = pipe_ADC_HalfComplete;
    self->adcComplete     = pipe_ADC_Complete;
    self->updateDelayBuffer = pipe_updateDelayBuffer;
 800104e:	4811      	ldr	r0, [pc, #68]	@ (8001094 <pipeInit+0x48>)
    self->ppState   = 0;
 8001050:	2100      	movs	r1, #0
    self->inBuffer  = self->inBuffer2;
 8001052:	f50c 4280 	add.w	r2, ip, #16384	@ 0x4000
    self->ppState   = 0;
 8001056:	f50c 4370 	add.w	r3, ip, #61440	@ 0xf000
{
 800105a:	b470      	push	{r4, r5, r6}
    self->inBuffer  = self->inBuffer2;
 800105c:	f50c 5680 	add.w	r6, ip, #4096	@ 0x1000
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 8001060:	4d0d      	ldr	r5, [pc, #52]	@ (8001098 <pipeInit+0x4c>)
    self->adcComplete     = pipe_ADC_Complete;
 8001062:	4c0e      	ldr	r4, [pc, #56]	@ (800109c <pipeInit+0x50>)
    self->inBuffer  = self->inBuffer2;
 8001064:	6016      	str	r6, [r2, #0]
    self->outBuffer = self->outBuffer2;
 8001066:	f50c 5640 	add.w	r6, ip, #12288	@ 0x3000
 800106a:	6056      	str	r6, [r2, #4]
    self->updateDACOutput = pipe_updateDACOutput;
 800106c:	4a0c      	ldr	r2, [pc, #48]	@ (80010a0 <pipeInit+0x54>)
    self->adcHalfComplete = pipe_ADC_HalfComplete;
 800106e:	615d      	str	r5, [r3, #20]
    self->ppState   = 0;
 8001070:	7219      	strb	r1, [r3, #8]
    self->adcComplete     = pipe_ADC_Complete;
 8001072:	619c      	str	r4, [r3, #24]
    self->delayIndex = 0;
 8001074:	60d9      	str	r1, [r3, #12]
    self->bufferReady = false;
 8001076:	7419      	strb	r1, [r3, #16]
    self->updateDACOutput = pipe_updateDACOutput;
 8001078:	e9c3 0207 	strd	r0, r2, [r3, #28]
    self->getDelayBuffer = pipe_getDelayBuffer;
 800107c:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <pipeInit+0x58>)
    self->loadProcess = pipe_loadProcess;
 800107e:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <pipeInit+0x5c>)
 8001080:	e9c3 0209 	strd	r0, r2, [r3, #36]	@ 0x24

    for(int i = 0; i < BUFFER_SIZE ; i++) {

    	self->processBuffer[i] = 0;
 8001084:	f244 0008 	movw	r0, #16392	@ 0x4008
 8001088:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800108c:	4460      	add	r0, ip

    }

}
 800108e:	bc70      	pop	{r4, r5, r6}
    	self->processBuffer[i] = 0;
 8001090:	f005 bc40 	b.w	8006914 <memset>
 8001094:	08000f25 	.word	0x08000f25
 8001098:	08000ffd 	.word	0x08000ffd
 800109c:	08000fa5 	.word	0x08000fa5
 80010a0:	08000f59 	.word	0x08000f59
 80010a4:	08000ee1 	.word	0x08000ee1
 80010a8:	08000f11 	.word	0x08000f11

080010ac <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <HAL_MspInit+0x20>)
{
 80010ae:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80010b4:	f042 0202 	orr.w	r2, r2, #2
 80010b8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80010bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c8:	b002      	add	sp, #8
 80010ca:	4770      	bx	lr
 80010cc:	58024400 	.word	0x58024400

080010d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	2100      	movs	r1, #0
{
 80010d6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	22c0      	movs	r2, #192	@ 0xc0
 80010da:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	9106      	str	r1, [sp, #24]
 80010de:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80010e2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e6:	f005 fc15 	bl	8006914 <memset>
  if(hadc->Instance==ADC1)
 80010ea:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <HAL_ADC_MspInit+0xe0>)
 80010ec:	6822      	ldr	r2, [r4, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d001      	beq.n	80010f6 <HAL_ADC_MspInit+0x26>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010f2:	b038      	add	sp, #224	@ 0xe0
 80010f4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001102:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001106:	9331      	str	r3, [sp, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001108:	f003 fd52 	bl	8004bb0 <HAL_RCCEx_PeriphCLKConfig>
 800110c:	2800      	cmp	r0, #0
 800110e:	d148      	bne.n	80011a2 <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <HAL_ADC_MspInit+0xe4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA1_Stream0;
 8001116:	4d28      	ldr	r5, [pc, #160]	@ (80011b8 <HAL_ADC_MspInit+0xe8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001118:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800111c:	f042 0220 	orr.w	r2, r2, #32
 8001120:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8001124:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001128:	f002 0220 	and.w	r2, r2, #32
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001134:	f042 0201 	orr.w	r2, r2, #1
 8001138:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800113c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800114a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	481b      	ldr	r0, [pc, #108]	@ (80011bc <HAL_ADC_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001150:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f002 fc7e 	bl	8003a54 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8001158:	4a19      	ldr	r2, [pc, #100]	@ (80011c0 <HAL_ADC_MspInit+0xf0>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800115a:	2309      	movs	r3, #9
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800115c:	4628      	mov	r0, r5
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115e:	626e      	str	r6, [r5, #36]	@ 0x24
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001160:	e885 004c 	stmia.w	r5, {r2, r3, r6}
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001164:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001168:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800116c:	e9c5 6203 	strd	r6, r2, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001170:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001172:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001176:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800117a:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800117e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001182:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001184:	f001 fc90 	bl	8002aa8 <HAL_DMA_Init>
 8001188:	b970      	cbnz	r0, 80011a8 <HAL_ADC_MspInit+0xd8>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800118e:	64e5      	str	r5, [r4, #76]	@ 0x4c
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001190:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001192:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001194:	f001 f940 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001198:	2012      	movs	r0, #18
 800119a:	f001 f979 	bl	8002490 <HAL_NVIC_EnableIRQ>
}
 800119e:	b038      	add	sp, #224	@ 0xe0
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80011a2:	f7ff fe0b 	bl	8000dbc <Error_Handler>
 80011a6:	e7b3      	b.n	8001110 <HAL_ADC_MspInit+0x40>
      Error_Handler();
 80011a8:	f7ff fe08 	bl	8000dbc <Error_Handler>
 80011ac:	e7ed      	b.n	800118a <HAL_ADC_MspInit+0xba>
 80011ae:	bf00      	nop
 80011b0:	40022000 	.word	0x40022000
 80011b4:	58024400 	.word	0x58024400
 80011b8:	240113a4 	.word	0x240113a4
 80011bc:	58020000 	.word	0x58020000
 80011c0:	40020010 	.word	0x40020010

080011c4 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80011c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001278 <HAL_DAC_MspInit+0xb4>)
 80011c6:	6802      	ldr	r2, [r0, #0]
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 80011ca:	429a      	cmp	r2, r3
{
 80011cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f04f 0400 	mov.w	r4, #0
 80011d2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80011d6:	9404      	str	r4, [sp, #16]
 80011d8:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 80011dc:	d001      	beq.n	80011e2 <HAL_DAC_MspInit+0x1e>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80011de:	b008      	add	sp, #32
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 80011e2:	4b26      	ldr	r3, [pc, #152]	@ (800127c <HAL_DAC_MspInit+0xb8>)
 80011e4:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80011e8:	4e25      	ldr	r6, [pc, #148]	@ (8001280 <HAL_DAC_MspInit+0xbc>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 80011ea:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80011ee:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80011f2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80011f6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80011fa:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800120e:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800121a:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	4819      	ldr	r0, [pc, #100]	@ (8001284 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001220:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f002 fc16 	bl	8003a54 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8001228:	4a17      	ldr	r2, [pc, #92]	@ (8001288 <HAL_DAC_MspInit+0xc4>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800122a:	2343      	movs	r3, #67	@ 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800122c:	4630      	mov	r0, r6
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122e:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001230:	6234      	str	r4, [r6, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001232:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001234:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001238:	2240      	movs	r2, #64	@ 0x40
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800123a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800123e:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001240:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001244:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124a:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800124e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001252:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001254:	f001 fc28 	bl	8002aa8 <HAL_DMA_Init>
 8001258:	b958      	cbnz	r0, 8001272 <HAL_DAC_MspInit+0xae>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800125c:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800125e:	2036      	movs	r0, #54	@ 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001260:	63b5      	str	r5, [r6, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001262:	4611      	mov	r1, r2
 8001264:	f001 f8d8 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001268:	2036      	movs	r0, #54	@ 0x36
 800126a:	f001 f911 	bl	8002490 <HAL_NVIC_EnableIRQ>
}
 800126e:	b008      	add	sp, #32
 8001270:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001272:	f7ff fda3 	bl	8000dbc <Error_Handler>
 8001276:	e7f0      	b.n	800125a <HAL_DAC_MspInit+0x96>
 8001278:	40007400 	.word	0x40007400
 800127c:	58024400 	.word	0x58024400
 8001280:	24011318 	.word	0x24011318
 8001284:	58020000 	.word	0x58020000
 8001288:	40020028 	.word	0x40020028

0800128c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM8)
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_TIM_Base_MspInit+0x2c>)
 800128e:	6802      	ldr	r2, [r0, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d000      	beq.n	8001296 <HAL_TIM_Base_MspInit+0xa>
 8001294:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_TIM_Base_MspInit+0x30>)
{
 8001298:	b082      	sub	sp, #8
    __HAL_RCC_TIM8_CLK_ENABLE();
 800129a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800129e:	f042 0202 	orr.w	r2, r2, #2
 80012a2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80012a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 80012b2:	b002      	add	sp, #8
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40010400 	.word	0x40010400
 80012bc:	58024400 	.word	0x58024400

080012c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	e7fe      	b.n	80012c0 <NMI_Handler>
 80012c2:	bf00      	nop

080012c4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <HardFault_Handler>
 80012c6:	bf00      	nop

080012c8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler>
 80012ca:	bf00      	nop

080012cc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <BusFault_Handler>
 80012ce:	bf00      	nop

080012d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler>
 80012d2:	bf00      	nop

080012d4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 b940 	b.w	8001564 <HAL_IncTick>

080012e4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012e4:	4801      	ldr	r0, [pc, #4]	@ (80012ec <DMA1_Stream0_IRQHandler+0x8>)
 80012e6:	f002 b9a3 	b.w	8003630 <HAL_DMA_IRQHandler>
 80012ea:	bf00      	nop
 80012ec:	240113a4 	.word	0x240113a4

080012f0 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80012f0:	4801      	ldr	r0, [pc, #4]	@ (80012f8 <DMA1_Stream1_IRQHandler+0x8>)
 80012f2:	f002 b99d 	b.w	8003630 <HAL_DMA_IRQHandler>
 80012f6:	bf00      	nop
 80012f8:	24011318 	.word	0x24011318

080012fc <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012fc:	4801      	ldr	r0, [pc, #4]	@ (8001304 <ADC_IRQHandler+0x8>)
 80012fe:	f000 b953 	b.w	80015a8 <HAL_ADC_IRQHandler>
 8001302:	bf00      	nop
 8001304:	2401141c 	.word	0x2401141c

08001308 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001308:	4801      	ldr	r0, [pc, #4]	@ (8001310 <TIM6_DAC_IRQHandler+0x8>)
 800130a:	f001 b9e5 	b.w	80026d8 <HAL_DAC_IRQHandler>
 800130e:	bf00      	nop
 8001310:	24011390 	.word	0x24011390

08001314 <supro_process>:
    // ...

    /* 3) Second FIR filter */
    // ...

    if (doChorus)
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <supro_process+0x30>)
 8001316:	6819      	ldr	r1, [r3, #0]
{
 8001318:	b510      	push	{r4, lr}
 800131a:	4604      	mov	r4, r0
    if (doChorus)
 800131c:	b919      	cbnz	r1, 8001326 <supro_process+0x12>
    {
        chorusApply(&myChorus, p);
    }

    if (doPhaser)
 800131e:	480a      	ldr	r0, [pc, #40]	@ (8001348 <supro_process+0x34>)
 8001320:	6802      	ldr	r2, [r0, #0]
 8001322:	b942      	cbnz	r2, 8001336 <supro_process+0x22>
    {
        phaserApply(&myPhaser, p);
    }


}
 8001324:	bd10      	pop	{r4, pc}
        chorusApply(&myChorus, p);
 8001326:	4601      	mov	r1, r0
 8001328:	4808      	ldr	r0, [pc, #32]	@ (800134c <supro_process+0x38>)
 800132a:	f7ff f9d9 	bl	80006e0 <chorusApply>
    if (doPhaser)
 800132e:	4806      	ldr	r0, [pc, #24]	@ (8001348 <supro_process+0x34>)
 8001330:	6802      	ldr	r2, [r0, #0]
 8001332:	2a00      	cmp	r2, #0
 8001334:	d0f6      	beq.n	8001324 <supro_process+0x10>
        phaserApply(&myPhaser, p);
 8001336:	4621      	mov	r1, r4
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <supro_process+0x3c>)
}
 800133a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        phaserApply(&myPhaser, p);
 800133e:	f7ff bd73 	b.w	8000e28 <phaserApply>
 8001342:	bf00      	nop
 8001344:	24000220 	.word	0x24000220
 8001348:	24000004 	.word	0x24000004
 800134c:	24002268 	.word	0x24002268
 8001350:	2400223c 	.word	0x2400223c

08001354 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001354:	490d      	ldr	r1, [pc, #52]	@ (800138c <_sbrk+0x38>)
{
 8001356:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 800135a:	6808      	ldr	r0, [r1, #0]
{
 800135c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800135e:	4c0d      	ldr	r4, [pc, #52]	@ (8001394 <_sbrk+0x40>)
 8001360:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001362:	b120      	cbz	r0, 800136e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001364:	4403      	add	r3, r0
 8001366:	4293      	cmp	r3, r2
 8001368:	d807      	bhi.n	800137a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800136a:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800136c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800136e:	4c0a      	ldr	r4, [pc, #40]	@ (8001398 <_sbrk+0x44>)
 8001370:	4620      	mov	r0, r4
 8001372:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001374:	4403      	add	r3, r0
 8001376:	4293      	cmp	r3, r2
 8001378:	d9f7      	bls.n	800136a <_sbrk+0x16>
    errno = ENOMEM;
 800137a:	f005 fae3 	bl	8006944 <__errno>
 800137e:	220c      	movs	r2, #12
 8001380:	4603      	mov	r3, r0
    return (void *)-1;
 8001382:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	bd10      	pop	{r4, pc}
 800138a:	bf00      	nop
 800138c:	2406d480 	.word	0x2406d480
 8001390:	24080000 	.word	0x24080000
 8001394:	00000400 	.word	0x00000400
 8001398:	2406d5d0 	.word	0x2406d5d0

0800139c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800139c:	4927      	ldr	r1, [pc, #156]	@ (800143c <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800139e:	4a28      	ldr	r2, [pc, #160]	@ (8001440 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013a0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 80013a8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ae:	6813      	ldr	r3, [r2, #0]
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	2b06      	cmp	r3, #6
 80013b6:	d805      	bhi.n	80013c4 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013b8:	6813      	ldr	r3, [r2, #0]
 80013ba:	f023 030f 	bic.w	r3, r3, #15
 80013be:	f043 0307 	orr.w	r3, r3, #7
 80013c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013c6:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001448 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 80013ca:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013cc:	481c      	ldr	r0, [pc, #112]	@ (8001440 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 80013ce:	f041 0101 	orr.w	r1, r1, #1
 80013d2:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80013d4:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80013d6:	6819      	ldr	r1, [r3, #0]
 80013d8:	400a      	ands	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013dc:	6803      	ldr	r3, [r0, #0]
 80013de:	071b      	lsls	r3, r3, #28
 80013e0:	d505      	bpl.n	80013ee <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e2:	6803      	ldr	r3, [r0, #0]
 80013e4:	f023 030f 	bic.w	r3, r3, #15
 80013e8:	f043 0307 	orr.w	r3, r3, #7
 80013ec:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <SystemInit+0xa8>)
 80013f0:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013f2:	4916      	ldr	r1, [pc, #88]	@ (800144c <SystemInit+0xb0>)
  RCC->PLLCFGR = 0x01FF0000;
 80013f4:	4816      	ldr	r0, [pc, #88]	@ (8001450 <SystemInit+0xb4>)
  RCC->PLLCKSELR = 0x02020200;
 80013f6:	4c17      	ldr	r4, [pc, #92]	@ (8001454 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 80013f8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80013fa:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80013fc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80013fe:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8001400:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001402:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001404:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001406:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001408:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800140a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800140c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800140e:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001410:	4811      	ldr	r0, [pc, #68]	@ (8001458 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8001412:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8001416:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001418:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800141a:	6803      	ldr	r3, [r0, #0]
 800141c:	f36f 030f 	bfc	r3, #0, #16
 8001420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001424:	d203      	bcs.n	800142e <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001426:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <SystemInit+0xc0>)
 8001428:	2201      	movs	r2, #1
 800142a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <SystemInit+0xc4>)
 8001430:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001434:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001438:	601a      	str	r2, [r3, #0]
}
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00
 8001440:	52002000 	.word	0x52002000
 8001444:	58024400 	.word	0x58024400
 8001448:	eaf6ed7f 	.word	0xeaf6ed7f
 800144c:	01010280 	.word	0x01010280
 8001450:	01ff0000 	.word	0x01ff0000
 8001454:	02020200 	.word	0x02020200
 8001458:	5c001000 	.word	0x5c001000
 800145c:	51008000 	.word	0x51008000
 8001460:	52004000 	.word	0x52004000

08001464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800149c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001468:	f7ff ff98 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	@ (80014a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	@ (80014b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001492:	f005 fa5d 	bl	8006950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001496:	f7ff fa73 	bl	8000980 <main>
  bx  lr
 800149a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800149c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014a4:	24000200 	.word	0x24000200
  ldr r2, =_sidata
 80014a8:	08076138 	.word	0x08076138
  ldr r2, =_sbss
 80014ac:	24000200 	.word	0x24000200
  ldr r4, =_ebss
 80014b0:	2406d5d0 	.word	0x2406d5d0

080014b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC3_IRQHandler>
	...

080014b8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <HAL_InitTick+0x40>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b90b      	cbnz	r3, 80014c2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80014be:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014c0:	4770      	bx	lr
{
 80014c2:	b510      	push	{r4, lr}
 80014c4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ca:	4a0c      	ldr	r2, [pc, #48]	@ (80014fc <HAL_InitTick+0x44>)
 80014cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d0:	6810      	ldr	r0, [r2, #0]
 80014d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80014d6:	f000 ffe9 	bl	80024ac <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	2c0f      	cmp	r4, #15
 80014dc:	d800      	bhi.n	80014e0 <HAL_InitTick+0x28>
 80014de:	b108      	cbz	r0, 80014e4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80014e0:	2001      	movs	r0, #1
}
 80014e2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e4:	2200      	movs	r2, #0
 80014e6:	4621      	mov	r1, r4
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f000 ff94 	bl	8002418 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f0:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <HAL_InitTick+0x48>)
 80014f2:	2000      	movs	r0, #0
 80014f4:	601c      	str	r4, [r3, #0]
}
 80014f6:	bd10      	pop	{r4, pc}
 80014f8:	240001a8 	.word	0x240001a8
 80014fc:	240001a4 	.word	0x240001a4
 8001500:	240001ac 	.word	0x240001ac

08001504 <HAL_Init>:
{
 8001504:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001506:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001508:	4c12      	ldr	r4, [pc, #72]	@ (8001554 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150a:	f000 ff73 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800150e:	f003 f82f 	bl	8004570 <HAL_RCC_GetSysClockFreq>
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <HAL_Init+0x54>)
 8001514:	4911      	ldr	r1, [pc, #68]	@ (800155c <HAL_Init+0x58>)
 8001516:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001518:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800151a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800151e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001522:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001524:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001526:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800152a:	490d      	ldr	r1, [pc, #52]	@ (8001560 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800152c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001530:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001532:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8001536:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001538:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800153a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153c:	f7ff ffbc 	bl	80014b8 <HAL_InitTick>
 8001540:	b110      	cbz	r0, 8001548 <HAL_Init+0x44>
    return HAL_ERROR;
 8001542:	2401      	movs	r4, #1
}
 8001544:	4620      	mov	r0, r4
 8001546:	bd10      	pop	{r4, pc}
 8001548:	4604      	mov	r4, r0
  HAL_MspInit();
 800154a:	f7ff fdaf 	bl	80010ac <HAL_MspInit>
}
 800154e:	4620      	mov	r0, r4
 8001550:	bd10      	pop	{r4, pc}
 8001552:	bf00      	nop
 8001554:	240001a0 	.word	0x240001a0
 8001558:	58024400 	.word	0x58024400
 800155c:	08062b80 	.word	0x08062b80
 8001560:	240001a4 	.word	0x240001a4

08001564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001564:	4a03      	ldr	r2, [pc, #12]	@ (8001574 <HAL_IncTick+0x10>)
 8001566:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <HAL_IncTick+0x14>)
 8001568:	6811      	ldr	r1, [r2, #0]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	440b      	add	r3, r1
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	2406d484 	.word	0x2406d484
 8001578:	240001a8 	.word	0x240001a8

0800157c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800157c:	4b01      	ldr	r3, [pc, #4]	@ (8001584 <HAL_GetTick+0x8>)
 800157e:	6818      	ldr	r0, [r3, #0]
}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	2406d484 	.word	0x2406d484

08001588 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001588:	4b01      	ldr	r3, [pc, #4]	@ (8001590 <HAL_GetREVID+0x8>)
 800158a:	6818      	ldr	r0, [r3, #0]
}
 800158c:	0c00      	lsrs	r0, r0, #16
 800158e:	4770      	bx	lr
 8001590:	5c001000 	.word	0x5c001000

08001594 <ADC_DMAHalfConvCplt>:

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001594:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8001596:	b508      	push	{r3, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001598:	f7ff f93c 	bl	8000814 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800159c:	bd08      	pop	{r3, pc}
 800159e:	bf00      	nop

080015a0 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop

080015a4 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop

080015a8 <HAL_ADC_IRQHandler>:
{
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015aa:	4a8e      	ldr	r2, [pc, #568]	@ (80017e4 <HAL_ADC_IRQHandler+0x23c>)
{
 80015ac:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015ae:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015b0:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015b2:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80015b4:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015b6:	f000 8095 	beq.w	80016e4 <HAL_ADC_IRQHandler+0x13c>
 80015ba:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80015be:	4293      	cmp	r3, r2
 80015c0:	f000 8090 	beq.w	80016e4 <HAL_ADC_IRQHandler+0x13c>
 80015c4:	4a88      	ldr	r2, [pc, #544]	@ (80017e8 <HAL_ADC_IRQHandler+0x240>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015c6:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80015c8:	07a9      	lsls	r1, r5, #30
 80015ca:	f007 071f 	and.w	r7, r7, #31
 80015ce:	d502      	bpl.n	80015d6 <HAL_ADC_IRQHandler+0x2e>
 80015d0:	07b2      	lsls	r2, r6, #30
 80015d2:	f100 80aa 	bmi.w	800172a <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80015d6:	0769      	lsls	r1, r5, #29
 80015d8:	d579      	bpl.n	80016ce <HAL_ADC_IRQHandler+0x126>
 80015da:	0772      	lsls	r2, r6, #29
 80015dc:	d577      	bpl.n	80016ce <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80015e0:	06d2      	lsls	r2, r2, #27
 80015e2:	d403      	bmi.n	80015ec <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80015e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ea:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 80015f2:	d11c      	bne.n	800162e <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015f4:	4a7d      	ldr	r2, [pc, #500]	@ (80017ec <HAL_ADC_IRQHandler+0x244>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	f000 80e7 	beq.w	80017ca <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80015fc:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80015fe:	0491      	lsls	r1, r2, #18
 8001600:	d415      	bmi.n	800162e <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	0712      	lsls	r2, r2, #28
 8001606:	d512      	bpl.n	800162e <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	0750      	lsls	r0, r2, #29
 800160c:	f100 80f2 	bmi.w	80017f4 <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	f022 020c 	bic.w	r2, r2, #12
 8001616:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001618:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800161a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800161e:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001620:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001622:	04d9      	lsls	r1, r3, #19
 8001624:	d403      	bmi.n	800162e <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001626:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff f910 	bl	8000854 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800163a:	06aa      	lsls	r2, r5, #26
 800163c:	d54d      	bpl.n	80016da <HAL_ADC_IRQHandler+0x132>
 800163e:	06b0      	lsls	r0, r6, #26
 8001640:	d54b      	bpl.n	80016da <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001642:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001644:	06d0      	lsls	r0, r2, #27
 8001646:	d403      	bmi.n	8001650 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001648:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800164a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800164e:	6562      	str	r2, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001650:	4966      	ldr	r1, [pc, #408]	@ (80017ec <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001652:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001654:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001656:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001658:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
 800165c:	d073      	beq.n	8001746 <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800165e:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001660:	b9d2      	cbnz	r2, 8001698 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001662:	018a      	lsls	r2, r1, #6
 8001664:	f100 80a9 	bmi.w	80017ba <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	0650      	lsls	r0, r2, #25
 800166c:	d514      	bpl.n	8001698 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800166e:	0289      	lsls	r1, r1, #10
 8001670:	d412      	bmi.n	8001698 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	0712      	lsls	r2, r2, #28
 8001676:	f100 80c8 	bmi.w	800180a <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001680:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001682:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001684:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001688:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800168a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800168c:	05d8      	lsls	r0, r3, #23
 800168e:	d403      	bmi.n	8001698 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001690:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001698:	4620      	mov	r0, r4
 800169a:	f000 fe3f 	bl	800231c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	2260      	movs	r2, #96	@ 0x60
 80016a2:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016a4:	0629      	lsls	r1, r5, #24
 80016a6:	d501      	bpl.n	80016ac <HAL_ADC_IRQHandler+0x104>
 80016a8:	0632      	lsls	r2, r6, #24
 80016aa:	d45f      	bmi.n	800176c <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80016ac:	05e8      	lsls	r0, r5, #23
 80016ae:	d501      	bpl.n	80016b4 <HAL_ADC_IRQHandler+0x10c>
 80016b0:	05f1      	lsls	r1, r6, #23
 80016b2:	d466      	bmi.n	8001782 <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80016b4:	05aa      	lsls	r2, r5, #22
 80016b6:	d501      	bpl.n	80016bc <HAL_ADC_IRQHandler+0x114>
 80016b8:	05b0      	lsls	r0, r6, #22
 80016ba:	d44b      	bmi.n	8001754 <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80016bc:	06e9      	lsls	r1, r5, #27
 80016be:	d501      	bpl.n	80016c4 <HAL_ADC_IRQHandler+0x11c>
 80016c0:	06f2      	lsls	r2, r6, #27
 80016c2:	d411      	bmi.n	80016e8 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80016c4:	0569      	lsls	r1, r5, #21
 80016c6:	d501      	bpl.n	80016cc <HAL_ADC_IRQHandler+0x124>
 80016c8:	0572      	lsls	r2, r6, #21
 80016ca:	d466      	bmi.n	800179a <HAL_ADC_IRQHandler+0x1f2>
}
 80016cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016ce:	0728      	lsls	r0, r5, #28
 80016d0:	d5b3      	bpl.n	800163a <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016d2:	0731      	lsls	r1, r6, #28
 80016d4:	d483      	bmi.n	80015de <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80016d6:	06aa      	lsls	r2, r5, #26
 80016d8:	d4b1      	bmi.n	800163e <HAL_ADC_IRQHandler+0x96>
 80016da:	0669      	lsls	r1, r5, #25
 80016dc:	d5e2      	bpl.n	80016a4 <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80016de:	0672      	lsls	r2, r6, #25
 80016e0:	d5e0      	bpl.n	80016a4 <HAL_ADC_IRQHandler+0xfc>
 80016e2:	e7ae      	b.n	8001642 <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016e4:	4a42      	ldr	r2, [pc, #264]	@ (80017f0 <HAL_ADC_IRQHandler+0x248>)
 80016e6:	e76e      	b.n	80015c6 <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80016e8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80016ea:	b17a      	cbz	r2, 800170c <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80016ec:	2f00      	cmp	r7, #0
 80016ee:	d075      	beq.n	80017dc <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80016f0:	4a3c      	ldr	r2, [pc, #240]	@ (80017e4 <HAL_ADC_IRQHandler+0x23c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	f000 8087 	beq.w	8001806 <HAL_ADC_IRQHandler+0x25e>
 80016f8:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80016fc:	4293      	cmp	r3, r2
 80016fe:	f000 8082 	beq.w	8001806 <HAL_ADC_IRQHandler+0x25e>
 8001702:	4a39      	ldr	r2, [pc, #228]	@ (80017e8 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001704:	6892      	ldr	r2, [r2, #8]
 8001706:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 800170a:	d00b      	beq.n	8001724 <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800170c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_ADC_ErrorCallback(hadc);
 800170e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001710:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001714:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001716:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 800171e:	f7ff ff41 	bl	80015a4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	2210      	movs	r2, #16
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e7cc      	b.n	80016c4 <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800172a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800172c:	06d8      	lsls	r0, r3, #27
 800172e:	d403      	bmi.n	8001738 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001730:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001732:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001736:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001738:	4620      	mov	r0, r4
 800173a:	f000 fdf7 	bl	800232c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	2202      	movs	r2, #2
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e747      	b.n	80015d6 <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001746:	21c1      	movs	r1, #193	@ 0xc1
 8001748:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800174a:	07c9      	lsls	r1, r1, #31
 800174c:	d487      	bmi.n	800165e <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800174e:	4925      	ldr	r1, [pc, #148]	@ (80017e4 <HAL_ADC_IRQHandler+0x23c>)
 8001750:	68c9      	ldr	r1, [r1, #12]
 8001752:	e785      	b.n	8001660 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001754:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001756:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800175c:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800175e:	f000 fde3 	bl	8002328 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e7a7      	b.n	80016bc <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800176c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800176e:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001774:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001776:	f7ff ff13 	bl	80015a0 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	2280      	movs	r2, #128	@ 0x80
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e794      	b.n	80016ac <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001782:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001784:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800178a:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800178c:	f000 fdca 	bl	8002324 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e78c      	b.n	80016b4 <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800179a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800179c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017a0:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017a6:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80017a8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80017aa:	f042 0208 	orr.w	r2, r2, #8
 80017ae:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017b0:	6019      	str	r1, [r3, #0]
}
 80017b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017b6:	f000 bdb3 	b.w	8002320 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017ba:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80017be:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80017c2:	4302      	orrs	r2, r0
 80017c4:	f47f af68 	bne.w	8001698 <HAL_ADC_IRQHandler+0xf0>
 80017c8:	e74e      	b.n	8001668 <HAL_ADC_IRQHandler+0xc0>
 80017ca:	f240 2221 	movw	r2, #545	@ 0x221
 80017ce:	40fa      	lsrs	r2, r7
 80017d0:	07d0      	lsls	r0, r2, #31
 80017d2:	f53f af13 	bmi.w	80015fc <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017d6:	4a03      	ldr	r2, [pc, #12]	@ (80017e4 <HAL_ADC_IRQHandler+0x23c>)
 80017d8:	68d2      	ldr	r2, [r2, #12]
 80017da:	e710      	b.n	80015fe <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	0790      	lsls	r0, r2, #30
 80017e0:	d0a0      	beq.n	8001724 <HAL_ADC_IRQHandler+0x17c>
 80017e2:	e793      	b.n	800170c <HAL_ADC_IRQHandler+0x164>
 80017e4:	40022000 	.word	0x40022000
 80017e8:	58026300 	.word	0x58026300
 80017ec:	40022100 	.word	0x40022100
 80017f0:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001804:	e713      	b.n	800162e <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <HAL_ADC_IRQHandler+0x274>)
 8001808:	e77c      	b.n	8001704 <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001812:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	65a3      	str	r3, [r4, #88]	@ 0x58
 800181a:	e73d      	b.n	8001698 <HAL_ADC_IRQHandler+0xf0>
 800181c:	40022300 	.word	0x40022300

08001820 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001820:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001822:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001824:	f012 0f50 	tst.w	r2, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
{
 800182a:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800182c:	d11d      	bne.n	800186a <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800182e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001834:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001836:	680a      	ldr	r2, [r1, #0]
 8001838:	f012 0f08 	tst.w	r2, #8
 800183c:	68ca      	ldr	r2, [r1, #12]
 800183e:	d01b      	beq.n	8001878 <ADC_DMAConvCplt+0x58>
 8001840:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001844:	d10d      	bne.n	8001862 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001846:	68ca      	ldr	r2, [r1, #12]
 8001848:	0494      	lsls	r4, r2, #18
 800184a:	d40a      	bmi.n	8001862 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800184c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800184e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001852:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001854:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001856:	04d1      	lsls	r1, r2, #19
 8001858:	d403      	bmi.n	8001862 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800185a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fff6 	bl	8000854 <HAL_ADC_ConvCpltCallback>
}
 8001868:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800186a:	06d2      	lsls	r2, r2, #27
 800186c:	d40a      	bmi.n	8001884 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800186e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001878:	0790      	lsls	r0, r2, #30
 800187a:	d0e7      	beq.n	800184c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe ffe9 	bl	8000854 <HAL_ADC_ConvCpltCallback>
 8001882:	e7f1      	b.n	8001868 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fe8d 	bl	80015a4 <HAL_ADC_ErrorCallback>
}
 800188a:	bd10      	pop	{r4, pc}

0800188c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800188c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800188e:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001890:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001896:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001898:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018a0:	f7ff fe80 	bl	80015a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop

080018a8 <HAL_ADC_ConfigChannel>:
{
 80018a8:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80018aa:	2200      	movs	r2, #0
{
 80018ac:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80018ae:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80018b0:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 80018b4:	2a01      	cmp	r2, #1
 80018b6:	f000 80ef 	beq.w	8001a98 <HAL_ADC_ConfigChannel+0x1f0>
 80018ba:	2401      	movs	r4, #1
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018bc:	6802      	ldr	r2, [r0, #0]
 80018be:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80018c0:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018c4:	6890      	ldr	r0, [r2, #8]
 80018c6:	0745      	lsls	r5, r0, #29
 80018c8:	d509      	bpl.n	80018de <HAL_ADC_ConfigChannel+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80018cc:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ce:	f042 0220 	orr.w	r2, r2, #32
 80018d2:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 80018da:	b002      	add	sp, #8
 80018dc:	bd70      	pop	{r4, r5, r6, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80018de:	680d      	ldr	r5, [r1, #0]
 80018e0:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80018e2:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80018e6:	db0d      	blt.n	8001904 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80018e8:	f3c5 0613 	ubfx	r6, r5, #0, #20
 80018ec:	2e00      	cmp	r6, #0
 80018ee:	f000 80c1 	beq.w	8001a74 <HAL_ADC_ConfigChannel+0x1cc>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018f6:	b115      	cbz	r5, 80018fe <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80018f8:	fab5 f585 	clz	r5, r5
 80018fc:	40ac      	lsls	r4, r5
 80018fe:	69d5      	ldr	r5, [r2, #28]
 8001900:	432c      	orrs	r4, r5
 8001902:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001904:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8001906:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800190a:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 800190e:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001912:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 8001914:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001918:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 800191c:	fa0c fc04 	lsl.w	ip, ip, r4
 8001920:	40a0      	lsls	r0, r4
 8001922:	f85e 4005 	ldr.w	r4, [lr, r5]
 8001926:	ea24 0c0c 	bic.w	ip, r4, ip
 800192a:	ea4c 0000 	orr.w	r0, ip, r0
 800192e:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001932:	6890      	ldr	r0, [r2, #8]
 8001934:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001938:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800193c:	0700      	lsls	r0, r0, #28
 800193e:	d542      	bpl.n	80019c6 <HAL_ADC_ConfigChannel+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001940:	6890      	ldr	r0, [r2, #8]
 8001942:	07c6      	lsls	r6, r0, #31
 8001944:	d43d      	bmi.n	80019c2 <HAL_ADC_ConfigChannel+0x11a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001946:	68cd      	ldr	r5, [r1, #12]
 8001948:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800194a:	f005 0618 	and.w	r6, r5, #24
 800194e:	48a9      	ldr	r0, [pc, #676]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x34c>)
 8001950:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 8001954:	40f0      	lsrs	r0, r6
 8001956:	f3c4 0613 	ubfx	r6, r4, #0, #20
 800195a:	4020      	ands	r0, r4
 800195c:	ea21 0106 	bic.w	r1, r1, r6
 8001960:	4301      	orrs	r1, r0
 8001962:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001966:	49a4      	ldr	r1, [pc, #656]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x350>)
 8001968:	428d      	cmp	r5, r1
 800196a:	f000 808a 	beq.w	8001a82 <HAL_ADC_ConfigChannel+0x1da>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800196e:	2c00      	cmp	r4, #0
 8001970:	da27      	bge.n	80019c2 <HAL_ADC_ConfigChannel+0x11a>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001972:	49a2      	ldr	r1, [pc, #648]	@ (8001bfc <HAL_ADC_ConfigChannel+0x354>)
 8001974:	428a      	cmp	r2, r1
 8001976:	f000 80bd 	beq.w	8001af4 <HAL_ADC_ConfigChannel+0x24c>
 800197a:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 800197e:	428a      	cmp	r2, r1
 8001980:	f000 80b8 	beq.w	8001af4 <HAL_ADC_ConfigChannel+0x24c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001984:	489e      	ldr	r0, [pc, #632]	@ (8001c00 <HAL_ADC_ConfigChannel+0x358>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001986:	499f      	ldr	r1, [pc, #636]	@ (8001c04 <HAL_ADC_ConfigChannel+0x35c>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001988:	6886      	ldr	r6, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800198a:	688d      	ldr	r5, [r1, #8]
 800198c:	07ed      	lsls	r5, r5, #31
 800198e:	d49c      	bmi.n	80018ca <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001990:	4d9d      	ldr	r5, [pc, #628]	@ (8001c08 <HAL_ADC_ConfigChannel+0x360>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001992:	f006 7ce0 	and.w	ip, r6, #29360128	@ 0x1c00000
 8001996:	42ac      	cmp	r4, r5
 8001998:	f000 8156 	beq.w	8001c48 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800199c:	4d9b      	ldr	r5, [pc, #620]	@ (8001c0c <HAL_ADC_ConfigChannel+0x364>)
 800199e:	42ac      	cmp	r4, r5
 80019a0:	f000 8118 	beq.w	8001bd4 <HAL_ADC_ConfigChannel+0x32c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019a4:	4d9a      	ldr	r5, [pc, #616]	@ (8001c10 <HAL_ADC_ConfigChannel+0x368>)
 80019a6:	42ac      	cmp	r4, r5
 80019a8:	d10b      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_VREFINT_INSTANCE(hadc))
 80019aa:	0274      	lsls	r4, r6, #9
 80019ac:	d409      	bmi.n	80019c2 <HAL_ADC_ConfigChannel+0x11a>
 80019ae:	428a      	cmp	r2, r1
 80019b0:	d107      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019b2:	6882      	ldr	r2, [r0, #8]
 80019b4:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80019b8:	ea42 020c 	orr.w	r2, r2, ip
 80019bc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80019c0:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c2:	2000      	movs	r0, #0
 80019c4:	e786      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019c6:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019c8:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 80019cc:	f04f 0e07 	mov.w	lr, #7
 80019d0:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019d2:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 80019d4:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019d8:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80019dc:	fa0e fe04 	lsl.w	lr, lr, r4
 80019e0:	fa06 f404 	lsl.w	r4, r6, r4
 80019e4:	f85c 0005 	ldr.w	r0, [ip, r5]
 80019e8:	ea20 000e 	bic.w	r0, r0, lr
 80019ec:	4320      	orrs	r0, r4
 80019ee:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019f2:	4888      	ldr	r0, [pc, #544]	@ (8001c14 <HAL_ADC_ConfigChannel+0x36c>)
 80019f4:	694d      	ldr	r5, [r1, #20]
 80019f6:	6800      	ldr	r0, [r0, #0]
 80019f8:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 80019fc:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8001a00:	68d0      	ldr	r0, [r2, #12]
 8001a02:	d039      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x1d0>
 8001a04:	f010 0f10 	tst.w	r0, #16
 8001a08:	68d0      	ldr	r0, [r2, #12]
 8001a0a:	d035      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x1d0>
 8001a0c:	0840      	lsrs	r0, r0, #1
 8001a0e:	f000 0008 	and.w	r0, r0, #8
 8001a12:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a14:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a16:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a18:	2e04      	cmp	r6, #4
 8001a1a:	d040      	beq.n	8001a9e <HAL_ADC_ConfigChannel+0x1f6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a1c:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 8001a20:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 8001a24:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 8001a28:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001a2c:	4320      	orrs	r0, r4
 8001a2e:	4328      	orrs	r0, r5
 8001a30:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001a34:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a36:	690d      	ldr	r5, [r1, #16]
 8001a38:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a3c:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 8001a40:	fab4 f484 	clz	r4, r4
 8001a44:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001a48:	0964      	lsrs	r4, r4, #5
 8001a4a:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 8001a4e:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001a52:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a54:	690d      	ldr	r5, [r1, #16]
 8001a56:	f1a0 0001 	sub.w	r0, r0, #1
 8001a5a:	6914      	ldr	r4, [r2, #16]
 8001a5c:	f005 051f 	and.w	r5, r5, #31
 8001a60:	fab0 f080 	clz	r0, r0
 8001a64:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 8001a68:	0940      	lsrs	r0, r0, #5
 8001a6a:	02c0      	lsls	r0, r0, #11
 8001a6c:	40a8      	lsls	r0, r5
 8001a6e:	4320      	orrs	r0, r4
 8001a70:	6110      	str	r0, [r2, #16]
}
 8001a72:	e765      	b.n	8001940 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001a74:	4084      	lsls	r4, r0
 8001a76:	e742      	b.n	80018fe <HAL_ADC_ConfigChannel+0x56>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a78:	f3c0 0082 	ubfx	r0, r0, #2, #3
 8001a7c:	0040      	lsls	r0, r0, #1
 8001a7e:	4085      	lsls	r5, r0
 8001a80:	e7c8      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x16c>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001a82:	495e      	ldr	r1, [pc, #376]	@ (8001bfc <HAL_ADC_ConfigChannel+0x354>)
 8001a84:	428a      	cmp	r2, r1
 8001a86:	d07a      	beq.n	8001b7e <HAL_ADC_ConfigChannel+0x2d6>
 8001a88:	4963      	ldr	r1, [pc, #396]	@ (8001c18 <HAL_ADC_ConfigChannel+0x370>)
 8001a8a:	428a      	cmp	r2, r1
 8001a8c:	d040      	beq.n	8001b10 <HAL_ADC_ConfigChannel+0x268>
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001a8e:	69d1      	ldr	r1, [r2, #28]
 8001a90:	f041 0101 	orr.w	r1, r1, #1
 8001a94:	61d1      	str	r1, [r2, #28]
}
 8001a96:	e76a      	b.n	800196e <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8001a98:	2002      	movs	r0, #2
}
 8001a9a:	b002      	add	sp, #8
 8001a9c:	bd70      	pop	{r4, r5, r6, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a9e:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8001aa0:	0684      	lsls	r4, r0, #26
 8001aa2:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8001aa6:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8001aaa:	d014      	beq.n	8001ad6 <HAL_ADC_ConfigChannel+0x22e>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001aac:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001aae:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001ab2:	4284      	cmp	r4, r0
 8001ab4:	d019      	beq.n	8001aea <HAL_ADC_ConfigChannel+0x242>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ab6:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001ab8:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001abc:	4284      	cmp	r4, r0
 8001abe:	d00f      	beq.n	8001ae0 <HAL_ADC_ConfigChannel+0x238>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ac0:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001ac2:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8001ac6:	4284      	cmp	r4, r0
 8001ac8:	f47f af3a 	bne.w	8001940 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001acc:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8001ace:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001ad2:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8001ad4:	e734      	b.n	8001940 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001ad6:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8001ad8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001adc:	6610      	str	r0, [r2, #96]	@ 0x60
 8001ade:	e7e5      	b.n	8001aac <HAL_ADC_ConfigChannel+0x204>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001ae0:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8001ae2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001ae6:	6690      	str	r0, [r2, #104]	@ 0x68
 8001ae8:	e7ea      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x218>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001aea:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8001aec:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001af0:	6650      	str	r0, [r2, #100]	@ 0x64
 8001af2:	e7e0      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x20e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001af4:	4949      	ldr	r1, [pc, #292]	@ (8001c1c <HAL_ADC_ConfigChannel+0x374>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001af6:	4a41      	ldr	r2, [pc, #260]	@ (8001bfc <HAL_ADC_ConfigChannel+0x354>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001af8:	6889      	ldr	r1, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001afa:	6892      	ldr	r2, [r2, #8]
 8001afc:	f012 0f01 	tst.w	r2, #1
 8001b00:	4a45      	ldr	r2, [pc, #276]	@ (8001c18 <HAL_ADC_ConfigChannel+0x370>)
 8001b02:	6892      	ldr	r2, [r2, #8]
 8001b04:	f47f aee1 	bne.w	80018ca <HAL_ADC_ConfigChannel+0x22>
 8001b08:	07d2      	lsls	r2, r2, #31
 8001b0a:	f53f aede 	bmi.w	80018ca <HAL_ADC_ConfigChannel+0x22>
 8001b0e:	e758      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001b10:	4943      	ldr	r1, [pc, #268]	@ (8001c20 <HAL_ADC_ConfigChannel+0x378>)
 8001b12:	428c      	cmp	r4, r1
 8001b14:	d058      	beq.n	8001bc8 <HAL_ADC_ConfigChannel+0x320>
 8001b16:	4943      	ldr	r1, [pc, #268]	@ (8001c24 <HAL_ADC_ConfigChannel+0x37c>)
 8001b18:	428c      	cmp	r4, r1
 8001b1a:	d057      	beq.n	8001bcc <HAL_ADC_ConfigChannel+0x324>
 8001b1c:	4942      	ldr	r1, [pc, #264]	@ (8001c28 <HAL_ADC_ConfigChannel+0x380>)
 8001b1e:	428c      	cmp	r4, r1
 8001b20:	f000 80b5 	beq.w	8001c8e <HAL_ADC_ConfigChannel+0x3e6>
 8001b24:	4941      	ldr	r1, [pc, #260]	@ (8001c2c <HAL_ADC_ConfigChannel+0x384>)
 8001b26:	428c      	cmp	r4, r1
 8001b28:	f000 80b3 	beq.w	8001c92 <HAL_ADC_ConfigChannel+0x3ea>
 8001b2c:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001b30:	3110      	adds	r1, #16
 8001b32:	428c      	cmp	r4, r1
 8001b34:	f000 80af 	beq.w	8001c96 <HAL_ADC_ConfigChannel+0x3ee>
 8001b38:	493d      	ldr	r1, [pc, #244]	@ (8001c30 <HAL_ADC_ConfigChannel+0x388>)
 8001b3a:	428c      	cmp	r4, r1
 8001b3c:	f000 80ad 	beq.w	8001c9a <HAL_ADC_ConfigChannel+0x3f2>
 8001b40:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8001b44:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8001b48:	428c      	cmp	r4, r1
 8001b4a:	f000 80a8 	beq.w	8001c9e <HAL_ADC_ConfigChannel+0x3f6>
 8001b4e:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001b52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001b56:	428c      	cmp	r4, r1
 8001b58:	f000 80a3 	beq.w	8001ca2 <HAL_ADC_ConfigChannel+0x3fa>
 8001b5c:	4935      	ldr	r1, [pc, #212]	@ (8001c34 <HAL_ADC_ConfigChannel+0x38c>)
 8001b5e:	428c      	cmp	r4, r1
 8001b60:	d195      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x1e6>
 8001b62:	4935      	ldr	r1, [pc, #212]	@ (8001c38 <HAL_ADC_ConfigChannel+0x390>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	fa91 f1a1 	rbit	r1, r1
  if (value == 0U)
 8001b68:	2900      	cmp	r1, #0
 8001b6a:	d031      	beq.n	8001bd0 <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 8001b6c:	fab1 f181 	clz	r1, r1
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f101 	lsl.w	r1, r0, r1
 8001b76:	69d0      	ldr	r0, [r2, #28]
 8001b78:	4301      	orrs	r1, r0
 8001b7a:	61d1      	str	r1, [r2, #28]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b7c:	e721      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001b7e:	4928      	ldr	r1, [pc, #160]	@ (8001c20 <HAL_ADC_ConfigChannel+0x378>)
 8001b80:	428c      	cmp	r4, r1
 8001b82:	d021      	beq.n	8001bc8 <HAL_ADC_ConfigChannel+0x320>
 8001b84:	4927      	ldr	r1, [pc, #156]	@ (8001c24 <HAL_ADC_ConfigChannel+0x37c>)
 8001b86:	428c      	cmp	r4, r1
 8001b88:	d020      	beq.n	8001bcc <HAL_ADC_ConfigChannel+0x324>
 8001b8a:	4927      	ldr	r1, [pc, #156]	@ (8001c28 <HAL_ADC_ConfigChannel+0x380>)
 8001b8c:	428c      	cmp	r4, r1
 8001b8e:	d07e      	beq.n	8001c8e <HAL_ADC_ConfigChannel+0x3e6>
 8001b90:	4926      	ldr	r1, [pc, #152]	@ (8001c2c <HAL_ADC_ConfigChannel+0x384>)
 8001b92:	428c      	cmp	r4, r1
 8001b94:	d07d      	beq.n	8001c92 <HAL_ADC_ConfigChannel+0x3ea>
 8001b96:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001b9a:	3110      	adds	r1, #16
 8001b9c:	428c      	cmp	r4, r1
 8001b9e:	d07a      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0x3ee>
 8001ba0:	4923      	ldr	r1, [pc, #140]	@ (8001c30 <HAL_ADC_ConfigChannel+0x388>)
 8001ba2:	428c      	cmp	r4, r1
 8001ba4:	d079      	beq.n	8001c9a <HAL_ADC_ConfigChannel+0x3f2>
 8001ba6:	f101 2104 	add.w	r1, r1, #67109888	@ 0x4000400
 8001baa:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8001bae:	428c      	cmp	r4, r1
 8001bb0:	d075      	beq.n	8001c9e <HAL_ADC_ConfigChannel+0x3f6>
 8001bb2:	f101 6186 	add.w	r1, r1, #70254592	@ 0x4300000
 8001bb6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001bba:	428c      	cmp	r4, r1
 8001bbc:	d071      	beq.n	8001ca2 <HAL_ADC_ConfigChannel+0x3fa>
 8001bbe:	491f      	ldr	r1, [pc, #124]	@ (8001c3c <HAL_ADC_ConfigChannel+0x394>)
 8001bc0:	428c      	cmp	r4, r1
 8001bc2:	d1cb      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x2b4>
 8001bc4:	491e      	ldr	r1, [pc, #120]	@ (8001c40 <HAL_ADC_ConfigChannel+0x398>)
 8001bc6:	e7cd      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x2bc>
 8001bc8:	2101      	movs	r1, #1
 8001bca:	e7cb      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x2bc>
 8001bcc:	491d      	ldr	r1, [pc, #116]	@ (8001c44 <HAL_ADC_ConfigChannel+0x39c>)
 8001bce:	e7c9      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x2bc>
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	e7d0      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x2ce>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bd4:	01f5      	lsls	r5, r6, #7
 8001bd6:	f53f aef4 	bmi.w	80019c2 <HAL_ADC_ConfigChannel+0x11a>
 8001bda:	428a      	cmp	r2, r1
 8001bdc:	f47f aef1 	bne.w	80019c2 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001be0:	6882      	ldr	r2, [r0, #8]
 8001be2:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001be6:	ea42 020c 	orr.w	r2, r2, ip
 8001bea:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001bee:	6082      	str	r2, [r0, #8]
}
 8001bf0:	e6e7      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x11a>
 8001bf2:	bf00      	nop
 8001bf4:	000fffff 	.word	0x000fffff
 8001bf8:	47ff0000 	.word	0x47ff0000
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	58026300 	.word	0x58026300
 8001c04:	58026000 	.word	0x58026000
 8001c08:	cb840000 	.word	0xcb840000
 8001c0c:	c7520000 	.word	0xc7520000
 8001c10:	cfb80000 	.word	0xcfb80000
 8001c14:	5c001000 	.word	0x5c001000
 8001c18:	40022100 	.word	0x40022100
 8001c1c:	40022300 	.word	0x40022300
 8001c20:	04300002 	.word	0x04300002
 8001c24:	08600004 	.word	0x08600004
 8001c28:	0c900008 	.word	0x0c900008
 8001c2c:	10c00010 	.word	0x10c00010
 8001c30:	2a000400 	.word	0x2a000400
 8001c34:	4b840000 	.word	0x4b840000
 8001c38:	4fb80000 	.word	0x4fb80000
 8001c3c:	43210000 	.word	0x43210000
 8001c40:	47520000 	.word	0x47520000
 8001c44:	19200040 	.word	0x19200040
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c48:	0236      	lsls	r6, r6, #8
 8001c4a:	f53f aeba 	bmi.w	80019c2 <HAL_ADC_ConfigChannel+0x11a>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c4e:	428a      	cmp	r2, r1
 8001c50:	f47f aeb7 	bne.w	80019c2 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c54:	6882      	ldr	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c56:	4914      	ldr	r1, [pc, #80]	@ (8001ca8 <HAL_ADC_ConfigChannel+0x400>)
 8001c58:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001c5c:	ea42 020c 	orr.w	r2, r2, ip
 8001c60:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c64:	6082      	str	r2, [r0, #8]
 8001c66:	680a      	ldr	r2, [r1, #0]
 8001c68:	4910      	ldr	r1, [pc, #64]	@ (8001cac <HAL_ADC_ConfigChannel+0x404>)
 8001c6a:	0992      	lsrs	r2, r2, #6
 8001c6c:	fba1 1202 	umull	r1, r2, r1, r2
 8001c70:	0992      	lsrs	r2, r2, #6
 8001c72:	3201      	adds	r2, #1
 8001c74:	0052      	lsls	r2, r2, #1
 8001c76:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001c78:	9a01      	ldr	r2, [sp, #4]
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	f43f aea1 	beq.w	80019c2 <HAL_ADC_ConfigChannel+0x11a>
                wait_loop_index--;
 8001c80:	9a01      	ldr	r2, [sp, #4]
 8001c82:	3a01      	subs	r2, #1
 8001c84:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8001c86:	9a01      	ldr	r2, [sp, #4]
 8001c88:	2a00      	cmp	r2, #0
 8001c8a:	d1f9      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x3d8>
 8001c8c:	e699      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x11a>
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001c8e:	4908      	ldr	r1, [pc, #32]	@ (8001cb0 <HAL_ADC_ConfigChannel+0x408>)
 8001c90:	e768      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x2bc>
 8001c92:	4908      	ldr	r1, [pc, #32]	@ (8001cb4 <HAL_ADC_ConfigChannel+0x40c>)
 8001c94:	e766      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x2bc>
 8001c96:	4908      	ldr	r1, [pc, #32]	@ (8001cb8 <HAL_ADC_ConfigChannel+0x410>)
 8001c98:	e764      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x2bc>
 8001c9a:	4908      	ldr	r1, [pc, #32]	@ (8001cbc <HAL_ADC_ConfigChannel+0x414>)
 8001c9c:	e762      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x2bc>
 8001c9e:	4908      	ldr	r1, [pc, #32]	@ (8001cc0 <HAL_ADC_ConfigChannel+0x418>)
 8001ca0:	e760      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x2bc>
 8001ca2:	4908      	ldr	r1, [pc, #32]	@ (8001cc4 <HAL_ADC_ConfigChannel+0x41c>)
 8001ca4:	e75e      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x2bc>
 8001ca6:	bf00      	nop
 8001ca8:	240001a4 	.word	0x240001a4
 8001cac:	053e2d63 	.word	0x053e2d63
 8001cb0:	1d500080 	.word	0x1d500080
 8001cb4:	21800100 	.word	0x21800100
 8001cb8:	25b00200 	.word	0x25b00200
 8001cbc:	2e300800 	.word	0x2e300800
 8001cc0:	32601000 	.word	0x32601000
 8001cc4:	36902000 	.word	0x36902000

08001cc8 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cc8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	07d1      	lsls	r1, r2, #31
 8001cce:	d501      	bpl.n	8001cd4 <ADC_Enable+0xc>
  return HAL_OK;
 8001cd0:	2000      	movs	r0, #0
}
 8001cd2:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001cd4:	6899      	ldr	r1, [r3, #8]
 8001cd6:	4a23      	ldr	r2, [pc, #140]	@ (8001d64 <ADC_Enable+0x9c>)
 8001cd8:	4211      	tst	r1, r2
{
 8001cda:	b570      	push	{r4, r5, r6, lr}
 8001cdc:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001cde:	d12f      	bne.n	8001d40 <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 8001ce0:	6899      	ldr	r1, [r3, #8]
 8001ce2:	4a21      	ldr	r2, [pc, #132]	@ (8001d68 <ADC_Enable+0xa0>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001cec:	f7ff fc46 	bl	800157c <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d6c <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 8001cf4:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02c      	beq.n	8001d54 <ADC_Enable+0x8c>
 8001cfa:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d028      	beq.n	8001d54 <ADC_Enable+0x8c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d02:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 8001d06:	f502 4284 	add.w	r2, r2, #16896	@ 0x4200
 8001d0a:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	07d2      	lsls	r2, r2, #31
 8001d10:	d414      	bmi.n	8001d3c <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 8001d12:	4e15      	ldr	r6, [pc, #84]	@ (8001d68 <ADC_Enable+0xa0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	07d0      	lsls	r0, r2, #31
 8001d18:	d404      	bmi.n	8001d24 <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	4032      	ands	r2, r6
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d24:	f7ff fc2a 	bl	800157c <HAL_GetTick>
 8001d28:	1b43      	subs	r3, r0, r5
 8001d2a:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d2c:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d2e:	d902      	bls.n	8001d36 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	07d1      	lsls	r1, r2, #31
 8001d34:	d504      	bpl.n	8001d40 <ADC_Enable+0x78>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	07d2      	lsls	r2, r2, #31
 8001d3a:	d5eb      	bpl.n	8001d14 <ADC_Enable+0x4c>
  return HAL_OK;
 8001d3c:	2000      	movs	r0, #0
}
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d40:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001d42:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d44:	f043 0310 	orr.w	r3, r3, #16
 8001d48:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8001d52:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d54:	4a06      	ldr	r2, [pc, #24]	@ (8001d70 <ADC_Enable+0xa8>)
 8001d56:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d58:	06d6      	lsls	r6, r2, #27
 8001d5a:	d0d7      	beq.n	8001d0c <ADC_Enable+0x44>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d5c:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <ADC_Enable+0xac>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d1d4      	bne.n	8001d0c <ADC_Enable+0x44>
 8001d62:	e7eb      	b.n	8001d3c <ADC_Enable+0x74>
 8001d64:	8000003f 	.word	0x8000003f
 8001d68:	7fffffc0 	.word	0x7fffffc0
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	40022300 	.word	0x40022300
 8001d74:	40022100 	.word	0x40022100

08001d78 <HAL_ADC_Start_DMA>:
{
 8001d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e6c <HAL_ADC_Start_DMA+0xf4>)
{
 8001d7e:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d80:	6800      	ldr	r0, [r0, #0]
{
 8001d82:	460e      	mov	r6, r1
 8001d84:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d86:	4298      	cmp	r0, r3
 8001d88:	d01c      	beq.n	8001dc4 <HAL_ADC_Start_DMA+0x4c>
 8001d8a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d8e:	4298      	cmp	r0, r3
 8001d90:	d018      	beq.n	8001dc4 <HAL_ADC_Start_DMA+0x4c>
 8001d92:	4b37      	ldr	r3, [pc, #220]	@ (8001e70 <HAL_ADC_Start_DMA+0xf8>)
 8001d94:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d96:	6885      	ldr	r5, [r0, #8]
 8001d98:	f015 0504 	ands.w	r5, r5, #4
 8001d9c:	d118      	bne.n	8001dd0 <HAL_ADC_Start_DMA+0x58>
    __HAL_LOCK(hadc);
 8001d9e:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 8001da2:	2a01      	cmp	r2, #1
 8001da4:	d014      	beq.n	8001dd0 <HAL_ADC_Start_DMA+0x58>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001da6:	f003 081f 	and.w	r8, r3, #31
 8001daa:	f240 2321 	movw	r3, #545	@ 0x221
 8001dae:	2001      	movs	r0, #1
 8001db0:	fa23 f308 	lsr.w	r3, r3, r8
 8001db4:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001db8:	4003      	ands	r3, r0
 8001dba:	d10c      	bne.n	8001dd6 <HAL_ADC_Start_DMA+0x5e>
      __HAL_UNLOCK(hadc);
 8001dbc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8001dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <HAL_ADC_Start_DMA+0xfc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dc8:	6885      	ldr	r5, [r0, #8]
 8001dca:	f015 0504 	ands.w	r5, r5, #4
 8001dce:	d0e6      	beq.n	8001d9e <HAL_ADC_Start_DMA+0x26>
    __HAL_LOCK(hadc);
 8001dd0:	2002      	movs	r0, #2
}
 8001dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f7ff ff76 	bl	8001cc8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d140      	bne.n	8001e62 <HAL_ADC_Start_DMA+0xea>
        ADC_STATE_CLR_SET(hadc->State,
 8001de0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001de2:	4b25      	ldr	r3, [pc, #148]	@ (8001e78 <HAL_ADC_Start_DMA+0x100>)
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001de4:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8001de6:	4013      	ands	r3, r2
 8001de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dec:	6563      	str	r3, [r4, #84]	@ 0x54
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dee:	f1b8 0f00 	cmp.w	r8, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_ADC_Start_DMA+0x82>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001df4:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <HAL_ADC_Start_DMA+0x104>)
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001df6:	4299      	cmp	r1, r3
 8001df8:	d003      	beq.n	8001e02 <HAL_ADC_Start_DMA+0x8a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dfa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001dfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001e00:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e02:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001e04:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8001e08:	d02e      	beq.n	8001e68 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001e0c:	f023 0306 	bic.w	r3, r3, #6
 8001e10:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e12:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e14:	4632      	mov	r2, r6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e16:	4d1a      	ldr	r5, [pc, #104]	@ (8001e80 <HAL_ADC_Start_DMA+0x108>)
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e18:	463b      	mov	r3, r7
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001e1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e1c:	3140      	adds	r1, #64	@ 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e1e:	63c5      	str	r5, [r0, #60]	@ 0x3c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e20:	4d18      	ldr	r5, [pc, #96]	@ (8001e84 <HAL_ADC_Start_DMA+0x10c>)
 8001e22:	6405      	str	r5, [r0, #64]	@ 0x40
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e24:	4d18      	ldr	r5, [pc, #96]	@ (8001e88 <HAL_ADC_Start_DMA+0x110>)
 8001e26:	64c5      	str	r5, [r0, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e28:	251c      	movs	r5, #28
 8001e2a:	f841 5c40 	str.w	r5, [r1, #-64]
        __HAL_UNLOCK(hadc);
 8001e2e:	2500      	movs	r5, #0
 8001e30:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e34:	f851 5c3c 	ldr.w	r5, [r1, #-60]
 8001e38:	f045 0510 	orr.w	r5, r5, #16
 8001e3c:	f841 5c3c 	str.w	r5, [r1, #-60]
 8001e40:	f851 5c34 	ldr.w	r5, [r1, #-52]
 8001e44:	f025 0503 	bic.w	r5, r5, #3
 8001e48:	4335      	orrs	r5, r6
 8001e4a:	f841 5c34 	str.w	r5, [r1, #-52]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e4e:	f001 f8bb 	bl	8002fc8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e52:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001e54:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_ADC_Start_DMA+0x114>)
 8001e56:	6891      	ldr	r1, [r2, #8]
 8001e58:	400b      	ands	r3, r1
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6093      	str	r3, [r2, #8]
}
 8001e60:	e7b7      	b.n	8001dd2 <HAL_ADC_Start_DMA+0x5a>
        __HAL_UNLOCK(hadc);
 8001e62:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8001e66:	e7b4      	b.n	8001dd2 <HAL_ADC_Start_DMA+0x5a>
          ADC_CLEAR_ERRORCODE(hadc);
 8001e68:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001e6a:	e7d2      	b.n	8001e12 <HAL_ADC_Start_DMA+0x9a>
 8001e6c:	40022000 	.word	0x40022000
 8001e70:	58026300 	.word	0x58026300
 8001e74:	40022300 	.word	0x40022300
 8001e78:	fffff0fe 	.word	0xfffff0fe
 8001e7c:	40022100 	.word	0x40022100
 8001e80:	08001821 	.word	0x08001821
 8001e84:	08001595 	.word	0x08001595
 8001e88:	0800188d 	.word	0x0800188d
 8001e8c:	7fffffc0 	.word	0x7fffffc0

08001e90 <ADC_Disable>:
{
 8001e90:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001e92:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	0795      	lsls	r5, r2, #30
 8001e98:	d502      	bpl.n	8001ea0 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e9a:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8001e9c:	2000      	movs	r0, #0
}
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	07d4      	lsls	r4, r2, #31
 8001ea4:	d5fa      	bpl.n	8001e9c <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	f002 020d 	and.w	r2, r2, #13
 8001eae:	2a01      	cmp	r2, #1
 8001eb0:	d009      	beq.n	8001ec6 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8001eb4:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb6:	f043 0310 	orr.w	r3, r3, #16
 8001eba:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ebc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8001ec4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001ec6:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001ec8:	2103      	movs	r1, #3
 8001eca:	4a0d      	ldr	r2, [pc, #52]	@ (8001f00 <ADC_Disable+0x70>)
 8001ecc:	4002      	ands	r2, r0
 8001ece:	f042 0202 	orr.w	r2, r2, #2
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8001ed6:	f7ff fb51 	bl	800157c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001eda:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001edc:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	07d9      	lsls	r1, r3, #31
 8001ee2:	d403      	bmi.n	8001eec <ADC_Disable+0x5c>
 8001ee4:	e7da      	b.n	8001e9c <ADC_Disable+0xc>
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	07db      	lsls	r3, r3, #31
 8001eea:	d5d7      	bpl.n	8001e9c <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001eec:	f7ff fb46 	bl	800157c <HAL_GetTick>
 8001ef0:	1b40      	subs	r0, r0, r5
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ef2:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ef4:	2802      	cmp	r0, #2
 8001ef6:	d9f6      	bls.n	8001ee6 <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	07d2      	lsls	r2, r2, #31
 8001efc:	d5f3      	bpl.n	8001ee6 <ADC_Disable+0x56>
 8001efe:	e7d8      	b.n	8001eb2 <ADC_Disable+0x22>
 8001f00:	7fffffc0 	.word	0x7fffffc0

08001f04 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001f04:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001f06:	4a4f      	ldr	r2, [pc, #316]	@ (8002044 <ADC_ConfigureBoostMode+0x140>)
{
 8001f08:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001f0a:	6803      	ldr	r3, [r0, #0]
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d024      	beq.n	8001f5a <ADC_ConfigureBoostMode+0x56>
 8001f10:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d020      	beq.n	8001f5a <ADC_ConfigureBoostMode+0x56>
 8001f18:	4b4b      	ldr	r3, [pc, #300]	@ (8002048 <ADC_ConfigureBoostMode+0x144>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8001f20:	d020      	beq.n	8001f64 <ADC_ConfigureBoostMode+0x60>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001f22:	f002 fcdd 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001f26:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8001f28:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8001f2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f2e:	d06d      	beq.n	800200c <ADC_ConfigureBoostMode+0x108>
 8001f30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001f34:	d072      	beq.n	800201c <ADC_ConfigureBoostMode+0x118>
 8001f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f3a:	d067      	beq.n	800200c <ADC_ConfigureBoostMode+0x108>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001f3c:	f7ff fb24 	bl	8001588 <HAL_GetREVID>
 8001f40:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001f44:	4298      	cmp	r0, r3
 8001f46:	d82d      	bhi.n	8001fa4 <ADC_ConfigureBoostMode+0xa0>
  {
    if (freq > 20000000UL)
 8001f48:	4a40      	ldr	r2, [pc, #256]	@ (800204c <ADC_ConfigureBoostMode+0x148>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001f4a:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 8001f4c:	4295      	cmp	r5, r2
 8001f4e:	d947      	bls.n	8001fe0 <ADC_ConfigureBoostMode+0xdc>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f56:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001f58:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002050 <ADC_ConfigureBoostMode+0x14c>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8001f62:	d1de      	bne.n	8001f22 <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001f64:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001f68:	2100      	movs	r1, #0
 8001f6a:	f003 ff33 	bl	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8001f6e:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001f70:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8001f72:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001f76:	d04d      	beq.n	8002014 <ADC_ConfigureBoostMode+0x110>
 8001f78:	d825      	bhi.n	8001fc6 <ADC_ConfigureBoostMode+0xc2>
 8001f7a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001f7e:	d04b      	beq.n	8002018 <ADC_ConfigureBoostMode+0x114>
 8001f80:	d84e      	bhi.n	8002020 <ADC_ConfigureBoostMode+0x11c>
 8001f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f86:	d008      	beq.n	8001f9a <ADC_ConfigureBoostMode+0x96>
 8001f88:	d855      	bhi.n	8002036 <ADC_ConfigureBoostMode+0x132>
 8001f8a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001f8e:	d004      	beq.n	8001f9a <ADC_ConfigureBoostMode+0x96>
 8001f90:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001f94:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8001f98:	d1d0      	bne.n	8001f3c <ADC_ConfigureBoostMode+0x38>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001f9a:	0c9b      	lsrs	r3, r3, #18
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8001fa2:	e7cb      	b.n	8001f3c <ADC_ConfigureBoostMode+0x38>
    if (freq <= 6250000UL)
 8001fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8002054 <ADC_ConfigureBoostMode+0x150>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001fa6:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 8001fa8:	4295      	cmp	r5, r2
 8001faa:	d923      	bls.n	8001ff4 <ADC_ConfigureBoostMode+0xf0>
    else if (freq <= 12500000UL)
 8001fac:	4a2a      	ldr	r2, [pc, #168]	@ (8002058 <ADC_ConfigureBoostMode+0x154>)
 8001fae:	4295      	cmp	r5, r2
 8001fb0:	d925      	bls.n	8001ffe <ADC_ConfigureBoostMode+0xfa>
    else if (freq <= 25000000UL)
 8001fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800205c <ADC_ConfigureBoostMode+0x158>)
 8001fb4:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001fb6:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8001fb8:	d839      	bhi.n	800202e <ADC_ConfigureBoostMode+0x12a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001fba:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc2:	609a      	str	r2, [r3, #8]
}
 8001fc4:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8001fc6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001fca:	d02e      	beq.n	800202a <ADC_ConfigureBoostMode+0x126>
 8001fcc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001fd0:	d1b4      	bne.n	8001f3c <ADC_ConfigureBoostMode+0x38>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001fd2:	f7ff fad9 	bl	8001588 <HAL_GetREVID>
 8001fd6:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001fda:	4298      	cmp	r0, r3
 8001fdc:	d805      	bhi.n	8001fea <ADC_ConfigureBoostMode+0xe6>
 8001fde:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fe6:	609a      	str	r2, [r3, #8]
}
 8001fe8:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8001fea:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <ADC_ConfigureBoostMode+0x150>)
 8001fec:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	d304      	bcc.n	8001ffe <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001ffa:	609a      	str	r2, [r3, #8]
}
 8001ffc:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002004:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002008:	609a      	str	r2, [r3, #8]
}
 800200a:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800200c:	0c1b      	lsrs	r3, r3, #16
 800200e:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8002012:	e793      	b.n	8001f3c <ADC_ConfigureBoostMode+0x38>
        freq /= 64UL;
 8002014:	0985      	lsrs	r5, r0, #6
        break;
 8002016:	e791      	b.n	8001f3c <ADC_ConfigureBoostMode+0x38>
        freq /= 16UL;
 8002018:	0905      	lsrs	r5, r0, #4
        break;
 800201a:	e78f      	b.n	8001f3c <ADC_ConfigureBoostMode+0x38>
        freq /= 4UL;
 800201c:	0885      	lsrs	r5, r0, #2
        break;
 800201e:	e78d      	b.n	8001f3c <ADC_ConfigureBoostMode+0x38>
    switch (hadc->Init.ClockPrescaler)
 8002020:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002024:	d18a      	bne.n	8001f3c <ADC_ConfigureBoostMode+0x38>
        freq /= 32UL;
 8002026:	0945      	lsrs	r5, r0, #5
        break;
 8002028:	e788      	b.n	8001f3c <ADC_ConfigureBoostMode+0x38>
        freq /= 128UL;
 800202a:	09c5      	lsrs	r5, r0, #7
        break;
 800202c:	e786      	b.n	8001f3c <ADC_ConfigureBoostMode+0x38>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800202e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002032:	609a      	str	r2, [r3, #8]
}
 8002034:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8002036:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800203a:	d0ae      	beq.n	8001f9a <ADC_ConfigureBoostMode+0x96>
 800203c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002040:	d0ab      	beq.n	8001f9a <ADC_ConfigureBoostMode+0x96>
 8002042:	e77b      	b.n	8001f3c <ADC_ConfigureBoostMode+0x38>
 8002044:	40022000 	.word	0x40022000
 8002048:	58026300 	.word	0x58026300
 800204c:	01312d00 	.word	0x01312d00
 8002050:	40022300 	.word	0x40022300
 8002054:	00bebc21 	.word	0x00bebc21
 8002058:	017d7841 	.word	0x017d7841
 800205c:	02faf081 	.word	0x02faf081

08002060 <HAL_ADC_Init>:
{
 8002060:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002062:	2300      	movs	r3, #0
{
 8002064:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002066:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002068:	2800      	cmp	r0, #0
 800206a:	f000 80a9 	beq.w	80021c0 <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800206e:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8002070:	4604      	mov	r4, r0
 8002072:	2d00      	cmp	r5, #0
 8002074:	f000 80aa 	beq.w	80021cc <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002078:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800207a:	6893      	ldr	r3, [r2, #8]
 800207c:	009d      	lsls	r5, r3, #2
 800207e:	d503      	bpl.n	8002088 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002080:	6891      	ldr	r1, [r2, #8]
 8002082:	4b71      	ldr	r3, [pc, #452]	@ (8002248 <HAL_ADC_Init+0x1e8>)
 8002084:	400b      	ands	r3, r1
 8002086:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002088:	6893      	ldr	r3, [r2, #8]
 800208a:	00d8      	lsls	r0, r3, #3
 800208c:	d416      	bmi.n	80020bc <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800208e:	4b6f      	ldr	r3, [pc, #444]	@ (800224c <HAL_ADC_Init+0x1ec>)
 8002090:	496f      	ldr	r1, [pc, #444]	@ (8002250 <HAL_ADC_Init+0x1f0>)
 8002092:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002094:	6890      	ldr	r0, [r2, #8]
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	fba1 1303 	umull	r1, r3, r1, r3
 800209c:	496d      	ldr	r1, [pc, #436]	@ (8002254 <HAL_ADC_Init+0x1f4>)
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	4001      	ands	r1, r0
 80020a2:	3301      	adds	r3, #1
 80020a4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80020a8:	6091      	str	r1, [r2, #8]
 80020aa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80020ac:	9b01      	ldr	r3, [sp, #4]
 80020ae:	b12b      	cbz	r3, 80020bc <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 80020b0:	9b01      	ldr	r3, [sp, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80020b6:	9b01      	ldr	r3, [sp, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f9      	bne.n	80020b0 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020bc:	6893      	ldr	r3, [r2, #8]
 80020be:	00d9      	lsls	r1, r3, #3
 80020c0:	f100 8082 	bmi.w	80021c8 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 80020c6:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c8:	f043 0310 	orr.w	r3, r3, #16
 80020cc:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80020d0:	432b      	orrs	r3, r5
 80020d2:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d4:	6893      	ldr	r3, [r2, #8]
 80020d6:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020dc:	d16c      	bne.n	80021b8 <HAL_ADC_Init+0x158>
 80020de:	06db      	lsls	r3, r3, #27
 80020e0:	d46a      	bmi.n	80021b8 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 80020e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ee:	6893      	ldr	r3, [r2, #8]
 80020f0:	07de      	lsls	r6, r3, #31
 80020f2:	d40c      	bmi.n	800210e <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020f4:	4b58      	ldr	r3, [pc, #352]	@ (8002258 <HAL_ADC_Init+0x1f8>)
 80020f6:	429a      	cmp	r2, r3
 80020f8:	f000 8081 	beq.w	80021fe <HAL_ADC_Init+0x19e>
 80020fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002100:	429a      	cmp	r2, r3
 8002102:	d07c      	beq.n	80021fe <HAL_ADC_Init+0x19e>
 8002104:	4b55      	ldr	r3, [pc, #340]	@ (800225c <HAL_ADC_Init+0x1fc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	07d9      	lsls	r1, r3, #31
 800210a:	f140 808a 	bpl.w	8002222 <HAL_ADC_Init+0x1c2>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800210e:	f7ff fa3b 	bl	8001588 <HAL_GetREVID>
 8002112:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002116:	68a1      	ldr	r1, [r4, #8]
 8002118:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800211a:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800211c:	d85c      	bhi.n	80021d8 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800211e:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002122:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002124:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002126:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 800212a:	4302      	orrs	r2, r0
 800212c:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800212e:	2b01      	cmp	r3, #1
 8002130:	d103      	bne.n	800213a <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002132:	6a23      	ldr	r3, [r4, #32]
 8002134:	3b01      	subs	r3, #1
 8002136:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800213a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800213c:	b123      	cbz	r3, 8002148 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800213e:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002142:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002144:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002146:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	4945      	ldr	r1, [pc, #276]	@ (8002260 <HAL_ADC_Init+0x200>)
 800214c:	68d8      	ldr	r0, [r3, #12]
 800214e:	4001      	ands	r1, r0
 8002150:	4311      	orrs	r1, r2
 8002152:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800215a:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800215c:	d11c      	bne.n	8002198 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800215e:	0712      	lsls	r2, r2, #28
 8002160:	d41a      	bmi.n	8002198 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002162:	68d8      	ldr	r0, [r3, #12]
 8002164:	4a3f      	ldr	r2, [pc, #252]	@ (8002264 <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002166:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002168:	4002      	ands	r2, r0
 800216a:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800216e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002170:	430a      	orrs	r2, r1
 8002172:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8002174:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8002178:	2a01      	cmp	r2, #1
 800217a:	d054      	beq.n	8002226 <HAL_ADC_Init+0x1c6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002184:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8002186:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002188:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800218a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800218e:	430a      	orrs	r2, r1
 8002190:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8002192:	f7ff feb7 	bl	8001f04 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002196:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002198:	68e2      	ldr	r2, [r4, #12]
 800219a:	2a01      	cmp	r2, #1
 800219c:	d027      	beq.n	80021ee <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800219e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021a0:	f022 020f 	bic.w	r2, r2, #15
 80021a4:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 80021a8:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6563      	str	r3, [r4, #84]	@ 0x54
}
 80021b4:	b002      	add	sp, #8
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80021ba:	f043 0310 	orr.w	r3, r3, #16
 80021be:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 80021c0:	2501      	movs	r5, #1
}
 80021c2:	4628      	mov	r0, r5
 80021c4:	b002      	add	sp, #8
 80021c6:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c8:	2500      	movs	r5, #0
 80021ca:	e783      	b.n	80020d4 <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 80021cc:	f7fe ff80 	bl	80010d0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80021d0:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 80021d2:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 80021d6:	e74f      	b.n	8002078 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80021d8:	2910      	cmp	r1, #16
 80021da:	d1a0      	bne.n	800211e <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021dc:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021de:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021e0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80021e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80021e6:	430a      	orrs	r2, r1
 80021e8:	f042 021c 	orr.w	r2, r2, #28
 80021ec:	e79f      	b.n	800212e <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021f0:	69a2      	ldr	r2, [r4, #24]
 80021f2:	f021 010f 	bic.w	r1, r1, #15
 80021f6:	3a01      	subs	r2, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80021fc:	e7d3      	b.n	80021a6 <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021fe:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <HAL_ADC_Init+0x1f8>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f013 0f01 	tst.w	r3, #1
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_ADC_Init+0x208>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	d180      	bne.n	800210e <HAL_ADC_Init+0xae>
 800220c:	07d8      	lsls	r0, r3, #31
 800220e:	f53f af7e 	bmi.w	800210e <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002212:	4a16      	ldr	r2, [pc, #88]	@ (800226c <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002214:	6893      	ldr	r3, [r2, #8]
 8002216:	6861      	ldr	r1, [r4, #4]
 8002218:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800221c:	430b      	orrs	r3, r1
 800221e:	6093      	str	r3, [r2, #8]
}
 8002220:	e775      	b.n	800210e <HAL_ADC_Init+0xae>
 8002222:	4a13      	ldr	r2, [pc, #76]	@ (8002270 <HAL_ADC_Init+0x210>)
 8002224:	e7f6      	b.n	8002214 <HAL_ADC_Init+0x1b4>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002226:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 800222a:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 800222c:	3901      	subs	r1, #1
 800222e:	6918      	ldr	r0, [r3, #16]
 8002230:	4332      	orrs	r2, r6
 8002232:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002236:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002238:	430a      	orrs	r2, r1
 800223a:	490e      	ldr	r1, [pc, #56]	@ (8002274 <HAL_ADC_Init+0x214>)
 800223c:	4001      	ands	r1, r0
 800223e:	430a      	orrs	r2, r1
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	611a      	str	r2, [r3, #16]
 8002246:	e79d      	b.n	8002184 <HAL_ADC_Init+0x124>
 8002248:	5fffffc0 	.word	0x5fffffc0
 800224c:	240001a4 	.word	0x240001a4
 8002250:	053e2d63 	.word	0x053e2d63
 8002254:	6fffffc0 	.word	0x6fffffc0
 8002258:	40022000 	.word	0x40022000
 800225c:	58026000 	.word	0x58026000
 8002260:	fff0c003 	.word	0xfff0c003
 8002264:	ffffbffc 	.word	0xffffbffc
 8002268:	40022100 	.word	0x40022100
 800226c:	40022300 	.word	0x40022300
 8002270:	58026300 	.word	0x58026300
 8002274:	fc00f81e 	.word	0xfc00f81e

08002278 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800227a:	2300      	movs	r3, #0
{
 800227c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800227e:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002280:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8002284:	2b01      	cmp	r3, #1
 8002286:	d040      	beq.n	800230a <HAL_ADCEx_Calibration_Start+0x92>
 8002288:	2301      	movs	r3, #1
 800228a:	4604      	mov	r4, r0
 800228c:	460e      	mov	r6, r1
 800228e:	4615      	mov	r5, r2
 8002290:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002294:	f7ff fdfc 	bl	8001e90 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002298:	b9e8      	cbnz	r0, 80022d6 <HAL_ADCEx_Calibration_Start+0x5e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229a:	6d67      	ldr	r7, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 800229c:	f005 4280 	and.w	r2, r5, #1073741824	@ 0x40000000
 80022a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_ADCEx_Calibration_Start+0x98>)
 80022a2:	f406 3180 	and.w	r1, r6, #65536	@ 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80022a6:	6825      	ldr	r5, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80022a8:	403b      	ands	r3, r7
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	6563      	str	r3, [r4, #84]	@ 0x54
 80022b0:	4b18      	ldr	r3, [pc, #96]	@ (8002314 <HAL_ADCEx_Calibration_Start+0x9c>)
 80022b2:	68ae      	ldr	r6, [r5, #8]
 80022b4:	4033      	ands	r3, r6
 80022b6:	4313      	orrs	r3, r2
 80022b8:	430b      	orrs	r3, r1
 80022ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80022be:	60ab      	str	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80022c0:	68ab      	ldr	r3, [r5, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022c2:	4a15      	ldr	r2, [pc, #84]	@ (8002318 <HAL_ADCEx_Calibration_Start+0xa0>)
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0f      	blt.n	80022e8 <HAL_ADCEx_Calibration_Start+0x70>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6563      	str	r3, [r4, #84]	@ 0x54
 80022d4:	e003      	b.n	80022de <HAL_ADCEx_Calibration_Start+0x66>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80022d8:	f043 0310 	orr.w	r3, r3, #16
 80022dc:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022de:	2300      	movs	r3, #0
 80022e0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80022e4:	b003      	add	sp, #12
 80022e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wait_loop_index++;
 80022e8:	9b01      	ldr	r3, [sp, #4]
 80022ea:	3301      	adds	r3, #1
 80022ec:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d3e5      	bcc.n	80022c0 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80022f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 80022f6:	2200      	movs	r2, #0
        return HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80022fa:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 80022fe:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8002302:	f043 0310 	orr.w	r3, r3, #16
 8002306:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8002308:	e7ec      	b.n	80022e4 <HAL_ADCEx_Calibration_Start+0x6c>
  __HAL_LOCK(hadc);
 800230a:	2002      	movs	r0, #2
}
 800230c:	b003      	add	sp, #12
 800230e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002310:	ffffeefd 	.word	0xffffeefd
 8002314:	3ffeffc0 	.word	0x3ffeffc0
 8002318:	25c3f800 	.word	0x25c3f800

0800231c <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop

08002320 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop

08002324 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop

08002328 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop

0800232c <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop

08002330 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002330:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8002334:	2a01      	cmp	r2, #1
 8002336:	d035      	beq.n	80023a4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 8002338:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800233a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800233c:	2001      	movs	r0, #1
{
 800233e:	b4f0      	push	{r4, r5, r6, r7}
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002340:	4d28      	ldr	r5, [pc, #160]	@ (80023e4 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
{
 8002342:	b09a      	sub	sp, #104	@ 0x68
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002344:	681c      	ldr	r4, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002346:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002348:	42ac      	cmp	r4, r5
  __HAL_LOCK(hadc);
 800234a:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800234e:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002350:	d008      	beq.n	8002364 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002352:	6d59      	ldr	r1, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002358:	f041 0120 	orr.w	r1, r1, #32
 800235c:	6559      	str	r1, [r3, #84]	@ 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800235e:	b01a      	add	sp, #104	@ 0x68
 8002360:	bcf0      	pop	{r4, r5, r6, r7}
 8002362:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002364:	4a20      	ldr	r2, [pc, #128]	@ (80023e8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8002366:	6890      	ldr	r0, [r2, #8]
 8002368:	0740      	lsls	r0, r0, #29
 800236a:	d50b      	bpl.n	8002384 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 800236c:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800236e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8002370:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002372:	f042 0220 	orr.w	r2, r2, #32
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 800237e:	b01a      	add	sp, #104	@ 0x68
 8002380:	bcf0      	pop	{r4, r5, r6, r7}
 8002382:	4770      	bx	lr
 8002384:	68a0      	ldr	r0, [r4, #8]
 8002386:	0745      	lsls	r5, r0, #29
 8002388:	d4f1      	bmi.n	800236e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800238a:	6808      	ldr	r0, [r1, #0]
 800238c:	b9a0      	cbnz	r0, 80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x88>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800238e:	4917      	ldr	r1, [pc, #92]	@ (80023ec <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8002390:	6888      	ldr	r0, [r1, #8]
 8002392:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8002396:	6088      	str	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002398:	68a0      	ldr	r0, [r4, #8]
 800239a:	07c0      	lsls	r0, r0, #31
 800239c:	d504      	bpl.n	80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 800239e:	6892      	ldr	r2, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a0:	2000      	movs	r0, #0
 80023a2:	e7e9      	b.n	8002378 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 80023a4:	2002      	movs	r0, #2
}
 80023a6:	4770      	bx	lr
 80023a8:	6892      	ldr	r2, [r2, #8]
 80023aa:	07d5      	lsls	r5, r2, #31
 80023ac:	d4f8      	bmi.n	80023a0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80023ae:	6888      	ldr	r0, [r1, #8]
 80023b0:	4a0f      	ldr	r2, [pc, #60]	@ (80023f0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80023b2:	4002      	ands	r2, r0
 80023b4:	608a      	str	r2, [r1, #8]
 80023b6:	e7f3      	b.n	80023a0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80023b8:	4e0c      	ldr	r6, [pc, #48]	@ (80023ec <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 80023ba:	684f      	ldr	r7, [r1, #4]
 80023bc:	68b5      	ldr	r5, [r6, #8]
 80023be:	f425 4540 	bic.w	r5, r5, #49152	@ 0xc000
 80023c2:	433d      	orrs	r5, r7
 80023c4:	60b5      	str	r5, [r6, #8]
 80023c6:	68a4      	ldr	r4, [r4, #8]
 80023c8:	07e4      	lsls	r4, r4, #31
 80023ca:	d4e8      	bmi.n	800239e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80023cc:	6892      	ldr	r2, [r2, #8]
 80023ce:	07d7      	lsls	r7, r2, #31
 80023d0:	d4e6      	bmi.n	80023a0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
        MODIFY_REG(tmpADC_Common->CCR,
 80023d2:	688a      	ldr	r2, [r1, #8]
 80023d4:	68b4      	ldr	r4, [r6, #8]
 80023d6:	4310      	orrs	r0, r2
 80023d8:	4a05      	ldr	r2, [pc, #20]	@ (80023f0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80023da:	4022      	ands	r2, r4
 80023dc:	4310      	orrs	r0, r2
 80023de:	60b0      	str	r0, [r6, #8]
 80023e0:	e7de      	b.n	80023a0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 80023e2:	bf00      	nop
 80023e4:	40022000 	.word	0x40022000
 80023e8:	40022100 	.word	0x40022100
 80023ec:	40022300 	.word	0x40022300
 80023f0:	fffff0e0 	.word	0xfffff0e0

080023f4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f4:	4906      	ldr	r1, [pc, #24]	@ (8002410 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f6:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023fa:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023fe:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002400:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002404:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002408:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800240a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800240c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00
 8002414:	05fa0000 	.word	0x05fa0000

08002418 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <HAL_NVIC_SetPriority+0x6c>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002422:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800242a:	f1be 0f04 	cmp.w	lr, #4
 800242e:	bf28      	it	cs
 8002430:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002434:	f1bc 0f06 	cmp.w	ip, #6
 8002438:	d91a      	bls.n	8002470 <HAL_NVIC_SetPriority+0x58>
 800243a:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	fa03 f30c 	lsl.w	r3, r3, ip
 8002446:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800244e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	fa03 f30e 	lsl.w	r3, r3, lr
 8002454:	ea21 0303 	bic.w	r3, r1, r3
 8002458:	fa03 f30c 	lsl.w	r3, r3, ip
 800245c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002464:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002466:	db06      	blt.n	8002476 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	4a07      	ldr	r2, [pc, #28]	@ (8002488 <HAL_NVIC_SetPriority+0x70>)
 800246a:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800246c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002470:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002472:	4694      	mov	ip, r2
 8002474:	e7e9      	b.n	800244a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	f000 000f 	and.w	r0, r0, #15
 800247a:	4a04      	ldr	r2, [pc, #16]	@ (800248c <HAL_NVIC_SetPriority+0x74>)
 800247c:	5413      	strb	r3, [r2, r0]
 800247e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00
 8002488:	e000e400 	.word	0xe000e400
 800248c:	e000ed14 	.word	0xe000ed14

08002490 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002490:	2800      	cmp	r0, #0
 8002492:	db07      	blt.n	80024a4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002494:	2301      	movs	r3, #1
 8002496:	f000 011f 	and.w	r1, r0, #31
 800249a:	4a03      	ldr	r2, [pc, #12]	@ (80024a8 <HAL_NVIC_EnableIRQ+0x18>)
 800249c:	0940      	lsrs	r0, r0, #5
 800249e:	408b      	lsls	r3, r1
 80024a0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000e100 	.word	0xe000e100

080024ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	1e43      	subs	r3, r0, #1
 80024ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b2:	d301      	bcc.n	80024b8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80024b6:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	4905      	ldr	r1, [pc, #20]	@ (80024d4 <HAL_SYSTICK_Config+0x28>)
 80024c0:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c4:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c6:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c8:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80024d8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024dc:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80024de:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80024e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80024e6:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 80024e8:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_MPU_Enable+0x1c>)
 80024f6:	f040 0001 	orr.w	r0, r0, #1
 80024fa:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80024fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002500:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002506:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800250a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002514:	4a16      	ldr	r2, [pc, #88]	@ (8002570 <HAL_MPU_ConfigRegion+0x5c>)
 8002516:	7843      	ldrb	r3, [r0, #1]
 8002518:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800251c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002528:	6843      	ldr	r3, [r0, #4]
 800252a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800252e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002530:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002534:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002536:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002538:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800253c:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002540:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002542:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002544:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002548:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800254c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002550:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002552:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002556:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800255a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800255e:	7a01      	ldrb	r1, [r0, #8]
 8002560:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8002564:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002568:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002574:	b188      	cbz	r0, 800259a <HAL_DAC_Init+0x26>
{
 8002576:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002578:	7903      	ldrb	r3, [r0, #4]
 800257a:	4604      	mov	r4, r0
 800257c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002580:	b13b      	cbz	r3, 8002592 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002582:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8002584:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002586:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002588:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800258a:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800258c:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800258e:	7122      	strb	r2, [r4, #4]
}
 8002590:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8002592:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8002594:	f7fe fe16 	bl	80011c4 <HAL_DAC_MspInit>
 8002598:	e7f3      	b.n	8002582 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800259a:	2001      	movs	r0, #1
}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop

080025a0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a2:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d05e      	beq.n	8002666 <HAL_DAC_Start_DMA+0xc6>
 80025a8:	460e      	mov	r6, r1
 80025aa:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025ac:	7942      	ldrb	r2, [r0, #5]
 80025ae:	4604      	mov	r4, r0
 80025b0:	2a01      	cmp	r2, #1
 80025b2:	d060      	beq.n	8002676 <HAL_DAC_Start_DMA+0xd6>
 80025b4:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025b6:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdac);
 80025b8:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80025ba:	2202      	movs	r2, #2
 80025bc:	7102      	strb	r2, [r0, #4]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025be:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 80025c0:	bb3e      	cbnz	r6, 8002612 <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80025c2:	6880      	ldr	r0, [r0, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80025c8:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 800267c <HAL_DAC_Start_DMA+0xdc>
 80025cc:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80025d0:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 8002680 <HAL_DAC_Start_DMA+0xe0>
 80025d4:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80025d8:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 8002684 <HAL_DAC_Start_DMA+0xe4>
 80025dc:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80025e0:	602a      	str	r2, [r5, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80025e2:	2f00      	cmp	r7, #0
 80025e4:	d044      	beq.n	8002670 <HAL_DAC_Start_DMA+0xd0>
 80025e6:	2f04      	cmp	r7, #4
 80025e8:	d137      	bne.n	800265a <HAL_DAC_Start_DMA+0xba>
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
        break;
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80025ea:	f105 020c 	add.w	r2, r5, #12
  }

  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80025ee:	682f      	ldr	r7, [r5, #0]
 80025f0:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
 80025f4:	602f      	str	r7, [r5, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80025f6:	f000 fce7 	bl	8002fc8 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80025fa:	2300      	movs	r3, #0
 80025fc:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 80025fe:	bb38      	cbnz	r0, 8002650 <HAL_DAC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002600:	6822      	ldr	r2, [r4, #0]
 8002602:	f006 0110 	and.w	r1, r6, #16
 8002606:	2301      	movs	r3, #1
 8002608:	6814      	ldr	r4, [r2, #0]
 800260a:	408b      	lsls	r3, r1
 800260c:	4323      	orrs	r3, r4
 800260e:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8002610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002612:	68c0      	ldr	r0, [r0, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002614:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002618:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8002688 <HAL_DAC_Start_DMA+0xe8>
 800261c:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002620:	f8df c068 	ldr.w	ip, [pc, #104]	@ 800268c <HAL_DAC_Start_DMA+0xec>
 8002624:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002628:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8002690 <HAL_DAC_Start_DMA+0xf0>
 800262c:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002630:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8002632:	b1d7      	cbz	r7, 800266a <HAL_DAC_Start_DMA+0xca>
 8002634:	2f04      	cmp	r7, #4
 8002636:	d113      	bne.n	8002660 <HAL_DAC_Start_DMA+0xc0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002638:	f105 0218 	add.w	r2, r5, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800263c:	682f      	ldr	r7, [r5, #0]
 800263e:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 8002642:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002644:	f000 fcc0 	bl	8002fc8 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8002648:	2300      	movs	r3, #0
 800264a:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 800264c:	2800      	cmp	r0, #0
 800264e:	d0d7      	beq.n	8002600 <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002650:	6923      	ldr	r3, [r4, #16]
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	6123      	str	r3, [r4, #16]
}
 8002658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800265a:	f105 0210 	add.w	r2, r5, #16
  if (Channel == DAC_CHANNEL_1)
 800265e:	e7c6      	b.n	80025ee <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002660:	f105 021c 	add.w	r2, r5, #28
  if (Channel == DAC_CHANNEL_1)
 8002664:	e7ea      	b.n	800263c <HAL_DAC_Start_DMA+0x9c>
    return HAL_ERROR;
 8002666:	2001      	movs	r0, #1
}
 8002668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800266a:	f105 0214 	add.w	r2, r5, #20
  if (Channel == DAC_CHANNEL_1)
 800266e:	e7e5      	b.n	800263c <HAL_DAC_Start_DMA+0x9c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002670:	f105 0208 	add.w	r2, r5, #8
  if (Channel == DAC_CHANNEL_1)
 8002674:	e7bb      	b.n	80025ee <HAL_DAC_Start_DMA+0x4e>
  __HAL_LOCK(hdac);
 8002676:	2002      	movs	r0, #2
}
 8002678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800267a:	bf00      	nop
 800267c:	08002699 	.word	0x08002699
 8002680:	080026ad 	.word	0x080026ad
 8002684:	080026bd 	.word	0x080026bd
 8002688:	08002895 	.word	0x08002895
 800268c:	080028a9 	.word	0x080028a9
 8002690:	080028b9 	.word	0x080028b9

08002694 <HAL_DAC_ConvCpltCallbackCh1>:
  * @brief  Conversion complete callback in non-blocking mode for Channel1
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop

08002698 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002698:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800269a:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800269c:	4620      	mov	r0, r4
 800269e:	f7ff fff9 	bl	8002694 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026a2:	2301      	movs	r3, #1
 80026a4:	7123      	strb	r3, [r4, #4]
}
 80026a6:	bd10      	pop	{r4, pc}

080026a8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop

080026ac <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80026ac:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80026ae:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80026b0:	f7ff fffa 	bl	80026a8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80026b4:	bd08      	pop	{r3, pc}
 80026b6:	bf00      	nop

080026b8 <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop

080026bc <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80026bc:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026be:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026c0:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80026c2:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80026ca:	f7ff fff5 	bl	80026b8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026ce:	2301      	movs	r3, #1
 80026d0:	7123      	strb	r3, [r4, #4]
}
 80026d2:	bd10      	pop	{r4, pc}

080026d4 <HAL_DAC_DMAUnderrunCallbackCh1>:
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop

080026d8 <HAL_DAC_IRQHandler>:
  uint32_t itsource = hdac->Instance->CR;
 80026d8:	6803      	ldr	r3, [r0, #0]
{
 80026da:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = hdac->Instance->CR;
 80026dc:	681d      	ldr	r5, [r3, #0]
{
 80026de:	4604      	mov	r4, r0
  uint32_t itflag   = hdac->Instance->SR;
 80026e0:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80026e2:	04aa      	lsls	r2, r5, #18
 80026e4:	d501      	bpl.n	80026ea <HAL_DAC_IRQHandler+0x12>
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80026e6:	04b1      	lsls	r1, r6, #18
 80026e8:	d417      	bmi.n	800271a <HAL_DAC_IRQHandler+0x42>
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80026ea:	00aa      	lsls	r2, r5, #2
 80026ec:	d501      	bpl.n	80026f2 <HAL_DAC_IRQHandler+0x1a>
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80026ee:	00b3      	lsls	r3, r6, #2
 80026f0:	d400      	bmi.n	80026f4 <HAL_DAC_IRQHandler+0x1c>
}
 80026f2:	bd70      	pop	{r4, r5, r6, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80026f4:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80026fc:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 80026fe:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002700:	6922      	ldr	r2, [r4, #16]
 8002702:	f042 0202 	orr.w	r2, r2, #2
 8002706:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002708:	6359      	str	r1, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
}
 8002710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002714:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002716:	f000 b8db 	b.w	80028d0 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 800271a:	2204      	movs	r2, #4
 800271c:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800271e:	6902      	ldr	r2, [r0, #16]
 8002720:	f042 0201 	orr.w	r2, r2, #1
 8002724:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002726:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800272a:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002732:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002734:	f7ff ffce 	bl	80026d4 <HAL_DAC_DMAUnderrunCallbackCh1>
 8002738:	e7d7      	b.n	80026ea <HAL_DAC_IRQHandler+0x12>
 800273a:	bf00      	nop

0800273c <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 800273c:	2800      	cmp	r0, #0
 800273e:	f000 8086 	beq.w	800284e <HAL_DAC_ConfigChannel+0x112>
{
 8002742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002746:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8002748:	2900      	cmp	r1, #0
 800274a:	d04d      	beq.n	80027e8 <HAL_DAC_ConfigChannel+0xac>
  __HAL_LOCK(hdac);
 800274c:	7943      	ldrb	r3, [r0, #5]
 800274e:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002750:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8002752:	2b01      	cmp	r3, #1
 8002754:	d079      	beq.n	800284a <HAL_DAC_ConfigChannel+0x10e>
 8002756:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002758:	2904      	cmp	r1, #4
 800275a:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 800275c:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800275e:	f04f 0302 	mov.w	r3, #2
 8002762:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002764:	d043      	beq.n	80027ee <HAL_DAC_ConfigChannel+0xb2>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002766:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 800276a:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800276c:	6928      	ldr	r0, [r5, #16]
 800276e:	2801      	cmp	r0, #1
 8002770:	d108      	bne.n	8002784 <HAL_DAC_ConfigChannel+0x48>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002772:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 8002774:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002776:	4090      	lsls	r0, r2
 8002778:	ea26 0600 	bic.w	r6, r6, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800277c:	6968      	ldr	r0, [r5, #20]
 800277e:	4090      	lsls	r0, r2
 8002780:	4330      	orrs	r0, r6
    hdac->Instance->CCR = tmpreg1;
 8002782:	6398      	str	r0, [r3, #56]	@ 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002784:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 8002786:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002788:	4090      	lsls	r0, r2
 800278a:	ea26 0600 	bic.w	r6, r6, r0
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800278e:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002792:	2801      	cmp	r0, #1
 8002794:	d055      	beq.n	8002842 <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002796:	2802      	cmp	r0, #2
 8002798:	d055      	beq.n	8002846 <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800279a:	fab7 f087 	clz	r0, r7
 800279e:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80027a0:	4339      	orrs	r1, r7
 80027a2:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027a4:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80027a6:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027aa:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027ac:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80027ae:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027b0:	4331      	orrs	r1, r6
  hdac->State = HAL_DAC_STATE_READY;
 80027b2:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 80027b4:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80027bc:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80027c0:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80027c2:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 80027c4:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80027c6:	ea21 0105 	bic.w	r1, r1, r5
  __HAL_UNLOCK(hdac);
 80027ca:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027cc:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80027ce:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 80027d0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80027d2:	fa00 f102 	lsl.w	r1, r0, r2
 80027d6:	681a      	ldr	r2, [r3, #0]
  return status;
 80027d8:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80027da:	ea22 0201 	bic.w	r2, r2, r1
 80027de:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80027e0:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 80027e2:	7165      	strb	r5, [r4, #5]
}
 80027e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80027e8:	2001      	movs	r0, #1
}
 80027ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 80027ee:	f7fe fec5 	bl	800157c <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027f2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80027f4:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80027f6:	b9be      	cbnz	r6, 8002828 <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80027f8:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 800288c <HAL_DAC_ConfigChannel+0x150>
 80027fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027fe:	ea12 0f08 	tst.w	r2, r8
 8002802:	d026      	beq.n	8002852 <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002804:	f7fe feba 	bl	800157c <HAL_GetTick>
 8002808:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800280a:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800280c:	2801      	cmp	r0, #1
 800280e:	d9f5      	bls.n	80027fc <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002812:	ea12 0f08 	tst.w	r2, r8
 8002816:	d0f1      	beq.n	80027fc <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002818:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800281a:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 800281c:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800281e:	f043 0308 	orr.w	r3, r3, #8
 8002822:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002824:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 8002826:	e7dd      	b.n	80027e4 <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800282a:	2a00      	cmp	r2, #0
 800282c:	da2a      	bge.n	8002884 <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800282e:	f7fe fea5 	bl	800157c <HAL_GetTick>
 8002832:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002834:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002836:	2801      	cmp	r0, #1
 8002838:	d9f6      	bls.n	8002828 <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800283a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800283c:	2a00      	cmp	r2, #0
 800283e:	daf3      	bge.n	8002828 <HAL_DAC_ConfigChannel+0xec>
 8002840:	e7ea      	b.n	8002818 <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 8002842:	2000      	movs	r0, #0
 8002844:	e7ac      	b.n	80027a0 <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 8002846:	2001      	movs	r0, #1
 8002848:	e7aa      	b.n	80027a0 <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 800284a:	2002      	movs	r0, #2
 800284c:	e7ca      	b.n	80027e4 <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 800284e:	2001      	movs	r0, #1
}
 8002850:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002852:	69aa      	ldr	r2, [r5, #24]
 8002854:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002856:	f006 0210 	and.w	r2, r6, #16
 800285a:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 800285e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002860:	4090      	lsls	r0, r2
 8002862:	ea21 0100 	bic.w	r1, r1, r0
 8002866:	69e8      	ldr	r0, [r5, #28]
 8002868:	4090      	lsls	r0, r2
 800286a:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800286c:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800286e:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002870:	4090      	lsls	r0, r2
 8002872:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002874:	ea21 0100 	bic.w	r1, r1, r0
 8002878:	6a28      	ldr	r0, [r5, #32]
 800287a:	4090      	lsls	r0, r2
 800287c:	4301      	orrs	r1, r0
 800287e:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002880:	6829      	ldr	r1, [r5, #0]
 8002882:	e773      	b.n	800276c <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002884:	69aa      	ldr	r2, [r5, #24]
 8002886:	645a      	str	r2, [r3, #68]	@ 0x44
 8002888:	e7e5      	b.n	8002856 <HAL_DAC_ConfigChannel+0x11a>
 800288a:	bf00      	nop
 800288c:	20008000 	.word	0x20008000

08002890 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop

08002894 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002894:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002896:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002898:	4620      	mov	r0, r4
 800289a:	f7ff fff9 	bl	8002890 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800289e:	2301      	movs	r3, #1
 80028a0:	7123      	strb	r3, [r4, #4]
}
 80028a2:	bd10      	pop	{r4, pc}

080028a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop

080028a8 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80028a8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80028aa:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80028ac:	f7ff fffa 	bl	80028a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80028b0:	bd08      	pop	{r3, pc}
 80028b2:	bf00      	nop

080028b4 <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop

080028b8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80028b8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ba:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028bc:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80028be:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80028c6:	f7ff fff5 	bl	80028b4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028ca:	2301      	movs	r3, #1
 80028cc:	7123      	strb	r3, [r4, #4]
}
 80028ce:	bd10      	pop	{r4, pc}

080028d0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop

080028d4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028d4:	4936      	ldr	r1, [pc, #216]	@ (80029b0 <DMA_CalcBaseAndBitshift+0xdc>)
{
 80028d6:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028d8:	6803      	ldr	r3, [r0, #0]
 80028da:	428b      	cmp	r3, r1
 80028dc:	d033      	beq.n	8002946 <DMA_CalcBaseAndBitshift+0x72>
 80028de:	3118      	adds	r1, #24
 80028e0:	1a59      	subs	r1, r3, r1
 80028e2:	fab1 f181 	clz	r1, r1
 80028e6:	0949      	lsrs	r1, r1, #5
 80028e8:	bb69      	cbnz	r1, 8002946 <DMA_CalcBaseAndBitshift+0x72>
 80028ea:	4832      	ldr	r0, [pc, #200]	@ (80029b4 <DMA_CalcBaseAndBitshift+0xe0>)
 80028ec:	4283      	cmp	r3, r0
 80028ee:	d03e      	beq.n	800296e <DMA_CalcBaseAndBitshift+0x9a>
 80028f0:	3018      	adds	r0, #24
 80028f2:	4283      	cmp	r3, r0
 80028f4:	d03e      	beq.n	8002974 <DMA_CalcBaseAndBitshift+0xa0>
 80028f6:	3018      	adds	r0, #24
 80028f8:	4283      	cmp	r3, r0
 80028fa:	d034      	beq.n	8002966 <DMA_CalcBaseAndBitshift+0x92>
 80028fc:	3018      	adds	r0, #24
 80028fe:	4283      	cmp	r3, r0
 8002900:	d03b      	beq.n	800297a <DMA_CalcBaseAndBitshift+0xa6>
 8002902:	3018      	adds	r0, #24
 8002904:	4283      	cmp	r3, r0
 8002906:	d03e      	beq.n	8002986 <DMA_CalcBaseAndBitshift+0xb2>
 8002908:	3018      	adds	r0, #24
 800290a:	4283      	cmp	r3, r0
 800290c:	d02a      	beq.n	8002964 <DMA_CalcBaseAndBitshift+0x90>
 800290e:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8002912:	4283      	cmp	r3, r0
 8002914:	d035      	beq.n	8002982 <DMA_CalcBaseAndBitshift+0xae>
 8002916:	4928      	ldr	r1, [pc, #160]	@ (80029b8 <DMA_CalcBaseAndBitshift+0xe4>)
 8002918:	428b      	cmp	r3, r1
 800291a:	d031      	beq.n	8002980 <DMA_CalcBaseAndBitshift+0xac>
 800291c:	3118      	adds	r1, #24
 800291e:	428b      	cmp	r3, r1
 8002920:	d034      	beq.n	800298c <DMA_CalcBaseAndBitshift+0xb8>
 8002922:	3118      	adds	r1, #24
 8002924:	428b      	cmp	r3, r1
 8002926:	d034      	beq.n	8002992 <DMA_CalcBaseAndBitshift+0xbe>
 8002928:	3118      	adds	r1, #24
 800292a:	428b      	cmp	r3, r1
 800292c:	d034      	beq.n	8002998 <DMA_CalcBaseAndBitshift+0xc4>
 800292e:	3118      	adds	r1, #24
 8002930:	428b      	cmp	r3, r1
 8002932:	d034      	beq.n	800299e <DMA_CalcBaseAndBitshift+0xca>
 8002934:	3118      	adds	r1, #24
 8002936:	428b      	cmp	r3, r1
 8002938:	d034      	beq.n	80029a4 <DMA_CalcBaseAndBitshift+0xd0>
 800293a:	3118      	adds	r1, #24
 800293c:	428b      	cmp	r3, r1
 800293e:	d034      	beq.n	80029aa <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002940:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8002944:	e011      	b.n	800296a <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002946:	b2db      	uxtb	r3, r3
 8002948:	491c      	ldr	r1, [pc, #112]	@ (80029bc <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800294a:	481d      	ldr	r0, [pc, #116]	@ (80029c0 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800294c:	3b10      	subs	r3, #16
 800294e:	fba1 1303 	umull	r1, r3, r1, r3
{
 8002952:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002954:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002956:	4c1b      	ldr	r4, [pc, #108]	@ (80029c4 <DMA_CalcBaseAndBitshift+0xf0>)
 8002958:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 800295a:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800295e:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 8002962:	4770      	bx	lr
 8002964:	2116      	movs	r1, #22
 8002966:	4818      	ldr	r0, [pc, #96]	@ (80029c8 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002968:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800296a:	6590      	str	r0, [r2, #88]	@ 0x58
}
 800296c:	4770      	bx	lr
 800296e:	2110      	movs	r1, #16
 8002970:	4813      	ldr	r0, [pc, #76]	@ (80029c0 <DMA_CalcBaseAndBitshift+0xec>)
 8002972:	e7f9      	b.n	8002968 <DMA_CalcBaseAndBitshift+0x94>
 8002974:	2116      	movs	r1, #22
 8002976:	4812      	ldr	r0, [pc, #72]	@ (80029c0 <DMA_CalcBaseAndBitshift+0xec>)
 8002978:	e7f6      	b.n	8002968 <DMA_CalcBaseAndBitshift+0x94>
 800297a:	2106      	movs	r1, #6
 800297c:	4812      	ldr	r0, [pc, #72]	@ (80029c8 <DMA_CalcBaseAndBitshift+0xf4>)
 800297e:	e7f3      	b.n	8002968 <DMA_CalcBaseAndBitshift+0x94>
 8002980:	2106      	movs	r1, #6
 8002982:	4812      	ldr	r0, [pc, #72]	@ (80029cc <DMA_CalcBaseAndBitshift+0xf8>)
 8002984:	e7f0      	b.n	8002968 <DMA_CalcBaseAndBitshift+0x94>
 8002986:	2110      	movs	r1, #16
 8002988:	480f      	ldr	r0, [pc, #60]	@ (80029c8 <DMA_CalcBaseAndBitshift+0xf4>)
 800298a:	e7ed      	b.n	8002968 <DMA_CalcBaseAndBitshift+0x94>
 800298c:	2110      	movs	r1, #16
 800298e:	480f      	ldr	r0, [pc, #60]	@ (80029cc <DMA_CalcBaseAndBitshift+0xf8>)
 8002990:	e7ea      	b.n	8002968 <DMA_CalcBaseAndBitshift+0x94>
 8002992:	2116      	movs	r1, #22
 8002994:	480d      	ldr	r0, [pc, #52]	@ (80029cc <DMA_CalcBaseAndBitshift+0xf8>)
 8002996:	e7e7      	b.n	8002968 <DMA_CalcBaseAndBitshift+0x94>
 8002998:	2100      	movs	r1, #0
 800299a:	480d      	ldr	r0, [pc, #52]	@ (80029d0 <DMA_CalcBaseAndBitshift+0xfc>)
 800299c:	e7e4      	b.n	8002968 <DMA_CalcBaseAndBitshift+0x94>
 800299e:	2106      	movs	r1, #6
 80029a0:	480b      	ldr	r0, [pc, #44]	@ (80029d0 <DMA_CalcBaseAndBitshift+0xfc>)
 80029a2:	e7e1      	b.n	8002968 <DMA_CalcBaseAndBitshift+0x94>
 80029a4:	2110      	movs	r1, #16
 80029a6:	480a      	ldr	r0, [pc, #40]	@ (80029d0 <DMA_CalcBaseAndBitshift+0xfc>)
 80029a8:	e7de      	b.n	8002968 <DMA_CalcBaseAndBitshift+0x94>
 80029aa:	2116      	movs	r1, #22
 80029ac:	4808      	ldr	r0, [pc, #32]	@ (80029d0 <DMA_CalcBaseAndBitshift+0xfc>)
 80029ae:	e7db      	b.n	8002968 <DMA_CalcBaseAndBitshift+0x94>
 80029b0:	40020010 	.word	0x40020010
 80029b4:	40020040 	.word	0x40020040
 80029b8:	40020428 	.word	0x40020428
 80029bc:	aaaaaaab 	.word	0xaaaaaaab
 80029c0:	40020000 	.word	0x40020000
 80029c4:	08062b90 	.word	0x08062b90
 80029c8:	40020004 	.word	0x40020004
 80029cc:	40020400 	.word	0x40020400
 80029d0:	40020404 	.word	0x40020404

080029d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80029d4:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80029d6:	4b28      	ldr	r3, [pc, #160]	@ (8002a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 80029d8:	4928      	ldr	r1, [pc, #160]	@ (8002a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
{
 80029da:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80029dc:	4d28      	ldr	r5, [pc, #160]	@ (8002a80 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80029de:	4c29      	ldr	r4, [pc, #164]	@ (8002a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80029e0:	42aa      	cmp	r2, r5
 80029e2:	bf18      	it	ne
 80029e4:	429a      	cmpne	r2, r3
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	428a      	cmp	r2, r1
 80029ee:	bf08      	it	eq
 80029f0:	f043 0301 	orreq.w	r3, r3, #1
 80029f4:	3128      	adds	r1, #40	@ 0x28
 80029f6:	42a2      	cmp	r2, r4
 80029f8:	bf08      	it	eq
 80029fa:	f043 0301 	orreq.w	r3, r3, #1
 80029fe:	3428      	adds	r4, #40	@ 0x28
 8002a00:	428a      	cmp	r2, r1
 8002a02:	bf08      	it	eq
 8002a04:	f043 0301 	orreq.w	r3, r3, #1
 8002a08:	3128      	adds	r1, #40	@ 0x28
 8002a0a:	42a2      	cmp	r2, r4
 8002a0c:	bf08      	it	eq
 8002a0e:	f043 0301 	orreq.w	r3, r3, #1
 8002a12:	428a      	cmp	r2, r1
 8002a14:	bf08      	it	eq
 8002a16:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a1a:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a1c:	b913      	cbnz	r3, 8002a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d111      	bne.n	8002a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002a24:	f1a1 0308 	sub.w	r3, r1, #8
 8002a28:	4c18      	ldr	r4, [pc, #96]	@ (8002a8c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002a2a:	4a19      	ldr	r2, [pc, #100]	@ (8002a90 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a2c:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002a2e:	fba4 4303 	umull	r4, r3, r4, r3
 8002a32:	4c18      	ldr	r4, [pc, #96]	@ (8002a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
 8002a34:	091d      	lsrs	r5, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002a36:	eb02 1313 	add.w	r3, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a3a:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002a3c:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a3e:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002a40:	e9c0 3418 	strd	r3, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002a44:	bc30      	pop	{r4, r5}
 8002a46:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a48:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002a4c:	4912      	ldr	r1, [pc, #72]	@ (8002a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a4e:	4c13      	ldr	r4, [pc, #76]	@ (8002a9c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002a50:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a52:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002a56:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a58:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002a5c:	d908      	bls.n	8002a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a5e:	f003 041f 	and.w	r4, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002a62:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a64:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002a66:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a68:	40a1      	lsls	r1, r4
 8002a6a:	4c0e      	ldr	r4, [pc, #56]	@ (8002aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002a6c:	0093      	lsls	r3, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002a6e:	e7e6      	b.n	8002a3e <DMA_CalcDMAMUXChannelBaseAndMask+0x6a>
      stream_number += 8U;
 8002a70:	3308      	adds	r3, #8
 8002a72:	461c      	mov	r4, r3
 8002a74:	e7f5      	b.n	8002a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
 8002a76:	bf00      	nop
 8002a78:	58025408 	.word	0x58025408
 8002a7c:	58025430 	.word	0x58025430
 8002a80:	5802541c 	.word	0x5802541c
 8002a84:	58025444 	.word	0x58025444
 8002a88:	58025494 	.word	0x58025494
 8002a8c:	cccccccd 	.word	0xcccccccd
 8002a90:	16009600 	.word	0x16009600
 8002a94:	58025880 	.word	0x58025880
 8002a98:	bffdfbf0 	.word	0xbffdfbf0
 8002a9c:	aaaaaaab 	.word	0xaaaaaaab
 8002aa0:	10008200 	.word	0x10008200
 8002aa4:	40020880 	.word	0x40020880

08002aa8 <HAL_DMA_Init>:
{
 8002aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aac:	4605      	mov	r5, r0
 8002aae:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7fe fd64 	bl	800157c <HAL_GetTick>
  if(hdma == NULL)
 8002ab4:	2d00      	cmp	r5, #0
 8002ab6:	f000 81a1 	beq.w	8002dfc <HAL_DMA_Init+0x354>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aba:	682c      	ldr	r4, [r5, #0]
 8002abc:	4606      	mov	r6, r0
 8002abe:	4bac      	ldr	r3, [pc, #688]	@ (8002d70 <HAL_DMA_Init+0x2c8>)
 8002ac0:	4aac      	ldr	r2, [pc, #688]	@ (8002d74 <HAL_DMA_Init+0x2cc>)
 8002ac2:	4294      	cmp	r4, r2
 8002ac4:	bf18      	it	ne
 8002ac6:	429c      	cmpne	r4, r3
 8002ac8:	f102 0218 	add.w	r2, r2, #24
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	4294      	cmp	r4, r2
 8002ad4:	bf08      	it	eq
 8002ad6:	f043 0301 	orreq.w	r3, r3, #1
 8002ada:	3218      	adds	r2, #24
 8002adc:	4294      	cmp	r4, r2
 8002ade:	bf08      	it	eq
 8002ae0:	f043 0301 	orreq.w	r3, r3, #1
 8002ae4:	3218      	adds	r2, #24
 8002ae6:	4294      	cmp	r4, r2
 8002ae8:	bf08      	it	eq
 8002aea:	f043 0301 	orreq.w	r3, r3, #1
 8002aee:	3218      	adds	r2, #24
 8002af0:	4294      	cmp	r4, r2
 8002af2:	bf08      	it	eq
 8002af4:	f043 0301 	orreq.w	r3, r3, #1
 8002af8:	3218      	adds	r2, #24
 8002afa:	4294      	cmp	r4, r2
 8002afc:	bf08      	it	eq
 8002afe:	f043 0301 	orreq.w	r3, r3, #1
 8002b02:	3218      	adds	r2, #24
 8002b04:	4294      	cmp	r4, r2
 8002b06:	bf08      	it	eq
 8002b08:	f043 0301 	orreq.w	r3, r3, #1
 8002b0c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002b10:	4294      	cmp	r4, r2
 8002b12:	bf08      	it	eq
 8002b14:	f043 0301 	orreq.w	r3, r3, #1
 8002b18:	3218      	adds	r2, #24
 8002b1a:	4294      	cmp	r4, r2
 8002b1c:	bf08      	it	eq
 8002b1e:	f043 0301 	orreq.w	r3, r3, #1
 8002b22:	3218      	adds	r2, #24
 8002b24:	4294      	cmp	r4, r2
 8002b26:	bf08      	it	eq
 8002b28:	f043 0301 	orreq.w	r3, r3, #1
 8002b2c:	3218      	adds	r2, #24
 8002b2e:	4294      	cmp	r4, r2
 8002b30:	bf08      	it	eq
 8002b32:	f043 0301 	orreq.w	r3, r3, #1
 8002b36:	3218      	adds	r2, #24
 8002b38:	4294      	cmp	r4, r2
 8002b3a:	bf08      	it	eq
 8002b3c:	f043 0301 	orreq.w	r3, r3, #1
 8002b40:	3218      	adds	r2, #24
 8002b42:	4294      	cmp	r4, r2
 8002b44:	bf08      	it	eq
 8002b46:	f043 0301 	orreq.w	r3, r3, #1
 8002b4a:	3218      	adds	r2, #24
 8002b4c:	4294      	cmp	r4, r2
 8002b4e:	bf08      	it	eq
 8002b50:	f043 0301 	orreq.w	r3, r3, #1
 8002b54:	b91b      	cbnz	r3, 8002b5e <HAL_DMA_Init+0xb6>
 8002b56:	4b88      	ldr	r3, [pc, #544]	@ (8002d78 <HAL_DMA_Init+0x2d0>)
 8002b58:	429c      	cmp	r4, r3
 8002b5a:	f040 8196 	bne.w	8002e8a <HAL_DMA_Init+0x3e2>
    __HAL_UNLOCK(hdma);
 8002b5e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b60:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8002b62:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b66:	f885 2035 	strb.w	r2, [r5, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6023      	str	r3, [r4, #0]
 8002b72:	e006      	b.n	8002b82 <HAL_DMA_Init+0xda>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b74:	f7fe fd02 	bl	800157c <HAL_GetTick>
 8002b78:	1b80      	subs	r0, r0, r6
 8002b7a:	2805      	cmp	r0, #5
 8002b7c:	f200 8142 	bhi.w	8002e04 <HAL_DMA_Init+0x35c>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b80:	682c      	ldr	r4, [r5, #0]
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	07df      	lsls	r7, r3, #31
 8002b86:	d4f5      	bmi.n	8002b74 <HAL_DMA_Init+0xcc>
    registerValue |=  hdma->Init.Direction           |
 8002b88:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8c:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 8002b8e:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b90:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b92:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6969      	ldr	r1, [r5, #20]
 8002b98:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9a:	69e9      	ldr	r1, [r5, #28]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ba0:	4976      	ldr	r1, [pc, #472]	@ (8002d7c <HAL_DMA_Init+0x2d4>)
 8002ba2:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ba4:	6a28      	ldr	r0, [r5, #32]
 8002ba6:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ba8:	4875      	ldr	r0, [pc, #468]	@ (8002d80 <HAL_DMA_Init+0x2d8>)
    registerValue |=  hdma->Init.Direction           |
 8002baa:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bac:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8002bae:	2904      	cmp	r1, #4
 8002bb0:	f000 813d 	beq.w	8002e2e <HAL_DMA_Init+0x386>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002bb4:	6800      	ldr	r0, [r0, #0]
 8002bb6:	f36f 000f 	bfc	r0, #0, #16
 8002bba:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8002bbe:	f080 80f1 	bcs.w	8002da4 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002bc2:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002bc4:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc6:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002bca:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bcc:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bce:	4628      	mov	r0, r5
 8002bd0:	f7ff fe80 	bl	80028d4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bd4:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002bd6:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bd8:	496a      	ldr	r1, [pc, #424]	@ (8002d84 <HAL_DMA_Init+0x2dc>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bda:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bde:	4f6a      	ldr	r7, [pc, #424]	@ (8002d88 <HAL_DMA_Init+0x2e0>)
 8002be0:	1a61      	subs	r1, r4, r1
 8002be2:	4e6a      	ldr	r6, [pc, #424]	@ (8002d8c <HAL_DMA_Init+0x2e4>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002be4:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002be6:	4a6a      	ldr	r2, [pc, #424]	@ (8002d90 <HAL_DMA_Init+0x2e8>)
 8002be8:	fab1 f181 	clz	r1, r1
 8002bec:	1be7      	subs	r7, r4, r7
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bee:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bf0:	eba4 0a02 	sub.w	sl, r4, r2
 8002bf4:	4b67      	ldr	r3, [pc, #412]	@ (8002d94 <HAL_DMA_Init+0x2ec>)
 8002bf6:	0949      	lsrs	r1, r1, #5
 8002bf8:	4a5e      	ldr	r2, [pc, #376]	@ (8002d74 <HAL_DMA_Init+0x2cc>)
 8002bfa:	faba fa8a 	clz	sl, sl
 8002bfe:	eba4 0903 	sub.w	r9, r4, r3
 8002c02:	4b5b      	ldr	r3, [pc, #364]	@ (8002d70 <HAL_DMA_Init+0x2c8>)
 8002c04:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8002c08:	fab7 f787 	clz	r7, r7
 8002c0c:	4294      	cmp	r4, r2
 8002c0e:	bf18      	it	ne
 8002c10:	429c      	cmpne	r4, r3
 8002c12:	f102 0218 	add.w	r2, r2, #24
 8002c16:	fab9 f989 	clz	r9, r9
 8002c1a:	eba4 0606 	sub.w	r6, r4, r6
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002c28:	fab6 f686 	clz	r6, r6
 8002c2c:	4294      	cmp	r4, r2
 8002c2e:	bf08      	it	eq
 8002c30:	f043 0301 	orreq.w	r3, r3, #1
 8002c34:	3218      	adds	r2, #24
 8002c36:	097f      	lsrs	r7, r7, #5
 8002c38:	4294      	cmp	r4, r2
 8002c3a:	bf08      	it	eq
 8002c3c:	f043 0301 	orreq.w	r3, r3, #1
 8002c40:	3218      	adds	r2, #24
 8002c42:	0976      	lsrs	r6, r6, #5
 8002c44:	4294      	cmp	r4, r2
 8002c46:	bf08      	it	eq
 8002c48:	f043 0301 	orreq.w	r3, r3, #1
 8002c4c:	3218      	adds	r2, #24
 8002c4e:	4294      	cmp	r4, r2
 8002c50:	bf08      	it	eq
 8002c52:	f043 0301 	orreq.w	r3, r3, #1
 8002c56:	3218      	adds	r2, #24
 8002c58:	4294      	cmp	r4, r2
 8002c5a:	bf08      	it	eq
 8002c5c:	f043 0301 	orreq.w	r3, r3, #1
 8002c60:	3218      	adds	r2, #24
 8002c62:	4294      	cmp	r4, r2
 8002c64:	bf08      	it	eq
 8002c66:	f043 0301 	orreq.w	r3, r3, #1
 8002c6a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8002c6e:	4294      	cmp	r4, r2
 8002c70:	bf08      	it	eq
 8002c72:	f043 0301 	orreq.w	r3, r3, #1
 8002c76:	3218      	adds	r2, #24
 8002c78:	4294      	cmp	r4, r2
 8002c7a:	bf08      	it	eq
 8002c7c:	f043 0301 	orreq.w	r3, r3, #1
 8002c80:	3218      	adds	r2, #24
 8002c82:	4294      	cmp	r4, r2
 8002c84:	bf08      	it	eq
 8002c86:	f043 0301 	orreq.w	r3, r3, #1
 8002c8a:	3218      	adds	r2, #24
 8002c8c:	4294      	cmp	r4, r2
 8002c8e:	bf08      	it	eq
 8002c90:	f043 0301 	orreq.w	r3, r3, #1
 8002c94:	3218      	adds	r2, #24
 8002c96:	4294      	cmp	r4, r2
 8002c98:	bf08      	it	eq
 8002c9a:	f043 0301 	orreq.w	r3, r3, #1
 8002c9e:	3218      	adds	r2, #24
 8002ca0:	4294      	cmp	r4, r2
 8002ca2:	bf08      	it	eq
 8002ca4:	f043 0301 	orreq.w	r3, r3, #1
 8002ca8:	3218      	adds	r2, #24
 8002caa:	4294      	cmp	r4, r2
 8002cac:	bf08      	it	eq
 8002cae:	f043 0301 	orreq.w	r3, r3, #1
 8002cb2:	3218      	adds	r2, #24
 8002cb4:	4294      	cmp	r4, r2
 8002cb6:	bf08      	it	eq
 8002cb8:	f043 0301 	orreq.w	r3, r3, #1
 8002cbc:	4a36      	ldr	r2, [pc, #216]	@ (8002d98 <HAL_DMA_Init+0x2f0>)
 8002cbe:	ea4a 0303 	orr.w	r3, sl, r3
 8002cc2:	eba4 0802 	sub.w	r8, r4, r2
 8002cc6:	323c      	adds	r2, #60	@ 0x3c
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	fab8 f888 	clz	r8, r8
 8002cce:	eba4 0b02 	sub.w	fp, r4, r2
 8002cd2:	3214      	adds	r2, #20
 8002cd4:	ea49 0303 	orr.w	r3, r9, r3
 8002cd8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002cdc:	fabb fb8b 	clz	fp, fp
 8002ce0:	1aa2      	subs	r2, r4, r2
 8002ce2:	ea48 0303 	orr.w	r3, r8, r3
 8002ce6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8002cea:	fab2 f282 	clz	r2, r2
 8002cee:	433b      	orrs	r3, r7
 8002cf0:	0952      	lsrs	r2, r2, #5
 8002cf2:	4333      	orrs	r3, r6
 8002cf4:	9201      	str	r2, [sp, #4]
 8002cf6:	ea5b 0303 	orrs.w	r3, fp, r3
 8002cfa:	d100      	bne.n	8002cfe <HAL_DMA_Init+0x256>
 8002cfc:	b382      	cbz	r2, 8002d60 <HAL_DMA_Init+0x2b8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cfe:	4628      	mov	r0, r5
 8002d00:	9100      	str	r1, [sp, #0]
 8002d02:	f7ff fe67 	bl	80029d4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d06:	68ab      	ldr	r3, [r5, #8]
 8002d08:	9900      	ldr	r1, [sp, #0]
 8002d0a:	2b80      	cmp	r3, #128	@ 0x80
 8002d0c:	f000 8083 	beq.w	8002e16 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d10:	686a      	ldr	r2, [r5, #4]
 8002d12:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002d14:	b2d0      	uxtb	r0, r2
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d16:	3a01      	subs	r2, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d18:	e9d5 4c19 	ldrd	r4, ip, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d1c:	2a07      	cmp	r2, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d1e:	6018      	str	r0, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d20:	f8c4 c004 	str.w	ip, [r4, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d24:	d87e      	bhi.n	8002e24 <HAL_DMA_Init+0x37c>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d26:	ea4a 0a01 	orr.w	sl, sl, r1
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002d2a:	1e44      	subs	r4, r0, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d2c:	ea49 090a 	orr.w	r9, r9, sl
 8002d30:	ea48 0809 	orr.w	r8, r8, r9
 8002d34:	ea47 0708 	orr.w	r7, r7, r8
 8002d38:	433e      	orrs	r6, r7
 8002d3a:	ea5b 0606 	orrs.w	r6, fp, r6
 8002d3e:	d103      	bne.n	8002d48 <HAL_DMA_Init+0x2a0>
 8002d40:	9b01      	ldr	r3, [sp, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 811d 	beq.w	8002f82 <HAL_DMA_Init+0x4da>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d48:	4a14      	ldr	r2, [pc, #80]	@ (8002d9c <HAL_DMA_Init+0x2f4>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002d4a:	4915      	ldr	r1, [pc, #84]	@ (8002da0 <HAL_DMA_Init+0x2f8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d4c:	4402      	add	r2, r0
 8002d4e:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002d50:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d52:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002d54:	40a3      	lsls	r3, r4
 8002d56:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
 8002d5a:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d5c:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d5e:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d60:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002d62:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d64:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002d66:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 8002d6a:	b003      	add	sp, #12
 8002d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d70:	40020010 	.word	0x40020010
 8002d74:	40020028 	.word	0x40020028
 8002d78:	400204b8 	.word	0x400204b8
 8002d7c:	fe10803f 	.word	0xfe10803f
 8002d80:	5c001000 	.word	0x5c001000
 8002d84:	5802541c 	.word	0x5802541c
 8002d88:	58025458 	.word	0x58025458
 8002d8c:	5802546c 	.word	0x5802546c
 8002d90:	58025408 	.word	0x58025408
 8002d94:	58025430 	.word	0x58025430
 8002d98:	58025444 	.word	0x58025444
 8002d9c:	1600963f 	.word	0x1600963f
 8002da0:	58025940 	.word	0x58025940
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002da4:	6868      	ldr	r0, [r5, #4]
 8002da6:	282e      	cmp	r0, #46	@ 0x2e
 8002da8:	d932      	bls.n	8002e10 <HAL_DMA_Init+0x368>
 8002daa:	383f      	subs	r0, #63	@ 0x3f
 8002dac:	2813      	cmp	r0, #19
 8002dae:	d806      	bhi.n	8002dbe <HAL_DMA_Init+0x316>
 8002db0:	4e7a      	ldr	r6, [pc, #488]	@ (8002f9c <HAL_DMA_Init+0x4f4>)
 8002db2:	fa26 f000 	lsr.w	r0, r6, r0
 8002db6:	07c0      	lsls	r0, r0, #31
 8002db8:	d501      	bpl.n	8002dbe <HAL_DMA_Init+0x316>
        registerValue |= DMA_SxCR_TRBUFF;
 8002dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002dbe:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dc0:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002dc2:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002dc4:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002dc8:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dcc:	f47f aefe 	bne.w	8002bcc <HAL_DMA_Init+0x124>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dd0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8002dd2:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002dd4:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	f43f aef8 	beq.w	8002bcc <HAL_DMA_Init+0x124>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ddc:	2a00      	cmp	r2, #0
 8002dde:	d138      	bne.n	8002e52 <HAL_DMA_Init+0x3aa>
    switch (hdma->Init.FIFOThreshold)
 8002de0:	2901      	cmp	r1, #1
 8002de2:	d04d      	beq.n	8002e80 <HAL_DMA_Init+0x3d8>
 8002de4:	f031 0202 	bics.w	r2, r1, #2
 8002de8:	f47f aef0 	bne.w	8002bcc <HAL_DMA_Init+0x124>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dec:	01c2      	lsls	r2, r0, #7
 8002dee:	f57f aeed 	bpl.w	8002bcc <HAL_DMA_Init+0x124>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002df2:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8002df4:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002df6:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002df8:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8002dfc:	2001      	movs	r0, #1
}
 8002dfe:	b003      	add	sp, #12
 8002e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e04:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e06:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e08:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e0a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        return HAL_ERROR;
 8002e0e:	e7f5      	b.n	8002dfc <HAL_DMA_Init+0x354>
 8002e10:	2828      	cmp	r0, #40	@ 0x28
 8002e12:	d9d4      	bls.n	8002dbe <HAL_DMA_Init+0x316>
 8002e14:	e7d1      	b.n	8002dba <HAL_DMA_Init+0x312>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e16:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e18:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8002e1a:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e1e:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e20:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e22:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e2a:	676b      	str	r3, [r5, #116]	@ 0x74
 8002e2c:	e798      	b.n	8002d60 <HAL_DMA_Init+0x2b8>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e2e:	6806      	ldr	r6, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e30:	e9d5 070b 	ldrd	r0, r7, [r5, #44]	@ 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e34:	f36f 060f 	bfc	r6, #0, #16
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e38:	4307      	orrs	r7, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e3a:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e3e:	ea43 0307 	orr.w	r3, r3, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e42:	d2af      	bcs.n	8002da4 <HAL_DMA_Init+0x2fc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e44:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e46:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e48:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e50:	e7bf      	b.n	8002dd2 <HAL_DMA_Init+0x32a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e52:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8002e56:	d004      	beq.n	8002e62 <HAL_DMA_Init+0x3ba>
    switch (hdma->Init.FIFOThreshold)
 8002e58:	2902      	cmp	r1, #2
 8002e5a:	d9ca      	bls.n	8002df2 <HAL_DMA_Init+0x34a>
 8002e5c:	2903      	cmp	r1, #3
 8002e5e:	d0c5      	beq.n	8002dec <HAL_DMA_Init+0x344>
 8002e60:	e6b4      	b.n	8002bcc <HAL_DMA_Init+0x124>
    switch (hdma->Init.FIFOThreshold)
 8002e62:	2903      	cmp	r1, #3
 8002e64:	f63f aeb2 	bhi.w	8002bcc <HAL_DMA_Init+0x124>
 8002e68:	a201      	add	r2, pc, #4	@ (adr r2, 8002e70 <HAL_DMA_Init+0x3c8>)
 8002e6a:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002df3 	.word	0x08002df3
 8002e74:	08002ded 	.word	0x08002ded
 8002e78:	08002df3 	.word	0x08002df3
 8002e7c:	08002e81 	.word	0x08002e81
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e80:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8002e84:	f47f aea2 	bne.w	8002bcc <HAL_DMA_Init+0x124>
 8002e88:	e7b3      	b.n	8002df2 <HAL_DMA_Init+0x34a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002e8a:	4a45      	ldr	r2, [pc, #276]	@ (8002fa0 <HAL_DMA_Init+0x4f8>)
 8002e8c:	4945      	ldr	r1, [pc, #276]	@ (8002fa4 <HAL_DMA_Init+0x4fc>)
 8002e8e:	4b46      	ldr	r3, [pc, #280]	@ (8002fa8 <HAL_DMA_Init+0x500>)
 8002e90:	eba4 0a02 	sub.w	sl, r4, r2
 8002e94:	1a61      	subs	r1, r4, r1
 8002e96:	4f45      	ldr	r7, [pc, #276]	@ (8002fac <HAL_DMA_Init+0x504>)
 8002e98:	eba4 0903 	sub.w	r9, r4, r3
 8002e9c:	faba fa8a 	clz	sl, sl
 8002ea0:	3314      	adds	r3, #20
 8002ea2:	fab1 f181 	clz	r1, r1
 8002ea6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8002eaa:	fab9 f989 	clz	r9, r9
 8002eae:	eba4 0803 	sub.w	r8, r4, r3
 8002eb2:	0949      	lsrs	r1, r1, #5
 8002eb4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8002eb8:	1be7      	subs	r7, r4, r7
 8002eba:	fab8 f888 	clz	r8, r8
 8002ebe:	ea4a 0301 	orr.w	r3, sl, r1
 8002ec2:	4e3b      	ldr	r6, [pc, #236]	@ (8002fb0 <HAL_DMA_Init+0x508>)
 8002ec4:	3278      	adds	r2, #120	@ 0x78
 8002ec6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8002eca:	ea49 0303 	orr.w	r3, r9, r3
 8002ece:	fab7 f787 	clz	r7, r7
 8002ed2:	1ba6      	subs	r6, r4, r6
 8002ed4:	eba4 0b02 	sub.w	fp, r4, r2
 8002ed8:	ea48 0303 	orr.w	r3, r8, r3
 8002edc:	097f      	lsrs	r7, r7, #5
 8002ede:	fab6 f686 	clz	r6, r6
 8002ee2:	3214      	adds	r2, #20
 8002ee4:	fabb fb8b 	clz	fp, fp
 8002ee8:	433b      	orrs	r3, r7
 8002eea:	0976      	lsrs	r6, r6, #5
 8002eec:	1aa2      	subs	r2, r4, r2
 8002eee:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8002ef2:	4333      	orrs	r3, r6
 8002ef4:	fab2 f282 	clz	r2, r2
 8002ef8:	ea5b 0303 	orrs.w	r3, fp, r3
 8002efc:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8002f00:	9201      	str	r2, [sp, #4]
 8002f02:	d101      	bne.n	8002f08 <HAL_DMA_Init+0x460>
 8002f04:	2a00      	cmp	r2, #0
 8002f06:	d043      	beq.n	8002f90 <HAL_DMA_Init+0x4e8>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f08:	2302      	movs	r3, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002f0a:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8002fc4 <HAL_DMA_Init+0x51c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f0e:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002f12:	2300      	movs	r3, #0
 8002f14:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f18:	68ab      	ldr	r3, [r5, #8]
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002f1a:	6822      	ldr	r2, [r4, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f1c:	2b40      	cmp	r3, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002f1e:	ea02 0e0e 	and.w	lr, r2, lr
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f22:	d033      	beq.n	8002f8c <HAL_DMA_Init+0x4e4>
 8002f24:	f1a3 0380 	sub.w	r3, r3, #128	@ 0x80
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	0398      	lsls	r0, r3, #14
 8002f30:	9100      	str	r1, [sp, #0]
 8002f32:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8002f36:	ea43 0c02 	orr.w	ip, r3, r2
 8002f3a:	696a      	ldr	r2, [r5, #20]
 8002f3c:	69ab      	ldr	r3, [r5, #24]
 8002f3e:	ea4c 0c02 	orr.w	ip, ip, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f42:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <HAL_DMA_Init+0x50c>)
 8002f44:	ea4c 0c03 	orr.w	ip, ip, r3
 8002f48:	69eb      	ldr	r3, [r5, #28]
 8002f4a:	4422      	add	r2, r4
 8002f4c:	ea4c 0c03 	orr.w	ip, ip, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002f50:	6a2b      	ldr	r3, [r5, #32]
 8002f52:	ea4e 1313 	orr.w	r3, lr, r3, lsr #4
 8002f56:	ea43 03dc 	orr.w	r3, r3, ip, lsr #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f5a:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f5c:	4b16      	ldr	r3, [pc, #88]	@ (8002fb8 <HAL_DMA_Init+0x510>)
 8002f5e:	fba3 2302 	umull	r2, r3, r3, r2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002f62:	6020      	str	r0, [r4, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f64:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	65eb      	str	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f6c:	f7ff fcb2 	bl	80028d4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f70:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f72:	4602      	mov	r2, r0
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f74:	9900      	ldr	r1, [sp, #0]
 8002f76:	f003 001f 	and.w	r0, r3, #31
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	4083      	lsls	r3, r0
 8002f7e:	6053      	str	r3, [r2, #4]
 8002f80:	e6bd      	b.n	8002cfe <HAL_DMA_Init+0x256>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f82:	4a0e      	ldr	r2, [pc, #56]	@ (8002fbc <HAL_DMA_Init+0x514>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f84:	490e      	ldr	r1, [pc, #56]	@ (8002fc0 <HAL_DMA_Init+0x518>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f86:	4402      	add	r2, r0
 8002f88:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f8a:	e6e1      	b.n	8002d50 <HAL_DMA_Init+0x2a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f8c:	2010      	movs	r0, #16
 8002f8e:	e7cf      	b.n	8002f30 <HAL_DMA_Init+0x488>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f90:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f92:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f94:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f96:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8002f9a:	e72f      	b.n	8002dfc <HAL_DMA_Init+0x354>
 8002f9c:	000f030f 	.word	0x000f030f
 8002fa0:	58025408 	.word	0x58025408
 8002fa4:	5802541c 	.word	0x5802541c
 8002fa8:	58025430 	.word	0x58025430
 8002fac:	58025458 	.word	0x58025458
 8002fb0:	5802546c 	.word	0x5802546c
 8002fb4:	a7fdabf8 	.word	0xa7fdabf8
 8002fb8:	cccccccd 	.word	0xcccccccd
 8002fbc:	1000823f 	.word	0x1000823f
 8002fc0:	40020940 	.word	0x40020940
 8002fc4:	fffe000f 	.word	0xfffe000f

08002fc8 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	f000 8221 	beq.w	8003410 <HAL_DMA_Start_IT+0x448>
{
 8002fce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hdma);
 8002fd2:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8002fd6:	2c01      	cmp	r4, #1
 8002fd8:	f000 8217 	beq.w	800340a <HAL_DMA_Start_IT+0x442>
 8002fdc:	2401      	movs	r4, #1
 8002fde:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fe2:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8002fe6:	2c01      	cmp	r4, #1
 8002fe8:	d008      	beq.n	8002ffc <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 8002fee:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ff0:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8002ff2:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8002ff6:	2001      	movs	r0, #1
}
 8002ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffc:	2402      	movs	r4, #2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ffe:	4e69      	ldr	r6, [pc, #420]	@ (80031a4 <HAL_DMA_Start_IT+0x1dc>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003000:	f8df e1a8 	ldr.w	lr, [pc, #424]	@ 80031ac <HAL_DMA_Start_IT+0x1e4>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003004:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003008:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 800300a:	4d67      	ldr	r5, [pc, #412]	@ (80031a8 <HAL_DMA_Start_IT+0x1e0>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800300c:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 800300e:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003010:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80031c0 <HAL_DMA_Start_IT+0x1f8>
 8003014:	4574      	cmp	r4, lr
 8003016:	bf18      	it	ne
 8003018:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 800301a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 80031c4 <HAL_DMA_Start_IT+0x1fc>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800301e:	f8d0 a058 	ldr.w	sl, [r0, #88]	@ 0x58
 8003022:	bf0c      	ite	eq
 8003024:	2601      	moveq	r6, #1
 8003026:	2600      	movne	r6, #0
 8003028:	4544      	cmp	r4, r8
 800302a:	bf14      	ite	ne
 800302c:	46b1      	movne	r9, r6
 800302e:	f046 0901 	orreq.w	r9, r6, #1
    __HAL_DMA_DISABLE(hdma);
 8003032:	42ac      	cmp	r4, r5
 8003034:	bf18      	it	ne
 8003036:	4564      	cmpne	r4, ip
 8003038:	bf0c      	ite	eq
 800303a:	2501      	moveq	r5, #1
 800303c:	2500      	movne	r5, #0
 800303e:	f040 80c3 	bne.w	80031c8 <HAL_DMA_Start_IT+0x200>
 8003042:	f8d4 c000 	ldr.w	ip, [r4]
 8003046:	f02c 0c01 	bic.w	ip, ip, #1
 800304a:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 800304e:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003052:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
 8003056:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003058:	f1bc 0f00 	cmp.w	ip, #0
 800305c:	d007      	beq.n	800306e <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800305e:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8003062:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003064:	b91d      	cbnz	r5, 800306e <HAL_DMA_Start_IT+0xa6>
 8003066:	f1b9 0f00 	cmp.w	r9, #0
 800306a:	f000 8130 	beq.w	80032ce <HAL_DMA_Start_IT+0x306>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800306e:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 8003070:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 8003074:	f007 081f 	and.w	r8, r7, #31
 8003078:	fa0e fe08 	lsl.w	lr, lr, r8
 800307c:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003080:	6827      	ldr	r7, [r4, #0]
 8003082:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 8003086:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003088:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800308a:	6883      	ldr	r3, [r0, #8]
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	f000 81c1 	beq.w	8003414 <HAL_DMA_Start_IT+0x44c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003092:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003094:	60e2      	str	r2, [r4, #12]
      if(hdma->XferHalfCpltCallback != NULL)
 8003096:	6c02      	ldr	r2, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003098:	2d00      	cmp	r5, #0
 800309a:	f040 81a1 	bne.w	80033e0 <HAL_DMA_Start_IT+0x418>
 800309e:	4b43      	ldr	r3, [pc, #268]	@ (80031ac <HAL_DMA_Start_IT+0x1e4>)
 80030a0:	429c      	cmp	r4, r3
 80030a2:	f000 81de 	beq.w	8003462 <HAL_DMA_Start_IT+0x49a>
 80030a6:	3318      	adds	r3, #24
 80030a8:	429c      	cmp	r4, r3
 80030aa:	f000 81f6 	beq.w	800349a <HAL_DMA_Start_IT+0x4d2>
 80030ae:	f1b9 0f00 	cmp.w	r9, #0
 80030b2:	f040 81c7 	bne.w	8003444 <HAL_DMA_Start_IT+0x47c>
 80030b6:	4b3e      	ldr	r3, [pc, #248]	@ (80031b0 <HAL_DMA_Start_IT+0x1e8>)
 80030b8:	429c      	cmp	r4, r3
 80030ba:	f000 8201 	beq.w	80034c0 <HAL_DMA_Start_IT+0x4f8>
 80030be:	4b3d      	ldr	r3, [pc, #244]	@ (80031b4 <HAL_DMA_Start_IT+0x1ec>)
 80030c0:	429c      	cmp	r4, r3
 80030c2:	f000 8209 	beq.w	80034d8 <HAL_DMA_Start_IT+0x510>
 80030c6:	3318      	adds	r3, #24
 80030c8:	429c      	cmp	r4, r3
 80030ca:	f000 8223 	beq.w	8003514 <HAL_DMA_Start_IT+0x54c>
 80030ce:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80030d2:	429c      	cmp	r4, r3
 80030d4:	f000 8233 	beq.w	800353e <HAL_DMA_Start_IT+0x576>
 80030d8:	3318      	adds	r3, #24
 80030da:	429c      	cmp	r4, r3
 80030dc:	f000 8242 	beq.w	8003564 <HAL_DMA_Start_IT+0x59c>
 80030e0:	3318      	adds	r3, #24
 80030e2:	429c      	cmp	r4, r3
 80030e4:	f000 8249 	beq.w	800357a <HAL_DMA_Start_IT+0x5b2>
 80030e8:	3318      	adds	r3, #24
 80030ea:	429c      	cmp	r4, r3
 80030ec:	f000 8250 	beq.w	8003590 <HAL_DMA_Start_IT+0x5c8>
 80030f0:	3318      	adds	r3, #24
 80030f2:	429c      	cmp	r4, r3
 80030f4:	f000 8257 	beq.w	80035a6 <HAL_DMA_Start_IT+0x5de>
 80030f8:	3318      	adds	r3, #24
 80030fa:	429c      	cmp	r4, r3
 80030fc:	f000 8267 	beq.w	80035ce <HAL_DMA_Start_IT+0x606>
 8003100:	3318      	adds	r3, #24
 8003102:	429c      	cmp	r4, r3
 8003104:	f000 8265 	beq.w	80035d2 <HAL_DMA_Start_IT+0x60a>
 8003108:	3318      	adds	r3, #24
 800310a:	429c      	cmp	r4, r3
 800310c:	f000 8275 	beq.w	80035fa <HAL_DMA_Start_IT+0x632>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	f023 030e 	bic.w	r3, r3, #14
 8003116:	f043 030a 	orr.w	r3, r3, #10
 800311a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800311c:	b11a      	cbz	r2, 8003126 <HAL_DMA_Start_IT+0x15e>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003126:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <HAL_DMA_Start_IT+0x1f0>)
 8003128:	4a24      	ldr	r2, [pc, #144]	@ (80031bc <HAL_DMA_Start_IT+0x1f4>)
 800312a:	4294      	cmp	r4, r2
 800312c:	bf18      	it	ne
 800312e:	429c      	cmpne	r4, r3
 8003130:	f102 0214 	add.w	r2, r2, #20
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	4294      	cmp	r4, r2
 800313c:	bf08      	it	eq
 800313e:	f043 0301 	orreq.w	r3, r3, #1
 8003142:	3214      	adds	r2, #20
 8003144:	4294      	cmp	r4, r2
 8003146:	bf08      	it	eq
 8003148:	f043 0301 	orreq.w	r3, r3, #1
 800314c:	3214      	adds	r2, #20
 800314e:	4294      	cmp	r4, r2
 8003150:	bf08      	it	eq
 8003152:	f043 0301 	orreq.w	r3, r3, #1
 8003156:	3214      	adds	r2, #20
 8003158:	4294      	cmp	r4, r2
 800315a:	bf08      	it	eq
 800315c:	f043 0301 	orreq.w	r3, r3, #1
 8003160:	3214      	adds	r2, #20
 8003162:	4294      	cmp	r4, r2
 8003164:	bf08      	it	eq
 8003166:	f043 0301 	orreq.w	r3, r3, #1
 800316a:	3214      	adds	r2, #20
 800316c:	4294      	cmp	r4, r2
 800316e:	bf08      	it	eq
 8003170:	f043 0301 	orreq.w	r3, r3, #1
 8003174:	b17b      	cbz	r3, 8003196 <HAL_DMA_Start_IT+0x1ce>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003176:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8003178:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	03d2      	lsls	r2, r2, #15
 8003180:	f100 813e 	bmi.w	8003400 <HAL_DMA_Start_IT+0x438>
      if(hdma->DMAmuxRequestGen != 0U)
 8003184:	f1bc 0f00 	cmp.w	ip, #0
 8003188:	d005      	beq.n	8003196 <HAL_DMA_Start_IT+0x1ce>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800318a:	f8dc 3000 	ldr.w	r3, [ip]
 800318e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003192:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 8003196:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003198:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6023      	str	r3, [r4, #0]
}
 80031a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a4:	40020070 	.word	0x40020070
 80031a8:	40020028 	.word	0x40020028
 80031ac:	40020040 	.word	0x40020040
 80031b0:	40020088 	.word	0x40020088
 80031b4:	400200a0 	.word	0x400200a0
 80031b8:	58025408 	.word	0x58025408
 80031bc:	5802541c 	.word	0x5802541c
 80031c0:	40020058 	.word	0x40020058
 80031c4:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 80031c8:	4574      	cmp	r4, lr
 80031ca:	f000 8154 	beq.w	8003476 <HAL_DMA_Start_IT+0x4ae>
 80031ce:	4544      	cmp	r4, r8
 80031d0:	f000 815a 	beq.w	8003488 <HAL_DMA_Start_IT+0x4c0>
 80031d4:	f1b9 0f00 	cmp.w	r9, #0
 80031d8:	f040 811f 	bne.w	800341a <HAL_DMA_Start_IT+0x452>
 80031dc:	f8df c434 	ldr.w	ip, [pc, #1076]	@ 8003614 <HAL_DMA_Start_IT+0x64c>
 80031e0:	4564      	cmp	r4, ip
 80031e2:	f000 8164 	beq.w	80034ae <HAL_DMA_Start_IT+0x4e6>
 80031e6:	f10c 0c18 	add.w	ip, ip, #24
 80031ea:	4564      	cmp	r4, ip
 80031ec:	f000 8180 	beq.w	80034f0 <HAL_DMA_Start_IT+0x528>
 80031f0:	f10c 0c18 	add.w	ip, ip, #24
 80031f4:	4564      	cmp	r4, ip
 80031f6:	f000 8184 	beq.w	8003502 <HAL_DMA_Start_IT+0x53a>
 80031fa:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 80031fe:	4564      	cmp	r4, ip
 8003200:	f000 8194 	beq.w	800352c <HAL_DMA_Start_IT+0x564>
 8003204:	f10c 0c18 	add.w	ip, ip, #24
 8003208:	4564      	cmp	r4, ip
 800320a:	f000 81a2 	beq.w	8003552 <HAL_DMA_Start_IT+0x58a>
 800320e:	f10c 0c18 	add.w	ip, ip, #24
 8003212:	4564      	cmp	r4, ip
 8003214:	f000 81b3 	beq.w	800357e <HAL_DMA_Start_IT+0x5b6>
 8003218:	f10c 0c18 	add.w	ip, ip, #24
 800321c:	4564      	cmp	r4, ip
 800321e:	f000 81b9 	beq.w	8003594 <HAL_DMA_Start_IT+0x5cc>
 8003222:	f10c 0c18 	add.w	ip, ip, #24
 8003226:	4564      	cmp	r4, ip
 8003228:	f000 81bf 	beq.w	80035aa <HAL_DMA_Start_IT+0x5e2>
 800322c:	f10c 0c18 	add.w	ip, ip, #24
 8003230:	4564      	cmp	r4, ip
 8003232:	f000 81c3 	beq.w	80035bc <HAL_DMA_Start_IT+0x5f4>
 8003236:	f10c 0c18 	add.w	ip, ip, #24
 800323a:	4564      	cmp	r4, ip
 800323c:	f000 81cb 	beq.w	80035d6 <HAL_DMA_Start_IT+0x60e>
 8003240:	f10c 0c18 	add.w	ip, ip, #24
 8003244:	4564      	cmp	r4, ip
 8003246:	f000 81cf 	beq.w	80035e8 <HAL_DMA_Start_IT+0x620>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800324a:	f8df c3cc 	ldr.w	ip, [pc, #972]	@ 8003618 <HAL_DMA_Start_IT+0x650>
 800324e:	f8df e3cc 	ldr.w	lr, [pc, #972]	@ 800361c <HAL_DMA_Start_IT+0x654>
 8003252:	4574      	cmp	r4, lr
 8003254:	bf18      	it	ne
 8003256:	4564      	cmpne	r4, ip
 8003258:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
 800325c:	bf0c      	ite	eq
 800325e:	f04f 0c01 	moveq.w	ip, #1
 8003262:	f04f 0c00 	movne.w	ip, #0
 8003266:	4574      	cmp	r4, lr
 8003268:	bf08      	it	eq
 800326a:	f04c 0c01 	orreq.w	ip, ip, #1
 800326e:	f10e 0e14 	add.w	lr, lr, #20
 8003272:	4574      	cmp	r4, lr
 8003274:	bf08      	it	eq
 8003276:	f04c 0c01 	orreq.w	ip, ip, #1
 800327a:	f10e 0e14 	add.w	lr, lr, #20
 800327e:	4574      	cmp	r4, lr
 8003280:	bf08      	it	eq
 8003282:	f04c 0c01 	orreq.w	ip, ip, #1
 8003286:	f10e 0e14 	add.w	lr, lr, #20
 800328a:	4574      	cmp	r4, lr
 800328c:	bf08      	it	eq
 800328e:	f04c 0c01 	orreq.w	ip, ip, #1
    __HAL_DMA_DISABLE(hdma);
 8003292:	f8d4 e000 	ldr.w	lr, [r4]
 8003296:	f02e 0e01 	bic.w	lr, lr, #1
 800329a:	f8c4 e000 	str.w	lr, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800329e:	f8df e380 	ldr.w	lr, [pc, #896]	@ 8003620 <HAL_DMA_Start_IT+0x658>
 80032a2:	4574      	cmp	r4, lr
 80032a4:	bf08      	it	eq
 80032a6:	f04c 0c01 	orreq.w	ip, ip, #1
 80032aa:	f1bc 0f00 	cmp.w	ip, #0
 80032ae:	d103      	bne.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
 80032b0:	f8df c370 	ldr.w	ip, [pc, #880]	@ 8003624 <HAL_DMA_Start_IT+0x65c>
 80032b4:	4564      	cmp	r4, ip
 80032b6:	d14f      	bne.n	8003358 <HAL_DMA_Start_IT+0x390>
    if(hdma->DMAmuxRequestGen != 0U)
 80032b8:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032bc:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 80032c0:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80032c2:	f1bc 0f00 	cmp.w	ip, #0
 80032c6:	d002      	beq.n	80032ce <HAL_DMA_Start_IT+0x306>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032c8:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 80032cc:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032ce:	f8df e344 	ldr.w	lr, [pc, #836]	@ 8003614 <HAL_DMA_Start_IT+0x64c>
 80032d2:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 8003628 <HAL_DMA_Start_IT+0x660>
 80032d6:	4544      	cmp	r4, r8
 80032d8:	bf18      	it	ne
 80032da:	4574      	cmpne	r4, lr
 80032dc:	f108 0818 	add.w	r8, r8, #24
 80032e0:	bf0c      	ite	eq
 80032e2:	f04f 0e01 	moveq.w	lr, #1
 80032e6:	f04f 0e00 	movne.w	lr, #0
 80032ea:	4544      	cmp	r4, r8
 80032ec:	bf08      	it	eq
 80032ee:	f04e 0e01 	orreq.w	lr, lr, #1
 80032f2:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 80032f6:	4544      	cmp	r4, r8
 80032f8:	bf08      	it	eq
 80032fa:	f04e 0e01 	orreq.w	lr, lr, #1
 80032fe:	f108 0818 	add.w	r8, r8, #24
 8003302:	4544      	cmp	r4, r8
 8003304:	bf08      	it	eq
 8003306:	f04e 0e01 	orreq.w	lr, lr, #1
 800330a:	f108 0818 	add.w	r8, r8, #24
 800330e:	4544      	cmp	r4, r8
 8003310:	bf08      	it	eq
 8003312:	f04e 0e01 	orreq.w	lr, lr, #1
 8003316:	f108 0818 	add.w	r8, r8, #24
 800331a:	4544      	cmp	r4, r8
 800331c:	bf08      	it	eq
 800331e:	f04e 0e01 	orreq.w	lr, lr, #1
 8003322:	f108 0818 	add.w	r8, r8, #24
 8003326:	4544      	cmp	r4, r8
 8003328:	bf08      	it	eq
 800332a:	f04e 0e01 	orreq.w	lr, lr, #1
 800332e:	f108 0818 	add.w	r8, r8, #24
 8003332:	4544      	cmp	r4, r8
 8003334:	bf08      	it	eq
 8003336:	f04e 0e01 	orreq.w	lr, lr, #1
 800333a:	f108 0818 	add.w	r8, r8, #24
 800333e:	4544      	cmp	r4, r8
 8003340:	bf08      	it	eq
 8003342:	f04e 0e01 	orreq.w	lr, lr, #1
 8003346:	f1be 0f00 	cmp.w	lr, #0
 800334a:	f47f ae90 	bne.w	800306e <HAL_DMA_Start_IT+0xa6>
 800334e:	f8df e2dc 	ldr.w	lr, [pc, #732]	@ 800362c <HAL_DMA_Start_IT+0x664>
 8003352:	4574      	cmp	r4, lr
 8003354:	f43f ae8b 	beq.w	800306e <HAL_DMA_Start_IT+0xa6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003358:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 800361c <HAL_DMA_Start_IT+0x654>
 800335c:	f8df e2b8 	ldr.w	lr, [pc, #696]	@ 8003618 <HAL_DMA_Start_IT+0x650>
 8003360:	4574      	cmp	r4, lr
 8003362:	bf18      	it	ne
 8003364:	4564      	cmpne	r4, ip
 8003366:	f10e 0e14 	add.w	lr, lr, #20
 800336a:	bf0c      	ite	eq
 800336c:	f04f 0c01 	moveq.w	ip, #1
 8003370:	f04f 0c00 	movne.w	ip, #0
 8003374:	4574      	cmp	r4, lr
 8003376:	bf08      	it	eq
 8003378:	f04c 0c01 	orreq.w	ip, ip, #1
 800337c:	f10e 0e14 	add.w	lr, lr, #20
 8003380:	4574      	cmp	r4, lr
 8003382:	bf08      	it	eq
 8003384:	f04c 0c01 	orreq.w	ip, ip, #1
 8003388:	f10e 0e14 	add.w	lr, lr, #20
 800338c:	4574      	cmp	r4, lr
 800338e:	bf08      	it	eq
 8003390:	f04c 0c01 	orreq.w	ip, ip, #1
 8003394:	f10e 0e14 	add.w	lr, lr, #20
 8003398:	4574      	cmp	r4, lr
 800339a:	bf08      	it	eq
 800339c:	f04c 0c01 	orreq.w	ip, ip, #1
 80033a0:	f10e 0e14 	add.w	lr, lr, #20
 80033a4:	4574      	cmp	r4, lr
 80033a6:	bf08      	it	eq
 80033a8:	f04c 0c01 	orreq.w	ip, ip, #1
 80033ac:	f1bc 0f00 	cmp.w	ip, #0
 80033b0:	d104      	bne.n	80033bc <HAL_DMA_Start_IT+0x3f4>
 80033b2:	f8df c270 	ldr.w	ip, [pc, #624]	@ 8003624 <HAL_DMA_Start_IT+0x65c>
 80033b6:	4564      	cmp	r4, ip
 80033b8:	f040 8125 	bne.w	8003606 <HAL_DMA_Start_IT+0x63e>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80033bc:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 80033be:	f04f 0c01 	mov.w	ip, #1
 80033c2:	f006 0e1f 	and.w	lr, r6, #31
 80033c6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80033ca:	f8ca c004 	str.w	ip, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80033ce:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033d0:	6883      	ldr	r3, [r0, #8]
 80033d2:	2b40      	cmp	r3, #64	@ 0x40
 80033d4:	f000 8113 	beq.w	80035fe <HAL_DMA_Start_IT+0x636>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80033d8:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80033da:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033dc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80033de:	e65e      	b.n	800309e <HAL_DMA_Start_IT+0xd6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	f023 031e 	bic.w	r3, r3, #30
 80033e6:	f043 0316 	orr.w	r3, r3, #22
 80033ea:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80033ec:	b11a      	cbz	r2, 80033f6 <HAL_DMA_Start_IT+0x42e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	f043 0308 	orr.w	r3, r3, #8
 80033f4:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033f6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	03d2      	lsls	r2, r2, #15
 80033fc:	f57f aec2 	bpl.w	8003184 <HAL_DMA_Start_IT+0x1bc>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e6bc      	b.n	8003184 <HAL_DMA_Start_IT+0x1bc>
  __HAL_LOCK(hdma);
 800340a:	2002      	movs	r0, #2
}
 800340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8003410:	2001      	movs	r0, #1
}
 8003412:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003414:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003416:	60e1      	str	r1, [r4, #12]
 8003418:	e63d      	b.n	8003096 <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 800341a:	f8df e1f0 	ldr.w	lr, [pc, #496]	@ 800360c <HAL_DMA_Start_IT+0x644>
 800341e:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 8003422:	f02c 0c01 	bic.w	ip, ip, #1
 8003426:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 800342a:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800342e:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8003432:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003434:	f1bc 0f00 	cmp.w	ip, #0
 8003438:	f43f ae19 	beq.w	800306e <HAL_DMA_Start_IT+0xa6>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800343c:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8003440:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003442:	e614      	b.n	800306e <HAL_DMA_Start_IT+0xa6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003444:	4971      	ldr	r1, [pc, #452]	@ (800360c <HAL_DMA_Start_IT+0x644>)
 8003446:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8003448:	f023 031e 	bic.w	r3, r3, #30
 800344c:	f043 0316 	orr.w	r3, r3, #22
 8003450:	670b      	str	r3, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8003452:	2a00      	cmp	r2, #0
 8003454:	f43f ae8f 	beq.w	8003176 <HAL_DMA_Start_IT+0x1ae>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	f043 0308 	orr.w	r3, r3, #8
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	e689      	b.n	8003176 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003462:	496a      	ldr	r1, [pc, #424]	@ (800360c <HAL_DMA_Start_IT+0x644>)
 8003464:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003466:	f023 031e 	bic.w	r3, r3, #30
 800346a:	f043 0316 	orr.w	r3, r3, #22
 800346e:	640b      	str	r3, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8003470:	2a00      	cmp	r2, #0
 8003472:	d1f1      	bne.n	8003458 <HAL_DMA_Start_IT+0x490>
 8003474:	e67f      	b.n	8003176 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8003476:	f8df e194 	ldr.w	lr, [pc, #404]	@ 800360c <HAL_DMA_Start_IT+0x644>
 800347a:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 800347e:	f02c 0c01 	bic.w	ip, ip, #1
 8003482:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003486:	e5e2      	b.n	800304e <HAL_DMA_Start_IT+0x86>
    __HAL_DMA_DISABLE(hdma);
 8003488:	f8df e180 	ldr.w	lr, [pc, #384]	@ 800360c <HAL_DMA_Start_IT+0x644>
 800348c:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 8003490:	f02c 0c01 	bic.w	ip, ip, #1
 8003494:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003498:	e7c7      	b.n	800342a <HAL_DMA_Start_IT+0x462>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800349a:	495c      	ldr	r1, [pc, #368]	@ (800360c <HAL_DMA_Start_IT+0x644>)
 800349c:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 800349e:	f023 031e 	bic.w	r3, r3, #30
 80034a2:	f043 0316 	orr.w	r3, r3, #22
 80034a6:	658b      	str	r3, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 80034a8:	2a00      	cmp	r2, #0
 80034aa:	d1d5      	bne.n	8003458 <HAL_DMA_Start_IT+0x490>
 80034ac:	e663      	b.n	8003176 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80034ae:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 800360c <HAL_DMA_Start_IT+0x644>
 80034b2:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 80034b6:	f02c 0c01 	bic.w	ip, ip, #1
 80034ba:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034be:	e6fb      	b.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80034c0:	4952      	ldr	r1, [pc, #328]	@ (800360c <HAL_DMA_Start_IT+0x644>)
 80034c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80034c6:	f023 031e 	bic.w	r3, r3, #30
 80034ca:	f043 0316 	orr.w	r3, r3, #22
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 80034d2:	2a00      	cmp	r2, #0
 80034d4:	d1c0      	bne.n	8003458 <HAL_DMA_Start_IT+0x490>
 80034d6:	e64e      	b.n	8003176 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80034d8:	494c      	ldr	r1, [pc, #304]	@ (800360c <HAL_DMA_Start_IT+0x644>)
 80034da:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
 80034de:	f023 031e 	bic.w	r3, r3, #30
 80034e2:	f043 0316 	orr.w	r3, r3, #22
 80034e6:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 80034ea:	2a00      	cmp	r2, #0
 80034ec:	d1b4      	bne.n	8003458 <HAL_DMA_Start_IT+0x490>
 80034ee:	e642      	b.n	8003176 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 80034f0:	f8df e118 	ldr.w	lr, [pc, #280]	@ 800360c <HAL_DMA_Start_IT+0x644>
 80034f4:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 80034f8:	f02c 0c01 	bic.w	ip, ip, #1
 80034fc:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003500:	e6da      	b.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 8003502:	f8df e108 	ldr.w	lr, [pc, #264]	@ 800360c <HAL_DMA_Start_IT+0x644>
 8003506:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 800350a:	f02c 0c01 	bic.w	ip, ip, #1
 800350e:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003512:	e6d1      	b.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003514:	493d      	ldr	r1, [pc, #244]	@ (800360c <HAL_DMA_Start_IT+0x644>)
 8003516:	f8d1 30b8 	ldr.w	r3, [r1, #184]	@ 0xb8
 800351a:	f023 031e 	bic.w	r3, r3, #30
 800351e:	f043 0316 	orr.w	r3, r3, #22
 8003522:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8003526:	2a00      	cmp	r2, #0
 8003528:	d196      	bne.n	8003458 <HAL_DMA_Start_IT+0x490>
 800352a:	e624      	b.n	8003176 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 800352c:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 8003610 <HAL_DMA_Start_IT+0x648>
 8003530:	f8de c010 	ldr.w	ip, [lr, #16]
 8003534:	f02c 0c01 	bic.w	ip, ip, #1
 8003538:	f8ce c010 	str.w	ip, [lr, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800353c:	e6bc      	b.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800353e:	4934      	ldr	r1, [pc, #208]	@ (8003610 <HAL_DMA_Start_IT+0x648>)
 8003540:	690b      	ldr	r3, [r1, #16]
 8003542:	f023 031e 	bic.w	r3, r3, #30
 8003546:	f043 0316 	orr.w	r3, r3, #22
 800354a:	610b      	str	r3, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 800354c:	2a00      	cmp	r2, #0
 800354e:	d183      	bne.n	8003458 <HAL_DMA_Start_IT+0x490>
 8003550:	e611      	b.n	8003176 <HAL_DMA_Start_IT+0x1ae>
    __HAL_DMA_DISABLE(hdma);
 8003552:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 8003610 <HAL_DMA_Start_IT+0x648>
 8003556:	f8de c028 	ldr.w	ip, [lr, #40]	@ 0x28
 800355a:	f02c 0c01 	bic.w	ip, ip, #1
 800355e:	f8ce c028 	str.w	ip, [lr, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003562:	e6a9      	b.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003564:	492a      	ldr	r1, [pc, #168]	@ (8003610 <HAL_DMA_Start_IT+0x648>)
 8003566:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8003568:	f023 031e 	bic.w	r3, r3, #30
 800356c:	f043 0316 	orr.w	r3, r3, #22
 8003570:	628b      	str	r3, [r1, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 8003572:	2a00      	cmp	r2, #0
 8003574:	f47f af70 	bne.w	8003458 <HAL_DMA_Start_IT+0x490>
 8003578:	e5fd      	b.n	8003176 <HAL_DMA_Start_IT+0x1ae>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800357a:	4925      	ldr	r1, [pc, #148]	@ (8003610 <HAL_DMA_Start_IT+0x648>)
 800357c:	e772      	b.n	8003464 <HAL_DMA_Start_IT+0x49c>
    __HAL_DMA_DISABLE(hdma);
 800357e:	f8df e090 	ldr.w	lr, [pc, #144]	@ 8003610 <HAL_DMA_Start_IT+0x648>
 8003582:	f8de c040 	ldr.w	ip, [lr, #64]	@ 0x40
 8003586:	f02c 0c01 	bic.w	ip, ip, #1
 800358a:	f8ce c040 	str.w	ip, [lr, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800358e:	e693      	b.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003590:	491f      	ldr	r1, [pc, #124]	@ (8003610 <HAL_DMA_Start_IT+0x648>)
 8003592:	e783      	b.n	800349c <HAL_DMA_Start_IT+0x4d4>
    __HAL_DMA_DISABLE(hdma);
 8003594:	f8df e078 	ldr.w	lr, [pc, #120]	@ 8003610 <HAL_DMA_Start_IT+0x648>
 8003598:	f8de c058 	ldr.w	ip, [lr, #88]	@ 0x58
 800359c:	f02c 0c01 	bic.w	ip, ip, #1
 80035a0:	f8ce c058 	str.w	ip, [lr, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035a4:	e688      	b.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035a6:	491a      	ldr	r1, [pc, #104]	@ (8003610 <HAL_DMA_Start_IT+0x648>)
 80035a8:	e74d      	b.n	8003446 <HAL_DMA_Start_IT+0x47e>
    __HAL_DMA_DISABLE(hdma);
 80035aa:	f8df e064 	ldr.w	lr, [pc, #100]	@ 8003610 <HAL_DMA_Start_IT+0x648>
 80035ae:	f8de c070 	ldr.w	ip, [lr, #112]	@ 0x70
 80035b2:	f02c 0c01 	bic.w	ip, ip, #1
 80035b6:	f8ce c070 	str.w	ip, [lr, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035ba:	e67d      	b.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 80035bc:	f8df e050 	ldr.w	lr, [pc, #80]	@ 8003610 <HAL_DMA_Start_IT+0x648>
 80035c0:	f8de c088 	ldr.w	ip, [lr, #136]	@ 0x88
 80035c4:	f02c 0c01 	bic.w	ip, ip, #1
 80035c8:	f8ce c088 	str.w	ip, [lr, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035cc:	e674      	b.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035ce:	4910      	ldr	r1, [pc, #64]	@ (8003610 <HAL_DMA_Start_IT+0x648>)
 80035d0:	e777      	b.n	80034c2 <HAL_DMA_Start_IT+0x4fa>
 80035d2:	490f      	ldr	r1, [pc, #60]	@ (8003610 <HAL_DMA_Start_IT+0x648>)
 80035d4:	e781      	b.n	80034da <HAL_DMA_Start_IT+0x512>
    __HAL_DMA_DISABLE(hdma);
 80035d6:	f8df e038 	ldr.w	lr, [pc, #56]	@ 8003610 <HAL_DMA_Start_IT+0x648>
 80035da:	f8de c0a0 	ldr.w	ip, [lr, #160]	@ 0xa0
 80035de:	f02c 0c01 	bic.w	ip, ip, #1
 80035e2:	f8ce c0a0 	str.w	ip, [lr, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035e6:	e667      	b.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
    __HAL_DMA_DISABLE(hdma);
 80035e8:	f8df e024 	ldr.w	lr, [pc, #36]	@ 8003610 <HAL_DMA_Start_IT+0x648>
 80035ec:	f8de c0b8 	ldr.w	ip, [lr, #184]	@ 0xb8
 80035f0:	f02c 0c01 	bic.w	ip, ip, #1
 80035f4:	f8ce c0b8 	str.w	ip, [lr, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035f8:	e65e      	b.n	80032b8 <HAL_DMA_Start_IT+0x2f0>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80035fa:	4905      	ldr	r1, [pc, #20]	@ (8003610 <HAL_DMA_Start_IT+0x648>)
 80035fc:	e78b      	b.n	8003516 <HAL_DMA_Start_IT+0x54e>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80035fe:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003600:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003602:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003604:	e54b      	b.n	800309e <HAL_DMA_Start_IT+0xd6>
 8003606:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003608:	e555      	b.n	80030b6 <HAL_DMA_Start_IT+0xee>
 800360a:	bf00      	nop
 800360c:	40020000 	.word	0x40020000
 8003610:	40020400 	.word	0x40020400
 8003614:	40020088 	.word	0x40020088
 8003618:	5802541c 	.word	0x5802541c
 800361c:	58025408 	.word	0x58025408
 8003620:	58025480 	.word	0x58025480
 8003624:	58025494 	.word	0x58025494
 8003628:	400200a0 	.word	0x400200a0
 800362c:	400204b8 	.word	0x400204b8

08003630 <HAL_DMA_IRQHandler>:
{
 8003630:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003632:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003634:	4b94      	ldr	r3, [pc, #592]	@ (8003888 <HAL_DMA_IRQHandler+0x258>)
{
 8003636:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003638:	6d85      	ldr	r5, [r0, #88]	@ 0x58
{
 800363a:	4607      	mov	r7, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800363c:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0U;
 800363e:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003640:	4b92      	ldr	r3, [pc, #584]	@ (800388c <HAL_DMA_IRQHandler+0x25c>)
 8003642:	6802      	ldr	r2, [r0, #0]
 8003644:	4892      	ldr	r0, [pc, #584]	@ (8003890 <HAL_DMA_IRQHandler+0x260>)
  tmpisr_dma  = regs_dma->ISR;
 8003646:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003648:	4282      	cmp	r2, r0
 800364a:	bf18      	it	ne
 800364c:	429a      	cmpne	r2, r3
 800364e:	f100 0018 	add.w	r0, r0, #24
  tmpisr_bdma = regs_bdma->ISR;
 8003652:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	4282      	cmp	r2, r0
 800365c:	bf08      	it	eq
 800365e:	f043 0301 	orreq.w	r3, r3, #1
 8003662:	3018      	adds	r0, #24
 8003664:	4282      	cmp	r2, r0
 8003666:	bf08      	it	eq
 8003668:	f043 0301 	orreq.w	r3, r3, #1
 800366c:	3018      	adds	r0, #24
 800366e:	4282      	cmp	r2, r0
 8003670:	bf08      	it	eq
 8003672:	f043 0301 	orreq.w	r3, r3, #1
 8003676:	3018      	adds	r0, #24
 8003678:	4282      	cmp	r2, r0
 800367a:	bf08      	it	eq
 800367c:	f043 0301 	orreq.w	r3, r3, #1
 8003680:	3018      	adds	r0, #24
 8003682:	4282      	cmp	r2, r0
 8003684:	bf08      	it	eq
 8003686:	f043 0301 	orreq.w	r3, r3, #1
 800368a:	3018      	adds	r0, #24
 800368c:	4282      	cmp	r2, r0
 800368e:	bf08      	it	eq
 8003690:	f043 0301 	orreq.w	r3, r3, #1
 8003694:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8003698:	4282      	cmp	r2, r0
 800369a:	bf08      	it	eq
 800369c:	f043 0301 	orreq.w	r3, r3, #1
 80036a0:	3018      	adds	r0, #24
 80036a2:	4282      	cmp	r2, r0
 80036a4:	bf08      	it	eq
 80036a6:	f043 0301 	orreq.w	r3, r3, #1
 80036aa:	3018      	adds	r0, #24
 80036ac:	4282      	cmp	r2, r0
 80036ae:	bf08      	it	eq
 80036b0:	f043 0301 	orreq.w	r3, r3, #1
 80036b4:	3018      	adds	r0, #24
 80036b6:	4282      	cmp	r2, r0
 80036b8:	bf08      	it	eq
 80036ba:	f043 0301 	orreq.w	r3, r3, #1
 80036be:	3018      	adds	r0, #24
 80036c0:	4282      	cmp	r2, r0
 80036c2:	bf08      	it	eq
 80036c4:	f043 0301 	orreq.w	r3, r3, #1
 80036c8:	3018      	adds	r0, #24
 80036ca:	4282      	cmp	r2, r0
 80036cc:	bf08      	it	eq
 80036ce:	f043 0301 	orreq.w	r3, r3, #1
 80036d2:	3018      	adds	r0, #24
 80036d4:	4282      	cmp	r2, r0
 80036d6:	bf08      	it	eq
 80036d8:	f043 0301 	orreq.w	r3, r3, #1
 80036dc:	b91b      	cbnz	r3, 80036e6 <HAL_DMA_IRQHandler+0xb6>
 80036de:	4b6d      	ldr	r3, [pc, #436]	@ (8003894 <HAL_DMA_IRQHandler+0x264>)
 80036e0:	429a      	cmp	r2, r3
 80036e2:	f040 812f 	bne.w	8003944 <HAL_DMA_IRQHandler+0x314>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036e8:	2108      	movs	r1, #8
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	4099      	lsls	r1, r3
 80036f0:	4221      	tst	r1, r4
 80036f2:	d00b      	beq.n	800370c <HAL_DMA_IRQHandler+0xdc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80036f4:	6810      	ldr	r0, [r2, #0]
 80036f6:	0740      	lsls	r0, r0, #29
 80036f8:	d508      	bpl.n	800370c <HAL_DMA_IRQHandler+0xdc>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80036fa:	6810      	ldr	r0, [r2, #0]
 80036fc:	f020 0004 	bic.w	r0, r0, #4
 8003700:	6010      	str	r0, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003702:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003704:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003706:	f041 0101 	orr.w	r1, r1, #1
 800370a:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800370c:	fa24 f103 	lsr.w	r1, r4, r3
 8003710:	07c8      	lsls	r0, r1, #31
 8003712:	d509      	bpl.n	8003728 <HAL_DMA_IRQHandler+0xf8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003714:	6951      	ldr	r1, [r2, #20]
 8003716:	0609      	lsls	r1, r1, #24
 8003718:	d506      	bpl.n	8003728 <HAL_DMA_IRQHandler+0xf8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800371a:	2101      	movs	r1, #1
 800371c:	4099      	lsls	r1, r3
 800371e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003720:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003722:	f041 0102 	orr.w	r1, r1, #2
 8003726:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003728:	2104      	movs	r1, #4
 800372a:	4099      	lsls	r1, r3
 800372c:	4221      	tst	r1, r4
 800372e:	d007      	beq.n	8003740 <HAL_DMA_IRQHandler+0x110>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003730:	6810      	ldr	r0, [r2, #0]
 8003732:	0780      	lsls	r0, r0, #30
 8003734:	d504      	bpl.n	8003740 <HAL_DMA_IRQHandler+0x110>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003736:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003738:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800373a:	f041 0104 	orr.w	r1, r1, #4
 800373e:	6579      	str	r1, [r7, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003740:	2110      	movs	r1, #16
 8003742:	4099      	lsls	r1, r3
 8003744:	4221      	tst	r1, r4
 8003746:	f000 80b0 	beq.w	80038aa <HAL_DMA_IRQHandler+0x27a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800374a:	6810      	ldr	r0, [r2, #0]
 800374c:	0700      	lsls	r0, r0, #28
 800374e:	f140 80ac 	bpl.w	80038aa <HAL_DMA_IRQHandler+0x27a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003752:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003754:	6811      	ldr	r1, [r2, #0]
 8003756:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800375a:	6811      	ldr	r1, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800375c:	f040 809e 	bne.w	800389c <HAL_DMA_IRQHandler+0x26c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003760:	05c9      	lsls	r1, r1, #23
 8003762:	d403      	bmi.n	800376c <HAL_DMA_IRQHandler+0x13c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003764:	6811      	ldr	r1, [r2, #0]
 8003766:	f021 0108 	bic.w	r1, r1, #8
 800376a:	6011      	str	r1, [r2, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800376c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800376e:	2900      	cmp	r1, #0
 8003770:	f000 809b 	beq.w	80038aa <HAL_DMA_IRQHandler+0x27a>
            hdma->XferHalfCpltCallback(hdma);
 8003774:	4638      	mov	r0, r7
 8003776:	4788      	blx	r1
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003778:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800377a:	2120      	movs	r1, #32
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	4099      	lsls	r1, r3
 8003782:	4221      	tst	r1, r4
 8003784:	d053      	beq.n	800382e <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4840      	ldr	r0, [pc, #256]	@ (800388c <HAL_DMA_IRQHandler+0x25c>)
 800378a:	4c41      	ldr	r4, [pc, #260]	@ (8003890 <HAL_DMA_IRQHandler+0x260>)
 800378c:	42a2      	cmp	r2, r4
 800378e:	bf18      	it	ne
 8003790:	4282      	cmpne	r2, r0
 8003792:	f104 0418 	add.w	r4, r4, #24
 8003796:	bf0c      	ite	eq
 8003798:	2001      	moveq	r0, #1
 800379a:	2000      	movne	r0, #0
 800379c:	42a2      	cmp	r2, r4
 800379e:	bf08      	it	eq
 80037a0:	f040 0001 	orreq.w	r0, r0, #1
 80037a4:	3418      	adds	r4, #24
 80037a6:	42a2      	cmp	r2, r4
 80037a8:	bf08      	it	eq
 80037aa:	f040 0001 	orreq.w	r0, r0, #1
 80037ae:	3418      	adds	r4, #24
 80037b0:	42a2      	cmp	r2, r4
 80037b2:	bf08      	it	eq
 80037b4:	f040 0001 	orreq.w	r0, r0, #1
 80037b8:	3418      	adds	r4, #24
 80037ba:	42a2      	cmp	r2, r4
 80037bc:	bf08      	it	eq
 80037be:	f040 0001 	orreq.w	r0, r0, #1
 80037c2:	3418      	adds	r4, #24
 80037c4:	42a2      	cmp	r2, r4
 80037c6:	bf08      	it	eq
 80037c8:	f040 0001 	orreq.w	r0, r0, #1
 80037cc:	3418      	adds	r4, #24
 80037ce:	42a2      	cmp	r2, r4
 80037d0:	bf08      	it	eq
 80037d2:	f040 0001 	orreq.w	r0, r0, #1
 80037d6:	f504 7456 	add.w	r4, r4, #856	@ 0x358
 80037da:	42a2      	cmp	r2, r4
 80037dc:	bf08      	it	eq
 80037de:	f040 0001 	orreq.w	r0, r0, #1
 80037e2:	3418      	adds	r4, #24
 80037e4:	42a2      	cmp	r2, r4
 80037e6:	bf08      	it	eq
 80037e8:	f040 0001 	orreq.w	r0, r0, #1
 80037ec:	3418      	adds	r4, #24
 80037ee:	42a2      	cmp	r2, r4
 80037f0:	bf08      	it	eq
 80037f2:	f040 0001 	orreq.w	r0, r0, #1
 80037f6:	3418      	adds	r4, #24
 80037f8:	42a2      	cmp	r2, r4
 80037fa:	bf08      	it	eq
 80037fc:	f040 0001 	orreq.w	r0, r0, #1
 8003800:	3418      	adds	r4, #24
 8003802:	42a2      	cmp	r2, r4
 8003804:	bf08      	it	eq
 8003806:	f040 0001 	orreq.w	r0, r0, #1
 800380a:	3418      	adds	r4, #24
 800380c:	42a2      	cmp	r2, r4
 800380e:	bf08      	it	eq
 8003810:	f040 0001 	orreq.w	r0, r0, #1
 8003814:	3418      	adds	r4, #24
 8003816:	42a2      	cmp	r2, r4
 8003818:	bf08      	it	eq
 800381a:	f040 0001 	orreq.w	r0, r0, #1
 800381e:	2800      	cmp	r0, #0
 8003820:	d147      	bne.n	80038b2 <HAL_DMA_IRQHandler+0x282>
 8003822:	481c      	ldr	r0, [pc, #112]	@ (8003894 <HAL_DMA_IRQHandler+0x264>)
 8003824:	4282      	cmp	r2, r0
 8003826:	d044      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x282>
 8003828:	6810      	ldr	r0, [r2, #0]
 800382a:	0780      	lsls	r0, r0, #30
 800382c:	d444      	bmi.n	80038b8 <HAL_DMA_IRQHandler+0x288>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800382e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003830:	2b00      	cmp	r3, #0
 8003832:	d070      	beq.n	8003916 <HAL_DMA_IRQHandler+0x2e6>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003836:	07dc      	lsls	r4, r3, #31
 8003838:	d51e      	bpl.n	8003878 <HAL_DMA_IRQHandler+0x248>
        __HAL_DMA_DISABLE(hdma);
 800383a:	683a      	ldr	r2, [r7, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800383c:	2104      	movs	r1, #4
 800383e:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8003842:	4915      	ldr	r1, [pc, #84]	@ (8003898 <HAL_DMA_IRQHandler+0x268>)
        __HAL_DMA_DISABLE(hdma);
 8003844:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003846:	fba1 6106 	umull	r6, r1, r1, r6
        __HAL_DMA_DISABLE(hdma);
 800384a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800384e:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e002      	b.n	800385a <HAL_DMA_IRQHandler+0x22a>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003854:	6813      	ldr	r3, [r2, #0]
 8003856:	07d8      	lsls	r0, r3, #31
 8003858:	d504      	bpl.n	8003864 <HAL_DMA_IRQHandler+0x234>
          if (++count > timeout)
 800385a:	9b01      	ldr	r3, [sp, #4]
 800385c:	3301      	adds	r3, #1
 800385e:	428b      	cmp	r3, r1
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	d9f7      	bls.n	8003854 <HAL_DMA_IRQHandler+0x224>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003864:	6813      	ldr	r3, [r2, #0]
 8003866:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8003868:	bf4c      	ite	mi
 800386a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800386c:	2301      	movpl	r3, #1
 800386e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003872:	2300      	movs	r3, #0
 8003874:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8003878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d04b      	beq.n	8003916 <HAL_DMA_IRQHandler+0x2e6>
          hdma->XferCpltCallback(hdma);
 800387e:	4638      	mov	r0, r7
}
 8003880:	b003      	add	sp, #12
 8003882:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 8003886:	4718      	bx	r3
 8003888:	240001a4 	.word	0x240001a4
 800388c:	40020010 	.word	0x40020010
 8003890:	40020028 	.word	0x40020028
 8003894:	400204b8 	.word	0x400204b8
 8003898:	1b4e81b5 	.word	0x1b4e81b5
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800389c:	0308      	lsls	r0, r1, #12
 800389e:	f57f af65 	bpl.w	800376c <HAL_DMA_IRQHandler+0x13c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80038a4:	2900      	cmp	r1, #0
 80038a6:	f47f af65 	bne.w	8003774 <HAL_DMA_IRQHandler+0x144>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038aa:	2120      	movs	r1, #32
 80038ac:	4099      	lsls	r1, r3
 80038ae:	420c      	tst	r4, r1
 80038b0:	d0bd      	beq.n	800382e <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038b2:	6810      	ldr	r0, [r2, #0]
 80038b4:	06c4      	lsls	r4, r0, #27
 80038b6:	d5ba      	bpl.n	800382e <HAL_DMA_IRQHandler+0x1fe>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038b8:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ba:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80038be:	2904      	cmp	r1, #4
 80038c0:	d00e      	beq.n	80038e0 <HAL_DMA_IRQHandler+0x2b0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038c8:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038ca:	d026      	beq.n	800391a <HAL_DMA_IRQHandler+0x2ea>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038cc:	031d      	lsls	r5, r3, #12
 80038ce:	d531      	bpl.n	8003934 <HAL_DMA_IRQHandler+0x304>
          if(hdma->XferCpltCallback != NULL)
 80038d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0ab      	beq.n	800382e <HAL_DMA_IRQHandler+0x1fe>
            hdma->XferCpltCallback(hdma);
 80038d6:	4638      	mov	r0, r7
 80038d8:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038dc:	b1db      	cbz	r3, 8003916 <HAL_DMA_IRQHandler+0x2e6>
 80038de:	e7a9      	b.n	8003834 <HAL_DMA_IRQHandler+0x204>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038e0:	6811      	ldr	r1, [r2, #0]
 80038e2:	f021 0116 	bic.w	r1, r1, #22
 80038e6:	6011      	str	r1, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038e8:	6951      	ldr	r1, [r2, #20]
 80038ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80038ee:	6151      	str	r1, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038f2:	b319      	cbz	r1, 800393c <HAL_DMA_IRQHandler+0x30c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038f4:	6811      	ldr	r1, [r2, #0]
 80038f6:	f021 0108 	bic.w	r1, r1, #8
 80038fa:	6011      	str	r1, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038fc:	223f      	movs	r2, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80038fe:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
          __HAL_UNLOCK(hdma);
 8003904:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003906:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8003908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 800390a:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800390e:	f887 2034 	strb.w	r2, [r7, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1b3      	bne.n	800387e <HAL_DMA_IRQHandler+0x24e>
}
 8003916:	b003      	add	sp, #12
 8003918:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800391a:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 800391e:	d1d7      	bne.n	80038d0 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003920:	6811      	ldr	r1, [r2, #0]
 8003922:	f021 0110 	bic.w	r1, r1, #16
 8003926:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8003928:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800392a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800392e:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8003932:	e7cd      	b.n	80038d0 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1CpltCallback != NULL)
 8003934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1cd      	bne.n	80038d6 <HAL_DMA_IRQHandler+0x2a6>
 800393a:	e778      	b.n	800382e <HAL_DMA_IRQHandler+0x1fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800393c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800393e:	2900      	cmp	r1, #0
 8003940:	d1d8      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x2c4>
 8003942:	e7db      	b.n	80038fc <HAL_DMA_IRQHandler+0x2cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003944:	4b40      	ldr	r3, [pc, #256]	@ (8003a48 <HAL_DMA_IRQHandler+0x418>)
 8003946:	4841      	ldr	r0, [pc, #260]	@ (8003a4c <HAL_DMA_IRQHandler+0x41c>)
 8003948:	4282      	cmp	r2, r0
 800394a:	bf18      	it	ne
 800394c:	429a      	cmpne	r2, r3
 800394e:	f100 0014 	add.w	r0, r0, #20
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	4282      	cmp	r2, r0
 800395a:	bf08      	it	eq
 800395c:	f043 0301 	orreq.w	r3, r3, #1
 8003960:	3014      	adds	r0, #20
 8003962:	4282      	cmp	r2, r0
 8003964:	bf08      	it	eq
 8003966:	f043 0301 	orreq.w	r3, r3, #1
 800396a:	3014      	adds	r0, #20
 800396c:	4282      	cmp	r2, r0
 800396e:	bf08      	it	eq
 8003970:	f043 0301 	orreq.w	r3, r3, #1
 8003974:	3014      	adds	r0, #20
 8003976:	4282      	cmp	r2, r0
 8003978:	bf08      	it	eq
 800397a:	f043 0301 	orreq.w	r3, r3, #1
 800397e:	3014      	adds	r0, #20
 8003980:	4282      	cmp	r2, r0
 8003982:	bf08      	it	eq
 8003984:	f043 0301 	orreq.w	r3, r3, #1
 8003988:	b913      	cbnz	r3, 8003990 <HAL_DMA_IRQHandler+0x360>
 800398a:	4b31      	ldr	r3, [pc, #196]	@ (8003a50 <HAL_DMA_IRQHandler+0x420>)
 800398c:	429a      	cmp	r2, r3
 800398e:	d1c2      	bne.n	8003916 <HAL_DMA_IRQHandler+0x2e6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003990:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003992:	2404      	movs	r4, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003994:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003996:	f000 001f 	and.w	r0, r0, #31
 800399a:	4084      	lsls	r4, r0
 800399c:	420c      	tst	r4, r1
 800399e:	d00b      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x388>
 80039a0:	075e      	lsls	r6, r3, #29
 80039a2:	d509      	bpl.n	80039b8 <HAL_DMA_IRQHandler+0x388>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039a4:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039a6:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039a8:	d532      	bpl.n	8003a10 <HAL_DMA_IRQHandler+0x3e0>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039aa:	03da      	lsls	r2, r3, #15
 80039ac:	d436      	bmi.n	8003a1c <HAL_DMA_IRQHandler+0x3ec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f47f af64 	bne.w	800387e <HAL_DMA_IRQHandler+0x24e>
 80039b6:	e7ae      	b.n	8003916 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80039b8:	2402      	movs	r4, #2
 80039ba:	4084      	lsls	r4, r0
 80039bc:	420c      	tst	r4, r1
 80039be:	d00b      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x3a8>
 80039c0:	079e      	lsls	r6, r3, #30
 80039c2:	d509      	bpl.n	80039d8 <HAL_DMA_IRQHandler+0x3a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c4:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80039c6:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c8:	d52d      	bpl.n	8003a26 <HAL_DMA_IRQHandler+0x3f6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039ca:	03da      	lsls	r2, r3, #15
 80039cc:	d437      	bmi.n	8003a3e <HAL_DMA_IRQHandler+0x40e>
          if(hdma->XferM1CpltCallback != NULL)
 80039ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f47f af54 	bne.w	800387e <HAL_DMA_IRQHandler+0x24e>
 80039d6:	e79e      	b.n	8003916 <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80039d8:	2408      	movs	r4, #8
 80039da:	4084      	lsls	r4, r0
 80039dc:	420c      	tst	r4, r1
 80039de:	d09a      	beq.n	8003916 <HAL_DMA_IRQHandler+0x2e6>
 80039e0:	071b      	lsls	r3, r3, #28
 80039e2:	d598      	bpl.n	8003916 <HAL_DMA_IRQHandler+0x2e6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039e4:	6813      	ldr	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 80039e6:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039e8:	f023 030e 	bic.w	r3, r3, #14
 80039ec:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80039ee:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 80039f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80039f2:	fa03 f000 	lsl.w	r0, r3, r0
 80039f6:	6068      	str	r0, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039f8:	657b      	str	r3, [r7, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 80039fa:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80039fe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 8003a02:	2a00      	cmp	r2, #0
 8003a04:	d087      	beq.n	8003916 <HAL_DMA_IRQHandler+0x2e6>
        hdma->XferErrorCallback(hdma);
 8003a06:	4638      	mov	r0, r7
}
 8003a08:	b003      	add	sp, #12
 8003a0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8003a0e:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a10:	069b      	lsls	r3, r3, #26
 8003a12:	d403      	bmi.n	8003a1c <HAL_DMA_IRQHandler+0x3ec>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a14:	6813      	ldr	r3, [r2, #0]
 8003a16:	f023 0304 	bic.w	r3, r3, #4
 8003a1a:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f47f af2d 	bne.w	800387e <HAL_DMA_IRQHandler+0x24e>
 8003a24:	e777      	b.n	8003916 <HAL_DMA_IRQHandler+0x2e6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a26:	f013 0320 	ands.w	r3, r3, #32
 8003a2a:	d108      	bne.n	8003a3e <HAL_DMA_IRQHandler+0x40e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a2c:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a30:	f021 010a 	bic.w	r1, r1, #10
 8003a34:	6011      	str	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003a36:	f887 0035 	strb.w	r0, [r7, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8003a3a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 8003a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f47f af1c 	bne.w	800387e <HAL_DMA_IRQHandler+0x24e>
 8003a46:	e766      	b.n	8003916 <HAL_DMA_IRQHandler+0x2e6>
 8003a48:	58025408 	.word	0x58025408
 8003a4c:	5802541c 	.word	0x5802541c
 8003a50:	58025494 	.word	0x58025494

08003a54 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a54:	680b      	ldr	r3, [r1, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 81dc 	beq.w	8003e14 <HAL_GPIO_Init+0x3c0>
 8003a5c:	4ab4      	ldr	r2, [pc, #720]	@ (8003d30 <HAL_GPIO_Init+0x2dc>)
 8003a5e:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 8003a60:	f04f 0200 	mov.w	r2, #0
{
 8003a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a68:	f04f 0b01 	mov.w	fp, #1
{
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	f000 8105 	beq.w	8003c7c <HAL_GPIO_Init+0x228>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a72:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a76:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a78:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00U)
 8003a7c:	9b00      	ldr	r3, [sp, #0]
 8003a7e:	ea1c 0a03 	ands.w	sl, ip, r3
 8003a82:	f000 814b 	beq.w	8003d1c <HAL_GPIO_Init+0x2c8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a86:	684d      	ldr	r5, [r1, #4]
 8003a88:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a8a:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a8c:	f005 0703 	and.w	r7, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a90:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a94:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a98:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a9a:	f1b8 0f01 	cmp.w	r8, #1
 8003a9e:	f240 815d 	bls.w	8003d5c <HAL_GPIO_Init+0x308>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa2:	2f03      	cmp	r7, #3
 8003aa4:	f040 81cf 	bne.w	8003e46 <HAL_GPIO_Init+0x3f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa8:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8003aac:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003aae:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ab2:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ab6:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 8003aba:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003abc:	f000 812e 	beq.w	8003d1c <HAL_GPIO_Init+0x2c8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac0:	4e9c      	ldr	r6, [pc, #624]	@ (8003d34 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ac2:	f002 0703 	and.w	r7, r2, #3
 8003ac6:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac8:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003acc:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ace:	f044 0402 	orr.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ad2:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ad6:	4b98      	ldr	r3, [pc, #608]	@ (8003d38 <HAL_GPIO_Init+0x2e4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad8:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8003adc:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 8003ae0:	f022 0603 	bic.w	r6, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ae4:	4298      	cmp	r0, r3
 8003ae6:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	f004 0402 	and.w	r4, r4, #2
 8003aee:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003af2:	9403      	str	r4, [sp, #12]
 8003af4:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003af6:	68b4      	ldr	r4, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003af8:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003afc:	f000 8178 	beq.w	8003df0 <HAL_GPIO_Init+0x39c>
 8003b00:	4b8e      	ldr	r3, [pc, #568]	@ (8003d3c <HAL_GPIO_Init+0x2e8>)
 8003b02:	4298      	cmp	r0, r3
 8003b04:	f000 80de 	beq.w	8003cc4 <HAL_GPIO_Init+0x270>
 8003b08:	f8df c234 	ldr.w	ip, [pc, #564]	@ 8003d40 <HAL_GPIO_Init+0x2ec>
 8003b0c:	4560      	cmp	r0, ip
 8003b0e:	f000 817b 	beq.w	8003e08 <HAL_GPIO_Init+0x3b4>
 8003b12:	f8df c230 	ldr.w	ip, [pc, #560]	@ 8003d44 <HAL_GPIO_Init+0x2f0>
 8003b16:	4560      	cmp	r0, ip
 8003b18:	f000 817d 	beq.w	8003e16 <HAL_GPIO_Init+0x3c2>
 8003b1c:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8003d48 <HAL_GPIO_Init+0x2f4>
 8003b20:	4560      	cmp	r0, ip
 8003b22:	f000 816b 	beq.w	8003dfc <HAL_GPIO_Init+0x3a8>
 8003b26:	f8df c224 	ldr.w	ip, [pc, #548]	@ 8003d4c <HAL_GPIO_Init+0x2f8>
 8003b2a:	4560      	cmp	r0, ip
 8003b2c:	f000 8179 	beq.w	8003e22 <HAL_GPIO_Init+0x3ce>
 8003b30:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 8003d50 <HAL_GPIO_Init+0x2fc>
 8003b34:	4560      	cmp	r0, ip
 8003b36:	f000 817a 	beq.w	8003e2e <HAL_GPIO_Init+0x3da>
 8003b3a:	f8df c218 	ldr.w	ip, [pc, #536]	@ 8003d54 <HAL_GPIO_Init+0x300>
 8003b3e:	4560      	cmp	r0, ip
 8003b40:	f000 817b 	beq.w	8003e3a <HAL_GPIO_Init+0x3e6>
 8003b44:	f8df c210 	ldr.w	ip, [pc, #528]	@ 8003d58 <HAL_GPIO_Init+0x304>
 8003b48:	4560      	cmp	r0, ip
 8003b4a:	bf0c      	ite	eq
 8003b4c:	f04f 0c09 	moveq.w	ip, #9
 8003b50:	f04f 0c0a 	movne.w	ip, #10
 8003b54:	fa0c f707 	lsl.w	r7, ip, r7
 8003b58:	433c      	orrs	r4, r7
 8003b5a:	e0b8      	b.n	8003cce <HAL_GPIO_Init+0x27a>
        temp = GPIOx->OSPEEDR;
 8003b5c:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b60:	2c02      	cmp	r4, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b62:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b64:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b68:	fa06 f807 	lsl.w	r8, r6, r7
 8003b6c:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003b70:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b74:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003b78:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b7c:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b80:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b84:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 8003b88:	f8c0 e004 	str.w	lr, [r0, #4]
      temp = GPIOx->PUPDR;
 8003b8c:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b90:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b92:	ea0a 0808 	and.w	r8, sl, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b96:	fa06 fe07 	lsl.w	lr, r6, r7
 8003b9a:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 8003b9e:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba2:	d117      	bne.n	8003bd4 <HAL_GPIO_Init+0x180>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ba4:	f002 0e07 	and.w	lr, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ba8:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003baa:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bae:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003bb2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bb6:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8003bba:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bbe:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bc0:	260f      	movs	r6, #15
 8003bc2:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bc6:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bc8:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bcc:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003bd0:	f8c8 e020 	str.w	lr, [r8, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bd4:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8003bd6:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bd8:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bdc:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003be0:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8003be4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003be6:	d045      	beq.n	8003c74 <HAL_GPIO_Init+0x220>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be8:	4f52      	ldr	r7, [pc, #328]	@ (8003d34 <HAL_GPIO_Init+0x2e0>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bea:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bec:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8003bf0:	f044 0402 	orr.w	r4, r4, #2
 8003bf4:	f8c7 40f4 	str.w	r4, [r7, #244]	@ 0xf4
 8003bf8:	f8d7 40f4 	ldr.w	r4, [r7, #244]	@ 0xf4
 8003bfc:	f022 0703 	bic.w	r7, r2, #3
 8003c00:	f004 0402 	and.w	r4, r4, #2
 8003c04:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 8003c08:	9403      	str	r4, [sp, #12]
 8003c0a:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8003c0e:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c10:	f002 0403 	and.w	r4, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003c14:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c18:	00a4      	lsls	r4, r4, #2
 8003c1a:	fa06 f404 	lsl.w	r4, r6, r4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c1e:	02ee      	lsls	r6, r5, #11
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c20:	ea2e 0404 	bic.w	r4, lr, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c24:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR1;
 8003c26:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 8003c2a:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 8003c2e:	6824      	ldr	r4, [r4, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c30:	f100 80d2 	bmi.w	8003dd8 <HAL_GPIO_Init+0x384>
        temp &= ~(iocurrent);
 8003c34:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003c36:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8003c3a:	6034      	str	r4, [r6, #0]

        temp = EXTI->FTSR1;
 8003c3c:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c3e:	02ae      	lsls	r6, r5, #10
 8003c40:	f100 80d3 	bmi.w	8003dea <HAL_GPIO_Init+0x396>
        temp &= ~(iocurrent);
 8003c44:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8003c46:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
 8003c4a:	6074      	str	r4, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003c4c:	f8d6 4084 	ldr.w	r4, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c50:	03ae      	lsls	r6, r5, #14
 8003c52:	f100 80c7 	bmi.w	8003de4 <HAL_GPIO_Init+0x390>
        temp &= ~(iocurrent);
 8003c56:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003c58:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c5c:	03ed      	lsls	r5, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003c5e:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003c62:	f8d6 4080 	ldr.w	r4, [r6, #128]	@ 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c66:	f100 80ba 	bmi.w	8003dde <HAL_GPIO_Init+0x38a>
        temp &= ~(iocurrent);
 8003c6a:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003c6c:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8003c70:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
      }
    }

    position++;
 8003c74:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c76:	fa33 f402 	lsrs.w	r4, r3, r2
 8003c7a:	d055      	beq.n	8003d28 <HAL_GPIO_Init+0x2d4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c7c:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00U)
 8003c80:	ea13 0c0e 	ands.w	ip, r3, lr
 8003c84:	d0f6      	beq.n	8003c74 <HAL_GPIO_Init+0x220>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c86:	684d      	ldr	r5, [r1, #4]
 8003c88:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c8a:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c8c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c90:	fa06 f807 	lsl.w	r8, r6, r7
 8003c94:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c98:	f104 38ff 	add.w	r8, r4, #4294967295
 8003c9c:	f1b8 0f01 	cmp.w	r8, #1
 8003ca0:	f67f af5c 	bls.w	8003b5c <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca4:	2c03      	cmp	r4, #3
 8003ca6:	d095      	beq.n	8003bd4 <HAL_GPIO_Init+0x180>
      temp = GPIOx->PUPDR;
 8003ca8:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8003d30 <HAL_GPIO_Init+0x2dc>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cac:	688e      	ldr	r6, [r1, #8]
      temp = GPIOx->PUPDR;
 8003cae:	f8d8 900c 	ldr.w	r9, [r8, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cb2:	fa06 fe07 	lsl.w	lr, r6, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cb6:	ea0a 0909 	and.w	r9, sl, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cba:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 8003cbe:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc2:	e787      	b.n	8003bd4 <HAL_GPIO_Init+0x180>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cc4:	f04f 0c02 	mov.w	ip, #2
 8003cc8:	fa0c f707 	lsl.w	r7, ip, r7
 8003ccc:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cce:	60b4      	str	r4, [r6, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cd0:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8003cd2:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8003cd6:	ea6f 060a 	mvn.w	r6, sl
          temp |= iocurrent;
 8003cda:	bf4c      	ite	mi
 8003cdc:	ea4a 0404 	orrmi.w	r4, sl, r4
        temp &= ~(iocurrent);
 8003ce0:	4034      	andpl	r4, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ce2:	02ab      	lsls	r3, r5, #10
        EXTI->RTSR1 = temp;
 8003ce4:	f8ce 4000 	str.w	r4, [lr]
        temp = EXTI->FTSR1;
 8003ce8:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
 8003cec:	bf54      	ite	pl
 8003cee:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003cf0:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cf4:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8003cf6:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003cfa:	f8de 4084 	ldr.w	r4, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8003cfe:	bf54      	ite	pl
 8003d00:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003d02:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d06:	03eb      	lsls	r3, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8003d08:	f8ce 4084 	str.w	r4, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8003d0c:	f8de 4080 	ldr.w	r4, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8003d10:	bf54      	ite	pl
 8003d12:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8003d14:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI_CurrentCPU->IMR1 = temp;
 8003d18:	f8ce 4080 	str.w	r4, [lr, #128]	@ 0x80
    position++;
 8003d1c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d1e:	9b00      	ldr	r3, [sp, #0]
 8003d20:	fa33 f402 	lsrs.w	r4, r3, r2
 8003d24:	f47f aea8 	bne.w	8003a78 <HAL_GPIO_Init+0x24>
  }
}
 8003d28:	b005      	add	sp, #20
 8003d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2e:	bf00      	nop
 8003d30:	58020000 	.word	0x58020000
 8003d34:	58024400 	.word	0x58024400
 8003d38:	58020400 	.word	0x58020400
 8003d3c:	58020800 	.word	0x58020800
 8003d40:	58020c00 	.word	0x58020c00
 8003d44:	58021000 	.word	0x58021000
 8003d48:	58021400 	.word	0x58021400
 8003d4c:	58021800 	.word	0x58021800
 8003d50:	58021c00 	.word	0x58021c00
 8003d54:	58022000 	.word	0x58022000
 8003d58:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 8003d5c:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d60:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d62:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d64:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d68:	fa03 f804 	lsl.w	r8, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d6c:	688b      	ldr	r3, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d6e:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8003d72:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d76:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8003d7a:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d7e:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d82:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d86:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8003d8a:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d8e:	fa03 fc04 	lsl.w	ip, r3, r4
      temp = GPIOx->PUPDR;
 8003d92:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d96:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d9a:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003d9e:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da2:	f47f ae81 	bne.w	8003aa8 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003da6:	f002 0c07 	and.w	ip, r2, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003daa:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003dac:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003db0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003db4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003db8:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8003dbc:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dc0:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003dc2:	230f      	movs	r3, #15
 8003dc4:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dc8:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003dca:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dce:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003dd2:	f8c8 c020 	str.w	ip, [r8, #32]
 8003dd6:	e667      	b.n	8003aa8 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8003dd8:	ea44 040c 	orr.w	r4, r4, ip
 8003ddc:	e72b      	b.n	8003c36 <HAL_GPIO_Init+0x1e2>
          temp |= iocurrent;
 8003dde:	ea44 040c 	orr.w	r4, r4, ip
 8003de2:	e743      	b.n	8003c6c <HAL_GPIO_Init+0x218>
          temp |= iocurrent;
 8003de4:	ea4c 0404 	orr.w	r4, ip, r4
 8003de8:	e736      	b.n	8003c58 <HAL_GPIO_Init+0x204>
          temp |= iocurrent;
 8003dea:	ea44 040c 	orr.w	r4, r4, ip
 8003dee:	e72a      	b.n	8003c46 <HAL_GPIO_Init+0x1f2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003df0:	f04f 0c01 	mov.w	ip, #1
 8003df4:	fa0c f707 	lsl.w	r7, ip, r7
 8003df8:	433c      	orrs	r4, r7
 8003dfa:	e768      	b.n	8003cce <HAL_GPIO_Init+0x27a>
 8003dfc:	f04f 0c05 	mov.w	ip, #5
 8003e00:	fa0c f707 	lsl.w	r7, ip, r7
 8003e04:	433c      	orrs	r4, r7
 8003e06:	e762      	b.n	8003cce <HAL_GPIO_Init+0x27a>
 8003e08:	f04f 0c03 	mov.w	ip, #3
 8003e0c:	fa0c f707 	lsl.w	r7, ip, r7
 8003e10:	433c      	orrs	r4, r7
 8003e12:	e75c      	b.n	8003cce <HAL_GPIO_Init+0x27a>
 8003e14:	4770      	bx	lr
 8003e16:	f04f 0c04 	mov.w	ip, #4
 8003e1a:	fa0c f707 	lsl.w	r7, ip, r7
 8003e1e:	433c      	orrs	r4, r7
 8003e20:	e755      	b.n	8003cce <HAL_GPIO_Init+0x27a>
 8003e22:	f04f 0c06 	mov.w	ip, #6
 8003e26:	fa0c f707 	lsl.w	r7, ip, r7
 8003e2a:	433c      	orrs	r4, r7
 8003e2c:	e74f      	b.n	8003cce <HAL_GPIO_Init+0x27a>
 8003e2e:	f04f 0c07 	mov.w	ip, #7
 8003e32:	fa0c f707 	lsl.w	r7, ip, r7
 8003e36:	433c      	orrs	r4, r7
 8003e38:	e749      	b.n	8003cce <HAL_GPIO_Init+0x27a>
 8003e3a:	f04f 0c08 	mov.w	ip, #8
 8003e3e:	fa0c f707 	lsl.w	r7, ip, r7
 8003e42:	433c      	orrs	r4, r7
 8003e44:	e743      	b.n	8003cce <HAL_GPIO_Init+0x27a>
      temp = GPIOx->PUPDR;
 8003e46:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e4a:	688b      	ldr	r3, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e4c:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e50:	fa03 fc04 	lsl.w	ip, r3, r4
 8003e54:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8003e58:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5c:	e624      	b.n	8003aa8 <HAL_GPIO_Init+0x54>
 8003e5e:	bf00      	nop

08003e60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e60:	b902      	cbnz	r2, 8003e64 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e62:	0409      	lsls	r1, r1, #16
 8003e64:	6181      	str	r1, [r0, #24]
  }
}
 8003e66:	4770      	bx	lr

08003e68 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e68:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e6a:	4c10      	ldr	r4, [pc, #64]	@ (8003eac <HAL_PWREx_ConfigSupply+0x44>)
 8003e6c:	68e3      	ldr	r3, [r4, #12]
 8003e6e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e72:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e74:	d105      	bne.n	8003e82 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	1a18      	subs	r0, r3, r0
 8003e7c:	bf18      	it	ne
 8003e7e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8003e80:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e82:	f023 0307 	bic.w	r3, r3, #7
 8003e86:	4303      	orrs	r3, r0
 8003e88:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8003e8a:	f7fd fb77 	bl	800157c <HAL_GetTick>
 8003e8e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e90:	e005      	b.n	8003e9e <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e92:	f7fd fb73 	bl	800157c <HAL_GetTick>
 8003e96:	1b40      	subs	r0, r0, r5
 8003e98:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003e9c:	d804      	bhi.n	8003ea8 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e9e:	6863      	ldr	r3, [r4, #4]
 8003ea0:	049b      	lsls	r3, r3, #18
 8003ea2:	d5f6      	bpl.n	8003e92 <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8003ea4:	2000      	movs	r0, #0
}
 8003ea6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003ea8:	2001      	movs	r0, #1
}
 8003eaa:	bd38      	pop	{r3, r4, r5, pc}
 8003eac:	58024800 	.word	0x58024800

08003eb0 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003eb0:	4b33      	ldr	r3, [pc, #204]	@ (8003f80 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8003eb2:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003eb4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003eb6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003eb8:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8003eba:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ebe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ec0:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8003ec4:	d036      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ec6:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003eca:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ece:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ed2:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003ed6:	fb05 f202 	mul.w	r2, r5, r2
        switch (pllsource)
 8003eda:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003edc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ee0:	ee06 2a90 	vmov	s13, r2
 8003ee4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 8003ee8:	d002      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8003eea:	2902      	cmp	r1, #2
 8003eec:	d042      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8003eee:	b319      	cbz	r1, 8003f38 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ef0:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8003f84 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8003ef4:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f0a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8003f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f12:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003f16:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003f1e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f20:	ee07 3a10 	vmov	s14, r3
 8003f24:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003f28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f2c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8003f30:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003f34:	bc30      	pop	{r4, r5}
 8003f36:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	0692      	lsls	r2, r2, #26
 8003f3c:	d51d      	bpl.n	8003f7a <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f3e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f40:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f44:	4a10      	ldr	r2, [pc, #64]	@ (8003f88 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f48:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f50:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f52:	ee06 3a10 	vmov	s12, r3
 8003f56:	ee05 2a90 	vmov	s11, r2
 8003f5a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8003f5e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003f62:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003f66:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8003f6a:	ee36 7a26 	vadd.f32	s14, s12, s13
 8003f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f72:	e7d0      	b.n	8003f16 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f74:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003f8c <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8003f78:	e7bc      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f7a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8003f90 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8003f7e:	e7b9      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003f80:	58024400 	.word	0x58024400
 8003f84:	4a742400 	.word	0x4a742400
 8003f88:	03d09000 	.word	0x03d09000
 8003f8c:	4bbebc20 	.word	0x4bbebc20
 8003f90:	4c742400 	.word	0x4c742400

08003f94 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003f94:	2800      	cmp	r0, #0
 8003f96:	f000 82e7 	beq.w	8004568 <HAL_RCC_OscConfig+0x5d4>
{
 8003f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9c:	6803      	ldr	r3, [r0, #0]
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	07d9      	lsls	r1, r3, #31
 8003fa2:	d52e      	bpl.n	8004002 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fa4:	4997      	ldr	r1, [pc, #604]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
 8003fa6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fa8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003faa:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fae:	2a10      	cmp	r2, #16
 8003fb0:	f000 80ee 	beq.w	8004190 <HAL_RCC_OscConfig+0x1fc>
 8003fb4:	2a18      	cmp	r2, #24
 8003fb6:	f000 80e6 	beq.w	8004186 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fba:	6863      	ldr	r3, [r4, #4]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc0:	f000 8111 	beq.w	80041e6 <HAL_RCC_OscConfig+0x252>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8167 	beq.w	8004298 <HAL_RCC_OscConfig+0x304>
 8003fca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fce:	4b8d      	ldr	r3, [pc, #564]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	f000 8288 	beq.w	80044e6 <HAL_RCC_OscConfig+0x552>
 8003fd6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fe2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003fe4:	f7fd faca 	bl	800157c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fe8:	4e86      	ldr	r6, [pc, #536]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003fea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fec:	e005      	b.n	8003ffa <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fee:	f7fd fac5 	bl	800157c <HAL_GetTick>
 8003ff2:	1b40      	subs	r0, r0, r5
 8003ff4:	2864      	cmp	r0, #100	@ 0x64
 8003ff6:	f200 814d 	bhi.w	8004294 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ffa:	6833      	ldr	r3, [r6, #0]
 8003ffc:	039b      	lsls	r3, r3, #14
 8003ffe:	d5f6      	bpl.n	8003fee <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	079d      	lsls	r5, r3, #30
 8004004:	d470      	bmi.n	80040e8 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004006:	06d9      	lsls	r1, r3, #27
 8004008:	d533      	bpl.n	8004072 <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400a:	4a7e      	ldr	r2, [pc, #504]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
 800400c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800400e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004010:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004014:	2b08      	cmp	r3, #8
 8004016:	f000 80cb 	beq.w	80041b0 <HAL_RCC_OscConfig+0x21c>
 800401a:	2b18      	cmp	r3, #24
 800401c:	f000 80c3 	beq.w	80041a6 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004020:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8004022:	4d78      	ldr	r5, [pc, #480]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 816f 	beq.w	8004308 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004030:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004032:	f7fd faa3 	bl	800157c <HAL_GetTick>
 8004036:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004038:	e005      	b.n	8004046 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800403a:	f7fd fa9f 	bl	800157c <HAL_GetTick>
 800403e:	1b80      	subs	r0, r0, r6
 8004040:	2802      	cmp	r0, #2
 8004042:	f200 8127 	bhi.w	8004294 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004046:	682b      	ldr	r3, [r5, #0]
 8004048:	05db      	lsls	r3, r3, #23
 800404a:	d5f6      	bpl.n	800403a <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800404c:	f7fd fa9c 	bl	8001588 <HAL_GetREVID>
 8004050:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004054:	4298      	cmp	r0, r3
 8004056:	f200 8267 	bhi.w	8004528 <HAL_RCC_OscConfig+0x594>
 800405a:	6a22      	ldr	r2, [r4, #32]
 800405c:	686b      	ldr	r3, [r5, #4]
 800405e:	2a20      	cmp	r2, #32
 8004060:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004064:	bf0c      	ite	eq
 8004066:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800406a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800406e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	071d      	lsls	r5, r3, #28
 8004074:	d516      	bpl.n	80040a4 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004076:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004078:	4d62      	ldr	r5, [pc, #392]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 8122 	beq.w	80042c4 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 8004080:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8004088:	f7fd fa78 	bl	800157c <HAL_GetTick>
 800408c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800408e:	e005      	b.n	800409c <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004090:	f7fd fa74 	bl	800157c <HAL_GetTick>
 8004094:	1b80      	subs	r0, r0, r6
 8004096:	2802      	cmp	r0, #2
 8004098:	f200 80fc 	bhi.w	8004294 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800409c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800409e:	0798      	lsls	r0, r3, #30
 80040a0:	d5f6      	bpl.n	8004090 <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	069a      	lsls	r2, r3, #26
 80040a6:	d516      	bpl.n	80040d6 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80040a8:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80040aa:	4d56      	ldr	r5, [pc, #344]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 811a 	beq.w	80042e6 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 80040b2:	682b      	ldr	r3, [r5, #0]
 80040b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040b8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80040ba:	f7fd fa5f 	bl	800157c <HAL_GetTick>
 80040be:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040c0:	e005      	b.n	80040ce <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040c2:	f7fd fa5b 	bl	800157c <HAL_GetTick>
 80040c6:	1b80      	subs	r0, r0, r6
 80040c8:	2802      	cmp	r0, #2
 80040ca:	f200 80e3 	bhi.w	8004294 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040ce:	682b      	ldr	r3, [r5, #0]
 80040d0:	049f      	lsls	r7, r3, #18
 80040d2:	d5f6      	bpl.n	80040c2 <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	0759      	lsls	r1, r3, #29
 80040d8:	f100 808b 	bmi.w	80041f2 <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 80bf 	bne.w	8004262 <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 80040e4:	2000      	movs	r0, #0
}
 80040e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e8:	4a46      	ldr	r2, [pc, #280]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
 80040ea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040ee:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80040f2:	d12d      	bne.n	8004150 <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f4:	4b43      	ldr	r3, [pc, #268]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040f6:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	0759      	lsls	r1, r3, #29
 80040fc:	d501      	bpl.n	8004102 <HAL_RCC_OscConfig+0x16e>
 80040fe:	2a00      	cmp	r2, #0
 8004100:	d04f      	beq.n	80041a2 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004102:	4d40      	ldr	r5, [pc, #256]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	f023 0319 	bic.w	r3, r3, #25
 800410a:	4313      	orrs	r3, r2
 800410c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800410e:	f7fd fa35 	bl	800157c <HAL_GetTick>
 8004112:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004114:	e005      	b.n	8004122 <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004116:	f7fd fa31 	bl	800157c <HAL_GetTick>
 800411a:	1b80      	subs	r0, r0, r6
 800411c:	2802      	cmp	r0, #2
 800411e:	f200 80b9 	bhi.w	8004294 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004122:	682b      	ldr	r3, [r5, #0]
 8004124:	075b      	lsls	r3, r3, #29
 8004126:	d5f6      	bpl.n	8004116 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004128:	f7fd fa2e 	bl	8001588 <HAL_GetREVID>
 800412c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8004130:	4298      	cmp	r0, r3
 8004132:	f200 8110 	bhi.w	8004356 <HAL_RCC_OscConfig+0x3c2>
 8004136:	6922      	ldr	r2, [r4, #16]
 8004138:	686b      	ldr	r3, [r5, #4]
 800413a:	2a40      	cmp	r2, #64	@ 0x40
 800413c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004140:	bf0c      	ite	eq
 8004142:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8004146:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800414a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	e75a      	b.n	8004006 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004150:	2b18      	cmp	r3, #24
 8004152:	f000 80fc 	beq.w	800434e <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004156:	4d2b      	ldr	r5, [pc, #172]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004158:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800415a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800415c:	2a00      	cmp	r2, #0
 800415e:	f000 80e5 	beq.w	800432c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004162:	f023 0319 	bic.w	r3, r3, #25
 8004166:	4313      	orrs	r3, r2
 8004168:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800416a:	f7fd fa07 	bl	800157c <HAL_GetTick>
 800416e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004170:	e005      	b.n	800417e <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004172:	f7fd fa03 	bl	800157c <HAL_GetTick>
 8004176:	1b80      	subs	r0, r0, r6
 8004178:	2802      	cmp	r0, #2
 800417a:	f200 808b 	bhi.w	8004294 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	075f      	lsls	r7, r3, #29
 8004182:	d5f6      	bpl.n	8004172 <HAL_RCC_OscConfig+0x1de>
 8004184:	e7d0      	b.n	8004128 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004186:	f001 0103 	and.w	r1, r1, #3
 800418a:	2902      	cmp	r1, #2
 800418c:	f47f af15 	bne.w	8003fba <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	4a1c      	ldr	r2, [pc, #112]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	0392      	lsls	r2, r2, #14
 8004196:	f57f af34 	bpl.w	8004002 <HAL_RCC_OscConfig+0x6e>
 800419a:	6862      	ldr	r2, [r4, #4]
 800419c:	2a00      	cmp	r2, #0
 800419e:	f47f af30 	bne.w	8004002 <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 80041a2:	2001      	movs	r0, #1
}
 80041a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041a6:	f002 0203 	and.w	r2, r2, #3
 80041aa:	2a01      	cmp	r2, #1
 80041ac:	f47f af38 	bne.w	8004020 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041b0:	4b14      	ldr	r3, [pc, #80]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	05da      	lsls	r2, r3, #23
 80041b6:	d502      	bpl.n	80041be <HAL_RCC_OscConfig+0x22a>
 80041b8:	69e3      	ldr	r3, [r4, #28]
 80041ba:	2b80      	cmp	r3, #128	@ 0x80
 80041bc:	d1f1      	bne.n	80041a2 <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041be:	f7fd f9e3 	bl	8001588 <HAL_GetREVID>
 80041c2:	f241 0303 	movw	r3, #4099	@ 0x1003
 80041c6:	4298      	cmp	r0, r3
 80041c8:	f200 80ce 	bhi.w	8004368 <HAL_RCC_OscConfig+0x3d4>
 80041cc:	6a22      	ldr	r2, [r4, #32]
 80041ce:	2a20      	cmp	r2, #32
 80041d0:	f000 81b9 	beq.w	8004546 <HAL_RCC_OscConfig+0x5b2>
 80041d4:	490b      	ldr	r1, [pc, #44]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
 80041d6:	684b      	ldr	r3, [r1, #4]
 80041d8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80041dc:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80041e0:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	e745      	b.n	8004072 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e6:	4a07      	ldr	r2, [pc, #28]	@ (8004204 <HAL_RCC_OscConfig+0x270>)
 80041e8:	6813      	ldr	r3, [r2, #0]
 80041ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f0:	e6f8      	b.n	8003fe4 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 80041f2:	4d05      	ldr	r5, [pc, #20]	@ (8004208 <HAL_RCC_OscConfig+0x274>)
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041fa:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80041fc:	f7fd f9be 	bl	800157c <HAL_GetTick>
 8004200:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x282>
 8004204:	58024400 	.word	0x58024400
 8004208:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420c:	f7fd f9b6 	bl	800157c <HAL_GetTick>
 8004210:	1b80      	subs	r0, r0, r6
 8004212:	2864      	cmp	r0, #100	@ 0x64
 8004214:	d83e      	bhi.n	8004294 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004216:	682b      	ldr	r3, [r5, #0]
 8004218:	05da      	lsls	r2, r3, #23
 800421a:	d5f7      	bpl.n	800420c <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421c:	68a3      	ldr	r3, [r4, #8]
 800421e:	2b01      	cmp	r3, #1
 8004220:	f000 818b 	beq.w	800453a <HAL_RCC_OscConfig+0x5a6>
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 8166 	beq.w	80044f6 <HAL_RCC_OscConfig+0x562>
 800422a:	2b05      	cmp	r3, #5
 800422c:	4b85      	ldr	r3, [pc, #532]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 800422e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004230:	f000 8192 	beq.w	8004558 <HAL_RCC_OscConfig+0x5c4>
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	671a      	str	r2, [r3, #112]	@ 0x70
 800423a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800423c:	f022 0204 	bic.w	r2, r2, #4
 8004240:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004242:	f7fd f99b 	bl	800157c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004246:	4e7f      	ldr	r6, [pc, #508]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004248:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800424c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800424e:	e004      	b.n	800425a <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004250:	f7fd f994 	bl	800157c <HAL_GetTick>
 8004254:	1b40      	subs	r0, r0, r5
 8004256:	42b8      	cmp	r0, r7
 8004258:	d81c      	bhi.n	8004294 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800425a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800425c:	079b      	lsls	r3, r3, #30
 800425e:	d5f7      	bpl.n	8004250 <HAL_RCC_OscConfig+0x2bc>
 8004260:	e73c      	b.n	80040dc <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004262:	4d78      	ldr	r5, [pc, #480]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 8004264:	692a      	ldr	r2, [r5, #16]
 8004266:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800426a:	2a18      	cmp	r2, #24
 800426c:	f000 80ee 	beq.w	800444c <HAL_RCC_OscConfig+0x4b8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004270:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8004272:	682b      	ldr	r3, [r5, #0]
 8004274:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004278:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800427a:	d07f      	beq.n	800437c <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 800427c:	f7fd f97e 	bl	800157c <HAL_GetTick>
 8004280:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004282:	682b      	ldr	r3, [r5, #0]
 8004284:	019b      	lsls	r3, r3, #6
 8004286:	f57f af2d 	bpl.w	80040e4 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428a:	f7fd f977 	bl	800157c <HAL_GetTick>
 800428e:	1b00      	subs	r0, r0, r4
 8004290:	2802      	cmp	r0, #2
 8004292:	d9f6      	bls.n	8004282 <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 8004294:	2003      	movs	r0, #3
}
 8004296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004298:	4d6a      	ldr	r5, [pc, #424]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 800429a:	682b      	ldr	r3, [r5, #0]
 800429c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a0:	602b      	str	r3, [r5, #0]
 80042a2:	682b      	ldr	r3, [r5, #0]
 80042a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80042aa:	f7fd f967 	bl	800157c <HAL_GetTick>
 80042ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042b0:	e004      	b.n	80042bc <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b2:	f7fd f963 	bl	800157c <HAL_GetTick>
 80042b6:	1b80      	subs	r0, r0, r6
 80042b8:	2864      	cmp	r0, #100	@ 0x64
 80042ba:	d8eb      	bhi.n	8004294 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	039f      	lsls	r7, r3, #14
 80042c0:	d4f7      	bmi.n	80042b2 <HAL_RCC_OscConfig+0x31e>
 80042c2:	e69d      	b.n	8004000 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80042c4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80042cc:	f7fd f956 	bl	800157c <HAL_GetTick>
 80042d0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042d2:	e004      	b.n	80042de <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d4:	f7fd f952 	bl	800157c <HAL_GetTick>
 80042d8:	1b80      	subs	r0, r0, r6
 80042da:	2802      	cmp	r0, #2
 80042dc:	d8da      	bhi.n	8004294 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042de:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80042e0:	0799      	lsls	r1, r3, #30
 80042e2:	d4f7      	bmi.n	80042d4 <HAL_RCC_OscConfig+0x340>
 80042e4:	e6dd      	b.n	80040a2 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 80042e6:	682b      	ldr	r3, [r5, #0]
 80042e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042ec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80042ee:	f7fd f945 	bl	800157c <HAL_GetTick>
 80042f2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042f4:	e004      	b.n	8004300 <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042f6:	f7fd f941 	bl	800157c <HAL_GetTick>
 80042fa:	1b80      	subs	r0, r0, r6
 80042fc:	2802      	cmp	r0, #2
 80042fe:	d8c9      	bhi.n	8004294 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004300:	682b      	ldr	r3, [r5, #0]
 8004302:	0498      	lsls	r0, r3, #18
 8004304:	d4f7      	bmi.n	80042f6 <HAL_RCC_OscConfig+0x362>
 8004306:	e6e5      	b.n	80040d4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800430e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004310:	f7fd f934 	bl	800157c <HAL_GetTick>
 8004314:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004316:	e004      	b.n	8004322 <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004318:	f7fd f930 	bl	800157c <HAL_GetTick>
 800431c:	1b80      	subs	r0, r0, r6
 800431e:	2802      	cmp	r0, #2
 8004320:	d8b8      	bhi.n	8004294 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004322:	682b      	ldr	r3, [r5, #0]
 8004324:	05df      	lsls	r7, r3, #23
 8004326:	d4f7      	bmi.n	8004318 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	e6a2      	b.n	8004072 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004332:	f7fd f923 	bl	800157c <HAL_GetTick>
 8004336:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004338:	e004      	b.n	8004344 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433a:	f7fd f91f 	bl	800157c <HAL_GetTick>
 800433e:	1b80      	subs	r0, r0, r6
 8004340:	2802      	cmp	r0, #2
 8004342:	d8a7      	bhi.n	8004294 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	0758      	lsls	r0, r3, #29
 8004348:	d4f7      	bmi.n	800433a <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	e65b      	b.n	8004006 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800434e:	0790      	lsls	r0, r2, #30
 8004350:	f47f af01 	bne.w	8004156 <HAL_RCC_OscConfig+0x1c2>
 8004354:	e6ce      	b.n	80040f4 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004356:	686b      	ldr	r3, [r5, #4]
 8004358:	6922      	ldr	r2, [r4, #16]
 800435a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800435e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004362:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	e64e      	b.n	8004006 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004368:	4a36      	ldr	r2, [pc, #216]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
 800436a:	6a21      	ldr	r1, [r4, #32]
 800436c:	68d3      	ldr	r3, [r2, #12]
 800436e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004372:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004376:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	e67a      	b.n	8004072 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 800437c:	f7fd f8fe 	bl	800157c <HAL_GetTick>
 8004380:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004382:	e004      	b.n	800438e <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004384:	f7fd f8fa 	bl	800157c <HAL_GetTick>
 8004388:	1b80      	subs	r0, r0, r6
 800438a:	2802      	cmp	r0, #2
 800438c:	d882      	bhi.n	8004294 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800438e:	682b      	ldr	r3, [r5, #0]
 8004390:	0199      	lsls	r1, r3, #6
 8004392:	d4f7      	bmi.n	8004384 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004394:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8004396:	4b2c      	ldr	r3, [pc, #176]	@ (8004448 <HAL_RCC_OscConfig+0x4b4>)
 8004398:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800439a:	400b      	ands	r3, r1
 800439c:	4313      	orrs	r3, r2
 800439e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80043a0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80043a4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80043a6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80043a8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80043ac:	3901      	subs	r1, #1
 80043ae:	3b01      	subs	r3, #1
 80043b0:	3a01      	subs	r2, #1
 80043b2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80043b6:	025b      	lsls	r3, r3, #9
 80043b8:	0412      	lsls	r2, r2, #16
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80043c0:	4313      	orrs	r3, r2
 80043c2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80043c4:	3a01      	subs	r2, #1
 80043c6:	430b      	orrs	r3, r1
 80043c8:	0612      	lsls	r2, r2, #24
 80043ca:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80043ce:	4313      	orrs	r3, r2
 80043d0:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80043d2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043da:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80043dc:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80043de:	f36f 03cf 	bfc	r3, #3, #13
 80043e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80043e6:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043e8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80043ea:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80043ec:	f023 030c 	bic.w	r3, r3, #12
 80043f0:	4313      	orrs	r3, r2
 80043f2:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043f4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80043f6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80043f8:	f023 0302 	bic.w	r3, r3, #2
 80043fc:	4313      	orrs	r3, r2
 80043fe:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004400:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004406:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004408:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800440a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800440e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004410:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004412:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004416:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8004418:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004426:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004428:	f7fd f8a8 	bl	800157c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800442c:	4d05      	ldr	r5, [pc, #20]	@ (8004444 <HAL_RCC_OscConfig+0x4b0>)
        tickstart = HAL_GetTick();
 800442e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004430:	682b      	ldr	r3, [r5, #0]
 8004432:	019a      	lsls	r2, r3, #6
 8004434:	f53f ae56 	bmi.w	80040e4 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fd f8a0 	bl	800157c <HAL_GetTick>
 800443c:	1b00      	subs	r0, r0, r4
 800443e:	2802      	cmp	r0, #2
 8004440:	d9f6      	bls.n	8004430 <HAL_RCC_OscConfig+0x49c>
 8004442:	e727      	b.n	8004294 <HAL_RCC_OscConfig+0x300>
 8004444:	58024400 	.word	0x58024400
 8004448:	fffffc0c 	.word	0xfffffc0c
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444c:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800444e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004450:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004452:	f43f aea6 	beq.w	80041a2 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800445c:	428b      	cmp	r3, r1
 800445e:	f47f aea0 	bne.w	80041a2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004462:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004468:	429a      	cmp	r2, r3
 800446a:	f47f ae9a 	bne.w	80041a2 <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800446e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004470:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8004474:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	f47f ae93 	bne.w	80041a2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800447c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800447e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8004482:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	f47f ae8c 	bne.w	80041a2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800448a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800448c:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8004490:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	f47f ae85 	bne.w	80041a2 <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004498:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800449a:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800449e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044a0:	4298      	cmp	r0, r3
 80044a2:	f47f ae7e 	bne.w	80041a2 <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80044a6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80044a8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80044aa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80044ae:	429a      	cmp	r2, r3
 80044b0:	f43f ae18 	beq.w	80040e4 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 80044b4:	4a2d      	ldr	r2, [pc, #180]	@ (800456c <HAL_RCC_OscConfig+0x5d8>)
 80044b6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80044be:	f7fd f85d 	bl	800157c <HAL_GetTick>
 80044c2:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80044c4:	f7fd f85a 	bl	800157c <HAL_GetTick>
 80044c8:	42a8      	cmp	r0, r5
 80044ca:	d0fb      	beq.n	80044c4 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044cc:	4a27      	ldr	r2, [pc, #156]	@ (800456c <HAL_RCC_OscConfig+0x5d8>)
 80044ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80044d0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80044d2:	f36f 03cf 	bfc	r3, #3, #13
 80044d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80044da:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80044dc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044e4:	e5fe      	b.n	80040e4 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80044f2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f4:	e576      	b.n	8003fe4 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f6:	4d1d      	ldr	r5, [pc, #116]	@ (800456c <HAL_RCC_OscConfig+0x5d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044fc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	672b      	str	r3, [r5, #112]	@ 0x70
 8004504:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004506:	f023 0304 	bic.w	r3, r3, #4
 800450a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800450c:	f7fd f836 	bl	800157c <HAL_GetTick>
 8004510:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004512:	e005      	b.n	8004520 <HAL_RCC_OscConfig+0x58c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7fd f832 	bl	800157c <HAL_GetTick>
 8004518:	1b80      	subs	r0, r0, r6
 800451a:	42b8      	cmp	r0, r7
 800451c:	f63f aeba 	bhi.w	8004294 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004520:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004522:	0798      	lsls	r0, r3, #30
 8004524:	d4f6      	bmi.n	8004514 <HAL_RCC_OscConfig+0x580>
 8004526:	e5d9      	b.n	80040dc <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004528:	68eb      	ldr	r3, [r5, #12]
 800452a:	6a22      	ldr	r2, [r4, #32]
 800452c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8004530:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004534:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	e59b      	b.n	8004072 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800453a:	4a0c      	ldr	r2, [pc, #48]	@ (800456c <HAL_RCC_OscConfig+0x5d8>)
 800453c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004544:	e67d      	b.n	8004242 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004546:	4a09      	ldr	r2, [pc, #36]	@ (800456c <HAL_RCC_OscConfig+0x5d8>)
 8004548:	6853      	ldr	r3, [r2, #4]
 800454a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800454e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004552:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	e58c      	b.n	8004072 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004558:	f042 0204 	orr.w	r2, r2, #4
 800455c:	671a      	str	r2, [r3, #112]	@ 0x70
 800455e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004566:	e66c      	b.n	8004242 <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 8004568:	2001      	movs	r0, #1
}
 800456a:	4770      	bx	lr
 800456c:	58024400 	.word	0x58024400

08004570 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004570:	4a3f      	ldr	r2, [pc, #252]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x100>)
 8004572:	6913      	ldr	r3, [r2, #16]
 8004574:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004578:	2b10      	cmp	r3, #16
 800457a:	d04f      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0xac>
 800457c:	2b18      	cmp	r3, #24
 800457e:	d00a      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0x26>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d14d      	bne.n	8004620 <HAL_RCC_GetSysClockFreq+0xb0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004584:	6813      	ldr	r3, [r2, #0]
 8004586:	0699      	lsls	r1, r3, #26
 8004588:	d54c      	bpl.n	8004624 <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800458a:	6813      	ldr	r3, [r2, #0]
 800458c:	4839      	ldr	r0, [pc, #228]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x104>)
 800458e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004592:	40d8      	lsrs	r0, r3
 8004594:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004596:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8004598:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800459a:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800459c:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 800459e:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045a2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80045a4:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80045a8:	d036      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0xa8>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045aa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045ae:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045b2:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045b6:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045ba:	fb05 f303 	mul.w	r3, r5, r3
        switch (pllsource)
 80045be:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045c4:	ee06 3a90 	vmov	s13, r3
 80045c8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 80045cc:	d002      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x64>
 80045ce:	2902      	cmp	r1, #2
 80045d0:	d048      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0xf4>
 80045d2:	b349      	cbz	r1, 8004628 <HAL_RCC_GetSysClockFreq+0xb8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004678 <HAL_RCC_GetSysClockFreq+0x108>
 80045d8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80045dc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a10 	vmov	s14, r3
 80045e6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80045ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80045ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 80045f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80045f6:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80045fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x100>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004602:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004604:	ee07 3a90 	vmov	s15, r3
 8004608:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800460c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004614:	ee17 0a90 	vmov	r0, s15
}
 8004618:	bc30      	pop	{r4, r5}
 800461a:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800461c:	4817      	ldr	r0, [pc, #92]	@ (800467c <HAL_RCC_GetSysClockFreq+0x10c>)
 800461e:	4770      	bx	lr
      sysclockfreq = CSI_VALUE;
 8004620:	4817      	ldr	r0, [pc, #92]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x110>)
 8004622:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004624:	4813      	ldr	r0, [pc, #76]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x104>)
}
 8004626:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004628:	6813      	ldr	r3, [r2, #0]
 800462a:	069b      	lsls	r3, r3, #26
 800462c:	d51d      	bpl.n	800466a <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800462e:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004630:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004634:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004636:	490f      	ldr	r1, [pc, #60]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x104>)
 8004638:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800463c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004640:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004642:	ee06 3a10 	vmov	s12, r3
 8004646:	ee05 1a90 	vmov	s11, r1
 800464a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800464e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004652:	ee36 6a07 	vadd.f32	s12, s12, s14
 8004656:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800465a:	ee76 7a26 	vadd.f32	s15, s12, s13
 800465e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004662:	e7ca      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x8a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004664:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004684 <HAL_RCC_GetSysClockFreq+0x114>
 8004668:	e7b6      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x68>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800466a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8004688 <HAL_RCC_GetSysClockFreq+0x118>
 800466e:	e7b3      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x68>
 8004670:	58024400 	.word	0x58024400
 8004674:	03d09000 	.word	0x03d09000
 8004678:	4a742400 	.word	0x4a742400
 800467c:	017d7840 	.word	0x017d7840
 8004680:	003d0900 	.word	0x003d0900
 8004684:	4bbebc20 	.word	0x4bbebc20
 8004688:	4c742400 	.word	0x4c742400

0800468c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800468c:	2800      	cmp	r0, #0
 800468e:	f000 810e 	beq.w	80048ae <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004692:	4a8d      	ldr	r2, [pc, #564]	@ (80048c8 <HAL_RCC_ClockConfig+0x23c>)
 8004694:	6813      	ldr	r3, [r2, #0]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	428b      	cmp	r3, r1
{
 800469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a0:	4604      	mov	r4, r0
 80046a2:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	d20c      	bcs.n	80046c0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	f023 030f 	bic.w	r3, r3, #15
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b0:	6813      	ldr	r3, [r2, #0]
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	428b      	cmp	r3, r1
 80046b8:	d002      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80046ba:	2001      	movs	r0, #1
}
 80046bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	0758      	lsls	r0, r3, #29
 80046c4:	d50b      	bpl.n	80046de <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046c6:	4981      	ldr	r1, [pc, #516]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 80046c8:	6920      	ldr	r0, [r4, #16]
 80046ca:	698a      	ldr	r2, [r1, #24]
 80046cc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80046d0:	4290      	cmp	r0, r2
 80046d2:	d904      	bls.n	80046de <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046d4:	698a      	ldr	r2, [r1, #24]
 80046d6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80046da:	4302      	orrs	r2, r0
 80046dc:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046de:	0719      	lsls	r1, r3, #28
 80046e0:	d50b      	bpl.n	80046fa <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046e2:	497a      	ldr	r1, [pc, #488]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 80046e4:	6960      	ldr	r0, [r4, #20]
 80046e6:	69ca      	ldr	r2, [r1, #28]
 80046e8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80046ec:	4290      	cmp	r0, r2
 80046ee:	d904      	bls.n	80046fa <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046f0:	69ca      	ldr	r2, [r1, #28]
 80046f2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80046f6:	4302      	orrs	r2, r0
 80046f8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fa:	06da      	lsls	r2, r3, #27
 80046fc:	d50b      	bpl.n	8004716 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046fe:	4973      	ldr	r1, [pc, #460]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 8004700:	69a0      	ldr	r0, [r4, #24]
 8004702:	69ca      	ldr	r2, [r1, #28]
 8004704:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004708:	4290      	cmp	r0, r2
 800470a:	d904      	bls.n	8004716 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800470c:	69ca      	ldr	r2, [r1, #28]
 800470e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004712:	4302      	orrs	r2, r0
 8004714:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004716:	069f      	lsls	r7, r3, #26
 8004718:	d50b      	bpl.n	8004732 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800471a:	496c      	ldr	r1, [pc, #432]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 800471c:	69e0      	ldr	r0, [r4, #28]
 800471e:	6a0a      	ldr	r2, [r1, #32]
 8004720:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004724:	4290      	cmp	r0, r2
 8004726:	d904      	bls.n	8004732 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004728:	6a0a      	ldr	r2, [r1, #32]
 800472a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800472e:	4302      	orrs	r2, r0
 8004730:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004732:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004734:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004738:	f140 80ab 	bpl.w	8004892 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800473c:	4e63      	ldr	r6, [pc, #396]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 800473e:	68e0      	ldr	r0, [r4, #12]
 8004740:	69b1      	ldr	r1, [r6, #24]
 8004742:	f001 010f 	and.w	r1, r1, #15
 8004746:	4288      	cmp	r0, r1
 8004748:	d904      	bls.n	8004754 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474a:	69b1      	ldr	r1, [r6, #24]
 800474c:	f021 010f 	bic.w	r1, r1, #15
 8004750:	4301      	orrs	r1, r0
 8004752:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004754:	2a00      	cmp	r2, #0
 8004756:	d030      	beq.n	80047ba <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004758:	4a5c      	ldr	r2, [pc, #368]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 800475a:	68a1      	ldr	r1, [r4, #8]
 800475c:	6993      	ldr	r3, [r2, #24]
 800475e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004762:	430b      	orrs	r3, r1
 8004764:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004766:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004768:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476a:	2902      	cmp	r1, #2
 800476c:	f000 80a1 	beq.w	80048b2 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004770:	2903      	cmp	r1, #3
 8004772:	f000 8098 	beq.w	80048a6 <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004776:	2901      	cmp	r1, #1
 8004778:	f000 80a1 	beq.w	80048be <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800477c:	075f      	lsls	r7, r3, #29
 800477e:	d59c      	bpl.n	80046ba <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004780:	4e52      	ldr	r6, [pc, #328]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004782:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004786:	6933      	ldr	r3, [r6, #16]
 8004788:	f023 0307 	bic.w	r3, r3, #7
 800478c:	430b      	orrs	r3, r1
 800478e:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8004790:	f7fc fef4 	bl	800157c <HAL_GetTick>
 8004794:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	e005      	b.n	80047a4 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004798:	f7fc fef0 	bl	800157c <HAL_GetTick>
 800479c:	1bc0      	subs	r0, r0, r7
 800479e:	4540      	cmp	r0, r8
 80047a0:	f200 808b 	bhi.w	80048ba <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a4:	6933      	ldr	r3, [r6, #16]
 80047a6:	6862      	ldr	r2, [r4, #4]
 80047a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047ac:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80047b0:	d1f2      	bne.n	8004798 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	079e      	lsls	r6, r3, #30
 80047b6:	d506      	bpl.n	80047c6 <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047b8:	68e0      	ldr	r0, [r4, #12]
 80047ba:	4944      	ldr	r1, [pc, #272]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 80047bc:	698a      	ldr	r2, [r1, #24]
 80047be:	f002 020f 	and.w	r2, r2, #15
 80047c2:	4290      	cmp	r0, r2
 80047c4:	d369      	bcc.n	800489a <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047c6:	4940      	ldr	r1, [pc, #256]	@ (80048c8 <HAL_RCC_ClockConfig+0x23c>)
 80047c8:	680a      	ldr	r2, [r1, #0]
 80047ca:	f002 020f 	and.w	r2, r2, #15
 80047ce:	42aa      	cmp	r2, r5
 80047d0:	d90a      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	680a      	ldr	r2, [r1, #0]
 80047d4:	f022 020f 	bic.w	r2, r2, #15
 80047d8:	432a      	orrs	r2, r5
 80047da:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047dc:	680a      	ldr	r2, [r1, #0]
 80047de:	f002 020f 	and.w	r2, r2, #15
 80047e2:	42aa      	cmp	r2, r5
 80047e4:	f47f af69 	bne.w	80046ba <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047e8:	0758      	lsls	r0, r3, #29
 80047ea:	d50b      	bpl.n	8004804 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047ec:	4937      	ldr	r1, [pc, #220]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 80047ee:	6920      	ldr	r0, [r4, #16]
 80047f0:	698a      	ldr	r2, [r1, #24]
 80047f2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80047f6:	4290      	cmp	r0, r2
 80047f8:	d204      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047fa:	698a      	ldr	r2, [r1, #24]
 80047fc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004800:	4302      	orrs	r2, r0
 8004802:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	0719      	lsls	r1, r3, #28
 8004806:	d50b      	bpl.n	8004820 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004808:	4930      	ldr	r1, [pc, #192]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 800480a:	6960      	ldr	r0, [r4, #20]
 800480c:	69ca      	ldr	r2, [r1, #28]
 800480e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8004812:	4290      	cmp	r0, r2
 8004814:	d204      	bcs.n	8004820 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004816:	69ca      	ldr	r2, [r1, #28]
 8004818:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800481c:	4302      	orrs	r2, r0
 800481e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004820:	06da      	lsls	r2, r3, #27
 8004822:	d50b      	bpl.n	800483c <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004824:	4929      	ldr	r1, [pc, #164]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 8004826:	69a0      	ldr	r0, [r4, #24]
 8004828:	69ca      	ldr	r2, [r1, #28]
 800482a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800482e:	4290      	cmp	r0, r2
 8004830:	d204      	bcs.n	800483c <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004832:	69ca      	ldr	r2, [r1, #28]
 8004834:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004838:	4302      	orrs	r2, r0
 800483a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800483c:	069b      	lsls	r3, r3, #26
 800483e:	d50b      	bpl.n	8004858 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004840:	4a22      	ldr	r2, [pc, #136]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 8004842:	69e1      	ldr	r1, [r4, #28]
 8004844:	6a13      	ldr	r3, [r2, #32]
 8004846:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800484a:	4299      	cmp	r1, r3
 800484c:	d204      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800484e:	6a13      	ldr	r3, [r2, #32]
 8004850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004854:	430b      	orrs	r3, r1
 8004856:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004858:	f7ff fe8a 	bl	8004570 <HAL_RCC_GetSysClockFreq>
 800485c:	4a1b      	ldr	r2, [pc, #108]	@ (80048cc <HAL_RCC_ClockConfig+0x240>)
 800485e:	4603      	mov	r3, r0
 8004860:	481b      	ldr	r0, [pc, #108]	@ (80048d0 <HAL_RCC_ClockConfig+0x244>)
 8004862:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004864:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004866:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800486a:	4d1a      	ldr	r5, [pc, #104]	@ (80048d4 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800486c:	f002 020f 	and.w	r2, r2, #15
 8004870:	4c19      	ldr	r4, [pc, #100]	@ (80048d8 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004872:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004874:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004876:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800487a:	4818      	ldr	r0, [pc, #96]	@ (80048dc <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800487c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004880:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8004882:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8004884:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004886:	40d3      	lsrs	r3, r2
 8004888:	6023      	str	r3, [r4, #0]
}
 800488a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800488e:	f7fc be13 	b.w	80014b8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004892:	2a00      	cmp	r2, #0
 8004894:	f47f af60 	bne.w	8004758 <HAL_RCC_ClockConfig+0xcc>
 8004898:	e795      	b.n	80047c6 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489a:	698a      	ldr	r2, [r1, #24]
 800489c:	f022 020f 	bic.w	r2, r2, #15
 80048a0:	4302      	orrs	r2, r0
 80048a2:	618a      	str	r2, [r1, #24]
 80048a4:	e78f      	b.n	80047c6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048a6:	019a      	lsls	r2, r3, #6
 80048a8:	f53f af6a 	bmi.w	8004780 <HAL_RCC_ClockConfig+0xf4>
 80048ac:	e705      	b.n	80046ba <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80048ae:	2001      	movs	r0, #1
}
 80048b0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048b2:	0398      	lsls	r0, r3, #14
 80048b4:	f53f af64 	bmi.w	8004780 <HAL_RCC_ClockConfig+0xf4>
 80048b8:	e6ff      	b.n	80046ba <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80048ba:	2003      	movs	r0, #3
 80048bc:	e6fe      	b.n	80046bc <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048be:	05db      	lsls	r3, r3, #23
 80048c0:	f53f af5e 	bmi.w	8004780 <HAL_RCC_ClockConfig+0xf4>
 80048c4:	e6f9      	b.n	80046ba <HAL_RCC_ClockConfig+0x2e>
 80048c6:	bf00      	nop
 80048c8:	52002000 	.word	0x52002000
 80048cc:	58024400 	.word	0x58024400
 80048d0:	08062b80 	.word	0x08062b80
 80048d4:	240001a4 	.word	0x240001a4
 80048d8:	240001a0 	.word	0x240001a0
 80048dc:	240001ac 	.word	0x240001ac

080048e0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e0:	4a18      	ldr	r2, [pc, #96]	@ (8004944 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e4:	6913      	ldr	r3, [r2, #16]
 80048e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d024      	beq.n	8004938 <HAL_RCC_GetHCLKFreq+0x58>
 80048ee:	2b18      	cmp	r3, #24
 80048f0:	d009      	beq.n	8004906 <HAL_RCC_GetHCLKFreq+0x26>
 80048f2:	bb1b      	cbnz	r3, 800493c <HAL_RCC_GetHCLKFreq+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048f4:	6813      	ldr	r3, [r2, #0]
 80048f6:	069b      	lsls	r3, r3, #26
 80048f8:	d522      	bpl.n	8004940 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <HAL_RCC_GetHCLKFreq+0x68>)
 80048fe:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004902:	40d3      	lsrs	r3, r2
 8004904:	e002      	b.n	800490c <HAL_RCC_GetHCLKFreq+0x2c>
 8004906:	f7ff fad3 	bl	8003eb0 <HAL_RCC_GetSysClockFreq.part.0>
 800490a:	4603      	mov	r3, r0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800490c:	490d      	ldr	r1, [pc, #52]	@ (8004944 <HAL_RCC_GetHCLKFreq+0x64>)
 800490e:	480f      	ldr	r0, [pc, #60]	@ (800494c <HAL_RCC_GetHCLKFreq+0x6c>)
 8004910:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004912:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004914:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004918:	4c0d      	ldr	r4, [pc, #52]	@ (8004950 <HAL_RCC_GetHCLKFreq+0x70>)
 800491a:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800491e:	4d0d      	ldr	r5, [pc, #52]	@ (8004954 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004920:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004922:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004924:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004928:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800492c:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800492e:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8004932:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004934:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8004936:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004938:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <HAL_RCC_GetHCLKFreq+0x78>)
 800493a:	e7e7      	b.n	800490c <HAL_RCC_GetHCLKFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800493c:	4b07      	ldr	r3, [pc, #28]	@ (800495c <HAL_RCC_GetHCLKFreq+0x7c>)
 800493e:	e7e5      	b.n	800490c <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004940:	4b01      	ldr	r3, [pc, #4]	@ (8004948 <HAL_RCC_GetHCLKFreq+0x68>)
 8004942:	e7e3      	b.n	800490c <HAL_RCC_GetHCLKFreq+0x2c>
 8004944:	58024400 	.word	0x58024400
 8004948:	03d09000 	.word	0x03d09000
 800494c:	08062b80 	.word	0x08062b80
 8004950:	240001a0 	.word	0x240001a0
 8004954:	240001a4 	.word	0x240001a4
 8004958:	017d7840 	.word	0x017d7840
 800495c:	003d0900 	.word	0x003d0900

08004960 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004960:	4a1c      	ldr	r2, [pc, #112]	@ (80049d4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004962:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004964:	6913      	ldr	r3, [r2, #16]
 8004966:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800496a:	2b10      	cmp	r3, #16
 800496c:	d02b      	beq.n	80049c6 <HAL_RCC_GetPCLK1Freq+0x66>
 800496e:	2b18      	cmp	r3, #24
 8004970:	d009      	beq.n	8004986 <HAL_RCC_GetPCLK1Freq+0x26>
 8004972:	bb53      	cbnz	r3, 80049ca <HAL_RCC_GetPCLK1Freq+0x6a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004974:	6813      	ldr	r3, [r2, #0]
 8004976:	069b      	lsls	r3, r3, #26
 8004978:	d529      	bpl.n	80049ce <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	4b16      	ldr	r3, [pc, #88]	@ (80049d8 <HAL_RCC_GetPCLK1Freq+0x78>)
 800497e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004982:	40d3      	lsrs	r3, r2
 8004984:	e002      	b.n	800498c <HAL_RCC_GetPCLK1Freq+0x2c>
 8004986:	f7ff fa93 	bl	8003eb0 <HAL_RCC_GetSysClockFreq.part.0>
 800498a:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800498c:	4a11      	ldr	r2, [pc, #68]	@ (80049d4 <HAL_RCC_GetPCLK1Freq+0x74>)
 800498e:	4913      	ldr	r1, [pc, #76]	@ (80049dc <HAL_RCC_GetPCLK1Freq+0x7c>)
 8004990:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8004992:	4d13      	ldr	r5, [pc, #76]	@ (80049e0 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004994:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004998:	4c12      	ldr	r4, [pc, #72]	@ (80049e4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800499a:	5c08      	ldrb	r0, [r1, r0]
 800499c:	f000 001f 	and.w	r0, r0, #31
 80049a0:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049a2:	6990      	ldr	r0, [r2, #24]
 80049a4:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 80049a8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049aa:	5c08      	ldrb	r0, [r1, r0]
 80049ac:	f000 001f 	and.w	r0, r0, #31
 80049b0:	40c3      	lsrs	r3, r0
 80049b2:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049b4:	69d2      	ldr	r2, [r2, #28]
 80049b6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80049ba:	5c88      	ldrb	r0, [r1, r2]
 80049bc:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80049c0:	fa23 f000 	lsr.w	r0, r3, r0
 80049c4:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049c6:	4b08      	ldr	r3, [pc, #32]	@ (80049e8 <HAL_RCC_GetPCLK1Freq+0x88>)
 80049c8:	e7e0      	b.n	800498c <HAL_RCC_GetPCLK1Freq+0x2c>
      sysclockfreq = CSI_VALUE;
 80049ca:	4b08      	ldr	r3, [pc, #32]	@ (80049ec <HAL_RCC_GetPCLK1Freq+0x8c>)
 80049cc:	e7de      	b.n	800498c <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049ce:	4b02      	ldr	r3, [pc, #8]	@ (80049d8 <HAL_RCC_GetPCLK1Freq+0x78>)
 80049d0:	e7dc      	b.n	800498c <HAL_RCC_GetPCLK1Freq+0x2c>
 80049d2:	bf00      	nop
 80049d4:	58024400 	.word	0x58024400
 80049d8:	03d09000 	.word	0x03d09000
 80049dc:	08062b80 	.word	0x08062b80
 80049e0:	240001a4 	.word	0x240001a4
 80049e4:	240001a0 	.word	0x240001a0
 80049e8:	017d7840 	.word	0x017d7840
 80049ec:	003d0900 	.word	0x003d0900

080049f0 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049f2:	4c36      	ldr	r4, [pc, #216]	@ (8004acc <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 80049f4:	4606      	mov	r6, r0
 80049f6:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049fe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a00:	f7fc fdbc 	bl	800157c <HAL_GetTick>
 8004a04:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a06:	e004      	b.n	8004a12 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a08:	f7fc fdb8 	bl	800157c <HAL_GetTick>
 8004a0c:	1b40      	subs	r0, r0, r5
 8004a0e:	2802      	cmp	r0, #2
 8004a10:	d856      	bhi.n	8004ac0 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	011a      	lsls	r2, r3, #4
 8004a16:	d4f7      	bmi.n	8004a08 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a18:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004a1a:	6832      	ldr	r2, [r6, #0]
 8004a1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004a20:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8004a24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a26:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	3a01      	subs	r2, #1
 8004a2e:	025b      	lsls	r3, r3, #9
 8004a30:	0412      	lsls	r2, r2, #16
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	6872      	ldr	r2, [r6, #4]
 8004a3c:	3a01      	subs	r2, #1
 8004a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a42:	4313      	orrs	r3, r2
 8004a44:	6932      	ldr	r2, [r6, #16]
 8004a46:	3a01      	subs	r2, #1
 8004a48:	0612      	lsls	r2, r2, #24
 8004a4a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a52:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004a54:	6972      	ldr	r2, [r6, #20]
 8004a56:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a5e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004a60:	69b2      	ldr	r2, [r6, #24]
 8004a62:	f023 0320 	bic.w	r3, r3, #32
 8004a66:	4313      	orrs	r3, r2
 8004a68:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a6a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a72:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004a74:	69f2      	ldr	r2, [r6, #28]
 8004a76:	f36f 03cf 	bfc	r3, #3, #13
 8004a7a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004a7e:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a80:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004a82:	f043 0310 	orr.w	r3, r3, #16
 8004a86:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a88:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004a8a:	b1df      	cbz	r7, 8004ac4 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a8c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a8e:	bf0c      	ite	eq
 8004a90:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a94:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8004a98:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a9a:	4c0c      	ldr	r4, [pc, #48]	@ (8004acc <RCCEx_PLL2_Config.part.0+0xdc>)
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aa2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa4:	f7fc fd6a 	bl	800157c <HAL_GetTick>
 8004aa8:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004aaa:	e004      	b.n	8004ab6 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004aac:	f7fc fd66 	bl	800157c <HAL_GetTick>
 8004ab0:	1b40      	subs	r0, r0, r5
 8004ab2:	2802      	cmp	r0, #2
 8004ab4:	d804      	bhi.n	8004ac0 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	d5f7      	bpl.n	8004aac <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8004abc:	2000      	movs	r0, #0
}
 8004abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004ac0:	2003      	movs	r0, #3
}
 8004ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ac4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ac8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004aca:	e7e6      	b.n	8004a9a <RCCEx_PLL2_Config.part.0+0xaa>
 8004acc:	58024400 	.word	0x58024400

08004ad0 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ad2:	4c36      	ldr	r4, [pc, #216]	@ (8004bac <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ade:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fc fd4c 	bl	800157c <HAL_GetTick>
 8004ae4:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ae6:	e004      	b.n	8004af2 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ae8:	f7fc fd48 	bl	800157c <HAL_GetTick>
 8004aec:	1b40      	subs	r0, r0, r5
 8004aee:	2802      	cmp	r0, #2
 8004af0:	d856      	bhi.n	8004ba0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	009a      	lsls	r2, r3, #2
 8004af6:	d4f7      	bmi.n	8004ae8 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004af8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004afa:	6832      	ldr	r2, [r6, #0]
 8004afc:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8004b00:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004b04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b06:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	3a01      	subs	r2, #1
 8004b0e:	025b      	lsls	r3, r3, #9
 8004b10:	0412      	lsls	r2, r2, #16
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	6872      	ldr	r2, [r6, #4]
 8004b1c:	3a01      	subs	r2, #1
 8004b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b22:	4313      	orrs	r3, r2
 8004b24:	6932      	ldr	r2, [r6, #16]
 8004b26:	3a01      	subs	r2, #1
 8004b28:	0612      	lsls	r2, r2, #24
 8004b2a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b32:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004b34:	6972      	ldr	r2, [r6, #20]
 8004b36:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004b40:	69b2      	ldr	r2, [r6, #24]
 8004b42:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b46:	4313      	orrs	r3, r2
 8004b48:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b4a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b50:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b52:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004b54:	69f2      	ldr	r2, [r6, #28]
 8004b56:	f36f 03cf 	bfc	r3, #3, #13
 8004b5a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004b5e:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b60:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b66:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8004b6a:	b1df      	cbz	r7, 8004ba4 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b6c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b6e:	bf0c      	ite	eq
 8004b70:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b74:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8004b78:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b7a:	4c0c      	ldr	r4, [pc, #48]	@ (8004bac <RCCEx_PLL3_Config.part.0+0xdc>)
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b82:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b84:	f7fc fcfa 	bl	800157c <HAL_GetTick>
 8004b88:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b8a:	e004      	b.n	8004b96 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b8c:	f7fc fcf6 	bl	800157c <HAL_GetTick>
 8004b90:	1b40      	subs	r0, r0, r5
 8004b92:	2802      	cmp	r0, #2
 8004b94:	d804      	bhi.n	8004ba0 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	d5f7      	bpl.n	8004b8c <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8004b9c:	2000      	movs	r0, #0
}
 8004b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8004ba0:	2003      	movs	r0, #3
}
 8004ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ba4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ba8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004baa:	e7e6      	b.n	8004b7a <RCCEx_PLL3_Config.part.0+0xaa>
 8004bac:	58024400 	.word	0x58024400

08004bb0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bb4:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8004bb8:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bba:	011d      	lsls	r5, r3, #4
 8004bbc:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8004bc0:	d524      	bpl.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004bc2:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8004bc4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004bc8:	f000 85df 	beq.w	800578a <HAL_RCCEx_PeriphCLKConfig+0xbda>
 8004bcc:	f200 86a8 	bhi.w	8005920 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	f000 85f6 	beq.w	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xc12>
 8004bd6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004bda:	f040 86a5 	bne.w	8005928 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bde:	49a9      	ldr	r1, [pc, #676]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004be0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004be2:	f001 0103 	and.w	r1, r1, #3
 8004be6:	2903      	cmp	r1, #3
 8004be8:	f000 869e 	beq.w	8005928 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8004bec:	2102      	movs	r1, #2
 8004bee:	3008      	adds	r0, #8
 8004bf0:	f7ff fefe 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8004bf4:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bf6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004bfa:	b93e      	cbnz	r6, 8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004bfc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8004bfe:	4da1      	ldr	r5, [pc, #644]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c00:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c02:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8004c04:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8004c08:	4301      	orrs	r1, r0
 8004c0a:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c0c:	05d8      	lsls	r0, r3, #23
 8004c0e:	d50a      	bpl.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c10:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004c12:	2904      	cmp	r1, #4
 8004c14:	d806      	bhi.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004c16:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004c1a:	03ff      	.short	0x03ff
 8004c1c:	0582056d 	.word	0x0582056d
 8004c20:	04040404 	.word	0x04040404
      status = ret;
 8004c24:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004c26:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004c28:	0599      	lsls	r1, r3, #22
 8004c2a:	d524      	bpl.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8004c2c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004c2e:	2980      	cmp	r1, #128	@ 0x80
 8004c30:	f000 854b 	beq.w	80056ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004c34:	f200 8687 	bhi.w	8005946 <HAL_RCCEx_PeriphCLKConfig+0xd96>
 8004c38:	2900      	cmp	r1, #0
 8004c3a:	f000 85bb 	beq.w	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8004c3e:	2940      	cmp	r1, #64	@ 0x40
 8004c40:	f040 8688 	bne.w	8005954 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c44:	498f      	ldr	r1, [pc, #572]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c46:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004c48:	f001 0103 	and.w	r1, r1, #3
 8004c4c:	2903      	cmp	r1, #3
 8004c4e:	f000 8681 	beq.w	8005954 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 8004c52:	2100      	movs	r1, #0
 8004c54:	f104 0008 	add.w	r0, r4, #8
 8004c58:	f7ff feca 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8004c5c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c5e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	f040 8543 	bne.w	80056ee <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c68:	4f86      	ldr	r7, [pc, #536]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c6a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004c6c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c6e:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8004c72:	4301      	orrs	r1, r0
 8004c74:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c76:	055f      	lsls	r7, r3, #21
 8004c78:	d528      	bpl.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c7a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8004c7e:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8004c82:	f000 855c 	beq.w	800573e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004c86:	f200 8652 	bhi.w	800592e <HAL_RCCEx_PeriphCLKConfig+0xd7e>
 8004c8a:	2900      	cmp	r1, #0
 8004c8c:	f000 858b 	beq.w	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004c90:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8004c94:	f040 8653 	bne.w	800593e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c98:	497a      	ldr	r1, [pc, #488]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004c9a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004c9c:	f001 0103 	and.w	r1, r1, #3
 8004ca0:	2903      	cmp	r1, #3
 8004ca2:	f000 864c 	beq.w	800593e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	f104 0008 	add.w	r0, r4, #8
 8004cac:	f7ff fea0 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8004cb0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004cb2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004cb6:	2d00      	cmp	r5, #0
 8004cb8:	f040 8553 	bne.w	8005762 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004cbc:	4f71      	ldr	r7, [pc, #452]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cbe:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8004cc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004cc4:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8004cc8:	4301      	orrs	r1, r0
 8004cca:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004ccc:	0518      	lsls	r0, r3, #20
 8004cce:	d528      	bpl.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->Sai4BClockSelection)
 8004cd0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8004cd4:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8004cd8:	f000 8546 	beq.w	8005768 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
 8004cdc:	f200 8614 	bhi.w	8005908 <HAL_RCCEx_PeriphCLKConfig+0xd58>
 8004ce0:	2900      	cmp	r1, #0
 8004ce2:	f000 84d6 	beq.w	8005692 <HAL_RCCEx_PeriphCLKConfig+0xae2>
 8004ce6:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8004cea:	f040 8615 	bne.w	8005918 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cee:	4965      	ldr	r1, [pc, #404]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cf0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004cf2:	f001 0103 	and.w	r1, r1, #3
 8004cf6:	2903      	cmp	r1, #3
 8004cf8:	f000 860e 	beq.w	8005918 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f104 0008 	add.w	r0, r4, #8
 8004d02:	f7ff fe75 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8004d06:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d08:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004d0c:	2d00      	cmp	r5, #0
 8004d0e:	f040 84c8 	bne.w	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004d12:	4f5c      	ldr	r7, [pc, #368]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d14:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8004d18:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d1a:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 8004d1e:	4301      	orrs	r1, r0
 8004d20:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d22:	0199      	lsls	r1, r3, #6
 8004d24:	d518      	bpl.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    switch (PeriphClkInit->QspiClockSelection)
 8004d26:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004d28:	2920      	cmp	r1, #32
 8004d2a:	f000 8434 	beq.w	8005596 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
 8004d2e:	f200 8615 	bhi.w	800595c <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8004d32:	b139      	cbz	r1, 8004d44 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8004d34:	2910      	cmp	r1, #16
 8004d36:	f040 8614 	bne.w	8005962 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d3a:	4852      	ldr	r0, [pc, #328]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d3c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004d3e:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004d42:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	f040 83bf 	bne.w	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d4a:	4f4e      	ldr	r7, [pc, #312]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d4c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004d4e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004d50:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8004d54:	4301      	orrs	r1, r0
 8004d56:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d58:	04df      	lsls	r7, r3, #19
 8004d5a:	d526      	bpl.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d5c:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8004d5e:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8004d62:	f000 84a1 	beq.w	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 8004d66:	f200 85c3 	bhi.w	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
 8004d6a:	2900      	cmp	r1, #0
 8004d6c:	f000 8486 	beq.w	800567c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004d70:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004d74:	f040 85c4 	bne.w	8005900 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d78:	4942      	ldr	r1, [pc, #264]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d7a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004d7c:	f001 0103 	and.w	r1, r1, #3
 8004d80:	2903      	cmp	r1, #3
 8004d82:	f000 85bd 	beq.w	8005900 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 8004d86:	2100      	movs	r1, #0
 8004d88:	f104 0008 	add.w	r0, r4, #8
 8004d8c:	f7ff fe30 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8004d90:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d92:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004d96:	2d00      	cmp	r5, #0
 8004d98:	f040 8478 	bne.w	800568c <HAL_RCCEx_PeriphCLKConfig+0xadc>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d9c:	4f39      	ldr	r7, [pc, #228]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d9e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004da0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004da2:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004da6:	4301      	orrs	r1, r0
 8004da8:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004daa:	0498      	lsls	r0, r3, #18
 8004dac:	d524      	bpl.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004dae:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8004db0:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8004db4:	f000 8415 	beq.w	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004db8:	f200 8556 	bhi.w	8005868 <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 8004dbc:	b191      	cbz	r1, 8004de4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004dbe:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8004dc2:	f040 855b 	bne.w	800587c <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dc6:	492f      	ldr	r1, [pc, #188]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004dc8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004dca:	f001 0103 	and.w	r1, r1, #3
 8004dce:	2903      	cmp	r1, #3
 8004dd0:	f000 8554 	beq.w	800587c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	f104 0008 	add.w	r0, r4, #8
 8004dda:	f7ff fe09 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8004dde:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004de0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004de4:	2d00      	cmp	r5, #0
 8004de6:	f040 838f 	bne.w	8005508 <HAL_RCCEx_PeriphCLKConfig+0x958>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004dea:	4f26      	ldr	r7, [pc, #152]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004dec:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8004dee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004df0:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8004df4:	4301      	orrs	r1, r0
 8004df6:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004df8:	0459      	lsls	r1, r3, #17
 8004dfa:	d526      	bpl.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 8004dfc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8004e00:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004e04:	f000 8426 	beq.w	8005654 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004e08:	f200 854a 	bhi.w	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
 8004e0c:	b191      	cbz	r1, 8004e34 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004e0e:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8004e12:	f040 854f 	bne.w	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd04>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e16:	491b      	ldr	r1, [pc, #108]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e18:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004e1a:	f001 0103 	and.w	r1, r1, #3
 8004e1e:	2903      	cmp	r1, #3
 8004e20:	f000 8548 	beq.w	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8004e24:	2101      	movs	r1, #1
 8004e26:	f104 0008 	add.w	r0, r4, #8
 8004e2a:	f7ff fde1 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8004e2e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e30:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004e34:	2d00      	cmp	r5, #0
 8004e36:	f040 835b 	bne.w	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e3a:	4f12      	ldr	r7, [pc, #72]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e3c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8004e40:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e42:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8004e46:	4301      	orrs	r1, r0
 8004e48:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e4a:	041f      	lsls	r7, r3, #16
 8004e4c:	d50d      	bpl.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch (PeriphClkInit->FdcanClockSelection)
 8004e4e:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8004e50:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8004e54:	f000 8260 	beq.w	8005318 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8004e58:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004e5c:	f000 8591 	beq.w	8005982 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004e60:	2900      	cmp	r1, #0
 8004e62:	f000 825e 	beq.w	8005322 <HAL_RCCEx_PeriphCLKConfig+0x772>
      status = ret;
 8004e66:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004e68:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e6a:	01d8      	lsls	r0, r3, #7
 8004e6c:	d515      	bpl.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    switch (PeriphClkInit->FmcClockSelection)
 8004e6e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004e70:	2903      	cmp	r1, #3
 8004e72:	f200 85b4 	bhi.w	80059de <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8004e76:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004e7a:	000c      	.short	0x000c
 8004e7c:	03a10007 	.word	0x03a10007
 8004e80:	000c      	.short	0x000c
 8004e82:	bf00      	nop
 8004e84:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e88:	4836      	ldr	r0, [pc, #216]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004e8a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004e8c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8004e90:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	f000 831a 	beq.w	80054cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
      status = ret;
 8004e98:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e9a:	0259      	lsls	r1, r3, #9
 8004e9c:	f100 827a 	bmi.w	8005394 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ea0:	07df      	lsls	r7, r3, #31
 8004ea2:	d52f      	bpl.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (PeriphClkInit->Usart16ClockSelection)
 8004ea4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004ea6:	2928      	cmp	r1, #40	@ 0x28
 8004ea8:	d82a      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004eaa:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004eae:	0257      	.short	0x0257
 8004eb0:	00290029 	.word	0x00290029
 8004eb4:	00290029 	.word	0x00290029
 8004eb8:	00290029 	.word	0x00290029
 8004ebc:	02480029 	.word	0x02480029
 8004ec0:	00290029 	.word	0x00290029
 8004ec4:	00290029 	.word	0x00290029
 8004ec8:	00290029 	.word	0x00290029
 8004ecc:	04b90029 	.word	0x04b90029
 8004ed0:	00290029 	.word	0x00290029
 8004ed4:	00290029 	.word	0x00290029
 8004ed8:	00290029 	.word	0x00290029
 8004edc:	02570029 	.word	0x02570029
 8004ee0:	00290029 	.word	0x00290029
 8004ee4:	00290029 	.word	0x00290029
 8004ee8:	00290029 	.word	0x00290029
 8004eec:	02570029 	.word	0x02570029
 8004ef0:	00290029 	.word	0x00290029
 8004ef4:	00290029 	.word	0x00290029
 8004ef8:	00290029 	.word	0x00290029
 8004efc:	02570029 	.word	0x02570029
      status = ret;
 8004f00:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8004f02:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004f04:	0798      	lsls	r0, r3, #30
 8004f06:	d51e      	bpl.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x396>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004f08:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8004f0a:	2905      	cmp	r1, #5
 8004f0c:	f200 8550 	bhi.w	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8004f10:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004f14:	00060015 	.word	0x00060015
 8004f18:	00150471 	.word	0x00150471
 8004f1c:	00150015 	.word	0x00150015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f20:	4910      	ldr	r1, [pc, #64]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004f22:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004f24:	f001 0103 	and.w	r1, r1, #3
 8004f28:	2903      	cmp	r1, #3
 8004f2a:	f000 8541 	beq.w	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8004f2e:	2101      	movs	r1, #1
 8004f30:	f104 0008 	add.w	r0, r4, #8
 8004f34:	f7ff fd5c 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8004f38:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f3a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f3e:	2d00      	cmp	r5, #0
 8004f40:	f000 82cc 	beq.w	80054dc <HAL_RCCEx_PeriphCLKConfig+0x92c>
      status = ret;
 8004f44:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f46:	0759      	lsls	r1, r3, #29
 8004f48:	d521      	bpl.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004f4a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8004f4e:	2905      	cmp	r1, #5
 8004f50:	f200 852a 	bhi.w	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004f54:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004f58:	00080017 	.word	0x00080017
 8004f5c:	0017043c 	.word	0x0017043c
 8004f60:	00170017 	.word	0x00170017
 8004f64:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f68:	49ae      	ldr	r1, [pc, #696]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004f6a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004f6c:	f001 0103 	and.w	r1, r1, #3
 8004f70:	2903      	cmp	r1, #3
 8004f72:	f000 8519 	beq.w	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8004f76:	2101      	movs	r1, #1
 8004f78:	f104 0008 	add.w	r0, r4, #8
 8004f7c:	f7ff fd38 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8004f80:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f82:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	f000 82c2 	beq.w	8005510 <HAL_RCCEx_PeriphCLKConfig+0x960>
      status = ret;
 8004f8c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f8e:	069f      	lsls	r7, r3, #26
 8004f90:	d526      	bpl.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f92:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8004f96:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8004f9a:	f000 82c6 	beq.w	800552a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004f9e:	f200 8455 	bhi.w	800584c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004fa2:	b191      	cbz	r1, 8004fca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004fa4:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8004fa8:	f040 845a 	bne.w	8005860 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fac:	499d      	ldr	r1, [pc, #628]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004fae:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004fb0:	f001 0103 	and.w	r1, r1, #3
 8004fb4:	2903      	cmp	r1, #3
 8004fb6:	f000 8453 	beq.w	8005860 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8004fba:	2100      	movs	r1, #0
 8004fbc:	f104 0008 	add.w	r0, r4, #8
 8004fc0:	f7ff fd16 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8004fc4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fc6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004fca:	2d00      	cmp	r5, #0
 8004fcc:	f040 828e 	bne.w	80054ec <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fd0:	4f94      	ldr	r7, [pc, #592]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8004fd2:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8004fd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fd8:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8004fdc:	4301      	orrs	r1, r0
 8004fde:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fe0:	0658      	lsls	r0, r3, #25
 8004fe2:	d526      	bpl.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x482>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004fe4:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8004fe8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8004fec:	f000 82af 	beq.w	800554e <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8004ff0:	f200 8464 	bhi.w	80058bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004ff4:	b191      	cbz	r1, 800501c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8004ff6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004ffa:	f040 8469 	bne.w	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ffe:	4989      	ldr	r1, [pc, #548]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005000:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005002:	f001 0103 	and.w	r1, r1, #3
 8005006:	2903      	cmp	r1, #3
 8005008:	f000 8462 	beq.w	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800500c:	2100      	movs	r1, #0
 800500e:	f104 0008 	add.w	r0, r4, #8
 8005012:	f7ff fced 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8005016:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005018:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800501c:	2d00      	cmp	r5, #0
 800501e:	f040 8269 	bne.w	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x944>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005022:	4f80      	ldr	r7, [pc, #512]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005024:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 8005028:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800502a:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 800502e:	4301      	orrs	r1, r0
 8005030:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005032:	0619      	lsls	r1, r3, #24
 8005034:	d526      	bpl.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005036:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 800503a:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800503e:	f000 8298 	beq.w	8005572 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005042:	f200 841f 	bhi.w	8005884 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8005046:	b191      	cbz	r1, 800506e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005048:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800504c:	f040 8424 	bne.w	8005898 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005050:	4974      	ldr	r1, [pc, #464]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005052:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005054:	f001 0103 	and.w	r1, r1, #3
 8005058:	2903      	cmp	r1, #3
 800505a:	f000 841d 	beq.w	8005898 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800505e:	2100      	movs	r1, #0
 8005060:	f104 0008 	add.w	r0, r4, #8
 8005064:	f7ff fcc4 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8005068:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800506a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800506e:	2d00      	cmp	r5, #0
 8005070:	f040 8244 	bne.w	80054fc <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005074:	4f6b      	ldr	r7, [pc, #428]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005076:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 800507a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800507c:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005080:	4301      	orrs	r1, r0
 8005082:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005084:	071f      	lsls	r7, r3, #28
 8005086:	d50b      	bpl.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005088:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 800508c:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8005090:	f000 81d4 	beq.w	800543c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005094:	4f63      	ldr	r7, [pc, #396]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005096:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005098:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800509c:	4301      	orrs	r1, r0
 800509e:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050a0:	06d8      	lsls	r0, r3, #27
 80050a2:	d50b      	bpl.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80050a4:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 80050a8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80050ac:	f000 81db 	beq.w	8005466 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050b0:	4f5c      	ldr	r7, [pc, #368]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80050b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80050b4:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 80050b8:	4301      	orrs	r1, r0
 80050ba:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050bc:	0319      	lsls	r1, r3, #12
 80050be:	d524      	bpl.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->AdcClockSelection)
 80050c0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80050c4:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80050c8:	f000 82b1 	beq.w	800562e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80050cc:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80050d0:	d010      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80050d2:	2900      	cmp	r1, #0
 80050d4:	f040 8130 	bne.w	8005338 <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050d8:	4852      	ldr	r0, [pc, #328]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80050da:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80050dc:	f000 0003 	and.w	r0, r0, #3
 80050e0:	2803      	cmp	r0, #3
 80050e2:	f000 8129 	beq.w	8005338 <HAL_RCCEx_PeriphCLKConfig+0x788>
 80050e6:	f104 0008 	add.w	r0, r4, #8
 80050ea:	f7ff fc81 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 80050ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050f0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80050f4:	2d00      	cmp	r5, #0
 80050f6:	f040 81ff 	bne.w	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x948>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050fa:	4f4a      	ldr	r7, [pc, #296]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80050fc:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8005100:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005102:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8005106:	4301      	orrs	r1, r0
 8005108:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800510a:	035f      	lsls	r7, r3, #13
 800510c:	d50f      	bpl.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->UsbClockSelection)
 800510e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8005112:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005116:	f000 8277 	beq.w	8005608 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800511a:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800511e:	f000 812d 	beq.w	800537c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8005122:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005126:	f000 8124 	beq.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      status = ret;
 800512a:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800512c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800512e:	03d8      	lsls	r0, r3, #15
 8005130:	d520      	bpl.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch (PeriphClkInit->SdmmcClockSelection)
 8005132:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005134:	2900      	cmp	r1, #0
 8005136:	f000 81aa 	beq.w	800548e <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800513a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800513e:	f040 80e8 	bne.w	8005312 <HAL_RCCEx_PeriphCLKConfig+0x762>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005142:	4938      	ldr	r1, [pc, #224]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005144:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005146:	f001 0103 	and.w	r1, r1, #3
 800514a:	2903      	cmp	r1, #3
 800514c:	f000 80e1 	beq.w	8005312 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8005150:	2102      	movs	r1, #2
 8005152:	f104 0008 	add.w	r0, r4, #8
 8005156:	f7ff fc4b 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 800515a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800515c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005160:	2d00      	cmp	r5, #0
 8005162:	f040 819c 	bne.w	800549e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005166:	4f2f      	ldr	r7, [pc, #188]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005168:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800516a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800516c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8005170:	4301      	orrs	r1, r0
 8005172:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005174:	0099      	lsls	r1, r3, #2
 8005176:	d50e      	bpl.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005178:	492a      	ldr	r1, [pc, #168]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800517a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800517c:	f001 0103 	and.w	r1, r1, #3
 8005180:	2903      	cmp	r1, #3
 8005182:	d007      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8005184:	2102      	movs	r1, #2
 8005186:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800518a:	f7ff fca1 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800518e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005192:	b100      	cbz	r0, 8005196 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
      status = HAL_ERROR;
 8005194:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005196:	039f      	lsls	r7, r3, #14
 8005198:	f100 80ab 	bmi.w	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x742>
      status = HAL_ERROR;
 800519c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800519e:	02d8      	lsls	r0, r3, #11
 80051a0:	d506      	bpl.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051a2:	4820      	ldr	r0, [pc, #128]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051a4:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 80051a6:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80051a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80051ac:	4331      	orrs	r1, r6
 80051ae:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80051b0:	00d9      	lsls	r1, r3, #3
 80051b2:	d507      	bpl.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80051b4:	481b      	ldr	r0, [pc, #108]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051b6:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 80051ba:	6901      	ldr	r1, [r0, #16]
 80051bc:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80051c0:	4331      	orrs	r1, r6
 80051c2:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051c4:	029f      	lsls	r7, r3, #10
 80051c6:	d506      	bpl.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x626>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051c8:	4816      	ldr	r0, [pc, #88]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051ca:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 80051cc:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80051ce:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80051d2:	4331      	orrs	r1, r6
 80051d4:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051d6:	005e      	lsls	r6, r3, #1
 80051d8:	d509      	bpl.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x63e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051da:	4912      	ldr	r1, [pc, #72]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051dc:	6908      	ldr	r0, [r1, #16]
 80051de:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80051e2:	6108      	str	r0, [r1, #16]
 80051e4:	6908      	ldr	r0, [r1, #16]
 80051e6:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 80051ea:	4330      	orrs	r0, r6
 80051ec:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	da06      	bge.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x650>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80051f2:	480c      	ldr	r0, [pc, #48]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 80051f4:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80051f6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80051f8:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80051fc:	4331      	orrs	r1, r6
 80051fe:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005200:	0218      	lsls	r0, r3, #8
 8005202:	d507      	bpl.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005204:	4907      	ldr	r1, [pc, #28]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 8005206:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 800520a:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800520c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005210:	4303      	orrs	r3, r0
 8005212:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005214:	07d1      	lsls	r1, r2, #31
 8005216:	d511      	bpl.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005218:	4b02      	ldr	r3, [pc, #8]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x674>)
 800521a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b03      	cmp	r3, #3
 8005222:	e001      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005224:	58024400 	.word	0x58024400
 8005228:	f000 835c 	beq.w	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 800522c:	2100      	movs	r1, #0
 800522e:	f104 0008 	add.w	r0, r4, #8
 8005232:	f7ff fbdd 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005236:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005238:	b100      	cbz	r0, 800523c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800523a:	4605      	mov	r5, r0
 800523c:	0793      	lsls	r3, r2, #30
 800523e:	d50e      	bpl.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005240:	4baf      	ldr	r3, [pc, #700]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	2b03      	cmp	r3, #3
 800524a:	f000 834d 	beq.w	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 800524e:	2101      	movs	r1, #1
 8005250:	f104 0008 	add.w	r0, r4, #8
 8005254:	f7ff fbcc 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005258:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800525a:	b100      	cbz	r0, 800525e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800525c:	4605      	mov	r5, r0
 800525e:	0757      	lsls	r7, r2, #29
 8005260:	d50e      	bpl.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005262:	4ba7      	ldr	r3, [pc, #668]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b03      	cmp	r3, #3
 800526c:	f000 833e 	beq.w	80058ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8005270:	2102      	movs	r1, #2
 8005272:	f104 0008 	add.w	r0, r4, #8
 8005276:	f7ff fbbb 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800527a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800527c:	b100      	cbz	r0, 8005280 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800527e:	4605      	mov	r5, r0
 8005280:	0716      	lsls	r6, r2, #28
 8005282:	d50e      	bpl.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005284:	4b9e      	ldr	r3, [pc, #632]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	2b03      	cmp	r3, #3
 800528e:	f000 8323 	beq.w	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xd28>
 8005292:	2100      	movs	r1, #0
 8005294:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005298:	f7ff fc1a 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800529c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800529e:	b100      	cbz	r0, 80052a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80052a0:	4605      	mov	r5, r0
 80052a2:	06d0      	lsls	r0, r2, #27
 80052a4:	d50f      	bpl.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052a6:	4b96      	ldr	r3, [pc, #600]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80052a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	f000 8314 	beq.w	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd2c>
 80052b4:	2101      	movs	r1, #1
 80052b6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80052ba:	f7ff fc09 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80052be:	2800      	cmp	r0, #0
 80052c0:	f040 8359 	bne.w	8005976 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80052c4:	6862      	ldr	r2, [r4, #4]
 80052c6:	0693      	lsls	r3, r2, #26
 80052c8:	d50e      	bpl.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x738>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	f000 82b7 	beq.w	8005846 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80052d8:	2102      	movs	r1, #2
 80052da:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80052de:	f7ff fbf7 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80052e2:	2800      	cmp	r0, #0
 80052e4:	f040 82af 	bne.w	8005846 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  if (status == HAL_OK)
 80052e8:	1e28      	subs	r0, r5, #0
 80052ea:	bf18      	it	ne
 80052ec:	2001      	movne	r0, #1
}
 80052ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->RngClockSelection)
 80052f2:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80052f6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80052fa:	f000 80d2 	beq.w	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80052fe:	f240 8110 	bls.w	8005522 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005302:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8005306:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800530a:	f000 80cf 	beq.w	80054ac <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800530e:	2501      	movs	r5, #1
 8005310:	e745      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 8005312:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005314:	4635      	mov	r5, r6
 8005316:	e72d      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005318:	4879      	ldr	r0, [pc, #484]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800531a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800531c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005320:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005322:	2d00      	cmp	r5, #0
 8005324:	f040 80ce 	bne.w	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005328:	4f75      	ldr	r7, [pc, #468]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800532a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800532c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800532e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8005332:	4301      	orrs	r1, r0
 8005334:	6539      	str	r1, [r7, #80]	@ 0x50
 8005336:	e598      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 8005338:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800533a:	4635      	mov	r5, r6
 800533c:	e6e5      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800533e:	4970      	ldr	r1, [pc, #448]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005340:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005342:	f001 0103 	and.w	r1, r1, #3
 8005346:	2903      	cmp	r1, #3
 8005348:	f43f adda 	beq.w	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800534c:	2101      	movs	r1, #1
 800534e:	f104 0008 	add.w	r0, r4, #8
 8005352:	f7ff fb4d 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 8005356:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005358:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800535c:	2d00      	cmp	r5, #0
 800535e:	f040 80d5 	bne.w	800550c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005362:	4f67      	ldr	r7, [pc, #412]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005364:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005366:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005368:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 800536c:	4301      	orrs	r1, r0
 800536e:	6579      	str	r1, [r7, #84]	@ 0x54
 8005370:	e5c8      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x354>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005372:	4863      	ldr	r0, [pc, #396]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005374:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005376:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800537a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800537c:	2d00      	cmp	r5, #0
 800537e:	f040 809f 	bne.w	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005382:	4f5f      	ldr	r7, [pc, #380]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005384:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8005388:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800538a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800538e:	4301      	orrs	r1, r0
 8005390:	6579      	str	r1, [r7, #84]	@ 0x54
 8005392:	e6cc      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005394:	4f5b      	ldr	r7, [pc, #364]	@ (8005504 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800539c:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800539e:	f7fc f8ed 	bl	800157c <HAL_GetTick>
 80053a2:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053a4:	e006      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x804>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a6:	f7fc f8e9 	bl	800157c <HAL_GetTick>
 80053aa:	eba0 0008 	sub.w	r0, r0, r8
 80053ae:	2864      	cmp	r0, #100	@ 0x64
 80053b0:	f200 82db 	bhi.w	800596a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	05da      	lsls	r2, r3, #23
 80053b8:	d5f5      	bpl.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    if (ret == HAL_OK)
 80053ba:	2d00      	cmp	r5, #0
 80053bc:	f040 82d6 	bne.w	800596c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80053c0:	4a4f      	ldr	r2, [pc, #316]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80053c2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80053c6:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80053c8:	4059      	eors	r1, r3
 80053ca:	f411 7f40 	tst.w	r1, #768	@ 0x300
 80053ce:	d00b      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x838>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053d0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80053d2:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053d4:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80053d8:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80053dc:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053de:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80053e0:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80053e4:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80053e6:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80053e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ec:	f000 82fb 	beq.w	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xe36>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80053f4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80053f8:	f000 8309 	beq.w	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
 80053fc:	4940      	ldr	r1, [pc, #256]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80053fe:	690a      	ldr	r2, [r1, #16]
 8005400:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8005404:	610a      	str	r2, [r1, #16]
 8005406:	483e      	ldr	r0, [pc, #248]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005408:	f3c3 010b 	ubfx	r1, r3, #0, #12
 800540c:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 800540e:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005410:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005414:	6701      	str	r1, [r0, #112]	@ 0x70
 8005416:	e543      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005418:	4839      	ldr	r0, [pc, #228]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800541a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800541c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005420:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005422:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8005424:	2d00      	cmp	r5, #0
 8005426:	f040 8177 	bne.w	8005718 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800542a:	4f35      	ldr	r7, [pc, #212]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800542c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800542e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005430:	f021 0107 	bic.w	r1, r1, #7
 8005434:	4301      	orrs	r1, r0
 8005436:	6539      	str	r1, [r7, #80]	@ 0x50
 8005438:	f7ff bbf6 	b.w	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800543c:	4930      	ldr	r1, [pc, #192]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800543e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005440:	f001 0103 	and.w	r1, r1, #3
 8005444:	2903      	cmp	r1, #3
 8005446:	f000 82ba 	beq.w	80059be <HAL_RCCEx_PeriphCLKConfig+0xe0e>
 800544a:	2102      	movs	r1, #2
 800544c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005450:	f7ff fb3e 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005454:	2800      	cmp	r0, #0
 8005456:	f000 82b5 	beq.w	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xe14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800545a:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 800545e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005460:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005464:	e616      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005466:	4926      	ldr	r1, [pc, #152]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005468:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800546a:	f001 0103 	and.w	r1, r1, #3
 800546e:	2903      	cmp	r1, #3
 8005470:	f000 82a2 	beq.w	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8005474:	2102      	movs	r1, #2
 8005476:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800547a:	f7ff fb29 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800547e:	2800      	cmp	r0, #0
 8005480:	f040 82a6 	bne.w	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xe20>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005484:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005488:	e9d4 3200 	ldrd	r3, r2, [r4]
 800548c:	e610      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800548e:	481c      	ldr	r0, [pc, #112]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8005490:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005492:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005496:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005498:	2d00      	cmp	r5, #0
 800549a:	f43f ae64 	beq.w	8005166 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      status = ret;
 800549e:	462e      	mov	r6, r5
 80054a0:	e668      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a2:	4f17      	ldr	r7, [pc, #92]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054a6:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80054aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	f47f ae76 	bne.w	800519e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054b2:	4d13      	ldr	r5, [pc, #76]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054b4:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 80054b6:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 80054ba:	4301      	orrs	r1, r0
 80054bc:	6569      	str	r1, [r5, #84]	@ 0x54
 80054be:	e66d      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      status = ret;
 80054c0:	462e      	mov	r6, r5
 80054c2:	e634      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x57e>
      status = ret;
 80054c4:	462e      	mov	r6, r5
 80054c6:	e4d0      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      status = ret;
 80054c8:	462e      	mov	r6, r5
 80054ca:	e445      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054cc:	4f0c      	ldr	r7, [pc, #48]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054ce:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80054d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80054d2:	f021 0103 	bic.w	r1, r1, #3
 80054d6:	4301      	orrs	r1, r0
 80054d8:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80054da:	e4de      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054dc:	4f08      	ldr	r7, [pc, #32]	@ (8005500 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80054de:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80054e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054e2:	f021 0107 	bic.w	r1, r1, #7
 80054e6:	4301      	orrs	r1, r0
 80054e8:	6579      	str	r1, [r7, #84]	@ 0x54
 80054ea:	e52c      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 80054ec:	462e      	mov	r6, r5
 80054ee:	e577      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x430>
      status = ret;
 80054f0:	462e      	mov	r6, r5
 80054f2:	e4aa      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x29a>
      status = ret;
 80054f4:	462e      	mov	r6, r5
 80054f6:	e59c      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x482>
      status = ret;
 80054f8:	462e      	mov	r6, r5
 80054fa:	e606      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x55a>
      status = ret;
 80054fc:	462e      	mov	r6, r5
 80054fe:	e5c1      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005500:	58024400 	.word	0x58024400
 8005504:	58024800 	.word	0x58024800
      status = ret;
 8005508:	462e      	mov	r6, r5
 800550a:	e475      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x248>
      status = ret;
 800550c:	462e      	mov	r6, r5
 800550e:	e4f9      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005510:	4fc2      	ldr	r7, [pc, #776]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005512:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8005516:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005518:	f021 0107 	bic.w	r1, r1, #7
 800551c:	4301      	orrs	r1, r0
 800551e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005520:	e535      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch (PeriphClkInit->RngClockSelection)
 8005522:	2900      	cmp	r1, #0
 8005524:	f47f aef3 	bne.w	800530e <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8005528:	e7c0      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800552a:	49bc      	ldr	r1, [pc, #752]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800552c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800552e:	f001 0103 	and.w	r1, r1, #3
 8005532:	2903      	cmp	r1, #3
 8005534:	f000 8194 	beq.w	8005860 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8005538:	2102      	movs	r1, #2
 800553a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800553e:	f7ff fac7 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 8005542:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005544:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005548:	2d00      	cmp	r5, #0
 800554a:	d1cf      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800554c:	e540      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800554e:	49b3      	ldr	r1, [pc, #716]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005550:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005552:	f001 0103 	and.w	r1, r1, #3
 8005556:	2903      	cmp	r1, #3
 8005558:	f000 81ba 	beq.w	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800555c:	2102      	movs	r1, #2
 800555e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005562:	f7ff fab5 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 8005566:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005568:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800556c:	2d00      	cmp	r5, #0
 800556e:	d1c1      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8005570:	e557      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x472>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005572:	49aa      	ldr	r1, [pc, #680]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005574:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005576:	f001 0103 	and.w	r1, r1, #3
 800557a:	2903      	cmp	r1, #3
 800557c:	f000 818c 	beq.w	8005898 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005580:	2102      	movs	r1, #2
 8005582:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005586:	f7ff faa3 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 800558a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800558c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005590:	2d00      	cmp	r5, #0
 8005592:	d1b3      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8005594:	e56e      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005596:	49a1      	ldr	r1, [pc, #644]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005598:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800559a:	f001 0103 	and.w	r1, r1, #3
 800559e:	2903      	cmp	r1, #3
 80055a0:	f000 81df 	beq.w	8005962 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
 80055a4:	2102      	movs	r1, #2
 80055a6:	f104 0008 	add.w	r0, r4, #8
 80055aa:	f7ff fa21 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 80055ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80055b4:	2d00      	cmp	r5, #0
 80055b6:	d187      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x918>
 80055b8:	f7ff bbc7 	b.w	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055bc:	4997      	ldr	r1, [pc, #604]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80055be:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80055c0:	f001 0103 	and.w	r1, r1, #3
 80055c4:	2903      	cmp	r1, #3
 80055c6:	f000 820a 	beq.w	80059de <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80055ca:	2102      	movs	r1, #2
 80055cc:	f104 0008 	add.w	r0, r4, #8
 80055d0:	f7ff fa0e 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 80055d4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055d6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80055da:	2d00      	cmp	r5, #0
 80055dc:	f47f ac5c 	bne.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80055e0:	e774      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055e2:	498e      	ldr	r1, [pc, #568]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80055e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80055e6:	f001 0103 	and.w	r1, r1, #3
 80055ea:	2903      	cmp	r1, #3
 80055ec:	f000 8146 	beq.w	800587c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80055f0:	2101      	movs	r1, #1
 80055f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80055f6:	f7ff fa6b 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 80055fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80055fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005600:	2d00      	cmp	r5, #0
 8005602:	d181      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x958>
 8005604:	f7ff bbf1 	b.w	8004dea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005608:	4984      	ldr	r1, [pc, #528]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800560a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800560c:	f001 0103 	and.w	r1, r1, #3
 8005610:	2903      	cmp	r1, #3
 8005612:	f43f ad8a 	beq.w	800512a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005616:	2101      	movs	r1, #1
 8005618:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800561c:	f7ff fa58 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 8005620:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005622:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005626:	2d00      	cmp	r5, #0
 8005628:	f47f af4a 	bne.w	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800562c:	e6a9      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800562e:	497b      	ldr	r1, [pc, #492]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005630:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005632:	f001 0103 	and.w	r1, r1, #3
 8005636:	2903      	cmp	r1, #3
 8005638:	f43f ae7e 	beq.w	8005338 <HAL_RCCEx_PeriphCLKConfig+0x788>
 800563c:	2102      	movs	r1, #2
 800563e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005642:	f7ff fa45 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 8005646:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005648:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800564c:	2d00      	cmp	r5, #0
 800564e:	f47f af53 	bne.w	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x948>
 8005652:	e552      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x54a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005654:	4971      	ldr	r1, [pc, #452]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005656:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005658:	f001 0103 	and.w	r1, r1, #3
 800565c:	2903      	cmp	r1, #3
 800565e:	f000 8129 	beq.w	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8005662:	2101      	movs	r1, #1
 8005664:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005668:	f7ff fa32 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 800566c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800566e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005672:	2d00      	cmp	r5, #0
 8005674:	f47f af3c 	bne.w	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8005678:	f7ff bbdf 	b.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800567c:	4867      	ldr	r0, [pc, #412]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800567e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005680:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8005684:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8005686:	2d00      	cmp	r5, #0
 8005688:	f43f ab88 	beq.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      status = ret;
 800568c:	462e      	mov	r6, r5
 800568e:	f7ff bb8c 	b.w	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005692:	4862      	ldr	r0, [pc, #392]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005694:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8005696:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800569a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800569c:	2d00      	cmp	r5, #0
 800569e:	f43f ab38 	beq.w	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x162>
      status = ret;
 80056a2:	462e      	mov	r6, r5
 80056a4:	f7ff bb3d 	b.w	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x172>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056a8:	495c      	ldr	r1, [pc, #368]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80056aa:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80056ac:	f001 0103 	and.w	r1, r1, #3
 80056b0:	2903      	cmp	r1, #3
 80056b2:	f000 8125 	beq.w	8005900 <HAL_RCCEx_PeriphCLKConfig+0xd50>
 80056b6:	2100      	movs	r1, #0
 80056b8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80056bc:	f7ff fa08 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 80056c0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80056c2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80056c6:	f7ff bb66 	b.w	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056ca:	4954      	ldr	r1, [pc, #336]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80056cc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80056ce:	f001 0103 	and.w	r1, r1, #3
 80056d2:	2903      	cmp	r1, #3
 80056d4:	f000 813e 	beq.w	8005954 <HAL_RCCEx_PeriphCLKConfig+0xda4>
 80056d8:	2100      	movs	r1, #0
 80056da:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80056de:	f7ff f9f7 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 80056e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056e4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80056e8:	2d00      	cmp	r5, #0
 80056ea:	f43f aabd 	beq.w	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      status = ret;
 80056ee:	462e      	mov	r6, r5
 80056f0:	f7ff bac1 	b.w	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056f4:	4949      	ldr	r1, [pc, #292]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80056f6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80056f8:	f001 0103 	and.w	r1, r1, #3
 80056fc:	2903      	cmp	r1, #3
 80056fe:	f43f aa91 	beq.w	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005702:	2100      	movs	r1, #0
 8005704:	f104 0008 	add.w	r0, r4, #8
 8005708:	f7ff f972 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 800570c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800570e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005712:	2d00      	cmp	r5, #0
 8005714:	f43f ae89 	beq.w	800542a <HAL_RCCEx_PeriphCLKConfig+0x87a>
      status = ret;
 8005718:	462e      	mov	r6, r5
 800571a:	f7ff ba85 	b.w	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x78>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800571e:	493f      	ldr	r1, [pc, #252]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005720:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005722:	f001 0103 	and.w	r1, r1, #3
 8005726:	2903      	cmp	r1, #3
 8005728:	f43f aa7c 	beq.w	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800572c:	2100      	movs	r1, #0
 800572e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005732:	f7ff f9cd 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 8005736:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005738:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800573c:	e672      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x874>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800573e:	4937      	ldr	r1, [pc, #220]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 8005740:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005742:	f001 0103 	and.w	r1, r1, #3
 8005746:	2903      	cmp	r1, #3
 8005748:	f000 80f9 	beq.w	800593e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800574c:	2100      	movs	r1, #0
 800574e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005752:	f7ff f9bd 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 8005756:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005758:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800575c:	2d00      	cmp	r5, #0
 800575e:	f43f aaad 	beq.w	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      status = ret;
 8005762:	462e      	mov	r6, r5
 8005764:	f7ff bab2 	b.w	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005768:	492c      	ldr	r1, [pc, #176]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800576a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800576c:	f001 0103 	and.w	r1, r1, #3
 8005770:	2903      	cmp	r1, #3
 8005772:	f000 80d1 	beq.w	8005918 <HAL_RCCEx_PeriphCLKConfig+0xd68>
 8005776:	2100      	movs	r1, #0
 8005778:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800577c:	f7ff f9a8 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 8005780:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005782:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8005786:	f7ff bac1 	b.w	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800578a:	4924      	ldr	r1, [pc, #144]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 800578c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800578e:	f001 0103 	and.w	r1, r1, #3
 8005792:	2903      	cmp	r1, #3
 8005794:	f000 80c8 	beq.w	8005928 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8005798:	2102      	movs	r1, #2
 800579a:	3028      	adds	r0, #40	@ 0x28
 800579c:	f7ff f998 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 80057a0:	4606      	mov	r6, r0
        break;
 80057a2:	f7ff ba28 	b.w	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x46>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a6:	481d      	ldr	r0, [pc, #116]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057a8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80057aa:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80057ae:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 80057b0:	f7ff ba81 	b.w	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b4:	4819      	ldr	r0, [pc, #100]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057b6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80057b8:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80057bc:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 80057be:	f7ff ba50 	b.w	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c2:	4d16      	ldr	r5, [pc, #88]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057c4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80057c6:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80057ca:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 80057cc:	f7ff ba17 	b.w	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057d0:	4912      	ldr	r1, [pc, #72]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057d2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80057d4:	f001 0103 	and.w	r1, r1, #3
 80057d8:	2903      	cmp	r1, #3
 80057da:	f000 80e5 	beq.w	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 80057de:	2101      	movs	r1, #1
 80057e0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80057e4:	f7ff f974 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 80057e8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057ea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80057ee:	2d00      	cmp	r5, #0
 80057f0:	f47f abcc 	bne.w	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80057f4:	e68c      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x960>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057f6:	4909      	ldr	r1, [pc, #36]	@ (800581c <HAL_RCCEx_PeriphCLKConfig+0xc6c>)
 80057f8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80057fa:	f001 0103 	and.w	r1, r1, #3
 80057fe:	2903      	cmp	r1, #3
 8005800:	f000 80d6 	beq.w	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xe00>
 8005804:	2101      	movs	r1, #1
 8005806:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800580a:	f7ff f961 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 800580e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005810:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8005814:	2d00      	cmp	r5, #0
 8005816:	f47f ab95 	bne.w	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800581a:	e65f      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x92c>
 800581c:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005820:	4983      	ldr	r1, [pc, #524]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005822:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005824:	f001 0103 	and.w	r1, r1, #3
 8005828:	2903      	cmp	r1, #3
 800582a:	f43f ab69 	beq.w	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800582e:	2101      	movs	r1, #1
 8005830:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8005834:	f7ff f94c 	bl	8004ad0 <RCCEx_PLL3_Config.part.0>
 8005838:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800583a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800583e:	2d00      	cmp	r5, #0
 8005840:	f47f ae64 	bne.w	800550c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005844:	e58d      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  return HAL_ERROR;
 8005846:	2001      	movs	r0, #1
}
 8005848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800584c:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8005850:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005854:	f43f abb9 	beq.w	8004fca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005858:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800585c:	f43f abb5 	beq.w	8004fca <HAL_RCCEx_PeriphCLKConfig+0x41a>
      status = ret;
 8005860:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005862:	4635      	mov	r5, r6
 8005864:	f7ff bbbc 	b.w	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    switch (PeriphClkInit->Spi45ClockSelection)
 8005868:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 800586c:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8005870:	f43f aab8 	beq.w	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005874:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 8005878:	f43f aab4 	beq.w	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x234>
      status = ret;
 800587c:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800587e:	4635      	mov	r5, r6
 8005880:	f7ff baba 	b.w	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005884:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 8005888:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800588c:	f43f abef 	beq.w	800506e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005890:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8005894:	f43f abeb 	beq.w	800506e <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = ret;
 8005898:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800589a:	4635      	mov	r5, r6
 800589c:	f7ff bbf2 	b.w	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    switch (PeriphClkInit->Spi6ClockSelection)
 80058a0:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 80058a4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80058a8:	f43f aac4 	beq.w	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80058ac:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 80058b0:	f43f aac0 	beq.w	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x284>
      status = ret;
 80058b4:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80058b6:	4635      	mov	r5, r6
 80058b8:	f7ff bac7 	b.w	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80058bc:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 80058c0:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80058c4:	f43f abaa 	beq.w	800501c <HAL_RCCEx_PeriphCLKConfig+0x46c>
 80058c8:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 80058cc:	f43f aba6 	beq.w	800501c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      status = ret;
 80058d0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80058d2:	4635      	mov	r5, r6
 80058d4:	f7ff bbad 	b.w	8005032 <HAL_RCCEx_PeriphCLKConfig+0x482>
    return HAL_ERROR;
 80058d8:	2501      	movs	r5, #1
 80058da:	e4e2      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80058dc:	0691      	lsls	r1, r2, #26
 80058de:	d5b2      	bpl.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    return HAL_ERROR;
 80058e0:	2501      	movs	r5, #1
 80058e2:	e4f2      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x71a>
    return HAL_ERROR;
 80058e4:	2501      	movs	r5, #1
 80058e6:	e4a9      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80058e8:	2501      	movs	r5, #1
 80058ea:	e4b8      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80058ec:	2501      	movs	r5, #1
 80058ee:	e4c7      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    switch (PeriphClkInit->Spi123ClockSelection)
 80058f0:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 80058f4:	f43f aa4f 	beq.w	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 80058f8:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 80058fc:	f43f aa4b 	beq.w	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      status = ret;
 8005900:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005902:	4635      	mov	r5, r6
 8005904:	f7ff ba51 	b.w	8004daa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    switch (PeriphClkInit->Sai4BClockSelection)
 8005908:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 800590c:	f43f a9fe 	beq.w	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005910:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8005914:	f43f a9fa 	beq.w	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      status = ret;
 8005918:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 800591a:	4635      	mov	r5, r6
 800591c:	f7ff ba01 	b.w	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x172>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8005920:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8005924:	f43f a96b 	beq.w	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_ERROR;
 8005928:	2601      	movs	r6, #1
 800592a:	f7ff b96f 	b.w	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch (PeriphClkInit->Sai4AClockSelection)
 800592e:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8005932:	f43f a9c0 	beq.w	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005936:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800593a:	f43f a9bc 	beq.w	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      status = ret;
 800593e:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005940:	4635      	mov	r5, r6
 8005942:	f7ff b9c3 	b.w	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch (PeriphClkInit->Sai23ClockSelection)
 8005946:	29c0      	cmp	r1, #192	@ 0xc0
 8005948:	f43f a98b 	beq.w	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 800594c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8005950:	f43f a987 	beq.w	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      status = ret;
 8005954:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005956:	4635      	mov	r5, r6
 8005958:	f7ff b98d 	b.w	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->QspiClockSelection)
 800595c:	2930      	cmp	r1, #48	@ 0x30
 800595e:	f43f a9f1 	beq.w	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x194>
      status = ret;
 8005962:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 8005964:	4635      	mov	r5, r6
 8005966:	f7ff b9f7 	b.w	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = HAL_TIMEOUT;
 800596a:	2503      	movs	r5, #3
      status = ret;
 800596c:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800596e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005972:	f7ff ba95 	b.w	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005976:	6863      	ldr	r3, [r4, #4]
 8005978:	069a      	lsls	r2, r3, #26
 800597a:	f57f af64 	bpl.w	8005846 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800597e:	4605      	mov	r5, r0
 8005980:	e4a3      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005982:	492b      	ldr	r1, [pc, #172]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005984:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8005986:	f001 0103 	and.w	r1, r1, #3
 800598a:	2903      	cmp	r1, #3
 800598c:	f43f aa6b 	beq.w	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8005990:	2101      	movs	r1, #1
 8005992:	f104 0008 	add.w	r0, r4, #8
 8005996:	f7ff f82b 	bl	80049f0 <RCCEx_PLL2_Config.part.0>
 800599a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800599c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	f47f ad8f 	bne.w	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80059a6:	e4bf      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x778>
      status = ret;
 80059a8:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80059aa:	4635      	mov	r5, r6
 80059ac:	f7ff baef 	b.w	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 80059b0:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80059b2:	4635      	mov	r5, r6
 80059b4:	f7ff bac7 	b.w	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x396>
        status = HAL_ERROR;
 80059b8:	2601      	movs	r6, #1
 80059ba:	f7ff bb79 	b.w	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
        status = HAL_ERROR;
 80059be:	2601      	movs	r6, #1
 80059c0:	f7ff bb68 	b.w	8005094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80059c4:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80059cc:	f7ff bb62 	b.w	8005094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059d0:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 80059d4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059d6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80059da:	f7ff bb69 	b.w	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
      status = ret;
 80059de:	2601      	movs	r6, #1
        ret = HAL_ERROR;
 80059e0:	4635      	mov	r5, r6
 80059e2:	f7ff ba5a 	b.w	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        tickstart = HAL_GetTick();
 80059e6:	f7fb fdc9 	bl	800157c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059ea:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8005a30 <HAL_RCCEx_PeriphCLKConfig+0xe80>
        tickstart = HAL_GetTick();
 80059ee:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f0:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059f4:	e004      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xe50>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f6:	f7fb fdc1 	bl	800157c <HAL_GetTick>
 80059fa:	1bc0      	subs	r0, r0, r7
 80059fc:	4548      	cmp	r0, r9
 80059fe:	d810      	bhi.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xe72>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a00:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8005a04:	079b      	lsls	r3, r3, #30
 8005a06:	d5f6      	bpl.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xe46>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a08:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8005a0c:	e4f0      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005a0e:	4808      	ldr	r0, [pc, #32]	@ (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xe80>)
 8005a10:	4a08      	ldr	r2, [pc, #32]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xe84>)
 8005a12:	6901      	ldr	r1, [r0, #16]
 8005a14:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8005a18:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	6102      	str	r2, [r0, #16]
 8005a20:	e4f1      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x856>
        status = ret;
 8005a22:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a24:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005a28:	4635      	mov	r5, r6
 8005a2a:	f7ff ba39 	b.w	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8005a2e:	bf00      	nop
 8005a30:	58024400 	.word	0x58024400
 8005a34:	00ffffcf 	.word	0x00ffffcf

08005a38 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a38:	4a47      	ldr	r2, [pc, #284]	@ (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8005a3a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a3c:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a3e:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a40:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8005a42:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005a46:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a4a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8005a4c:	d05b      	beq.n	8005b06 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a4e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a52:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a56:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a5a:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005a5e:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005a62:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a68:	ee06 1a90 	vmov	s13, r1
 8005a6c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005a70:	d003      	beq.n	8005a7a <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8005a72:	2c02      	cmp	r4, #2
 8005a74:	d06a      	beq.n	8005b4c <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	d04a      	beq.n	8005b10 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a7a:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005b5c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8005a7e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005a82:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a88:	ee07 3a90 	vmov	s15, r3
 8005a8c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a94:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b58 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8005aa2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005aa6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005aa8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005aac:	ee07 3a10 	vmov	s14, r3
 8005ab0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005ab4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005ab6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005aba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005abe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005ac2:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005ac6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005ac8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005acc:	ee07 3a10 	vmov	s14, r3
 8005ad0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ad4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005ad8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005adc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005ae0:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ae4:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8005ae6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005aea:	ee06 3a90 	vmov	s13, r3
 8005aee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005af2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005af6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005afa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005afe:	ee17 3a90 	vmov	r3, s15
 8005b02:	6083      	str	r3, [r0, #8]
}
 8005b04:	4770      	bx	lr
 8005b06:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b08:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b0c:	6083      	str	r3, [r0, #8]
}
 8005b0e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b10:	6813      	ldr	r3, [r2, #0]
 8005b12:	069b      	lsls	r3, r3, #26
 8005b14:	d51d      	bpl.n	8005b52 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b16:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b18:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005b1c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b1e:	4910      	ldr	r1, [pc, #64]	@ (8005b60 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8005b20:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b28:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b2a:	ee06 3a10 	vmov	s12, r3
 8005b2e:	ee05 1a90 	vmov	s11, r1
 8005b32:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005b36:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005b3a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b3e:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005b42:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b4a:	e7a9      	b.n	8005aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b4c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005b64 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8005b50:	e795      	b.n	8005a7e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b52:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005b68 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8005b56:	e792      	b.n	8005a7e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	4a742400 	.word	0x4a742400
 8005b60:	03d09000 	.word	0x03d09000
 8005b64:	4bbebc20 	.word	0x4bbebc20
 8005b68:	4c742400 	.word	0x4c742400

08005b6c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b6c:	4a47      	ldr	r2, [pc, #284]	@ (8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8005b6e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b70:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b72:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b74:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8005b76:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b7a:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b7e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8005b80:	d05b      	beq.n	8005c3a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b82:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b86:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b8a:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b8e:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b92:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005b96:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b9c:	ee06 1a90 	vmov	s13, r1
 8005ba0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005ba4:	d003      	beq.n	8005bae <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8005ba6:	2c02      	cmp	r4, #2
 8005ba8:	d06a      	beq.n	8005c80 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 8005baa:	2c00      	cmp	r4, #0
 8005bac:	d04a      	beq.n	8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bae:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005c90 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8005bb2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005bb6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbc:	ee07 3a90 	vmov	s15, r3
 8005bc0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bc8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8005bd6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005bda:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005bdc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005be0:	ee07 3a10 	vmov	s14, r3
 8005be4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005be8:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005bea:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005bee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005bf2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005bf6:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005bfa:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005bfc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005c00:	ee07 3a10 	vmov	s14, r3
 8005c04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005c08:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005c0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c10:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005c14:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c18:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005c1a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005c1e:	ee06 3a90 	vmov	s13, r3
 8005c22:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005c26:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005c2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005c2e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005c32:	ee17 3a90 	vmov	r3, s15
 8005c36:	6083      	str	r3, [r0, #8]
}
 8005c38:	4770      	bx	lr
 8005c3a:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c3c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c40:	6083      	str	r3, [r0, #8]
}
 8005c42:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c44:	6813      	ldr	r3, [r2, #0]
 8005c46:	069b      	lsls	r3, r3, #26
 8005c48:	d51d      	bpl.n	8005c86 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c4a:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c4c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005c50:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c52:	4910      	ldr	r1, [pc, #64]	@ (8005c94 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8005c54:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c5c:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c5e:	ee06 3a10 	vmov	s12, r3
 8005c62:	ee05 1a90 	vmov	s11, r1
 8005c66:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005c6a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005c6e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c72:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005c76:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c7e:	e7a9      	b.n	8005bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c80:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8005c84:	e795      	b.n	8005bb2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c86:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005c9c <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8005c8a:	e792      	b.n	8005bb2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	4a742400 	.word	0x4a742400
 8005c94:	03d09000 	.word	0x03d09000
 8005c98:	4bbebc20 	.word	0x4bbebc20
 8005c9c:	4c742400 	.word	0x4c742400

08005ca0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ca0:	4a47      	ldr	r2, [pc, #284]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 8005ca2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ca4:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005ca6:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005ca8:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 8005caa:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005cae:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cb2:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8005cb4:	d05b      	beq.n	8005d6e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cb6:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005cba:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cbe:	f004 0403 	and.w	r4, r4, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cc2:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005cc6:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8005cca:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cd0:	ee06 1a90 	vmov	s13, r1
 8005cd4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8005cd8:	d04e      	beq.n	8005d78 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8005cda:	2c02      	cmp	r4, #2
 8005cdc:	d06d      	beq.n	8005dba <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8005cde:	2c00      	cmp	r4, #0
 8005ce0:	d04d      	beq.n	8005d7e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ce2:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8005dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8005ce6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005cea:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf0:	ee07 3a90 	vmov	s15, r3
 8005cf4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cfc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d04:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005d08:	4a2d      	ldr	r2, [pc, #180]	@ (8005dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8005d0a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005d0e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005d10:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005d14:	ee07 3a10 	vmov	s14, r3
 8005d18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8005d1c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005d1e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005d22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d26:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005d2a:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005d2e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005d30:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8005d34:	ee07 3a10 	vmov	s14, r3
 8005d38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d3c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005d40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d44:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8005d48:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005d4c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005d4e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8005d52:	ee06 3a90 	vmov	s13, r3
 8005d56:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005d5a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005d5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005d62:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005d66:	ee17 3a90 	vmov	r3, s15
 8005d6a:	6083      	str	r3, [r0, #8]
}
 8005d6c:	4770      	bx	lr
 8005d6e:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d70:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005d74:	6083      	str	r3, [r0, #8]
}
 8005d76:	4770      	bx	lr
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d78:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x128>
 8005d7c:	e7b3      	b.n	8005ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d7e:	6813      	ldr	r3, [r2, #0]
 8005d80:	069b      	lsls	r3, r3, #26
 8005d82:	d5ae      	bpl.n	8005ce2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d84:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d86:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005d8a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d8c:	490f      	ldr	r1, [pc, #60]	@ (8005dcc <HAL_RCCEx_GetPLL1ClockFreq+0x12c>)
 8005d8e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d96:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d98:	ee06 3a10 	vmov	s12, r3
 8005d9c:	ee05 1a90 	vmov	s11, r1
 8005da0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005da4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005da8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005dac:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8005db0:	ee36 7a26 	vadd.f32	s14, s12, s13
 8005db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005db8:	e7a6      	b.n	8005d08 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dba:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8005dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8005dbe:	e792      	b.n	8005ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8005dc0:	58024400 	.word	0x58024400
 8005dc4:	4c742400 	.word	0x4c742400
 8005dc8:	4a742400 	.word	0x4a742400
 8005dcc:	03d09000 	.word	0x03d09000
 8005dd0:	4bbebc20 	.word	0x4bbebc20

08005dd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005dd4:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8005dd8:	430b      	orrs	r3, r1
{
 8005dda:	b500      	push	{lr}
 8005ddc:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005dde:	d04c      	beq.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005de0:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8005de4:	430b      	orrs	r3, r1
 8005de6:	d036      	beq.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005de8:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8005dec:	430b      	orrs	r3, r1
 8005dee:	d06c      	beq.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005df0:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8005df4:	430b      	orrs	r3, r1
 8005df6:	d04b      	beq.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005df8:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	f000 80b6 	beq.w	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005e02:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8005e06:	430b      	orrs	r3, r1
 8005e08:	f000 80ec 	beq.w	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e0c:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8005e10:	430b      	orrs	r3, r1
 8005e12:	d069      	beq.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e14:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	f000 80d6 	beq.w	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e1e:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8005e22:	430b      	orrs	r3, r1
 8005e24:	f000 8109 	beq.w	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005e28:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 8005e2c:	4308      	orrs	r0, r1
 8005e2e:	d120      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005e30:	4a95      	ldr	r2, [pc, #596]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e32:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005e34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 8005e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e3c:	f000 80aa 	beq.w	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8005e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e44:	f000 8116 	beq.w	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005e48:	b99b      	cbnz	r3, 8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e4a:	6810      	ldr	r0, [r2, #0]
 8005e4c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8005e50:	d047      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8005e52:	488e      	ldr	r0, [pc, #568]	@ (800608c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
  return frequency;
 8005e54:	e045      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005e56:	4a8c      	ldr	r2, [pc, #560]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e58:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005e5a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 8005e5e:	2b80      	cmp	r3, #128	@ 0x80
 8005e60:	f000 8093 	beq.w	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8005e64:	f240 808b 	bls.w	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005e68:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e6a:	d039      	beq.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e70:	d05c      	beq.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
          frequency = 0;
 8005e72:	2000      	movs	r0, #0
}
 8005e74:	b005      	add	sp, #20
 8005e76:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005e7a:	4b83      	ldr	r3, [pc, #524]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e7e:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d8f5      	bhi.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8005e86:	e8df f003 	tbb	[pc, r3]
 8005e8a:	3c68      	.short	0x3c68
 8005e8c:	2b46      	.short	0x2b46
 8005e8e:	50          	.byte	0x50
 8005e8f:	00          	.byte	0x00
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005e90:	4a7d      	ldr	r2, [pc, #500]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e92:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005e94:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 8005e98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e9c:	d075      	beq.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8005e9e:	d96e      	bls.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005ea0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ea4:	d01c      	beq.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005ea6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005eaa:	d1e2      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005eac:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005eae:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005eb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005eb4:	0752      	lsls	r2, r2, #29
 8005eb6:	d541      	bpl.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d13f      	bne.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ebc:	4b72      	ldr	r3, [pc, #456]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ebe:	4874      	ldr	r0, [pc, #464]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005ec6:	40d8      	lsrs	r0, r3
 8005ec8:	e00b      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005eca:	4a6f      	ldr	r2, [pc, #444]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005ecc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005ece:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 8005ed2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ed6:	d058      	beq.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8005ed8:	d951      	bls.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005eda:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ede:	d15e      	bne.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ee0:	486c      	ldr	r0, [pc, #432]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
}
 8005ee2:	b005      	add	sp, #20
 8005ee4:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005ee8:	4a67      	ldr	r2, [pc, #412]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005eea:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ef4:	f000 80df 	beq.w	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e2>
 8005ef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005efc:	d0d6      	beq.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1b7      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f02:	4b61      	ldr	r3, [pc, #388]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005f0a:	d0ea      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f0c:	a801      	add	r0, sp, #4
 8005f0e:	f7ff fd93 	bl	8005a38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f12:	9801      	ldr	r0, [sp, #4]
 8005f14:	e7e5      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f16:	4b5c      	ldr	r3, [pc, #368]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005f1e:	d0e0      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f20:	a801      	add	r0, sp, #4
 8005f22:	f7ff fe23 	bl	8005b6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f26:	9801      	ldr	r0, [sp, #4]
 8005f28:	e7db      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f2a:	4a57      	ldr	r2, [pc, #348]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f2c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f2e:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f34:	0749      	lsls	r1, r1, #29
 8005f36:	d501      	bpl.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d038      	beq.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f3c:	4a52      	ldr	r2, [pc, #328]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	05d0      	lsls	r0, r2, #23
 8005f42:	d502      	bpl.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8005f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f48:	d067      	beq.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f4a:	4a4f      	ldr	r2, [pc, #316]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f4c:	6812      	ldr	r2, [r2, #0]
 8005f4e:	0391      	lsls	r1, r2, #14
 8005f50:	d58f      	bpl.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8005f52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f56:	d18c      	bne.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8005f58:	e77b      	b.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005f62:	d0be      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f64:	a801      	add	r0, sp, #4
 8005f66:	f7ff fe9b 	bl	8005ca0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f6a:	9802      	ldr	r0, [sp, #8]
 8005f6c:	e7b9      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005f6e:	4a46      	ldr	r2, [pc, #280]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f70:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005f72:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 8005f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7a:	d006      	beq.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8005f7c:	d81d      	bhi.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005f7e:	b14b      	cbz	r3, 8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f80:	6810      	ldr	r0, [r2, #0]
 8005f82:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005f86:	d0ac      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005f88:	e7c0      	b.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f8a:	6810      	ldr	r0, [r2, #0]
 8005f8c:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8005f90:	d0a7      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005f92:	e7c5      	b.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f94:	6810      	ldr	r0, [r2, #0]
 8005f96:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8005f9a:	d0a2      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8005f9c:	e7e2      	b.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
    switch (saiclocksource)
 8005f9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fa2:	d0c3      	beq.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8005fa4:	e765      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fa6:	6810      	ldr	r0, [r2, #0]
 8005fa8:	f010 0004 	ands.w	r0, r0, #4
 8005fac:	d099      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	4837      	ldr	r0, [pc, #220]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005fb2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005fb6:	40d8      	lsrs	r0, r3
 8005fb8:	e793      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8005fba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005fbe:	d08f      	beq.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fc4:	f43f af72 	beq.w	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005fc8:	e753      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005fca:	4b2f      	ldr	r3, [pc, #188]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8005fce:	03d2      	lsls	r2, r2, #15
 8005fd0:	d5c4      	bpl.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8005fd8:	d083      	beq.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fda:	a801      	add	r0, sp, #4
 8005fdc:	f7ff fd2c 	bl	8005a38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005fe0:	9803      	ldr	r0, [sp, #12]
 8005fe2:	e77e      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005fe4:	4a28      	ldr	r2, [pc, #160]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fe6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005fe8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8005fec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ff0:	d0d9      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8005ff2:	d814      	bhi.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff8:	d03c      	beq.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005ffa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ffe:	d04f      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8006000:	2b00      	cmp	r3, #0
 8006002:	f47f af36 	bne.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
}
 8006006:	b005      	add	sp, #20
 8006008:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800600c:	f7fe bca8 	b.w	8004960 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006010:	6810      	ldr	r0, [r2, #0]
 8006012:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8006016:	f43f af64 	beq.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 800601a:	481f      	ldr	r0, [pc, #124]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800601c:	e761      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800601e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006022:	d0f5      	beq.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8006024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006028:	f47f af23 	bne.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800602c:	4b16      	ldr	r3, [pc, #88]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8006034:	f43f af55 	beq.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006038:	e70b      	b.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800603a:	4b13      	ldr	r3, [pc, #76]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800603c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8006042:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006046:	d04e      	beq.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8006048:	d83f      	bhi.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800604a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800604e:	d043      	beq.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8006050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006054:	d024      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8006056:	2b00      	cmp	r3, #0
 8006058:	f47f af0b 	bne.w	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800605c:	f7fe fc40 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8006060:	4b09      	ldr	r3, [pc, #36]	@ (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006062:	4a0e      	ldr	r2, [pc, #56]	@ (800609c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800606a:	5cd3      	ldrb	r3, [r2, r3]
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	40d8      	lsrs	r0, r3
        break;
 8006072:	e736      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006074:	6810      	ldr	r0, [r2, #0]
 8006076:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800607a:	f43f af32 	beq.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800607e:	a801      	add	r0, sp, #4
 8006080:	f7ff fcda 	bl	8005a38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006084:	9802      	ldr	r0, [sp, #8]
 8006086:	e72c      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8006088:	58024400 	.word	0x58024400
 800608c:	017d7840 	.word	0x017d7840
 8006090:	03d09000 	.word	0x03d09000
 8006094:	00bb8000 	.word	0x00bb8000
 8006098:	003d0900 	.word	0x003d0900
 800609c:	08062b80 	.word	0x08062b80
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060a0:	4b1a      	ldr	r3, [pc, #104]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80060a8:	f43f af1b 	beq.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ac:	a801      	add	r0, sp, #4
 80060ae:	f7ff fd5d 	bl	8005b6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060b2:	9802      	ldr	r0, [sp, #8]
 80060b4:	e715      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060b6:	6810      	ldr	r0, [r2, #0]
 80060b8:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80060bc:	f43f af11 	beq.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060c0:	a801      	add	r0, sp, #4
 80060c2:	f7ff fd53 	bl	8005b6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80060c6:	9803      	ldr	r0, [sp, #12]
 80060c8:	e70b      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80060ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ce:	d016      	beq.n	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80060d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060d4:	d0aa      	beq.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80060d6:	e6cc      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060d8:	4b0c      	ldr	r3, [pc, #48]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80060e0:	f43f aeff 	beq.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80060e4:	e7cb      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060e6:	4b09      	ldr	r3, [pc, #36]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	f010 0004 	ands.w	r0, r0, #4
 80060ee:	f43f aef8 	beq.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4806      	ldr	r0, [pc, #24]	@ (8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80060f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80060fa:	40d8      	lsrs	r0, r3
 80060fc:	e6f1      	b.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80060fe:	4b03      	ldr	r3, [pc, #12]	@ (800610c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8006106:	f43f aeec 	beq.w	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800610a:	e786      	b.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 800610c:	58024400 	.word	0x58024400
 8006110:	03d09000 	.word	0x03d09000

08006114 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006114:	2800      	cmp	r0, #0
 8006116:	f000 8095 	beq.w	8006244 <HAL_TIM_Base_Init+0x130>
{
 800611a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006120:	4604      	mov	r4, r0
 8006122:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8087 	beq.w	800623a <HAL_TIM_Base_Init+0x126>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800612c:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800612e:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006130:	4945      	ldr	r1, [pc, #276]	@ (8006248 <HAL_TIM_Base_Init+0x134>)
 8006132:	4d46      	ldr	r5, [pc, #280]	@ (800624c <HAL_TIM_Base_Init+0x138>)
 8006134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006138:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800613c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006140:	eba3 0e05 	sub.w	lr, r3, r5
  tmpcr1 = TIMx->CR1;
 8006144:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006146:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800614a:	69a0      	ldr	r0, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800614c:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006150:	68e7      	ldr	r7, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006152:	ea4f 1151 	mov.w	r1, r1, lsr #5

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006156:	6866      	ldr	r6, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006158:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800615c:	d01f      	beq.n	800619e <HAL_TIM_Base_Init+0x8a>
 800615e:	b9f1      	cbnz	r1, 800619e <HAL_TIM_Base_Init+0x8a>
 8006160:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 800625c <HAL_TIM_Base_Init+0x148>
 8006164:	4563      	cmp	r3, ip
 8006166:	d050      	beq.n	800620a <HAL_TIM_Base_Init+0xf6>
 8006168:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800616c:	4563      	cmp	r3, ip
 800616e:	d04c      	beq.n	800620a <HAL_TIM_Base_Init+0xf6>
 8006170:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8006174:	4563      	cmp	r3, ip
 8006176:	d012      	beq.n	800619e <HAL_TIM_Base_Init+0x8a>
 8006178:	f1be 0f00 	cmp.w	lr, #0
 800617c:	d10f      	bne.n	800619e <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800617e:	4d34      	ldr	r5, [pc, #208]	@ (8006250 <HAL_TIM_Base_Init+0x13c>)
 8006180:	4934      	ldr	r1, [pc, #208]	@ (8006254 <HAL_TIM_Base_Init+0x140>)
 8006182:	428b      	cmp	r3, r1
 8006184:	bf18      	it	ne
 8006186:	42ab      	cmpne	r3, r5
 8006188:	d043      	beq.n	8006212 <HAL_TIM_Base_Init+0xfe>
 800618a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800618e:	428b      	cmp	r3, r1
 8006190:	d03f      	beq.n	8006212 <HAL_TIM_Base_Init+0xfe>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006192:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006196:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006198:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800619a:	4310      	orrs	r0, r2

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800619c:	e014      	b.n	80061c8 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 800619e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a4:	f8d4 c010 	ldr.w	ip, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 80061a8:	432a      	orrs	r2, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061aa:	62df      	str	r7, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061ac:	629e      	str	r6, [r3, #40]	@ 0x28
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061b2:	ea42 020c 	orr.w	r2, r2, ip
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061ba:	4310      	orrs	r0, r2
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061bc:	b911      	cbnz	r1, 80061c4 <HAL_TIM_Base_Init+0xb0>
 80061be:	f1be 0f00 	cmp.w	lr, #0
 80061c2:	d02f      	beq.n	8006224 <HAL_TIM_Base_Init+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c4:	6962      	ldr	r2, [r4, #20]
 80061c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80061c8:	6819      	ldr	r1, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061ca:	2201      	movs	r2, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80061cc:	f041 0104 	orr.w	r1, r1, #4
 80061d0:	6019      	str	r1, [r3, #0]
  TIMx->EGR = TIM_EGR_UG;
 80061d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80061d4:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 80061d6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d8:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 80061e0:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
 80061e4:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 80061e8:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
 80061ec:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 80061f0:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f4:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
 80061f8:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 80061fc:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
 8006200:	f884 2047 	strb.w	r2, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006204:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 8006208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800620a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800620e:	68a1      	ldr	r1, [r4, #8]
 8006210:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006214:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006218:	62df      	str	r7, [r3, #44]	@ 0x2c
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800621a:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800621c:	629e      	str	r6, [r3, #40]	@ 0x28
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006222:	4310      	orrs	r0, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006224:	490c      	ldr	r1, [pc, #48]	@ (8006258 <HAL_TIM_Base_Init+0x144>)
 8006226:	4a0a      	ldr	r2, [pc, #40]	@ (8006250 <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006228:	4293      	cmp	r3, r2
 800622a:	bf18      	it	ne
 800622c:	428b      	cmpne	r3, r1
 800622e:	d0c9      	beq.n	80061c4 <HAL_TIM_Base_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006230:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006234:	4293      	cmp	r3, r2
 8006236:	d0c5      	beq.n	80061c4 <HAL_TIM_Base_Init+0xb0>
 8006238:	e7c6      	b.n	80061c8 <HAL_TIM_Base_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 800623a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800623e:	f7fb f825 	bl	800128c <HAL_TIM_Base_MspInit>
 8006242:	e773      	b.n	800612c <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 8006244:	2001      	movs	r0, #1
}
 8006246:	4770      	bx	lr
 8006248:	40010000 	.word	0x40010000
 800624c:	40010400 	.word	0x40010400
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800
 800625c:	40000400 	.word	0x40000400

08006260 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006260:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006264:	2b01      	cmp	r3, #1
 8006266:	d139      	bne.n	80062dc <HAL_TIM_Base_Start+0x7c>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006268:	6802      	ldr	r2, [r0, #0]
 800626a:	4b1d      	ldr	r3, [pc, #116]	@ (80062e0 <HAL_TIM_Base_Start+0x80>)
 800626c:	491d      	ldr	r1, [pc, #116]	@ (80062e4 <HAL_TIM_Base_Start+0x84>)
 800626e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006272:	bf18      	it	ne
 8006274:	429a      	cmpne	r2, r3
{
 8006276:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006278:	bf0c      	ite	eq
 800627a:	2301      	moveq	r3, #1
 800627c:	2300      	movne	r3, #0
 800627e:	4d1a      	ldr	r5, [pc, #104]	@ (80062e8 <HAL_TIM_Base_Start+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	2402      	movs	r4, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006282:	42aa      	cmp	r2, r5
 8006284:	bf08      	it	eq
 8006286:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800628a:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628e:	4c17      	ldr	r4, [pc, #92]	@ (80062ec <HAL_TIM_Base_Start+0x8c>)
 8006290:	428a      	cmp	r2, r1
 8006292:	bf08      	it	eq
 8006294:	f043 0301 	orreq.w	r3, r3, #1
 8006298:	4815      	ldr	r0, [pc, #84]	@ (80062f0 <HAL_TIM_Base_Start+0x90>)
 800629a:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800629e:	42a2      	cmp	r2, r4
 80062a0:	bf08      	it	eq
 80062a2:	f043 0301 	orreq.w	r3, r3, #1
 80062a6:	4282      	cmp	r2, r0
 80062a8:	bf08      	it	eq
 80062aa:	f043 0301 	orreq.w	r3, r3, #1
 80062ae:	428a      	cmp	r2, r1
 80062b0:	bf08      	it	eq
 80062b2:	f043 0301 	orreq.w	r3, r3, #1
 80062b6:	b913      	cbnz	r3, 80062be <HAL_TIM_Base_Start+0x5e>
 80062b8:	4b0e      	ldr	r3, [pc, #56]	@ (80062f4 <HAL_TIM_Base_Start+0x94>)
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d107      	bne.n	80062ce <HAL_TIM_Base_Start+0x6e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062be:	6891      	ldr	r1, [r2, #8]
 80062c0:	4b0d      	ldr	r3, [pc, #52]	@ (80062f8 <HAL_TIM_Base_Start+0x98>)
 80062c2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c4:	2b06      	cmp	r3, #6
 80062c6:	d006      	beq.n	80062d6 <HAL_TIM_Base_Start+0x76>
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062cc:	d003      	beq.n	80062d6 <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	f043 0301 	orr.w	r3, r3, #1
 80062d4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80062d6:	2000      	movs	r0, #0
}
 80062d8:	bc30      	pop	{r4, r5}
 80062da:	4770      	bx	lr
    return HAL_ERROR;
 80062dc:	2001      	movs	r0, #1
}
 80062de:	4770      	bx	lr
 80062e0:	40010000 	.word	0x40010000
 80062e4:	40000800 	.word	0x40000800
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000c00 	.word	0x40000c00
 80062f0:	40010400 	.word	0x40010400
 80062f4:	40014000 	.word	0x40014000
 80062f8:	00010007 	.word	0x00010007

080062fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80062fc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006300:	2a01      	cmp	r2, #1
 8006302:	d06d      	beq.n	80063e0 <HAL_TIM_ConfigClockSource+0xe4>
  tmpsmcr = htim->Instance->SMCR;
 8006304:	6802      	ldr	r2, [r0, #0]
 8006306:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006308:	2001      	movs	r0, #1
{
 800630a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 800630e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006312:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006316:	4c59      	ldr	r4, [pc, #356]	@ (800647c <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr = htim->Instance->SMCR;
 8006318:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800631a:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 800631c:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800631e:	680c      	ldr	r4, [r1, #0]
 8006320:	2c70      	cmp	r4, #112	@ 0x70
 8006322:	f000 8087 	beq.w	8006434 <HAL_TIM_ConfigClockSource+0x138>
 8006326:	d825      	bhi.n	8006374 <HAL_TIM_ConfigClockSource+0x78>
 8006328:	2c50      	cmp	r4, #80	@ 0x50
 800632a:	d05b      	beq.n	80063e4 <HAL_TIM_ConfigClockSource+0xe8>
 800632c:	d82b      	bhi.n	8006386 <HAL_TIM_ConfigClockSource+0x8a>
 800632e:	2c40      	cmp	r4, #64	@ 0x40
 8006330:	f040 8090 	bne.w	8006454 <HAL_TIM_ConfigClockSource+0x158>
                               sClockSourceConfig->ClockPolarity,
 8006334:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006336:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006338:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633a:	6a10      	ldr	r0, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800633c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006340:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 8006344:	430c      	orrs	r4, r1
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006346:	494e      	ldr	r1, [pc, #312]	@ (8006480 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006348:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800634c:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006350:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006354:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006356:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006358:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800635a:	4001      	ands	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800635c:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006360:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006362:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006364:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006366:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8006368:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006370:	bc30      	pop	{r4, r5}
 8006372:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006374:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8006378:	d04c      	beq.n	8006414 <HAL_TIM_ConfigClockSource+0x118>
 800637a:	d81f      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0xc0>
 800637c:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 8006380:	bf18      	it	ne
 8006382:	2001      	movne	r0, #1
 8006384:	e7ee      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x68>
 8006386:	2c60      	cmp	r4, #96	@ 0x60
 8006388:	d1ec      	bne.n	8006364 <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 800638a:	6a10      	ldr	r0, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 800638c:	684c      	ldr	r4, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800638e:	f020 00a0 	bic.w	r0, r0, #160	@ 0xa0
                               sClockSourceConfig->ClockFilter);
 8006392:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006394:	493a      	ldr	r1, [pc, #232]	@ (8006480 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8006396:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639a:	6a14      	ldr	r4, [r2, #32]
 800639c:	f024 0410 	bic.w	r4, r4, #16
 80063a0:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a2:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a4:	f424 4470 	bic.w	r4, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063a8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80063ac:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 80063ae:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80063b0:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063b2:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063b4:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80063b8:	6091      	str	r1, [r2, #8]
}
 80063ba:	e7d2      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80063bc:	4931      	ldr	r1, [pc, #196]	@ (8006484 <HAL_TIM_ConfigClockSource+0x188>)
 80063be:	428c      	cmp	r4, r1
 80063c0:	d006      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0xd4>
 80063c2:	d94f      	bls.n	8006464 <HAL_TIM_ConfigClockSource+0x168>
 80063c4:	4930      	ldr	r1, [pc, #192]	@ (8006488 <HAL_TIM_ConfigClockSource+0x18c>)
 80063c6:	428c      	cmp	r4, r1
 80063c8:	d002      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0xd4>
 80063ca:	3110      	adds	r1, #16
 80063cc:	428c      	cmp	r4, r1
 80063ce:	d1c9      	bne.n	8006364 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80063d0:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063d2:	492b      	ldr	r1, [pc, #172]	@ (8006480 <HAL_TIM_ConfigClockSource+0x184>)
 80063d4:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063d6:	4321      	orrs	r1, r4
 80063d8:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 80063dc:	6091      	str	r1, [r2, #8]
}
 80063de:	e7c0      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 80063e0:	2002      	movs	r0, #2
}
 80063e2:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 80063e4:	684c      	ldr	r4, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80063e6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80063e8:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ea:	6a10      	ldr	r0, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063ec:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f0:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 80063f4:	430c      	orrs	r4, r1
  tmpsmcr &= ~TIM_SMCR_TS;
 80063f6:	4922      	ldr	r1, [pc, #136]	@ (8006480 <HAL_TIM_ConfigClockSource+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f8:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063fa:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063fc:	f020 00f0 	bic.w	r0, r0, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006400:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006404:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006406:	6214      	str	r4, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006408:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800640a:	4001      	ands	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800640c:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8006410:	6091      	str	r1, [r2, #8]
}
 8006412:	e7a6      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006414:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006418:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800641a:	4328      	orrs	r0, r5
 800641c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800641e:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006422:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006426:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006428:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800642a:	6891      	ldr	r1, [r2, #8]
 800642c:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8006430:	6091      	str	r1, [r2, #8]
      break;
 8006432:	e796      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006434:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006438:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800643a:	4328      	orrs	r0, r5
 800643c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800643e:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006442:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006446:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8006448:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800644a:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800644c:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006450:	6091      	str	r1, [r2, #8]
      break;
 8006452:	e786      	b.n	8006362 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8006454:	d886      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x68>
 8006456:	2c20      	cmp	r4, #32
 8006458:	d0ba      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0xd4>
 800645a:	d80a      	bhi.n	8006472 <HAL_TIM_ConfigClockSource+0x176>
 800645c:	f034 0110 	bics.w	r1, r4, #16
 8006460:	d180      	bne.n	8006364 <HAL_TIM_ConfigClockSource+0x68>
 8006462:	e7b5      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006464:	f024 0110 	bic.w	r1, r4, #16
 8006468:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800646c:	f47f af7a 	bne.w	8006364 <HAL_TIM_ConfigClockSource+0x68>
 8006470:	e7ae      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006472:	2c30      	cmp	r4, #48	@ 0x30
 8006474:	d0ac      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0xd4>
      status = HAL_ERROR;
 8006476:	2001      	movs	r0, #1
 8006478:	e774      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x68>
 800647a:	bf00      	nop
 800647c:	ffce0088 	.word	0xffce0088
 8006480:	ffcfff8f 	.word	0xffcfff8f
 8006484:	00100020 	.word	0x00100020
 8006488:	00100030 	.word	0x00100030

0800648c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006490:	2b01      	cmp	r3, #1
 8006492:	d04b      	beq.n	800652c <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006494:	6803      	ldr	r3, [r0, #0]
 8006496:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	2002      	movs	r0, #2
{
 800649a:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800649c:	4d24      	ldr	r5, [pc, #144]	@ (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800649e:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064a2:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80064a4:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80064a6:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064a8:	d029      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80064aa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80064ae:	42ab      	cmp	r3, r5
 80064b0:	d025      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b2:	4d20      	ldr	r5, [pc, #128]	@ (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b4:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b8:	42ab      	cmp	r3, r5
 80064ba:	bf18      	it	ne
 80064bc:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 80064c0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80064c4:	bf0c      	ite	eq
 80064c6:	f04f 0c01 	moveq.w	ip, #1
 80064ca:	f04f 0c00 	movne.w	ip, #0
 80064ce:	42ab      	cmp	r3, r5
 80064d0:	bf08      	it	eq
 80064d2:	f04c 0c01 	orreq.w	ip, ip, #1
 80064d6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80064da:	42ab      	cmp	r3, r5
 80064dc:	bf08      	it	eq
 80064de:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e2:	680d      	ldr	r5, [r1, #0]
 80064e4:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e6:	4d14      	ldr	r5, [pc, #80]	@ (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 80064e8:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ea:	42ab      	cmp	r3, r5
 80064ec:	bf14      	ite	ne
 80064ee:	4660      	movne	r0, ip
 80064f0:	f04c 0001 	orreq.w	r0, ip, #1
 80064f4:	b960      	cbnz	r0, 8006510 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80064f6:	4811      	ldr	r0, [pc, #68]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80064f8:	4283      	cmp	r3, r0
 80064fa:	d009      	beq.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80064fc:	e00d      	b.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064fe:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006500:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006504:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006506:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006508:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800650c:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 800650e:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006510:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006512:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006516:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006518:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800651a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800651c:	2101      	movs	r1, #1

  return HAL_OK;
 800651e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8006520:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006524:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8006528:	bc30      	pop	{r4, r5}
 800652a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800652c:	2002      	movs	r0, #2
}
 800652e:	4770      	bx	lr
 8006530:	40010000 	.word	0x40010000
 8006534:	40000400 	.word	0x40000400
 8006538:	40001800 	.word	0x40001800
 800653c:	40014000 	.word	0x40014000

08006540 <arm_copy_f32>:
 8006540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006544:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8006548:	d01e      	beq.n	8006588 <arm_copy_f32+0x48>
 800654a:	f100 0410 	add.w	r4, r0, #16
 800654e:	f101 0310 	add.w	r3, r1, #16
 8006552:	4645      	mov	r5, r8
 8006554:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8006558:	3d01      	subs	r5, #1
 800655a:	f854 ec0c 	ldr.w	lr, [r4, #-12]
 800655e:	f103 0310 	add.w	r3, r3, #16
 8006562:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8006566:	f104 0410 	add.w	r4, r4, #16
 800656a:	f854 6c14 	ldr.w	r6, [r4, #-20]
 800656e:	f843 cc20 	str.w	ip, [r3, #-32]
 8006572:	f843 ec1c 	str.w	lr, [r3, #-28]
 8006576:	f843 7c18 	str.w	r7, [r3, #-24]
 800657a:	f843 6c14 	str.w	r6, [r3, #-20]
 800657e:	d1e9      	bne.n	8006554 <arm_copy_f32+0x14>
 8006580:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8006584:	4440      	add	r0, r8
 8006586:	4441      	add	r1, r8
 8006588:	f012 0203 	ands.w	r2, r2, #3
 800658c:	d005      	beq.n	800659a <arm_copy_f32+0x5a>
 800658e:	f850 3b04 	ldr.w	r3, [r0], #4
 8006592:	3a01      	subs	r2, #1
 8006594:	f841 3b04 	str.w	r3, [r1], #4
 8006598:	d1f9      	bne.n	800658e <arm_copy_f32+0x4e>
 800659a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800659e:	bf00      	nop

080065a0 <arm_rfft_fast_init_f32>:
 80065a0:	084b      	lsrs	r3, r1, #1
 80065a2:	2b80      	cmp	r3, #128	@ 0x80
 80065a4:	b430      	push	{r4, r5}
 80065a6:	8201      	strh	r1, [r0, #16]
 80065a8:	8003      	strh	r3, [r0, #0]
 80065aa:	d06f      	beq.n	800668c <arm_rfft_fast_init_f32+0xec>
 80065ac:	d916      	bls.n	80065dc <arm_rfft_fast_init_f32+0x3c>
 80065ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065b2:	d05e      	beq.n	8006672 <arm_rfft_fast_init_f32+0xd2>
 80065b4:	d935      	bls.n	8006622 <arm_rfft_fast_init_f32+0x82>
 80065b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ba:	d025      	beq.n	8006608 <arm_rfft_fast_init_f32+0x68>
 80065bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c0:	d112      	bne.n	80065e8 <arm_rfft_fast_init_f32+0x48>
 80065c2:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 80065c6:	4c37      	ldr	r4, [pc, #220]	@ (80066a4 <arm_rfft_fast_init_f32+0x104>)
 80065c8:	4937      	ldr	r1, [pc, #220]	@ (80066a8 <arm_rfft_fast_init_f32+0x108>)
 80065ca:	2300      	movs	r3, #0
 80065cc:	4a37      	ldr	r2, [pc, #220]	@ (80066ac <arm_rfft_fast_init_f32+0x10c>)
 80065ce:	8185      	strh	r5, [r0, #12]
 80065d0:	6084      	str	r4, [r0, #8]
 80065d2:	6041      	str	r1, [r0, #4]
 80065d4:	6142      	str	r2, [r0, #20]
 80065d6:	b258      	sxtb	r0, r3
 80065d8:	bc30      	pop	{r4, r5}
 80065da:	4770      	bx	lr
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d030      	beq.n	8006642 <arm_rfft_fast_init_f32+0xa2>
 80065e0:	2b40      	cmp	r3, #64	@ 0x40
 80065e2:	d005      	beq.n	80065f0 <arm_rfft_fast_init_f32+0x50>
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d038      	beq.n	800665a <arm_rfft_fast_init_f32+0xba>
 80065e8:	23ff      	movs	r3, #255	@ 0xff
 80065ea:	bc30      	pop	{r4, r5}
 80065ec:	b258      	sxtb	r0, r3
 80065ee:	4770      	bx	lr
 80065f0:	2538      	movs	r5, #56	@ 0x38
 80065f2:	4c2f      	ldr	r4, [pc, #188]	@ (80066b0 <arm_rfft_fast_init_f32+0x110>)
 80065f4:	492f      	ldr	r1, [pc, #188]	@ (80066b4 <arm_rfft_fast_init_f32+0x114>)
 80065f6:	2300      	movs	r3, #0
 80065f8:	4a2f      	ldr	r2, [pc, #188]	@ (80066b8 <arm_rfft_fast_init_f32+0x118>)
 80065fa:	8185      	strh	r5, [r0, #12]
 80065fc:	6084      	str	r4, [r0, #8]
 80065fe:	6041      	str	r1, [r0, #4]
 8006600:	6142      	str	r2, [r0, #20]
 8006602:	b258      	sxtb	r0, r3
 8006604:	bc30      	pop	{r4, r5}
 8006606:	4770      	bx	lr
 8006608:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800660c:	4c2b      	ldr	r4, [pc, #172]	@ (80066bc <arm_rfft_fast_init_f32+0x11c>)
 800660e:	492c      	ldr	r1, [pc, #176]	@ (80066c0 <arm_rfft_fast_init_f32+0x120>)
 8006610:	2300      	movs	r3, #0
 8006612:	4a2c      	ldr	r2, [pc, #176]	@ (80066c4 <arm_rfft_fast_init_f32+0x124>)
 8006614:	8185      	strh	r5, [r0, #12]
 8006616:	6084      	str	r4, [r0, #8]
 8006618:	6041      	str	r1, [r0, #4]
 800661a:	6142      	str	r2, [r0, #20]
 800661c:	b258      	sxtb	r0, r3
 800661e:	bc30      	pop	{r4, r5}
 8006620:	4770      	bx	lr
 8006622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006626:	d1df      	bne.n	80065e8 <arm_rfft_fast_init_f32+0x48>
 8006628:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800662c:	4c26      	ldr	r4, [pc, #152]	@ (80066c8 <arm_rfft_fast_init_f32+0x128>)
 800662e:	4927      	ldr	r1, [pc, #156]	@ (80066cc <arm_rfft_fast_init_f32+0x12c>)
 8006630:	2300      	movs	r3, #0
 8006632:	4a27      	ldr	r2, [pc, #156]	@ (80066d0 <arm_rfft_fast_init_f32+0x130>)
 8006634:	8185      	strh	r5, [r0, #12]
 8006636:	6084      	str	r4, [r0, #8]
 8006638:	6041      	str	r1, [r0, #4]
 800663a:	6142      	str	r2, [r0, #20]
 800663c:	b258      	sxtb	r0, r3
 800663e:	bc30      	pop	{r4, r5}
 8006640:	4770      	bx	lr
 8006642:	2530      	movs	r5, #48	@ 0x30
 8006644:	4c23      	ldr	r4, [pc, #140]	@ (80066d4 <arm_rfft_fast_init_f32+0x134>)
 8006646:	4924      	ldr	r1, [pc, #144]	@ (80066d8 <arm_rfft_fast_init_f32+0x138>)
 8006648:	2300      	movs	r3, #0
 800664a:	4a24      	ldr	r2, [pc, #144]	@ (80066dc <arm_rfft_fast_init_f32+0x13c>)
 800664c:	8185      	strh	r5, [r0, #12]
 800664e:	6084      	str	r4, [r0, #8]
 8006650:	6041      	str	r1, [r0, #4]
 8006652:	6142      	str	r2, [r0, #20]
 8006654:	b258      	sxtb	r0, r3
 8006656:	bc30      	pop	{r4, r5}
 8006658:	4770      	bx	lr
 800665a:	2514      	movs	r5, #20
 800665c:	4c20      	ldr	r4, [pc, #128]	@ (80066e0 <arm_rfft_fast_init_f32+0x140>)
 800665e:	4921      	ldr	r1, [pc, #132]	@ (80066e4 <arm_rfft_fast_init_f32+0x144>)
 8006660:	2300      	movs	r3, #0
 8006662:	4a21      	ldr	r2, [pc, #132]	@ (80066e8 <arm_rfft_fast_init_f32+0x148>)
 8006664:	8185      	strh	r5, [r0, #12]
 8006666:	6084      	str	r4, [r0, #8]
 8006668:	6041      	str	r1, [r0, #4]
 800666a:	6142      	str	r2, [r0, #20]
 800666c:	b258      	sxtb	r0, r3
 800666e:	bc30      	pop	{r4, r5}
 8006670:	4770      	bx	lr
 8006672:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 8006676:	4c1d      	ldr	r4, [pc, #116]	@ (80066ec <arm_rfft_fast_init_f32+0x14c>)
 8006678:	491d      	ldr	r1, [pc, #116]	@ (80066f0 <arm_rfft_fast_init_f32+0x150>)
 800667a:	2300      	movs	r3, #0
 800667c:	4a1d      	ldr	r2, [pc, #116]	@ (80066f4 <arm_rfft_fast_init_f32+0x154>)
 800667e:	8185      	strh	r5, [r0, #12]
 8006680:	6084      	str	r4, [r0, #8]
 8006682:	6041      	str	r1, [r0, #4]
 8006684:	6142      	str	r2, [r0, #20]
 8006686:	b258      	sxtb	r0, r3
 8006688:	bc30      	pop	{r4, r5}
 800668a:	4770      	bx	lr
 800668c:	25d0      	movs	r5, #208	@ 0xd0
 800668e:	4c1a      	ldr	r4, [pc, #104]	@ (80066f8 <arm_rfft_fast_init_f32+0x158>)
 8006690:	491a      	ldr	r1, [pc, #104]	@ (80066fc <arm_rfft_fast_init_f32+0x15c>)
 8006692:	2300      	movs	r3, #0
 8006694:	4a1a      	ldr	r2, [pc, #104]	@ (8006700 <arm_rfft_fast_init_f32+0x160>)
 8006696:	8185      	strh	r5, [r0, #12]
 8006698:	6084      	str	r4, [r0, #8]
 800669a:	6041      	str	r1, [r0, #4]
 800669c:	6142      	str	r2, [r0, #20]
 800669e:	b258      	sxtb	r0, r3
 80066a0:	bc30      	pop	{r4, r5}
 80066a2:	4770      	bx	lr
 80066a4:	080719a0 	.word	0x080719a0
 80066a8:	08062b98 	.word	0x08062b98
 80066ac:	08068d08 	.word	0x08068d08
 80066b0:	08066c98 	.word	0x08066c98
 80066b4:	08073760 	.word	0x08073760
 80066b8:	08075c50 	.word	0x08075c50
 80066bc:	0806f688 	.word	0x0806f688
 80066c0:	0806d588 	.word	0x0806d588
 80066c4:	08066d08 	.word	0x08066d08
 80066c8:	080758e0 	.word	0x080758e0
 80066cc:	0806cd08 	.word	0x0806cd08
 80066d0:	08073960 	.word	0x08073960
 80066d4:	08070540 	.word	0x08070540
 80066d8:	0806f588 	.word	0x0806f588
 80066dc:	08066b98 	.word	0x08066b98
 80066e0:	08070498 	.word	0x08070498
 80066e4:	0806d508 	.word	0x0806d508
 80066e8:	080704c0 	.word	0x080704c0
 80066ec:	08074160 	.word	0x08074160
 80066f0:	080709a0 	.word	0x080709a0
 80066f4:	080744e0 	.word	0x080744e0
 80066f8:	08075e50 	.word	0x08075e50
 80066fc:	080705a0 	.word	0x080705a0
 8006700:	080754e0 	.word	0x080754e0

08006704 <arm_scale_f32>:
 8006704:	b470      	push	{r4, r5, r6}
 8006706:	0896      	lsrs	r6, r2, #2
 8006708:	d025      	beq.n	8006756 <arm_scale_f32+0x52>
 800670a:	f100 0410 	add.w	r4, r0, #16
 800670e:	f101 0310 	add.w	r3, r1, #16
 8006712:	4635      	mov	r5, r6
 8006714:	ed14 6a04 	vldr	s12, [r4, #-16]
 8006718:	3d01      	subs	r5, #1
 800671a:	ed54 6a03 	vldr	s13, [r4, #-12]
 800671e:	f103 0310 	add.w	r3, r3, #16
 8006722:	ed14 7a02 	vldr	s14, [r4, #-8]
 8006726:	ee26 6a00 	vmul.f32	s12, s12, s0
 800672a:	ed54 7a01 	vldr	s15, [r4, #-4]
 800672e:	ee66 6a80 	vmul.f32	s13, s13, s0
 8006732:	ee27 7a00 	vmul.f32	s14, s14, s0
 8006736:	f104 0410 	add.w	r4, r4, #16
 800673a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800673e:	ed03 6a08 	vstr	s12, [r3, #-32]	@ 0xffffffe0
 8006742:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8006746:	ed03 7a06 	vstr	s14, [r3, #-24]	@ 0xffffffe8
 800674a:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800674e:	d1e1      	bne.n	8006714 <arm_scale_f32+0x10>
 8006750:	0136      	lsls	r6, r6, #4
 8006752:	4430      	add	r0, r6
 8006754:	4431      	add	r1, r6
 8006756:	f012 0203 	ands.w	r2, r2, #3
 800675a:	d007      	beq.n	800676c <arm_scale_f32+0x68>
 800675c:	ecf0 7a01 	vldmia	r0!, {s15}
 8006760:	3a01      	subs	r2, #1
 8006762:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006766:	ece1 7a01 	vstmia	r1!, {s15}
 800676a:	d1f7      	bne.n	800675c <arm_scale_f32+0x58>
 800676c:	bc70      	pop	{r4, r5, r6}
 800676e:	4770      	bx	lr

08006770 <calloc>:
 8006770:	4b02      	ldr	r3, [pc, #8]	@ (800677c <calloc+0xc>)
 8006772:	460a      	mov	r2, r1
 8006774:	4601      	mov	r1, r0
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	f000 b802 	b.w	8006780 <_calloc_r>
 800677c:	240001b0 	.word	0x240001b0

08006780 <_calloc_r>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	fba1 5402 	umull	r5, r4, r1, r2
 8006786:	b934      	cbnz	r4, 8006796 <_calloc_r+0x16>
 8006788:	4629      	mov	r1, r5
 800678a:	f000 f837 	bl	80067fc <_malloc_r>
 800678e:	4606      	mov	r6, r0
 8006790:	b928      	cbnz	r0, 800679e <_calloc_r+0x1e>
 8006792:	4630      	mov	r0, r6
 8006794:	bd70      	pop	{r4, r5, r6, pc}
 8006796:	220c      	movs	r2, #12
 8006798:	6002      	str	r2, [r0, #0]
 800679a:	2600      	movs	r6, #0
 800679c:	e7f9      	b.n	8006792 <_calloc_r+0x12>
 800679e:	462a      	mov	r2, r5
 80067a0:	4621      	mov	r1, r4
 80067a2:	f000 f8b7 	bl	8006914 <memset>
 80067a6:	e7f4      	b.n	8006792 <_calloc_r+0x12>

080067a8 <malloc>:
 80067a8:	4b02      	ldr	r3, [pc, #8]	@ (80067b4 <malloc+0xc>)
 80067aa:	4601      	mov	r1, r0
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f000 b825 	b.w	80067fc <_malloc_r>
 80067b2:	bf00      	nop
 80067b4:	240001b0 	.word	0x240001b0

080067b8 <sbrk_aligned>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	4e0f      	ldr	r6, [pc, #60]	@ (80067f8 <sbrk_aligned+0x40>)
 80067bc:	460c      	mov	r4, r1
 80067be:	6831      	ldr	r1, [r6, #0]
 80067c0:	4605      	mov	r5, r0
 80067c2:	b911      	cbnz	r1, 80067ca <sbrk_aligned+0x12>
 80067c4:	f000 f8ae 	bl	8006924 <_sbrk_r>
 80067c8:	6030      	str	r0, [r6, #0]
 80067ca:	4621      	mov	r1, r4
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 f8a9 	bl	8006924 <_sbrk_r>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	d103      	bne.n	80067de <sbrk_aligned+0x26>
 80067d6:	f04f 34ff 	mov.w	r4, #4294967295
 80067da:	4620      	mov	r0, r4
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
 80067de:	1cc4      	adds	r4, r0, #3
 80067e0:	f024 0403 	bic.w	r4, r4, #3
 80067e4:	42a0      	cmp	r0, r4
 80067e6:	d0f8      	beq.n	80067da <sbrk_aligned+0x22>
 80067e8:	1a21      	subs	r1, r4, r0
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 f89a 	bl	8006924 <_sbrk_r>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d1f2      	bne.n	80067da <sbrk_aligned+0x22>
 80067f4:	e7ef      	b.n	80067d6 <sbrk_aligned+0x1e>
 80067f6:	bf00      	nop
 80067f8:	2406d488 	.word	0x2406d488

080067fc <_malloc_r>:
 80067fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006800:	1ccd      	adds	r5, r1, #3
 8006802:	f025 0503 	bic.w	r5, r5, #3
 8006806:	3508      	adds	r5, #8
 8006808:	2d0c      	cmp	r5, #12
 800680a:	bf38      	it	cc
 800680c:	250c      	movcc	r5, #12
 800680e:	2d00      	cmp	r5, #0
 8006810:	4606      	mov	r6, r0
 8006812:	db01      	blt.n	8006818 <_malloc_r+0x1c>
 8006814:	42a9      	cmp	r1, r5
 8006816:	d904      	bls.n	8006822 <_malloc_r+0x26>
 8006818:	230c      	movs	r3, #12
 800681a:	6033      	str	r3, [r6, #0]
 800681c:	2000      	movs	r0, #0
 800681e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80068f8 <_malloc_r+0xfc>
 8006826:	f000 f869 	bl	80068fc <__malloc_lock>
 800682a:	f8d8 3000 	ldr.w	r3, [r8]
 800682e:	461c      	mov	r4, r3
 8006830:	bb44      	cbnz	r4, 8006884 <_malloc_r+0x88>
 8006832:	4629      	mov	r1, r5
 8006834:	4630      	mov	r0, r6
 8006836:	f7ff ffbf 	bl	80067b8 <sbrk_aligned>
 800683a:	1c43      	adds	r3, r0, #1
 800683c:	4604      	mov	r4, r0
 800683e:	d158      	bne.n	80068f2 <_malloc_r+0xf6>
 8006840:	f8d8 4000 	ldr.w	r4, [r8]
 8006844:	4627      	mov	r7, r4
 8006846:	2f00      	cmp	r7, #0
 8006848:	d143      	bne.n	80068d2 <_malloc_r+0xd6>
 800684a:	2c00      	cmp	r4, #0
 800684c:	d04b      	beq.n	80068e6 <_malloc_r+0xea>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	4639      	mov	r1, r7
 8006852:	4630      	mov	r0, r6
 8006854:	eb04 0903 	add.w	r9, r4, r3
 8006858:	f000 f864 	bl	8006924 <_sbrk_r>
 800685c:	4581      	cmp	r9, r0
 800685e:	d142      	bne.n	80068e6 <_malloc_r+0xea>
 8006860:	6821      	ldr	r1, [r4, #0]
 8006862:	1a6d      	subs	r5, r5, r1
 8006864:	4629      	mov	r1, r5
 8006866:	4630      	mov	r0, r6
 8006868:	f7ff ffa6 	bl	80067b8 <sbrk_aligned>
 800686c:	3001      	adds	r0, #1
 800686e:	d03a      	beq.n	80068e6 <_malloc_r+0xea>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	442b      	add	r3, r5
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	f8d8 3000 	ldr.w	r3, [r8]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	bb62      	cbnz	r2, 80068d8 <_malloc_r+0xdc>
 800687e:	f8c8 7000 	str.w	r7, [r8]
 8006882:	e00f      	b.n	80068a4 <_malloc_r+0xa8>
 8006884:	6822      	ldr	r2, [r4, #0]
 8006886:	1b52      	subs	r2, r2, r5
 8006888:	d420      	bmi.n	80068cc <_malloc_r+0xd0>
 800688a:	2a0b      	cmp	r2, #11
 800688c:	d917      	bls.n	80068be <_malloc_r+0xc2>
 800688e:	1961      	adds	r1, r4, r5
 8006890:	42a3      	cmp	r3, r4
 8006892:	6025      	str	r5, [r4, #0]
 8006894:	bf18      	it	ne
 8006896:	6059      	strne	r1, [r3, #4]
 8006898:	6863      	ldr	r3, [r4, #4]
 800689a:	bf08      	it	eq
 800689c:	f8c8 1000 	streq.w	r1, [r8]
 80068a0:	5162      	str	r2, [r4, r5]
 80068a2:	604b      	str	r3, [r1, #4]
 80068a4:	4630      	mov	r0, r6
 80068a6:	f000 f82f 	bl	8006908 <__malloc_unlock>
 80068aa:	f104 000b 	add.w	r0, r4, #11
 80068ae:	1d23      	adds	r3, r4, #4
 80068b0:	f020 0007 	bic.w	r0, r0, #7
 80068b4:	1ac2      	subs	r2, r0, r3
 80068b6:	bf1c      	itt	ne
 80068b8:	1a1b      	subne	r3, r3, r0
 80068ba:	50a3      	strne	r3, [r4, r2]
 80068bc:	e7af      	b.n	800681e <_malloc_r+0x22>
 80068be:	6862      	ldr	r2, [r4, #4]
 80068c0:	42a3      	cmp	r3, r4
 80068c2:	bf0c      	ite	eq
 80068c4:	f8c8 2000 	streq.w	r2, [r8]
 80068c8:	605a      	strne	r2, [r3, #4]
 80068ca:	e7eb      	b.n	80068a4 <_malloc_r+0xa8>
 80068cc:	4623      	mov	r3, r4
 80068ce:	6864      	ldr	r4, [r4, #4]
 80068d0:	e7ae      	b.n	8006830 <_malloc_r+0x34>
 80068d2:	463c      	mov	r4, r7
 80068d4:	687f      	ldr	r7, [r7, #4]
 80068d6:	e7b6      	b.n	8006846 <_malloc_r+0x4a>
 80068d8:	461a      	mov	r2, r3
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d1fb      	bne.n	80068d8 <_malloc_r+0xdc>
 80068e0:	2300      	movs	r3, #0
 80068e2:	6053      	str	r3, [r2, #4]
 80068e4:	e7de      	b.n	80068a4 <_malloc_r+0xa8>
 80068e6:	230c      	movs	r3, #12
 80068e8:	6033      	str	r3, [r6, #0]
 80068ea:	4630      	mov	r0, r6
 80068ec:	f000 f80c 	bl	8006908 <__malloc_unlock>
 80068f0:	e794      	b.n	800681c <_malloc_r+0x20>
 80068f2:	6005      	str	r5, [r0, #0]
 80068f4:	e7d6      	b.n	80068a4 <_malloc_r+0xa8>
 80068f6:	bf00      	nop
 80068f8:	2406d48c 	.word	0x2406d48c

080068fc <__malloc_lock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	@ (8006904 <__malloc_lock+0x8>)
 80068fe:	f000 b84b 	b.w	8006998 <__retarget_lock_acquire_recursive>
 8006902:	bf00      	nop
 8006904:	2406d5cc 	.word	0x2406d5cc

08006908 <__malloc_unlock>:
 8006908:	4801      	ldr	r0, [pc, #4]	@ (8006910 <__malloc_unlock+0x8>)
 800690a:	f000 b846 	b.w	800699a <__retarget_lock_release_recursive>
 800690e:	bf00      	nop
 8006910:	2406d5cc 	.word	0x2406d5cc

08006914 <memset>:
 8006914:	4402      	add	r2, r0
 8006916:	4603      	mov	r3, r0
 8006918:	4293      	cmp	r3, r2
 800691a:	d100      	bne.n	800691e <memset+0xa>
 800691c:	4770      	bx	lr
 800691e:	f803 1b01 	strb.w	r1, [r3], #1
 8006922:	e7f9      	b.n	8006918 <memset+0x4>

08006924 <_sbrk_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4d06      	ldr	r5, [pc, #24]	@ (8006940 <_sbrk_r+0x1c>)
 8006928:	2300      	movs	r3, #0
 800692a:	4604      	mov	r4, r0
 800692c:	4608      	mov	r0, r1
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	f7fa fd10 	bl	8001354 <_sbrk>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_sbrk_r+0x1a>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_sbrk_r+0x1a>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	2406d5c8 	.word	0x2406d5c8

08006944 <__errno>:
 8006944:	4b01      	ldr	r3, [pc, #4]	@ (800694c <__errno+0x8>)
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	240001b0 	.word	0x240001b0

08006950 <__libc_init_array>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	4d0d      	ldr	r5, [pc, #52]	@ (8006988 <__libc_init_array+0x38>)
 8006954:	4c0d      	ldr	r4, [pc, #52]	@ (800698c <__libc_init_array+0x3c>)
 8006956:	1b64      	subs	r4, r4, r5
 8006958:	10a4      	asrs	r4, r4, #2
 800695a:	2600      	movs	r6, #0
 800695c:	42a6      	cmp	r6, r4
 800695e:	d109      	bne.n	8006974 <__libc_init_array+0x24>
 8006960:	4d0b      	ldr	r5, [pc, #44]	@ (8006990 <__libc_init_array+0x40>)
 8006962:	4c0c      	ldr	r4, [pc, #48]	@ (8006994 <__libc_init_array+0x44>)
 8006964:	f000 f8fa 	bl	8006b5c <_init>
 8006968:	1b64      	subs	r4, r4, r5
 800696a:	10a4      	asrs	r4, r4, #2
 800696c:	2600      	movs	r6, #0
 800696e:	42a6      	cmp	r6, r4
 8006970:	d105      	bne.n	800697e <__libc_init_array+0x2e>
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	f855 3b04 	ldr.w	r3, [r5], #4
 8006978:	4798      	blx	r3
 800697a:	3601      	adds	r6, #1
 800697c:	e7ee      	b.n	800695c <__libc_init_array+0xc>
 800697e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006982:	4798      	blx	r3
 8006984:	3601      	adds	r6, #1
 8006986:	e7f2      	b.n	800696e <__libc_init_array+0x1e>
 8006988:	08076130 	.word	0x08076130
 800698c:	08076130 	.word	0x08076130
 8006990:	08076130 	.word	0x08076130
 8006994:	08076134 	.word	0x08076134

08006998 <__retarget_lock_acquire_recursive>:
 8006998:	4770      	bx	lr

0800699a <__retarget_lock_release_recursive>:
 800699a:	4770      	bx	lr

0800699c <sinf_poly>:
 800699c:	07cb      	lsls	r3, r1, #31
 800699e:	d412      	bmi.n	80069c6 <sinf_poly+0x2a>
 80069a0:	ee21 5b00 	vmul.f64	d5, d1, d0
 80069a4:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80069a8:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80069ac:	eea6 7b01 	vfma.f64	d7, d6, d1
 80069b0:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80069b4:	ee21 1b05 	vmul.f64	d1, d1, d5
 80069b8:	eea6 0b05 	vfma.f64	d0, d6, d5
 80069bc:	eea7 0b01 	vfma.f64	d0, d7, d1
 80069c0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80069c4:	4770      	bx	lr
 80069c6:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80069ca:	ee21 5b01 	vmul.f64	d5, d1, d1
 80069ce:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80069d2:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80069d6:	eea1 7b06 	vfma.f64	d7, d1, d6
 80069da:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80069de:	eea1 0b06 	vfma.f64	d0, d1, d6
 80069e2:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80069e6:	ee21 1b05 	vmul.f64	d1, d1, d5
 80069ea:	eea5 0b06 	vfma.f64	d0, d5, d6
 80069ee:	e7e5      	b.n	80069bc <sinf_poly+0x20>

080069f0 <sinf>:
 80069f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069f2:	ee10 4a10 	vmov	r4, s0
 80069f6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80069fa:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80069fe:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8006a02:	eef0 7a40 	vmov.f32	s15, s0
 8006a06:	d218      	bcs.n	8006a3a <sinf+0x4a>
 8006a08:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006a0c:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8006a10:	d20a      	bcs.n	8006a28 <sinf+0x38>
 8006a12:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8006a16:	d103      	bne.n	8006a20 <sinf+0x30>
 8006a18:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8006a1c:	ed8d 1a01 	vstr	s2, [sp, #4]
 8006a20:	eeb0 0a67 	vmov.f32	s0, s15
 8006a24:	b003      	add	sp, #12
 8006a26:	bd30      	pop	{r4, r5, pc}
 8006a28:	483b      	ldr	r0, [pc, #236]	@ (8006b18 <sinf+0x128>)
 8006a2a:	eeb0 0b46 	vmov.f64	d0, d6
 8006a2e:	2100      	movs	r1, #0
 8006a30:	b003      	add	sp, #12
 8006a32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a36:	f7ff bfb1 	b.w	800699c <sinf_poly>
 8006a3a:	f240 422e 	movw	r2, #1070	@ 0x42e
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d824      	bhi.n	8006a8c <sinf+0x9c>
 8006a42:	4b35      	ldr	r3, [pc, #212]	@ (8006b18 <sinf+0x128>)
 8006a44:	ed93 7b08 	vldr	d7, [r3, #32]
 8006a48:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006a4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006a50:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8006a54:	ee17 1a90 	vmov	r1, s15
 8006a58:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8006a5c:	1609      	asrs	r1, r1, #24
 8006a5e:	ee07 1a90 	vmov	s15, r1
 8006a62:	f001 0203 	and.w	r2, r1, #3
 8006a66:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006a6a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006a6e:	ed92 0b00 	vldr	d0, [r2]
 8006a72:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8006a76:	f011 0f02 	tst.w	r1, #2
 8006a7a:	eea5 6b47 	vfms.f64	d6, d5, d7
 8006a7e:	bf08      	it	eq
 8006a80:	4618      	moveq	r0, r3
 8006a82:	ee26 1b06 	vmul.f64	d1, d6, d6
 8006a86:	ee20 0b06 	vmul.f64	d0, d0, d6
 8006a8a:	e7d1      	b.n	8006a30 <sinf+0x40>
 8006a8c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8006a90:	d237      	bcs.n	8006b02 <sinf+0x112>
 8006a92:	4922      	ldr	r1, [pc, #136]	@ (8006b1c <sinf+0x12c>)
 8006a94:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8006a98:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8006a9c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8006aa0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8006aa4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006aa8:	6a10      	ldr	r0, [r2, #32]
 8006aaa:	6912      	ldr	r2, [r2, #16]
 8006aac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ab0:	40ab      	lsls	r3, r5
 8006ab2:	fba0 5003 	umull	r5, r0, r0, r3
 8006ab6:	4359      	muls	r1, r3
 8006ab8:	fbe3 0102 	umlal	r0, r1, r3, r2
 8006abc:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8006ac0:	0f9d      	lsrs	r5, r3, #30
 8006ac2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006ac6:	1ac9      	subs	r1, r1, r3
 8006ac8:	f7f9 fd94 	bl	80005f4 <__aeabi_l2d>
 8006acc:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8006ad0:	4b11      	ldr	r3, [pc, #68]	@ (8006b18 <sinf+0x128>)
 8006ad2:	f004 0203 	and.w	r2, r4, #3
 8006ad6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006ada:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8006b10 <sinf+0x120>
 8006ade:	ed92 0b00 	vldr	d0, [r2]
 8006ae2:	ec41 0b17 	vmov	d7, r0, r1
 8006ae6:	f014 0f02 	tst.w	r4, #2
 8006aea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006aee:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8006af2:	4629      	mov	r1, r5
 8006af4:	bf08      	it	eq
 8006af6:	4618      	moveq	r0, r3
 8006af8:	ee27 1b07 	vmul.f64	d1, d7, d7
 8006afc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006b00:	e796      	b.n	8006a30 <sinf+0x40>
 8006b02:	b003      	add	sp, #12
 8006b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b08:	f000 b818 	b.w	8006b3c <__math_invalidf>
 8006b0c:	f3af 8000 	nop.w
 8006b10:	54442d18 	.word	0x54442d18
 8006b14:	3c1921fb 	.word	0x3c1921fb
 8006b18:	08076050 	.word	0x08076050
 8006b1c:	08075ff0 	.word	0x08075ff0

08006b20 <with_errnof>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	ed2d 8b02 	vpush	{d8}
 8006b26:	eeb0 8a40 	vmov.f32	s16, s0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	f7ff ff0a 	bl	8006944 <__errno>
 8006b30:	eeb0 0a48 	vmov.f32	s0, s16
 8006b34:	ecbd 8b02 	vpop	{d8}
 8006b38:	6004      	str	r4, [r0, #0]
 8006b3a:	bd10      	pop	{r4, pc}

08006b3c <__math_invalidf>:
 8006b3c:	eef0 7a40 	vmov.f32	s15, s0
 8006b40:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006b44:	eef4 7a67 	vcmp.f32	s15, s15
 8006b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8006b50:	d602      	bvs.n	8006b58 <__math_invalidf+0x1c>
 8006b52:	2021      	movs	r0, #33	@ 0x21
 8006b54:	f7ff bfe4 	b.w	8006b20 <with_errnof>
 8006b58:	4770      	bx	lr
	...

08006b5c <_init>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	bf00      	nop
 8006b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b62:	bc08      	pop	{r3}
 8006b64:	469e      	mov	lr, r3
 8006b66:	4770      	bx	lr

08006b68 <_fini>:
 8006b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6a:	bf00      	nop
 8006b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6e:	bc08      	pop	{r3}
 8006b70:	469e      	mov	lr, r3
 8006b72:	4770      	bx	lr
